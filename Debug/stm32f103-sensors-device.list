
stm32f103-sensors-device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b154  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800b264  0800b264  0001b264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b330  0800b330  000200e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b330  0800b330  0001b330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b338  0800b338  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000001c  0800b338  0800b338  0001b338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  0800b354  0800b354  0001b354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  0800b364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002570  200000e8  0800b448  000200e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002658  0800b448  00022658  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000764e9  00000000  00000000  0002010d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ab9b  00000000  00000000  000965f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00029e59  00000000  00000000  000a1191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ad8  00000000  00000000  000caff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003c28  00000000  00000000  000ccac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022706  00000000  00000000  000d06f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000358da  00000000  00000000  000f2df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0241  00000000  00000000  001286d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001d8911  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e08  00000000  00000000  001d8964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000e8 	.word	0x200000e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b24c 	.word	0x0800b24c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000ec 	.word	0x200000ec
 800014c:	0800b24c 	.word	0x0800b24c

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_d2f>:
 8000b64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b68:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b6c:	bf24      	itt	cs
 8000b6e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b72:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b76:	d90d      	bls.n	8000b94 <__aeabi_d2f+0x30>
 8000b78:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b7c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b80:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b84:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b88:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b8c:	bf08      	it	eq
 8000b8e:	f020 0001 	biceq.w	r0, r0, #1
 8000b92:	4770      	bx	lr
 8000b94:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b98:	d121      	bne.n	8000bde <__aeabi_d2f+0x7a>
 8000b9a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9e:	bfbc      	itt	lt
 8000ba0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	4770      	bxlt	lr
 8000ba6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000baa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bae:	f1c2 0218 	rsb	r2, r2, #24
 8000bb2:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bba:	fa20 f002 	lsr.w	r0, r0, r2
 8000bbe:	bf18      	it	ne
 8000bc0:	f040 0001 	orrne.w	r0, r0, #1
 8000bc4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bcc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd0:	ea40 000c 	orr.w	r0, r0, ip
 8000bd4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bdc:	e7cc      	b.n	8000b78 <__aeabi_d2f+0x14>
 8000bde:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be2:	d107      	bne.n	8000bf4 <__aeabi_d2f+0x90>
 8000be4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be8:	bf1e      	ittt	ne
 8000bea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bf2:	4770      	bxne	lr
 8000bf4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop

08000c04 <__aeabi_frsub>:
 8000c04:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c08:	e002      	b.n	8000c10 <__addsf3>
 8000c0a:	bf00      	nop

08000c0c <__aeabi_fsub>:
 8000c0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c10 <__addsf3>:
 8000c10:	0042      	lsls	r2, r0, #1
 8000c12:	bf1f      	itttt	ne
 8000c14:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c18:	ea92 0f03 	teqne	r2, r3
 8000c1c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c20:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c24:	d06a      	beq.n	8000cfc <__addsf3+0xec>
 8000c26:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c2a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c2e:	bfc1      	itttt	gt
 8000c30:	18d2      	addgt	r2, r2, r3
 8000c32:	4041      	eorgt	r1, r0
 8000c34:	4048      	eorgt	r0, r1
 8000c36:	4041      	eorgt	r1, r0
 8000c38:	bfb8      	it	lt
 8000c3a:	425b      	neglt	r3, r3
 8000c3c:	2b19      	cmp	r3, #25
 8000c3e:	bf88      	it	hi
 8000c40:	4770      	bxhi	lr
 8000c42:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c4e:	bf18      	it	ne
 8000c50:	4240      	negne	r0, r0
 8000c52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c56:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c5e:	bf18      	it	ne
 8000c60:	4249      	negne	r1, r1
 8000c62:	ea92 0f03 	teq	r2, r3
 8000c66:	d03f      	beq.n	8000ce8 <__addsf3+0xd8>
 8000c68:	f1a2 0201 	sub.w	r2, r2, #1
 8000c6c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c70:	eb10 000c 	adds.w	r0, r0, ip
 8000c74:	f1c3 0320 	rsb	r3, r3, #32
 8000c78:	fa01 f103 	lsl.w	r1, r1, r3
 8000c7c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c80:	d502      	bpl.n	8000c88 <__addsf3+0x78>
 8000c82:	4249      	negs	r1, r1
 8000c84:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c88:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c8c:	d313      	bcc.n	8000cb6 <__addsf3+0xa6>
 8000c8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c92:	d306      	bcc.n	8000ca2 <__addsf3+0x92>
 8000c94:	0840      	lsrs	r0, r0, #1
 8000c96:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c9a:	f102 0201 	add.w	r2, r2, #1
 8000c9e:	2afe      	cmp	r2, #254	; 0xfe
 8000ca0:	d251      	bcs.n	8000d46 <__addsf3+0x136>
 8000ca2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ca6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000caa:	bf08      	it	eq
 8000cac:	f020 0001 	biceq.w	r0, r0, #1
 8000cb0:	ea40 0003 	orr.w	r0, r0, r3
 8000cb4:	4770      	bx	lr
 8000cb6:	0049      	lsls	r1, r1, #1
 8000cb8:	eb40 0000 	adc.w	r0, r0, r0
 8000cbc:	3a01      	subs	r2, #1
 8000cbe:	bf28      	it	cs
 8000cc0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cc4:	d2ed      	bcs.n	8000ca2 <__addsf3+0x92>
 8000cc6:	fab0 fc80 	clz	ip, r0
 8000cca:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cce:	ebb2 020c 	subs.w	r2, r2, ip
 8000cd2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cd6:	bfaa      	itet	ge
 8000cd8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cdc:	4252      	neglt	r2, r2
 8000cde:	4318      	orrge	r0, r3
 8000ce0:	bfbc      	itt	lt
 8000ce2:	40d0      	lsrlt	r0, r2
 8000ce4:	4318      	orrlt	r0, r3
 8000ce6:	4770      	bx	lr
 8000ce8:	f092 0f00 	teq	r2, #0
 8000cec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cf0:	bf06      	itte	eq
 8000cf2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cf6:	3201      	addeq	r2, #1
 8000cf8:	3b01      	subne	r3, #1
 8000cfa:	e7b5      	b.n	8000c68 <__addsf3+0x58>
 8000cfc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d04:	bf18      	it	ne
 8000d06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d0a:	d021      	beq.n	8000d50 <__addsf3+0x140>
 8000d0c:	ea92 0f03 	teq	r2, r3
 8000d10:	d004      	beq.n	8000d1c <__addsf3+0x10c>
 8000d12:	f092 0f00 	teq	r2, #0
 8000d16:	bf08      	it	eq
 8000d18:	4608      	moveq	r0, r1
 8000d1a:	4770      	bx	lr
 8000d1c:	ea90 0f01 	teq	r0, r1
 8000d20:	bf1c      	itt	ne
 8000d22:	2000      	movne	r0, #0
 8000d24:	4770      	bxne	lr
 8000d26:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d2a:	d104      	bne.n	8000d36 <__addsf3+0x126>
 8000d2c:	0040      	lsls	r0, r0, #1
 8000d2e:	bf28      	it	cs
 8000d30:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d34:	4770      	bx	lr
 8000d36:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d3a:	bf3c      	itt	cc
 8000d3c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d40:	4770      	bxcc	lr
 8000d42:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d46:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d4e:	4770      	bx	lr
 8000d50:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d54:	bf16      	itet	ne
 8000d56:	4608      	movne	r0, r1
 8000d58:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d5c:	4601      	movne	r1, r0
 8000d5e:	0242      	lsls	r2, r0, #9
 8000d60:	bf06      	itte	eq
 8000d62:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d66:	ea90 0f01 	teqeq	r0, r1
 8000d6a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d6e:	4770      	bx	lr

08000d70 <__aeabi_ui2f>:
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e004      	b.n	8000d80 <__aeabi_i2f+0x8>
 8000d76:	bf00      	nop

08000d78 <__aeabi_i2f>:
 8000d78:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d7c:	bf48      	it	mi
 8000d7e:	4240      	negmi	r0, r0
 8000d80:	ea5f 0c00 	movs.w	ip, r0
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d8c:	4601      	mov	r1, r0
 8000d8e:	f04f 0000 	mov.w	r0, #0
 8000d92:	e01c      	b.n	8000dce <__aeabi_l2f+0x2a>

08000d94 <__aeabi_ul2f>:
 8000d94:	ea50 0201 	orrs.w	r2, r0, r1
 8000d98:	bf08      	it	eq
 8000d9a:	4770      	bxeq	lr
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	e00a      	b.n	8000db8 <__aeabi_l2f+0x14>
 8000da2:	bf00      	nop

08000da4 <__aeabi_l2f>:
 8000da4:	ea50 0201 	orrs.w	r2, r0, r1
 8000da8:	bf08      	it	eq
 8000daa:	4770      	bxeq	lr
 8000dac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000db0:	d502      	bpl.n	8000db8 <__aeabi_l2f+0x14>
 8000db2:	4240      	negs	r0, r0
 8000db4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db8:	ea5f 0c01 	movs.w	ip, r1
 8000dbc:	bf02      	ittt	eq
 8000dbe:	4684      	moveq	ip, r0
 8000dc0:	4601      	moveq	r1, r0
 8000dc2:	2000      	moveq	r0, #0
 8000dc4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dc8:	bf08      	it	eq
 8000dca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dd2:	fabc f28c 	clz	r2, ip
 8000dd6:	3a08      	subs	r2, #8
 8000dd8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ddc:	db10      	blt.n	8000e00 <__aeabi_l2f+0x5c>
 8000dde:	fa01 fc02 	lsl.w	ip, r1, r2
 8000de2:	4463      	add	r3, ip
 8000de4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de8:	f1c2 0220 	rsb	r2, r2, #32
 8000dec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000df0:	fa20 f202 	lsr.w	r2, r0, r2
 8000df4:	eb43 0002 	adc.w	r0, r3, r2
 8000df8:	bf08      	it	eq
 8000dfa:	f020 0001 	biceq.w	r0, r0, #1
 8000dfe:	4770      	bx	lr
 8000e00:	f102 0220 	add.w	r2, r2, #32
 8000e04:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e08:	f1c2 0220 	rsb	r2, r2, #32
 8000e0c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e10:	fa21 f202 	lsr.w	r2, r1, r2
 8000e14:	eb43 0002 	adc.w	r0, r3, r2
 8000e18:	bf08      	it	eq
 8000e1a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1e:	4770      	bx	lr

08000e20 <__gesf2>:
 8000e20:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e24:	e006      	b.n	8000e34 <__cmpsf2+0x4>
 8000e26:	bf00      	nop

08000e28 <__lesf2>:
 8000e28:	f04f 0c01 	mov.w	ip, #1
 8000e2c:	e002      	b.n	8000e34 <__cmpsf2+0x4>
 8000e2e:	bf00      	nop

08000e30 <__cmpsf2>:
 8000e30:	f04f 0c01 	mov.w	ip, #1
 8000e34:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e38:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e44:	bf18      	it	ne
 8000e46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e4a:	d011      	beq.n	8000e70 <__cmpsf2+0x40>
 8000e4c:	b001      	add	sp, #4
 8000e4e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e52:	bf18      	it	ne
 8000e54:	ea90 0f01 	teqne	r0, r1
 8000e58:	bf58      	it	pl
 8000e5a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e5e:	bf88      	it	hi
 8000e60:	17c8      	asrhi	r0, r1, #31
 8000e62:	bf38      	it	cc
 8000e64:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e68:	bf18      	it	ne
 8000e6a:	f040 0001 	orrne.w	r0, r0, #1
 8000e6e:	4770      	bx	lr
 8000e70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e74:	d102      	bne.n	8000e7c <__cmpsf2+0x4c>
 8000e76:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e7a:	d105      	bne.n	8000e88 <__cmpsf2+0x58>
 8000e7c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e80:	d1e4      	bne.n	8000e4c <__cmpsf2+0x1c>
 8000e82:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e86:	d0e1      	beq.n	8000e4c <__cmpsf2+0x1c>
 8000e88:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <__aeabi_cfrcmple>:
 8000e90:	4684      	mov	ip, r0
 8000e92:	4608      	mov	r0, r1
 8000e94:	4661      	mov	r1, ip
 8000e96:	e7ff      	b.n	8000e98 <__aeabi_cfcmpeq>

08000e98 <__aeabi_cfcmpeq>:
 8000e98:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e9a:	f7ff ffc9 	bl	8000e30 <__cmpsf2>
 8000e9e:	2800      	cmp	r0, #0
 8000ea0:	bf48      	it	mi
 8000ea2:	f110 0f00 	cmnmi.w	r0, #0
 8000ea6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ea8 <__aeabi_fcmpeq>:
 8000ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eac:	f7ff fff4 	bl	8000e98 <__aeabi_cfcmpeq>
 8000eb0:	bf0c      	ite	eq
 8000eb2:	2001      	moveq	r0, #1
 8000eb4:	2000      	movne	r0, #0
 8000eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eba:	bf00      	nop

08000ebc <__aeabi_fcmplt>:
 8000ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec0:	f7ff ffea 	bl	8000e98 <__aeabi_cfcmpeq>
 8000ec4:	bf34      	ite	cc
 8000ec6:	2001      	movcc	r0, #1
 8000ec8:	2000      	movcs	r0, #0
 8000eca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ece:	bf00      	nop

08000ed0 <__aeabi_fcmple>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff ffe0 	bl	8000e98 <__aeabi_cfcmpeq>
 8000ed8:	bf94      	ite	ls
 8000eda:	2001      	movls	r0, #1
 8000edc:	2000      	movhi	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmpge>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffd2 	bl	8000e90 <__aeabi_cfrcmple>
 8000eec:	bf94      	ite	ls
 8000eee:	2001      	movls	r0, #1
 8000ef0:	2000      	movhi	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmpgt>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffc8 	bl	8000e90 <__aeabi_cfrcmple>
 8000f00:	bf34      	ite	cc
 8000f02:	2001      	movcc	r0, #1
 8000f04:	2000      	movcs	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_f2iz>:
 8000f0c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f10:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f14:	d30f      	bcc.n	8000f36 <__aeabi_f2iz+0x2a>
 8000f16:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f1a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f1e:	d90d      	bls.n	8000f3c <__aeabi_f2iz+0x30>
 8000f20:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f28:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f2c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f30:	bf18      	it	ne
 8000f32:	4240      	negne	r0, r0
 8000f34:	4770      	bx	lr
 8000f36:	f04f 0000 	mov.w	r0, #0
 8000f3a:	4770      	bx	lr
 8000f3c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f40:	d101      	bne.n	8000f46 <__aeabi_f2iz+0x3a>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	d105      	bne.n	8000f52 <__aeabi_f2iz+0x46>
 8000f46:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f4a:	bf08      	it	eq
 8000f4c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f50:	4770      	bx	lr
 8000f52:	f04f 0000 	mov.w	r0, #0
 8000f56:	4770      	bx	lr

08000f58 <__aeabi_ldivmod>:
 8000f58:	b97b      	cbnz	r3, 8000f7a <__aeabi_ldivmod+0x22>
 8000f5a:	b972      	cbnz	r2, 8000f7a <__aeabi_ldivmod+0x22>
 8000f5c:	2900      	cmp	r1, #0
 8000f5e:	bfbe      	ittt	lt
 8000f60:	2000      	movlt	r0, #0
 8000f62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000f66:	e006      	blt.n	8000f76 <__aeabi_ldivmod+0x1e>
 8000f68:	bf08      	it	eq
 8000f6a:	2800      	cmpeq	r0, #0
 8000f6c:	bf1c      	itt	ne
 8000f6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000f72:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000f76:	f000 b9b9 	b.w	80012ec <__aeabi_idiv0>
 8000f7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f82:	2900      	cmp	r1, #0
 8000f84:	db09      	blt.n	8000f9a <__aeabi_ldivmod+0x42>
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	db1a      	blt.n	8000fc0 <__aeabi_ldivmod+0x68>
 8000f8a:	f000 f84d 	bl	8001028 <__udivmoddi4>
 8000f8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f96:	b004      	add	sp, #16
 8000f98:	4770      	bx	lr
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db1b      	blt.n	8000fdc <__aeabi_ldivmod+0x84>
 8000fa4:	f000 f840 	bl	8001028 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4240      	negs	r0, r0
 8000fb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fb8:	4252      	negs	r2, r2
 8000fba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fbe:	4770      	bx	lr
 8000fc0:	4252      	negs	r2, r2
 8000fc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fc6:	f000 f82f 	bl	8001028 <__udivmoddi4>
 8000fca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fd2:	b004      	add	sp, #16
 8000fd4:	4240      	negs	r0, r0
 8000fd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fda:	4770      	bx	lr
 8000fdc:	4252      	negs	r2, r2
 8000fde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fe2:	f000 f821 	bl	8001028 <__udivmoddi4>
 8000fe6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fee:	b004      	add	sp, #16
 8000ff0:	4252      	negs	r2, r2
 8000ff2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ff6:	4770      	bx	lr

08000ff8 <__aeabi_uldivmod>:
 8000ff8:	b953      	cbnz	r3, 8001010 <__aeabi_uldivmod+0x18>
 8000ffa:	b94a      	cbnz	r2, 8001010 <__aeabi_uldivmod+0x18>
 8000ffc:	2900      	cmp	r1, #0
 8000ffe:	bf08      	it	eq
 8001000:	2800      	cmpeq	r0, #0
 8001002:	bf1c      	itt	ne
 8001004:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001008:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800100c:	f000 b96e 	b.w	80012ec <__aeabi_idiv0>
 8001010:	f1ad 0c08 	sub.w	ip, sp, #8
 8001014:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001018:	f000 f806 	bl	8001028 <__udivmoddi4>
 800101c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001020:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001024:	b004      	add	sp, #16
 8001026:	4770      	bx	lr

08001028 <__udivmoddi4>:
 8001028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800102c:	9e08      	ldr	r6, [sp, #32]
 800102e:	460d      	mov	r5, r1
 8001030:	4604      	mov	r4, r0
 8001032:	468e      	mov	lr, r1
 8001034:	2b00      	cmp	r3, #0
 8001036:	f040 8083 	bne.w	8001140 <__udivmoddi4+0x118>
 800103a:	428a      	cmp	r2, r1
 800103c:	4617      	mov	r7, r2
 800103e:	d947      	bls.n	80010d0 <__udivmoddi4+0xa8>
 8001040:	fab2 f382 	clz	r3, r2
 8001044:	b14b      	cbz	r3, 800105a <__udivmoddi4+0x32>
 8001046:	f1c3 0120 	rsb	r1, r3, #32
 800104a:	fa05 fe03 	lsl.w	lr, r5, r3
 800104e:	fa20 f101 	lsr.w	r1, r0, r1
 8001052:	409f      	lsls	r7, r3
 8001054:	ea41 0e0e 	orr.w	lr, r1, lr
 8001058:	409c      	lsls	r4, r3
 800105a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800105e:	fbbe fcf8 	udiv	ip, lr, r8
 8001062:	fa1f f987 	uxth.w	r9, r7
 8001066:	fb08 e21c 	mls	r2, r8, ip, lr
 800106a:	fb0c f009 	mul.w	r0, ip, r9
 800106e:	0c21      	lsrs	r1, r4, #16
 8001070:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001074:	4290      	cmp	r0, r2
 8001076:	d90a      	bls.n	800108e <__udivmoddi4+0x66>
 8001078:	18ba      	adds	r2, r7, r2
 800107a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800107e:	f080 8118 	bcs.w	80012b2 <__udivmoddi4+0x28a>
 8001082:	4290      	cmp	r0, r2
 8001084:	f240 8115 	bls.w	80012b2 <__udivmoddi4+0x28a>
 8001088:	f1ac 0c02 	sub.w	ip, ip, #2
 800108c:	443a      	add	r2, r7
 800108e:	1a12      	subs	r2, r2, r0
 8001090:	fbb2 f0f8 	udiv	r0, r2, r8
 8001094:	fb08 2210 	mls	r2, r8, r0, r2
 8001098:	fb00 f109 	mul.w	r1, r0, r9
 800109c:	b2a4      	uxth	r4, r4
 800109e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80010a2:	42a1      	cmp	r1, r4
 80010a4:	d909      	bls.n	80010ba <__udivmoddi4+0x92>
 80010a6:	193c      	adds	r4, r7, r4
 80010a8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80010ac:	f080 8103 	bcs.w	80012b6 <__udivmoddi4+0x28e>
 80010b0:	42a1      	cmp	r1, r4
 80010b2:	f240 8100 	bls.w	80012b6 <__udivmoddi4+0x28e>
 80010b6:	3802      	subs	r0, #2
 80010b8:	443c      	add	r4, r7
 80010ba:	1a64      	subs	r4, r4, r1
 80010bc:	2100      	movs	r1, #0
 80010be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80010c2:	b11e      	cbz	r6, 80010cc <__udivmoddi4+0xa4>
 80010c4:	2200      	movs	r2, #0
 80010c6:	40dc      	lsrs	r4, r3
 80010c8:	e9c6 4200 	strd	r4, r2, [r6]
 80010cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010d0:	b902      	cbnz	r2, 80010d4 <__udivmoddi4+0xac>
 80010d2:	deff      	udf	#255	; 0xff
 80010d4:	fab2 f382 	clz	r3, r2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d14f      	bne.n	800117c <__udivmoddi4+0x154>
 80010dc:	1a8d      	subs	r5, r1, r2
 80010de:	2101      	movs	r1, #1
 80010e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80010e4:	fa1f f882 	uxth.w	r8, r2
 80010e8:	fbb5 fcfe 	udiv	ip, r5, lr
 80010ec:	fb0e 551c 	mls	r5, lr, ip, r5
 80010f0:	fb08 f00c 	mul.w	r0, r8, ip
 80010f4:	0c22      	lsrs	r2, r4, #16
 80010f6:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80010fa:	42a8      	cmp	r0, r5
 80010fc:	d907      	bls.n	800110e <__udivmoddi4+0xe6>
 80010fe:	197d      	adds	r5, r7, r5
 8001100:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8001104:	d202      	bcs.n	800110c <__udivmoddi4+0xe4>
 8001106:	42a8      	cmp	r0, r5
 8001108:	f200 80e9 	bhi.w	80012de <__udivmoddi4+0x2b6>
 800110c:	4694      	mov	ip, r2
 800110e:	1a2d      	subs	r5, r5, r0
 8001110:	fbb5 f0fe 	udiv	r0, r5, lr
 8001114:	fb0e 5510 	mls	r5, lr, r0, r5
 8001118:	fb08 f800 	mul.w	r8, r8, r0
 800111c:	b2a4      	uxth	r4, r4
 800111e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001122:	45a0      	cmp	r8, r4
 8001124:	d907      	bls.n	8001136 <__udivmoddi4+0x10e>
 8001126:	193c      	adds	r4, r7, r4
 8001128:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800112c:	d202      	bcs.n	8001134 <__udivmoddi4+0x10c>
 800112e:	45a0      	cmp	r8, r4
 8001130:	f200 80d9 	bhi.w	80012e6 <__udivmoddi4+0x2be>
 8001134:	4610      	mov	r0, r2
 8001136:	eba4 0408 	sub.w	r4, r4, r8
 800113a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800113e:	e7c0      	b.n	80010c2 <__udivmoddi4+0x9a>
 8001140:	428b      	cmp	r3, r1
 8001142:	d908      	bls.n	8001156 <__udivmoddi4+0x12e>
 8001144:	2e00      	cmp	r6, #0
 8001146:	f000 80b1 	beq.w	80012ac <__udivmoddi4+0x284>
 800114a:	2100      	movs	r1, #0
 800114c:	e9c6 0500 	strd	r0, r5, [r6]
 8001150:	4608      	mov	r0, r1
 8001152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001156:	fab3 f183 	clz	r1, r3
 800115a:	2900      	cmp	r1, #0
 800115c:	d14b      	bne.n	80011f6 <__udivmoddi4+0x1ce>
 800115e:	42ab      	cmp	r3, r5
 8001160:	d302      	bcc.n	8001168 <__udivmoddi4+0x140>
 8001162:	4282      	cmp	r2, r0
 8001164:	f200 80b9 	bhi.w	80012da <__udivmoddi4+0x2b2>
 8001168:	1a84      	subs	r4, r0, r2
 800116a:	eb65 0303 	sbc.w	r3, r5, r3
 800116e:	2001      	movs	r0, #1
 8001170:	469e      	mov	lr, r3
 8001172:	2e00      	cmp	r6, #0
 8001174:	d0aa      	beq.n	80010cc <__udivmoddi4+0xa4>
 8001176:	e9c6 4e00 	strd	r4, lr, [r6]
 800117a:	e7a7      	b.n	80010cc <__udivmoddi4+0xa4>
 800117c:	409f      	lsls	r7, r3
 800117e:	f1c3 0220 	rsb	r2, r3, #32
 8001182:	40d1      	lsrs	r1, r2
 8001184:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001188:	fbb1 f0fe 	udiv	r0, r1, lr
 800118c:	fa1f f887 	uxth.w	r8, r7
 8001190:	fb0e 1110 	mls	r1, lr, r0, r1
 8001194:	fa24 f202 	lsr.w	r2, r4, r2
 8001198:	409d      	lsls	r5, r3
 800119a:	fb00 fc08 	mul.w	ip, r0, r8
 800119e:	432a      	orrs	r2, r5
 80011a0:	0c15      	lsrs	r5, r2, #16
 80011a2:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80011a6:	45ac      	cmp	ip, r5
 80011a8:	fa04 f403 	lsl.w	r4, r4, r3
 80011ac:	d909      	bls.n	80011c2 <__udivmoddi4+0x19a>
 80011ae:	197d      	adds	r5, r7, r5
 80011b0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80011b4:	f080 808f 	bcs.w	80012d6 <__udivmoddi4+0x2ae>
 80011b8:	45ac      	cmp	ip, r5
 80011ba:	f240 808c 	bls.w	80012d6 <__udivmoddi4+0x2ae>
 80011be:	3802      	subs	r0, #2
 80011c0:	443d      	add	r5, r7
 80011c2:	eba5 050c 	sub.w	r5, r5, ip
 80011c6:	fbb5 f1fe 	udiv	r1, r5, lr
 80011ca:	fb0e 5c11 	mls	ip, lr, r1, r5
 80011ce:	fb01 f908 	mul.w	r9, r1, r8
 80011d2:	b295      	uxth	r5, r2
 80011d4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80011d8:	45a9      	cmp	r9, r5
 80011da:	d907      	bls.n	80011ec <__udivmoddi4+0x1c4>
 80011dc:	197d      	adds	r5, r7, r5
 80011de:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80011e2:	d274      	bcs.n	80012ce <__udivmoddi4+0x2a6>
 80011e4:	45a9      	cmp	r9, r5
 80011e6:	d972      	bls.n	80012ce <__udivmoddi4+0x2a6>
 80011e8:	3902      	subs	r1, #2
 80011ea:	443d      	add	r5, r7
 80011ec:	eba5 0509 	sub.w	r5, r5, r9
 80011f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011f4:	e778      	b.n	80010e8 <__udivmoddi4+0xc0>
 80011f6:	f1c1 0720 	rsb	r7, r1, #32
 80011fa:	408b      	lsls	r3, r1
 80011fc:	fa22 fc07 	lsr.w	ip, r2, r7
 8001200:	ea4c 0c03 	orr.w	ip, ip, r3
 8001204:	fa25 f407 	lsr.w	r4, r5, r7
 8001208:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800120c:	fbb4 f9fe 	udiv	r9, r4, lr
 8001210:	fa1f f88c 	uxth.w	r8, ip
 8001214:	fb0e 4419 	mls	r4, lr, r9, r4
 8001218:	fa20 f307 	lsr.w	r3, r0, r7
 800121c:	fb09 fa08 	mul.w	sl, r9, r8
 8001220:	408d      	lsls	r5, r1
 8001222:	431d      	orrs	r5, r3
 8001224:	0c2b      	lsrs	r3, r5, #16
 8001226:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800122a:	45a2      	cmp	sl, r4
 800122c:	fa02 f201 	lsl.w	r2, r2, r1
 8001230:	fa00 f301 	lsl.w	r3, r0, r1
 8001234:	d909      	bls.n	800124a <__udivmoddi4+0x222>
 8001236:	eb1c 0404 	adds.w	r4, ip, r4
 800123a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800123e:	d248      	bcs.n	80012d2 <__udivmoddi4+0x2aa>
 8001240:	45a2      	cmp	sl, r4
 8001242:	d946      	bls.n	80012d2 <__udivmoddi4+0x2aa>
 8001244:	f1a9 0902 	sub.w	r9, r9, #2
 8001248:	4464      	add	r4, ip
 800124a:	eba4 040a 	sub.w	r4, r4, sl
 800124e:	fbb4 f0fe 	udiv	r0, r4, lr
 8001252:	fb0e 4410 	mls	r4, lr, r0, r4
 8001256:	fb00 fa08 	mul.w	sl, r0, r8
 800125a:	b2ad      	uxth	r5, r5
 800125c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001260:	45a2      	cmp	sl, r4
 8001262:	d908      	bls.n	8001276 <__udivmoddi4+0x24e>
 8001264:	eb1c 0404 	adds.w	r4, ip, r4
 8001268:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800126c:	d22d      	bcs.n	80012ca <__udivmoddi4+0x2a2>
 800126e:	45a2      	cmp	sl, r4
 8001270:	d92b      	bls.n	80012ca <__udivmoddi4+0x2a2>
 8001272:	3802      	subs	r0, #2
 8001274:	4464      	add	r4, ip
 8001276:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800127a:	fba0 8902 	umull	r8, r9, r0, r2
 800127e:	eba4 040a 	sub.w	r4, r4, sl
 8001282:	454c      	cmp	r4, r9
 8001284:	46c6      	mov	lr, r8
 8001286:	464d      	mov	r5, r9
 8001288:	d319      	bcc.n	80012be <__udivmoddi4+0x296>
 800128a:	d016      	beq.n	80012ba <__udivmoddi4+0x292>
 800128c:	b15e      	cbz	r6, 80012a6 <__udivmoddi4+0x27e>
 800128e:	ebb3 020e 	subs.w	r2, r3, lr
 8001292:	eb64 0405 	sbc.w	r4, r4, r5
 8001296:	fa04 f707 	lsl.w	r7, r4, r7
 800129a:	fa22 f301 	lsr.w	r3, r2, r1
 800129e:	431f      	orrs	r7, r3
 80012a0:	40cc      	lsrs	r4, r1
 80012a2:	e9c6 7400 	strd	r7, r4, [r6]
 80012a6:	2100      	movs	r1, #0
 80012a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ac:	4631      	mov	r1, r6
 80012ae:	4630      	mov	r0, r6
 80012b0:	e70c      	b.n	80010cc <__udivmoddi4+0xa4>
 80012b2:	468c      	mov	ip, r1
 80012b4:	e6eb      	b.n	800108e <__udivmoddi4+0x66>
 80012b6:	4610      	mov	r0, r2
 80012b8:	e6ff      	b.n	80010ba <__udivmoddi4+0x92>
 80012ba:	4543      	cmp	r3, r8
 80012bc:	d2e6      	bcs.n	800128c <__udivmoddi4+0x264>
 80012be:	ebb8 0e02 	subs.w	lr, r8, r2
 80012c2:	eb69 050c 	sbc.w	r5, r9, ip
 80012c6:	3801      	subs	r0, #1
 80012c8:	e7e0      	b.n	800128c <__udivmoddi4+0x264>
 80012ca:	4628      	mov	r0, r5
 80012cc:	e7d3      	b.n	8001276 <__udivmoddi4+0x24e>
 80012ce:	4611      	mov	r1, r2
 80012d0:	e78c      	b.n	80011ec <__udivmoddi4+0x1c4>
 80012d2:	4681      	mov	r9, r0
 80012d4:	e7b9      	b.n	800124a <__udivmoddi4+0x222>
 80012d6:	4608      	mov	r0, r1
 80012d8:	e773      	b.n	80011c2 <__udivmoddi4+0x19a>
 80012da:	4608      	mov	r0, r1
 80012dc:	e749      	b.n	8001172 <__udivmoddi4+0x14a>
 80012de:	f1ac 0c02 	sub.w	ip, ip, #2
 80012e2:	443d      	add	r5, r7
 80012e4:	e713      	b.n	800110e <__udivmoddi4+0xe6>
 80012e6:	3802      	subs	r0, #2
 80012e8:	443c      	add	r4, r7
 80012ea:	e724      	b.n	8001136 <__udivmoddi4+0x10e>

080012ec <__aeabi_idiv0>:
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop

080012f0 <Erase_flash>:
//////////////////////// ОЧИСТКА ПАМЯТИ /////////////////////////////
void Erase_flash(void)
{
	static FLASH_EraseInitTypeDef EraseInitStruct;     // структура для очистки флеша

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // постраничная очистка, FLASH_TYPEERASE_MASSERASE - очистка всего флеша
 80012f0:	2300      	movs	r3, #0
	EraseInitStruct.PageAddress = STARTADDR;
	EraseInitStruct.NbPages = PAGES;
 80012f2:	2201      	movs	r2, #1
{
 80012f4:	b513      	push	{r0, r1, r4, lr}
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // постраничная очистка, FLASH_TYPEERASE_MASSERASE - очистка всего флеша
 80012f6:	4c08      	ldr	r4, [pc, #32]	; (8001318 <Erase_flash+0x28>)
	EraseInitStruct.NbPages = PAGES;
 80012f8:	4908      	ldr	r1, [pc, #32]	; (800131c <Erase_flash+0x2c>)
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // постраничная очистка, FLASH_TYPEERASE_MASSERASE - очистка всего флеша
 80012fa:	6023      	str	r3, [r4, #0]
	EraseInitStruct.NbPages = PAGES;
 80012fc:	e9c4 1202 	strd	r1, r2, [r4, #8]
	//EraseInitStruct.Banks = FLASH_BANK_1; // FLASH_BANK_2 - банк №2, FLASH_BANK_BOTH - оба банка
	uint32_t page_error = 0; // переменная, в которую запишется адрес страницы при неудачном стирании
 8001300:	9301      	str	r3, [sp, #4]

	HAL_FLASH_Unlock(); // разблокировать флеш
 8001302:	f006 fe8d 	bl	8008020 <HAL_FLASH_Unlock>

	if(HAL_FLASHEx_Erase(&EraseInitStruct, &page_error) != HAL_OK)
 8001306:	a901      	add	r1, sp, #4
 8001308:	4620      	mov	r0, r4
 800130a:	f006 ff45 	bl	8008198 <HAL_FLASHEx_Erase>
	else
	{

	}

	HAL_FLASH_Lock();
 800130e:	f006 fe99 	bl	8008044 <HAL_FLASH_Lock>
}
 8001312:	b002      	add	sp, #8
 8001314:	bd10      	pop	{r4, pc}
 8001316:	bf00      	nop
 8001318:	20000104 	.word	0x20000104
 800131c:	0801fc00 	.word	0x0801fc00

08001320 <Flash_search_adress>:

//////////////////////// ПОИСК СВОБОДНЫХ ЯЧЕЕК /////////////////////////////
uint32_t Flash_search_adress(uint32_t address, uint16_t cnt)
{
	uint16_t count_byte = cnt;
 8001320:	460b      	mov	r3, r1
{
 8001322:	b510      	push	{r4, lr}
	while(count_byte)
	{
		if(0xFF == *(uint8_t*)address++) count_byte--;
		else count_byte = cnt;

		if(address == ENDMEMORY - 1) // если достигнут конец флеша
 8001324:	4a08      	ldr	r2, [pc, #32]	; (8001348 <Flash_search_adress+0x28>)
	while(count_byte)
 8001326:	b90b      	cbnz	r3, 800132c <Flash_search_adress+0xc>
			Erase_flash();        // тогда очищаем память
			return STARTADDR;     // устанавливаем адрес для записи с самого начала
		}
	}

	return address -= cnt;
 8001328:	1a40      	subs	r0, r0, r1
 800132a:	e00c      	b.n	8001346 <Flash_search_adress+0x26>
		if(0xFF == *(uint8_t*)address++) count_byte--;
 800132c:	7804      	ldrb	r4, [r0, #0]
 800132e:	3001      	adds	r0, #1
 8001330:	2cff      	cmp	r4, #255	; 0xff
 8001332:	bf0a      	itet	eq
 8001334:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
		else count_byte = cnt;
 8001338:	460b      	movne	r3, r1
		if(0xFF == *(uint8_t*)address++) count_byte--;
 800133a:	b29b      	uxtheq	r3, r3
		if(address == ENDMEMORY - 1) // если достигнут конец флеша
 800133c:	4290      	cmp	r0, r2
 800133e:	d1f2      	bne.n	8001326 <Flash_search_adress+0x6>
			Erase_flash();        // тогда очищаем память
 8001340:	f7ff ffd6 	bl	80012f0 <Erase_flash>
			return STARTADDR;     // устанавливаем адрес для записи с самого начала
 8001344:	4801      	ldr	r0, [pc, #4]	; (800134c <Flash_search_adress+0x2c>)
}
 8001346:	bd10      	pop	{r4, pc}
 8001348:	0801ffff 	.word	0x0801ffff
 800134c:	0801fc00 	.word	0x0801fc00

08001350 <Write_to_flash>:

//////////////////////// ЗАПИСЬ ДАННЫХ /////////////////////////////
void Write_to_flash(uint32_t *buff)
{
 8001350:	b570      	push	{r4, r5, r6, lr}
	res_addr = Flash_search_adress(res_addr, BUFFSIZE * DATAWIDTH); // ищем свободные ячейки начиная с последнего известного адреса
 8001352:	4c0f      	ldr	r4, [pc, #60]	; (8001390 <Write_to_flash+0x40>)
{
 8001354:	4605      	mov	r5, r0
	res_addr = Flash_search_adress(res_addr, BUFFSIZE * DATAWIDTH); // ищем свободные ячейки начиная с последнего известного адреса
 8001356:	2108      	movs	r1, #8
 8001358:	6820      	ldr	r0, [r4, #0]
 800135a:	f7ff ffe1 	bl	8001320 <Flash_search_adress>
	//////////////////////// ЗАПИСЬ ////////////////////////////
	HAL_FLASH_Unlock(); // разблокировать флеш

	for(uint16_t i = 0; i < BUFFSIZE; i++)
	{
		if(HAL_FLASH_Program(WIDTHWRITE, res_addr, buff[i]) != HAL_OK)
 800135e:	2600      	movs	r6, #0
	res_addr = Flash_search_adress(res_addr, BUFFSIZE * DATAWIDTH); // ищем свободные ячейки начиная с последнего известного адреса
 8001360:	6020      	str	r0, [r4, #0]
	HAL_FLASH_Unlock(); // разблокировать флеш
 8001362:	f006 fe5d 	bl	8008020 <HAL_FLASH_Unlock>
		if(HAL_FLASH_Program(WIDTHWRITE, res_addr, buff[i]) != HAL_OK)
 8001366:	4633      	mov	r3, r6
 8001368:	682a      	ldr	r2, [r5, #0]
 800136a:	6821      	ldr	r1, [r4, #0]
 800136c:	2002      	movs	r0, #2
 800136e:	f006 fe9d 	bl	80080ac <HAL_FLASH_Program>
		{
			//uint32_t er = HAL_FLASH_GetError();
		}

		res_addr = res_addr + DATAWIDTH;
 8001372:	6821      	ldr	r1, [r4, #0]
		if(HAL_FLASH_Program(WIDTHWRITE, res_addr, buff[i]) != HAL_OK)
 8001374:	4633      	mov	r3, r6
 8001376:	686a      	ldr	r2, [r5, #4]
		res_addr = res_addr + DATAWIDTH;
 8001378:	3104      	adds	r1, #4
		if(HAL_FLASH_Program(WIDTHWRITE, res_addr, buff[i]) != HAL_OK)
 800137a:	2002      	movs	r0, #2
		res_addr = res_addr + DATAWIDTH;
 800137c:	6021      	str	r1, [r4, #0]
		if(HAL_FLASH_Program(WIDTHWRITE, res_addr, buff[i]) != HAL_OK)
 800137e:	f006 fe95 	bl	80080ac <HAL_FLASH_Program>
		res_addr = res_addr + DATAWIDTH;
 8001382:	6823      	ldr	r3, [r4, #0]
 8001384:	3304      	adds	r3, #4
 8001386:	6023      	str	r3, [r4, #0]
//	if(sum1 != sum2) // если суммы записанного и прочитанного не равны, тогда что-то пошло не так
//	{
//		return;
//	}
	//////////////////////// конец проверки записанного ////////////////////////
}
 8001388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_FLASH_Lock(); // заблокировать флеш
 800138c:	f006 be5a 	b.w	8008044 <HAL_FLASH_Lock>
 8001390:	20002468 	.word	0x20002468

08001394 <Read_last_data_in_flash>:

//////////////////////// ЧТЕНИЕ ПОСЛЕДНИХ ДАННЫХ /////////////////////////////
void Read_last_data_in_flash(uint32_t *buff)
{
	if(res_addr == STARTADDR)
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <Read_last_data_in_flash+0x18>)
 8001396:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <Read_last_data_in_flash+0x1c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4293      	cmp	r3, r2

	uint32_t adr = res_addr - BUFFSIZE * DATAWIDTH; // сдвигаемся на начало последних данных

	for(uint16_t i = 0; i < BUFFSIZE; i++)
	{
		buff[i] = *(uint32_t*)adr; // читаем
 800139c:	bf1f      	itttt	ne
 800139e:	f853 2c08 	ldrne.w	r2, [r3, #-8]
 80013a2:	6002      	strne	r2, [r0, #0]
 80013a4:	f853 3c04 	ldrne.w	r3, [r3, #-4]
 80013a8:	6043      	strne	r3, [r0, #4]
		adr = adr + DATAWIDTH;
	}
}
 80013aa:	4770      	bx	lr
 80013ac:	20002468 	.word	0x20002468
 80013b0:	0801fc00 	.word	0x0801fc00

080013b4 <Read_control_module_info_from_flash>:
void Read_control_module_info_from_flash(uint32_t *buff) {
 80013b4:	b510      	push	{r4, lr}
	  res_addr = Flash_search_adress(STARTADDR, BUFFSIZE * DATAWIDTH);
 80013b6:	2108      	movs	r1, #8
void Read_control_module_info_from_flash(uint32_t *buff) {
 80013b8:	4604      	mov	r4, r0
	  res_addr = Flash_search_adress(STARTADDR, BUFFSIZE * DATAWIDTH);
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <Read_control_module_info_from_flash+0x1c>)
 80013bc:	f7ff ffb0 	bl	8001320 <Flash_search_adress>
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <Read_control_module_info_from_flash+0x20>)
 80013c2:	6018      	str	r0, [r3, #0]
	  Read_last_data_in_flash(buff);
 80013c4:	4620      	mov	r0, r4
}
 80013c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  Read_last_data_in_flash(buff);
 80013ca:	f7ff bfe3 	b.w	8001394 <Read_last_data_in_flash>
 80013ce:	bf00      	nop
 80013d0:	0801fc00 	.word	0x0801fc00
 80013d4:	20002468 	.word	0x20002468

080013d8 <_ZN11Grow_sensor13set_system_idESt5arrayIhLj12EE>:
        }
}

// --- Поля класса-платы ---

void Grow_sensor::set_system_id(std::array<uint8_t, AMT_BYTES_SYSTEM_ID> system_id) {
 80013d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80013da:	4604      	mov	r4, r0
 80013dc:	a801      	add	r0, sp, #4
 80013de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    system_id_ = system_id;
 80013e2:	c807      	ldmia	r0, {r0, r1, r2}
 80013e4:	e884 000b 	stmia.w	r4, {r0, r1, r3}
}
 80013e8:	b004      	add	sp, #16
 80013ea:	bd10      	pop	{r4, pc}

080013ec <_ZNK11Grow_sensor13get_system_idEv>:
std::array<uint8_t, AMT_BYTES_SYSTEM_ID> Grow_sensor::get_system_id() const {
 80013ec:	4602      	mov	r2, r0
    return system_id_;
 80013ee:	460b      	mov	r3, r1
 80013f0:	cb03      	ldmia	r3!, {r0, r1}
 80013f2:	6010      	str	r0, [r2, #0]
 80013f4:	6818      	ldr	r0, [r3, #0]
 80013f6:	6051      	str	r1, [r2, #4]
 80013f8:	6090      	str	r0, [r2, #8]
}
 80013fa:	4610      	mov	r0, r2
 80013fc:	4770      	bx	lr

080013fe <_ZN11Grow_sensor10set_activeEh>:

void Grow_sensor::set_active(uint8_t active) {
    if(active < 3)
 80013fe:	2902      	cmp	r1, #2
        active_ = active;
 8001400:	bf98      	it	ls
 8001402:	f880 102d 	strbls.w	r1, [r0, #45]	; 0x2d
}
 8001406:	4770      	bx	lr

08001408 <_ZNK11Grow_sensor10get_activeEv>:

uint8_t Grow_sensor::get_active() const {
    return active_;
}
 8001408:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 800140c:	4770      	bx	lr

0800140e <_ZN11Grow_sensor26set_address_control_moduleE12LoRa_address>:
uint16_t Grow_sensor::get_address() const {
    return address_;
}

#if !defined( ESP32 )
bool Grow_sensor::set_address_control_module(LoRa_address address) {
 800140e:	4603      	mov	r3, r0
	if(address.branch != 0)
 8001410:	0c08      	lsrs	r0, r1, #16
		return true;
 8001412:	bf18      	it	ne
 8001414:	2001      	movne	r0, #1
bool Grow_sensor::set_address_control_module(LoRa_address address) {
 8001416:	b082      	sub	sp, #8
	address_control_module_ = address;
 8001418:	bf08      	it	eq
 800141a:	61d9      	streq	r1, [r3, #28]
	return false;
}
 800141c:	b002      	add	sp, #8
 800141e:	4770      	bx	lr

08001420 <_ZNK11Grow_sensor26get_address_control_moduleEv>:
LoRa_address Grow_sensor::get_address_control_module() const {
	return address_control_module_;
 8001420:	69c3      	ldr	r3, [r0, #28]
 8001422:	2000      	movs	r0, #0
 8001424:	b29a      	uxth	r2, r3
 8001426:	f362 000f 	bfi	r0, r2, #0, #16
 800142a:	0c1b      	lsrs	r3, r3, #16
LoRa_address Grow_sensor::get_address_control_module() const {
 800142c:	b082      	sub	sp, #8
	return address_control_module_;
 800142e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001432:	b002      	add	sp, #8
 8001434:	4770      	bx	lr

08001436 <_ZNK11Grow_sensor11get_settingEv>:
void Grow_sensor::set_setting(uint8_t setting) {
    setting_ = setting;
}
uint8_t Grow_sensor::get_setting() const {
    return setting_;
}
 8001436:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
 800143a:	4770      	bx	lr

0800143c <_ZNK11Grow_sensor8get_typeEhRh>:
    if(get_count_component() <= num)
        return true;
    result = component_[num].get_type();
    return false;
}
bool Grow_sensor::get_type(uint8_t num, uint8_t &result) const {
 800143c:	b510      	push	{r4, lr}
 800143e:	4614      	mov	r4, r2

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001440:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8001444:	1a9b      	subs	r3, r3, r2
    if(get_count_component() <= num)
 8001446:	f3c3 03c7 	ubfx	r3, r3, #3, #8
 800144a:	4299      	cmp	r1, r3
 800144c:	d206      	bcs.n	800145c <_ZNK11Grow_sensor8get_typeEhRh+0x20>
        return true;
    result = component_[num].get_type();
 800144e:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 8001452:	f000 fbec 	bl	8001c2e <_ZNK21Grow_sensor_component8get_typeEv>
 8001456:	7020      	strb	r0, [r4, #0]
    return false;
 8001458:	2000      	movs	r0, #0
}
 800145a:	bd10      	pop	{r4, pc}
        return true;
 800145c:	2001      	movs	r0, #1
 800145e:	e7fc      	b.n	800145a <_ZNK11Grow_sensor8get_typeEhRh+0x1e>

08001460 <_ZNK11Grow_sensor6get_idEhRh>:
    std::vector<enum Type_sensor> type_sensor;
    for(int i = 0; i < get_count_component(); ++i)
        type_sensor.push_back(component_[i].get_type());
    return type_sensor;
}
bool Grow_sensor::get_id(uint8_t num, uint8_t &result) const {
 8001460:	b510      	push	{r4, lr}
 8001462:	4614      	mov	r4, r2
 8001464:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8001468:	1a9b      	subs	r3, r3, r2
    if(get_count_component() <= num)
 800146a:	f3c3 03c7 	ubfx	r3, r3, #3, #8
 800146e:	4299      	cmp	r1, r3
 8001470:	d206      	bcs.n	8001480 <_ZNK11Grow_sensor6get_idEhRh+0x20>
        return true;
    result = component_[num].get_id();
 8001472:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 8001476:	f000 fbdc 	bl	8001c32 <_ZNK21Grow_sensor_component6get_idEv>
 800147a:	7020      	strb	r0, [r4, #0]
    return false;
 800147c:	2000      	movs	r0, #0
}
 800147e:	bd10      	pop	{r4, pc}
        return true;
 8001480:	2001      	movs	r0, #1
 8001482:	e7fc      	b.n	800147e <_ZNK11Grow_sensor6get_idEhRh+0x1e>

08001484 <_ZN11Grow_sensor9set_valueEhf>:
    for(int i = 0; i < get_count_component(); ++i)
        id.push_back(component_[i].get_id());
    return id;
}

bool Grow_sensor::set_value(uint8_t num, float value) {
 8001484:	b510      	push	{r4, lr}
 8001486:	4604      	mov	r4, r0
 8001488:	4608      	mov	r0, r1
 800148a:	4611      	mov	r1, r2
 800148c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8001490:	1a9b      	subs	r3, r3, r2
    if(get_count_component() <= num)
 8001492:	f3c3 03c7 	ubfx	r3, r3, #3, #8
 8001496:	4298      	cmp	r0, r3
 8001498:	d208      	bcs.n	80014ac <_ZN11Grow_sensor9set_valueEhf+0x28>
        return true;
    component_[num].set_value(value);
 800149a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800149e:	f000 fbcc 	bl	8001c3a <_ZN21Grow_sensor_component9set_valueEf>
    change_value_ = true;
 80014a2:	2301      	movs	r3, #1
    return false;
 80014a4:	2000      	movs	r0, #0
    change_value_ = true;
 80014a6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 80014aa:	bd10      	pop	{r4, pc}
        return true;
 80014ac:	2001      	movs	r0, #1
 80014ae:	e7fc      	b.n	80014aa <_ZN11Grow_sensor9set_valueEhf+0x26>

080014b0 <_ZN11Grow_sensor9get_valueEhRf>:
bool Grow_sensor::get_value(uint8_t num, float &result) {
 80014b0:	b510      	push	{r4, lr}
 80014b2:	4614      	mov	r4, r2
 80014b4:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 80014b8:	1a9b      	subs	r3, r3, r2
    if(get_count_component() <= num)
 80014ba:	f3c3 03c7 	ubfx	r3, r3, #3, #8
 80014be:	4299      	cmp	r1, r3
 80014c0:	d206      	bcs.n	80014d0 <_ZN11Grow_sensor9get_valueEhRf+0x20>
        return true;
    result = component_[num].get_value();
 80014c2:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 80014c6:	f000 fbb6 	bl	8001c36 <_ZNK21Grow_sensor_component9get_valueEv>
 80014ca:	6020      	str	r0, [r4, #0]
    return false;
 80014cc:	2000      	movs	r0, #0
}
 80014ce:	bd10      	pop	{r4, pc}
        return true;
 80014d0:	2001      	movs	r0, #1
 80014d2:	e7fc      	b.n	80014ce <_ZN11Grow_sensor9get_valueEhRf+0x1e>

080014d4 <_ZNK11Grow_sensor19get_count_componentEv>:
 80014d4:	6943      	ldr	r3, [r0, #20]
 80014d6:	6900      	ldr	r0, [r0, #16]
 80014d8:	1a18      	subs	r0, r3, r0
}
// --- Информации о компонентах ---

uint8_t Grow_sensor::get_count_component() const {
    return component_.size();
}
 80014da:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 80014de:	4770      	bx	lr

080014e0 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80014e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014e4:	e9d0 9a00 	ldrd	r9, sl, [r0]
 80014e8:	4693      	mov	fp, r2

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 80014ea:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80014ee:	4688      	mov	r8, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80014f0:	ebaa 0109 	sub.w	r1, sl, r9
	if (max_size() - size() < __n)
 80014f4:	ebb2 0fe1 	cmp.w	r2, r1, asr #3
 80014f8:	4607      	mov	r7, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80014fa:	ea4f 03e1 	mov.w	r3, r1, asr #3
	if (max_size() - size() < __n)
 80014fe:	d102      	bne.n	8001506 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8001500:	4823      	ldr	r0, [pc, #140]	; (8001590 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb0>)
 8001502:	f009 fd2a 	bl	800af5a <_ZSt20__throw_length_errorPKc>
 8001506:	2b01      	cmp	r3, #1
 8001508:	461c      	mov	r4, r3
 800150a:	bf38      	it	cc
 800150c:	2401      	movcc	r4, #1
 800150e:	18e4      	adds	r4, r4, r3
 8001510:	eba8 0609 	sub.w	r6, r8, r9

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001514:	d23a      	bcs.n	800158c <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xac>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001516:	b13c      	cbz	r4, 8001528 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x48>
 8001518:	4294      	cmp	r4, r2
 800151a:	bf28      	it	cs
 800151c:	4614      	movcs	r4, r2
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800151e:	00e0      	lsls	r0, r4, #3
 8001520:	f009 fd08 	bl	800af34 <_Znwj>
 8001524:	4605      	mov	r5, r0
 8001526:	e000      	b.n	800152a <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
 8001528:	4625      	mov	r5, r4
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800152a:	e89b 0003 	ldmia.w	fp, {r0, r1}
 800152e:	19ab      	adds	r3, r5, r6
 8001530:	e883 0003 	stmia.w	r3, {r0, r1}
 8001534:	2300      	movs	r3, #0
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
 8001536:	eb09 0203 	add.w	r2, r9, r3
 800153a:	4590      	cmp	r8, r2
 800153c:	d10e      	bne.n	800155c <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7c>
 800153e:	2300      	movs	r3, #0
 8001540:	3608      	adds	r6, #8
 8001542:	442e      	add	r6, r5
 8001544:	eb03 0208 	add.w	r2, r3, r8
 8001548:	4592      	cmp	sl, r2
 800154a:	d00f      	beq.n	800156c <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
 800154c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001550:	eb06 0c03 	add.w	ip, r6, r3
 8001554:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001558:	3308      	adds	r3, #8
 800155a:	e7f3      	b.n	8001544 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x64>
 800155c:	eb05 0c03 	add.w	ip, r5, r3
 8001560:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001564:	3308      	adds	r3, #8
 8001566:	e88c 0003 	stmia.w	ip, {r0, r1}
 800156a:	e7e4      	b.n	8001536 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x56>
 800156c:	ebaa 0808 	sub.w	r8, sl, r8
 8001570:	4446      	add	r6, r8
	if (__p)
 8001572:	f1b9 0f00 	cmp.w	r9, #0
 8001576:	d002      	beq.n	800157e <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
	::operator delete(__p);
 8001578:	4648      	mov	r0, r9
 800157a:	f009 fcd5 	bl	800af28 <_ZdlPv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800157e:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
 8001582:	e9c7 5600 	strd	r5, r6, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001586:	60bc      	str	r4, [r7, #8]
    }
 8001588:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800158c:	4614      	mov	r4, r2
 800158e:	e7c6      	b.n	800151e <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
 8001590:	0800b264 	.word	0x0800b264

08001594 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8001594:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001596:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 800159a:	428b      	cmp	r3, r1
      vector<_Tp, _Alloc>::
 800159c:	b510      	push	{r4, lr}
 800159e:	4604      	mov	r4, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80015a0:	d006      	beq.n	80015b0 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80015a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015a6:	e883 0003 	stmia.w	r3, {r0, r1}
	    ++this->_M_impl._M_finish;
 80015aa:	3308      	adds	r3, #8
 80015ac:	6063      	str	r3, [r4, #4]
      }
 80015ae:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80015b0:	4619      	mov	r1, r3
 80015b2:	f7ff ff95 	bl	80014e0 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 80015b6:	e7fa      	b.n	80015ae <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x1a>

080015b8 <_ZN11Grow_sensorC1EhP11Type_sensor>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 80015b8:	2300      	movs	r3, #0
Grow_sensor::Grow_sensor(uint8_t amt_component, enum Type_sensor* type_sensor) {
 80015ba:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80015be:	4617      	mov	r7, r2
class LoRa_address {
public:
    uint16_t group = 0xFFFF;  // Адрес группы
    uint16_t branch = 0xFFFF; // Адрес ветви
public:
    LoRa_address() = default;
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015c4:	4604      	mov	r4, r0
 80015c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80015ca:	4689      	mov	r9, r1
 80015cc:	61c2      	str	r2, [r0, #28]
 80015ce:	f100 0810 	add.w	r8, r0, #16
 80015d2:	6183      	str	r3, [r0, #24]
 80015d4:	1882      	adds	r2, r0, r2
 80015d6:	f100 010b 	add.w	r1, r0, #11
        system_id_[i] = 0;
 80015da:	f802 3f01 	strb.w	r3, [r2, #1]!
    for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
 80015de:	428a      	cmp	r2, r1
 80015e0:	d1fb      	bne.n	80015da <_ZN11Grow_sensorC1EhP11Type_sensor+0x22>
    address_ = 0xFFFF;
 80015e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    active_ = false;
 80015e6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    change_value_ = false;
 80015ea:	85e3      	strh	r3, [r4, #46]	; 0x2e
    for(int i = 0; i < COUNT_TYPE_SENSOR; ++i)
 80015ec:	2300      	movs	r3, #0
 80015ee:	4d15      	ldr	r5, [pc, #84]	; (8001644 <_ZN11Grow_sensorC1EhP11Type_sensor+0x8c>)
    address_ = 0xFFFF;
 80015f0:	81a2      	strh	r2, [r4, #12]
    for(int i = 0; i < COUNT_TYPE_SENSOR; ++i)
 80015f2:	46aa      	mov	sl, r5
    change_value_ = false;
 80015f4:	462a      	mov	r2, r5
        id_mas_sensors[i] = 0;
 80015f6:	4619      	mov	r1, r3
    for(int i = 0; i < COUNT_TYPE_SENSOR; ++i)
 80015f8:	3301      	adds	r3, #1
 80015fa:	2b0d      	cmp	r3, #13
        id_mas_sensors[i] = 0;
 80015fc:	f802 1b01 	strb.w	r1, [r2], #1
    for(int i = 0; i < COUNT_TYPE_SENSOR; ++i)
 8001600:	d1fa      	bne.n	80015f8 <_ZN11Grow_sensorC1EhP11Type_sensor+0x40>
    for(int i = 0; i < amt_component; ++i)
 8001602:	2600      	movs	r6, #0
 8001604:	45b1      	cmp	r9, r6
 8001606:	dd0e      	ble.n	8001626 <_ZN11Grow_sensorC1EhP11Type_sensor+0x6e>
        component_.push_back(Grow_sensor_component(type_sensor[i], (id_mas_sensors[type_sensor[i]]++)));
 8001608:	5db9      	ldrb	r1, [r7, r6]
 800160a:	4668      	mov	r0, sp
 800160c:	f81a 2001 	ldrb.w	r2, [sl, r1]
    for(int i = 0; i < amt_component; ++i)
 8001610:	3601      	adds	r6, #1
        component_.push_back(Grow_sensor_component(type_sensor[i], (id_mas_sensors[type_sensor[i]]++)));
 8001612:	1c53      	adds	r3, r2, #1
 8001614:	f80a 3001 	strb.w	r3, [sl, r1]
 8001618:	f000 fb04 	bl	8001c24 <_ZN21Grow_sensor_componentC1E11Type_sensorh>
      { emplace_back(std::move(__x)); }
 800161c:	4669      	mov	r1, sp
 800161e:	4640      	mov	r0, r8
 8001620:	f7ff ffb8 	bl	8001594 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
    for(int i = 0; i < amt_component; ++i)
 8001624:	e7ee      	b.n	8001604 <_ZN11Grow_sensorC1EhP11Type_sensor+0x4c>
    for (int i = 0; i < COUNT_TYPE_SENSOR; ++i)
 8001626:	2300      	movs	r3, #0
            setting_ = 0x04; // 0000.0100 - бит индивидуального номера, в случае наличия повторов
 8001628:	2204      	movs	r2, #4
        if(id_mas_sensors[i] > 1) {
 800162a:	f815 1b01 	ldrb.w	r1, [r5], #1
    for (int i = 0; i < COUNT_TYPE_SENSOR; ++i)
 800162e:	3301      	adds	r3, #1
        if(id_mas_sensors[i] > 1) {
 8001630:	2901      	cmp	r1, #1
            setting_ = 0x04; // 0000.0100 - бит индивидуального номера, в случае наличия повторов
 8001632:	bf88      	it	hi
 8001634:	f884 202f 	strbhi.w	r2, [r4, #47]	; 0x2f
    for (int i = 0; i < COUNT_TYPE_SENSOR; ++i)
 8001638:	2b0d      	cmp	r3, #13
 800163a:	d1f6      	bne.n	800162a <_ZN11Grow_sensorC1EhP11Type_sensor+0x72>
}
 800163c:	4620      	mov	r0, r4
 800163e:	b002      	add	sp, #8
 8001640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001644:	20000114 	.word	0x20000114

08001648 <_ZN21Grow_sensor_interface9load_dataER11Grow_sensorR17LoRa_contact_datamm>:

uint8_t data[50];
uint8_t size;

// --- Сохранение в энергонезависимую память ---
void Grow_sensor_interface::load_data(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data, uint32_t adr, uint32_t channel) {
 8001648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800164a:	4615      	mov	r5, r2
 800164c:	460c      	mov	r4, r1
    LoRa_address address(adr);
 800164e:	a801      	add	r0, sp, #4
 8001650:	4619      	mov	r1, r3
 8001652:	f004 f9c0 	bl	80059d6 <_ZN12LoRa_addressC1Em>
    contact_data.set_my_adr(address);
 8001656:	9901      	ldr	r1, [sp, #4]
 8001658:	4628      	mov	r0, r5
 800165a:	f000 fb51 	bl	8001d00 <_ZN17LoRa_contact_data10set_my_adrE12LoRa_address>
    address.branch = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	f8ad 3006 	strh.w	r3, [sp, #6]
    grow_sensor.set_address_control_module(address);
 8001664:	9901      	ldr	r1, [sp, #4]
 8001666:	4620      	mov	r0, r4
 8001668:	f7ff fed1 	bl	800140e <_ZN11Grow_sensor26set_address_control_moduleE12LoRa_address>
    contact_data.set_channel(channel);
 800166c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8001670:	4628      	mov	r0, r5
 8001672:	f000 fb55 	bl	8001d20 <_ZN17LoRa_contact_data11set_channelEt>
    grow_sensor.set_active(2);
 8001676:	2102      	movs	r1, #2
 8001678:	4620      	mov	r0, r4
 800167a:	f7ff fec0 	bl	80013fe <_ZN11Grow_sensor10set_activeEh>
}
 800167e:	b003      	add	sp, #12
 8001680:	bd30      	pop	{r4, r5, pc}

08001682 <_ZN21Grow_sensor_interface9save_dataERK11Grow_sensorRK17LoRa_contact_dataRmS6_>:
bool Grow_sensor_interface::save_data(const Grow_sensor &grow_sensor, const LoRa_contact_data& contact_data, uint32_t &adr, uint32_t &channel) {
 8001682:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(grow_sensor.get_active() != 2)
 8001684:	4608      	mov	r0, r1
bool Grow_sensor_interface::save_data(const Grow_sensor &grow_sensor, const LoRa_contact_data& contact_data, uint32_t &adr, uint32_t &channel) {
 8001686:	4614      	mov	r4, r2
 8001688:	461e      	mov	r6, r3
    if(grow_sensor.get_active() != 2)
 800168a:	f7ff febd 	bl	8001408 <_ZNK11Grow_sensor10get_activeEv>
 800168e:	2802      	cmp	r0, #2
 8001690:	d111      	bne.n	80016b6 <_ZN21Grow_sensor_interface9save_dataERK11Grow_sensorRK17LoRa_contact_dataRmS6_+0x34>
        return true;
    adr = (contact_data.get_my_adr().group << 16 | contact_data.get_my_adr().branch);
 8001692:	4620      	mov	r0, r4
 8001694:	f000 fb39 	bl	8001d0a <_ZNK17LoRa_contact_data10get_my_adrEv>
 8001698:	0405      	lsls	r5, r0, #16
 800169a:	4620      	mov	r0, r4
 800169c:	f000 fb35 	bl	8001d0a <_ZNK17LoRa_contact_data10get_my_adrEv>
 80016a0:	ea45 4510 	orr.w	r5, r5, r0, lsr #16
 80016a4:	6035      	str	r5, [r6, #0]
    channel = contact_data.get_channel();
 80016a6:	4620      	mov	r0, r4
 80016a8:	f000 fb41 	bl	8001d2e <_ZNK17LoRa_contact_data11get_channelEv>
 80016ac:	9b06      	ldr	r3, [sp, #24]
 80016ae:	6018      	str	r0, [r3, #0]
 80016b0:	2000      	movs	r0, #0
    return false;
}
 80016b2:	b002      	add	sp, #8
 80016b4:	bd70      	pop	{r4, r5, r6, pc}
        return true;
 80016b6:	2001      	movs	r0, #1
 80016b8:	e7fb      	b.n	80016b2 <_ZN21Grow_sensor_interface9save_dataERK11Grow_sensorRK17LoRa_contact_dataRmS6_+0x30>
	...

080016bc <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data>:

// --- LoRa-соединение ---
void Grow_sensor_interface::send_registration_packet(const Grow_sensor &grow_sensor, LoRa_contact_data& contact_data) {
 80016bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016c0:	b088      	sub	sp, #32
 80016c2:	460e      	mov	r6, r1
    LoRa_packet packet;
 80016c4:	a803      	add	r0, sp, #12
void Grow_sensor_interface::send_registration_packet(const Grow_sensor &grow_sensor, LoRa_contact_data& contact_data) {
 80016c6:	4617      	mov	r7, r2
    LoRa_packet packet;
 80016c8:	f003 f854 	bl	8004774 <_ZN11LoRa_packetC1Ev>
    uint8_t com = 0;
 80016cc:	2300      	movs	r3, #0
    uint8_t len = grow_sensor.get_count_component();
 80016ce:	4630      	mov	r0, r6
 80016d0:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800179c <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xe0>
    uint8_t com = 0;
 80016d4:	f88d 300a 	strb.w	r3, [sp, #10]
    uint8_t len = grow_sensor.get_count_component();
 80016d8:	f10d 0a14 	add.w	sl, sp, #20
 80016dc:	f7ff fefa 	bl	80014d4 <_ZNK11Grow_sensor19get_count_componentEv>
 80016e0:	240c      	movs	r4, #12
 80016e2:	4655      	mov	r5, sl
 80016e4:	46c8      	mov	r8, r9
 80016e6:	f88d 000b 	strb.w	r0, [sp, #11]
    uint8_t num_byte = 0;
    // Формирование данных пакета: ID, Type module, Count component, Type all component
    for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
        data[num_byte++] = grow_sensor.get_system_id()[i];
 80016ea:	4631      	mov	r1, r6
 80016ec:	4628      	mov	r0, r5
 80016ee:	f7ff fe7d 	bl	80013ec <_ZNK11Grow_sensor13get_system_idEv>
 80016f2:	f81a 3b01 	ldrb.w	r3, [sl], #1
    for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
 80016f6:	3c01      	subs	r4, #1
        data[num_byte++] = grow_sensor.get_system_id()[i];
 80016f8:	f809 3b01 	strb.w	r3, [r9], #1
    for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
 80016fc:	d1f5      	bne.n	80016ea <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0x2e>
    data[num_byte++] = len;  // Length = grow_sensor.get_count_component();
 80016fe:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001702:	f888 300c 	strb.w	r3, [r8, #12]
    data[num_byte++] = 0x01; // Type = sensors
 8001706:	2301      	movs	r3, #1
 8001708:	f888 300d 	strb.w	r3, [r8, #13]
    for(int i = 0; i < len; ++i)
 800170c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001710:	b2e1      	uxtb	r1, r4
 8001712:	f101 020e 	add.w	r2, r1, #14
 8001716:	42a3      	cmp	r3, r4
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	dd05      	ble.n	8001728 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0x6c>
        grow_sensor.get_type(i, data[num_byte++]);
 800171c:	4630      	mov	r0, r6
 800171e:	4442      	add	r2, r8
 8001720:	f7ff fe8c 	bl	800143c <_ZNK11Grow_sensor8get_typeEhRh>
    for(int i = 0; i < len; ++i)
 8001724:	3401      	adds	r4, #1
 8001726:	e7f1      	b.n	800170c <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0x50>
    // Формирование пакета
    packet_system.set_dest_adr(packet, LORA_GLOBAL_ADDRESS);
 8001728:	4628      	mov	r0, r5
 800172a:	491a      	ldr	r1, [pc, #104]	; (8001794 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xd8>)
 800172c:	f004 f953 	bl	80059d6 <_ZN12LoRa_addressC1Em>
 8001730:	9a05      	ldr	r2, [sp, #20]
 8001732:	a903      	add	r1, sp, #12
 8001734:	4818      	ldr	r0, [pc, #96]	; (8001798 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xdc>)
 8001736:	f004 f9da 	bl	8005aee <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address>
    packet_system.set_sour_adr(packet, LORA_GLOBAL_ADDRESS);
 800173a:	4628      	mov	r0, r5
 800173c:	4915      	ldr	r1, [pc, #84]	; (8001794 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xd8>)
 800173e:	f004 f94a 	bl	80059d6 <_ZN12LoRa_addressC1Em>
 8001742:	9a05      	ldr	r2, [sp, #20]
 8001744:	a903      	add	r1, sp, #12
 8001746:	4814      	ldr	r0, [pc, #80]	; (8001798 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xdc>)
 8001748:	f004 fa04 	bl	8005b54 <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address>
    packet_system.set_packet_type(packet, Packet_Type::SYSTEM);
 800174c:	a903      	add	r1, sp, #12
 800174e:	2203      	movs	r2, #3
 8001750:	4811      	ldr	r0, [pc, #68]	; (8001798 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xdc>)
 8001752:	f004 fa1e 	bl	8005b92 <_ZN15Packet_analyzer15set_packet_typeER11LoRa_packet11Packet_Type>
    packet_system.set_packet_data(packet, &com, data, &len);
 8001756:	f10d 030b 	add.w	r3, sp, #11
 800175a:	f10d 020a 	add.w	r2, sp, #10
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	a903      	add	r1, sp, #12
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xe0>)
 8001764:	480c      	ldr	r0, [pc, #48]	; (8001798 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xdc>)
 8001766:	f004 fc71 	bl	800604c <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_>
    // Отправка пакета
    contact_data.add_packet(std::move(packet));
 800176a:	a903      	add	r1, sp, #12
 800176c:	4628      	mov	r0, r5
 800176e:	f003 f87c 	bl	800486a <_ZN11LoRa_packetC1EOS_>
 8001772:	4629      	mov	r1, r5
 8001774:	4638      	mov	r0, r7
 8001776:	f000 fadd 	bl	8001d34 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet>
 800177a:	4628      	mov	r0, r5
 800177c:	f003 f802 	bl	8004784 <_ZN11LoRa_packetD1Ev>
    contact_data.broadcast_send();
 8001780:	2100      	movs	r1, #0
 8001782:	4638      	mov	r0, r7
 8001784:	f000 fffb 	bl	800277e <_ZN17LoRa_contact_data14broadcast_sendEb>
    LoRa_packet packet;
 8001788:	a803      	add	r0, sp, #12
 800178a:	f002 fffb 	bl	8004784 <_ZN11LoRa_packetD1Ev>
}
 800178e:	b008      	add	sp, #32
 8001790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001794:	01ff7fff 	.word	0x01ff7fff
 8001798:	20002424 	.word	0x20002424
 800179c:	2000019d 	.word	0x2000019d

080017a0 <_ZN21Grow_sensor_interface19check_contact_errorER11Grow_sensorR17LoRa_contact_data>:

bool Grow_sensor_interface::check_contact_error(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data) {
 80017a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(grow_sensor.get_active() != 1)
 80017a2:	4608      	mov	r0, r1
bool Grow_sensor_interface::check_contact_error(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data) {
 80017a4:	460d      	mov	r5, r1
 80017a6:	4616      	mov	r6, r2
    if(grow_sensor.get_active() != 1)
 80017a8:	f7ff fe2e 	bl	8001408 <_ZNK11Grow_sensor10get_activeEv>
 80017ac:	2801      	cmp	r0, #1
 80017ae:	4604      	mov	r4, r0
 80017b0:	d116      	bne.n	80017e0 <_ZN21Grow_sensor_interface19check_contact_errorER11Grow_sensorR17LoRa_contact_data+0x40>
        return false;
    grow_sensor.set_address_control_module(LORA_GLOBAL_ADDRESS);
 80017b2:	490c      	ldr	r1, [pc, #48]	; (80017e4 <_ZN21Grow_sensor_interface19check_contact_errorER11Grow_sensorR17LoRa_contact_data+0x44>)
 80017b4:	a801      	add	r0, sp, #4
 80017b6:	f004 f90e 	bl	80059d6 <_ZN12LoRa_addressC1Em>
 80017ba:	9901      	ldr	r1, [sp, #4]
 80017bc:	4628      	mov	r0, r5
 80017be:	f7ff fe26 	bl	800140e <_ZN11Grow_sensor26set_address_control_moduleE12LoRa_address>
    contact_data.set_my_adr(LORA_GLOBAL_ADDRESS);
 80017c2:	4908      	ldr	r1, [pc, #32]	; (80017e4 <_ZN21Grow_sensor_interface19check_contact_errorER11Grow_sensorR17LoRa_contact_data+0x44>)
 80017c4:	a801      	add	r0, sp, #4
 80017c6:	f004 f906 	bl	80059d6 <_ZN12LoRa_addressC1Em>
 80017ca:	9901      	ldr	r1, [sp, #4]
 80017cc:	4630      	mov	r0, r6
 80017ce:	f000 fa97 	bl	8001d00 <_ZN17LoRa_contact_data10set_my_adrE12LoRa_address>
    grow_sensor.set_active(0);
 80017d2:	4628      	mov	r0, r5
 80017d4:	2100      	movs	r1, #0
 80017d6:	f7ff fe12 	bl	80013fe <_ZN11Grow_sensor10set_activeEh>
    return true;
 80017da:	4620      	mov	r0, r4
}
 80017dc:	b002      	add	sp, #8
 80017de:	bd70      	pop	{r4, r5, r6, pc}
        return false;
 80017e0:	2000      	movs	r0, #0
 80017e2:	e7fb      	b.n	80017dc <_ZN21Grow_sensor_interface19check_contact_errorER11Grow_sensorR17LoRa_contact_data+0x3c>
 80017e4:	01ff7fff 	.word	0x01ff7fff

080017e8 <_ZNSt5arrayI11LoRa_packetLj15EED1Ev>:
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  N  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
 80017e8:	b538      	push	{r3, r4, r5, lr}
 80017ea:	4605      	mov	r5, r0
 80017ec:	f100 0478 	add.w	r4, r0, #120	; 0x78
 80017f0:	42ac      	cmp	r4, r5
 80017f2:	d004      	beq.n	80017fe <_ZNSt5arrayI11LoRa_packetLj15EED1Ev+0x16>
 80017f4:	3c08      	subs	r4, #8
 80017f6:	4620      	mov	r0, r4
 80017f8:	f002 ffc4 	bl	8004784 <_ZN11LoRa_packetD1Ev>
 80017fc:	e7f8      	b.n	80017f0 <_ZNSt5arrayI11LoRa_packetLj15EED1Ev+0x8>
 80017fe:	4620      	mov	r0, r4
 8001800:	bd38      	pop	{r3, r4, r5, pc}

08001802 <_ZNSt5arrayI11LoRa_packetLj15EEaSEOS1_>:
 8001802:	b570      	push	{r4, r5, r6, lr}
 8001804:	4605      	mov	r5, r0
 8001806:	460e      	mov	r6, r1
 8001808:	2400      	movs	r4, #0
 800180a:	1931      	adds	r1, r6, r4
 800180c:	1928      	adds	r0, r5, r4
 800180e:	3408      	adds	r4, #8
 8001810:	f003 f81c 	bl	800484c <_ZN11LoRa_packetaSEOS_>
 8001814:	2c78      	cmp	r4, #120	; 0x78
 8001816:	d1f8      	bne.n	800180a <_ZNSt5arrayI11LoRa_packetLj15EEaSEOS1_+0x8>
 8001818:	4628      	mov	r0, r5
 800181a:	bd70      	pop	{r4, r5, r6, pc}

0800181c <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data>:

bool Grow_sensor_interface::check_regist_packet(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data) {
 800181c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001820:	4616      	mov	r6, r2
 8001822:	b0a7      	sub	sp, #156	; 0x9c
    all_packets = contact_data.get_all_packet(all_packets_len);
 8001824:	4a38      	ldr	r2, [pc, #224]	; (8001908 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xec>)
 8001826:	a808      	add	r0, sp, #32
bool Grow_sensor_interface::check_regist_packet(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data) {
 8001828:	460c      	mov	r4, r1
    all_packets = contact_data.get_all_packet(all_packets_len);
 800182a:	4631      	mov	r1, r6
 800182c:	f000 facc 	bl	8001dc8 <_ZN17LoRa_contact_data14get_all_packetERh>
 8001830:	a908      	add	r1, sp, #32
 8001832:	4836      	ldr	r0, [pc, #216]	; (800190c <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xf0>)
 8001834:	f7ff ffe5 	bl	8001802 <_ZNSt5arrayI11LoRa_packetLj15EEaSEOS1_>
 8001838:	a808      	add	r0, sp, #32
 800183a:	f7ff ffd5 	bl	80017e8 <_ZNSt5arrayI11LoRa_packetLj15EED1Ev>
    // (!) ----- сделать сброс в 0 при отсутствии контакта в течении времени
    // проверить на то является ли пакет подтверждением регистрации, если да, то произвести попытку регистрации
    for(int i = 0; i < all_packets_len; ++i) {
 800183e:	2500      	movs	r5, #0
 8001840:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8001908 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xec>
 8001844:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800190c <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xf0>
        if(packet_analyzer.get_packet_type(all_packets[i]) == Packet_Type::SYSTEM) {
 8001848:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 800191c <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x100>
    for(int i = 0; i < all_packets_len; ++i) {
 800184c:	f898 3000 	ldrb.w	r3, [r8]
 8001850:	42ab      	cmp	r3, r5
 8001852:	dd56      	ble.n	8001902 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xe6>
        if(packet_analyzer.get_packet_type(all_packets[i]) == Packet_Type::SYSTEM) {
 8001854:	eb09 07c5 	add.w	r7, r9, r5, lsl #3
 8001858:	4639      	mov	r1, r7
 800185a:	4650      	mov	r0, sl
 800185c:	f004 f926 	bl	8005aac <_ZN15Packet_analyzer15get_packet_typeERK11LoRa_packet>
 8001860:	2803      	cmp	r0, #3
 8001862:	d14c      	bne.n	80018fe <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xe2>
            uint8_t err = 0;
            err = packet_system.get_size_by_packet(all_packets[i], size);
 8001864:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8001920 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x104>
 8001868:	4639      	mov	r1, r7
 800186a:	465a      	mov	r2, fp
 800186c:	4828      	ldr	r0, [pc, #160]	; (8001910 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xf4>)
 800186e:	f004 fcb9 	bl	80061e4 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh>
            if((err != 0) || (size != (3+AMT_BYTES_SYSTEM_ID)))
 8001872:	2800      	cmp	r0, #0
 8001874:	d143      	bne.n	80018fe <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xe2>
 8001876:	f89b 3000 	ldrb.w	r3, [fp]
 800187a:	2b0f      	cmp	r3, #15
 800187c:	d13f      	bne.n	80018fe <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xe2>
                continue;
            uint8_t com = 0x00;
            uint8_t len = 0;
            packet_system.get_packet_data(all_packets[i], &com, data, &len);
 800187e:	f10d 030f 	add.w	r3, sp, #15
            uint8_t com = 0x00;
 8001882:	f88d 000e 	strb.w	r0, [sp, #14]
            uint8_t len = 0;
 8001886:	f88d 000f 	strb.w	r0, [sp, #15]
            packet_system.get_packet_data(all_packets[i], &com, data, &len);
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	4639      	mov	r1, r7
 800188e:	4b21      	ldr	r3, [pc, #132]	; (8001914 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xf8>)
 8001890:	481f      	ldr	r0, [pc, #124]	; (8001910 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xf4>)
 8001892:	f10d 020e 	add.w	r2, sp, #14
 8001896:	f004 fc43 	bl	8006120 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_>
            if(com != 0x01)
 800189a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d12d      	bne.n	80018fe <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xe2>
 80018a2:	aa05      	add	r2, sp, #20
 80018a4:	230c      	movs	r3, #12
 80018a6:	4693      	mov	fp, r2
 80018a8:	491a      	ldr	r1, [pc, #104]	; (8001914 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xf8>)
                continue;
            uint8_t num_byte = 0;
            std::array<uint8_t, AMT_BYTES_SYSTEM_ID> sensor_id;
            for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
                sensor_id[i]= data[num_byte++];
 80018aa:	f811 0b01 	ldrb.w	r0, [r1], #1
            for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
 80018ae:	3b01      	subs	r3, #1
                sensor_id[i]= data[num_byte++];
 80018b0:	f802 0b01 	strb.w	r0, [r2], #1
            for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
 80018b4:	d1f9      	bne.n	80018aa <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x8e>
            if(sensor_id != grow_sensor.get_system_id())
 80018b6:	4621      	mov	r1, r4
 80018b8:	a808      	add	r0, sp, #32
 80018ba:	f7ff fd97 	bl	80013ec <_ZNK11Grow_sensor13get_system_idEv>
      template<typename _Tp>
	static bool
	equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
	{
	  if (const size_t __len = (__last1 - __first1))
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 80018be:	220c      	movs	r2, #12
 80018c0:	4658      	mov	r0, fp
 80018c2:	a908      	add	r1, sp, #32
 80018c4:	f009 fb96 	bl	800aff4 <memcmp>
 80018c8:	b9c8      	cbnz	r0, 80018fe <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xe2>
                continue;
            grow_sensor.set_address_control_module(packet_system.get_sour_adr(all_packets[i]));
 80018ca:	4639      	mov	r1, r7
 80018cc:	4810      	ldr	r0, [pc, #64]	; (8001910 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xf4>)
 80018ce:	f004 f8df 	bl	8005a90 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>
 80018d2:	4601      	mov	r1, r0
 80018d4:	9008      	str	r0, [sp, #32]
 80018d6:	4620      	mov	r0, r4
 80018d8:	f7ff fd99 	bl	800140e <_ZN11Grow_sensor26set_address_control_moduleE12LoRa_address>
            contact_data.set_my_adr(LoRa_address(&data[num_byte]));
 80018dc:	2203      	movs	r2, #3
 80018de:	490e      	ldr	r1, [pc, #56]	; (8001918 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xfc>)
 80018e0:	a804      	add	r0, sp, #16
 80018e2:	f004 f85d 	bl	80059a0 <_ZN12LoRa_addressC1EPKhh>
 80018e6:	9904      	ldr	r1, [sp, #16]
 80018e8:	4630      	mov	r0, r6
 80018ea:	f000 fa09 	bl	8001d00 <_ZN17LoRa_contact_data10set_my_adrE12LoRa_address>
            num_byte += 3;
            grow_sensor.set_active(1);
 80018ee:	4620      	mov	r0, r4
 80018f0:	2101      	movs	r1, #1
 80018f2:	f7ff fd84 	bl	80013fe <_ZN11Grow_sensor10set_activeEh>
            return true;
 80018f6:	2001      	movs	r0, #1
        }
    }
    return false;
}
 80018f8:	b027      	add	sp, #156	; 0x9c
 80018fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(int i = 0; i < all_packets_len; ++i) {
 80018fe:	3501      	adds	r5, #1
 8001900:	e7a4      	b.n	800184c <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x30>
    return false;
 8001902:	2000      	movs	r0, #0
 8001904:	e7f8      	b.n	80018f8 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xdc>
 8001906:	bf00      	nop
 8001908:	2000019c 	.word	0x2000019c
 800190c:	20000124 	.word	0x20000124
 8001910:	20002424 	.word	0x20002424
 8001914:	2000019d 	.word	0x2000019d
 8001918:	200001a9 	.word	0x200001a9
 800191c:	200023a8 	.word	0x200023a8
 8001920:	200001d0 	.word	0x200001d0

08001924 <_ZN21Grow_sensor_interface23contact_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet>:
    return 0;
}



uint8_t Grow_sensor_interface::contact_package_handler(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data, LoRa_packet& packet) {
 8001924:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001926:	4619      	mov	r1, r3
    uint8_t err = 0;
    uint8_t com = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8_t len = 0;
 800192e:	f88d 300f 	strb.w	r3, [sp, #15]
    err = packet_connection.get_packet_data(packet, &com, data, &len);
 8001932:	f10d 030f 	add.w	r3, sp, #15
 8001936:	f10d 020e 	add.w	r2, sp, #14
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	4806      	ldr	r0, [pc, #24]	; (8001958 <_ZN21Grow_sensor_interface23contact_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0x34>)
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <_ZN21Grow_sensor_interface23contact_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0x38>)
 8001940:	f004 fa8e 	bl	8005e60 <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
    switch(com) {
 8001944:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8001948:	2b0c      	cmp	r3, #12
 800194a:	bf8e      	itee	hi
 800194c:	2001      	movhi	r0, #1
 800194e:	4a04      	ldrls	r2, [pc, #16]	; (8001960 <_ZN21Grow_sensor_interface23contact_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0x3c>)
 8001950:	5cd0      	ldrbls	r0, [r2, r3]
    // 0 - нет ошибки, пакет обработан
    // 1 - не распознан тип пакета
    // 2 - неверный тип пакета (пакет не может прийти при контакте)
    // 3 - нереализованна обработка
    return err;
}
 8001952:	b005      	add	sp, #20
 8001954:	f85d fb04 	ldr.w	pc, [sp], #4
 8001958:	200023c4 	.word	0x200023c4
 800195c:	2000019d 	.word	0x2000019d
 8001960:	0800b27e 	.word	0x0800b27e

08001964 <_GLOBAL__sub_I_grow_sensor_interface>:
    // 1 - не распознан тип пакета
    // 2 - неверный тип пакета (пакет не может прийти при контакте)
    // 3 - нереализованна обработка
    // 4 - ошибка пакета
    return err;
}
 8001964:	b538      	push	{r3, r4, r5, lr}
 8001966:	2400      	movs	r4, #0
 8001968:	4d03      	ldr	r5, [pc, #12]	; (8001978 <_GLOBAL__sub_I_grow_sensor_interface+0x14>)
 800196a:	1928      	adds	r0, r5, r4
 800196c:	3408      	adds	r4, #8
 800196e:	f002 ff01 	bl	8004774 <_ZN11LoRa_packetC1Ev>
 8001972:	2c78      	cmp	r4, #120	; 0x78
 8001974:	d1f9      	bne.n	800196a <_GLOBAL__sub_I_grow_sensor_interface+0x6>
 8001976:	bd38      	pop	{r3, r4, r5, pc}
 8001978:	20000124 	.word	0x20000124

0800197c <_GLOBAL__sub_D_grow_sensor_interface>:
 800197c:	b508      	push	{r3, lr}
static std::array<LoRa_packet, CONTACT_DATA_MAX_PACKET> all_packets;
 800197e:	4802      	ldr	r0, [pc, #8]	; (8001988 <_GLOBAL__sub_D_grow_sensor_interface+0xc>)
 8001980:	f7ff ff32 	bl	80017e8 <_ZNSt5arrayI11LoRa_packetLj15EED1Ev>
}
 8001984:	bd08      	pop	{r3, pc}
 8001986:	bf00      	nop
 8001988:	20000124 	.word	0x20000124

0800198c <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data>:
uint8_t Grow_sensor_interface::build_data_packet(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data) {
 800198c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001990:	4616      	mov	r6, r2
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001992:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001996:	4b48      	ldr	r3, [pc, #288]	; (8001ab8 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x12c>)
 8001998:	460d      	mov	r5, r1
 800199a:	b08b      	sub	sp, #44	; 0x2c
 800199c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80019a4:	f3bf 8f6f 	isb	sy
 80019a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
 80019ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80019b0:	f3bf 8f6f 	isb	sy
    if(grow_sensor.get_active() == 2) {
 80019b4:	4608      	mov	r0, r1
 80019b6:	f7ff fd27 	bl	8001408 <_ZNK11Grow_sensor10get_activeEv>
 80019ba:	2802      	cmp	r0, #2
 80019bc:	d009      	beq.n	80019d2 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x46>
    int i = 0;
 80019be:	2400      	movs	r4, #0
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019c4:	4b3c      	ldr	r3, [pc, #240]	; (8001ab8 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x12c>)
}
 80019c6:	b2e0      	uxtb	r0, r4
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	b00b      	add	sp, #44	; 0x2c
 80019ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(!contact_data.get_signal_start_connect()) {
 80019d2:	4630      	mov	r0, r6
 80019d4:	f000 fa54 	bl	8001e80 <_ZN17LoRa_contact_data24get_signal_start_connectEv>
 80019d8:	4604      	mov	r4, r0
 80019da:	2800      	cmp	r0, #0
 80019dc:	d1ef      	bne.n	80019be <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x32>
            contact_data.end_contact();
 80019de:	4630      	mov	r0, r6
 80019e0:	f000 fe48 	bl	8002674 <_ZN17LoRa_contact_data11end_contactEv>
            contact_data.clear_send_packet();
 80019e4:	4630      	mov	r0, r6
 80019e6:	f000 f9dd 	bl	8001da4 <_ZN17LoRa_contact_data17clear_send_packetEv>
            uint8_t amt = grow_sensor.get_count_component();
 80019ea:	4628      	mov	r0, r5
 80019ec:	f7ff fd72 	bl	80014d4 <_ZNK11Grow_sensor19get_count_componentEv>
 80019f0:	4681      	mov	r9, r0
            packet_sensor.set_setting(grow_sensor.get_setting());
 80019f2:	4628      	mov	r0, r5
 80019f4:	f7ff fd1f 	bl	8001436 <_ZNK11Grow_sensor11get_settingEv>
 80019f8:	4601      	mov	r1, r0
 80019fa:	4830      	ldr	r0, [pc, #192]	; (8001abc <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x130>)
 80019fc:	f003 ffc8 	bl	8005990 <_ZN13Packet_Sensor11set_settingEh>
                packet_sensor.set_dest_adr(packet, grow_sensor.get_address_control_module());
 8001a00:	4f2e      	ldr	r7, [pc, #184]	; (8001abc <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x130>)
            for(i = 0; i < amt; ++i) {
 8001a02:	45a1      	cmp	r9, r4
 8001a04:	fa5f f884 	uxtb.w	r8, r4
 8001a08:	dd4c      	ble.n	8001aa4 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x118>
                LoRa_packet packet;
 8001a0a:	a806      	add	r0, sp, #24
 8001a0c:	f002 feb2 	bl	8004774 <_ZN11LoRa_packetC1Ev>
                packet_sensor.set_dest_adr(packet, grow_sensor.get_address_control_module());
 8001a10:	4628      	mov	r0, r5
 8001a12:	f7ff fd05 	bl	8001420 <_ZNK11Grow_sensor26get_address_control_moduleEv>
 8001a16:	a906      	add	r1, sp, #24
 8001a18:	4602      	mov	r2, r0
 8001a1a:	4638      	mov	r0, r7
 8001a1c:	f004 f867 	bl	8005aee <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address>
                packet_sensor.set_sour_adr(packet, contact_data.get_my_adr());
 8001a20:	4630      	mov	r0, r6
 8001a22:	f000 f972 	bl	8001d0a <_ZNK17LoRa_contact_data10get_my_adrEv>
 8001a26:	a906      	add	r1, sp, #24
 8001a28:	4602      	mov	r2, r0
 8001a2a:	4638      	mov	r0, r7
 8001a2c:	f004 f892 	bl	8005b54 <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address>
                err = grow_sensor.get_type(i, param);
 8001a30:	4641      	mov	r1, r8
 8001a32:	4628      	mov	r0, r5
 8001a34:	f10d 020a 	add.w	r2, sp, #10
 8001a38:	f7ff fd00 	bl	800143c <_ZNK11Grow_sensor8get_typeEhRh>
                if(err) break;
 8001a3c:	bb78      	cbnz	r0, 8001a9e <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x112>
                err = grow_sensor.get_id(i, id);
 8001a3e:	f10d 0a0b 	add.w	sl, sp, #11
 8001a42:	4652      	mov	r2, sl
 8001a44:	4641      	mov	r1, r8
 8001a46:	4628      	mov	r0, r5
 8001a48:	f7ff fd0a 	bl	8001460 <_ZNK11Grow_sensor6get_idEhRh>
                if(err) break;
 8001a4c:	bb38      	cbnz	r0, 8001a9e <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x112>
                err = grow_sensor.get_value(i, *reinterpret_cast<float*>(&value));
 8001a4e:	f10d 0b0c 	add.w	fp, sp, #12
 8001a52:	4641      	mov	r1, r8
 8001a54:	465a      	mov	r2, fp
 8001a56:	4628      	mov	r0, r5
 8001a58:	f7ff fd2a 	bl	80014b0 <_ZN11Grow_sensor9get_valueEhRf>
                if(err) break;
 8001a5c:	4680      	mov	r8, r0
 8001a5e:	b9f0      	cbnz	r0, 8001a9e <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x112>
                packet_sensor.set_packet_type(packet, Packet_Type::SENSOR);
 8001a60:	2201      	movs	r2, #1
 8001a62:	a906      	add	r1, sp, #24
 8001a64:	4638      	mov	r0, r7
 8001a66:	f004 f894 	bl	8005b92 <_ZN15Packet_analyzer15set_packet_typeER11LoRa_packet11Packet_Type>
                err = packet_sensor.set_packet_data(packet, nullptr, &param, &id, &value);
 8001a6a:	4642      	mov	r2, r8
 8001a6c:	4638      	mov	r0, r7
 8001a6e:	e9cd ab00 	strd	sl, fp, [sp]
 8001a72:	f10d 030a 	add.w	r3, sp, #10
 8001a76:	a906      	add	r1, sp, #24
 8001a78:	f004 fa4c 	bl	8005f14 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm>
                if(err) break;
 8001a7c:	b978      	cbnz	r0, 8001a9e <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x112>
                contact_data.add_packet(std::move(packet));
 8001a7e:	a906      	add	r1, sp, #24
 8001a80:	a808      	add	r0, sp, #32
 8001a82:	f002 fef2 	bl	800486a <_ZN11LoRa_packetC1EOS_>
 8001a86:	a908      	add	r1, sp, #32
 8001a88:	4630      	mov	r0, r6
 8001a8a:	f000 f953 	bl	8001d34 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet>
 8001a8e:	a808      	add	r0, sp, #32
 8001a90:	f002 fe78 	bl	8004784 <_ZN11LoRa_packetD1Ev>
                LoRa_packet packet;
 8001a94:	a806      	add	r0, sp, #24
 8001a96:	f002 fe75 	bl	8004784 <_ZN11LoRa_packetD1Ev>
            for(i = 0; i < amt; ++i) {
 8001a9a:	3401      	adds	r4, #1
 8001a9c:	e7b1      	b.n	8001a02 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x76>
                LoRa_packet packet;
 8001a9e:	a806      	add	r0, sp, #24
 8001aa0:	f002 fe70 	bl	8004784 <_ZN11LoRa_packetD1Ev>
            contact_data.wait_recipient(grow_sensor.get_address_control_module());
 8001aa4:	4628      	mov	r0, r5
 8001aa6:	f7ff fcbb 	bl	8001420 <_ZNK11Grow_sensor26get_address_control_moduleEv>
 8001aaa:	4601      	mov	r1, r0
 8001aac:	9008      	str	r0, [sp, #32]
 8001aae:	4630      	mov	r0, r6
 8001ab0:	f000 fd20 	bl	80024f4 <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>
 8001ab4:	e784      	b.n	80019c0 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x34>
 8001ab6:	bf00      	nop
 8001ab8:	e000e100 	.word	0xe000e100
 8001abc:	20002404 	.word	0x20002404

08001ac0 <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet>:
uint8_t Grow_sensor_interface::system_package_handler(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data, LoRa_packet& packet) {
 8001ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ac4:	460d      	mov	r5, r1
 8001ac6:	4619      	mov	r1, r3
    uint8_t com = 0;
 8001ac8:	2300      	movs	r3, #0
uint8_t Grow_sensor_interface::system_package_handler(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data, LoRa_packet& packet) {
 8001aca:	b089      	sub	sp, #36	; 0x24
    err = packet_system.get_packet_data(packet, &com, data, &len);
 8001acc:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8001b6c <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0xac>
    uint8_t com = 0;
 8001ad0:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8_t len = 0;
 8001ad4:	f88d 300f 	strb.w	r3, [sp, #15]
    err = packet_system.get_packet_data(packet, &com, data, &len);
 8001ad8:	f10d 030f 	add.w	r3, sp, #15
 8001adc:	9300      	str	r3, [sp, #0]
uint8_t Grow_sensor_interface::system_package_handler(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data, LoRa_packet& packet) {
 8001ade:	4607      	mov	r7, r0
    err = packet_system.get_packet_data(packet, &com, data, &len);
 8001ae0:	4643      	mov	r3, r8
uint8_t Grow_sensor_interface::system_package_handler(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data, LoRa_packet& packet) {
 8001ae2:	4616      	mov	r6, r2
    err = packet_system.get_packet_data(packet, &com, data, &len);
 8001ae4:	481f      	ldr	r0, [pc, #124]	; (8001b64 <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0xa4>)
 8001ae6:	f10d 020e 	add.w	r2, sp, #14
 8001aea:	f004 fb19 	bl	8006120 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_>
    switch(com) {
 8001aee:	f89d 300e 	ldrb.w	r3, [sp, #14]
    err = packet_system.get_packet_data(packet, &com, data, &len);
 8001af2:	4604      	mov	r4, r0
    switch(com) {
 8001af4:	2b07      	cmp	r3, #7
 8001af6:	d82e      	bhi.n	8001b56 <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0x96>
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d82e      	bhi.n	8001b5a <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0x9a>
 8001afc:	d12f      	bne.n	8001b5e <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0x9e>
        if(len != 2) {
 8001afe:	f89d 900f 	ldrb.w	r9, [sp, #15]
 8001b02:	f1b9 0f02 	cmp.w	r9, #2
 8001b06:	d124      	bne.n	8001b52 <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0x92>
        channel = (channel << 8) | data[1];
 8001b08:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001b0c:	f898 1000 	ldrb.w	r1, [r8]
        contact_data.set_channel(channel);
 8001b10:	4630      	mov	r0, r6
 8001b12:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8001b16:	f000 f903 	bl	8001d20 <_ZN17LoRa_contact_data11set_channelEt>
        grow_sensor.set_active(2);
 8001b1a:	4649      	mov	r1, r9
 8001b1c:	4628      	mov	r0, r5
 8001b1e:	f7ff fc6e 	bl	80013fe <_ZN11Grow_sensor10set_activeEh>
        build_data_packet(grow_sensor, contact_data);
 8001b22:	4632      	mov	r2, r6
 8001b24:	4629      	mov	r1, r5
 8001b26:	4638      	mov	r0, r7
 8001b28:	f7ff ff30 	bl	800198c <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data>
        grow_sensor_interface.save_data(grow_sensor, contact_data, save_adr, save_channel);
 8001b2c:	ab05      	add	r3, sp, #20
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	4632      	mov	r2, r6
 8001b32:	ab04      	add	r3, sp, #16
 8001b34:	4629      	mov	r1, r5
 8001b36:	480c      	ldr	r0, [pc, #48]	; (8001b68 <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0xa8>)
 8001b38:	f7ff fda3 	bl	8001682 <_ZN21Grow_sensor_interface9save_dataERK11Grow_sensorRK17LoRa_contact_dataRmS6_>
        uint32_t control_module_id_and_channel[BUFFSIZE] = {save_adr, save_channel};
 8001b3c:	9b04      	ldr	r3, [sp, #16]
        Write_to_flash(control_module_id_and_channel);
 8001b3e:	a806      	add	r0, sp, #24
        uint32_t control_module_id_and_channel[BUFFSIZE] = {save_adr, save_channel};
 8001b40:	9306      	str	r3, [sp, #24]
 8001b42:	9b05      	ldr	r3, [sp, #20]
 8001b44:	9307      	str	r3, [sp, #28]
        Write_to_flash(control_module_id_and_channel);
 8001b46:	f7ff fc03 	bl	8001350 <Write_to_flash>
}
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	b009      	add	sp, #36	; 0x24
 8001b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            err = 4;
 8001b52:	2404      	movs	r4, #4
 8001b54:	e7f9      	b.n	8001b4a <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0x8a>
        err = 1;
 8001b56:	2401      	movs	r4, #1
 8001b58:	e7f7      	b.n	8001b4a <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0x8a>
    switch(com) {
 8001b5a:	2403      	movs	r4, #3
 8001b5c:	e7f5      	b.n	8001b4a <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0x8a>
    case 0x01: err = 2; break;
 8001b5e:	2402      	movs	r4, #2
 8001b60:	e7f3      	b.n	8001b4a <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0x8a>
 8001b62:	bf00      	nop
 8001b64:	20002424 	.word	0x20002424
 8001b68:	200001cf 	.word	0x200001cf
 8001b6c:	2000019d 	.word	0x2000019d

08001b70 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data>:
uint8_t Grow_sensor_interface::read_received_data_packets(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data) {
 8001b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b74:	4680      	mov	r8, r0
 8001b76:	b09f      	sub	sp, #124	; 0x7c
    if(grow_sensor.get_active() == 0)
 8001b78:	4608      	mov	r0, r1
uint8_t Grow_sensor_interface::read_received_data_packets(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data) {
 8001b7a:	460c      	mov	r4, r1
 8001b7c:	4615      	mov	r5, r2
    if(grow_sensor.get_active() == 0)
 8001b7e:	f7ff fc43 	bl	8001408 <_ZNK11Grow_sensor10get_activeEv>
 8001b82:	2800      	cmp	r0, #0
 8001b84:	d03d      	beq.n	8001c02 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0x92>
    all_packets = contact_data.get_all_packet(all_packets_len);
 8001b86:	4a21      	ldr	r2, [pc, #132]	; (8001c0c <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0x9c>)
 8001b88:	4629      	mov	r1, r5
 8001b8a:	4668      	mov	r0, sp
 8001b8c:	f000 f91c 	bl	8001dc8 <_ZN17LoRa_contact_data14get_all_packetERh>
 8001b90:	4669      	mov	r1, sp
 8001b92:	481f      	ldr	r0, [pc, #124]	; (8001c10 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0xa0>)
 8001b94:	f7ff fe35 	bl	8001802 <_ZNSt5arrayI11LoRa_packetLj15EEaSEOS1_>
 8001b98:	4668      	mov	r0, sp
 8001b9a:	f7ff fe25 	bl	80017e8 <_ZNSt5arrayI11LoRa_packetLj15EED1Ev>
    for(int i = 0; i < all_packets_len; ++i) {
 8001b9e:	2700      	movs	r7, #0
 8001ba0:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8001c0c <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0x9c>
 8001ba4:	f8df a068 	ldr.w	sl, [pc, #104]	; 8001c10 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0xa0>
        Packet_Type type_packet = packet_analyzer.get_packet_type(all_packets[i]);
 8001ba8:	f8df b074 	ldr.w	fp, [pc, #116]	; 8001c20 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0xb0>
    for(int i = 0; i < all_packets_len; ++i) {
 8001bac:	f899 3000 	ldrb.w	r3, [r9]
 8001bb0:	42bb      	cmp	r3, r7
 8001bb2:	dd26      	ble.n	8001c02 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0x92>
        Packet_Type type_packet = packet_analyzer.get_packet_type(all_packets[i]);
 8001bb4:	eb0a 06c7 	add.w	r6, sl, r7, lsl #3
 8001bb8:	4631      	mov	r1, r6
 8001bba:	4658      	mov	r0, fp
 8001bbc:	f003 ff76 	bl	8005aac <_ZN15Packet_analyzer15get_packet_typeERK11LoRa_packet>
        switch (type_packet) {
 8001bc0:	b118      	cbz	r0, 8001bca <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0x5a>
 8001bc2:	2803      	cmp	r0, #3
 8001bc4:	d00f      	beq.n	8001be6 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0x76>
    for(int i = 0; i < all_packets_len; ++i) {
 8001bc6:	3701      	adds	r7, #1
 8001bc8:	e7f0      	b.n	8001bac <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0x3c>
            err = packet_connection.get_size_by_packet(all_packets[i], size);
 8001bca:	4631      	mov	r1, r6
 8001bcc:	4a11      	ldr	r2, [pc, #68]	; (8001c14 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0xa4>)
 8001bce:	4812      	ldr	r0, [pc, #72]	; (8001c18 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0xa8>)
 8001bd0:	f004 f95a 	bl	8005e88 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh>
            if(err != 0)
 8001bd4:	2800      	cmp	r0, #0
 8001bd6:	d1f6      	bne.n	8001bc6 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0x56>
            err = contact_package_handler(grow_sensor, contact_data, all_packets[i]);
 8001bd8:	4633      	mov	r3, r6
 8001bda:	462a      	mov	r2, r5
 8001bdc:	4621      	mov	r1, r4
 8001bde:	4640      	mov	r0, r8
 8001be0:	f7ff fea0 	bl	8001924 <_ZN21Grow_sensor_interface23contact_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet>
            if(err == 0) {
 8001be4:	e7ef      	b.n	8001bc6 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0x56>
            err = packet_system.get_size_by_packet(all_packets[i], size);
 8001be6:	4631      	mov	r1, r6
 8001be8:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0xa4>)
 8001bea:	480c      	ldr	r0, [pc, #48]	; (8001c1c <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0xac>)
 8001bec:	f004 fafa 	bl	80061e4 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh>
            if(err != 0)
 8001bf0:	2800      	cmp	r0, #0
 8001bf2:	d1e8      	bne.n	8001bc6 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0x56>
            err = system_package_handler(grow_sensor, contact_data, all_packets[i]);
 8001bf4:	4633      	mov	r3, r6
 8001bf6:	462a      	mov	r2, r5
 8001bf8:	4621      	mov	r1, r4
 8001bfa:	4640      	mov	r0, r8
 8001bfc:	f7ff ff60 	bl	8001ac0 <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet>
            if(err == 0) {
 8001c00:	e7e1      	b.n	8001bc6 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0x56>
}
 8001c02:	2000      	movs	r0, #0
 8001c04:	b01f      	add	sp, #124	; 0x7c
 8001c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c0a:	bf00      	nop
 8001c0c:	2000019c 	.word	0x2000019c
 8001c10:	20000124 	.word	0x20000124
 8001c14:	200001d0 	.word	0x200001d0
 8001c18:	200023c4 	.word	0x200023c4
 8001c1c:	20002424 	.word	0x20002424
 8001c20:	200023a8 	.word	0x200023a8

08001c24 <_ZN21Grow_sensor_componentC1E11Type_sensorh>:
#include "Grow_sensor_component.h"

Grow_sensor_component::Grow_sensor_component(Type_sensor type_sensor, uint8_t id) {
    type_sensor_ = type_sensor;
    id_ = id;
 8001c24:	7042      	strb	r2, [r0, #1]
    value_.f_val = 0;
 8001c26:	2200      	movs	r2, #0
    type_sensor_ = type_sensor;
 8001c28:	7001      	strb	r1, [r0, #0]
    value_.f_val = 0;
 8001c2a:	6042      	str	r2, [r0, #4]
}
 8001c2c:	4770      	bx	lr

08001c2e <_ZNK21Grow_sensor_component8get_typeEv>:

enum Type_sensor Grow_sensor_component::get_type() const {
    return type_sensor_;
}
 8001c2e:	7800      	ldrb	r0, [r0, #0]
 8001c30:	4770      	bx	lr

08001c32 <_ZNK21Grow_sensor_component6get_idEv>:
uint8_t Grow_sensor_component::get_id() const {
    return id_;
}
 8001c32:	7840      	ldrb	r0, [r0, #1]
 8001c34:	4770      	bx	lr

08001c36 <_ZNK21Grow_sensor_component9get_valueEv>:
void Grow_sensor_component::set_id(uint8_t id) {
    id_ = id;
}
float Grow_sensor_component::get_value() const {
    return value_.f_val;
}
 8001c36:	6840      	ldr	r0, [r0, #4]
 8001c38:	4770      	bx	lr

08001c3a <_ZN21Grow_sensor_component9set_valueEf>:
uint32_t Grow_sensor_component::get_value_uint() const {
    return value_.u_val;
}
bool Grow_sensor_component::set_value(float value) {
 8001c3a:	b538      	push	{r3, r4, r5, lr}
 8001c3c:	4604      	mov	r4, r0
    if(value_.f_val == value)
 8001c3e:	6840      	ldr	r0, [r0, #4]
bool Grow_sensor_component::set_value(float value) {
 8001c40:	460d      	mov	r5, r1
    if(value_.f_val == value)
 8001c42:	f7ff f931 	bl	8000ea8 <__aeabi_fcmpeq>
 8001c46:	b910      	cbnz	r0, 8001c4e <_ZN21Grow_sensor_component9set_valueEf+0x14>
        return false;
    value_.f_val = value;
    return true;
 8001c48:	2001      	movs	r0, #1
    value_.f_val = value;
 8001c4a:	6065      	str	r5, [r4, #4]
}
 8001c4c:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 8001c4e:	2000      	movs	r0, #0
 8001c50:	e7fc      	b.n	8001c4c <_ZN21Grow_sensor_component9set_valueEf+0x12>

08001c52 <_ZNSt5arrayI11LoRa_packetLj15EEC1Ev>:
 8001c52:	b570      	push	{r4, r5, r6, lr}
 8001c54:	4604      	mov	r4, r0
 8001c56:	4605      	mov	r5, r0
 8001c58:	f100 0678 	add.w	r6, r0, #120	; 0x78
 8001c5c:	4628      	mov	r0, r5
 8001c5e:	3508      	adds	r5, #8
 8001c60:	f002 fd88 	bl	8004774 <_ZN11LoRa_packetC1Ev>
 8001c64:	42ae      	cmp	r6, r5
 8001c66:	d1f9      	bne.n	8001c5c <_ZNSt5arrayI11LoRa_packetLj15EEC1Ev+0xa>
 8001c68:	4620      	mov	r0, r4
 8001c6a:	bd70      	pop	{r4, r5, r6, pc}

08001c6c <_ZN17LoRa_contact_dataD1Ev>:
LoRa_contact_data::LoRa_contact_data(LoRa_address adr) {
    // (-) ----- добавить стандартный конструктор
    clear();
    set_my_adr(adr);
}
LoRa_contact_data::~LoRa_contact_data() {
 8001c6c:	b570      	push	{r4, r5, r6, lr}
 8001c6e:	4604      	mov	r4, r0
 8001c70:	f500 759a 	add.w	r5, r0, #308	; 0x134
 8001c74:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
 8001c78:	42ae      	cmp	r6, r5
 8001c7a:	d004      	beq.n	8001c86 <_ZN17LoRa_contact_dataD1Ev+0x1a>
 8001c7c:	3d08      	subs	r5, #8
 8001c7e:	4628      	mov	r0, r5
 8001c80:	f002 fd80 	bl	8004784 <_ZN11LoRa_packetD1Ev>
 8001c84:	e7f8      	b.n	8001c78 <_ZN17LoRa_contact_dataD1Ev+0xc>
 8001c86:	f104 05ac 	add.w	r5, r4, #172	; 0xac
 8001c8a:	f104 0634 	add.w	r6, r4, #52	; 0x34
 8001c8e:	42ae      	cmp	r6, r5
 8001c90:	d004      	beq.n	8001c9c <_ZN17LoRa_contact_dataD1Ev+0x30>
 8001c92:	3d08      	subs	r5, #8
 8001c94:	4628      	mov	r0, r5
 8001c96:	f002 fd75 	bl	8004784 <_ZN11LoRa_packetD1Ev>
 8001c9a:	e7f8      	b.n	8001c8e <_ZN17LoRa_contact_dataD1Ev+0x22>
 8001c9c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8001ca0:	f002 fd70 	bl	8004784 <_ZN11LoRa_packetD1Ev>
 8001ca4:	f104 0020 	add.w	r0, r4, #32
 8001ca8:	f002 fd6c 	bl	8004784 <_ZN11LoRa_packetD1Ev>

}
 8001cac:	4620      	mov	r0, r4
 8001cae:	bd70      	pop	{r4, r5, r6, pc}

08001cb0 <_ZN17LoRa_contact_data16init_lora_moduleEP19__SPI_HandleTypeDef>:
        return false;
    }
    return true;
}
#else
bool LoRa_contact_data::init_lora_module(SPI_HandleTypeDef *spi) {
 8001cb0:	b510      	push	{r4, lr}
 8001cb2:	4604      	mov	r4, r0
	LoRa.init(spi);
 8001cb4:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <_ZN17LoRa_contact_data16init_lora_moduleEP19__SPI_HandleTypeDef+0x14>)
 8001cb6:	f001 fe61 	bl	800397c <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef>
	lora_init_ = true;
 8001cba:	2301      	movs	r3, #1
	return false;
}
 8001cbc:	2000      	movs	r0, #0
	lora_init_ = true;
 8001cbe:	7023      	strb	r3, [r4, #0]
}
 8001cc0:	bd10      	pop	{r4, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000380 	.word	0x20000380

08001cc8 <_ZN17LoRa_contact_data17begin_lora_moduleEmbhhmh>:
#endif
// Функция запуска работы системы и LoRa-модуля
uint8_t LoRa_contact_data::begin_lora_module(ulong frequency, bool paboost,
          uint8_t signal_power, uint8_t SF, ulong SBW, uint8_t sync_word) {
 8001cc8:	b530      	push	{r4, r5, lr}
 8001cca:	4604      	mov	r4, r0
 8001ccc:	4618      	mov	r0, r3
#if defined ( ESP32 )
    uint8_t err = lora_.begin(frequency, paboost, signal_power, SF, SBW, sync_word);
#else
    uint8_t err = LoRa.begin(frequency, paboost, signal_power, SF, SBW, sync_word);
 8001cce:	2300      	movs	r3, #0
          uint8_t signal_power, uint8_t SF, ulong SBW, uint8_t sync_word) {
 8001cd0:	b089      	sub	sp, #36	; 0x24
    uint8_t err = LoRa.begin(frequency, paboost, signal_power, SF, SBW, sync_word);
 8001cd2:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8001cd6:	9200      	str	r2, [sp, #0]
 8001cd8:	9506      	str	r5, [sp, #24]
 8001cda:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8001cdc:	460a      	mov	r2, r1
 8001cde:	e9cd 5304 	strd	r5, r3, [sp, #16]
 8001ce2:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8001ce6:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8001cea:	4804      	ldr	r0, [pc, #16]	; (8001cfc <_ZN17LoRa_contact_data17begin_lora_moduleEmbhhmh+0x34>)
 8001cec:	f002 f8f4 	bl	8003ed8 <_ZN10LoRa_class5beginEybhhyh>
#endif
    if(err == 0) {
 8001cf0:	b908      	cbnz	r0, 8001cf6 <_ZN17LoRa_contact_data17begin_lora_moduleEmbhhmh+0x2e>
        lora_begin_ = true;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	7063      	strb	r3, [r4, #1]
    }
    return err;
}
 8001cf6:	b009      	add	sp, #36	; 0x24
 8001cf8:	bd30      	pop	{r4, r5, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000380 	.word	0x20000380

08001d00 <_ZN17LoRa_contact_data10set_my_adrE12LoRa_address>:

// Установка адреса этого модуля
bool LoRa_contact_data::set_my_adr(LoRa_address adr) {
    // (-) ----- проверка на ошибку
    my_adr_ = adr;
 8001d00:	6041      	str	r1, [r0, #4]
    return false;
}
 8001d02:	2000      	movs	r0, #0
bool LoRa_contact_data::set_my_adr(LoRa_address adr) {
 8001d04:	b082      	sub	sp, #8
}
 8001d06:	b002      	add	sp, #8
 8001d08:	4770      	bx	lr

08001d0a <_ZNK17LoRa_contact_data10get_my_adrEv>:
// Получаение адреса этого модуля
LoRa_address LoRa_contact_data::get_my_adr() const {
    return my_adr_;
 8001d0a:	6843      	ldr	r3, [r0, #4]
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	f362 000f 	bfi	r0, r2, #0, #16
 8001d14:	0c1b      	lsrs	r3, r3, #16
LoRa_address LoRa_contact_data::get_my_adr() const {
 8001d16:	b082      	sub	sp, #8
    return my_adr_;
 8001d18:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001d1c:	b002      	add	sp, #8
 8001d1e:	4770      	bx	lr

08001d20 <_ZN17LoRa_contact_data11set_channelEt>:
}

// Установка канала связи
bool LoRa_contact_data::set_channel(uint16_t channel) {
    // (-) ----- скорректировать проверку канала и добавить настройку LoRa-модуля в зависимости от канала
    if((channel < 1) || (channel > 240))
 8001d20:	1e4b      	subs	r3, r1, #1
 8001d22:	2bef      	cmp	r3, #239	; 0xef
        return true;
    channel_ = channel;
 8001d24:	bf9a      	itte	ls
 8001d26:	8041      	strhls	r1, [r0, #2]
    return false;
 8001d28:	2000      	movls	r0, #0
        return true;
 8001d2a:	2001      	movhi	r0, #1
}
 8001d2c:	4770      	bx	lr

08001d2e <_ZNK17LoRa_contact_data11get_channelEv>:
// Получаение канала связи
uint16_t LoRa_contact_data::get_channel() const {
    return channel_;
}
 8001d2e:	8840      	ldrh	r0, [r0, #2]
 8001d30:	4770      	bx	lr
	...

08001d34 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet>:

bool LoRa_contact_data::add_packet(LoRa_packet packet) {

    // if((!_init) || (packet.len < MINIMAL_PACKET_SIZE) || (send_packet_.size() >= 250)) // проверка на инициализацию только в 1 сторону (?) -----

    if(init_) {
 8001d34:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
bool LoRa_contact_data::add_packet(LoRa_packet packet) {
 8001d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d3a:	4604      	mov	r4, r0
 8001d3c:	460d      	mov	r5, r1
    if(init_) {
 8001d3e:	bb13      	cbnz	r3, 8001d86 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet+0x52>
        // if((packet_analyzer.get_dest_adr_group(packet) != connect_adr_.group) ||
        //    (packet_analyzer.get_dest_adr_branch(packet) != connect_adr_.branch))
        if(packet_analyzer.get_dest_adr(packet)!= connect_adr_)
            return true;
    }
    packet_analyzer.set_packet_number(packet, num_end_packet_++);
 8001d40:	8a22      	ldrh	r2, [r4, #16]
 8001d42:	4629      	mov	r1, r5
 8001d44:	1c53      	adds	r3, r2, #1
 8001d46:	8223      	strh	r3, [r4, #16]
 8001d48:	4815      	ldr	r0, [pc, #84]	; (8001da0 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet+0x6c>)
 8001d4a:	f003 ff2c 	bl	8005ba6 <_ZN15Packet_analyzer17set_packet_numberER11LoRa_packett>
#if defined ( USE_VECTOR )
    send_packet_.push_back(std::move(packet));
    send_flag_.push_back(true);
    amt_packet_ = send_packet_.size();
#else
    if(send_packet_len == CONTACT_DATA_MAX_PACKET ||
 8001d4e:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
      { return const_cast<_Tp&>(__t[__n]); }
 8001d52:	f104 0034 	add.w	r0, r4, #52	; 0x34
        send_flag_len == CONTACT_DATA_MAX_PACKET) {
        // (-) ----- (!) ----- ERRROR
    }
    send_packet_[send_packet_len++] = std::move(packet);
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	f884 2134 	strb.w	r2, [r4, #308]	; 0x134
 8001d5c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8001d60:	4629      	mov	r1, r5
 8001d62:	f002 fd73 	bl	800484c <_ZN11LoRa_packetaSEOS_>
    send_flag_[send_flag_len++] = true;
 8001d66:	f894 3136 	ldrb.w	r3, [r4, #310]	; 0x136
    amt_packet_ = send_packet_len;
#endif
    return false;
 8001d6a:	2000      	movs	r0, #0
    send_flag_[send_flag_len++] = true;
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	f884 2136 	strb.w	r2, [r4, #310]	; 0x136
 8001d72:	2201      	movs	r2, #1
 8001d74:	4423      	add	r3, r4
 8001d76:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    amt_packet_ = send_packet_len;
 8001d7a:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8001d7e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8001d82:	b003      	add	sp, #12
 8001d84:	bd30      	pop	{r4, r5, pc}
        if(packet_analyzer.get_dest_adr(packet)!= connect_adr_)
 8001d86:	4806      	ldr	r0, [pc, #24]	; (8001da0 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet+0x6c>)
 8001d88:	f003 fe64 	bl	8005a54 <_ZN15Packet_analyzer12get_dest_adrERK11LoRa_packet>
 8001d8c:	f104 0108 	add.w	r1, r4, #8
 8001d90:	9001      	str	r0, [sp, #4]
 8001d92:	a801      	add	r0, sp, #4
 8001d94:	f003 fe31 	bl	80059fa <_ZneRK12LoRa_addressS1_>
 8001d98:	2800      	cmp	r0, #0
 8001d9a:	d0d1      	beq.n	8001d40 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet+0xc>
 8001d9c:	e7f1      	b.n	8001d82 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet+0x4e>
 8001d9e:	bf00      	nop
 8001da0:	200023a8 	.word	0x200023a8

08001da4 <_ZN17LoRa_contact_data17clear_send_packetEv>:
    if(send_packet_.size() == 0)
        return true;
    num_end_packet_ -= send_packet_.size();
    send_packet_.clear();
#else
    if(send_packet_len == 0)
 8001da4:	f890 2134 	ldrb.w	r2, [r0, #308]	; 0x134
 8001da8:	b14a      	cbz	r2, 8001dbe <_ZN17LoRa_contact_data17clear_send_packetEv+0x1a>
        return true;
    num_end_packet_ -= send_packet_len;
 8001daa:	8a03      	ldrh	r3, [r0, #16]
 8001dac:	1a9b      	subs	r3, r3, r2
 8001dae:	8203      	strh	r3, [r0, #16]
    send_packet_len = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	f880 3134 	strb.w	r3, [r0, #308]	; 0x134
    send_flag_len = 0;
 8001db6:	f880 3136 	strb.w	r3, [r0, #310]	; 0x136
#endif
    return false;
 8001dba:	4618      	mov	r0, r3
 8001dbc:	4770      	bx	lr
        return true;
 8001dbe:	2001      	movs	r0, #1
}
 8001dc0:	4770      	bx	lr

08001dc2 <_ZN17LoRa_contact_data17get_state_contactEv>:
}

// Получить текущую стадию контакта/трансляции
int8_t LoRa_contact_data::get_state_contact() {
    return (int8_t) current_stage_.stade_communication;
}
 8001dc2:	f990 0014 	ldrsb.w	r0, [r0, #20]
 8001dc6:	4770      	bx	lr

08001dc8 <_ZN17LoRa_contact_data14get_all_packetERh>:
}


// Выдаёт сигнал, если текущая стадия SC_COMPLETE 
bool LoRa_contact_data::get_signal_complete() {
    return (current_stage_.stade_communication == SC_COMPLETE);
 8001dc8:	7d0b      	ldrb	r3, [r1, #20]
std::array<LoRa_packet, CONTACT_DATA_MAX_PACKET> LoRa_contact_data::get_all_packet(uint8_t& count) {
 8001dca:	b570      	push	{r4, r5, r6, lr}
    if((!get_signal_complete()) && (current_stage_.stade_communication != SC_PACKET_ACCEPTED))
 8001dcc:	2b04      	cmp	r3, #4
std::array<LoRa_packet, CONTACT_DATA_MAX_PACKET> LoRa_contact_data::get_all_packet(uint8_t& count) {
 8001dce:	4604      	mov	r4, r0
    if((!get_signal_complete()) && (current_stage_.stade_communication != SC_PACKET_ACCEPTED))
 8001dd0:	d03d      	beq.n	8001e4e <_ZN17LoRa_contact_data14get_all_packetERh+0x86>
 8001dd2:	2b07      	cmp	r3, #7
 8001dd4:	d04d      	beq.n	8001e72 <_ZN17LoRa_contact_data14get_all_packetERh+0xaa>
        return {};
 8001dd6:	f002 fccd 	bl	8004774 <_ZN11LoRa_packetC1Ev>
 8001dda:	f104 0008 	add.w	r0, r4, #8
 8001dde:	f002 fcc9 	bl	8004774 <_ZN11LoRa_packetC1Ev>
 8001de2:	f104 0010 	add.w	r0, r4, #16
 8001de6:	f002 fcc5 	bl	8004774 <_ZN11LoRa_packetC1Ev>
 8001dea:	f104 0018 	add.w	r0, r4, #24
 8001dee:	f002 fcc1 	bl	8004774 <_ZN11LoRa_packetC1Ev>
 8001df2:	f104 0020 	add.w	r0, r4, #32
 8001df6:	f002 fcbd 	bl	8004774 <_ZN11LoRa_packetC1Ev>
 8001dfa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8001dfe:	f002 fcb9 	bl	8004774 <_ZN11LoRa_packetC1Ev>
 8001e02:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001e06:	f002 fcb5 	bl	8004774 <_ZN11LoRa_packetC1Ev>
 8001e0a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8001e0e:	f002 fcb1 	bl	8004774 <_ZN11LoRa_packetC1Ev>
 8001e12:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8001e16:	f002 fcad 	bl	8004774 <_ZN11LoRa_packetC1Ev>
 8001e1a:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8001e1e:	f002 fca9 	bl	8004774 <_ZN11LoRa_packetC1Ev>
 8001e22:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8001e26:	f002 fca5 	bl	8004774 <_ZN11LoRa_packetC1Ev>
 8001e2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001e2e:	f002 fca1 	bl	8004774 <_ZN11LoRa_packetC1Ev>
 8001e32:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8001e36:	f002 fc9d 	bl	8004774 <_ZN11LoRa_packetC1Ev>
 8001e3a:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001e3e:	f002 fc99 	bl	8004774 <_ZN11LoRa_packetC1Ev>
 8001e42:	f104 0070 	add.w	r0, r4, #112	; 0x70
 8001e46:	f002 fc95 	bl	8004774 <_ZN11LoRa_packetC1Ev>
}
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	bd70      	pop	{r4, r5, r6, pc}
        current_stage_.stade_communication = SC_DOWNTIME;
 8001e4e:	2300      	movs	r3, #0
    reciev_packet_len = 0;
 8001e50:	2600      	movs	r6, #0
 8001e52:	750b      	strb	r3, [r1, #20]
    count = reciev_packet_len;
 8001e54:	f891 3135 	ldrb.w	r3, [r1, #309]	; 0x135
    struct array
 8001e58:	f101 05bc 	add.w	r5, r1, #188	; 0xbc
 8001e5c:	7013      	strb	r3, [r2, #0]
    reciev_packet_len = 0;
 8001e5e:	f881 6135 	strb.w	r6, [r1, #309]	; 0x135
 8001e62:	19a9      	adds	r1, r5, r6
 8001e64:	19a0      	adds	r0, r4, r6
 8001e66:	3608      	adds	r6, #8
 8001e68:	f002 fcff 	bl	800486a <_ZN11LoRa_packetC1EOS_>
 8001e6c:	2e78      	cmp	r6, #120	; 0x78
 8001e6e:	d1f8      	bne.n	8001e62 <_ZN17LoRa_contact_data14get_all_packetERh+0x9a>
 8001e70:	e7eb      	b.n	8001e4a <_ZN17LoRa_contact_data14get_all_packetERh+0x82>
        current_stage_.stade_communication = SC_WAITING;
 8001e72:	2306      	movs	r3, #6
 8001e74:	e7ec      	b.n	8001e50 <_ZN17LoRa_contact_data14get_all_packetERh+0x88>

08001e76 <_ZN17LoRa_contact_data19get_signal_completeEv>:
    return (current_stage_.stade_communication == SC_COMPLETE);
 8001e76:	7d00      	ldrb	r0, [r0, #20]
}
 8001e78:	1f03      	subs	r3, r0, #4
 8001e7a:	4258      	negs	r0, r3
 8001e7c:	4158      	adcs	r0, r3
 8001e7e:	4770      	bx	lr

08001e80 <_ZN17LoRa_contact_data24get_signal_start_connectEv>:

bool LoRa_contact_data::get_signal_start_connect() {
    return start_connect_;
}
 8001e80:	f890 0137 	ldrb.w	r0, [r0, #311]	; 0x137
 8001e84:	4770      	bx	lr

08001e86 <_ZN17LoRa_contact_data5clearEv>:
#if defined ( USE_VECTOR )
    send_packet_.clear();
    send_flag_.clear();
    reciev_packet_.clear();
#else
    send_packet_len = 0;
 8001e86:	2200      	movs	r2, #0
 8001e88:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
    send_flag_len = 0;
 8001e8c:	f880 2136 	strb.w	r2, [r0, #310]	; 0x136
    reciev_packet_len = 0;
#endif
    current_stage_.type_communication = TC_INITIATOR;
    current_stage_.stade_communication = SC_DOWNTIME;
 8001e90:	6142      	str	r2, [r0, #20]
    current_stage_.type_communication = TC_INITIATOR;
 8001e92:	74c2      	strb	r2, [r0, #19]
    current_stage_.connection = C_EXPECTATION;
    current_stage_.exchange = E_BOARDCAST;
    current_stage_.disconnect = D_WAITING_CONNECTION_BREAK;
    past_stage_ = current_stage_;
 8001e94:	4602      	mov	r2, r0
void LoRa_contact_data::clear() {
 8001e96:	4603      	mov	r3, r0
    past_stage_ = current_stage_;
 8001e98:	f852 0f13 	ldr.w	r0, [r2, #19]!
 8001e9c:	6198      	str	r0, [r3, #24]
 8001e9e:	7912      	ldrb	r2, [r2, #4]
 8001ea0:	771a      	strb	r2, [r3, #28]
}
 8001ea2:	4770      	bx	lr

08001ea4 <_ZN17LoRa_contact_dataC1Ev>:
LoRa_contact_data::LoRa_contact_data() {
 8001ea4:	b570      	push	{r4, r5, r6, lr}
 8001ea6:	2500      	movs	r5, #0
 8001ea8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8001eac:	4604      	mov	r4, r0
 8001eae:	e9c0 5600 	strd	r5, r6, [r0]
 8001eb2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001eb6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001eba:	3008      	adds	r0, #8
 8001ebc:	f003 fd88 	bl	80059d0 <_ZN12LoRa_addressC1Ett>
 8001ec0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001ec4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ec8:	f104 000c 	add.w	r0, r4, #12
 8001ecc:	f003 fd80 	bl	80059d0 <_ZN12LoRa_addressC1Ett>
 8001ed0:	8225      	strh	r5, [r4, #16]
 8001ed2:	7765      	strb	r5, [r4, #29]
 8001ed4:	f104 0020 	add.w	r0, r4, #32
 8001ed8:	f002 fc4c 	bl	8004774 <_ZN11LoRa_packetC1Ev>
 8001edc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8001ee0:	f002 fc48 	bl	8004774 <_ZN11LoRa_packetC1Ev>
 8001ee4:	8625      	strh	r5, [r4, #48]	; 0x30
 8001ee6:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8001eea:	f7ff feb2 	bl	8001c52 <_ZNSt5arrayI11LoRa_packetLj15EEC1Ev>
 8001eee:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8001ef2:	f7ff feae 	bl	8001c52 <_ZNSt5arrayI11LoRa_packetLj15EEC1Ev>
    clear();
 8001ef6:	4620      	mov	r0, r4
LoRa_contact_data::LoRa_contact_data() {
 8001ef8:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8001efc:	f8a4 5138 	strh.w	r5, [r4, #312]	; 0x138
 8001f00:	f884 513a 	strb.w	r5, [r4, #314]	; 0x13a
    clear();
 8001f04:	f7ff ffbf 	bl	8001e86 <_ZN17LoRa_contact_data5clearEv>
    time_constraints_.I_connect  = 1000;    // Ответа на запрос об установке соединения
 8001f08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    time_constraints_.R_data_pack  = 3500;  // Пакетов данных (после отправляется пакет с количеством пришедших пакетов)
 8001f0c:	f640 12c4 	movw	r2, #2500	; 0x9c4
    time_constraints_.I_wait_connect = -1;  // Отложенного соединения
 8001f10:	e9c4 3651 	strd	r3, r6, [r4, #324]	; 0x144
    time_constraints_.I_num_pack = 1000;    // Ответа с номерами принятых пакетов
 8001f14:	e9c4 3353 	strd	r3, r3, [r4, #332]	; 0x14c
    time_constraints_.R_data_pack  = 3500;  // Пакетов данных (после отправляется пакет с количеством пришедших пакетов)
 8001f18:	f640 53ac 	movw	r3, #3500	; 0xdac
 8001f1c:	e9c4 2355 	strd	r2, r3, [r4, #340]	; 0x154
    time_constraints_.R_correct_pack = 3500;// Результатов подтверждения
 8001f20:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
    time_constraints_.R_disconnect = 1500;  // Разрыва соединения
 8001f24:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001f28:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    packet_constraints_.I_connect  =  5;     // Запрос на установку соединения
 8001f2c:	2305      	movs	r3, #5
 8001f2e:	f884 3165 	strb.w	r3, [r4, #357]	; 0x165
    packet_constraints_.I_amt_pack = 10;     // Запрос о количестве принятых пакетов
 8001f32:	f640 730a 	movw	r3, #3850	; 0xf0a
 8001f36:	f8a4 3166 	strh.w	r3, [r4, #358]	; 0x166
    packet_constraints_.R_wait_connect = 3;  // Сбросов ожидания (отложенного соединения)
 8001f3a:	f240 3303 	movw	r3, #771	; 0x303
}
 8001f3e:	4620      	mov	r0, r4
    packet_constraints_.R_wait_connect = 3;  // Сбросов ожидания (отложенного соединения)
 8001f40:	f8a4 3168 	strh.w	r3, [r4, #360]	; 0x168
}
 8001f44:	bd70      	pop	{r4, r5, r6, pc}
	...

08001f48 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>:

// --- функции создания пакетов ---


// создание основы пакета
void LoRa_contact_data::create_packet(uint8_t size, Packet_Type type_packet) {
 8001f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f4a:	4604      	mov	r4, r0
 8001f4c:	4617      	mov	r7, r2
    // last_send_packet_.creat_packet(size, type_packet);
    // last_send_packet_.packet->set_dest_adr(connect_adr_);
    // last_send_packet_.packet->set_sour_adr(my_adr_);
    // last_send_packet_.packet->set_packet_type(type_packet);
    // last_send_packet_.packet->set_packet_number(num_end_packet_++);
    last_send_packet_.clear_packet();
 8001f4e:	f100 0528 	add.w	r5, r0, #40	; 0x28
    packet_analyzer.set_dest_adr(last_send_packet_, connect_adr_);
 8001f52:	4e0e      	ldr	r6, [pc, #56]	; (8001f8c <_ZN17LoRa_contact_data13create_packetEh11Packet_Type+0x44>)
    last_send_packet_.clear_packet();
 8001f54:	4628      	mov	r0, r5
 8001f56:	f002 fc41 	bl	80047dc <_ZN11LoRa_packet12clear_packetEv>
    packet_analyzer.set_dest_adr(last_send_packet_, connect_adr_);
 8001f5a:	4629      	mov	r1, r5
 8001f5c:	68a2      	ldr	r2, [r4, #8]
 8001f5e:	4630      	mov	r0, r6
 8001f60:	f003 fdc5 	bl	8005aee <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address>
    packet_analyzer.set_sour_adr(last_send_packet_, my_adr_);
 8001f64:	4629      	mov	r1, r5
 8001f66:	6862      	ldr	r2, [r4, #4]
 8001f68:	4630      	mov	r0, r6
 8001f6a:	f003 fdf3 	bl	8005b54 <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address>
    packet_analyzer.set_packet_type(last_send_packet_, type_packet);
 8001f6e:	463a      	mov	r2, r7
 8001f70:	4629      	mov	r1, r5
 8001f72:	4630      	mov	r0, r6
 8001f74:	f003 fe0d 	bl	8005b92 <_ZN15Packet_analyzer15set_packet_typeER11LoRa_packet11Packet_Type>
    packet_analyzer.set_packet_number(last_send_packet_, (num_end_packet_++));
 8001f78:	8a22      	ldrh	r2, [r4, #16]
 8001f7a:	4629      	mov	r1, r5
 8001f7c:	1c53      	adds	r3, r2, #1
 8001f7e:	4630      	mov	r0, r6
 8001f80:	8223      	strh	r3, [r4, #16]
}
 8001f82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    packet_analyzer.set_packet_number(last_send_packet_, (num_end_packet_++));
 8001f86:	f003 be0e 	b.w	8005ba6 <_ZN15Packet_analyzer17set_packet_numberER11LoRa_packett>
 8001f8a:	bf00      	nop
 8001f8c:	200023a8 	.word	0x200023a8

08001f90 <_ZN17LoRa_contact_data21create_connect_packetEhb>:
// создание пакета установки соединения (num = count_pack) или ответа на
//   запрос соединения (3 реакции +, +num и -wait) (и при замене инициативы)
bool LoRa_contact_data::create_connect_packet(uint8_t amt_packet, bool swap_type) {
    bool err = false;
    uint8_t size = 11;
    uint8_t com = 0x01;
 8001f90:	2301      	movs	r3, #1
bool LoRa_contact_data::create_connect_packet(uint8_t amt_packet, bool swap_type) {
 8001f92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f96:	b085      	sub	sp, #20
    uint8_t com = 0x01;
 8001f98:	f88d 300a 	strb.w	r3, [sp, #10]
    uint8_t len;
    uint8_t data[2] = {0, 0};
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f8ad 300c 	strh.w	r3, [sp, #12]
    // switch (current_stage_.type_communication) {
    switch ((use_past_stage)?(past_stage_.type_communication):(current_stage_.type_communication)) {
 8001fa2:	7f43      	ldrb	r3, [r0, #29]
bool LoRa_contact_data::create_connect_packet(uint8_t amt_packet, bool swap_type) {
 8001fa4:	4606      	mov	r6, r0
 8001fa6:	460d      	mov	r5, r1
 8001fa8:	4614      	mov	r4, r2
    switch ((use_past_stage)?(past_stage_.type_communication):(current_stage_.type_communication)) {
 8001faa:	b163      	cbz	r3, 8001fc6 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x36>
 8001fac:	f890 9018 	ldrb.w	r9, [r0, #24]
 8001fb0:	f1b9 0f00 	cmp.w	r9, #0
 8001fb4:	d00a      	beq.n	8001fcc <_ZN17LoRa_contact_data21create_connect_packetEhb+0x3c>
 8001fb6:	f1b9 0f01 	cmp.w	r9, #1
 8001fba:	d01f      	beq.n	8001ffc <_ZN17LoRa_contact_data21create_connect_packetEhb+0x6c>
 8001fbc:	2401      	movs	r4, #1
    default:
        err = true;
        break;
    }
    return err;
}
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	b005      	add	sp, #20
 8001fc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch ((use_past_stage)?(past_stage_.type_communication):(current_stage_.type_communication)) {
 8001fc6:	f890 9013 	ldrb.w	r9, [r0, #19]
 8001fca:	e7f1      	b.n	8001fb0 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x20>
        create_packet(size, Packet_Type::CONNECTION);
 8001fcc:	464a      	mov	r2, r9
 8001fce:	210b      	movs	r1, #11
 8001fd0:	4630      	mov	r0, r6
        com = 0x00;
 8001fd2:	f88d 900a 	strb.w	r9, [sp, #10]
        len = 0;
 8001fd6:	f88d 900b 	strb.w	r9, [sp, #11]
        data[0] = amt_packet;
 8001fda:	f88d 500c 	strb.w	r5, [sp, #12]
        create_packet(size, Packet_Type::CONNECTION);
 8001fde:	f7ff ffb3 	bl	8001f48 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001fe2:	f10d 030b 	add.w	r3, sp, #11
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	4826      	ldr	r0, [pc, #152]	; (8002084 <_ZN17LoRa_contact_data21create_connect_packetEhb+0xf4>)
 8001fea:	ab03      	add	r3, sp, #12
 8001fec:	f10d 020a 	add.w	r2, sp, #10
 8001ff0:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8001ff4:	f003 fea6 	bl	8005d44 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    bool err = false;
 8001ff8:	464c      	mov	r4, r9
        break;
 8001ffa:	e7e0      	b.n	8001fbe <_ZN17LoRa_contact_data21create_connect_packetEhb+0x2e>
        connect_adr_ = packet_analyzer.get_sour_adr(last_receive_packet_);
 8001ffc:	4822      	ldr	r0, [pc, #136]	; (8002088 <_ZN17LoRa_contact_data21create_connect_packetEhb+0xf8>)
 8001ffe:	f106 0120 	add.w	r1, r6, #32
 8002002:	f003 fd45 	bl	8005a90 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>
        if(amt_packet != 255) {
 8002006:	2dff      	cmp	r5, #255	; 0xff
        connect_adr_ = packet_analyzer.get_sour_adr(last_receive_packet_);
 8002008:	60b0      	str	r0, [r6, #8]
        if(amt_packet != 255) {
 800200a:	f106 0728 	add.w	r7, r6, #40	; 0x28
                com = 0x01;
 800200e:	f88d 900a 	strb.w	r9, [sp, #10]
 8002012:	f10d 080b 	add.w	r8, sp, #11
        if(amt_packet != 255) {
 8002016:	d01e      	beq.n	8002056 <_ZN17LoRa_contact_data21create_connect_packetEhb+0xc6>
            if(!swap_type) {
 8002018:	b994      	cbnz	r4, 8002040 <_ZN17LoRa_contact_data21create_connect_packetEhb+0xb0>
                create_packet(size, Packet_Type::CONNECTION);
 800201a:	4622      	mov	r2, r4
 800201c:	210b      	movs	r1, #11
                data[1] = 0;
 800201e:	f88d 400d 	strb.w	r4, [sp, #13]
                len = 1;
 8002022:	f88d 900b 	strb.w	r9, [sp, #11]
                create_packet(size, Packet_Type::CONNECTION);
 8002026:	4630      	mov	r0, r6
 8002028:	f7ff ff8e 	bl	8001f48 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
                packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 800202c:	4639      	mov	r1, r7
 800202e:	f8cd 8000 	str.w	r8, [sp]
 8002032:	ab03      	add	r3, sp, #12
 8002034:	f10d 020a 	add.w	r2, sp, #10
 8002038:	4812      	ldr	r0, [pc, #72]	; (8002084 <_ZN17LoRa_contact_data21create_connect_packetEhb+0xf4>)
 800203a:	f003 fe83 	bl	8005d44 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
 800203e:	e7be      	b.n	8001fbe <_ZN17LoRa_contact_data21create_connect_packetEhb+0x2e>
                data[0] = 0;
 8002040:	2400      	movs	r4, #0
                len = 2;
 8002042:	2302      	movs	r3, #2
                create_packet(size, Packet_Type::CONNECTION);
 8002044:	4622      	mov	r2, r4
 8002046:	210c      	movs	r1, #12
                data[0] = 0;
 8002048:	f88d 400c 	strb.w	r4, [sp, #12]
                data[1] = amt_packet;
 800204c:	f88d 500d 	strb.w	r5, [sp, #13]
                len = 2;
 8002050:	f88d 300b 	strb.w	r3, [sp, #11]
                create_packet(size, Packet_Type::CONNECTION);
 8002054:	e7e7      	b.n	8002026 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x96>
            len = 0;
 8002056:	2500      	movs	r5, #0
            size = 11 + (uint8_t)swap_type;
 8002058:	f104 010b 	add.w	r1, r4, #11
            create_packet(size, Packet_Type::CONNECTION);
 800205c:	462a      	mov	r2, r5
 800205e:	4630      	mov	r0, r6
 8002060:	b2c9      	uxtb	r1, r1
            len = 0;
 8002062:	f88d 500b 	strb.w	r5, [sp, #11]
            data[0] = 1;
 8002066:	f88d 900c 	strb.w	r9, [sp, #12]
            create_packet(size, Packet_Type::CONNECTION);
 800206a:	f7ff ff6d 	bl	8001f48 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
            packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 800206e:	4639      	mov	r1, r7
 8002070:	4804      	ldr	r0, [pc, #16]	; (8002084 <_ZN17LoRa_contact_data21create_connect_packetEhb+0xf4>)
 8002072:	f8cd 8000 	str.w	r8, [sp]
 8002076:	ab03      	add	r3, sp, #12
 8002078:	f10d 020a 	add.w	r2, sp, #10
 800207c:	f003 fe62 	bl	8005d44 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    bool err = false;
 8002080:	462c      	mov	r4, r5
 8002082:	e79c      	b.n	8001fbe <_ZN17LoRa_contact_data21create_connect_packetEhb+0x2e>
 8002084:	200023c4 	.word	0x200023c4
 8002088:	200023a8 	.word	0x200023a8

0800208c <_ZN17LoRa_contact_data18create_data_packetEv>:


// создание пакета на основе номера из списка
bool LoRa_contact_data::create_data_packet() {
 800208c:	b570      	push	{r4, r5, r6, lr}
    bool err = true;
    switch (current_stage_.type_communication) {
 800208e:	7cc4      	ldrb	r4, [r0, #19]
bool LoRa_contact_data::create_data_packet() {
 8002090:	4605      	mov	r5, r0
    switch (current_stage_.type_communication) {
 8002092:	f014 04fd 	ands.w	r4, r4, #253	; 0xfd
 8002096:	d11b      	bne.n	80020d0 <_ZN17LoRa_contact_data18create_data_packetEv+0x44>
    // Инициатор
    case TC_INITIATOR:
    case TC_BROADCAST: {
        last_send_packet_.clear_packet();
 8002098:	f100 0628 	add.w	r6, r0, #40	; 0x28
 800209c:	4630      	mov	r0, r6
 800209e:	f002 fb9d 	bl	80047dc <_ZN11LoRa_packet12clear_packetEv>
#if defined ( USE_VECTOR )
        for(int i = 0; i < send_packet_.size(); ++i)
#else
        for(unsigned int i = 0; i < send_packet_len; ++i)
 80020a2:	f895 2134 	ldrb.w	r2, [r5, #308]	; 0x134
 80020a6:	f105 03ac 	add.w	r3, r5, #172	; 0xac
 80020aa:	42a2      	cmp	r2, r4
 80020ac:	d910      	bls.n	80020d0 <_ZN17LoRa_contact_data18create_data_packetEv+0x44>
#endif
        {
            if(send_flag_[i]) {
 80020ae:	f813 1b01 	ldrb.w	r1, [r3], #1
 80020b2:	b159      	cbz	r1, 80020cc <_ZN17LoRa_contact_data18create_data_packetEv+0x40>
      { return const_cast<_Tp&>(__t[__n]); }
 80020b4:	f105 0134 	add.w	r1, r5, #52	; 0x34
                // last_send_packet_.set_packet(send_packet_[i]);
                last_send_packet_ = send_packet_[i];
 80020b8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80020bc:	4630      	mov	r0, r6
 80020be:	f002 fba6 	bl	800480e <_ZN11LoRa_packetaSERKS_>
                send_flag_[i] = false;
 80020c2:	2000      	movs	r0, #0
 80020c4:	442c      	add	r4, r5
 80020c6:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
        break;
    }
    default: break;
    }
    return err;
}
 80020ca:	bd70      	pop	{r4, r5, r6, pc}
        for(unsigned int i = 0; i < send_packet_len; ++i)
 80020cc:	3401      	adds	r4, #1
 80020ce:	e7ec      	b.n	80020aa <_ZN17LoRa_contact_data18create_data_packetEv+0x1e>
    bool err = true;
 80020d0:	2001      	movs	r0, #1
 80020d2:	e7fa      	b.n	80020ca <_ZN17LoRa_contact_data18create_data_packetEv+0x3e>

080020d4 <_ZN17LoRa_contact_data17create_amt_packetEv>:

// создание пакета количества пакетов
bool LoRa_contact_data::create_amt_packet() {
 80020d4:	b530      	push	{r4, r5, lr}
    bool err = false;
    switch (current_stage_.type_communication) {
 80020d6:	7cc4      	ldrb	r4, [r0, #19]
bool LoRa_contact_data::create_amt_packet() {
 80020d8:	4605      	mov	r5, r0
 80020da:	b085      	sub	sp, #20
    switch (current_stage_.type_communication) {
 80020dc:	b124      	cbz	r4, 80020e8 <_ZN17LoRa_contact_data17create_amt_packetEv+0x14>
 80020de:	2c01      	cmp	r4, #1
 80020e0:	d018      	beq.n	8002114 <_ZN17LoRa_contact_data17create_amt_packetEv+0x40>
 80020e2:	2001      	movs	r0, #1
    default:
        err = true;
        break;
    }
    return err;
}
 80020e4:	b005      	add	sp, #20
 80020e6:	bd30      	pop	{r4, r5, pc}
        uint8_t com = 0x03;
 80020e8:	2303      	movs	r3, #3
        create_packet(size, Packet_Type::CONNECTION);
 80020ea:	4622      	mov	r2, r4
 80020ec:	210a      	movs	r1, #10
        uint8_t com = 0x03;
 80020ee:	f88d 300e 	strb.w	r3, [sp, #14]
        uint8_t len = 0;
 80020f2:	f88d 400f 	strb.w	r4, [sp, #15]
        create_packet(size, Packet_Type::CONNECTION);
 80020f6:	f7ff ff27 	bl	8001f48 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, nullptr, &len);
 80020fa:	f10d 030f 	add.w	r3, sp, #15
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	4623      	mov	r3, r4
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8002102:	480d      	ldr	r0, [pc, #52]	; (8002138 <_ZN17LoRa_contact_data17create_amt_packetEv+0x64>)
 8002104:	f10d 020e 	add.w	r2, sp, #14
 8002108:	f105 0128 	add.w	r1, r5, #40	; 0x28
 800210c:	f003 fe1a 	bl	8005d44 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    return err;
 8002110:	2000      	movs	r0, #0
 8002112:	e7e7      	b.n	80020e4 <_ZN17LoRa_contact_data17create_amt_packetEv+0x10>
        uint8_t com = 0x04;
 8002114:	2304      	movs	r3, #4
 8002116:	f88d 300e 	strb.w	r3, [sp, #14]
        uint8_t data[1] = {amt_packet_};
 800211a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
        create_packet(size, Packet_Type::CONNECTION);
 800211e:	2200      	movs	r2, #0
 8002120:	210b      	movs	r1, #11
        uint8_t data[1] = {amt_packet_};
 8002122:	f88d 300c 	strb.w	r3, [sp, #12]
        uint8_t len = 1;
 8002126:	f88d 400f 	strb.w	r4, [sp, #15]
        create_packet(size, Packet_Type::CONNECTION);
 800212a:	f7ff ff0d 	bl	8001f48 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 800212e:	f10d 030f 	add.w	r3, sp, #15
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	ab03      	add	r3, sp, #12
 8002136:	e7e4      	b.n	8002102 <_ZN17LoRa_contact_data17create_amt_packetEv+0x2e>
 8002138:	200023c4 	.word	0x200023c4

0800213c <_ZN17LoRa_contact_data20create_number_packetEv>:

// Создание пакета номеров пришедших пакетов
bool LoRa_contact_data::create_number_packet() {
 800213c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bool err = false;
    switch (current_stage_.type_communication) {
 8002140:	7cc4      	ldrb	r4, [r0, #19]
bool LoRa_contact_data::create_number_packet() {
 8002142:	4605      	mov	r5, r0
 8002144:	b086      	sub	sp, #24
    switch (current_stage_.type_communication) {
 8002146:	b12c      	cbz	r4, 8002154 <_ZN17LoRa_contact_data20create_number_packetEv+0x18>
 8002148:	2c01      	cmp	r4, #1
 800214a:	d018      	beq.n	800217e <_ZN17LoRa_contact_data20create_number_packetEv+0x42>
 800214c:	2001      	movs	r0, #1
    default:
        err = true;
        break;
    }
    return err;
}
 800214e:	b006      	add	sp, #24
 8002150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        uint8_t com = 0x05;
 8002154:	2305      	movs	r3, #5
        create_packet(size, Packet_Type::CONNECTION);
 8002156:	4622      	mov	r2, r4
 8002158:	210a      	movs	r1, #10
        uint8_t com = 0x05;
 800215a:	f88d 300f 	strb.w	r3, [sp, #15]
        uint8_t len = 0;
 800215e:	f88d 4010 	strb.w	r4, [sp, #16]
        create_packet(size, Packet_Type::CONNECTION);
 8002162:	f7ff fef1 	bl	8001f48 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, nullptr, &len);
 8002166:	ab04      	add	r3, sp, #16
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	482c      	ldr	r0, [pc, #176]	; (800221c <_ZN17LoRa_contact_data20create_number_packetEv+0xe0>)
 800216c:	4623      	mov	r3, r4
 800216e:	f10d 020f 	add.w	r2, sp, #15
 8002172:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8002176:	f003 fde5 	bl	8005d44 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    return err;
 800217a:	2000      	movs	r0, #0
 800217c:	e7e7      	b.n	800214e <_ZN17LoRa_contact_data20create_number_packetEv+0x12>
        LoRa_packet packet;
 800217e:	a804      	add	r0, sp, #16
 8002180:	f002 faf8 	bl	8004774 <_ZN11LoRa_packetC1Ev>
        uint8_t com = 0x06;
 8002184:	2306      	movs	r3, #6
        uint8_t len = reciev_packet_len * 2;
 8002186:	f895 4135 	ldrb.w	r4, [r5, #309]	; 0x135
        uint8_t com = 0x06;
 800218a:	f88d 300e 	strb.w	r3, [sp, #14]
        uint8_t len = reciev_packet_len * 2;
 800218e:	0064      	lsls	r4, r4, #1
 8002190:	b2e0      	uxtb	r0, r4
        uint8_t size = 11 + len;
 8002192:	f100 070b 	add.w	r7, r0, #11
        uint8_t len = reciev_packet_len * 2;
 8002196:	f88d 000f 	strb.w	r0, [sp, #15]
        uint8_t size = 11 + len;
 800219a:	b2ff      	uxtb	r7, r7
        if(len != 0)
 800219c:	b308      	cbz	r0, 80021e2 <_ZN17LoRa_contact_data20create_number_packetEv+0xa6>
            data = new uint8_t[len];
 800219e:	f008 feda 	bl	800af56 <_Znaj>
        for(int i = 0; i < (len / 2); ++i) {
 80021a2:	f04f 0a00 	mov.w	sl, #0
            data = new uint8_t[len];
 80021a6:	4604      	mov	r4, r0
        for(int i = 0; i < (len / 2); ++i) {
 80021a8:	4606      	mov	r6, r0
            number = packet_analyzer.get_packet_number(packet);
 80021aa:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8002220 <_ZN17LoRa_contact_data20create_number_packetEv+0xe4>
 80021ae:	f105 08bc 	add.w	r8, r5, #188	; 0xbc
        for(int i = 0; i < (len / 2); ++i) {
 80021b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80021b6:	3602      	adds	r6, #2
 80021b8:	ebba 0f53 	cmp.w	sl, r3, lsr #1
 80021bc:	da12      	bge.n	80021e4 <_ZN17LoRa_contact_data20create_number_packetEv+0xa8>
            packet = reciev_packet_[i];
 80021be:	4641      	mov	r1, r8
 80021c0:	a804      	add	r0, sp, #16
 80021c2:	f002 fb24 	bl	800480e <_ZN11LoRa_packetaSERKS_>
            number = packet_analyzer.get_packet_number(packet);
 80021c6:	4648      	mov	r0, r9
 80021c8:	a904      	add	r1, sp, #16
 80021ca:	f003 fc74 	bl	8005ab6 <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>
            data[i * 2] = (number >> 8) & 0xFF;
 80021ce:	0a03      	lsrs	r3, r0, #8
 80021d0:	f806 3c02 	strb.w	r3, [r6, #-2]
            data[(i * 2) + 1] = number & 0xFF;
 80021d4:	f806 0c01 	strb.w	r0, [r6, #-1]
        for(int i = 0; i < (len / 2); ++i) {
 80021d8:	f10a 0a01 	add.w	sl, sl, #1
 80021dc:	f108 0808 	add.w	r8, r8, #8
 80021e0:	e7e7      	b.n	80021b2 <_ZN17LoRa_contact_data20create_number_packetEv+0x76>
        uint8_t *data = nullptr;
 80021e2:	4604      	mov	r4, r0
        create_packet(size, Packet_Type::CONNECTION);
 80021e4:	2200      	movs	r2, #0
 80021e6:	4639      	mov	r1, r7
 80021e8:	4628      	mov	r0, r5
 80021ea:	f7ff fead 	bl	8001f48 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 80021ee:	f10d 030f 	add.w	r3, sp, #15
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	4809      	ldr	r0, [pc, #36]	; (800221c <_ZN17LoRa_contact_data20create_number_packetEv+0xe0>)
 80021f6:	4623      	mov	r3, r4
 80021f8:	f10d 020e 	add.w	r2, sp, #14
 80021fc:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8002200:	f003 fda0 	bl	8005d44 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
        if(len != 0)
 8002204:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002208:	b11b      	cbz	r3, 8002212 <_ZN17LoRa_contact_data20create_number_packetEv+0xd6>
            delete[] data;
 800220a:	b114      	cbz	r4, 8002212 <_ZN17LoRa_contact_data20create_number_packetEv+0xd6>
 800220c:	4620      	mov	r0, r4
 800220e:	f008 fe8f 	bl	800af30 <_ZdaPv>
        LoRa_packet packet;
 8002212:	a804      	add	r0, sp, #16
 8002214:	f002 fab6 	bl	8004784 <_ZN11LoRa_packetD1Ev>
 8002218:	e7af      	b.n	800217a <_ZN17LoRa_contact_data20create_number_packetEv+0x3e>
 800221a:	bf00      	nop
 800221c:	200023c4 	.word	0x200023c4
 8002220:	200023a8 	.word	0x200023a8

08002224 <_ZN17LoRa_contact_data23create_disconnet_packetEb>:
        break;
    }
    return err;
}
// Создание пакета разрыва соединения // err переменная класса? 
bool LoRa_contact_data::create_disconnet_packet(bool error) {
 8002224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    bool err = false;
    init_ = false;
 8002226:	2300      	movs	r3, #0
 8002228:	f880 3138 	strb.w	r3, [r0, #312]	; 0x138
    switch (current_stage_.type_communication) {
 800222c:	7cc3      	ldrb	r3, [r0, #19]
bool LoRa_contact_data::create_disconnet_packet(bool error) {
 800222e:	4604      	mov	r4, r0
    switch (current_stage_.type_communication) {
 8002230:	2b01      	cmp	r3, #1
 8002232:	f04f 0001 	mov.w	r0, #1
 8002236:	d818      	bhi.n	800226a <_ZN17LoRa_contact_data23create_disconnet_packetEb+0x46>
    case TC_INITIATOR:
    // Получатель
    case TC_RECIPIENT: {
        // Создание пакета
        uint8_t size = 11;
        uint8_t com = 0x08;
 8002238:	2308      	movs	r3, #8
        uint8_t len = 1;
 800223a:	f88d 000f 	strb.w	r0, [sp, #15]
        uint8_t com = 0x08;
 800223e:	f88d 300e 	strb.w	r3, [sp, #14]
        uint8_t data[1] = {0};
        if(error)
 8002242:	b9a1      	cbnz	r1, 800226e <_ZN17LoRa_contact_data23create_disconnet_packetEb+0x4a>
        uint8_t data[1] = {0};
 8002244:	f88d 100c 	strb.w	r1, [sp, #12]
            data[0] = 2;
        create_packet(size, Packet_Type::CONNECTION);
 8002248:	2200      	movs	r2, #0
 800224a:	210b      	movs	r1, #11
 800224c:	4620      	mov	r0, r4
 800224e:	f7ff fe7b 	bl	8001f48 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        // static_cast<Packet_Connection*>(last_send_packet_.packet)->set_packet_data(&com, data, nullptr);
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8002252:	f10d 030f 	add.w	r3, sp, #15
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	4807      	ldr	r0, [pc, #28]	; (8002278 <_ZN17LoRa_contact_data23create_disconnet_packetEb+0x54>)
 800225a:	ab03      	add	r3, sp, #12
 800225c:	f10d 020e 	add.w	r2, sp, #14
 8002260:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8002264:	f003 fd6e 	bl	8005d44 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    }
    default:
        err = true;
        break;
    }
    return err;
 8002268:	2000      	movs	r0, #0
}
 800226a:	b004      	add	sp, #16
 800226c:	bd10      	pop	{r4, pc}
            data[0] = 2;
 800226e:	2302      	movs	r3, #2
 8002270:	f88d 300c 	strb.w	r3, [sp, #12]
 8002274:	e7e8      	b.n	8002248 <_ZN17LoRa_contact_data23create_disconnet_packetEb+0x24>
 8002276:	bf00      	nop
 8002278:	200023c4 	.word	0x200023c4

0800227c <_ZN17LoRa_contact_data19packet_dont_correctEbb>:

// --- функции обработки пакетов ---

// Проверка пакета на "пришёл" и "мой|глобальный", и от того, кого
//   я жду | от всех (при глобальном адресе ожидания - тоже все)
bool LoRa_contact_data::packet_dont_correct(bool global_adr, bool all_adr_sendler) {
 800227c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    // Проверка размера пакета
    if(last_receive_packet_.get_len() < PACKET_HEADER_SIZE)
 800227e:	f100 0620 	add.w	r6, r0, #32
bool LoRa_contact_data::packet_dont_correct(bool global_adr, bool all_adr_sendler) {
 8002282:	4604      	mov	r4, r0
    if(last_receive_packet_.get_len() < PACKET_HEADER_SIZE)
 8002284:	4630      	mov	r0, r6
bool LoRa_contact_data::packet_dont_correct(bool global_adr, bool all_adr_sendler) {
 8002286:	460f      	mov	r7, r1
 8002288:	4615      	mov	r5, r2
    if(last_receive_packet_.get_len() < PACKET_HEADER_SIZE)
 800228a:	f002 fab2 	bl	80047f2 <_ZNK11LoRa_packet7get_lenEv>
 800228e:	2808      	cmp	r0, #8
 8002290:	d90a      	bls.n	80022a8 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x2c>
        return false;
    // Проверка "пакет отправлен мне"
    // if(last_receive_packet_.packet->get_dest_adr() != my_adr_) {
    if(packet_analyzer.get_dest_adr(last_receive_packet_) != my_adr_) {
 8002292:	4631      	mov	r1, r6
 8002294:	4815      	ldr	r0, [pc, #84]	; (80022ec <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x70>)
 8002296:	f003 fbdd 	bl	8005a54 <_ZN15Packet_analyzer12get_dest_adrERK11LoRa_packet>
 800229a:	1d21      	adds	r1, r4, #4
 800229c:	9001      	str	r0, [sp, #4]
 800229e:	a801      	add	r0, sp, #4
 80022a0:	f003 fbab 	bl	80059fa <_ZneRK12LoRa_addressS1_>
 80022a4:	b160      	cbz	r0, 80022c0 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x44>
        // Проверка "пакет отправлен всем"
        // if(!(global_adr && (last_receive_packet_.packet->get_dest_adr().global()))) {
        if(!(global_adr && (packet_analyzer.get_dest_adr(last_receive_packet_).global()))) {
 80022a6:	b90f      	cbnz	r7, 80022ac <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x30>
        return false;
 80022a8:	2000      	movs	r0, #0
 80022aa:	e01b      	b.n	80022e4 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x68>
        if(!(global_adr && (packet_analyzer.get_dest_adr(last_receive_packet_).global()))) {
 80022ac:	4631      	mov	r1, r6
 80022ae:	480f      	ldr	r0, [pc, #60]	; (80022ec <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x70>)
 80022b0:	f003 fbd0 	bl	8005a54 <_ZN15Packet_analyzer12get_dest_adrERK11LoRa_packet>
 80022b4:	9001      	str	r0, [sp, #4]
 80022b6:	a801      	add	r0, sp, #4
 80022b8:	f003 fb91 	bl	80059de <_ZN12LoRa_address6globalEv>
 80022bc:	2800      	cmp	r0, #0
 80022be:	d0f3      	beq.n	80022a8 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x2c>
            return false;
        }
    }
    // Проверка "мне не важно кто отправлял"
    if(!((connect_adr_.global()) || all_adr_sendler))
 80022c0:	3408      	adds	r4, #8
 80022c2:	4620      	mov	r0, r4
 80022c4:	f003 fb8b 	bl	80059de <_ZN12LoRa_address6globalEv>
 80022c8:	b960      	cbnz	r0, 80022e4 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x68>
 80022ca:	b96d      	cbnz	r5, 80022e8 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x6c>
        // Проверка "мне важно кто отправил"
        // if(last_receive_packet_.packet->get_sour_adr() != connect_adr_)
        if(packet_analyzer.get_sour_adr(last_receive_packet_) != connect_adr_)
 80022cc:	4631      	mov	r1, r6
 80022ce:	4807      	ldr	r0, [pc, #28]	; (80022ec <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x70>)
 80022d0:	f003 fbde 	bl	8005a90 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>
 80022d4:	4621      	mov	r1, r4
 80022d6:	9001      	str	r0, [sp, #4]
 80022d8:	a801      	add	r0, sp, #4
 80022da:	f003 fb8e 	bl	80059fa <_ZneRK12LoRa_addressS1_>
 80022de:	f080 0001 	eor.w	r0, r0, #1
 80022e2:	b2c0      	uxtb	r0, r0
            return false;
    return true;
}
 80022e4:	b003      	add	sp, #12
 80022e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return true;
 80022e8:	4628      	mov	r0, r5
 80022ea:	e7fb      	b.n	80022e4 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x68>
 80022ec:	200023a8 	.word	0x200023a8

080022f0 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type>:
        if(last_receive_packet_[9] == subtype_packet[i])
            return true;
    return false;
}
#else
bool LoRa_contact_data::check_packet_type(Packet_Type type_packet) {
 80022f0:	b510      	push	{r4, lr}
 80022f2:	460c      	mov	r4, r1
    return (packet_analyzer.get_packet_type(last_receive_packet_) == type_packet);
 80022f4:	f100 0120 	add.w	r1, r0, #32
 80022f8:	4803      	ldr	r0, [pc, #12]	; (8002308 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type+0x18>)
 80022fa:	f003 fbd7 	bl	8005aac <_ZN15Packet_analyzer15get_packet_typeERK11LoRa_packet>
}
 80022fe:	1b03      	subs	r3, r0, r4
 8002300:	4258      	negs	r0, r3
 8002302:	4158      	adcs	r0, r3
 8002304:	bd10      	pop	{r4, pc}
 8002306:	bf00      	nop
 8002308:	200023a8 	.word	0x200023a8

0800230c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>:
bool LoRa_contact_data::check_packet_type(Packet_Type type_packet, const uint8_t& subtype_packet) {
 800230c:	b570      	push	{r4, r5, r6, lr}
    if(packet_analyzer.get_packet_type(last_receive_packet_) != type_packet)
 800230e:	f100 0420 	add.w	r4, r0, #32
bool LoRa_contact_data::check_packet_type(Packet_Type type_packet, const uint8_t& subtype_packet) {
 8002312:	460e      	mov	r6, r1
    if(packet_analyzer.get_packet_type(last_receive_packet_) != type_packet)
 8002314:	4809      	ldr	r0, [pc, #36]	; (800233c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh+0x30>)
 8002316:	4621      	mov	r1, r4
bool LoRa_contact_data::check_packet_type(Packet_Type type_packet, const uint8_t& subtype_packet) {
 8002318:	4615      	mov	r5, r2
    if(packet_analyzer.get_packet_type(last_receive_packet_) != type_packet)
 800231a:	f003 fbc7 	bl	8005aac <_ZN15Packet_analyzer15get_packet_typeERK11LoRa_packet>
 800231e:	42b0      	cmp	r0, r6
 8002320:	d109      	bne.n	8002336 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh+0x2a>
        return false;
    if(last_receive_packet_[9] == subtype_packet)
 8002322:	2109      	movs	r1, #9
 8002324:	4620      	mov	r0, r4
 8002326:	f002 fa6a 	bl	80047fe <_ZN11LoRa_packetixEi>
 800232a:	782b      	ldrb	r3, [r5, #0]
 800232c:	7800      	ldrb	r0, [r0, #0]
 800232e:	1ac3      	subs	r3, r0, r3
 8002330:	4258      	negs	r0, r3
 8002332:	4158      	adcs	r0, r3
        return true;
    return false;
}
 8002334:	bd70      	pop	{r4, r5, r6, pc}
        return false;
 8002336:	2000      	movs	r0, #0
 8002338:	e7fc      	b.n	8002334 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh+0x28>
 800233a:	bf00      	nop
 800233c:	200023a8 	.word	0x200023a8

08002340 <_ZN17LoRa_contact_data17search_num_packetEt>:
#endif

// поиск номера в send_packet_
int16_t LoRa_contact_data::search_num_packet(uint16_t number) {
 8002340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002344:	4605      	mov	r5, r0
 8002346:	460e      	mov	r6, r1
 8002348:	2400      	movs	r4, #0
#else
    for(uint16_t i = 0; i < send_packet_len; ++i)
#endif
    {
        // packet.set_packet(send_packet_[i]);
        if(number == packet_analyzer.get_packet_number(send_packet_[i]))
 800234a:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8002380 <_ZN17LoRa_contact_data17search_num_packetEt+0x40>
 800234e:	f100 0734 	add.w	r7, r0, #52	; 0x34
    for(uint16_t i = 0; i < send_packet_len; ++i)
 8002352:	f895 2134 	ldrb.w	r2, [r5, #308]	; 0x134
 8002356:	b2a3      	uxth	r3, r4
 8002358:	429a      	cmp	r2, r3
 800235a:	d90e      	bls.n	800237a <_ZN17LoRa_contact_data17search_num_packetEt+0x3a>
        if(number == packet_analyzer.get_packet_number(send_packet_[i]))
 800235c:	4639      	mov	r1, r7
 800235e:	4640      	mov	r0, r8
 8002360:	f003 fba9 	bl	8005ab6 <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>
 8002364:	42b0      	cmp	r0, r6
 8002366:	f104 0301 	add.w	r3, r4, #1
 800236a:	f107 0708 	add.w	r7, r7, #8
 800236e:	d102      	bne.n	8002376 <_ZN17LoRa_contact_data17search_num_packetEt+0x36>
            return i;
 8002370:	b220      	sxth	r0, r4
        // if(packet.packet->get_packet_number() == number)
        //     return i;

    }
    return -1;
}
 8002372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002376:	461c      	mov	r4, r3
 8002378:	e7eb      	b.n	8002352 <_ZN17LoRa_contact_data17search_num_packetEt+0x12>
    return -1;
 800237a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800237e:	e7f8      	b.n	8002372 <_ZN17LoRa_contact_data17search_num_packetEt+0x32>
 8002380:	200023a8 	.word	0x200023a8

08002384 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh>:
    for(int j = 0; j < amt_packet_; ++j)
        send_flag_.push_back(true);
    return i;
}
#else
uint8_t LoRa_contact_data::pop_num_packet(const std::array<uint16_t, CONTACT_DATA_MAX_PACKET>& number, uint8_t len) {
 8002384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(len > send_packet_len)
 8002388:	f890 3134 	ldrb.w	r3, [r0, #308]	; 0x134
uint8_t LoRa_contact_data::pop_num_packet(const std::array<uint16_t, CONTACT_DATA_MAX_PACKET>& number, uint8_t len) {
 800238c:	4604      	mov	r4, r0
    if(len > send_packet_len)
 800238e:	4293      	cmp	r3, r2
uint8_t LoRa_contact_data::pop_num_packet(const std::array<uint16_t, CONTACT_DATA_MAX_PACKET>& number, uint8_t len) {
 8002390:	4688      	mov	r8, r1
 8002392:	4617      	mov	r7, r2
    if(len > send_packet_len)
 8002394:	d335      	bcc.n	8002402 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x7e>
        return 0;
    int i;
    for(i = 0; i < len; ++i) {
 8002396:	2600      	movs	r6, #0
 8002398:	f100 0934 	add.w	r9, r0, #52	; 0x34
 800239c:	42b7      	cmp	r7, r6
 800239e:	dd19      	ble.n	80023d4 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x50>
        int16_t search = search_num_packet(number[i]);
 80023a0:	4620      	mov	r0, r4
 80023a2:	f838 1016 	ldrh.w	r1, [r8, r6, lsl #1]
 80023a6:	f7ff ffcb 	bl	8002340 <_ZN17LoRa_contact_data17search_num_packetEt>
        if(search == -1)
 80023aa:	1c43      	adds	r3, r0, #1
        int16_t search = search_num_packet(number[i]);
 80023ac:	4605      	mov	r5, r0
        if(search == -1)
 80023ae:	d011      	beq.n	80023d4 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x50>
            break;
        for(int j = search; j < send_packet_len - 1; ++j) {
 80023b0:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 80023b4:	3b01      	subs	r3, #1
 80023b6:	42ab      	cmp	r3, r5
 80023b8:	dd08      	ble.n	80023cc <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x48>
        	send_packet_[j] = std::move(send_packet_[j+1]);
 80023ba:	00e8      	lsls	r0, r5, #3
 80023bc:	f100 0108 	add.w	r1, r0, #8
 80023c0:	4449      	add	r1, r9
 80023c2:	4448      	add	r0, r9
 80023c4:	3501      	adds	r5, #1
 80023c6:	f002 fa41 	bl	800484c <_ZN11LoRa_packetaSEOS_>
        for(int j = search; j < send_packet_len - 1; ++j) {
 80023ca:	e7f1      	b.n	80023b0 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x2c>
        }
		--send_packet_len;
 80023cc:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
    for(i = 0; i < len; ++i) {
 80023d0:	3601      	adds	r6, #1
 80023d2:	e7e3      	b.n	800239c <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x18>
    }
    amt_packet_ = send_packet_len;
    send_flag_len = send_packet_len;
    for(int j = 0; j < send_flag_len; ++j) {
 80023d4:	f06f 00ab 	mvn.w	r0, #171	; 0xab
        send_flag_[j] = true;
 80023d8:	2101      	movs	r1, #1
    amt_packet_ = send_packet_len;
 80023da:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
    for(int j = 0; j < send_flag_len; ++j) {
 80023de:	1b00      	subs	r0, r0, r4
    amt_packet_ = send_packet_len;
 80023e0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    send_flag_len = send_packet_len;
 80023e4:	f884 3136 	strb.w	r3, [r4, #310]	; 0x136
    for(int j = 0; j < send_flag_len; ++j) {
 80023e8:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 80023ec:	f894 5136 	ldrb.w	r5, [r4, #310]	; 0x136
 80023f0:	18c2      	adds	r2, r0, r3
 80023f2:	42aa      	cmp	r2, r5
 80023f4:	da02      	bge.n	80023fc <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x78>
        send_flag_[j] = true;
 80023f6:	f803 1b01 	strb.w	r1, [r3], #1
    for(int j = 0; j < send_flag_len; ++j) {
 80023fa:	e7f7      	b.n	80023ec <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x68>
    }
    return i;
 80023fc:	b2f0      	uxtb	r0, r6
}
 80023fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return 0;
 8002402:	2000      	movs	r0, #0
 8002404:	e7fb      	b.n	80023fe <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x7a>
	...

08002408 <_ZN17LoRa_contact_data15sort_num_packetEv>:
#endif

// сортировка reciev_packet_
void LoRa_contact_data::sort_num_packet() {
 8002408:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800240c:	4606      	mov	r6, r0
    uint16_t number1, number2;
    bool swap;
#if defined ( USE_VECTOR )
    for(unsigned int i = 0; (i < (reciev_packet_.size() - 1)) && (reciev_packet_.size() != 0);)
#else
    for(uint8_t i = 0; (i < (reciev_packet_len - 1)) && (reciev_packet_len != 0);)
 800240e:	2400      	movs	r4, #0
        // packet.set_packet(reciev_packet_[i]);
        // number1 = packet.packet->get_packet_number();
        // packet.set_packet(reciev_packet_[i+1]);
        // number2 = packet.packet->get_packet_number();

        number1 = packet_analyzer.get_packet_number(reciev_packet_[i]);
 8002410:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800248c <_ZN17LoRa_contact_data15sort_num_packetEv+0x84>
 8002414:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
    for(uint8_t i = 0; (i < (reciev_packet_len - 1)) && (reciev_packet_len != 0);)
 8002418:	f896 3135 	ldrb.w	r3, [r6, #309]	; 0x135
 800241c:	1e5a      	subs	r2, r3, #1
 800241e:	4294      	cmp	r4, r2
 8002420:	da30      	bge.n	8002484 <_ZN17LoRa_contact_data15sort_num_packetEv+0x7c>
 8002422:	b37b      	cbz	r3, 8002484 <_ZN17LoRa_contact_data15sort_num_packetEv+0x7c>
 8002424:	eb07 0ac4 	add.w	sl, r7, r4, lsl #3
        number1 = packet_analyzer.get_packet_number(reciev_packet_[i]);
 8002428:	4651      	mov	r1, sl
 800242a:	4640      	mov	r0, r8
 800242c:	f003 fb43 	bl	8005ab6 <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>
 8002430:	4605      	mov	r5, r0
        number2 = packet_analyzer.get_packet_number(reciev_packet_[i+1]);
 8002432:	f104 0b01 	add.w	fp, r4, #1
 8002436:	eb07 09cb 	add.w	r9, r7, fp, lsl #3
 800243a:	4649      	mov	r1, r9
 800243c:	4640      	mov	r0, r8
 800243e:	f003 fb3a 	bl	8005ab6 <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>

        if(number1 == 0) {
 8002442:	b92d      	cbnz	r5, 8002450 <_ZN17LoRa_contact_data15sort_num_packetEv+0x48>
            if(0xFF00 <= number2)
 8002444:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 8002448:	d205      	bcs.n	8002456 <_ZN17LoRa_contact_data15sort_num_packetEv+0x4e>

            if(i != 0)
                --i;
        }
        else
            ++i;
 800244a:	fa5f f48b 	uxtb.w	r4, fp
 800244e:	e7e3      	b.n	8002418 <_ZN17LoRa_contact_data15sort_num_packetEv+0x10>
        else if (number2 == 0) {
 8002450:	b9a8      	cbnz	r0, 800247e <_ZN17LoRa_contact_data15sort_num_packetEv+0x76>
            if(number1 <= 0x00FF)
 8002452:	2dff      	cmp	r5, #255	; 0xff
 8002454:	d8f9      	bhi.n	800244a <_ZN17LoRa_contact_data15sort_num_packetEv+0x42>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002456:	4651      	mov	r1, sl
 8002458:	4668      	mov	r0, sp
 800245a:	f002 fa06 	bl	800486a <_ZN11LoRa_packetC1EOS_>
      __a = _GLIBCXX_MOVE(__b);
 800245e:	4649      	mov	r1, r9
 8002460:	4650      	mov	r0, sl
 8002462:	f002 f9f3 	bl	800484c <_ZN11LoRa_packetaSEOS_>
      __b = _GLIBCXX_MOVE(__tmp);
 8002466:	4669      	mov	r1, sp
 8002468:	4648      	mov	r0, r9
 800246a:	f002 f9ef 	bl	800484c <_ZN11LoRa_packetaSEOS_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800246e:	4668      	mov	r0, sp
 8002470:	f002 f988 	bl	8004784 <_ZN11LoRa_packetD1Ev>
            if(i != 0)
 8002474:	2c00      	cmp	r4, #0
 8002476:	d0cf      	beq.n	8002418 <_ZN17LoRa_contact_data15sort_num_packetEv+0x10>
                --i;
 8002478:	3c01      	subs	r4, #1
 800247a:	b2e4      	uxtb	r4, r4
 800247c:	e7cc      	b.n	8002418 <_ZN17LoRa_contact_data15sort_num_packetEv+0x10>
            if(number2 < number1)
 800247e:	4285      	cmp	r5, r0
 8002480:	d9e3      	bls.n	800244a <_ZN17LoRa_contact_data15sort_num_packetEv+0x42>
 8002482:	e7e8      	b.n	8002456 <_ZN17LoRa_contact_data15sort_num_packetEv+0x4e>
    }
}
 8002484:	b003      	add	sp, #12
 8002486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800248a:	bf00      	nop
 800248c:	200023a8 	.word	0x200023a8

08002490 <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control>:
    //   (стадия _connection = C_AWAITING_REQUEST)
    // - Сброс ожидания определённого модуля => отправить пакет сброса
    //   (стадия _connection = C_AWAITING_REQUEST)
    // ----- ---- -----
    // Проверка состояние модуля
    switch (module_state_) {
 8002490:	7c82      	ldrb	r2, [r0, #18]
uint32_t LoRa_contact_data::recip_connection_queue_check(Stage_control& use_stage) {
 8002492:	4603      	mov	r3, r0
    switch (module_state_) {
 8002494:	2a01      	cmp	r2, #1
 8002496:	d115      	bne.n	80024c4 <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control+0x34>
			//     create_reset_wait_packet();
			//     set_LoRa_mode_send();
        }
#endif
        else {
            connect_adr_ = wait_adr_;
 8002498:	68c2      	ldr	r2, [r0, #12]
 800249a:	f103 0118 	add.w	r1, r3, #24
 800249e:	6082      	str	r2, [r0, #8]
        }
        if(!use_past_stage)
 80024a0:	7f40      	ldrb	r0, [r0, #29]
 80024a2:	f103 0213 	add.w	r2, r3, #19
 80024a6:	b938      	cbnz	r0, 80024b8 <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control+0x28>
            past_stage_ = current_stage_;
 80024a8:	6810      	ldr	r0, [r2, #0]
 80024aa:	6198      	str	r0, [r3, #24]
 80024ac:	7912      	ldrb	r2, [r2, #4]
 80024ae:	710a      	strb	r2, [r1, #4]
        else
            current_stage_ = past_stage_;
        current_stage_.connection = C_AWAITING_REQUEST;
 80024b0:	2201      	movs	r2, #1
 80024b2:	2000      	movs	r0, #0
 80024b4:	755a      	strb	r2, [r3, #21]
    }
    default:
        error = 211;
        break;
    }
    return error;
 80024b6:	4770      	bx	lr
            current_stage_ = past_stage_;
 80024b8:	6998      	ldr	r0, [r3, #24]
 80024ba:	7909      	ldrb	r1, [r1, #4]
 80024bc:	f8c3 0013 	str.w	r0, [r3, #19]
 80024c0:	7111      	strb	r1, [r2, #4]
 80024c2:	e7f5      	b.n	80024b0 <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control+0x20>
        error = 211;
 80024c4:	20d3      	movs	r0, #211	; 0xd3
}
 80024c6:	4770      	bx	lr

080024c8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>:
    current_stage_.stade_communication = SC_COMPLETE;
    past_stage_ = current_stage_;
    start_connect_ = false;
    set_LoRa_mode_sleep();
}
void LoRa_contact_data::set_LoRa_mode_receive() {
 80024c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    module_state_ = MS_LoRa_RECIEVE;
 80024ca:	2302      	movs	r3, #2
#if defined ( ESP32 )
    lora_.mode_sleep();
    // delay(1);
    lora_.receiver_packet(1, 0);
#else
    LoRa.mode_sleep();
 80024cc:	4c08      	ldr	r4, [pc, #32]	; (80024f0 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv+0x28>)
    module_state_ = MS_LoRa_RECIEVE;
 80024ce:	7483      	strb	r3, [r0, #18]
    LoRa.mode_sleep();
 80024d0:	4620      	mov	r0, r4
 80024d2:	f001 fb13 	bl	8003afc <_ZN10LoRa_class10mode_sleepEv>
    //HAL_Delay(1);
    LoRa.receiver_packet(1, 0);
 80024d6:	2300      	movs	r3, #0
 80024d8:	2201      	movs	r2, #1
 80024da:	4621      	mov	r1, r4
 80024dc:	e9cd 3300 	strd	r3, r3, [sp]
 80024e0:	a802      	add	r0, sp, #8
 80024e2:	f001 fe89 	bl	80041f8 <_ZN10LoRa_class15receiver_packetEhmbb>
 80024e6:	a802      	add	r0, sp, #8
 80024e8:	f002 f94c 	bl	8004784 <_ZN11LoRa_packetD1Ev>
#endif
}
 80024ec:	b004      	add	sp, #16
 80024ee:	bd10      	pop	{r4, pc}
 80024f0:	20000380 	.word	0x20000380

080024f4 <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>:
bool LoRa_contact_data::wait_recipient(LoRa_address address) {
 80024f4:	b507      	push	{r0, r1, r2, lr}
    current_stage_.type_communication = TC_RECIPIENT;
 80024f6:	2201      	movs	r2, #1
bool LoRa_contact_data::wait_recipient(LoRa_address address) {
 80024f8:	9101      	str	r1, [sp, #4]
    current_stage_.type_communication = TC_RECIPIENT;
 80024fa:	74c2      	strb	r2, [r0, #19]
    current_stage_.stade_communication = SC_CONNECTION;
 80024fc:	f240 1201 	movw	r2, #257	; 0x101
 8002500:	8282      	strh	r2, [r0, #20]
    past_stage_ = current_stage_;
 8002502:	4602      	mov	r2, r0
bool LoRa_contact_data::wait_recipient(LoRa_address address) {
 8002504:	4603      	mov	r3, r0
    wait_adr_ = address;
 8002506:	60c1      	str	r1, [r0, #12]
    past_stage_ = current_stage_;
 8002508:	f852 0f13 	ldr.w	r0, [r2, #19]!
 800250c:	6198      	str	r0, [r3, #24]
 800250e:	7912      	ldrb	r2, [r2, #4]
    set_LoRa_mode_receive();
 8002510:	4618      	mov	r0, r3
    past_stage_ = current_stage_;
 8002512:	771a      	strb	r2, [r3, #28]
    set_LoRa_mode_receive();
 8002514:	f7ff ffd8 	bl	80024c8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
}
 8002518:	2000      	movs	r0, #0
 800251a:	b003      	add	sp, #12
 800251c:	f85d fb04 	ldr.w	pc, [sp], #4

08002520 <_ZN17LoRa_contact_data17broadcast_receiveE12LoRa_address>:
uint16_t LoRa_contact_data::broadcast_receive(LoRa_address address) {
 8002520:	b513      	push	{r0, r1, r4, lr}
 8002522:	4604      	mov	r4, r0
 8002524:	9101      	str	r1, [sp, #4]
    clear();
 8002526:	f7ff fcae 	bl	8001e86 <_ZN17LoRa_contact_data5clearEv>
    wait_adr_ = address;
 800252a:	9b01      	ldr	r3, [sp, #4]
 800252c:	60e3      	str	r3, [r4, #12]
    current_stage_.type_communication = TC_BROADCAST;
 800252e:	2302      	movs	r3, #2
 8002530:	74e3      	strb	r3, [r4, #19]
    current_stage_.stade_communication = SC_WAITING;
 8002532:	2306      	movs	r3, #6
 8002534:	7523      	strb	r3, [r4, #20]
    past_stage_ = current_stage_;
 8002536:	4623      	mov	r3, r4
 8002538:	f853 0f13 	ldr.w	r0, [r3, #19]!
 800253c:	61a0      	str	r0, [r4, #24]
 800253e:	791b      	ldrb	r3, [r3, #4]
    set_LoRa_mode_receive();
 8002540:	4620      	mov	r0, r4
    past_stage_ = current_stage_;
 8002542:	7723      	strb	r3, [r4, #28]
    set_LoRa_mode_receive();
 8002544:	f7ff ffc0 	bl	80024c8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
}
 8002548:	2000      	movs	r0, #0
 800254a:	b002      	add	sp, #8
 800254c:	bd10      	pop	{r4, pc}

0800254e <_ZN17LoRa_contact_data21broadcast_wait_packetEv>:
uint32_t LoRa_contact_data::broadcast_wait_packet() {
 800254e:	b538      	push	{r3, r4, r5, lr}
    switch (module_state_) {
 8002550:	7c83      	ldrb	r3, [r0, #18]
uint32_t LoRa_contact_data::broadcast_wait_packet() {
 8002552:	4604      	mov	r4, r0
    switch (module_state_) {
 8002554:	2b01      	cmp	r3, #1
 8002556:	d00a      	beq.n	800256e <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x20>
 8002558:	2b02      	cmp	r3, #2
 800255a:	d002      	beq.n	8002562 <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x14>
 800255c:	f44f 709b 	mov.w	r0, #310	; 0x136
}
 8002560:	bd38      	pop	{r3, r4, r5, pc}
        if(!packet_dont_correct(true, true)) {
 8002562:	2201      	movs	r2, #1
 8002564:	4611      	mov	r1, r2
 8002566:	f7ff fe89 	bl	800227c <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 800256a:	b920      	cbnz	r0, 8002576 <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x28>
            set_LoRa_mode_receive();
 800256c:	4620      	mov	r0, r4
 800256e:	f7ff ffab 	bl	80024c8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
 8002572:	2000      	movs	r0, #0
    return error;
 8002574:	e7f4      	b.n	8002560 <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x12>
			if(reciev_packet_len == CONTACT_DATA_MAX_PACKET) {
 8002576:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 800257a:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
			reciev_packet_[reciev_packet_len++] = last_receive_packet_;
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8002584:	f884 2135 	strb.w	r2, [r4, #309]	; 0x135
 8002588:	f104 0120 	add.w	r1, r4, #32
 800258c:	f002 f93f 	bl	800480e <_ZN11LoRa_packetaSERKS_>
            current_stage_.stade_communication = SC_PACKET_ACCEPTED;
 8002590:	2307      	movs	r3, #7
 8002592:	7523      	strb	r3, [r4, #20]
 8002594:	e7ea      	b.n	800256c <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x1e>
	...

08002598 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>:
void LoRa_contact_data::set_LoRa_mode_send(bool first) {
    module_state_ = MS_LoRa_SEND;
 8002598:	2301      	movs	r3, #1
void LoRa_contact_data::set_LoRa_mode_send(bool first) {
 800259a:	b570      	push	{r4, r5, r6, lr}
    module_state_ = MS_LoRa_SEND;
 800259c:	7483      	strb	r3, [r0, #18]
void LoRa_contact_data::set_LoRa_mode_send(bool first) {
 800259e:	4604      	mov	r4, r0
 80025a0:	460d      	mov	r5, r1
#if defined ( ESP32 )
    time_last_packet_ = millis();
#else
    time_last_packet_ = HAL_GetTick();
 80025a2:	f005 fa8d 	bl	8007ac0 <HAL_GetTick>
 80025a6:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
#endif
    if(first)
 80025aa:	b10d      	cbz	r5, 80025b0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x18>
        time_first_packet_ = time_last_packet_;
 80025ac:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c

                                                            #if defined ( ALL_SAVE_PACKET )
                                                            all_packet.push_back(pack(last_send_packet_.get_data(), true));
                                                            #endif
#else
    LoRa.mode_sleep();
 80025b0:	4810      	ldr	r0, [pc, #64]	; (80025f4 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x5c>)
 80025b2:	f001 faa3 	bl	8003afc <_ZN10LoRa_class10mode_sleepEv>
 80025b6:	f243 03d4 	movw	r3, #12500	; 0x30d4
    for(int i = 0; i < 12500; i++) __NOP(); // HAL_Delay(3);
 80025ba:	bf00      	nop
 80025bc:	3b01      	subs	r3, #1
 80025be:	d1fc      	bne.n	80025ba <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x22>
    LoRa.mode_FSTX();
 80025c0:	480c      	ldr	r0, [pc, #48]	; (80025f4 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x5c>)
 80025c2:	f001 fabf 	bl	8003b44 <_ZN10LoRa_class9mode_FSTXEv>
 80025c6:	f243 05d4 	movw	r5, #12500	; 0x30d4
    for(int i = 0; i < 12500; i++) __NOP(); // HAL_Delay(3);
 80025ca:	bf00      	nop
 80025cc:	3d01      	subs	r5, #1
 80025ce:	d1fc      	bne.n	80025ca <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x32>
    LoRa.sender_packet(&last_send_packet_[0], last_send_packet_.get_len(), false);
 80025d0:	3428      	adds	r4, #40	; 0x28
 80025d2:	4629      	mov	r1, r5
 80025d4:	4620      	mov	r0, r4
 80025d6:	f002 f912 	bl	80047fe <_ZN11LoRa_packetixEi>
 80025da:	4606      	mov	r6, r0
 80025dc:	4620      	mov	r0, r4
 80025de:	f002 f908 	bl	80047f2 <_ZNK11LoRa_packet7get_lenEv>
 80025e2:	462b      	mov	r3, r5
 80025e4:	4602      	mov	r2, r0
 80025e6:	4631      	mov	r1, r6
#endif
}
 80025e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LoRa.sender_packet(&last_send_packet_[0], last_send_packet_.get_len(), false);
 80025ec:	4801      	ldr	r0, [pc, #4]	; (80025f4 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x5c>)
 80025ee:	f002 b823 	b.w	8004638 <_ZN10LoRa_class13sender_packetEPhhm>
 80025f2:	bf00      	nop
 80025f4:	20000380 	.word	0x20000380

080025f8 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control>:
    switch (module_state_) {
 80025f8:	7c83      	ldrb	r3, [r0, #18]
uint32_t LoRa_contact_data::init_exchange_boardcast(Stage_control& use_stage) {
 80025fa:	b510      	push	{r4, lr}
    switch (module_state_) {
 80025fc:	2b01      	cmp	r3, #1
uint32_t LoRa_contact_data::init_exchange_boardcast(Stage_control& use_stage) {
 80025fe:	4604      	mov	r4, r0
    switch (module_state_) {
 8002600:	d117      	bne.n	8002632 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x3a>
        for(unsigned int i = 0; i < send_flag_len; ++i)
 8002602:	f890 1136 	ldrb.w	r1, [r0, #310]	; 0x136
 8002606:	f100 03ac 	add.w	r3, r0, #172	; 0xac
 800260a:	f06f 00ab 	mvn.w	r0, #171	; 0xab
 800260e:	1b00      	subs	r0, r0, r4
 8002610:	18c2      	adds	r2, r0, r3
 8002612:	4291      	cmp	r1, r2
 8002614:	d90f      	bls.n	8002636 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x3e>
            if(send_flag_[i] == true) {
 8002616:	f813 2b01 	ldrb.w	r2, [r3], #1
 800261a:	2a00      	cmp	r2, #0
 800261c:	d0f8      	beq.n	8002610 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x18>
            create_data_packet();
 800261e:	4620      	mov	r0, r4
 8002620:	f7ff fd34 	bl	800208c <_ZN17LoRa_contact_data18create_data_packetEv>
 8002624:	e017      	b.n	8002656 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x5e>
                current_stage_ = past_stage_;
 8002626:	69a0      	ldr	r0, [r4, #24]
 8002628:	7912      	ldrb	r2, [r2, #4]
 800262a:	f8c4 0013 	str.w	r0, [r4, #19]
 800262e:	711a      	strb	r2, [r3, #4]
 8002630:	e00c      	b.n	800264c <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x54>
        error = 121;
 8002632:	2079      	movs	r0, #121	; 0x79
}
 8002634:	bd10      	pop	{r4, pc}
            if(!use_past_stage)
 8002636:	7f61      	ldrb	r1, [r4, #29]
 8002638:	f104 0218 	add.w	r2, r4, #24
 800263c:	f104 0313 	add.w	r3, r4, #19
 8002640:	2900      	cmp	r1, #0
 8002642:	d1f0      	bne.n	8002626 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x2e>
                past_stage_ = current_stage_;
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	61a0      	str	r0, [r4, #24]
 8002648:	791b      	ldrb	r3, [r3, #4]
 800264a:	7113      	strb	r3, [r2, #4]
            current_stage_.exchange = E_WAITING_CONFIRMATION;
 800264c:	2301      	movs	r3, #1
            create_amt_packet();
 800264e:	4620      	mov	r0, r4
            current_stage_.exchange = E_WAITING_CONFIRMATION;
 8002650:	75a3      	strb	r3, [r4, #22]
            create_amt_packet();
 8002652:	f7ff fd3f 	bl	80020d4 <_ZN17LoRa_contact_data17create_amt_packetEv>
            set_LoRa_mode_send();
 8002656:	4620      	mov	r0, r4
 8002658:	2100      	movs	r1, #0
 800265a:	f7ff ff9d 	bl	8002598 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 800265e:	2000      	movs	r0, #0
 8002660:	e7e8      	b.n	8002634 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x3c>
	...

08002664 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>:
void LoRa_contact_data::set_LoRa_mode_sleep() {
    module_state_ = MS_LoRa_SLEEP;
 8002664:	2300      	movs	r3, #0
 8002666:	7483      	strb	r3, [r0, #18]
    // lora mode
#if defined ( ESP32 )
    lora_.mode_sleep();
#else
    LoRa.mode_sleep();
 8002668:	4801      	ldr	r0, [pc, #4]	; (8002670 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv+0xc>)
 800266a:	f001 ba47 	b.w	8003afc <_ZN10LoRa_class10mode_sleepEv>
 800266e:	bf00      	nop
 8002670:	20000380 	.word	0x20000380

08002674 <_ZN17LoRa_contact_data11end_contactEv>:
bool LoRa_contact_data::end_contact() {
 8002674:	b538      	push	{r3, r4, r5, lr}
 8002676:	4604      	mov	r4, r0
    set_LoRa_mode_sleep();
 8002678:	f7ff fff4 	bl	8002664 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>
    if((current_stage_.stade_communication != SC_DOWNTIME) &&
 800267c:	7d23      	ldrb	r3, [r4, #20]
 800267e:	f104 0518 	add.w	r5, r4, #24
 8002682:	f104 0113 	add.w	r1, r4, #19
 8002686:	b17b      	cbz	r3, 80026a8 <_ZN17LoRa_contact_data11end_contactEv+0x34>
 8002688:	2b01      	cmp	r3, #1
 800268a:	d102      	bne.n	8002692 <_ZN17LoRa_contact_data11end_contactEv+0x1e>
      ((current_stage_.stade_communication != SC_CONNECTION) || (current_stage_.type_communication != TC_RECIPIENT))) {
 800268c:	7ce3      	ldrb	r3, [r4, #19]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d00a      	beq.n	80026a8 <_ZN17LoRa_contact_data11end_contactEv+0x34>
        clear();
 8002692:	4620      	mov	r0, r4
 8002694:	f7ff fbf7 	bl	8001e86 <_ZN17LoRa_contact_data5clearEv>
        current_stage_.stade_communication = SC_DOWNTIME;
 8002698:	2300      	movs	r3, #0
 800269a:	7523      	strb	r3, [r4, #20]
        past_stage_ = current_stage_;
 800269c:	6808      	ldr	r0, [r1, #0]
 800269e:	61a0      	str	r0, [r4, #24]
        return true;
 80026a0:	2001      	movs	r0, #1
        past_stage_ = current_stage_;
 80026a2:	790b      	ldrb	r3, [r1, #4]
 80026a4:	712b      	strb	r3, [r5, #4]
}
 80026a6:	bd38      	pop	{r3, r4, r5, pc}
    current_stage_.stade_communication = SC_DOWNTIME;
 80026a8:	2300      	movs	r3, #0
 80026aa:	7523      	strb	r3, [r4, #20]
    past_stage_ = current_stage_;
 80026ac:	6808      	ldr	r0, [r1, #0]
 80026ae:	61a0      	str	r0, [r4, #24]
 80026b0:	790a      	ldrb	r2, [r1, #4]
    return false;
 80026b2:	4618      	mov	r0, r3
    past_stage_ = current_stage_;
 80026b4:	712a      	strb	r2, [r5, #4]
    return false;
 80026b6:	e7f6      	b.n	80026a6 <_ZN17LoRa_contact_data11end_contactEv+0x32>

080026b8 <_ZN17LoRa_contact_data16contact_completeEv>:
    current_stage_.stade_communication = SC_COMPLETE;
 80026b8:	2204      	movs	r2, #4
 80026ba:	7502      	strb	r2, [r0, #20]
    past_stage_ = current_stage_;
 80026bc:	4602      	mov	r2, r0
void LoRa_contact_data::contact_complete() {
 80026be:	4603      	mov	r3, r0
    past_stage_ = current_stage_;
 80026c0:	f852 0f13 	ldr.w	r0, [r2, #19]!
 80026c4:	6198      	str	r0, [r3, #24]
 80026c6:	7912      	ldrb	r2, [r2, #4]
    set_LoRa_mode_sleep();
 80026c8:	4618      	mov	r0, r3
    past_stage_ = current_stage_;
 80026ca:	771a      	strb	r2, [r3, #28]
    start_connect_ = false;
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
    set_LoRa_mode_sleep();
 80026d2:	f7ff bfc7 	b.w	8002664 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>

080026d6 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control>:
uint32_t LoRa_contact_data::recip_disconnect(Stage_control& use_stage) {
 80026d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (use_stage.disconnect) {
 80026d8:	790e      	ldrb	r6, [r1, #4]
uint32_t LoRa_contact_data::recip_disconnect(Stage_control& use_stage) {
 80026da:	4605      	mov	r5, r0
    switch (use_stage.disconnect) {
 80026dc:	2e00      	cmp	r6, #0
 80026de:	d14c      	bne.n	800277a <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0xa4>
        switch (module_state_) {
 80026e0:	7c83      	ldrb	r3, [r0, #18]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d004      	beq.n	80026f0 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x1a>
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d006      	beq.n	80026f8 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x22>
 80026ea:	20e7      	movs	r0, #231	; 0xe7
}
 80026ec:	b002      	add	sp, #8
 80026ee:	bd70      	pop	{r4, r5, r6, pc}
            set_LoRa_mode_receive();
 80026f0:	f7ff feea 	bl	80024c8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 80026f4:	4630      	mov	r0, r6
 80026f6:	e7f9      	b.n	80026ec <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x16>
            if(!packet_dont_correct()) {
 80026f8:	4632      	mov	r2, r6
 80026fa:	4631      	mov	r1, r6
 80026fc:	f7ff fdbe 	bl	800227c <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002700:	4604      	mov	r4, r0
 8002702:	bb40      	cbnz	r0, 8002756 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x80>
                if(HAL_GetTick() - time_last_packet_ < time_constraints_.R_disconnect)
 8002704:	f005 f9dc 	bl	8007ac0 <HAL_GetTick>
 8002708:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 800270c:	1ac0      	subs	r0, r0, r3
 800270e:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
 8002712:	4298      	cmp	r0, r3
 8002714:	d204      	bcs.n	8002720 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x4a>
                    set_LoRa_mode_receive();
 8002716:	4628      	mov	r0, r5
 8002718:	f7ff fed6 	bl	80024c8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
                    set_LoRa_mode_send(true);
 800271c:	4620      	mov	r0, r4
 800271e:	e7e5      	b.n	80026ec <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x16>
                    if(!use_past_stage)
 8002720:	7f69      	ldrb	r1, [r5, #29]
 8002722:	f105 0218 	add.w	r2, r5, #24
 8002726:	f105 0313 	add.w	r3, r5, #19
 800272a:	b971      	cbnz	r1, 800274a <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x74>
                        past_stage_ = current_stage_;
 800272c:	6818      	ldr	r0, [r3, #0]
 800272e:	61a8      	str	r0, [r5, #24]
 8002730:	791b      	ldrb	r3, [r3, #4]
 8002732:	7113      	strb	r3, [r2, #4]
                    current_stage_.stade_communication = SC_DOWNTIME;
 8002734:	2400      	movs	r4, #0
                    create_disconnet_packet(true);
 8002736:	2101      	movs	r1, #1
 8002738:	4628      	mov	r0, r5
                    current_stage_.stade_communication = SC_DOWNTIME;
 800273a:	752c      	strb	r4, [r5, #20]
                    create_disconnet_packet(true);
 800273c:	f7ff fd72 	bl	8002224 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 8002740:	2101      	movs	r1, #1
 8002742:	4628      	mov	r0, r5
 8002744:	f7ff ff28 	bl	8002598 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 8002748:	e7e8      	b.n	800271c <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x46>
                        current_stage_ = past_stage_;
 800274a:	69a8      	ldr	r0, [r5, #24]
 800274c:	7912      	ldrb	r2, [r2, #4]
 800274e:	f8c5 0013 	str.w	r0, [r5, #19]
 8002752:	711a      	strb	r2, [r3, #4]
 8002754:	e7ee      	b.n	8002734 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x5e>
                if(check_packet_type(Packet_Type::CONNECTION, {0x08})) {
 8002756:	2308      	movs	r3, #8
 8002758:	4631      	mov	r1, r6
 800275a:	4628      	mov	r0, r5
 800275c:	f10d 0207 	add.w	r2, sp, #7
 8002760:	f88d 3007 	strb.w	r3, [sp, #7]
 8002764:	f7ff fdd2 	bl	800230c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002768:	2800      	cmp	r0, #0
 800276a:	d0bf      	beq.n	80026ec <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x16>
                    sort_num_packet();
 800276c:	4628      	mov	r0, r5
 800276e:	f7ff fe4b 	bl	8002408 <_ZN17LoRa_contact_data15sort_num_packetEv>
                    contact_complete();
 8002772:	4628      	mov	r0, r5
 8002774:	f7ff ffa0 	bl	80026b8 <_ZN17LoRa_contact_data16contact_completeEv>
 8002778:	e7bc      	b.n	80026f4 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x1e>
        error = 230;
 800277a:	20e6      	movs	r0, #230	; 0xe6
 800277c:	e7b6      	b.n	80026ec <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x16>

0800277e <_ZN17LoRa_contact_data14broadcast_sendEb>:
uint16_t LoRa_contact_data::broadcast_send(bool reply) {
 800277e:	b538      	push	{r3, r4, r5, lr}
    if(send_packet_len == 0)
 8002780:	f890 3134 	ldrb.w	r3, [r0, #308]	; 0x134
uint16_t LoRa_contact_data::broadcast_send(bool reply) {
 8002784:	4604      	mov	r4, r0
 8002786:	460d      	mov	r5, r1
    if(send_packet_len == 0)
 8002788:	b1bb      	cbz	r3, 80027ba <_ZN17LoRa_contact_data14broadcast_sendEb+0x3c>
    set_LoRa_mode_sleep();
 800278a:	f7ff ff6b 	bl	8002664 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>
    current_stage_.type_communication = TC_BROADCAST;
 800278e:	2302      	movs	r3, #2
    if(reply)
 8002790:	2d00      	cmp	r5, #0
    current_stage_.type_communication = TC_BROADCAST;
 8002792:	74e3      	strb	r3, [r4, #19]
        current_stage_.stade_communication = SC_BROADCASTING;
 8002794:	bf14      	ite	ne
 8002796:	2308      	movne	r3, #8
 8002798:	2305      	moveq	r3, #5
 800279a:	7523      	strb	r3, [r4, #20]
    past_stage_ = current_stage_;
 800279c:	4623      	mov	r3, r4
 800279e:	f853 0f13 	ldr.w	r0, [r3, #19]!
 80027a2:	61a0      	str	r0, [r4, #24]
 80027a4:	791b      	ldrb	r3, [r3, #4]
    create_data_packet();
 80027a6:	4620      	mov	r0, r4
    past_stage_ = current_stage_;
 80027a8:	7723      	strb	r3, [r4, #28]
    create_data_packet();
 80027aa:	f7ff fc6f 	bl	800208c <_ZN17LoRa_contact_data18create_data_packetEv>
    set_LoRa_mode_send();
 80027ae:	4620      	mov	r0, r4
 80027b0:	2100      	movs	r1, #0
 80027b2:	f7ff fef1 	bl	8002598 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    return 0;
 80027b6:	2000      	movs	r0, #0
}
 80027b8:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 80027ba:	2001      	movs	r0, #1
 80027bc:	e7fc      	b.n	80027b8 <_ZN17LoRa_contact_data14broadcast_sendEb+0x3a>

080027be <_ZN17LoRa_contact_data21broadcast_send_packetEv>:
uint32_t LoRa_contact_data::broadcast_send_packet() {
 80027be:	b538      	push	{r3, r4, r5, lr}
    switch (module_state_) {
 80027c0:	7c83      	ldrb	r3, [r0, #18]
uint32_t LoRa_contact_data::broadcast_send_packet() {
 80027c2:	4604      	mov	r4, r0
    switch (module_state_) {
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d120      	bne.n	800280a <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x4c>
        for(unsigned int i = 0; i < send_flag_len; ++i)
 80027c8:	f890 1136 	ldrb.w	r1, [r0, #310]	; 0x136
 80027cc:	f100 03ac 	add.w	r3, r0, #172	; 0xac
 80027d0:	f06f 00ab 	mvn.w	r0, #171	; 0xab
 80027d4:	1b00      	subs	r0, r0, r4
 80027d6:	18c2      	adds	r2, r0, r3
 80027d8:	4291      	cmp	r1, r2
 80027da:	d919      	bls.n	8002810 <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x52>
            if(send_flag_[i] == true) {
 80027dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027e0:	2a00      	cmp	r2, #0
 80027e2:	d0f8      	beq.n	80027d6 <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x18>
            create_data_packet();
 80027e4:	4620      	mov	r0, r4
 80027e6:	f7ff fc51 	bl	800208c <_ZN17LoRa_contact_data18create_data_packetEv>
            set_LoRa_mode_send();
 80027ea:	2100      	movs	r1, #0
 80027ec:	4620      	mov	r0, r4
 80027ee:	f7ff fed3 	bl	8002598 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 80027f2:	e01a      	b.n	800282a <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x6c>
                if(reciev_packet_len == 0)
 80027f4:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
                set_LoRa_mode_receive();
 80027f8:	4620      	mov	r0, r4
                    current_stage_.stade_communication = SC_PACKET_ACCEPTED;
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	bf0c      	ite	eq
 80027fe:	2306      	moveq	r3, #6
 8002800:	2307      	movne	r3, #7
 8002802:	7523      	strb	r3, [r4, #20]
                set_LoRa_mode_receive();
 8002804:	f7ff fe60 	bl	80024c8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
 8002808:	e00f      	b.n	800282a <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x6c>
        error = 320;
 800280a:	f44f 70a0 	mov.w	r0, #320	; 0x140
}
 800280e:	bd38      	pop	{r3, r4, r5, pc}
            send_packet_len = 0;
 8002810:	2500      	movs	r5, #0
            if(current_stage_.stade_communication == SC_BROADCASTING) {
 8002812:	7d23      	ldrb	r3, [r4, #20]
            send_packet_len = 0;
 8002814:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
            if(current_stage_.stade_communication == SC_BROADCASTING) {
 8002818:	2b05      	cmp	r3, #5
			send_flag_len = 0;
 800281a:	f884 5136 	strb.w	r5, [r4, #310]	; 0x136
            if(current_stage_.stade_communication == SC_BROADCASTING) {
 800281e:	d1e9      	bne.n	80027f4 <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x36>
                current_stage_.stade_communication = SC_COMPLETE;
 8002820:	2304      	movs	r3, #4
                set_LoRa_mode_sleep();
 8002822:	4620      	mov	r0, r4
                current_stage_.stade_communication = SC_COMPLETE;
 8002824:	7523      	strb	r3, [r4, #20]
                set_LoRa_mode_sleep();
 8002826:	f7ff ff1d 	bl	8002664 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>
            set_LoRa_mode_send();
 800282a:	2000      	movs	r0, #0
 800282c:	e7ef      	b.n	800280e <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x50>
	...

08002830 <_ZN17LoRa_contact_data19work_contact_systemEv>:
uint32_t LoRa_contact_data::work_contact_system() {
 8002830:	b530      	push	{r4, r5, lr}
 8002832:	4604      	mov	r4, r0
    if(((in_processing_) || (!lora_init_) || (!lora_begin_) || (current_stage_.stade_communication == SC_DOWNTIME) || (current_stage_.stade_communication == SC_COMPLETE)) && !use_past_stage)
 8002834:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
 8002838:	7f40      	ldrb	r0, [r0, #29]
uint32_t LoRa_contact_data::work_contact_system() {
 800283a:	b085      	sub	sp, #20
    if(((in_processing_) || (!lora_init_) || (!lora_begin_) || (current_stage_.stade_communication == SC_DOWNTIME) || (current_stage_.stade_communication == SC_COMPLETE)) && !use_past_stage)
 800283c:	b93b      	cbnz	r3, 800284e <_ZN17LoRa_contact_data19work_contact_systemEv+0x1e>
 800283e:	7823      	ldrb	r3, [r4, #0]
 8002840:	b12b      	cbz	r3, 800284e <_ZN17LoRa_contact_data19work_contact_systemEv+0x1e>
 8002842:	7863      	ldrb	r3, [r4, #1]
 8002844:	b11b      	cbz	r3, 800284e <_ZN17LoRa_contact_data19work_contact_systemEv+0x1e>
 8002846:	7d23      	ldrb	r3, [r4, #20]
 8002848:	f013 0ffb 	tst.w	r3, #251	; 0xfb
 800284c:	d103      	bne.n	8002856 <_ZN17LoRa_contact_data19work_contact_systemEv+0x26>
 800284e:	2800      	cmp	r0, #0
 8002850:	d146      	bne.n	80028e0 <_ZN17LoRa_contact_data19work_contact_systemEv+0xb0>
}
 8002852:	b005      	add	sp, #20
 8002854:	bd30      	pop	{r4, r5, pc}
    if(!use_past_stage) {
 8002856:	2800      	cmp	r0, #0
 8002858:	d142      	bne.n	80028e0 <_ZN17LoRa_contact_data19work_contact_systemEv+0xb0>
        in_processing_ = true;
 800285a:	2301      	movs	r3, #1
 800285c:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
        if(module_state_ == MS_LoRa_RECIEVE) {
 8002860:	7ca3      	ldrb	r3, [r4, #18]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d119      	bne.n	800289a <_ZN17LoRa_contact_data19work_contact_systemEv+0x6a>
            class LoRa_packet read_packet = LoRa.receiver_packet(0, 0);
 8002866:	4603      	mov	r3, r0
 8002868:	4602      	mov	r2, r0
 800286a:	e9cd 0000 	strd	r0, r0, [sp]
 800286e:	4939      	ldr	r1, [pc, #228]	; (8002954 <_ZN17LoRa_contact_data19work_contact_systemEv+0x124>)
 8002870:	a802      	add	r0, sp, #8
 8002872:	f001 fcc1 	bl	80041f8 <_ZN10LoRa_class15receiver_packetEhmbb>
            if(!((read_packet.get_len() < PACKET_HEADER_SIZE) || (read_packet.get_crc_error()))) {
 8002876:	a802      	add	r0, sp, #8
 8002878:	f001 ffbb 	bl	80047f2 <_ZNK11LoRa_packet7get_lenEv>
 800287c:	2808      	cmp	r0, #8
 800287e:	f104 0520 	add.w	r5, r4, #32
 8002882:	d929      	bls.n	80028d8 <_ZN17LoRa_contact_data19work_contact_systemEv+0xa8>
 8002884:	a802      	add	r0, sp, #8
 8002886:	f001 ffb8 	bl	80047fa <_ZNK11LoRa_packet13get_crc_errorEv>
 800288a:	bb28      	cbnz	r0, 80028d8 <_ZN17LoRa_contact_data19work_contact_systemEv+0xa8>
                last_receive_packet_ = read_packet;
 800288c:	4628      	mov	r0, r5
 800288e:	a902      	add	r1, sp, #8
 8002890:	f001 ffbd 	bl	800480e <_ZN11LoRa_packetaSERKS_>
            class LoRa_packet read_packet = LoRa.receiver_packet(0, 0);
 8002894:	a802      	add	r0, sp, #8
 8002896:	f001 ff75 	bl	8004784 <_ZN11LoRa_packetD1Ev>
        use_stage = &current_stage_;
 800289a:	f104 0113 	add.w	r1, r4, #19
    switch (use_stage->type_communication) {
 800289e:	780b      	ldrb	r3, [r1, #0]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d02a      	beq.n	80028fa <_ZN17LoRa_contact_data19work_contact_systemEv+0xca>
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d03b      	beq.n	8002920 <_ZN17LoRa_contact_data19work_contact_systemEv+0xf0>
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d14c      	bne.n	8002946 <_ZN17LoRa_contact_data19work_contact_systemEv+0x116>
        switch (use_stage->stade_communication) {
 80028ac:	784b      	ldrb	r3, [r1, #1]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d019      	beq.n	80028e6 <_ZN17LoRa_contact_data19work_contact_systemEv+0xb6>
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d01b      	beq.n	80028ee <_ZN17LoRa_contact_data19work_contact_systemEv+0xbe>
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d148      	bne.n	800294c <_ZN17LoRa_contact_data19work_contact_systemEv+0x11c>
            error = init_connection(*use_stage);
 80028ba:	4620      	mov	r0, r4
 80028bc:	f000 f96e 	bl	8002b9c <_ZN17LoRa_contact_data15init_connectionER13Stage_control>
    if(!use_past_stage)
 80028c0:	7f63      	ldrb	r3, [r4, #29]
 80028c2:	b90b      	cbnz	r3, 80028c8 <_ZN17LoRa_contact_data19work_contact_systemEv+0x98>
        in_processing_ = false;
 80028c4:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
    if(error != 0) {
 80028c8:	2800      	cmp	r0, #0
 80028ca:	d0c2      	beq.n	8002852 <_ZN17LoRa_contact_data19work_contact_systemEv+0x22>
        start_connect_ = false;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f884 3137 	strb.w	r3, [r4, #311]	; 0x137
        init_ = false;
 80028d2:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 80028d6:	e7bc      	b.n	8002852 <_ZN17LoRa_contact_data19work_contact_systemEv+0x22>
                last_receive_packet_.clear_packet();
 80028d8:	4628      	mov	r0, r5
 80028da:	f001 ff7f 	bl	80047dc <_ZN11LoRa_packet12clear_packetEv>
 80028de:	e7d9      	b.n	8002894 <_ZN17LoRa_contact_data19work_contact_systemEv+0x64>
        use_stage = &past_stage_;
 80028e0:	f104 0118 	add.w	r1, r4, #24
 80028e4:	e7db      	b.n	800289e <_ZN17LoRa_contact_data19work_contact_systemEv+0x6e>
            error = init_exchange(*use_stage);
 80028e6:	4620      	mov	r0, r4
 80028e8:	f000 fac6 	bl	8002e78 <_ZN17LoRa_contact_data13init_exchangeER13Stage_control>
            break;
 80028ec:	e7e8      	b.n	80028c0 <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
    switch (module_state_) {
 80028ee:	7ca3      	ldrb	r3, [r4, #18]
        error = 131;
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	bf0c      	ite	eq
 80028f4:	2000      	moveq	r0, #0
 80028f6:	2083      	movne	r0, #131	; 0x83
 80028f8:	e7e2      	b.n	80028c0 <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
        switch (use_stage->stade_communication) {
 80028fa:	784b      	ldrb	r3, [r1, #1]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d007      	beq.n	8002910 <_ZN17LoRa_contact_data19work_contact_systemEv+0xe0>
 8002900:	2b03      	cmp	r3, #3
 8002902:	d009      	beq.n	8002918 <_ZN17LoRa_contact_data19work_contact_systemEv+0xe8>
 8002904:	2b01      	cmp	r3, #1
 8002906:	d123      	bne.n	8002950 <_ZN17LoRa_contact_data19work_contact_systemEv+0x120>
            error = recip_connection(*use_stage);
 8002908:	4620      	mov	r0, r4
 800290a:	f000 fb87 	bl	800301c <_ZN17LoRa_contact_data16recip_connectionER13Stage_control>
            break;
 800290e:	e7d7      	b.n	80028c0 <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
            error = recip_exchange(*use_stage);
 8002910:	4620      	mov	r0, r4
 8002912:	f000 fcb3 	bl	800327c <_ZN17LoRa_contact_data14recip_exchangeER13Stage_control>
            break;
 8002916:	e7d3      	b.n	80028c0 <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
            error = recip_disconnect(*use_stage);
 8002918:	4620      	mov	r0, r4
 800291a:	f7ff fedc 	bl	80026d6 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control>
            break;
 800291e:	e7cf      	b.n	80028c0 <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
        switch (use_stage->stade_communication) {
 8002920:	784b      	ldrb	r3, [r1, #1]
 8002922:	2b07      	cmp	r3, #7
 8002924:	d805      	bhi.n	8002932 <_ZN17LoRa_contact_data19work_contact_systemEv+0x102>
 8002926:	2b05      	cmp	r3, #5
 8002928:	d805      	bhi.n	8002936 <_ZN17LoRa_contact_data19work_contact_systemEv+0x106>
 800292a:	d008      	beq.n	800293e <_ZN17LoRa_contact_data19work_contact_systemEv+0x10e>
 800292c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002930:	e7c6      	b.n	80028c0 <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
 8002932:	2b08      	cmp	r3, #8
 8002934:	e7f9      	b.n	800292a <_ZN17LoRa_contact_data19work_contact_systemEv+0xfa>
            error = broadcast_wait_packet();
 8002936:	4620      	mov	r0, r4
 8002938:	f7ff fe09 	bl	800254e <_ZN17LoRa_contact_data21broadcast_wait_packetEv>
            break;
 800293c:	e7c0      	b.n	80028c0 <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
            error = broadcast_send_packet();
 800293e:	4620      	mov	r0, r4
 8002940:	f7ff ff3d 	bl	80027be <_ZN17LoRa_contact_data21broadcast_send_packetEv>
            break;
 8002944:	e7bc      	b.n	80028c0 <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
    switch (use_stage->type_communication) {
 8002946:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800294a:	e7b9      	b.n	80028c0 <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
 800294c:	2064      	movs	r0, #100	; 0x64
 800294e:	e7b7      	b.n	80028c0 <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
 8002950:	20c8      	movs	r0, #200	; 0xc8
 8002952:	e7b5      	b.n	80028c0 <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
 8002954:	20000380 	.word	0x20000380

08002958 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control>:
uint32_t LoRa_contact_data::init_connection_expect(Stage_control& use_stage) {
 8002958:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    switch (module_state_) {
 800295a:	7c86      	ldrb	r6, [r0, #18]
uint32_t LoRa_contact_data::init_connection_expect(Stage_control& use_stage) {
 800295c:	4604      	mov	r4, r0
    switch (module_state_) {
 800295e:	2e01      	cmp	r6, #1
 8002960:	d014      	beq.n	800298c <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x34>
 8002962:	2e02      	cmp	r6, #2
 8002964:	d002      	beq.n	800296c <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x14>
 8002966:	206f      	movs	r0, #111	; 0x6f
}
 8002968:	b004      	add	sp, #16
 800296a:	bd70      	pop	{r4, r5, r6, pc}
        if(!packet_dont_correct()) {
 800296c:	2200      	movs	r2, #0
 800296e:	4611      	mov	r1, r2
 8002970:	f7ff fc84 	bl	800227c <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002974:	4605      	mov	r5, r0
 8002976:	bbc8      	cbnz	r0, 80029ec <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x94>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.I_connect) {
 8002978:	f005 f8a2 	bl	8007ac0 <HAL_GetTick>
 800297c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002980:	1ac0      	subs	r0, r0, r3
 8002982:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8002986:	4298      	cmp	r0, r3
 8002988:	d203      	bcs.n	8002992 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x3a>
                    set_LoRa_mode_receive();
 800298a:	4620      	mov	r0, r4
 800298c:	f7ff fd9c 	bl	80024c8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
 8002990:	e00c      	b.n	80029ac <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x54>
                if(send_packet_amt_ < packet_constraints_.I_connect) {
 8002992:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 8002996:	f894 2165 	ldrb.w	r2, [r4, #357]	; 0x165
 800299a:	429a      	cmp	r2, r3
 800299c:	d908      	bls.n	80029b0 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x58>
                    set_LoRa_mode_send();
 800299e:	4629      	mov	r1, r5
                    ++send_packet_amt_;
 80029a0:	3301      	adds	r3, #1
 80029a2:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                        set_LoRa_mode_send(true);
 80029a6:	4620      	mov	r0, r4
 80029a8:	f7ff fdf6 	bl	8002598 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 80029ac:	2000      	movs	r0, #0
 80029ae:	e7db      	b.n	8002968 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x10>
                    if(!use_past_stage)
 80029b0:	7f61      	ldrb	r1, [r4, #29]
                    send_packet_amt_ = 0;
 80029b2:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                    if(!use_past_stage)
 80029b6:	f104 0218 	add.w	r2, r4, #24
 80029ba:	f104 0313 	add.w	r3, r4, #19
 80029be:	b979      	cbnz	r1, 80029e0 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x88>
                        past_stage_ = current_stage_;
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	61a0      	str	r0, [r4, #24]
 80029c4:	791b      	ldrb	r3, [r3, #4]
 80029c6:	7113      	strb	r3, [r2, #4]
                    current_stage_.stade_communication = SC_DOWNTIME;
 80029c8:	2300      	movs	r3, #0
                    create_disconnet_packet(true);
 80029ca:	2101      	movs	r1, #1
                    current_stage_.stade_communication = SC_DOWNTIME;
 80029cc:	7523      	strb	r3, [r4, #20]
                    create_disconnet_packet(true);
 80029ce:	4620      	mov	r0, r4
 80029d0:	f7ff fc28 	bl	8002224 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 80029d4:	4620      	mov	r0, r4
 80029d6:	2101      	movs	r1, #1
 80029d8:	f7ff fdde 	bl	8002598 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    error = 112;
 80029dc:	2070      	movs	r0, #112	; 0x70
 80029de:	e7c3      	b.n	8002968 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x10>
                        current_stage_ = past_stage_;
 80029e0:	69a0      	ldr	r0, [r4, #24]
 80029e2:	7912      	ldrb	r2, [r2, #4]
 80029e4:	f8c4 0013 	str.w	r0, [r4, #19]
 80029e8:	711a      	strb	r2, [r3, #4]
 80029ea:	e7ed      	b.n	80029c8 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x70>
            if(check_packet_type(Packet_Type::CONNECTION, {0x01})) {
 80029ec:	2501      	movs	r5, #1
 80029ee:	2100      	movs	r1, #0
 80029f0:	4620      	mov	r0, r4
 80029f2:	aa03      	add	r2, sp, #12
 80029f4:	f88d 500c 	strb.w	r5, [sp, #12]
 80029f8:	f7ff fc88 	bl	800230c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 80029fc:	2800      	cmp	r0, #0
 80029fe:	d062      	beq.n	8002ac6 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x16e>
                send_packet_amt_ = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                uint8_t data[2] = {0, 0};
 8002a06:	f8ad 300c 	strh.w	r3, [sp, #12]
                if(amt_packet_ == 0xFF)
 8002a0a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                uint8_t com = 0x01;
 8002a0e:	f88d 500a 	strb.w	r5, [sp, #10]
                    len = 2;
 8002a12:	2bff      	cmp	r3, #255	; 0xff
 8002a14:	bf08      	it	eq
 8002a16:	4635      	moveq	r5, r6
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 8002a18:	f10d 030b 	add.w	r3, sp, #11
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	f10d 020a 	add.w	r2, sp, #10
 8002a22:	ab03      	add	r3, sp, #12
 8002a24:	f104 0120 	add.w	r1, r4, #32
 8002a28:	482c      	ldr	r0, [pc, #176]	; (8002adc <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x184>)
                    len = 2;
 8002a2a:	f88d 500b 	strb.w	r5, [sp, #11]
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 8002a2e:	f003 fa17 	bl	8005e60 <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
                if(data[0] == 0) {
 8002a32:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002a36:	7f61      	ldrb	r1, [r4, #29]
 8002a38:	f104 0218 	add.w	r2, r4, #24
 8002a3c:	f104 0313 	add.w	r3, r4, #19
 8002a40:	bb98      	cbnz	r0, 8002aaa <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x152>
                    if(amt_packet_ == 0xFF) {
 8002a42:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8002a46:	28ff      	cmp	r0, #255	; 0xff
 8002a48:	d11c      	bne.n	8002a84 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x12c>
                        if(!use_past_stage)
 8002a4a:	b9a9      	cbnz	r1, 8002a78 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x120>
                            past_stage_ = current_stage_;
 8002a4c:	6818      	ldr	r0, [r3, #0]
 8002a4e:	61a0      	str	r0, [r4, #24]
 8002a50:	791b      	ldrb	r3, [r3, #4]
 8002a52:	7113      	strb	r3, [r2, #4]
                        current_stage_.stade_communication = SC_EXCHANGE;
 8002a54:	2302      	movs	r3, #2
                        current_stage_.type_communication = TC_RECIPIENT;
 8002a56:	2501      	movs	r5, #1
                        current_stage_.exchange = E_BOARDCAST;
 8002a58:	2100      	movs	r1, #0
                        current_stage_.stade_communication = SC_EXCHANGE;
 8002a5a:	7523      	strb	r3, [r4, #20]
                        expected_amt_packet_ = data[1];
 8002a5c:	f89d 300d 	ldrb.w	r3, [sp, #13]
                        create_connect_packet(0, true); // уже не инициатор
 8002a60:	462a      	mov	r2, r5
 8002a62:	4620      	mov	r0, r4
                        current_stage_.type_communication = TC_RECIPIENT;
 8002a64:	74e5      	strb	r5, [r4, #19]
                        current_stage_.exchange = E_BOARDCAST;
 8002a66:	75a1      	strb	r1, [r4, #22]
                        expected_amt_packet_ = data[1];
 8002a68:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
                        amt_packet_ = 0;
 8002a6c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
                        create_connect_packet(0, true); // уже не инициатор
 8002a70:	f7ff fa8e 	bl	8001f90 <_ZN17LoRa_contact_data21create_connect_packetEhb>
                        set_LoRa_mode_send(true);
 8002a74:	2101      	movs	r1, #1
 8002a76:	e796      	b.n	80029a6 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x4e>
                            current_stage_ = past_stage_;
 8002a78:	69a0      	ldr	r0, [r4, #24]
 8002a7a:	7912      	ldrb	r2, [r2, #4]
 8002a7c:	f8c4 0013 	str.w	r0, [r4, #19]
 8002a80:	711a      	strb	r2, [r3, #4]
 8002a82:	e7e7      	b.n	8002a54 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0xfc>
                        if(!use_past_stage)
 8002a84:	b959      	cbnz	r1, 8002a9e <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x146>
                            past_stage_ = current_stage_;
 8002a86:	6818      	ldr	r0, [r3, #0]
 8002a88:	61a0      	str	r0, [r4, #24]
 8002a8a:	791b      	ldrb	r3, [r3, #4]
 8002a8c:	7113      	strb	r3, [r2, #4]
                        current_stage_.exchange = E_BOARDCAST;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	75a3      	strb	r3, [r4, #22]
                        current_stage_.stade_communication = SC_EXCHANGE;
 8002a92:	2302      	movs	r3, #2
                        create_data_packet();
 8002a94:	4620      	mov	r0, r4
                        current_stage_.stade_communication = SC_EXCHANGE;
 8002a96:	7523      	strb	r3, [r4, #20]
                        create_data_packet();
 8002a98:	f7ff faf8 	bl	800208c <_ZN17LoRa_contact_data18create_data_packetEv>
 8002a9c:	e7ea      	b.n	8002a74 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x11c>
                            current_stage_ = past_stage_;
 8002a9e:	69a0      	ldr	r0, [r4, #24]
 8002aa0:	7912      	ldrb	r2, [r2, #4]
 8002aa2:	f8c4 0013 	str.w	r0, [r4, #19]
 8002aa6:	711a      	strb	r2, [r3, #4]
 8002aa8:	e7f1      	b.n	8002a8e <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x136>
                    if(!use_past_stage)
 8002aaa:	b931      	cbnz	r1, 8002aba <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x162>
                        past_stage_ = current_stage_;
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	61a0      	str	r0, [r4, #24]
 8002ab0:	791b      	ldrb	r3, [r3, #4]
 8002ab2:	7113      	strb	r3, [r2, #4]
                    current_stage_.connection = C_WAIT_RESET;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	7563      	strb	r3, [r4, #21]
 8002ab8:	e767      	b.n	800298a <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x32>
                        current_stage_ = past_stage_;
 8002aba:	69a0      	ldr	r0, [r4, #24]
 8002abc:	7912      	ldrb	r2, [r2, #4]
 8002abe:	f8c4 0013 	str.w	r0, [r4, #19]
 8002ac2:	711a      	strb	r2, [r3, #4]
 8002ac4:	e7f6      	b.n	8002ab4 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x15c>
                if(!use_past_stage) {
 8002ac6:	7f66      	ldrb	r6, [r4, #29]
 8002ac8:	2e00      	cmp	r6, #0
 8002aca:	f47f af5e 	bne.w	800298a <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x32>
                    error = work_contact_system();
 8002ace:	4620      	mov	r0, r4
                    use_past_stage = true;
 8002ad0:	7765      	strb	r5, [r4, #29]
                    error = work_contact_system();
 8002ad2:	f7ff fead 	bl	8002830 <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8002ad6:	7766      	strb	r6, [r4, #29]
    return error;
 8002ad8:	e746      	b.n	8002968 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x10>
 8002ada:	bf00      	nop
 8002adc:	200023c4 	.word	0x200023c4

08002ae0 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control>:
uint32_t LoRa_contact_data::init_connection_wait(Stage_control& use_stage) {
 8002ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (module_state_) {
 8002ae2:	7c85      	ldrb	r5, [r0, #18]
uint32_t LoRa_contact_data::init_connection_wait(Stage_control& use_stage) {
 8002ae4:	4604      	mov	r4, r0
    switch (module_state_) {
 8002ae6:	2d01      	cmp	r5, #1
 8002ae8:	d013      	beq.n	8002b12 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x32>
 8002aea:	2d02      	cmp	r5, #2
 8002aec:	d002      	beq.n	8002af4 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x14>
 8002aee:	2071      	movs	r0, #113	; 0x71
}
 8002af0:	b003      	add	sp, #12
 8002af2:	bd30      	pop	{r4, r5, pc}
        if(!packet_dont_correct()) {
 8002af4:	2200      	movs	r2, #0
 8002af6:	4611      	mov	r1, r2
 8002af8:	f7ff fbc0 	bl	800227c <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002afc:	bb48      	cbnz	r0, 8002b52 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x72>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.I_wait_connect) {
 8002afe:	f004 ffdf 	bl	8007ac0 <HAL_GetTick>
 8002b02:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002b06:	1ac0      	subs	r0, r0, r3
 8002b08:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8002b0c:	4298      	cmp	r0, r3
 8002b0e:	d204      	bcs.n	8002b1a <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x3a>
                set_LoRa_mode_receive();
 8002b10:	4620      	mov	r0, r4
 8002b12:	f7ff fcd9 	bl	80024c8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002b16:	2000      	movs	r0, #0
 8002b18:	e7ea      	b.n	8002af0 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x10>
                if(!use_past_stage)
 8002b1a:	7f61      	ldrb	r1, [r4, #29]
 8002b1c:	f104 0218 	add.w	r2, r4, #24
 8002b20:	f104 0313 	add.w	r3, r4, #19
 8002b24:	b979      	cbnz	r1, 8002b46 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x66>
                    past_stage_ = current_stage_;
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	61a0      	str	r0, [r4, #24]
 8002b2a:	791b      	ldrb	r3, [r3, #4]
 8002b2c:	7113      	strb	r3, [r2, #4]
                current_stage_.stade_communication = SC_DOWNTIME;
 8002b2e:	2300      	movs	r3, #0
                create_disconnet_packet(true);
 8002b30:	2101      	movs	r1, #1
                current_stage_.stade_communication = SC_DOWNTIME;
 8002b32:	7523      	strb	r3, [r4, #20]
                create_disconnet_packet(true);
 8002b34:	4620      	mov	r0, r4
 8002b36:	f7ff fb75 	bl	8002224 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                set_LoRa_mode_send(true);
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	f7ff fd2b 	bl	8002598 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                error = 114;
 8002b42:	2072      	movs	r0, #114	; 0x72
 8002b44:	e7d4      	b.n	8002af0 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x10>
                    current_stage_ = past_stage_;
 8002b46:	69a0      	ldr	r0, [r4, #24]
 8002b48:	7912      	ldrb	r2, [r2, #4]
 8002b4a:	f8c4 0013 	str.w	r0, [r4, #19]
 8002b4e:	711a      	strb	r2, [r3, #4]
 8002b50:	e7ed      	b.n	8002b2e <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x4e>
            if(check_packet_type(Packet_Type::CONNECTION, {0x02})) {
 8002b52:	2100      	movs	r1, #0
 8002b54:	4620      	mov	r0, r4
 8002b56:	f10d 0207 	add.w	r2, sp, #7
 8002b5a:	f88d 5007 	strb.w	r5, [sp, #7]
 8002b5e:	f7ff fbd5 	bl	800230c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002b62:	7f65      	ldrb	r5, [r4, #29]
 8002b64:	b188      	cbz	r0, 8002b8a <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0xaa>
                if(!use_past_stage)
 8002b66:	f104 0218 	add.w	r2, r4, #24
 8002b6a:	f104 0313 	add.w	r3, r4, #19
 8002b6e:	b935      	cbnz	r5, 8002b7e <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x9e>
                    past_stage_ = current_stage_;
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	61a0      	str	r0, [r4, #24]
 8002b74:	791b      	ldrb	r3, [r3, #4]
 8002b76:	7113      	strb	r3, [r2, #4]
                current_stage_.connection = C_EXPECTATION; // ??? (?) -----
 8002b78:	2000      	movs	r0, #0
 8002b7a:	7560      	strb	r0, [r4, #21]
 8002b7c:	e7b8      	b.n	8002af0 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x10>
                    current_stage_ = past_stage_;
 8002b7e:	69a0      	ldr	r0, [r4, #24]
 8002b80:	7912      	ldrb	r2, [r2, #4]
 8002b82:	f8c4 0013 	str.w	r0, [r4, #19]
 8002b86:	711a      	strb	r2, [r3, #4]
 8002b88:	e7f6      	b.n	8002b78 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x98>
                if(!use_past_stage) {
 8002b8a:	2d00      	cmp	r5, #0
 8002b8c:	d1c0      	bne.n	8002b10 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x30>
                    use_past_stage = true;
 8002b8e:	2301      	movs	r3, #1
                    error = work_contact_system();
 8002b90:	4620      	mov	r0, r4
                    use_past_stage = true;
 8002b92:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 8002b94:	f7ff fe4c 	bl	8002830 <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8002b98:	7765      	strb	r5, [r4, #29]
    return error;
 8002b9a:	e7a9      	b.n	8002af0 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x10>

08002b9c <_ZN17LoRa_contact_data15init_connectionER13Stage_control>:
    switch (use_stage.connection) {
 8002b9c:	788b      	ldrb	r3, [r1, #2]
 8002b9e:	b11b      	cbz	r3, 8002ba8 <_ZN17LoRa_contact_data15init_connectionER13Stage_control+0xc>
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d003      	beq.n	8002bac <_ZN17LoRa_contact_data15init_connectionER13Stage_control+0x10>
}
 8002ba4:	206e      	movs	r0, #110	; 0x6e
 8002ba6:	4770      	bx	lr
        error = init_connection_expect(use_stage);
 8002ba8:	f7ff bed6 	b.w	8002958 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control>
        error = init_connection_wait(use_stage);
 8002bac:	f7ff bf98 	b.w	8002ae0 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control>

08002bb0 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control>:
uint32_t LoRa_contact_data::init_exchange_wait_confirmation(Stage_control& use_stage) {
 8002bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch (module_state_) {
 8002bb2:	7c83      	ldrb	r3, [r0, #18]
uint32_t LoRa_contact_data::init_exchange_wait_confirmation(Stage_control& use_stage) {
 8002bb4:	4604      	mov	r4, r0
    switch (module_state_) {
 8002bb6:	2b01      	cmp	r3, #1
uint32_t LoRa_contact_data::init_exchange_wait_confirmation(Stage_control& use_stage) {
 8002bb8:	b085      	sub	sp, #20
    switch (module_state_) {
 8002bba:	d014      	beq.n	8002be6 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x36>
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d002      	beq.n	8002bc6 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x16>
 8002bc0:	207a      	movs	r0, #122	; 0x7a
}
 8002bc2:	b005      	add	sp, #20
 8002bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(!packet_dont_correct()) {
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	4611      	mov	r1, r2
 8002bca:	f7ff fb57 	bl	800227c <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002bce:	4605      	mov	r5, r0
 8002bd0:	bbb0      	cbnz	r0, 8002c40 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x90>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.I_amt_pack) {
 8002bd2:	f004 ff75 	bl	8007ac0 <HAL_GetTick>
 8002bd6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002bda:	1ac0      	subs	r0, r0, r3
 8002bdc:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 8002be0:	4298      	cmp	r0, r3
 8002be2:	d204      	bcs.n	8002bee <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x3e>
                set_LoRa_mode_receive();
 8002be4:	4620      	mov	r0, r4
 8002be6:	f7ff fc6f 	bl	80024c8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002bea:	2000      	movs	r0, #0
 8002bec:	e7e9      	b.n	8002bc2 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x12>
                if(send_packet_amt_ < packet_constraints_.I_amt_pack) {
 8002bee:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 8002bf2:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d904      	bls.n	8002c04 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x54>
                    ++send_packet_amt_;
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    set_LoRa_mode_send();
 8002c00:	2100      	movs	r1, #0
 8002c02:	e04a      	b.n	8002c9a <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0xea>
                    if(!use_past_stage)
 8002c04:	7f61      	ldrb	r1, [r4, #29]
                    send_packet_amt_ = 0;
 8002c06:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                    if(!use_past_stage)
 8002c0a:	f104 0218 	add.w	r2, r4, #24
 8002c0e:	f104 0313 	add.w	r3, r4, #19
 8002c12:	b979      	cbnz	r1, 8002c34 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x84>
                        past_stage_ = current_stage_;
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	61a0      	str	r0, [r4, #24]
 8002c18:	791b      	ldrb	r3, [r3, #4]
 8002c1a:	7113      	strb	r3, [r2, #4]
                    current_stage_.stade_communication = SC_DOWNTIME;
 8002c1c:	2300      	movs	r3, #0
                    create_disconnet_packet(true);
 8002c1e:	2101      	movs	r1, #1
                    current_stage_.stade_communication = SC_DOWNTIME;
 8002c20:	7523      	strb	r3, [r4, #20]
                    create_disconnet_packet(true);
 8002c22:	4620      	mov	r0, r4
 8002c24:	f7ff fafe 	bl	8002224 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 8002c28:	4620      	mov	r0, r4
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	f7ff fcb4 	bl	8002598 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    error = 123;
 8002c30:	207b      	movs	r0, #123	; 0x7b
 8002c32:	e7c6      	b.n	8002bc2 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x12>
                        current_stage_ = past_stage_;
 8002c34:	69a0      	ldr	r0, [r4, #24]
 8002c36:	7912      	ldrb	r2, [r2, #4]
 8002c38:	f8c4 0013 	str.w	r0, [r4, #19]
 8002c3c:	711a      	strb	r2, [r3, #4]
 8002c3e:	e7ed      	b.n	8002c1c <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x6c>
            if(check_packet_type(Packet_Type::CONNECTION, {0x04})) {
 8002c40:	2604      	movs	r6, #4
 8002c42:	f10d 070f 	add.w	r7, sp, #15
 8002c46:	463a      	mov	r2, r7
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	f88d 600f 	strb.w	r6, [sp, #15]
 8002c50:	f7ff fb5c 	bl	800230c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002c54:	2800      	cmp	r0, #0
 8002c56:	d03a      	beq.n	8002cce <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x11e>
                send_packet_amt_ = 0;
 8002c58:	2500      	movs	r5, #0
                uint8_t com = 0x04;
 8002c5a:	f88d 600e 	strb.w	r6, [sp, #14]
                uint8_t len = 1;
 8002c5e:	2601      	movs	r6, #1
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 8002c60:	ab03      	add	r3, sp, #12
 8002c62:	f10d 020e 	add.w	r2, sp, #14
 8002c66:	481f      	ldr	r0, [pc, #124]	; (8002ce4 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x134>)
                send_packet_amt_ = 0;
 8002c68:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 8002c6c:	9700      	str	r7, [sp, #0]
 8002c6e:	f104 0120 	add.w	r1, r4, #32
                uint8_t data[1] = {0};
 8002c72:	f88d 500c 	strb.w	r5, [sp, #12]
                uint8_t len = 1;
 8002c76:	f88d 600f 	strb.w	r6, [sp, #15]
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 8002c7a:	f003 f8f1 	bl	8005e60 <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
                if(data[0] == amt_packet_) {
 8002c7e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8002c82:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d10b      	bne.n	8002ca2 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0xf2>
                    contact_complete();
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	f7ff fd14 	bl	80026b8 <_ZN17LoRa_contact_data16contact_completeEv>
                    create_disconnet_packet();
 8002c90:	4629      	mov	r1, r5
 8002c92:	4620      	mov	r0, r4
 8002c94:	f7ff fac6 	bl	8002224 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 8002c98:	4631      	mov	r1, r6
                    set_LoRa_mode_send();
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	f7ff fc7c 	bl	8002598 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 8002ca0:	e7a3      	b.n	8002bea <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x3a>
                    if(!use_past_stage)
 8002ca2:	7f61      	ldrb	r1, [r4, #29]
 8002ca4:	f104 0218 	add.w	r2, r4, #24
 8002ca8:	f104 0313 	add.w	r3, r4, #19
 8002cac:	b949      	cbnz	r1, 8002cc2 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x112>
                        past_stage_ = current_stage_;
 8002cae:	6818      	ldr	r0, [r3, #0]
 8002cb0:	61a0      	str	r0, [r4, #24]
 8002cb2:	791b      	ldrb	r3, [r3, #4]
 8002cb4:	7113      	strb	r3, [r2, #4]
                    current_stage_.exchange = E_WAITING_NUMBERS;
 8002cb6:	2302      	movs	r3, #2
                    create_number_packet();
 8002cb8:	4620      	mov	r0, r4
                    current_stage_.exchange = E_WAITING_NUMBERS;
 8002cba:	75a3      	strb	r3, [r4, #22]
                    create_number_packet();
 8002cbc:	f7ff fa3e 	bl	800213c <_ZN17LoRa_contact_data20create_number_packetEv>
 8002cc0:	e79e      	b.n	8002c00 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x50>
                        current_stage_ = past_stage_;
 8002cc2:	69a0      	ldr	r0, [r4, #24]
 8002cc4:	7912      	ldrb	r2, [r2, #4]
 8002cc6:	f8c4 0013 	str.w	r0, [r4, #19]
 8002cca:	711a      	strb	r2, [r3, #4]
 8002ccc:	e7f3      	b.n	8002cb6 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x106>
                if(!use_past_stage) {
 8002cce:	7f65      	ldrb	r5, [r4, #29]
 8002cd0:	2d00      	cmp	r5, #0
 8002cd2:	d187      	bne.n	8002be4 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x34>
                    use_past_stage = true;
 8002cd4:	2301      	movs	r3, #1
                    error = work_contact_system();
 8002cd6:	4620      	mov	r0, r4
                    use_past_stage = true;
 8002cd8:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 8002cda:	f7ff fda9 	bl	8002830 <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8002cde:	7765      	strb	r5, [r4, #29]
    return error;
 8002ce0:	e76f      	b.n	8002bc2 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x12>
 8002ce2:	bf00      	nop
 8002ce4:	200023c4 	.word	0x200023c4

08002ce8 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control>:
uint32_t LoRa_contact_data::init_exchange_wait_numbers(Stage_control& use_stage) {
 8002ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch (module_state_) {
 8002cea:	7c83      	ldrb	r3, [r0, #18]
uint32_t LoRa_contact_data::init_exchange_wait_numbers(Stage_control& use_stage) {
 8002cec:	4604      	mov	r4, r0
    switch (module_state_) {
 8002cee:	2b01      	cmp	r3, #1
uint32_t LoRa_contact_data::init_exchange_wait_numbers(Stage_control& use_stage) {
 8002cf0:	b08d      	sub	sp, #52	; 0x34
    switch (module_state_) {
 8002cf2:	d014      	beq.n	8002d1e <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x36>
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d002      	beq.n	8002cfe <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x16>
 8002cf8:	207c      	movs	r0, #124	; 0x7c
}
 8002cfa:	b00d      	add	sp, #52	; 0x34
 8002cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(!packet_dont_correct()) {
 8002cfe:	2200      	movs	r2, #0
 8002d00:	4611      	mov	r1, r2
 8002d02:	f7ff fabb 	bl	800227c <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002d06:	4605      	mov	r5, r0
 8002d08:	bbc8      	cbnz	r0, 8002d7e <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x96>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.I_num_pack) {
 8002d0a:	f004 fed9 	bl	8007ac0 <HAL_GetTick>
 8002d0e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002d12:	1ac0      	subs	r0, r0, r3
 8002d14:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8002d18:	4298      	cmp	r0, r3
 8002d1a:	d204      	bcs.n	8002d26 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x3e>
                set_LoRa_mode_receive();
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	f7ff fbd3 	bl	80024c8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002d22:	2000      	movs	r0, #0
 8002d24:	e7e9      	b.n	8002cfa <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x12>
                if(send_packet_amt_ < packet_constraints_.I_num_pack) {
 8002d26:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 8002d2a:	f894 2167 	ldrb.w	r2, [r4, #359]	; 0x167
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d907      	bls.n	8002d42 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x5a>
                    set_LoRa_mode_send();
 8002d32:	4629      	mov	r1, r5
                    ++send_packet_amt_;
 8002d34:	3301      	adds	r3, #1
 8002d36:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    set_LoRa_mode_send(true);
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	f7ff fc2c 	bl	8002598 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 8002d40:	e7ef      	b.n	8002d22 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x3a>
                    if(!use_past_stage)
 8002d42:	7f61      	ldrb	r1, [r4, #29]
                    send_packet_amt_ = 0;
 8002d44:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                    if(!use_past_stage)
 8002d48:	f104 0218 	add.w	r2, r4, #24
 8002d4c:	f104 0313 	add.w	r3, r4, #19
 8002d50:	b979      	cbnz	r1, 8002d72 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x8a>
                        past_stage_ = current_stage_;
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	61a0      	str	r0, [r4, #24]
 8002d56:	791b      	ldrb	r3, [r3, #4]
 8002d58:	7113      	strb	r3, [r2, #4]
                    current_stage_.stade_communication = SC_DOWNTIME;
 8002d5a:	2300      	movs	r3, #0
                    create_disconnet_packet(true);
 8002d5c:	2101      	movs	r1, #1
                    current_stage_.stade_communication = SC_DOWNTIME;
 8002d5e:	7523      	strb	r3, [r4, #20]
                    create_disconnet_packet(true);
 8002d60:	4620      	mov	r0, r4
 8002d62:	f7ff fa5f 	bl	8002224 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 8002d66:	4620      	mov	r0, r4
 8002d68:	2101      	movs	r1, #1
 8002d6a:	f7ff fc15 	bl	8002598 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    error = 125;
 8002d6e:	207d      	movs	r0, #125	; 0x7d
 8002d70:	e7c3      	b.n	8002cfa <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x12>
                        current_stage_ = past_stage_;
 8002d72:	69a0      	ldr	r0, [r4, #24]
 8002d74:	7912      	ldrb	r2, [r2, #4]
 8002d76:	f8c4 0013 	str.w	r0, [r4, #19]
 8002d7a:	711a      	strb	r2, [r3, #4]
 8002d7c:	e7ed      	b.n	8002d5a <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x72>
            if(check_packet_type(Packet_Type::CONNECTION, {0x06})) {
 8002d7e:	2306      	movs	r3, #6
 8002d80:	ae04      	add	r6, sp, #16
 8002d82:	4632      	mov	r2, r6
 8002d84:	2100      	movs	r1, #0
 8002d86:	4620      	mov	r0, r4
 8002d88:	f88d 3010 	strb.w	r3, [sp, #16]
 8002d8c:	f7ff fabe 	bl	800230c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002d90:	7f65      	ldrb	r5, [r4, #29]
 8002d92:	2800      	cmp	r0, #0
 8002d94:	d064      	beq.n	8002e60 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x178>
                if(!use_past_stage)
 8002d96:	f104 0218 	add.w	r2, r4, #24
 8002d9a:	f104 0313 	add.w	r3, r4, #19
 8002d9e:	2d00      	cmp	r5, #0
 8002da0:	d13b      	bne.n	8002e1a <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x132>
                    past_stage_ = current_stage_;
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	61a0      	str	r0, [r4, #24]
 8002da6:	791b      	ldrb	r3, [r3, #4]
 8002da8:	7113      	strb	r3, [r2, #4]
                current_stage_.exchange = E_BOARDCAST;
 8002daa:	2300      	movs	r3, #0
                packet_connection.get_size_by_packet(last_receive_packet_, size);
 8002dac:	f104 0720 	add.w	r7, r4, #32
 8002db0:	4639      	mov	r1, r7
 8002db2:	4830      	ldr	r0, [pc, #192]	; (8002e74 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x18c>)
                current_stage_.exchange = E_BOARDCAST;
 8002db4:	75a3      	strb	r3, [r4, #22]
                send_packet_amt_ = 0;
 8002db6:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                packet_connection.get_size_by_packet(last_receive_packet_, size);
 8002dba:	f10d 020d 	add.w	r2, sp, #13
                uint8_t size = 0;
 8002dbe:	f88d 300d 	strb.w	r3, [sp, #13]
                packet_connection.get_size_by_packet(last_receive_packet_, size);
 8002dc2:	f003 f861 	bl	8005e88 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh>
                if(size != 0)
 8002dc6:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002dca:	b108      	cbz	r0, 8002dd0 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0xe8>
                    data = new uint8_t[size];
 8002dcc:	f008 f8c3 	bl	800af56 <_Znaj>
                uint8_t com = 0xFF;
 8002dd0:	23ff      	movs	r3, #255	; 0xff
 8002dd2:	f88d 300e 	strb.w	r3, [sp, #14]
                uint8_t len = 0xFF;
 8002dd6:	f88d 300f 	strb.w	r3, [sp, #15]
                packet_connection.get_packet_data(last_receive_packet_, &com, data, &len);
 8002dda:	f10d 030f 	add.w	r3, sp, #15
 8002dde:	9300      	str	r3, [sp, #0]
                uint8_t *data = nullptr;
 8002de0:	4605      	mov	r5, r0
                packet_connection.get_packet_data(last_receive_packet_, &com, data, &len);
 8002de2:	4603      	mov	r3, r0
 8002de4:	4639      	mov	r1, r7
 8002de6:	4823      	ldr	r0, [pc, #140]	; (8002e74 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x18c>)
 8002de8:	f10d 020e 	add.w	r2, sp, #14
 8002dec:	f003 f838 	bl	8005e60 <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
                if (com != 0x06) {
 8002df0:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002df4:	2b06      	cmp	r3, #6
 8002df6:	d116      	bne.n	8002e26 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x13e>
					for(int i = 0; i < len/2; ++i) {
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f89d 200f 	ldrb.w	r2, [sp, #15]
						pack_num[pack_num_len++] = (((uint16_t)data[i*2]) << 8) | (data[i*2+1]);
 8002dfe:	1c6f      	adds	r7, r5, #1
					for(int i = 0; i < len/2; ++i) {
 8002e00:	0852      	lsrs	r2, r2, #1
 8002e02:	429a      	cmp	r2, r3
 8002e04:	dd1f      	ble.n	8002e46 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x15e>
						pack_num[pack_num_len++] = (((uint16_t)data[i*2]) << 8) | (data[i*2+1]);
 8002e06:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
 8002e0a:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
 8002e0e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002e12:	f826 1013 	strh.w	r1, [r6, r3, lsl #1]
					for(int i = 0; i < len/2; ++i) {
 8002e16:	3301      	adds	r3, #1
 8002e18:	e7f3      	b.n	8002e02 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x11a>
                    current_stage_ = past_stage_;
 8002e1a:	69a0      	ldr	r0, [r4, #24]
 8002e1c:	7912      	ldrb	r2, [r2, #4]
 8002e1e:	f8c4 0013 	str.w	r0, [r4, #19]
 8002e22:	711a      	strb	r2, [r3, #4]
 8002e24:	e7c1      	b.n	8002daa <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0xc2>
                    if(data != nullptr)
 8002e26:	b115      	cbz	r5, 8002e2e <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x146>
                        delete[] data;
 8002e28:	4628      	mov	r0, r5
 8002e2a:	f008 f881 	bl	800af30 <_ZdaPv>
                    current_stage_.stade_communication = SC_DOWNTIME;
 8002e2e:	2300      	movs	r3, #0
                    create_disconnet_packet(true);
 8002e30:	2101      	movs	r1, #1
                    current_stage_.stade_communication = SC_DOWNTIME;
 8002e32:	7523      	strb	r3, [r4, #20]
                    create_disconnet_packet(true);
 8002e34:	4620      	mov	r0, r4
 8002e36:	f7ff f9f5 	bl	8002224 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	f7ff fbab 	bl	8002598 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    error = 126;
 8002e42:	207e      	movs	r0, #126	; 0x7e
 8002e44:	e759      	b.n	8002cfa <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x12>
                    pop_num_packet(pack_num, pack_num_len);
 8002e46:	4631      	mov	r1, r6
 8002e48:	4620      	mov	r0, r4
 8002e4a:	f7ff fa9b 	bl	8002384 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh>
                    if(data != nullptr)
 8002e4e:	b115      	cbz	r5, 8002e56 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x16e>
                        delete[] data;
 8002e50:	4628      	mov	r0, r5
 8002e52:	f008 f86d 	bl	800af30 <_ZdaPv>
                    create_data_packet();
 8002e56:	4620      	mov	r0, r4
 8002e58:	f7ff f918 	bl	800208c <_ZN17LoRa_contact_data18create_data_packetEv>
                    set_LoRa_mode_send(true);
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	e76c      	b.n	8002d3a <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x52>
                if(!use_past_stage) {
 8002e60:	2d00      	cmp	r5, #0
 8002e62:	f47f af5b 	bne.w	8002d1c <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x34>
                    use_past_stage = true;
 8002e66:	2301      	movs	r3, #1
                    error = work_contact_system();
 8002e68:	4620      	mov	r0, r4
                    use_past_stage = true;
 8002e6a:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 8002e6c:	f7ff fce0 	bl	8002830 <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8002e70:	7765      	strb	r5, [r4, #29]
    return error;
 8002e72:	e742      	b.n	8002cfa <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x12>
 8002e74:	200023c4 	.word	0x200023c4

08002e78 <_ZN17LoRa_contact_data13init_exchangeER13Stage_control>:
    switch (use_stage.exchange) {
 8002e78:	78cb      	ldrb	r3, [r1, #3]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d004      	beq.n	8002e88 <_ZN17LoRa_contact_data13init_exchangeER13Stage_control+0x10>
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d004      	beq.n	8002e8c <_ZN17LoRa_contact_data13init_exchangeER13Stage_control+0x14>
 8002e82:	b92b      	cbnz	r3, 8002e90 <_ZN17LoRa_contact_data13init_exchangeER13Stage_control+0x18>
        error = init_exchange_boardcast(use_stage);
 8002e84:	f7ff bbb8 	b.w	80025f8 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control>
        error = init_exchange_wait_confirmation(use_stage);
 8002e88:	f7ff be92 	b.w	8002bb0 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control>
        error = init_exchange_wait_numbers(use_stage);
 8002e8c:	f7ff bf2c 	b.w	8002ce8 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control>
}
 8002e90:	2078      	movs	r0, #120	; 0x78
 8002e92:	4770      	bx	lr

08002e94 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control>:
uint32_t LoRa_contact_data::recip_connection_wait_request(Stage_control& use_stage) {
 8002e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    switch (module_state_) {
 8002e98:	7c83      	ldrb	r3, [r0, #18]
uint32_t LoRa_contact_data::recip_connection_wait_request(Stage_control& use_stage) {
 8002e9a:	4604      	mov	r4, r0
    switch (module_state_) {
 8002e9c:	2b01      	cmp	r3, #1
uint32_t LoRa_contact_data::recip_connection_wait_request(Stage_control& use_stage) {
 8002e9e:	b085      	sub	sp, #20
    switch (module_state_) {
 8002ea0:	d01f      	beq.n	8002ee2 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x4e>
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d003      	beq.n	8002eae <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1a>
 8002ea6:	20d4      	movs	r0, #212	; 0xd4
}
 8002ea8:	b005      	add	sp, #20
 8002eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(!packet_dont_correct(true)) {
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	f7ff f9e3 	bl	800227c <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002eb6:	2800      	cmp	r0, #0
 8002eb8:	d13b      	bne.n	8002f32 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x9e>
            if(!packet_dont_correct(true, true)) {
 8002eba:	2201      	movs	r2, #1
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	f7ff f9dc 	bl	800227c <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002ec4:	4605      	mov	r5, r0
 8002ec6:	b958      	cbnz	r0, 8002ee0 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x4c>
                if (send_wait_reset_packet_)
 8002ec8:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
 8002ecc:	b143      	cbz	r3, 8002ee0 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x4c>
                    if(HAL_GetTick() - time_last_packet_ < time_constraints_.R_connect) {
 8002ece:	f004 fdf7 	bl	8007ac0 <HAL_GetTick>
 8002ed2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002ed6:	1ac0      	subs	r0, r0, r3
 8002ed8:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8002edc:	4298      	cmp	r0, r3
 8002ede:	d204      	bcs.n	8002eea <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x56>
                        set_LoRa_mode_receive();
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	f7ff faf1 	bl	80024c8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	e7de      	b.n	8002ea8 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x14>
                        if(send_packet_amt_ < packet_constraints_.R_wait_connect) {
 8002eea:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 8002eee:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d907      	bls.n	8002f06 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x72>
                            ++send_packet_amt_;
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    set_LoRa_mode_send();
 8002efc:	4629      	mov	r1, r5
 8002efe:	4620      	mov	r0, r4
 8002f00:	f7ff fb4a 	bl	8002598 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 8002f04:	e7ef      	b.n	8002ee6 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x52>
                            if(!use_past_stage)
 8002f06:	7f61      	ldrb	r1, [r4, #29]
                            send_packet_amt_ = 0;
 8002f08:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                            if(!use_past_stage)
 8002f0c:	f104 0218 	add.w	r2, r4, #24
 8002f10:	f104 0313 	add.w	r3, r4, #19
 8002f14:	b939      	cbnz	r1, 8002f26 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x92>
                                past_stage_ = current_stage_;
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	61a0      	str	r0, [r4, #24]
 8002f1a:	791b      	ldrb	r3, [r3, #4]
 8002f1c:	7113      	strb	r3, [r2, #4]
                            current_stage_.connection = C_QUEUE_CHECK;
 8002f1e:	2300      	movs	r3, #0
                            error = 213;
 8002f20:	20d5      	movs	r0, #213	; 0xd5
                            current_stage_.connection = C_QUEUE_CHECK;
 8002f22:	7563      	strb	r3, [r4, #21]
 8002f24:	e7c0      	b.n	8002ea8 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x14>
                                current_stage_ = past_stage_;
 8002f26:	69a0      	ldr	r0, [r4, #24]
 8002f28:	7912      	ldrb	r2, [r2, #4]
 8002f2a:	f8c4 0013 	str.w	r0, [r4, #19]
 8002f2e:	711a      	strb	r2, [r3, #4]
 8002f30:	e7f5      	b.n	8002f1e <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x8a>
            if(check_packet_type(Packet_Type::CONNECTION, {0x00})) {
 8002f32:	2500      	movs	r5, #0
 8002f34:	f10d 060f 	add.w	r6, sp, #15
 8002f38:	4632      	mov	r2, r6
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	f88d 500f 	strb.w	r5, [sp, #15]
 8002f42:	f7ff f9e3 	bl	800230c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002f46:	2800      	cmp	r0, #0
 8002f48:	d059      	beq.n	8002ffe <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x16a>
                uint8_t len = 1;
 8002f4a:	f04f 0801 	mov.w	r8, #1
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 8002f4e:	f104 0920 	add.w	r9, r4, #32
 8002f52:	9600      	str	r6, [sp, #0]
 8002f54:	ab03      	add	r3, sp, #12
 8002f56:	4649      	mov	r1, r9
 8002f58:	482e      	ldr	r0, [pc, #184]	; (8003014 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x180>)
                send_packet_amt_ = 0;
 8002f5a:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                send_wait_reset_packet_ = false;
 8002f5e:	f884 5139 	strb.w	r5, [r4, #313]	; 0x139
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 8002f62:	f10d 020e 	add.w	r2, sp, #14
                uint8_t data[1] = {0};
 8002f66:	f88d 500c 	strb.w	r5, [sp, #12]
                uint8_t com = 0x00;
 8002f6a:	f88d 500e 	strb.w	r5, [sp, #14]
                uint8_t len = 1;
 8002f6e:	f88d 800f 	strb.w	r8, [sp, #15]
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 8002f72:	f002 ff75 	bl	8005e60 <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
                if(data[0] == 0xFF) {
 8002f76:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002f7a:	f104 0718 	add.w	r7, r4, #24
 8002f7e:	2bff      	cmp	r3, #255	; 0xff
 8002f80:	f104 0613 	add.w	r6, r4, #19
 8002f84:	d121      	bne.n	8002fca <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x136>
                    connect_adr_ = packet_analyzer.get_sour_adr(last_receive_packet_); // (?) -----
 8002f86:	4649      	mov	r1, r9
 8002f88:	4823      	ldr	r0, [pc, #140]	; (8003018 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x184>)
					start_connect_ = true;
 8002f8a:	f884 8137 	strb.w	r8, [r4, #311]	; 0x137
                    connect_adr_ = packet_analyzer.get_sour_adr(last_receive_packet_); // (?) -----
 8002f8e:	f002 fd7f 	bl	8005a90 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>
                    create_connect_packet(send_packet_len, true);
 8002f92:	4642      	mov	r2, r8
 8002f94:	f894 1134 	ldrb.w	r1, [r4, #308]	; 0x134
                    connect_adr_ = packet_analyzer.get_sour_adr(last_receive_packet_); // (?) -----
 8002f98:	60a0      	str	r0, [r4, #8]
                    create_connect_packet(send_packet_len, true);
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	f7fe fff8 	bl	8001f90 <_ZN17LoRa_contact_data21create_connect_packetEhb>
                    set_LoRa_mode_send();
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	f7ff faf8 	bl	8002598 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    if(!use_past_stage)
 8002fa8:	7f63      	ldrb	r3, [r4, #29]
 8002faa:	b943      	cbnz	r3, 8002fbe <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x12a>
                        past_stage_ = current_stage_;
 8002fac:	6830      	ldr	r0, [r6, #0]
 8002fae:	61a0      	str	r0, [r4, #24]
 8002fb0:	7933      	ldrb	r3, [r6, #4]
 8002fb2:	713b      	strb	r3, [r7, #4]
                    current_stage_.type_communication = TC_INITIATOR;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	74e3      	strb	r3, [r4, #19]
                    current_stage_.stade_communication = SC_CONNECTION;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	82a3      	strh	r3, [r4, #20]
 8002fbc:	e793      	b.n	8002ee6 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x52>
                        current_stage_ = past_stage_;
 8002fbe:	69a0      	ldr	r0, [r4, #24]
 8002fc0:	793b      	ldrb	r3, [r7, #4]
 8002fc2:	f8c4 0013 	str.w	r0, [r4, #19]
 8002fc6:	7133      	strb	r3, [r6, #4]
 8002fc8:	e7f4      	b.n	8002fb4 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x120>
                    if(!use_past_stage)
 8002fca:	7f62      	ldrb	r2, [r4, #29]
 8002fcc:	b98a      	cbnz	r2, 8002ff2 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x15e>
                        past_stage_ = current_stage_;
 8002fce:	6830      	ldr	r0, [r6, #0]
 8002fd0:	61a0      	str	r0, [r4, #24]
 8002fd2:	7932      	ldrb	r2, [r6, #4]
 8002fd4:	713a      	strb	r2, [r7, #4]
                    current_stage_.exchange = E_EXPECTATION;
 8002fd6:	2500      	movs	r5, #0
                    current_stage_.stade_communication = SC_EXCHANGE;
 8002fd8:	2202      	movs	r2, #2
                    create_connect_packet();
 8002fda:	4629      	mov	r1, r5
                    current_stage_.stade_communication = SC_EXCHANGE;
 8002fdc:	7522      	strb	r2, [r4, #20]
                    create_connect_packet();
 8002fde:	4620      	mov	r0, r4
 8002fe0:	462a      	mov	r2, r5
                    current_stage_.exchange = E_EXPECTATION;
 8002fe2:	75a5      	strb	r5, [r4, #22]
                    expected_amt_packet_ = data[0];
 8002fe4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
                    amt_packet_ = 0;
 8002fe8:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
                    create_connect_packet();
 8002fec:	f7fe ffd0 	bl	8001f90 <_ZN17LoRa_contact_data21create_connect_packetEhb>
 8002ff0:	e784      	b.n	8002efc <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x68>
                        current_stage_ = past_stage_;
 8002ff2:	69a0      	ldr	r0, [r4, #24]
 8002ff4:	793a      	ldrb	r2, [r7, #4]
 8002ff6:	f8c4 0013 	str.w	r0, [r4, #19]
 8002ffa:	7132      	strb	r2, [r6, #4]
 8002ffc:	e7eb      	b.n	8002fd6 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x142>
                if(!use_past_stage) {
 8002ffe:	7f65      	ldrb	r5, [r4, #29]
 8003000:	2d00      	cmp	r5, #0
 8003002:	f47f af6d 	bne.w	8002ee0 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x4c>
                    use_past_stage = true;
 8003006:	2301      	movs	r3, #1
                    error = work_contact_system();
 8003008:	4620      	mov	r0, r4
                    use_past_stage = true;
 800300a:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 800300c:	f7ff fc10 	bl	8002830 <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8003010:	7765      	strb	r5, [r4, #29]
    return error;
 8003012:	e749      	b.n	8002ea8 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x14>
 8003014:	200023c4 	.word	0x200023c4
 8003018:	200023a8 	.word	0x200023a8

0800301c <_ZN17LoRa_contact_data16recip_connectionER13Stage_control>:
    switch (use_stage.connection) {
 800301c:	788b      	ldrb	r3, [r1, #2]
 800301e:	b11b      	cbz	r3, 8003028 <_ZN17LoRa_contact_data16recip_connectionER13Stage_control+0xc>
 8003020:	2b01      	cmp	r3, #1
 8003022:	d003      	beq.n	800302c <_ZN17LoRa_contact_data16recip_connectionER13Stage_control+0x10>
}
 8003024:	20d2      	movs	r0, #210	; 0xd2
 8003026:	4770      	bx	lr
        error = recip_connection_queue_check(use_stage);
 8003028:	f7ff ba32 	b.w	8002490 <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control>
        error = recip_connection_wait_request(use_stage);
 800302c:	f7ff bf32 	b.w	8002e94 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control>

08003030 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control>:
uint32_t LoRa_contact_data::recip_exchange_expect(Stage_control& use_stage) {
 8003030:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (module_state_) {
 8003032:	7c85      	ldrb	r5, [r0, #18]
uint32_t LoRa_contact_data::recip_exchange_expect(Stage_control& use_stage) {
 8003034:	4604      	mov	r4, r0
    switch (module_state_) {
 8003036:	2d01      	cmp	r5, #1
 8003038:	d013      	beq.n	8003062 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x32>
 800303a:	2d02      	cmp	r5, #2
 800303c:	d002      	beq.n	8003044 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x14>
 800303e:	20dd      	movs	r0, #221	; 0xdd
}
 8003040:	b002      	add	sp, #8
 8003042:	bd70      	pop	{r4, r5, r6, pc}
        if(!packet_dont_correct()) {
 8003044:	2200      	movs	r2, #0
 8003046:	4611      	mov	r1, r2
 8003048:	f7ff f918 	bl	800227c <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 800304c:	bb38      	cbnz	r0, 800309e <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x6e>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.R_data_pack) {
 800304e:	f004 fd37 	bl	8007ac0 <HAL_GetTick>
 8003052:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8003056:	1ac0      	subs	r0, r0, r3
 8003058:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
 800305c:	4298      	cmp	r0, r3
 800305e:	d203      	bcs.n	8003068 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x38>
                set_LoRa_mode_receive();
 8003060:	4620      	mov	r0, r4
 8003062:	f7ff fa31 	bl	80024c8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
 8003066:	e037      	b.n	80030d8 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xa8>
                if(!use_past_stage)
 8003068:	7f61      	ldrb	r1, [r4, #29]
 800306a:	f104 0218 	add.w	r2, r4, #24
 800306e:	f104 0313 	add.w	r3, r4, #19
 8003072:	b971      	cbnz	r1, 8003092 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x62>
                    past_stage_ = current_stage_;
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	61a0      	str	r0, [r4, #24]
 8003078:	791b      	ldrb	r3, [r3, #4]
 800307a:	7113      	strb	r3, [r2, #4]
                current_stage_.stade_communication = SC_DOWNTIME;
 800307c:	2500      	movs	r5, #0
                create_disconnet_packet(true);
 800307e:	2101      	movs	r1, #1
 8003080:	4620      	mov	r0, r4
                current_stage_.stade_communication = SC_DOWNTIME;
 8003082:	7525      	strb	r5, [r4, #20]
                create_disconnet_packet(true);
 8003084:	f7ff f8ce 	bl	8002224 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                set_LoRa_mode_send(true);
 8003088:	2101      	movs	r1, #1
                    set_LoRa_mode_send();
 800308a:	4620      	mov	r0, r4
 800308c:	f7ff fa84 	bl	8002598 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 8003090:	e022      	b.n	80030d8 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xa8>
                    current_stage_ = past_stage_;
 8003092:	69a0      	ldr	r0, [r4, #24]
 8003094:	7912      	ldrb	r2, [r2, #4]
 8003096:	f8c4 0013 	str.w	r0, [r4, #19]
 800309a:	711a      	strb	r2, [r3, #4]
 800309c:	e7ee      	b.n	800307c <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x4c>
            if(check_packet_type(Packet_Type::CONNECTION, {0x03})) {
 800309e:	2603      	movs	r6, #3
 80030a0:	2100      	movs	r1, #0
 80030a2:	4620      	mov	r0, r4
 80030a4:	f10d 0207 	add.w	r2, sp, #7
 80030a8:	f88d 6007 	strb.w	r6, [sp, #7]
 80030ac:	f7ff f92e 	bl	800230c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 80030b0:	b1d0      	cbz	r0, 80030e8 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xb8>
                create_amt_packet();
 80030b2:	4620      	mov	r0, r4
 80030b4:	f7ff f80e 	bl	80020d4 <_ZN17LoRa_contact_data17create_amt_packetEv>
                set_LoRa_mode_send();
 80030b8:	2100      	movs	r1, #0
 80030ba:	4620      	mov	r0, r4
 80030bc:	f7ff fa6c 	bl	8002598 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                if(!use_past_stage)
 80030c0:	7f61      	ldrb	r1, [r4, #29]
 80030c2:	f104 0218 	add.w	r2, r4, #24
 80030c6:	f104 0313 	add.w	r3, r4, #19
 80030ca:	b939      	cbnz	r1, 80030dc <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xac>
                    past_stage_ = current_stage_;
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	61a0      	str	r0, [r4, #24]
 80030d0:	791b      	ldrb	r3, [r3, #4]
 80030d2:	7113      	strb	r3, [r2, #4]
                current_stage_.exchange = E_WAITING_REACTION;
 80030d4:	2301      	movs	r3, #1
 80030d6:	75a3      	strb	r3, [r4, #22]
    uint32_t error = 0;
 80030d8:	2000      	movs	r0, #0
 80030da:	e7b1      	b.n	8003040 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x10>
                    current_stage_ = past_stage_;
 80030dc:	69a0      	ldr	r0, [r4, #24]
 80030de:	7912      	ldrb	r2, [r2, #4]
 80030e0:	f8c4 0013 	str.w	r0, [r4, #19]
 80030e4:	711a      	strb	r2, [r3, #4]
 80030e6:	e7f5      	b.n	80030d4 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xa4>
            else if(check_packet_type(Packet_Type::DEVICE) ||
 80030e8:	4629      	mov	r1, r5
 80030ea:	4620      	mov	r0, r4
 80030ec:	f7ff f900 	bl	80022f0 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type>
                    check_packet_type(Packet_Type::SENSOR) ||
 80030f0:	b190      	cbz	r0, 8003118 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xe8>
                if(reciev_packet_len == CONTACT_DATA_MAX_PACKET) {
 80030f2:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 80030f6:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
				reciev_packet_[reciev_packet_len++] = last_receive_packet_;
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8003100:	f884 2135 	strb.w	r2, [r4, #309]	; 0x135
 8003104:	f104 0120 	add.w	r1, r4, #32
 8003108:	f001 fb81 	bl	800480e <_ZN11LoRa_packetaSERKS_>
                ++amt_packet_;
 800310c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8003110:	3301      	adds	r3, #1
 8003112:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8003116:	e7a3      	b.n	8003060 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x30>
                    check_packet_type(Packet_Type::SENSOR) ||
 8003118:	2101      	movs	r1, #1
 800311a:	4620      	mov	r0, r4
 800311c:	f7ff f8e8 	bl	80022f0 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type>
            else if(check_packet_type(Packet_Type::DEVICE) ||
 8003120:	2800      	cmp	r0, #0
 8003122:	d1e6      	bne.n	80030f2 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xc2>
                    check_packet_type(Packet_Type::SYSTEM)) {
 8003124:	4631      	mov	r1, r6
 8003126:	4620      	mov	r0, r4
 8003128:	f7ff f8e2 	bl	80022f0 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type>
                    check_packet_type(Packet_Type::SENSOR) ||
 800312c:	2800      	cmp	r0, #0
 800312e:	d1e0      	bne.n	80030f2 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xc2>
                if(past_stage_.type_communication == TC_INITIATOR) {
 8003130:	7e25      	ldrb	r5, [r4, #24]
 8003132:	b90d      	cbnz	r5, 8003138 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x108>
                    set_LoRa_mode_send();
 8003134:	4629      	mov	r1, r5
 8003136:	e7a8      	b.n	800308a <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x5a>
                    if(!use_past_stage) {
 8003138:	7f65      	ldrb	r5, [r4, #29]
 800313a:	2d00      	cmp	r5, #0
 800313c:	d190      	bne.n	8003060 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x30>
                        use_past_stage = true;
 800313e:	2301      	movs	r3, #1
                        error = work_contact_system();
 8003140:	4620      	mov	r0, r4
                        use_past_stage = true;
 8003142:	7763      	strb	r3, [r4, #29]
                        error = work_contact_system();
 8003144:	f7ff fb74 	bl	8002830 <_ZN17LoRa_contact_data19work_contact_systemEv>
                        use_past_stage = false;
 8003148:	7765      	strb	r5, [r4, #29]
    return error;
 800314a:	e779      	b.n	8003040 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x10>

0800314c <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control>:
    switch (module_state_) {
 800314c:	7c83      	ldrb	r3, [r0, #18]
uint32_t LoRa_contact_data::recip_exchange_wait_reaction(Stage_control& use_stage) {
 800314e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (module_state_) {
 8003150:	2b01      	cmp	r3, #1
uint32_t LoRa_contact_data::recip_exchange_wait_reaction(Stage_control& use_stage) {
 8003152:	4604      	mov	r4, r0
    switch (module_state_) {
 8003154:	d015      	beq.n	8003182 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x36>
 8003156:	2b02      	cmp	r3, #2
 8003158:	d002      	beq.n	8003160 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x14>
 800315a:	20de      	movs	r0, #222	; 0xde
}
 800315c:	b003      	add	sp, #12
 800315e:	bd30      	pop	{r4, r5, pc}
        if(!packet_dont_correct()) {
 8003160:	2200      	movs	r2, #0
 8003162:	4611      	mov	r1, r2
 8003164:	f7ff f88a 	bl	800227c <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8003168:	4605      	mov	r5, r0
 800316a:	2800      	cmp	r0, #0
 800316c:	d13f      	bne.n	80031ee <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0xa2>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.R_correct_pack) {
 800316e:	f004 fca7 	bl	8007ac0 <HAL_GetTick>
 8003172:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8003176:	1ac0      	subs	r0, r0, r3
 8003178:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
 800317c:	4298      	cmp	r0, r3
 800317e:	d204      	bcs.n	800318a <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x3e>
                set_LoRa_mode_receive();
 8003180:	4620      	mov	r0, r4
 8003182:	f7ff f9a1 	bl	80024c8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8003186:	2000      	movs	r0, #0
 8003188:	e7e8      	b.n	800315c <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x10>
                if(send_packet_amt_ < packet_constraints_.R_correct_pack) {
 800318a:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 800318e:	f894 2169 	ldrb.w	r2, [r4, #361]	; 0x169
 8003192:	429a      	cmp	r2, r3
 8003194:	d907      	bls.n	80031a6 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x5a>
                    ++send_packet_amt_;
 8003196:	3301      	adds	r3, #1
                    set_LoRa_mode_send();
 8003198:	4629      	mov	r1, r5
 800319a:	4620      	mov	r0, r4
                    ++send_packet_amt_;
 800319c:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    set_LoRa_mode_send();
 80031a0:	f7ff f9fa 	bl	8002598 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 80031a4:	e7ef      	b.n	8003186 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x3a>
                    if(expected_amt_packet_ != reciev_packet_len)
 80031a6:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80031aa:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d053      	beq.n	800325a <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x10e>
                        if(!use_past_stage)
 80031b2:	7f61      	ldrb	r1, [r4, #29]
                        send_packet_amt_ = 0;
 80031b4:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                        if(!use_past_stage)
 80031b8:	f104 0218 	add.w	r2, r4, #24
 80031bc:	f104 0313 	add.w	r3, r4, #19
 80031c0:	b979      	cbnz	r1, 80031e2 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x96>
                            past_stage_ = current_stage_;
 80031c2:	6818      	ldr	r0, [r3, #0]
 80031c4:	61a0      	str	r0, [r4, #24]
 80031c6:	791b      	ldrb	r3, [r3, #4]
 80031c8:	7113      	strb	r3, [r2, #4]
                        current_stage_.stade_communication = SC_DOWNTIME;
 80031ca:	2300      	movs	r3, #0
                        create_disconnet_packet(true);
 80031cc:	2101      	movs	r1, #1
                        current_stage_.stade_communication = SC_DOWNTIME;
 80031ce:	7523      	strb	r3, [r4, #20]
                        create_disconnet_packet(true);
 80031d0:	4620      	mov	r0, r4
 80031d2:	f7ff f827 	bl	8002224 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                        set_LoRa_mode_send(true);
 80031d6:	4620      	mov	r0, r4
 80031d8:	2101      	movs	r1, #1
 80031da:	f7ff f9dd 	bl	8002598 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                        error = 223;
 80031de:	20df      	movs	r0, #223	; 0xdf
 80031e0:	e7bc      	b.n	800315c <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x10>
                            current_stage_ = past_stage_;
 80031e2:	69a0      	ldr	r0, [r4, #24]
 80031e4:	7912      	ldrb	r2, [r2, #4]
 80031e6:	f8c4 0013 	str.w	r0, [r4, #19]
 80031ea:	711a      	strb	r2, [r3, #4]
 80031ec:	e7ed      	b.n	80031ca <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x7e>
            if(check_packet_type(Packet_Type::CONNECTION, {0x05})) {
 80031ee:	2305      	movs	r3, #5
 80031f0:	2100      	movs	r1, #0
 80031f2:	4620      	mov	r0, r4
 80031f4:	f10d 0207 	add.w	r2, sp, #7
 80031f8:	f88d 3007 	strb.w	r3, [sp, #7]
 80031fc:	f7ff f886 	bl	800230c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8003200:	4605      	mov	r5, r0
 8003202:	b1f0      	cbz	r0, 8003242 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0xf6>
                send_packet_amt_ = 0;
 8003204:	2500      	movs	r5, #0
                create_number_packet();
 8003206:	4620      	mov	r0, r4
                send_packet_amt_ = 0;
 8003208:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                create_number_packet();
 800320c:	f7fe ff96 	bl	800213c <_ZN17LoRa_contact_data20create_number_packetEv>
                set_LoRa_mode_send();
 8003210:	4629      	mov	r1, r5
 8003212:	4620      	mov	r0, r4
 8003214:	f7ff f9c0 	bl	8002598 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                if(!use_past_stage)
 8003218:	7f61      	ldrb	r1, [r4, #29]
                amt_packet_ = 0;
 800321a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
                if(!use_past_stage)
 800321e:	f104 0218 	add.w	r2, r4, #24
 8003222:	f104 0313 	add.w	r3, r4, #19
 8003226:	b931      	cbnz	r1, 8003236 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0xea>
                    past_stage_ = current_stage_;
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	61a0      	str	r0, [r4, #24]
 800322c:	791b      	ldrb	r3, [r3, #4]
 800322e:	7113      	strb	r3, [r2, #4]
                current_stage_.exchange = E_EXPECTATION;
 8003230:	2000      	movs	r0, #0
 8003232:	75a0      	strb	r0, [r4, #22]
 8003234:	e792      	b.n	800315c <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x10>
                    current_stage_ = past_stage_;
 8003236:	69a0      	ldr	r0, [r4, #24]
 8003238:	7912      	ldrb	r2, [r2, #4]
 800323a:	f8c4 0013 	str.w	r0, [r4, #19]
 800323e:	711a      	strb	r2, [r3, #4]
 8003240:	e7f6      	b.n	8003230 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0xe4>
            else if(check_packet_type(Packet_Type::CONNECTION, {0x08})) {
 8003242:	2308      	movs	r3, #8
 8003244:	4601      	mov	r1, r0
 8003246:	f10d 0207 	add.w	r2, sp, #7
 800324a:	4620      	mov	r0, r4
 800324c:	f88d 3007 	strb.w	r3, [sp, #7]
 8003250:	f7ff f85c 	bl	800230c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8003254:	b140      	cbz	r0, 8003268 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x11c>
                send_packet_amt_ = 0;
 8003256:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                sort_num_packet();
 800325a:	4620      	mov	r0, r4
 800325c:	f7ff f8d4 	bl	8002408 <_ZN17LoRa_contact_data15sort_num_packetEv>
                contact_complete();
 8003260:	4620      	mov	r0, r4
 8003262:	f7ff fa29 	bl	80026b8 <_ZN17LoRa_contact_data16contact_completeEv>
 8003266:	e78e      	b.n	8003186 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x3a>
                if(!use_past_stage) {
 8003268:	7f65      	ldrb	r5, [r4, #29]
 800326a:	2d00      	cmp	r5, #0
 800326c:	d188      	bne.n	8003180 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x34>
                    use_past_stage = true;
 800326e:	2301      	movs	r3, #1
                    error = work_contact_system();
 8003270:	4620      	mov	r0, r4
                    use_past_stage = true;
 8003272:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 8003274:	f7ff fadc 	bl	8002830 <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8003278:	7765      	strb	r5, [r4, #29]
    return error;
 800327a:	e76f      	b.n	800315c <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x10>

0800327c <_ZN17LoRa_contact_data14recip_exchangeER13Stage_control>:
    switch (use_stage.exchange) {
 800327c:	78cb      	ldrb	r3, [r1, #3]
 800327e:	b11b      	cbz	r3, 8003288 <_ZN17LoRa_contact_data14recip_exchangeER13Stage_control+0xc>
 8003280:	2b01      	cmp	r3, #1
 8003282:	d003      	beq.n	800328c <_ZN17LoRa_contact_data14recip_exchangeER13Stage_control+0x10>
}
 8003284:	20dc      	movs	r0, #220	; 0xdc
 8003286:	4770      	bx	lr
        error = recip_exchange_expect(use_stage);
 8003288:	f7ff bed2 	b.w	8003030 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control>
        error = recip_exchange_wait_reaction(use_stage);
 800328c:	f7ff bf5e 	b.w	800314c <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control>

08003290 <Get_control_module_info_from_main>:


extern "C" {

void Get_control_module_info_from_main(uint32_t* id_main) {
	control_module_adr = id_main[0];
 8003290:	6802      	ldr	r2, [r0, #0]
 8003292:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <Get_control_module_info_from_main+0x10>)
 8003294:	601a      	str	r2, [r3, #0]
	control_module_channel = id_main[1];
 8003296:	6842      	ldr	r2, [r0, #4]
 8003298:	4b02      	ldr	r3, [pc, #8]	; (80032a4 <Get_control_module_info_from_main+0x14>)
 800329a:	601a      	str	r2, [r3, #0]
}
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	20000344 	.word	0x20000344
 80032a4:	20000348 	.word	0x20000348

080032a8 <Send_registration_packet>:

void Send_registration_packet() {
	grow_sensor_interface.send_registration_packet(grow_sensor, contact_data);
 80032a8:	4a02      	ldr	r2, [pc, #8]	; (80032b4 <Send_registration_packet+0xc>)
 80032aa:	4903      	ldr	r1, [pc, #12]	; (80032b8 <Send_registration_packet+0x10>)
 80032ac:	4803      	ldr	r0, [pc, #12]	; (80032bc <Send_registration_packet+0x14>)
 80032ae:	f7fe ba05 	b.w	80016bc <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data>
 80032b2:	bf00      	nop
 80032b4:	200001d4 	.word	0x200001d4
 80032b8:	20000350 	.word	0x20000350
 80032bc:	200001cf 	.word	0x200001cf

080032c0 <Init_lora_module>:
}

bool Init_lora_module(SPI_HandleTypeDef *spi) {
 80032c0:	4601      	mov	r1, r0
	return contact_data.init_lora_module(spi);
 80032c2:	4801      	ldr	r0, [pc, #4]	; (80032c8 <Init_lora_module+0x8>)
 80032c4:	f7fe bcf4 	b.w	8001cb0 <_ZN17LoRa_contact_data16init_lora_moduleEP19__SPI_HandleTypeDef>
 80032c8:	200001d4 	.word	0x200001d4

080032cc <Begin_lora_module>:
}
uint8_t Begin_lora_module(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 80032cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ce:	4604      	mov	r4, r0
 80032d0:	4615      	mov	r5, r2
 80032d2:	461e      	mov	r6, r3
	grow_sensor.set_system_id(MODULE_ID);
 80032d4:	4b18      	ldr	r3, [pc, #96]	; (8003338 <Begin_lora_module+0x6c>)
uint8_t Begin_lora_module(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 80032d6:	b087      	sub	sp, #28
	grow_sensor.set_system_id(MODULE_ID);
 80032d8:	6819      	ldr	r1, [r3, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	4817      	ldr	r0, [pc, #92]	; (800333c <Begin_lora_module+0x70>)
 80032de:	689b      	ldr	r3, [r3, #8]
uint8_t Begin_lora_module(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 80032e0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	grow_sensor.set_system_id(MODULE_ID);
 80032e2:	f7fe f879 	bl	80013d8 <_ZN11Grow_sensor13set_system_idESt5arrayIhLj12EE>
	contact_data.begin_lora_module(frequency, paboost, signal_power, SF, SBW, sync_word);
 80032e6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80032ea:	4621      	mov	r1, r4
 80032ec:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80032f0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80032f4:	462a      	mov	r2, r5
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	4811      	ldr	r0, [pc, #68]	; (8003340 <Begin_lora_module+0x74>)
 80032fa:	4633      	mov	r3, r6
 80032fc:	f7fe fce4 	bl	8001cc8 <_ZN17LoRa_contact_data17begin_lora_moduleEmbhhmh>
	if (control_module_adr == 0x00000000) {
 8003300:	4b10      	ldr	r3, [pc, #64]	; (8003344 <Begin_lora_module+0x78>)
 8003302:	4c11      	ldr	r4, [pc, #68]	; (8003348 <Begin_lora_module+0x7c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	b92b      	cbnz	r3, 8003314 <Begin_lora_module+0x48>
		current_mode = REGISTRATION_MODE;
 8003308:	7023      	strb	r3, [r4, #0]
		Send_registration_packet();
 800330a:	f7ff ffcd 	bl	80032a8 <Send_registration_packet>
		grow_sensor_interface.load_data(grow_sensor, contact_data, control_module_adr, control_module_channel);
		current_mode = WORKING_MODE;
		contact_data.wait_recipient(grow_sensor.get_address_control_module());
	}
	return 0;
}
 800330e:	2000      	movs	r0, #0
 8003310:	b007      	add	sp, #28
 8003312:	bdf0      	pop	{r4, r5, r6, r7, pc}
		grow_sensor_interface.load_data(grow_sensor, contact_data, control_module_adr, control_module_channel);
 8003314:	4a0d      	ldr	r2, [pc, #52]	; (800334c <Begin_lora_module+0x80>)
 8003316:	4909      	ldr	r1, [pc, #36]	; (800333c <Begin_lora_module+0x70>)
 8003318:	6812      	ldr	r2, [r2, #0]
 800331a:	480d      	ldr	r0, [pc, #52]	; (8003350 <Begin_lora_module+0x84>)
 800331c:	9200      	str	r2, [sp, #0]
 800331e:	4a08      	ldr	r2, [pc, #32]	; (8003340 <Begin_lora_module+0x74>)
 8003320:	f7fe f992 	bl	8001648 <_ZN21Grow_sensor_interface9load_dataER11Grow_sensorR17LoRa_contact_datamm>
		current_mode = WORKING_MODE;
 8003324:	2301      	movs	r3, #1
		contact_data.wait_recipient(grow_sensor.get_address_control_module());
 8003326:	4805      	ldr	r0, [pc, #20]	; (800333c <Begin_lora_module+0x70>)
		current_mode = WORKING_MODE;
 8003328:	7023      	strb	r3, [r4, #0]
		contact_data.wait_recipient(grow_sensor.get_address_control_module());
 800332a:	f7fe f879 	bl	8001420 <_ZNK11Grow_sensor26get_address_control_moduleEv>
 800332e:	4601      	mov	r1, r0
 8003330:	4803      	ldr	r0, [pc, #12]	; (8003340 <Begin_lora_module+0x74>)
 8003332:	f7ff f8df 	bl	80024f4 <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>
 8003336:	e7ea      	b.n	800330e <Begin_lora_module+0x42>
 8003338:	0800b28b 	.word	0x0800b28b
 800333c:	20000350 	.word	0x20000350
 8003340:	200001d4 	.word	0x200001d4
 8003344:	20000344 	.word	0x20000344
 8003348:	2000034c 	.word	0x2000034c
 800334c:	20000348 	.word	0x20000348
 8003350:	200001cf 	.word	0x200001cf

08003354 <Main_cpp>:

void Main_cpp(SensorsDataTypeDef* sensors_data) {
 8003354:	b538      	push	{r3, r4, r5, lr}
 8003356:	4604      	mov	r4, r0
//	grow_sensor.set_value(2, sensors_data->water_temperature);
//	grow_sensor.set_value(3, sensors_data->lux);
//	grow_sensor.set_value(4, sensors_data->CO2);
//	grow_sensor_interface.build_data_packet(grow_sensor, contact_data);

	grow_sensor.set_value(0, sensors_data->humidity);
 8003358:	4d0b      	ldr	r5, [pc, #44]	; (8003388 <Main_cpp+0x34>)
 800335a:	6882      	ldr	r2, [r0, #8]
 800335c:	2100      	movs	r1, #0
 800335e:	4628      	mov	r0, r5
 8003360:	f7fe f890 	bl	8001484 <_ZN11Grow_sensor9set_valueEhf>
	grow_sensor.set_value(1, sensors_data->temperature);
 8003364:	6862      	ldr	r2, [r4, #4]
 8003366:	2101      	movs	r1, #1
 8003368:	4628      	mov	r0, r5
 800336a:	f7fe f88b 	bl	8001484 <_ZN11Grow_sensor9set_valueEhf>
	grow_sensor.set_value(2, sensors_data->CO2);
 800336e:	6922      	ldr	r2, [r4, #16]
 8003370:	2102      	movs	r1, #2
 8003372:	4628      	mov	r0, r5
 8003374:	f7fe f886 	bl	8001484 <_ZN11Grow_sensor9set_valueEhf>
	grow_sensor_interface.build_data_packet(grow_sensor, contact_data);
 8003378:	4629      	mov	r1, r5
}
 800337a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	grow_sensor_interface.build_data_packet(grow_sensor, contact_data);
 800337e:	4a03      	ldr	r2, [pc, #12]	; (800338c <Main_cpp+0x38>)
 8003380:	4803      	ldr	r0, [pc, #12]	; (8003390 <Main_cpp+0x3c>)
 8003382:	f7fe bb03 	b.w	800198c <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data>
 8003386:	bf00      	nop
 8003388:	20000350 	.word	0x20000350
 800338c:	200001d4 	.word	0x200001d4
 8003390:	200001cf 	.word	0x200001cf

08003394 <Contact_group_control_module>:

void Contact_group_control_module() {
 8003394:	b530      	push	{r4, r5, lr}
	contact_status = contact_data.work_contact_system();
 8003396:	482f      	ldr	r0, [pc, #188]	; (8003454 <Contact_group_control_module+0xc0>)
void Contact_group_control_module() {
 8003398:	b085      	sub	sp, #20
	contact_status = contact_data.work_contact_system();
 800339a:	f7ff fa49 	bl	8002830 <_ZN17LoRa_contact_data19work_contact_systemEv>
	switch (current_mode) {
 800339e:	4c2e      	ldr	r4, [pc, #184]	; (8003458 <Contact_group_control_module+0xc4>)
	contact_status = contact_data.work_contact_system();
 80033a0:	4b2e      	ldr	r3, [pc, #184]	; (800345c <Contact_group_control_module+0xc8>)
 80033a2:	4625      	mov	r5, r4
 80033a4:	6018      	str	r0, [r3, #0]
	switch (current_mode) {
 80033a6:	7823      	ldrb	r3, [r4, #0]
 80033a8:	b11b      	cbz	r3, 80033b2 <Contact_group_control_module+0x1e>
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d026      	beq.n	80033fc <Contact_group_control_module+0x68>
	        	grow_sensor_interface.read_received_data_packets(grow_sensor, contact_data);
	            contact_data.wait_recipient(grow_sensor.get_address_control_module());
	        }
		}
	}
}
 80033ae:	b005      	add	sp, #20
 80033b0:	bd30      	pop	{r4, r5, pc}
			if(contact_data.get_signal_complete()) {
 80033b2:	4828      	ldr	r0, [pc, #160]	; (8003454 <Contact_group_control_module+0xc0>)
 80033b4:	f7fe fd5f 	bl	8001e76 <_ZN17LoRa_contact_data19get_signal_completeEv>
 80033b8:	b150      	cbz	r0, 80033d0 <Contact_group_control_module+0x3c>
				contact_data.broadcast_receive(); // Ожидаем ответа на запрос или ошибку запроса
 80033ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033be:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80033c2:	a803      	add	r0, sp, #12
 80033c4:	f002 fb04 	bl	80059d0 <_ZN12LoRa_addressC1Ett>
 80033c8:	9903      	ldr	r1, [sp, #12]
 80033ca:	4822      	ldr	r0, [pc, #136]	; (8003454 <Contact_group_control_module+0xc0>)
 80033cc:	f7ff f8a8 	bl	8002520 <_ZN17LoRa_contact_data17broadcast_receiveE12LoRa_address>
			if(contact_data.get_state_contact() == SC_PACKET_ACCEPTED) {
 80033d0:	4820      	ldr	r0, [pc, #128]	; (8003454 <Contact_group_control_module+0xc0>)
 80033d2:	f7fe fcf6 	bl	8001dc2 <_ZN17LoRa_contact_data17get_state_contactEv>
 80033d6:	2807      	cmp	r0, #7
 80033d8:	d1e9      	bne.n	80033ae <Contact_group_control_module+0x1a>
				if(grow_sensor_interface.check_regist_packet(grow_sensor, contact_data)) {
 80033da:	4a1e      	ldr	r2, [pc, #120]	; (8003454 <Contact_group_control_module+0xc0>)
 80033dc:	4920      	ldr	r1, [pc, #128]	; (8003460 <Contact_group_control_module+0xcc>)
 80033de:	4821      	ldr	r0, [pc, #132]	; (8003464 <Contact_group_control_module+0xd0>)
 80033e0:	f7fe fa1c 	bl	800181c <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data>
 80033e4:	2800      	cmp	r0, #0
 80033e6:	d0e2      	beq.n	80033ae <Contact_group_control_module+0x1a>
					current_mode = WORKING_MODE;
 80033e8:	2301      	movs	r3, #1
					contact_data.wait_recipient(grow_sensor.get_address_control_module()); // Начинаем слушать на наличие управляющих пакетов
 80033ea:	481d      	ldr	r0, [pc, #116]	; (8003460 <Contact_group_control_module+0xcc>)
					current_mode = WORKING_MODE;
 80033ec:	702b      	strb	r3, [r5, #0]
					contact_data.wait_recipient(grow_sensor.get_address_control_module()); // Начинаем слушать на наличие управляющих пакетов
 80033ee:	f7fe f817 	bl	8001420 <_ZNK11Grow_sensor26get_address_control_moduleEv>
 80033f2:	4601      	mov	r1, r0
	            contact_data.wait_recipient(grow_sensor.get_address_control_module());
 80033f4:	4817      	ldr	r0, [pc, #92]	; (8003454 <Contact_group_control_module+0xc0>)
 80033f6:	f7ff f87d 	bl	80024f4 <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>
}
 80033fa:	e7d8      	b.n	80033ae <Contact_group_control_module+0x1a>
	        if(contact_status != 0) {
 80033fc:	b190      	cbz	r0, 8003424 <Contact_group_control_module+0x90>
	        	if(grow_sensor_interface.check_contact_error(grow_sensor, contact_data)) {
 80033fe:	4a15      	ldr	r2, [pc, #84]	; (8003454 <Contact_group_control_module+0xc0>)
 8003400:	4917      	ldr	r1, [pc, #92]	; (8003460 <Contact_group_control_module+0xcc>)
 8003402:	4818      	ldr	r0, [pc, #96]	; (8003464 <Contact_group_control_module+0xd0>)
 8003404:	f7fe f9cc 	bl	80017a0 <_ZN21Grow_sensor_interface19check_contact_errorER11Grow_sensorR17LoRa_contact_data>
 8003408:	b1e0      	cbz	r0, 8003444 <Contact_group_control_module+0xb0>
					current_mode = REGISTRATION_MODE;
 800340a:	2300      	movs	r3, #0
	        		contact_data.broadcast_receive();
 800340c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003410:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003414:	a803      	add	r0, sp, #12
					current_mode = REGISTRATION_MODE;
 8003416:	7023      	strb	r3, [r4, #0]
	        		contact_data.broadcast_receive();
 8003418:	f002 fada 	bl	80059d0 <_ZN12LoRa_addressC1Ett>
 800341c:	9903      	ldr	r1, [sp, #12]
 800341e:	480d      	ldr	r0, [pc, #52]	; (8003454 <Contact_group_control_module+0xc0>)
 8003420:	f7ff f87e 	bl	8002520 <_ZN17LoRa_contact_data17broadcast_receiveE12LoRa_address>
	        if(contact_data.get_signal_complete()) {
 8003424:	480b      	ldr	r0, [pc, #44]	; (8003454 <Contact_group_control_module+0xc0>)
 8003426:	f7fe fd26 	bl	8001e76 <_ZN17LoRa_contact_data19get_signal_completeEv>
 800342a:	2800      	cmp	r0, #0
 800342c:	d0bf      	beq.n	80033ae <Contact_group_control_module+0x1a>
	        	grow_sensor_interface.read_received_data_packets(grow_sensor, contact_data);
 800342e:	490c      	ldr	r1, [pc, #48]	; (8003460 <Contact_group_control_module+0xcc>)
 8003430:	4a08      	ldr	r2, [pc, #32]	; (8003454 <Contact_group_control_module+0xc0>)
 8003432:	480c      	ldr	r0, [pc, #48]	; (8003464 <Contact_group_control_module+0xd0>)
 8003434:	f7fe fb9c 	bl	8001b70 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data>
	            contact_data.wait_recipient(grow_sensor.get_address_control_module());
 8003438:	4809      	ldr	r0, [pc, #36]	; (8003460 <Contact_group_control_module+0xcc>)
 800343a:	f7fd fff1 	bl	8001420 <_ZNK11Grow_sensor26get_address_control_moduleEv>
 800343e:	4601      	mov	r1, r0
 8003440:	9003      	str	r0, [sp, #12]
 8003442:	e7d7      	b.n	80033f4 <Contact_group_control_module+0x60>
	        		contact_data.wait_recipient(grow_sensor.get_address_control_module());
 8003444:	4806      	ldr	r0, [pc, #24]	; (8003460 <Contact_group_control_module+0xcc>)
 8003446:	f7fd ffeb 	bl	8001420 <_ZNK11Grow_sensor26get_address_control_moduleEv>
 800344a:	4601      	mov	r1, r0
 800344c:	4801      	ldr	r0, [pc, #4]	; (8003454 <Contact_group_control_module+0xc0>)
 800344e:	f7ff f851 	bl	80024f4 <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>
 8003452:	e7e7      	b.n	8003424 <Contact_group_control_module+0x90>
 8003454:	200001d4 	.word	0x200001d4
 8003458:	2000034c 	.word	0x2000034c
 800345c:	20000340 	.word	0x20000340
 8003460:	20000350 	.word	0x20000350
 8003464:	200001cf 	.word	0x200001cf

08003468 <_GLOBAL__sub_I_sensor_array>:

} // extern "C"
 8003468:	b508      	push	{r3, lr}
LoRa_contact_data contact_data;
 800346a:	4805      	ldr	r0, [pc, #20]	; (8003480 <_GLOBAL__sub_I_sensor_array+0x18>)
 800346c:	f7fe fd1a 	bl	8001ea4 <_ZN17LoRa_contact_dataC1Ev>
} // extern "C"
 8003470:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Grow_sensor grow_sensor(AMT_COMPONENT, sensor_array);
 8003474:	2103      	movs	r1, #3
 8003476:	4a03      	ldr	r2, [pc, #12]	; (8003484 <_GLOBAL__sub_I_sensor_array+0x1c>)
 8003478:	4803      	ldr	r0, [pc, #12]	; (8003488 <_GLOBAL__sub_I_sensor_array+0x20>)
 800347a:	f7fe b89d 	b.w	80015b8 <_ZN11Grow_sensorC1EhP11Type_sensor>
 800347e:	bf00      	nop
 8003480:	200001d4 	.word	0x200001d4
 8003484:	20000000 	.word	0x20000000
 8003488:	20000350 	.word	0x20000350

0800348c <_GLOBAL__sub_D_sensor_array>:
} // extern "C"
 800348c:	b508      	push	{r3, lr}
	_M_deallocate(_M_impl._M_start,
 800348e:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <_GLOBAL__sub_D_sensor_array+0x18>)
 8003490:	6918      	ldr	r0, [r3, #16]
	if (__p)
 8003492:	b108      	cbz	r0, 8003498 <_GLOBAL__sub_D_sensor_array+0xc>
	::operator delete(__p);
 8003494:	f007 fd48 	bl	800af28 <_ZdlPv>
 8003498:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
LoRa_contact_data contact_data;
 800349c:	4802      	ldr	r0, [pc, #8]	; (80034a8 <_GLOBAL__sub_D_sensor_array+0x1c>)
 800349e:	f7fe bbe5 	b.w	8001c6c <_ZN17LoRa_contact_dataD1Ev>
 80034a2:	bf00      	nop
 80034a4:	20000350 	.word	0x20000350
 80034a8:	200001d4 	.word	0x200001d4

080034ac <_ZN8RegisterC1Ethh>:

//   ----- ----- ----- ---- ----- ----- -----
// ----- ----- ----- Register ----- ----- -----
//   ----- ----- ----- ---- ----- ----- -----

Register::Register(uint16_t address, uint8_t bit_count, uint8_t bit_bias): address_(address), bit_count_(bit_count), bit_bias_(bit_bias) {
 80034ac:	2a08      	cmp	r2, #8
 80034ae:	7082      	strb	r2, [r0, #2]
 80034b0:	bf28      	it	cs
 80034b2:	2208      	movcs	r2, #8
 80034b4:	2a01      	cmp	r2, #1
 80034b6:	bf38      	it	cc
 80034b8:	2201      	movcc	r2, #1
 80034ba:	b530      	push	{r4, r5, lr}
    uint8_t bit_in_reg = 8;
    bit_count = value_range(bit_count, 1, bit_in_reg);
    bit_bias = value_range(bit_bias, 0, (bit_in_reg - bit_count));
 80034bc:	2400      	movs	r4, #0
 80034be:	f1c2 0508 	rsb	r5, r2, #8
 80034c2:	b2ed      	uxtb	r5, r5
Register::Register(uint16_t address, uint8_t bit_count, uint8_t bit_bias): address_(address), bit_count_(bit_count), bit_bias_(bit_bias) {
 80034c4:	8001      	strh	r1, [r0, #0]
 80034c6:	70c3      	strb	r3, [r0, #3]
    uint32_t mask = 0x00;
 80034c8:	4621      	mov	r1, r4
    for (uint8_t i = 0; i < bit_in_reg; ++i) {
        if (i < bit_count)
            mask = (mask << 1) + 1;
        else
            if (i < (bit_count + bit_bias))
 80034ca:	429d      	cmp	r5, r3
 80034cc:	bf94      	ite	ls
 80034ce:	1953      	addls	r3, r2, r5
 80034d0:	18d3      	addhi	r3, r2, r3
        if (i < bit_count)
 80034d2:	b2e5      	uxtb	r5, r4
 80034d4:	42aa      	cmp	r2, r5
 80034d6:	d906      	bls.n	80034e6 <_ZN8RegisterC1Ethh+0x3a>
            mask = (mask << 1) + 1;
 80034d8:	0049      	lsls	r1, r1, #1
 80034da:	3101      	adds	r1, #1
    for (uint8_t i = 0; i < bit_in_reg; ++i) {
 80034dc:	3401      	adds	r4, #1
 80034de:	2c08      	cmp	r4, #8
 80034e0:	d1f7      	bne.n	80034d2 <_ZN8RegisterC1Ethh+0x26>
                mask <<= 1;
    }
    mask_ = mask;
 80034e2:	6041      	str	r1, [r0, #4]
}
 80034e4:	bd30      	pop	{r4, r5, pc}
            if (i < (bit_count + bit_bias))
 80034e6:	42a3      	cmp	r3, r4
                mask <<= 1;
 80034e8:	bfc8      	it	gt
 80034ea:	0049      	lslgt	r1, r1, #1
 80034ec:	e7f6      	b.n	80034dc <_ZN8RegisterC1Ethh+0x30>

080034ee <_ZNK8Register7addressEv>:

uint16_t Register::address() const {
    return address_;
}
 80034ee:	8800      	ldrh	r0, [r0, #0]
 80034f0:	4770      	bx	lr

080034f2 <_ZNK8Register4maskEv>:
uint8_t Register::bit_bias() const {
    return bit_bias_;
}
uint32_t Register::mask() const {
    return mask_;
}
 80034f2:	6840      	ldr	r0, [r0, #4]
 80034f4:	4770      	bx	lr

080034f6 <_ZeqRK8RegisterS1_>:

bool operator==(const Register& left, const Register& right) {
    if(left.address_ != right.address_)
 80034f6:	8802      	ldrh	r2, [r0, #0]
 80034f8:	880b      	ldrh	r3, [r1, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d10d      	bne.n	800351a <_ZeqRK8RegisterS1_+0x24>
        return false;
    if(left.bit_count_ != right.bit_count_)
 80034fe:	7882      	ldrb	r2, [r0, #2]
 8003500:	788b      	ldrb	r3, [r1, #2]
 8003502:	429a      	cmp	r2, r3
 8003504:	d109      	bne.n	800351a <_ZeqRK8RegisterS1_+0x24>
        return false;
    if(left.bit_bias_ != right.bit_bias_)
 8003506:	78c2      	ldrb	r2, [r0, #3]
 8003508:	78cb      	ldrb	r3, [r1, #3]
 800350a:	429a      	cmp	r2, r3
 800350c:	d105      	bne.n	800351a <_ZeqRK8RegisterS1_+0x24>
        return false;
    if(left.mask_ != right.mask_)
 800350e:	6840      	ldr	r0, [r0, #4]
 8003510:	684b      	ldr	r3, [r1, #4]
 8003512:	1ac3      	subs	r3, r0, r3
 8003514:	4258      	negs	r0, r3
 8003516:	4158      	adcs	r0, r3
 8003518:	4770      	bx	lr
        return false;
 800351a:	2000      	movs	r0, #0
        return false;
    return true;
}
 800351c:	4770      	bx	lr

0800351e <_ZneRK8RegisterS1_>:

bool operator!=(const Register& left, const Register& right) {
 800351e:	b508      	push	{r3, lr}
    return !(left == right);
 8003520:	f7ff ffe9 	bl	80034f6 <_ZeqRK8RegisterS1_>
 8003524:	f080 0001 	eor.w	r0, r0, #1
}
 8003528:	b2c0      	uxtb	r0, r0
 800352a:	bd08      	pop	{r3, pc}

0800352c <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm>:
                             const uint32_t max_value, const uint32_t *reserved_value, const uint32_t reserv_count) {
    init_address_field(registers, reg_count, reg_revers, mode, min_value, max_value, reserved_value, reserv_count);
}

bool Address_field::init_address_field(const Register *registers, const uint8_t reg_count, const bool reg_revers, const char mode, const uint32_t min_value,
                                       const uint32_t max_value, const uint32_t *reserved_value, const uint32_t reserv_count) {
 800352c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003530:	f89d c018 	ldrb.w	ip, [sp, #24]
 8003534:	4604      	mov	r4, r0
 8003536:	e9dd 5707 	ldrd	r5, r7, [sp, #28]
    if ((mode != 'r') && (mode != 'w') && (mode != 'c'))
 800353a:	f1ac 0063 	sub.w	r0, ip, #99	; 0x63
 800353e:	b2c6      	uxtb	r6, r0
 8003540:	2e14      	cmp	r6, #20
 8003542:	d838      	bhi.n	80035b6 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x8a>
 8003544:	481d      	ldr	r0, [pc, #116]	; (80035bc <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x90>)
 8003546:	40f0      	lsrs	r0, r6
 8003548:	43c0      	mvns	r0, r0
 800354a:	f010 0001 	ands.w	r0, r0, #1
 800354e:	d130      	bne.n	80035b2 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x86>
    uint8_t bit_count = 0;
    uint32_t value = 0;
    mode_ = mode;
    registers_ = registers;
    reg_count_ = reg_count;
    reg_revers_ = reg_revers;
 8003550:	7163      	strb	r3, [r4, #5]
    reserved_value_ = reserved_value;
 8003552:	9b09      	ldr	r3, [sp, #36]	; 0x24
    uint8_t bit_count = 0;
 8003554:	4606      	mov	r6, r0
    reserved_value_ = reserved_value;
 8003556:	6123      	str	r3, [r4, #16]
    reserv_count_ = reserv_count;
 8003558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    mode_ = mode;
 800355a:	f884 c018 	strb.w	ip, [r4, #24]
    reserv_count_ = reserv_count;
 800355e:	6163      	str	r3, [r4, #20]
    max_address_ = 0;
    for (int i = 0; i < reg_count_; ++i) {
 8003560:	4603      	mov	r3, r0
    registers_ = registers;
 8003562:	6021      	str	r1, [r4, #0]
    reg_count_ = reg_count;
 8003564:	7122      	strb	r2, [r4, #4]
    max_address_ = 0;
 8003566:	80e0      	strh	r0, [r4, #6]
    return bit_count_;
 8003568:	f101 0e02 	add.w	lr, r1, #2
    for (int i = 0; i < reg_count_; ++i) {
 800356c:	429a      	cmp	r2, r3
 800356e:	dd0d      	ble.n	800358c <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x60>
        bit_count += registers_[i].bit_count();
 8003570:	f81e c033 	ldrb.w	ip, [lr, r3, lsl #3]
        if (max_address_ < registers_[i].address())
 8003574:	f8b4 8006 	ldrh.w	r8, [r4, #6]
        bit_count += registers_[i].bit_count();
 8003578:	4466      	add	r6, ip
    return address_;
 800357a:	f831 c033 	ldrh.w	ip, [r1, r3, lsl #3]
        bit_count += registers_[i].bit_count();
 800357e:	b2f6      	uxtb	r6, r6
        if (max_address_ < registers_[i].address())
 8003580:	45e0      	cmp	r8, ip
            max_address_ = registers_[i].address();
 8003582:	bf38      	it	cc
 8003584:	f8a4 c006 	strhcc.w	ip, [r4, #6]
    for (int i = 0; i < reg_count_; ++i) {
 8003588:	3301      	adds	r3, #1
 800358a:	e7ef      	b.n	800356c <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x40>
    }
    for (int i = 0; i < bit_count; ++i)
 800358c:	2200      	movs	r2, #0
    uint32_t value = 0;
 800358e:	4613      	mov	r3, r2
    for (int i = 0; i < bit_count; ++i)
 8003590:	4296      	cmp	r6, r2
 8003592:	dd03      	ble.n	800359c <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x70>
        value = (value << 1) + 1;
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	3301      	adds	r3, #1
    for (int i = 0; i < bit_count; ++i)
 8003598:	3201      	adds	r2, #1
 800359a:	e7f9      	b.n	8003590 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x64>
    min_value_ = value_range(min_value, 0, value);
 800359c:	429d      	cmp	r5, r3
 800359e:	bf94      	ite	ls
 80035a0:	60a5      	strls	r5, [r4, #8]
 80035a2:	60a3      	strhi	r3, [r4, #8]
    if (value < min_value)
 80035a4:	42bd      	cmp	r5, r7
 80035a6:	d803      	bhi.n	80035b0 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x84>
    if (value > max_value)
 80035a8:	429f      	cmp	r7, r3
 80035aa:	463d      	mov	r5, r7
 80035ac:	bf28      	it	cs
 80035ae:	461d      	movcs	r5, r3
    max_value_ = value_range(max_value, min_value, value);
 80035b0:	60e5      	str	r5, [r4, #12]
    return false;
}
 80035b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return true;
 80035b6:	2001      	movs	r0, #1
 80035b8:	e7fb      	b.n	80035b2 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x86>
 80035ba:	bf00      	nop
 80035bc:	00108001 	.word	0x00108001

080035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>:
Address_field::Address_field(const Register* registers, const uint8_t reg_count, const bool reg_revers, const char mode, const uint32_t min_value,
 80035c0:	b530      	push	{r4, r5, lr}
 80035c2:	4604      	mov	r4, r0
 80035c4:	b087      	sub	sp, #28
    init_address_field(registers, reg_count, reg_revers, mode, min_value, max_value, reserved_value, reserv_count);
 80035c6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80035c8:	9504      	str	r5, [sp, #16]
 80035ca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80035cc:	9503      	str	r5, [sp, #12]
 80035ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80035d0:	9502      	str	r5, [sp, #8]
 80035d2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80035d4:	9501      	str	r5, [sp, #4]
 80035d6:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 80035da:	9500      	str	r5, [sp, #0]
 80035dc:	f7ff ffa6 	bl	800352c <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm>
}
 80035e0:	4620      	mov	r0, r4
 80035e2:	b007      	add	sp, #28
 80035e4:	bd30      	pop	{r4, r5, pc}

080035e6 <_ZNK13Address_field9get_valueEPKhi>:


uint32_t Address_field::get_value(const uint8_t *register_value, int register_count) const {
    if (register_count < (max_address_ + 1))
 80035e6:	88c3      	ldrh	r3, [r0, #6]
uint32_t Address_field::get_value(const uint8_t *register_value, int register_count) const {
 80035e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (register_count < (max_address_ + 1))
 80035ea:	4293      	cmp	r3, r2
uint32_t Address_field::get_value(const uint8_t *register_value, int register_count) const {
 80035ec:	4604      	mov	r4, r0
    if (register_count < (max_address_ + 1))
 80035ee:	da27      	bge.n	8003640 <_ZNK13Address_field9get_valueEPKhi+0x5a>
        return -1;
    uint32_t value = 0;
    if(reg_revers_) {
 80035f0:	7902      	ldrb	r2, [r0, #4]
 80035f2:	7940      	ldrb	r0, [r0, #5]
 80035f4:	b198      	cbz	r0, 800361e <_ZNK13Address_field9get_valueEPKhi+0x38>
        for (int i = 0; i < reg_count_; ++i) {
 80035f6:	2500      	movs	r5, #0
    uint32_t value = 0;
 80035f8:	4628      	mov	r0, r5
        for (int i = 0; i < reg_count_; ++i) {
 80035fa:	4295      	cmp	r5, r2
 80035fc:	da22      	bge.n	8003644 <_ZNK13Address_field9get_valueEPKhi+0x5e>
            value <<= registers_[i].bit_count();
 80035fe:	6827      	ldr	r7, [r4, #0]
 8003600:	eb07 06c5 	add.w	r6, r7, r5, lsl #3
 8003604:	78b3      	ldrb	r3, [r6, #2]
 8003606:	fa00 f303 	lsl.w	r3, r0, r3
            value |= (register_value[registers_[i].address()] & registers_[i].mask()) >> registers_[i].bit_bias();
 800360a:	f837 0035 	ldrh.w	r0, [r7, r5, lsl #3]
 800360e:	6877      	ldr	r7, [r6, #4]
 8003610:	5c08      	ldrb	r0, [r1, r0]
 8003612:	78f6      	ldrb	r6, [r6, #3]
 8003614:	4038      	ands	r0, r7
 8003616:	40f0      	lsrs	r0, r6
 8003618:	4318      	orrs	r0, r3
        for (int i = 0; i < reg_count_; ++i) {
 800361a:	3501      	adds	r5, #1
 800361c:	e7ed      	b.n	80035fa <_ZNK13Address_field9get_valueEPKhi+0x14>
        }
    }
    else {
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 800361e:	3a01      	subs	r2, #1
 8003620:	d310      	bcc.n	8003644 <_ZNK13Address_field9get_valueEPKhi+0x5e>
            value <<= registers_[i].bit_count();
 8003622:	6826      	ldr	r6, [r4, #0]
 8003624:	eb06 05c2 	add.w	r5, r6, r2, lsl #3
 8003628:	78ab      	ldrb	r3, [r5, #2]
 800362a:	fa00 f303 	lsl.w	r3, r0, r3
            value |= (register_value[registers_[i].address()] & registers_[i].mask()) >> registers_[i].bit_bias();
 800362e:	f836 0032 	ldrh.w	r0, [r6, r2, lsl #3]
 8003632:	686e      	ldr	r6, [r5, #4]
 8003634:	5c08      	ldrb	r0, [r1, r0]
 8003636:	78ed      	ldrb	r5, [r5, #3]
 8003638:	4030      	ands	r0, r6
 800363a:	40e8      	lsrs	r0, r5
 800363c:	4318      	orrs	r0, r3
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 800363e:	e7ee      	b.n	800361e <_ZNK13Address_field9get_valueEPKhi+0x38>
        return -1;
 8003640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
    }
    return value;
}
 8003644:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003646 <_ZNK13Address_field9set_valueEmPhi>:

bool Address_field::set_value(uint32_t value, uint8_t *register_value, int register_count) const {
 8003646:	b570      	push	{r4, r5, r6, lr}
    if ((register_count < (max_address_ + 1)) || (mode_ == 'r') ||
 8003648:	88c4      	ldrh	r4, [r0, #6]
 800364a:	429c      	cmp	r4, r3
 800364c:	da58      	bge.n	8003700 <_ZNK13Address_field9set_valueEmPhi+0xba>
 800364e:	7e03      	ldrb	r3, [r0, #24]
 8003650:	2b72      	cmp	r3, #114	; 0x72
 8003652:	d055      	beq.n	8003700 <_ZNK13Address_field9set_valueEmPhi+0xba>
 8003654:	6883      	ldr	r3, [r0, #8]
 8003656:	428b      	cmp	r3, r1
 8003658:	d852      	bhi.n	8003700 <_ZNK13Address_field9set_valueEmPhi+0xba>
                (value < min_value_) || (value > max_value_))
 800365a:	68c3      	ldr	r3, [r0, #12]
 800365c:	428b      	cmp	r3, r1
 800365e:	d34f      	bcc.n	8003700 <_ZNK13Address_field9set_valueEmPhi+0xba>
        return true;
    for (uint32_t i = 0; i < reserv_count_; ++i)
 8003660:	2300      	movs	r3, #0
 8003662:	6944      	ldr	r4, [r0, #20]
 8003664:	429c      	cmp	r4, r3
 8003666:	d006      	beq.n	8003676 <_ZNK13Address_field9set_valueEmPhi+0x30>
        if (value == reserved_value_[i])
 8003668:	6905      	ldr	r5, [r0, #16]
 800366a:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 800366e:	428d      	cmp	r5, r1
 8003670:	d046      	beq.n	8003700 <_ZNK13Address_field9set_valueEmPhi+0xba>
    for (uint32_t i = 0; i < reserv_count_; ++i)
 8003672:	3301      	adds	r3, #1
 8003674:	e7f6      	b.n	8003664 <_ZNK13Address_field9set_valueEmPhi+0x1e>
            return true;
    if(reg_revers_) {
 8003676:	7943      	ldrb	r3, [r0, #5]
 8003678:	b30b      	cbz	r3, 80036be <_ZNK13Address_field9set_valueEmPhi+0x78>
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 800367a:	7903      	ldrb	r3, [r0, #4]
 800367c:	3b01      	subs	r3, #1
 800367e:	d201      	bcs.n	8003684 <_ZNK13Address_field9set_valueEmPhi+0x3e>
            register_value[registers_[i].address()] &= ~registers_[i].mask();
            register_value[registers_[i].address()] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
            value >>= registers_[i].bit_count();
        }
    }
    return false;
 8003680:	2000      	movs	r0, #0
}
 8003682:	bd70      	pop	{r4, r5, r6, pc}
            register_value[registers_[i].address()] &= ~registers_[i].mask();
 8003684:	6804      	ldr	r4, [r0, #0]
 8003686:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 800368a:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
 800368e:	6876      	ldr	r6, [r6, #4]
 8003690:	5d54      	ldrb	r4, [r2, r5]
 8003692:	ea24 0406 	bic.w	r4, r4, r6
 8003696:	5554      	strb	r4, [r2, r5]
            register_value[registers_[i].address()] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
 8003698:	6805      	ldr	r5, [r0, #0]
 800369a:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 800369e:	78e6      	ldrb	r6, [r4, #3]
 80036a0:	6864      	ldr	r4, [r4, #4]
 80036a2:	f835 5033 	ldrh.w	r5, [r5, r3, lsl #3]
 80036a6:	40f4      	lsrs	r4, r6
 80036a8:	400c      	ands	r4, r1
 80036aa:	40b4      	lsls	r4, r6
 80036ac:	5d56      	ldrb	r6, [r2, r5]
 80036ae:	4334      	orrs	r4, r6
 80036b0:	5554      	strb	r4, [r2, r5]
    return bit_count_;
 80036b2:	6804      	ldr	r4, [r0, #0]
 80036b4:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
            value >>= registers_[i].bit_count();
 80036b8:	78a4      	ldrb	r4, [r4, #2]
 80036ba:	40e1      	lsrs	r1, r4
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 80036bc:	e7de      	b.n	800367c <_ZNK13Address_field9set_valueEmPhi+0x36>
        for (int i = 0; i < reg_count_; ++i) {
 80036be:	7904      	ldrb	r4, [r0, #4]
 80036c0:	429c      	cmp	r4, r3
 80036c2:	dddd      	ble.n	8003680 <_ZNK13Address_field9set_valueEmPhi+0x3a>
            register_value[registers_[i].address()] &= ~registers_[i].mask();
 80036c4:	6804      	ldr	r4, [r0, #0]
 80036c6:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 80036ca:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
 80036ce:	6876      	ldr	r6, [r6, #4]
 80036d0:	5d54      	ldrb	r4, [r2, r5]
 80036d2:	ea24 0406 	bic.w	r4, r4, r6
 80036d6:	5554      	strb	r4, [r2, r5]
            register_value[registers_[i].address()] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
 80036d8:	6805      	ldr	r5, [r0, #0]
 80036da:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 80036de:	78e6      	ldrb	r6, [r4, #3]
 80036e0:	6864      	ldr	r4, [r4, #4]
 80036e2:	f835 5033 	ldrh.w	r5, [r5, r3, lsl #3]
 80036e6:	40f4      	lsrs	r4, r6
 80036e8:	400c      	ands	r4, r1
 80036ea:	40b4      	lsls	r4, r6
 80036ec:	5d56      	ldrb	r6, [r2, r5]
 80036ee:	4334      	orrs	r4, r6
 80036f0:	5554      	strb	r4, [r2, r5]
    return bit_count_;
 80036f2:	6804      	ldr	r4, [r0, #0]
 80036f4:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
            value >>= registers_[i].bit_count();
 80036f8:	78a4      	ldrb	r4, [r4, #2]
        for (int i = 0; i < reg_count_; ++i) {
 80036fa:	3301      	adds	r3, #1
            value >>= registers_[i].bit_count();
 80036fc:	40e1      	lsrs	r1, r4
        for (int i = 0; i < reg_count_; ++i) {
 80036fe:	e7de      	b.n	80036be <_ZNK13Address_field9set_valueEmPhi+0x78>
        return true;
 8003700:	2001      	movs	r0, #1
 8003702:	e7be      	b.n	8003682 <_ZNK13Address_field9set_valueEmPhi+0x3c>

08003704 <_ZNK13Address_field9get_valueERK11LoRa_packeth>:

#if defined( ADD_LORA_PACKET_CODE )
uint32_t Address_field::get_value(const class LoRa_packet& packet, uint8_t bias) const {
 8003704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if ((SIZE_LORA_PACKET_MAX_LEN - bias) < ((uint32_t)max_address_ + 1))
 8003708:	88c3      	ldrh	r3, [r0, #6]
uint32_t Address_field::get_value(const class LoRa_packet& packet, uint8_t bias) const {
 800370a:	4616      	mov	r6, r2
    if ((SIZE_LORA_PACKET_MAX_LEN - bias) < ((uint32_t)max_address_ + 1))
 800370c:	3301      	adds	r3, #1
 800370e:	f1c2 0232 	rsb	r2, r2, #50	; 0x32
 8003712:	429a      	cmp	r2, r3
uint32_t Address_field::get_value(const class LoRa_packet& packet, uint8_t bias) const {
 8003714:	4604      	mov	r4, r0
 8003716:	460d      	mov	r5, r1
    if ((SIZE_LORA_PACKET_MAX_LEN - bias) < ((uint32_t)max_address_ + 1))
 8003718:	d33c      	bcc.n	8003794 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0x90>
        return -1;
    uint32_t value = 0;
    if(reg_revers_) {
 800371a:	7940      	ldrb	r0, [r0, #5]
 800371c:	b1f0      	cbz	r0, 800375c <_ZNK13Address_field9get_valueERK11LoRa_packeth+0x58>
        for (int i = 0; i < reg_count_; ++i) {
 800371e:	2700      	movs	r7, #0
    uint32_t value = 0;
 8003720:	4638      	mov	r0, r7
        for (int i = 0; i < reg_count_; ++i) {
 8003722:	7923      	ldrb	r3, [r4, #4]
 8003724:	42bb      	cmp	r3, r7
 8003726:	dd37      	ble.n	8003798 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0x94>
            value <<= registers_[i].bit_count();
 8003728:	6823      	ldr	r3, [r4, #0]
 800372a:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 800372e:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
            value |= (packet[registers_[i].address() + bias] & registers_[i].mask()) >> registers_[i].bit_bias();
 8003732:	f833 1037 	ldrh.w	r1, [r3, r7, lsl #3]
            value <<= registers_[i].bit_count();
 8003736:	f892 8002 	ldrb.w	r8, [r2, #2]
            value |= (packet[registers_[i].address() + bias] & registers_[i].mask()) >> registers_[i].bit_bias();
 800373a:	4431      	add	r1, r6
            value <<= registers_[i].bit_count();
 800373c:	fa00 f808 	lsl.w	r8, r0, r8
            value |= (packet[registers_[i].address() + bias] & registers_[i].mask()) >> registers_[i].bit_bias();
 8003740:	4628      	mov	r0, r5
 8003742:	f001 f860 	bl	8004806 <_ZNK11LoRa_packetixEi>
 8003746:	6822      	ldr	r2, [r4, #0]
 8003748:	7803      	ldrb	r3, [r0, #0]
 800374a:	444a      	add	r2, r9
 800374c:	6850      	ldr	r0, [r2, #4]
        for (int i = 0; i < reg_count_; ++i) {
 800374e:	3701      	adds	r7, #1
            value |= (packet[registers_[i].address() + bias] & registers_[i].mask()) >> registers_[i].bit_bias();
 8003750:	4003      	ands	r3, r0
 8003752:	78d0      	ldrb	r0, [r2, #3]
 8003754:	40c3      	lsrs	r3, r0
 8003756:	ea43 0008 	orr.w	r0, r3, r8
        for (int i = 0; i < reg_count_; ++i) {
 800375a:	e7e2      	b.n	8003722 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0x1e>
        }
    }
    else {
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 800375c:	7927      	ldrb	r7, [r4, #4]
 800375e:	3f01      	subs	r7, #1
 8003760:	d31a      	bcc.n	8003798 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0x94>
            value <<= registers_[i].bit_count();
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 8003768:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
 800376c:	f892 8002 	ldrb.w	r8, [r2, #2]
            value |= (packet[registers_[i].address() + bias] & registers_[i].mask()) >> registers_[i].bit_bias();
 8003770:	f833 1037 	ldrh.w	r1, [r3, r7, lsl #3]
            value <<= registers_[i].bit_count();
 8003774:	fa00 f808 	lsl.w	r8, r0, r8
            value |= (packet[registers_[i].address() + bias] & registers_[i].mask()) >> registers_[i].bit_bias();
 8003778:	4431      	add	r1, r6
 800377a:	4628      	mov	r0, r5
 800377c:	f001 f843 	bl	8004806 <_ZNK11LoRa_packetixEi>
 8003780:	6822      	ldr	r2, [r4, #0]
 8003782:	7803      	ldrb	r3, [r0, #0]
 8003784:	444a      	add	r2, r9
 8003786:	6850      	ldr	r0, [r2, #4]
 8003788:	4003      	ands	r3, r0
 800378a:	78d0      	ldrb	r0, [r2, #3]
 800378c:	40c3      	lsrs	r3, r0
 800378e:	ea43 0008 	orr.w	r0, r3, r8
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 8003792:	e7e4      	b.n	800375e <_ZNK13Address_field9get_valueERK11LoRa_packeth+0x5a>
        return -1;
 8003794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
    }
    return value;
}
 8003798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800379c <_ZNK13Address_field9set_valueEmR11LoRa_packeth>:
bool Address_field::set_value(uint32_t value, class LoRa_packet& packet, uint8_t bias) const {
 800379c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037a0:	4617      	mov	r7, r2
 80037a2:	4698      	mov	r8, r3
    if (((SIZE_LORA_PACKET_MAX_LEN - bias) < ((uint32_t)max_address_ + 1)) || (mode_ == 'r') ||
 80037a4:	f1c3 0232 	rsb	r2, r3, #50	; 0x32
 80037a8:	88c3      	ldrh	r3, [r0, #6]
bool Address_field::set_value(uint32_t value, class LoRa_packet& packet, uint8_t bias) const {
 80037aa:	4604      	mov	r4, r0
    if (((SIZE_LORA_PACKET_MAX_LEN - bias) < ((uint32_t)max_address_ + 1)) || (mode_ == 'r') ||
 80037ac:	3301      	adds	r3, #1
 80037ae:	429a      	cmp	r2, r3
bool Address_field::set_value(uint32_t value, class LoRa_packet& packet, uint8_t bias) const {
 80037b0:	460d      	mov	r5, r1
    if (((SIZE_LORA_PACKET_MAX_LEN - bias) < ((uint32_t)max_address_ + 1)) || (mode_ == 'r') ||
 80037b2:	f0c0 8092 	bcc.w	80038da <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x13e>
 80037b6:	7e03      	ldrb	r3, [r0, #24]
 80037b8:	2b72      	cmp	r3, #114	; 0x72
 80037ba:	f000 808e 	beq.w	80038da <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x13e>
 80037be:	6883      	ldr	r3, [r0, #8]
 80037c0:	428b      	cmp	r3, r1
 80037c2:	f200 808a 	bhi.w	80038da <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x13e>
                (value < min_value_) || (value > max_value_))
 80037c6:	68c3      	ldr	r3, [r0, #12]
 80037c8:	428b      	cmp	r3, r1
 80037ca:	f0c0 8086 	bcc.w	80038da <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x13e>
        return true;
    for (uint32_t i = 0; i < reserv_count_; ++i)
 80037ce:	2300      	movs	r3, #0
 80037d0:	6942      	ldr	r2, [r0, #20]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d006      	beq.n	80037e4 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x48>
        if (value == reserved_value_[i])
 80037d6:	6921      	ldr	r1, [r4, #16]
 80037d8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80037dc:	42a9      	cmp	r1, r5
 80037de:	d07c      	beq.n	80038da <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x13e>
    for (uint32_t i = 0; i < reserv_count_; ++i)
 80037e0:	3301      	adds	r3, #1
 80037e2:	e7f6      	b.n	80037d2 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x36>
            return true;

    // while(packet.get_len() < max_address_ + bias)
    //     packet.add_packet_data(0);
    packet.add_packet_data(&packet[packet.get_len()-1], max_address_ + bias - packet.get_len() + 1);
 80037e4:	4638      	mov	r0, r7
 80037e6:	f001 f804 	bl	80047f2 <_ZNK11LoRa_packet7get_lenEv>
 80037ea:	1e41      	subs	r1, r0, #1
 80037ec:	4638      	mov	r0, r7
 80037ee:	f001 f806 	bl	80047fe <_ZN11LoRa_packetixEi>
 80037f2:	4681      	mov	r9, r0
 80037f4:	4638      	mov	r0, r7
 80037f6:	79a6      	ldrb	r6, [r4, #6]
 80037f8:	f000 fffb 	bl	80047f2 <_ZNK11LoRa_packet7get_lenEv>
 80037fc:	4446      	add	r6, r8
 80037fe:	b2f6      	uxtb	r6, r6
 8003800:	3601      	adds	r6, #1
 8003802:	1a36      	subs	r6, r6, r0
 8003804:	b2f2      	uxtb	r2, r6
 8003806:	4649      	mov	r1, r9
 8003808:	4638      	mov	r0, r7
 800380a:	f000 ffc3 	bl	8004794 <_ZN11LoRa_packet15add_packet_dataEPKhh>

    if(reg_revers_) {
 800380e:	7966      	ldrb	r6, [r4, #5]
 8003810:	b396      	cbz	r6, 8003878 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0xdc>
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 8003812:	7926      	ldrb	r6, [r4, #4]
 8003814:	3e01      	subs	r6, #1
 8003816:	d202      	bcs.n	800381e <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x82>
            packet[registers_[i].address() + bias] &= ~registers_[i].mask();
            packet[registers_[i].address() + bias] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
            value >>= registers_[i].bit_count();
        }
    }
    return false;
 8003818:	2000      	movs	r0, #0
}
 800381a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            packet[registers_[i].address() + bias] &= ~registers_[i].mask();
 800381e:	6822      	ldr	r2, [r4, #0]
 8003820:	4638      	mov	r0, r7
 8003822:	f832 1036 	ldrh.w	r1, [r2, r6, lsl #3]
 8003826:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	4441      	add	r1, r8
 800382e:	ea6f 0903 	mvn.w	r9, r3
 8003832:	f000 ffe4 	bl	80047fe <_ZN11LoRa_packetixEi>
 8003836:	7803      	ldrb	r3, [r0, #0]
 8003838:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
 800383c:	ea03 0309 	and.w	r3, r3, r9
 8003840:	7003      	strb	r3, [r0, #0]
            packet[registers_[i].address() + bias] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
 8003842:	6822      	ldr	r2, [r4, #0]
 8003844:	4638      	mov	r0, r7
 8003846:	eb02 030a 	add.w	r3, r2, sl
 800384a:	78d9      	ldrb	r1, [r3, #3]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	fa23 f901 	lsr.w	r9, r3, r1
 8003852:	ea09 0905 	and.w	r9, r9, r5
 8003856:	fa09 f901 	lsl.w	r9, r9, r1
 800385a:	f832 1036 	ldrh.w	r1, [r2, r6, lsl #3]
 800385e:	4441      	add	r1, r8
 8003860:	f000 ffcd 	bl	80047fe <_ZN11LoRa_packetixEi>
 8003864:	7803      	ldrb	r3, [r0, #0]
 8003866:	ea43 0909 	orr.w	r9, r3, r9
 800386a:	f880 9000 	strb.w	r9, [r0]
    return bit_count_;
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	4453      	add	r3, sl
            value >>= registers_[i].bit_count();
 8003872:	789b      	ldrb	r3, [r3, #2]
 8003874:	40dd      	lsrs	r5, r3
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 8003876:	e7cd      	b.n	8003814 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x78>
        for (int i = 0; i < reg_count_; ++i) {
 8003878:	7923      	ldrb	r3, [r4, #4]
 800387a:	42b3      	cmp	r3, r6
 800387c:	ddcc      	ble.n	8003818 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x7c>
            packet[registers_[i].address() + bias] &= ~registers_[i].mask();
 800387e:	6822      	ldr	r2, [r4, #0]
 8003880:	4638      	mov	r0, r7
 8003882:	f832 1036 	ldrh.w	r1, [r2, r6, lsl #3]
 8003886:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	4441      	add	r1, r8
 800388e:	ea6f 0903 	mvn.w	r9, r3
 8003892:	f000 ffb4 	bl	80047fe <_ZN11LoRa_packetixEi>
 8003896:	7803      	ldrb	r3, [r0, #0]
 8003898:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
 800389c:	ea03 0309 	and.w	r3, r3, r9
 80038a0:	7003      	strb	r3, [r0, #0]
            packet[registers_[i].address() + bias] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
 80038a2:	6822      	ldr	r2, [r4, #0]
 80038a4:	4638      	mov	r0, r7
 80038a6:	eb02 030a 	add.w	r3, r2, sl
 80038aa:	78d9      	ldrb	r1, [r3, #3]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	fa23 f901 	lsr.w	r9, r3, r1
 80038b2:	ea09 0905 	and.w	r9, r9, r5
 80038b6:	fa09 f901 	lsl.w	r9, r9, r1
 80038ba:	f832 1036 	ldrh.w	r1, [r2, r6, lsl #3]
        for (int i = 0; i < reg_count_; ++i) {
 80038be:	3601      	adds	r6, #1
            packet[registers_[i].address() + bias] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
 80038c0:	4441      	add	r1, r8
 80038c2:	f000 ff9c 	bl	80047fe <_ZN11LoRa_packetixEi>
 80038c6:	7803      	ldrb	r3, [r0, #0]
 80038c8:	ea43 0909 	orr.w	r9, r3, r9
 80038cc:	f880 9000 	strb.w	r9, [r0]
    return bit_count_;
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	4453      	add	r3, sl
            value >>= registers_[i].bit_count();
 80038d4:	789b      	ldrb	r3, [r3, #2]
 80038d6:	40dd      	lsrs	r5, r3
        for (int i = 0; i < reg_count_; ++i) {
 80038d8:	e7ce      	b.n	8003878 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0xdc>
        return true;
 80038da:	2001      	movs	r0, #1
 80038dc:	e79d      	b.n	800381a <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x7e>

080038de <_ZNK13Address_field13get_registersEv>:
#endif

const Register *Address_field::get_registers() const {
    return registers_;
}
 80038de:	6800      	ldr	r0, [r0, #0]
 80038e0:	4770      	bx	lr

080038e2 <_ZNK13Address_field13get_reg_countEv>:
uint8_t Address_field::get_reg_count() const {
    return reg_count_;
}
 80038e2:	7900      	ldrb	r0, [r0, #4]
 80038e4:	4770      	bx	lr

080038e6 <_ZeqRK13Address_fieldS1_>:
}
char Address_field::get_mode() const {
    return mode_;
}

bool operator==(const Address_field& left, const Address_field& right) {
 80038e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(left.reg_count_ != right.reg_count_)
 80038ea:	f890 8004 	ldrb.w	r8, [r0, #4]
 80038ee:	790b      	ldrb	r3, [r1, #4]
bool operator==(const Address_field& left, const Address_field& right) {
 80038f0:	4604      	mov	r4, r0
    if(left.reg_count_ != right.reg_count_)
 80038f2:	4543      	cmp	r3, r8
bool operator==(const Address_field& left, const Address_field& right) {
 80038f4:	460d      	mov	r5, r1
    if(left.reg_count_ != right.reg_count_)
 80038f6:	d131      	bne.n	800395c <_ZeqRK13Address_fieldS1_+0x76>
        return false;
    if(left.max_address_ != right.max_address_)
 80038f8:	88c2      	ldrh	r2, [r0, #6]
 80038fa:	88cb      	ldrh	r3, [r1, #6]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d12d      	bne.n	800395c <_ZeqRK13Address_fieldS1_+0x76>
        return false;
    if(left.min_value_ != right.min_value_)
 8003900:	6882      	ldr	r2, [r0, #8]
 8003902:	688b      	ldr	r3, [r1, #8]
 8003904:	429a      	cmp	r2, r3
 8003906:	d129      	bne.n	800395c <_ZeqRK13Address_fieldS1_+0x76>
        return false;
    if(left.max_value_ != right.max_value_)
 8003908:	68c2      	ldr	r2, [r0, #12]
 800390a:	68cb      	ldr	r3, [r1, #12]
 800390c:	429a      	cmp	r2, r3
 800390e:	d125      	bne.n	800395c <_ZeqRK13Address_fieldS1_+0x76>
        return false;
    if(left.reserv_count_ != right.reserv_count_)
 8003910:	6947      	ldr	r7, [r0, #20]
 8003912:	694b      	ldr	r3, [r1, #20]
 8003914:	429f      	cmp	r7, r3
 8003916:	d121      	bne.n	800395c <_ZeqRK13Address_fieldS1_+0x76>
        return false;
    if(left.mode_ != right.mode_)
 8003918:	7e02      	ldrb	r2, [r0, #24]
 800391a:	7e0b      	ldrb	r3, [r1, #24]
 800391c:	429a      	cmp	r2, r3
 800391e:	d11d      	bne.n	800395c <_ZeqRK13Address_fieldS1_+0x76>
        return false;
    for(int i = 0; i < left.reg_count_; ++i) {
 8003920:	2600      	movs	r6, #0
 8003922:	45b0      	cmp	r8, r6
 8003924:	dd0a      	ble.n	800393c <_ZeqRK13Address_fieldS1_+0x56>
        if(left.registers_[i] != right.registers_[i])
 8003926:	6829      	ldr	r1, [r5, #0]
 8003928:	6820      	ldr	r0, [r4, #0]
 800392a:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800392e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8003932:	f7ff fdf4 	bl	800351e <_ZneRK8RegisterS1_>
 8003936:	b988      	cbnz	r0, 800395c <_ZeqRK13Address_fieldS1_+0x76>
    for(int i = 0; i < left.reg_count_; ++i) {
 8003938:	3601      	adds	r6, #1
 800393a:	e7f2      	b.n	8003922 <_ZeqRK13Address_fieldS1_+0x3c>
            return false;
    }
    for(uint32_t i = 0; i < left.reserv_count_; ++i) {
 800393c:	2300      	movs	r3, #0
 800393e:	429f      	cmp	r7, r3
 8003940:	d009      	beq.n	8003956 <_ZeqRK13Address_fieldS1_+0x70>
        if(left.reserved_value_[i] != right.reserved_value_[i])
 8003942:	6921      	ldr	r1, [r4, #16]
 8003944:	692a      	ldr	r2, [r5, #16]
 8003946:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800394a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800394e:	4291      	cmp	r1, r2
 8003950:	d104      	bne.n	800395c <_ZeqRK13Address_fieldS1_+0x76>
    for(uint32_t i = 0; i < left.reserv_count_; ++i) {
 8003952:	3301      	adds	r3, #1
 8003954:	e7f3      	b.n	800393e <_ZeqRK13Address_fieldS1_+0x58>
            return false;
    }
    return true;
 8003956:	2001      	movs	r0, #1
}
 8003958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return false;
 800395c:	2000      	movs	r0, #0
 800395e:	e7fb      	b.n	8003958 <_ZeqRK13Address_fieldS1_+0x72>

08003960 <_ZN10LoRa_classD1Ev>:
	init(nullptr);
}
LoRa_class::LoRa_class(SPI_HandleTypeDef *spi) {
	init(spi);
}
LoRa_class::~LoRa_class() {
 8003960:	b510      	push	{r4, lr}
 8003962:	4604      	mov	r4, r0
    if(_spi != nullptr)
 8003964:	6800      	ldr	r0, [r0, #0]
 8003966:	b110      	cbz	r0, 800396e <_ZN10LoRa_classD1Ev+0xe>
        delete _spi;
 8003968:	2158      	movs	r1, #88	; 0x58
 800396a:	f007 fadf 	bl	800af2c <_ZdlPvj>
LoRa_class::~LoRa_class() {
 800396e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8003972:	f000 ff91 	bl	8004898 <_ZN13LoRa_registerD1Ev>
}
 8003976:	4620      	mov	r0, r4
 8003978:	bd10      	pop	{r4, pc}
	...

0800397c <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef>:

void LoRa_class::init(SPI_HandleTypeDef *spi) {
 800397c:	b4f0      	push	{r4, r5, r6, r7}
	_reset_pin = LORA_RESET_Pin;
 800397e:	f44f 6300 	mov.w	r3, #2048	; 0x800
	_reset_port = LORA_RESET_GPIO_Port;
	_nss_pin = LORA_NSS_Pin;
	_nss_port = LORA_NSS_GPIO_Port;
#ifdef LoRa_DIO0_Pin
	_dio0_pin = LORA_DIO0_Pin;
 8003982:	f44f 6580 	mov.w	r5, #1024	; 0x400
	_reset_port = LORA_RESET_GPIO_Port;
 8003986:	4c0c      	ldr	r4, [pc, #48]	; (80039b8 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef+0x3c>)
#else
	_dio3_pin = 0;
	_dio3_port = 0;
#endif
	_spi = spi;
	_frequency = 0;
 8003988:	2600      	movs	r6, #0
	_reset_port = LORA_RESET_GPIO_Port;
 800398a:	6084      	str	r4, [r0, #8]
	_dio0_port = LORA_DIO0_GPIO_Port;
 800398c:	6184      	str	r4, [r0, #24]
	_dio1_port = LORA_DIO1_GPIO_Port;
 800398e:	6204      	str	r4, [r0, #32]
	_dio3_pin = 0;
 8003990:	2400      	movs	r4, #0
	_frequency = 0;
 8003992:	2700      	movs	r7, #0
	_reset_pin = LORA_RESET_Pin;
 8003994:	8083      	strh	r3, [r0, #4]
	_dio0_pin = LORA_DIO0_Pin;
 8003996:	8285      	strh	r5, [r0, #20]
	_nss_pin = LORA_NSS_Pin;
 8003998:	2310      	movs	r3, #16
	_dio1_pin = LORA_DIO1_Pin;
 800399a:	2504      	movs	r5, #4
	_nss_port = LORA_NSS_GPIO_Port;
 800399c:	4a07      	ldr	r2, [pc, #28]	; (80039bc <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef+0x40>)
	_FifoTxBaseAddr = 0;
 800399e:	8704      	strh	r4, [r0, #56]	; 0x38
	_frequency = 0;
 80039a0:	e9c0 670c 	strd	r6, r7, [r0, #48]	; 0x30
	_dio1_pin = LORA_DIO1_Pin;
 80039a4:	8385      	strh	r5, [r0, #28]
	_dio3_pin = 0;
 80039a6:	8484      	strh	r4, [r0, #36]	; 0x24
	_dio3_port = 0;
 80039a8:	6284      	str	r4, [r0, #40]	; 0x28
	_nss_pin = LORA_NSS_Pin;
 80039aa:	8183      	strh	r3, [r0, #12]
	_nss_port = LORA_NSS_GPIO_Port;
 80039ac:	6102      	str	r2, [r0, #16]
	_spi = spi;
 80039ae:	6001      	str	r1, [r0, #0]
	_packet_length = 0;
	_reg_field.init(spi, _nss_port, _nss_pin);
}
 80039b0:	bcf0      	pop	{r4, r5, r6, r7}
	_reg_field.init(spi, _nss_port, _nss_pin);
 80039b2:	303c      	adds	r0, #60	; 0x3c
 80039b4:	f000 bf71 	b.w	800489a <_ZN13LoRa_register4initEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 80039b8:	40010c00 	.word	0x40010c00
 80039bc:	40010800 	.word	0x40010800

080039c0 <_ZN10LoRa_classC1Ev>:
LoRa_class::LoRa_class(/* args */) {
 80039c0:	b510      	push	{r4, lr}
 80039c2:	4604      	mov	r4, r0
 80039c4:	303c      	adds	r0, #60	; 0x3c
 80039c6:	f000 ff7b 	bl	80048c0 <_ZN13LoRa_registerC1Ev>
	init(nullptr);
 80039ca:	4620      	mov	r0, r4
 80039cc:	2100      	movs	r1, #0
 80039ce:	f7ff ffd5 	bl	800397c <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef>
}
 80039d2:	4620      	mov	r0, r4
 80039d4:	bd10      	pop	{r4, pc}

080039d6 <_ZN10LoRa_class9field_setE13Address_fieldmb>:

uint8_t LoRa_class::field_set(Address_field field, uint32_t value, bool write) {
 80039d6:	b084      	sub	sp, #16
 80039d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039da:	b087      	sub	sp, #28
 80039dc:	ac0d      	add	r4, sp, #52	; 0x34
 80039de:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    uint8_t result;
    result = _reg_field.set_field_value(field, value);
 80039e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80039e4:	ad10      	add	r5, sp, #64	; 0x40
 80039e6:	9304      	str	r3, [sp, #16]
 80039e8:	f100 063c 	add.w	r6, r0, #60	; 0x3c
 80039ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80039f0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
uint8_t LoRa_class::field_set(Address_field field, uint32_t value, bool write) {
 80039f4:	f89d 7054 	ldrb.w	r7, [sp, #84]	; 0x54
    result = _reg_field.set_field_value(field, value);
 80039f8:	4630      	mov	r0, r6
 80039fa:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80039fe:	f001 f97b 	bl	8004cf8 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
    if(write) {
 8003a02:	b15f      	cbz	r7, 8003a1c <_ZN10LoRa_class9field_setE13Address_fieldmb+0x46>
        result = _reg_field.register_write(field, true, true);
 8003a04:	2301      	movs	r3, #1
 8003a06:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003a0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003a0e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003a12:	4630      	mov	r0, r6
 8003a14:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003a18:	f001 f9b6 	bl	8004d88 <_ZN13LoRa_register14register_writeE13Address_fieldbb>
    }
    return result;
}
 8003a1c:	b007      	add	sp, #28
 8003a1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003a22:	b004      	add	sp, #16
 8003a24:	4770      	bx	lr

08003a26 <_ZN10LoRa_class9field_setEP13Address_fieldPmhb>:
uint8_t LoRa_class::field_set(Address_field* fields, uint32_t* values, uint8_t amt, bool write) {
 8003a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t result;
    result = _reg_field.set_field_value(fields, values, amt);
 8003a2a:	f100 043c 	add.w	r4, r0, #60	; 0x3c
uint8_t LoRa_class::field_set(Address_field* fields, uint32_t* values, uint8_t amt, bool write) {
 8003a2e:	f89d 7018 	ldrb.w	r7, [sp, #24]
    result = _reg_field.set_field_value(fields, values, amt);
 8003a32:	4620      	mov	r0, r4
uint8_t LoRa_class::field_set(Address_field* fields, uint32_t* values, uint8_t amt, bool write) {
 8003a34:	460d      	mov	r5, r1
 8003a36:	461e      	mov	r6, r3
    result = _reg_field.set_field_value(fields, values, amt);
 8003a38:	f001 f91a 	bl	8004c70 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
    if(write) {
 8003a3c:	b147      	cbz	r7, 8003a50 <_ZN10LoRa_class9field_setEP13Address_fieldPmhb+0x2a>
        result = _reg_field.register_write(fields, amt, true, true);
 8003a3e:	2301      	movs	r3, #1
 8003a40:	4632      	mov	r2, r6
 8003a42:	4629      	mov	r1, r5
 8003a44:	4620      	mov	r0, r4
 8003a46:	9306      	str	r3, [sp, #24]
    }
    return result;
}
 8003a48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        result = _reg_field.register_write(fields, amt, true, true);
 8003a4c:	f001 b966 	b.w	8004d1c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
}
 8003a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003a54 <_ZN10LoRa_class9field_getE13Address_fieldPmb>:

uint8_t LoRa_class::field_get(Address_field field, uint32_t* value, bool read) {
 8003a54:	b084      	sub	sp, #16
 8003a56:	b530      	push	{r4, r5, lr}
 8003a58:	4605      	mov	r5, r0
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	ac0b      	add	r4, sp, #44	; 0x2c
 8003a5e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return _reg_field.get_field_value(field, value, read);
 8003a62:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8003a66:	9305      	str	r3, [sp, #20]
 8003a68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003a6a:	9304      	str	r3, [sp, #16]
 8003a6c:	ab0e      	add	r3, sp, #56	; 0x38
 8003a6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a70:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003a74:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8003a78:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003a7c:	f001 f8e5 	bl	8004c4a <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>
}
 8003a80:	b007      	add	sp, #28
 8003a82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a86:	b004      	add	sp, #16
 8003a88:	4770      	bx	lr

08003a8a <_ZN10LoRa_class9field_getEP13Address_fieldPmhb>:
uint8_t LoRa_class::field_get(Address_field fields[], uint32_t* values, uint8_t amt, bool read) {
 8003a8a:	b410      	push	{r4}
 8003a8c:	f89d 4004 	ldrb.w	r4, [sp, #4]
    return _reg_field.get_field_value(fields, values, amt, read);
 8003a90:	303c      	adds	r0, #60	; 0x3c
 8003a92:	9401      	str	r4, [sp, #4]
}
 8003a94:	bc10      	pop	{r4}
    return _reg_field.get_field_value(fields, values, amt, read);
 8003a96:	f001 b8b0 	b.w	8004bfa <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb>
	...

08003a9c <_ZN10LoRa_class8set_modeEh>:
    // переход в режим сна
    mode_sleep();
}


uint8_t LoRa_class::set_mode(uint8_t mode) {
 8003a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8003a9e:	4d14      	ldr	r5, [pc, #80]	; (8003af0 <_ZN10LoRa_class8set_modeEh+0x54>)
uint8_t LoRa_class::set_mode(uint8_t mode) {
 8003aa0:	b09b      	sub	sp, #108	; 0x6c
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8003aa2:	ac05      	add	r4, sp, #20
uint8_t LoRa_class::set_mode(uint8_t mode) {
 8003aa4:	4606      	mov	r6, r0
 8003aa6:	460f      	mov	r7, r1
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8003aa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003aac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003ab0:	4d10      	ldr	r5, [pc, #64]	; (8003af4 <_ZN10LoRa_class8set_modeEh+0x58>)
 8003ab2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ab8:	ac0c      	add	r4, sp, #48	; 0x30
 8003aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003abc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003ac0:	4d0d      	ldr	r5, [pc, #52]	; (8003af8 <_ZN10LoRa_class8set_modeEh+0x5c>)
 8003ac2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ac6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ac8:	ac13      	add	r4, sp, #76	; 0x4c
 8003aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003acc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    uint32_t values[3] = {1, 0, mode};
 8003ad0:	2301      	movs	r3, #1
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8003ad2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    uint32_t values[3] = {1, 0, mode};
 8003ad6:	2200      	movs	r2, #0
    return field_set(fields, values, 3);
 8003ad8:	9300      	str	r3, [sp, #0]
    uint32_t values[3] = {1, 0, mode};
 8003ada:	e9cd 3202 	strd	r3, r2, [sp, #8]
    return field_set(fields, values, 3);
 8003ade:	4630      	mov	r0, r6
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	aa02      	add	r2, sp, #8
 8003ae4:	a905      	add	r1, sp, #20
    uint32_t values[3] = {1, 0, mode};
 8003ae6:	9704      	str	r7, [sp, #16]
    return field_set(fields, values, 3);
 8003ae8:	f7ff ff9d 	bl	8003a26 <_ZN10LoRa_class9field_setEP13Address_fieldPmhb>
}
 8003aec:	b01b      	add	sp, #108	; 0x6c
 8003aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003af0:	20001d44 	.word	0x20001d44
 8003af4:	20001d7c 	.word	0x20001d7c
 8003af8:	20001db4 	.word	0x20001db4

08003afc <_ZN10LoRa_class10mode_sleepEv>:
// Режим сна/настройки
uint8_t LoRa_class::mode_sleep() {
    return set_mode(MODE_SLEEP);
 8003afc:	2100      	movs	r1, #0
 8003afe:	f7ff bfcd 	b.w	8003a9c <_ZN10LoRa_class8set_modeEh>

08003b02 <_ZN10LoRa_class10mode_STDBYEv>:
}
// Режим ожидания
uint8_t LoRa_class::mode_STDBY() {
    return set_mode(MODE_STDBY);
 8003b02:	2101      	movs	r1, #1
 8003b04:	f7ff bfca 	b.w	8003a9c <_ZN10LoRa_class8set_modeEh>

08003b08 <_ZN10LoRa_class7mode_TXEb>:
}
// Режим отправки
uint8_t LoRa_class::mode_TX(bool set_dio) {
 8003b08:	b530      	push	{r4, r5, lr}
    if (set_dio & (_dio0_pin != 0))
 8003b0a:	8a83      	ldrh	r3, [r0, #20]
uint8_t LoRa_class::mode_TX(bool set_dio) {
 8003b0c:	4604      	mov	r4, r0
 8003b0e:	b087      	sub	sp, #28
    if (set_dio & (_dio0_pin != 0))
 8003b10:	b173      	cbz	r3, 8003b30 <_ZN10LoRa_class7mode_TXEb+0x28>
 8003b12:	b169      	cbz	r1, 8003b30 <_ZN10LoRa_class7mode_TXEb+0x28>
        field_set(Dio0Mapping, 1);
 8003b14:	2301      	movs	r3, #1
 8003b16:	4d0a      	ldr	r5, [pc, #40]	; (8003b40 <_ZN10LoRa_class7mode_TXEb+0x38>)
 8003b18:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003b1c:	f105 030c 	add.w	r3, r5, #12
 8003b20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b22:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003b26:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f7ff ff53 	bl	80039d6 <_ZN10LoRa_class9field_setE13Address_fieldmb>
    return set_mode(MODE_TX);
 8003b30:	2103      	movs	r1, #3
 8003b32:	4620      	mov	r0, r4
}
 8003b34:	b007      	add	sp, #28
 8003b36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return set_mode(MODE_TX);
 8003b3a:	f7ff bfaf 	b.w	8003a9c <_ZN10LoRa_class8set_modeEh>
 8003b3e:	bf00      	nop
 8003b40:	20001c10 	.word	0x20001c10

08003b44 <_ZN10LoRa_class9mode_FSTXEv>:
uint8_t LoRa_class::mode_FSTX() {
    return set_mode(MODE_FSTX);
 8003b44:	2102      	movs	r1, #2
 8003b46:	f7ff bfa9 	b.w	8003a9c <_ZN10LoRa_class8set_modeEh>
	...

08003b4c <_ZN10LoRa_class14mode_RX_singleEb>:
        field_set(Dio1Mapping, 0);
    }
    return set_mode(MODE_RX_CONTINUOUS);
}
// Режим единичного приёма
uint8_t LoRa_class::mode_RX_single(bool set_dio) {
 8003b4c:	b570      	push	{r4, r5, r6, lr}
    if (set_dio & ((_dio0_pin != 0) || (_dio1_pin != 0))) {
 8003b4e:	8a83      	ldrh	r3, [r0, #20]
uint8_t LoRa_class::mode_RX_single(bool set_dio) {
 8003b50:	4606      	mov	r6, r0
 8003b52:	b08e      	sub	sp, #56	; 0x38
    if (set_dio & ((_dio0_pin != 0) || (_dio1_pin != 0))) {
 8003b54:	b90b      	cbnz	r3, 8003b5a <_ZN10LoRa_class14mode_RX_singleEb+0xe>
 8003b56:	8b83      	ldrh	r3, [r0, #28]
 8003b58:	b31b      	cbz	r3, 8003ba2 <_ZN10LoRa_class14mode_RX_singleEb+0x56>
 8003b5a:	b311      	cbz	r1, 8003ba2 <_ZN10LoRa_class14mode_RX_singleEb+0x56>
        field_set(Dio0Mapping, 0, false);
 8003b5c:	4d14      	ldr	r5, [pc, #80]	; (8003bb0 <_ZN10LoRa_class14mode_RX_singleEb+0x64>)
 8003b5e:	ac07      	add	r4, sp, #28
 8003b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    result = _reg_field.set_field_value(field, value);
 8003b68:	2500      	movs	r5, #0
 8003b6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003b6e:	ab0e      	add	r3, sp, #56	; 0x38
 8003b70:	9504      	str	r5, [sp, #16]
 8003b72:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8003b76:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003b7a:	ab07      	add	r3, sp, #28
 8003b7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b7e:	f106 003c 	add.w	r0, r6, #60	; 0x3c
 8003b82:	f001 f8b9 	bl	8004cf8 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
        field_set(Dio1Mapping, 0);
 8003b86:	2301      	movs	r3, #1
 8003b88:	4c0a      	ldr	r4, [pc, #40]	; (8003bb4 <_ZN10LoRa_class14mode_RX_singleEb+0x68>)
 8003b8a:	e9cd 5304 	strd	r5, r3, [sp, #16]
 8003b8e:	f104 030c 	add.w	r3, r4, #12
 8003b92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b94:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003b98:	4630      	mov	r0, r6
 8003b9a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003b9e:	f7ff ff1a 	bl	80039d6 <_ZN10LoRa_class9field_setE13Address_fieldmb>
    }
    return set_mode(MODE_RX_SINGLE);
 8003ba2:	2106      	movs	r1, #6
 8003ba4:	4630      	mov	r0, r6
}
 8003ba6:	b00e      	add	sp, #56	; 0x38
 8003ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return set_mode(MODE_RX_SINGLE);
 8003bac:	f7ff bf76 	b.w	8003a9c <_ZN10LoRa_class8set_modeEh>
 8003bb0:	20001c10 	.word	0x20001c10
 8003bb4:	20001c2c 	.word	0x20001c2c

08003bb8 <_ZN10LoRa_class12set_TX_powerEhbh>:
    return set_mode(MODE_CAD);
}


// Установка силы отправляемого пакета
uint8_t LoRa_class::set_TX_power(uint8_t power, bool paboost, uint8_t max_power) {
 8003bb8:	469c      	mov	ip, r3
 8003bba:	f1bc 0f07 	cmp.w	ip, #7
 8003bbe:	bf28      	it	cs
 8003bc0:	f04f 0c07 	movcs.w	ip, #7
 8003bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Address_field fields[4] = {PaDac, PaSelect, MaxPower, OutputPower};
 8003bc8:	4e2f      	ldr	r6, [pc, #188]	; (8003c88 <_ZN10LoRa_class12set_TX_powerEhbh+0xd0>)
uint8_t LoRa_class::set_TX_power(uint8_t power, bool paboost, uint8_t max_power) {
 8003bca:	b0a2      	sub	sp, #136	; 0x88
    Address_field fields[4] = {PaDac, PaSelect, MaxPower, OutputPower};
 8003bcc:	ad06      	add	r5, sp, #24
uint8_t LoRa_class::set_TX_power(uint8_t power, bool paboost, uint8_t max_power) {
 8003bce:	4607      	mov	r7, r0
 8003bd0:	4690      	mov	r8, r2
 8003bd2:	460c      	mov	r4, r1
    Address_field fields[4] = {PaDac, PaSelect, MaxPower, OutputPower};
 8003bd4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003bd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bd8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003bdc:	4e2b      	ldr	r6, [pc, #172]	; (8003c8c <_ZN10LoRa_class12set_TX_powerEhbh+0xd4>)
 8003bde:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003be2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003be4:	ad0d      	add	r5, sp, #52	; 0x34
 8003be6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003be8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003bec:	4e28      	ldr	r6, [pc, #160]	; (8003c90 <_ZN10LoRa_class12set_TX_powerEhbh+0xd8>)
 8003bee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003bf2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003bf4:	ad14      	add	r5, sp, #80	; 0x50
 8003bf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bf8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003bfc:	4e25      	ldr	r6, [pc, #148]	; (8003c94 <_ZN10LoRa_class12set_TX_powerEhbh+0xdc>)
 8003bfe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003c02:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003c04:	ad1b      	add	r5, sp, #108	; 0x6c
 8003c06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c08:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003c0c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    uint32_t pa_dac, pa_select;
    int16_t power_adjustment, min_power_value, max_power_value;
    if (max_power < 0x01)
 8003c10:	4665      	mov	r5, ip
        max_power = 0x01;
    else if (max_power > 0x07)
        max_power = 0x07;
    _reg_field.register_read(fields, 4);
 8003c12:	2301      	movs	r3, #1
 8003c14:	2d01      	cmp	r5, #1
 8003c16:	f04f 0204 	mov.w	r2, #4
 8003c1a:	a906      	add	r1, sp, #24
 8003c1c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003c20:	bf38      	it	cc
 8003c22:	2501      	movcc	r5, #1
 8003c24:	f000 ffb9 	bl	8004b9a <_ZN13LoRa_register13register_readEP13Address_fieldhb>
    // Изменение бита PABOOST
    if (paboost) {
 8003c28:	f1b8 0f00 	cmp.w	r8, #0
 8003c2c:	d025      	beq.n	8003c7a <_ZN10LoRa_class12set_TX_powerEhbh+0xc2>
        pa_select = 1;
        min_power_value = 2;
        max_power_value = 20;
 8003c2e:	2c11      	cmp	r4, #17
 8003c30:	f04f 0314 	mov.w	r3, #20
 8003c34:	f04f 0002 	mov.w	r0, #2
 8003c38:	bf8c      	ite	hi
 8003c3a:	f06f 0104 	mvnhi.w	r1, #4
 8003c3e:	f06f 0101 	mvnls.w	r1, #1
 8003c42:	2201      	movs	r2, #1
        min_power_value = -1;
        max_power_value = 14;
        power_adjustment = 1;
    }
    // Проверка выхода силы сигнала за диапазон
    if (power < min_power_value)
 8003c44:	4284      	cmp	r4, r0
        power = min_power_value;
 8003c46:	bfb8      	it	lt
 8003c48:	b2c4      	uxtblt	r4, r0
    if (power > max_power_value)
 8003c4a:	429c      	cmp	r4, r3
        power = max_power_value;
 8003c4c:	bfc8      	it	gt
 8003c4e:	b2dc      	uxtbgt	r4, r3
    // Корректировка параметра
    power += power_adjustment;
 8003c50:	440c      	add	r4, r1
 8003c52:	b2e4      	uxtb	r4, r4
    // Настройка флага высокого сигнала
    if (power > 17)
        pa_dac = RF_PADAC_20DBM_ON;
    else
        pa_dac = RF_PADAC_20DBM_OFF;
 8003c54:	2c11      	cmp	r4, #17
 8003c56:	bf8c      	ite	hi
 8003c58:	2307      	movhi	r3, #7
 8003c5a:	2304      	movls	r3, #4
    // Передача настроек
    uint32_t values[4] = {pa_dac, pa_select, max_power, power};
 8003c5c:	e9cd 3202 	strd	r3, r2, [sp, #8]
    return field_set(fields, values, 4);
 8003c60:	2301      	movs	r3, #1
 8003c62:	4638      	mov	r0, r7
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	aa02      	add	r2, sp, #8
 8003c68:	2304      	movs	r3, #4
 8003c6a:	a906      	add	r1, sp, #24
    uint32_t values[4] = {pa_dac, pa_select, max_power, power};
 8003c6c:	e9cd 5404 	strd	r5, r4, [sp, #16]
    return field_set(fields, values, 4);
 8003c70:	f7ff fed9 	bl	8003a26 <_ZN10LoRa_class9field_setEP13Address_fieldPmhb>
}
 8003c74:	b022      	add	sp, #136	; 0x88
 8003c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        max_power_value = 14;
 8003c7a:	230e      	movs	r3, #14
        min_power_value = -1;
 8003c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        power_adjustment = 1;
 8003c80:	2101      	movs	r1, #1
        pa_select = 0;
 8003c82:	4642      	mov	r2, r8
 8003c84:	e7de      	b.n	8003c44 <_ZN10LoRa_class12set_TX_powerEhbh+0x8c>
 8003c86:	bf00      	nop
 8003c88:	20001dec 	.word	0x20001dec
 8003c8c:	20001e08 	.word	0x20001e08
 8003c90:	20001d98 	.word	0x20001d98
 8003c94:	20001dd0 	.word	0x20001dd0

08003c98 <_ZN10LoRa_class13set_frequencyEy>:

// Установка частоты радиосигнала
uint8_t LoRa_class::set_frequency(uint64_t frequency) {
 8003c98:	b570      	push	{r4, r5, r6, lr}
    _frequency = frequency;
 8003c9a:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
uint8_t LoRa_class::set_frequency(uint64_t frequency) {
 8003c9e:	4615      	mov	r5, r2
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
    return field_set(Frf, frf);
 8003ca0:	2201      	movs	r2, #1
uint8_t LoRa_class::set_frequency(uint64_t frequency) {
 8003ca2:	b086      	sub	sp, #24
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
 8003ca4:	04d9      	lsls	r1, r3, #19
uint8_t LoRa_class::set_frequency(uint64_t frequency) {
 8003ca6:	4604      	mov	r4, r0
    return field_set(Frf, frf);
 8003ca8:	9205      	str	r2, [sp, #20]
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
 8003caa:	2300      	movs	r3, #0
 8003cac:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <_ZN10LoRa_class13set_frequencyEy+0x3c>)
 8003cae:	04e8      	lsls	r0, r5, #19
 8003cb0:	ea41 3155 	orr.w	r1, r1, r5, lsr #13
 8003cb4:	f7fd f9a0 	bl	8000ff8 <__aeabi_uldivmod>
    return field_set(Frf, frf);
 8003cb8:	4e07      	ldr	r6, [pc, #28]	; (8003cd8 <_ZN10LoRa_class13set_frequencyEy+0x40>)
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
 8003cba:	9004      	str	r0, [sp, #16]
    return field_set(Frf, frf);
 8003cbc:	f106 030c 	add.w	r3, r6, #12
 8003cc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cc2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003cc6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f7ff fe83 	bl	80039d6 <_ZN10LoRa_class9field_setE13Address_fieldmb>
}
 8003cd0:	b006      	add	sp, #24
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}
 8003cd4:	01e84800 	.word	0x01e84800
 8003cd8:	20001d0c 	.word	0x20001d0c

08003cdc <_ZN10LoRa_class20set_spreading_factorEh>:

// Установка силы коэффициента распространения SF
uint8_t LoRa_class::set_spreading_factor(uint8_t SF) {
 8003cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t detection_optimize, detection_threshold;
    if (SF < 6)
 8003cde:	2905      	cmp	r1, #5
uint8_t LoRa_class::set_spreading_factor(uint8_t SF) {
 8003ce0:	4607      	mov	r7, r0
 8003ce2:	460e      	mov	r6, r1
 8003ce4:	b09b      	sub	sp, #108	; 0x6c
    if (SF < 6)
 8003ce6:	d930      	bls.n	8003d4a <_ZN10LoRa_class20set_spreading_factorEh+0x6e>
        SF = 6;
    else if (SF > 12)
 8003ce8:	290c      	cmp	r1, #12
 8003cea:	d834      	bhi.n	8003d56 <_ZN10LoRa_class20set_spreading_factorEh+0x7a>
        SF = 12;
    if (SF == 6) {
 8003cec:	2906      	cmp	r1, #6
        detection_optimize = DO_SF6;
        detection_threshold = DT_SF6;
    }
    else {
        detection_optimize = DO_SF7_12;
        detection_threshold = DT_SF7_12;
 8003cee:	bf0b      	itete	eq
 8003cf0:	f04f 0c0c 	moveq.w	ip, #12
 8003cf4:	f04f 0c0a 	movne.w	ip, #10
 8003cf8:	f04f 0e05 	moveq.w	lr, #5
 8003cfc:	f04f 0e03 	movne.w	lr, #3
    }
    Address_field fields[3] = {DetectionOptimize, DetectionThreshold, SpreadingFactor};
 8003d00:	4d18      	ldr	r5, [pc, #96]	; (8003d64 <_ZN10LoRa_class20set_spreading_factorEh+0x88>)
 8003d02:	ac05      	add	r4, sp, #20
 8003d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003d0c:	4d16      	ldr	r5, [pc, #88]	; (8003d68 <_ZN10LoRa_class20set_spreading_factorEh+0x8c>)
 8003d0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d14:	ac0c      	add	r4, sp, #48	; 0x30
 8003d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003d1c:	4d13      	ldr	r5, [pc, #76]	; (8003d6c <_ZN10LoRa_class20set_spreading_factorEh+0x90>)
 8003d1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d24:	ac13      	add	r4, sp, #76	; 0x4c
 8003d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    uint32_t values[3] = {detection_optimize, detection_threshold, SF};
    return field_set(fields, values, 3);
 8003d2c:	2301      	movs	r3, #1
    Address_field fields[3] = {DetectionOptimize, DetectionThreshold, SpreadingFactor};
 8003d2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return field_set(fields, values, 3);
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	4638      	mov	r0, r7
 8003d36:	2303      	movs	r3, #3
 8003d38:	aa02      	add	r2, sp, #8
 8003d3a:	a905      	add	r1, sp, #20
    uint32_t values[3] = {detection_optimize, detection_threshold, SF};
 8003d3c:	e9cd ec02 	strd	lr, ip, [sp, #8]
 8003d40:	9604      	str	r6, [sp, #16]
    return field_set(fields, values, 3);
 8003d42:	f7ff fe70 	bl	8003a26 <_ZN10LoRa_class9field_setEP13Address_fieldPmhb>
}
 8003d46:	b01b      	add	sp, #108	; 0x6c
 8003d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SF = 6;
 8003d4a:	2606      	movs	r6, #6
        detection_threshold = DT_SF6;
 8003d4c:	f04f 0c0c 	mov.w	ip, #12
        detection_optimize = DO_SF6;
 8003d50:	f04f 0e05 	mov.w	lr, #5
 8003d54:	e7d4      	b.n	8003d00 <_ZN10LoRa_class20set_spreading_factorEh+0x24>
        SF = 12;
 8003d56:	260c      	movs	r6, #12
        detection_threshold = DT_SF7_12;
 8003d58:	f04f 0c0a 	mov.w	ip, #10
        detection_optimize = DO_SF7_12;
 8003d5c:	f04f 0e03 	mov.w	lr, #3
 8003d60:	e7ce      	b.n	8003d00 <_ZN10LoRa_class20set_spreading_factorEh+0x24>
 8003d62:	bf00      	nop
 8003d64:	20001bd8 	.word	0x20001bd8
 8003d68:	20001bf4 	.word	0x20001bf4
 8003d6c:	20001f04 	.word	0x20001f04

08003d70 <_ZN10LoRa_class20set_signal_bandwidthEy>:

// Установка пропускной способности
uint8_t LoRa_class::set_signal_bandwidth(uint64_t sbw) {
 8003d70:	b570      	push	{r4, r5, r6, lr}
    uint8_t bw;
    if (sbw <= 7.8E3)        bw = 0;
 8003d72:	4619      	mov	r1, r3
uint8_t LoRa_class::set_signal_bandwidth(uint64_t sbw) {
 8003d74:	b086      	sub	sp, #24
 8003d76:	4606      	mov	r6, r0
    if (sbw <= 7.8E3)        bw = 0;
 8003d78:	4610      	mov	r0, r2
 8003d7a:	f7fc fc23 	bl	80005c4 <__aeabi_ul2d>
 8003d7e:	a338      	add	r3, pc, #224	; (adr r3, 8003e60 <_ZN10LoRa_class20set_signal_bandwidthEy+0xf0>)
 8003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d84:	4604      	mov	r4, r0
 8003d86:	460d      	mov	r5, r1
 8003d88:	f7fc fece 	bl	8000b28 <__aeabi_dcmple>
 8003d8c:	2800      	cmp	r0, #0
 8003d8e:	d156      	bne.n	8003e3e <_ZN10LoRa_class20set_signal_bandwidthEy+0xce>
    else if (sbw <= 10.4E3)  bw = 1;
 8003d90:	a335      	add	r3, pc, #212	; (adr r3, 8003e68 <_ZN10LoRa_class20set_signal_bandwidthEy+0xf8>)
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	4620      	mov	r0, r4
 8003d98:	4629      	mov	r1, r5
 8003d9a:	f7fc fec5 	bl	8000b28 <__aeabi_dcmple>
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	d14f      	bne.n	8003e42 <_ZN10LoRa_class20set_signal_bandwidthEy+0xd2>
    else if (sbw <= 15.6E3)  bw = 2;
 8003da2:	a333      	add	r3, pc, #204	; (adr r3, 8003e70 <_ZN10LoRa_class20set_signal_bandwidthEy+0x100>)
 8003da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da8:	4620      	mov	r0, r4
 8003daa:	4629      	mov	r1, r5
 8003dac:	f7fc febc 	bl	8000b28 <__aeabi_dcmple>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	d148      	bne.n	8003e46 <_ZN10LoRa_class20set_signal_bandwidthEy+0xd6>
    else if (sbw <= 20.8E3)  bw = 3;
 8003db4:	a330      	add	r3, pc, #192	; (adr r3, 8003e78 <_ZN10LoRa_class20set_signal_bandwidthEy+0x108>)
 8003db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dba:	4620      	mov	r0, r4
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	f7fc feb3 	bl	8000b28 <__aeabi_dcmple>
 8003dc2:	2800      	cmp	r0, #0
 8003dc4:	d141      	bne.n	8003e4a <_ZN10LoRa_class20set_signal_bandwidthEy+0xda>
    else if (sbw <= 31.25E3) bw = 4;
 8003dc6:	a32e      	add	r3, pc, #184	; (adr r3, 8003e80 <_ZN10LoRa_class20set_signal_bandwidthEy+0x110>)
 8003dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dcc:	4620      	mov	r0, r4
 8003dce:	4629      	mov	r1, r5
 8003dd0:	f7fc feaa 	bl	8000b28 <__aeabi_dcmple>
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	d13a      	bne.n	8003e4e <_ZN10LoRa_class20set_signal_bandwidthEy+0xde>
    else if (sbw <= 41.7E3)  bw = 5;
 8003dd8:	a32b      	add	r3, pc, #172	; (adr r3, 8003e88 <_ZN10LoRa_class20set_signal_bandwidthEy+0x118>)
 8003dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dde:	4620      	mov	r0, r4
 8003de0:	4629      	mov	r1, r5
 8003de2:	f7fc fea1 	bl	8000b28 <__aeabi_dcmple>
 8003de6:	bba0      	cbnz	r0, 8003e52 <_ZN10LoRa_class20set_signal_bandwidthEy+0xe2>
    else if (sbw <= 62.5E3)  bw = 6;
 8003de8:	a329      	add	r3, pc, #164	; (adr r3, 8003e90 <_ZN10LoRa_class20set_signal_bandwidthEy+0x120>)
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	4620      	mov	r0, r4
 8003df0:	4629      	mov	r1, r5
 8003df2:	f7fc fe99 	bl	8000b28 <__aeabi_dcmple>
 8003df6:	bb70      	cbnz	r0, 8003e56 <_ZN10LoRa_class20set_signal_bandwidthEy+0xe6>
    else if (sbw <= 125E3)   bw = 7;
 8003df8:	a327      	add	r3, pc, #156	; (adr r3, 8003e98 <_ZN10LoRa_class20set_signal_bandwidthEy+0x128>)
 8003dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfe:	4620      	mov	r0, r4
 8003e00:	4629      	mov	r1, r5
 8003e02:	f7fc fe91 	bl	8000b28 <__aeabi_dcmple>
 8003e06:	bb40      	cbnz	r0, 8003e5a <_ZN10LoRa_class20set_signal_bandwidthEy+0xea>
    else if (sbw <= 250E3)   bw = 8;
 8003e08:	a325      	add	r3, pc, #148	; (adr r3, 8003ea0 <_ZN10LoRa_class20set_signal_bandwidthEy+0x130>)
 8003e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0e:	4620      	mov	r0, r4
 8003e10:	4629      	mov	r1, r5
 8003e12:	f7fc fe89 	bl	8000b28 <__aeabi_dcmple>
    else                     bw = 9;
 8003e16:	2800      	cmp	r0, #0
 8003e18:	bf14      	ite	ne
 8003e1a:	2308      	movne	r3, #8
 8003e1c:	2309      	moveq	r3, #9
    return field_set(Bw, bw);
 8003e1e:	2201      	movs	r2, #1
 8003e20:	4c21      	ldr	r4, [pc, #132]	; (8003ea8 <_ZN10LoRa_class20set_signal_bandwidthEy+0x138>)
 8003e22:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8003e26:	f104 030c 	add.w	r3, r4, #12
 8003e2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e2c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003e30:	4630      	mov	r0, r6
 8003e32:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003e36:	f7ff fdce 	bl	80039d6 <_ZN10LoRa_class9field_setE13Address_fieldmb>
}
 8003e3a:	b006      	add	sp, #24
 8003e3c:	bd70      	pop	{r4, r5, r6, pc}
    if (sbw <= 7.8E3)        bw = 0;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e7ed      	b.n	8003e1e <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 10.4E3)  bw = 1;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e7eb      	b.n	8003e1e <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 15.6E3)  bw = 2;
 8003e46:	2302      	movs	r3, #2
 8003e48:	e7e9      	b.n	8003e1e <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 20.8E3)  bw = 3;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e7e7      	b.n	8003e1e <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 31.25E3) bw = 4;
 8003e4e:	2304      	movs	r3, #4
 8003e50:	e7e5      	b.n	8003e1e <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 41.7E3)  bw = 5;
 8003e52:	2305      	movs	r3, #5
 8003e54:	e7e3      	b.n	8003e1e <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 62.5E3)  bw = 6;
 8003e56:	2306      	movs	r3, #6
 8003e58:	e7e1      	b.n	8003e1e <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 125E3)   bw = 7;
 8003e5a:	2307      	movs	r3, #7
 8003e5c:	e7df      	b.n	8003e1e <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
 8003e5e:	bf00      	nop
 8003e60:	00000000 	.word	0x00000000
 8003e64:	40be7800 	.word	0x40be7800
 8003e68:	00000000 	.word	0x00000000
 8003e6c:	40c45000 	.word	0x40c45000
 8003e70:	00000000 	.word	0x00000000
 8003e74:	40ce7800 	.word	0x40ce7800
 8003e78:	00000000 	.word	0x00000000
 8003e7c:	40d45000 	.word	0x40d45000
 8003e80:	00000000 	.word	0x00000000
 8003e84:	40de8480 	.word	0x40de8480
 8003e88:	00000000 	.word	0x00000000
 8003e8c:	40e45c80 	.word	0x40e45c80
 8003e90:	00000000 	.word	0x00000000
 8003e94:	40ee8480 	.word	0x40ee8480
 8003e98:	00000000 	.word	0x00000000
 8003e9c:	40fe8480 	.word	0x40fe8480
 8003ea0:	00000000 	.word	0x00000000
 8003ea4:	410e8480 	.word	0x410e8480
 8003ea8:	20001b84 	.word	0x20001b84

08003eac <_ZN10LoRa_class10crc_enableEv>:
    return field_set(SyncWord, SW);
}

// Включение CRC на LoRa-модуле
uint8_t LoRa_class::crc_enable() {
    return field_set(RxPayloadCrcOn, 1);
 8003eac:	2301      	movs	r3, #1
uint8_t LoRa_class::crc_enable() {
 8003eae:	b530      	push	{r4, r5, lr}
 8003eb0:	4605      	mov	r5, r0
 8003eb2:	b087      	sub	sp, #28
    return field_set(RxPayloadCrcOn, 1);
 8003eb4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003eb8:	4c06      	ldr	r4, [pc, #24]	; (8003ed4 <_ZN10LoRa_class10crc_enableEv+0x28>)
 8003eba:	f104 030c 	add.w	r3, r4, #12
 8003ebe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ec0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003ec4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003ec8:	4628      	mov	r0, r5
 8003eca:	f7ff fd84 	bl	80039d6 <_ZN10LoRa_class9field_setE13Address_fieldmb>
}
 8003ece:	b007      	add	sp, #28
 8003ed0:	bd30      	pop	{r4, r5, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20001ecc 	.word	0x20001ecc

08003ed8 <_ZN10LoRa_class5beginEybhhyh>:
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8003ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003edc:	4604      	mov	r4, r0
    uint32_t result = 0;
 8003ede:	2700      	movs	r7, #0
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8003ee0:	b08e      	sub	sp, #56	; 0x38
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 8003ee2:	8881      	ldrh	r1, [r0, #4]
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8003ee4:	4692      	mov	sl, r2
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 8003ee6:	6880      	ldr	r0, [r0, #8]
 8003ee8:	2201      	movs	r2, #1
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8003eea:	4699      	mov	r9, r3
    uint32_t result = 0;
 8003eec:	9706      	str	r7, [sp, #24]
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 8003eee:	f004 fa81 	bl	80083f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_RESET);
 8003ef2:	463a      	mov	r2, r7
 8003ef4:	88a1      	ldrh	r1, [r4, #4]
 8003ef6:	68a0      	ldr	r0, [r4, #8]
 8003ef8:	f004 fa7c 	bl	80083f4 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8003efc:	2014      	movs	r0, #20
 8003efe:	f003 fde5 	bl	8007acc <HAL_Delay>
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 8003f02:	4e6a      	ldr	r6, [pc, #424]	; (80040ac <_ZN10LoRa_class5beginEybhhyh+0x1d4>)
 8003f04:	2201      	movs	r2, #1
 8003f06:	88a1      	ldrh	r1, [r4, #4]
 8003f08:	68a0      	ldr	r0, [r4, #8]
 8003f0a:	f004 fa73 	bl	80083f4 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8003f0e:	ad07      	add	r5, sp, #28
 8003f10:	2032      	movs	r0, #50	; 0x32
 8003f12:	f003 fddb 	bl	8007acc <HAL_Delay>
    amt = field_get(Version, &result);
 8003f16:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f1a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003f1e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    return _reg_field.get_field_value(field, value, read);
 8003f22:	ab06      	add	r3, sp, #24
 8003f24:	9304      	str	r3, [sp, #16]
 8003f26:	9705      	str	r7, [sp, #20]
 8003f28:	ab0e      	add	r3, sp, #56	; 0x38
 8003f2a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8003f2e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003f32:	ab07      	add	r3, sp, #28
 8003f34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f36:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8003f3a:	f000 fe86 	bl	8004c4a <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>
    if ((result != 0x12) || (amt != 1)) return 2;
 8003f3e:	9b06      	ldr	r3, [sp, #24]
 8003f40:	2b12      	cmp	r3, #18
 8003f42:	f040 8098 	bne.w	8004076 <_ZN10LoRa_class5beginEybhhyh+0x19e>
 8003f46:	2801      	cmp	r0, #1
 8003f48:	f040 8095 	bne.w	8004076 <_ZN10LoRa_class5beginEybhhyh+0x19e>
    if(mode_sleep() != 1) return 3;
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	f7ff fdd5 	bl	8003afc <_ZN10LoRa_class10mode_sleepEv>
 8003f52:	2801      	cmp	r0, #1
 8003f54:	4680      	mov	r8, r0
 8003f56:	f040 8090 	bne.w	800407a <_ZN10LoRa_class5beginEybhhyh+0x1a2>
    if(set_frequency(frequency) != 3) return 4;
 8003f5a:	4652      	mov	r2, sl
 8003f5c:	464b      	mov	r3, r9
 8003f5e:	4620      	mov	r0, r4
 8003f60:	f7ff fe9a 	bl	8003c98 <_ZN10LoRa_class13set_frequencyEy>
 8003f64:	2803      	cmp	r0, #3
 8003f66:	4606      	mov	r6, r0
 8003f68:	f040 8089 	bne.w	800407e <_ZN10LoRa_class5beginEybhhyh+0x1a6>
    if(field_set(FifoRxBaseAddr, 0x00) != 1) return 5;
 8003f6c:	e9cd 7804 	strd	r7, r8, [sp, #16]
 8003f70:	4d4f      	ldr	r5, [pc, #316]	; (80040b0 <_ZN10LoRa_class5beginEybhhyh+0x1d8>)
 8003f72:	f105 030c 	add.w	r3, r5, #12
 8003f76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f78:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003f82:	f7ff fd28 	bl	80039d6 <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8003f86:	2801      	cmp	r0, #1
 8003f88:	d17b      	bne.n	8004082 <_ZN10LoRa_class5beginEybhhyh+0x1aa>
    if(field_set(FifoTxBaseAddr, _FifoTxBaseAddr) != 1) return 6;
 8003f8a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003f8e:	4d49      	ldr	r5, [pc, #292]	; (80040b4 <_ZN10LoRa_class5beginEybhhyh+0x1dc>)
 8003f90:	9304      	str	r3, [sp, #16]
 8003f92:	9005      	str	r0, [sp, #20]
 8003f94:	f105 030c 	add.w	r3, r5, #12
 8003f98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f9a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003fa4:	f7ff fd17 	bl	80039d6 <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8003fa8:	2801      	cmp	r0, #1
 8003faa:	d16c      	bne.n	8004086 <_ZN10LoRa_class5beginEybhhyh+0x1ae>
    if(field_set(LnaBoostHf, 0x03) != 1) return 7;
 8003fac:	e9cd 6004 	strd	r6, r0, [sp, #16]
 8003fb0:	4d41      	ldr	r5, [pc, #260]	; (80040b8 <_ZN10LoRa_class5beginEybhhyh+0x1e0>)
 8003fb2:	f105 030c 	add.w	r3, r5, #12
 8003fb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fb8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003fc2:	f7ff fd08 	bl	80039d6 <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8003fc6:	2801      	cmp	r0, #1
 8003fc8:	d15f      	bne.n	800408a <_ZN10LoRa_class5beginEybhhyh+0x1b2>
    if(field_set(LowDataRateOptimize, 0) != 1) return 8;
 8003fca:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8003fce:	4d3b      	ldr	r5, [pc, #236]	; (80040bc <_ZN10LoRa_class5beginEybhhyh+0x1e4>)
 8003fd0:	f105 030c 	add.w	r3, r5, #12
 8003fd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fd6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003fda:	4620      	mov	r0, r4
 8003fdc:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003fe0:	f7ff fcf9 	bl	80039d6 <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8003fe4:	2801      	cmp	r0, #1
 8003fe6:	d152      	bne.n	800408e <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(field_set(AgcAutoOn, 1) != 1) return 9;
 8003fe8:	e9cd 0004 	strd	r0, r0, [sp, #16]
 8003fec:	4d34      	ldr	r5, [pc, #208]	; (80040c0 <_ZN10LoRa_class5beginEybhhyh+0x1e8>)
 8003fee:	f105 030c 	add.w	r3, r5, #12
 8003ff2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ff4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003ffe:	f7ff fcea 	bl	80039d6 <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8004002:	2801      	cmp	r0, #1
 8004004:	d145      	bne.n	8004092 <_ZN10LoRa_class5beginEybhhyh+0x1ba>
    if(set_TX_power(signal_power, paboost) != 2) return 10;
 8004006:	2307      	movs	r3, #7
 8004008:	4620      	mov	r0, r4
 800400a:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800400e:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 8004012:	f7ff fdd1 	bl	8003bb8 <_ZN10LoRa_class12set_TX_powerEhbh>
 8004016:	2802      	cmp	r0, #2
 8004018:	d13d      	bne.n	8004096 <_ZN10LoRa_class5beginEybhhyh+0x1be>
    if(set_spreading_factor(SF) != 3) return 11;
 800401a:	4620      	mov	r0, r4
 800401c:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
 8004020:	f7ff fe5c 	bl	8003cdc <_ZN10LoRa_class20set_spreading_factorEh>
 8004024:	2803      	cmp	r0, #3
 8004026:	d138      	bne.n	800409a <_ZN10LoRa_class5beginEybhhyh+0x1c2>
    if(set_signal_bandwidth(SBW) != 1) return 12;
 8004028:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800402c:	4620      	mov	r0, r4
 800402e:	f7ff fe9f 	bl	8003d70 <_ZN10LoRa_class20set_signal_bandwidthEy>
 8004032:	2801      	cmp	r0, #1
 8004034:	d133      	bne.n	800409e <_ZN10LoRa_class5beginEybhhyh+0x1c6>
    if(field_set(SyncWord, sync_word) != 1) return 13;
 8004036:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 800403a:	4d22      	ldr	r5, [pc, #136]	; (80040c4 <_ZN10LoRa_class5beginEybhhyh+0x1ec>)
 800403c:	9304      	str	r3, [sp, #16]
 800403e:	9005      	str	r0, [sp, #20]
 8004040:	f105 030c 	add.w	r3, r5, #12
 8004044:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004046:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800404a:	4620      	mov	r0, r4
 800404c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8004050:	f7ff fcc1 	bl	80039d6 <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8004054:	2801      	cmp	r0, #1
 8004056:	d124      	bne.n	80040a2 <_ZN10LoRa_class5beginEybhhyh+0x1ca>
    if(crc_enable() != 1) return 14;
 8004058:	4620      	mov	r0, r4
 800405a:	f7ff ff27 	bl	8003eac <_ZN10LoRa_class10crc_enableEv>
 800405e:	2801      	cmp	r0, #1
 8004060:	d121      	bne.n	80040a6 <_ZN10LoRa_class5beginEybhhyh+0x1ce>
    if(mode_STDBY() != 1) return 15;
 8004062:	4620      	mov	r0, r4
 8004064:	f7ff fd4d 	bl	8003b02 <_ZN10LoRa_class10mode_STDBYEv>
 8004068:	2801      	cmp	r0, #1
 800406a:	bf0c      	ite	eq
 800406c:	4638      	moveq	r0, r7
 800406e:	200f      	movne	r0, #15
}
 8004070:	b00e      	add	sp, #56	; 0x38
 8004072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((result != 0x12) || (amt != 1)) return 2;
 8004076:	2002      	movs	r0, #2
 8004078:	e7fa      	b.n	8004070 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(mode_sleep() != 1) return 3;
 800407a:	2003      	movs	r0, #3
 800407c:	e7f8      	b.n	8004070 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(set_frequency(frequency) != 3) return 4;
 800407e:	2004      	movs	r0, #4
 8004080:	e7f6      	b.n	8004070 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(field_set(FifoRxBaseAddr, 0x00) != 1) return 5;
 8004082:	2005      	movs	r0, #5
 8004084:	e7f4      	b.n	8004070 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(field_set(FifoTxBaseAddr, _FifoTxBaseAddr) != 1) return 6;
 8004086:	2006      	movs	r0, #6
 8004088:	e7f2      	b.n	8004070 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(field_set(LnaBoostHf, 0x03) != 1) return 7;
 800408a:	2007      	movs	r0, #7
 800408c:	e7f0      	b.n	8004070 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(field_set(LowDataRateOptimize, 0) != 1) return 8;
 800408e:	2008      	movs	r0, #8
 8004090:	e7ee      	b.n	8004070 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(field_set(AgcAutoOn, 1) != 1) return 9;
 8004092:	2009      	movs	r0, #9
 8004094:	e7ec      	b.n	8004070 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(set_TX_power(signal_power, paboost) != 2) return 10;
 8004096:	200a      	movs	r0, #10
 8004098:	e7ea      	b.n	8004070 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(set_spreading_factor(SF) != 3) return 11;
 800409a:	200b      	movs	r0, #11
 800409c:	e7e8      	b.n	8004070 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(set_signal_bandwidth(SBW) != 1) return 12;
 800409e:	200c      	movs	r0, #12
 80040a0:	e7e6      	b.n	8004070 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(field_set(SyncWord, sync_word) != 1) return 13;
 80040a2:	200d      	movs	r0, #13
 80040a4:	e7e4      	b.n	8004070 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(crc_enable() != 1) return 14;
 80040a6:	200e      	movs	r0, #14
 80040a8:	e7e2      	b.n	8004070 <_ZN10LoRa_class5beginEybhhyh+0x198>
 80040aa:	bf00      	nop
 80040ac:	20001f74 	.word	0x20001f74
 80040b0:	20001c9c 	.word	0x20001c9c
 80040b4:	20001cf0 	.word	0x20001cf0
 80040b8:	20001d28 	.word	0x20001d28
 80040bc:	20001d60 	.word	0x20001d60
 80040c0:	20001b68 	.word	0x20001b68
 80040c4:	20001f20 	.word	0x20001f20

080040c8 <_ZN10LoRa_class11packet_rssiEv>:
    return send_packet;
}

// RSSI последнего принятого пакета
uint8_t LoRa_class::packet_rssi() {
    uint32_t rssi = 0;
 80040c8:	2300      	movs	r3, #0
uint8_t LoRa_class::packet_rssi() {
 80040ca:	b530      	push	{r4, r5, lr}
 80040cc:	b089      	sub	sp, #36	; 0x24
    uint32_t rssi = 0;
 80040ce:	9307      	str	r3, [sp, #28]
    field_get(PacketRssi, &rssi, true);
 80040d0:	2301      	movs	r3, #1
uint8_t LoRa_class::packet_rssi() {
 80040d2:	4604      	mov	r4, r0
    field_get(PacketRssi, &rssi, true);
 80040d4:	4d12      	ldr	r5, [pc, #72]	; (8004120 <_ZN10LoRa_class11packet_rssiEv+0x58>)
 80040d6:	9305      	str	r3, [sp, #20]
 80040d8:	ab07      	add	r3, sp, #28
 80040da:	9304      	str	r3, [sp, #16]
 80040dc:	f105 030c 	add.w	r3, r5, #12
 80040e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040e2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80040e6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80040ea:	4620      	mov	r0, r4
 80040ec:	f7ff fcb2 	bl	8003a54 <_ZN10LoRa_class9field_getE13Address_fieldPmb>
    if (_frequency < 868E6)
 80040f0:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 80040f4:	f7fc fa66 	bl	80005c4 <__aeabi_ul2d>
 80040f8:	a307      	add	r3, pc, #28	; (adr r3, 8004118 <_ZN10LoRa_class11packet_rssiEv+0x50>)
 80040fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fe:	f7fc fd09 	bl	8000b14 <__aeabi_dcmplt>
 8004102:	9b07      	ldr	r3, [sp, #28]
 8004104:	b118      	cbz	r0, 800410e <_ZN10LoRa_class11packet_rssiEv+0x46>
        rssi -= 164;
 8004106:	3ba4      	subs	r3, #164	; 0xa4
    else
        rssi -= 157;
    return rssi;
}
 8004108:	b2d8      	uxtb	r0, r3
 800410a:	b009      	add	sp, #36	; 0x24
 800410c:	bd30      	pop	{r4, r5, pc}
        rssi -= 157;
 800410e:	3b9d      	subs	r3, #157	; 0x9d
 8004110:	e7fa      	b.n	8004108 <_ZN10LoRa_class11packet_rssiEv+0x40>
 8004112:	bf00      	nop
 8004114:	f3af 8000 	nop.w
 8004118:	80000000 	.word	0x80000000
 800411c:	41c9de50 	.word	0x41c9de50
 8004120:	20001e24 	.word	0x20001e24

08004124 <_ZN10LoRa_class16read_packet_dataEbbb>:
class LoRa_packet LoRa_class::read_packet_data(bool crc_err, bool f_rssi, bool f_snr) {
 8004124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004128:	4607      	mov	r7, r0
 800412a:	460d      	mov	r5, r1
 800412c:	4690      	mov	r8, r2
    if (f_rssi)
 800412e:	461c      	mov	r4, r3
class LoRa_packet LoRa_class::read_packet_data(bool crc_err, bool f_rssi, bool f_snr) {
 8004130:	b08b      	sub	sp, #44	; 0x2c
    if (f_rssi)
 8004132:	b11b      	cbz	r3, 800413c <_ZN10LoRa_class16read_packet_dataEbbb+0x18>
        rssi = packet_rssi();
 8004134:	4608      	mov	r0, r1
 8004136:	f7ff ffc7 	bl	80040c8 <_ZN10LoRa_class11packet_rssiEv>
 800413a:	4604      	mov	r4, r0
    field_get(FifoRxBytesNb, &length, true);
 800413c:	2601      	movs	r6, #1
 800413e:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 80041e8 <_ZN10LoRa_class16read_packet_dataEbbb+0xc4>
 8004142:	ab07      	add	r3, sp, #28
 8004144:	9304      	str	r3, [sp, #16]
 8004146:	9605      	str	r6, [sp, #20]
 8004148:	f10c 030c 	add.w	r3, ip, #12
 800414c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800414e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8004152:	4628      	mov	r0, r5
 8004154:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
 8004158:	f7ff fc7c 	bl	8003a54 <_ZN10LoRa_class9field_getE13Address_fieldPmb>
    field_get(FifoRxCurrentAddr, &adr, true);
 800415c:	f8df c08c 	ldr.w	ip, [pc, #140]	; 80041ec <_ZN10LoRa_class16read_packet_dataEbbb+0xc8>
 8004160:	ab08      	add	r3, sp, #32
 8004162:	9304      	str	r3, [sp, #16]
 8004164:	9605      	str	r6, [sp, #20]
 8004166:	f10c 030c 	add.w	r3, ip, #12
 800416a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800416c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8004170:	4628      	mov	r0, r5
 8004172:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
 8004176:	f7ff fc6d 	bl	8003a54 <_ZN10LoRa_class9field_getE13Address_fieldPmb>
    field_set(FifoAddrPtr, adr);
 800417a:	f8df c074 	ldr.w	ip, [pc, #116]	; 80041f0 <_ZN10LoRa_class16read_packet_dataEbbb+0xcc>
 800417e:	9b08      	ldr	r3, [sp, #32]
 8004180:	9605      	str	r6, [sp, #20]
 8004182:	9304      	str	r3, [sp, #16]
 8004184:	f10c 030c 	add.w	r3, ip, #12
 8004188:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800418a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800418e:	4628      	mov	r0, r5
 8004190:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
 8004194:	f7ff fc1f 	bl	80039d6 <_ZN10LoRa_class9field_setE13Address_fieldmb>
    class LoRa_packet send_packet(nullptr, 0, crc_err, rssi);
 8004198:	2200      	movs	r2, #0
 800419a:	9400      	str	r4, [sp, #0]
    uint32_t data32 = 0;
 800419c:	2400      	movs	r4, #0
        field_get(Fifo, &data32, true);
 800419e:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80041f4 <_ZN10LoRa_class16read_packet_dataEbbb+0xd0>
    class LoRa_packet send_packet(nullptr, 0, crc_err, rssi);
 80041a2:	4643      	mov	r3, r8
 80041a4:	4611      	mov	r1, r2
 80041a6:	4638      	mov	r0, r7
 80041a8:	f000 fb03 	bl	80047b2 <_ZN11LoRa_packetC1EPKhhbh>
        field_get(Fifo, &data32, true);
 80041ac:	f109 080c 	add.w	r8, r9, #12
    uint32_t data32 = 0;
 80041b0:	9409      	str	r4, [sp, #36]	; 0x24
    for(unsigned int i = 0; i < length; ++i) {
 80041b2:	9b07      	ldr	r3, [sp, #28]
 80041b4:	42a3      	cmp	r3, r4
 80041b6:	d912      	bls.n	80041de <_ZN10LoRa_class16read_packet_dataEbbb+0xba>
        field_get(Fifo, &data32, true);
 80041b8:	ab09      	add	r3, sp, #36	; 0x24
 80041ba:	9605      	str	r6, [sp, #20]
 80041bc:	9304      	str	r3, [sp, #16]
 80041be:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80041c2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80041c6:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 80041ca:	4628      	mov	r0, r5
 80041cc:	f7ff fc42 	bl	8003a54 <_ZN10LoRa_class9field_getE13Address_fieldPmb>
        send_packet.add_packet_data(data32);
 80041d0:	4638      	mov	r0, r7
 80041d2:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 80041d6:	f000 fada 	bl	800478e <_ZN11LoRa_packet15add_packet_dataEh>
    for(unsigned int i = 0; i < length; ++i) {
 80041da:	3401      	adds	r4, #1
 80041dc:	e7e9      	b.n	80041b2 <_ZN10LoRa_class16read_packet_dataEbbb+0x8e>
}
 80041de:	4638      	mov	r0, r7
 80041e0:	b00b      	add	sp, #44	; 0x2c
 80041e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80041e6:	bf00      	nop
 80041e8:	20001cb8 	.word	0x20001cb8
 80041ec:	20001cd4 	.word	0x20001cd4
 80041f0:	20001c80 	.word	0x20001c80
 80041f4:	20001c64 	.word	0x20001c64

080041f8 <_ZN10LoRa_class15receiver_packetEhmbb>:
class LoRa_packet LoRa_class::receiver_packet(uint8_t count, ulong wait, bool rssi, bool snr) {
 80041f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041fc:	b0bf      	sub	sp, #252	; 0xfc
 80041fe:	4690      	mov	r8, r2
 8004200:	460c      	mov	r4, r1
 8004202:	461d      	mov	r5, r3
 8004204:	4683      	mov	fp, r0
    class LoRa_packet send_packet;
 8004206:	f000 fab5 	bl	8004774 <_ZN11LoRa_packetC1Ev>
    Address_field fields[3] = {RxTimeout, RxDone, PayloadCrcError};
 800420a:	f8df c2c4 	ldr.w	ip, [pc, #708]	; 80044d0 <_ZN10LoRa_class15receiver_packetEhmbb+0x2d8>
 800420e:	ae14      	add	r6, sp, #80	; 0x50
 8004210:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004214:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004216:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800421a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800421e:	4ea7      	ldr	r6, [pc, #668]	; (80044bc <_ZN10LoRa_class15receiver_packetEhmbb+0x2c4>)
 8004220:	af1b      	add	r7, sp, #108	; 0x6c
 8004222:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004224:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004226:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800422a:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800422e:	4fa4      	ldr	r7, [pc, #656]	; (80044c0 <_ZN10LoRa_class15receiver_packetEhmbb+0x2c8>)
 8004230:	f10d 0e88 	add.w	lr, sp, #136	; 0x88
 8004234:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004236:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800423a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    Address_field flags[3] = {RxDone, ValidHeader, PayloadCrcError};
 800423e:	f1a6 0910 	sub.w	r9, r6, #16
    Address_field fields[3] = {RxTimeout, RxDone, PayloadCrcError};
 8004242:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    Address_field flags[3] = {RxDone, ValidHeader, PayloadCrcError};
 8004246:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800424a:	f10d 0ea4 	add.w	lr, sp, #164	; 0xa4
 800424e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8004252:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004256:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80044d4 <_ZN10LoRa_class15receiver_packetEhmbb+0x2dc>
 800425a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 800425e:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8004262:	f10d 0ec0 	add.w	lr, sp, #192	; 0xc0
 8004266:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800426a:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 800426e:	f1a7 0910 	sub.w	r9, r7, #16
 8004272:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8004276:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800427a:	f10d 0edc 	add.w	lr, sp, #220	; 0xdc
 800427e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8004282:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004286:	f1ac 0310 	sub.w	r3, ip, #16
 800428a:	9308      	str	r3, [sp, #32]
    if(count <= 1) {
 800428c:	f1b8 0f01 	cmp.w	r8, #1
 8004290:	f1a6 0310 	sub.w	r3, r6, #16
    Address_field flags[3] = {RxDone, ValidHeader, PayloadCrcError};
 8004294:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    if(count <= 1) {
 8004298:	9309      	str	r3, [sp, #36]	; 0x24
 800429a:	d875      	bhi.n	8004388 <_ZN10LoRa_class15receiver_packetEhmbb+0x190>
        if(count == 1)
 800429c:	d103      	bne.n	80042a6 <_ZN10LoRa_class15receiver_packetEhmbb+0xae>
            mode_RX_single();
 800429e:	4641      	mov	r1, r8
 80042a0:	4620      	mov	r0, r4
 80042a2:	f7ff fc53 	bl	8003b4c <_ZN10LoRa_class14mode_RX_singleEb>
        uint32_t values[3] = {0, 0, 0};
 80042a6:	2300      	movs	r3, #0
        rx_done = rx_timeout = crc_err = 0;
 80042a8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
        uint32_t values[3] = {0, 0, 0};
 80042ac:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
        rx_done = rx_timeout = crc_err = 0;
 80042b0:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
        uint32_t values[3] = {0, 0, 0};
 80042b4:	9313      	str	r3, [sp, #76]	; 0x4c
        rx_done = rx_timeout = crc_err = 0;
 80042b6:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
        if(wait == 0)
 80042ba:	b325      	cbz	r5, 8004306 <_ZN10LoRa_class15receiver_packetEhmbb+0x10e>
            time = HAL_GetTick();
 80042bc:	f003 fc00 	bl	8007ac0 <HAL_GetTick>
 80042c0:	4681      	mov	r9, r0
        bool signal = false;
 80042c2:	2700      	movs	r7, #0
 80042c4:	4e7f      	ldr	r6, [pc, #508]	; (80044c4 <_ZN10LoRa_class15receiver_packetEhmbb+0x2cc>)
        for(start_time = time, read_time = time; (wait == 0) || (HAL_GetTick() - time < wait);) {
 80042c6:	f8cd 901c 	str.w	r9, [sp, #28]
 80042ca:	2d00      	cmp	r5, #0
 80042cc:	d066      	beq.n	800439c <_ZN10LoRa_class15receiver_packetEhmbb+0x1a4>
 80042ce:	f003 fbf7 	bl	8007ac0 <HAL_GetTick>
 80042d2:	eba0 0009 	sub.w	r0, r0, r9
 80042d6:	42a8      	cmp	r0, r5
 80042d8:	d35a      	bcc.n	8004390 <_ZN10LoRa_class15receiver_packetEhmbb+0x198>
        if((rx_done > 0) /*&& (crc_err == 0)*/) {
 80042da:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80042de:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 80042e2:	f003 07ff 	and.w	r7, r3, #255	; 0xff
 80042e6:	bb0b      	cbnz	r3, 800432c <_ZN10LoRa_class15receiver_packetEhmbb+0x134>
            field_get(fields, values, 3, true);
 80042e8:	2301      	movs	r3, #1
 80042ea:	aa11      	add	r2, sp, #68	; 0x44
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	a914      	add	r1, sp, #80	; 0x50
 80042f0:	2303      	movs	r3, #3
 80042f2:	4620      	mov	r0, r4
 80042f4:	f7ff fbc9 	bl	8003a8a <_ZN10LoRa_class9field_getEP13Address_fieldPmhb>
            _reg_field.clear_flags(flags, 3);
 80042f8:	463b      	mov	r3, r7
 80042fa:	2203      	movs	r2, #3
 80042fc:	4630      	mov	r0, r6
 80042fe:	a929      	add	r1, sp, #164	; 0xa4
 8004300:	f000 fd56 	bl	8004db0 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb>
 8004304:	e03c      	b.n	8004380 <_ZN10LoRa_class15receiver_packetEhmbb+0x188>
            time = 0;
 8004306:	46a9      	mov	r9, r5
 8004308:	e7db      	b.n	80042c2 <_ZN10LoRa_class15receiver_packetEhmbb+0xca>
                        pin_crc_err = GPIO_PIN_RESET;
 800430a:	910e      	str	r1, [sp, #56]	; 0x38
 800430c:	e05d      	b.n	80043ca <_ZN10LoRa_class15receiver_packetEhmbb+0x1d2>
                        signal = true;
 800430e:	461f      	mov	r7, r3
 8004310:	e065      	b.n	80043de <_ZN10LoRa_class15receiver_packetEhmbb+0x1e6>
                    	if(rx_timeout + rx_done + crc_err != 0) {
 8004312:	42d3      	cmn	r3, r2
                    		work_read_flag[2]++; // -
 8004314:	bf15      	itete	ne
 8004316:	68b3      	ldrne	r3, [r6, #8]
                    		work_read_flag[3]++; // +
 8004318:	68f3      	ldreq	r3, [r6, #12]
                    		work_read_flag[2]++; // -
 800431a:	3301      	addne	r3, #1
                    		work_read_flag[3]++; // +
 800431c:	3301      	addeq	r3, #1
                    		work_read_flag[2]++; // -
 800431e:	bf14      	ite	ne
 8004320:	60b3      	strne	r3, [r6, #8]
                    		work_read_flag[3]++; // +
 8004322:	60f3      	streq	r3, [r6, #12]
 8004324:	e095      	b.n	8004452 <_ZN10LoRa_class15receiver_packetEhmbb+0x25a>
                if(wait == 0) {
 8004326:	2d00      	cmp	r5, #0
 8004328:	d1d1      	bne.n	80042ce <_ZN10LoRa_class15receiver_packetEhmbb+0xd6>
 800432a:	e7d6      	b.n	80042da <_ZN10LoRa_class15receiver_packetEhmbb+0xe2>
            _reg_field.clear_flags(RxDone);
 800432c:	2700      	movs	r7, #0
 800432e:	4b66      	ldr	r3, [pc, #408]	; (80044c8 <_ZN10LoRa_class15receiver_packetEhmbb+0x2d0>)
 8004330:	9704      	str	r7, [sp, #16]
 8004332:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004334:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8004338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800433a:	4630      	mov	r0, r6
 800433c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800433e:	f000 fd8b 	bl	8004e58 <_ZN13LoRa_register11clear_flagsE13Address_fieldb>
            _reg_field.clear_flags(RxTimeout);
 8004342:	4b62      	ldr	r3, [pc, #392]	; (80044cc <_ZN10LoRa_class15receiver_packetEhmbb+0x2d4>)
 8004344:	9704      	str	r7, [sp, #16]
 8004346:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004348:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800434c:	9b08      	ldr	r3, [sp, #32]
 800434e:	4630      	mov	r0, r6
 8004350:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004352:	f000 fd81 	bl	8004e58 <_ZN13LoRa_register11clear_flagsE13Address_fieldb>
            send_packet = read_packet_data(crc_err, rssi, snr);
 8004356:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800435a:	f89d 3124 	ldrb.w	r3, [sp, #292]	; 0x124
 800435e:	1bd2      	subs	r2, r2, r7
 8004360:	bf18      	it	ne
 8004362:	2201      	movne	r2, #1
 8004364:	4621      	mov	r1, r4
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	a80f      	add	r0, sp, #60	; 0x3c
 800436a:	f89d 3120 	ldrb.w	r3, [sp, #288]	; 0x120
 800436e:	f7ff fed9 	bl	8004124 <_ZN10LoRa_class16read_packet_dataEbbb>
 8004372:	4658      	mov	r0, fp
 8004374:	a90f      	add	r1, sp, #60	; 0x3c
 8004376:	f000 fa69 	bl	800484c <_ZN11LoRa_packetaSEOS_>
 800437a:	a80f      	add	r0, sp, #60	; 0x3c
 800437c:	f000 fa02 	bl	8004784 <_ZN11LoRa_packetD1Ev>
        if(wait != 0)
 8004380:	b115      	cbz	r5, 8004388 <_ZN10LoRa_class15receiver_packetEhmbb+0x190>
            mode_sleep();
 8004382:	4620      	mov	r0, r4
 8004384:	f7ff fbba 	bl	8003afc <_ZN10LoRa_class10mode_sleepEv>
}
 8004388:	4658      	mov	r0, fp
 800438a:	b03f      	add	sp, #252	; 0xfc
 800438c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if((wait == 0) || (HAL_GetTick() - read_time > 10U)) {
 8004390:	f003 fb96 	bl	8007ac0 <HAL_GetTick>
 8004394:	eba0 0009 	sub.w	r0, r0, r9
 8004398:	280a      	cmp	r0, #10
 800439a:	d996      	bls.n	80042ca <_ZN10LoRa_class15receiver_packetEhmbb+0xd2>
            	if ((_dio0_pin != 0) && (_dio1_pin != 0)) {
 800439c:	8aa1      	ldrh	r1, [r4, #20]
 800439e:	2900      	cmp	r1, #0
 80043a0:	f000 8087 	beq.w	80044b2 <_ZN10LoRa_class15receiver_packetEhmbb+0x2ba>
 80043a4:	8ba3      	ldrh	r3, [r4, #28]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d07d      	beq.n	80044a6 <_ZN10LoRa_class15receiver_packetEhmbb+0x2ae>
                	pin_done = HAL_GPIO_ReadPin(_dio0_port, _dio0_pin);
 80043aa:	69a0      	ldr	r0, [r4, #24]
 80043ac:	f004 f81c 	bl	80083e8 <HAL_GPIO_ReadPin>
                	pin_timeout = HAL_GPIO_ReadPin(_dio1_port, _dio1_pin);
 80043b0:	8ba1      	ldrh	r1, [r4, #28]
                	pin_done = HAL_GPIO_ReadPin(_dio0_port, _dio0_pin);
 80043b2:	900c      	str	r0, [sp, #48]	; 0x30
                	pin_timeout = HAL_GPIO_ReadPin(_dio1_port, _dio1_pin);
 80043b4:	6a20      	ldr	r0, [r4, #32]
 80043b6:	f004 f817 	bl	80083e8 <HAL_GPIO_ReadPin>
                    if (_dio3_pin != 0) {
 80043ba:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
                	pin_timeout = HAL_GPIO_ReadPin(_dio1_port, _dio1_pin);
 80043bc:	900d      	str	r0, [sp, #52]	; 0x34
                    if (_dio3_pin != 0) {
 80043be:	2900      	cmp	r1, #0
 80043c0:	d0a3      	beq.n	800430a <_ZN10LoRa_class15receiver_packetEhmbb+0x112>
                    	pin_crc_err = HAL_GPIO_ReadPin(_dio3_port, _dio3_pin);
 80043c2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80043c4:	f004 f810 	bl	80083e8 <HAL_GPIO_ReadPin>
 80043c8:	900e      	str	r0, [sp, #56]	; 0x38
                    if ((pin_done == GPIO_PIN_SET) || (pin_timeout == GPIO_PIN_SET) || (pin_crc_err == GPIO_PIN_SET)) {
 80043ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d09e      	beq.n	800430e <_ZN10LoRa_class15receiver_packetEhmbb+0x116>
 80043d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d09b      	beq.n	800430e <_ZN10LoRa_class15receiver_packetEhmbb+0x116>
 80043d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                        signal = true;
 80043d8:	2b01      	cmp	r3, #1
 80043da:	bf08      	it	eq
 80043dc:	2701      	moveq	r7, #1
                if (((count == 0) && (wait == 0)) || (_dio0_pin == 0) || (_dio1_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 80043de:	f1b8 0f00 	cmp.w	r8, #0
 80043e2:	d100      	bne.n	80043e6 <_ZN10LoRa_class15receiver_packetEhmbb+0x1ee>
 80043e4:	b15d      	cbz	r5, 80043fe <_ZN10LoRa_class15receiver_packetEhmbb+0x206>
 80043e6:	8aa3      	ldrh	r3, [r4, #20]
 80043e8:	b14b      	cbz	r3, 80043fe <_ZN10LoRa_class15receiver_packetEhmbb+0x206>
 80043ea:	8ba3      	ldrh	r3, [r4, #28]
 80043ec:	b13b      	cbz	r3, 80043fe <_ZN10LoRa_class15receiver_packetEhmbb+0x206>
 80043ee:	f003 fb67 	bl	8007ac0 <HAL_GetTick>
 80043f2:	9b07      	ldr	r3, [sp, #28]
 80043f4:	1ac0      	subs	r0, r0, r3
 80043f6:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80043fa:	d800      	bhi.n	80043fe <_ZN10LoRa_class15receiver_packetEhmbb+0x206>
 80043fc:	b34f      	cbz	r7, 8004452 <_ZN10LoRa_class15receiver_packetEhmbb+0x25a>
    return _reg_field.get_field_value(fields, values, amt, read);
 80043fe:	2301      	movs	r3, #1
 8004400:	aa11      	add	r2, sp, #68	; 0x44
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	a914      	add	r1, sp, #80	; 0x50
 8004406:	2303      	movs	r3, #3
 8004408:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800440c:	f000 fbf5 	bl	8004bfa <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb>
                    if(amt == 3) {
 8004410:	2803      	cmp	r0, #3
 8004412:	d10b      	bne.n	800442c <_ZN10LoRa_class15receiver_packetEhmbb+0x234>
                        rx_timeout = values[0];
 8004414:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8004418:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
                        rx_done = values[1];
 800441c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8004420:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                        crc_err = values[2];
 8004424:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8004428:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                    	if(rx_timeout + rx_done + crc_err != 0) {
 800442c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8004430:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
 8004434:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8004438:	440b      	add	r3, r1
                    if(signal) {
 800443a:	2f00      	cmp	r7, #0
 800443c:	f43f af69 	beq.w	8004312 <_ZN10LoRa_class15receiver_packetEhmbb+0x11a>
                    	if(rx_timeout + rx_done + crc_err != 0) {
 8004440:	42d3      	cmn	r3, r2
                    		work_read_flag[0]++; // +
 8004442:	bf15      	itete	ne
 8004444:	6833      	ldrne	r3, [r6, #0]
                    		work_read_flag[1]++; // -
 8004446:	6873      	ldreq	r3, [r6, #4]
                    		work_read_flag[0]++; // +
 8004448:	3301      	addne	r3, #1
                    		work_read_flag[1]++; // -
 800444a:	3301      	addeq	r3, #1
                    		work_read_flag[0]++; // +
 800444c:	bf14      	ite	ne
 800444e:	6033      	strne	r3, [r6, #0]
                    		work_read_flag[1]++; // -
 8004450:	6073      	streq	r3, [r6, #4]
                if(rx_done != 0) {
 8004452:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8004456:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 800445a:	2b00      	cmp	r3, #0
 800445c:	f47f af3d 	bne.w	80042da <_ZN10LoRa_class15receiver_packetEhmbb+0xe2>
                if(rx_timeout != 0) {
 8004460:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8004464:	2b00      	cmp	r3, #0
 8004466:	f43f af5e 	beq.w	8004326 <_ZN10LoRa_class15receiver_packetEhmbb+0x12e>
                    _reg_field.clear_flags(RxTimeout);
 800446a:	4b18      	ldr	r3, [pc, #96]	; (80044cc <_ZN10LoRa_class15receiver_packetEhmbb+0x2d4>)
 800446c:	f8cd a010 	str.w	sl, [sp, #16]
 8004470:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004472:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8004476:	4b16      	ldr	r3, [pc, #88]	; (80044d0 <_ZN10LoRa_class15receiver_packetEhmbb+0x2d8>)
 8004478:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800447c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800447e:	f000 fceb 	bl	8004e58 <_ZN13LoRa_register11clear_flagsE13Address_fieldb>
                    mode_RX_single(false);
 8004482:	4651      	mov	r1, sl
 8004484:	4620      	mov	r0, r4
 8004486:	f7ff fb61 	bl	8003b4c <_ZN10LoRa_class14mode_RX_singleEb>
                    rx_done = rx_timeout = crc_err = 0;
 800448a:	f88d a02f 	strb.w	sl, [sp, #47]	; 0x2f
 800448e:	f88d a02e 	strb.w	sl, [sp, #46]	; 0x2e
 8004492:	f88d a02d 	strb.w	sl, [sp, #45]	; 0x2d
                    if(wait != 0)
 8004496:	2d00      	cmp	r5, #0
 8004498:	f43f af1f 	beq.w	80042da <_ZN10LoRa_class15receiver_packetEhmbb+0xe2>
                        start_time = HAL_GetTick();
 800449c:	f003 fb10 	bl	8007ac0 <HAL_GetTick>
                    signal = false;
 80044a0:	4657      	mov	r7, sl
                        start_time = HAL_GetTick();
 80044a2:	9007      	str	r0, [sp, #28]
                if(wait == 0) {
 80044a4:	e711      	b.n	80042ca <_ZN10LoRa_class15receiver_packetEhmbb+0xd2>
                if (((count == 0) && (wait == 0)) || (_dio0_pin == 0) || (_dio1_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 80044a6:	f1b8 0f00 	cmp.w	r8, #0
 80044aa:	d1a8      	bne.n	80043fe <_ZN10LoRa_class15receiver_packetEhmbb+0x206>
 80044ac:	2d00      	cmp	r5, #0
 80044ae:	d0a6      	beq.n	80043fe <_ZN10LoRa_class15receiver_packetEhmbb+0x206>
 80044b0:	e79b      	b.n	80043ea <_ZN10LoRa_class15receiver_packetEhmbb+0x1f2>
 80044b2:	f1b8 0f00 	cmp.w	r8, #0
 80044b6:	d095      	beq.n	80043e4 <_ZN10LoRa_class15receiver_packetEhmbb+0x1ec>
 80044b8:	e7a1      	b.n	80043fe <_ZN10LoRa_class15receiver_packetEhmbb+0x206>
 80044ba:	bf00      	nop
 80044bc:	20001eb0 	.word	0x20001eb0
 80044c0:	20001e5c 	.word	0x20001e5c
 80044c4:	200006d0 	.word	0x200006d0
 80044c8:	20001ebc 	.word	0x20001ebc
 80044cc:	20001ef4 	.word	0x20001ef4
 80044d0:	20001ee8 	.word	0x20001ee8
 80044d4:	20001f58 	.word	0x20001f58

080044d8 <_ZN10LoRa_class12packet_beginEv>:
    if (packet_end(wait))
        return true;
    return false;
}
// Объявление пакета
bool LoRa_class::packet_begin() {
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	4604      	mov	r4, r0
    mode_STDBY();
    field_set(FifoAddrPtr, _FifoTxBaseAddr);
 80044dc:	2601      	movs	r6, #1
bool LoRa_class::packet_begin() {
 80044de:	b086      	sub	sp, #24
    mode_STDBY();
 80044e0:	f7ff fb0f 	bl	8003b02 <_ZN10LoRa_class10mode_STDBYEv>
    field_set(FifoAddrPtr, _FifoTxBaseAddr);
 80044e4:	4d0a      	ldr	r5, [pc, #40]	; (8004510 <_ZN10LoRa_class12packet_beginEv+0x38>)
 80044e6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80044ea:	9605      	str	r6, [sp, #20]
 80044ec:	9304      	str	r3, [sp, #16]
 80044ee:	f105 030c 	add.w	r3, r5, #12
 80044f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044f4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80044f8:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80044fc:	4620      	mov	r0, r4
 80044fe:	f7ff fa6a 	bl	80039d6 <_ZN10LoRa_class9field_setE13Address_fieldmb>
    _packet_length = 0;
 8004502:	2300      	movs	r3, #0
    return true;
}
 8004504:	4630      	mov	r0, r6
    _packet_length = 0;
 8004506:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 800450a:	b006      	add	sp, #24
 800450c:	bd70      	pop	{r4, r5, r6, pc}
 800450e:	bf00      	nop
 8004510:	20001c80 	.word	0x20001c80

08004514 <_ZN10LoRa_class12packet_writeEPhh>:
// Отправка данных в пакет buffer, size=None? (len)
bool LoRa_class::packet_write(uint8_t* packet, uint8_t len) {
 8004514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len + _packet_length > 255)
 8004518:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
bool LoRa_class::packet_write(uint8_t* packet, uint8_t len) {
 800451c:	4604      	mov	r4, r0
    if (len + _packet_length > 255)
 800451e:	4413      	add	r3, r2
 8004520:	2bff      	cmp	r3, #255	; 0xff
bool LoRa_class::packet_write(uint8_t* packet, uint8_t len) {
 8004522:	4689      	mov	r9, r1
 8004524:	4690      	mov	r8, r2
 8004526:	b086      	sub	sp, #24
    if (len + _packet_length > 255)
 8004528:	dc2d      	bgt.n	8004586 <_ZN10LoRa_class12packet_writeEPhh+0x72>
        return true;
    _packet_length += len;
    for(int i = 0; i < len; ++i)
 800452a:	2500      	movs	r5, #0
 800452c:	f04f 0a01 	mov.w	sl, #1
        field_set(Fifo, packet[i]);
 8004530:	4e16      	ldr	r6, [pc, #88]	; (800458c <_ZN10LoRa_class12packet_writeEPhh+0x78>)
    _packet_length += len;
 8004532:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
        field_set(Fifo, packet[i]);
 8004536:	f106 070c 	add.w	r7, r6, #12
    for(int i = 0; i < len; ++i)
 800453a:	45a8      	cmp	r8, r5
 800453c:	dd0f      	ble.n	800455e <_ZN10LoRa_class12packet_writeEPhh+0x4a>
        field_set(Fifo, packet[i]);
 800453e:	f819 3005 	ldrb.w	r3, [r9, r5]
 8004542:	f8cd a014 	str.w	sl, [sp, #20]
 8004546:	9304      	str	r3, [sp, #16]
 8004548:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800454c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8004550:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8004554:	4620      	mov	r0, r4
 8004556:	f7ff fa3e 	bl	80039d6 <_ZN10LoRa_class9field_setE13Address_fieldmb>
    for(int i = 0; i < len; ++i)
 800455a:	3501      	adds	r5, #1
 800455c:	e7ed      	b.n	800453a <_ZN10LoRa_class12packet_writeEPhh+0x26>
    field_set(PayloadLength, _packet_length);
 800455e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8004562:	4d0b      	ldr	r5, [pc, #44]	; (8004590 <_ZN10LoRa_class12packet_writeEPhh+0x7c>)
 8004564:	9304      	str	r3, [sp, #16]
 8004566:	f8cd a014 	str.w	sl, [sp, #20]
 800456a:	f105 030c 	add.w	r3, r5, #12
 800456e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004570:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8004574:	4620      	mov	r0, r4
 8004576:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800457a:	f7ff fa2c 	bl	80039d6 <_ZN10LoRa_class9field_setE13Address_fieldmb>
 800457e:	2000      	movs	r0, #0
    return false;
}
 8004580:	b006      	add	sp, #24
 8004582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return true;
 8004586:	2001      	movs	r0, #1
 8004588:	e7fa      	b.n	8004580 <_ZN10LoRa_class12packet_writeEPhh+0x6c>
 800458a:	bf00      	nop
 800458c:	20001c64 	.word	0x20001c64
 8004590:	20001e78 	.word	0x20001e78

08004594 <_ZN10LoRa_class10packet_endEmb>:
    field_set(PayloadLength, _packet_length);
    return false;
}

// Отправка пакета
bool LoRa_class::packet_end(uint32_t wait, bool sleep) {
 8004594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004598:	4688      	mov	r8, r1
 800459a:	b089      	sub	sp, #36	; 0x24
    mode_TX();
 800459c:	2101      	movs	r1, #1
bool LoRa_class::packet_end(uint32_t wait, bool sleep) {
 800459e:	4604      	mov	r4, r0
 80045a0:	4617      	mov	r7, r2
    mode_TX();
 80045a2:	f7ff fab1 	bl	8003b08 <_ZN10LoRa_class7mode_TXEb>
    bool result = false;
    if(wait > 0) {
 80045a6:	f1b8 0f00 	cmp.w	r8, #0
 80045aa:	d03f      	beq.n	800462c <_ZN10LoRa_class10packet_endEmb+0x98>
        uint32_t tx_done = 0;
 80045ac:	2500      	movs	r5, #0
 80045ae:	9507      	str	r5, [sp, #28]
        bool signal = false;
        uint32_t time, start_time, read_time;
        int pin_done;
        tx_done = 0;
        for(time = HAL_GetTick(), start_time = time, read_time = time; HAL_GetTick() - time < wait;) {
 80045b0:	f003 fa86 	bl	8007ac0 <HAL_GetTick>
                        signal = true;
                    }
                }
                // Если неработают DIO выходы, был signal или превышено время ожидания
                if ((_dio0_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
                    field_get(TxDone, &tx_done, true);
 80045b4:	f04f 0b01 	mov.w	fp, #1
        for(time = HAL_GetTick(), start_time = time, read_time = time; HAL_GetTick() - time < wait;) {
 80045b8:	4606      	mov	r6, r0
                    field_get(TxDone, &tx_done, true);
 80045ba:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8004634 <_ZN10LoRa_class10packet_endEmb+0xa0>
 80045be:	f109 0a0c 	add.w	sl, r9, #12
        for(time = HAL_GetTick(), start_time = time, read_time = time; HAL_GetTick() - time < wait;) {
 80045c2:	f003 fa7d 	bl	8007ac0 <HAL_GetTick>
 80045c6:	1b80      	subs	r0, r0, r6
 80045c8:	4580      	cmp	r8, r0
 80045ca:	d929      	bls.n	8004620 <_ZN10LoRa_class10packet_endEmb+0x8c>
            if(HAL_GetTick() - read_time > 10) {
 80045cc:	f003 fa78 	bl	8007ac0 <HAL_GetTick>
 80045d0:	1b80      	subs	r0, r0, r6
 80045d2:	280a      	cmp	r0, #10
 80045d4:	d9f5      	bls.n	80045c2 <_ZN10LoRa_class10packet_endEmb+0x2e>
                if (_dio0_pin != 0) {
 80045d6:	8aa1      	ldrh	r1, [r4, #20]
 80045d8:	b129      	cbz	r1, 80045e6 <_ZN10LoRa_class10packet_endEmb+0x52>
                	pin_done = HAL_GPIO_ReadPin(_dio0_port, _dio0_pin);
 80045da:	69a0      	ldr	r0, [r4, #24]
 80045dc:	f003 ff04 	bl	80083e8 <HAL_GPIO_ReadPin>
                        signal = true;
 80045e0:	2801      	cmp	r0, #1
 80045e2:	bf08      	it	eq
 80045e4:	2501      	moveq	r5, #1
                if ((_dio0_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 80045e6:	8aa3      	ldrh	r3, [r4, #20]
 80045e8:	b98b      	cbnz	r3, 800460e <_ZN10LoRa_class10packet_endEmb+0x7a>
                    field_get(TxDone, &tx_done, true);
 80045ea:	ab07      	add	r3, sp, #28
 80045ec:	f8cd b014 	str.w	fp, [sp, #20]
 80045f0:	9304      	str	r3, [sp, #16]
 80045f2:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 80045f6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80045fa:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 80045fe:	4620      	mov	r0, r4
 8004600:	f7ff fa28 	bl	8003a54 <_ZN10LoRa_class9field_getE13Address_fieldPmb>
                }
                if(tx_done != 0) {
 8004604:	9b07      	ldr	r3, [sp, #28]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0db      	beq.n	80045c2 <_ZN10LoRa_class10packet_endEmb+0x2e>
                    break;
                }
            }
        }
        if(sleep && (tx_done != 0)) {
 800460a:	b967      	cbnz	r7, 8004626 <_ZN10LoRa_class10packet_endEmb+0x92>
 800460c:	e00e      	b.n	800462c <_ZN10LoRa_class10packet_endEmb+0x98>
                if ((_dio0_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 800460e:	f003 fa57 	bl	8007ac0 <HAL_GetTick>
 8004612:	1b80      	subs	r0, r0, r6
 8004614:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8004618:	d8e7      	bhi.n	80045ea <_ZN10LoRa_class10packet_endEmb+0x56>
 800461a:	2d00      	cmp	r5, #0
 800461c:	d1e5      	bne.n	80045ea <_ZN10LoRa_class10packet_endEmb+0x56>
 800461e:	e7f1      	b.n	8004604 <_ZN10LoRa_class10packet_endEmb+0x70>
        if(sleep && (tx_done != 0)) {
 8004620:	b127      	cbz	r7, 800462c <_ZN10LoRa_class10packet_endEmb+0x98>
 8004622:	9b07      	ldr	r3, [sp, #28]
 8004624:	b113      	cbz	r3, 800462c <_ZN10LoRa_class10packet_endEmb+0x98>
            mode_sleep();
 8004626:	4620      	mov	r0, r4
 8004628:	f7ff fa68 	bl	8003afc <_ZN10LoRa_class10mode_sleepEv>
        }
    }
    return result;
}
 800462c:	2000      	movs	r0, #0
 800462e:	b009      	add	sp, #36	; 0x24
 8004630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004634:	20001f3c 	.word	0x20001f3c

08004638 <_ZN10LoRa_class13sender_packetEPhhm>:
bool LoRa_class::sender_packet(uint8_t* packet, uint8_t len, uint32_t wait) {
 8004638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463a:	4604      	mov	r4, r0
 800463c:	460e      	mov	r6, r1
 800463e:	4617      	mov	r7, r2
 8004640:	461d      	mov	r5, r3
    packet_begin();
 8004642:	f7ff ff49 	bl	80044d8 <_ZN10LoRa_class12packet_beginEv>
    if (packet_write(packet, len))
 8004646:	463a      	mov	r2, r7
 8004648:	4631      	mov	r1, r6
 800464a:	4620      	mov	r0, r4
 800464c:	f7ff ff62 	bl	8004514 <_ZN10LoRa_class12packet_writeEPhh>
 8004650:	4602      	mov	r2, r0
 8004652:	b928      	cbnz	r0, 8004660 <_ZN10LoRa_class13sender_packetEPhhm+0x28>
    if (packet_end(wait))
 8004654:	4629      	mov	r1, r5
 8004656:	4620      	mov	r0, r4
}
 8004658:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if (packet_end(wait))
 800465c:	f7ff bf9a 	b.w	8004594 <_ZN10LoRa_class10packet_endEmb>
}
 8004660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004664 <_GLOBAL__sub_I_LoRa>:
class LoRa_class LoRa;
 8004664:	4801      	ldr	r0, [pc, #4]	; (800466c <_GLOBAL__sub_I_LoRa+0x8>)
 8004666:	f7ff b9ab 	b.w	80039c0 <_ZN10LoRa_classC1Ev>
 800466a:	bf00      	nop
 800466c:	20000380 	.word	0x20000380

08004670 <_GLOBAL__sub_D_LoRa>:
 8004670:	4801      	ldr	r0, [pc, #4]	; (8004678 <_GLOBAL__sub_D_LoRa+0x8>)
 8004672:	f7ff b975 	b.w	8003960 <_ZN10LoRa_classD1Ev>
 8004676:	bf00      	nop
 8004678:	20000380 	.word	0x20000380

0800467c <_ZN16LoRa_packet_data8add_dataEh>:
LoRa_packet_data lora_packet_data[SIZE_LORA_PACKET_BUFFER];
#endif


bool LoRa_packet_data::add_data(uint8_t data_byte) {
    if(len >= SIZE_LORA_PACKET_MAX_LEN)
 800467c:	7843      	ldrb	r3, [r0, #1]
 800467e:	2b31      	cmp	r3, #49	; 0x31
        return true;
    data[len++] = data_byte;
 8004680:	bf9f      	itttt	ls
 8004682:	1c5a      	addls	r2, r3, #1
 8004684:	7042      	strbls	r2, [r0, #1]
 8004686:	18c0      	addls	r0, r0, r3
 8004688:	7081      	strbls	r1, [r0, #2]
    return false;
 800468a:	bf94      	ite	ls
 800468c:	2000      	movls	r0, #0
        return true;
 800468e:	2001      	movhi	r0, #1
}
 8004690:	4770      	bx	lr

08004692 <_ZN16LoRa_packet_data8add_dataEPKhh>:
bool LoRa_packet_data::add_data(const uint8_t* data_byte, uint8_t amt_byte) {
 8004692:	b570      	push	{r4, r5, r6, lr}
    if((len + amt_byte) > SIZE_LORA_PACKET_MAX_LEN)
 8004694:	7843      	ldrb	r3, [r0, #1]
 8004696:	189d      	adds	r5, r3, r2
 8004698:	2d32      	cmp	r5, #50	; 0x32
 800469a:	dc0c      	bgt.n	80046b6 <_ZN16LoRa_packet_data8add_dataEPKhh+0x24>
        return true;
    for(size_t i = 0; i < amt_byte; ++i)
 800469c:	2400      	movs	r4, #0
 800469e:	3302      	adds	r3, #2
 80046a0:	4403      	add	r3, r0
 80046a2:	42a2      	cmp	r2, r4
 80046a4:	d904      	bls.n	80046b0 <_ZN16LoRa_packet_data8add_dataEPKhh+0x1e>
        data[i+len] = data_byte[i];
 80046a6:	5d0e      	ldrb	r6, [r1, r4]
    for(size_t i = 0; i < amt_byte; ++i)
 80046a8:	3401      	adds	r4, #1
        data[i+len] = data_byte[i];
 80046aa:	f803 6b01 	strb.w	r6, [r3], #1
    for(size_t i = 0; i < amt_byte; ++i)
 80046ae:	e7f8      	b.n	80046a2 <_ZN16LoRa_packet_data8add_dataEPKhh+0x10>
    len += amt_byte;
 80046b0:	7045      	strb	r5, [r0, #1]
    return false;
 80046b2:	2000      	movs	r0, #0
}
 80046b4:	bd70      	pop	{r4, r5, r6, pc}
        return true;
 80046b6:	2001      	movs	r0, #1
 80046b8:	e7fc      	b.n	80046b4 <_ZN16LoRa_packet_data8add_dataEPKhh+0x22>

080046ba <_ZN16LoRa_packet_data8set_dataEPKhh>:

bool LoRa_packet_data::set_data(const uint8_t* set_data, uint8_t set_len) {
    if(set_len > SIZE_LORA_PACKET_MAX_LEN)
 80046ba:	2a32      	cmp	r2, #50	; 0x32
bool LoRa_packet_data::set_data(const uint8_t* set_data, uint8_t set_len) {
 80046bc:	b510      	push	{r4, lr}
    if(set_len > SIZE_LORA_PACKET_MAX_LEN)
 80046be:	d80f      	bhi.n	80046e0 <_ZN16LoRa_packet_data8set_dataEPKhh+0x26>
        return true;
    if((set_data != nullptr) && (set_len != 0)){
 80046c0:	b159      	cbz	r1, 80046da <_ZN16LoRa_packet_data8set_dataEPKhh+0x20>
 80046c2:	b152      	cbz	r2, 80046da <_ZN16LoRa_packet_data8set_dataEPKhh+0x20>
        len = set_len;
        for(int i = 0; i < set_len; ++i)
 80046c4:	2300      	movs	r3, #0
        len = set_len;
 80046c6:	7042      	strb	r2, [r0, #1]
        for(int i = 0; i < set_len; ++i)
 80046c8:	3002      	adds	r0, #2
            data[i] = set_data[i];
 80046ca:	5ccc      	ldrb	r4, [r1, r3]
        for(int i = 0; i < set_len; ++i)
 80046cc:	3301      	adds	r3, #1
 80046ce:	429a      	cmp	r2, r3
            data[i] = set_data[i];
 80046d0:	f800 4b01 	strb.w	r4, [r0], #1
        for(int i = 0; i < set_len; ++i)
 80046d4:	dcf9      	bgt.n	80046ca <_ZN16LoRa_packet_data8set_dataEPKhh+0x10>
 80046d6:	2000      	movs	r0, #0
 80046d8:	e003      	b.n	80046e2 <_ZN16LoRa_packet_data8set_dataEPKhh+0x28>
    }
    else
        len = 0;
 80046da:	2300      	movs	r3, #0
 80046dc:	7043      	strb	r3, [r0, #1]
 80046de:	e7fa      	b.n	80046d6 <_ZN16LoRa_packet_data8set_dataEPKhh+0x1c>
        return true;
 80046e0:	2001      	movs	r0, #1
    return false;
}
 80046e2:	bd10      	pop	{r4, pc}

080046e4 <_ZN11LoRa_packet11search_dataEv>:
    return *this;
}


// ----- LoRa_packet -----
bool LoRa_packet::search_data() {
 80046e4:	4601      	mov	r1, r0
 80046e6:	2014      	movs	r0, #20
 80046e8:	b510      	push	{r4, lr}
 80046ea:	4a20      	ldr	r2, [pc, #128]	; (800476c <_ZN11LoRa_packet11search_dataEv+0x88>)
      typename iterator_traits<_RandomAccessIterator>::difference_type
	__trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
	{
	  if (__pred(__first))
 80046ec:	7813      	ldrb	r3, [r2, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d13a      	bne.n	8004768 <_ZN11LoRa_packet11search_dataEv+0x84>
	    return __first;
	  ++__first;

	  if (__pred(__first))
 80046f2:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80046f6:	b16b      	cbz	r3, 8004714 <_ZN11LoRa_packet11search_dataEv+0x30>
	  ++__first;
 80046f8:	f102 0334 	add.w	r3, r2, #52	; 0x34
 80046fc:	2000      	movs	r0, #0
#if defined( USE_STANDARD_ARRAY )
    packet_data = std::find_if(lora_packet_data.begin(), lora_packet_data.end(),
                        [](const LoRa_packet_data &data){return data.free();} );
    if(packet_data == lora_packet_data.end()) {
 80046fe:	4a1c      	ldr	r2, [pc, #112]	; (8004770 <_ZN11LoRa_packet11search_dataEv+0x8c>)
    packet_data = std::find_if(lora_packet_data.begin(), lora_packet_data.end(),
 8004700:	600b      	str	r3, [r1, #0]
    if(packet_data == lora_packet_data.end()) {
 8004702:	4293      	cmp	r3, r2
        Serial.println("!lora_packet_data memory error!");
#endif
        return true;
    }
    packet_data->free_object_ = false;
    packet_data->len = 0;
 8004704:	bf15      	itete	ne
 8004706:	7058      	strbne	r0, [r3, #1]
        packet_data = nullptr;
 8004708:	6008      	streq	r0, [r1, #0]
    packet_data->free_object_ = false;
 800470a:	7018      	strbne	r0, [r3, #0]
        return true;
 800470c:	2001      	moveq	r0, #1
        }
    }
    packet_data = nullptr;
    return true;
#endif
}
 800470e:	bd10      	pop	{r4, pc}
 8004710:	461a      	mov	r2, r3
 8004712:	e7eb      	b.n	80046ec <_ZN11LoRa_packet11search_dataEv+0x8>
	    return __first;
	  ++__first;

	  if (__pred(__first))
 8004714:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 8004718:	b113      	cbz	r3, 8004720 <_ZN11LoRa_packet11search_dataEv+0x3c>
	  ++__first;
 800471a:	f102 0368 	add.w	r3, r2, #104	; 0x68
 800471e:	e7ed      	b.n	80046fc <_ZN11LoRa_packet11search_dataEv+0x18>
	    return __first;
	  ++__first;

	  if (__pred(__first))
 8004720:	f892 309c 	ldrb.w	r3, [r2, #156]	; 0x9c
 8004724:	b113      	cbz	r3, 800472c <_ZN11LoRa_packet11search_dataEv+0x48>
	  ++__first;
 8004726:	f102 039c 	add.w	r3, r2, #156	; 0x9c
 800472a:	e7e7      	b.n	80046fc <_ZN11LoRa_packet11search_dataEv+0x18>
      for (; __trip_count > 0; --__trip_count)
 800472c:	3801      	subs	r0, #1
 800472e:	f102 03d0 	add.w	r3, r2, #208	; 0xd0
 8004732:	d1ed      	bne.n	8004710 <_ZN11LoRa_packet11search_dataEv+0x2c>
	    return __first;
	  ++__first;
	}

      switch (__last - __first)
 8004734:	4c0e      	ldr	r4, [pc, #56]	; (8004770 <_ZN11LoRa_packet11search_dataEv+0x8c>)
 8004736:	1ae0      	subs	r0, r4, r3
 8004738:	2868      	cmp	r0, #104	; 0x68
 800473a:	d00b      	beq.n	8004754 <_ZN11LoRa_packet11search_dataEv+0x70>
 800473c:	289c      	cmp	r0, #156	; 0x9c
 800473e:	d003      	beq.n	8004748 <_ZN11LoRa_packet11search_dataEv+0x64>
 8004740:	2834      	cmp	r0, #52	; 0x34
 8004742:	d00b      	beq.n	800475c <_ZN11LoRa_packet11search_dataEv+0x78>
 8004744:	4623      	mov	r3, r4
 8004746:	e7d9      	b.n	80046fc <_ZN11LoRa_packet11search_dataEv+0x18>
	{
	case 3:
	  if (__pred(__first))
 8004748:	f892 00d0 	ldrb.w	r0, [r2, #208]	; 0xd0
 800474c:	2800      	cmp	r0, #0
 800474e:	d1d5      	bne.n	80046fc <_ZN11LoRa_packet11search_dataEv+0x18>
	    return __first;
	  ++__first;
 8004750:	f502 7382 	add.w	r3, r2, #260	; 0x104
	case 2:
	  if (__pred(__first))
 8004754:	781a      	ldrb	r2, [r3, #0]
 8004756:	2a00      	cmp	r2, #0
 8004758:	d1d0      	bne.n	80046fc <_ZN11LoRa_packet11search_dataEv+0x18>
	    return __first;
	  ++__first;
 800475a:	3334      	adds	r3, #52	; 0x34
	case 1:
	  if (__pred(__first))
 800475c:	7818      	ldrb	r0, [r3, #0]
	    return __first;
	  ++__first;
	case 0:
	default:
	  return __last;
 800475e:	4a04      	ldr	r2, [pc, #16]	; (8004770 <_ZN11LoRa_packet11search_dataEv+0x8c>)
 8004760:	2800      	cmp	r0, #0
 8004762:	bf08      	it	eq
 8004764:	4613      	moveq	r3, r2
 8004766:	e7c9      	b.n	80046fc <_ZN11LoRa_packet11search_dataEv+0x18>
 8004768:	4613      	mov	r3, r2
 800476a:	e7c7      	b.n	80046fc <_ZN11LoRa_packet11search_dataEv+0x18>
 800476c:	200006e0 	.word	0x200006e0
 8004770:	20001720 	.word	0x20001720

08004774 <_ZN11LoRa_packetC1Ev>:


LoRa_packet::LoRa_packet() {
 8004774:	2300      	movs	r3, #0
 8004776:	b510      	push	{r4, lr}
 8004778:	4604      	mov	r4, r0
 800477a:	8083      	strh	r3, [r0, #4]
    search_data();
 800477c:	f7ff ffb2 	bl	80046e4 <_ZN11LoRa_packet11search_dataEv>
}
 8004780:	4620      	mov	r0, r4
 8004782:	bd10      	pop	{r4, pc}

08004784 <_ZN11LoRa_packetD1Ev>:
    packet_data = nullptr;
    *this = std::move(right);
}

LoRa_packet::~LoRa_packet() {
    if(packet_data != nullptr)
 8004784:	6803      	ldr	r3, [r0, #0]
 8004786:	b10b      	cbz	r3, 800478c <_ZN11LoRa_packetD1Ev+0x8>
        packet_data->free_object_ = true;
 8004788:	2201      	movs	r2, #1
 800478a:	701a      	strb	r2, [r3, #0]
}
 800478c:	4770      	bx	lr

0800478e <_ZN11LoRa_packet15add_packet_dataEh>:

bool LoRa_packet::add_packet_data(uint8_t data) {
    return packet_data->add_data(data);
 800478e:	6800      	ldr	r0, [r0, #0]
 8004790:	f7ff bf74 	b.w	800467c <_ZN16LoRa_packet_data8add_dataEh>

08004794 <_ZN11LoRa_packet15add_packet_dataEPKhh>:
}
bool LoRa_packet::add_packet_data(const  uint8_t* data, uint8_t len) {
    return packet_data->add_data(data, len);
 8004794:	6800      	ldr	r0, [r0, #0]
 8004796:	f7ff bf7c 	b.w	8004692 <_ZN16LoRa_packet_data8add_dataEPKhh>

0800479a <_ZN11LoRa_packet10set_packetEPKhhbh>:
}
bool LoRa_packet::set_packet(const uint8_t* data, uint8_t len, bool crc_error, uint8_t rssi) {
 800479a:	b538      	push	{r3, r4, r5, lr}
 800479c:	4604      	mov	r4, r0
    if(packet_data->set_data(data, len))
 800479e:	6800      	ldr	r0, [r0, #0]
bool LoRa_packet::set_packet(const uint8_t* data, uint8_t len, bool crc_error, uint8_t rssi) {
 80047a0:	461d      	mov	r5, r3
    if(packet_data->set_data(data, len))
 80047a2:	f7ff ff8a 	bl	80046ba <_ZN16LoRa_packet_data8set_dataEPKhh>
 80047a6:	b918      	cbnz	r0, 80047b0 <_ZN11LoRa_packet10set_packetEPKhhbh+0x16>
        return true;
    crc_error_ = crc_error;
    rssi_ = rssi;
 80047a8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    crc_error_ = crc_error;
 80047ac:	7165      	strb	r5, [r4, #5]
    rssi_ = rssi;
 80047ae:	7123      	strb	r3, [r4, #4]
    return false;
}
 80047b0:	bd38      	pop	{r3, r4, r5, pc}

080047b2 <_ZN11LoRa_packetC1EPKhhbh>:
LoRa_packet::LoRa_packet(const uint8_t* data, uint8_t len, bool crc_error, uint8_t rssi) {
 80047b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047b4:	461f      	mov	r7, r3
 80047b6:	2300      	movs	r3, #0
 80047b8:	4604      	mov	r4, r0
 80047ba:	460d      	mov	r5, r1
 80047bc:	4616      	mov	r6, r2
 80047be:	8083      	strh	r3, [r0, #4]
    search_data();
 80047c0:	f7ff ff90 	bl	80046e4 <_ZN11LoRa_packet11search_dataEv>
    set_packet(data, len, crc_error, rssi);
 80047c4:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80047c8:	4632      	mov	r2, r6
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	4629      	mov	r1, r5
 80047ce:	463b      	mov	r3, r7
 80047d0:	4620      	mov	r0, r4
 80047d2:	f7ff ffe2 	bl	800479a <_ZN11LoRa_packet10set_packetEPKhhbh>
}
 80047d6:	4620      	mov	r0, r4
 80047d8:	b003      	add	sp, #12
 80047da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047dc <_ZN11LoRa_packet12clear_packetEv>:
    crc_error_ = crc_error;
    rssi_ = rssi;
    return false;
}

void LoRa_packet::clear_packet() {
 80047dc:	b538      	push	{r3, r4, r5, lr}
    if(packet_data == nullptr)
 80047de:	6803      	ldr	r3, [r0, #0]
void LoRa_packet::clear_packet() {
 80047e0:	4604      	mov	r4, r0
 80047e2:	2500      	movs	r5, #0
    if(packet_data == nullptr)
 80047e4:	b91b      	cbnz	r3, 80047ee <_ZN11LoRa_packet12clear_packetEv+0x12>
        search_data();
 80047e6:	f7ff ff7d 	bl	80046e4 <_ZN11LoRa_packet11search_dataEv>
    else
        packet_data->len = 0;
    rssi_ = 0;
 80047ea:	80a5      	strh	r5, [r4, #4]
    crc_error_  = false;
}
 80047ec:	bd38      	pop	{r3, r4, r5, pc}
        packet_data->len = 0;
 80047ee:	705d      	strb	r5, [r3, #1]
 80047f0:	e7fb      	b.n	80047ea <_ZN11LoRa_packet12clear_packetEv+0xe>

080047f2 <_ZNK11LoRa_packet7get_lenEv>:
}
uint8_t LoRa_packet::get_data(int num) const {
    return packet_data->data[num];
}
uint8_t LoRa_packet::get_len() const {
    if(packet_data == nullptr)
 80047f2:	6800      	ldr	r0, [r0, #0]
 80047f4:	b100      	cbz	r0, 80047f8 <_ZNK11LoRa_packet7get_lenEv+0x6>
        return 0;
    return packet_data->len;
 80047f6:	7840      	ldrb	r0, [r0, #1]
}
 80047f8:	4770      	bx	lr

080047fa <_ZNK11LoRa_packet13get_crc_errorEv>:
bool LoRa_packet::get_crc_error() const {
    return crc_error_;
}
 80047fa:	7940      	ldrb	r0, [r0, #5]
 80047fc:	4770      	bx	lr

080047fe <_ZN11LoRa_packetixEi>:
 80047fe:	6803      	ldr	r3, [r0, #0]
 8004800:	3302      	adds	r3, #2
uint8_t LoRa_packet::get_rssi() const {
    return rssi_;
}
uint8_t& LoRa_packet::operator[] (const int index) {
    return packet_data->data[index];
}
 8004802:	1858      	adds	r0, r3, r1
 8004804:	4770      	bx	lr

08004806 <_ZNK11LoRa_packetixEi>:
 8004806:	6803      	ldr	r3, [r0, #0]
 8004808:	3302      	adds	r3, #2
 800480a:	1858      	adds	r0, r3, r1
 800480c:	4770      	bx	lr

0800480e <_ZN11LoRa_packetaSERKS_>:
const uint8_t& LoRa_packet::operator[](const int index) const {
    return packet_data->data[index];
}
class LoRa_packet& LoRa_packet::operator=(const class LoRa_packet& right) {
    // Проверка на самоприсваивание
    if (this == &right)
 800480e:	4288      	cmp	r0, r1
class LoRa_packet& LoRa_packet::operator=(const class LoRa_packet& right) {
 8004810:	b538      	push	{r3, r4, r5, lr}
 8004812:	4604      	mov	r4, r0
 8004814:	460d      	mov	r5, r1
    if (this == &right)
 8004816:	d017      	beq.n	8004848 <_ZN11LoRa_packetaSERKS_+0x3a>
        return *this;
    // Проверка на пустой объект
    if(packet_data == nullptr)
 8004818:	6803      	ldr	r3, [r0, #0]
 800481a:	b90b      	cbnz	r3, 8004820 <_ZN11LoRa_packetaSERKS_+0x12>
        search_data();
 800481c:	f7ff ff62 	bl	80046e4 <_ZN11LoRa_packet11search_dataEv>
    // Перенос значений
    packet_data->len = right.packet_data->len;
 8004820:	682a      	ldr	r2, [r5, #0]
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	7852      	ldrb	r2, [r2, #1]
 8004826:	705a      	strb	r2, [r3, #1]
    crc_error_ = right.crc_error_;
 8004828:	796b      	ldrb	r3, [r5, #5]
 800482a:	7163      	strb	r3, [r4, #5]
    rssi_ = right.rssi_;
 800482c:	792b      	ldrb	r3, [r5, #4]
 800482e:	7123      	strb	r3, [r4, #4]
    for(int i = 0; i < packet_data->len; ++i)
 8004830:	2300      	movs	r3, #0
 8004832:	6822      	ldr	r2, [r4, #0]
 8004834:	7851      	ldrb	r1, [r2, #1]
 8004836:	4299      	cmp	r1, r3
 8004838:	dd06      	ble.n	8004848 <_ZN11LoRa_packetaSERKS_+0x3a>
        packet_data->data[i] = right.packet_data->data[i];
 800483a:	6829      	ldr	r1, [r5, #0]
 800483c:	441a      	add	r2, r3
 800483e:	4419      	add	r1, r3
 8004840:	7889      	ldrb	r1, [r1, #2]
    for(int i = 0; i < packet_data->len; ++i)
 8004842:	3301      	adds	r3, #1
        packet_data->data[i] = right.packet_data->data[i];
 8004844:	7091      	strb	r1, [r2, #2]
    for(int i = 0; i < packet_data->len; ++i)
 8004846:	e7f4      	b.n	8004832 <_ZN11LoRa_packetaSERKS_+0x24>
    return *this;
}
 8004848:	4620      	mov	r0, r4
 800484a:	bd38      	pop	{r3, r4, r5, pc}

0800484c <_ZN11LoRa_packetaSEOS_>:

class LoRa_packet& LoRa_packet::operator=(class LoRa_packet&& right) {
    // Проверка на самоприсваивание
    if (this == &right)
 800484c:	4288      	cmp	r0, r1
 800484e:	d00b      	beq.n	8004868 <_ZN11LoRa_packetaSEOS_+0x1c>
        return *this;
    // Перенос значений
    if(packet_data != nullptr) {
 8004850:	6803      	ldr	r3, [r0, #0]
 8004852:	b10b      	cbz	r3, 8004858 <_ZN11LoRa_packetaSEOS_+0xc>
        packet_data->free_object_=true;
 8004854:	2201      	movs	r2, #1
 8004856:	701a      	strb	r2, [r3, #0]
    }
    packet_data = right.packet_data;
 8004858:	680b      	ldr	r3, [r1, #0]
 800485a:	6003      	str	r3, [r0, #0]
    crc_error_ = right.crc_error_;
 800485c:	794b      	ldrb	r3, [r1, #5]
 800485e:	7143      	strb	r3, [r0, #5]
    rssi_ = right.rssi_;
 8004860:	790b      	ldrb	r3, [r1, #4]
 8004862:	7103      	strb	r3, [r0, #4]
    right.packet_data = nullptr;
 8004864:	2300      	movs	r3, #0
 8004866:	600b      	str	r3, [r1, #0]
    return *this;
}
 8004868:	4770      	bx	lr

0800486a <_ZN11LoRa_packetC1EOS_>:
    packet_data = nullptr;
 800486a:	2300      	movs	r3, #0
LoRa_packet::LoRa_packet(LoRa_packet&& right) {
 800486c:	b510      	push	{r4, lr}
 800486e:	4604      	mov	r4, r0
    packet_data = nullptr;
 8004870:	6003      	str	r3, [r0, #0]
LoRa_packet::LoRa_packet(LoRa_packet&& right) {
 8004872:	8083      	strh	r3, [r0, #4]
    *this = std::move(right);
 8004874:	f7ff ffea 	bl	800484c <_ZN11LoRa_packetaSEOS_>
}
 8004878:	4620      	mov	r0, r4
 800487a:	bd10      	pop	{r4, pc}

0800487c <_GLOBAL__sub_I_lora_packet_data>:
}
 800487c:	2250      	movs	r2, #80	; 0x50
    std::array<uint8_t, SIZE_LORA_PACKET_MAX_LEN> data;
#else
    uint8_t data[SIZE_LORA_PACKET_MAX_LEN]; // Байты
#endif

    LoRa_packet_data() = default;
 800487e:	2001      	movs	r0, #1
 8004880:	2100      	movs	r1, #0
    struct array
 8004882:	4b04      	ldr	r3, [pc, #16]	; (8004894 <_GLOBAL__sub_I_lora_packet_data+0x18>)
 8004884:	3a01      	subs	r2, #1
 8004886:	7018      	strb	r0, [r3, #0]
 8004888:	7059      	strb	r1, [r3, #1]
 800488a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800488e:	d1f9      	bne.n	8004884 <_GLOBAL__sub_I_lora_packet_data+0x8>
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	200006e0 	.word	0x200006e0

08004898 <_ZN13LoRa_registerD1Ev>:
    init(spi, nss_port, nss_pin);
}
#endif

LoRa_register::~LoRa_register() {
}
 8004898:	4770      	bx	lr

0800489a <_ZN13LoRa_register4initEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
    pinMode(_nss, OUTPUT);
    digitalWrite(_nss, HIGH);
}
#else
void LoRa_register::init(SPI_HandleTypeDef* spi, GPIO_TypeDef* nss_port, uint16_t nss_pin) {
    _spi = spi;
 800489a:	6001      	str	r1, [r0, #0]
    _nss_port = nss_port;
 800489c:	6082      	str	r2, [r0, #8]
	_nss_pin = nss_pin;
 800489e:	8083      	strh	r3, [r0, #4]
}
 80048a0:	4770      	bx	lr

080048a2 <_ZN13LoRa_register5clearEv>:



void LoRa_register::clear() {
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
        _registers_data[i] = 0;
 80048a2:	2200      	movs	r2, #0
 80048a4:	f100 030c 	add.w	r3, r0, #12
 80048a8:	f100 017c 	add.w	r1, r0, #124	; 0x7c
 80048ac:	f803 2b01 	strb.w	r2, [r3], #1
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 80048b0:	428b      	cmp	r3, r1
        _registers_state[i] = false;
 80048b2:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 80048b6:	d1f9      	bne.n	80048ac <_ZN13LoRa_register5clearEv+0xa>
    }
    _send = false;
 80048b8:	f880 20ec 	strb.w	r2, [r0, #236]	; 0xec
}
 80048bc:	4770      	bx	lr
	...

080048c0 <_ZN13LoRa_registerC1Ev>:
LoRa_register::LoRa_register() {
 80048c0:	b570      	push	{r4, r5, r6, lr}
 80048c2:	4604      	mov	r4, r0
 80048c4:	4e27      	ldr	r6, [pc, #156]	; (8004964 <_ZN13LoRa_registerC1Ev+0xa4>)
 80048c6:	f100 05f0 	add.w	r5, r0, #240	; 0xf0
 80048ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80048cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048ce:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80048d2:	4e25      	ldr	r6, [pc, #148]	; (8004968 <_ZN13LoRa_registerC1Ev+0xa8>)
 80048d4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80048d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80048da:	f504 7586 	add.w	r5, r4, #268	; 0x10c
 80048de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048e0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80048e4:	4e21      	ldr	r6, [pc, #132]	; (800496c <_ZN13LoRa_registerC1Ev+0xac>)
 80048e6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80048ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80048ec:	f504 7594 	add.w	r5, r4, #296	; 0x128
 80048f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048f2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80048f6:	4e1e      	ldr	r6, [pc, #120]	; (8004970 <_ZN13LoRa_registerC1Ev+0xb0>)
 80048f8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80048fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80048fe:	f504 75a2 	add.w	r5, r4, #324	; 0x144
 8004902:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004904:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004908:	4e1a      	ldr	r6, [pc, #104]	; (8004974 <_ZN13LoRa_registerC1Ev+0xb4>)
 800490a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800490e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004910:	f504 75b0 	add.w	r5, r4, #352	; 0x160
 8004914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004916:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800491a:	4e17      	ldr	r6, [pc, #92]	; (8004978 <_ZN13LoRa_registerC1Ev+0xb8>)
 800491c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004920:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004922:	f504 75be 	add.w	r5, r4, #380	; 0x17c
 8004926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004928:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800492c:	4e13      	ldr	r6, [pc, #76]	; (800497c <_ZN13LoRa_registerC1Ev+0xbc>)
 800492e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004932:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004934:	f504 75cc 	add.w	r5, r4, #408	; 0x198
 8004938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800493a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800493e:	4e10      	ldr	r6, [pc, #64]	; (8004980 <_ZN13LoRa_registerC1Ev+0xc0>)
 8004940:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004944:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004946:	f504 75da 	add.w	r5, r4, #436	; 0x1b4
 800494a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800494c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    _send = false;
 8004950:	2300      	movs	r3, #0
LoRa_register::LoRa_register() {
 8004952:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    clear();
 8004956:	4620      	mov	r0, r4
    _send = false;
 8004958:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    clear();
 800495c:	f7ff ffa1 	bl	80048a2 <_ZN13LoRa_register5clearEv>
}
 8004960:	bd70      	pop	{r4, r5, r6, pc}
 8004962:	bf00      	nop
 8004964:	20001ee8 	.word	0x20001ee8
 8004968:	20001eb0 	.word	0x20001eb0
 800496c:	20001e5c 	.word	0x20001e5c
 8004970:	20001f58 	.word	0x20001f58
 8004974:	20001f3c 	.word	0x20001f3c
 8004978:	20001bbc 	.word	0x20001bbc
 800497c:	20001c48 	.word	0x20001c48
 8004980:	20001ba0 	.word	0x20001ba0

08004984 <_ZN13LoRa_register15field_registersEP13Address_fieldh>:
        result_field_registers_data[result_field_registers_len++] = ((uint8_t)(field.get_registers()[i].address() & 0xFF));
    }
    return result_field_registers_len;
}
uint8_t LoRa_register::field_registers(Address_field* fields, uint8_t amt_fields) {
    result_field_registers_len = 0;
 8004984:	2300      	movs	r3, #0
uint8_t LoRa_register::field_registers(Address_field* fields, uint8_t amt_fields) {
 8004986:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800498a:	4605      	mov	r5, r0
 800498c:	4614      	mov	r4, r2
    bool reg_add[LORA_DATA_SIZE];
    uint8_t adr;
    if((fields == nullptr) || (amt_fields == 0))
 800498e:	460e      	mov	r6, r1
uint8_t LoRa_register::field_registers(Address_field* fields, uint8_t amt_fields) {
 8004990:	b09d      	sub	sp, #116	; 0x74
    result_field_registers_len = 0;
 8004992:	f880 3220 	strb.w	r3, [r0, #544]	; 0x220
    if((fields == nullptr) || (amt_fields == 0))
 8004996:	b3d1      	cbz	r1, 8004a0e <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x8a>
 8004998:	b3aa      	cbz	r2, 8004a06 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x82>
 800499a:	466a      	mov	r2, sp
        return result_field_registers_len;
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
        reg_add[i] = false;
 800499c:	4619      	mov	r1, r3
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 800499e:	3301      	adds	r3, #1
 80049a0:	2b70      	cmp	r3, #112	; 0x70
        reg_add[i] = false;
 80049a2:	f802 1b01 	strb.w	r1, [r2], #1
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 80049a6:	d1fa      	bne.n	800499e <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x1a>
    }
    for(int i = 0; i < amt_fields; ++i) {
 80049a8:	2700      	movs	r7, #0
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 80049aa:	f04f 091c 	mov.w	r9, #28
 80049ae:	46b8      	mov	r8, r7
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
            if(reg_add[adr] == false) {
                result_field_registers_data[result_field_registers_len++] = adr;
                reg_add[adr] = true;
 80049b0:	f04f 0a01 	mov.w	sl, #1
 80049b4:	e001      	b.n	80049ba <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x36>
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 80049b6:	f04f 0800 	mov.w	r8, #0
 80049ba:	fb09 6b07 	mla	fp, r9, r7, r6
 80049be:	4658      	mov	r0, fp
 80049c0:	f7fe ff8f 	bl	80038e2 <_ZNK13Address_field13get_reg_countEv>
 80049c4:	4540      	cmp	r0, r8
 80049c6:	dd19      	ble.n	80049fc <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x78>
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 80049c8:	4658      	mov	r0, fp
 80049ca:	f7fe ff88 	bl	80038de <_ZNK13Address_field13get_registersEv>
 80049ce:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 80049d2:	f7fe fd8c 	bl	80034ee <_ZNK8Register7addressEv>
            if(reg_add[adr] == false) {
 80049d6:	ab1c      	add	r3, sp, #112	; 0x70
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 80049d8:	b2c0      	uxtb	r0, r0
            if(reg_add[adr] == false) {
 80049da:	181a      	adds	r2, r3, r0
 80049dc:	f812 3c70 	ldrb.w	r3, [r2, #-112]
 80049e0:	b94b      	cbnz	r3, 80049f6 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x72>
                result_field_registers_data[result_field_registers_len++] = adr;
 80049e2:	f895 3220 	ldrb.w	r3, [r5, #544]	; 0x220
                reg_add[adr] = true;
 80049e6:	f802 ac70 	strb.w	sl, [r2, #-112]
                result_field_registers_data[result_field_registers_len++] = adr;
 80049ea:	1c59      	adds	r1, r3, #1
 80049ec:	442b      	add	r3, r5
 80049ee:	f885 1220 	strb.w	r1, [r5, #544]	; 0x220
 80049f2:	f883 01d0 	strb.w	r0, [r3, #464]	; 0x1d0
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 80049f6:	f108 0801 	add.w	r8, r8, #1
 80049fa:	e7de      	b.n	80049ba <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x36>
 80049fc:	3701      	adds	r7, #1
    for(int i = 0; i < amt_fields; ++i) {
 80049fe:	42bc      	cmp	r4, r7
 8004a00:	dcd9      	bgt.n	80049b6 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x32>
            }
        }
    }
    return result_field_registers_len;
 8004a02:	f895 4220 	ldrb.w	r4, [r5, #544]	; 0x220
}
 8004a06:	4620      	mov	r0, r4
 8004a08:	b01d      	add	sp, #116	; 0x74
 8004a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return result_field_registers_len;
 8004a0e:	460c      	mov	r4, r1
 8004a10:	e7f9      	b.n	8004a06 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x82>

08004a12 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>:
            result_check_missing_register_data[result_check_missing_register_len++] = result_field_registers_data[i];
        }
    }
    return result_check_missing_register_len;
}
uint8_t LoRa_register::check_missing_register(Address_field* fields, uint8_t amt_fields) {
 8004a12:	b538      	push	{r3, r4, r5, lr}
    result_check_missing_register_len = 0;
 8004a14:	2500      	movs	r5, #0
uint8_t LoRa_register::check_missing_register(Address_field* fields, uint8_t amt_fields) {
 8004a16:	4604      	mov	r4, r0
 8004a18:	4613      	mov	r3, r2
    result_check_missing_register_len = 0;
 8004a1a:	f880 5271 	strb.w	r5, [r0, #625]	; 0x271
    if((fields == nullptr) || (amt_fields == 0))
 8004a1e:	b1c9      	cbz	r1, 8004a54 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x42>
 8004a20:	b1ca      	cbz	r2, 8004a56 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x44>
        return result_check_missing_register_len;
    field_registers(fields, amt_fields);
 8004a22:	f7ff ffaf 	bl	8004984 <_ZN13LoRa_register15field_registersEP13Address_fieldh>
    for(int i = result_field_registers_len - 1; i >= 0; --i) {
 8004a26:	f894 2220 	ldrb.w	r2, [r4, #544]	; 0x220
 8004a2a:	4422      	add	r2, r4
 8004a2c:	42a2      	cmp	r2, r4
 8004a2e:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 8004a32:	d010      	beq.n	8004a56 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x44>
        if(_registers_state[result_field_registers_data[i]] == false) {
 8004a34:	f892 11cf 	ldrb.w	r1, [r2, #463]	; 0x1cf
 8004a38:	4421      	add	r1, r4
 8004a3a:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
 8004a3e:	b939      	cbnz	r1, 8004a50 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x3e>
            result_check_missing_register_data[result_check_missing_register_len++] = result_field_registers_data[i];
 8004a40:	1c59      	adds	r1, r3, #1
 8004a42:	f884 1271 	strb.w	r1, [r4, #625]	; 0x271
 8004a46:	f892 11cf 	ldrb.w	r1, [r2, #463]	; 0x1cf
 8004a4a:	4423      	add	r3, r4
 8004a4c:	f883 1221 	strb.w	r1, [r3, #545]	; 0x221
    for(int i = result_field_registers_len - 1; i >= 0; --i) {
 8004a50:	3a01      	subs	r2, #1
 8004a52:	e7eb      	b.n	8004a2c <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x1a>
        return result_check_missing_register_len;
 8004a54:	460b      	mov	r3, r1
        }
    }
    return result_check_missing_register_len;
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	bd38      	pop	{r3, r4, r5, pc}

08004a5a <_ZN13LoRa_register10check_readEP13Address_fieldh>:
    return false;
}
bool LoRa_register::check_read(Address_field* fields, uint8_t amt_fields) {
    bool check_reg_read = false;
    uint8_t reg_bit[LORA_DATA_SIZE];
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8004a5a:	2300      	movs	r3, #0
bool LoRa_register::check_read(Address_field* fields, uint8_t amt_fields) {
 8004a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a60:	b0a1      	sub	sp, #132	; 0x84
 8004a62:	f10d 0810 	add.w	r8, sp, #16
 8004a66:	4604      	mov	r4, r0
 8004a68:	e9cd 1202 	strd	r1, r2, [sp, #8]
        reg_bit[i] = 0;
 8004a6c:	4618      	mov	r0, r3
bool LoRa_register::check_read(Address_field* fields, uint8_t amt_fields) {
 8004a6e:	4641      	mov	r1, r8
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8004a70:	3301      	adds	r3, #1
 8004a72:	2b70      	cmp	r3, #112	; 0x70
        reg_bit[i] = 0;
 8004a74:	f801 0b01 	strb.w	r0, [r1], #1
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8004a78:	d1fa      	bne.n	8004a70 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x16>
    }
    // Достаём из полей значения битов регистров
    uint8_t adr;
    for(int i = 0; i < amt_fields; ++i) {
 8004a7a:	2600      	movs	r6, #0
 8004a7c:	f04f 0a1c 	mov.w	sl, #28
 8004a80:	46b1      	mov	r9, r6
 8004a82:	9b03      	ldr	r3, [sp, #12]
 8004a84:	42b3      	cmp	r3, r6
 8004a86:	dd28      	ble.n	8004ada <_ZN13LoRa_register10check_readEP13Address_fieldh+0x80>
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8004a88:	f04f 0b00 	mov.w	fp, #0
 8004a8c:	9b02      	ldr	r3, [sp, #8]
 8004a8e:	fb0a 3706 	mla	r7, sl, r6, r3
 8004a92:	4638      	mov	r0, r7
 8004a94:	f7fe ff25 	bl	80038e2 <_ZNK13Address_field13get_reg_countEv>
 8004a98:	4558      	cmp	r0, fp
 8004a9a:	dd1c      	ble.n	8004ad6 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x7c>
            adr = fields[i].get_registers()[j].address();
 8004a9c:	4638      	mov	r0, r7
 8004a9e:	f7fe ff1e 	bl	80038de <_ZNK13Address_field13get_registersEv>
 8004aa2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004aa6:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
 8004aaa:	9301      	str	r3, [sp, #4]
 8004aac:	f7fe fd1f 	bl	80034ee <_ZNK8Register7addressEv>
 8004ab0:	4605      	mov	r5, r0
            reg_bit[adr] |= fields[i].get_registers()[j].mask();
 8004ab2:	4638      	mov	r0, r7
 8004ab4:	f7fe ff13 	bl	80038de <_ZNK13Address_field13get_registersEv>
 8004ab8:	9b01      	ldr	r3, [sp, #4]
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8004aba:	f10b 0b01 	add.w	fp, fp, #1
            reg_bit[adr] |= fields[i].get_registers()[j].mask();
 8004abe:	4418      	add	r0, r3
 8004ac0:	f7fe fd17 	bl	80034f2 <_ZNK8Register4maskEv>
 8004ac4:	b2eb      	uxtb	r3, r5
 8004ac6:	aa20      	add	r2, sp, #128	; 0x80
 8004ac8:	4413      	add	r3, r2
 8004aca:	f813 5c70 	ldrb.w	r5, [r3, #-112]
 8004ace:	4305      	orrs	r5, r0
 8004ad0:	f803 5c70 	strb.w	r5, [r3, #-112]
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8004ad4:	e7dd      	b.n	8004a92 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x38>
    for(int i = 0; i < amt_fields; ++i) {
 8004ad6:	3601      	adds	r6, #1
 8004ad8:	e7d3      	b.n	8004a82 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x28>
    }

    reg_read_len = 0;
    reg_not_read_len = 0;

    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8004ada:	2300      	movs	r3, #0
    bool check_reg_read = false;
 8004adc:	4618      	mov	r0, r3
    reg_read_len = 0;
 8004ade:	f884 92c2 	strb.w	r9, [r4, #706]	; 0x2c2
    reg_not_read_len = 0;
 8004ae2:	f884 9313 	strb.w	r9, [r4, #787]	; 0x313
        if (reg_bit[i] != 0x00) {
            if ((reg_bit[i] == 0xFF) || (_registers_state[i] == true)) {
 8004ae6:	f104 067c 	add.w	r6, r4, #124	; 0x7c
        if (reg_bit[i] != 0x00) {
 8004aea:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004aee:	b161      	cbz	r1, 8004b0a <_ZN13LoRa_register10check_readEP13Address_fieldh+0xb0>
            if ((reg_bit[i] == 0xFF) || (_registers_state[i] == true)) {
 8004af0:	29ff      	cmp	r1, #255	; 0xff
 8004af2:	b2dd      	uxtb	r5, r3
 8004af4:	d001      	beq.n	8004afa <_ZN13LoRa_register10check_readEP13Address_fieldh+0xa0>
 8004af6:	5cf1      	ldrb	r1, [r6, r3]
 8004af8:	b169      	cbz	r1, 8004b16 <_ZN13LoRa_register10check_readEP13Address_fieldh+0xbc>
                // Если биты занимают всё пространство регистра, то можно не считывать, или если он был считан ранее
                reg_not_read[reg_not_read_len++] = i;
 8004afa:	f894 1313 	ldrb.w	r1, [r4, #787]	; 0x313
 8004afe:	1c4f      	adds	r7, r1, #1
 8004b00:	4421      	add	r1, r4
 8004b02:	f884 7313 	strb.w	r7, [r4, #787]	; 0x313
 8004b06:	f881 52c3 	strb.w	r5, [r1, #707]	; 0x2c3
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	2b70      	cmp	r3, #112	; 0x70
 8004b0e:	d1ec      	bne.n	8004aea <_ZN13LoRa_register10check_readEP13Address_fieldh+0x90>
            }
        }
    }
    return check_reg_read; // Наличие хоть одного регистра, который нужно будет считать

}
 8004b10:	b021      	add	sp, #132	; 0x84
 8004b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                reg_read[reg_read_len++] = i;
 8004b16:	f894 12c2 	ldrb.w	r1, [r4, #706]	; 0x2c2
 8004b1a:	1c48      	adds	r0, r1, #1
 8004b1c:	4421      	add	r1, r4
 8004b1e:	f884 02c2 	strb.w	r0, [r4, #706]	; 0x2c2
                check_reg_read = true;
 8004b22:	2001      	movs	r0, #1
                reg_read[reg_read_len++] = i;
 8004b24:	f881 5272 	strb.w	r5, [r1, #626]	; 0x272
                check_reg_read = true;
 8004b28:	e7ef      	b.n	8004b0a <_ZN13LoRa_register10check_readEP13Address_fieldh+0xb0>

08004b2a <_ZN13LoRa_register16_single_transferEhh>:
    return _single_transfer(address & 0x7f, 0x00);
}
void LoRa_register::_write_register(uint8_t address, uint8_t value) {
    _single_transfer(address | 0x80, value);
}
uint8_t LoRa_register::_single_transfer(uint8_t address, uint8_t value) {
 8004b2a:	b510      	push	{r4, lr}
 8004b2c:	b086      	sub	sp, #24
 8004b2e:	4604      	mov	r4, r0
 8004b30:	f88d 100f 	strb.w	r1, [sp, #15]
 8004b34:	f88d 200e 	strb.w	r2, [sp, #14]
    _spi->endTransaction();
    // Прекращение NSS сигнала
    digitalWrite(_nss, HIGH);
#else
    // Подача NSS сигнала
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 8004b38:	8881      	ldrh	r1, [r0, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	6880      	ldr	r0, [r0, #8]
 8004b3e:	f003 fc59 	bl	80083f4 <HAL_GPIO_WritePin>
    // Отправка бита действия и 7 бит адреса
    HAL_SPI_TransmitReceive(_spi, &address, &response, 1, 1000);
 8004b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b46:	6820      	ldr	r0, [r4, #0]
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	f10d 0217 	add.w	r2, sp, #23
 8004b4e:	2301      	movs	r3, #1
 8004b50:	f10d 010f 	add.w	r1, sp, #15
 8004b54:	f005 fe78 	bl	800a848 <HAL_SPI_TransmitReceive>
 8004b58:	2332      	movs	r3, #50	; 0x32
    for(int i = 0; i < 50; i++) __NOP();
 8004b5a:	bf00      	nop
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	d1fc      	bne.n	8004b5a <_ZN13LoRa_register16_single_transferEhh+0x30>
    // Отправка/приём байта значения
    HAL_SPI_TransmitReceive(_spi, &value, &response, 1, 1000);
 8004b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b64:	6820      	ldr	r0, [r4, #0]
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	f10d 0217 	add.w	r2, sp, #23
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	f10d 010e 	add.w	r1, sp, #14
 8004b72:	f005 fe69 	bl	800a848 <HAL_SPI_TransmitReceive>
 8004b76:	2314      	movs	r3, #20
    for(int i = 0; i < 20; i++) __NOP();
 8004b78:	bf00      	nop
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	d1fc      	bne.n	8004b78 <_ZN13LoRa_register16_single_transferEhh+0x4e>
    // Прекращение NSS сигнала
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_SET);
 8004b7e:	68a0      	ldr	r0, [r4, #8]
 8004b80:	2201      	movs	r2, #1
 8004b82:	88a1      	ldrh	r1, [r4, #4]
 8004b84:	f003 fc36 	bl	80083f4 <HAL_GPIO_WritePin>
#endif
    return response;
}
 8004b88:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8004b8c:	b006      	add	sp, #24
 8004b8e:	bd10      	pop	{r4, pc}

08004b90 <_ZN13LoRa_register14_read_registerEh>:
    return _single_transfer(address & 0x7f, 0x00);
 8004b90:	2200      	movs	r2, #0
 8004b92:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004b96:	f7ff bfc8 	b.w	8004b2a <_ZN13LoRa_register16_single_transferEhh>

08004b9a <_ZN13LoRa_register13register_readEP13Address_fieldhb>:
uint8_t LoRa_register::register_read(Address_field* fields, uint8_t amt_fields, bool update) {
 8004b9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b9e:	461f      	mov	r7, r3
    if (_send)
 8004ba0:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
uint8_t LoRa_register::register_read(Address_field* fields, uint8_t amt_fields, bool update) {
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	460d      	mov	r5, r1
 8004ba8:	4616      	mov	r6, r2
    if (_send)
 8004baa:	b10b      	cbz	r3, 8004bb0 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x16>
        clear();
 8004bac:	f7ff fe79 	bl	80048a2 <_ZN13LoRa_register5clearEv>
        field_registers(fields, amt_fields);
 8004bb0:	4632      	mov	r2, r6
 8004bb2:	4629      	mov	r1, r5
 8004bb4:	4620      	mov	r0, r4
    if (update) {
 8004bb6:	b1b7      	cbz	r7, 8004be6 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x4c>
        field_registers(fields, amt_fields);
 8004bb8:	f7ff fee4 	bl	8004984 <_ZN13LoRa_register15field_registersEP13Address_fieldh>
        len = result_field_registers_len;
 8004bbc:	f894 7220 	ldrb.w	r7, [r4, #544]	; 0x220
        registers = &result_field_registers_data;
 8004bc0:	f504 78e8 	add.w	r8, r4, #464	; 0x1d0
    for(int i = 0; i < amt_read; ++i) {
 8004bc4:	2600      	movs	r6, #0
        _registers_state[adr] = true;
 8004bc6:	f04f 0901 	mov.w	r9, #1
    for(int i = 0; i < amt_read; ++i) {
 8004bca:	42b7      	cmp	r7, r6
 8004bcc:	dd12      	ble.n	8004bf4 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x5a>
        adr = (*registers)[i];
 8004bce:	f818 5006 	ldrb.w	r5, [r8, r6]
        _registers_data[adr] = _read_register(adr);
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	4629      	mov	r1, r5
 8004bd6:	f7ff ffdb 	bl	8004b90 <_ZN13LoRa_register14_read_registerEh>
 8004bda:	4425      	add	r5, r4
 8004bdc:	7328      	strb	r0, [r5, #12]
        _registers_state[adr] = true;
 8004bde:	f885 907c 	strb.w	r9, [r5, #124]	; 0x7c
    for(int i = 0; i < amt_read; ++i) {
 8004be2:	3601      	adds	r6, #1
 8004be4:	e7f1      	b.n	8004bca <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x30>
        check_missing_register(fields, amt_fields);
 8004be6:	f7ff ff14 	bl	8004a12 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
        registers = &result_check_missing_register_data;
 8004bea:	f204 2821 	addw	r8, r4, #545	; 0x221
        len = result_check_missing_register_len;
 8004bee:	f894 7271 	ldrb.w	r7, [r4, #625]	; 0x271
 8004bf2:	e7e7      	b.n	8004bc4 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x2a>
}
 8004bf4:	4638      	mov	r0, r7
 8004bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004bfa <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb>:
uint8_t LoRa_register::get_field_value(Address_field* fields, uint32_t* values, uint8_t amt, bool read) {
 8004bfa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bfe:	4604      	mov	r4, r0
 8004c00:	4690      	mov	r8, r2
    check_missing_register(fields, amt);
 8004c02:	461a      	mov	r2, r3
uint8_t LoRa_register::get_field_value(Address_field* fields, uint32_t* values, uint8_t amt, bool read) {
 8004c04:	461e      	mov	r6, r3
 8004c06:	460f      	mov	r7, r1
 8004c08:	f89d 5020 	ldrb.w	r5, [sp, #32]
    check_missing_register(fields, amt);
 8004c0c:	f7ff ff01 	bl	8004a12 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
    if((result_check_missing_register_len != 0) || read) {
 8004c10:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 8004c14:	b903      	cbnz	r3, 8004c18 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x1e>
 8004c16:	b12d      	cbz	r5, 8004c24 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x2a>
        register_read(fields, amt, read);
 8004c18:	462b      	mov	r3, r5
 8004c1a:	4632      	mov	r2, r6
 8004c1c:	4639      	mov	r1, r7
 8004c1e:	4620      	mov	r0, r4
 8004c20:	f7ff ffbb 	bl	8004b9a <_ZN13LoRa_register13register_readEP13Address_fieldhb>
uint8_t LoRa_register::get_field_value(Address_field* fields, uint32_t* values, uint8_t amt, bool read) {
 8004c24:	2500      	movs	r5, #0
        values[i] = fields[i].get_value(_registers_data, LORA_DATA_SIZE);
 8004c26:	f04f 091c 	mov.w	r9, #28
 8004c2a:	340c      	adds	r4, #12
    for(int i = 0; i < amt; ++i)
 8004c2c:	42ae      	cmp	r6, r5
 8004c2e:	dd09      	ble.n	8004c44 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x4a>
        values[i] = fields[i].get_value(_registers_data, LORA_DATA_SIZE);
 8004c30:	fb09 7005 	mla	r0, r9, r5, r7
 8004c34:	2270      	movs	r2, #112	; 0x70
 8004c36:	4621      	mov	r1, r4
 8004c38:	f7fe fcd5 	bl	80035e6 <_ZNK13Address_field9get_valueEPKhi>
 8004c3c:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
    for(int i = 0; i < amt; ++i)
 8004c40:	3501      	adds	r5, #1
 8004c42:	e7f3      	b.n	8004c2c <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x32>
}
 8004c44:	4630      	mov	r0, r6
 8004c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004c4a <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>:
uint8_t LoRa_register::get_field_value(Address_field field, uint32_t* value, bool read) {
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	b513      	push	{r0, r1, r4, lr}
 8004c4e:	ac05      	add	r4, sp, #20
 8004c50:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return get_field_value(&field, value, 1, read);
 8004c54:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8004c58:	4621      	mov	r1, r4
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c5e:	2301      	movs	r3, #1
 8004c60:	f7ff ffcb 	bl	8004bfa <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb>
}
 8004c64:	b002      	add	sp, #8
 8004c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c6a:	b004      	add	sp, #16
 8004c6c:	4770      	bx	lr
	...

08004c70 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>:
uint8_t LoRa_register::set_field_value(Address_field* fields, uint32_t* values, uint8_t amt) {
 8004c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c74:	4604      	mov	r4, r0
 8004c76:	4690      	mov	r8, r2
    check_missing_register(fields, amt);
 8004c78:	461a      	mov	r2, r3
uint8_t LoRa_register::set_field_value(Address_field* fields, uint32_t* values, uint8_t amt) {
 8004c7a:	461e      	mov	r6, r3
 8004c7c:	460f      	mov	r7, r1
    check_missing_register(fields, amt);
 8004c7e:	f7ff fec8 	bl	8004a12 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
    if(result_check_missing_register_len > 0) {
 8004c82:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 8004c86:	b1f3      	cbz	r3, 8004cc6 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x56>
        read_fields = check_read(fields, amt);
 8004c88:	4632      	mov	r2, r6
 8004c8a:	4639      	mov	r1, r7
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	f7ff fee4 	bl	8004a5a <_ZN13LoRa_register10check_readEP13Address_fieldh>
            _registers_state[reg_not_read[i]] = true;
 8004c92:	2101      	movs	r1, #1
        for(int i = 0; i < reg_not_read_len; ++i) {
 8004c94:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8004cf4 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x84>
 8004c98:	f894 5313 	ldrb.w	r5, [r4, #787]	; 0x313
 8004c9c:	f204 22c3 	addw	r2, r4, #707	; 0x2c3
 8004ca0:	ebac 0c04 	sub.w	ip, ip, r4
 8004ca4:	eb0c 0302 	add.w	r3, ip, r2
 8004ca8:	429d      	cmp	r5, r3
 8004caa:	dd05      	ble.n	8004cb8 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x48>
            _registers_state[reg_not_read[i]] = true;
 8004cac:	f812 3b01 	ldrb.w	r3, [r2], #1
 8004cb0:	4423      	add	r3, r4
 8004cb2:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
        for(int i = 0; i < reg_not_read_len; ++i) {
 8004cb6:	e7f5      	b.n	8004ca4 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x34>
        if(read_fields) {
 8004cb8:	b128      	cbz	r0, 8004cc6 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x56>
            register_read(fields, amt, false);
 8004cba:	2300      	movs	r3, #0
 8004cbc:	4632      	mov	r2, r6
 8004cbe:	4639      	mov	r1, r7
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	f7ff ff6a 	bl	8004b9a <_ZN13LoRa_register13register_readEP13Address_fieldhb>
uint8_t LoRa_register::set_field_value(Address_field* fields, uint32_t* values, uint8_t amt) {
 8004cc6:	2500      	movs	r5, #0
        result = fields[i].set_value(values[i], _registers_data, LORA_DATA_SIZE);
 8004cc8:	f04f 0a1c 	mov.w	sl, #28
 8004ccc:	340c      	adds	r4, #12
    for(int i = 0; i < amt; ++i) {
 8004cce:	42ae      	cmp	r6, r5
 8004cd0:	fa5f f985 	uxtb.w	r9, r5
 8004cd4:	dd0a      	ble.n	8004cec <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x7c>
        result = fields[i].set_value(values[i], _registers_data, LORA_DATA_SIZE);
 8004cd6:	2370      	movs	r3, #112	; 0x70
 8004cd8:	4622      	mov	r2, r4
 8004cda:	fb0a 7005 	mla	r0, sl, r5, r7
 8004cde:	f858 1025 	ldr.w	r1, [r8, r5, lsl #2]
 8004ce2:	f7fe fcb0 	bl	8003646 <_ZNK13Address_field9set_valueEmPhi>
        if(result)
 8004ce6:	b908      	cbnz	r0, 8004cec <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x7c>
    for(int i = 0; i < amt; ++i) {
 8004ce8:	3501      	adds	r5, #1
 8004cea:	e7f0      	b.n	8004cce <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x5e>
}
 8004cec:	4648      	mov	r0, r9
 8004cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf2:	bf00      	nop
 8004cf4:	fffffd3d 	.word	0xfffffd3d

08004cf8 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>:
uint8_t LoRa_register::set_field_value(Address_field field, uint32_t value) {
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	b510      	push	{r4, lr}
 8004cfc:	ac03      	add	r4, sp, #12
 8004cfe:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return set_field_value(&field, &value, 1);
 8004d02:	4621      	mov	r1, r4
 8004d04:	aa0a      	add	r2, sp, #40	; 0x28
 8004d06:	2301      	movs	r3, #1
 8004d08:	f7ff ffb2 	bl	8004c70 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
}
 8004d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d10:	b004      	add	sp, #16
 8004d12:	4770      	bx	lr

08004d14 <_ZN13LoRa_register15_write_registerEhh>:
    _single_transfer(address | 0x80, value);
 8004d14:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004d18:	f7ff bf07 	b.w	8004b2a <_ZN13LoRa_register16_single_transferEhh>

08004d1c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>:
uint8_t LoRa_register::register_write(Address_field* fields, uint8_t amt_fields, bool fl_clear, bool error_clear) {
 8004d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d20:	4604      	mov	r4, r0
 8004d22:	460f      	mov	r7, r1
 8004d24:	4690      	mov	r8, r2
 8004d26:	461e      	mov	r6, r3
 8004d28:	f89d 5018 	ldrb.w	r5, [sp, #24]
    if(check_missing_register(fields, amt_fields) != 0) {
 8004d2c:	f7ff fe71 	bl	8004a12 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
 8004d30:	b130      	cbz	r0, 8004d40 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x24>
        if(error_clear)
 8004d32:	b32d      	cbz	r5, 8004d80 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x64>
            clear();
 8004d34:	4620      	mov	r0, r4
 8004d36:	f7ff fdb4 	bl	80048a2 <_ZN13LoRa_register5clearEv>
        return 0;
 8004d3a:	2000      	movs	r0, #0
}
 8004d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    field_registers(fields, amt_fields);
 8004d40:	4639      	mov	r1, r7
 8004d42:	4642      	mov	r2, r8
 8004d44:	4620      	mov	r0, r4
 8004d46:	f7ff fe1d 	bl	8004984 <_ZN13LoRa_register15field_registersEP13Address_fieldh>
    for(int i = 0; i < result_field_registers_len; ++i) {
 8004d4a:	4f0e      	ldr	r7, [pc, #56]	; (8004d84 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x68>)
 8004d4c:	f504 75e8 	add.w	r5, r4, #464	; 0x1d0
 8004d50:	1b3f      	subs	r7, r7, r4
 8004d52:	f894 2220 	ldrb.w	r2, [r4, #544]	; 0x220
 8004d56:	197b      	adds	r3, r7, r5
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	da07      	bge.n	8004d6c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x50>
        _write_register(result_field_registers_data[i], _registers_data[result_field_registers_data[i]]);
 8004d5c:	f815 1b01 	ldrb.w	r1, [r5], #1
 8004d60:	4620      	mov	r0, r4
 8004d62:	1863      	adds	r3, r4, r1
 8004d64:	7b1a      	ldrb	r2, [r3, #12]
 8004d66:	f7ff ffd5 	bl	8004d14 <_ZN13LoRa_register15_write_registerEhh>
    for(int i = 0; i < result_field_registers_len; ++i) {
 8004d6a:	e7f2      	b.n	8004d52 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x36>
    _send = true;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    if (fl_clear) {
 8004d72:	b116      	cbz	r6, 8004d7a <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x5e>
        clear();
 8004d74:	4620      	mov	r0, r4
 8004d76:	f7ff fd94 	bl	80048a2 <_ZN13LoRa_register5clearEv>
    return result_field_registers_len;
 8004d7a:	f894 0220 	ldrb.w	r0, [r4, #544]	; 0x220
 8004d7e:	e7dd      	b.n	8004d3c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x20>
        return 0;
 8004d80:	4628      	mov	r0, r5
 8004d82:	e7db      	b.n	8004d3c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x20>
 8004d84:	fffffe30 	.word	0xfffffe30

08004d88 <_ZN13LoRa_register14register_writeE13Address_fieldbb>:
uint8_t LoRa_register::register_write(Address_field field, bool fl_clear, bool error_clear) {
 8004d88:	b084      	sub	sp, #16
 8004d8a:	b513      	push	{r0, r1, r4, lr}
 8004d8c:	ac05      	add	r4, sp, #20
 8004d8e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return register_write(&field, 1, fl_clear, error_clear);
 8004d92:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8004d96:	2201      	movs	r2, #1
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8004da0:	f7ff ffbc 	bl	8004d1c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
}
 8004da4:	b002      	add	sp, #8
 8004da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004daa:	b004      	add	sp, #16
 8004dac:	4770      	bx	lr
	...

08004db0 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb>:
uint8_t LoRa_register::clear_flags(Address_field* flags, uint8_t amt_flags, bool back_value) {
 8004db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db4:	b085      	sub	sp, #20
 8004db6:	9301      	str	r3, [sp, #4]
    if(_registers_state[REG_IRQ_FLAGS] == false) {
 8004db8:	4b25      	ldr	r3, [pc, #148]	; (8004e50 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0xa0>)
uint8_t LoRa_register::clear_flags(Address_field* flags, uint8_t amt_flags, bool back_value) {
 8004dba:	4605      	mov	r5, r0
    if(_registers_state[REG_IRQ_FLAGS] == false) {
 8004dbc:	f893 a000 	ldrb.w	sl, [r3]
uint8_t LoRa_register::clear_flags(Address_field* flags, uint8_t amt_flags, bool back_value) {
 8004dc0:	460f      	mov	r7, r1
    if(_registers_state[REG_IRQ_FLAGS] == false) {
 8004dc2:	eb00 060a 	add.w	r6, r0, sl
 8004dc6:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
uint8_t LoRa_register::clear_flags(Address_field* flags, uint8_t amt_flags, bool back_value) {
 8004dca:	4614      	mov	r4, r2
    if(_registers_state[REG_IRQ_FLAGS] == false) {
 8004dcc:	b923      	cbnz	r3, 8004dd8 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x28>
        return 0; // флаги не считаны
 8004dce:	2400      	movs	r4, #0
}
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	b005      	add	sp, #20
 8004dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(int i = 0; i < amt_flags; ++i) {
 8004dd8:	f04f 0800 	mov.w	r8, #0
 8004ddc:	f04f 0b1c 	mov.w	fp, #28
 8004de0:	f500 79e8 	add.w	r9, r0, #464	; 0x1d0
 8004de4:	4544      	cmp	r4, r8
 8004de6:	dd0f      	ble.n	8004e08 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x58>
 8004de8:	fb0b 7208 	mla	r2, fp, r8, r7
 8004dec:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
            if(flags[i] == _flags[j]) {
 8004df0:	4610      	mov	r0, r2
 8004df2:	9103      	str	r1, [sp, #12]
 8004df4:	9202      	str	r2, [sp, #8]
 8004df6:	f7fe fd76 	bl	80038e6 <_ZeqRK13Address_fieldS1_>
 8004dfa:	bb28      	cbnz	r0, 8004e48 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x98>
        for(int j = 0; j < AMT_FLAGS; ++j) {
 8004dfc:	9903      	ldr	r1, [sp, #12]
 8004dfe:	9a02      	ldr	r2, [sp, #8]
 8004e00:	311c      	adds	r1, #28
 8004e02:	4549      	cmp	r1, r9
 8004e04:	d1f4      	bne.n	8004df0 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x40>
 8004e06:	e7e2      	b.n	8004dce <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x1e>
    _registers_data[REG_IRQ_FLAGS] = 0;
 8004e08:	2200      	movs	r2, #0
        _values_clear_flags_[i] = 1;
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	4b11      	ldr	r3, [pc, #68]	; (8004e54 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0xa4>)
    uint8_t data = _registers_data[REG_IRQ_FLAGS];
 8004e0e:	f896 800c 	ldrb.w	r8, [r6, #12]
    _registers_data[REG_IRQ_FLAGS] = 0;
 8004e12:	7332      	strb	r2, [r6, #12]
    for(int i = 0; i < amt_flags; ++i)
 8004e14:	4294      	cmp	r4, r2
 8004e16:	d003      	beq.n	8004e20 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x70>
        _values_clear_flags_[i] = 1;
 8004e18:	f843 1b04 	str.w	r1, [r3], #4
    for(int i = 0; i < amt_flags; ++i)
 8004e1c:	3201      	adds	r2, #1
 8004e1e:	e7f9      	b.n	8004e14 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x64>
    set_field_value(flags, _values_clear_flags_, amt_flags);
 8004e20:	4623      	mov	r3, r4
 8004e22:	4639      	mov	r1, r7
 8004e24:	4a0b      	ldr	r2, [pc, #44]	; (8004e54 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0xa4>)
 8004e26:	4628      	mov	r0, r5
 8004e28:	f7ff ff22 	bl	8004c70 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
    _write_register(REG_IRQ_FLAGS, _registers_data[REG_IRQ_FLAGS]);
 8004e2c:	4651      	mov	r1, sl
 8004e2e:	4628      	mov	r0, r5
 8004e30:	7b32      	ldrb	r2, [r6, #12]
 8004e32:	f7ff ff6f 	bl	8004d14 <_ZN13LoRa_register15_write_registerEhh>
    if(back_value) {
 8004e36:	9b01      	ldr	r3, [sp, #4]
 8004e38:	b113      	cbz	r3, 8004e40 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x90>
        _registers_data[REG_IRQ_FLAGS] = data | ~_registers_data[REG_IRQ_FLAGS];
 8004e3a:	f886 800c 	strb.w	r8, [r6, #12]
 8004e3e:	e7c7      	b.n	8004dd0 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x20>
 8004e40:	7b33      	ldrb	r3, [r6, #12]
 8004e42:	ea68 0803 	orn	r8, r8, r3
 8004e46:	e7f8      	b.n	8004e3a <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x8a>
    for(int i = 0; i < amt_flags; ++i) {
 8004e48:	f108 0801 	add.w	r8, r8, #1
 8004e4c:	e7ca      	b.n	8004de4 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x34>
 8004e4e:	bf00      	nop
 8004e50:	0800b297 	.word	0x0800b297
 8004e54:	20001720 	.word	0x20001720

08004e58 <_ZN13LoRa_register11clear_flagsE13Address_fieldb>:
uint8_t LoRa_register::clear_flags(Address_field flag, bool back_value) {
 8004e58:	b084      	sub	sp, #16
 8004e5a:	b510      	push	{r4, lr}
 8004e5c:	ac03      	add	r4, sp, #12
 8004e5e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return clear_flags(&flag, 1, back_value);
 8004e62:	4621      	mov	r1, r4
 8004e64:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f7ff ffa1 	bl	8004db0 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb>
}
 8004e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e72:	b004      	add	sp, #16
 8004e74:	4770      	bx	lr
	...

08004e78 <_GLOBAL__sub_I_REG_FIFO>:
// ----- ----- ----- Регистры ----- ----- -----
//   ----- ----- ----- - - - - - - ----- ----- -----
const Register
// --- --- --- Регистр очереди --- --- ---
// - REG_FIFO -
reg_fifo[1] = {Register(REG_FIFO, 8, 0)},
 8004e78:	2300      	movs	r3, #0
    // Dio2Mapping, Dio3Mapping, Dio4Mapping, Dio5Mapping,
    Version,
    // FastHopOn, TcxoInputOn,
    PaDac
    // FormerTemp, BitRateFrac, AgcReferenceLevel, AgcStep1, AgcStep2, AgcStep3, AgcStep4, AgcStep5, PllBandwidth
};
 8004e7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
reg_fifo[1] = {Register(REG_FIFO, 8, 0)},
 8004e7e:	4cda      	ldr	r4, [pc, #872]	; (80051e8 <_GLOBAL__sub_I_REG_FIFO+0x370>)
};
 8004e80:	b087      	sub	sp, #28
reg_fifo[1] = {Register(REG_FIFO, 8, 0)},
 8004e82:	4619      	mov	r1, r3
 8004e84:	2208      	movs	r2, #8
 8004e86:	4620      	mov	r0, r4
 8004e88:	f7fe fb10 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_long_range_mode[1] = {Register(REG_OP_MODE, 1, 7)},
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f8df b41c 	ldr.w	fp, [pc, #1052]	; 80052ac <_GLOBAL__sub_I_REG_FIFO+0x434>
 8004e92:	4611      	mov	r1, r2
 8004e94:	2307      	movs	r3, #7
 8004e96:	4658      	mov	r0, fp
 8004e98:	f7fe fb08 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_low_frequency_mode_on[1] = {Register(REG_OP_MODE, 1, 3)},
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f8df a410 	ldr.w	sl, [pc, #1040]	; 80052b0 <_GLOBAL__sub_I_REG_FIFO+0x438>
reg_mode[1] = {Register(REG_OP_MODE, 3, 0)},
 8004ea2:	f8df 9410 	ldr.w	r9, [pc, #1040]	; 80052b4 <_GLOBAL__sub_I_REG_FIFO+0x43c>
reg_low_frequency_mode_on[1] = {Register(REG_OP_MODE, 1, 3)},
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	4650      	mov	r0, sl
 8004eac:	f7fe fafe 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_mode[1] = {Register(REG_OP_MODE, 3, 0)},
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	4648      	mov	r0, r9
 8004eb8:	f7fe faf8 	bl	80034ac <_ZN8RegisterC1Ethh>
              Register(REG_FRF_MSB, 8, 0)},
 8004ebc:	2208      	movs	r2, #8
 8004ebe:	f8df 83f8 	ldr.w	r8, [pc, #1016]	; 80052b8 <_GLOBAL__sub_I_REG_FIFO+0x440>
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	4640      	mov	r0, r8
 8004ec8:	f7fe faf0 	bl	80034ac <_ZN8RegisterC1Ethh>
 8004ecc:	2208      	movs	r2, #8
 8004ece:	2300      	movs	r3, #0
 8004ed0:	eb08 0002 	add.w	r0, r8, r2
 8004ed4:	2107      	movs	r1, #7
 8004ed6:	f7fe fae9 	bl	80034ac <_ZN8RegisterC1Ethh>
 8004eda:	2300      	movs	r3, #0
 8004edc:	2208      	movs	r2, #8
 8004ede:	2106      	movs	r1, #6
 8004ee0:	f108 0010 	add.w	r0, r8, #16
 8004ee4:	f7fe fae2 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_pa_select[1] = {Register(REG_PA_CONFIG, 1, 7)},
 8004ee8:	2307      	movs	r3, #7
 8004eea:	2201      	movs	r2, #1
 8004eec:	2109      	movs	r1, #9
 8004eee:	48bf      	ldr	r0, [pc, #764]	; (80051ec <_GLOBAL__sub_I_REG_FIFO+0x374>)
 8004ef0:	f7fe fadc 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_max_power[1] = {Register(REG_PA_CONFIG, 3, 4)},
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	2203      	movs	r2, #3
 8004ef8:	2109      	movs	r1, #9
 8004efa:	48bd      	ldr	r0, [pc, #756]	; (80051f0 <_GLOBAL__sub_I_REG_FIFO+0x378>)
 8004efc:	f7fe fad6 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_output_power[1] = {Register(REG_PA_CONFIG, 4, 0)},
 8004f00:	2300      	movs	r3, #0
 8004f02:	2204      	movs	r2, #4
 8004f04:	2109      	movs	r1, #9
 8004f06:	48bb      	ldr	r0, [pc, #748]	; (80051f4 <_GLOBAL__sub_I_REG_FIFO+0x37c>)
 8004f08:	f7fe fad0 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_lna_boost_hf[1] = {Register(REG_LNA, 2, 0)},
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	2202      	movs	r2, #2
 8004f10:	210c      	movs	r1, #12
 8004f12:	48b9      	ldr	r0, [pc, #740]	; (80051f8 <_GLOBAL__sub_I_REG_FIFO+0x380>)
 8004f14:	f7fe faca 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_fifo_addr_ptr[1] = {Register(REG_FIFO_ADDR_PTR, 8, 0)},
 8004f18:	2300      	movs	r3, #0
 8004f1a:	2208      	movs	r2, #8
 8004f1c:	210d      	movs	r1, #13
 8004f1e:	48b7      	ldr	r0, [pc, #732]	; (80051fc <_GLOBAL__sub_I_REG_FIFO+0x384>)
 8004f20:	f7fe fac4 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_fifo_tx_base_addr[1] = {Register(REG_FIFO_TX_BASE_ADDR, 8, 0)},
 8004f24:	2300      	movs	r3, #0
 8004f26:	2208      	movs	r2, #8
 8004f28:	210e      	movs	r1, #14
 8004f2a:	48b5      	ldr	r0, [pc, #724]	; (8005200 <_GLOBAL__sub_I_REG_FIFO+0x388>)
 8004f2c:	f7fe fabe 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_fifo_rx_base_addr[1] = {Register(REG_FIFO_RX_BASE_ADDR, 8, 0)},
 8004f30:	2300      	movs	r3, #0
 8004f32:	2208      	movs	r2, #8
 8004f34:	210f      	movs	r1, #15
 8004f36:	48b3      	ldr	r0, [pc, #716]	; (8005204 <_GLOBAL__sub_I_REG_FIFO+0x38c>)
 8004f38:	f7fe fab8 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_fifo_rx_current_addr[1] = {Register(REG_FIFO_RX_CURRENT_ADDR, 8, 0)},
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	2208      	movs	r2, #8
 8004f40:	2110      	movs	r1, #16
 8004f42:	48b1      	ldr	r0, [pc, #708]	; (8005208 <_GLOBAL__sub_I_REG_FIFO+0x390>)
 8004f44:	f7fe fab2 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_rx_timeout[1] = {Register(REG_IRQ_FLAGS, 1, 7)},
 8004f48:	2307      	movs	r3, #7
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	2112      	movs	r1, #18
 8004f4e:	48af      	ldr	r0, [pc, #700]	; (800520c <_GLOBAL__sub_I_REG_FIFO+0x394>)
 8004f50:	f7fe faac 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_rx_done[1] = {Register(REG_IRQ_FLAGS, 1, 6)},
 8004f54:	2306      	movs	r3, #6
 8004f56:	2201      	movs	r2, #1
 8004f58:	2112      	movs	r1, #18
 8004f5a:	48ad      	ldr	r0, [pc, #692]	; (8005210 <_GLOBAL__sub_I_REG_FIFO+0x398>)
 8004f5c:	f7fe faa6 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_payload_crc_error[1] = {Register(REG_IRQ_FLAGS, 1, 5)},
 8004f60:	2305      	movs	r3, #5
 8004f62:	2201      	movs	r2, #1
 8004f64:	2112      	movs	r1, #18
 8004f66:	48ab      	ldr	r0, [pc, #684]	; (8005214 <_GLOBAL__sub_I_REG_FIFO+0x39c>)
 8004f68:	f7fe faa0 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_valid_header[1] = {Register(REG_IRQ_FLAGS, 1, 4)},
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	2201      	movs	r2, #1
 8004f70:	2112      	movs	r1, #18
 8004f72:	48a9      	ldr	r0, [pc, #676]	; (8005218 <_GLOBAL__sub_I_REG_FIFO+0x3a0>)
 8004f74:	f7fe fa9a 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_tx_done[1] = {Register(REG_IRQ_FLAGS, 1, 3)},
 8004f78:	2303      	movs	r3, #3
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	2112      	movs	r1, #18
 8004f7e:	48a7      	ldr	r0, [pc, #668]	; (800521c <_GLOBAL__sub_I_REG_FIFO+0x3a4>)
 8004f80:	f7fe fa94 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_cad_done[1] = {Register(REG_IRQ_FLAGS, 1, 2)},
 8004f84:	2302      	movs	r3, #2
 8004f86:	2201      	movs	r2, #1
 8004f88:	2112      	movs	r1, #18
 8004f8a:	48a5      	ldr	r0, [pc, #660]	; (8005220 <_GLOBAL__sub_I_REG_FIFO+0x3a8>)
 8004f8c:	f7fe fa8e 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_fhss_change_channel[1] = {Register(REG_IRQ_FLAGS, 1, 1)},
 8004f90:	2301      	movs	r3, #1
 8004f92:	2112      	movs	r1, #18
 8004f94:	461a      	mov	r2, r3
 8004f96:	48a3      	ldr	r0, [pc, #652]	; (8005224 <_GLOBAL__sub_I_REG_FIFO+0x3ac>)
 8004f98:	f7fe fa88 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_cad_detected[1] = {Register(REG_IRQ_FLAGS, 1, 0)},
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	2112      	movs	r1, #18
 8004fa2:	48a1      	ldr	r0, [pc, #644]	; (8005228 <_GLOBAL__sub_I_REG_FIFO+0x3b0>)
 8004fa4:	f7fe fa82 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_fifo_rx_bytes_nb[1] = {Register(REG_RX_NB_BYTES, 8, 0)},
 8004fa8:	2300      	movs	r3, #0
 8004faa:	2208      	movs	r2, #8
 8004fac:	2113      	movs	r1, #19
 8004fae:	489f      	ldr	r0, [pc, #636]	; (800522c <_GLOBAL__sub_I_REG_FIFO+0x3b4>)
 8004fb0:	f7fe fa7c 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_packet_snr[1] = {Register(REG_PKT_SNR_VALUE, 8, 0)},
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	2208      	movs	r2, #8
 8004fb8:	2119      	movs	r1, #25
 8004fba:	489d      	ldr	r0, [pc, #628]	; (8005230 <_GLOBAL__sub_I_REG_FIFO+0x3b8>)
 8004fbc:	f7fe fa76 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_packet_rssi[1] = {Register(REG_PKT_RSSI_VALUE, 8, 0)},
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	2208      	movs	r2, #8
 8004fc4:	211a      	movs	r1, #26
 8004fc6:	489b      	ldr	r0, [pc, #620]	; (8005234 <_GLOBAL__sub_I_REG_FIFO+0x3bc>)
 8004fc8:	f7fe fa70 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_bw[1] = {Register(REG_MODEM_CONFIG_1, 4, 4)},
 8004fcc:	2304      	movs	r3, #4
 8004fce:	211d      	movs	r1, #29
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	4899      	ldr	r0, [pc, #612]	; (8005238 <_GLOBAL__sub_I_REG_FIFO+0x3c0>)
 8004fd4:	f7fe fa6a 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_spreading_factor[1] = {Register(REG_MODEM_CONFIG_2, 4, 4)},
 8004fd8:	2304      	movs	r3, #4
 8004fda:	211e      	movs	r1, #30
 8004fdc:	461a      	mov	r2, r3
 8004fde:	4897      	ldr	r0, [pc, #604]	; (800523c <_GLOBAL__sub_I_REG_FIFO+0x3c4>)
 8004fe0:	f7fe fa64 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_rx_payload_crc_on[1] = {Register(REG_MODEM_CONFIG_2, 1, 2)},
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	211e      	movs	r1, #30
 8004fea:	4895      	ldr	r0, [pc, #596]	; (8005240 <_GLOBAL__sub_I_REG_FIFO+0x3c8>)
 8004fec:	f7fe fa5e 	bl	80034ac <_ZN8RegisterC1Ethh>
                          Register(REG_PREAMBLE_MSB, 8, 0)},
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	2208      	movs	r2, #8
 8004ff4:	2121      	movs	r1, #33	; 0x21
 8004ff6:	4893      	ldr	r0, [pc, #588]	; (8005244 <_GLOBAL__sub_I_REG_FIFO+0x3cc>)
 8004ff8:	f7fe fa58 	bl	80034ac <_ZN8RegisterC1Ethh>
 8004ffc:	2208      	movs	r2, #8
 8004ffe:	4891      	ldr	r0, [pc, #580]	; (8005244 <_GLOBAL__sub_I_REG_FIFO+0x3cc>)
 8005000:	2300      	movs	r3, #0
 8005002:	2120      	movs	r1, #32
 8005004:	4410      	add	r0, r2
 8005006:	f7fe fa51 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_payload_length[1] = {Register(REG_PAYLOAD_LENGTH, 8, 0)},
 800500a:	2300      	movs	r3, #0
 800500c:	2208      	movs	r2, #8
 800500e:	2122      	movs	r1, #34	; 0x22
 8005010:	488d      	ldr	r0, [pc, #564]	; (8005248 <_GLOBAL__sub_I_REG_FIFO+0x3d0>)
 8005012:	f7fe fa4b 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_low_data_rate_optimize[1] = {Register(REG_MODEM_CONFIG_3, 1, 3)},
 8005016:	2303      	movs	r3, #3
 8005018:	2201      	movs	r2, #1
 800501a:	2126      	movs	r1, #38	; 0x26
 800501c:	488b      	ldr	r0, [pc, #556]	; (800524c <_GLOBAL__sub_I_REG_FIFO+0x3d4>)
 800501e:	f7fe fa45 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_agc_auto_on[1] = {Register(REG_MODEM_CONFIG_3, 1, 2)},
 8005022:	2302      	movs	r3, #2
 8005024:	2201      	movs	r2, #1
 8005026:	2126      	movs	r1, #38	; 0x26
 8005028:	4889      	ldr	r0, [pc, #548]	; (8005250 <_GLOBAL__sub_I_REG_FIFO+0x3d8>)
 800502a:	f7fe fa3f 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_detection_optimize[1] = {Register(REG_DETECTION_OPTIMIZE, 3, 0)},
 800502e:	2300      	movs	r3, #0
 8005030:	2203      	movs	r2, #3
 8005032:	2131      	movs	r1, #49	; 0x31
 8005034:	4887      	ldr	r0, [pc, #540]	; (8005254 <_GLOBAL__sub_I_REG_FIFO+0x3dc>)
 8005036:	f7fe fa39 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_detection_threshold[1] = {Register(REG_DETECTION_THRESHOLD, 8, 0)},
 800503a:	2300      	movs	r3, #0
 800503c:	2208      	movs	r2, #8
 800503e:	2137      	movs	r1, #55	; 0x37
 8005040:	4885      	ldr	r0, [pc, #532]	; (8005258 <_GLOBAL__sub_I_REG_FIFO+0x3e0>)
 8005042:	f7fe fa33 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_sync_word[1] = {Register(REG_SYNC_WORD, 8, 0)},  // , reserved_value=[0x34])
 8005046:	2300      	movs	r3, #0
 8005048:	2208      	movs	r2, #8
 800504a:	2139      	movs	r1, #57	; 0x39
 800504c:	4883      	ldr	r0, [pc, #524]	; (800525c <_GLOBAL__sub_I_REG_FIFO+0x3e4>)
 800504e:	f7fe fa2d 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_dio0_mapping[1] = {Register(REG_DIO_MAPPING_1, 2, 6)},
 8005052:	2306      	movs	r3, #6
 8005054:	2202      	movs	r2, #2
 8005056:	2140      	movs	r1, #64	; 0x40
 8005058:	4881      	ldr	r0, [pc, #516]	; (8005260 <_GLOBAL__sub_I_REG_FIFO+0x3e8>)
 800505a:	f7fe fa27 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_dio1_mapping[1] = {Register(REG_DIO_MAPPING_1, 2, 4)},
 800505e:	2304      	movs	r3, #4
 8005060:	2202      	movs	r2, #2
 8005062:	2140      	movs	r1, #64	; 0x40
 8005064:	487f      	ldr	r0, [pc, #508]	; (8005264 <_GLOBAL__sub_I_REG_FIFO+0x3ec>)
 8005066:	f7fe fa21 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_map_preamble_detect[1] = {Register(REG_DIO_MAPPING_2, 1, 0)},
 800506a:	2300      	movs	r3, #0
 800506c:	2201      	movs	r2, #1
 800506e:	2141      	movs	r1, #65	; 0x41
 8005070:	487d      	ldr	r0, [pc, #500]	; (8005268 <_GLOBAL__sub_I_REG_FIFO+0x3f0>)
 8005072:	f7fe fa1b 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_version[1] = {Register(REG_VERSION, 8, 0)},
 8005076:	2300      	movs	r3, #0
 8005078:	2208      	movs	r2, #8
 800507a:	2142      	movs	r1, #66	; 0x42
 800507c:	487b      	ldr	r0, [pc, #492]	; (800526c <_GLOBAL__sub_I_REG_FIFO+0x3f4>)
Fifo(reg_fifo, 1, false, 'w', 0x00, 0xFF),
 800507e:	2700      	movs	r7, #0
 8005080:	2577      	movs	r5, #119	; 0x77
 8005082:	26ff      	movs	r6, #255	; 0xff
reg_version[1] = {Register(REG_VERSION, 8, 0)},
 8005084:	f7fe fa12 	bl	80034ac <_ZN8RegisterC1Ethh>
reg_pa_dac[1] = {Register(REG_PA_DAC, 3, 0)}//,
 8005088:	2300      	movs	r3, #0
 800508a:	2203      	movs	r2, #3
 800508c:	214d      	movs	r1, #77	; 0x4d
 800508e:	4878      	ldr	r0, [pc, #480]	; (8005270 <_GLOBAL__sub_I_REG_FIFO+0x3f8>)
 8005090:	f7fe fa0c 	bl	80034ac <_ZN8RegisterC1Ethh>
Fifo(reg_fifo, 1, false, 'w', 0x00, 0xFF),
 8005094:	4621      	mov	r1, r4
LongRangeMode(reg_long_range_mode, 1, false, 'w', 0x00, 0x01),
 8005096:	2401      	movs	r4, #1
Fifo(reg_fifo, 1, false, 'w', 0x00, 0xFF),
 8005098:	e9cd 7601 	strd	r7, r6, [sp, #4]
 800509c:	463b      	mov	r3, r7
 800509e:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80050a2:	9500      	str	r5, [sp, #0]
 80050a4:	2201      	movs	r2, #1
 80050a6:	4873      	ldr	r0, [pc, #460]	; (8005274 <_GLOBAL__sub_I_REG_FIFO+0x3fc>)
 80050a8:	f7fe fa8a 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
LongRangeMode(reg_long_range_mode, 1, false, 'w', 0x00, 0x01),
 80050ac:	e9cd 7401 	strd	r7, r4, [sp, #4]
 80050b0:	463b      	mov	r3, r7
 80050b2:	4622      	mov	r2, r4
 80050b4:	4659      	mov	r1, fp
 80050b6:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80050ba:	9500      	str	r5, [sp, #0]
 80050bc:	486e      	ldr	r0, [pc, #440]	; (8005278 <_GLOBAL__sub_I_REG_FIFO+0x400>)
 80050be:	f7fe fa7f 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
LowFrequencyModeOn(reg_low_frequency_mode_on, 1, false, 'w', 0x00, 0x01),
 80050c2:	e9cd 7401 	strd	r7, r4, [sp, #4]
 80050c6:	463b      	mov	r3, r7
 80050c8:	4622      	mov	r2, r4
 80050ca:	4651      	mov	r1, sl
 80050cc:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80050d0:	9500      	str	r5, [sp, #0]
 80050d2:	486a      	ldr	r0, [pc, #424]	; (800527c <_GLOBAL__sub_I_REG_FIFO+0x404>)
 80050d4:	f7fe fa74 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Mode(reg_mode, 1, false, 'w', 0x00, 0x07),
 80050d8:	2307      	movs	r3, #7
 80050da:	4622      	mov	r2, r4
 80050dc:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80050e0:	4649      	mov	r1, r9
 80050e2:	463b      	mov	r3, r7
 80050e4:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80050e8:	9500      	str	r5, [sp, #0]
 80050ea:	4865      	ldr	r0, [pc, #404]	; (8005280 <_GLOBAL__sub_I_REG_FIFO+0x408>)
 80050ec:	f7fe fa68 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Frf(reg_frf, 3, false, 'w', 0x000000, 0xFFFFFF),
 80050f0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80050f4:	463b      	mov	r3, r7
 80050f6:	e9cd 7201 	strd	r7, r2, [sp, #4]
 80050fa:	4641      	mov	r1, r8
 80050fc:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8005100:	9500      	str	r5, [sp, #0]
 8005102:	2203      	movs	r2, #3
 8005104:	485f      	ldr	r0, [pc, #380]	; (8005284 <_GLOBAL__sub_I_REG_FIFO+0x40c>)
 8005106:	f7fe fa5b 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PaSelect(reg_pa_select, 1, false, 'w', 0x00, 0x01),
 800510a:	e9cd 7401 	strd	r7, r4, [sp, #4]
 800510e:	463b      	mov	r3, r7
 8005110:	4622      	mov	r2, r4
 8005112:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8005116:	9500      	str	r5, [sp, #0]
 8005118:	4934      	ldr	r1, [pc, #208]	; (80051ec <_GLOBAL__sub_I_REG_FIFO+0x374>)
 800511a:	485b      	ldr	r0, [pc, #364]	; (8005288 <_GLOBAL__sub_I_REG_FIFO+0x410>)
 800511c:	f7fe fa50 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
MaxPower(reg_max_power, 1, false, 'w', 0x00, 0x07),
 8005120:	2307      	movs	r3, #7
 8005122:	4622      	mov	r2, r4
 8005124:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8005128:	e9cd 7703 	strd	r7, r7, [sp, #12]
 800512c:	463b      	mov	r3, r7
 800512e:	9500      	str	r5, [sp, #0]
 8005130:	492f      	ldr	r1, [pc, #188]	; (80051f0 <_GLOBAL__sub_I_REG_FIFO+0x378>)
 8005132:	4856      	ldr	r0, [pc, #344]	; (800528c <_GLOBAL__sub_I_REG_FIFO+0x414>)
 8005134:	f7fe fa44 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
OutputPower(reg_output_power, 1, false, 'w', 0x00, 0x0F),
 8005138:	220f      	movs	r2, #15
LnaBoostHf(reg_lna_boost_hf, 1, false, 'w', 0x00, 0x03, reserv_lna_boost_hf, 2),
 800513a:	f04f 0b03 	mov.w	fp, #3
 800513e:	f04f 0902 	mov.w	r9, #2
FifoRxCurrentAddr(reg_fifo_rx_current_addr, 1, false, 'r', 0x00, 0xFF),
 8005142:	f04f 0a72 	mov.w	sl, #114	; 0x72
RxTimeout(reg_rx_timeout, 1, false, 'c', 0x00, 0x01),
 8005146:	f04f 0863 	mov.w	r8, #99	; 0x63
OutputPower(reg_output_power, 1, false, 'w', 0x00, 0x0F),
 800514a:	e9cd 7201 	strd	r7, r2, [sp, #4]
 800514e:	463b      	mov	r3, r7
 8005150:	4622      	mov	r2, r4
 8005152:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8005156:	9500      	str	r5, [sp, #0]
 8005158:	4926      	ldr	r1, [pc, #152]	; (80051f4 <_GLOBAL__sub_I_REG_FIFO+0x37c>)
 800515a:	484d      	ldr	r0, [pc, #308]	; (8005290 <_GLOBAL__sub_I_REG_FIFO+0x418>)
 800515c:	f7fe fa30 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
LnaBoostHf(reg_lna_boost_hf, 1, false, 'w', 0x00, 0x03, reserv_lna_boost_hf, 2),
 8005160:	4a4c      	ldr	r2, [pc, #304]	; (8005294 <_GLOBAL__sub_I_REG_FIFO+0x41c>)
 8005162:	e9cd 7b01 	strd	r7, fp, [sp, #4]
 8005166:	463b      	mov	r3, r7
 8005168:	f8cd 9010 	str.w	r9, [sp, #16]
 800516c:	9203      	str	r2, [sp, #12]
 800516e:	9500      	str	r5, [sp, #0]
 8005170:	4622      	mov	r2, r4
 8005172:	4921      	ldr	r1, [pc, #132]	; (80051f8 <_GLOBAL__sub_I_REG_FIFO+0x380>)
 8005174:	4848      	ldr	r0, [pc, #288]	; (8005298 <_GLOBAL__sub_I_REG_FIFO+0x420>)
 8005176:	f7fe fa23 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FifoAddrPtr(reg_fifo_addr_ptr, 1, false, 'w', 0x00, 0xFF),
 800517a:	e9cd 7601 	strd	r7, r6, [sp, #4]
 800517e:	463b      	mov	r3, r7
 8005180:	4622      	mov	r2, r4
 8005182:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8005186:	9500      	str	r5, [sp, #0]
 8005188:	491c      	ldr	r1, [pc, #112]	; (80051fc <_GLOBAL__sub_I_REG_FIFO+0x384>)
 800518a:	4844      	ldr	r0, [pc, #272]	; (800529c <_GLOBAL__sub_I_REG_FIFO+0x424>)
 800518c:	f7fe fa18 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FifoTxBaseAddr(reg_fifo_tx_base_addr, 1, false, 'w', 0x00, 0xFF),
 8005190:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8005194:	463b      	mov	r3, r7
 8005196:	4622      	mov	r2, r4
 8005198:	e9cd 7703 	strd	r7, r7, [sp, #12]
 800519c:	9500      	str	r5, [sp, #0]
 800519e:	4918      	ldr	r1, [pc, #96]	; (8005200 <_GLOBAL__sub_I_REG_FIFO+0x388>)
 80051a0:	483f      	ldr	r0, [pc, #252]	; (80052a0 <_GLOBAL__sub_I_REG_FIFO+0x428>)
 80051a2:	f7fe fa0d 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FifoRxBaseAddr(reg_fifo_rx_base_addr, 1, false, 'w', 0x00, 0xFF),
 80051a6:	e9cd 7601 	strd	r7, r6, [sp, #4]
 80051aa:	463b      	mov	r3, r7
 80051ac:	4622      	mov	r2, r4
 80051ae:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80051b2:	9500      	str	r5, [sp, #0]
 80051b4:	4913      	ldr	r1, [pc, #76]	; (8005204 <_GLOBAL__sub_I_REG_FIFO+0x38c>)
 80051b6:	483b      	ldr	r0, [pc, #236]	; (80052a4 <_GLOBAL__sub_I_REG_FIFO+0x42c>)
 80051b8:	f7fe fa02 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FifoRxCurrentAddr(reg_fifo_rx_current_addr, 1, false, 'r', 0x00, 0xFF),
 80051bc:	e9cd 7601 	strd	r7, r6, [sp, #4]
 80051c0:	463b      	mov	r3, r7
 80051c2:	4622      	mov	r2, r4
 80051c4:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80051c8:	490f      	ldr	r1, [pc, #60]	; (8005208 <_GLOBAL__sub_I_REG_FIFO+0x390>)
 80051ca:	f8cd a000 	str.w	sl, [sp]
 80051ce:	4836      	ldr	r0, [pc, #216]	; (80052a8 <_GLOBAL__sub_I_REG_FIFO+0x430>)
 80051d0:	f7fe f9f6 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
RxTimeout(reg_rx_timeout, 1, false, 'c', 0x00, 0x01),
 80051d4:	e9cd 7401 	strd	r7, r4, [sp, #4]
 80051d8:	463b      	mov	r3, r7
 80051da:	4622      	mov	r2, r4
 80051dc:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80051e0:	f8cd 8000 	str.w	r8, [sp]
 80051e4:	e06a      	b.n	80052bc <_GLOBAL__sub_I_REG_FIFO+0x444>
 80051e6:	bf00      	nop
 80051e8:	200020ec 	.word	0x200020ec
 80051ec:	20001fc0 	.word	0x20001fc0
 80051f0:	20001fb8 	.word	0x20001fb8
 80051f4:	20002010 	.word	0x20002010
 80051f8:	20002008 	.word	0x20002008
 80051fc:	2000203c 	.word	0x2000203c
 8005200:	2000207c 	.word	0x2000207c
 8005204:	20002074 	.word	0x20002074
 8005208:	200020b4 	.word	0x200020b4
 800520c:	20001fd8 	.word	0x20001fd8
 8005210:	20001f98 	.word	0x20001f98
 8005214:	20002084 	.word	0x20002084
 8005218:	20002018 	.word	0x20002018
 800521c:	20001fa0 	.word	0x20001fa0
 8005220:	20001fb0 	.word	0x20001fb0
 8005224:	200020a4 	.word	0x200020a4
 8005228:	20001ff0 	.word	0x20001ff0
 800522c:	20002064 	.word	0x20002064
 8005230:	20001fd0 	.word	0x20001fd0
 8005234:	20001fe8 	.word	0x20001fe8
 8005238:	200020cc 	.word	0x200020cc
 800523c:	2000206c 	.word	0x2000206c
 8005240:	2000208c 	.word	0x2000208c
 8005244:	20002054 	.word	0x20002054
 8005248:	20002044 	.word	0x20002044
 800524c:	200020c4 	.word	0x200020c4
 8005250:	20001fe0 	.word	0x20001fe0
 8005254:	20002094 	.word	0x20002094
 8005258:	2000209c 	.word	0x2000209c
 800525c:	20001fc8 	.word	0x20001fc8
 8005260:	20001ff8 	.word	0x20001ff8
 8005264:	20002000 	.word	0x20002000
 8005268:	200020ac 	.word	0x200020ac
 800526c:	20001fa8 	.word	0x20001fa8
 8005270:	20001f90 	.word	0x20001f90
 8005274:	20001c64 	.word	0x20001c64
 8005278:	20001d44 	.word	0x20001d44
 800527c:	20001d7c 	.word	0x20001d7c
 8005280:	20001db4 	.word	0x20001db4
 8005284:	20001d0c 	.word	0x20001d0c
 8005288:	20001e08 	.word	0x20001e08
 800528c:	20001d98 	.word	0x20001d98
 8005290:	20001dd0 	.word	0x20001dd0
 8005294:	0800b2a0 	.word	0x0800b2a0
 8005298:	20001d28 	.word	0x20001d28
 800529c:	20001c80 	.word	0x20001c80
 80052a0:	20001cf0 	.word	0x20001cf0
 80052a4:	20001c9c 	.word	0x20001c9c
 80052a8:	20001cd4 	.word	0x20001cd4
 80052ac:	2000204c 	.word	0x2000204c
 80052b0:	200020bc 	.word	0x200020bc
 80052b4:	200020f4 	.word	0x200020f4
 80052b8:	200020d4 	.word	0x200020d4
 80052bc:	49ce      	ldr	r1, [pc, #824]	; (80055f8 <_GLOBAL__sub_I_REG_FIFO+0x780>)
 80052be:	48cf      	ldr	r0, [pc, #828]	; (80055fc <_GLOBAL__sub_I_REG_FIFO+0x784>)
 80052c0:	f7fe f97e 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
RxDone(reg_rx_done, 1, false, 'c', 0x00, 0x01),
 80052c4:	e9cd 7401 	strd	r7, r4, [sp, #4]
 80052c8:	463b      	mov	r3, r7
 80052ca:	4622      	mov	r2, r4
 80052cc:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80052d0:	f8cd 8000 	str.w	r8, [sp]
 80052d4:	49ca      	ldr	r1, [pc, #808]	; (8005600 <_GLOBAL__sub_I_REG_FIFO+0x788>)
 80052d6:	48cb      	ldr	r0, [pc, #812]	; (8005604 <_GLOBAL__sub_I_REG_FIFO+0x78c>)
 80052d8:	f7fe f972 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PayloadCrcError(reg_payload_crc_error, 1, false, 'c', 0x00, 0x01),
 80052dc:	e9cd 7401 	strd	r7, r4, [sp, #4]
 80052e0:	463b      	mov	r3, r7
 80052e2:	4622      	mov	r2, r4
 80052e4:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80052e8:	f8cd 8000 	str.w	r8, [sp]
 80052ec:	49c6      	ldr	r1, [pc, #792]	; (8005608 <_GLOBAL__sub_I_REG_FIFO+0x790>)
 80052ee:	48c7      	ldr	r0, [pc, #796]	; (800560c <_GLOBAL__sub_I_REG_FIFO+0x794>)
 80052f0:	f7fe f966 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
ValidHeader(reg_valid_header, 1, false, 'c', 0x00, 0x01),
 80052f4:	e9cd 7401 	strd	r7, r4, [sp, #4]
 80052f8:	463b      	mov	r3, r7
 80052fa:	4622      	mov	r2, r4
 80052fc:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8005300:	f8cd 8000 	str.w	r8, [sp]
 8005304:	49c2      	ldr	r1, [pc, #776]	; (8005610 <_GLOBAL__sub_I_REG_FIFO+0x798>)
 8005306:	48c3      	ldr	r0, [pc, #780]	; (8005614 <_GLOBAL__sub_I_REG_FIFO+0x79c>)
 8005308:	f7fe f95a 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
TxDone(reg_tx_done, 1, false, 'c', 0x00, 0x01),
 800530c:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8005310:	463b      	mov	r3, r7
 8005312:	4622      	mov	r2, r4
 8005314:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8005318:	f8cd 8000 	str.w	r8, [sp]
 800531c:	49be      	ldr	r1, [pc, #760]	; (8005618 <_GLOBAL__sub_I_REG_FIFO+0x7a0>)
 800531e:	48bf      	ldr	r0, [pc, #764]	; (800561c <_GLOBAL__sub_I_REG_FIFO+0x7a4>)
 8005320:	f7fe f94e 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
CadDone(reg_cad_done, 1, false, 'c', 0x00, 0x01),
 8005324:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8005328:	463b      	mov	r3, r7
 800532a:	4622      	mov	r2, r4
 800532c:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8005330:	f8cd 8000 	str.w	r8, [sp]
 8005334:	49ba      	ldr	r1, [pc, #744]	; (8005620 <_GLOBAL__sub_I_REG_FIFO+0x7a8>)
 8005336:	48bb      	ldr	r0, [pc, #748]	; (8005624 <_GLOBAL__sub_I_REG_FIFO+0x7ac>)
 8005338:	f7fe f942 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FhssChangeChannel(reg_fhss_change_channel, 1, false, 'c', 0x00, 0x01),
 800533c:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8005340:	463b      	mov	r3, r7
 8005342:	4622      	mov	r2, r4
 8005344:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8005348:	f8cd 8000 	str.w	r8, [sp]
 800534c:	49b6      	ldr	r1, [pc, #728]	; (8005628 <_GLOBAL__sub_I_REG_FIFO+0x7b0>)
 800534e:	48b7      	ldr	r0, [pc, #732]	; (800562c <_GLOBAL__sub_I_REG_FIFO+0x7b4>)
 8005350:	f7fe f936 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
CadDetected(reg_cad_detected, 1, false, 'c', 0x00, 0x01),
 8005354:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8005358:	463b      	mov	r3, r7
 800535a:	4622      	mov	r2, r4
 800535c:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8005360:	f8cd 8000 	str.w	r8, [sp]
 8005364:	49b2      	ldr	r1, [pc, #712]	; (8005630 <_GLOBAL__sub_I_REG_FIFO+0x7b8>)
 8005366:	48b3      	ldr	r0, [pc, #716]	; (8005634 <_GLOBAL__sub_I_REG_FIFO+0x7bc>)
 8005368:	f7fe f92a 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FifoRxBytesNb(reg_fifo_rx_bytes_nb, 1, false, 'r', 0x00, 0xFF),
 800536c:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8005370:	463b      	mov	r3, r7
 8005372:	4622      	mov	r2, r4
 8005374:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8005378:	49af      	ldr	r1, [pc, #700]	; (8005638 <_GLOBAL__sub_I_REG_FIFO+0x7c0>)
 800537a:	f8cd a000 	str.w	sl, [sp]
 800537e:	48af      	ldr	r0, [pc, #700]	; (800563c <_GLOBAL__sub_I_REG_FIFO+0x7c4>)
 8005380:	f7fe f91e 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PacketSnr(reg_packet_snr, 1, false, 'r', 0x00, 0xFF),
 8005384:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8005388:	463b      	mov	r3, r7
 800538a:	4622      	mov	r2, r4
 800538c:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8005390:	49ab      	ldr	r1, [pc, #684]	; (8005640 <_GLOBAL__sub_I_REG_FIFO+0x7c8>)
 8005392:	f8cd a000 	str.w	sl, [sp]
 8005396:	48ab      	ldr	r0, [pc, #684]	; (8005644 <_GLOBAL__sub_I_REG_FIFO+0x7cc>)
 8005398:	f7fe f912 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PacketRssi(reg_packet_rssi, 1, false, 'r', 0x00, 0xFF),
 800539c:	e9cd 7601 	strd	r7, r6, [sp, #4]
 80053a0:	463b      	mov	r3, r7
 80053a2:	4622      	mov	r2, r4
 80053a4:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80053a8:	49a7      	ldr	r1, [pc, #668]	; (8005648 <_GLOBAL__sub_I_REG_FIFO+0x7d0>)
 80053aa:	f8cd a000 	str.w	sl, [sp]
 80053ae:	48a7      	ldr	r0, [pc, #668]	; (800564c <_GLOBAL__sub_I_REG_FIFO+0x7d4>)
 80053b0:	f7fe f906 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Bw(reg_bw, 1, false, 'w', 0x00, 0x09),
 80053b4:	2209      	movs	r2, #9
 80053b6:	463b      	mov	r3, r7
 80053b8:	e9cd 7201 	strd	r7, r2, [sp, #4]
 80053bc:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80053c0:	4622      	mov	r2, r4
 80053c2:	9500      	str	r5, [sp, #0]
 80053c4:	49a2      	ldr	r1, [pc, #648]	; (8005650 <_GLOBAL__sub_I_REG_FIFO+0x7d8>)
 80053c6:	48a3      	ldr	r0, [pc, #652]	; (8005654 <_GLOBAL__sub_I_REG_FIFO+0x7dc>)
 80053c8:	f7fe f8fa 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
SpreadingFactor(reg_spreading_factor, 1, false, 'w', 0x06, 0x0C),
 80053cc:	f04f 080c 	mov.w	r8, #12
 80053d0:	2206      	movs	r2, #6
 80053d2:	463b      	mov	r3, r7
 80053d4:	e9cd 2801 	strd	r2, r8, [sp, #4]
 80053d8:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80053dc:	4622      	mov	r2, r4
 80053de:	9500      	str	r5, [sp, #0]
 80053e0:	499d      	ldr	r1, [pc, #628]	; (8005658 <_GLOBAL__sub_I_REG_FIFO+0x7e0>)
 80053e2:	489e      	ldr	r0, [pc, #632]	; (800565c <_GLOBAL__sub_I_REG_FIFO+0x7e4>)
 80053e4:	f7fe f8ec 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
RxPayloadCrcOn(reg_rx_payload_crc_on, 1, false, 'w', 0x00, 0x01),
 80053e8:	e9cd 7401 	strd	r7, r4, [sp, #4]
 80053ec:	463b      	mov	r3, r7
 80053ee:	4622      	mov	r2, r4
 80053f0:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80053f4:	9500      	str	r5, [sp, #0]
 80053f6:	499a      	ldr	r1, [pc, #616]	; (8005660 <_GLOBAL__sub_I_REG_FIFO+0x7e8>)
 80053f8:	489a      	ldr	r0, [pc, #616]	; (8005664 <_GLOBAL__sub_I_REG_FIFO+0x7ec>)
 80053fa:	f7fe f8e1 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PreambleLength(reg_preamble_length, 2, false, 'w', 0x0000, 0xFFFF),
 80053fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005402:	463b      	mov	r3, r7
 8005404:	e9cd 7201 	strd	r7, r2, [sp, #4]
 8005408:	e9cd 7703 	strd	r7, r7, [sp, #12]
 800540c:	464a      	mov	r2, r9
 800540e:	9500      	str	r5, [sp, #0]
 8005410:	4995      	ldr	r1, [pc, #596]	; (8005668 <_GLOBAL__sub_I_REG_FIFO+0x7f0>)
 8005412:	4896      	ldr	r0, [pc, #600]	; (800566c <_GLOBAL__sub_I_REG_FIFO+0x7f4>)
 8005414:	f7fe f8d4 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PayloadLength(reg_payload_length, 1, false, 'w', 0x01, 0xFF),
 8005418:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800541c:	463b      	mov	r3, r7
 800541e:	4622      	mov	r2, r4
 8005420:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8005424:	9500      	str	r5, [sp, #0]
 8005426:	4992      	ldr	r1, [pc, #584]	; (8005670 <_GLOBAL__sub_I_REG_FIFO+0x7f8>)
 8005428:	4892      	ldr	r0, [pc, #584]	; (8005674 <_GLOBAL__sub_I_REG_FIFO+0x7fc>)
 800542a:	f7fe f8c9 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
LowDataRateOptimize(reg_low_data_rate_optimize, 1, false, 'w', 0x00, 0x01),
 800542e:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8005432:	463b      	mov	r3, r7
 8005434:	4622      	mov	r2, r4
 8005436:	e9cd 7703 	strd	r7, r7, [sp, #12]
 800543a:	9500      	str	r5, [sp, #0]
 800543c:	498e      	ldr	r1, [pc, #568]	; (8005678 <_GLOBAL__sub_I_REG_FIFO+0x800>)
 800543e:	488f      	ldr	r0, [pc, #572]	; (800567c <_GLOBAL__sub_I_REG_FIFO+0x804>)
 8005440:	f7fe f8be 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
AgcAutoOn(reg_agc_auto_on, 1, false, 'w', 0x00, 0x01),
 8005444:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8005448:	463b      	mov	r3, r7
 800544a:	4622      	mov	r2, r4
 800544c:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8005450:	9500      	str	r5, [sp, #0]
 8005452:	498b      	ldr	r1, [pc, #556]	; (8005680 <_GLOBAL__sub_I_REG_FIFO+0x808>)
 8005454:	488b      	ldr	r0, [pc, #556]	; (8005684 <_GLOBAL__sub_I_REG_FIFO+0x80c>)
 8005456:	f7fe f8b3 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
DetectionOptimize(reg_detection_optimize, 1, false, 'w', 0x03, 0x05, reserv_detection_optimize, 1),
 800545a:	4a8b      	ldr	r2, [pc, #556]	; (8005688 <_GLOBAL__sub_I_REG_FIFO+0x810>)
 800545c:	463b      	mov	r3, r7
 800545e:	9203      	str	r2, [sp, #12]
 8005460:	2205      	movs	r2, #5
 8005462:	9404      	str	r4, [sp, #16]
 8005464:	e9cd b201 	strd	fp, r2, [sp, #4]
 8005468:	9500      	str	r5, [sp, #0]
 800546a:	4622      	mov	r2, r4
 800546c:	4987      	ldr	r1, [pc, #540]	; (800568c <_GLOBAL__sub_I_REG_FIFO+0x814>)
 800546e:	4888      	ldr	r0, [pc, #544]	; (8005690 <_GLOBAL__sub_I_REG_FIFO+0x818>)
 8005470:	f7fe f8a6 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
DetectionThreshold(reg_detection_threshold, 1, false, 'w', 0x0A, 0x0C, reserv_detection_threshold, 1),
 8005474:	4a87      	ldr	r2, [pc, #540]	; (8005694 <_GLOBAL__sub_I_REG_FIFO+0x81c>)
 8005476:	463b      	mov	r3, r7
 8005478:	e9cd 8202 	strd	r8, r2, [sp, #8]
 800547c:	220a      	movs	r2, #10
 800547e:	9404      	str	r4, [sp, #16]
 8005480:	e9cd 5200 	strd	r5, r2, [sp]
 8005484:	4984      	ldr	r1, [pc, #528]	; (8005698 <_GLOBAL__sub_I_REG_FIFO+0x820>)
 8005486:	4622      	mov	r2, r4
 8005488:	4884      	ldr	r0, [pc, #528]	; (800569c <_GLOBAL__sub_I_REG_FIFO+0x824>)
 800548a:	f7fe f899 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Dio1Mapping(reg_dio1_mapping, 1, false, 'w', 0x00, 0x03),
 800548e:	f8df 8270 	ldr.w	r8, [pc, #624]	; 8005700 <_GLOBAL__sub_I_REG_FIFO+0x888>
SyncWord(reg_sync_word, 1, false, 'w', 0x00, 0xFF),  // , reserv_sync_word, 1),
 8005492:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8005496:	463b      	mov	r3, r7
 8005498:	4622      	mov	r2, r4
 800549a:	e9cd 7703 	strd	r7, r7, [sp, #12]
 800549e:	9500      	str	r5, [sp, #0]
 80054a0:	497f      	ldr	r1, [pc, #508]	; (80056a0 <_GLOBAL__sub_I_REG_FIFO+0x828>)
 80054a2:	4880      	ldr	r0, [pc, #512]	; (80056a4 <_GLOBAL__sub_I_REG_FIFO+0x82c>)
 80054a4:	f7fe f88c 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Dio0Mapping(reg_dio0_mapping, 1, false, 'w', 0x00, 0x03),
 80054a8:	e9cd 7b01 	strd	r7, fp, [sp, #4]
 80054ac:	463b      	mov	r3, r7
 80054ae:	4622      	mov	r2, r4
 80054b0:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80054b4:	9500      	str	r5, [sp, #0]
 80054b6:	497c      	ldr	r1, [pc, #496]	; (80056a8 <_GLOBAL__sub_I_REG_FIFO+0x830>)
 80054b8:	487c      	ldr	r0, [pc, #496]	; (80056ac <_GLOBAL__sub_I_REG_FIFO+0x834>)
 80054ba:	f7fe f881 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Dio1Mapping(reg_dio1_mapping, 1, false, 'w', 0x00, 0x03),
 80054be:	e9cd 7b01 	strd	r7, fp, [sp, #4]
 80054c2:	463b      	mov	r3, r7
 80054c4:	4622      	mov	r2, r4
 80054c6:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80054ca:	9500      	str	r5, [sp, #0]
 80054cc:	4640      	mov	r0, r8
 80054ce:	4978      	ldr	r1, [pc, #480]	; (80056b0 <_GLOBAL__sub_I_REG_FIFO+0x838>)
 80054d0:	f7fe f876 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
MapPreambleDetect(reg_map_preamble_detect, 1, false, 'w', 0x00, 0x01),
 80054d4:	e9cd 7401 	strd	r7, r4, [sp, #4]
 80054d8:	463b      	mov	r3, r7
 80054da:	4622      	mov	r2, r4
 80054dc:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80054e0:	9500      	str	r5, [sp, #0]
 80054e2:	4974      	ldr	r1, [pc, #464]	; (80056b4 <_GLOBAL__sub_I_REG_FIFO+0x83c>)
 80054e4:	4874      	ldr	r0, [pc, #464]	; (80056b8 <_GLOBAL__sub_I_REG_FIFO+0x840>)
 80054e6:	f7fe f86b 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Version(reg_version, 1, false, 'r', 0x00, 0xFF),
 80054ea:	e9cd 7601 	strd	r7, r6, [sp, #4]
 80054ee:	463b      	mov	r3, r7
 80054f0:	4622      	mov	r2, r4
 80054f2:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80054f6:	4971      	ldr	r1, [pc, #452]	; (80056bc <_GLOBAL__sub_I_REG_FIFO+0x844>)
 80054f8:	f8cd a000 	str.w	sl, [sp]
 80054fc:	4870      	ldr	r0, [pc, #448]	; (80056c0 <_GLOBAL__sub_I_REG_FIFO+0x848>)
 80054fe:	f7fe f85f 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PaDac(reg_pa_dac, 1, false, 'w', 0x04, 0x07, reserv_pa_dac, 2) //,
 8005502:	4a70      	ldr	r2, [pc, #448]	; (80056c4 <_GLOBAL__sub_I_REG_FIFO+0x84c>)
 8005504:	2307      	movs	r3, #7
 8005506:	9203      	str	r2, [sp, #12]
 8005508:	2204      	movs	r2, #4
 800550a:	4e6f      	ldr	r6, [pc, #444]	; (80056c8 <_GLOBAL__sub_I_REG_FIFO+0x850>)
 800550c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005510:	4622      	mov	r2, r4
};
 8005512:	4c6e      	ldr	r4, [pc, #440]	; (80056cc <_GLOBAL__sub_I_REG_FIFO+0x854>)
PaDac(reg_pa_dac, 1, false, 'w', 0x04, 0x07, reserv_pa_dac, 2) //,
 8005514:	463b      	mov	r3, r7
 8005516:	f8cd 9010 	str.w	r9, [sp, #16]
 800551a:	9500      	str	r5, [sp, #0]
 800551c:	4630      	mov	r0, r6
 800551e:	496c      	ldr	r1, [pc, #432]	; (80056d0 <_GLOBAL__sub_I_REG_FIFO+0x858>)
 8005520:	f7fe f84e 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
};
 8005524:	46a4      	mov	ip, r4
 8005526:	4d6b      	ldr	r5, [pc, #428]	; (80056d4 <_GLOBAL__sub_I_REG_FIFO+0x85c>)
 8005528:	f8df b178 	ldr.w	fp, [pc, #376]	; 80056a4 <_GLOBAL__sub_I_REG_FIFO+0x82c>
 800552c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800552e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005532:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005536:	4d68      	ldr	r5, [pc, #416]	; (80056d8 <_GLOBAL__sub_I_REG_FIFO+0x860>)
 8005538:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800553c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800553e:	f104 0c1c 	add.w	ip, r4, #28
 8005542:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005546:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800554a:	4d64      	ldr	r5, [pc, #400]	; (80056dc <_GLOBAL__sub_I_REG_FIFO+0x864>)
 800554c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005552:	f104 0c38 	add.w	ip, r4, #56	; 0x38
 8005556:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800555a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800555e:	4d60      	ldr	r5, [pc, #384]	; (80056e0 <_GLOBAL__sub_I_REG_FIFO+0x868>)
 8005560:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005566:	f104 0c54 	add.w	ip, r4, #84	; 0x54
 800556a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800556e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005572:	4d5c      	ldr	r5, [pc, #368]	; (80056e4 <_GLOBAL__sub_I_REG_FIFO+0x86c>)
 8005574:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800557a:	f104 0c70 	add.w	ip, r4, #112	; 0x70
 800557e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005582:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005586:	4d58      	ldr	r5, [pc, #352]	; (80056e8 <_GLOBAL__sub_I_REG_FIFO+0x870>)
 8005588:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800558c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800558e:	f104 0c8c 	add.w	ip, r4, #140	; 0x8c
 8005592:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005596:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800559a:	4d54      	ldr	r5, [pc, #336]	; (80056ec <_GLOBAL__sub_I_REG_FIFO+0x874>)
 800559c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80055a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055a2:	f104 0ca8 	add.w	ip, r4, #168	; 0xa8
 80055a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80055aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80055ae:	4d50      	ldr	r5, [pc, #320]	; (80056f0 <_GLOBAL__sub_I_REG_FIFO+0x878>)
 80055b0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80055b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055b6:	f104 0cc4 	add.w	ip, r4, #196	; 0xc4
 80055ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80055be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80055c2:	4d4c      	ldr	r5, [pc, #304]	; (80056f4 <_GLOBAL__sub_I_REG_FIFO+0x87c>)
 80055c4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80055c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055ca:	f104 0ce0 	add.w	ip, r4, #224	; 0xe0
 80055ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80055d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80055d6:	4d48      	ldr	r5, [pc, #288]	; (80056f8 <_GLOBAL__sub_I_REG_FIFO+0x880>)
 80055d8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80055dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055de:	f104 0cfc 	add.w	ip, r4, #252	; 0xfc
 80055e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80055e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80055ea:	4d44      	ldr	r5, [pc, #272]	; (80056fc <_GLOBAL__sub_I_REG_FIFO+0x884>)
 80055ec:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80055f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055f2:	f504 7c8c 	add.w	ip, r4, #280	; 0x118
 80055f6:	e085      	b.n	8005704 <_GLOBAL__sub_I_REG_FIFO+0x88c>
 80055f8:	20001fd8 	.word	0x20001fd8
 80055fc:	20001ee8 	.word	0x20001ee8
 8005600:	20001f98 	.word	0x20001f98
 8005604:	20001eb0 	.word	0x20001eb0
 8005608:	20002084 	.word	0x20002084
 800560c:	20001e5c 	.word	0x20001e5c
 8005610:	20002018 	.word	0x20002018
 8005614:	20001f58 	.word	0x20001f58
 8005618:	20001fa0 	.word	0x20001fa0
 800561c:	20001f3c 	.word	0x20001f3c
 8005620:	20001fb0 	.word	0x20001fb0
 8005624:	20001bbc 	.word	0x20001bbc
 8005628:	200020a4 	.word	0x200020a4
 800562c:	20001c48 	.word	0x20001c48
 8005630:	20001ff0 	.word	0x20001ff0
 8005634:	20001ba0 	.word	0x20001ba0
 8005638:	20002064 	.word	0x20002064
 800563c:	20001cb8 	.word	0x20001cb8
 8005640:	20001fd0 	.word	0x20001fd0
 8005644:	20001e40 	.word	0x20001e40
 8005648:	20001fe8 	.word	0x20001fe8
 800564c:	20001e24 	.word	0x20001e24
 8005650:	200020cc 	.word	0x200020cc
 8005654:	20001b84 	.word	0x20001b84
 8005658:	2000206c 	.word	0x2000206c
 800565c:	20001f04 	.word	0x20001f04
 8005660:	2000208c 	.word	0x2000208c
 8005664:	20001ecc 	.word	0x20001ecc
 8005668:	20002054 	.word	0x20002054
 800566c:	20001e94 	.word	0x20001e94
 8005670:	20002044 	.word	0x20002044
 8005674:	20001e78 	.word	0x20001e78
 8005678:	200020c4 	.word	0x200020c4
 800567c:	20001d60 	.word	0x20001d60
 8005680:	20001fe0 	.word	0x20001fe0
 8005684:	20001b68 	.word	0x20001b68
 8005688:	0800b2a8 	.word	0x0800b2a8
 800568c:	20002094 	.word	0x20002094
 8005690:	20001bd8 	.word	0x20001bd8
 8005694:	0800b2ac 	.word	0x0800b2ac
 8005698:	2000209c 	.word	0x2000209c
 800569c:	20001bf4 	.word	0x20001bf4
 80056a0:	20001fc8 	.word	0x20001fc8
 80056a4:	20001f20 	.word	0x20001f20
 80056a8:	20001ff8 	.word	0x20001ff8
 80056ac:	20001c10 	.word	0x20001c10
 80056b0:	20002000 	.word	0x20002000
 80056b4:	200020ac 	.word	0x200020ac
 80056b8:	20002020 	.word	0x20002020
 80056bc:	20001fa8 	.word	0x20001fa8
 80056c0:	20001f74 	.word	0x20001f74
 80056c4:	0800b298 	.word	0x0800b298
 80056c8:	20001dec 	.word	0x20001dec
 80056cc:	20001740 	.word	0x20001740
 80056d0:	20001f90 	.word	0x20001f90
 80056d4:	20001c64 	.word	0x20001c64
 80056d8:	20001d44 	.word	0x20001d44
 80056dc:	20001d7c 	.word	0x20001d7c
 80056e0:	20001db4 	.word	0x20001db4
 80056e4:	20001d0c 	.word	0x20001d0c
 80056e8:	20001e08 	.word	0x20001e08
 80056ec:	20001d98 	.word	0x20001d98
 80056f0:	20001dd0 	.word	0x20001dd0
 80056f4:	20001d28 	.word	0x20001d28
 80056f8:	20001c80 	.word	0x20001c80
 80056fc:	20001cf0 	.word	0x20001cf0
 8005700:	20001c2c 	.word	0x20001c2c
 8005704:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005708:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800570c:	4d87      	ldr	r5, [pc, #540]	; (800592c <_GLOBAL__sub_I_REG_FIFO+0xab4>)
 800570e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005714:	f504 7c9a 	add.w	ip, r4, #308	; 0x134
 8005718:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800571c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005720:	4d83      	ldr	r5, [pc, #524]	; (8005930 <_GLOBAL__sub_I_REG_FIFO+0xab8>)
 8005722:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005728:	f504 7ca8 	add.w	ip, r4, #336	; 0x150
 800572c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005730:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005734:	4d7f      	ldr	r5, [pc, #508]	; (8005934 <_GLOBAL__sub_I_REG_FIFO+0xabc>)
 8005736:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800573a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800573c:	f504 7cb6 	add.w	ip, r4, #364	; 0x16c
 8005740:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005744:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005748:	4d7b      	ldr	r5, [pc, #492]	; (8005938 <_GLOBAL__sub_I_REG_FIFO+0xac0>)
 800574a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800574e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005750:	f504 7cc4 	add.w	ip, r4, #392	; 0x188
 8005754:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005758:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800575c:	4d77      	ldr	r5, [pc, #476]	; (800593c <_GLOBAL__sub_I_REG_FIFO+0xac4>)
 800575e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005764:	f504 7cd2 	add.w	ip, r4, #420	; 0x1a4
 8005768:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800576c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005770:	4d73      	ldr	r5, [pc, #460]	; (8005940 <_GLOBAL__sub_I_REG_FIFO+0xac8>)
 8005772:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005778:	f504 7ce0 	add.w	ip, r4, #448	; 0x1c0
 800577c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005780:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005784:	4d6f      	ldr	r5, [pc, #444]	; (8005944 <_GLOBAL__sub_I_REG_FIFO+0xacc>)
 8005786:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800578a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800578c:	f504 7cee 	add.w	ip, r4, #476	; 0x1dc
 8005790:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005794:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005798:	4d6b      	ldr	r5, [pc, #428]	; (8005948 <_GLOBAL__sub_I_REG_FIFO+0xad0>)
 800579a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800579e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057a0:	f504 7cfc 	add.w	ip, r4, #504	; 0x1f8
 80057a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80057a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80057ac:	4d67      	ldr	r5, [pc, #412]	; (800594c <_GLOBAL__sub_I_REG_FIFO+0xad4>)
 80057ae:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80057b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057b4:	f504 7c05 	add.w	ip, r4, #532	; 0x214
 80057b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80057bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80057c0:	4d63      	ldr	r5, [pc, #396]	; (8005950 <_GLOBAL__sub_I_REG_FIFO+0xad8>)
 80057c2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80057c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057c8:	f504 7c0c 	add.w	ip, r4, #560	; 0x230
 80057cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80057d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80057d4:	4d5f      	ldr	r5, [pc, #380]	; (8005954 <_GLOBAL__sub_I_REG_FIFO+0xadc>)
 80057d6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80057da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057dc:	f504 7c13 	add.w	ip, r4, #588	; 0x24c
 80057e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80057e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80057e8:	4d5b      	ldr	r5, [pc, #364]	; (8005958 <_GLOBAL__sub_I_REG_FIFO+0xae0>)
 80057ea:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80057ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057f0:	f504 7c1a 	add.w	ip, r4, #616	; 0x268
 80057f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80057f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80057fc:	4d57      	ldr	r5, [pc, #348]	; (800595c <_GLOBAL__sub_I_REG_FIFO+0xae4>)
 80057fe:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005802:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005804:	f504 7c21 	add.w	ip, r4, #644	; 0x284
 8005808:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800580c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005810:	4d53      	ldr	r5, [pc, #332]	; (8005960 <_GLOBAL__sub_I_REG_FIFO+0xae8>)
 8005812:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005818:	f504 7c28 	add.w	ip, r4, #672	; 0x2a0
 800581c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005820:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005824:	4d4f      	ldr	r5, [pc, #316]	; (8005964 <_GLOBAL__sub_I_REG_FIFO+0xaec>)
 8005826:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800582a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800582c:	f504 7c2f 	add.w	ip, r4, #700	; 0x2bc
 8005830:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005834:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005838:	4d4b      	ldr	r5, [pc, #300]	; (8005968 <_GLOBAL__sub_I_REG_FIFO+0xaf0>)
 800583a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800583e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005840:	f504 7c36 	add.w	ip, r4, #728	; 0x2d8
 8005844:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005848:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800584c:	4d47      	ldr	r5, [pc, #284]	; (800596c <_GLOBAL__sub_I_REG_FIFO+0xaf4>)
 800584e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005852:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005854:	f504 7c3d 	add.w	ip, r4, #756	; 0x2f4
 8005858:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800585c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005860:	4d43      	ldr	r5, [pc, #268]	; (8005970 <_GLOBAL__sub_I_REG_FIFO+0xaf8>)
 8005862:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005868:	f504 7c44 	add.w	ip, r4, #784	; 0x310
 800586c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005870:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005874:	4d3f      	ldr	r5, [pc, #252]	; (8005974 <_GLOBAL__sub_I_REG_FIFO+0xafc>)
 8005876:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800587a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800587c:	f504 7c4b 	add.w	ip, r4, #812	; 0x32c
 8005880:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005884:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005888:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800588c:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8005984 <_GLOBAL__sub_I_REG_FIFO+0xb0c>
 8005890:	f504 7552 	add.w	r5, r4, #840	; 0x348
 8005894:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005898:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800589a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800589e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80058a2:	4d35      	ldr	r5, [pc, #212]	; (8005978 <_GLOBAL__sub_I_REG_FIFO+0xb00>)
 80058a4:	f504 7c59 	add.w	ip, r4, #868	; 0x364
 80058a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80058ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80058b2:	4d32      	ldr	r5, [pc, #200]	; (800597c <_GLOBAL__sub_I_REG_FIFO+0xb04>)
 80058b4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80058b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058ba:	f504 7c60 	add.w	ip, r4, #896	; 0x380
 80058be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80058c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80058c6:	f504 7567 	add.w	r5, r4, #924	; 0x39c
 80058ca:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80058ce:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80058d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058d4:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 80058d8:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8005988 <_GLOBAL__sub_I_REG_FIFO+0xb10>
 80058dc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80058e0:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 80058e4:	f504 756e 	add.w	r5, r4, #952	; 0x3b8
 80058e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058ea:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 80058ee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80058f2:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80058f6:	f504 7575 	add.w	r5, r4, #980	; 0x3d4
 80058fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058fc:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8005900:	4f1f      	ldr	r7, [pc, #124]	; (8005980 <_GLOBAL__sub_I_REG_FIFO+0xb08>)
 8005902:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005906:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005908:	f504 757c 	add.w	r5, r4, #1008	; 0x3f0
 800590c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800590e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8005912:	f204 440c 	addw	r4, r4, #1036	; 0x40c
 8005916:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800591a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800591c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800591e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005922:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005926:	b007      	add	sp, #28
 8005928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800592c:	20001c9c 	.word	0x20001c9c
 8005930:	20001cd4 	.word	0x20001cd4
 8005934:	20001ee8 	.word	0x20001ee8
 8005938:	20001eb0 	.word	0x20001eb0
 800593c:	20001e5c 	.word	0x20001e5c
 8005940:	20001f58 	.word	0x20001f58
 8005944:	20001f3c 	.word	0x20001f3c
 8005948:	20001bbc 	.word	0x20001bbc
 800594c:	20001c48 	.word	0x20001c48
 8005950:	20001ba0 	.word	0x20001ba0
 8005954:	20001cb8 	.word	0x20001cb8
 8005958:	20001e40 	.word	0x20001e40
 800595c:	20001e24 	.word	0x20001e24
 8005960:	20001b84 	.word	0x20001b84
 8005964:	20001f04 	.word	0x20001f04
 8005968:	20001ecc 	.word	0x20001ecc
 800596c:	20001e94 	.word	0x20001e94
 8005970:	20001e78 	.word	0x20001e78
 8005974:	20001d60 	.word	0x20001d60
 8005978:	20001bd8 	.word	0x20001bd8
 800597c:	20001bf4 	.word	0x20001bf4
 8005980:	20001f74 	.word	0x20001f74
 8005984:	20001b68 	.word	0x20001b68
 8005988:	20001c10 	.word	0x20001c10

0800598c <_ZN15Packet_analyzer11set_settingEh>:
    // return field_header_[num_number]->set_value(num, &(packet[0]));
}

bool Packet_analyzer::set_setting(uint8_t setting) {
    return false; // настройки индивидуальны, у общего класса их нет
}
 800598c:	2000      	movs	r0, #0
 800598e:	4770      	bx	lr

08005990 <_ZN13Packet_Sensor11set_settingEh>:
// ----- ----- ----- ----- -----  Packet_Sensor  ----- ----- ----- ----- -----
//   ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----

bool Packet_Sensor::set_setting(uint8_t setting) {
    // if по типам
    setting_ = setting;
 8005990:	7401      	strb	r1, [r0, #16]
    return false;
}
 8005992:	2000      	movs	r0, #0
 8005994:	4770      	bx	lr

08005996 <_ZN13Packet_Device11set_settingEh>:
//   ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----


bool Packet_Device::set_setting(uint8_t setting) {
    // if по типам
    setting_ = setting;
 8005996:	7401      	strb	r1, [r0, #16]
    return false;
}
 8005998:	2000      	movs	r0, #0
 800599a:	4770      	bx	lr

0800599c <_ZN13Packet_System11set_settingEh>:


bool Packet_System::set_setting(uint8_t setting) {
    // if по типам
    return true; // не реализованы
}
 800599c:	2001      	movs	r0, #1
 800599e:	4770      	bx	lr

080059a0 <_ZN12LoRa_addressC1EPKhh>:
LoRa_address::LoRa_address(const uint8_t* bytes, const uint8_t len) {
 80059a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059a4:	b570      	push	{r4, r5, r6, lr}
 80059a6:	4604      	mov	r4, r0
 80059a8:	8003      	strh	r3, [r0, #0]
 80059aa:	8043      	strh	r3, [r0, #2]
	group = field_dest_adr_group.get_value(bytes, len);
 80059ac:	4806      	ldr	r0, [pc, #24]	; (80059c8 <_ZN12LoRa_addressC1EPKhh+0x28>)
LoRa_address::LoRa_address(const uint8_t* bytes, const uint8_t len) {
 80059ae:	460d      	mov	r5, r1
 80059b0:	4616      	mov	r6, r2
	group = field_dest_adr_group.get_value(bytes, len);
 80059b2:	f7fd fe18 	bl	80035e6 <_ZNK13Address_field9get_valueEPKhi>
	branch = field_dest_adr_branch.get_value(bytes, len);
 80059b6:	4632      	mov	r2, r6
	group = field_dest_adr_group.get_value(bytes, len);
 80059b8:	8020      	strh	r0, [r4, #0]
	branch = field_dest_adr_branch.get_value(bytes, len);
 80059ba:	4629      	mov	r1, r5
 80059bc:	4803      	ldr	r0, [pc, #12]	; (80059cc <_ZN12LoRa_addressC1EPKhh+0x2c>)
 80059be:	f7fd fe12 	bl	80035e6 <_ZNK13Address_field9get_valueEPKhi>
 80059c2:	8060      	strh	r0, [r4, #2]
}
 80059c4:	4620      	mov	r0, r4
 80059c6:	bd70      	pop	{r4, r5, r6, pc}
 80059c8:	200021e4 	.word	0x200021e4
 80059cc:	2000221c 	.word	0x2000221c

080059d0 <_ZN12LoRa_addressC1Ett>:
LoRa_address::LoRa_address(const uint16_t group, const uint16_t branch):group(group),branch(branch){}
 80059d0:	8001      	strh	r1, [r0, #0]
 80059d2:	8042      	strh	r2, [r0, #2]
 80059d4:	4770      	bx	lr

080059d6 <_ZN12LoRa_addressC1Em>:
LoRa_address::LoRa_address(const uint32_t adr):group((uint16_t)(adr >> 16)),branch((uint16_t)(adr)){}
 80059d6:	0c0a      	lsrs	r2, r1, #16
 80059d8:	8002      	strh	r2, [r0, #0]
 80059da:	8041      	strh	r1, [r0, #2]
 80059dc:	4770      	bx	lr

080059de <_ZN12LoRa_address6globalEv>:
    return ((group == LORA_GLOBAL_ADR_GROUP) && (branch == LORA_GLOBAL_ADR_BRANCH));
 80059de:	f240 13ff 	movw	r3, #511	; 0x1ff
 80059e2:	8802      	ldrh	r2, [r0, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d106      	bne.n	80059f6 <_ZN12LoRa_address6globalEv+0x18>
 80059e8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80059ec:	8840      	ldrh	r0, [r0, #2]
 80059ee:	1ac3      	subs	r3, r0, r3
 80059f0:	4258      	negs	r0, r3
 80059f2:	4158      	adcs	r0, r3
 80059f4:	4770      	bx	lr
 80059f6:	2000      	movs	r0, #0
}
 80059f8:	4770      	bx	lr

080059fa <_ZneRK12LoRa_addressS1_>:
    return ((left.group != right.group) || (left.branch != right.branch));
 80059fa:	8802      	ldrh	r2, [r0, #0]
 80059fc:	880b      	ldrh	r3, [r1, #0]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d105      	bne.n	8005a0e <_ZneRK12LoRa_addressS1_+0x14>
 8005a02:	8840      	ldrh	r0, [r0, #2]
 8005a04:	884b      	ldrh	r3, [r1, #2]
 8005a06:	1ac0      	subs	r0, r0, r3
 8005a08:	bf18      	it	ne
 8005a0a:	2001      	movne	r0, #1
 8005a0c:	4770      	bx	lr
 8005a0e:	2001      	movs	r0, #1
}
 8005a10:	4770      	bx	lr
	...

08005a14 <_ZN15Packet_analyzerC1Ev>:
Packet_analyzer::Packet_analyzer() {
 8005a14:	4a05      	ldr	r2, [pc, #20]	; (8005a2c <_ZN15Packet_analyzerC1Ev+0x18>)
    field_header_ = field_packet_header;
 8005a16:	4906      	ldr	r1, [pc, #24]	; (8005a30 <_ZN15Packet_analyzerC1Ev+0x1c>)
Packet_analyzer::Packet_analyzer() {
 8005a18:	6002      	str	r2, [r0, #0]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	e9c0 2205 	strd	r2, r2, [r0, #20]
    field_packet_ = nullptr;
 8005a20:	e9c0 1201 	strd	r1, r2, [r0, #4]
    amt_field_header_ = count_field_packet_header;
 8005a24:	2206      	movs	r2, #6
 8005a26:	60c2      	str	r2, [r0, #12]
}
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	0800b300 	.word	0x0800b300
 8005a30:	20000004 	.word	0x20000004

08005a34 <_ZN15Packet_analyzer18get_dest_adr_groupERK11LoRa_packet>:
uint16_t Packet_analyzer::get_dest_adr_group(const LoRa_packet& packet) {
 8005a34:	b508      	push	{r3, lr}
    return field_header_[num_dest_adr_group]->get_value(packet);
 8005a36:	6843      	ldr	r3, [r0, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	6818      	ldr	r0, [r3, #0]
 8005a3c:	f7fd fe62 	bl	8003704 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 8005a40:	b280      	uxth	r0, r0
 8005a42:	bd08      	pop	{r3, pc}

08005a44 <_ZN15Packet_analyzer19get_dest_adr_branchERK11LoRa_packet>:
uint16_t Packet_analyzer::get_dest_adr_branch(const LoRa_packet& packet) {
 8005a44:	b508      	push	{r3, lr}
    return field_header_[num_dest_adr_branch]->get_value(packet);
 8005a46:	6843      	ldr	r3, [r0, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	6858      	ldr	r0, [r3, #4]
 8005a4c:	f7fd fe5a 	bl	8003704 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 8005a50:	b280      	uxth	r0, r0
 8005a52:	bd08      	pop	{r3, pc}

08005a54 <_ZN15Packet_analyzer12get_dest_adrERK11LoRa_packet>:
LoRa_address Packet_analyzer::get_dest_adr(const LoRa_packet& packet) {
 8005a54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a56:	4605      	mov	r5, r0
 8005a58:	460e      	mov	r6, r1
    return {get_dest_adr_group(packet), get_dest_adr_branch(packet)};
 8005a5a:	f7ff ffeb 	bl	8005a34 <_ZN15Packet_analyzer18get_dest_adr_groupERK11LoRa_packet>
 8005a5e:	4631      	mov	r1, r6
 8005a60:	4604      	mov	r4, r0
 8005a62:	4628      	mov	r0, r5
 8005a64:	f7ff ffee 	bl	8005a44 <_ZN15Packet_analyzer19get_dest_adr_branchERK11LoRa_packet>
}
 8005a68:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
 8005a6c:	b002      	add	sp, #8
 8005a6e:	bd70      	pop	{r4, r5, r6, pc}

08005a70 <_ZN15Packet_analyzer18get_sour_adr_groupERK11LoRa_packet>:
uint16_t Packet_analyzer::get_sour_adr_group(const LoRa_packet& packet) {
 8005a70:	b508      	push	{r3, lr}
    return field_header_[num_sour_adr_group]->get_value(packet);
 8005a72:	6843      	ldr	r3, [r0, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	6898      	ldr	r0, [r3, #8]
 8005a78:	f7fd fe44 	bl	8003704 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 8005a7c:	b280      	uxth	r0, r0
 8005a7e:	bd08      	pop	{r3, pc}

08005a80 <_ZN15Packet_analyzer19get_sour_adr_branchERK11LoRa_packet>:
uint16_t Packet_analyzer::get_sour_adr_branch(const LoRa_packet& packet) {
 8005a80:	b508      	push	{r3, lr}
    return field_header_[num_sour_adr_branch]->get_value(packet);
 8005a82:	6843      	ldr	r3, [r0, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	68d8      	ldr	r0, [r3, #12]
 8005a88:	f7fd fe3c 	bl	8003704 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 8005a8c:	b280      	uxth	r0, r0
 8005a8e:	bd08      	pop	{r3, pc}

08005a90 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>:
LoRa_address Packet_analyzer::get_sour_adr(const LoRa_packet& packet) {
 8005a90:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a92:	4605      	mov	r5, r0
 8005a94:	460e      	mov	r6, r1
    return {get_sour_adr_group(packet), get_sour_adr_branch(packet)};
 8005a96:	f7ff ffeb 	bl	8005a70 <_ZN15Packet_analyzer18get_sour_adr_groupERK11LoRa_packet>
 8005a9a:	4631      	mov	r1, r6
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	f7ff ffee 	bl	8005a80 <_ZN15Packet_analyzer19get_sour_adr_branchERK11LoRa_packet>
}
 8005aa4:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
 8005aa8:	b002      	add	sp, #8
 8005aaa:	bd70      	pop	{r4, r5, r6, pc}

08005aac <_ZN15Packet_analyzer15get_packet_typeERK11LoRa_packet>:
    return (Packet_Type)field_header_[num_type]->get_value(packet);
 8005aac:	6843      	ldr	r3, [r0, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	6918      	ldr	r0, [r3, #16]
 8005ab2:	f7fd be27 	b.w	8003704 <_ZNK13Address_field9get_valueERK11LoRa_packeth>

08005ab6 <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>:
uint16_t Packet_analyzer::get_packet_number(const LoRa_packet& packet) {
 8005ab6:	b508      	push	{r3, lr}
    return field_header_[num_number]->get_value(packet);
 8005ab8:	6843      	ldr	r3, [r0, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	6958      	ldr	r0, [r3, #20]
 8005abe:	f7fd fe21 	bl	8003704 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 8005ac2:	b280      	uxth	r0, r0
 8005ac4:	bd08      	pop	{r3, pc}

08005ac6 <_ZN15Packet_analyzer18set_dest_adr_groupER11LoRa_packett>:
bool Packet_analyzer::set_dest_adr_group(LoRa_packet& packet, uint16_t adr) {
 8005ac6:	b410      	push	{r4}
 8005ac8:	460c      	mov	r4, r1
    return field_header_[num_dest_adr_group]->set_value(adr, packet);
 8005aca:	6840      	ldr	r0, [r0, #4]
bool Packet_analyzer::set_dest_adr_group(LoRa_packet& packet, uint16_t adr) {
 8005acc:	4611      	mov	r1, r2
    return field_header_[num_dest_adr_group]->set_value(adr, packet);
 8005ace:	2300      	movs	r3, #0
 8005ad0:	4622      	mov	r2, r4
 8005ad2:	6800      	ldr	r0, [r0, #0]
}
 8005ad4:	bc10      	pop	{r4}
    return field_header_[num_dest_adr_group]->set_value(adr, packet);
 8005ad6:	f7fd be61 	b.w	800379c <_ZNK13Address_field9set_valueEmR11LoRa_packeth>

08005ada <_ZN15Packet_analyzer19set_dest_adr_branchER11LoRa_packett>:
bool Packet_analyzer::set_dest_adr_branch(LoRa_packet& packet, uint16_t adr) {
 8005ada:	b410      	push	{r4}
 8005adc:	460c      	mov	r4, r1
    return field_header_[num_dest_adr_branch]->set_value(adr, packet);
 8005ade:	6840      	ldr	r0, [r0, #4]
bool Packet_analyzer::set_dest_adr_branch(LoRa_packet& packet, uint16_t adr) {
 8005ae0:	4611      	mov	r1, r2
    return field_header_[num_dest_adr_branch]->set_value(adr, packet);
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	4622      	mov	r2, r4
 8005ae6:	6840      	ldr	r0, [r0, #4]
}
 8005ae8:	bc10      	pop	{r4}
    return field_header_[num_dest_adr_branch]->set_value(adr, packet);
 8005aea:	f7fd be57 	b.w	800379c <_ZNK13Address_field9set_valueEmR11LoRa_packeth>

08005aee <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address>:
bool Packet_analyzer::set_dest_adr(LoRa_packet& packet, LoRa_address adr) {
 8005aee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005af0:	4605      	mov	r5, r0
 8005af2:	460e      	mov	r6, r1
 8005af4:	9201      	str	r2, [sp, #4]
    uint16_t buffer = get_dest_adr_group(packet);
 8005af6:	f7ff ff9d 	bl	8005a34 <_ZN15Packet_analyzer18get_dest_adr_groupERK11LoRa_packet>
    if(set_dest_adr_group(packet, adr.group))
 8005afa:	4631      	mov	r1, r6
    uint16_t buffer = get_dest_adr_group(packet);
 8005afc:	4607      	mov	r7, r0
    if(set_dest_adr_group(packet, adr.group))
 8005afe:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8005b02:	4628      	mov	r0, r5
 8005b04:	f7ff ffdf 	bl	8005ac6 <_ZN15Packet_analyzer18set_dest_adr_groupER11LoRa_packett>
 8005b08:	4604      	mov	r4, r0
 8005b0a:	b960      	cbnz	r0, 8005b26 <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address+0x38>
    if(set_dest_adr_branch(packet, adr.branch)) {
 8005b0c:	4631      	mov	r1, r6
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005b14:	f7ff ffe1 	bl	8005ada <_ZN15Packet_analyzer19set_dest_adr_branchER11LoRa_packett>
 8005b18:	4604      	mov	r4, r0
 8005b1a:	b120      	cbz	r0, 8005b26 <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address+0x38>
        set_dest_adr_group(packet, buffer);
 8005b1c:	463a      	mov	r2, r7
 8005b1e:	4631      	mov	r1, r6
 8005b20:	4628      	mov	r0, r5
 8005b22:	f7ff ffd0 	bl	8005ac6 <_ZN15Packet_analyzer18set_dest_adr_groupER11LoRa_packett>
}
 8005b26:	4620      	mov	r0, r4
 8005b28:	b003      	add	sp, #12
 8005b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b2c <_ZN15Packet_analyzer18set_sour_adr_groupER11LoRa_packett>:
bool Packet_analyzer::set_sour_adr_group(LoRa_packet& packet, uint16_t adr) {
 8005b2c:	b410      	push	{r4}
 8005b2e:	460c      	mov	r4, r1
    return field_header_[num_sour_adr_group]->set_value(adr, packet);
 8005b30:	6840      	ldr	r0, [r0, #4]
bool Packet_analyzer::set_sour_adr_group(LoRa_packet& packet, uint16_t adr) {
 8005b32:	4611      	mov	r1, r2
    return field_header_[num_sour_adr_group]->set_value(adr, packet);
 8005b34:	2300      	movs	r3, #0
 8005b36:	4622      	mov	r2, r4
 8005b38:	6880      	ldr	r0, [r0, #8]
}
 8005b3a:	bc10      	pop	{r4}
    return field_header_[num_sour_adr_group]->set_value(adr, packet);
 8005b3c:	f7fd be2e 	b.w	800379c <_ZNK13Address_field9set_valueEmR11LoRa_packeth>

08005b40 <_ZN15Packet_analyzer19set_sour_adr_branchER11LoRa_packett>:
bool Packet_analyzer::set_sour_adr_branch(LoRa_packet& packet, uint16_t adr) {
 8005b40:	b410      	push	{r4}
 8005b42:	460c      	mov	r4, r1
    return field_header_[num_sour_adr_branch]->set_value(adr, packet);
 8005b44:	6840      	ldr	r0, [r0, #4]
bool Packet_analyzer::set_sour_adr_branch(LoRa_packet& packet, uint16_t adr) {
 8005b46:	4611      	mov	r1, r2
    return field_header_[num_sour_adr_branch]->set_value(adr, packet);
 8005b48:	2300      	movs	r3, #0
 8005b4a:	4622      	mov	r2, r4
 8005b4c:	68c0      	ldr	r0, [r0, #12]
}
 8005b4e:	bc10      	pop	{r4}
    return field_header_[num_sour_adr_branch]->set_value(adr, packet);
 8005b50:	f7fd be24 	b.w	800379c <_ZNK13Address_field9set_valueEmR11LoRa_packeth>

08005b54 <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address>:
bool Packet_analyzer::set_sour_adr(LoRa_packet& packet, LoRa_address adr) {
 8005b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b56:	4605      	mov	r5, r0
 8005b58:	460e      	mov	r6, r1
 8005b5a:	9201      	str	r2, [sp, #4]
    uint16_t buffer = get_sour_adr_group(packet);
 8005b5c:	f7ff ff88 	bl	8005a70 <_ZN15Packet_analyzer18get_sour_adr_groupERK11LoRa_packet>
    if(set_sour_adr_group(packet, adr.group))
 8005b60:	4631      	mov	r1, r6
    uint16_t buffer = get_sour_adr_group(packet);
 8005b62:	4607      	mov	r7, r0
    if(set_sour_adr_group(packet, adr.group))
 8005b64:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8005b68:	4628      	mov	r0, r5
 8005b6a:	f7ff ffdf 	bl	8005b2c <_ZN15Packet_analyzer18set_sour_adr_groupER11LoRa_packett>
 8005b6e:	4604      	mov	r4, r0
 8005b70:	b960      	cbnz	r0, 8005b8c <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address+0x38>
    if(set_sour_adr_branch(packet, adr.branch)) {
 8005b72:	4631      	mov	r1, r6
 8005b74:	4628      	mov	r0, r5
 8005b76:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005b7a:	f7ff ffe1 	bl	8005b40 <_ZN15Packet_analyzer19set_sour_adr_branchER11LoRa_packett>
 8005b7e:	4604      	mov	r4, r0
 8005b80:	b120      	cbz	r0, 8005b8c <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address+0x38>
        set_sour_adr_group(packet, buffer);
 8005b82:	463a      	mov	r2, r7
 8005b84:	4631      	mov	r1, r6
 8005b86:	4628      	mov	r0, r5
 8005b88:	f7ff ffd0 	bl	8005b2c <_ZN15Packet_analyzer18set_sour_adr_groupER11LoRa_packett>
}
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	b003      	add	sp, #12
 8005b90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b92 <_ZN15Packet_analyzer15set_packet_typeER11LoRa_packet11Packet_Type>:
bool Packet_analyzer::set_packet_type(LoRa_packet& packet, Packet_Type pac_type) {
 8005b92:	b410      	push	{r4}
 8005b94:	460c      	mov	r4, r1
    return  field_header_[num_type]->set_value((uint32_t)pac_type, packet);
 8005b96:	6840      	ldr	r0, [r0, #4]
bool Packet_analyzer::set_packet_type(LoRa_packet& packet, Packet_Type pac_type) {
 8005b98:	4611      	mov	r1, r2
    return  field_header_[num_type]->set_value((uint32_t)pac_type, packet);
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	4622      	mov	r2, r4
 8005b9e:	6900      	ldr	r0, [r0, #16]
}
 8005ba0:	bc10      	pop	{r4}
    return  field_header_[num_type]->set_value((uint32_t)pac_type, packet);
 8005ba2:	f7fd bdfb 	b.w	800379c <_ZNK13Address_field9set_valueEmR11LoRa_packeth>

08005ba6 <_ZN15Packet_analyzer17set_packet_numberER11LoRa_packett>:
bool Packet_analyzer::set_packet_number(LoRa_packet& packet, uint16_t num) {
 8005ba6:	b410      	push	{r4}
 8005ba8:	460c      	mov	r4, r1
    return field_header_[num_number]->set_value(num, packet);
 8005baa:	6840      	ldr	r0, [r0, #4]
bool Packet_analyzer::set_packet_number(LoRa_packet& packet, uint16_t num) {
 8005bac:	4611      	mov	r1, r2
    return field_header_[num_number]->set_value(num, packet);
 8005bae:	2300      	movs	r3, #0
 8005bb0:	4622      	mov	r2, r4
 8005bb2:	6940      	ldr	r0, [r0, #20]
}
 8005bb4:	bc10      	pop	{r4}
    return field_header_[num_number]->set_value(num, packet);
 8005bb6:	f7fd bdf1 	b.w	800379c <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
	...

08005bbc <_ZN17Packet_Connection11set_commandER11LoRa_packeth>:
    if (!(com < CONNECT_COMMAND_DATA))
 8005bbc:	2a0c      	cmp	r2, #12
uint8_t Packet_Connection::set_command(LoRa_packet& packet, uint8_t com) {
 8005bbe:	b510      	push	{r4, lr}
 8005bc0:	4604      	mov	r4, r0
 8005bc2:	4608      	mov	r0, r1
 8005bc4:	4611      	mov	r1, r2
    if (!(com < CONNECT_COMMAND_DATA))
 8005bc6:	d80b      	bhi.n	8005be0 <_ZN17Packet_Connection11set_commandER11LoRa_packeth+0x24>
    last_filled_byte = PACKET_HEADER_SIZE; // Команда всегда находится сразу после шапки
 8005bc8:	2309      	movs	r3, #9
    command_ = com;
 8005bca:	7722      	strb	r2, [r4, #28]
    last_filled_byte = PACKET_HEADER_SIZE; // Команда всегда находится сразу после шапки
 8005bcc:	6163      	str	r3, [r4, #20]
    error = field_byte.set_value(command_, packet, last_filled_byte);
 8005bce:	4602      	mov	r2, r0
 8005bd0:	4805      	ldr	r0, [pc, #20]	; (8005be8 <_ZN17Packet_Connection11set_commandER11LoRa_packeth+0x2c>)
 8005bd2:	f7fd fde3 	bl	800379c <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
    if (error)
 8005bd6:	b928      	cbnz	r0, 8005be4 <_ZN17Packet_Connection11set_commandER11LoRa_packeth+0x28>
    ++last_filled_byte;
 8005bd8:	6963      	ldr	r3, [r4, #20]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	6163      	str	r3, [r4, #20]
}
 8005bde:	bd10      	pop	{r4, pc}
        return 1;
 8005be0:	2001      	movs	r0, #1
 8005be2:	e7fc      	b.n	8005bde <_ZN17Packet_Connection11set_commandER11LoRa_packeth+0x22>
        return 2;
 8005be4:	2002      	movs	r0, #2
 8005be6:	e7fa      	b.n	8005bde <_ZN17Packet_Connection11set_commandER11LoRa_packeth+0x22>
 8005be8:	200020fc 	.word	0x200020fc

08005bec <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh>:
uint8_t Packet_Connection::get_command(const LoRa_packet& packet, uint8_t *com) {
 8005bec:	b538      	push	{r3, r4, r5, lr}
 8005bee:	4615      	mov	r5, r2
    last_read_byte = PACKET_HEADER_SIZE; // Команда всегда находится сразу после шапки
 8005bf0:	2209      	movs	r2, #9
uint8_t Packet_Connection::get_command(const LoRa_packet& packet, uint8_t *com) {
 8005bf2:	4604      	mov	r4, r0
    last_read_byte = PACKET_HEADER_SIZE; // Команда всегда находится сразу после шапки
 8005bf4:	6182      	str	r2, [r0, #24]
    if(com == nullptr)
 8005bf6:	b18d      	cbz	r5, 8005c1c <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh+0x30>
    command_ = field_byte.get_value(packet, last_read_byte);
 8005bf8:	4809      	ldr	r0, [pc, #36]	; (8005c20 <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh+0x34>)
 8005bfa:	f7fd fd83 	bl	8003704 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
    ++last_read_byte;
 8005bfe:	69a3      	ldr	r3, [r4, #24]
    command_ = field_byte.get_value(packet, last_read_byte);
 8005c00:	b2c0      	uxtb	r0, r0
    if (!(command_ < CONNECT_COMMAND_DATA)) {
 8005c02:	280c      	cmp	r0, #12
    ++last_read_byte;
 8005c04:	f103 0301 	add.w	r3, r3, #1
 8005c08:	61a3      	str	r3, [r4, #24]
        command_ = 0xFF;
 8005c0a:	bf88      	it	hi
 8005c0c:	23ff      	movhi	r3, #255	; 0xff
    command_ = field_byte.get_value(packet, last_read_byte);
 8005c0e:	7720      	strb	r0, [r4, #28]
    *com = command_;
 8005c10:	bf95      	itete	ls
 8005c12:	7028      	strbls	r0, [r5, #0]
        return 2;
 8005c14:	2002      	movhi	r0, #2
    return 0;
 8005c16:	2000      	movls	r0, #0
        command_ = 0xFF;
 8005c18:	7723      	strbhi	r3, [r4, #28]
}
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 8005c1c:	2001      	movs	r0, #1
 8005c1e:	e7fc      	b.n	8005c1a <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh+0x2e>
 8005c20:	200020fc 	.word	0x200020fc

08005c24 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>:
    size_data = 0;
 8005c24:	2000      	movs	r0, #0
uint8_t Packet_Connection::get_size_by_data(const uint8_t *com, const uint8_t *len, uint8_t &size_data) {
 8005c26:	b510      	push	{r4, lr}
    size_data = 0;
 8005c28:	7018      	strb	r0, [r3, #0]
    if (!(*com < CONNECT_COMMAND_DATA)) {
 8005c2a:	7809      	ldrb	r1, [r1, #0]
 8005c2c:	290c      	cmp	r1, #12
 8005c2e:	d81c      	bhi.n	8005c6a <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x46>
    if (connect_com_data[*com] != 0xFF) {
 8005c30:	4c11      	ldr	r4, [pc, #68]	; (8005c78 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x54>)
 8005c32:	5c64      	ldrb	r4, [r4, r1]
 8005c34:	2cff      	cmp	r4, #255	; 0xff
 8005c36:	d001      	beq.n	8005c3c <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x18>
        size_data = connect_com_data[*com];
 8005c38:	701c      	strb	r4, [r3, #0]
}
 8005c3a:	bd10      	pop	{r4, pc}
        if(len == nullptr)
 8005c3c:	b1ba      	cbz	r2, 8005c6e <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x4a>
        switch (*com)
 8005c3e:	3901      	subs	r1, #1
 8005c40:	290b      	cmp	r1, #11
 8005c42:	d807      	bhi.n	8005c54 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x30>
 8005c44:	e8df f001 	tbb	[pc, r1]
 8005c48:	06060608 	.word	0x06060608
 8005c4c:	06060f06 	.word	0x06060f06
 8005c50:	0f060d0d 	.word	0x0f060d0d
        if(len == nullptr)
 8005c54:	2004      	movs	r0, #4
 8005c56:	e7f0      	b.n	8005c3a <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x16>
            if ((*len != 1) && (*len != 2))
 8005c58:	7812      	ldrb	r2, [r2, #0]
 8005c5a:	1e51      	subs	r1, r2, #1
 8005c5c:	2901      	cmp	r1, #1
 8005c5e:	d808      	bhi.n	8005c72 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x4e>
            size_data = *len;
 8005c60:	701a      	strb	r2, [r3, #0]
    return 0;
 8005c62:	2000      	movs	r0, #0
            break;
 8005c64:	e7e9      	b.n	8005c3a <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x16>
            size_data = *len;
 8005c66:	7812      	ldrb	r2, [r2, #0]
 8005c68:	e7fa      	b.n	8005c60 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x3c>
        return 1;
 8005c6a:	2001      	movs	r0, #1
 8005c6c:	e7e5      	b.n	8005c3a <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x16>
            return 2;
 8005c6e:	2002      	movs	r0, #2
 8005c70:	e7e3      	b.n	8005c3a <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x16>
                return 3;
 8005c72:	2003      	movs	r0, #3
 8005c74:	e7e1      	b.n	8005c3a <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x16>
 8005c76:	bf00      	nop
 8005c78:	0800b2b8 	.word	0x0800b2b8

08005c7c <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh>:
uint8_t Packet_Connection::set_data(LoRa_packet& packet, uint8_t *data, uint8_t len) {
 8005c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c80:	b085      	sub	sp, #20
 8005c82:	f88d 3007 	strb.w	r3, [sp, #7]
 8005c86:	460f      	mov	r7, r1
 8005c88:	4690      	mov	r8, r2
    error = get_size_by_data(&command_, &len, len_data);
 8005c8a:	f10d 030f 	add.w	r3, sp, #15
 8005c8e:	f10d 0207 	add.w	r2, sp, #7
 8005c92:	f100 011c 	add.w	r1, r0, #28
uint8_t Packet_Connection::set_data(LoRa_packet& packet, uint8_t *data, uint8_t len) {
 8005c96:	4604      	mov	r4, r0
    error = get_size_by_data(&command_, &len, len_data);
 8005c98:	f7ff ffc4 	bl	8005c24 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
    if(error)
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d145      	bne.n	8005d2e <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xb2>
    if (connect_com_data[command_] == 0xFF) {
 8005ca2:	7f23      	ldrb	r3, [r4, #28]
 8005ca4:	4a25      	ldr	r2, [pc, #148]	; (8005d3c <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xc0>)
 8005ca6:	5cd2      	ldrb	r2, [r2, r3]
 8005ca8:	2aff      	cmp	r2, #255	; 0xff
 8005caa:	d013      	beq.n	8005cd4 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0x58>
uint8_t Packet_Connection::set_data(LoRa_packet& packet, uint8_t *data, uint8_t len) {
 8005cac:	2600      	movs	r6, #0
        error = field_byte.set_value(data[i], packet, last_filled_byte);
 8005cae:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005d40 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xc4>
    for (int i = 0; i < len_data; ++i) {
 8005cb2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005cb6:	42b3      	cmp	r3, r6
 8005cb8:	dd39      	ble.n	8005d2e <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xb2>
        error = field_byte.set_value(data[i], packet, last_filled_byte);
 8005cba:	7d23      	ldrb	r3, [r4, #20]
 8005cbc:	463a      	mov	r2, r7
 8005cbe:	4648      	mov	r0, r9
 8005cc0:	f818 1006 	ldrb.w	r1, [r8, r6]
 8005cc4:	f7fd fd6a 	bl	800379c <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
        ++last_filled_byte;
 8005cc8:	6963      	ldr	r3, [r4, #20]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	6163      	str	r3, [r4, #20]
        if (error)
 8005cce:	bb90      	cbnz	r0, 8005d36 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xba>
    for (int i = 0; i < len_data; ++i) {
 8005cd0:	3601      	adds	r6, #1
 8005cd2:	e7ee      	b.n	8005cb2 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0x36>
        switch (command_) {
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	2b0b      	cmp	r3, #11
 8005cd8:	d828      	bhi.n	8005d2c <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xb0>
 8005cda:	a201      	add	r2, pc, #4	; (adr r2, 8005ce0 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0x64>)
 8005cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce0:	08005cad 	.word	0x08005cad
 8005ce4:	08005d2d 	.word	0x08005d2d
 8005ce8:	08005d2d 	.word	0x08005d2d
 8005cec:	08005d2d 	.word	0x08005d2d
 8005cf0:	08005d2d 	.word	0x08005d2d
 8005cf4:	08005d11 	.word	0x08005d11
 8005cf8:	08005d2d 	.word	0x08005d2d
 8005cfc:	08005d2d 	.word	0x08005d2d
 8005d00:	08005cad 	.word	0x08005cad
 8005d04:	08005cad 	.word	0x08005cad
 8005d08:	08005d2d 	.word	0x08005d2d
 8005d0c:	08005d11 	.word	0x08005d11
            error = field_byte.set_value(len, packet, last_filled_byte);
 8005d10:	7d23      	ldrb	r3, [r4, #20]
 8005d12:	463a      	mov	r2, r7
 8005d14:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005d18:	4809      	ldr	r0, [pc, #36]	; (8005d40 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xc4>)
 8005d1a:	f7fd fd3f 	bl	800379c <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            ++last_filled_byte;
 8005d1e:	6963      	ldr	r3, [r4, #20]
 8005d20:	3301      	adds	r3, #1
 8005d22:	6163      	str	r3, [r4, #20]
            if (error)
 8005d24:	2800      	cmp	r0, #0
 8005d26:	d0c1      	beq.n	8005cac <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0x30>
                return 4;
 8005d28:	2504      	movs	r5, #4
 8005d2a:	e000      	b.n	8005d2e <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xb2>
    if (connect_com_data[command_] == 0xFF) {
 8005d2c:	2506      	movs	r5, #6
}
 8005d2e:	4628      	mov	r0, r5
 8005d30:	b005      	add	sp, #20
 8005d32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return 8;
 8005d36:	2508      	movs	r5, #8
 8005d38:	e7f9      	b.n	8005d2e <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xb2>
 8005d3a:	bf00      	nop
 8005d3c:	0800b2b8 	.word	0x0800b2b8
 8005d40:	200020fc 	.word	0x200020fc

08005d44 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>:
uint8_t Packet_Connection::set_packet_data(LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 8005d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    error = set_command(packet, *com);
 8005d48:	7812      	ldrb	r2, [r2, #0]
uint8_t Packet_Connection::set_packet_data(LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	460d      	mov	r5, r1
 8005d4e:	461e      	mov	r6, r3
 8005d50:	9f06      	ldr	r7, [sp, #24]
    error = set_command(packet, *com);
 8005d52:	f7ff ff33 	bl	8005bbc <_ZN17Packet_Connection11set_commandER11LoRa_packeth>
    if(error)
 8005d56:	b938      	cbnz	r0, 8005d68 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_+0x24>
    error = set_data(packet, data, *len);
 8005d58:	4632      	mov	r2, r6
 8005d5a:	4629      	mov	r1, r5
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	783b      	ldrb	r3, [r7, #0]
}
 8005d60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    error = set_data(packet, data, *len);
 8005d64:	f7ff bf8a 	b.w	8005c7c <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh>
}
 8005d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005d6c <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_>:
uint8_t Packet_Connection::get_data(const LoRa_packet& packet, uint8_t *data, uint8_t *len) {
 8005d6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005d70:	4604      	mov	r4, r0
 8005d72:	460f      	mov	r7, r1
 8005d74:	4690      	mov	r8, r2
    if(len == nullptr)
 8005d76:	461e      	mov	r6, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d06c      	beq.n	8005e56 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xea>
    error = get_size_by_data(&command_, nullptr, len_data);
 8005d7c:	f100 091c 	add.w	r9, r0, #28
 8005d80:	2200      	movs	r2, #0
 8005d82:	4649      	mov	r1, r9
 8005d84:	f10d 0307 	add.w	r3, sp, #7
 8005d88:	f7ff ff4c 	bl	8005c24 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
    if(error == 2) {
 8005d8c:	2802      	cmp	r0, #2
    error = get_size_by_data(&command_, nullptr, len_data);
 8005d8e:	4605      	mov	r5, r0
    if(error == 2) {
 8005d90:	d125      	bne.n	8005dde <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x72>
        if(command_ == 0x01) {
 8005d92:	7f23      	ldrb	r3, [r4, #28]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d109      	bne.n	8005dac <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x40>
            error = get_size_by_data(&command_, len, len_data);
 8005d98:	4632      	mov	r2, r6
 8005d9a:	4649      	mov	r1, r9
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	f10d 0307 	add.w	r3, sp, #7
 8005da2:	f7ff ff3f 	bl	8005c24 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
 8005da6:	4605      	mov	r5, r0
    if(error)
 8005da8:	b35d      	cbz	r5, 8005e02 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x96>
 8005daa:	e036      	b.n	8005e1a <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xae>
            *len = field_byte.get_value(packet, last_read_byte);
 8005dac:	4639      	mov	r1, r7
 8005dae:	7e22      	ldrb	r2, [r4, #24]
 8005db0:	482a      	ldr	r0, [pc, #168]	; (8005e5c <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xf0>)
 8005db2:	f7fd fca7 	bl	8003704 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005db6:	7030      	strb	r0, [r6, #0]
            ++last_read_byte;
 8005db8:	69a3      	ldr	r3, [r4, #24]
            error = get_size_by_data(&command_, len, len_data);
 8005dba:	4632      	mov	r2, r6
            ++last_read_byte;
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	61a3      	str	r3, [r4, #24]
            error = get_size_by_data(&command_, len, len_data);
 8005dc0:	4649      	mov	r1, r9
 8005dc2:	f10d 0307 	add.w	r3, sp, #7
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f7ff ff2c 	bl	8005c24 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
            if (command_ == 0x06) {
 8005dcc:	7f23      	ldrb	r3, [r4, #28]
            error = get_size_by_data(&command_, len, len_data);
 8005dce:	4605      	mov	r5, r0
            if (command_ == 0x06) {
 8005dd0:	2b06      	cmp	r3, #6
 8005dd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005dd6:	d100      	bne.n	8005dda <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x6e>
                *len = len_data/2;
 8005dd8:	085b      	lsrs	r3, r3, #1
        *len = len_data;
 8005dda:	7033      	strb	r3, [r6, #0]
 8005ddc:	e7e4      	b.n	8005da8 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x3c>
    else if(error == 3) {
 8005dde:	2803      	cmp	r0, #3
 8005de0:	d11f      	bne.n	8005e22 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xb6>
        if (((packet.get_len() - last_read_byte) == 1) || ((packet.get_len() - last_read_byte) == 2)) {
 8005de2:	4638      	mov	r0, r7
 8005de4:	f7fe fd05 	bl	80047f2 <_ZNK11LoRa_packet7get_lenEv>
 8005de8:	69a3      	ldr	r3, [r4, #24]
 8005dea:	1ac0      	subs	r0, r0, r3
 8005dec:	2801      	cmp	r0, #1
 8005dee:	d10d      	bne.n	8005e0c <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xa0>
            len_data = packet.get_len() - last_read_byte;
 8005df0:	4638      	mov	r0, r7
 8005df2:	f7fe fcfe 	bl	80047f2 <_ZNK11LoRa_packet7get_lenEv>
 8005df6:	69a3      	ldr	r3, [r4, #24]
 8005df8:	1ac0      	subs	r0, r0, r3
 8005dfa:	b2c0      	uxtb	r0, r0
 8005dfc:	f88d 0007 	strb.w	r0, [sp, #7]
            *len = len_data;
 8005e00:	7030      	strb	r0, [r6, #0]
    if(len_data > 0) {
 8005e02:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005e06:	b97b      	cbnz	r3, 8005e28 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xbc>
    return 0;
 8005e08:	2500      	movs	r5, #0
 8005e0a:	e006      	b.n	8005e1a <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xae>
        if (((packet.get_len() - last_read_byte) == 1) || ((packet.get_len() - last_read_byte) == 2)) {
 8005e0c:	4638      	mov	r0, r7
 8005e0e:	f7fe fcf0 	bl	80047f2 <_ZNK11LoRa_packet7get_lenEv>
 8005e12:	69a3      	ldr	r3, [r4, #24]
 8005e14:	1ac0      	subs	r0, r0, r3
 8005e16:	2802      	cmp	r0, #2
 8005e18:	d0ea      	beq.n	8005df0 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x84>
}
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	b003      	add	sp, #12
 8005e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *len = len_data;
 8005e22:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005e26:	e7d8      	b.n	8005dda <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x6e>
        if(data == nullptr)
 8005e28:	f1b8 0f00 	cmp.w	r8, #0
 8005e2c:	d011      	beq.n	8005e52 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xe6>
        for (int i = 0; i < len_data; ++i) {
 8005e2e:	2500      	movs	r5, #0
            data[i] = field_byte.get_value(packet, last_read_byte);
 8005e30:	4e0a      	ldr	r6, [pc, #40]	; (8005e5c <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xf0>)
        for (int i = 0; i < len_data; ++i) {
 8005e32:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005e36:	42ab      	cmp	r3, r5
 8005e38:	dde6      	ble.n	8005e08 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x9c>
            data[i] = field_byte.get_value(packet, last_read_byte);
 8005e3a:	4639      	mov	r1, r7
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	7e22      	ldrb	r2, [r4, #24]
 8005e40:	f7fd fc60 	bl	8003704 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005e44:	f808 0005 	strb.w	r0, [r8, r5]
            ++last_read_byte;
 8005e48:	69a3      	ldr	r3, [r4, #24]
        for (int i = 0; i < len_data; ++i) {
 8005e4a:	3501      	adds	r5, #1
            ++last_read_byte;
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	61a3      	str	r3, [r4, #24]
        for (int i = 0; i < len_data; ++i) {
 8005e50:	e7ef      	b.n	8005e32 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xc6>
            return 6;
 8005e52:	2506      	movs	r5, #6
 8005e54:	e7e1      	b.n	8005e1a <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xae>
        return 1;
 8005e56:	2501      	movs	r5, #1
 8005e58:	e7df      	b.n	8005e1a <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xae>
 8005e5a:	bf00      	nop
 8005e5c:	200020fc 	.word	0x200020fc

08005e60 <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>:
uint8_t Packet_Connection::get_packet_data(const LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 8005e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e64:	9f06      	ldr	r7, [sp, #24]
 8005e66:	4604      	mov	r4, r0
 8005e68:	460d      	mov	r5, r1
 8005e6a:	461e      	mov	r6, r3
    error = get_command(packet, com);
 8005e6c:	f7ff febe 	bl	8005bec <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh>
    if(error)
 8005e70:	b938      	cbnz	r0, 8005e82 <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_+0x22>
    error = get_data(packet, data, len);
 8005e72:	463b      	mov	r3, r7
 8005e74:	4632      	mov	r2, r6
 8005e76:	4629      	mov	r1, r5
 8005e78:	4620      	mov	r0, r4
}
 8005e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    error = get_data(packet, data, len);
 8005e7e:	f7ff bf75 	b.w	8005d6c <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_>
}
 8005e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005e88 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh>:
uint8_t Packet_Connection::get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data) {
 8005e88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    error = get_command(packet, &command_);
 8005e8c:	f100 081c 	add.w	r8, r0, #28
uint8_t Packet_Connection::get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data) {
 8005e90:	4617      	mov	r7, r2
    error = get_command(packet, &command_);
 8005e92:	4642      	mov	r2, r8
uint8_t Packet_Connection::get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data) {
 8005e94:	4605      	mov	r5, r0
 8005e96:	460e      	mov	r6, r1
    error = get_command(packet, &command_);
 8005e98:	f7ff fea8 	bl	8005bec <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh>
    if(error)
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	bba0      	cbnz	r0, 8005f0a <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x82>
    error = get_size_by_data(&command_, nullptr, size_data);
 8005ea0:	463b      	mov	r3, r7
 8005ea2:	4641      	mov	r1, r8
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	f7ff febd 	bl	8005c24 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
    if(error == 2) {
 8005eaa:	2802      	cmp	r0, #2
    error = get_size_by_data(&command_, nullptr, size_data);
 8005eac:	4604      	mov	r4, r0
    if(error == 2) {
 8005eae:	d110      	bne.n	8005ed2 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x4a>
        uint8_t len = field_byte.get_value(packet, last_read_byte);
 8005eb0:	4631      	mov	r1, r6
 8005eb2:	7e2a      	ldrb	r2, [r5, #24]
 8005eb4:	4816      	ldr	r0, [pc, #88]	; (8005f10 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x88>)
 8005eb6:	f7fd fc25 	bl	8003704 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
        error = get_size_by_data(&command_, &len, size_data);
 8005eba:	463b      	mov	r3, r7
        uint8_t len = field_byte.get_value(packet, last_read_byte);
 8005ebc:	f88d 0007 	strb.w	r0, [sp, #7]
        error = get_size_by_data(&command_, &len, size_data);
 8005ec0:	4641      	mov	r1, r8
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	f10d 0207 	add.w	r2, sp, #7
 8005ec8:	f7ff feac 	bl	8005c24 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
        last_read_byte = PACKET_HEADER_SIZE + 1;
 8005ecc:	230a      	movs	r3, #10
        error = get_size_by_data(&command_, &len, size_data);
 8005ece:	4604      	mov	r4, r0
        last_read_byte = PACKET_HEADER_SIZE + 1;
 8005ed0:	61ab      	str	r3, [r5, #24]
    if(error == 3) {
 8005ed2:	2c03      	cmp	r4, #3
 8005ed4:	d10d      	bne.n	8005ef2 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x6a>
        if (((packet.get_len() - last_read_byte) == 1) || ((packet.get_len() - last_read_byte) == 2)) {
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	f7fe fc8b 	bl	80047f2 <_ZNK11LoRa_packet7get_lenEv>
 8005edc:	69ab      	ldr	r3, [r5, #24]
 8005ede:	1ac0      	subs	r0, r0, r3
 8005ee0:	2801      	cmp	r0, #1
 8005ee2:	d10a      	bne.n	8005efa <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x72>
            size_data = packet.get_len() - last_read_byte;
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	f7fe fc84 	bl	80047f2 <_ZNK11LoRa_packet7get_lenEv>
            error = 0;
 8005eea:	2400      	movs	r4, #0
            size_data = packet.get_len() - last_read_byte;
 8005eec:	69ab      	ldr	r3, [r5, #24]
 8005eee:	1ac0      	subs	r0, r0, r3
 8005ef0:	7038      	strb	r0, [r7, #0]
}
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	b002      	add	sp, #8
 8005ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (((packet.get_len() - last_read_byte) == 1) || ((packet.get_len() - last_read_byte) == 2)) {
 8005efa:	4630      	mov	r0, r6
 8005efc:	f7fe fc79 	bl	80047f2 <_ZNK11LoRa_packet7get_lenEv>
 8005f00:	69ab      	ldr	r3, [r5, #24]
 8005f02:	1ac0      	subs	r0, r0, r3
 8005f04:	2802      	cmp	r0, #2
 8005f06:	d1f4      	bne.n	8005ef2 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x6a>
 8005f08:	e7ec      	b.n	8005ee4 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x5c>
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	e7f1      	b.n	8005ef2 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x6a>
 8005f0e:	bf00      	nop
 8005f10:	200020fc 	.word	0x200020fc

08005f14 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm>:
uint8_t Packet_Sensor::set_packet_data(LoRa_packet& packet, uint8_t* amt, uint8_t* param, uint8_t* id, uint32_t* data) {
 8005f14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f18:	9301      	str	r3, [sp, #4]
    last_filled_byte = PACKET_HEADER_SIZE;
 8005f1a:	2309      	movs	r3, #9
    if (field_bit[0].get_value(&setting_) != 0) {
 8005f1c:	f100 0710 	add.w	r7, r0, #16
uint8_t Packet_Sensor::set_packet_data(LoRa_packet& packet, uint8_t* amt, uint8_t* param, uint8_t* id, uint32_t* data) {
 8005f20:	4604      	mov	r4, r0
 8005f22:	460e      	mov	r6, r1
 8005f24:	4615      	mov	r5, r2
    last_filled_byte = PACKET_HEADER_SIZE;
 8005f26:	6143      	str	r3, [r0, #20]
    if (field_bit[0].get_value(&setting_) != 0) {
 8005f28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f2c:	4639      	mov	r1, r7
 8005f2e:	4841      	ldr	r0, [pc, #260]	; (8006034 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x120>)
 8005f30:	f7fd fb59 	bl	80035e6 <_ZNK13Address_field9get_valueEPKhi>
 8005f34:	b1e8      	cbz	r0, 8005f72 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x5e>
        field_byte.set_value(*amt, packet, last_filled_byte);
 8005f36:	7d23      	ldrb	r3, [r4, #20]
 8005f38:	4632      	mov	r2, r6
 8005f3a:	7829      	ldrb	r1, [r5, #0]
 8005f3c:	483e      	ldr	r0, [pc, #248]	; (8006038 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x124>)
 8005f3e:	f7fd fc2d 	bl	800379c <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
        ++last_filled_byte;
 8005f42:	6963      	ldr	r3, [r4, #20]
        count = *amt;
 8005f44:	f895 9000 	ldrb.w	r9, [r5]
        ++last_filled_byte;
 8005f48:	3301      	adds	r3, #1
 8005f4a:	6163      	str	r3, [r4, #20]
    for (int i = 0; i < count; ++i) {
 8005f4c:	2500      	movs	r5, #0
        if (field_bit[1].get_value(&setting_) != 1) {
 8005f4e:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8006048 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x134>
            error = field_byte.set_value(param_, packet, last_filled_byte);
 8005f52:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8006038 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x124>
        if (field_bit[2].get_value(&setting_) != 0) {
 8005f56:	f10a 0b1c 	add.w	fp, sl, #28
    for (int i = 0; i < count; ++i) {
 8005f5a:	45a9      	cmp	r9, r5
 8005f5c:	dd65      	ble.n	800602a <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x116>
        if (!(param[i] < SENSOR_PARAM_DATA)) {
 8005f5e:	9b01      	ldr	r3, [sp, #4]
 8005f60:	5d5b      	ldrb	r3, [r3, r5]
 8005f62:	2b0c      	cmp	r3, #12
 8005f64:	d908      	bls.n	8005f78 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x64>
            param_ = 0xFF;
 8005f66:	23ff      	movs	r3, #255	; 0xff
            return 2;
 8005f68:	2002      	movs	r0, #2
            param_ = 0xFF;
 8005f6a:	7723      	strb	r3, [r4, #28]
}
 8005f6c:	b003      	add	sp, #12
 8005f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t count = 1;
 8005f72:	f04f 0901 	mov.w	r9, #1
 8005f76:	e7e9      	b.n	8005f4c <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x38>
        if (field_bit[1].get_value(&setting_) != 1) {
 8005f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f7c:	4639      	mov	r1, r7
 8005f7e:	4650      	mov	r0, sl
        param_ = param[i];
 8005f80:	7723      	strb	r3, [r4, #28]
        if (field_bit[1].get_value(&setting_) != 1) {
 8005f82:	f7fd fb30 	bl	80035e6 <_ZNK13Address_field9get_valueEPKhi>
 8005f86:	2801      	cmp	r0, #1
 8005f88:	d113      	bne.n	8005fb2 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x9e>
        if (field_bit[2].get_value(&setting_) != 0) {
 8005f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f8e:	4639      	mov	r1, r7
 8005f90:	4658      	mov	r0, fp
 8005f92:	f7fd fb28 	bl	80035e6 <_ZNK13Address_field9get_valueEPKhi>
 8005f96:	b1c8      	cbz	r0, 8005fcc <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xb8>
            error = field_byte.set_value(id[i], packet, last_filled_byte);
 8005f98:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f9a:	7d23      	ldrb	r3, [r4, #20]
 8005f9c:	4632      	mov	r2, r6
 8005f9e:	4640      	mov	r0, r8
 8005fa0:	5d49      	ldrb	r1, [r1, r5]
 8005fa2:	f7fd fbfb 	bl	800379c <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            ++last_filled_byte;
 8005fa6:	6963      	ldr	r3, [r4, #20]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	6163      	str	r3, [r4, #20]
        if (error)
 8005fac:	b170      	cbz	r0, 8005fcc <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xb8>
            return 4;
 8005fae:	2004      	movs	r0, #4
 8005fb0:	e7dc      	b.n	8005f6c <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x58>
            error = field_byte.set_value(param_, packet, last_filled_byte);
 8005fb2:	7d23      	ldrb	r3, [r4, #20]
 8005fb4:	4632      	mov	r2, r6
 8005fb6:	4640      	mov	r0, r8
 8005fb8:	7f21      	ldrb	r1, [r4, #28]
 8005fba:	f7fd fbef 	bl	800379c <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            ++last_filled_byte;
 8005fbe:	6963      	ldr	r3, [r4, #20]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	6163      	str	r3, [r4, #20]
        if (error)
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	d0e0      	beq.n	8005f8a <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x76>
            return 3;
 8005fc8:	2003      	movs	r0, #3
 8005fca:	e7cf      	b.n	8005f6c <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x58>
        switch (sensor_param_data[param_]) {
 8005fcc:	7f23      	ldrb	r3, [r4, #28]
 8005fce:	4a1b      	ldr	r2, [pc, #108]	; (800603c <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x128>)
 8005fd0:	5cd3      	ldrb	r3, [r2, r3]
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d013      	beq.n	8005ffe <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xea>
 8005fd6:	2b04      	cmp	r3, #4
 8005fd8:	d01c      	beq.n	8006014 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x100>
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d001      	beq.n	8005fe2 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xce>
 8005fde:	2005      	movs	r0, #5
 8005fe0:	e7c4      	b.n	8005f6c <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x58>
            error = field_byte.set_value(*(data + i), packet, last_filled_byte);
 8005fe2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005fe4:	7d23      	ldrb	r3, [r4, #20]
 8005fe6:	4632      	mov	r2, r6
 8005fe8:	4640      	mov	r0, r8
 8005fea:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8005fee:	f7fd fbd5 	bl	800379c <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            last_filled_byte += 1;
 8005ff2:	6963      	ldr	r3, [r4, #20]
 8005ff4:	3301      	adds	r3, #1
            last_filled_byte += 4;
 8005ff6:	6163      	str	r3, [r4, #20]
        if (error)
 8005ff8:	b9c8      	cbnz	r0, 800602e <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x11a>
    for (int i = 0; i < count; ++i) {
 8005ffa:	3501      	adds	r5, #1
 8005ffc:	e7ad      	b.n	8005f5a <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x46>
            error = field_PWM.set_value(*(data + i), packet, last_filled_byte);
 8005ffe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006000:	7d23      	ldrb	r3, [r4, #20]
 8006002:	4632      	mov	r2, r6
 8006004:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8006008:	480d      	ldr	r0, [pc, #52]	; (8006040 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x12c>)
 800600a:	f7fd fbc7 	bl	800379c <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            last_filled_byte += 2;
 800600e:	6963      	ldr	r3, [r4, #20]
 8006010:	3302      	adds	r3, #2
 8006012:	e7f0      	b.n	8005ff6 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xe2>
            error = field_float.set_value(*(data + i), packet, last_filled_byte);
 8006014:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006016:	7d23      	ldrb	r3, [r4, #20]
 8006018:	4632      	mov	r2, r6
 800601a:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 800601e:	4809      	ldr	r0, [pc, #36]	; (8006044 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x130>)
 8006020:	f7fd fbbc 	bl	800379c <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            last_filled_byte += 4;
 8006024:	6963      	ldr	r3, [r4, #20]
 8006026:	3304      	adds	r3, #4
 8006028:	e7e5      	b.n	8005ff6 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xe2>
    return 0;
 800602a:	2000      	movs	r0, #0
 800602c:	e79e      	b.n	8005f6c <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x58>
            return 6;
 800602e:	2006      	movs	r0, #6
 8006030:	e79c      	b.n	8005f6c <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x58>
 8006032:	bf00      	nop
 8006034:	200022c8 	.word	0x200022c8
 8006038:	200020fc 	.word	0x200020fc
 800603c:	0800b2c5 	.word	0x0800b2c5
 8006040:	200022ac 	.word	0x200022ac
 8006044:	20002134 	.word	0x20002134
 8006048:	200022e4 	.word	0x200022e4

0800604c <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_>:



uint8_t Packet_System::set_packet_data(LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 800604c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006050:	461d      	mov	r5, r3
    bool error = false;
    last_filled_byte = PACKET_HEADER_SIZE;
 8006052:	2309      	movs	r3, #9
 8006054:	6143      	str	r3, [r0, #20]
uint8_t Packet_System::set_packet_data(LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 8006056:	460f      	mov	r7, r1


    // комманда
    if (!(*com < SYSTEM_COMMAND_DATA)) {
 8006058:	7811      	ldrb	r1, [r2, #0]
uint8_t Packet_System::set_packet_data(LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 800605a:	4604      	mov	r4, r0
    if (!(*com < SYSTEM_COMMAND_DATA)) {
 800605c:	2907      	cmp	r1, #7
 800605e:	d904      	bls.n	800606a <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x1e>
        command_ = 0xFF;
 8006060:	23ff      	movs	r3, #255	; 0xff
 8006062:	7703      	strb	r3, [r0, #28]
        return 2;
 8006064:	2002      	movs	r0, #2
        if (error)
            return 8;
    }

    return 0;
}
 8006066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    command_ = *com;
 800606a:	7701      	strb	r1, [r0, #28]
    error = field_byte.set_value(command_, packet, last_filled_byte);
 800606c:	463a      	mov	r2, r7
 800606e:	482a      	ldr	r0, [pc, #168]	; (8006118 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xcc>)
 8006070:	f7fd fb94 	bl	800379c <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
    ++last_filled_byte;
 8006074:	6963      	ldr	r3, [r4, #20]
 8006076:	3301      	adds	r3, #1
 8006078:	6163      	str	r3, [r4, #20]
    if (error)
 800607a:	2800      	cmp	r0, #0
 800607c:	d140      	bne.n	8006100 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xb4>
    if (system_com_data[command_] != 0xFF) {
 800607e:	7f23      	ldrb	r3, [r4, #28]
 8006080:	4a26      	ldr	r2, [pc, #152]	; (800611c <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xd0>)
 8006082:	5cd6      	ldrb	r6, [r2, r3]
 8006084:	2eff      	cmp	r6, #255	; 0xff
 8006086:	d128      	bne.n	80060da <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x8e>
        switch (command_)
 8006088:	2b00      	cmp	r3, #0
 800608a:	d13b      	bne.n	8006104 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xb8>
 800608c:	1e6e      	subs	r6, r5, #1
 800608e:	f105 080b 	add.w	r8, r5, #11
                error = field_byte.set_value(data[i], packet, last_filled_byte);
 8006092:	7d23      	ldrb	r3, [r4, #20]
 8006094:	463a      	mov	r2, r7
 8006096:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800609a:	481f      	ldr	r0, [pc, #124]	; (8006118 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xcc>)
 800609c:	f7fd fb7e 	bl	800379c <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
                ++last_filled_byte;
 80060a0:	6963      	ldr	r3, [r4, #20]
 80060a2:	3301      	adds	r3, #1
 80060a4:	6163      	str	r3, [r4, #20]
                if (error)
 80060a6:	bb78      	cbnz	r0, 8006108 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xbc>
            for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i) {
 80060a8:	4546      	cmp	r6, r8
 80060aa:	d1f2      	bne.n	8006092 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x46>
            _len = *len;
 80060ac:	9a06      	ldr	r2, [sp, #24]
            error = field_byte.set_value(_len, packet, last_filled_byte);
 80060ae:	b2db      	uxtb	r3, r3
            _len = *len;
 80060b0:	7816      	ldrb	r6, [r2, #0]
            error = field_byte.set_value(_len, packet, last_filled_byte);
 80060b2:	4819      	ldr	r0, [pc, #100]	; (8006118 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xcc>)
 80060b4:	463a      	mov	r2, r7
 80060b6:	4631      	mov	r1, r6
 80060b8:	f7fd fb70 	bl	800379c <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            ++last_filled_byte;
 80060bc:	6963      	ldr	r3, [r4, #20]
 80060be:	3301      	adds	r3, #1
 80060c0:	6163      	str	r3, [r4, #20]
            if (error)
 80060c2:	bb18      	cbnz	r0, 800610c <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xc0>
            error = field_byte.set_value(data[0], packet, last_filled_byte);
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	463a      	mov	r2, r7
 80060c8:	7b69      	ldrb	r1, [r5, #13]
 80060ca:	4813      	ldr	r0, [pc, #76]	; (8006118 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xcc>)
 80060cc:	f7fd fb66 	bl	800379c <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            ++last_filled_byte;
 80060d0:	6963      	ldr	r3, [r4, #20]
 80060d2:	3301      	adds	r3, #1
 80060d4:	6163      	str	r3, [r4, #20]
            if (error)
 80060d6:	b9d8      	cbnz	r0, 8006110 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xc4>
            data = data + 1;
 80060d8:	350e      	adds	r5, #14
        error = field_byte.set_value(data[i], packet, last_filled_byte);
 80060da:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8006118 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xcc>
 80060de:	442e      	add	r6, r5
    for (int i = 0; i < _len; ++i) {
 80060e0:	42b5      	cmp	r5, r6
 80060e2:	d017      	beq.n	8006114 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xc8>
        error = field_byte.set_value(data[i], packet, last_filled_byte);
 80060e4:	7d23      	ldrb	r3, [r4, #20]
 80060e6:	463a      	mov	r2, r7
 80060e8:	4640      	mov	r0, r8
 80060ea:	f815 1b01 	ldrb.w	r1, [r5], #1
 80060ee:	f7fd fb55 	bl	800379c <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
        ++last_filled_byte;
 80060f2:	6963      	ldr	r3, [r4, #20]
 80060f4:	3301      	adds	r3, #1
 80060f6:	6163      	str	r3, [r4, #20]
        if (error)
 80060f8:	2800      	cmp	r0, #0
 80060fa:	d0f1      	beq.n	80060e0 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x94>
            return 8;
 80060fc:	2008      	movs	r0, #8
 80060fe:	e7b2      	b.n	8006066 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x1a>
        return 3;
 8006100:	2003      	movs	r0, #3
 8006102:	e7b0      	b.n	8006066 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x1a>
            return 7;
 8006104:	2007      	movs	r0, #7
 8006106:	e7ae      	b.n	8006066 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x1a>
                    return 4;
 8006108:	2004      	movs	r0, #4
 800610a:	e7ac      	b.n	8006066 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x1a>
                return 5;
 800610c:	2005      	movs	r0, #5
 800610e:	e7aa      	b.n	8006066 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x1a>
                return 6;
 8006110:	2006      	movs	r0, #6
 8006112:	e7a8      	b.n	8006066 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x1a>
    return 0;
 8006114:	2000      	movs	r0, #0
 8006116:	e7a6      	b.n	8006066 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x1a>
 8006118:	200020fc 	.word	0x200020fc
 800611c:	0800b2b0 	.word	0x0800b2b0

08006120 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_>:

uint8_t Packet_System::get_packet_data(const LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 8006120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006124:	4616      	mov	r6, r2
    last_read_byte = PACKET_HEADER_SIZE;
 8006126:	2209      	movs	r2, #9
uint8_t Packet_System::get_packet_data(const LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 8006128:	4604      	mov	r4, r0
    last_read_byte = PACKET_HEADER_SIZE;
 800612a:	6182      	str	r2, [r0, #24]

    // комманда
    command_ = field_byte.get_value(packet, last_read_byte);
 800612c:	482b      	ldr	r0, [pc, #172]	; (80061dc <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xbc>)
uint8_t Packet_System::get_packet_data(const LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 800612e:	461d      	mov	r5, r3
 8006130:	460f      	mov	r7, r1
 8006132:	f8dd 8020 	ldr.w	r8, [sp, #32]
    command_ = field_byte.get_value(packet, last_read_byte);
 8006136:	f7fd fae5 	bl	8003704 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
    ++last_read_byte;
 800613a:	69a3      	ldr	r3, [r4, #24]
    command_ = field_byte.get_value(packet, last_read_byte);
 800613c:	b2c0      	uxtb	r0, r0
    ++last_read_byte;
 800613e:	3301      	adds	r3, #1
    if (!(command_ < SYSTEM_COMMAND_DATA)) {
 8006140:	2807      	cmp	r0, #7
    command_ = field_byte.get_value(packet, last_read_byte);
 8006142:	7720      	strb	r0, [r4, #28]
    ++last_read_byte;
 8006144:	61a3      	str	r3, [r4, #24]
    if (!(command_ < SYSTEM_COMMAND_DATA)) {
 8006146:	d904      	bls.n	8006152 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x32>
        command_ = 0xFF;
 8006148:	23ff      	movs	r3, #255	; 0xff
        return 2;
 800614a:	2002      	movs	r0, #2
        command_ = 0xFF;
 800614c:	7723      	strb	r3, [r4, #28]
    for (int i = 0; i < _len; ++i) {
        data[i] = field_byte.get_value(packet, last_read_byte);
        ++last_read_byte;
    }
    return 0;
}
 800614e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    *com = command_;
 8006152:	7030      	strb	r0, [r6, #0]
    if (system_com_data[command_] != 0xFF) {
 8006154:	7f23      	ldrb	r3, [r4, #28]
 8006156:	4a22      	ldr	r2, [pc, #136]	; (80061e0 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xc0>)
 8006158:	5cd6      	ldrb	r6, [r2, r3]
 800615a:	2eff      	cmp	r6, #255	; 0xff
 800615c:	d011      	beq.n	8006182 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x62>
        *len = _len;
 800615e:	f888 6000 	strb.w	r6, [r8]
        data[i] = field_byte.get_value(packet, last_read_byte);
 8006162:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80061dc <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xbc>
 8006166:	442e      	add	r6, r5
    for (int i = 0; i < _len; ++i) {
 8006168:	42b5      	cmp	r5, r6
 800616a:	d034      	beq.n	80061d6 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xb6>
        data[i] = field_byte.get_value(packet, last_read_byte);
 800616c:	4639      	mov	r1, r7
 800616e:	4640      	mov	r0, r8
 8006170:	7e22      	ldrb	r2, [r4, #24]
 8006172:	f7fd fac7 	bl	8003704 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8006176:	f805 0b01 	strb.w	r0, [r5], #1
        ++last_read_byte;
 800617a:	69a3      	ldr	r3, [r4, #24]
 800617c:	3301      	adds	r3, #1
 800617e:	61a3      	str	r3, [r4, #24]
    for (int i = 0; i < _len; ++i) {
 8006180:	e7f2      	b.n	8006168 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x48>
        switch (command_)
 8006182:	bb33      	cbnz	r3, 80061d2 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xb2>
 8006184:	1e6e      	subs	r6, r5, #1
 8006186:	f105 090b 	add.w	r9, r5, #11
                data[i] = field_byte.get_value(packet, last_read_byte);
 800618a:	7e22      	ldrb	r2, [r4, #24]
 800618c:	4639      	mov	r1, r7
 800618e:	4813      	ldr	r0, [pc, #76]	; (80061dc <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xbc>)
 8006190:	f7fd fab8 	bl	8003704 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8006194:	f806 0f01 	strb.w	r0, [r6, #1]!
                ++last_read_byte;
 8006198:	69a2      	ldr	r2, [r4, #24]
            for (int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i) {
 800619a:	454e      	cmp	r6, r9
                ++last_read_byte;
 800619c:	f102 0201 	add.w	r2, r2, #1
 80061a0:	61a2      	str	r2, [r4, #24]
            for (int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i) {
 80061a2:	d1f2      	bne.n	800618a <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x6a>
            data[0] = field_byte.get_value(packet, last_read_byte);
 80061a4:	4639      	mov	r1, r7
 80061a6:	b2d2      	uxtb	r2, r2
 80061a8:	480c      	ldr	r0, [pc, #48]	; (80061dc <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xbc>)
 80061aa:	f7fd faab 	bl	8003704 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 80061ae:	7328      	strb	r0, [r5, #12]
            ++last_read_byte;
 80061b0:	69a3      	ldr	r3, [r4, #24]
            data[0] = field_byte.get_value(packet, last_read_byte);
 80061b2:	4639      	mov	r1, r7
            ++last_read_byte;
 80061b4:	3301      	adds	r3, #1
 80061b6:	61a3      	str	r3, [r4, #24]
            *len = _len = data[0];
 80061b8:	7b2e      	ldrb	r6, [r5, #12]
            data[0] = field_byte.get_value(packet, last_read_byte);
 80061ba:	4808      	ldr	r0, [pc, #32]	; (80061dc <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xbc>)
            *len = _len = data[0];
 80061bc:	f888 6000 	strb.w	r6, [r8]
            data[0] = field_byte.get_value(packet, last_read_byte);
 80061c0:	7e22      	ldrb	r2, [r4, #24]
 80061c2:	f7fd fa9f 	bl	8003704 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 80061c6:	7368      	strb	r0, [r5, #13]
            ++last_read_byte;
 80061c8:	69a3      	ldr	r3, [r4, #24]
            data = data + 1;
 80061ca:	350e      	adds	r5, #14
            ++last_read_byte;
 80061cc:	3301      	adds	r3, #1
 80061ce:	61a3      	str	r3, [r4, #24]
            break;
 80061d0:	e7c7      	b.n	8006162 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x42>
            return 4;
 80061d2:	2004      	movs	r0, #4
 80061d4:	e7bb      	b.n	800614e <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x2e>
    return 0;
 80061d6:	2000      	movs	r0, #0
 80061d8:	e7b9      	b.n	800614e <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x2e>
 80061da:	bf00      	nop
 80061dc:	200020fc 	.word	0x200020fc
 80061e0:	0800b2b0 	.word	0x0800b2b0

080061e4 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh>:
    }
    size_data += _len;
    last_read_byte += _len;
    return 0;
}
uint8_t Packet_System::get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data) {
 80061e4:	b570      	push	{r4, r5, r6, lr}
 80061e6:	4615      	mov	r5, r2
    last_read_byte = PACKET_HEADER_SIZE;
 80061e8:	2209      	movs	r2, #9
uint8_t Packet_System::get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data) {
 80061ea:	4604      	mov	r4, r0
    last_read_byte = PACKET_HEADER_SIZE;
 80061ec:	6182      	str	r2, [r0, #24]
    // комманда
    command_ = field_byte.get_value(packet, last_read_byte);
 80061ee:	4819      	ldr	r0, [pc, #100]	; (8006254 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x70>)
uint8_t Packet_System::get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data) {
 80061f0:	460e      	mov	r6, r1
    command_ = field_byte.get_value(packet, last_read_byte);
 80061f2:	f7fd fa87 	bl	8003704 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
    ++last_read_byte;
 80061f6:	69a3      	ldr	r3, [r4, #24]
    command_ = field_byte.get_value(packet, last_read_byte);
 80061f8:	b2c0      	uxtb	r0, r0
    ++last_read_byte;
 80061fa:	1c5a      	adds	r2, r3, #1
    if (!(command_ < SYSTEM_COMMAND_DATA)) {
 80061fc:	2807      	cmp	r0, #7
    command_ = field_byte.get_value(packet, last_read_byte);
 80061fe:	7720      	strb	r0, [r4, #28]
    ++last_read_byte;
 8006200:	61a2      	str	r2, [r4, #24]
    if (!(command_ < SYSTEM_COMMAND_DATA)) {
 8006202:	d903      	bls.n	800620c <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x28>
        command_ = 0xFF;
 8006204:	23ff      	movs	r3, #255	; 0xff
        return 2;
 8006206:	2002      	movs	r0, #2
        command_ = 0xFF;
 8006208:	7723      	strb	r3, [r4, #28]
            return 4;
        }
    }
    last_read_byte += size_data;
    return 0;
}
 800620a:	bd70      	pop	{r4, r5, r6, pc}
    if (system_com_data[command_] != 0xFF) {
 800620c:	4a12      	ldr	r2, [pc, #72]	; (8006258 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x74>)
 800620e:	5c12      	ldrb	r2, [r2, r0]
 8006210:	2aff      	cmp	r2, #255	; 0xff
 8006212:	d006      	beq.n	8006222 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x3e>
        size_data = system_com_data[command_];
 8006214:	702a      	strb	r2, [r5, #0]
    last_read_byte += size_data;
 8006216:	782a      	ldrb	r2, [r5, #0]
 8006218:	69a3      	ldr	r3, [r4, #24]
    return 0;
 800621a:	2000      	movs	r0, #0
    last_read_byte += size_data;
 800621c:	4413      	add	r3, r2
 800621e:	61a3      	str	r3, [r4, #24]
    return 0;
 8006220:	e7f3      	b.n	800620a <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x26>
        switch (command_)
 8006222:	b9a8      	cbnz	r0, 8006250 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x6c>
            last_read_byte += AMT_BYTES_SYSTEM_ID; // смещение на ID
 8006224:	330d      	adds	r3, #13
 8006226:	61a3      	str	r3, [r4, #24]
            size_data = AMT_BYTES_SYSTEM_ID; // смещение на ID
 8006228:	230c      	movs	r3, #12
 800622a:	702b      	strb	r3, [r5, #0]
            size_data += field_byte.get_value(packet, last_read_byte);
 800622c:	4631      	mov	r1, r6
 800622e:	7e22      	ldrb	r2, [r4, #24]
 8006230:	4808      	ldr	r0, [pc, #32]	; (8006254 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x70>)
 8006232:	f7fd fa67 	bl	8003704 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8006236:	782b      	ldrb	r3, [r5, #0]
 8006238:	4403      	add	r3, r0
 800623a:	702b      	strb	r3, [r5, #0]
            last_read_byte += 2; // смещение на length и type
 800623c:	69a3      	ldr	r3, [r4, #24]
 800623e:	3302      	adds	r3, #2
 8006240:	61a3      	str	r3, [r4, #24]
            size_data += 2; // смещение на length и type
 8006242:	782b      	ldrb	r3, [r5, #0]
 8006244:	3302      	adds	r3, #2
 8006246:	702b      	strb	r3, [r5, #0]
            ++last_read_byte;
 8006248:	69a3      	ldr	r3, [r4, #24]
 800624a:	3301      	adds	r3, #1
 800624c:	61a3      	str	r3, [r4, #24]
            break;
 800624e:	e7e2      	b.n	8006216 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x32>
            return 4;
 8006250:	2004      	movs	r0, #4
 8006252:	e7da      	b.n	800620a <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x26>
 8006254:	200020fc 	.word	0x200020fc
 8006258:	0800b2b0 	.word	0x0800b2b0

0800625c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH>:
const uint16_t LORA_ADDRESS_BRANCH = 24 - LORA_ADDRESS_GROUP;

const Register Hendler[11] = {Register(0, 8, 0), Register(1, 1, 7), Register(1, 7, 0), Register(2, 8, 0),
                              Register(3, 8, 0), Register(4, 1, 7), Register(4, 7, 0), Register(5, 8, 0),
                              Register(6, 8, 0),
                              Register(7, 8, 0), Register(8, 8, 0)};
 800625c:	2300      	movs	r3, #0
}
 800625e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006262:	4edc      	ldr	r6, [pc, #880]	; (80065d4 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x378>)
 8006264:	b087      	sub	sp, #28
 8006266:	4619      	mov	r1, r3
 8006268:	2208      	movs	r2, #8
 800626a:	4630      	mov	r0, r6
 800626c:	f7fd f91e 	bl	80034ac <_ZN8RegisterC1Ethh>
 8006270:	2201      	movs	r2, #1
 8006272:	f106 0b10 	add.w	fp, r6, #16
 8006276:	4611      	mov	r1, r2
 8006278:	2307      	movs	r3, #7
 800627a:	f106 0008 	add.w	r0, r6, #8
 800627e:	f7fd f915 	bl	80034ac <_ZN8RegisterC1Ethh>
 8006282:	2300      	movs	r3, #0
 8006284:	2207      	movs	r2, #7
 8006286:	2101      	movs	r1, #1
 8006288:	4658      	mov	r0, fp
 800628a:	f7fd f90f 	bl	80034ac <_ZN8RegisterC1Ethh>
 800628e:	2300      	movs	r3, #0
 8006290:	2208      	movs	r2, #8
 8006292:	2102      	movs	r1, #2
 8006294:	f106 0018 	add.w	r0, r6, #24
 8006298:	f7fd f908 	bl	80034ac <_ZN8RegisterC1Ethh>
 800629c:	2300      	movs	r3, #0
 800629e:	2208      	movs	r2, #8
 80062a0:	2103      	movs	r1, #3
 80062a2:	f106 0020 	add.w	r0, r6, #32
 80062a6:	f7fd f901 	bl	80034ac <_ZN8RegisterC1Ethh>
 80062aa:	f106 0930 	add.w	r9, r6, #48	; 0x30
 80062ae:	2307      	movs	r3, #7
 80062b0:	2201      	movs	r2, #1
 80062b2:	2104      	movs	r1, #4
 80062b4:	f106 0028 	add.w	r0, r6, #40	; 0x28
 80062b8:	f7fd f8f8 	bl	80034ac <_ZN8RegisterC1Ethh>
 80062bc:	2300      	movs	r3, #0
 80062be:	2207      	movs	r2, #7
 80062c0:	2104      	movs	r1, #4
 80062c2:	4648      	mov	r0, r9
 80062c4:	f7fd f8f2 	bl	80034ac <_ZN8RegisterC1Ethh>
 80062c8:	f106 0840 	add.w	r8, r6, #64	; 0x40
 80062cc:	2300      	movs	r3, #0
 80062ce:	2208      	movs	r2, #8
 80062d0:	2105      	movs	r1, #5
 80062d2:	f106 0038 	add.w	r0, r6, #56	; 0x38
 80062d6:	f7fd f8e9 	bl	80034ac <_ZN8RegisterC1Ethh>
 80062da:	f106 0748 	add.w	r7, r6, #72	; 0x48
 80062de:	2300      	movs	r3, #0
 80062e0:	2208      	movs	r2, #8
 80062e2:	2106      	movs	r1, #6
 80062e4:	4640      	mov	r0, r8
 80062e6:	f7fd f8e1 	bl	80034ac <_ZN8RegisterC1Ethh>
 80062ea:	2300      	movs	r3, #0
 80062ec:	2208      	movs	r2, #8
 80062ee:	2107      	movs	r1, #7
 80062f0:	4638      	mov	r0, r7
 80062f2:	f7fd f8db 	bl	80034ac <_ZN8RegisterC1Ethh>
 80062f6:	2208      	movs	r2, #8

const Address_field field_dest_adr_group(&Hendler[0], 2, true),  // Destination Address group (адресс группы устройства назначения)
 80062f8:	2400      	movs	r4, #0
 80062fa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80062fe:	f04f 0a77 	mov.w	sl, #119	; 0x77
                              Register(7, 8, 0), Register(8, 8, 0)};
 8006302:	4611      	mov	r1, r2
 8006304:	2300      	movs	r3, #0
 8006306:	f106 0050 	add.w	r0, r6, #80	; 0x50
 800630a:	f7fd f8cf 	bl	80034ac <_ZN8RegisterC1Ethh>
const Address_field field_dest_adr_group(&Hendler[0], 2, true),  // Destination Address group (адресс группы устройства назначения)
 800630e:	4631      	mov	r1, r6
 8006310:	2301      	movs	r3, #1
 8006312:	2202      	movs	r2, #2
 8006314:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8006318:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800631c:	f8cd a000 	str.w	sl, [sp]
 8006320:	48ad      	ldr	r0, [pc, #692]	; (80065d8 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x37c>)
 8006322:	f7fd f94d 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_dest_adr_branch(&Hendler[2], 2, true), // Destination Address branch (адресс ветви устройства назначения)
 8006326:	4659      	mov	r1, fp
 8006328:	2301      	movs	r3, #1
 800632a:	2202      	movs	r2, #2
 800632c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8006330:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8006334:	f8cd a000 	str.w	sl, [sp]
 8006338:	48a8      	ldr	r0, [pc, #672]	; (80065dc <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x380>)
 800633a:	f7fd f941 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_sour_adr_group(&Hendler[4], 2, true),  // Source Address group (адресс группы отправляющего устройства)
 800633e:	f106 0120 	add.w	r1, r6, #32
 8006342:	2301      	movs	r3, #1
 8006344:	2202      	movs	r2, #2
 8006346:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800634a:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800634e:	f8cd a000 	str.w	sl, [sp]
 8006352:	48a3      	ldr	r0, [pc, #652]	; (80065e0 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x384>)
 8006354:	f7fd f934 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_sour_adr_branch(&Hendler[6], 2, true), // Source Address branch (адресс ветви отправляющего устройства)
 8006358:	4649      	mov	r1, r9
 800635a:	2301      	movs	r3, #1
 800635c:	2202      	movs	r2, #2
 800635e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8006362:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8006366:	f8cd a000 	str.w	sl, [sp]
 800636a:	489e      	ldr	r0, [pc, #632]	; (80065e4 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x388>)
 800636c:	f7fd f928 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_type(&Hendler[8], 1, true),   // Packet Type (тип пакетп)
 8006370:	2301      	movs	r3, #1
 8006372:	4641      	mov	r1, r8
 8006374:	461a      	mov	r2, r3
                                               &field_sour_adr_group, &field_sour_adr_branch,
                                               &field_type, &field_number};


// Типы данных
const Register register_PWM[2]   = {Register(0, 4, 0), Register(1, 8, 0)},
 8006376:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8006630 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3d4>
                    field_type(&Hendler[8], 1, true),   // Packet Type (тип пакетп)
 800637a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800637e:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8006382:	f8cd a000 	str.w	sl, [sp]
 8006386:	4898      	ldr	r0, [pc, #608]	; (80065e8 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x38c>)
 8006388:	f7fd f91a 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_number(&Hendler[9], 2, true); // Packet Number (номер пакета)
 800638c:	4639      	mov	r1, r7
 800638e:	2301      	movs	r3, #1
 8006390:	2202      	movs	r2, #2
 8006392:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8006396:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800639a:	f8cd a000 	str.w	sl, [sp]
 800639e:	4893      	ldr	r0, [pc, #588]	; (80065ec <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x390>)
 80063a0:	f7fd f90e 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
const Register register_PWM[2]   = {Register(0, 4, 0), Register(1, 8, 0)},
 80063a4:	4623      	mov	r3, r4
 80063a6:	4621      	mov	r1, r4
 80063a8:	2204      	movs	r2, #4
 80063aa:	4640      	mov	r0, r8
 80063ac:	f7fd f87e 	bl	80034ac <_ZN8RegisterC1Ethh>
 80063b0:	2208      	movs	r2, #8
               register_byte[1]  = {Register(0, 8, 0)},
               register_float[4] = {Register(0, 8, 0), Register(1, 8, 0), Register(2, 8, 0), Register(3, 8, 0)},
 80063b2:	4f8f      	ldr	r7, [pc, #572]	; (80065f0 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x394>)
const Register register_PWM[2]   = {Register(0, 4, 0), Register(1, 8, 0)},
 80063b4:	4623      	mov	r3, r4
 80063b6:	eb08 0002 	add.w	r0, r8, r2
 80063ba:	2101      	movs	r1, #1
 80063bc:	f7fd f876 	bl	80034ac <_ZN8RegisterC1Ethh>
               register_byte[1]  = {Register(0, 8, 0)},
 80063c0:	4623      	mov	r3, r4
 80063c2:	4621      	mov	r1, r4
 80063c4:	2208      	movs	r2, #8
 80063c6:	488b      	ldr	r0, [pc, #556]	; (80065f4 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x398>)
 80063c8:	f7fd f870 	bl	80034ac <_ZN8RegisterC1Ethh>
               register_float[4] = {Register(0, 8, 0), Register(1, 8, 0), Register(2, 8, 0), Register(3, 8, 0)},
 80063cc:	4623      	mov	r3, r4
 80063ce:	4621      	mov	r1, r4
 80063d0:	2208      	movs	r2, #8
 80063d2:	4638      	mov	r0, r7
 80063d4:	f7fd f86a 	bl	80034ac <_ZN8RegisterC1Ethh>
 80063d8:	2208      	movs	r2, #8
 80063da:	4623      	mov	r3, r4
 80063dc:	18b8      	adds	r0, r7, r2
 80063de:	2101      	movs	r1, #1
               register_bit[8]   = {Register(0, 1, 0), Register(0, 1, 1), Register(0, 1, 2), Register(0, 1, 3),
                                    Register(0, 1, 4), Register(0, 1, 5), Register(0, 1, 6), Register(0, 1, 7)};
 80063e0:	4e85      	ldr	r6, [pc, #532]	; (80065f8 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x39c>)
               register_float[4] = {Register(0, 8, 0), Register(1, 8, 0), Register(2, 8, 0), Register(3, 8, 0)},
 80063e2:	f7fd f863 	bl	80034ac <_ZN8RegisterC1Ethh>
 80063e6:	4623      	mov	r3, r4
 80063e8:	2208      	movs	r2, #8
 80063ea:	2102      	movs	r1, #2
 80063ec:	f107 0010 	add.w	r0, r7, #16
 80063f0:	f7fd f85c 	bl	80034ac <_ZN8RegisterC1Ethh>
 80063f4:	4623      	mov	r3, r4
 80063f6:	2208      	movs	r2, #8
 80063f8:	2103      	movs	r1, #3
 80063fa:	f107 0018 	add.w	r0, r7, #24
 80063fe:	f7fd f855 	bl	80034ac <_ZN8RegisterC1Ethh>
                                    Register(0, 1, 4), Register(0, 1, 5), Register(0, 1, 6), Register(0, 1, 7)};
 8006402:	4623      	mov	r3, r4
 8006404:	4621      	mov	r1, r4
 8006406:	2201      	movs	r2, #1
 8006408:	4630      	mov	r0, r6
 800640a:	f7fd f84f 	bl	80034ac <_ZN8RegisterC1Ethh>
 800640e:	2301      	movs	r3, #1
 8006410:	4621      	mov	r1, r4
 8006412:	461a      	mov	r2, r3
 8006414:	f106 0008 	add.w	r0, r6, #8
 8006418:	f7fd f848 	bl	80034ac <_ZN8RegisterC1Ethh>
 800641c:	4621      	mov	r1, r4
 800641e:	2302      	movs	r3, #2
 8006420:	2201      	movs	r2, #1
 8006422:	f106 0010 	add.w	r0, r6, #16
 8006426:	f7fd f841 	bl	80034ac <_ZN8RegisterC1Ethh>
 800642a:	4621      	mov	r1, r4
 800642c:	2303      	movs	r3, #3
 800642e:	2201      	movs	r2, #1
 8006430:	f106 0018 	add.w	r0, r6, #24
 8006434:	f7fd f83a 	bl	80034ac <_ZN8RegisterC1Ethh>
 8006438:	4621      	mov	r1, r4
 800643a:	2304      	movs	r3, #4
 800643c:	2201      	movs	r2, #1
 800643e:	f106 0020 	add.w	r0, r6, #32
 8006442:	f7fd f833 	bl	80034ac <_ZN8RegisterC1Ethh>
 8006446:	f106 0b30 	add.w	fp, r6, #48	; 0x30
 800644a:	4621      	mov	r1, r4
 800644c:	2305      	movs	r3, #5
 800644e:	2201      	movs	r2, #1
 8006450:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8006454:	f7fd f82a 	bl	80034ac <_ZN8RegisterC1Ethh>
 8006458:	f106 0938 	add.w	r9, r6, #56	; 0x38
 800645c:	4621      	mov	r1, r4
 800645e:	2306      	movs	r3, #6
 8006460:	2201      	movs	r2, #1
 8006462:	4658      	mov	r0, fp
 8006464:	f7fd f822 	bl	80034ac <_ZN8RegisterC1Ethh>
 8006468:	4621      	mov	r1, r4
 800646a:	2307      	movs	r3, #7
 800646c:	2201      	movs	r2, #1
 800646e:	4648      	mov	r0, r9
 8006470:	f7fd f81c 	bl	80034ac <_ZN8RegisterC1Ethh>

const Address_field field_PWM(&register_PWM[0], 2, true),
 8006474:	4641      	mov	r1, r8
 8006476:	2301      	movs	r3, #1
 8006478:	2202      	movs	r2, #2
 800647a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800647e:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8006482:	f8cd a000 	str.w	sl, [sp]
 8006486:	485d      	ldr	r0, [pc, #372]	; (80065fc <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3a0>)
 8006488:	f7fd f89a 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_byte(&register_byte[0]),
 800648c:	4623      	mov	r3, r4
 800648e:	2201      	movs	r2, #1
 8006490:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8006494:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8006498:	4956      	ldr	r1, [pc, #344]	; (80065f4 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x398>)
 800649a:	f8cd a000 	str.w	sl, [sp]
 800649e:	4858      	ldr	r0, [pc, #352]	; (8006600 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3a4>)
 80064a0:	f7fd f88e 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_float(&register_float[0], 4, false),
 80064a4:	4639      	mov	r1, r7
                    field_bit[8] = {Address_field(&register_bit[0]), Address_field(&register_bit[1]),
                                    Address_field(&register_bit[2]), Address_field(&register_bit[3]),
                                    Address_field(&register_bit[4]), Address_field(&register_bit[5]),
                                    Address_field(&register_bit[6]), Address_field(&register_bit[7])};
 80064a6:	4f57      	ldr	r7, [pc, #348]	; (8006604 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3a8>)
                    field_float(&register_float[0], 4, false),
 80064a8:	4623      	mov	r3, r4
 80064aa:	2204      	movs	r2, #4
 80064ac:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80064b0:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80064b4:	f8cd a000 	str.w	sl, [sp]
 80064b8:	4853      	ldr	r0, [pc, #332]	; (8006608 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3ac>)
 80064ba:	f7fd f881 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                                    Address_field(&register_bit[6]), Address_field(&register_bit[7])};
 80064be:	4623      	mov	r3, r4
 80064c0:	4631      	mov	r1, r6
 80064c2:	2201      	movs	r2, #1
 80064c4:	4638      	mov	r0, r7
 80064c6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80064ca:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80064ce:	f8cd a000 	str.w	sl, [sp]
 80064d2:	f7fd f875 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 80064d6:	4623      	mov	r3, r4
 80064d8:	f106 0108 	add.w	r1, r6, #8
 80064dc:	2201      	movs	r2, #1
 80064de:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80064e2:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80064e6:	f8cd a000 	str.w	sl, [sp]
 80064ea:	f107 001c 	add.w	r0, r7, #28
 80064ee:	f7fd f867 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 80064f2:	4623      	mov	r3, r4
 80064f4:	f106 0110 	add.w	r1, r6, #16
 80064f8:	2201      	movs	r2, #1
 80064fa:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80064fe:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8006502:	f8cd a000 	str.w	sl, [sp]
 8006506:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800650a:	f7fd f859 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 800650e:	4623      	mov	r3, r4
 8006510:	f106 0118 	add.w	r1, r6, #24
 8006514:	2201      	movs	r2, #1
 8006516:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800651a:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800651e:	f8cd a000 	str.w	sl, [sp]
 8006522:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8006526:	f7fd f84b 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 800652a:	4623      	mov	r3, r4
 800652c:	f106 0120 	add.w	r1, r6, #32
 8006530:	2201      	movs	r2, #1
 8006532:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8006536:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800653a:	f8cd a000 	str.w	sl, [sp]
 800653e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8006542:	f7fd f83d 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 8006546:	4623      	mov	r3, r4
 8006548:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800654c:	2201      	movs	r2, #1
 800654e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8006552:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8006556:	f8cd a000 	str.w	sl, [sp]
 800655a:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800655e:	f7fd f82f 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 8006562:	4623      	mov	r3, r4
 8006564:	4659      	mov	r1, fp
 8006566:	2201      	movs	r2, #1
 8006568:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800656c:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8006570:	f8cd a000 	str.w	sl, [sp]
 8006574:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8006578:	f7fd f822 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 800657c:	4649      	mov	r1, r9
 800657e:	4623      	mov	r3, r4
 8006580:	2201      	movs	r2, #1
 8006582:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8006586:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800658a:	f8cd a000 	str.w	sl, [sp]
 800658e:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8006592:	f7fd f815 	bl	80035c0 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Packet_analyzer packet_analyzer;
 8006596:	481d      	ldr	r0, [pc, #116]	; (800660c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3b0>)
 8006598:	f7ff fa3c 	bl	8005a14 <_ZN15Packet_analyzerC1Ev>
    virtual bool set_setting(uint8_t setting=0);
    uint8_t get_setting();
};


class Packet_Connection: public Packet_analyzer {
 800659c:	4b1c      	ldr	r3, [pc, #112]	; (8006610 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3b4>)
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff fa38 	bl	8005a14 <_ZN15Packet_analyzerC1Ev>
 80065a4:	4a1b      	ldr	r2, [pc, #108]	; (8006614 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3b8>)
 80065a6:	771c      	strb	r4, [r3, #28]
 80065a8:	601a      	str	r2, [r3, #0]
    uint8_t get_size_by_data(const uint8_t *com, const uint8_t *len, uint8_t &size_data);
    // Узнать объём поля данных по содержимому пакета
    uint8_t get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data);
};

class Packet_Sensor: public Packet_analyzer {
 80065aa:	4b1b      	ldr	r3, [pc, #108]	; (8006618 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3bc>)
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7ff fa31 	bl	8005a14 <_ZN15Packet_analyzerC1Ev>
 80065b2:	4a1a      	ldr	r2, [pc, #104]	; (800661c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3c0>)
 80065b4:	601a      	str	r2, [r3, #0]
    uint8_t get_size_by_data(const uint8_t *amt, const uint8_t *param, uint8_t &size_data);
    // узнать объём поля данных по содержимому пакета
    uint8_t get_size_by_packet(const LoRa_packet& packet, uint8_t *amt, uint8_t *param, uint8_t &size_data);
};

class Packet_Device: public Packet_analyzer {
 80065b6:	4b1a      	ldr	r3, [pc, #104]	; (8006620 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3c4>)
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7ff fa2b 	bl	8005a14 <_ZN15Packet_analyzerC1Ev>
 80065be:	4a19      	ldr	r2, [pc, #100]	; (8006624 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3c8>)
 80065c0:	601a      	str	r2, [r3, #0]
    uint8_t get_size_by_data(const uint8_t *obj, const uint8_t *com, uint8_t &size_data);
    // узнать объём поля данных по содержимому пакета
    uint8_t get_size_by_packet(const LoRa_packet& packet, uint8_t *obj, uint8_t &size_data);
};

class Packet_System: public Packet_analyzer {
 80065c2:	4b19      	ldr	r3, [pc, #100]	; (8006628 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3cc>)
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7ff fa25 	bl	8005a14 <_ZN15Packet_analyzerC1Ev>
 80065ca:	4a18      	ldr	r2, [pc, #96]	; (800662c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3d0>)
 80065cc:	601a      	str	r2, [r3, #0]
}
 80065ce:	b007      	add	sp, #28
 80065d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d4:	20002254 	.word	0x20002254
 80065d8:	200021e4 	.word	0x200021e4
 80065dc:	2000221c 	.word	0x2000221c
 80065e0:	20002200 	.word	0x20002200
 80065e4:	20002238 	.word	0x20002238
 80065e8:	20002118 	.word	0x20002118
 80065ec:	20002150 	.word	0x20002150
 80065f0:	200021c4 	.word	0x200021c4
 80065f4:	200021bc 	.word	0x200021bc
 80065f8:	2000217c 	.word	0x2000217c
 80065fc:	200022ac 	.word	0x200022ac
 8006600:	200020fc 	.word	0x200020fc
 8006604:	200022c8 	.word	0x200022c8
 8006608:	20002134 	.word	0x20002134
 800660c:	200023a8 	.word	0x200023a8
 8006610:	200023c4 	.word	0x200023c4
 8006614:	0800b300 	.word	0x0800b300
 8006618:	20002404 	.word	0x20002404
 800661c:	0800b2e8 	.word	0x0800b2e8
 8006620:	200023e4 	.word	0x200023e4
 8006624:	0800b2dc 	.word	0x0800b2dc
 8006628:	20002424 	.word	0x20002424
 800662c:	0800b2f4 	.word	0x0800b2f4
 8006630:	2000216c 	.word	0x2000216c

08006634 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8006634:	b148      	cbz	r0, 800664a <null_ptr_check+0x16>
 8006636:	6843      	ldr	r3, [r0, #4]
 8006638:	b13b      	cbz	r3, 800664a <null_ptr_check+0x16>
 800663a:	6883      	ldr	r3, [r0, #8]
 800663c:	b12b      	cbz	r3, 800664a <null_ptr_check+0x16>
 800663e:	68c0      	ldr	r0, [r0, #12]
 8006640:	fab0 f080 	clz	r0, r0
 8006644:	0940      	lsrs	r0, r0, #5
 8006646:	4240      	negs	r0, r0
 8006648:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 800664a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		/* Device structure is fine */
		rslt = BME280_OK;
	}

	return rslt;
}
 800664e:	4770      	bx	lr

08006650 <bme280_get_regs>:
{
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	4605      	mov	r5, r0
	rslt = null_ptr_check(dev);
 8006654:	4618      	mov	r0, r3
{
 8006656:	461c      	mov	r4, r3
	rslt = null_ptr_check(dev);
 8006658:	f7ff ffec 	bl	8006634 <null_ptr_check>
	if (rslt == BME280_OK) {
 800665c:	b970      	cbnz	r0, 800667c <bme280_get_regs+0x2c>
		if (dev->intf != BME280_I2C_INTF)
 800665e:	78a3      	ldrb	r3, [r4, #2]
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8006660:	6866      	ldr	r6, [r4, #4]
		if (dev->intf != BME280_I2C_INTF)
 8006662:	2b01      	cmp	r3, #1
			reg_addr = reg_addr | 0x80;
 8006664:	bf18      	it	ne
 8006666:	f045 0580 	orrne.w	r5, r5, #128	; 0x80
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800666a:	4613      	mov	r3, r2
 800666c:	7860      	ldrb	r0, [r4, #1]
 800666e:	460a      	mov	r2, r1
 8006670:	4629      	mov	r1, r5
 8006672:	47b0      	blx	r6
			rslt = BME280_E_COMM_FAIL;
 8006674:	2800      	cmp	r0, #0
 8006676:	bf18      	it	ne
 8006678:	f06f 0003 	mvnne.w	r0, #3
}
 800667c:	bd70      	pop	{r4, r5, r6, pc}

0800667e <bme280_set_regs>:
{
 800667e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006680:	2a0a      	cmp	r2, #10
 8006682:	4605      	mov	r5, r0
 8006684:	b087      	sub	sp, #28
	rslt = null_ptr_check(dev);
 8006686:	4618      	mov	r0, r3
 8006688:	4614      	mov	r4, r2
{
 800668a:	461e      	mov	r6, r3
 800668c:	bf28      	it	cs
 800668e:	240a      	movcs	r4, #10
	rslt = null_ptr_check(dev);
 8006690:	f7ff ffd0 	bl	8006634 <null_ptr_check>
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8006694:	bb80      	cbnz	r0, 80066f8 <bme280_set_regs+0x7a>
 8006696:	b37d      	cbz	r5, 80066f8 <bme280_set_regs+0x7a>
 8006698:	b371      	cbz	r1, 80066f8 <bme280_set_regs+0x7a>
		if (len != 0) {
 800669a:	b382      	cbz	r2, 80066fe <bme280_set_regs+0x80>
			temp_buff[0] = reg_data[0];
 800669c:	780b      	ldrb	r3, [r1, #0]
 800669e:	f88d 3004 	strb.w	r3, [sp, #4]
			if (dev->intf != BME280_I2C_INTF) {
 80066a2:	78b3      	ldrb	r3, [r6, #2]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d003      	beq.n	80066b0 <bme280_set_regs+0x32>
 80066a8:	462b      	mov	r3, r5
 80066aa:	1967      	adds	r7, r4, r5
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80066ac:	42bb      	cmp	r3, r7
 80066ae:	d115      	bne.n	80066dc <bme280_set_regs+0x5e>
			if (len > 1) {
 80066b0:	2a01      	cmp	r2, #1
 80066b2:	d91f      	bls.n	80066f4 <bme280_set_regs+0x76>
 80066b4:	2300      	movs	r3, #0
 80066b6:	aa01      	add	r2, sp, #4
	for (index = 1; index < len; index++) {
 80066b8:	3301      	adds	r3, #1
 80066ba:	b2d8      	uxtb	r0, r3
 80066bc:	4284      	cmp	r4, r0
 80066be:	d813      	bhi.n	80066e8 <bme280_set_regs+0x6a>
				temp_len = ((len * 2) - 1);
 80066c0:	0064      	lsls	r4, r4, #1
 80066c2:	3c01      	subs	r4, #1
 80066c4:	b2a3      	uxth	r3, r4
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80066c6:	68b4      	ldr	r4, [r6, #8]
 80066c8:	7829      	ldrb	r1, [r5, #0]
 80066ca:	7870      	ldrb	r0, [r6, #1]
 80066cc:	aa01      	add	r2, sp, #4
 80066ce:	47a0      	blx	r4
				rslt = BME280_E_COMM_FAIL;
 80066d0:	2800      	cmp	r0, #0
 80066d2:	bf18      	it	ne
 80066d4:	f06f 0003 	mvnne.w	r0, #3
}
 80066d8:	b007      	add	sp, #28
 80066da:	bdf0      	pop	{r4, r5, r6, r7, pc}
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80066dc:	7818      	ldrb	r0, [r3, #0]
 80066de:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80066e2:	f803 0b01 	strb.w	r0, [r3], #1
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80066e6:	e7e1      	b.n	80066ac <bme280_set_regs+0x2e>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80066e8:	5ce8      	ldrb	r0, [r5, r3]
 80066ea:	7050      	strb	r0, [r2, #1]
		temp_buff[index * 2] = reg_data[index];
 80066ec:	5cc8      	ldrb	r0, [r1, r3]
 80066ee:	f802 0f02 	strb.w	r0, [r2, #2]!
	for (index = 1; index < len; index++) {
 80066f2:	e7e1      	b.n	80066b8 <bme280_set_regs+0x3a>
				temp_len = len;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e7e6      	b.n	80066c6 <bme280_set_regs+0x48>
		rslt = BME280_E_NULL_PTR;
 80066f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066fc:	e7ec      	b.n	80066d8 <bme280_set_regs+0x5a>
			rslt = BME280_E_INVALID_LEN;
 80066fe:	f06f 0002 	mvn.w	r0, #2
 8006702:	e7e9      	b.n	80066d8 <bme280_set_regs+0x5a>

08006704 <set_osr_humidity_settings.isra.0>:
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8006704:	23f2      	movs	r3, #242	; 0xf2
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
 8006706:	b513      	push	{r0, r1, r4, lr}
	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8006708:	f000 0007 	and.w	r0, r0, #7
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
 800670c:	460c      	mov	r4, r1
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800670e:	f88d 3007 	strb.w	r3, [sp, #7]
	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8006712:	f88d 0005 	strb.w	r0, [sp, #5]
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8006716:	460b      	mov	r3, r1
 8006718:	2201      	movs	r2, #1
 800671a:	f10d 0105 	add.w	r1, sp, #5
 800671e:	f10d 0007 	add.w	r0, sp, #7
 8006722:	f7ff ffac 	bl	800667e <bme280_set_regs>
	if (rslt == BME280_OK) {
 8006726:	b988      	cbnz	r0, 800674c <set_osr_humidity_settings.isra.0+0x48>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8006728:	20f4      	movs	r0, #244	; 0xf4
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800672a:	4623      	mov	r3, r4
 800672c:	2201      	movs	r2, #1
 800672e:	f10d 0106 	add.w	r1, sp, #6
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8006732:	f88d 0007 	strb.w	r0, [sp, #7]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8006736:	f7ff ff8b 	bl	8006650 <bme280_get_regs>
		if (rslt == BME280_OK)
 800673a:	b938      	cbnz	r0, 800674c <set_osr_humidity_settings.isra.0+0x48>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 800673c:	4623      	mov	r3, r4
 800673e:	2201      	movs	r2, #1
 8006740:	f10d 0106 	add.w	r1, sp, #6
 8006744:	f10d 0007 	add.w	r0, sp, #7
 8006748:	f7ff ff99 	bl	800667e <bme280_set_regs>
}
 800674c:	b002      	add	sp, #8
 800674e:	bd10      	pop	{r4, pc}

08006750 <set_osr_press_temp_settings>:
{
 8006750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006752:	4606      	mov	r6, r0
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8006754:	20f4      	movs	r0, #244	; 0xf4
{
 8006756:	460d      	mov	r5, r1
 8006758:	4617      	mov	r7, r2
	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800675a:	4613      	mov	r3, r2
 800675c:	f10d 0107 	add.w	r1, sp, #7
 8006760:	2201      	movs	r2, #1
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8006762:	f88d 0006 	strb.w	r0, [sp, #6]
	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8006766:	f7ff ff73 	bl	8006650 <bme280_get_regs>
	if (rslt == BME280_OK) {
 800676a:	b9f8      	cbnz	r0, 80067ac <set_osr_press_temp_settings+0x5c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 800676c:	07f2      	lsls	r2, r6, #31
 800676e:	d50a      	bpl.n	8006786 <set_osr_press_temp_settings+0x36>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8006770:	782c      	ldrb	r4, [r5, #0]
 8006772:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006776:	00a4      	lsls	r4, r4, #2
 8006778:	f004 041c 	and.w	r4, r4, #28
 800677c:	f023 031c 	bic.w	r3, r3, #28
 8006780:	431c      	orrs	r4, r3
 8006782:	f88d 4007 	strb.w	r4, [sp, #7]
		if (desired_settings & BME280_OSR_TEMP_SEL)
 8006786:	07b3      	lsls	r3, r6, #30
 8006788:	d508      	bpl.n	800679c <set_osr_press_temp_settings+0x4c>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 800678a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800678e:	786a      	ldrb	r2, [r5, #1]
 8006790:	f003 031f 	and.w	r3, r3, #31
 8006794:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8006798:	f88d 3007 	strb.w	r3, [sp, #7]
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800679c:	463b      	mov	r3, r7
 800679e:	2201      	movs	r2, #1
 80067a0:	f10d 0107 	add.w	r1, sp, #7
 80067a4:	f10d 0006 	add.w	r0, sp, #6
 80067a8:	f7ff ff69 	bl	800667e <bme280_set_regs>
}
 80067ac:	b003      	add	sp, #12
 80067ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067b0 <set_filter_standby_settings>:
{
 80067b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067b2:	4606      	mov	r6, r0
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 80067b4:	20f5      	movs	r0, #245	; 0xf5
{
 80067b6:	460d      	mov	r5, r1
 80067b8:	4617      	mov	r7, r2
	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80067ba:	4613      	mov	r3, r2
 80067bc:	f10d 0107 	add.w	r1, sp, #7
 80067c0:	2201      	movs	r2, #1
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 80067c2:	f88d 0006 	strb.w	r0, [sp, #6]
	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80067c6:	f7ff ff43 	bl	8006650 <bme280_get_regs>
	if (rslt == BME280_OK) {
 80067ca:	b9f8      	cbnz	r0, 800680c <set_filter_standby_settings+0x5c>
		if (desired_settings & BME280_FILTER_SEL)
 80067cc:	0732      	lsls	r2, r6, #28
 80067ce:	d50a      	bpl.n	80067e6 <set_filter_standby_settings+0x36>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80067d0:	78ec      	ldrb	r4, [r5, #3]
 80067d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80067d6:	00a4      	lsls	r4, r4, #2
 80067d8:	f004 041c 	and.w	r4, r4, #28
 80067dc:	f023 031c 	bic.w	r3, r3, #28
 80067e0:	431c      	orrs	r4, r3
 80067e2:	f88d 4007 	strb.w	r4, [sp, #7]
		if (desired_settings & BME280_STANDBY_SEL)
 80067e6:	06f3      	lsls	r3, r6, #27
 80067e8:	d508      	bpl.n	80067fc <set_filter_standby_settings+0x4c>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80067ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80067ee:	792a      	ldrb	r2, [r5, #4]
 80067f0:	f003 031f 	and.w	r3, r3, #31
 80067f4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80067f8:	f88d 3007 	strb.w	r3, [sp, #7]
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80067fc:	463b      	mov	r3, r7
 80067fe:	2201      	movs	r2, #1
 8006800:	f10d 0107 	add.w	r1, sp, #7
 8006804:	f10d 0006 	add.w	r0, sp, #6
 8006808:	f7ff ff39 	bl	800667e <bme280_set_regs>
}
 800680c:	b003      	add	sp, #12
 800680e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006810 <bme280_get_sensor_mode>:
{
 8006810:	b510      	push	{r4, lr}
 8006812:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
 8006814:	4608      	mov	r0, r1
 8006816:	f7ff ff0d 	bl	8006634 <null_ptr_check>
	if (rslt == BME280_OK) {
 800681a:	b948      	cbnz	r0, 8006830 <bme280_get_sensor_mode+0x20>
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 800681c:	460b      	mov	r3, r1
 800681e:	2201      	movs	r2, #1
 8006820:	4621      	mov	r1, r4
 8006822:	20f4      	movs	r0, #244	; 0xf4
 8006824:	f7ff ff14 	bl	8006650 <bme280_get_regs>
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8006828:	7823      	ldrb	r3, [r4, #0]
 800682a:	f003 0303 	and.w	r3, r3, #3
 800682e:	7023      	strb	r3, [r4, #0]
}
 8006830:	bd10      	pop	{r4, pc}

08006832 <bme280_soft_reset>:
	uint8_t reg_addr = BME280_RESET_ADDR;
 8006832:	23e0      	movs	r3, #224	; 0xe0
{
 8006834:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t reg_addr = BME280_RESET_ADDR;
 8006836:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t soft_rst_cmd = 0xB6;
 800683a:	23b6      	movs	r3, #182	; 0xb6
{
 800683c:	4605      	mov	r5, r0
	uint8_t soft_rst_cmd = 0xB6;
 800683e:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
 8006842:	f7ff fef7 	bl	8006634 <null_ptr_check>
	if (rslt == BME280_OK) {
 8006846:	4604      	mov	r4, r0
 8006848:	b958      	cbnz	r0, 8006862 <bme280_soft_reset+0x30>
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800684a:	462b      	mov	r3, r5
 800684c:	2201      	movs	r2, #1
 800684e:	f10d 0107 	add.w	r1, sp, #7
 8006852:	f10d 0006 	add.w	r0, sp, #6
 8006856:	f7ff ff12 	bl	800667e <bme280_set_regs>
		dev->delay_ms(2);
 800685a:	68eb      	ldr	r3, [r5, #12]
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800685c:	4604      	mov	r4, r0
		dev->delay_ms(2);
 800685e:	2002      	movs	r0, #2
 8006860:	4798      	blx	r3
}
 8006862:	4620      	mov	r0, r4
 8006864:	b003      	add	sp, #12
 8006866:	bd30      	pop	{r4, r5, pc}

08006868 <bme280_init>:
	uint8_t chip_id = 0;
 8006868:	2300      	movs	r3, #0
{
 800686a:	b530      	push	{r4, r5, lr}
 800686c:	b089      	sub	sp, #36	; 0x24
 800686e:	4604      	mov	r4, r0
	uint8_t chip_id = 0;
 8006870:	f88d 3003 	strb.w	r3, [sp, #3]
	rslt = null_ptr_check(dev);
 8006874:	f7ff fede 	bl	8006634 <null_ptr_check>
	if (rslt ==  BME280_OK) {
 8006878:	2800      	cmp	r0, #0
 800687a:	d156      	bne.n	800692a <bme280_init+0xc2>
 800687c:	2505      	movs	r5, #5
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 800687e:	4623      	mov	r3, r4
 8006880:	2201      	movs	r2, #1
 8006882:	20d0      	movs	r0, #208	; 0xd0
 8006884:	f10d 0103 	add.w	r1, sp, #3
 8006888:	f7ff fee2 	bl	8006650 <bme280_get_regs>
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 800688c:	2800      	cmp	r0, #0
 800688e:	d14e      	bne.n	800692e <bme280_init+0xc6>
 8006890:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006894:	2b60      	cmp	r3, #96	; 0x60
 8006896:	d14a      	bne.n	800692e <bme280_init+0xc6>
				rslt = bme280_soft_reset(dev);
 8006898:	4620      	mov	r0, r4
				dev->chip_id = chip_id;
 800689a:	7023      	strb	r3, [r4, #0]
				rslt = bme280_soft_reset(dev);
 800689c:	f7ff ffc9 	bl	8006832 <bme280_soft_reset>
				if (rslt == BME280_OK) {
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d142      	bne.n	800692a <bme280_init+0xc2>
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 80068a4:	4601      	mov	r1, r0
 80068a6:	2216      	movs	r2, #22
 80068a8:	9001      	str	r0, [sp, #4]
 80068aa:	a802      	add	r0, sp, #8
 80068ac:	f004 fbbe 	bl	800b02c <memset>
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 80068b0:	4623      	mov	r3, r4
 80068b2:	221a      	movs	r2, #26
 80068b4:	2088      	movs	r0, #136	; 0x88
 80068b6:	a901      	add	r1, sp, #4
 80068b8:	f7ff feca 	bl	8006650 <bme280_get_regs>
	if (rslt == BME280_OK) {
 80068bc:	2800      	cmp	r0, #0
 80068be:	d134      	bne.n	800692a <bme280_init+0xc2>
	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80068c0:	9b01      	ldr	r3, [sp, #4]
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80068c2:	2207      	movs	r2, #7
	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80068c4:	6123      	str	r3, [r4, #16]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80068c6:	9b02      	ldr	r3, [sp, #8]
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80068c8:	20e1      	movs	r0, #225	; 0xe1
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80068ca:	6163      	str	r3, [r4, #20]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80068cc:	9b03      	ldr	r3, [sp, #12]
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80068ce:	a901      	add	r1, sp, #4
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80068d0:	61a3      	str	r3, [r4, #24]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80068d2:	9b04      	ldr	r3, [sp, #16]
 80068d4:	61e3      	str	r3, [r4, #28]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80068d6:	9b05      	ldr	r3, [sp, #20]
 80068d8:	6223      	str	r3, [r4, #32]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 80068da:	9b06      	ldr	r3, [sp, #24]
 80068dc:	6263      	str	r3, [r4, #36]	; 0x24
	calib_data->dig_H1 = reg_data[25];
 80068de:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80068e2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80068e6:	4623      	mov	r3, r4
 80068e8:	f7ff feb2 	bl	8006650 <bme280_get_regs>
		if (rslt == BME280_OK) {
 80068ec:	b9e8      	cbnz	r0, 800692a <bme280_init+0xc2>
	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80068ee:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80068f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80068f6:	f99d 1007 	ldrsb.w	r1, [sp, #7]
	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80068fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80068fe:	8563      	strh	r3, [r4, #42]	; 0x2a
	calib_data->dig_H3 = reg_data[2];
 8006900:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006904:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8006908:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800690c:	f003 020f 	and.w	r2, r3, #15
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8006910:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8006914:	85e2      	strh	r2, [r4, #46]	; 0x2e
	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8006916:	f99d 2009 	ldrsb.w	r2, [sp, #9]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 800691a:	091b      	lsrs	r3, r3, #4
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 800691c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8006920:	8623      	strh	r3, [r4, #48]	; 0x30
	calib_data->dig_H6 = (int8_t)reg_data[6];
 8006922:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8006926:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
 800692a:	b009      	add	sp, #36	; 0x24
 800692c:	bd30      	pop	{r4, r5, pc}
			dev->delay_ms(1);
 800692e:	2001      	movs	r0, #1
 8006930:	68e3      	ldr	r3, [r4, #12]
 8006932:	3d01      	subs	r5, #1
 8006934:	4798      	blx	r3
		while (try_count) {
 8006936:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800693a:	d1a0      	bne.n	800687e <bme280_init+0x16>
			rslt = BME280_E_DEV_NOT_FOUND;
 800693c:	f06f 0001 	mvn.w	r0, #1
 8006940:	e7f3      	b.n	800692a <bme280_init+0xc2>

08006942 <put_device_to_sleep>:
{
 8006942:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8006944:	2204      	movs	r2, #4
{
 8006946:	4604      	mov	r4, r0
	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8006948:	4603      	mov	r3, r0
 800694a:	eb0d 0102 	add.w	r1, sp, r2
 800694e:	20f2      	movs	r0, #242	; 0xf2
 8006950:	f7ff fe7e 	bl	8006650 <bme280_get_regs>
	if (rslt == BME280_OK) {
 8006954:	bb58      	cbnz	r0, 80069ae <put_device_to_sleep+0x6c>
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8006956:	f89d 3004 	ldrb.w	r3, [sp, #4]
		rslt = bme280_soft_reset(dev);
 800695a:	4620      	mov	r0, r4
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	f88d 300a 	strb.w	r3, [sp, #10]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8006964:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006968:	f3c3 0282 	ubfx	r2, r3, #2, #3
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 800696c:	095b      	lsrs	r3, r3, #5
 800696e:	f88d 3009 	strb.w	r3, [sp, #9]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8006972:	f89d 3007 	ldrb.w	r3, [sp, #7]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8006976:	f88d 2008 	strb.w	r2, [sp, #8]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800697a:	f3c3 0282 	ubfx	r2, r3, #2, #3
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800697e:	095b      	lsrs	r3, r3, #5
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8006980:	f88d 200b 	strb.w	r2, [sp, #11]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8006984:	f88d 300c 	strb.w	r3, [sp, #12]
		rslt = bme280_soft_reset(dev);
 8006988:	f7ff ff53 	bl	8006832 <bme280_soft_reset>
		if (rslt == BME280_OK)
 800698c:	b978      	cbnz	r0, 80069ae <put_device_to_sleep+0x6c>
		rslt = set_osr_humidity_settings(settings, dev);
 800698e:	4621      	mov	r1, r4
 8006990:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8006994:	f7ff feb6 	bl	8006704 <set_osr_humidity_settings.isra.0>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8006998:	4622      	mov	r2, r4
 800699a:	201f      	movs	r0, #31
 800699c:	a902      	add	r1, sp, #8
 800699e:	f7ff fed7 	bl	8006750 <set_osr_press_temp_settings>
	if (rslt == BME280_OK)
 80069a2:	b920      	cbnz	r0, 80069ae <put_device_to_sleep+0x6c>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80069a4:	4622      	mov	r2, r4
 80069a6:	201f      	movs	r0, #31
 80069a8:	a902      	add	r1, sp, #8
 80069aa:	f7ff ff01 	bl	80067b0 <set_filter_standby_settings>
}
 80069ae:	b004      	add	sp, #16
 80069b0:	bd10      	pop	{r4, pc}

080069b2 <bme280_set_sensor_settings>:
{
 80069b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069b4:	4606      	mov	r6, r0
	rslt = null_ptr_check(dev);
 80069b6:	4608      	mov	r0, r1
{
 80069b8:	460d      	mov	r5, r1
	rslt = null_ptr_check(dev);
 80069ba:	f7ff fe3b 	bl	8006634 <null_ptr_check>
	if (rslt == BME280_OK) {
 80069be:	4604      	mov	r4, r0
 80069c0:	b968      	cbnz	r0, 80069de <bme280_set_sensor_settings+0x2c>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 80069c2:	f10d 0007 	add.w	r0, sp, #7
 80069c6:	f7ff ff23 	bl	8006810 <bme280_get_sensor_mode>
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 80069ca:	4604      	mov	r4, r0
 80069cc:	b938      	cbnz	r0, 80069de <bme280_set_sensor_settings+0x2c>
 80069ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80069d2:	b93b      	cbnz	r3, 80069e4 <bme280_set_sensor_settings+0x32>
	if (sub_settings & desired_settings) {
 80069d4:	0771      	lsls	r1, r6, #29
 80069d6:	d10c      	bne.n	80069f2 <bme280_set_sensor_settings+0x40>
 80069d8:	f016 0f18 	tst.w	r6, #24
 80069dc:	d11d      	bne.n	8006a1a <bme280_set_sensor_settings+0x68>
}
 80069de:	4620      	mov	r0, r4
 80069e0:	b002      	add	sp, #8
 80069e2:	bd70      	pop	{r4, r5, r6, pc}
			rslt = put_device_to_sleep(dev);
 80069e4:	4628      	mov	r0, r5
 80069e6:	f7ff ffac 	bl	8006942 <put_device_to_sleep>
		if (rslt == BME280_OK) {
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d0f2      	beq.n	80069d4 <bme280_set_sensor_settings+0x22>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 80069ee:	4604      	mov	r4, r0
 80069f0:	e7f5      	b.n	80069de <bme280_set_sensor_settings+0x2c>
	if (desired_settings & BME280_OSR_HUM_SEL)
 80069f2:	0772      	lsls	r2, r6, #29
 80069f4:	d50f      	bpl.n	8006a16 <bme280_set_sensor_settings+0x64>
		rslt = set_osr_humidity_settings(settings, dev);
 80069f6:	4629      	mov	r1, r5
 80069f8:	f895 003a 	ldrb.w	r0, [r5, #58]	; 0x3a
 80069fc:	f7ff fe82 	bl	8006704 <set_osr_humidity_settings.isra.0>
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8006a00:	07b3      	lsls	r3, r6, #30
 8006a02:	d005      	beq.n	8006a10 <bme280_set_sensor_settings+0x5e>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8006a04:	462a      	mov	r2, r5
 8006a06:	4630      	mov	r0, r6
 8006a08:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8006a0c:	f7ff fea0 	bl	8006750 <set_osr_press_temp_settings>
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8006a10:	2800      	cmp	r0, #0
 8006a12:	d1ec      	bne.n	80069ee <bme280_set_sensor_settings+0x3c>
 8006a14:	e7e0      	b.n	80069d8 <bme280_set_sensor_settings+0x26>
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8006a16:	2001      	movs	r0, #1
 8006a18:	e7f2      	b.n	8006a00 <bme280_set_sensor_settings+0x4e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8006a1a:	462a      	mov	r2, r5
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8006a22:	f7ff fec5 	bl	80067b0 <set_filter_standby_settings>
 8006a26:	e7e2      	b.n	80069ee <bme280_set_sensor_settings+0x3c>

08006a28 <bme280_set_sensor_mode>:
{
 8006a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a2a:	4605      	mov	r5, r0
	rslt = null_ptr_check(dev);
 8006a2c:	4608      	mov	r0, r1
{
 8006a2e:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 8006a30:	f7ff fe00 	bl	8006634 <null_ptr_check>
	if (rslt == BME280_OK) {
 8006a34:	bb40      	cbnz	r0, 8006a88 <bme280_set_sensor_mode+0x60>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8006a36:	f10d 0005 	add.w	r0, sp, #5
 8006a3a:	f7ff fee9 	bl	8006810 <bme280_get_sensor_mode>
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8006a3e:	bb18      	cbnz	r0, 8006a88 <bme280_set_sensor_mode+0x60>
 8006a40:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006a44:	b9db      	cbnz	r3, 8006a7e <bme280_set_sensor_mode+0x56>
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8006a46:	20f4      	movs	r0, #244	; 0xf4
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8006a48:	4623      	mov	r3, r4
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f10d 0107 	add.w	r1, sp, #7
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8006a50:	f88d 0006 	strb.w	r0, [sp, #6]
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8006a54:	f7ff fdfc 	bl	8006650 <bme280_get_regs>
	if (rslt == BME280_OK) {
 8006a58:	b9b0      	cbnz	r0, 8006a88 <bme280_set_sensor_mode+0x60>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8006a5a:	f89d 0007 	ldrb.w	r0, [sp, #7]
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8006a5e:	2201      	movs	r2, #1
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8006a60:	f020 0303 	bic.w	r3, r0, #3
 8006a64:	f005 0003 	and.w	r0, r5, #3
 8006a68:	4318      	orrs	r0, r3
 8006a6a:	f88d 0007 	strb.w	r0, [sp, #7]
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8006a6e:	4623      	mov	r3, r4
 8006a70:	f10d 0107 	add.w	r1, sp, #7
 8006a74:	f10d 0006 	add.w	r0, sp, #6
 8006a78:	f7ff fe01 	bl	800667e <bme280_set_regs>
	return rslt;
 8006a7c:	e004      	b.n	8006a88 <bme280_set_sensor_mode+0x60>
			rslt = put_device_to_sleep(dev);
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f7ff ff5f 	bl	8006942 <put_device_to_sleep>
		if (rslt == BME280_OK)
 8006a84:	2800      	cmp	r0, #0
 8006a86:	d0de      	beq.n	8006a46 <bme280_set_sensor_mode+0x1e>
}
 8006a88:	b003      	add	sp, #12
 8006a8a:	bd30      	pop	{r4, r5, pc}

08006a8c <bme280_parse_sensor_data>:
	data_lsb = (uint32_t)reg_data[1] << 4;
 8006a8c:	7843      	ldrb	r3, [r0, #1]
	data_msb = (uint32_t)reg_data[0] << 12;
 8006a8e:	7802      	ldrb	r2, [r0, #0]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8006a90:	011b      	lsls	r3, r3, #4
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8006a92:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8006a96:	7882      	ldrb	r2, [r0, #2]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8006a98:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8006a9c:	600b      	str	r3, [r1, #0]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8006a9e:	7903      	ldrb	r3, [r0, #4]
	data_msb = (uint32_t)reg_data[3] << 12;
 8006aa0:	78c2      	ldrb	r2, [r0, #3]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8006aa2:	011b      	lsls	r3, r3, #4
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8006aa4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8006aa8:	7942      	ldrb	r2, [r0, #5]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8006aaa:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8006aae:	604b      	str	r3, [r1, #4]
	uncomp_data->humidity = data_msb | data_lsb;
 8006ab0:	88c3      	ldrh	r3, [r0, #6]
 8006ab2:	ba5b      	rev16	r3, r3
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	608b      	str	r3, [r1, #8]
}
 8006ab8:	4770      	bx	lr
	...

08006abc <bme280_compensate_data>:
{
 8006abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac0:	b085      	sub	sp, #20
 8006ac2:	4615      	mov	r5, r2
 8006ac4:	461c      	mov	r4, r3
	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8006ac6:	460e      	mov	r6, r1
{
 8006ac8:	9003      	str	r0, [sp, #12]
	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8006aca:	2900      	cmp	r1, #0
 8006acc:	f000 81b7 	beq.w	8006e3e <bme280_compensate_data+0x382>
 8006ad0:	2a00      	cmp	r2, #0
 8006ad2:	f000 81b4 	beq.w	8006e3e <bme280_compensate_data+0x382>
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 81b1 	beq.w	8006e3e <bme280_compensate_data+0x382>
		comp_data->temperature = 0;
 8006adc:	2300      	movs	r3, #0
		comp_data->pressure = 0;
 8006ade:	e9c2 3300 	strd	r3, r3, [r2]
		comp_data->humidity = 0;
 8006ae2:	6093      	str	r3, [r2, #8]
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8006ae4:	0742      	lsls	r2, r0, #29
 8006ae6:	d02f      	beq.n	8006b48 <bme280_compensate_data+0x8c>
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8006ae8:	6848      	ldr	r0, [r1, #4]
	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 8006aea:	8822      	ldrh	r2, [r4, #0]
 8006aec:	0053      	lsls	r3, r2, #1
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8006aee:	ebc2 1210 	rsb	r2, r2, r0, lsr #4
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8006af2:	4352      	muls	r2, r2
	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 8006af4:	ebc3 01d0 	rsb	r1, r3, r0, lsr #3
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8006af8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8006afc:	bf48      	it	mi
 8006afe:	f602 72ff 	addwmi	r2, r2, #4095	; 0xfff
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8006b02:	434b      	muls	r3, r1
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8006b04:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8006b08:	1312      	asrs	r2, r2, #12
 8006b0a:	434a      	muls	r2, r1
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	bfb8      	it	lt
 8006b10:	f203 73ff 	addwlt	r3, r3, #2047	; 0x7ff
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8006b14:	2a00      	cmp	r2, #0
 8006b16:	bfbc      	itt	lt
 8006b18:	f502 527f 	addlt.w	r2, r2, #16320	; 0x3fc0
 8006b1c:	323f      	addlt	r2, #63	; 0x3f
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8006b1e:	12db      	asrs	r3, r3, #11
	calib_data->t_fine = var1 + var2;
 8006b20:	eb03 33a2 	add.w	r3, r3, r2, asr #14
	if (temperature < temperature_min)
 8006b24:	4ac7      	ldr	r2, [pc, #796]	; (8006e44 <bme280_compensate_data+0x388>)
	calib_data->t_fine = var1 + var2;
 8006b26:	6263      	str	r3, [r4, #36]	; 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8006b28:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	if (temperature < temperature_min)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	f2c0 817f 	blt.w	8006e30 <bme280_compensate_data+0x374>
	else if (temperature > temperature_max)
 8006b32:	4ac5      	ldr	r2, [pc, #788]	; (8006e48 <bme280_compensate_data+0x38c>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	f280 817d 	bge.w	8006e34 <bme280_compensate_data+0x378>
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8006b3a:	f113 0280 	adds.w	r2, r3, #128	; 0x80
 8006b3e:	bf48      	it	mi
 8006b40:	f203 127f 	addwmi	r2, r3, #383	; 0x17f
 8006b44:	1212      	asrs	r2, r2, #8
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8006b46:	606a      	str	r2, [r5, #4]
		if (sensor_comp & BME280_PRESS) {
 8006b48:	9b03      	ldr	r3, [sp, #12]
 8006b4a:	07db      	lsls	r3, r3, #31
 8006b4c:	f140 8118 	bpl.w	8006d80 <bme280_compensate_data+0x2c4>
	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8006b50:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006b52:	f5b2 3cfa 	subs.w	ip, r2, #128000	; 0x1f400
 8006b56:	ea4f 73e2 	mov.w	r3, r2, asr #31
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8006b5a:	fbac 120c 	umull	r1, r2, ip, ip
	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8006b5e:	f143 37ff 	adc.w	r7, r3, #4294967295	; 0xffffffff
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8006b62:	fb0c f307 	mul.w	r3, ip, r7
 8006b66:	e9cd 1200 	strd	r1, r2, [sp]
 8006b6a:	9a01      	ldr	r2, [sp, #4]
 8006b6c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8006b70:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8006b74:	9301      	str	r3, [sp, #4]
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8006b76:	fb02 f107 	mul.w	r1, r2, r7
 8006b7a:	17d3      	asrs	r3, r2, #31
 8006b7c:	fb0c 1103 	mla	r1, ip, r3, r1
 8006b80:	fba2 230c 	umull	r2, r3, r2, ip
 8006b84:	440b      	add	r3, r1
 8006b86:	0319      	lsls	r1, r3, #12
 8006b88:	9801      	ldr	r0, [sp, #4]
 8006b8a:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8006b8e:	ea4f 3902 	mov.w	r9, r2, lsl #12
 8006b92:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8006b96:	fb02 fe00 	mul.w	lr, r2, r0
 8006b9a:	9800      	ldr	r0, [sp, #0]
 8006b9c:	17d3      	asrs	r3, r2, #31
 8006b9e:	fb00 ee03 	mla	lr, r0, r3, lr
 8006ba2:	fba2 2300 	umull	r2, r3, r2, r0
 8006ba6:	4473      	add	r3, lr
 8006ba8:	2a00      	cmp	r2, #0
 8006baa:	f173 0000 	sbcs.w	r0, r3, #0
 8006bae:	da02      	bge.n	8006bb6 <bme280_compensate_data+0xfa>
 8006bb0:	32ff      	adds	r2, #255	; 0xff
 8006bb2:	f143 0300 	adc.w	r3, r3, #0
 8006bb6:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 8006bba:	ea4e 6e03 	orr.w	lr, lr, r3, lsl #24
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8006bbe:	88e2      	ldrh	r2, [r4, #6]
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8006bc0:	ea4f 2823 	mov.w	r8, r3, asr #8
 8006bc4:	eb1e 0009 	adds.w	r0, lr, r9
 8006bc8:	eb48 0801 	adc.w	r8, r8, r1
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8006bcc:	3000      	adds	r0, #0
 8006bce:	fba0 0102 	umull	r0, r1, r0, r2
 8006bd2:	f548 4800 	adc.w	r8, r8, #32768	; 0x8000
 8006bd6:	fb02 1108 	mla	r1, r2, r8, r1
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	f171 0300 	sbcs.w	r3, r1, #0
 8006be0:	da03      	bge.n	8006bea <bme280_compensate_data+0x12e>
 8006be2:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8006be6:	f141 0101 	adc.w	r1, r1, #1
 8006bea:	ea4f 0861 	mov.w	r8, r1, asr #1
 8006bee:	ea4f 79e1 	mov.w	r9, r1, asr #31
	if (var1 != 0) {
 8006bf2:	ea58 0309 	orrs.w	r3, r8, r9
 8006bf6:	f000 8120 	beq.w	8006e3a <bme280_compensate_data+0x37e>
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8006bfa:	f04f 0e00 	mov.w	lr, #0
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8006bfe:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8006c02:	9901      	ldr	r1, [sp, #4]
 8006c04:	9800      	ldr	r0, [sp, #0]
 8006c06:	4351      	muls	r1, r2
 8006c08:	17d3      	asrs	r3, r2, #31
 8006c0a:	fb00 1103 	mla	r1, r0, r3, r1
 8006c0e:	fba2 2300 	umull	r2, r3, r2, r0
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8006c12:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8006c16:	440b      	add	r3, r1
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8006c18:	4347      	muls	r7, r0
 8006c1a:	17c1      	asrs	r1, r0, #31
 8006c1c:	fb0c 7701 	mla	r7, ip, r1, r7
 8006c20:	fba0 010c 	umull	r0, r1, r0, ip
 8006c24:	4439      	add	r1, r7
 8006c26:	ea4f 4c40 	mov.w	ip, r0, lsl #17
 8006c2a:	044f      	lsls	r7, r1, #17
 8006c2c:	ea47 37d0 	orr.w	r7, r7, r0, lsr #15
 8006c30:	eb1c 0102 	adds.w	r1, ip, r2
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8006c34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8006c38:	9100      	str	r1, [sp, #0]
 8006c3a:	eb47 0103 	adc.w	r1, r7, r3
		var4 = 1048576 - uncomp_data->pressure;
 8006c3e:	6833      	ldr	r3, [r6, #0]
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8006c40:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 8006c44:	9a00      	ldr	r2, [sp, #0]
		var4 = 1048576 - uncomp_data->pressure;
 8006c46:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8006c4a:	085f      	lsrs	r7, r3, #1
 8006c4c:	07d8      	lsls	r0, r3, #31
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8006c4e:	eb1e 0302 	adds.w	r3, lr, r2
 8006c52:	eb4c 0101 	adc.w	r1, ip, r1
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8006c56:	1ac0      	subs	r0, r0, r3
 8006c58:	f640 4335 	movw	r3, #3125	; 0xc35
 8006c5c:	eb67 0701 	sbc.w	r7, r7, r1
 8006c60:	fba0 0103 	umull	r0, r1, r0, r3
 8006c64:	4642      	mov	r2, r8
 8006c66:	fb03 1107 	mla	r1, r3, r7, r1
 8006c6a:	464b      	mov	r3, r9
 8006c6c:	f7fa f974 	bl	8000f58 <__aeabi_ldivmod>
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8006c70:	2800      	cmp	r0, #0
 8006c72:	f171 0300 	sbcs.w	r3, r1, #0
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8006c76:	4680      	mov	r8, r0
 8006c78:	4689      	mov	r9, r1
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	da05      	bge.n	8006c8a <bme280_compensate_data+0x1ce>
 8006c7e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8006c82:	2100      	movs	r1, #0
 8006c84:	1882      	adds	r2, r0, r2
 8006c86:	eb49 0101 	adc.w	r1, r9, r1
 8006c8a:	0b50      	lsrs	r0, r2, #13
 8006c8c:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8006c90:	ea40 40c1 	orr.w	r0, r0, r1, lsl #19
 8006c94:	1349      	asrs	r1, r1, #13
 8006c96:	fb02 f701 	mul.w	r7, r2, r1
 8006c9a:	17d3      	asrs	r3, r2, #31
 8006c9c:	fb00 7703 	mla	r7, r0, r3, r7
 8006ca0:	fba2 2300 	umull	r2, r3, r2, r0
 8006ca4:	4351      	muls	r1, r2
 8006ca6:	443b      	add	r3, r7
 8006ca8:	fb00 1103 	mla	r1, r0, r3, r1
 8006cac:	fba2 2300 	umull	r2, r3, r2, r0
 8006cb0:	440b      	add	r3, r1
 8006cb2:	2a00      	cmp	r2, #0
 8006cb4:	f173 0100 	sbcs.w	r1, r3, #0
 8006cb8:	da06      	bge.n	8006cc8 <bme280_compensate_data+0x20c>
 8006cba:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8006cbe:	1852      	adds	r2, r2, r1
 8006cc0:	f04f 0100 	mov.w	r1, #0
 8006cc4:	eb41 0303 	adc.w	r3, r1, r3
 8006cc8:	0e51      	lsrs	r1, r2, #25
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8006cca:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8006cce:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8006cd2:	fb02 f709 	mul.w	r7, r2, r9
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8006cd6:	1658      	asrs	r0, r3, #25
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8006cd8:	17d3      	asrs	r3, r2, #31
 8006cda:	fb08 7703 	mla	r7, r8, r3, r7
 8006cde:	fba2 2308 	umull	r2, r3, r2, r8
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8006ce2:	eb11 0108 	adds.w	r1, r1, r8
 8006ce6:	eb40 0009 	adc.w	r0, r0, r9
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8006cea:	443b      	add	r3, r7
 8006cec:	2a00      	cmp	r2, #0
 8006cee:	f173 0700 	sbcs.w	r7, r3, #0
 8006cf2:	da05      	bge.n	8006d00 <bme280_compensate_data+0x244>
 8006cf4:	4f55      	ldr	r7, [pc, #340]	; (8006e4c <bme280_compensate_data+0x390>)
 8006cf6:	19d2      	adds	r2, r2, r7
 8006cf8:	f04f 0700 	mov.w	r7, #0
 8006cfc:	eb47 0303 	adc.w	r3, r7, r3
 8006d00:	0cd7      	lsrs	r7, r2, #19
 8006d02:	ea47 3743 	orr.w	r7, r7, r3, lsl #13
 8006d06:	ea4f 4ce3 	mov.w	ip, r3, asr #19
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8006d0a:	eb11 0a07 	adds.w	sl, r1, r7
 8006d0e:	eb40 0b0c 	adc.w	fp, r0, ip
 8006d12:	f1ba 0f00 	cmp.w	sl, #0
 8006d16:	f17b 0300 	sbcs.w	r3, fp, #0
 8006d1a:	da03      	bge.n	8006d24 <bme280_compensate_data+0x268>
 8006d1c:	f11a 0aff 	adds.w	sl, sl, #255	; 0xff
 8006d20:	f14b 0b00 	adc.w	fp, fp, #0
 8006d24:	2210      	movs	r2, #16
 8006d26:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8006d2a:	ea43 600b 	orr.w	r0, r3, fp, lsl #24
 8006d2e:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8006d32:	ea4f 212b 	mov.w	r1, fp, asr #8
 8006d36:	fbc3 0102 	smlal	r0, r1, r3, r2
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 8006d3a:	0fcb      	lsrs	r3, r1, #31
 8006d3c:	18c0      	adds	r0, r0, r3
 8006d3e:	f141 0100 	adc.w	r1, r1, #0
 8006d42:	0842      	lsrs	r2, r0, #1
 8006d44:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8006d48:	1048      	asrs	r0, r1, #1
 8006d4a:	2164      	movs	r1, #100	; 0x64
 8006d4c:	fba2 2301 	umull	r2, r3, r2, r1
 8006d50:	fb01 3300 	mla	r3, r1, r0, r3
 8006d54:	4619      	mov	r1, r3
 8006d56:	2a00      	cmp	r2, #0
 8006d58:	f171 0300 	sbcs.w	r3, r1, #0
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	da03      	bge.n	8006d68 <bme280_compensate_data+0x2ac>
 8006d60:	f112 007f 	adds.w	r0, r2, #127	; 0x7f
 8006d64:	f141 0100 	adc.w	r1, r1, #0
 8006d68:	09c2      	lsrs	r2, r0, #7
 8006d6a:	ea42 6341 	orr.w	r3, r2, r1, lsl #25
 8006d6e:	4a38      	ldr	r2, [pc, #224]	; (8006e50 <bme280_compensate_data+0x394>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	bf28      	it	cs
 8006d74:	4613      	movcs	r3, r2
 8006d76:	4a37      	ldr	r2, [pc, #220]	; (8006e54 <bme280_compensate_data+0x398>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	bf38      	it	cc
 8006d7c:	4613      	movcc	r3, r2
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8006d7e:	602b      	str	r3, [r5, #0]
		if (sensor_comp & BME280_HUM) {
 8006d80:	9b03      	ldr	r3, [sp, #12]
 8006d82:	f013 0004 	ands.w	r0, r3, #4
 8006d86:	d050      	beq.n	8006e2a <bme280_compensate_data+0x36e>
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8006d88:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 8006d8c:	68b1      	ldr	r1, [r6, #8]
	var1 = calib_data->t_fine - ((int32_t)76800);
 8006d8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8006d90:	0512      	lsls	r2, r2, #20
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8006d92:	ebc2 3181 	rsb	r1, r2, r1, lsl #14
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 8006d96:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
	var1 = calib_data->t_fine - ((int32_t)76800);
 8006d9a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8006d9e:	fb03 1212 	mls	r2, r3, r2, r1
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8006da2:	7f21      	ldrb	r1, [r4, #28]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8006da4:	f512 4280 	adds.w	r2, r2, #16384	; 0x4000
 8006da8:	bf44      	itt	mi
 8006daa:	f502 42ff 	addmi.w	r2, r2, #32640	; 0x7f80
 8006dae:	327f      	addmi	r2, #127	; 0x7f
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8006db0:	4359      	muls	r1, r3
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8006db2:	f994 0022 	ldrsb.w	r0, [r4, #34]	; 0x22
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8006db6:	bf48      	it	mi
 8006db8:	f201 71ff 	addwmi	r1, r1, #2047	; 0x7ff
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8006dbc:	4343      	muls	r3, r0
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8006dbe:	ea4f 21e1 	mov.w	r1, r1, asr #11
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8006dc2:	bf48      	it	mi
 8006dc4:	f203 33ff 	addwmi	r3, r3, #1023	; 0x3ff
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8006dc8:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8006dcc:	129b      	asrs	r3, r3, #10
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8006dce:	434b      	muls	r3, r1
 8006dd0:	bf48      	it	mi
 8006dd2:	f203 33ff 	addwmi	r3, r3, #1023	; 0x3ff
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8006dd6:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8006dda:	129b      	asrs	r3, r3, #10
 8006ddc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8006de0:	434b      	muls	r3, r1
 8006de2:	f513 5300 	adds.w	r3, r3, #8192	; 0x2000
 8006de6:	bf44      	itt	mi
 8006de8:	f503 537f 	addmi.w	r3, r3, #16320	; 0x3fc0
 8006dec:	333f      	addmi	r3, #63	; 0x3f
 8006dee:	139b      	asrs	r3, r3, #14
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8006df0:	13d2      	asrs	r2, r2, #15
	var3 = var5 * var2;
 8006df2:	435a      	muls	r2, r3
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8006df4:	4613      	mov	r3, r2
 8006df6:	2a00      	cmp	r2, #0
 8006df8:	bfbc      	itt	lt
 8006dfa:	f502 43ff 	addlt.w	r3, r2, #32640	; 0x7f80
 8006dfe:	337f      	addlt	r3, #127	; 0x7f
 8006e00:	13db      	asrs	r3, r3, #15
 8006e02:	435b      	muls	r3, r3
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8006e04:	7e21      	ldrb	r1, [r4, #24]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8006e06:	bf48      	it	mi
 8006e08:	337f      	addmi	r3, #127	; 0x7f
 8006e0a:	11db      	asrs	r3, r3, #7
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8006e0c:	434b      	muls	r3, r1
 8006e0e:	bf48      	it	mi
 8006e10:	330f      	addmi	r3, #15
 8006e12:	eba2 1223 	sub.w	r2, r2, r3, asr #4
	var5 = (var5 < 0 ? 0 : var5);
 8006e16:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8006e1a:	f1b2 5fc8 	cmp.w	r2, #419430400	; 0x19000000
 8006e1e:	bfa8      	it	ge
 8006e20:	f04f 52c8 	movge.w	r2, #419430400	; 0x19000000
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8006e24:	2000      	movs	r0, #0
	humidity = (uint32_t)(var5 / 4096);
 8006e26:	1312      	asrs	r2, r2, #12
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8006e28:	60aa      	str	r2, [r5, #8]
}
 8006e2a:	b005      	add	sp, #20
 8006e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		temperature = temperature_min;
 8006e30:	4a09      	ldr	r2, [pc, #36]	; (8006e58 <bme280_compensate_data+0x39c>)
 8006e32:	e688      	b.n	8006b46 <bme280_compensate_data+0x8a>
		temperature = temperature_max;
 8006e34:	f242 1234 	movw	r2, #8500	; 0x2134
 8006e38:	e685      	b.n	8006b46 <bme280_compensate_data+0x8a>
		pressure = pressure_min;
 8006e3a:	4b06      	ldr	r3, [pc, #24]	; (8006e54 <bme280_compensate_data+0x398>)
 8006e3c:	e79f      	b.n	8006d7e <bme280_compensate_data+0x2c2>
		rslt = BME280_E_NULL_PTR;
 8006e3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e42:	e7f2      	b.n	8006e2a <bme280_compensate_data+0x36e>
 8006e44:	fff05e81 	.word	0xfff05e81
 8006e48:	00213480 	.word	0x00213480
 8006e4c:	0007ffff 	.word	0x0007ffff
 8006e50:	00a7d8c0 	.word	0x00a7d8c0
 8006e54:	002dc6c0 	.word	0x002dc6c0
 8006e58:	fffff060 	.word	0xfffff060

08006e5c <bme280_get_sensor_data>:
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8006e5c:	2300      	movs	r3, #0
{
 8006e5e:	b570      	push	{r4, r5, r6, lr}
 8006e60:	4606      	mov	r6, r0
 8006e62:	b086      	sub	sp, #24
	rslt = null_ptr_check(dev);
 8006e64:	4610      	mov	r0, r2
{
 8006e66:	460d      	mov	r5, r1
 8006e68:	4614      	mov	r4, r2
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8006e6a:	e9cd 3301 	strd	r3, r3, [sp, #4]
	struct bme280_uncomp_data uncomp_data = {0};
 8006e6e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006e72:	9305      	str	r3, [sp, #20]
	rslt = null_ptr_check(dev);
 8006e74:	f7ff fbde 	bl	8006634 <null_ptr_check>
	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8006e78:	b9a0      	cbnz	r0, 8006ea4 <bme280_get_sensor_data+0x48>
 8006e7a:	b199      	cbz	r1, 8006ea4 <bme280_get_sensor_data+0x48>
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	20f7      	movs	r0, #247	; 0xf7
 8006e80:	2208      	movs	r2, #8
 8006e82:	a901      	add	r1, sp, #4
 8006e84:	f7ff fbe4 	bl	8006650 <bme280_get_regs>
		if (rslt == BME280_OK) {
 8006e88:	b950      	cbnz	r0, 8006ea0 <bme280_get_sensor_data+0x44>
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8006e8a:	a903      	add	r1, sp, #12
 8006e8c:	a801      	add	r0, sp, #4
 8006e8e:	f7ff fdfd 	bl	8006a8c <bme280_parse_sensor_data>
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8006e92:	462a      	mov	r2, r5
 8006e94:	4630      	mov	r0, r6
 8006e96:	f104 0310 	add.w	r3, r4, #16
 8006e9a:	a903      	add	r1, sp, #12
 8006e9c:	f7ff fe0e 	bl	8006abc <bme280_compensate_data>
}
 8006ea0:	b006      	add	sp, #24
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}
		rslt = BME280_E_NULL_PTR;
 8006ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ea8:	e7fa      	b.n	8006ea0 <bme280_get_sensor_data+0x44>
	...

08006eac <readAlgorithmResults>:
  * @retval None.
 */
uint32_t readAlgorithmResults()
{
	uint8_t data_rq[4];
	uint8_t status = HAL_I2C_Mem_Read( &hi2c1, CCS811_ADDRD, (uint8_t)CSS811_ALG_RESULT_DATA, I2C_MEMADD_SIZE_8BIT, data_rq, 4, 100);
 8006eac:	2304      	movs	r3, #4
 8006eae:	2264      	movs	r2, #100	; 0x64
{
 8006eb0:	b530      	push	{r4, r5, lr}
 8006eb2:	b087      	sub	sp, #28
	uint8_t status = HAL_I2C_Mem_Read( &hi2c1, CCS811_ADDRD, (uint8_t)CSS811_ALG_RESULT_DATA, I2C_MEMADD_SIZE_8BIT, data_rq, 4, 100);
 8006eb4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006eb8:	ab05      	add	r3, sp, #20
 8006eba:	2202      	movs	r2, #2
 8006ebc:	21b4      	movs	r1, #180	; 0xb4
 8006ebe:	9300      	str	r3, [sp, #0]
 8006ec0:	480d      	ldr	r0, [pc, #52]	; (8006ef8 <readAlgorithmResults+0x4c>)
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	f002 f840 	bl	8008f48 <HAL_I2C_Mem_Read>
	if (status == HAL_OK) {
 8006ec8:	490c      	ldr	r1, [pc, #48]	; (8006efc <readAlgorithmResults+0x50>)
 8006eca:	4a0d      	ldr	r2, [pc, #52]	; (8006f00 <readAlgorithmResults+0x54>)
 8006ecc:	b988      	cbnz	r0, 8006ef2 <readAlgorithmResults+0x46>
		uint8_t co2MSB = data_rq[0];
		uint8_t co2LSB = data_rq[1];
		uint8_t tvocMSB = data_rq[2];
 8006ece:	f89d 4016 	ldrb.w	r4, [sp, #22]
		uint8_t tvocLSB = data_rq[3];
 8006ed2:	f89d 0017 	ldrb.w	r0, [sp, #23]
		_CO2 = ((uint16_t)co2MSB << 8) | co2LSB;
 8006ed6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8006eda:	f89d 3015 	ldrb.w	r3, [sp, #21]
		_tVOC = ((uint16_t)tvocMSB << 8) | tvocLSB;
 8006ede:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
		_CO2 = ((uint16_t)co2MSB << 8) | co2LSB;
 8006ee2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8006ee6:	800b      	strh	r3, [r1, #0]
		_tVOC = ((uint16_t)tvocMSB << 8) | tvocLSB;
 8006ee8:	8010      	strh	r0, [r2, #0]
		return (uint32_t)(_CO2 << 16 | _tVOC);
	}
	/*	TVOC value, in parts per billion (ppb)
	eC02 value, in parts per million (ppm) */
	return (uint32_t)(_CO2 << 16 | _tVOC);
 8006eea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
}
 8006eee:	b007      	add	sp, #28
 8006ef0:	bd30      	pop	{r4, r5, pc}
	return (uint32_t)(_CO2 << 16 | _tVOC);
 8006ef2:	880b      	ldrh	r3, [r1, #0]
 8006ef4:	8810      	ldrh	r0, [r2, #0]
 8006ef6:	e7f8      	b.n	8006eea <readAlgorithmResults+0x3e>
 8006ef8:	200024c4 	.word	0x200024c4
 8006efc:	20002470 	.word	0x20002470
 8006f00:	20002472 	.word	0x20002472

08006f04 <setEnvironmentalData>:
	 //This function expects the humidity and temp to come in as floats
  * @param  relativeHumidity HUMIDITY.
  * @param  temperature TEMPERATURE.
  * @retval None.
 */
void setEnvironmentalData(float relativeHumidity, float temperature) {
 8006f04:	b530      	push	{r4, r5, lr}
 8006f06:	460d      	mov	r5, r1
 8006f08:	b087      	sub	sp, #28

	int rH = relativeHumidity * 1000; //42.348 becomes 42348
 8006f0a:	4936      	ldr	r1, [pc, #216]	; (8006fe4 <setEnvironmentalData+0xe0>)
 8006f0c:	f7f9 f920 	bl	8000150 <__aeabi_fmul>
 8006f10:	f7f9 fffc 	bl	8000f0c <__aeabi_f2iz>
	int temp = temperature * 1000; //23.2 becomes 23200
 8006f14:	4933      	ldr	r1, [pc, #204]	; (8006fe4 <setEnvironmentalData+0xe0>)
	int rH = relativeHumidity * 1000; //42.348 becomes 42348
 8006f16:	4604      	mov	r4, r0
	int temp = temperature * 1000; //23.2 becomes 23200
 8006f18:	4628      	mov	r0, r5
 8006f1a:	f7f9 f919 	bl	8000150 <__aeabi_fmul>
 8006f1e:	f7f9 fff5 	bl	8000f0c <__aeabi_f2iz>

	uint8_t envData[4];

	//Split value into 7-bit integer and 9-bit fractional
	envData[0] = ((rH % 1000) / 100) > 7 ? (rH / 1000 + 1) << 1 : (rH / 1000) << 1;
 8006f22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f26:	fb94 f3f2 	sdiv	r3, r4, r2
 8006f2a:	fb02 4213 	mls	r2, r2, r3, r4
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
	envData[1] = 0; //CCS811 only supports increments of 0.5 so bits 7-0 will always be zero
	if (((rH % 1000) / 100) > 2 && (((rH % 1000) / 100) < 8))
 8006f34:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
	envData[0] = ((rH % 1000) / 100) > 7 ? (rH / 1000 + 1) << 1 : (rH / 1000) << 1;
 8006f38:	bfa8      	it	ge
 8006f3a:	3301      	addge	r3, #1
	if (((rH % 1000) / 100) > 2 && (((rH % 1000) / 100) < 8))
 8006f3c:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
		envData[0] |= 1; //Set 9th bit of fractional to indicate 0.5%
	}

	temp += 25000; //Add the 25C offset
	//Split value into 7-bit integer and 9-bit fractional
	envData[2] = ((temp % 1000) / 100) > 7 ? (temp / 1000 + 1) << 1 : (temp / 1000) << 1;
 8006f40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	envData[0] = ((rH % 1000) / 100) > 7 ? (rH / 1000 + 1) << 1 : (rH / 1000) << 1;
 8006f44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006f48:	b2db      	uxtb	r3, r3
	temp += 25000; //Add the 25C offset
 8006f4a:	f500 40c3 	add.w	r0, r0, #24960	; 0x6180
	envData[0] = ((rH % 1000) / 100) > 7 ? (rH / 1000 + 1) << 1 : (rH / 1000) << 1;
 8006f4e:	f88d 3014 	strb.w	r3, [sp, #20]
	temp += 25000; //Add the 25C offset
 8006f52:	f100 0028 	add.w	r0, r0, #40	; 0x28
		envData[0] |= 1; //Set 9th bit of fractional to indicate 0.5%
 8006f56:	bf3c      	itt	cc
 8006f58:	f043 0301 	orrcc.w	r3, r3, #1
 8006f5c:	f88d 3014 	strbcc.w	r3, [sp, #20]
	envData[2] = ((temp % 1000) / 100) > 7 ? (temp / 1000 + 1) << 1 : (temp / 1000) << 1;
 8006f60:	fb90 f3f2 	sdiv	r3, r0, r2
 8006f64:	fb02 0013 	mls	r0, r2, r3, r0
	envData[3] = 0;
 8006f68:	2200      	movs	r2, #0
	envData[2] = ((temp % 1000) / 100) > 7 ? (temp / 1000 + 1) << 1 : (temp / 1000) << 1;
 8006f6a:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	bfa8      	it	ge
 8006f72:	3301      	addge	r3, #1
	if (((temp % 1000) / 100) > 2 && (((temp % 1000) / 100) < 8))
 8006f74:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	envData[2] = ((temp % 1000) / 100) > 7 ? (temp / 1000 + 1) << 1 : (temp / 1000) << 1;
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	b2db      	uxtb	r3, r3
	if (((temp % 1000) / 100) > 2 && (((temp % 1000) / 100) < 8))
 8006f7c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
	envData[2] = ((temp % 1000) / 100) > 7 ? (temp / 1000 + 1) << 1 : (temp / 1000) << 1;
 8006f80:	f88d 3016 	strb.w	r3, [sp, #22]
	{
		envData[2] |= 1;  //Set 9th bit of fractional to indicate 0.5C
 8006f84:	bf38      	it	cc
 8006f86:	f043 0301 	orrcc.w	r3, r3, #1
	envData[3] = 0;
 8006f8a:	f88d 2017 	strb.w	r2, [sp, #23]
		envData[2] |= 1;  //Set 9th bit of fractional to indicate 0.5C
 8006f8e:	bf38      	it	cc
 8006f90:	f88d 3016 	strbcc.w	r3, [sp, #22]
//	env[0]=CSS811_ENV_DATA;
//	env[1]=envData[0];
//	env[2]=envData[1];
//	env[3]=envData[2];
//	env[5]=envData[3];
	HAL_I2C_Mem_Write( &hi2c1, CCS811_ADDWR, (uint8_t)CSS811_ENV_DATA, I2C_MEMADD_SIZE_8BIT, envData, 4, 100);
 8006f94:	2264      	movs	r2, #100	; 0x64
 8006f96:	2304      	movs	r3, #4
	envData[1] = 0; //CCS811 only supports increments of 0.5 so bits 7-0 will always be zero
 8006f98:	2100      	movs	r1, #0
	HAL_I2C_Mem_Write( &hi2c1, CCS811_ADDWR, (uint8_t)CSS811_ENV_DATA, I2C_MEMADD_SIZE_8BIT, envData, 4, 100);
 8006f9a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006f9e:	ab05      	add	r3, sp, #20
	envData[1] = 0; //CCS811 only supports increments of 0.5 so bits 7-0 will always be zero
 8006fa0:	f88d 1015 	strb.w	r1, [sp, #21]
	HAL_I2C_Mem_Write( &hi2c1, CCS811_ADDWR, (uint8_t)CSS811_ENV_DATA, I2C_MEMADD_SIZE_8BIT, envData, 4, 100);
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	2205      	movs	r2, #5
 8006fa8:	2301      	movs	r3, #1
 8006faa:	21b4      	movs	r1, #180	; 0xb4
 8006fac:	480e      	ldr	r0, [pc, #56]	; (8006fe8 <setEnvironmentalData+0xe4>)
 8006fae:	f001 ff3b 	bl	8008e28 <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006fb2:	4c0d      	ldr	r4, [pc, #52]	; (8006fe8 <setEnvironmentalData+0xe4>)
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f003 f809 	bl	8009fcc <HAL_I2C_GetState>
 8006fba:	2820      	cmp	r0, #32
 8006fbc:	d1fa      	bne.n	8006fb4 <setEnvironmentalData+0xb0>

	}
	while (HAL_I2C_IsDeviceReady(&hi2c1, CCS811_ADDRD, 10, 300) == HAL_TIMEOUT);
 8006fbe:	4c0a      	ldr	r4, [pc, #40]	; (8006fe8 <setEnvironmentalData+0xe4>)
 8006fc0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8006fc4:	220a      	movs	r2, #10
 8006fc6:	21b4      	movs	r1, #180	; 0xb4
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f002 f8fb 	bl	80091c4 <HAL_I2C_IsDeviceReady>
 8006fce:	2803      	cmp	r0, #3
 8006fd0:	d0f6      	beq.n	8006fc0 <setEnvironmentalData+0xbc>
	while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006fd2:	4c05      	ldr	r4, [pc, #20]	; (8006fe8 <setEnvironmentalData+0xe4>)
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	f002 fff9 	bl	8009fcc <HAL_I2C_GetState>
 8006fda:	2820      	cmp	r0, #32
 8006fdc:	d1fa      	bne.n	8006fd4 <setEnvironmentalData+0xd0>

	}
}
 8006fde:	b007      	add	sp, #28
 8006fe0:	bd30      	pop	{r4, r5, pc}
 8006fe2:	bf00      	nop
 8006fe4:	447a0000 	.word	0x447a0000
 8006fe8:	200024c4 	.word	0x200024c4

08006fec <readRegister>:
  * @retval VALUE AT THE ADDRESS.
 */
uint8_t readRegister(uint8_t addr)
{
	uint8_t dt;
	HAL_I2C_Mem_Read(&hi2c1, CCS811_ADDRD, (uint8_t)addr,1, &dt, 1, 300);
 8006fec:	2301      	movs	r3, #1
 8006fee:	f44f 7196 	mov.w	r1, #300	; 0x12c
{
 8006ff2:	b510      	push	{r4, lr}
 8006ff4:	b086      	sub	sp, #24
	HAL_I2C_Mem_Read(&hi2c1, CCS811_ADDRD, (uint8_t)addr,1, &dt, 1, 300);
 8006ff6:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8006ffa:	f10d 0117 	add.w	r1, sp, #23
{
 8006ffe:	4602      	mov	r2, r0
	HAL_I2C_Mem_Read(&hi2c1, CCS811_ADDRD, (uint8_t)addr,1, &dt, 1, 300);
 8007000:	9100      	str	r1, [sp, #0]
 8007002:	4807      	ldr	r0, [pc, #28]	; (8007020 <readRegister+0x34>)
 8007004:	21b4      	movs	r1, #180	; 0xb4
 8007006:	f001 ff9f 	bl	8008f48 <HAL_I2C_Mem_Read>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800700a:	4c05      	ldr	r4, [pc, #20]	; (8007020 <readRegister+0x34>)
 800700c:	4620      	mov	r0, r4
 800700e:	f002 ffdd 	bl	8009fcc <HAL_I2C_GetState>
 8007012:	2820      	cmp	r0, #32
 8007014:	d1fa      	bne.n	800700c <readRegister+0x20>
	return dt;
}
 8007016:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800701a:	b006      	add	sp, #24
 800701c:	bd10      	pop	{r4, pc}
 800701e:	bf00      	nop
 8007020:	200024c4 	.word	0x200024c4

08007024 <checkForError>:
{
 8007024:	b510      	push	{r4, lr}
	errvalue=readRegister(CSS811_ERROR_ID);
 8007026:	20e0      	movs	r0, #224	; 0xe0
 8007028:	f7ff ffe0 	bl	8006fec <readRegister>
 800702c:	4c04      	ldr	r4, [pc, #16]	; (8007040 <checkForError+0x1c>)
 800702e:	7020      	strb	r0, [r4, #0]
	errvalue = readRegister(CSS811_STATUS);
 8007030:	2000      	movs	r0, #0
 8007032:	f7ff ffdb 	bl	8006fec <readRegister>
 8007036:	7020      	strb	r0, [r4, #0]
}
 8007038:	f000 0001 	and.w	r0, r0, #1
 800703c:	bd10      	pop	{r4, pc}
 800703e:	bf00      	nop
 8007040:	20002444 	.word	0x20002444

08007044 <writeRegister>:
  * @param  addr ADDRESS.
  * @param  val  VALUE.
  * @retval NONE.
 */
void writeRegister(uint8_t addr, uint8_t val)
{
 8007044:	b510      	push	{r4, lr}
 8007046:	b086      	sub	sp, #24
	HAL_I2C_Mem_Write(&hi2c1, CCS811_ADDWR, (uint8_t)addr, I2C_MEMADD_SIZE_8BIT, &val, 1, 300);
 8007048:	2301      	movs	r3, #1
{
 800704a:	f88d 1017 	strb.w	r1, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c1, CCS811_ADDWR, (uint8_t)addr, I2C_MEMADD_SIZE_8BIT, &val, 1, 300);
 800704e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007052:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8007056:	f10d 0117 	add.w	r1, sp, #23
{
 800705a:	4602      	mov	r2, r0
	HAL_I2C_Mem_Write(&hi2c1, CCS811_ADDWR, (uint8_t)addr, I2C_MEMADD_SIZE_8BIT, &val, 1, 300);
 800705c:	9100      	str	r1, [sp, #0]
 800705e:	480e      	ldr	r0, [pc, #56]	; (8007098 <writeRegister+0x54>)
 8007060:	21b4      	movs	r1, #180	; 0xb4
 8007062:	f001 fee1 	bl	8008e28 <HAL_I2C_Mem_Write>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8007066:	4c0c      	ldr	r4, [pc, #48]	; (8007098 <writeRegister+0x54>)
 8007068:	4620      	mov	r0, r4
 800706a:	f002 ffaf 	bl	8009fcc <HAL_I2C_GetState>
 800706e:	2820      	cmp	r0, #32
 8007070:	d1fa      	bne.n	8007068 <writeRegister+0x24>

	}
	while (HAL_I2C_IsDeviceReady(&hi2c1, CCS811_ADDRD, 10, 300) == HAL_TIMEOUT);
 8007072:	4c09      	ldr	r4, [pc, #36]	; (8007098 <writeRegister+0x54>)
 8007074:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8007078:	220a      	movs	r2, #10
 800707a:	21b4      	movs	r1, #180	; 0xb4
 800707c:	4620      	mov	r0, r4
 800707e:	f002 f8a1 	bl	80091c4 <HAL_I2C_IsDeviceReady>
 8007082:	2803      	cmp	r0, #3
 8007084:	d0f6      	beq.n	8007074 <writeRegister+0x30>
	while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8007086:	4c04      	ldr	r4, [pc, #16]	; (8007098 <writeRegister+0x54>)
 8007088:	4620      	mov	r0, r4
 800708a:	f002 ff9f 	bl	8009fcc <HAL_I2C_GetState>
 800708e:	2820      	cmp	r0, #32
 8007090:	d1fa      	bne.n	8007088 <writeRegister+0x44>

	}
}
 8007092:	b006      	add	sp, #24
 8007094:	bd10      	pop	{r4, pc}
 8007096:	bf00      	nop
 8007098:	200024c4 	.word	0x200024c4

0800709c <setDriveMode>:
{
 800709c:	b510      	push	{r4, lr}
 800709e:	4604      	mov	r4, r0
	mosetting = readRegister(CSS811_MEAS_MODE); //Read what's currently there
 80070a0:	2001      	movs	r0, #1
 80070a2:	f7ff ffa3 	bl	8006fec <readRegister>
	mosetting |= (mode << 4); //Mask in mode
 80070a6:	2c04      	cmp	r4, #4
 80070a8:	bf28      	it	cs
 80070aa:	2404      	movcs	r4, #4
	mosetting &=~(7<<4); //Clear DRIVE_MODE bits
 80070ac:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	mosetting |= (mode << 4); //Mask in mode
 80070b0:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
 80070b4:	4c05      	ldr	r4, [pc, #20]	; (80070cc <setDriveMode+0x30>)
 80070b6:	b2c9      	uxtb	r1, r1
	writeRegister(CSS811_MEAS_MODE, mosetting);
 80070b8:	2001      	movs	r0, #1
	mosetting |= (mode << 4); //Mask in mode
 80070ba:	7021      	strb	r1, [r4, #0]
	writeRegister(CSS811_MEAS_MODE, mosetting);
 80070bc:	f7ff ffc2 	bl	8007044 <writeRegister>
	mosetting = readRegister(CSS811_MEAS_MODE); //Read what's currently there
 80070c0:	2001      	movs	r0, #1
 80070c2:	f7ff ff93 	bl	8006fec <readRegister>
 80070c6:	7020      	strb	r0, [r4, #0]
}
 80070c8:	bd10      	pop	{r4, pc}
 80070ca:	bf00      	nop
 80070cc:	20002445 	.word	0x20002445

080070d0 <configureCCS811>:
void configureCCS811() {
 80070d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_Delay(100);
 80070d2:	2064      	movs	r0, #100	; 0x64
 80070d4:	f000 fcfa 	bl	8007acc <HAL_Delay>
	ccs811_ID = readRegister(0x20); //Hardware ID should be 0x81
 80070d8:	2020      	movs	r0, #32
 80070da:	f7ff ff87 	bl	8006fec <readRegister>
 80070de:	4b16      	ldr	r3, [pc, #88]	; (8007138 <configureCCS811+0x68>)
	if (ccs811_ID != 0x81)
 80070e0:	2881      	cmp	r0, #129	; 0x81
	ccs811_ID = readRegister(0x20); //Hardware ID should be 0x81
 80070e2:	7018      	strb	r0, [r3, #0]
	if (ccs811_ID != 0x81)
 80070e4:	d000      	beq.n	80070e8 <configureCCS811+0x18>
	while (1); //Freeze!
 80070e6:	e7fe      	b.n	80070e6 <configureCCS811+0x16>
	lodata[0]= CSS811_APP_START;
 80070e8:	23f4      	movs	r3, #244	; 0xf4
 80070ea:	f88d 300c 	strb.w	r3, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, CCS811_ADDRD, lodata, 1, 100);
 80070ee:	2364      	movs	r3, #100	; 0x64
 80070f0:	21b4      	movs	r1, #180	; 0xb4
 80070f2:	aa03      	add	r2, sp, #12
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	4811      	ldr	r0, [pc, #68]	; (800713c <configureCCS811+0x6c>)
 80070f8:	2301      	movs	r3, #1
 80070fa:	f001 fc19 	bl	8008930 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80070fe:	2014      	movs	r0, #20
 8007100:	f000 fce4 	bl	8007acc <HAL_Delay>
	setDriveMode(Mode_CCS811); //Read every second
 8007104:	4b0e      	ldr	r3, [pc, #56]	; (8007140 <configureCCS811+0x70>)
 8007106:	7818      	ldrb	r0, [r3, #0]
 8007108:	f7ff ffc8 	bl	800709c <setDriveMode>
	HAL_Delay(10);
 800710c:	200a      	movs	r0, #10
 800710e:	f000 fcdd 	bl	8007acc <HAL_Delay>
	if (checkForError() == 1) {
 8007112:	f7ff ff87 	bl	8007024 <checkForError>
 8007116:	2801      	cmp	r0, #1
 8007118:	d100      	bne.n	800711c <configureCCS811+0x4c>
		while (1); //Freeze!
 800711a:	e7fe      	b.n	800711a <configureCCS811+0x4a>
	if (checkForError() == 1) {
 800711c:	f7ff ff82 	bl	8007024 <checkForError>
 8007120:	2801      	cmp	r0, #1
 8007122:	d100      	bne.n	8007126 <configureCCS811+0x56>
		while (1); //Freeze!
 8007124:	e7fe      	b.n	8007124 <configureCCS811+0x54>
	setEnvironmentalData(relativeHumidity, temperature);
 8007126:	4b07      	ldr	r3, [pc, #28]	; (8007144 <configureCCS811+0x74>)
 8007128:	6819      	ldr	r1, [r3, #0]
 800712a:	4b07      	ldr	r3, [pc, #28]	; (8007148 <configureCCS811+0x78>)
 800712c:	6818      	ldr	r0, [r3, #0]
 800712e:	f7ff fee9 	bl	8006f04 <setEnvironmentalData>
}
 8007132:	b005      	add	sp, #20
 8007134:	f85d fb04 	ldr.w	pc, [sp], #4
 8007138:	20002474 	.word	0x20002474
 800713c:	200024c4 	.word	0x200024c4
 8007140:	2000001c 	.word	0x2000001c
 8007144:	20000024 	.word	0x20000024
 8007148:	20000020 	.word	0x20000020

0800714c <user_i2c_read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800714c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 800714e:	260a      	movs	r6, #10
{
 8007150:	b085      	sub	sp, #20
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8007152:	0047      	lsls	r7, r0, #1
{
 8007154:	4614      	mov	r4, r2
 8007156:	461d      	mov	r5, r3
 8007158:	f88d 100f 	strb.w	r1, [sp, #15]
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 800715c:	2301      	movs	r3, #1
 800715e:	4639      	mov	r1, r7
 8007160:	480b      	ldr	r0, [pc, #44]	; (8007190 <user_i2c_read+0x44>)
 8007162:	9600      	str	r6, [sp, #0]
 8007164:	f10d 020f 	add.w	r2, sp, #15
 8007168:	f001 fbe2 	bl	8008930 <HAL_I2C_Master_Transmit>
 800716c:	b968      	cbnz	r0, 800718a <user_i2c_read+0x3e>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 800716e:	462b      	mov	r3, r5
 8007170:	4622      	mov	r2, r4
 8007172:	4807      	ldr	r0, [pc, #28]	; (8007190 <user_i2c_read+0x44>)
 8007174:	9600      	str	r6, [sp, #0]
 8007176:	f047 0101 	orr.w	r1, r7, #1
 800717a:	f001 fcb1 	bl	8008ae0 <HAL_I2C_Master_Receive>
 800717e:	3800      	subs	r0, #0
 8007180:	bf18      	it	ne
 8007182:	2001      	movne	r0, #1
 8007184:	4240      	negs	r0, r0
  return 0;
}
 8007186:	b005      	add	sp, #20
 8007188:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 800718a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800718e:	e7fa      	b.n	8007186 <user_i2c_read+0x3a>
 8007190:	200024c4 	.word	0x200024c4

08007194 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
  HAL_Delay(period);
 8007194:	f000 bc9a 	b.w	8007acc <HAL_Delay>

08007198 <user_i2c_write>:
}

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8007198:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  int8_t *buf;
  buf = malloc(len +1);
 800719c:	f103 0901 	add.w	r9, r3, #1
{
 80071a0:	4606      	mov	r6, r0
  buf = malloc(len +1);
 80071a2:	4648      	mov	r0, r9
{
 80071a4:	461c      	mov	r4, r3
 80071a6:	4688      	mov	r8, r1
 80071a8:	4617      	mov	r7, r2
  buf = malloc(len +1);
 80071aa:	f003 ff13 	bl	800afd4 <malloc>
  buf[0] = reg_addr;
  memcpy(buf +1, data, len);
 80071ae:	4622      	mov	r2, r4
  buf = malloc(len +1);
 80071b0:	4605      	mov	r5, r0
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 80071b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  memcpy(buf +1, data, len);
 80071b6:	4639      	mov	r1, r7
  buf[0] = reg_addr;
 80071b8:	f800 8b01 	strb.w	r8, [r0], #1
  memcpy(buf +1, data, len);
 80071bc:	f003 ff28 	bl	800b010 <memcpy>
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 80071c0:	0071      	lsls	r1, r6, #1
 80071c2:	462a      	mov	r2, r5
 80071c4:	4808      	ldr	r0, [pc, #32]	; (80071e8 <user_i2c_write+0x50>)
 80071c6:	9400      	str	r4, [sp, #0]
 80071c8:	fa1f f389 	uxth.w	r3, r9
 80071cc:	f001 fbb0 	bl	8008930 <HAL_I2C_Master_Transmit>
 80071d0:	4606      	mov	r6, r0
 80071d2:	b930      	cbnz	r0, 80071e2 <user_i2c_write+0x4a>
  free(buf);
 80071d4:	4628      	mov	r0, r5
 80071d6:	f003 ff05 	bl	800afe4 <free>
  return 0;
 80071da:	4630      	mov	r0, r6
}
 80071dc:	b003      	add	sp, #12
 80071de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 80071e2:	4620      	mov	r0, r4
 80071e4:	e7fa      	b.n	80071dc <user_i2c_write+0x44>
 80071e6:	bf00      	nop
 80071e8:	200024c4 	.word	0x200024c4

080071ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80071ec:	b530      	push	{r4, r5, lr}
 80071ee:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80071f0:	2218      	movs	r2, #24
 80071f2:	2100      	movs	r1, #0
 80071f4:	a80b      	add	r0, sp, #44	; 0x2c
 80071f6:	f003 ff19 	bl	800b02c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80071fa:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80071fc:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80071fe:	2100      	movs	r1, #0
 8007200:	eb0d 0002 	add.w	r0, sp, r2
 8007204:	f003 ff12 	bl	800b02c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007208:	2100      	movs	r1, #0
 800720a:	462a      	mov	r2, r5
 800720c:	a801      	add	r0, sp, #4
 800720e:	f003 ff0d 	bl	800b02c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007212:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007214:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007216:	e9cd 350e 	strd	r3, r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800721a:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800721c:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800721e:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007222:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007224:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007226:	f002 fed5 	bl	8009fd4 <HAL_RCC_OscConfig>
 800722a:	4601      	mov	r1, r0
 800722c:	b108      	cbz	r0, 8007232 <SystemClock_Config+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 800722e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007230:	e7fe      	b.n	8007230 <SystemClock_Config+0x44>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007232:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007234:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007238:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800723c:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800723e:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007242:	a805      	add	r0, sp, #20
 8007244:	f003 f89c 	bl	800a380 <HAL_RCC_ClockConfig>
 8007248:	b108      	cbz	r0, 800724e <SystemClock_Config+0x62>
 800724a:	b672      	cpsid	i
  while (1)
 800724c:	e7fe      	b.n	800724c <SystemClock_Config+0x60>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800724e:	9003      	str	r0, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007250:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8007252:	9401      	str	r4, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007254:	f003 f950 	bl	800a4f8 <HAL_RCCEx_PeriphCLKConfig>
 8007258:	b108      	cbz	r0, 800725e <SystemClock_Config+0x72>
 800725a:	b672      	cpsid	i
  while (1)
 800725c:	e7fe      	b.n	800725c <SystemClock_Config+0x70>
}
 800725e:	b015      	add	sp, #84	; 0x54
 8007260:	bd30      	pop	{r4, r5, pc}
 8007262:	0000      	movs	r0, r0
 8007264:	0000      	movs	r0, r0
	...

08007268 <main>:
{
 8007268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  Read_control_module_info_from_flash(control_module_id_and_channel);
 800726c:	48a8      	ldr	r0, [pc, #672]	; (8007510 <main+0x2a8>)
{
 800726e:	b08f      	sub	sp, #60	; 0x3c
  Read_control_module_info_from_flash(control_module_id_and_channel);
 8007270:	f7fa f8a0 	bl	80013b4 <Read_control_module_info_from_flash>
  Get_control_module_info_from_main(control_module_id_and_channel);
 8007274:	48a6      	ldr	r0, [pc, #664]	; (8007510 <main+0x2a8>)
 8007276:	f7fc f80b 	bl	8003290 <Get_control_module_info_from_main>
  HAL_Init();
 800727a:	f000 fc03 	bl	8007a84 <HAL_Init>
  SystemClock_Config();
 800727e:	f7ff ffb5 	bl	80071ec <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007282:	2210      	movs	r2, #16
 8007284:	2100      	movs	r1, #0
 8007286:	a80a      	add	r0, sp, #40	; 0x28
 8007288:	f003 fed0 	bl	800b02c <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800728c:	4ba1      	ldr	r3, [pc, #644]	; (8007514 <main+0x2ac>)
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin, GPIO_PIN_RESET);
 800728e:	f641 4110 	movw	r1, #7184	; 0x1c10
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007292:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin, GPIO_PIN_RESET);
 8007294:	48a0      	ldr	r0, [pc, #640]	; (8007518 <main+0x2b0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007296:	f042 0204 	orr.w	r2, r2, #4
 800729a:	619a      	str	r2, [r3, #24]
 800729c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800729e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80072a0:	f002 0204 	and.w	r2, r2, #4
 80072a4:	9206      	str	r2, [sp, #24]
 80072a6:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80072a8:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072aa:	2602      	movs	r6, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80072ac:	f042 0208 	orr.w	r2, r2, #8
 80072b0:	619a      	str	r2, [r3, #24]
 80072b2:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin, GPIO_PIN_RESET);
 80072b4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80072b6:	f003 0308 	and.w	r3, r3, #8
 80072ba:	9307      	str	r3, [sp, #28]
 80072bc:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin, GPIO_PIN_RESET);
 80072be:	f001 f899 	bl	80083f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LORA_RESET_Pin|CO2_WAKE_UP_Pin, GPIO_PIN_RESET);
 80072c2:	2200      	movs	r2, #0
 80072c4:	f44f 6101 	mov.w	r1, #2064	; 0x810
 80072c8:	4894      	ldr	r0, [pc, #592]	; (800751c <main+0x2b4>)
 80072ca:	f001 f893 	bl	80083f4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072ce:	2501      	movs	r5, #1
 80072d0:	f641 4310 	movw	r3, #7184	; 0x1c10
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80072d4:	f240 4704 	movw	r7, #1028	; 0x404
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072d8:	488f      	ldr	r0, [pc, #572]	; (8007518 <main+0x2b0>)
 80072da:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072dc:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072e0:	e9cd 460c 	strd	r4, r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072e4:	f000 ffa4 	bl	8008230 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80072e8:	4b8d      	ldr	r3, [pc, #564]	; (8007520 <main+0x2b8>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072ea:	488c      	ldr	r0, [pc, #560]	; (800751c <main+0x2b4>)
 80072ec:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80072ee:	e9cd 730a 	strd	r7, r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80072f2:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072f4:	f000 ff9c 	bl	8008230 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LORA_RESET_Pin|CO2_WAKE_UP_Pin;
 80072f8:	f44f 6301 	mov.w	r3, #2064	; 0x810
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072fc:	4887      	ldr	r0, [pc, #540]	; (800751c <main+0x2b4>)
 80072fe:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007300:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007304:	e9cd 460c 	strd	r4, r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007308:	f000 ff92 	bl	8008230 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800730c:	4622      	mov	r2, r4
 800730e:	4621      	mov	r1, r4
 8007310:	2008      	movs	r0, #8
 8007312:	f000 fdbd 	bl	8007e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8007316:	2008      	movs	r0, #8
 8007318:	f000 fdec 	bl	8007ef4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800731c:	4622      	mov	r2, r4
 800731e:	4621      	mov	r1, r4
 8007320:	2028      	movs	r0, #40	; 0x28
 8007322:	f000 fdb5 	bl	8007e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007326:	2028      	movs	r0, #40	; 0x28
 8007328:	f000 fde4 	bl	8007ef4 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 800732c:	487d      	ldr	r0, [pc, #500]	; (8007524 <main+0x2bc>)
  hi2c1.Init.ClockSpeed = 100000;
 800732e:	f8df c22c 	ldr.w	ip, [pc, #556]	; 800755c <main+0x2f4>
 8007332:	4b7d      	ldr	r3, [pc, #500]	; (8007528 <main+0x2c0>)
  hi2c1.Init.OwnAddress1 = 0;
 8007334:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8007338:	e9c0 c300 	strd	ip, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800733c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007340:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007344:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007348:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800734a:	f001 fa49 	bl	80087e0 <HAL_I2C_Init>
 800734e:	4603      	mov	r3, r0
 8007350:	b108      	cbz	r0, 8007356 <main+0xee>
 8007352:	b672      	cpsid	i
  while (1)
 8007354:	e7fe      	b.n	8007354 <main+0xec>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007356:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Instance = SPI1;
 800735a:	4874      	ldr	r0, [pc, #464]	; (800752c <main+0x2c4>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800735c:	4c74      	ldr	r4, [pc, #464]	; (8007530 <main+0x2c8>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800735e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007362:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007366:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800736a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800736e:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007372:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007376:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007378:	230a      	movs	r3, #10
 800737a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800737c:	f003 fa0c 	bl	800a798 <HAL_SPI_Init>
 8007380:	4606      	mov	r6, r0
 8007382:	b108      	cbz	r0, 8007388 <main+0x120>
 8007384:	b672      	cpsid	i
  while (1)
 8007386:	e7fe      	b.n	8007386 <main+0x11e>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007388:	4601      	mov	r1, r0
 800738a:	2210      	movs	r2, #16
 800738c:	a80a      	add	r0, sp, #40	; 0x28
 800738e:	f003 fe4d 	bl	800b02c <memset>
  htim2.Init.Prescaler = 72;
 8007392:	2348      	movs	r3, #72	; 0x48
 8007394:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 8007398:	4c66      	ldr	r4, [pc, #408]	; (8007534 <main+0x2cc>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800739a:	e9cd 6608 	strd	r6, r6, [sp, #32]
  htim2.Init.Prescaler = 72;
 800739e:	e9c4 1300 	strd	r1, r3, [r4]
  htim2.Init.Period = 65535;
 80073a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80073a6:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80073a8:	e9c4 3603 	strd	r3, r6, [r4, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80073ac:	60a6      	str	r6, [r4, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80073ae:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80073b0:	f003 fcc0 	bl	800ad34 <HAL_TIM_Base_Init>
 80073b4:	b108      	cbz	r0, 80073ba <main+0x152>
 80073b6:	b672      	cpsid	i
  while (1)
 80073b8:	e7fe      	b.n	80073b8 <main+0x150>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80073ba:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80073be:	4620      	mov	r0, r4
 80073c0:	a90a      	add	r1, sp, #40	; 0x28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80073c2:	960a      	str	r6, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80073c4:	f003 fcec 	bl	800ada0 <HAL_TIM_ConfigClockSource>
 80073c8:	b108      	cbz	r0, 80073ce <main+0x166>
 80073ca:	b672      	cpsid	i
  while (1)
 80073cc:	e7fe      	b.n	80073cc <main+0x164>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80073ce:	e9cd 0008 	strd	r0, r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80073d2:	a908      	add	r1, sp, #32
 80073d4:	4620      	mov	r0, r4
 80073d6:	f003 fd77 	bl	800aec8 <HAL_TIMEx_MasterConfigSynchronization>
 80073da:	b108      	cbz	r0, 80073e0 <main+0x178>
 80073dc:	b672      	cpsid	i
  while (1)
 80073de:	e7fe      	b.n	80073de <main+0x176>
  hadc1.Instance = ADC1;
 80073e0:	4c55      	ldr	r4, [pc, #340]	; (8007538 <main+0x2d0>)
 80073e2:	4b56      	ldr	r3, [pc, #344]	; (800753c <main+0x2d4>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80073e4:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  hadc1.Instance = ADC1;
 80073e8:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80073ea:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 80073ee:	900c      	str	r0, [sp, #48]	; 0x30
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80073f0:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80073f2:	7320      	strb	r0, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80073f4:	7520      	strb	r0, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80073f6:	6060      	str	r0, [r4, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80073f8:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80073fa:	61e3      	str	r3, [r4, #28]
  hadc1.Init.NbrOfConversion = 1;
 80073fc:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80073fe:	f000 fc4f 	bl	8007ca0 <HAL_ADC_Init>
 8007402:	b108      	cbz	r0, 8007408 <main+0x1a0>
 8007404:	b672      	cpsid	i
  while (1)
 8007406:	e7fe      	b.n	8007406 <main+0x19e>
  sConfig.Channel = ADC_CHANNEL_8;
 8007408:	2308      	movs	r3, #8
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800740a:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800740e:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007410:	4620      	mov	r0, r4
 8007412:	a90a      	add	r1, sp, #40	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8007414:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007416:	f000 fb6b 	bl	8007af0 <HAL_ADC_ConfigChannel>
 800741a:	4605      	mov	r5, r0
 800741c:	b108      	cbz	r0, 8007422 <main+0x1ba>
 800741e:	b672      	cpsid	i
  while (1)
 8007420:	e7fe      	b.n	8007420 <main+0x1b8>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007422:	2210      	movs	r2, #16
 8007424:	4601      	mov	r1, r0
 8007426:	a80a      	add	r0, sp, #40	; 0x28
 8007428:	f003 fe00 	bl	800b02c <memset>
  htim4.Init.Prescaler = 3999;
 800742c:	f640 739f 	movw	r3, #3999	; 0xf9f
  htim4.Instance = TIM4;
 8007430:	4c43      	ldr	r4, [pc, #268]	; (8007540 <main+0x2d8>)
  htim4.Init.Prescaler = 3999;
 8007432:	4a44      	ldr	r2, [pc, #272]	; (8007544 <main+0x2dc>)
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007434:	4620      	mov	r0, r4
  htim4.Init.Prescaler = 3999;
 8007436:	e9c4 2300 	strd	r2, r3, [r4]
  htim4.Init.Period = 9999;
 800743a:	f242 730f 	movw	r3, #9999	; 0x270f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800743e:	e9cd 5508 	strd	r5, r5, [sp, #32]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007442:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007446:	60a5      	str	r5, [r4, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007448:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800744a:	f003 fc73 	bl	800ad34 <HAL_TIM_Base_Init>
 800744e:	b108      	cbz	r0, 8007454 <main+0x1ec>
 8007450:	b672      	cpsid	i
  while (1)
 8007452:	e7fe      	b.n	8007452 <main+0x1ea>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007454:	4620      	mov	r0, r4
 8007456:	a90a      	add	r1, sp, #40	; 0x28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007458:	960a      	str	r6, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800745a:	f003 fca1 	bl	800ada0 <HAL_TIM_ConfigClockSource>
 800745e:	b108      	cbz	r0, 8007464 <main+0x1fc>
 8007460:	b672      	cpsid	i
  while (1)
 8007462:	e7fe      	b.n	8007462 <main+0x1fa>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007464:	e9cd 0008 	strd	r0, r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007468:	a908      	add	r1, sp, #32
 800746a:	4620      	mov	r0, r4
 800746c:	f003 fd2c 	bl	800aec8 <HAL_TIMEx_MasterConfigSynchronization>
 8007470:	b108      	cbz	r0, 8007476 <main+0x20e>
 8007472:	b672      	cpsid	i
  while (1)
 8007474:	e7fe      	b.n	8007474 <main+0x20c>
  Init_lora_module(&hspi1);
 8007476:	482d      	ldr	r0, [pc, #180]	; (800752c <main+0x2c4>)
 8007478:	f7fb ff22 	bl	80032c0 <Init_lora_module>
  LoRa_begin_result = Begin_lora_module(BAND, true, 14, 8, 250E3, 0x4A);
 800747c:	a122      	add	r1, pc, #136	; (adr r1, 8007508 <main+0x2a0>)
 800747e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007482:	234a      	movs	r3, #74	; 0x4a
 8007484:	9304      	str	r3, [sp, #16]
 8007486:	2300      	movs	r3, #0
 8007488:	4a2f      	ldr	r2, [pc, #188]	; (8007548 <main+0x2e0>)
 800748a:	4c30      	ldr	r4, [pc, #192]	; (800754c <main+0x2e4>)
 800748c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007490:	2308      	movs	r3, #8
 8007492:	2201      	movs	r2, #1
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	230e      	movs	r3, #14
 8007498:	f7fb ff18 	bl	80032cc <Begin_lora_module>
 800749c:	7020      	strb	r0, [r4, #0]
  if(LoRa_begin_result == 0) {
 800749e:	2800      	cmp	r0, #0
 80074a0:	d05e      	beq.n	8007560 <main+0x2f8>
  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_RESET);
 80074a2:	2200      	movs	r2, #0
 80074a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80074a8:	481b      	ldr	r0, [pc, #108]	; (8007518 <main+0x2b0>)
 80074aa:	f000 ffa3 	bl	80083f4 <HAL_GPIO_WritePin>
  rslt = bme280_init(&dev);
 80074ae:	4c28      	ldr	r4, [pc, #160]	; (8007550 <main+0x2e8>)
  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_RESET);
 80074b0:	2200      	movs	r2, #0
 80074b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80074b6:	4818      	ldr	r0, [pc, #96]	; (8007518 <main+0x2b0>)
 80074b8:	f000 ff9c 	bl	80083f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_RESET);
 80074bc:	2200      	movs	r2, #0
 80074be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80074c2:	4815      	ldr	r0, [pc, #84]	; (8007518 <main+0x2b0>)
 80074c4:	f000 ff96 	bl	80083f4 <HAL_GPIO_WritePin>
  rslt = bme280_init(&dev);
 80074c8:	4620      	mov	r0, r4
 80074ca:	f7ff f9cd 	bl	8006868 <bme280_init>
 80074ce:	4d21      	ldr	r5, [pc, #132]	; (8007554 <main+0x2ec>)
  dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 80074d0:	4b21      	ldr	r3, [pc, #132]	; (8007558 <main+0x2f0>)
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 80074d2:	4621      	mov	r1, r4
  dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 80074d4:	63a3      	str	r3, [r4, #56]	; 0x38
  rslt = bme280_init(&dev);
 80074d6:	7028      	strb	r0, [r5, #0]
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 80074d8:	200f      	movs	r0, #15
 80074da:	f7ff fa6a 	bl	80069b2 <bme280_set_sensor_settings>
  rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 80074de:	4621      	mov	r1, r4
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 80074e0:	7028      	strb	r0, [r5, #0]
  rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 80074e2:	2003      	movs	r0, #3
 80074e4:	f7ff faa0 	bl	8006a28 <bme280_set_sensor_mode>
 80074e8:	7028      	strb	r0, [r5, #0]
  configureCCS811();
 80074ea:	f7ff fdf1 	bl	80070d0 <configureCCS811>
  HAL_ADCEx_Calibration_Start(&hadc1);
 80074ee:	4812      	ldr	r0, [pc, #72]	; (8007538 <main+0x2d0>)
 80074f0:	f000 fc54 	bl	8007d9c <HAL_ADCEx_Calibration_Start>
  HAL_Delay(1000);
 80074f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80074f8:	f000 fae8 	bl	8007acc <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim4);
 80074fc:	4810      	ldr	r0, [pc, #64]	; (8007540 <main+0x2d8>)
 80074fe:	f003 fb11 	bl	800ab24 <HAL_TIM_Base_Start_IT>
  while (1)
 8007502:	e7fe      	b.n	8007502 <main+0x29a>
 8007504:	f3af 8000 	nop.w
 8007508:	19e6b4f0 	.word	0x19e6b4f0
 800750c:	00000000 	.word	0x00000000
 8007510:	20002448 	.word	0x20002448
 8007514:	40021000 	.word	0x40021000
 8007518:	40010800 	.word	0x40010800
 800751c:	40010c00 	.word	0x40010c00
 8007520:	10110000 	.word	0x10110000
 8007524:	200024c4 	.word	0x200024c4
 8007528:	000186a0 	.word	0x000186a0
 800752c:	2000255c 	.word	0x2000255c
 8007530:	40013000 	.word	0x40013000
 8007534:	200025b4 	.word	0x200025b4
 8007538:	20002528 	.word	0x20002528
 800753c:	40012400 	.word	0x40012400
 8007540:	20002478 	.word	0x20002478
 8007544:	40000800 	.word	0x40000800
 8007548:	0003d090 	.word	0x0003d090
 800754c:	200024c0 	.word	0x200024c0
 8007550:	20000028 	.word	0x20000028
 8007554:	200024c1 	.word	0x200024c1
 8007558:	04010205 	.word	0x04010205
 800755c:	40005400 	.word	0x40005400
 8007560:	2505      	movs	r5, #5
		  HAL_GPIO_TogglePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin);
 8007562:	4e23      	ldr	r6, [pc, #140]	; (80075f0 <main+0x388>)
 8007564:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007568:	4630      	mov	r0, r6
 800756a:	f000 ff48 	bl	80083fe <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin);
 800756e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007572:	4630      	mov	r0, r6
 8007574:	f000 ff43 	bl	80083fe <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin);
 8007578:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800757c:	4630      	mov	r0, r6
 800757e:	f000 ff3e 	bl	80083fe <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8007582:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007586:	f000 faa1 	bl	8007acc <HAL_Delay>
	  for (int i = 0; i < 5; ++i) {
 800758a:	3d01      	subs	r5, #1
 800758c:	d1ea      	bne.n	8007564 <main+0x2fc>
		  LoRa_begin_result = Begin_lora_module(BAND, true, 14, 8, 250E3, 0x4A);
 800758e:	f20f 0958 	addw	r9, pc, #88	; 0x58
 8007592:	e9d9 8900 	ldrd	r8, r9, [r9]
 8007596:	2700      	movs	r7, #0
 8007598:	4e16      	ldr	r6, [pc, #88]	; (80075f4 <main+0x38c>)
			  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 800759a:	4d15      	ldr	r5, [pc, #84]	; (80075f0 <main+0x388>)
	  while(LoRa_begin_result != 0) {
 800759c:	7823      	ldrb	r3, [r4, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f43f af7f 	beq.w	80074a2 <main+0x23a>
		  LoRa_begin_result = Begin_lora_module(BAND, true, 14, 8, 250E3, 0x4A);
 80075a4:	234a      	movs	r3, #74	; 0x4a
 80075a6:	9304      	str	r3, [sp, #16]
 80075a8:	2308      	movs	r3, #8
 80075aa:	4649      	mov	r1, r9
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	2201      	movs	r2, #1
 80075b0:	230e      	movs	r3, #14
 80075b2:	4640      	mov	r0, r8
 80075b4:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80075b8:	f7fb fe88 	bl	80032cc <Begin_lora_module>
			  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 80075bc:	2201      	movs	r2, #1
		  LoRa_begin_result = Begin_lora_module(BAND, true, 14, 8, 250E3, 0x4A);
 80075be:	7020      	strb	r0, [r4, #0]
			  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 80075c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80075c4:	4628      	mov	r0, r5
 80075c6:	f000 ff15 	bl	80083f4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_RESET);
 80075ca:	4628      	mov	r0, r5
 80075cc:	2200      	movs	r2, #0
 80075ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80075d2:	f000 ff0f 	bl	80083f4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_RESET);
 80075d6:	2200      	movs	r2, #0
 80075d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80075dc:	4628      	mov	r0, r5
 80075de:	f000 ff09 	bl	80083f4 <HAL_GPIO_WritePin>
 80075e2:	e7db      	b.n	800759c <main+0x334>
 80075e4:	f3af 8000 	nop.w
 80075e8:	19e6b4f0 	.word	0x19e6b4f0
 80075ec:	00000000 	.word	0x00000000
 80075f0:	40010800 	.word	0x40010800
 80075f4:	0003d090 	.word	0x0003d090

080075f8 <HAL_GPIO_EXTI_Callback>:
  if(GPIO_Pin== GPIO_PIN_2) {
 80075f8:	2804      	cmp	r0, #4
 80075fa:	d105      	bne.n	8007608 <HAL_GPIO_EXTI_Callback+0x10>
    exti2++;
 80075fc:	4a06      	ldr	r2, [pc, #24]	; (8007618 <HAL_GPIO_EXTI_Callback+0x20>)
    exti5_10++;
 80075fe:	8813      	ldrh	r3, [r2, #0]
 8007600:	3301      	adds	r3, #1
 8007602:	8013      	strh	r3, [r2, #0]
    Contact_group_control_module();
 8007604:	f7fb bec6 	b.w	8003394 <Contact_group_control_module>
  } else if(GPIO_Pin== GPIO_PIN_10){
 8007608:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800760c:	d101      	bne.n	8007612 <HAL_GPIO_EXTI_Callback+0x1a>
    exti5_10++;
 800760e:	4a03      	ldr	r2, [pc, #12]	; (800761c <HAL_GPIO_EXTI_Callback+0x24>)
 8007610:	e7f5      	b.n	80075fe <HAL_GPIO_EXTI_Callback+0x6>
    __NOP();
 8007612:	bf00      	nop
}
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	2000255a 	.word	0x2000255a
 800761c:	2000261c 	.word	0x2000261c

08007620 <SensorsGetValues>:
void SensorsGetValues() {
 8007620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8007622:	4d27      	ldr	r5, [pc, #156]	; (80076c0 <SensorsGetValues+0xa0>)
 8007624:	2007      	movs	r0, #7
 8007626:	4629      	mov	r1, r5
 8007628:	4a26      	ldr	r2, [pc, #152]	; (80076c4 <SensorsGetValues+0xa4>)
 800762a:	f7ff fc17 	bl	8006e5c <bme280_get_sensor_data>
 800762e:	4b26      	ldr	r3, [pc, #152]	; (80076c8 <SensorsGetValues+0xa8>)
 8007630:	4c26      	ldr	r4, [pc, #152]	; (80076cc <SensorsGetValues+0xac>)
 8007632:	7018      	strb	r0, [r3, #0]
	if(rslt == BME280_OK)
 8007634:	bb78      	cbnz	r0, 8007696 <SensorsGetValues+0x76>
		sensors_data.temperature = comp_data.temperature / 100.0;      /* C  */
 8007636:	6868      	ldr	r0, [r5, #4]
 8007638:	f7f8 ff90 	bl	800055c <__aeabi_i2d>
 800763c:	2200      	movs	r2, #0
 800763e:	4b24      	ldr	r3, [pc, #144]	; (80076d0 <SensorsGetValues+0xb0>)
 8007640:	f7f9 f920 	bl	8000884 <__aeabi_ddiv>
 8007644:	f7f9 fa8e 	bl	8000b64 <__aeabi_d2f>
 8007648:	6060      	str	r0, [r4, #4]
		sensors_data.humidity = (comp_data.humidity / 1024.0) + offset.humidity_offset;           /* %   */
 800764a:	68a8      	ldr	r0, [r5, #8]
 800764c:	f7f8 ff76 	bl	800053c <__aeabi_ui2d>
 8007650:	2200      	movs	r2, #0
 8007652:	4b20      	ldr	r3, [pc, #128]	; (80076d4 <SensorsGetValues+0xb4>)
 8007654:	f7f8 ffec 	bl	8000630 <__aeabi_dmul>
 8007658:	4b1f      	ldr	r3, [pc, #124]	; (80076d8 <SensorsGetValues+0xb8>)
 800765a:	4606      	mov	r6, r0
 800765c:	6818      	ldr	r0, [r3, #0]
 800765e:	460f      	mov	r7, r1
 8007660:	f7f8 ff8e 	bl	8000580 <__aeabi_f2d>
 8007664:	4602      	mov	r2, r0
 8007666:	460b      	mov	r3, r1
 8007668:	4630      	mov	r0, r6
 800766a:	4639      	mov	r1, r7
 800766c:	f7f8 fe2a 	bl	80002c4 <__adddf3>
 8007670:	f7f9 fa78 	bl	8000b64 <__aeabi_d2f>
 8007674:	60a0      	str	r0, [r4, #8]
		sensors_data.pressure = comp_data.pressure / 10000.0 / 1.333;  /* hPa or mmhg */
 8007676:	6828      	ldr	r0, [r5, #0]
 8007678:	f7f8 ff60 	bl	800053c <__aeabi_ui2d>
 800767c:	a30c      	add	r3, pc, #48	; (adr r3, 80076b0 <SensorsGetValues+0x90>)
 800767e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007682:	f7f9 f8ff 	bl	8000884 <__aeabi_ddiv>
 8007686:	a30c      	add	r3, pc, #48	; (adr r3, 80076b8 <SensorsGetValues+0x98>)
 8007688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768c:	f7f9 f8fa 	bl	8000884 <__aeabi_ddiv>
 8007690:	f7f9 fa68 	bl	8000b64 <__aeabi_d2f>
 8007694:	60e0      	str	r0, [r4, #12]
	CO2_tVOC_res = readAlgorithmResults();
 8007696:	f7ff fc09 	bl	8006eac <readAlgorithmResults>
 800769a:	4605      	mov	r5, r0
	sensors_data.CO2 = (uint16_t)(CO2_tVOC_res >> 16);
 800769c:	0c00      	lsrs	r0, r0, #16
 800769e:	f7f9 fb67 	bl	8000d70 <__aeabi_ui2f>
 80076a2:	6120      	str	r0, [r4, #16]
	sensors_data.TVOC = (uint16_t)CO2_tVOC_res;
 80076a4:	b2a8      	uxth	r0, r5
 80076a6:	f7f9 fb63 	bl	8000d70 <__aeabi_ui2f>
 80076aa:	6160      	str	r0, [r4, #20]
}
 80076ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076ae:	bf00      	nop
 80076b0:	00000000 	.word	0x00000000
 80076b4:	40c38800 	.word	0x40c38800
 80076b8:	ced91687 	.word	0xced91687
 80076bc:	3ff553f7 	.word	0x3ff553f7
 80076c0:	20002518 	.word	0x20002518
 80076c4:	20000028 	.word	0x20000028
 80076c8:	200024c1 	.word	0x200024c1
 80076cc:	20002600 	.word	0x20002600
 80076d0:	40590000 	.word	0x40590000
 80076d4:	3f500000 	.word	0x3f500000
 80076d8:	20000068 	.word	0x20000068

080076dc <HAL_TIM_PeriodElapsedCallback>:
{
 80076dc:	b508      	push	{r3, lr}
	if(htim->Instance == TIM4) //check if the interrupt comes from TIM1
 80076de:	6802      	ldr	r2, [r0, #0]
 80076e0:	4b07      	ldr	r3, [pc, #28]	; (8007700 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d10a      	bne.n	80076fc <HAL_TIM_PeriodElapsedCallback+0x20>
		tim4++;
 80076e6:	4a07      	ldr	r2, [pc, #28]	; (8007704 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80076e8:	7813      	ldrb	r3, [r2, #0]
 80076ea:	3301      	adds	r3, #1
 80076ec:	7013      	strb	r3, [r2, #0]
		SensorsGetValues();
 80076ee:	f7ff ff97 	bl	8007620 <SensorsGetValues>
}
 80076f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Main_cpp(&sensors_data);
 80076f6:	4804      	ldr	r0, [pc, #16]	; (8007708 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80076f8:	f7fb be2c 	b.w	8003354 <Main_cpp>
}
 80076fc:	bd08      	pop	{r3, pc}
 80076fe:	bf00      	nop
 8007700:	40000800 	.word	0x40000800
 8007704:	20002450 	.word	0x20002450
 8007708:	20002600 	.word	0x20002600

0800770c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800770c:	4b0e      	ldr	r3, [pc, #56]	; (8007748 <HAL_MspInit+0x3c>)
{
 800770e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8007710:	699a      	ldr	r2, [r3, #24]
 8007712:	f042 0201 	orr.w	r2, r2, #1
 8007716:	619a      	str	r2, [r3, #24]
 8007718:	699a      	ldr	r2, [r3, #24]
 800771a:	f002 0201 	and.w	r2, r2, #1
 800771e:	9200      	str	r2, [sp, #0]
 8007720:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007722:	69da      	ldr	r2, [r3, #28]
 8007724:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007728:	61da      	str	r2, [r3, #28]
 800772a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800772c:	4a07      	ldr	r2, [pc, #28]	; (800774c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800772e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007732:	9301      	str	r3, [sp, #4]
 8007734:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007736:	6853      	ldr	r3, [r2, #4]
 8007738:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800773c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007740:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007742:	b002      	add	sp, #8
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	40021000 	.word	0x40021000
 800774c:	40010000 	.word	0x40010000

08007750 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007750:	b510      	push	{r4, lr}
 8007752:	4604      	mov	r4, r0
 8007754:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007756:	2210      	movs	r2, #16
 8007758:	2100      	movs	r1, #0
 800775a:	a802      	add	r0, sp, #8
 800775c:	f003 fc66 	bl	800b02c <memset>
  if(hadc->Instance==ADC1)
 8007760:	6822      	ldr	r2, [r4, #0]
 8007762:	4b10      	ldr	r3, [pc, #64]	; (80077a4 <HAL_ADC_MspInit+0x54>)
 8007764:	429a      	cmp	r2, r3
 8007766:	d11b      	bne.n	80077a0 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007768:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800776c:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800776e:	480e      	ldr	r0, [pc, #56]	; (80077a8 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007774:	619a      	str	r2, [r3, #24]
 8007776:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007778:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 800777a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800777e:	9200      	str	r2, [sp, #0]
 8007780:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007782:	699a      	ldr	r2, [r3, #24]
 8007784:	f042 0208 	orr.w	r2, r2, #8
 8007788:	619a      	str	r2, [r3, #24]
 800778a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800778c:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800778e:	f003 0308 	and.w	r3, r3, #8
 8007792:	9301      	str	r3, [sp, #4]
 8007794:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007796:	2303      	movs	r3, #3
 8007798:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800779c:	f000 fd48 	bl	8008230 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80077a0:	b006      	add	sp, #24
 80077a2:	bd10      	pop	{r4, pc}
 80077a4:	40012400 	.word	0x40012400
 80077a8:	40010c00 	.word	0x40010c00

080077ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80077ac:	b510      	push	{r4, lr}
 80077ae:	4604      	mov	r4, r0
 80077b0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077b2:	2210      	movs	r2, #16
 80077b4:	2100      	movs	r1, #0
 80077b6:	a802      	add	r0, sp, #8
 80077b8:	f003 fc38 	bl	800b02c <memset>
  if(hi2c->Instance==I2C1)
 80077bc:	6822      	ldr	r2, [r4, #0]
 80077be:	4b1d      	ldr	r3, [pc, #116]	; (8007834 <HAL_I2C_MspInit+0x88>)
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d134      	bne.n	800782e <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077c4:	4c1c      	ldr	r4, [pc, #112]	; (8007838 <HAL_I2C_MspInit+0x8c>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80077c6:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077ca:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077cc:	481b      	ldr	r0, [pc, #108]	; (800783c <HAL_I2C_MspInit+0x90>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077ce:	f043 0308 	orr.w	r3, r3, #8
 80077d2:	61a3      	str	r3, [r4, #24]
 80077d4:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077d6:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077d8:	f003 0308 	and.w	r3, r3, #8
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80077e0:	2312      	movs	r3, #18
 80077e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80077e6:	2303      	movs	r3, #3
 80077e8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077ea:	f000 fd21 	bl	8008230 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80077ee:	4a14      	ldr	r2, [pc, #80]	; (8007840 <HAL_I2C_MspInit+0x94>)

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80077f0:	201f      	movs	r0, #31
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80077f2:	6853      	ldr	r3, [r2, #4]
 80077f4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80077f8:	f043 0302 	orr.w	r3, r3, #2
 80077fc:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80077fe:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007800:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8007802:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007804:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007808:	61e3      	str	r3, [r4, #28]
 800780a:	69e3      	ldr	r3, [r4, #28]
 800780c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8007814:	f000 fb3c 	bl	8007e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8007818:	201f      	movs	r0, #31
 800781a:	f000 fb6b 	bl	8007ef4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800781e:	2200      	movs	r2, #0
 8007820:	2020      	movs	r0, #32
 8007822:	4611      	mov	r1, r2
 8007824:	f000 fb34 	bl	8007e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8007828:	2020      	movs	r0, #32
 800782a:	f000 fb63 	bl	8007ef4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800782e:	b006      	add	sp, #24
 8007830:	bd10      	pop	{r4, pc}
 8007832:	bf00      	nop
 8007834:	40005400 	.word	0x40005400
 8007838:	40021000 	.word	0x40021000
 800783c:	40010c00 	.word	0x40010c00
 8007840:	40010000 	.word	0x40010000

08007844 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007844:	b510      	push	{r4, lr}
 8007846:	4604      	mov	r4, r0
 8007848:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800784a:	2210      	movs	r2, #16
 800784c:	2100      	movs	r1, #0
 800784e:	a802      	add	r0, sp, #8
 8007850:	f003 fbec 	bl	800b02c <memset>
  if(hspi->Instance==SPI1)
 8007854:	6822      	ldr	r2, [r4, #0]
 8007856:	4b1a      	ldr	r3, [pc, #104]	; (80078c0 <HAL_SPI_MspInit+0x7c>)
 8007858:	429a      	cmp	r2, r3
 800785a:	d12e      	bne.n	80078ba <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800785c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8007860:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007862:	4818      	ldr	r0, [pc, #96]	; (80078c4 <HAL_SPI_MspInit+0x80>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007864:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007868:	619a      	str	r2, [r3, #24]
 800786a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800786c:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 800786e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007872:	9200      	str	r2, [sp, #0]
 8007874:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007876:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007878:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800787a:	f042 0204 	orr.w	r2, r2, #4
 800787e:	619a      	str	r2, [r3, #24]
 8007880:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007882:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007884:	f003 0304 	and.w	r3, r3, #4
 8007888:	9301      	str	r3, [sp, #4]
 800788a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800788c:	2302      	movs	r3, #2
 800788e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007892:	2303      	movs	r3, #3
 8007894:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007896:	f000 fccb 	bl	8008230 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800789a:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800789c:	4809      	ldr	r0, [pc, #36]	; (80078c4 <HAL_SPI_MspInit+0x80>)
 800789e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80078a0:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078a4:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078a6:	f000 fcc3 	bl	8008230 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80078aa:	2023      	movs	r0, #35	; 0x23
 80078ac:	4622      	mov	r2, r4
 80078ae:	4621      	mov	r1, r4
 80078b0:	f000 faee 	bl	8007e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80078b4:	2023      	movs	r0, #35	; 0x23
 80078b6:	f000 fb1d 	bl	8007ef4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80078ba:	b006      	add	sp, #24
 80078bc:	bd10      	pop	{r4, pc}
 80078be:	bf00      	nop
 80078c0:	40013000 	.word	0x40013000
 80078c4:	40010800 	.word	0x40010800

080078c8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80078c8:	6803      	ldr	r3, [r0, #0]
{
 80078ca:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 80078cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d0:	d10d      	bne.n	80078ee <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80078d2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80078d6:	69da      	ldr	r2, [r3, #28]
 80078d8:	f042 0201 	orr.w	r2, r2, #1
 80078dc:	61da      	str	r2, [r3, #28]
 80078de:	69db      	ldr	r3, [r3, #28]
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80078e8:	b003      	add	sp, #12
 80078ea:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM4)
 80078ee:	4a0c      	ldr	r2, [pc, #48]	; (8007920 <HAL_TIM_Base_MspInit+0x58>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d1f9      	bne.n	80078e8 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80078f4:	4b0b      	ldr	r3, [pc, #44]	; (8007924 <HAL_TIM_Base_MspInit+0x5c>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80078f6:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 80078f8:	69da      	ldr	r2, [r3, #28]
 80078fa:	f042 0204 	orr.w	r2, r2, #4
 80078fe:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007900:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007902:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007904:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007906:	f003 0304 	and.w	r3, r3, #4
 800790a:	9301      	str	r3, [sp, #4]
 800790c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800790e:	f000 fabf 	bl	8007e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007912:	201e      	movs	r0, #30
}
 8007914:	b003      	add	sp, #12
 8007916:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800791a:	f000 baeb 	b.w	8007ef4 <HAL_NVIC_EnableIRQ>
 800791e:	bf00      	nop
 8007920:	40000800 	.word	0x40000800
 8007924:	40021000 	.word	0x40021000

08007928 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007928:	e7fe      	b.n	8007928 <NMI_Handler>

0800792a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800792a:	e7fe      	b.n	800792a <HardFault_Handler>

0800792c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800792c:	e7fe      	b.n	800792c <MemManage_Handler>

0800792e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800792e:	e7fe      	b.n	800792e <BusFault_Handler>

08007930 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007930:	e7fe      	b.n	8007930 <UsageFault_Handler>

08007932 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007932:	4770      	bx	lr

08007934 <DebugMon_Handler>:
 8007934:	4770      	bx	lr

08007936 <PendSV_Handler>:
 8007936:	4770      	bx	lr

08007938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007938:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800793a:	f000 f8b5 	bl	8007aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  ++hal_tick;
 800793e:	4a02      	ldr	r2, [pc, #8]	; (8007948 <SysTick_Handler+0x10>)
 8007940:	6813      	ldr	r3, [r2, #0]
 8007942:	3301      	adds	r3, #1
 8007944:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8007946:	bd08      	pop	{r3, pc}
 8007948:	20002454 	.word	0x20002454

0800794c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800794c:	2004      	movs	r0, #4
 800794e:	f000 bd5f 	b.w	8008410 <HAL_GPIO_EXTI_IRQHandler>
	...

08007954 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007954:	4801      	ldr	r0, [pc, #4]	; (800795c <TIM4_IRQHandler+0x8>)
 8007956:	f003 b913 	b.w	800ab80 <HAL_TIM_IRQHandler>
 800795a:	bf00      	nop
 800795c:	20002478 	.word	0x20002478

08007960 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8007960:	4801      	ldr	r0, [pc, #4]	; (8007968 <I2C1_EV_IRQHandler+0x8>)
 8007962:	f001 be45 	b.w	80095f0 <HAL_I2C_EV_IRQHandler>
 8007966:	bf00      	nop
 8007968:	200024c4 	.word	0x200024c4

0800796c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800796c:	4801      	ldr	r0, [pc, #4]	; (8007974 <I2C1_ER_IRQHandler+0x8>)
 800796e:	f002 ba8f 	b.w	8009e90 <HAL_I2C_ER_IRQHandler>
 8007972:	bf00      	nop
 8007974:	200024c4 	.word	0x200024c4

08007978 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8007978:	4801      	ldr	r0, [pc, #4]	; (8007980 <SPI1_IRQHandler+0x8>)
 800797a:	f003 b855 	b.w	800aa28 <HAL_SPI_IRQHandler>
 800797e:	bf00      	nop
 8007980:	2000255c 	.word	0x2000255c

08007984 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8007984:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007988:	f000 bd42 	b.w	8008410 <HAL_GPIO_EXTI_IRQHandler>

0800798c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800798c:	2001      	movs	r0, #1
 800798e:	4770      	bx	lr

08007990 <_kill>:

int _kill(int pid, int sig)
{
 8007990:	b508      	push	{r3, lr}
	errno = EINVAL;
 8007992:	f003 faf5 	bl	800af80 <__errno>
 8007996:	2316      	movs	r3, #22
 8007998:	6003      	str	r3, [r0, #0]
	return -1;
}
 800799a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800799e:	bd08      	pop	{r3, pc}

080079a0 <_exit>:

void _exit (int status)
{
 80079a0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80079a2:	f003 faed 	bl	800af80 <__errno>
 80079a6:	2316      	movs	r3, #22
 80079a8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80079aa:	e7fe      	b.n	80079aa <_exit+0xa>

080079ac <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80079ac:	4b0b      	ldr	r3, [pc, #44]	; (80079dc <_sbrk+0x30>)
{
 80079ae:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 80079b0:	6819      	ldr	r1, [r3, #0]
{
 80079b2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80079b4:	b909      	cbnz	r1, 80079ba <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80079b6:	490a      	ldr	r1, [pc, #40]	; (80079e0 <_sbrk+0x34>)
 80079b8:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80079ba:	6818      	ldr	r0, [r3, #0]
 80079bc:	4909      	ldr	r1, [pc, #36]	; (80079e4 <_sbrk+0x38>)
 80079be:	4c0a      	ldr	r4, [pc, #40]	; (80079e8 <_sbrk+0x3c>)
 80079c0:	4402      	add	r2, r0
 80079c2:	1b09      	subs	r1, r1, r4
 80079c4:	428a      	cmp	r2, r1
 80079c6:	d906      	bls.n	80079d6 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80079c8:	f003 fada 	bl	800af80 <__errno>
 80079cc:	230c      	movs	r3, #12
 80079ce:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80079d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80079d4:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80079d6:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 80079d8:	e7fc      	b.n	80079d4 <_sbrk+0x28>
 80079da:	bf00      	nop
 80079dc:	20002458 	.word	0x20002458
 80079e0:	20002658 	.word	0x20002658
 80079e4:	20005000 	.word	0x20005000
 80079e8:	00000400 	.word	0x00000400

080079ec <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80079ec:	4770      	bx	lr
	...

080079f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80079f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80079f2:	e003      	b.n	80079fc <LoopCopyDataInit>

080079f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80079f4:	4b0b      	ldr	r3, [pc, #44]	; (8007a24 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80079f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80079f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80079fa:	3104      	adds	r1, #4

080079fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80079fc:	480a      	ldr	r0, [pc, #40]	; (8007a28 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80079fe:	4b0b      	ldr	r3, [pc, #44]	; (8007a2c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8007a00:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8007a02:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007a04:	d3f6      	bcc.n	80079f4 <CopyDataInit>
  ldr r2, =_sbss
 8007a06:	4a0a      	ldr	r2, [pc, #40]	; (8007a30 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8007a08:	e002      	b.n	8007a10 <LoopFillZerobss>

08007a0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8007a0a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8007a0c:	f842 3b04 	str.w	r3, [r2], #4

08007a10 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8007a10:	4b08      	ldr	r3, [pc, #32]	; (8007a34 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8007a12:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007a14:	d3f9      	bcc.n	8007a0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007a16:	f7ff ffe9 	bl	80079ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007a1a:	f003 fab7 	bl	800af8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007a1e:	f7ff fc23 	bl	8007268 <main>
  bx lr
 8007a22:	4770      	bx	lr
  ldr r3, =_sidata
 8007a24:	0800b364 	.word	0x0800b364
  ldr r0, =_sdata
 8007a28:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8007a2c:	200000e4 	.word	0x200000e4
  ldr r2, =_sbss
 8007a30:	200000e8 	.word	0x200000e8
  ldr r3, = _ebss
 8007a34:	20002658 	.word	0x20002658

08007a38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007a38:	e7fe      	b.n	8007a38 <ADC1_2_IRQHandler>
	...

08007a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007a3c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007a3e:	4b0e      	ldr	r3, [pc, #56]	; (8007a78 <HAL_InitTick+0x3c>)
{
 8007a40:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007a42:	7818      	ldrb	r0, [r3, #0]
 8007a44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a48:	fbb3 f3f0 	udiv	r3, r3, r0
 8007a4c:	4a0b      	ldr	r2, [pc, #44]	; (8007a7c <HAL_InitTick+0x40>)
 8007a4e:	6810      	ldr	r0, [r2, #0]
 8007a50:	fbb0 f0f3 	udiv	r0, r0, r3
 8007a54:	f000 fa5c 	bl	8007f10 <HAL_SYSTICK_Config>
 8007a58:	4604      	mov	r4, r0
 8007a5a:	b958      	cbnz	r0, 8007a74 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007a5c:	2d0f      	cmp	r5, #15
 8007a5e:	d809      	bhi.n	8007a74 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007a60:	4602      	mov	r2, r0
 8007a62:	4629      	mov	r1, r5
 8007a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a68:	f000 fa12 	bl	8007e90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	4b04      	ldr	r3, [pc, #16]	; (8007a80 <HAL_InitTick+0x44>)
 8007a70:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8007a72:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007a74:	2001      	movs	r0, #1
 8007a76:	e7fc      	b.n	8007a72 <HAL_InitTick+0x36>
 8007a78:	20000078 	.word	0x20000078
 8007a7c:	20000074 	.word	0x20000074
 8007a80:	2000007c 	.word	0x2000007c

08007a84 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007a84:	4a07      	ldr	r2, [pc, #28]	; (8007aa4 <HAL_Init+0x20>)
{
 8007a86:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007a88:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007a8a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007a8c:	f043 0310 	orr.w	r3, r3, #16
 8007a90:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007a92:	f000 f9eb 	bl	8007e6c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8007a96:	2000      	movs	r0, #0
 8007a98:	f7ff ffd0 	bl	8007a3c <HAL_InitTick>
  HAL_MspInit();
 8007a9c:	f7ff fe36 	bl	800770c <HAL_MspInit>
}
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	bd08      	pop	{r3, pc}
 8007aa4:	40022000 	.word	0x40022000

08007aa8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007aa8:	4a03      	ldr	r2, [pc, #12]	; (8007ab8 <HAL_IncTick+0x10>)
 8007aaa:	4b04      	ldr	r3, [pc, #16]	; (8007abc <HAL_IncTick+0x14>)
 8007aac:	6811      	ldr	r1, [r2, #0]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	440b      	add	r3, r1
 8007ab2:	6013      	str	r3, [r2, #0]
}
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	20002620 	.word	0x20002620
 8007abc:	20000078 	.word	0x20000078

08007ac0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007ac0:	4b01      	ldr	r3, [pc, #4]	; (8007ac8 <HAL_GetTick+0x8>)
 8007ac2:	6818      	ldr	r0, [r3, #0]
}
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	20002620 	.word	0x20002620

08007acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007acc:	b538      	push	{r3, r4, r5, lr}
 8007ace:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007ad0:	f7ff fff6 	bl	8007ac0 <HAL_GetTick>
 8007ad4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007ad6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8007ad8:	bf1e      	ittt	ne
 8007ada:	4b04      	ldrne	r3, [pc, #16]	; (8007aec <HAL_Delay+0x20>)
 8007adc:	781b      	ldrbne	r3, [r3, #0]
 8007ade:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007ae0:	f7ff ffee 	bl	8007ac0 <HAL_GetTick>
 8007ae4:	1b43      	subs	r3, r0, r5
 8007ae6:	42a3      	cmp	r3, r4
 8007ae8:	d3fa      	bcc.n	8007ae0 <HAL_Delay+0x14>
  {
  }
}
 8007aea:	bd38      	pop	{r3, r4, r5, pc}
 8007aec:	20000078 	.word	0x20000078

08007af0 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8007af0:	2300      	movs	r3, #0
{ 
 8007af2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8007af4:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007af6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 8007afa:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d06c      	beq.n	8007bda <HAL_ADC_ConfigChannel+0xea>
 8007b00:	2301      	movs	r3, #1
 8007b02:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007b06:	684d      	ldr	r5, [r1, #4]
 8007b08:	6802      	ldr	r2, [r0, #0]
 8007b0a:	2d06      	cmp	r5, #6
 8007b0c:	6808      	ldr	r0, [r1, #0]
 8007b0e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8007b12:	d822      	bhi.n	8007b5a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8007b14:	261f      	movs	r6, #31
 8007b16:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8007b18:	3b05      	subs	r3, #5
 8007b1a:	409e      	lsls	r6, r3
 8007b1c:	ea25 0506 	bic.w	r5, r5, r6
 8007b20:	fa00 f303 	lsl.w	r3, r0, r3
 8007b24:	432b      	orrs	r3, r5
 8007b26:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007b28:	2809      	cmp	r0, #9
 8007b2a:	688b      	ldr	r3, [r1, #8]
 8007b2c:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8007b30:	f04f 0107 	mov.w	r1, #7
 8007b34:	d929      	bls.n	8007b8a <HAL_ADC_ConfigChannel+0x9a>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007b36:	68d6      	ldr	r6, [r2, #12]
 8007b38:	3d1e      	subs	r5, #30
 8007b3a:	40a9      	lsls	r1, r5
 8007b3c:	ea26 0101 	bic.w	r1, r6, r1
 8007b40:	40ab      	lsls	r3, r5
 8007b42:	430b      	orrs	r3, r1
 8007b44:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007b46:	f1a0 0310 	sub.w	r3, r0, #16
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d925      	bls.n	8007b9a <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b4e:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007b50:	2300      	movs	r3, #0
 8007b52:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8007b56:	b002      	add	sp, #8
 8007b58:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8007b5a:	2d0c      	cmp	r5, #12
 8007b5c:	f04f 051f 	mov.w	r5, #31
 8007b60:	d809      	bhi.n	8007b76 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8007b62:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8007b64:	3b23      	subs	r3, #35	; 0x23
 8007b66:	409d      	lsls	r5, r3
 8007b68:	ea26 0505 	bic.w	r5, r6, r5
 8007b6c:	fa00 f303 	lsl.w	r3, r0, r3
 8007b70:	432b      	orrs	r3, r5
 8007b72:	6313      	str	r3, [r2, #48]	; 0x30
 8007b74:	e7d8      	b.n	8007b28 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8007b76:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8007b78:	3b41      	subs	r3, #65	; 0x41
 8007b7a:	409d      	lsls	r5, r3
 8007b7c:	ea26 0505 	bic.w	r5, r6, r5
 8007b80:	fa00 f303 	lsl.w	r3, r0, r3
 8007b84:	432b      	orrs	r3, r5
 8007b86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b88:	e7ce      	b.n	8007b28 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8007b8a:	6910      	ldr	r0, [r2, #16]
 8007b8c:	40a9      	lsls	r1, r5
 8007b8e:	ea20 0101 	bic.w	r1, r0, r1
 8007b92:	40ab      	lsls	r3, r5
 8007b94:	430b      	orrs	r3, r1
 8007b96:	6113      	str	r3, [r2, #16]
 8007b98:	e7d9      	b.n	8007b4e <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8007b9a:	4b11      	ldr	r3, [pc, #68]	; (8007be0 <HAL_ADC_ConfigChannel+0xf0>)
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d116      	bne.n	8007bce <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8007ba0:	6893      	ldr	r3, [r2, #8]
 8007ba2:	021b      	lsls	r3, r3, #8
 8007ba4:	d4d3      	bmi.n	8007b4e <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007ba6:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007ba8:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007baa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007bae:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007bb0:	d1cd      	bne.n	8007b4e <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007bb2:	4b0c      	ldr	r3, [pc, #48]	; (8007be4 <HAL_ADC_ConfigChannel+0xf4>)
 8007bb4:	4a0c      	ldr	r2, [pc, #48]	; (8007be8 <HAL_ADC_ConfigChannel+0xf8>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	fbb3 f2f2 	udiv	r2, r3, r2
 8007bbc:	230a      	movs	r3, #10
 8007bbe:	4353      	muls	r3, r2
            wait_loop_index--;
 8007bc0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8007bc2:	9b01      	ldr	r3, [sp, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d0c2      	beq.n	8007b4e <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8007bc8:	9b01      	ldr	r3, [sp, #4]
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	e7f8      	b.n	8007bc0 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007bce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8007bd0:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007bd2:	f043 0320 	orr.w	r3, r3, #32
 8007bd6:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8007bd8:	e7ba      	b.n	8007b50 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8007bda:	2002      	movs	r0, #2
 8007bdc:	e7bb      	b.n	8007b56 <HAL_ADC_ConfigChannel+0x66>
 8007bde:	bf00      	nop
 8007be0:	40012400 	.word	0x40012400
 8007be4:	20000074 	.word	0x20000074
 8007be8:	000f4240 	.word	0x000f4240

08007bec <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8007bec:	2300      	movs	r3, #0
{
 8007bee:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8007bf0:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007bf2:	6803      	ldr	r3, [r0, #0]
{
 8007bf4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007bf6:	689a      	ldr	r2, [r3, #8]
 8007bf8:	07d2      	lsls	r2, r2, #31
 8007bfa:	d502      	bpl.n	8007c02 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007bfc:	2000      	movs	r0, #0
}
 8007bfe:	b002      	add	sp, #8
 8007c00:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8007c02:	689a      	ldr	r2, [r3, #8]
 8007c04:	f042 0201 	orr.w	r2, r2, #1
 8007c08:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007c0a:	4b12      	ldr	r3, [pc, #72]	; (8007c54 <ADC_Enable+0x68>)
 8007c0c:	4a12      	ldr	r2, [pc, #72]	; (8007c58 <ADC_Enable+0x6c>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8007c14:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8007c16:	9b01      	ldr	r3, [sp, #4]
 8007c18:	b9c3      	cbnz	r3, 8007c4c <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8007c1a:	f7ff ff51 	bl	8007ac0 <HAL_GetTick>
 8007c1e:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	689d      	ldr	r5, [r3, #8]
 8007c24:	f015 0501 	ands.w	r5, r5, #1
 8007c28:	d1e8      	bne.n	8007bfc <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007c2a:	f7ff ff49 	bl	8007ac0 <HAL_GetTick>
 8007c2e:	1b80      	subs	r0, r0, r6
 8007c30:	2802      	cmp	r0, #2
 8007c32:	d9f5      	bls.n	8007c20 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8007c36:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c38:	f043 0310 	orr.w	r3, r3, #16
 8007c3c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8007c40:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c44:	f043 0301 	orr.w	r3, r3, #1
 8007c48:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_ERROR;
 8007c4a:	e7d8      	b.n	8007bfe <ADC_Enable+0x12>
      wait_loop_index--;
 8007c4c:	9b01      	ldr	r3, [sp, #4]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	e7e0      	b.n	8007c14 <ADC_Enable+0x28>
 8007c52:	bf00      	nop
 8007c54:	20000074 	.word	0x20000074
 8007c58:	000f4240 	.word	0x000f4240

08007c5c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8007c5c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007c5e:	6803      	ldr	r3, [r0, #0]
{
 8007c60:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007c62:	689a      	ldr	r2, [r3, #8]
 8007c64:	07d2      	lsls	r2, r2, #31
 8007c66:	d401      	bmi.n	8007c6c <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007c68:	2000      	movs	r0, #0
}
 8007c6a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8007c6c:	689a      	ldr	r2, [r3, #8]
 8007c6e:	f022 0201 	bic.w	r2, r2, #1
 8007c72:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8007c74:	f7ff ff24 	bl	8007ac0 <HAL_GetTick>
 8007c78:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	07db      	lsls	r3, r3, #31
 8007c80:	d5f2      	bpl.n	8007c68 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007c82:	f7ff ff1d 	bl	8007ac0 <HAL_GetTick>
 8007c86:	1b40      	subs	r0, r0, r5
 8007c88:	2802      	cmp	r0, #2
 8007c8a:	d9f6      	bls.n	8007c7a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c8e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c90:	f043 0310 	orr.w	r3, r3, #16
 8007c94:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007c98:	f043 0301 	orr.w	r3, r3, #1
 8007c9c:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_ERROR;
 8007c9e:	e7e4      	b.n	8007c6a <ADC_ConversionStop_Disable+0xe>

08007ca0 <HAL_ADC_Init>:
{
 8007ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	d06e      	beq.n	8007d86 <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007ca8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007caa:	b923      	cbnz	r3, 8007cb6 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8007cac:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8007cae:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8007cb2:	f7ff fd4d 	bl	8007750 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f7ff ffd0 	bl	8007c5c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007cbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007cbe:	f013 0310 	ands.w	r3, r3, #16
 8007cc2:	d162      	bne.n	8007d8a <HAL_ADC_Init+0xea>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	d160      	bne.n	8007d8a <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 8007cc8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007cca:	69e5      	ldr	r5, [r4, #28]
 8007ccc:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8007cce:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8007cd2:	f022 0202 	bic.w	r2, r2, #2
 8007cd6:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007cda:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8007cdc:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8007cde:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8007ce0:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8007ce2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007ce6:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8007cea:	d037      	beq.n	8007d5c <HAL_ADC_Init+0xbc>
 8007cec:	2d01      	cmp	r5, #1
 8007cee:	bf14      	ite	ne
 8007cf0:	2700      	movne	r7, #0
 8007cf2:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007cf6:	7d26      	ldrb	r6, [r4, #20]
 8007cf8:	2e01      	cmp	r6, #1
 8007cfa:	d106      	bne.n	8007d0a <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8007cfc:	bb82      	cbnz	r2, 8007d60 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8007cfe:	69a2      	ldr	r2, [r4, #24]
 8007d00:	3a01      	subs	r2, #1
 8007d02:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 8007d06:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8007d0a:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8007d0c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8007d10:	6856      	ldr	r6, [r2, #4]
 8007d12:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8007d16:	ea46 0607 	orr.w	r6, r6, r7
 8007d1a:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8007d1c:	6897      	ldr	r7, [r2, #8]
 8007d1e:	4e1d      	ldr	r6, [pc, #116]	; (8007d94 <HAL_ADC_Init+0xf4>)
 8007d20:	ea06 0607 	and.w	r6, r6, r7
 8007d24:	ea46 0601 	orr.w	r6, r6, r1
 8007d28:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8007d2a:	d001      	beq.n	8007d30 <HAL_ADC_Init+0x90>
 8007d2c:	2d01      	cmp	r5, #1
 8007d2e:	d102      	bne.n	8007d36 <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8007d30:	6923      	ldr	r3, [r4, #16]
 8007d32:	3b01      	subs	r3, #1
 8007d34:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8007d36:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8007d38:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8007d3c:	432b      	orrs	r3, r5
 8007d3e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007d40:	6892      	ldr	r2, [r2, #8]
 8007d42:	4b15      	ldr	r3, [pc, #84]	; (8007d98 <HAL_ADC_Init+0xf8>)
 8007d44:	4013      	ands	r3, r2
 8007d46:	4299      	cmp	r1, r3
 8007d48:	d113      	bne.n	8007d72 <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8007d4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007d50:	f023 0303 	bic.w	r3, r3, #3
 8007d54:	f043 0301 	orr.w	r3, r3, #1
 8007d58:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8007d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8007d5c:	462f      	mov	r7, r5
 8007d5e:	e7ca      	b.n	8007cf6 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007d60:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007d62:	f042 0220 	orr.w	r2, r2, #32
 8007d66:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007d6a:	f042 0201 	orr.w	r2, r2, #1
 8007d6e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8007d70:	e7cb      	b.n	8007d0a <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 8007d72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007d74:	f023 0312 	bic.w	r3, r3, #18
 8007d78:	f043 0310 	orr.w	r3, r3, #16
 8007d7c:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007d80:	f043 0301 	orr.w	r3, r3, #1
 8007d84:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8007d86:	2001      	movs	r0, #1
 8007d88:	e7e7      	b.n	8007d5a <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007d8c:	f043 0310 	orr.w	r3, r3, #16
 8007d90:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8007d92:	e7f8      	b.n	8007d86 <HAL_ADC_Init+0xe6>
 8007d94:	ffe1f7fd 	.word	0xffe1f7fd
 8007d98:	ff1f0efe 	.word	0xff1f0efe

08007d9c <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8007d9c:	2300      	movs	r3, #0
{
 8007d9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8007da0:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007da2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8007da6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d05a      	beq.n	8007e62 <HAL_ADCEx_Calibration_Start+0xc6>
 8007dac:	2301      	movs	r3, #1
 8007dae:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8007db2:	f7ff ff53 	bl	8007c5c <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007db6:	4605      	mov	r5, r0
 8007db8:	2800      	cmp	r0, #0
 8007dba:	d132      	bne.n	8007e22 <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007dbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8007dbe:	2002      	movs	r0, #2
    ADC_STATE_CLR_SET(hadc->State,
 8007dc0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007dc4:	f023 0302 	bic.w	r3, r3, #2
 8007dc8:	f043 0302 	orr.w	r3, r3, #2
 8007dcc:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8007dce:	4b26      	ldr	r3, [pc, #152]	; (8007e68 <HAL_ADCEx_Calibration_Start+0xcc>)
 8007dd0:	681e      	ldr	r6, [r3, #0]
 8007dd2:	f002 fc09 	bl	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007dd6:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8007dda:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 8007ddc:	9601      	str	r6, [sp, #4]

    while(wait_loop_index != 0U)
 8007dde:	9b01      	ldr	r3, [sp, #4]
 8007de0:	bb1b      	cbnz	r3, 8007e2a <HAL_ADCEx_Calibration_Start+0x8e>
    {
      wait_loop_index--;
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8007de2:	4620      	mov	r0, r4
 8007de4:	f7ff ff02 	bl	8007bec <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8007de8:	6822      	ldr	r2, [r4, #0]
 8007dea:	6893      	ldr	r3, [r2, #8]
 8007dec:	f043 0308 	orr.w	r3, r3, #8
 8007df0:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 8007df2:	f7ff fe65 	bl	8007ac0 <HAL_GetTick>
 8007df6:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8007df8:	6823      	ldr	r3, [r4, #0]
 8007dfa:	689a      	ldr	r2, [r3, #8]
 8007dfc:	0712      	lsls	r2, r2, #28
 8007dfe:	d418      	bmi.n	8007e32 <HAL_ADCEx_Calibration_Start+0x96>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8007e00:	689a      	ldr	r2, [r3, #8]
 8007e02:	f042 0204 	orr.w	r2, r2, #4
 8007e06:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8007e08:	f7ff fe5a 	bl	8007ac0 <HAL_GetTick>
 8007e0c:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	075b      	lsls	r3, r3, #29
 8007e14:	d41f      	bmi.n	8007e56 <HAL_ADCEx_Calibration_Start+0xba>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007e18:	f023 0303 	bic.w	r3, r3, #3
 8007e1c:	f043 0301 	orr.w	r3, r3, #1
 8007e20:	62a3      	str	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007e22:	2300      	movs	r3, #0
 8007e24:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007e28:	e012      	b.n	8007e50 <HAL_ADCEx_Calibration_Start+0xb4>
      wait_loop_index--;
 8007e2a:	9b01      	ldr	r3, [sp, #4]
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	9301      	str	r3, [sp, #4]
 8007e30:	e7d5      	b.n	8007dde <HAL_ADCEx_Calibration_Start+0x42>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8007e32:	f7ff fe45 	bl	8007ac0 <HAL_GetTick>
 8007e36:	1b80      	subs	r0, r0, r6
 8007e38:	280a      	cmp	r0, #10
 8007e3a:	d9dd      	bls.n	8007df8 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 8007e3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        return HAL_ERROR;
 8007e3e:	2501      	movs	r5, #1
        ADC_STATE_CLR_SET(hadc->State,
 8007e40:	f023 0312 	bic.w	r3, r3, #18
 8007e44:	f043 0310 	orr.w	r3, r3, #16
 8007e48:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8007e50:	4628      	mov	r0, r5
 8007e52:	b002      	add	sp, #8
 8007e54:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8007e56:	f7ff fe33 	bl	8007ac0 <HAL_GetTick>
 8007e5a:	1b80      	subs	r0, r0, r6
 8007e5c:	280a      	cmp	r0, #10
 8007e5e:	d9d6      	bls.n	8007e0e <HAL_ADCEx_Calibration_Start+0x72>
 8007e60:	e7ec      	b.n	8007e3c <HAL_ADCEx_Calibration_Start+0xa0>
  __HAL_LOCK(hadc);
 8007e62:	2502      	movs	r5, #2
 8007e64:	e7f4      	b.n	8007e50 <HAL_ADCEx_Calibration_Start+0xb4>
 8007e66:	bf00      	nop
 8007e68:	20000074 	.word	0x20000074

08007e6c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e6c:	4907      	ldr	r1, [pc, #28]	; (8007e8c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007e6e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e70:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007e72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e7a:	0412      	lsls	r2, r2, #16
 8007e7c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8007e88:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007e8a:	4770      	bx	lr
 8007e8c:	e000ed00 	.word	0xe000ed00

08007e90 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e90:	4b16      	ldr	r3, [pc, #88]	; (8007eec <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007e92:	b530      	push	{r4, r5, lr}
 8007e94:	68dc      	ldr	r4, [r3, #12]
 8007e96:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007e9a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007e9e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ea0:	2b04      	cmp	r3, #4
 8007ea2:	bf28      	it	cs
 8007ea4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ea6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ea8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007eac:	bf98      	it	ls
 8007eae:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007eb0:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007eb4:	bf88      	it	hi
 8007eb6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007eb8:	ea21 0303 	bic.w	r3, r1, r3
 8007ebc:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ebe:	fa05 f404 	lsl.w	r4, r5, r4
 8007ec2:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8007ec6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ec8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ecc:	bfac      	ite	ge
 8007ece:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ed2:	4a07      	ldrlt	r2, [pc, #28]	; (8007ef0 <HAL_NVIC_SetPriority+0x60>)
 8007ed4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007ed8:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007eda:	bfab      	itete	ge
 8007edc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ee0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ee4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ee8:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007eea:	bd30      	pop	{r4, r5, pc}
 8007eec:	e000ed00 	.word	0xe000ed00
 8007ef0:	e000ed14 	.word	0xe000ed14

08007ef4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	db08      	blt.n	8007f0a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ef8:	2301      	movs	r3, #1
 8007efa:	0942      	lsrs	r2, r0, #5
 8007efc:	f000 001f 	and.w	r0, r0, #31
 8007f00:	fa03 f000 	lsl.w	r0, r3, r0
 8007f04:	4b01      	ldr	r3, [pc, #4]	; (8007f0c <HAL_NVIC_EnableIRQ+0x18>)
 8007f06:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007f0a:	4770      	bx	lr
 8007f0c:	e000e100 	.word	0xe000e100

08007f10 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f10:	3801      	subs	r0, #1
 8007f12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007f16:	d20a      	bcs.n	8007f2e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f18:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f1a:	4b06      	ldr	r3, [pc, #24]	; (8007f34 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f1c:	4a06      	ldr	r2, [pc, #24]	; (8007f38 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f1e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f20:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f24:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007f26:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f28:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007f2c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8007f2e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	e000e010 	.word	0xe000e010
 8007f38:	e000ed00 	.word	0xe000ed00

08007f3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007f3c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007f3e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d003      	beq.n	8007f4e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f46:	2304      	movs	r3, #4
 8007f48:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8007f4a:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8007f4c:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f4e:	6803      	ldr	r3, [r0, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	f022 020e 	bic.w	r2, r2, #14
 8007f56:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	f022 0201 	bic.w	r2, r2, #1
 8007f5e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007f60:	4a17      	ldr	r2, [pc, #92]	; (8007fc0 <HAL_DMA_Abort_IT+0x84>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d01c      	beq.n	8007fa0 <HAL_DMA_Abort_IT+0x64>
 8007f66:	3214      	adds	r2, #20
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d01b      	beq.n	8007fa4 <HAL_DMA_Abort_IT+0x68>
 8007f6c:	3214      	adds	r2, #20
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d01a      	beq.n	8007fa8 <HAL_DMA_Abort_IT+0x6c>
 8007f72:	3214      	adds	r2, #20
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d01a      	beq.n	8007fae <HAL_DMA_Abort_IT+0x72>
 8007f78:	3214      	adds	r2, #20
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d01a      	beq.n	8007fb4 <HAL_DMA_Abort_IT+0x78>
 8007f7e:	3214      	adds	r2, #20
 8007f80:	4293      	cmp	r3, r2
 8007f82:	bf0c      	ite	eq
 8007f84:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8007f88:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8007f8c:	4a0d      	ldr	r2, [pc, #52]	; (8007fc4 <HAL_DMA_Abort_IT+0x88>)
 8007f8e:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8007f90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f94:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8007f96:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007f98:	b17b      	cbz	r3, 8007fba <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 8007f9a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	e7d5      	b.n	8007f4c <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e7f3      	b.n	8007f8c <HAL_DMA_Abort_IT+0x50>
 8007fa4:	2310      	movs	r3, #16
 8007fa6:	e7f1      	b.n	8007f8c <HAL_DMA_Abort_IT+0x50>
 8007fa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fac:	e7ee      	b.n	8007f8c <HAL_DMA_Abort_IT+0x50>
 8007fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fb2:	e7eb      	b.n	8007f8c <HAL_DMA_Abort_IT+0x50>
 8007fb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fb8:	e7e8      	b.n	8007f8c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8007fba:	4618      	mov	r0, r3
 8007fbc:	e7c6      	b.n	8007f4c <HAL_DMA_Abort_IT+0x10>
 8007fbe:	bf00      	nop
 8007fc0:	40020008 	.word	0x40020008
 8007fc4:	40020000 	.word	0x40020000

08007fc8 <HAL_DMA_GetState>:
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
}
 8007fc8:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 8007fcc:	4770      	bx	lr
	...

08007fd0 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8007fd0:	4a11      	ldr	r2, [pc, #68]	; (8008018 <FLASH_SetErrorCode+0x48>)
 8007fd2:	68d3      	ldr	r3, [r2, #12]
 8007fd4:	f013 0310 	ands.w	r3, r3, #16
 8007fd8:	d005      	beq.n	8007fe6 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007fda:	4910      	ldr	r1, [pc, #64]	; (800801c <FLASH_SetErrorCode+0x4c>)
 8007fdc:	69cb      	ldr	r3, [r1, #28]
 8007fde:	f043 0302 	orr.w	r3, r3, #2
 8007fe2:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8007fe4:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007fe6:	68d2      	ldr	r2, [r2, #12]
 8007fe8:	0750      	lsls	r0, r2, #29
 8007fea:	d506      	bpl.n	8007ffa <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8007fec:	490b      	ldr	r1, [pc, #44]	; (800801c <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8007fee:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8007ff2:	69ca      	ldr	r2, [r1, #28]
 8007ff4:	f042 0201 	orr.w	r2, r2, #1
 8007ff8:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8007ffa:	4a07      	ldr	r2, [pc, #28]	; (8008018 <FLASH_SetErrorCode+0x48>)
 8007ffc:	69d1      	ldr	r1, [r2, #28]
 8007ffe:	07c9      	lsls	r1, r1, #31
 8008000:	d508      	bpl.n	8008014 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8008002:	4806      	ldr	r0, [pc, #24]	; (800801c <FLASH_SetErrorCode+0x4c>)
 8008004:	69c1      	ldr	r1, [r0, #28]
 8008006:	f041 0104 	orr.w	r1, r1, #4
 800800a:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800800c:	69d1      	ldr	r1, [r2, #28]
 800800e:	f021 0101 	bic.w	r1, r1, #1
 8008012:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8008014:	60d3      	str	r3, [r2, #12]
}  
 8008016:	4770      	bx	lr
 8008018:	40022000 	.word	0x40022000
 800801c:	20002628 	.word	0x20002628

08008020 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008020:	4b06      	ldr	r3, [pc, #24]	; (800803c <HAL_FLASH_Unlock+0x1c>)
 8008022:	6918      	ldr	r0, [r3, #16]
 8008024:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008028:	d007      	beq.n	800803a <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800802a:	4a05      	ldr	r2, [pc, #20]	; (8008040 <HAL_FLASH_Unlock+0x20>)
 800802c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800802e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8008032:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008034:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8008036:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 800803a:	4770      	bx	lr
 800803c:	40022000 	.word	0x40022000
 8008040:	45670123 	.word	0x45670123

08008044 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8008044:	4a03      	ldr	r2, [pc, #12]	; (8008054 <HAL_FLASH_Lock+0x10>)
}
 8008046:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8008048:	6913      	ldr	r3, [r2, #16]
 800804a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800804e:	6113      	str	r3, [r2, #16]
}
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	40022000 	.word	0x40022000

08008058 <FLASH_WaitForLastOperation>:
{
 8008058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800805c:	f7ff fd30 	bl	8007ac0 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8008060:	4d11      	ldr	r5, [pc, #68]	; (80080a8 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 8008062:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8008064:	462e      	mov	r6, r5
 8008066:	68eb      	ldr	r3, [r5, #12]
 8008068:	07d8      	lsls	r0, r3, #31
 800806a:	d412      	bmi.n	8008092 <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800806c:	68eb      	ldr	r3, [r5, #12]
 800806e:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008070:	bf44      	itt	mi
 8008072:	2320      	movmi	r3, #32
 8008074:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8008076:	68f3      	ldr	r3, [r6, #12]
 8008078:	06da      	lsls	r2, r3, #27
 800807a:	d406      	bmi.n	800808a <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800807c:	69f3      	ldr	r3, [r6, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800807e:	07db      	lsls	r3, r3, #31
 8008080:	d403      	bmi.n	800808a <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8008082:	68f0      	ldr	r0, [r6, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8008084:	f010 0004 	ands.w	r0, r0, #4
 8008088:	d007      	beq.n	800809a <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 800808a:	f7ff ffa1 	bl	8007fd0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800808e:	2001      	movs	r0, #1
 8008090:	e003      	b.n	800809a <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8008092:	1c63      	adds	r3, r4, #1
 8008094:	d0e7      	beq.n	8008066 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8008096:	b90c      	cbnz	r4, 800809c <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8008098:	2003      	movs	r0, #3
}
 800809a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800809c:	f7ff fd10 	bl	8007ac0 <HAL_GetTick>
 80080a0:	1bc0      	subs	r0, r0, r7
 80080a2:	42a0      	cmp	r0, r4
 80080a4:	d9df      	bls.n	8008066 <FLASH_WaitForLastOperation+0xe>
 80080a6:	e7f7      	b.n	8008098 <FLASH_WaitForLastOperation+0x40>
 80080a8:	40022000 	.word	0x40022000

080080ac <HAL_FLASH_Program>:
{
 80080ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 80080b0:	4e25      	ldr	r6, [pc, #148]	; (8008148 <HAL_FLASH_Program+0x9c>)
{
 80080b2:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 80080b4:	7e33      	ldrb	r3, [r6, #24]
{
 80080b6:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80080b8:	2b01      	cmp	r3, #1
{
 80080ba:	4688      	mov	r8, r1
 80080bc:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 80080be:	d040      	beq.n	8008142 <HAL_FLASH_Program+0x96>
 80080c0:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80080c2:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80080c6:	7633      	strb	r3, [r6, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80080c8:	f7ff ffc6 	bl	8008058 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80080cc:	bba8      	cbnz	r0, 800813a <HAL_FLASH_Program+0x8e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80080ce:	2d01      	cmp	r5, #1
 80080d0:	d003      	beq.n	80080da <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 80080d2:	2d02      	cmp	r5, #2
 80080d4:	bf0c      	ite	eq
 80080d6:	2502      	moveq	r5, #2
 80080d8:	2504      	movne	r5, #4
 80080da:	f04f 0a00 	mov.w	sl, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80080de:	4653      	mov	r3, sl
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80080e0:	f8df b068 	ldr.w	fp, [pc, #104]	; 800814c <HAL_FLASH_Program+0xa0>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80080e4:	ea4f 140a 	mov.w	r4, sl, lsl #4
 80080e8:	f1c4 0120 	rsb	r1, r4, #32
 80080ec:	f1a4 0220 	sub.w	r2, r4, #32
 80080f0:	fa07 f101 	lsl.w	r1, r7, r1
 80080f4:	fa29 f404 	lsr.w	r4, r9, r4
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80080f8:	61f3      	str	r3, [r6, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80080fa:	430c      	orrs	r4, r1
 80080fc:	fa27 f202 	lsr.w	r2, r7, r2
 8008100:	4314      	orrs	r4, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008102:	f8db 2010 	ldr.w	r2, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8008106:	b2a4      	uxth	r4, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008108:	f042 0201 	orr.w	r2, r2, #1
 800810c:	f8cb 2010 	str.w	r2, [fp, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008110:	f24c 3050 	movw	r0, #50000	; 0xc350
  *(__IO uint16_t*)Address = Data;
 8008114:	f828 401a 	strh.w	r4, [r8, sl, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008118:	f7ff ff9e 	bl	8008058 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800811c:	f8db 2010 	ldr.w	r2, [fp, #16]
 8008120:	f022 0201 	bic.w	r2, r2, #1
 8008124:	f8cb 2010 	str.w	r2, [fp, #16]
      if (status != HAL_OK)
 8008128:	b938      	cbnz	r0, 800813a <HAL_FLASH_Program+0x8e>
    for (index = 0U; index < nbiterations; index++)
 800812a:	f10a 0a01 	add.w	sl, sl, #1
 800812e:	fa5f f28a 	uxtb.w	r2, sl
 8008132:	4295      	cmp	r5, r2
 8008134:	f04f 0300 	mov.w	r3, #0
 8008138:	d8d4      	bhi.n	80080e4 <HAL_FLASH_Program+0x38>
  __HAL_UNLOCK(&pFlash);
 800813a:	2300      	movs	r3, #0
 800813c:	7633      	strb	r3, [r6, #24]
}
 800813e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8008142:	2002      	movs	r0, #2
 8008144:	e7fb      	b.n	800813e <HAL_FLASH_Program+0x92>
 8008146:	bf00      	nop
 8008148:	20002628 	.word	0x20002628
 800814c:	40022000 	.word	0x40022000

08008150 <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008150:	2200      	movs	r2, #0
 8008152:	4b06      	ldr	r3, [pc, #24]	; (800816c <FLASH_MassErase.isra.0+0x1c>)
 8008154:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8008156:	4b06      	ldr	r3, [pc, #24]	; (8008170 <FLASH_MassErase.isra.0+0x20>)
 8008158:	691a      	ldr	r2, [r3, #16]
 800815a:	f042 0204 	orr.w	r2, r2, #4
 800815e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008160:	691a      	ldr	r2, [r3, #16]
 8008162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008166:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	20002628 	.word	0x20002628
 8008170:	40022000 	.word	0x40022000

08008174 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008174:	2200      	movs	r2, #0
 8008176:	4b06      	ldr	r3, [pc, #24]	; (8008190 <FLASH_PageErase+0x1c>)
 8008178:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800817a:	4b06      	ldr	r3, [pc, #24]	; (8008194 <FLASH_PageErase+0x20>)
 800817c:	691a      	ldr	r2, [r3, #16]
 800817e:	f042 0202 	orr.w	r2, r2, #2
 8008182:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8008184:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008186:	691a      	ldr	r2, [r3, #16]
 8008188:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800818c:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800818e:	4770      	bx	lr
 8008190:	20002628 	.word	0x20002628
 8008194:	40022000 	.word	0x40022000

08008198 <HAL_FLASHEx_Erase>:
{
 8008198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800819c:	4e22      	ldr	r6, [pc, #136]	; (8008228 <HAL_FLASHEx_Erase+0x90>)
{
 800819e:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80081a0:	7e33      	ldrb	r3, [r6, #24]
{
 80081a2:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d03d      	beq.n	8008224 <HAL_FLASHEx_Erase+0x8c>
 80081a8:	2401      	movs	r4, #1
 80081aa:	7634      	strb	r4, [r6, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80081ac:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80081ae:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d113      	bne.n	80081de <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80081b6:	f7ff ff4f 	bl	8008058 <FLASH_WaitForLastOperation>
 80081ba:	b120      	cbz	r0, 80081c6 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80081bc:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80081be:	2300      	movs	r3, #0
 80081c0:	7633      	strb	r3, [r6, #24]
}
 80081c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 80081c6:	f7ff ffc3 	bl	8008150 <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80081ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 80081ce:	f7ff ff43 	bl	8008058 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80081d2:	4a16      	ldr	r2, [pc, #88]	; (800822c <HAL_FLASHEx_Erase+0x94>)
 80081d4:	6913      	ldr	r3, [r2, #16]
 80081d6:	f023 0304 	bic.w	r3, r3, #4
 80081da:	6113      	str	r3, [r2, #16]
 80081dc:	e7ef      	b.n	80081be <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80081de:	f7ff ff3b 	bl	8008058 <FLASH_WaitForLastOperation>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	d1ea      	bne.n	80081bc <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 80081e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081ea:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 80081ee:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 80081f0:	68af      	ldr	r7, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80081f2:	4c0e      	ldr	r4, [pc, #56]	; (800822c <HAL_FLASHEx_Erase+0x94>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80081f4:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80081f8:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 80081fc:	42bb      	cmp	r3, r7
 80081fe:	d9de      	bls.n	80081be <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8008200:	4638      	mov	r0, r7
 8008202:	f7ff ffb7 	bl	8008174 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008206:	f24c 3050 	movw	r0, #50000	; 0xc350
 800820a:	f7ff ff25 	bl	8008058 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800820e:	6923      	ldr	r3, [r4, #16]
 8008210:	f023 0302 	bic.w	r3, r3, #2
 8008214:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8008216:	b110      	cbz	r0, 800821e <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 8008218:	f8c8 7000 	str.w	r7, [r8]
            break;
 800821c:	e7cf      	b.n	80081be <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 800821e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8008222:	e7e7      	b.n	80081f4 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8008224:	2002      	movs	r0, #2
 8008226:	e7cc      	b.n	80081c2 <HAL_FLASHEx_Erase+0x2a>
 8008228:	20002628 	.word	0x20002628
 800822c:	40022000 	.word	0x40022000

08008230 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008234:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8008236:	4616      	mov	r6, r2
 8008238:	4b64      	ldr	r3, [pc, #400]	; (80083cc <HAL_GPIO_Init+0x19c>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800823a:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80083dc <HAL_GPIO_Init+0x1ac>
 800823e:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 80083e0 <HAL_GPIO_Init+0x1b0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008242:	680d      	ldr	r5, [r1, #0]
 8008244:	fa35 f406 	lsrs.w	r4, r5, r6
 8008248:	d102      	bne.n	8008250 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 800824a:	b003      	add	sp, #12
 800824c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8008250:	f04f 0801 	mov.w	r8, #1
 8008254:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008258:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 800825c:	ea38 0505 	bics.w	r5, r8, r5
 8008260:	d17c      	bne.n	800835c <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8008262:	684d      	ldr	r5, [r1, #4]
 8008264:	2d03      	cmp	r5, #3
 8008266:	d807      	bhi.n	8008278 <HAL_GPIO_Init+0x48>
 8008268:	3d01      	subs	r5, #1
 800826a:	2d02      	cmp	r5, #2
 800826c:	f200 8088 	bhi.w	8008380 <HAL_GPIO_Init+0x150>
 8008270:	e8df f005 	tbb	[pc, r5]
 8008274:	9b96      	.short	0x9b96
 8008276:	a1          	.byte	0xa1
 8008277:	00          	.byte	0x00
 8008278:	2d12      	cmp	r5, #18
 800827a:	f000 8099 	beq.w	80083b0 <HAL_GPIO_Init+0x180>
 800827e:	d86f      	bhi.n	8008360 <HAL_GPIO_Init+0x130>
 8008280:	2d11      	cmp	r5, #17
 8008282:	f000 808f 	beq.w	80083a4 <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008286:	2cff      	cmp	r4, #255	; 0xff
 8008288:	bf98      	it	ls
 800828a:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800828c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008290:	bf88      	it	hi
 8008292:	f100 0a04 	addhi.w	sl, r0, #4
 8008296:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800829a:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800829e:	bf88      	it	hi
 80082a0:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80082a2:	fa09 fb05 	lsl.w	fp, r9, r5
 80082a6:	ea28 080b 	bic.w	r8, r8, fp
 80082aa:	fa02 f505 	lsl.w	r5, r2, r5
 80082ae:	ea48 0505 	orr.w	r5, r8, r5
 80082b2:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80082b6:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80082ba:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80082be:	d04d      	beq.n	800835c <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80082c0:	4f43      	ldr	r7, [pc, #268]	; (80083d0 <HAL_GPIO_Init+0x1a0>)
 80082c2:	f026 0803 	bic.w	r8, r6, #3
 80082c6:	69bd      	ldr	r5, [r7, #24]
 80082c8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80082cc:	f045 0501 	orr.w	r5, r5, #1
 80082d0:	61bd      	str	r5, [r7, #24]
 80082d2:	69bd      	ldr	r5, [r7, #24]
 80082d4:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80082d8:	f005 0501 	and.w	r5, r5, #1
 80082dc:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80082de:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80082e2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80082e4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80082e8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80082ec:	fa09 f90b 	lsl.w	r9, r9, fp
 80082f0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80082f4:	4d37      	ldr	r5, [pc, #220]	; (80083d4 <HAL_GPIO_Init+0x1a4>)
 80082f6:	42a8      	cmp	r0, r5
 80082f8:	d061      	beq.n	80083be <HAL_GPIO_Init+0x18e>
 80082fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80082fe:	42a8      	cmp	r0, r5
 8008300:	d05f      	beq.n	80083c2 <HAL_GPIO_Init+0x192>
 8008302:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008306:	42a8      	cmp	r0, r5
 8008308:	d05d      	beq.n	80083c6 <HAL_GPIO_Init+0x196>
 800830a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800830e:	42a8      	cmp	r0, r5
 8008310:	bf0c      	ite	eq
 8008312:	2503      	moveq	r5, #3
 8008314:	2504      	movne	r5, #4
 8008316:	fa05 f50b 	lsl.w	r5, r5, fp
 800831a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800831e:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8008322:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008324:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8008328:	bf14      	ite	ne
 800832a:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800832c:	43a5      	biceq	r5, r4
 800832e:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8008330:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008332:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8008336:	bf14      	ite	ne
 8008338:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800833a:	43a5      	biceq	r5, r4
 800833c:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800833e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008340:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8008344:	bf14      	ite	ne
 8008346:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008348:	43a5      	biceq	r5, r4
 800834a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800834c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800834e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8008352:	bf14      	ite	ne
 8008354:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008356:	ea25 0404 	biceq.w	r4, r5, r4
 800835a:	60dc      	str	r4, [r3, #12]
	position++;
 800835c:	3601      	adds	r6, #1
 800835e:	e770      	b.n	8008242 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8008360:	4f1d      	ldr	r7, [pc, #116]	; (80083d8 <HAL_GPIO_Init+0x1a8>)
 8008362:	42bd      	cmp	r5, r7
 8008364:	d00c      	beq.n	8008380 <HAL_GPIO_Init+0x150>
 8008366:	d817      	bhi.n	8008398 <HAL_GPIO_Init+0x168>
 8008368:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80083e4 <HAL_GPIO_Init+0x1b4>
 800836c:	454d      	cmp	r5, r9
 800836e:	d007      	beq.n	8008380 <HAL_GPIO_Init+0x150>
 8008370:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8008374:	454d      	cmp	r5, r9
 8008376:	d003      	beq.n	8008380 <HAL_GPIO_Init+0x150>
 8008378:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800837c:	454d      	cmp	r5, r9
 800837e:	d182      	bne.n	8008286 <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008380:	688a      	ldr	r2, [r1, #8]
 8008382:	b1d2      	cbz	r2, 80083ba <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008384:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8008386:	bf08      	it	eq
 8008388:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800838c:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8008390:	bf18      	it	ne
 8008392:	f8c0 8014 	strne.w	r8, [r0, #20]
 8008396:	e776      	b.n	8008286 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8008398:	4565      	cmp	r5, ip
 800839a:	d0f1      	beq.n	8008380 <HAL_GPIO_Init+0x150>
 800839c:	4575      	cmp	r5, lr
 800839e:	e7ee      	b.n	800837e <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80083a0:	68ca      	ldr	r2, [r1, #12]
          break;
 80083a2:	e770      	b.n	8008286 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80083a4:	68ca      	ldr	r2, [r1, #12]
 80083a6:	3204      	adds	r2, #4
          break;
 80083a8:	e76d      	b.n	8008286 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80083aa:	68ca      	ldr	r2, [r1, #12]
 80083ac:	3208      	adds	r2, #8
          break;
 80083ae:	e76a      	b.n	8008286 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80083b0:	68ca      	ldr	r2, [r1, #12]
 80083b2:	320c      	adds	r2, #12
          break;
 80083b4:	e767      	b.n	8008286 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 80083b6:	2200      	movs	r2, #0
 80083b8:	e765      	b.n	8008286 <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80083ba:	2204      	movs	r2, #4
 80083bc:	e763      	b.n	8008286 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80083be:	2500      	movs	r5, #0
 80083c0:	e7a9      	b.n	8008316 <HAL_GPIO_Init+0xe6>
 80083c2:	2501      	movs	r5, #1
 80083c4:	e7a7      	b.n	8008316 <HAL_GPIO_Init+0xe6>
 80083c6:	2502      	movs	r5, #2
 80083c8:	e7a5      	b.n	8008316 <HAL_GPIO_Init+0xe6>
 80083ca:	bf00      	nop
 80083cc:	40010400 	.word	0x40010400
 80083d0:	40021000 	.word	0x40021000
 80083d4:	40010800 	.word	0x40010800
 80083d8:	10220000 	.word	0x10220000
 80083dc:	10310000 	.word	0x10310000
 80083e0:	10320000 	.word	0x10320000
 80083e4:	10120000 	.word	0x10120000

080083e8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80083e8:	6883      	ldr	r3, [r0, #8]
 80083ea:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80083ec:	bf14      	ite	ne
 80083ee:	2001      	movne	r0, #1
 80083f0:	2000      	moveq	r0, #0
 80083f2:	4770      	bx	lr

080083f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80083f4:	b10a      	cbz	r2, 80083fa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80083f6:	6101      	str	r1, [r0, #16]
  }
}
 80083f8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80083fa:	0409      	lsls	r1, r1, #16
 80083fc:	e7fb      	b.n	80083f6 <HAL_GPIO_WritePin+0x2>

080083fe <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80083fe:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008400:	ea01 0203 	and.w	r2, r1, r3
 8008404:	ea21 0103 	bic.w	r1, r1, r3
 8008408:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800840c:	6101      	str	r1, [r0, #16]
}
 800840e:	4770      	bx	lr

08008410 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008410:	4a04      	ldr	r2, [pc, #16]	; (8008424 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8008412:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008414:	6951      	ldr	r1, [r2, #20]
 8008416:	4201      	tst	r1, r0
 8008418:	d002      	beq.n	8008420 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800841a:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800841c:	f7ff f8ec 	bl	80075f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8008420:	bd08      	pop	{r3, pc}
 8008422:	bf00      	nop
 8008424:	40010400 	.word	0x40010400

08008428 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008428:	6801      	ldr	r1, [r0, #0]
 800842a:	2200      	movs	r2, #0
 800842c:	694b      	ldr	r3, [r1, #20]
 800842e:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8008432:	d010      	beq.n	8008456 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008434:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8008438:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 800843a:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800843c:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800843e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008442:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008446:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008448:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800844c:	f043 0304 	orr.w	r3, r3, #4
 8008450:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8008452:	2001      	movs	r0, #1
 8008454:	4770      	bx	lr
  }
  return HAL_OK;
 8008456:	4618      	mov	r0, r3
}
 8008458:	4770      	bx	lr

0800845a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800845a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800845e:	4604      	mov	r4, r0
 8008460:	460f      	mov	r7, r1
 8008462:	4616      	mov	r6, r2
 8008464:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008466:	6825      	ldr	r5, [r4, #0]
 8008468:	6968      	ldr	r0, [r5, #20]
 800846a:	ea27 0000 	bic.w	r0, r7, r0
 800846e:	b280      	uxth	r0, r0
 8008470:	b1b8      	cbz	r0, 80084a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008472:	696b      	ldr	r3, [r5, #20]
 8008474:	055a      	lsls	r2, r3, #21
 8008476:	d516      	bpl.n	80084a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008478:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 800847a:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800847c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008480:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008482:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8008486:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008488:	2300      	movs	r3, #0
 800848a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800848c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008490:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008494:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008496:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 800849a:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800849c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800849e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80084a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80084a6:	1c73      	adds	r3, r6, #1
 80084a8:	d0de      	beq.n	8008468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084aa:	f7ff fb09 	bl	8007ac0 <HAL_GetTick>
 80084ae:	eba0 0008 	sub.w	r0, r0, r8
 80084b2:	42b0      	cmp	r0, r6
 80084b4:	d801      	bhi.n	80084ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 80084b6:	2e00      	cmp	r6, #0
 80084b8:	d1d5      	bne.n	8008466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80084ba:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80084bc:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80084be:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80084c0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80084ca:	f042 0220 	orr.w	r2, r2, #32
 80084ce:	e7e4      	b.n	800849a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

080084d0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	4604      	mov	r4, r0
 80084d4:	460d      	mov	r5, r1
 80084d6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80084d8:	6823      	ldr	r3, [r4, #0]
 80084da:	695b      	ldr	r3, [r3, #20]
 80084dc:	075b      	lsls	r3, r3, #29
 80084de:	d501      	bpl.n	80084e4 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80084e0:	2000      	movs	r0, #0
}
 80084e2:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80084e4:	4620      	mov	r0, r4
 80084e6:	f7ff ff9f 	bl	8008428 <I2C_IsAcknowledgeFailed>
 80084ea:	b9a8      	cbnz	r0, 8008518 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80084ec:	1c6a      	adds	r2, r5, #1
 80084ee:	d0f3      	beq.n	80084d8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084f0:	f7ff fae6 	bl	8007ac0 <HAL_GetTick>
 80084f4:	1b80      	subs	r0, r0, r6
 80084f6:	42a8      	cmp	r0, r5
 80084f8:	d801      	bhi.n	80084fe <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80084fa:	2d00      	cmp	r5, #0
 80084fc:	d1ec      	bne.n	80084d8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80084fe:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8008500:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008502:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008504:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008508:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800850c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800850e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008512:	f042 0220 	orr.w	r2, r2, #32
 8008516:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8008518:	2001      	movs	r0, #1
 800851a:	e7e2      	b.n	80084e2 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

0800851c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800851c:	b570      	push	{r4, r5, r6, lr}
 800851e:	4604      	mov	r4, r0
 8008520:	460d      	mov	r5, r1
 8008522:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008524:	6821      	ldr	r1, [r4, #0]
 8008526:	694b      	ldr	r3, [r1, #20]
 8008528:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800852c:	d001      	beq.n	8008532 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800852e:	2000      	movs	r0, #0
 8008530:	e010      	b.n	8008554 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008532:	694a      	ldr	r2, [r1, #20]
 8008534:	06d2      	lsls	r2, r2, #27
 8008536:	d50e      	bpl.n	8008556 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008538:	f06f 0210 	mvn.w	r2, #16
 800853c:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800853e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008540:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008542:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008546:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800854a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800854c:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800854e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008550:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008554:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008556:	f7ff fab3 	bl	8007ac0 <HAL_GetTick>
 800855a:	1b80      	subs	r0, r0, r6
 800855c:	42a8      	cmp	r0, r5
 800855e:	d801      	bhi.n	8008564 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8008560:	2d00      	cmp	r5, #0
 8008562:	d1df      	bne.n	8008524 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008564:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8008566:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008568:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800856a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800856e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008572:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008574:	f042 0220 	orr.w	r2, r2, #32
 8008578:	e7e8      	b.n	800854c <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

0800857a <I2C_WaitOnFlagUntilTimeout>:
{
 800857a:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 800857e:	4606      	mov	r6, r0
 8008580:	460f      	mov	r7, r1
 8008582:	4691      	mov	r9, r2
 8008584:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008586:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800858a:	6833      	ldr	r3, [r6, #0]
 800858c:	f1ba 0f01 	cmp.w	sl, #1
 8008590:	bf0c      	ite	eq
 8008592:	695c      	ldreq	r4, [r3, #20]
 8008594:	699c      	ldrne	r4, [r3, #24]
 8008596:	ea27 0404 	bic.w	r4, r7, r4
 800859a:	b2a4      	uxth	r4, r4
 800859c:	fab4 f484 	clz	r4, r4
 80085a0:	0964      	lsrs	r4, r4, #5
 80085a2:	45a1      	cmp	r9, r4
 80085a4:	d001      	beq.n	80085aa <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80085a6:	2000      	movs	r0, #0
 80085a8:	e017      	b.n	80085da <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 80085aa:	1c6a      	adds	r2, r5, #1
 80085ac:	d0ee      	beq.n	800858c <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085ae:	f7ff fa87 	bl	8007ac0 <HAL_GetTick>
 80085b2:	9b08      	ldr	r3, [sp, #32]
 80085b4:	1ac0      	subs	r0, r0, r3
 80085b6:	42a8      	cmp	r0, r5
 80085b8:	d801      	bhi.n	80085be <I2C_WaitOnFlagUntilTimeout+0x44>
 80085ba:	2d00      	cmp	r5, #0
 80085bc:	d1e5      	bne.n	800858a <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80085be:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80085c0:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 80085c2:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 80085c4:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80085c6:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80085ca:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80085ce:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80085d0:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80085d4:	f042 0220 	orr.w	r2, r2, #32
 80085d8:	6432      	str	r2, [r6, #64]	; 0x40
}
 80085da:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

080085de <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80085de:	b570      	push	{r4, r5, r6, lr}
 80085e0:	4604      	mov	r4, r0
 80085e2:	460d      	mov	r5, r1
 80085e4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80085e6:	6823      	ldr	r3, [r4, #0]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	061b      	lsls	r3, r3, #24
 80085ec:	d501      	bpl.n	80085f2 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80085ee:	2000      	movs	r0, #0
}
 80085f0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80085f2:	4620      	mov	r0, r4
 80085f4:	f7ff ff18 	bl	8008428 <I2C_IsAcknowledgeFailed>
 80085f8:	b9a8      	cbnz	r0, 8008626 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80085fa:	1c6a      	adds	r2, r5, #1
 80085fc:	d0f3      	beq.n	80085e6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085fe:	f7ff fa5f 	bl	8007ac0 <HAL_GetTick>
 8008602:	1b80      	subs	r0, r0, r6
 8008604:	42a8      	cmp	r0, r5
 8008606:	d801      	bhi.n	800860c <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8008608:	2d00      	cmp	r5, #0
 800860a:	d1ec      	bne.n	80085e6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800860c:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800860e:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008610:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008612:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008616:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800861a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800861c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008620:	f042 0220 	orr.w	r2, r2, #32
 8008624:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8008626:	2001      	movs	r0, #1
 8008628:	e7e2      	b.n	80085f0 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

0800862c <I2C_RequestMemoryWrite>:
{
 800862c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008630:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008632:	6802      	ldr	r2, [r0, #0]
{
 8008634:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008636:	6813      	ldr	r3, [r2, #0]
{
 8008638:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800863a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800863e:	6013      	str	r3, [r2, #0]
{
 8008640:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8008644:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008646:	463b      	mov	r3, r7
 8008648:	2200      	movs	r2, #0
 800864a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800864e:	f8cd 8000 	str.w	r8, [sp]
{
 8008652:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008654:	f7ff ff91 	bl	800857a <I2C_WaitOnFlagUntilTimeout>
 8008658:	6823      	ldr	r3, [r4, #0]
 800865a:	b138      	cbz	r0, 800866c <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	05db      	lsls	r3, r3, #23
 8008660:	d502      	bpl.n	8008668 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008662:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008666:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8008668:	2003      	movs	r0, #3
 800866a:	e00a      	b.n	8008682 <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800866c:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8008670:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008672:	463a      	mov	r2, r7
 8008674:	4643      	mov	r3, r8
 8008676:	4620      	mov	r0, r4
 8008678:	4917      	ldr	r1, [pc, #92]	; (80086d8 <I2C_RequestMemoryWrite+0xac>)
 800867a:	f7ff feee 	bl	800845a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800867e:	b118      	cbz	r0, 8008688 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 8008680:	2001      	movs	r0, #1
}
 8008682:	b005      	add	sp, #20
 8008684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	9003      	str	r0, [sp, #12]
 800868c:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800868e:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008690:	9203      	str	r2, [sp, #12]
 8008692:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008694:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008696:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008698:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800869a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800869c:	f7ff ff9f 	bl	80085de <I2C_WaitOnTXEFlagUntilTimeout>
 80086a0:	b140      	cbz	r0, 80086b4 <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086a4:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086a6:	bf01      	itttt	eq
 80086a8:	6822      	ldreq	r2, [r4, #0]
 80086aa:	6813      	ldreq	r3, [r2, #0]
 80086ac:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80086b0:	6013      	streq	r3, [r2, #0]
 80086b2:	e7e5      	b.n	8008680 <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80086b4:	f1b9 0f01 	cmp.w	r9, #1
 80086b8:	6823      	ldr	r3, [r4, #0]
 80086ba:	d102      	bne.n	80086c2 <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80086bc:	b2ed      	uxtb	r5, r5
 80086be:	611d      	str	r5, [r3, #16]
 80086c0:	e7df      	b.n	8008682 <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80086c2:	0a2a      	lsrs	r2, r5, #8
 80086c4:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086c6:	4639      	mov	r1, r7
 80086c8:	4642      	mov	r2, r8
 80086ca:	4620      	mov	r0, r4
 80086cc:	f7ff ff87 	bl	80085de <I2C_WaitOnTXEFlagUntilTimeout>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d1e6      	bne.n	80086a2 <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80086d4:	6823      	ldr	r3, [r4, #0]
 80086d6:	e7f1      	b.n	80086bc <I2C_RequestMemoryWrite+0x90>
 80086d8:	00010002 	.word	0x00010002

080086dc <I2C_RequestMemoryRead>:
{
 80086dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086e0:	469a      	mov	sl, r3
 80086e2:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086e6:	6803      	ldr	r3, [r0, #0]
{
 80086e8:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086ea:	681a      	ldr	r2, [r3, #0]
{
 80086ec:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80086f2:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086f4:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80086f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086fe:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008700:	463b      	mov	r3, r7
 8008702:	2200      	movs	r2, #0
 8008704:	f8cd 8000 	str.w	r8, [sp]
{
 8008708:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800870a:	f7ff ff36 	bl	800857a <I2C_WaitOnFlagUntilTimeout>
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	b148      	cbz	r0, 8008726 <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008712:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008714:	05db      	lsls	r3, r3, #23
 8008716:	d502      	bpl.n	800871e <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800871c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800871e:	2003      	movs	r0, #3
}
 8008720:	b004      	add	sp, #16
 8008722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008726:	fa5f f986 	uxtb.w	r9, r6
 800872a:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800872e:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008730:	463a      	mov	r2, r7
 8008732:	4643      	mov	r3, r8
 8008734:	4620      	mov	r0, r4
 8008736:	4929      	ldr	r1, [pc, #164]	; (80087dc <I2C_RequestMemoryRead+0x100>)
 8008738:	f7ff fe8f 	bl	800845a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800873c:	b108      	cbz	r0, 8008742 <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 800873e:	2001      	movs	r0, #1
 8008740:	e7ee      	b.n	8008720 <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	9003      	str	r0, [sp, #12]
 8008746:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008748:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800874a:	9203      	str	r2, [sp, #12]
 800874c:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800874e:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008750:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008752:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008754:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008756:	f7ff ff42 	bl	80085de <I2C_WaitOnTXEFlagUntilTimeout>
 800875a:	b140      	cbz	r0, 800876e <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800875c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800875e:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008760:	bf01      	itttt	eq
 8008762:	6822      	ldreq	r2, [r4, #0]
 8008764:	6813      	ldreq	r3, [r2, #0]
 8008766:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800876a:	6013      	streq	r3, [r2, #0]
 800876c:	e7e7      	b.n	800873e <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800876e:	f1ba 0f01 	cmp.w	sl, #1
 8008772:	6823      	ldr	r3, [r4, #0]
 8008774:	d11a      	bne.n	80087ac <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008776:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008778:	4642      	mov	r2, r8
 800877a:	4639      	mov	r1, r7
 800877c:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800877e:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008780:	f7ff ff2d 	bl	80085de <I2C_WaitOnTXEFlagUntilTimeout>
 8008784:	4602      	mov	r2, r0
 8008786:	2800      	cmp	r0, #0
 8008788:	d1e8      	bne.n	800875c <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800878a:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800878c:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800878e:	680b      	ldr	r3, [r1, #0]
 8008790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008794:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008796:	463b      	mov	r3, r7
 8008798:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800879c:	f8cd 8000 	str.w	r8, [sp]
 80087a0:	f7ff feeb 	bl	800857a <I2C_WaitOnFlagUntilTimeout>
 80087a4:	6822      	ldr	r2, [r4, #0]
 80087a6:	b160      	cbz	r0, 80087c2 <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80087a8:	6813      	ldr	r3, [r2, #0]
 80087aa:	e7b3      	b.n	8008714 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80087ac:	0a2a      	lsrs	r2, r5, #8
 80087ae:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087b0:	4639      	mov	r1, r7
 80087b2:	4642      	mov	r2, r8
 80087b4:	4620      	mov	r0, r4
 80087b6:	f7ff ff12 	bl	80085de <I2C_WaitOnTXEFlagUntilTimeout>
 80087ba:	2800      	cmp	r0, #0
 80087bc:	d1ce      	bne.n	800875c <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	e7d9      	b.n	8008776 <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80087c2:	f049 0301 	orr.w	r3, r9, #1
 80087c6:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80087c8:	4620      	mov	r0, r4
 80087ca:	4643      	mov	r3, r8
 80087cc:	463a      	mov	r2, r7
 80087ce:	4903      	ldr	r1, [pc, #12]	; (80087dc <I2C_RequestMemoryRead+0x100>)
 80087d0:	f7ff fe43 	bl	800845a <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 80087d4:	3800      	subs	r0, #0
 80087d6:	bf18      	it	ne
 80087d8:	2001      	movne	r0, #1
 80087da:	e7a1      	b.n	8008720 <I2C_RequestMemoryRead+0x44>
 80087dc:	00010002 	.word	0x00010002

080087e0 <HAL_I2C_Init>:
{
 80087e0:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80087e2:	4604      	mov	r4, r0
 80087e4:	b908      	cbnz	r0, 80087ea <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80087e6:	2001      	movs	r0, #1
}
 80087e8:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80087ea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80087ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80087f2:	b91b      	cbnz	r3, 80087fc <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80087f4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80087f8:	f7fe ffd8 	bl	80077ac <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80087fc:	2324      	movs	r3, #36	; 0x24
 80087fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	f022 0201 	bic.w	r2, r2, #1
 800880a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008812:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800881a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800881c:	f001 fe4c 	bl	800a4b8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008820:	4a3f      	ldr	r2, [pc, #252]	; (8008920 <HAL_I2C_Init+0x140>)
 8008822:	6863      	ldr	r3, [r4, #4]
 8008824:	4293      	cmp	r3, r2
 8008826:	bf94      	ite	ls
 8008828:	4a3e      	ldrls	r2, [pc, #248]	; (8008924 <HAL_I2C_Init+0x144>)
 800882a:	4a3f      	ldrhi	r2, [pc, #252]	; (8008928 <HAL_I2C_Init+0x148>)
 800882c:	4290      	cmp	r0, r2
 800882e:	bf8c      	ite	hi
 8008830:	2200      	movhi	r2, #0
 8008832:	2201      	movls	r2, #1
 8008834:	2a00      	cmp	r2, #0
 8008836:	d1d6      	bne.n	80087e6 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8008838:	4e3c      	ldr	r6, [pc, #240]	; (800892c <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800883a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800883c:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008840:	6851      	ldr	r1, [r2, #4]
 8008842:	3801      	subs	r0, #1
 8008844:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8008848:	4331      	orrs	r1, r6
 800884a:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800884c:	4934      	ldr	r1, [pc, #208]	; (8008920 <HAL_I2C_Init+0x140>)
 800884e:	6a15      	ldr	r5, [r2, #32]
 8008850:	428b      	cmp	r3, r1
 8008852:	bf81      	itttt	hi
 8008854:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8008858:	4371      	mulhi	r1, r6
 800885a:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 800885e:	fbb1 f1f6 	udivhi	r1, r1, r6
 8008862:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8008866:	bf94      	ite	ls
 8008868:	1c71      	addls	r1, r6, #1
 800886a:	3101      	addhi	r1, #1
 800886c:	4329      	orrs	r1, r5
 800886e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008870:	69d1      	ldr	r1, [r2, #28]
 8008872:	4d2b      	ldr	r5, [pc, #172]	; (8008920 <HAL_I2C_Init+0x140>)
 8008874:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8008878:	42ab      	cmp	r3, r5
 800887a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800887e:	d832      	bhi.n	80088e6 <HAL_I2C_Init+0x106>
 8008880:	005b      	lsls	r3, r3, #1
 8008882:	fbb0 f0f3 	udiv	r0, r0, r3
 8008886:	1c43      	adds	r3, r0, #1
 8008888:	f640 70fc 	movw	r0, #4092	; 0xffc
 800888c:	4203      	tst	r3, r0
 800888e:	d042      	beq.n	8008916 <HAL_I2C_Init+0x136>
 8008890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008894:	430b      	orrs	r3, r1
 8008896:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008898:	6811      	ldr	r1, [r2, #0]
 800889a:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800889e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80088a2:	4303      	orrs	r3, r0
 80088a4:	430b      	orrs	r3, r1
 80088a6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80088a8:	6891      	ldr	r1, [r2, #8]
 80088aa:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80088ae:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80088b2:	4303      	orrs	r3, r0
 80088b4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80088b8:	430b      	orrs	r3, r1
 80088ba:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80088bc:	68d1      	ldr	r1, [r2, #12]
 80088be:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80088c2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80088c6:	4303      	orrs	r3, r0
 80088c8:	430b      	orrs	r3, r1
 80088ca:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80088cc:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088ce:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80088d0:	f043 0301 	orr.w	r3, r3, #1
 80088d4:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80088d6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088d8:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80088da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80088de:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80088e0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80088e4:	e780      	b.n	80087e8 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80088e6:	68a5      	ldr	r5, [r4, #8]
 80088e8:	b955      	cbnz	r5, 8008900 <HAL_I2C_Init+0x120>
 80088ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80088ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80088f2:	3301      	adds	r3, #1
 80088f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088f8:	b17b      	cbz	r3, 800891a <HAL_I2C_Init+0x13a>
 80088fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088fe:	e7c9      	b.n	8008894 <HAL_I2C_Init+0xb4>
 8008900:	2519      	movs	r5, #25
 8008902:	436b      	muls	r3, r5
 8008904:	fbb0 f3f3 	udiv	r3, r0, r3
 8008908:	3301      	adds	r3, #1
 800890a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800890e:	b123      	cbz	r3, 800891a <HAL_I2C_Init+0x13a>
 8008910:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008914:	e7be      	b.n	8008894 <HAL_I2C_Init+0xb4>
 8008916:	2304      	movs	r3, #4
 8008918:	e7bc      	b.n	8008894 <HAL_I2C_Init+0xb4>
 800891a:	2301      	movs	r3, #1
 800891c:	e7ba      	b.n	8008894 <HAL_I2C_Init+0xb4>
 800891e:	bf00      	nop
 8008920:	000186a0 	.word	0x000186a0
 8008924:	001e847f 	.word	0x001e847f
 8008928:	003d08ff 	.word	0x003d08ff
 800892c:	000f4240 	.word	0x000f4240

08008930 <HAL_I2C_Master_Transmit>:
{
 8008930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008934:	4604      	mov	r4, r0
 8008936:	b085      	sub	sp, #20
 8008938:	4698      	mov	r8, r3
 800893a:	460d      	mov	r5, r1
 800893c:	4691      	mov	r9, r2
 800893e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8008940:	f7ff f8be 	bl	8007ac0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008944:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8008948:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800894a:	2b20      	cmp	r3, #32
 800894c:	d004      	beq.n	8008958 <HAL_I2C_Master_Transmit+0x28>
    return HAL_BUSY;
 800894e:	2502      	movs	r5, #2
}
 8008950:	4628      	mov	r0, r5
 8008952:	b005      	add	sp, #20
 8008954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008958:	9000      	str	r0, [sp, #0]
 800895a:	2319      	movs	r3, #25
 800895c:	2201      	movs	r2, #1
 800895e:	4620      	mov	r0, r4
 8008960:	495b      	ldr	r1, [pc, #364]	; (8008ad0 <HAL_I2C_Master_Transmit+0x1a0>)
 8008962:	f7ff fe0a 	bl	800857a <I2C_WaitOnFlagUntilTimeout>
 8008966:	2800      	cmp	r0, #0
 8008968:	d1f1      	bne.n	800894e <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 800896a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800896e:	2b01      	cmp	r3, #1
 8008970:	d0ed      	beq.n	800894e <HAL_I2C_Master_Transmit+0x1e>
 8008972:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008974:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8008976:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800897a:	680b      	ldr	r3, [r1, #0]
 800897c:	07da      	lsls	r2, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800897e:	bf5e      	ittt	pl
 8008980:	680b      	ldrpl	r3, [r1, #0]
 8008982:	f043 0301 	orrpl.w	r3, r3, #1
 8008986:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008988:	680b      	ldr	r3, [r1, #0]
 800898a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800898e:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008990:	2321      	movs	r3, #33	; 0x21
 8008992:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008996:	2310      	movs	r3, #16
 8008998:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800899c:	2300      	movs	r3, #0
 800899e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80089a0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80089a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80089a6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80089aa:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80089ac:	4b49      	ldr	r3, [pc, #292]	; (8008ad4 <HAL_I2C_Master_Transmit+0x1a4>)
 80089ae:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80089b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80089b2:	2b08      	cmp	r3, #8
 80089b4:	d004      	beq.n	80089c0 <HAL_I2C_Master_Transmit+0x90>
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d002      	beq.n	80089c0 <HAL_I2C_Master_Transmit+0x90>
 80089ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80089be:	d104      	bne.n	80089ca <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80089c0:	680b      	ldr	r3, [r1, #0]
 80089c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089c6:	600b      	str	r3, [r1, #0]
 80089c8:	e002      	b.n	80089d0 <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80089ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80089cc:	2b12      	cmp	r3, #18
 80089ce:	d0f7      	beq.n	80089c0 <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80089d0:	2200      	movs	r2, #0
 80089d2:	463b      	mov	r3, r7
 80089d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80089d8:	4620      	mov	r0, r4
 80089da:	9600      	str	r6, [sp, #0]
 80089dc:	f7ff fdcd 	bl	800857a <I2C_WaitOnFlagUntilTimeout>
 80089e0:	6822      	ldr	r2, [r4, #0]
 80089e2:	b138      	cbz	r0, 80089f4 <HAL_I2C_Master_Transmit+0xc4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80089e4:	6813      	ldr	r3, [r2, #0]
 80089e6:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80089e8:	bf44      	itt	mi
 80089ea:	f44f 7300 	movmi.w	r3, #512	; 0x200
 80089ee:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80089f0:	2501      	movs	r5, #1
 80089f2:	e7ad      	b.n	8008950 <HAL_I2C_Master_Transmit+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80089f4:	6923      	ldr	r3, [r4, #16]
 80089f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089fa:	d121      	bne.n	8008a40 <HAL_I2C_Master_Transmit+0x110>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80089fc:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8008a00:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008a02:	4633      	mov	r3, r6
 8008a04:	463a      	mov	r2, r7
 8008a06:	4620      	mov	r0, r4
 8008a08:	4933      	ldr	r1, [pc, #204]	; (8008ad8 <HAL_I2C_Master_Transmit+0x1a8>)
 8008a0a:	f7ff fd26 	bl	800845a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a0e:	4605      	mov	r5, r0
 8008a10:	2800      	cmp	r0, #0
 8008a12:	d1ed      	bne.n	80089f0 <HAL_I2C_Master_Transmit+0xc0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a14:	6823      	ldr	r3, [r4, #0]
 8008a16:	9003      	str	r0, [sp, #12]
 8008a18:	695a      	ldr	r2, [r3, #20]
 8008a1a:	9203      	str	r2, [sp, #12]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	9303      	str	r3, [sp, #12]
 8008a20:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8008a22:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008a24:	b9f3      	cbnz	r3, 8008a64 <HAL_I2C_Master_Transmit+0x134>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a26:	6821      	ldr	r1, [r4, #0]
 8008a28:	680a      	ldr	r2, [r1, #0]
 8008a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a2e:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008a30:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8008a32:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8008a36:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a3a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8008a3e:	e787      	b.n	8008950 <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008a40:	11eb      	asrs	r3, r5, #7
 8008a42:	f003 0306 	and.w	r3, r3, #6
 8008a46:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8008a4a:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	4633      	mov	r3, r6
 8008a50:	463a      	mov	r2, r7
 8008a52:	4922      	ldr	r1, [pc, #136]	; (8008adc <HAL_I2C_Master_Transmit+0x1ac>)
 8008a54:	f7ff fd01 	bl	800845a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	d1c9      	bne.n	80089f0 <HAL_I2C_Master_Transmit+0xc0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	b2ed      	uxtb	r5, r5
 8008a60:	611d      	str	r5, [r3, #16]
 8008a62:	e7ce      	b.n	8008a02 <HAL_I2C_Master_Transmit+0xd2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a64:	4632      	mov	r2, r6
 8008a66:	4639      	mov	r1, r7
 8008a68:	4620      	mov	r0, r4
 8008a6a:	f7ff fdb8 	bl	80085de <I2C_WaitOnTXEFlagUntilTimeout>
 8008a6e:	b140      	cbz	r0, 8008a82 <HAL_I2C_Master_Transmit+0x152>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a72:	2b04      	cmp	r3, #4
 8008a74:	d1bc      	bne.n	80089f0 <HAL_I2C_Master_Transmit+0xc0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a76:	6822      	ldr	r2, [r4, #0]
 8008a78:	6813      	ldr	r3, [r2, #0]
 8008a7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a7e:	6013      	str	r3, [r2, #0]
 8008a80:	e7b6      	b.n	80089f0 <HAL_I2C_Master_Transmit+0xc0>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a84:	6820      	ldr	r0, [r4, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008a8c:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8008a8e:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8008a90:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008a92:	3a01      	subs	r2, #1
 8008a94:	b292      	uxth	r2, r2
 8008a96:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008a98:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008a9a:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 8008a9e:	1e51      	subs	r1, r2, #1
 8008aa0:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008aa2:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 8008aa6:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008aa8:	d00a      	beq.n	8008ac0 <HAL_I2C_Master_Transmit+0x190>
 8008aaa:	b149      	cbz	r1, 8008ac0 <HAL_I2C_Master_Transmit+0x190>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008aac:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 8008aae:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008ab0:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8008ab2:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8008ab4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8008ab6:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8008ab8:	3b01      	subs	r3, #1
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8008abe:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ac0:	4632      	mov	r2, r6
 8008ac2:	4639      	mov	r1, r7
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f7ff fd03 	bl	80084d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8008aca:	2800      	cmp	r0, #0
 8008acc:	d0a9      	beq.n	8008a22 <HAL_I2C_Master_Transmit+0xf2>
 8008ace:	e7cf      	b.n	8008a70 <HAL_I2C_Master_Transmit+0x140>
 8008ad0:	00100002 	.word	0x00100002
 8008ad4:	ffff0000 	.word	0xffff0000
 8008ad8:	00010002 	.word	0x00010002
 8008adc:	00010008 	.word	0x00010008

08008ae0 <HAL_I2C_Master_Receive>:
{
 8008ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ae4:	4698      	mov	r8, r3
  __IO uint32_t count = 0U;
 8008ae6:	2300      	movs	r3, #0
{
 8008ae8:	4604      	mov	r4, r0
 8008aea:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8008aec:	9302      	str	r3, [sp, #8]
{
 8008aee:	460d      	mov	r5, r1
 8008af0:	4691      	mov	r9, r2
 8008af2:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8008af4:	f7fe ffe4 	bl	8007ac0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008af8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8008afc:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008afe:	2b20      	cmp	r3, #32
 8008b00:	d004      	beq.n	8008b0c <HAL_I2C_Master_Receive+0x2c>
    return HAL_BUSY;
 8008b02:	2502      	movs	r5, #2
}
 8008b04:	4628      	mov	r0, r5
 8008b06:	b009      	add	sp, #36	; 0x24
 8008b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b0c:	9000      	str	r0, [sp, #0]
 8008b0e:	2319      	movs	r3, #25
 8008b10:	2201      	movs	r2, #1
 8008b12:	4620      	mov	r0, r4
 8008b14:	498f      	ldr	r1, [pc, #572]	; (8008d54 <HAL_I2C_Master_Receive+0x274>)
 8008b16:	f7ff fd30 	bl	800857a <I2C_WaitOnFlagUntilTimeout>
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	d1f1      	bne.n	8008b02 <HAL_I2C_Master_Receive+0x22>
    __HAL_LOCK(hi2c);
 8008b1e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d0ed      	beq.n	8008b02 <HAL_I2C_Master_Receive+0x22>
 8008b26:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b28:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8008b2a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b2e:	680b      	ldr	r3, [r1, #0]
 8008b30:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8008b32:	bf5e      	ittt	pl
 8008b34:	680b      	ldrpl	r3, [r1, #0]
 8008b36:	f043 0301 	orrpl.w	r3, r3, #1
 8008b3a:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b3c:	680b      	ldr	r3, [r1, #0]
 8008b3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b42:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008b44:	2322      	movs	r3, #34	; 0x22
 8008b46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008b4a:	2310      	movs	r3, #16
 8008b4c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008b50:	2300      	movs	r3, #0
 8008b52:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8008b54:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008b58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8008b5a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8008b5e:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b60:	4b7d      	ldr	r3, [pc, #500]	; (8008d58 <HAL_I2C_Master_Receive+0x278>)
 8008b62:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008b64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b66:	680a      	ldr	r2, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008b68:	2b08      	cmp	r3, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b6e:	600a      	str	r2, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008b70:	d004      	beq.n	8008b7c <HAL_I2C_Master_Receive+0x9c>
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d002      	beq.n	8008b7c <HAL_I2C_Master_Receive+0x9c>
 8008b76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008b7a:	d104      	bne.n	8008b86 <HAL_I2C_Master_Receive+0xa6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b7c:	680b      	ldr	r3, [r1, #0]
 8008b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b82:	600b      	str	r3, [r1, #0]
 8008b84:	e002      	b.n	8008b8c <HAL_I2C_Master_Receive+0xac>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008b86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008b88:	2b11      	cmp	r3, #17
 8008b8a:	d0f7      	beq.n	8008b7c <HAL_I2C_Master_Receive+0x9c>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b8c:	463b      	mov	r3, r7
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008b94:	4620      	mov	r0, r4
 8008b96:	9600      	str	r6, [sp, #0]
 8008b98:	f7ff fcef 	bl	800857a <I2C_WaitOnFlagUntilTimeout>
 8008b9c:	6823      	ldr	r3, [r4, #0]
 8008b9e:	b138      	cbz	r0, 8008bb0 <HAL_I2C_Master_Receive+0xd0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ba0:	681b      	ldr	r3, [r3, #0]
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ba2:	05dd      	lsls	r5, r3, #23
 8008ba4:	d502      	bpl.n	8008bac <HAL_I2C_Master_Receive+0xcc>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008baa:	6423      	str	r3, [r4, #64]	; 0x40
              return HAL_ERROR;
 8008bac:	2501      	movs	r5, #1
 8008bae:	e7a9      	b.n	8008b04 <HAL_I2C_Master_Receive+0x24>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008bb0:	6922      	ldr	r2, [r4, #16]
 8008bb2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8008bb6:	d129      	bne.n	8008c0c <HAL_I2C_Master_Receive+0x12c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008bb8:	f045 0501 	orr.w	r5, r5, #1
 8008bbc:	b2ed      	uxtb	r5, r5
 8008bbe:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008bc0:	4633      	mov	r3, r6
 8008bc2:	463a      	mov	r2, r7
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	4965      	ldr	r1, [pc, #404]	; (8008d5c <HAL_I2C_Master_Receive+0x27c>)
 8008bc8:	f7ff fc47 	bl	800845a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008bcc:	4605      	mov	r5, r0
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	d1ec      	bne.n	8008bac <HAL_I2C_Master_Receive+0xcc>
    if (hi2c->XferSize == 0U)
 8008bd2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008bd4:	6823      	ldr	r3, [r4, #0]
 8008bd6:	2a00      	cmp	r2, #0
 8008bd8:	d14d      	bne.n	8008c76 <HAL_I2C_Master_Receive+0x196>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bda:	9003      	str	r0, [sp, #12]
 8008bdc:	695a      	ldr	r2, [r3, #20]
 8008bde:	9203      	str	r2, [sp, #12]
 8008be0:	699a      	ldr	r2, [r3, #24]
 8008be2:	9203      	str	r2, [sp, #12]
 8008be4:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bec:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008bee:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8008d64 <HAL_I2C_Master_Receive+0x284>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008bf2:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8008d68 <HAL_I2C_Master_Receive+0x288>
    while (hi2c->XferSize > 0U)
 8008bf6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d16c      	bne.n	8008cd6 <HAL_I2C_Master_Receive+0x1f6>
    hi2c->State = HAL_I2C_STATE_READY;
 8008bfc:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8008bfe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8008c02:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c06:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8008c0a:	e77b      	b.n	8008b04 <HAL_I2C_Master_Receive+0x24>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008c0c:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8008c10:	f008 0806 	and.w	r8, r8, #6
 8008c14:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8008c18:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	4633      	mov	r3, r6
 8008c1e:	463a      	mov	r2, r7
 8008c20:	494f      	ldr	r1, [pc, #316]	; (8008d60 <HAL_I2C_Master_Receive+0x280>)
 8008c22:	f7ff fc1a 	bl	800845a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	d1c0      	bne.n	8008bac <HAL_I2C_Master_Receive+0xcc>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008c2a:	6823      	ldr	r3, [r4, #0]
 8008c2c:	b2ed      	uxtb	r5, r5
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c2e:	463a      	mov	r2, r7
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008c30:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c32:	4620      	mov	r0, r4
 8008c34:	4633      	mov	r3, r6
 8008c36:	4949      	ldr	r1, [pc, #292]	; (8008d5c <HAL_I2C_Master_Receive+0x27c>)
 8008c38:	f7ff fc0f 	bl	800845a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	d1b4      	bne.n	8008bac <HAL_I2C_Master_Receive+0xcc>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c42:	6823      	ldr	r3, [r4, #0]
 8008c44:	9007      	str	r0, [sp, #28]
 8008c46:	6959      	ldr	r1, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c48:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c4a:	9107      	str	r1, [sp, #28]
 8008c4c:	6999      	ldr	r1, [r3, #24]
 8008c4e:	9107      	str	r1, [sp, #28]
 8008c50:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c52:	6819      	ldr	r1, [r3, #0]
 8008c54:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008c58:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c5a:	463b      	mov	r3, r7
 8008c5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008c60:	9600      	str	r6, [sp, #0]
 8008c62:	f7ff fc8a 	bl	800857a <I2C_WaitOnFlagUntilTimeout>
 8008c66:	6822      	ldr	r2, [r4, #0]
 8008c68:	b108      	cbz	r0, 8008c6e <HAL_I2C_Master_Receive+0x18e>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c6a:	6813      	ldr	r3, [r2, #0]
 8008c6c:	e799      	b.n	8008ba2 <HAL_I2C_Master_Receive+0xc2>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008c6e:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8008c72:	6113      	str	r3, [r2, #16]
 8008c74:	e7a4      	b.n	8008bc0 <HAL_I2C_Master_Receive+0xe0>
    else if (hi2c->XferSize == 1U)
 8008c76:	2a01      	cmp	r2, #1
 8008c78:	d111      	bne.n	8008c9e <HAL_I2C_Master_Receive+0x1be>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c80:	601a      	str	r2, [r3, #0]
 8008c82:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c84:	6823      	ldr	r3, [r4, #0]
 8008c86:	9004      	str	r0, [sp, #16]
 8008c88:	695a      	ldr	r2, [r3, #20]
 8008c8a:	9204      	str	r2, [sp, #16]
 8008c8c:	699a      	ldr	r2, [r3, #24]
 8008c8e:	9204      	str	r2, [sp, #16]
 8008c90:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008c9a:	b662      	cpsie	i
}
 8008c9c:	e7a7      	b.n	8008bee <HAL_I2C_Master_Receive+0x10e>
    else if (hi2c->XferSize == 2U)
 8008c9e:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ca0:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8008ca2:	d10e      	bne.n	8008cc2 <HAL_I2C_Master_Receive+0x1e2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ca4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ca8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008caa:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cac:	6823      	ldr	r3, [r4, #0]
 8008cae:	9005      	str	r0, [sp, #20]
 8008cb0:	695a      	ldr	r2, [r3, #20]
 8008cb2:	9205      	str	r2, [sp, #20]
 8008cb4:	699a      	ldr	r2, [r3, #24]
 8008cb6:	9205      	str	r2, [sp, #20]
 8008cb8:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cc0:	e7ea      	b.n	8008c98 <HAL_I2C_Master_Receive+0x1b8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008cc6:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cc8:	9006      	str	r0, [sp, #24]
 8008cca:	695a      	ldr	r2, [r3, #20]
 8008ccc:	9206      	str	r2, [sp, #24]
 8008cce:	699b      	ldr	r3, [r3, #24]
 8008cd0:	9306      	str	r3, [sp, #24]
 8008cd2:	9b06      	ldr	r3, [sp, #24]
 8008cd4:	e78b      	b.n	8008bee <HAL_I2C_Master_Receive+0x10e>
      if (hi2c->XferSize <= 3U)
 8008cd6:	2b03      	cmp	r3, #3
 8008cd8:	f200 8088 	bhi.w	8008dec <HAL_I2C_Master_Receive+0x30c>
        if (hi2c->XferSize == 1U)
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d116      	bne.n	8008d0e <HAL_I2C_Master_Receive+0x22e>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ce0:	4632      	mov	r2, r6
 8008ce2:	4639      	mov	r1, r7
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f7ff fc19 	bl	800851c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008cea:	2800      	cmp	r0, #0
 8008cec:	f47f af5e 	bne.w	8008bac <HAL_I2C_Master_Receive+0xcc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cf0:	6823      	ldr	r3, [r4, #0]
 8008cf2:	691a      	ldr	r2, [r3, #16]
 8008cf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cf6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008cf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008cfe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008d00:	3b01      	subs	r3, #1
 8008d02:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008d04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008d06:	3b01      	subs	r3, #1
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	8563      	strh	r3, [r4, #42]	; 0x2a
 8008d0c:	e773      	b.n	8008bf6 <HAL_I2C_Master_Receive+0x116>
        else if (hi2c->XferSize == 2U)
 8008d0e:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008d10:	f04f 0200 	mov.w	r2, #0
 8008d14:	463b      	mov	r3, r7
 8008d16:	4641      	mov	r1, r8
 8008d18:	4620      	mov	r0, r4
 8008d1a:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8008d1c:	d126      	bne.n	8008d6c <HAL_I2C_Master_Receive+0x28c>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008d1e:	f7ff fc2c 	bl	800857a <I2C_WaitOnFlagUntilTimeout>
 8008d22:	2800      	cmp	r0, #0
 8008d24:	f47f af42 	bne.w	8008bac <HAL_I2C_Master_Receive+0xcc>
 8008d28:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d32:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d34:	691a      	ldr	r2, [r3, #16]
 8008d36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d38:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008d40:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008d42:	3b01      	subs	r3, #1
 8008d44:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008d46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008d4e:	b662      	cpsie	i
 8008d50:	e7ce      	b.n	8008cf0 <HAL_I2C_Master_Receive+0x210>
 8008d52:	bf00      	nop
 8008d54:	00100002 	.word	0x00100002
 8008d58:	ffff0000 	.word	0xffff0000
 8008d5c:	00010002 	.word	0x00010002
 8008d60:	00010008 	.word	0x00010008
 8008d64:	00010004 	.word	0x00010004
 8008d68:	20000074 	.word	0x20000074
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008d6c:	f7ff fc05 	bl	800857a <I2C_WaitOnFlagUntilTimeout>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	f47f af1b 	bne.w	8008bac <HAL_I2C_Master_Receive+0xcc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d76:	6822      	ldr	r2, [r4, #0]
 8008d78:	6813      	ldr	r3, [r2, #0]
 8008d7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d7e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d80:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d82:	6823      	ldr	r3, [r4, #0]
 8008d84:	691a      	ldr	r2, [r3, #16]
 8008d86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d88:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008d8a:	f246 12a8 	movw	r2, #25000	; 0x61a8
          hi2c->pBuffPtr++;
 8008d8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008d90:	1c4b      	adds	r3, r1, #1
 8008d92:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008d94:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008d96:	3b01      	subs	r3, #1
 8008d98:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008d9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008da2:	f8d9 3000 	ldr.w	r3, [r9]
 8008da6:	fbb3 f2f2 	udiv	r2, r3, r2
 8008daa:	2323      	movs	r3, #35	; 0x23
 8008dac:	4353      	muls	r3, r2
 8008dae:	9302      	str	r3, [sp, #8]
            count--;
 8008db0:	9b02      	ldr	r3, [sp, #8]
 8008db2:	3b01      	subs	r3, #1
 8008db4:	9302      	str	r3, [sp, #8]
            if (count == 0U)
 8008db6:	9b02      	ldr	r3, [sp, #8]
 8008db8:	b96b      	cbnz	r3, 8008dd6 <HAL_I2C_Master_Receive+0x2f6>
              hi2c->State               = HAL_I2C_STATE_READY;
 8008dba:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008dbc:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8008dbe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008dc2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008dc6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008dc8:	f042 0220 	orr.w	r2, r2, #32
 8008dcc:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8008dce:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8008dd0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8008dd4:	e6ea      	b.n	8008bac <HAL_I2C_Master_Receive+0xcc>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	695a      	ldr	r2, [r3, #20]
 8008dda:	0750      	lsls	r0, r2, #29
 8008ddc:	d5e8      	bpl.n	8008db0 <HAL_I2C_Master_Receive+0x2d0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008de4:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	704b      	strb	r3, [r1, #1]
 8008dea:	e7a6      	b.n	8008d3a <HAL_I2C_Master_Receive+0x25a>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008dec:	4632      	mov	r2, r6
 8008dee:	4639      	mov	r1, r7
 8008df0:	4620      	mov	r0, r4
 8008df2:	f7ff fb93 	bl	800851c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	f47f aed8 	bne.w	8008bac <HAL_I2C_Master_Receive+0xcc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dfc:	6823      	ldr	r3, [r4, #0]
 8008dfe:	691a      	ldr	r2, [r3, #16]
 8008e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e02:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008e04:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008e06:	1c53      	adds	r3, r2, #1
 8008e08:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8008e0a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8008e10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008e12:	3b01      	subs	r3, #1
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008e18:	6823      	ldr	r3, [r4, #0]
 8008e1a:	6959      	ldr	r1, [r3, #20]
 8008e1c:	0749      	lsls	r1, r1, #29
 8008e1e:	f57f aeea 	bpl.w	8008bf6 <HAL_I2C_Master_Receive+0x116>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	7053      	strb	r3, [r2, #1]
 8008e26:	e767      	b.n	8008cf8 <HAL_I2C_Master_Receive+0x218>

08008e28 <HAL_I2C_Mem_Write>:
{
 8008e28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e2c:	4604      	mov	r4, r0
 8008e2e:	4699      	mov	r9, r3
 8008e30:	460f      	mov	r7, r1
 8008e32:	4690      	mov	r8, r2
 8008e34:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8008e36:	f7fe fe43 	bl	8007ac0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e3a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8008e3e:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e40:	2b20      	cmp	r3, #32
 8008e42:	d003      	beq.n	8008e4c <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8008e44:	2002      	movs	r0, #2
}
 8008e46:	b003      	add	sp, #12
 8008e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e4c:	9000      	str	r0, [sp, #0]
 8008e4e:	2319      	movs	r3, #25
 8008e50:	2201      	movs	r2, #1
 8008e52:	4620      	mov	r0, r4
 8008e54:	493a      	ldr	r1, [pc, #232]	; (8008f40 <HAL_I2C_Mem_Write+0x118>)
 8008e56:	f7ff fb90 	bl	800857a <I2C_WaitOnFlagUntilTimeout>
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	d1f2      	bne.n	8008e44 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8008e5e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d0ee      	beq.n	8008e44 <HAL_I2C_Mem_Write+0x1c>
 8008e66:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e68:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8008e6a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e6e:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008e70:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e72:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8008e74:	bf58      	it	pl
 8008e76:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008e78:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8008e7a:	bf5c      	itt	pl
 8008e7c:	f043 0301 	orrpl.w	r3, r3, #1
 8008e80:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e82:	6803      	ldr	r3, [r0, #0]
 8008e84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e88:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008e8a:	2321      	movs	r3, #33	; 0x21
 8008e8c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008e90:	2340      	movs	r3, #64	; 0x40
 8008e92:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e96:	2300      	movs	r3, #0
 8008e98:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8008e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008e9c:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8008e9e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008ea0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008ea4:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferCount   = Size;
 8008ea8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008eaa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008eac:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008eae:	4b25      	ldr	r3, [pc, #148]	; (8008f44 <HAL_I2C_Mem_Write+0x11c>)
 8008eb0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008eb2:	464b      	mov	r3, r9
 8008eb4:	f7ff fbba 	bl	800862c <I2C_RequestMemoryWrite>
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d02a      	beq.n	8008f12 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8008ebc:	2001      	movs	r0, #1
 8008ebe:	e7c2      	b.n	8008e46 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ec0:	f7ff fb8d 	bl	80085de <I2C_WaitOnTXEFlagUntilTimeout>
 8008ec4:	b140      	cbz	r0, 8008ed8 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ec6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ec8:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008eca:	bf01      	itttt	eq
 8008ecc:	6822      	ldreq	r2, [r4, #0]
 8008ece:	6813      	ldreq	r3, [r2, #0]
 8008ed0:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8008ed4:	6013      	streq	r3, [r2, #0]
 8008ed6:	e7f1      	b.n	8008ebc <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eda:	6827      	ldr	r7, [r4, #0]
 8008edc:	461a      	mov	r2, r3
 8008ede:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008ee2:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8008ee4:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8008ee6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008ee8:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8008eea:	3a01      	subs	r2, #1
 8008eec:	b292      	uxth	r2, r2
 8008eee:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008ef0:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8008ef2:	1e48      	subs	r0, r1, #1
 8008ef4:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008ef6:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8008ef8:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008efa:	d50a      	bpl.n	8008f12 <HAL_I2C_Mem_Write+0xea>
 8008efc:	b148      	cbz	r0, 8008f12 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008efe:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8008f00:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f02:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8008f04:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8008f06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8008f08:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8008f0e:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8008f10:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008f12:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f14:	462a      	mov	r2, r5
 8008f16:	4631      	mov	r1, r6
 8008f18:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1d0      	bne.n	8008ec0 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f1e:	f7ff fad7 	bl	80084d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8008f22:	2800      	cmp	r0, #0
 8008f24:	d1cf      	bne.n	8008ec6 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f26:	6822      	ldr	r2, [r4, #0]
 8008f28:	6813      	ldr	r3, [r2, #0]
 8008f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f2e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008f30:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8008f32:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8008f36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f3a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8008f3e:	e782      	b.n	8008e46 <HAL_I2C_Mem_Write+0x1e>
 8008f40:	00100002 	.word	0x00100002
 8008f44:	ffff0000 	.word	0xffff0000

08008f48 <HAL_I2C_Mem_Read>:
{
 8008f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f4c:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 8008f4e:	2300      	movs	r3, #0
{
 8008f50:	4604      	mov	r4, r0
 8008f52:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8008f54:	9303      	str	r3, [sp, #12]
{
 8008f56:	460d      	mov	r5, r1
 8008f58:	4690      	mov	r8, r2
 8008f5a:	9f12      	ldr	r7, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8008f5c:	f7fe fdb0 	bl	8007ac0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f60:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8008f64:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f66:	2b20      	cmp	r3, #32
 8008f68:	d004      	beq.n	8008f74 <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 8008f6a:	2502      	movs	r5, #2
}
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	b009      	add	sp, #36	; 0x24
 8008f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008f74:	9000      	str	r0, [sp, #0]
 8008f76:	2319      	movs	r3, #25
 8008f78:	2201      	movs	r2, #1
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	498d      	ldr	r1, [pc, #564]	; (80091b4 <HAL_I2C_Mem_Read+0x26c>)
 8008f7e:	f7ff fafc 	bl	800857a <I2C_WaitOnFlagUntilTimeout>
 8008f82:	2800      	cmp	r0, #0
 8008f84:	d1f1      	bne.n	8008f6a <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8008f86:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d0ed      	beq.n	8008f6a <HAL_I2C_Mem_Read+0x22>
 8008f8e:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008f90:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8008f92:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008f96:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008f98:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008f9a:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8008f9c:	bf58      	it	pl
 8008f9e:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008fa0:	4642      	mov	r2, r8
      __HAL_I2C_ENABLE(hi2c);
 8008fa2:	bf5c      	itt	pl
 8008fa4:	f043 0301 	orrpl.w	r3, r3, #1
 8008fa8:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008faa:	6803      	ldr	r3, [r0, #0]
 8008fac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fb0:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008fb2:	2322      	movs	r3, #34	; 0x22
 8008fb4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008fb8:	2340      	movs	r3, #64	; 0x40
 8008fba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8008fc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008fc4:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8008fc6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008fc8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008fcc:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->XferCount   = Size;
 8008fd0:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008fd2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008fd4:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008fd6:	4b78      	ldr	r3, [pc, #480]	; (80091b8 <HAL_I2C_Mem_Read+0x270>)
 8008fd8:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008fda:	464b      	mov	r3, r9
 8008fdc:	f7ff fb7e 	bl	80086dc <I2C_RequestMemoryRead>
 8008fe0:	4605      	mov	r5, r0
 8008fe2:	b108      	cbz	r0, 8008fe8 <HAL_I2C_Mem_Read+0xa0>
              return HAL_ERROR;
 8008fe4:	2501      	movs	r5, #1
 8008fe6:	e7c1      	b.n	8008f6c <HAL_I2C_Mem_Read+0x24>
    if (hi2c->XferSize == 0U)
 8008fe8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	b9c2      	cbnz	r2, 8009020 <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fee:	9004      	str	r0, [sp, #16]
 8008ff0:	695a      	ldr	r2, [r3, #20]
 8008ff2:	9204      	str	r2, [sp, #16]
 8008ff4:	699a      	ldr	r2, [r3, #24]
 8008ff6:	9204      	str	r2, [sp, #16]
 8008ff8:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009000:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009002:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80091bc <HAL_I2C_Mem_Read+0x274>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009006:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 80091c0 <HAL_I2C_Mem_Read+0x278>
    while (hi2c->XferSize > 0U)
 800900a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800900c:	2b00      	cmp	r3, #0
 800900e:	d137      	bne.n	8009080 <HAL_I2C_Mem_Read+0x138>
    hi2c->State = HAL_I2C_STATE_READY;
 8009010:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8009012:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8009016:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800901a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800901e:	e7a5      	b.n	8008f6c <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 8009020:	2a01      	cmp	r2, #1
 8009022:	d111      	bne.n	8009048 <HAL_I2C_Mem_Read+0x100>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800902a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800902c:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	9005      	str	r0, [sp, #20]
 8009032:	695a      	ldr	r2, [r3, #20]
 8009034:	9205      	str	r2, [sp, #20]
 8009036:	699a      	ldr	r2, [r3, #24]
 8009038:	9205      	str	r2, [sp, #20]
 800903a:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009042:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009044:	b662      	cpsie	i
}
 8009046:	e7dc      	b.n	8009002 <HAL_I2C_Mem_Read+0xba>
    else if (hi2c->XferSize == 2U)
 8009048:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800904a:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 800904c:	d10e      	bne.n	800906c <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800904e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009052:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009054:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009056:	6823      	ldr	r3, [r4, #0]
 8009058:	9006      	str	r0, [sp, #24]
 800905a:	695a      	ldr	r2, [r3, #20]
 800905c:	9206      	str	r2, [sp, #24]
 800905e:	699a      	ldr	r2, [r3, #24]
 8009060:	9206      	str	r2, [sp, #24]
 8009062:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800906a:	e7ea      	b.n	8009042 <HAL_I2C_Mem_Read+0xfa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800906c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009070:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009072:	9007      	str	r0, [sp, #28]
 8009074:	695a      	ldr	r2, [r3, #20]
 8009076:	9207      	str	r2, [sp, #28]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	9307      	str	r3, [sp, #28]
 800907c:	9b07      	ldr	r3, [sp, #28]
 800907e:	e7c0      	b.n	8009002 <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 8009080:	2b03      	cmp	r3, #3
 8009082:	d878      	bhi.n	8009176 <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 8009084:	2b01      	cmp	r3, #1
 8009086:	d115      	bne.n	80090b4 <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009088:	4632      	mov	r2, r6
 800908a:	4639      	mov	r1, r7
 800908c:	4620      	mov	r0, r4
 800908e:	f7ff fa45 	bl	800851c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009092:	2800      	cmp	r0, #0
 8009094:	d1a6      	bne.n	8008fe4 <HAL_I2C_Mem_Read+0x9c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	691a      	ldr	r2, [r3, #16]
 800909a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800909c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800909e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090a0:	3301      	adds	r3, #1
 80090a2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80090a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80090a6:	3b01      	subs	r3, #1
 80090a8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80090aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80090ac:	3b01      	subs	r3, #1
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	8563      	strh	r3, [r4, #42]	; 0x2a
 80090b2:	e7aa      	b.n	800900a <HAL_I2C_Mem_Read+0xc2>
        else if (hi2c->XferSize == 2U)
 80090b4:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80090b6:	f04f 0200 	mov.w	r2, #0
 80090ba:	463b      	mov	r3, r7
 80090bc:	4641      	mov	r1, r8
 80090be:	4620      	mov	r0, r4
 80090c0:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 80090c2:	d118      	bne.n	80090f6 <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80090c4:	f7ff fa59 	bl	800857a <I2C_WaitOnFlagUntilTimeout>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	d18b      	bne.n	8008fe4 <HAL_I2C_Mem_Read+0x9c>
 80090cc:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090d6:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090d8:	691a      	ldr	r2, [r3, #16]
 80090da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090dc:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80090de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090e0:	3301      	adds	r3, #1
 80090e2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80090e4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80090e6:	3b01      	subs	r3, #1
 80090e8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80090ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80090ec:	3b01      	subs	r3, #1
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80090f2:	b662      	cpsie	i
 80090f4:	e7cf      	b.n	8009096 <HAL_I2C_Mem_Read+0x14e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80090f6:	f7ff fa40 	bl	800857a <I2C_WaitOnFlagUntilTimeout>
 80090fa:	2800      	cmp	r0, #0
 80090fc:	f47f af72 	bne.w	8008fe4 <HAL_I2C_Mem_Read+0x9c>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009100:	6822      	ldr	r2, [r4, #0]
 8009102:	6813      	ldr	r3, [r2, #0]
 8009104:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009108:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800910a:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	691a      	ldr	r2, [r3, #16]
 8009110:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009112:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009114:	f246 12a8 	movw	r2, #25000	; 0x61a8
          hi2c->pBuffPtr++;
 8009118:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800911a:	1c4b      	adds	r3, r1, #1
 800911c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800911e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009120:	3b01      	subs	r3, #1
 8009122:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8009124:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009126:	3b01      	subs	r3, #1
 8009128:	b29b      	uxth	r3, r3
 800912a:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800912c:	f8d9 3000 	ldr.w	r3, [r9]
 8009130:	fbb3 f2f2 	udiv	r2, r3, r2
 8009134:	2323      	movs	r3, #35	; 0x23
 8009136:	4353      	muls	r3, r2
 8009138:	9303      	str	r3, [sp, #12]
            count--;
 800913a:	9b03      	ldr	r3, [sp, #12]
 800913c:	3b01      	subs	r3, #1
 800913e:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8009140:	9b03      	ldr	r3, [sp, #12]
 8009142:	b96b      	cbnz	r3, 8009160 <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 8009144:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009146:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009148:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800914c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009150:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009152:	f042 0220 	orr.w	r2, r2, #32
 8009156:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009158:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 800915a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800915e:	e741      	b.n	8008fe4 <HAL_I2C_Mem_Read+0x9c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009160:	6823      	ldr	r3, [r4, #0]
 8009162:	695a      	ldr	r2, [r3, #20]
 8009164:	0750      	lsls	r0, r2, #29
 8009166:	d5e8      	bpl.n	800913a <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800916e:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	704b      	strb	r3, [r1, #1]
 8009174:	e7b3      	b.n	80090de <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009176:	4632      	mov	r2, r6
 8009178:	4639      	mov	r1, r7
 800917a:	4620      	mov	r0, r4
 800917c:	f7ff f9ce 	bl	800851c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009180:	2800      	cmp	r0, #0
 8009182:	f47f af2f 	bne.w	8008fe4 <HAL_I2C_Mem_Read+0x9c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	691a      	ldr	r2, [r3, #16]
 800918a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800918c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800918e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009190:	1c53      	adds	r3, r2, #1
 8009192:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8009194:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009196:	3b01      	subs	r3, #1
 8009198:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800919a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800919c:	3b01      	subs	r3, #1
 800919e:	b29b      	uxth	r3, r3
 80091a0:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80091a2:	6823      	ldr	r3, [r4, #0]
 80091a4:	6959      	ldr	r1, [r3, #20]
 80091a6:	0749      	lsls	r1, r1, #29
 80091a8:	f57f af2f 	bpl.w	800900a <HAL_I2C_Mem_Read+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	7053      	strb	r3, [r2, #1]
 80091b0:	e775      	b.n	800909e <HAL_I2C_Mem_Read+0x156>
 80091b2:	bf00      	nop
 80091b4:	00100002 	.word	0x00100002
 80091b8:	ffff0000 	.word	0xffff0000
 80091bc:	00010004 	.word	0x00010004
 80091c0:	20000074 	.word	0x20000074

080091c4 <HAL_I2C_IsDeviceReady>:
{
 80091c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c8:	4604      	mov	r4, r0
 80091ca:	b085      	sub	sp, #20
 80091cc:	461e      	mov	r6, r3
 80091ce:	460f      	mov	r7, r1
 80091d0:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 80091d2:	f7fe fc75 	bl	8007ac0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80091d6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80091da:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80091dc:	2b20      	cmp	r3, #32
 80091de:	d003      	beq.n	80091e8 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 80091e0:	2002      	movs	r0, #2
}
 80091e2:	b005      	add	sp, #20
 80091e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80091e8:	9000      	str	r0, [sp, #0]
 80091ea:	2319      	movs	r3, #25
 80091ec:	2201      	movs	r2, #1
 80091ee:	4620      	mov	r0, r4
 80091f0:	494c      	ldr	r1, [pc, #304]	; (8009324 <HAL_I2C_IsDeviceReady+0x160>)
 80091f2:	f7ff f9c2 	bl	800857a <I2C_WaitOnFlagUntilTimeout>
 80091f6:	2800      	cmp	r0, #0
 80091f8:	d1f2      	bne.n	80091e0 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 80091fa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d0ee      	beq.n	80091e0 <HAL_I2C_IsDeviceReady+0x1c>
 8009202:	2301      	movs	r3, #1
 8009204:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009208:	6823      	ldr	r3, [r4, #0]
  uint32_t I2C_Trials = 1U;
 800920a:	f04f 0a01 	mov.w	sl, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800920e:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009210:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009324 <HAL_I2C_IsDeviceReady+0x160>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009214:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8009216:	bf58      	it	pl
 8009218:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800921a:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 800921e:	bf5c      	itt	pl
 8009220:	f042 0201 	orrpl.w	r2, r2, #1
 8009224:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800922c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800922e:	2324      	movs	r3, #36	; 0x24
 8009230:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009234:	2300      	movs	r3, #0
 8009236:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009238:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800923c:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800923e:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009240:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009244:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009246:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800924c:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800924e:	4633      	mov	r3, r6
 8009250:	2200      	movs	r2, #0
 8009252:	9500      	str	r5, [sp, #0]
 8009254:	f7ff f991 	bl	800857a <I2C_WaitOnFlagUntilTimeout>
 8009258:	6823      	ldr	r3, [r4, #0]
 800925a:	b138      	cbz	r0, 800926c <HAL_I2C_IsDeviceReady+0xa8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	05db      	lsls	r3, r3, #23
 8009260:	d502      	bpl.n	8009268 <HAL_I2C_IsDeviceReady+0xa4>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009262:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009266:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8009268:	2003      	movs	r0, #3
 800926a:	e7ba      	b.n	80091e2 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800926c:	611f      	str	r7, [r3, #16]
      tickstart = HAL_GetTick();
 800926e:	f7fe fc27 	bl	8007ac0 <HAL_GetTick>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8009272:	f04f 08a0 	mov.w	r8, #160	; 0xa0
      tickstart = HAL_GetTick();
 8009276:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009278:	6823      	ldr	r3, [r4, #0]
 800927a:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800927c:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800927e:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009282:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009286:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800928a:	29a0      	cmp	r1, #160	; 0xa0
 800928c:	d001      	beq.n	8009292 <HAL_I2C_IsDeviceReady+0xce>
 800928e:	4313      	orrs	r3, r2
 8009290:	d01d      	beq.n	80092ce <HAL_I2C_IsDeviceReady+0x10a>
      hi2c->State = HAL_I2C_STATE_READY;
 8009292:	f04f 0820 	mov.w	r8, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009296:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8009298:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800929c:	695a      	ldr	r2, [r3, #20]
 800929e:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092a8:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80092aa:	d025      	beq.n	80092f8 <HAL_I2C_IsDeviceReady+0x134>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092ac:	2200      	movs	r2, #0
 80092ae:	9203      	str	r2, [sp, #12]
 80092b0:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80092b2:	4620      	mov	r0, r4
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092b4:	9203      	str	r2, [sp, #12]
 80092b6:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80092b8:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092ba:	9303      	str	r3, [sp, #12]
 80092bc:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80092be:	4919      	ldr	r1, [pc, #100]	; (8009324 <HAL_I2C_IsDeviceReady+0x160>)
 80092c0:	2319      	movs	r3, #25
 80092c2:	9500      	str	r5, [sp, #0]
 80092c4:	f7ff f959 	bl	800857a <I2C_WaitOnFlagUntilTimeout>
 80092c8:	b188      	cbz	r0, 80092ee <HAL_I2C_IsDeviceReady+0x12a>
    return HAL_ERROR;
 80092ca:	2001      	movs	r0, #1
 80092cc:	e789      	b.n	80091e2 <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80092ce:	f7fe fbf7 	bl	8007ac0 <HAL_GetTick>
 80092d2:	1b40      	subs	r0, r0, r5
 80092d4:	42b0      	cmp	r0, r6
 80092d6:	d800      	bhi.n	80092da <HAL_I2C_IsDeviceReady+0x116>
 80092d8:	b90e      	cbnz	r6, 80092de <HAL_I2C_IsDeviceReady+0x11a>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80092da:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80092e2:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80092e4:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80092e8:	f3c3 2380 	ubfx	r3, r3, #10, #1
 80092ec:	e7cb      	b.n	8009286 <HAL_I2C_IsDeviceReady+0xc2>
        hi2c->State = HAL_I2C_STATE_READY;
 80092ee:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80092f2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 80092f6:	e774      	b.n	80091e2 <HAL_I2C_IsDeviceReady+0x1e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80092fc:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092fe:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009300:	4620      	mov	r0, r4
 8009302:	2319      	movs	r3, #25
 8009304:	2201      	movs	r2, #1
 8009306:	9500      	str	r5, [sp, #0]
 8009308:	f7ff f937 	bl	800857a <I2C_WaitOnFlagUntilTimeout>
 800930c:	2800      	cmp	r0, #0
 800930e:	d1dc      	bne.n	80092ca <HAL_I2C_IsDeviceReady+0x106>
      I2C_Trials++;
 8009310:	f10a 0a01 	add.w	sl, sl, #1
    while (I2C_Trials < Trials);
 8009314:	45ca      	cmp	sl, r9
 8009316:	d392      	bcc.n	800923e <HAL_I2C_IsDeviceReady+0x7a>
    hi2c->State = HAL_I2C_STATE_READY;
 8009318:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800931c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8009320:	e7d3      	b.n	80092ca <HAL_I2C_IsDeviceReady+0x106>
 8009322:	bf00      	nop
 8009324:	00100002 	.word	0x00100002

08009328 <HAL_I2C_MasterTxCpltCallback>:
 8009328:	4770      	bx	lr

0800932a <HAL_I2C_MasterRxCpltCallback>:
 800932a:	4770      	bx	lr

0800932c <HAL_I2C_SlaveTxCpltCallback>:
 800932c:	4770      	bx	lr

0800932e <HAL_I2C_SlaveRxCpltCallback>:
 800932e:	4770      	bx	lr

08009330 <HAL_I2C_AddrCallback>:
}
 8009330:	4770      	bx	lr

08009332 <HAL_I2C_ListenCpltCallback>:
 8009332:	4770      	bx	lr

08009334 <HAL_I2C_MemTxCpltCallback>:
 8009334:	4770      	bx	lr

08009336 <I2C_MemoryTransmit_TXE_BTF>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009336:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 800933a:	b508      	push	{r3, lr}
  if (hi2c->EventCount == 0U)
 800933c:	6d03      	ldr	r3, [r0, #80]	; 0x50
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800933e:	b2d2      	uxtb	r2, r2
  if (hi2c->EventCount == 0U)
 8009340:	b983      	cbnz	r3, 8009364 <I2C_MemoryTransmit_TXE_BTF+0x2e>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8009342:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009344:	6802      	ldr	r2, [r0, #0]
 8009346:	2b01      	cmp	r3, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009348:	6c83      	ldr	r3, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800934a:	d105      	bne.n	8009358 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800934c:	b2db      	uxtb	r3, r3
 800934e:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8009350:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009352:	3302      	adds	r3, #2
      hi2c->EventCount++;
 8009354:	6503      	str	r3, [r0, #80]	; 0x50
}
 8009356:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8009358:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800935c:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 800935e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009360:	3301      	adds	r3, #1
 8009362:	e7f7      	b.n	8009354 <I2C_MemoryTransmit_TXE_BTF+0x1e>
  else if (hi2c->EventCount == 1U)
 8009364:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009366:	2b01      	cmp	r3, #1
 8009368:	d103      	bne.n	8009372 <I2C_MemoryTransmit_TXE_BTF+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800936a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800936c:	6802      	ldr	r2, [r0, #0]
 800936e:	b2db      	uxtb	r3, r3
 8009370:	e7f4      	b.n	800935c <I2C_MemoryTransmit_TXE_BTF+0x26>
  else if (hi2c->EventCount == 2U)
 8009372:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009374:	2b02      	cmp	r3, #2
 8009376:	d1ee      	bne.n	8009356 <I2C_MemoryTransmit_TXE_BTF+0x20>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8009378:	2a22      	cmp	r2, #34	; 0x22
 800937a:	d105      	bne.n	8009388 <I2C_MemoryTransmit_TXE_BTF+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800937c:	6802      	ldr	r2, [r0, #0]
 800937e:	6813      	ldr	r3, [r2, #0]
 8009380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009384:	6013      	str	r3, [r2, #0]
 8009386:	e7e6      	b.n	8009356 <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009388:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800938a:	b29b      	uxth	r3, r3
 800938c:	b163      	cbz	r3, 80093a8 <I2C_MemoryTransmit_TXE_BTF+0x72>
 800938e:	2a21      	cmp	r2, #33	; 0x21
 8009390:	d10a      	bne.n	80093a8 <I2C_MemoryTransmit_TXE_BTF+0x72>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009392:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009394:	6802      	ldr	r2, [r0, #0]
 8009396:	f813 1b01 	ldrb.w	r1, [r3], #1
 800939a:	6111      	str	r1, [r2, #16]
      hi2c->pBuffPtr++;
 800939c:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 800939e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80093a0:	3b01      	subs	r3, #1
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	8543      	strh	r3, [r0, #42]	; 0x2a
 80093a6:	e7d6      	b.n	8009356 <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80093a8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d1d2      	bne.n	8009356 <I2C_MemoryTransmit_TXE_BTF+0x20>
 80093b0:	2a21      	cmp	r2, #33	; 0x21
 80093b2:	d1d0      	bne.n	8009356 <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80093b4:	6802      	ldr	r2, [r0, #0]
 80093b6:	6851      	ldr	r1, [r2, #4]
 80093b8:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80093bc:	6051      	str	r1, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093be:	6811      	ldr	r1, [r2, #0]
 80093c0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80093c4:	6011      	str	r1, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 80093c6:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80093c8:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80093ca:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80093ce:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80093d2:	f7ff ffaf 	bl	8009334 <HAL_I2C_MemTxCpltCallback>
}
 80093d6:	e7be      	b.n	8009356 <I2C_MemoryTransmit_TXE_BTF+0x20>

080093d8 <HAL_I2C_MemRxCpltCallback>:
 80093d8:	4770      	bx	lr

080093da <HAL_I2C_ErrorCallback>:
 80093da:	4770      	bx	lr

080093dc <HAL_I2C_AbortCpltCallback>:
 80093dc:	4770      	bx	lr
	...

080093e0 <I2C_DMAAbort>:
  __IO uint32_t count = 0U;
 80093e0:	2300      	movs	r3, #0
{
 80093e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80093e4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  __IO uint32_t count = 0U;
 80093e6:	9301      	str	r3, [sp, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80093e8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80093ec:	4b2b      	ldr	r3, [pc, #172]	; (800949c <I2C_DMAAbort+0xbc>)
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80093ee:	b2d1      	uxtb	r1, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80093f0:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80093fa:	2323      	movs	r3, #35	; 0x23
 80093fc:	4353      	muls	r3, r2
 80093fe:	9301      	str	r3, [sp, #4]
 8009400:	6803      	ldr	r3, [r0, #0]
    if (count == 0U)
 8009402:	9a01      	ldr	r2, [sp, #4]
 8009404:	bb42      	cbnz	r2, 8009458 <I2C_DMAAbort+0x78>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009406:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009408:	f042 0220 	orr.w	r2, r2, #32
 800940c:	6402      	str	r2, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 800940e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8009410:	b10d      	cbz	r5, 8009416 <I2C_DMAAbort+0x36>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009412:	2200      	movs	r2, #0
 8009414:	62aa      	str	r2, [r5, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8009416:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8009418:	b10c      	cbz	r4, 800941e <I2C_DMAAbort+0x3e>
    hi2c->hdmarx->XferCpltCallback = NULL;
 800941a:	2200      	movs	r2, #0
 800941c:	62a2      	str	r2, [r4, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009424:	601a      	str	r2, [r3, #0]
  hi2c->XferCount = 0U;
 8009426:	2200      	movs	r2, #0
 8009428:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 800942a:	b105      	cbz	r5, 800942e <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferAbortCallback = NULL;
 800942c:	636a      	str	r2, [r5, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 800942e:	b104      	cbz	r4, 8009432 <I2C_DMAAbort+0x52>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009430:	6362      	str	r2, [r4, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	f022 0201 	bic.w	r2, r2, #1
 8009438:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800943a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800943e:	2a60      	cmp	r2, #96	; 0x60
 8009440:	d111      	bne.n	8009466 <I2C_DMAAbort+0x86>
    hi2c->State         = HAL_I2C_STATE_READY;
 8009442:	2320      	movs	r3, #32
 8009444:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009448:	2300      	movs	r3, #0
 800944a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800944e:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8009450:	f7ff ffc4 	bl	80093dc <HAL_I2C_AbortCpltCallback>
}
 8009454:	b003      	add	sp, #12
 8009456:	bd30      	pop	{r4, r5, pc}
    count--;
 8009458:	9a01      	ldr	r2, [sp, #4]
 800945a:	3a01      	subs	r2, #1
 800945c:	9201      	str	r2, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	0592      	lsls	r2, r2, #22
 8009462:	d4ce      	bmi.n	8009402 <I2C_DMAAbort+0x22>
 8009464:	e7d3      	b.n	800940e <I2C_DMAAbort+0x2e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009466:	f001 0228 	and.w	r2, r1, #40	; 0x28
 800946a:	2a28      	cmp	r2, #40	; 0x28
 800946c:	d10e      	bne.n	800948c <I2C_DMAAbort+0xac>
      __HAL_I2C_ENABLE(hi2c);
 800946e:	6819      	ldr	r1, [r3, #0]
 8009470:	f041 0101 	orr.w	r1, r1, #1
 8009474:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009476:	6819      	ldr	r1, [r3, #0]
 8009478:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800947c:	6019      	str	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800947e:	2300      	movs	r3, #0
 8009480:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009482:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 8009486:	f7ff ffa8 	bl	80093da <HAL_I2C_ErrorCallback>
}
 800948a:	e7e3      	b.n	8009454 <I2C_DMAAbort+0x74>
      hi2c->State = HAL_I2C_STATE_READY;
 800948c:	2320      	movs	r3, #32
 800948e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009492:	2300      	movs	r3, #0
 8009494:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8009498:	e7f5      	b.n	8009486 <I2C_DMAAbort+0xa6>
 800949a:	bf00      	nop
 800949c:	20000074 	.word	0x20000074

080094a0 <I2C_ITError>:
{
 80094a0:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80094a2:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80094a6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
{
 80094aa:	4604      	mov	r4, r0
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80094ac:	2b10      	cmp	r3, #16
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80094ae:	b2d9      	uxtb	r1, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80094b0:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80094b2:	6803      	ldr	r3, [r0, #0]
 80094b4:	d001      	beq.n	80094ba <I2C_ITError+0x1a>
 80094b6:	2940      	cmp	r1, #64	; 0x40
 80094b8:	d113      	bne.n	80094e2 <I2C_ITError+0x42>
 80094ba:	2a22      	cmp	r2, #34	; 0x22
 80094bc:	d111      	bne.n	80094e2 <I2C_ITError+0x42>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80094be:	6819      	ldr	r1, [r3, #0]
 80094c0:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80094c4:	6019      	str	r1, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80094c6:	6859      	ldr	r1, [r3, #4]
 80094c8:	f411 6100 	ands.w	r1, r1, #2048	; 0x800
 80094cc:	d106      	bne.n	80094dc <I2C_ITError+0x3c>
 80094ce:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 80094d0:	bf1e      	ittt	ne
 80094d2:	2220      	movne	r2, #32
 80094d4:	f884 203d 	strbne.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80094d8:	f884 103e 	strbne.w	r1, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 80094dc:	2200      	movs	r2, #0
 80094de:	6322      	str	r2, [r4, #48]	; 0x30
 80094e0:	e007      	b.n	80094f2 <I2C_ITError+0x52>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80094e2:	f002 0128 	and.w	r1, r2, #40	; 0x28
 80094e6:	2928      	cmp	r1, #40	; 0x28
 80094e8:	d1ed      	bne.n	80094c6 <I2C_ITError+0x26>
    hi2c->PreviousState = I2C_STATE_NONE;
 80094ea:	2200      	movs	r2, #0
 80094ec:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80094ee:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80094f2:	685a      	ldr	r2, [r3, #4]
 80094f4:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80094f8:	d04f      	beq.n	800959a <I2C_ITError+0xfa>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80094fa:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80094fc:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80094fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009502:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009504:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8009508:	2b01      	cmp	r3, #1
 800950a:	4b37      	ldr	r3, [pc, #220]	; (80095e8 <I2C_ITError+0x148>)
 800950c:	d02b      	beq.n	8009566 <I2C_ITError+0xc6>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800950e:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009510:	f7fe fd14 	bl	8007f3c <HAL_DMA_Abort_IT>
 8009514:	b150      	cbz	r0, 800952c <I2C_ITError+0x8c>
        __HAL_I2C_DISABLE(hi2c);
 8009516:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009518:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 800951a:	6813      	ldr	r3, [r2, #0]
 800951c:	f023 0301 	bic.w	r3, r3, #1
 8009520:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8009522:	2320      	movs	r3, #32
 8009524:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009528:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800952a:	4798      	blx	r3
  CurrentError = hi2c->ErrorCode;
 800952c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800952e:	0719      	lsls	r1, r3, #28
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009530:	bf1f      	itttt	ne
 8009532:	6822      	ldrne	r2, [r4, #0]
 8009534:	6853      	ldrne	r3, [r2, #4]
 8009536:	f423 63e0 	bicne.w	r3, r3, #1792	; 0x700
 800953a:	6053      	strne	r3, [r2, #4]
  CurrentState = hi2c->State;
 800953c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009540:	6c22      	ldr	r2, [r4, #64]	; 0x40
  CurrentState = hi2c->State;
 8009542:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009544:	0752      	lsls	r2, r2, #29
 8009546:	d50d      	bpl.n	8009564 <I2C_ITError+0xc4>
 8009548:	2b28      	cmp	r3, #40	; 0x28
 800954a:	d10b      	bne.n	8009564 <I2C_ITError+0xc4>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800954c:	4b27      	ldr	r3, [pc, #156]	; (80095ec <I2C_ITError+0x14c>)
    hi2c->State         = HAL_I2C_STATE_READY;
 800954e:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009550:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009552:	2300      	movs	r3, #0
    HAL_I2C_ListenCpltCallback(hi2c);
 8009554:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8009556:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009558:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800955c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8009560:	f7ff fee7 	bl	8009332 <HAL_I2C_ListenCpltCallback>
}
 8009564:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009566:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009568:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800956a:	f7fe fce7 	bl	8007f3c <HAL_DMA_Abort_IT>
 800956e:	2800      	cmp	r0, #0
 8009570:	d0dc      	beq.n	800952c <I2C_ITError+0x8c>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009572:	6823      	ldr	r3, [r4, #0]
 8009574:	695a      	ldr	r2, [r3, #20]
 8009576:	0651      	lsls	r1, r2, #25
 8009578:	d505      	bpl.n	8009586 <I2C_ITError+0xe6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800957a:	691a      	ldr	r2, [r3, #16]
 800957c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800957e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8009580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009582:	3301      	adds	r3, #1
 8009584:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8009586:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009588:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 800958a:	6813      	ldr	r3, [r2, #0]
 800958c:	f023 0301 	bic.w	r3, r3, #1
 8009590:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8009592:	2320      	movs	r3, #32
 8009594:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009598:	e7c6      	b.n	8009528 <I2C_ITError+0x88>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800959a:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800959e:	2960      	cmp	r1, #96	; 0x60
 80095a0:	d115      	bne.n	80095ce <I2C_ITError+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80095a2:	2120      	movs	r1, #32
 80095a4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095a8:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80095aa:	695a      	ldr	r2, [r3, #20]
 80095ac:	0652      	lsls	r2, r2, #25
 80095ae:	d505      	bpl.n	80095bc <I2C_ITError+0x11c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095b0:	691a      	ldr	r2, [r3, #16]
 80095b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095b4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80095b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095b8:	3301      	adds	r3, #1
 80095ba:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80095bc:	6822      	ldr	r2, [r4, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80095be:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 80095c0:	6813      	ldr	r3, [r2, #0]
 80095c2:	f023 0301 	bic.w	r3, r3, #1
 80095c6:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80095c8:	f7ff ff08 	bl	80093dc <HAL_I2C_AbortCpltCallback>
 80095cc:	e7ae      	b.n	800952c <I2C_ITError+0x8c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80095ce:	695a      	ldr	r2, [r3, #20]
 80095d0:	0650      	lsls	r0, r2, #25
 80095d2:	d505      	bpl.n	80095e0 <I2C_ITError+0x140>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095d4:	691a      	ldr	r2, [r3, #16]
 80095d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095d8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80095da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095dc:	3301      	adds	r3, #1
 80095de:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 80095e0:	4620      	mov	r0, r4
 80095e2:	f7ff fefa 	bl	80093da <HAL_I2C_ErrorCallback>
 80095e6:	e7a1      	b.n	800952c <I2C_ITError+0x8c>
 80095e8:	080093e1 	.word	0x080093e1
 80095ec:	ffff0000 	.word	0xffff0000

080095f0 <HAL_I2C_EV_IRQHandler>:
{
 80095f0:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80095f2:	6803      	ldr	r3, [r0, #0]
{
 80095f4:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80095f6:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80095f8:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80095fa:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80095fe:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8009602:	2910      	cmp	r1, #16
{
 8009604:	b08e      	sub	sp, #56	; 0x38
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009606:	b2cd      	uxtb	r5, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009608:	b2c0      	uxtb	r0, r0
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800960a:	d002      	beq.n	8009612 <HAL_I2C_EV_IRQHandler+0x22>
 800960c:	2d40      	cmp	r5, #64	; 0x40
 800960e:	f040 82e0 	bne.w	8009bd2 <HAL_I2C_EV_IRQHandler+0x5e2>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009612:	6998      	ldr	r0, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009614:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8009616:	f011 0f01 	tst.w	r1, #1
 800961a:	d107      	bne.n	800962c <HAL_I2C_EV_IRQHandler+0x3c>
 800961c:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8009620:	d002      	beq.n	8009628 <HAL_I2C_EV_IRQHandler+0x38>
 8009622:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8009626:	d150      	bne.n	80096ca <HAL_I2C_EV_IRQHandler+0xda>
}
 8009628:	b00e      	add	sp, #56	; 0x38
 800962a:	bd70      	pop	{r4, r5, r6, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800962c:	0596      	lsls	r6, r2, #22
 800962e:	d54c      	bpl.n	80096ca <HAL_I2C_EV_IRQHandler+0xda>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009630:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009632:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8009636:	d10c      	bne.n	8009652 <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009638:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800963a:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800963c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8009640:	2a40      	cmp	r2, #64	; 0x40
 8009642:	d111      	bne.n	8009668 <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8009644:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009646:	b952      	cbnz	r2, 800965e <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009648:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800964a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800964e:	611a      	str	r2, [r3, #16]
 8009650:	e7ea      	b.n	8009628 <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009652:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009654:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 8009658:	d1f0      	bne.n	800963c <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800965a:	2208      	movs	r2, #8
 800965c:	e7ed      	b.n	800963a <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800965e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009660:	f042 0201 	orr.w	r2, r2, #1
 8009664:	b2d2      	uxtb	r2, r2
 8009666:	e7f2      	b.n	800964e <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009668:	6922      	ldr	r2, [r4, #16]
 800966a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800966e:	d119      	bne.n	80096a4 <HAL_I2C_EV_IRQHandler+0xb4>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009670:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8009674:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009676:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009678:	bf16      	itet	ne
 800967a:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800967e:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009682:	b2d2      	uxtbne	r2, r2
 8009684:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009686:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009688:	b10a      	cbz	r2, 800968e <HAL_I2C_EV_IRQHandler+0x9e>
 800968a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800968c:	b92a      	cbnz	r2, 800969a <HAL_I2C_EV_IRQHandler+0xaa>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800968e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009690:	2a00      	cmp	r2, #0
 8009692:	d0c9      	beq.n	8009628 <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8009694:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009696:	2a00      	cmp	r2, #0
 8009698:	d0c6      	beq.n	8009628 <HAL_I2C_EV_IRQHandler+0x38>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80096a0:	605a      	str	r2, [r3, #4]
 80096a2:	e7c1      	b.n	8009628 <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->EventCount == 0U)
 80096a4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80096a6:	b932      	cbnz	r2, 80096b6 <HAL_I2C_EV_IRQHandler+0xc6>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80096a8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80096aa:	11d2      	asrs	r2, r2, #7
 80096ac:	f002 0206 	and.w	r2, r2, #6
 80096b0:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 80096b4:	e7cb      	b.n	800964e <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 80096b6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80096b8:	2a01      	cmp	r2, #1
 80096ba:	d1b5      	bne.n	8009628 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80096bc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80096be:	11d2      	asrs	r2, r2, #7
 80096c0:	f002 0206 	and.w	r2, r2, #6
 80096c4:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 80096c8:	e7c1      	b.n	800964e <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80096ca:	070e      	lsls	r6, r1, #28
 80096cc:	d50e      	bpl.n	80096ec <HAL_I2C_EV_IRQHandler+0xfc>
 80096ce:	0596      	lsls	r6, r2, #22
 80096d0:	d50c      	bpl.n	80096ec <HAL_I2C_EV_IRQHandler+0xfc>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80096d2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80096d4:	b2d2      	uxtb	r2, r2
 80096d6:	611a      	str	r2, [r3, #16]
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80096d8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80096da:	b912      	cbnz	r2, 80096e2 <HAL_I2C_EV_IRQHandler+0xf2>
 80096dc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80096de:	2900      	cmp	r1, #0
 80096e0:	d0a2      	beq.n	8009628 <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80096e2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80096e4:	2a00      	cmp	r2, #0
 80096e6:	d1d8      	bne.n	800969a <HAL_I2C_EV_IRQHandler+0xaa>
 80096e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80096ea:	e7d3      	b.n	8009694 <HAL_I2C_EV_IRQHandler+0xa4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80096ec:	078e      	lsls	r6, r1, #30
 80096ee:	f140 80e6 	bpl.w	80098be <HAL_I2C_EV_IRQHandler+0x2ce>
 80096f2:	0596      	lsls	r6, r2, #22
 80096f4:	f140 80e3 	bpl.w	80098be <HAL_I2C_EV_IRQHandler+0x2ce>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80096f8:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80096fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 80096fe:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009700:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8009704:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009706:	2822      	cmp	r0, #34	; 0x22
 8009708:	f040 80d1 	bne.w	80098ae <HAL_I2C_EV_IRQHandler+0x2be>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800970c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800970e:	b940      	cbnz	r0, 8009722 <HAL_I2C_EV_IRQHandler+0x132>
 8009710:	2940      	cmp	r1, #64	; 0x40
 8009712:	d106      	bne.n	8009722 <HAL_I2C_EV_IRQHandler+0x132>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009714:	9001      	str	r0, [sp, #4]
 8009716:	695a      	ldr	r2, [r3, #20]
 8009718:	9201      	str	r2, [sp, #4]
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	9301      	str	r3, [sp, #4]
 800971e:	9b01      	ldr	r3, [sp, #4]
 8009720:	e782      	b.n	8009628 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8009722:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009724:	b989      	cbnz	r1, 800974a <HAL_I2C_EV_IRQHandler+0x15a>
 8009726:	6920      	ldr	r0, [r4, #16]
 8009728:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 800972c:	d10d      	bne.n	800974a <HAL_I2C_EV_IRQHandler+0x15a>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800972e:	9102      	str	r1, [sp, #8]
 8009730:	695a      	ldr	r2, [r3, #20]
 8009732:	9202      	str	r2, [sp, #8]
 8009734:	699a      	ldr	r2, [r3, #24]
 8009736:	9202      	str	r2, [sp, #8]
 8009738:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009740:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8009742:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009744:	3301      	adds	r3, #1
      hi2c->EventCount = 0U;
 8009746:	6523      	str	r3, [r4, #80]	; 0x50
 8009748:	e76e      	b.n	8009628 <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->XferCount == 0U)
 800974a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800974c:	b289      	uxth	r1, r1
 800974e:	b951      	cbnz	r1, 8009766 <HAL_I2C_EV_IRQHandler+0x176>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009750:	9103      	str	r1, [sp, #12]
 8009752:	695a      	ldr	r2, [r3, #20]
 8009754:	9203      	str	r2, [sp, #12]
 8009756:	699a      	ldr	r2, [r3, #24]
 8009758:	9203      	str	r2, [sp, #12]
 800975a:	9a03      	ldr	r2, [sp, #12]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009762:	601a      	str	r2, [r3, #0]
 8009764:	e019      	b.n	800979a <HAL_I2C_EV_IRQHandler+0x1aa>
      else if (hi2c->XferCount == 1U)
 8009766:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8009768:	b289      	uxth	r1, r1
 800976a:	2901      	cmp	r1, #1
 800976c:	d149      	bne.n	8009802 <HAL_I2C_EV_IRQHandler+0x212>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800976e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8009772:	d11b      	bne.n	80097ac <HAL_I2C_EV_IRQHandler+0x1bc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800977a:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800977c:	685a      	ldr	r2, [r3, #4]
 800977e:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8009782:	d00c      	beq.n	800979e <HAL_I2C_EV_IRQHandler+0x1ae>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800978a:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800978c:	2200      	movs	r2, #0
 800978e:	9204      	str	r2, [sp, #16]
 8009790:	695a      	ldr	r2, [r3, #20]
 8009792:	9204      	str	r2, [sp, #16]
 8009794:	699b      	ldr	r3, [r3, #24]
 8009796:	9304      	str	r3, [sp, #16]
 8009798:	9b04      	ldr	r3, [sp, #16]
      hi2c->EventCount = 0U;
 800979a:	2300      	movs	r3, #0
 800979c:	e7d3      	b.n	8009746 <HAL_I2C_EV_IRQHandler+0x156>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800979e:	9205      	str	r2, [sp, #20]
 80097a0:	695a      	ldr	r2, [r3, #20]
 80097a2:	9205      	str	r2, [sp, #20]
 80097a4:	699a      	ldr	r2, [r3, #24]
 80097a6:	9205      	str	r2, [sp, #20]
 80097a8:	9a05      	ldr	r2, [sp, #20]
 80097aa:	e7d7      	b.n	800975c <HAL_I2C_EV_IRQHandler+0x16c>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80097ac:	2a08      	cmp	r2, #8
 80097ae:	d01c      	beq.n	80097ea <HAL_I2C_EV_IRQHandler+0x1fa>
 80097b0:	2a20      	cmp	r2, #32
 80097b2:	d01a      	beq.n	80097ea <HAL_I2C_EV_IRQHandler+0x1fa>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80097b4:	2d12      	cmp	r5, #18
 80097b6:	d10d      	bne.n	80097d4 <HAL_I2C_EV_IRQHandler+0x1e4>
 80097b8:	2a01      	cmp	r2, #1
 80097ba:	d116      	bne.n	80097ea <HAL_I2C_EV_IRQHandler+0x1fa>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097c2:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097c4:	2200      	movs	r2, #0
 80097c6:	9206      	str	r2, [sp, #24]
 80097c8:	695a      	ldr	r2, [r3, #20]
 80097ca:	9206      	str	r2, [sp, #24]
 80097cc:	699b      	ldr	r3, [r3, #24]
 80097ce:	9306      	str	r3, [sp, #24]
 80097d0:	9b06      	ldr	r3, [sp, #24]
 80097d2:	e7e2      	b.n	800979a <HAL_I2C_EV_IRQHandler+0x1aa>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80097d4:	2a10      	cmp	r2, #16
 80097d6:	d8f1      	bhi.n	80097bc <HAL_I2C_EV_IRQHandler+0x1cc>
 80097d8:	499c      	ldr	r1, [pc, #624]	; (8009a4c <HAL_I2C_EV_IRQHandler+0x45c>)
 80097da:	fa21 f202 	lsr.w	r2, r1, r2
 80097de:	07d0      	lsls	r0, r2, #31
 80097e0:	d5ec      	bpl.n	80097bc <HAL_I2C_EV_IRQHandler+0x1cc>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80097e8:	e7eb      	b.n	80097c2 <HAL_I2C_EV_IRQHandler+0x1d2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097f0:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097f2:	2200      	movs	r2, #0
 80097f4:	9207      	str	r2, [sp, #28]
 80097f6:	695a      	ldr	r2, [r3, #20]
 80097f8:	9207      	str	r2, [sp, #28]
 80097fa:	699a      	ldr	r2, [r3, #24]
 80097fc:	9207      	str	r2, [sp, #28]
 80097fe:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009800:	e7ac      	b.n	800975c <HAL_I2C_EV_IRQHandler+0x16c>
      else if (hi2c->XferCount == 2U)
 8009802:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8009804:	b289      	uxth	r1, r1
 8009806:	2902      	cmp	r1, #2
 8009808:	d133      	bne.n	8009872 <HAL_I2C_EV_IRQHandler+0x282>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800980a:	2a10      	cmp	r2, #16
 800980c:	d805      	bhi.n	800981a <HAL_I2C_EV_IRQHandler+0x22a>
 800980e:	498f      	ldr	r1, [pc, #572]	; (8009a4c <HAL_I2C_EV_IRQHandler+0x45c>)
 8009810:	40d1      	lsrs	r1, r2
 8009812:	43c9      	mvns	r1, r1
 8009814:	f011 0101 	ands.w	r1, r1, #1
 8009818:	d020      	beq.n	800985c <HAL_I2C_EV_IRQHandler+0x26c>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800981a:	6819      	ldr	r1, [r3, #0]
 800981c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8009820:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009822:	2100      	movs	r1, #0
 8009824:	9108      	str	r1, [sp, #32]
 8009826:	6959      	ldr	r1, [r3, #20]
 8009828:	9108      	str	r1, [sp, #32]
 800982a:	6999      	ldr	r1, [r3, #24]
 800982c:	9108      	str	r1, [sp, #32]
 800982e:	9908      	ldr	r1, [sp, #32]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009830:	6819      	ldr	r1, [r3, #0]
 8009832:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8009836:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009838:	6859      	ldr	r1, [r3, #4]
 800983a:	0509      	lsls	r1, r1, #20
 800983c:	d5ad      	bpl.n	800979a <HAL_I2C_EV_IRQHandler+0x1aa>
 800983e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8009842:	d006      	beq.n	8009852 <HAL_I2C_EV_IRQHandler+0x262>
 8009844:	1e51      	subs	r1, r2, #1
 8009846:	291f      	cmp	r1, #31
 8009848:	d8a7      	bhi.n	800979a <HAL_I2C_EV_IRQHandler+0x1aa>
 800984a:	4a81      	ldr	r2, [pc, #516]	; (8009a50 <HAL_I2C_EV_IRQHandler+0x460>)
 800984c:	40ca      	lsrs	r2, r1
 800984e:	07d2      	lsls	r2, r2, #31
 8009850:	d5a3      	bpl.n	800979a <HAL_I2C_EV_IRQHandler+0x1aa>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009852:	685a      	ldr	r2, [r3, #4]
 8009854:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009858:	605a      	str	r2, [r3, #4]
 800985a:	e79e      	b.n	800979a <HAL_I2C_EV_IRQHandler+0x1aa>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800985c:	6818      	ldr	r0, [r3, #0]
 800985e:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 8009862:	6018      	str	r0, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009864:	9109      	str	r1, [sp, #36]	; 0x24
 8009866:	6959      	ldr	r1, [r3, #20]
 8009868:	9109      	str	r1, [sp, #36]	; 0x24
 800986a:	6999      	ldr	r1, [r3, #24]
 800986c:	9109      	str	r1, [sp, #36]	; 0x24
 800986e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009870:	e7e2      	b.n	8009838 <HAL_I2C_EV_IRQHandler+0x248>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009872:	6819      	ldr	r1, [r3, #0]
 8009874:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8009878:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800987a:	6859      	ldr	r1, [r3, #4]
 800987c:	050e      	lsls	r6, r1, #20
 800987e:	d50e      	bpl.n	800989e <HAL_I2C_EV_IRQHandler+0x2ae>
 8009880:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8009884:	d007      	beq.n	8009896 <HAL_I2C_EV_IRQHandler+0x2a6>
 8009886:	3a01      	subs	r2, #1
 8009888:	2a1f      	cmp	r2, #31
 800988a:	d808      	bhi.n	800989e <HAL_I2C_EV_IRQHandler+0x2ae>
 800988c:	4970      	ldr	r1, [pc, #448]	; (8009a50 <HAL_I2C_EV_IRQHandler+0x460>)
 800988e:	fa21 f202 	lsr.w	r2, r1, r2
 8009892:	07d5      	lsls	r5, r2, #31
 8009894:	d503      	bpl.n	800989e <HAL_I2C_EV_IRQHandler+0x2ae>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009896:	685a      	ldr	r2, [r3, #4]
 8009898:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800989c:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800989e:	2200      	movs	r2, #0
 80098a0:	920a      	str	r2, [sp, #40]	; 0x28
 80098a2:	695a      	ldr	r2, [r3, #20]
 80098a4:	920a      	str	r2, [sp, #40]	; 0x28
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	930a      	str	r3, [sp, #40]	; 0x28
 80098aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ac:	e775      	b.n	800979a <HAL_I2C_EV_IRQHandler+0x1aa>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098ae:	2200      	movs	r2, #0
 80098b0:	920b      	str	r2, [sp, #44]	; 0x2c
 80098b2:	695a      	ldr	r2, [r3, #20]
 80098b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80098b6:	699b      	ldr	r3, [r3, #24]
 80098b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80098ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098bc:	e6b4      	b.n	8009628 <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80098be:	f010 0f04 	tst.w	r0, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80098c2:	6858      	ldr	r0, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80098c4:	f000 8098 	beq.w	80099f8 <HAL_I2C_EV_IRQHandler+0x408>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80098c8:	0500      	lsls	r0, r0, #20
 80098ca:	f53f aead 	bmi.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80098ce:	060e      	lsls	r6, r1, #24
 80098d0:	f3c1 0080 	ubfx	r0, r1, #2, #1
 80098d4:	d555      	bpl.n	8009982 <HAL_I2C_EV_IRQHandler+0x392>
 80098d6:	0551      	lsls	r1, r2, #21
 80098d8:	d553      	bpl.n	8009982 <HAL_I2C_EV_IRQHandler+0x392>
 80098da:	2800      	cmp	r0, #0
 80098dc:	d154      	bne.n	8009988 <HAL_I2C_EV_IRQHandler+0x398>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80098de:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80098e2:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80098e4:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80098e8:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80098ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80098ec:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80098ee:	bb7d      	cbnz	r5, 8009950 <HAL_I2C_EV_IRQHandler+0x360>
 80098f0:	2a21      	cmp	r2, #33	; 0x21
 80098f2:	d12f      	bne.n	8009954 <HAL_I2C_EV_IRQHandler+0x364>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80098f4:	2808      	cmp	r0, #8
 80098f6:	d014      	beq.n	8009922 <HAL_I2C_EV_IRQHandler+0x332>
 80098f8:	2820      	cmp	r0, #32
 80098fa:	d012      	beq.n	8009922 <HAL_I2C_EV_IRQHandler+0x332>
 80098fc:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8009900:	d00f      	beq.n	8009922 <HAL_I2C_EV_IRQHandler+0x332>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009902:	685a      	ldr	r2, [r3, #4]
 8009904:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009908:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800990a:	2311      	movs	r3, #17
 800990c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800990e:	2300      	movs	r3, #0
 8009910:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8009914:	2320      	movs	r3, #32
 8009916:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800991a:	4620      	mov	r0, r4
 800991c:	f7ff fd04 	bl	8009328 <HAL_I2C_MasterTxCpltCallback>
 8009920:	e682      	b.n	8009628 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009922:	685a      	ldr	r2, [r3, #4]
        HAL_I2C_MemTxCpltCallback(hi2c);
 8009924:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009926:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800992a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009932:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009934:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8009936:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8009938:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800993a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800993e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009942:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009946:	2a40      	cmp	r2, #64	; 0x40
 8009948:	d1e8      	bne.n	800991c <HAL_I2C_EV_IRQHandler+0x32c>
        HAL_I2C_MemTxCpltCallback(hi2c);
 800994a:	f7ff fcf3 	bl	8009334 <HAL_I2C_MemTxCpltCallback>
 800994e:	e66b      	b.n	8009628 <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8009950:	2a21      	cmp	r2, #33	; 0x21
 8009952:	d005      	beq.n	8009960 <HAL_I2C_EV_IRQHandler+0x370>
 8009954:	2940      	cmp	r1, #64	; 0x40
 8009956:	f47f ae67 	bne.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800995a:	2a22      	cmp	r2, #34	; 0x22
 800995c:	f47f ae64 	bne.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 8009960:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009962:	b292      	uxth	r2, r2
 8009964:	b91a      	cbnz	r2, 800996e <HAL_I2C_EV_IRQHandler+0x37e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009966:	685a      	ldr	r2, [r3, #4]
 8009968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800996c:	e698      	b.n	80096a0 <HAL_I2C_EV_IRQHandler+0xb0>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800996e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8009972:	2a40      	cmp	r2, #64	; 0x40
 8009974:	d116      	bne.n	80099a4 <HAL_I2C_EV_IRQHandler+0x3b4>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8009976:	4620      	mov	r0, r4
}
 8009978:	b00e      	add	sp, #56	; 0x38
 800997a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800997e:	f7ff bcda 	b.w	8009336 <I2C_MemoryTransmit_TXE_BTF>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009982:	2800      	cmp	r0, #0
 8009984:	f43f ae50 	beq.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
 8009988:	0592      	lsls	r2, r2, #22
 800998a:	f57f ae4d 	bpl.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800998e:	2d10      	cmp	r5, #16
 8009990:	d1f1      	bne.n	8009976 <HAL_I2C_EV_IRQHandler+0x386>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009992:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009994:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8009998:	2a21      	cmp	r2, #33	; 0x21
 800999a:	f47f ae45 	bne.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 800999e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80099a0:	b292      	uxth	r2, r2
 80099a2:	b14a      	cbz	r2, 80099b8 <HAL_I2C_EV_IRQHandler+0x3c8>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80099a6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80099aa:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 80099ac:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80099ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80099b0:	3b01      	subs	r3, #1
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	8563      	strh	r3, [r4, #42]	; 0x2a
      }
 80099b6:	e637      	b.n	8009628 <HAL_I2C_EV_IRQHandler+0x38>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80099b8:	2908      	cmp	r1, #8
 80099ba:	d00d      	beq.n	80099d8 <HAL_I2C_EV_IRQHandler+0x3e8>
 80099bc:	2920      	cmp	r1, #32
 80099be:	d00b      	beq.n	80099d8 <HAL_I2C_EV_IRQHandler+0x3e8>
 80099c0:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80099c4:	d008      	beq.n	80099d8 <HAL_I2C_EV_IRQHandler+0x3e8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80099c6:	6859      	ldr	r1, [r3, #4]
 80099c8:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80099cc:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80099ce:	2311      	movs	r3, #17
 80099d0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80099d2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 80099d6:	e79d      	b.n	8009914 <HAL_I2C_EV_IRQHandler+0x324>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80099d8:	685a      	ldr	r2, [r3, #4]
 80099da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80099de:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099e6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80099e8:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80099ea:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80099ec:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80099ee:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80099f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80099f6:	e790      	b.n	800991a <HAL_I2C_EV_IRQHandler+0x32a>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80099f8:	0506      	lsls	r6, r0, #20
 80099fa:	f53f ae15 	bmi.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80099fe:	064d      	lsls	r5, r1, #25
 8009a00:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8009a04:	d57b      	bpl.n	8009afe <HAL_I2C_EV_IRQHandler+0x50e>
 8009a06:	0551      	lsls	r1, r2, #21
 8009a08:	d579      	bpl.n	8009afe <HAL_I2C_EV_IRQHandler+0x50e>
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	d17a      	bne.n	8009b04 <HAL_I2C_EV_IRQHandler+0x514>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009a0e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8009a12:	2a22      	cmp	r2, #34	; 0x22
 8009a14:	f47f ae08 	bne.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
    tmp = hi2c->XferCount;
 8009a18:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009a1a:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8009a1c:	2a03      	cmp	r2, #3
 8009a1e:	d919      	bls.n	8009a54 <HAL_I2C_EV_IRQHandler+0x464>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a20:	691a      	ldr	r2, [r3, #16]
 8009a22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a24:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009a26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a28:	3301      	adds	r3, #1
 8009a2a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8009a2c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8009a34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	2b03      	cmp	r3, #3
 8009a3a:	f47f adf5 	bne.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009a3e:	6822      	ldr	r2, [r4, #0]
 8009a40:	6853      	ldr	r3, [r2, #4]
 8009a42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a46:	6053      	str	r3, [r2, #4]
 8009a48:	e5ee      	b.n	8009628 <HAL_I2C_EV_IRQHandler+0x38>
 8009a4a:	bf00      	nop
 8009a4c:	00010014 	.word	0x00010014
 8009a50:	80008081 	.word	0x80008081
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8009a54:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009a56:	2902      	cmp	r1, #2
 8009a58:	f43f ade6 	beq.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
 8009a5c:	2a01      	cmp	r2, #1
 8009a5e:	f63f ade3 	bhi.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009a62:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8009a66:	4a72      	ldr	r2, [pc, #456]	; (8009c30 <HAL_I2C_EV_IRQHandler+0x640>)
  __IO uint32_t count = 0U;
 8009a68:	900c      	str	r0, [sp, #48]	; 0x30
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009a6a:	6812      	ldr	r2, [r2, #0]
 8009a6c:	fbb2 f2f1 	udiv	r2, r2, r1
 8009a70:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009a74:	920c      	str	r2, [sp, #48]	; 0x30
    count--;
 8009a76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a78:	3a01      	subs	r2, #1
 8009a7a:	920c      	str	r2, [sp, #48]	; 0x30
    if (count == 0U)
 8009a7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009a7e:	b9d1      	cbnz	r1, 8009ab6 <HAL_I2C_EV_IRQHandler+0x4c6>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a80:	6c22      	ldr	r2, [r4, #64]	; 0x40
        HAL_I2C_ErrorCallback(hi2c);
 8009a82:	4620      	mov	r0, r4
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a84:	f042 0220 	orr.w	r2, r2, #32
 8009a88:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009a8a:	685a      	ldr	r2, [r3, #4]
 8009a8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009a90:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a92:	691a      	ldr	r2, [r3, #16]
 8009a94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a96:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8009a98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8009a9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009aa6:	2320      	movs	r3, #32
 8009aa8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009aac:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8009ab0:	f7ff fc93 	bl	80093da <HAL_I2C_ErrorCallback>
 8009ab4:	e5b8      	b.n	8009628 <HAL_I2C_EV_IRQHandler+0x38>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8009abc:	d1db      	bne.n	8009a76 <HAL_I2C_EV_IRQHandler+0x486>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009abe:	6819      	ldr	r1, [r3, #0]
 8009ac0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8009ac4:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009ac6:	6859      	ldr	r1, [r3, #4]
 8009ac8:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8009acc:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ace:	6919      	ldr	r1, [r3, #16]
 8009ad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ad2:	7019      	strb	r1, [r3, #0]
        hi2c->pBuffPtr++;
 8009ad4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8009ada:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009adc:	3b01      	subs	r3, #1
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009ae2:	2320      	movs	r3, #32
 8009ae4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009ae8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009aec:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009af0:	2b40      	cmp	r3, #64	; 0x40
 8009af2:	d168      	bne.n	8009bc6 <HAL_I2C_EV_IRQHandler+0x5d6>
          hi2c->PreviousState = I2C_STATE_NONE;
 8009af4:	6322      	str	r2, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009af6:	4620      	mov	r0, r4
 8009af8:	f7ff fc6e 	bl	80093d8 <HAL_I2C_MemRxCpltCallback>
 8009afc:	e594      	b.n	8009628 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009afe:	2800      	cmp	r0, #0
 8009b00:	f43f ad92 	beq.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
 8009b04:	0592      	lsls	r2, r2, #22
 8009b06:	f57f ad8f 	bpl.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009b0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8009b0c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8009b0e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009b10:	b280      	uxth	r0, r0
 8009b12:	2804      	cmp	r0, #4
 8009b14:	d109      	bne.n	8009b2a <HAL_I2C_EV_IRQHandler+0x53a>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009b16:	685a      	ldr	r2, [r3, #4]
 8009b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b1c:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8009b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b24:	3301      	adds	r3, #1
 8009b26:	6263      	str	r3, [r4, #36]	; 0x24
 8009b28:	e741      	b.n	80099ae <HAL_I2C_EV_IRQHandler+0x3be>
  else if (hi2c->XferCount == 3U)
 8009b2a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8009b2c:	b280      	uxth	r0, r0
 8009b2e:	2803      	cmp	r0, #3
 8009b30:	d10c      	bne.n	8009b4c <HAL_I2C_EV_IRQHandler+0x55c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009b32:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8009b34:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009b36:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8009b3a:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8009b3c:	d0ef      	beq.n	8009b1e <HAL_I2C_EV_IRQHandler+0x52e>
 8009b3e:	2a02      	cmp	r2, #2
 8009b40:	d0ed      	beq.n	8009b1e <HAL_I2C_EV_IRQHandler+0x52e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b48:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b4a:	e7e8      	b.n	8009b1e <HAL_I2C_EV_IRQHandler+0x52e>
  else if (hi2c->XferCount == 2U)
 8009b4c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8009b4e:	b280      	uxth	r0, r0
 8009b50:	2802      	cmp	r0, #2
 8009b52:	d1e4      	bne.n	8009b1e <HAL_I2C_EV_IRQHandler+0x52e>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8009b54:	2a01      	cmp	r2, #1
 8009b56:	d001      	beq.n	8009b5c <HAL_I2C_EV_IRQHandler+0x56c>
 8009b58:	2a10      	cmp	r2, #16
 8009b5a:	d128      	bne.n	8009bae <HAL_I2C_EV_IRQHandler+0x5be>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b62:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8009b68:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009b6a:	1c53      	adds	r3, r2, #1
 8009b6c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8009b6e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009b70:	3b01      	subs	r3, #1
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 8009b7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009b7e:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr++;
 8009b80:	3301      	adds	r3, #1
 8009b82:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8009b84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009b86:	3b01      	subs	r3, #1
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009b8c:	6853      	ldr	r3, [r2, #4]
 8009b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b92:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009b94:	2320      	movs	r3, #32
 8009b96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009b9a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8009b9e:	2b40      	cmp	r3, #64	; 0x40
 8009ba0:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ba4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009ba8:	d10d      	bne.n	8009bc6 <HAL_I2C_EV_IRQHandler+0x5d6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009baa:	6323      	str	r3, [r4, #48]	; 0x30
 8009bac:	e7a3      	b.n	8009af6 <HAL_I2C_EV_IRQHandler+0x506>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8009bae:	2a04      	cmp	r2, #4
 8009bb0:	d001      	beq.n	8009bb6 <HAL_I2C_EV_IRQHandler+0x5c6>
 8009bb2:	2a02      	cmp	r2, #2
 8009bb4:	d103      	bne.n	8009bbe <HAL_I2C_EV_IRQHandler+0x5ce>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009bbc:	e7d1      	b.n	8009b62 <HAL_I2C_EV_IRQHandler+0x572>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bc4:	e7cd      	b.n	8009b62 <HAL_I2C_EV_IRQHandler+0x572>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009bc6:	2312      	movs	r3, #18
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009bc8:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009bca:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009bcc:	f7ff fbad 	bl	800932a <HAL_I2C_MasterRxCpltCallback>
 8009bd0:	e52a      	b.n	8009628 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009bd2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009bd4:	b311      	cbz	r1, 8009c1c <HAL_I2C_EV_IRQHandler+0x62c>
  uint32_t sr2itflags               = 0U;
 8009bd6:	2500      	movs	r5, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009bd8:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009bda:	078e      	lsls	r6, r1, #30
 8009bdc:	d52a      	bpl.n	8009c34 <HAL_I2C_EV_IRQHandler+0x644>
 8009bde:	0596      	lsls	r6, r2, #22
 8009be0:	d528      	bpl.n	8009c34 <HAL_I2C_EV_IRQHandler+0x644>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009be2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009be4:	b102      	cbz	r2, 8009be8 <HAL_I2C_EV_IRQHandler+0x5f8>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009be6:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009be8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8009bec:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8009bf0:	2a28      	cmp	r2, #40	; 0x28
 8009bf2:	d116      	bne.n	8009c22 <HAL_I2C_EV_IRQHandler+0x632>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009bf4:	685a      	ldr	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009bf6:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bfe:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009c00:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 8009c02:	f04f 0300 	mov.w	r3, #0
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009c06:	4620      	mov	r0, r4
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009c08:	bf54      	ite	pl
 8009c0a:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009c0c:	8b22      	ldrhmi	r2, [r4, #24]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009c0e:	f001 0101 	and.w	r1, r1, #1
    __HAL_UNLOCK(hi2c);
 8009c12:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009c16:	f7ff fb8b 	bl	8009330 <HAL_I2C_AddrCallback>
 8009c1a:	e505      	b.n	8009628 <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009c1c:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009c1e:	6959      	ldr	r1, [r3, #20]
 8009c20:	e7db      	b.n	8009bda <HAL_I2C_EV_IRQHandler+0x5ea>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009c22:	f06f 0202 	mvn.w	r2, #2
 8009c26:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8009c28:	2300      	movs	r3, #0
 8009c2a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8009c2e:	e4fb      	b.n	8009628 <HAL_I2C_EV_IRQHandler+0x38>
 8009c30:	20000074 	.word	0x20000074
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009c34:	06ce      	lsls	r6, r1, #27
 8009c36:	f140 80b1 	bpl.w	8009d9c <HAL_I2C_EV_IRQHandler+0x7ac>
 8009c3a:	0595      	lsls	r5, r2, #22
 8009c3c:	f140 80ae 	bpl.w	8009d9c <HAL_I2C_EV_IRQHandler+0x7ac>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009c40:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009c44:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009c46:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009c48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009c4c:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009c4e:	2200      	movs	r2, #0
 8009c50:	920d      	str	r2, [sp, #52]	; 0x34
 8009c52:	695a      	ldr	r2, [r3, #20]
 8009c54:	920d      	str	r2, [sp, #52]	; 0x34
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	f042 0201 	orr.w	r2, r2, #1
 8009c5c:	601a      	str	r2, [r3, #0]
 8009c5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c66:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009c68:	685a      	ldr	r2, [r3, #4]
 8009c6a:	0512      	lsls	r2, r2, #20
 8009c6c:	d520      	bpl.n	8009cb0 <HAL_I2C_EV_IRQHandler+0x6c0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009c6e:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8009c72:	2a22      	cmp	r2, #34	; 0x22
 8009c74:	d14a      	bne.n	8009d0c <HAL_I2C_EV_IRQHandler+0x71c>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009c76:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009c78:	6802      	ldr	r2, [r0, #0]
 8009c7a:	6852      	ldr	r2, [r2, #4]
 8009c7c:	b292      	uxth	r2, r2
 8009c7e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8009c80:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009c82:	b292      	uxth	r2, r2
 8009c84:	b11a      	cbz	r2, 8009c8e <HAL_I2C_EV_IRQHandler+0x69e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009c86:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009c88:	f042 0204 	orr.w	r2, r2, #4
 8009c8c:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009c8e:	685a      	ldr	r2, [r3, #4]
 8009c90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c94:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009c96:	f7fe f997 	bl	8007fc8 <HAL_DMA_GetState>
 8009c9a:	2801      	cmp	r0, #1
 8009c9c:	d008      	beq.n	8009cb0 <HAL_I2C_EV_IRQHandler+0x6c0>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009c9e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009ca0:	4b79      	ldr	r3, [pc, #484]	; (8009e88 <HAL_I2C_EV_IRQHandler+0x898>)
 8009ca2:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009ca4:	f7fe f94a 	bl	8007f3c <HAL_DMA_Abort_IT>
 8009ca8:	b110      	cbz	r0, 8009cb0 <HAL_I2C_EV_IRQHandler+0x6c0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009caa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009cac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009cae:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8009cb0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	b313      	cbz	r3, 8009cfc <HAL_I2C_EV_IRQHandler+0x70c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009cb6:	6823      	ldr	r3, [r4, #0]
 8009cb8:	695a      	ldr	r2, [r3, #20]
 8009cba:	0756      	lsls	r6, r2, #29
 8009cbc:	d509      	bpl.n	8009cd2 <HAL_I2C_EV_IRQHandler+0x6e2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cbe:	691a      	ldr	r2, [r3, #16]
 8009cc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cc2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009cc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8009cca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009cd2:	6823      	ldr	r3, [r4, #0]
 8009cd4:	695a      	ldr	r2, [r3, #20]
 8009cd6:	0650      	lsls	r0, r2, #25
 8009cd8:	d509      	bpl.n	8009cee <HAL_I2C_EV_IRQHandler+0x6fe>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cda:	691a      	ldr	r2, [r3, #16]
 8009cdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cde:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009ce0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8009ce6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8009cee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	b11b      	cbz	r3, 8009cfc <HAL_I2C_EV_IRQHandler+0x70c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009cf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cf6:	f043 0304 	orr.w	r3, r3, #4
 8009cfa:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009cfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cfe:	b313      	cbz	r3, 8009d46 <HAL_I2C_EV_IRQHandler+0x756>
    I2C_ITError(hi2c);
 8009d00:	4620      	mov	r0, r4
}
 8009d02:	b00e      	add	sp, #56	; 0x38
 8009d04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    I2C_ITError(hi2c);
 8009d08:	f7ff bbca 	b.w	80094a0 <I2C_ITError>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009d0c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009d0e:	6802      	ldr	r2, [r0, #0]
 8009d10:	6852      	ldr	r2, [r2, #4]
 8009d12:	b292      	uxth	r2, r2
 8009d14:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8009d16:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009d18:	b292      	uxth	r2, r2
 8009d1a:	b11a      	cbz	r2, 8009d24 <HAL_I2C_EV_IRQHandler+0x734>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009d1c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009d1e:	f042 0204 	orr.w	r2, r2, #4
 8009d22:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009d24:	685a      	ldr	r2, [r3, #4]
 8009d26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d2a:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009d2c:	f7fe f94c 	bl	8007fc8 <HAL_DMA_GetState>
 8009d30:	2801      	cmp	r0, #1
 8009d32:	d0bd      	beq.n	8009cb0 <HAL_I2C_EV_IRQHandler+0x6c0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009d34:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009d36:	4b54      	ldr	r3, [pc, #336]	; (8009e88 <HAL_I2C_EV_IRQHandler+0x898>)
 8009d38:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009d3a:	f7fe f8ff 	bl	8007f3c <HAL_DMA_Abort_IT>
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	d0b6      	beq.n	8009cb0 <HAL_I2C_EV_IRQHandler+0x6c0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009d42:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009d44:	e7b2      	b.n	8009cac <HAL_I2C_EV_IRQHandler+0x6bc>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009d46:	2d2a      	cmp	r5, #42	; 0x2a
 8009d48:	d106      	bne.n	8009d58 <HAL_I2C_EV_IRQHandler+0x768>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009d4a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009d4c:	2328      	movs	r3, #40	; 0x28
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009d4e:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009d50:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009d54:	f7ff faeb 	bl	800932e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009d58:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8009d5c:	2b28      	cmp	r3, #40	; 0x28
 8009d5e:	d10c      	bne.n	8009d7a <HAL_I2C_EV_IRQHandler+0x78a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d60:	4b4a      	ldr	r3, [pc, #296]	; (8009e8c <HAL_I2C_EV_IRQHandler+0x89c>)
      hi2c->State = HAL_I2C_STATE_READY;
 8009d62:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d64:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009d66:	2300      	movs	r3, #0
      HAL_I2C_ListenCpltCallback(hi2c);
 8009d68:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 8009d6a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009d6c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d70:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8009d74:	f7ff fadd 	bl	8009332 <HAL_I2C_ListenCpltCallback>
 8009d78:	e456      	b.n	8009628 <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009d7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009d7c:	2b22      	cmp	r3, #34	; 0x22
 8009d7e:	d002      	beq.n	8009d86 <HAL_I2C_EV_IRQHandler+0x796>
 8009d80:	2d22      	cmp	r5, #34	; 0x22
 8009d82:	f47f ac51 	bne.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009d86:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8009d88:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8009d8a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009d8c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d90:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009d94:	4620      	mov	r0, r4
 8009d96:	f7ff faca 	bl	800932e <HAL_I2C_SlaveRxCpltCallback>
 8009d9a:	e445      	b.n	8009628 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009d9c:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 8009da0:	2821      	cmp	r0, #33	; 0x21
 8009da2:	f3c1 0580 	ubfx	r5, r1, #2, #1
 8009da6:	d135      	bne.n	8009e14 <HAL_I2C_EV_IRQHandler+0x824>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009da8:	0609      	lsls	r1, r1, #24
 8009daa:	d527      	bpl.n	8009dfc <HAL_I2C_EV_IRQHandler+0x80c>
 8009dac:	0556      	lsls	r6, r2, #21
 8009dae:	d525      	bpl.n	8009dfc <HAL_I2C_EV_IRQHandler+0x80c>
 8009db0:	bb3d      	cbnz	r5, 8009e02 <HAL_I2C_EV_IRQHandler+0x812>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009db2:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8009db6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009db8:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8009dba:	b292      	uxth	r2, r2
 8009dbc:	2a00      	cmp	r2, #0
 8009dbe:	f43f ac33 	beq.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009dc2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009dc4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009dc8:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 8009dca:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8009dcc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009dce:	3a01      	subs	r2, #1
 8009dd0:	b292      	uxth	r2, r2
 8009dd2:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009dd4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009dd6:	b292      	uxth	r2, r2
 8009dd8:	2a00      	cmp	r2, #0
 8009dda:	f47f ac25 	bne.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
 8009dde:	2929      	cmp	r1, #41	; 0x29
 8009de0:	f47f ac22 	bne.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009de4:	685a      	ldr	r2, [r3, #4]
 8009de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dea:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009dec:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009dee:	6320      	str	r0, [r4, #48]	; 0x30
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009df0:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009df2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009df6:	f7ff fa99 	bl	800932c <HAL_I2C_SlaveTxCpltCallback>
 8009dfa:	e415      	b.n	8009628 <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009dfc:	2d00      	cmp	r5, #0
 8009dfe:	f43f ac13 	beq.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
 8009e02:	0595      	lsls	r5, r2, #22
 8009e04:	f57f ac10 	bpl.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8009e08:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009e0a:	b292      	uxth	r2, r2
 8009e0c:	2a00      	cmp	r2, #0
 8009e0e:	f43f ac0b 	beq.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
 8009e12:	e5c7      	b.n	80099a4 <HAL_I2C_EV_IRQHandler+0x3b4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009e14:	0648      	lsls	r0, r1, #25
 8009e16:	d527      	bpl.n	8009e68 <HAL_I2C_EV_IRQHandler+0x878>
 8009e18:	0551      	lsls	r1, r2, #21
 8009e1a:	d525      	bpl.n	8009e68 <HAL_I2C_EV_IRQHandler+0x878>
 8009e1c:	bb3d      	cbnz	r5, 8009e6e <HAL_I2C_EV_IRQHandler+0x87e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009e1e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8009e22:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009e24:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 8009e26:	b289      	uxth	r1, r1
 8009e28:	2900      	cmp	r1, #0
 8009e2a:	f43f abfd 	beq.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e2e:	6919      	ldr	r1, [r3, #16]
 8009e30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e32:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 8009e34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e36:	3301      	adds	r3, #1
 8009e38:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8009e3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009e42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	f47f abee 	bne.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
 8009e4c:	2a2a      	cmp	r2, #42	; 0x2a
 8009e4e:	f47f abeb 	bne.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009e52:	6822      	ldr	r2, [r4, #0]
 8009e54:	6853      	ldr	r3, [r2, #4]
 8009e56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e5a:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009e5c:	2322      	movs	r3, #34	; 0x22
 8009e5e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009e60:	2328      	movs	r3, #40	; 0x28
 8009e62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8009e66:	e795      	b.n	8009d94 <HAL_I2C_EV_IRQHandler+0x7a4>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009e68:	2d00      	cmp	r5, #0
 8009e6a:	f43f abdd 	beq.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
 8009e6e:	0592      	lsls	r2, r2, #22
 8009e70:	f57f abda 	bpl.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8009e74:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009e76:	b292      	uxth	r2, r2
 8009e78:	2a00      	cmp	r2, #0
 8009e7a:	f43f abd5 	beq.w	8009628 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e7e:	691a      	ldr	r2, [r3, #16]
 8009e80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e82:	701a      	strb	r2, [r3, #0]
 8009e84:	e64d      	b.n	8009b22 <HAL_I2C_EV_IRQHandler+0x532>
 8009e86:	bf00      	nop
 8009e88:	080093e1 	.word	0x080093e1
 8009e8c:	ffff0000 	.word	0xffff0000

08009e90 <HAL_I2C_ER_IRQHandler>:
{
 8009e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8009e92:	6803      	ldr	r3, [r0, #0]
{
 8009e94:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8009e96:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8009e98:	685e      	ldr	r6, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009e9a:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009e9e:	05f8      	lsls	r0, r7, #23
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009ea0:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009ea2:	f3c7 2500 	ubfx	r5, r7, #8, #1
 8009ea6:	d50b      	bpl.n	8009ec0 <HAL_I2C_ER_IRQHandler+0x30>
 8009ea8:	05f1      	lsls	r1, r6, #23
 8009eaa:	f3c6 2500 	ubfx	r5, r6, #8, #1
 8009eae:	d507      	bpl.n	8009ec0 <HAL_I2C_ER_IRQHandler+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009eb0:	f46f 7180 	mvn.w	r1, #256	; 0x100
    error |= HAL_I2C_ERROR_BERR;
 8009eb4:	2501      	movs	r5, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009eb6:	6159      	str	r1, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8009eb8:	6819      	ldr	r1, [r3, #0]
 8009eba:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009ebe:	6019      	str	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009ec0:	05b8      	lsls	r0, r7, #22
 8009ec2:	d506      	bpl.n	8009ed2 <HAL_I2C_ER_IRQHandler+0x42>
 8009ec4:	05f1      	lsls	r1, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009ec6:	bf42      	ittt	mi
 8009ec8:	f46f 7100 	mvnmi.w	r1, #512	; 0x200
    error |= HAL_I2C_ERROR_ARLO;
 8009ecc:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009ed0:	6159      	strmi	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009ed2:	0578      	lsls	r0, r7, #21
 8009ed4:	d536      	bpl.n	8009f44 <HAL_I2C_ER_IRQHandler+0xb4>
 8009ed6:	05f1      	lsls	r1, r6, #23
 8009ed8:	d534      	bpl.n	8009f44 <HAL_I2C_ER_IRQHandler+0xb4>
    tmp2 = hi2c->XferCount;
 8009eda:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8009edc:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8009ee0:	2a20      	cmp	r2, #32
    tmp4 = hi2c->PreviousState;
 8009ee2:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
    tmp2 = hi2c->XferCount;
 8009ee6:	b280      	uxth	r0, r0
    tmp3 = hi2c->State;
 8009ee8:	b2c9      	uxtb	r1, r1
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8009eea:	d15b      	bne.n	8009fa4 <HAL_I2C_ER_IRQHandler+0x114>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	d159      	bne.n	8009fa4 <HAL_I2C_ER_IRQHandler+0x114>
 8009ef0:	f001 00f7 	and.w	r0, r1, #247	; 0xf7
 8009ef4:	2821      	cmp	r0, #33	; 0x21
 8009ef6:	d004      	beq.n	8009f02 <HAL_I2C_ER_IRQHandler+0x72>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8009ef8:	2928      	cmp	r1, #40	; 0x28
 8009efa:	d153      	bne.n	8009fa4 <HAL_I2C_ER_IRQHandler+0x114>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8009efc:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
 8009f00:	d150      	bne.n	8009fa4 <HAL_I2C_ER_IRQHandler+0x114>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009f02:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009f06:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009f08:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009f0a:	2908      	cmp	r1, #8
 8009f0c:	d001      	beq.n	8009f12 <HAL_I2C_ER_IRQHandler+0x82>
 8009f0e:	2920      	cmp	r1, #32
 8009f10:	d12a      	bne.n	8009f68 <HAL_I2C_ER_IRQHandler+0xd8>
 8009f12:	2a28      	cmp	r2, #40	; 0x28
 8009f14:	d128      	bne.n	8009f68 <HAL_I2C_ER_IRQHandler+0xd8>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009f16:	4a2c      	ldr	r2, [pc, #176]	; (8009fc8 <HAL_I2C_ER_IRQHandler+0x138>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8009f18:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009f1a:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009f1c:	685a      	ldr	r2, [r3, #4]
 8009f1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009f22:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009f28:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f30:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009f32:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8009f34:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8009f36:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009f38:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009f3c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8009f40:	f7ff f9f7 	bl	8009332 <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009f44:	053a      	lsls	r2, r7, #20
 8009f46:	d53b      	bpl.n	8009fc0 <HAL_I2C_ER_IRQHandler+0x130>
 8009f48:	05f3      	lsls	r3, r6, #23
 8009f4a:	d539      	bpl.n	8009fc0 <HAL_I2C_ER_IRQHandler+0x130>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009f4c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8009f50:	6823      	ldr	r3, [r4, #0]
    error |= HAL_I2C_ERROR_OVR;
 8009f52:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009f56:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 8009f58:	6c23      	ldr	r3, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8009f5a:	4620      	mov	r0, r4
    hi2c->ErrorCode |= error;
 8009f5c:	431d      	orrs	r5, r3
 8009f5e:	6425      	str	r5, [r4, #64]	; 0x40
}
 8009f60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8009f64:	f7ff ba9c 	b.w	80094a0 <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009f68:	2a21      	cmp	r2, #33	; 0x21
 8009f6a:	d117      	bne.n	8009f9c <HAL_I2C_ER_IRQHandler+0x10c>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009f6c:	4916      	ldr	r1, [pc, #88]	; (8009fc8 <HAL_I2C_ER_IRQHandler+0x138>)
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009f6e:	4620      	mov	r0, r4
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009f70:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009f72:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009f74:	2220      	movs	r2, #32
 8009f76:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009f80:	685a      	ldr	r2, [r3, #4]
 8009f82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009f86:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009f8c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f94:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009f96:	f7ff f9c9 	bl	800932c <HAL_I2C_SlaveTxCpltCallback>
 8009f9a:	e7d3      	b.n	8009f44 <HAL_I2C_ER_IRQHandler+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009fa0:	615a      	str	r2, [r3, #20]
 8009fa2:	e7cf      	b.n	8009f44 <HAL_I2C_ER_IRQHandler+0xb4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009fa4:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8009fa8:	2a10      	cmp	r2, #16
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009faa:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8009fac:	f045 0504 	orr.w	r5, r5, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8009fb0:	d001      	beq.n	8009fb6 <HAL_I2C_ER_IRQHandler+0x126>
 8009fb2:	2a40      	cmp	r2, #64	; 0x40
 8009fb4:	d1c6      	bne.n	8009f44 <HAL_I2C_ER_IRQHandler+0xb4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fbc:	601a      	str	r2, [r3, #0]
 8009fbe:	e7c1      	b.n	8009f44 <HAL_I2C_ER_IRQHandler+0xb4>
  if (error != HAL_I2C_ERROR_NONE)
 8009fc0:	2d00      	cmp	r5, #0
 8009fc2:	d1c9      	bne.n	8009f58 <HAL_I2C_ER_IRQHandler+0xc8>
}
 8009fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	ffff0000 	.word	0xffff0000

08009fcc <HAL_I2C_GetState>:
  return hi2c->State;
 8009fcc:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8009fd0:	4770      	bx	lr
	...

08009fd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009fd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009fd8:	4605      	mov	r5, r0
 8009fda:	b338      	cbz	r0, 800a02c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009fdc:	6803      	ldr	r3, [r0, #0]
 8009fde:	07db      	lsls	r3, r3, #31
 8009fe0:	d410      	bmi.n	800a004 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009fe2:	682b      	ldr	r3, [r5, #0]
 8009fe4:	079f      	lsls	r7, r3, #30
 8009fe6:	d45e      	bmi.n	800a0a6 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009fe8:	682b      	ldr	r3, [r5, #0]
 8009fea:	0719      	lsls	r1, r3, #28
 8009fec:	f100 8095 	bmi.w	800a11a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ff0:	682b      	ldr	r3, [r5, #0]
 8009ff2:	075a      	lsls	r2, r3, #29
 8009ff4:	f100 80bf 	bmi.w	800a176 <HAL_RCC_OscConfig+0x1a2>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ff8:	69e8      	ldr	r0, [r5, #28]
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	f040 812c 	bne.w	800a258 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 800a000:	2000      	movs	r0, #0
 800a002:	e029      	b.n	800a058 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a004:	4c8f      	ldr	r4, [pc, #572]	; (800a244 <HAL_RCC_OscConfig+0x270>)
 800a006:	6863      	ldr	r3, [r4, #4]
 800a008:	f003 030c 	and.w	r3, r3, #12
 800a00c:	2b04      	cmp	r3, #4
 800a00e:	d007      	beq.n	800a020 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a010:	6863      	ldr	r3, [r4, #4]
 800a012:	f003 030c 	and.w	r3, r3, #12
 800a016:	2b08      	cmp	r3, #8
 800a018:	d10a      	bne.n	800a030 <HAL_RCC_OscConfig+0x5c>
 800a01a:	6863      	ldr	r3, [r4, #4]
 800a01c:	03de      	lsls	r6, r3, #15
 800a01e:	d507      	bpl.n	800a030 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a020:	6823      	ldr	r3, [r4, #0]
 800a022:	039c      	lsls	r4, r3, #14
 800a024:	d5dd      	bpl.n	8009fe2 <HAL_RCC_OscConfig+0xe>
 800a026:	686b      	ldr	r3, [r5, #4]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1da      	bne.n	8009fe2 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800a02c:	2001      	movs	r0, #1
 800a02e:	e013      	b.n	800a058 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a030:	686b      	ldr	r3, [r5, #4]
 800a032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a036:	d112      	bne.n	800a05e <HAL_RCC_OscConfig+0x8a>
 800a038:	6823      	ldr	r3, [r4, #0]
 800a03a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a03e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800a040:	f7fd fd3e 	bl	8007ac0 <HAL_GetTick>
 800a044:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a046:	6823      	ldr	r3, [r4, #0]
 800a048:	0398      	lsls	r0, r3, #14
 800a04a:	d4ca      	bmi.n	8009fe2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a04c:	f7fd fd38 	bl	8007ac0 <HAL_GetTick>
 800a050:	1b80      	subs	r0, r0, r6
 800a052:	2864      	cmp	r0, #100	; 0x64
 800a054:	d9f7      	bls.n	800a046 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800a056:	2003      	movs	r0, #3
}
 800a058:	b002      	add	sp, #8
 800a05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a05e:	b99b      	cbnz	r3, 800a088 <HAL_RCC_OscConfig+0xb4>
 800a060:	6823      	ldr	r3, [r4, #0]
 800a062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a066:	6023      	str	r3, [r4, #0]
 800a068:	6823      	ldr	r3, [r4, #0]
 800a06a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a06e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800a070:	f7fd fd26 	bl	8007ac0 <HAL_GetTick>
 800a074:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a076:	6823      	ldr	r3, [r4, #0]
 800a078:	0399      	lsls	r1, r3, #14
 800a07a:	d5b2      	bpl.n	8009fe2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a07c:	f7fd fd20 	bl	8007ac0 <HAL_GetTick>
 800a080:	1b80      	subs	r0, r0, r6
 800a082:	2864      	cmp	r0, #100	; 0x64
 800a084:	d9f7      	bls.n	800a076 <HAL_RCC_OscConfig+0xa2>
 800a086:	e7e6      	b.n	800a056 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a08c:	6823      	ldr	r3, [r4, #0]
 800a08e:	d103      	bne.n	800a098 <HAL_RCC_OscConfig+0xc4>
 800a090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a094:	6023      	str	r3, [r4, #0]
 800a096:	e7cf      	b.n	800a038 <HAL_RCC_OscConfig+0x64>
 800a098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a09c:	6023      	str	r3, [r4, #0]
 800a09e:	6823      	ldr	r3, [r4, #0]
 800a0a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a0a4:	e7cb      	b.n	800a03e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a0a6:	4c67      	ldr	r4, [pc, #412]	; (800a244 <HAL_RCC_OscConfig+0x270>)
 800a0a8:	6863      	ldr	r3, [r4, #4]
 800a0aa:	f013 0f0c 	tst.w	r3, #12
 800a0ae:	d007      	beq.n	800a0c0 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a0b0:	6863      	ldr	r3, [r4, #4]
 800a0b2:	f003 030c 	and.w	r3, r3, #12
 800a0b6:	2b08      	cmp	r3, #8
 800a0b8:	d110      	bne.n	800a0dc <HAL_RCC_OscConfig+0x108>
 800a0ba:	6863      	ldr	r3, [r4, #4]
 800a0bc:	03da      	lsls	r2, r3, #15
 800a0be:	d40d      	bmi.n	800a0dc <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a0c0:	6823      	ldr	r3, [r4, #0]
 800a0c2:	079b      	lsls	r3, r3, #30
 800a0c4:	d502      	bpl.n	800a0cc <HAL_RCC_OscConfig+0xf8>
 800a0c6:	692b      	ldr	r3, [r5, #16]
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d1af      	bne.n	800a02c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0cc:	6823      	ldr	r3, [r4, #0]
 800a0ce:	696a      	ldr	r2, [r5, #20]
 800a0d0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a0d4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a0d8:	6023      	str	r3, [r4, #0]
 800a0da:	e785      	b.n	8009fe8 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a0dc:	692a      	ldr	r2, [r5, #16]
 800a0de:	4b5a      	ldr	r3, [pc, #360]	; (800a248 <HAL_RCC_OscConfig+0x274>)
 800a0e0:	b16a      	cbz	r2, 800a0fe <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a0e6:	f7fd fceb 	bl	8007ac0 <HAL_GetTick>
 800a0ea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0ec:	6823      	ldr	r3, [r4, #0]
 800a0ee:	079f      	lsls	r7, r3, #30
 800a0f0:	d4ec      	bmi.n	800a0cc <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0f2:	f7fd fce5 	bl	8007ac0 <HAL_GetTick>
 800a0f6:	1b80      	subs	r0, r0, r6
 800a0f8:	2802      	cmp	r0, #2
 800a0fa:	d9f7      	bls.n	800a0ec <HAL_RCC_OscConfig+0x118>
 800a0fc:	e7ab      	b.n	800a056 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800a0fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a100:	f7fd fcde 	bl	8007ac0 <HAL_GetTick>
 800a104:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a106:	6823      	ldr	r3, [r4, #0]
 800a108:	0798      	lsls	r0, r3, #30
 800a10a:	f57f af6d 	bpl.w	8009fe8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a10e:	f7fd fcd7 	bl	8007ac0 <HAL_GetTick>
 800a112:	1b80      	subs	r0, r0, r6
 800a114:	2802      	cmp	r0, #2
 800a116:	d9f6      	bls.n	800a106 <HAL_RCC_OscConfig+0x132>
 800a118:	e79d      	b.n	800a056 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a11a:	69aa      	ldr	r2, [r5, #24]
 800a11c:	4e49      	ldr	r6, [pc, #292]	; (800a244 <HAL_RCC_OscConfig+0x270>)
 800a11e:	4b4b      	ldr	r3, [pc, #300]	; (800a24c <HAL_RCC_OscConfig+0x278>)
 800a120:	b1da      	cbz	r2, 800a15a <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_LSI_ENABLE();
 800a122:	2201      	movs	r2, #1
 800a124:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800a126:	f7fd fccb 	bl	8007ac0 <HAL_GetTick>
 800a12a:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a12c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a12e:	079b      	lsls	r3, r3, #30
 800a130:	d50d      	bpl.n	800a14e <HAL_RCC_OscConfig+0x17a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a132:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800a136:	4b46      	ldr	r3, [pc, #280]	; (800a250 <HAL_RCC_OscConfig+0x27c>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a13e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800a140:	bf00      	nop
  }
  while (Delay --);
 800a142:	9b01      	ldr	r3, [sp, #4]
 800a144:	1e5a      	subs	r2, r3, #1
 800a146:	9201      	str	r2, [sp, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1f9      	bne.n	800a140 <HAL_RCC_OscConfig+0x16c>
 800a14c:	e750      	b.n	8009ff0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a14e:	f7fd fcb7 	bl	8007ac0 <HAL_GetTick>
 800a152:	1b00      	subs	r0, r0, r4
 800a154:	2802      	cmp	r0, #2
 800a156:	d9e9      	bls.n	800a12c <HAL_RCC_OscConfig+0x158>
 800a158:	e77d      	b.n	800a056 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 800a15a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800a15c:	f7fd fcb0 	bl	8007ac0 <HAL_GetTick>
 800a160:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a162:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a164:	079f      	lsls	r7, r3, #30
 800a166:	f57f af43 	bpl.w	8009ff0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a16a:	f7fd fca9 	bl	8007ac0 <HAL_GetTick>
 800a16e:	1b00      	subs	r0, r0, r4
 800a170:	2802      	cmp	r0, #2
 800a172:	d9f6      	bls.n	800a162 <HAL_RCC_OscConfig+0x18e>
 800a174:	e76f      	b.n	800a056 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a176:	4c33      	ldr	r4, [pc, #204]	; (800a244 <HAL_RCC_OscConfig+0x270>)
 800a178:	69e3      	ldr	r3, [r4, #28]
 800a17a:	00d8      	lsls	r0, r3, #3
 800a17c:	d424      	bmi.n	800a1c8 <HAL_RCC_OscConfig+0x1f4>
      pwrclkchanged = SET;
 800a17e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800a180:	69e3      	ldr	r3, [r4, #28]
 800a182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a186:	61e3      	str	r3, [r4, #28]
 800a188:	69e3      	ldr	r3, [r4, #28]
 800a18a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a192:	4e30      	ldr	r6, [pc, #192]	; (800a254 <HAL_RCC_OscConfig+0x280>)
 800a194:	6833      	ldr	r3, [r6, #0]
 800a196:	05d9      	lsls	r1, r3, #23
 800a198:	d518      	bpl.n	800a1cc <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a19a:	68eb      	ldr	r3, [r5, #12]
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d126      	bne.n	800a1ee <HAL_RCC_OscConfig+0x21a>
 800a1a0:	6a23      	ldr	r3, [r4, #32]
 800a1a2:	f043 0301 	orr.w	r3, r3, #1
 800a1a6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800a1a8:	f7fd fc8a 	bl	8007ac0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1ac:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800a1b0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a1b2:	6a23      	ldr	r3, [r4, #32]
 800a1b4:	079b      	lsls	r3, r3, #30
 800a1b6:	d53f      	bpl.n	800a238 <HAL_RCC_OscConfig+0x264>
    if (pwrclkchanged == SET)
 800a1b8:	2f00      	cmp	r7, #0
 800a1ba:	f43f af1d 	beq.w	8009ff8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a1be:	69e3      	ldr	r3, [r4, #28]
 800a1c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1c4:	61e3      	str	r3, [r4, #28]
 800a1c6:	e717      	b.n	8009ff8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800a1c8:	2700      	movs	r7, #0
 800a1ca:	e7e2      	b.n	800a192 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a1cc:	6833      	ldr	r3, [r6, #0]
 800a1ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1d2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800a1d4:	f7fd fc74 	bl	8007ac0 <HAL_GetTick>
 800a1d8:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a1da:	6833      	ldr	r3, [r6, #0]
 800a1dc:	05da      	lsls	r2, r3, #23
 800a1de:	d4dc      	bmi.n	800a19a <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1e0:	f7fd fc6e 	bl	8007ac0 <HAL_GetTick>
 800a1e4:	eba0 0008 	sub.w	r0, r0, r8
 800a1e8:	2864      	cmp	r0, #100	; 0x64
 800a1ea:	d9f6      	bls.n	800a1da <HAL_RCC_OscConfig+0x206>
 800a1ec:	e733      	b.n	800a056 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a1ee:	b9ab      	cbnz	r3, 800a21c <HAL_RCC_OscConfig+0x248>
 800a1f0:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1f2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a1f6:	f023 0301 	bic.w	r3, r3, #1
 800a1fa:	6223      	str	r3, [r4, #32]
 800a1fc:	6a23      	ldr	r3, [r4, #32]
 800a1fe:	f023 0304 	bic.w	r3, r3, #4
 800a202:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800a204:	f7fd fc5c 	bl	8007ac0 <HAL_GetTick>
 800a208:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a20a:	6a23      	ldr	r3, [r4, #32]
 800a20c:	0798      	lsls	r0, r3, #30
 800a20e:	d5d3      	bpl.n	800a1b8 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a210:	f7fd fc56 	bl	8007ac0 <HAL_GetTick>
 800a214:	1b80      	subs	r0, r0, r6
 800a216:	4540      	cmp	r0, r8
 800a218:	d9f7      	bls.n	800a20a <HAL_RCC_OscConfig+0x236>
 800a21a:	e71c      	b.n	800a056 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a21c:	2b05      	cmp	r3, #5
 800a21e:	6a23      	ldr	r3, [r4, #32]
 800a220:	d103      	bne.n	800a22a <HAL_RCC_OscConfig+0x256>
 800a222:	f043 0304 	orr.w	r3, r3, #4
 800a226:	6223      	str	r3, [r4, #32]
 800a228:	e7ba      	b.n	800a1a0 <HAL_RCC_OscConfig+0x1cc>
 800a22a:	f023 0301 	bic.w	r3, r3, #1
 800a22e:	6223      	str	r3, [r4, #32]
 800a230:	6a23      	ldr	r3, [r4, #32]
 800a232:	f023 0304 	bic.w	r3, r3, #4
 800a236:	e7b6      	b.n	800a1a6 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a238:	f7fd fc42 	bl	8007ac0 <HAL_GetTick>
 800a23c:	1b80      	subs	r0, r0, r6
 800a23e:	4540      	cmp	r0, r8
 800a240:	d9b7      	bls.n	800a1b2 <HAL_RCC_OscConfig+0x1de>
 800a242:	e708      	b.n	800a056 <HAL_RCC_OscConfig+0x82>
 800a244:	40021000 	.word	0x40021000
 800a248:	42420000 	.word	0x42420000
 800a24c:	42420480 	.word	0x42420480
 800a250:	20000074 	.word	0x20000074
 800a254:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a258:	4b2a      	ldr	r3, [pc, #168]	; (800a304 <HAL_RCC_OscConfig+0x330>)
 800a25a:	685a      	ldr	r2, [r3, #4]
 800a25c:	461c      	mov	r4, r3
 800a25e:	f002 020c 	and.w	r2, r2, #12
 800a262:	2a08      	cmp	r2, #8
 800a264:	d03d      	beq.n	800a2e2 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a266:	2300      	movs	r3, #0
 800a268:	4e27      	ldr	r6, [pc, #156]	; (800a308 <HAL_RCC_OscConfig+0x334>)
 800a26a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800a26c:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a26e:	d12b      	bne.n	800a2c8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800a270:	f7fd fc26 	bl	8007ac0 <HAL_GetTick>
 800a274:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a276:	6823      	ldr	r3, [r4, #0]
 800a278:	0199      	lsls	r1, r3, #6
 800a27a:	d41f      	bmi.n	800a2bc <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a27c:	6a2b      	ldr	r3, [r5, #32]
 800a27e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a282:	d105      	bne.n	800a290 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a284:	6862      	ldr	r2, [r4, #4]
 800a286:	68a9      	ldr	r1, [r5, #8]
 800a288:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a28c:	430a      	orrs	r2, r1
 800a28e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a290:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800a292:	6862      	ldr	r2, [r4, #4]
 800a294:	430b      	orrs	r3, r1
 800a296:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800a29a:	4313      	orrs	r3, r2
 800a29c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800a29e:	2301      	movs	r3, #1
 800a2a0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800a2a2:	f7fd fc0d 	bl	8007ac0 <HAL_GetTick>
 800a2a6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a2a8:	6823      	ldr	r3, [r4, #0]
 800a2aa:	019a      	lsls	r2, r3, #6
 800a2ac:	f53f aea8 	bmi.w	800a000 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2b0:	f7fd fc06 	bl	8007ac0 <HAL_GetTick>
 800a2b4:	1b40      	subs	r0, r0, r5
 800a2b6:	2802      	cmp	r0, #2
 800a2b8:	d9f6      	bls.n	800a2a8 <HAL_RCC_OscConfig+0x2d4>
 800a2ba:	e6cc      	b.n	800a056 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2bc:	f7fd fc00 	bl	8007ac0 <HAL_GetTick>
 800a2c0:	1bc0      	subs	r0, r0, r7
 800a2c2:	2802      	cmp	r0, #2
 800a2c4:	d9d7      	bls.n	800a276 <HAL_RCC_OscConfig+0x2a2>
 800a2c6:	e6c6      	b.n	800a056 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800a2c8:	f7fd fbfa 	bl	8007ac0 <HAL_GetTick>
 800a2cc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a2ce:	6823      	ldr	r3, [r4, #0]
 800a2d0:	019b      	lsls	r3, r3, #6
 800a2d2:	f57f ae95 	bpl.w	800a000 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2d6:	f7fd fbf3 	bl	8007ac0 <HAL_GetTick>
 800a2da:	1b40      	subs	r0, r0, r5
 800a2dc:	2802      	cmp	r0, #2
 800a2de:	d9f6      	bls.n	800a2ce <HAL_RCC_OscConfig+0x2fa>
 800a2e0:	e6b9      	b.n	800a056 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a2e2:	2801      	cmp	r0, #1
 800a2e4:	f43f aeb8 	beq.w	800a058 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 800a2e8:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2ea:	6a2a      	ldr	r2, [r5, #32]
 800a2ec:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800a2f0:	4291      	cmp	r1, r2
 800a2f2:	f47f ae9b 	bne.w	800a02c <HAL_RCC_OscConfig+0x58>
 800a2f6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a2f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	f43f ae7f 	beq.w	800a000 <HAL_RCC_OscConfig+0x2c>
 800a302:	e693      	b.n	800a02c <HAL_RCC_OscConfig+0x58>
 800a304:	40021000 	.word	0x40021000
 800a308:	42420060 	.word	0x42420060

0800a30c <HAL_RCC_GetSysClockFreq>:
{
 800a30c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800a30e:	4b18      	ldr	r3, [pc, #96]	; (800a370 <HAL_RCC_GetSysClockFreq+0x64>)
{
 800a310:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800a312:	ac02      	add	r4, sp, #8
 800a314:	f103 0510 	add.w	r5, r3, #16
 800a318:	4622      	mov	r2, r4
 800a31a:	6818      	ldr	r0, [r3, #0]
 800a31c:	6859      	ldr	r1, [r3, #4]
 800a31e:	3308      	adds	r3, #8
 800a320:	c203      	stmia	r2!, {r0, r1}
 800a322:	42ab      	cmp	r3, r5
 800a324:	4614      	mov	r4, r2
 800a326:	d1f7      	bne.n	800a318 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800a328:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 800a32c:	4911      	ldr	r1, [pc, #68]	; (800a374 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800a32e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800a332:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800a334:	f003 020c 	and.w	r2, r3, #12
 800a338:	2a08      	cmp	r2, #8
 800a33a:	d117      	bne.n	800a36c <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a33c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800a340:	a806      	add	r0, sp, #24
 800a342:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a344:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a346:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a34a:	d50c      	bpl.n	800a366 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a34c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a34e:	480a      	ldr	r0, [pc, #40]	; (800a378 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a350:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a354:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a356:	aa06      	add	r2, sp, #24
 800a358:	4413      	add	r3, r2
 800a35a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a35e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800a362:	b007      	add	sp, #28
 800a364:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a366:	4805      	ldr	r0, [pc, #20]	; (800a37c <HAL_RCC_GetSysClockFreq+0x70>)
 800a368:	4350      	muls	r0, r2
 800a36a:	e7fa      	b.n	800a362 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 800a36c:	4802      	ldr	r0, [pc, #8]	; (800a378 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800a36e:	e7f8      	b.n	800a362 <HAL_RCC_GetSysClockFreq+0x56>
 800a370:	0800b31c 	.word	0x0800b31c
 800a374:	40021000 	.word	0x40021000
 800a378:	007a1200 	.word	0x007a1200
 800a37c:	003d0900 	.word	0x003d0900

0800a380 <HAL_RCC_ClockConfig>:
{
 800a380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a384:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800a386:	4604      	mov	r4, r0
 800a388:	b910      	cbnz	r0, 800a390 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800a38a:	2001      	movs	r0, #1
}
 800a38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a390:	4a44      	ldr	r2, [pc, #272]	; (800a4a4 <HAL_RCC_ClockConfig+0x124>)
 800a392:	6813      	ldr	r3, [r2, #0]
 800a394:	f003 0307 	and.w	r3, r3, #7
 800a398:	428b      	cmp	r3, r1
 800a39a:	d328      	bcc.n	800a3ee <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a39c:	6821      	ldr	r1, [r4, #0]
 800a39e:	078e      	lsls	r6, r1, #30
 800a3a0:	d430      	bmi.n	800a404 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a3a2:	07ca      	lsls	r2, r1, #31
 800a3a4:	d443      	bmi.n	800a42e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a3a6:	4a3f      	ldr	r2, [pc, #252]	; (800a4a4 <HAL_RCC_ClockConfig+0x124>)
 800a3a8:	6813      	ldr	r3, [r2, #0]
 800a3aa:	f003 0307 	and.w	r3, r3, #7
 800a3ae:	42ab      	cmp	r3, r5
 800a3b0:	d865      	bhi.n	800a47e <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3b2:	6822      	ldr	r2, [r4, #0]
 800a3b4:	4d3c      	ldr	r5, [pc, #240]	; (800a4a8 <HAL_RCC_ClockConfig+0x128>)
 800a3b6:	f012 0f04 	tst.w	r2, #4
 800a3ba:	d16c      	bne.n	800a496 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3bc:	0713      	lsls	r3, r2, #28
 800a3be:	d506      	bpl.n	800a3ce <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a3c0:	686b      	ldr	r3, [r5, #4]
 800a3c2:	6922      	ldr	r2, [r4, #16]
 800a3c4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800a3c8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a3cc:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a3ce:	f7ff ff9d 	bl	800a30c <HAL_RCC_GetSysClockFreq>
 800a3d2:	686b      	ldr	r3, [r5, #4]
 800a3d4:	4a35      	ldr	r2, [pc, #212]	; (800a4ac <HAL_RCC_ClockConfig+0x12c>)
 800a3d6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a3da:	5cd3      	ldrb	r3, [r2, r3]
 800a3dc:	40d8      	lsrs	r0, r3
 800a3de:	4b34      	ldr	r3, [pc, #208]	; (800a4b0 <HAL_RCC_ClockConfig+0x130>)
 800a3e0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800a3e2:	4b34      	ldr	r3, [pc, #208]	; (800a4b4 <HAL_RCC_ClockConfig+0x134>)
 800a3e4:	6818      	ldr	r0, [r3, #0]
 800a3e6:	f7fd fb29 	bl	8007a3c <HAL_InitTick>
  return HAL_OK;
 800a3ea:	2000      	movs	r0, #0
 800a3ec:	e7ce      	b.n	800a38c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3ee:	6813      	ldr	r3, [r2, #0]
 800a3f0:	f023 0307 	bic.w	r3, r3, #7
 800a3f4:	430b      	orrs	r3, r1
 800a3f6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3f8:	6813      	ldr	r3, [r2, #0]
 800a3fa:	f003 0307 	and.w	r3, r3, #7
 800a3fe:	428b      	cmp	r3, r1
 800a400:	d1c3      	bne.n	800a38a <HAL_RCC_ClockConfig+0xa>
 800a402:	e7cb      	b.n	800a39c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a404:	4b28      	ldr	r3, [pc, #160]	; (800a4a8 <HAL_RCC_ClockConfig+0x128>)
 800a406:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a40a:	bf1e      	ittt	ne
 800a40c:	685a      	ldrne	r2, [r3, #4]
 800a40e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800a412:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a414:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a416:	bf42      	ittt	mi
 800a418:	685a      	ldrmi	r2, [r3, #4]
 800a41a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800a41e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a420:	685a      	ldr	r2, [r3, #4]
 800a422:	68a0      	ldr	r0, [r4, #8]
 800a424:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a428:	4302      	orrs	r2, r0
 800a42a:	605a      	str	r2, [r3, #4]
 800a42c:	e7b9      	b.n	800a3a2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a42e:	6862      	ldr	r2, [r4, #4]
 800a430:	4e1d      	ldr	r6, [pc, #116]	; (800a4a8 <HAL_RCC_ClockConfig+0x128>)
 800a432:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a434:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a436:	d11a      	bne.n	800a46e <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a438:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a43c:	d0a5      	beq.n	800a38a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a43e:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a440:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a444:	f023 0303 	bic.w	r3, r3, #3
 800a448:	4313      	orrs	r3, r2
 800a44a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800a44c:	f7fd fb38 	bl	8007ac0 <HAL_GetTick>
 800a450:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a452:	6873      	ldr	r3, [r6, #4]
 800a454:	6862      	ldr	r2, [r4, #4]
 800a456:	f003 030c 	and.w	r3, r3, #12
 800a45a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800a45e:	d0a2      	beq.n	800a3a6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a460:	f7fd fb2e 	bl	8007ac0 <HAL_GetTick>
 800a464:	1bc0      	subs	r0, r0, r7
 800a466:	4540      	cmp	r0, r8
 800a468:	d9f3      	bls.n	800a452 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800a46a:	2003      	movs	r0, #3
 800a46c:	e78e      	b.n	800a38c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a46e:	2a02      	cmp	r2, #2
 800a470:	d102      	bne.n	800a478 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a472:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800a476:	e7e1      	b.n	800a43c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a478:	f013 0f02 	tst.w	r3, #2
 800a47c:	e7de      	b.n	800a43c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a47e:	6813      	ldr	r3, [r2, #0]
 800a480:	f023 0307 	bic.w	r3, r3, #7
 800a484:	432b      	orrs	r3, r5
 800a486:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a488:	6813      	ldr	r3, [r2, #0]
 800a48a:	f003 0307 	and.w	r3, r3, #7
 800a48e:	42ab      	cmp	r3, r5
 800a490:	f47f af7b 	bne.w	800a38a <HAL_RCC_ClockConfig+0xa>
 800a494:	e78d      	b.n	800a3b2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a496:	686b      	ldr	r3, [r5, #4]
 800a498:	68e1      	ldr	r1, [r4, #12]
 800a49a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a49e:	430b      	orrs	r3, r1
 800a4a0:	606b      	str	r3, [r5, #4]
 800a4a2:	e78b      	b.n	800a3bc <HAL_RCC_ClockConfig+0x3c>
 800a4a4:	40022000 	.word	0x40022000
 800a4a8:	40021000 	.word	0x40021000
 800a4ac:	0800b304 	.word	0x0800b304
 800a4b0:	20000074 	.word	0x20000074
 800a4b4:	2000007c 	.word	0x2000007c

0800a4b8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a4b8:	4b04      	ldr	r3, [pc, #16]	; (800a4cc <HAL_RCC_GetPCLK1Freq+0x14>)
 800a4ba:	4a05      	ldr	r2, [pc, #20]	; (800a4d0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800a4c2:	5cd3      	ldrb	r3, [r2, r3]
 800a4c4:	4a03      	ldr	r2, [pc, #12]	; (800a4d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800a4c6:	6810      	ldr	r0, [r2, #0]
}
 800a4c8:	40d8      	lsrs	r0, r3
 800a4ca:	4770      	bx	lr
 800a4cc:	40021000 	.word	0x40021000
 800a4d0:	0800b314 	.word	0x0800b314
 800a4d4:	20000074 	.word	0x20000074

0800a4d8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a4d8:	4b04      	ldr	r3, [pc, #16]	; (800a4ec <HAL_RCC_GetPCLK2Freq+0x14>)
 800a4da:	4a05      	ldr	r2, [pc, #20]	; (800a4f0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800a4e2:	5cd3      	ldrb	r3, [r2, r3]
 800a4e4:	4a03      	ldr	r2, [pc, #12]	; (800a4f4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800a4e6:	6810      	ldr	r0, [r2, #0]
}
 800a4e8:	40d8      	lsrs	r0, r3
 800a4ea:	4770      	bx	lr
 800a4ec:	40021000 	.word	0x40021000
 800a4f0:	0800b314 	.word	0x0800b314
 800a4f4:	20000074 	.word	0x20000074

0800a4f8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a4f8:	6803      	ldr	r3, [r0, #0]
{
 800a4fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a4fe:	07d9      	lsls	r1, r3, #31
{
 800a500:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a502:	d520      	bpl.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a504:	4c35      	ldr	r4, [pc, #212]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800a506:	69e3      	ldr	r3, [r4, #28]
 800a508:	00da      	lsls	r2, r3, #3
 800a50a:	d432      	bmi.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800a50c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800a50e:	69e3      	ldr	r3, [r4, #28]
 800a510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a514:	61e3      	str	r3, [r4, #28]
 800a516:	69e3      	ldr	r3, [r4, #28]
 800a518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a51c:	9301      	str	r3, [sp, #4]
 800a51e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a520:	4e2f      	ldr	r6, [pc, #188]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a522:	6833      	ldr	r3, [r6, #0]
 800a524:	05db      	lsls	r3, r3, #23
 800a526:	d526      	bpl.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a528:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a52a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800a52e:	d136      	bne.n	800a59e <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a530:	6a23      	ldr	r3, [r4, #32]
 800a532:	686a      	ldr	r2, [r5, #4]
 800a534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a538:	4313      	orrs	r3, r2
 800a53a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a53c:	b11f      	cbz	r7, 800a546 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a53e:	69e3      	ldr	r3, [r4, #28]
 800a540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a544:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a546:	6828      	ldr	r0, [r5, #0]
 800a548:	0783      	lsls	r3, r0, #30
 800a54a:	d506      	bpl.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a54c:	4923      	ldr	r1, [pc, #140]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800a54e:	68ab      	ldr	r3, [r5, #8]
 800a550:	684a      	ldr	r2, [r1, #4]
 800a552:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a556:	431a      	orrs	r2, r3
 800a558:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a55a:	f010 0010 	ands.w	r0, r0, #16
 800a55e:	d01b      	beq.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a560:	4a1e      	ldr	r2, [pc, #120]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800a562:	68e9      	ldr	r1, [r5, #12]
 800a564:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800a566:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a568:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a56c:	430b      	orrs	r3, r1
 800a56e:	6053      	str	r3, [r2, #4]
 800a570:	e012      	b.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800a572:	2700      	movs	r7, #0
 800a574:	e7d4      	b.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a576:	6833      	ldr	r3, [r6, #0]
 800a578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a57c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800a57e:	f7fd fa9f 	bl	8007ac0 <HAL_GetTick>
 800a582:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a584:	6833      	ldr	r3, [r6, #0]
 800a586:	05d8      	lsls	r0, r3, #23
 800a588:	d4ce      	bmi.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a58a:	f7fd fa99 	bl	8007ac0 <HAL_GetTick>
 800a58e:	eba0 0008 	sub.w	r0, r0, r8
 800a592:	2864      	cmp	r0, #100	; 0x64
 800a594:	d9f6      	bls.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800a596:	2003      	movs	r0, #3
}
 800a598:	b002      	add	sp, #8
 800a59a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a59e:	686a      	ldr	r2, [r5, #4]
 800a5a0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d0c3      	beq.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800a5a8:	2001      	movs	r0, #1
 800a5aa:	4a0e      	ldr	r2, [pc, #56]	; (800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a5ac:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800a5ae:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a5b0:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a5b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a5b6:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800a5b8:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a5ba:	07d9      	lsls	r1, r3, #31
 800a5bc:	d5b8      	bpl.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800a5be:	f7fd fa7f 	bl	8007ac0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5c2:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800a5c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a5c8:	6a23      	ldr	r3, [r4, #32]
 800a5ca:	079a      	lsls	r2, r3, #30
 800a5cc:	d4b0      	bmi.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5ce:	f7fd fa77 	bl	8007ac0 <HAL_GetTick>
 800a5d2:	1b80      	subs	r0, r0, r6
 800a5d4:	4540      	cmp	r0, r8
 800a5d6:	d9f7      	bls.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800a5d8:	e7dd      	b.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800a5da:	bf00      	nop
 800a5dc:	40021000 	.word	0x40021000
 800a5e0:	40007000 	.word	0x40007000
 800a5e4:	42420440 	.word	0x42420440

0800a5e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800a5ec:	4b34      	ldr	r3, [pc, #208]	; (800a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
{
 800a5ee:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800a5f0:	ad02      	add	r5, sp, #8
 800a5f2:	f103 0610 	add.w	r6, r3, #16
 800a5f6:	462c      	mov	r4, r5
 800a5f8:	6818      	ldr	r0, [r3, #0]
 800a5fa:	6859      	ldr	r1, [r3, #4]
 800a5fc:	3308      	adds	r3, #8
 800a5fe:	c403      	stmia	r4!, {r0, r1}
 800a600:	42b3      	cmp	r3, r6
 800a602:	4625      	mov	r5, r4
 800a604:	d1f7      	bne.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800a606:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800a60a:	2a02      	cmp	r2, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800a60c:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 800a610:	d049      	beq.n	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 800a612:	2a10      	cmp	r2, #16
 800a614:	d003      	beq.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 800a616:	2a01      	cmp	r2, #1
 800a618:	d026      	beq.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
  uint32_t temp_reg = 0U, frequency = 0U;
 800a61a:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 800a61c:	e038      	b.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
      temp_reg = RCC->CFGR;
 800a61e:	4b29      	ldr	r3, [pc, #164]	; (800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 800a620:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800a622:	6818      	ldr	r0, [r3, #0]
 800a624:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800a628:	d032      	beq.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a62a:	f3c1 4283 	ubfx	r2, r1, #18, #4
 800a62e:	a806      	add	r0, sp, #24
 800a630:	4402      	add	r2, r0
 800a632:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a636:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a638:	bf41      	itttt	mi
 800a63a:	685a      	ldrmi	r2, [r3, #4]
 800a63c:	a906      	addmi	r1, sp, #24
 800a63e:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 800a642:	1852      	addmi	r2, r2, r1
 800a644:	bf44      	itt	mi
 800a646:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800a64a:	4a1f      	ldrmi	r2, [pc, #124]	; (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800a64c:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800a64e:	bf4c      	ite	mi
 800a650:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a654:	4a1d      	ldrpl	r2, [pc, #116]	; (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800a656:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a658:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800a65c:	d418      	bmi.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          frequency = (pllclk * 2) / 3;
 800a65e:	2303      	movs	r3, #3
 800a660:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800a662:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800a666:	e013      	b.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800a668:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 800a66c:	4a15      	ldr	r2, [pc, #84]	; (800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 800a66e:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800a670:	4019      	ands	r1, r3
 800a672:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 800a676:	d01f      	beq.n	800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800a678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a67c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a680:	d108      	bne.n	800a694 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
        frequency = LSI_VALUE;
 800a682:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800a686:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 800a688:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 800a68c:	bf18      	it	ne
 800a68e:	4618      	movne	r0, r3
}
 800a690:	b006      	add	sp, #24
 800a692:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800a694:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a698:	d1bf      	bne.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 800a69a:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 800a69c:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a6a0:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800a6a4:	e7f2      	b.n	800a68c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800a6a6:	f7ff ff17 	bl	800a4d8 <HAL_RCC_GetPCLK2Freq>
 800a6aa:	4b06      	ldr	r3, [pc, #24]	; (800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	005b      	lsls	r3, r3, #1
 800a6b6:	e7d4      	b.n	800a662 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        frequency = LSE_VALUE;
 800a6b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a6bc:	e7e8      	b.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 800a6be:	bf00      	nop
 800a6c0:	0800b31c 	.word	0x0800b31c
 800a6c4:	40021000 	.word	0x40021000
 800a6c8:	007a1200 	.word	0x007a1200
 800a6cc:	003d0900 	.word	0x003d0900

0800a6d0 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800a6d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a6d4:	461c      	mov	r4, r3
 800a6d6:	4616      	mov	r6, r2
 800a6d8:	460f      	mov	r7, r1
 800a6da:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a6dc:	f7fd f9f0 	bl	8007ac0 <HAL_GetTick>
 800a6e0:	4434      	add	r4, r6
 800a6e2:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 800a6e4:	f7fd f9ec 	bl	8007ac0 <HAL_GetTick>
 800a6e8:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a6ea:	4b23      	ldr	r3, [pc, #140]	; (800a778 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800a6f2:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a6f4:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 800a6f6:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a6f8:	6893      	ldr	r3, [r2, #8]
 800a6fa:	ea37 0303 	bics.w	r3, r7, r3
 800a6fe:	d001      	beq.n	800a704 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 800a700:	2000      	movs	r0, #0
 800a702:	e02e      	b.n	800a762 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 800a704:	1c73      	adds	r3, r6, #1
 800a706:	d0f7      	beq.n	800a6f8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a708:	f7fd f9da 	bl	8007ac0 <HAL_GetTick>
 800a70c:	eba0 0008 	sub.w	r0, r0, r8
 800a710:	42a0      	cmp	r0, r4
 800a712:	d329      	bcc.n	800a768 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a714:	682b      	ldr	r3, [r5, #0]
 800a716:	685a      	ldr	r2, [r3, #4]
 800a718:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a71c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a71e:	686a      	ldr	r2, [r5, #4]
 800a720:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800a724:	d10a      	bne.n	800a73c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 800a726:	68aa      	ldr	r2, [r5, #8]
 800a728:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a72c:	d002      	beq.n	800a734 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a72e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800a732:	d103      	bne.n	800a73c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a73a:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a73c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a73e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a742:	d107      	bne.n	800a754 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a74a:	601a      	str	r2, [r3, #0]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a752:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800a754:	2301      	movs	r3, #1
 800a756:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800a75a:	2300      	movs	r3, #0
 800a75c:	2003      	movs	r0, #3
 800a75e:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 800a762:	b002      	add	sp, #8
 800a764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 800a768:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800a76a:	2b00      	cmp	r3, #0
      count--;
 800a76c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800a76e:	bf08      	it	eq
 800a770:	2400      	moveq	r4, #0
      count--;
 800a772:	3b01      	subs	r3, #1
 800a774:	e7be      	b.n	800a6f4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 800a776:	bf00      	nop
 800a778:	20000074 	.word	0x20000074

0800a77c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a77c:	b510      	push	{r4, lr}
 800a77e:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a780:	460a      	mov	r2, r1
 800a782:	2180      	movs	r1, #128	; 0x80
{
 800a784:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a786:	f7ff ffa3 	bl	800a6d0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800a78a:	b120      	cbz	r0, 800a796 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 800a78c:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a78e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a790:	f043 0320 	orr.w	r3, r3, #32
 800a794:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 800a796:	bd10      	pop	{r4, pc}

0800a798 <HAL_SPI_Init>:
{
 800a798:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800a79a:	4604      	mov	r4, r0
 800a79c:	2800      	cmp	r0, #0
 800a79e:	d051      	beq.n	800a844 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a7a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d14a      	bne.n	800a83c <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a7a6:	6842      	ldr	r2, [r0, #4]
 800a7a8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800a7ac:	d000      	beq.n	800a7b0 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a7ae:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800a7b4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800a7b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a7bc:	b923      	cbnz	r3, 800a7c8 <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 800a7be:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800a7c0:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800a7c4:	f7fd f83e 	bl	8007844 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800a7c8:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800a7ca:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800a7cc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800a7d0:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a7d2:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 800a7d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7d8:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a7da:	6863      	ldr	r3, [r4, #4]
 800a7dc:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 800a7e0:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800a7e4:	4303      	orrs	r3, r0
 800a7e6:	68e0      	ldr	r0, [r4, #12]
 800a7e8:	69a1      	ldr	r1, [r4, #24]
 800a7ea:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 800a7ee:	4303      	orrs	r3, r0
 800a7f0:	6920      	ldr	r0, [r4, #16]
 800a7f2:	f000 0002 	and.w	r0, r0, #2
 800a7f6:	4303      	orrs	r3, r0
 800a7f8:	6960      	ldr	r0, [r4, #20]
 800a7fa:	f000 0001 	and.w	r0, r0, #1
 800a7fe:	4303      	orrs	r3, r0
 800a800:	f401 7000 	and.w	r0, r1, #512	; 0x200
 800a804:	4303      	orrs	r3, r0
 800a806:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800a808:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a80a:	f000 0038 	and.w	r0, r0, #56	; 0x38
 800a80e:	4303      	orrs	r3, r0
 800a810:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800a812:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a816:	f000 0080 	and.w	r0, r0, #128	; 0x80
 800a81a:	4303      	orrs	r3, r0
 800a81c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800a81e:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 800a822:	4303      	orrs	r3, r0
 800a824:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800a826:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a828:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a82a:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a82c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a830:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800a832:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a834:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a836:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800a83a:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a83c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a83e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a842:	e7b5      	b.n	800a7b0 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800a844:	2001      	movs	r0, #1
 800a846:	e7f8      	b.n	800a83a <HAL_SPI_Init+0xa2>

0800a848 <HAL_SPI_TransmitReceive>:
{
 800a848:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a84c:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800a84e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800a852:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800a854:	2b01      	cmp	r3, #1
{
 800a856:	460d      	mov	r5, r1
 800a858:	4691      	mov	r9, r2
 800a85a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 800a85e:	f000 80e0 	beq.w	800aa22 <HAL_SPI_TransmitReceive+0x1da>
 800a862:	2301      	movs	r3, #1
 800a864:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800a868:	f7fd f92a 	bl	8007ac0 <HAL_GetTick>
  tmp_state           = hspi->State;
 800a86c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 800a870:	4607      	mov	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a872:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 800a874:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 800a876:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a878:	d00a      	beq.n	800a890 <HAL_SPI_TransmitReceive+0x48>
 800a87a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800a87e:	f040 80ce 	bne.w	800aa1e <HAL_SPI_TransmitReceive+0x1d6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a882:	68a3      	ldr	r3, [r4, #8]
 800a884:	2b00      	cmp	r3, #0
 800a886:	f040 80ca 	bne.w	800aa1e <HAL_SPI_TransmitReceive+0x1d6>
 800a88a:	2904      	cmp	r1, #4
 800a88c:	f040 80c7 	bne.w	800aa1e <HAL_SPI_TransmitReceive+0x1d6>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a890:	2d00      	cmp	r5, #0
 800a892:	d03f      	beq.n	800a914 <HAL_SPI_TransmitReceive+0xcc>
 800a894:	f1b9 0f00 	cmp.w	r9, #0
 800a898:	d03c      	beq.n	800a914 <HAL_SPI_TransmitReceive+0xcc>
 800a89a:	2e00      	cmp	r6, #0
 800a89c:	d03a      	beq.n	800a914 <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a89e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a8a2:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a8a6:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a8a8:	bf1c      	itt	ne
 800a8aa:	2305      	movne	r3, #5
 800a8ac:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 800a8b4:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a8b8:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800a8ba:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800a8bc:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a8be:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 800a8c0:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a8c2:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 800a8c4:	bf58      	it	pl
 800a8c6:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a8c8:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 800a8ca:	bf58      	it	pl
 800a8cc:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
  hspi->TxXferSize  = Size;
 800a8d0:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 800a8d2:	bf58      	it	pl
 800a8d4:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a8d6:	68e1      	ldr	r1, [r4, #12]
 800a8d8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800a8dc:	d151      	bne.n	800a982 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a8de:	b10a      	cbz	r2, 800a8e4 <HAL_SPI_TransmitReceive+0x9c>
 800a8e0:	2e01      	cmp	r6, #1
 800a8e2:	d107      	bne.n	800a8f4 <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a8e4:	f835 2b02 	ldrh.w	r2, [r5], #2
 800a8e8:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800a8ea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8ec:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800a8f4:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a8f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	b96b      	cbnz	r3, 800a918 <HAL_SPI_TransmitReceive+0xd0>
 800a8fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	b953      	cbnz	r3, 800a918 <HAL_SPI_TransmitReceive+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a902:	463a      	mov	r2, r7
 800a904:	4641      	mov	r1, r8
 800a906:	4620      	mov	r0, r4
 800a908:	f7ff ff38 	bl	800a77c <SPI_EndRxTxTransaction>
 800a90c:	2800      	cmp	r0, #0
 800a90e:	d07b      	beq.n	800aa08 <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a910:	2320      	movs	r3, #32
 800a912:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a914:	2001      	movs	r0, #1
 800a916:	e02b      	b.n	800a970 <HAL_SPI_TransmitReceive+0x128>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a918:	6821      	ldr	r1, [r4, #0]
 800a91a:	688b      	ldr	r3, [r1, #8]
 800a91c:	079a      	lsls	r2, r3, #30
 800a91e:	d50d      	bpl.n	800a93c <HAL_SPI_TransmitReceive+0xf4>
 800a920:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a922:	b29b      	uxth	r3, r3
 800a924:	b153      	cbz	r3, 800a93c <HAL_SPI_TransmitReceive+0xf4>
 800a926:	b14d      	cbz	r5, 800a93c <HAL_SPI_TransmitReceive+0xf4>
        txallowed = 0U;
 800a928:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a92a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a92c:	f833 2b02 	ldrh.w	r2, [r3], #2
 800a930:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a932:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800a934:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a936:	3b01      	subs	r3, #1
 800a938:	b29b      	uxth	r3, r3
 800a93a:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a93c:	688a      	ldr	r2, [r1, #8]
 800a93e:	f012 0201 	ands.w	r2, r2, #1
 800a942:	d00c      	beq.n	800a95e <HAL_SPI_TransmitReceive+0x116>
 800a944:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a946:	b29b      	uxth	r3, r3
 800a948:	b14b      	cbz	r3, 800a95e <HAL_SPI_TransmitReceive+0x116>
        txallowed = 1U;
 800a94a:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a94c:	68c9      	ldr	r1, [r1, #12]
 800a94e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a950:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a954:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800a956:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a958:	3b01      	subs	r3, #1
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a95e:	f7fd f8af 	bl	8007ac0 <HAL_GetTick>
 800a962:	1bc0      	subs	r0, r0, r7
 800a964:	4540      	cmp	r0, r8
 800a966:	d3c6      	bcc.n	800a8f6 <HAL_SPI_TransmitReceive+0xae>
 800a968:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800a96c:	d0c3      	beq.n	800a8f6 <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 800a96e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800a970:	2301      	movs	r3, #1
 800a972:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a976:	2300      	movs	r3, #0
 800a978:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800a97c:	b003      	add	sp, #12
 800a97e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a982:	b10a      	cbz	r2, 800a988 <HAL_SPI_TransmitReceive+0x140>
 800a984:	2e01      	cmp	r6, #1
 800a986:	d108      	bne.n	800a99a <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a988:	782a      	ldrb	r2, [r5, #0]
 800a98a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a98c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a98e:	3301      	adds	r3, #1
 800a990:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800a992:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a994:	3b01      	subs	r3, #1
 800a996:	b29b      	uxth	r3, r3
 800a998:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800a99a:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a99c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	b91b      	cbnz	r3, 800a9aa <HAL_SPI_TransmitReceive+0x162>
 800a9a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d0ab      	beq.n	800a902 <HAL_SPI_TransmitReceive+0xba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a9aa:	6822      	ldr	r2, [r4, #0]
 800a9ac:	6893      	ldr	r3, [r2, #8]
 800a9ae:	079b      	lsls	r3, r3, #30
 800a9b0:	d50e      	bpl.n	800a9d0 <HAL_SPI_TransmitReceive+0x188>
 800a9b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	b15b      	cbz	r3, 800a9d0 <HAL_SPI_TransmitReceive+0x188>
 800a9b8:	b155      	cbz	r5, 800a9d0 <HAL_SPI_TransmitReceive+0x188>
        txallowed = 0U;
 800a9ba:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a9bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 800a9c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800a9c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a9ca:	3b01      	subs	r3, #1
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a9d0:	6822      	ldr	r2, [r4, #0]
 800a9d2:	6891      	ldr	r1, [r2, #8]
 800a9d4:	f011 0101 	ands.w	r1, r1, #1
 800a9d8:	d00d      	beq.n	800a9f6 <HAL_SPI_TransmitReceive+0x1ae>
 800a9da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	b153      	cbz	r3, 800a9f6 <HAL_SPI_TransmitReceive+0x1ae>
        txallowed = 1U;
 800a9e0:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a9e2:	68d2      	ldr	r2, [r2, #12]
 800a9e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a9e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a9e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800a9ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a9f6:	f7fd f863 	bl	8007ac0 <HAL_GetTick>
 800a9fa:	1bc0      	subs	r0, r0, r7
 800a9fc:	4540      	cmp	r0, r8
 800a9fe:	d3cd      	bcc.n	800a99c <HAL_SPI_TransmitReceive+0x154>
 800aa00:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800aa04:	d0ca      	beq.n	800a99c <HAL_SPI_TransmitReceive+0x154>
 800aa06:	e7b2      	b.n	800a96e <HAL_SPI_TransmitReceive+0x126>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aa08:	68a3      	ldr	r3, [r4, #8]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d1b0      	bne.n	800a970 <HAL_SPI_TransmitReceive+0x128>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa0e:	6823      	ldr	r3, [r4, #0]
 800aa10:	9001      	str	r0, [sp, #4]
 800aa12:	68da      	ldr	r2, [r3, #12]
 800aa14:	9201      	str	r2, [sp, #4]
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	9301      	str	r3, [sp, #4]
 800aa1a:	9b01      	ldr	r3, [sp, #4]
 800aa1c:	e7a8      	b.n	800a970 <HAL_SPI_TransmitReceive+0x128>
    errorcode = HAL_BUSY;
 800aa1e:	2002      	movs	r0, #2
 800aa20:	e7a6      	b.n	800a970 <HAL_SPI_TransmitReceive+0x128>
  __HAL_LOCK(hspi);
 800aa22:	2002      	movs	r0, #2
 800aa24:	e7aa      	b.n	800a97c <HAL_SPI_TransmitReceive+0x134>

0800aa26 <HAL_SPI_ErrorCallback>:
 800aa26:	4770      	bx	lr

0800aa28 <HAL_SPI_IRQHandler>:
{
 800aa28:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 800aa2a:	6803      	ldr	r3, [r0, #0]
{
 800aa2c:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800aa2e:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800aa30:	689a      	ldr	r2, [r3, #8]
{
 800aa32:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800aa34:	0656      	lsls	r6, r2, #25
 800aa36:	ea4f 1592 	mov.w	r5, r2, lsr #6
 800aa3a:	f3c2 1780 	ubfx	r7, r2, #6, #1
 800aa3e:	d408      	bmi.n	800aa52 <HAL_SPI_IRQHandler+0x2a>
 800aa40:	07d6      	lsls	r6, r2, #31
 800aa42:	d506      	bpl.n	800aa52 <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800aa44:	064e      	lsls	r6, r1, #25
 800aa46:	d504      	bpl.n	800aa52 <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 800aa48:	6c03      	ldr	r3, [r0, #64]	; 0x40
}
 800aa4a:	b005      	add	sp, #20
 800aa4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 800aa50:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800aa52:	0796      	lsls	r6, r2, #30
 800aa54:	d504      	bpl.n	800aa60 <HAL_SPI_IRQHandler+0x38>
 800aa56:	0608      	lsls	r0, r1, #24
 800aa58:	d502      	bpl.n	800aa60 <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800aa5e:	e7f4      	b.n	800aa4a <HAL_SPI_IRQHandler+0x22>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800aa60:	0956      	lsrs	r6, r2, #5
 800aa62:	ea45 1252 	orr.w	r2, r5, r2, lsr #5
 800aa66:	07d2      	lsls	r2, r2, #31
 800aa68:	d54c      	bpl.n	800ab04 <HAL_SPI_IRQHandler+0xdc>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800aa6a:	068d      	lsls	r5, r1, #26
 800aa6c:	d54a      	bpl.n	800ab04 <HAL_SPI_IRQHandler+0xdc>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800aa6e:	b177      	cbz	r7, 800aa8e <HAL_SPI_IRQHandler+0x66>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800aa70:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 800aa74:	2000      	movs	r0, #0
 800aa76:	2a03      	cmp	r2, #3
 800aa78:	d03e      	beq.n	800aaf8 <HAL_SPI_IRQHandler+0xd0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800aa7a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800aa7c:	f042 0204 	orr.w	r2, r2, #4
 800aa80:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa82:	9001      	str	r0, [sp, #4]
 800aa84:	68da      	ldr	r2, [r3, #12]
 800aa86:	9201      	str	r2, [sp, #4]
 800aa88:	689a      	ldr	r2, [r3, #8]
 800aa8a:	9201      	str	r2, [sp, #4]
 800aa8c:	9a01      	ldr	r2, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800aa8e:	07f0      	lsls	r0, r6, #31
 800aa90:	d50c      	bpl.n	800aaac <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800aa92:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800aa94:	f042 0201 	orr.w	r2, r2, #1
 800aa98:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	9203      	str	r2, [sp, #12]
 800aa9e:	689a      	ldr	r2, [r3, #8]
 800aaa0:	9203      	str	r2, [sp, #12]
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aaa8:	601a      	str	r2, [r3, #0]
 800aaaa:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aaac:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800aaae:	b34a      	cbz	r2, 800ab04 <HAL_SPI_IRQHandler+0xdc>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800aab0:	685a      	ldr	r2, [r3, #4]
 800aab2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800aab6:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800aab8:	2201      	movs	r2, #1
 800aaba:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800aabe:	078a      	lsls	r2, r1, #30
 800aac0:	d022      	beq.n	800ab08 <HAL_SPI_IRQHandler+0xe0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800aac2:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800aac4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800aac6:	f022 0203 	bic.w	r2, r2, #3
 800aaca:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800aacc:	b140      	cbz	r0, 800aae0 <HAL_SPI_IRQHandler+0xb8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800aace:	4b10      	ldr	r3, [pc, #64]	; (800ab10 <HAL_SPI_IRQHandler+0xe8>)
 800aad0:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800aad2:	f7fd fa33 	bl	8007f3c <HAL_DMA_Abort_IT>
 800aad6:	b118      	cbz	r0, 800aae0 <HAL_SPI_IRQHandler+0xb8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aad8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800aada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aade:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800aae0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800aae2:	b178      	cbz	r0, 800ab04 <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800aae4:	4b0a      	ldr	r3, [pc, #40]	; (800ab10 <HAL_SPI_IRQHandler+0xe8>)
 800aae6:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800aae8:	f7fd fa28 	bl	8007f3c <HAL_DMA_Abort_IT>
 800aaec:	b150      	cbz	r0, 800ab04 <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aaee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800aaf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaf4:	6563      	str	r3, [r4, #84]	; 0x54
 800aaf6:	e005      	b.n	800ab04 <HAL_SPI_IRQHandler+0xdc>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aaf8:	9002      	str	r0, [sp, #8]
 800aafa:	68da      	ldr	r2, [r3, #12]
 800aafc:	9202      	str	r2, [sp, #8]
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	9302      	str	r3, [sp, #8]
 800ab02:	9b02      	ldr	r3, [sp, #8]
}
 800ab04:	b005      	add	sp, #20
 800ab06:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f7ff ff8c 	bl	800aa26 <HAL_SPI_ErrorCallback>
 800ab0e:	e7f9      	b.n	800ab04 <HAL_SPI_IRQHandler+0xdc>
 800ab10:	0800ab15 	.word	0x0800ab15

0800ab14 <SPI_DMAAbortOnError>:
{
 800ab14:	b508      	push	{r3, lr}
  hspi->RxXferCount = 0U;
 800ab16:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ab18:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 800ab1a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800ab1c:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 800ab1e:	f7ff ff82 	bl	800aa26 <HAL_SPI_ErrorCallback>
}
 800ab22:	bd08      	pop	{r3, pc}

0800ab24 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab24:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d120      	bne.n	800ab6e <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab2c:	2302      	movs	r3, #2
 800ab2e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab32:	6803      	ldr	r3, [r0, #0]
 800ab34:	68da      	ldr	r2, [r3, #12]
 800ab36:	f042 0201 	orr.w	r2, r2, #1
 800ab3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab3c:	4a0d      	ldr	r2, [pc, #52]	; (800ab74 <HAL_TIM_Base_Start_IT+0x50>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d00a      	beq.n	800ab58 <HAL_TIM_Base_Start_IT+0x34>
 800ab42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab46:	d007      	beq.n	800ab58 <HAL_TIM_Base_Start_IT+0x34>
 800ab48:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d003      	beq.n	800ab58 <HAL_TIM_Base_Start_IT+0x34>
 800ab50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d104      	bne.n	800ab62 <HAL_TIM_Base_Start_IT+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab58:	689a      	ldr	r2, [r3, #8]
 800ab5a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab5e:	2a06      	cmp	r2, #6
 800ab60:	d003      	beq.n	800ab6a <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	f042 0201 	orr.w	r2, r2, #1
 800ab68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab6a:	2000      	movs	r0, #0
}
 800ab6c:	4770      	bx	lr
    return HAL_ERROR;
 800ab6e:	2001      	movs	r0, #1
 800ab70:	4770      	bx	lr
 800ab72:	bf00      	nop
 800ab74:	40012c00 	.word	0x40012c00

0800ab78 <HAL_TIM_OC_DelayElapsedCallback>:
 800ab78:	4770      	bx	lr

0800ab7a <HAL_TIM_IC_CaptureCallback>:
 800ab7a:	4770      	bx	lr

0800ab7c <HAL_TIM_PWM_PulseFinishedCallback>:
 800ab7c:	4770      	bx	lr

0800ab7e <HAL_TIM_TriggerCallback>:
 800ab7e:	4770      	bx	lr

0800ab80 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab80:	6803      	ldr	r3, [r0, #0]
{
 800ab82:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab84:	691a      	ldr	r2, [r3, #16]
{
 800ab86:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab88:	0791      	lsls	r1, r2, #30
 800ab8a:	d50e      	bpl.n	800abaa <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ab8c:	68da      	ldr	r2, [r3, #12]
 800ab8e:	0792      	lsls	r2, r2, #30
 800ab90:	d50b      	bpl.n	800abaa <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ab92:	f06f 0202 	mvn.w	r2, #2
 800ab96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab98:	2201      	movs	r2, #1
 800ab9a:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab9c:	699b      	ldr	r3, [r3, #24]
 800ab9e:	079b      	lsls	r3, r3, #30
 800aba0:	d077      	beq.n	800ac92 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aba2:	f7ff ffea 	bl	800ab7a <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aba6:	2300      	movs	r3, #0
 800aba8:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800abaa:	6823      	ldr	r3, [r4, #0]
 800abac:	691a      	ldr	r2, [r3, #16]
 800abae:	0750      	lsls	r0, r2, #29
 800abb0:	d510      	bpl.n	800abd4 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800abb2:	68da      	ldr	r2, [r3, #12]
 800abb4:	0751      	lsls	r1, r2, #29
 800abb6:	d50d      	bpl.n	800abd4 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800abb8:	f06f 0204 	mvn.w	r2, #4
 800abbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800abbe:	2202      	movs	r2, #2
 800abc0:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800abc2:	699b      	ldr	r3, [r3, #24]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abc4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800abc6:	f413 7f40 	tst.w	r3, #768	; 0x300
 800abca:	d068      	beq.n	800ac9e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800abcc:	f7ff ffd5 	bl	800ab7a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abd0:	2300      	movs	r3, #0
 800abd2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800abd4:	6823      	ldr	r3, [r4, #0]
 800abd6:	691a      	ldr	r2, [r3, #16]
 800abd8:	0712      	lsls	r2, r2, #28
 800abda:	d50f      	bpl.n	800abfc <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800abdc:	68da      	ldr	r2, [r3, #12]
 800abde:	0710      	lsls	r0, r2, #28
 800abe0:	d50c      	bpl.n	800abfc <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800abe2:	f06f 0208 	mvn.w	r2, #8
 800abe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800abe8:	2204      	movs	r2, #4
 800abea:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800abec:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abee:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800abf0:	0799      	lsls	r1, r3, #30
 800abf2:	d05a      	beq.n	800acaa <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800abf4:	f7ff ffc1 	bl	800ab7a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abf8:	2300      	movs	r3, #0
 800abfa:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800abfc:	6823      	ldr	r3, [r4, #0]
 800abfe:	691a      	ldr	r2, [r3, #16]
 800ac00:	06d2      	lsls	r2, r2, #27
 800ac02:	d510      	bpl.n	800ac26 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ac04:	68da      	ldr	r2, [r3, #12]
 800ac06:	06d0      	lsls	r0, r2, #27
 800ac08:	d50d      	bpl.n	800ac26 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ac0a:	f06f 0210 	mvn.w	r2, #16
 800ac0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac10:	2208      	movs	r2, #8
 800ac12:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac14:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac16:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac18:	f413 7f40 	tst.w	r3, #768	; 0x300
 800ac1c:	d04b      	beq.n	800acb6 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800ac1e:	f7ff ffac 	bl	800ab7a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac22:	2300      	movs	r3, #0
 800ac24:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ac26:	6823      	ldr	r3, [r4, #0]
 800ac28:	691a      	ldr	r2, [r3, #16]
 800ac2a:	07d1      	lsls	r1, r2, #31
 800ac2c:	d508      	bpl.n	800ac40 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ac2e:	68da      	ldr	r2, [r3, #12]
 800ac30:	07d2      	lsls	r2, r2, #31
 800ac32:	d505      	bpl.n	800ac40 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac34:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac38:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac3a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac3c:	f7fc fd4e 	bl	80076dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ac40:	6823      	ldr	r3, [r4, #0]
 800ac42:	691a      	ldr	r2, [r3, #16]
 800ac44:	0610      	lsls	r0, r2, #24
 800ac46:	d508      	bpl.n	800ac5a <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac48:	68da      	ldr	r2, [r3, #12]
 800ac4a:	0611      	lsls	r1, r2, #24
 800ac4c:	d505      	bpl.n	800ac5a <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac4e:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac52:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac54:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800ac56:	f000 f966 	bl	800af26 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac5a:	6823      	ldr	r3, [r4, #0]
 800ac5c:	691a      	ldr	r2, [r3, #16]
 800ac5e:	0652      	lsls	r2, r2, #25
 800ac60:	d508      	bpl.n	800ac74 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac62:	68da      	ldr	r2, [r3, #12]
 800ac64:	0650      	lsls	r0, r2, #25
 800ac66:	d505      	bpl.n	800ac74 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac68:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac6c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac6e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800ac70:	f7ff ff85 	bl	800ab7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac74:	6823      	ldr	r3, [r4, #0]
 800ac76:	691a      	ldr	r2, [r3, #16]
 800ac78:	0691      	lsls	r1, r2, #26
 800ac7a:	d522      	bpl.n	800acc2 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac7c:	68da      	ldr	r2, [r3, #12]
 800ac7e:	0692      	lsls	r2, r2, #26
 800ac80:	d51f      	bpl.n	800acc2 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac82:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac86:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac8c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800ac8e:	f000 b949 	b.w	800af24 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac92:	f7ff ff71 	bl	800ab78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac96:	4620      	mov	r0, r4
 800ac98:	f7ff ff70 	bl	800ab7c <HAL_TIM_PWM_PulseFinishedCallback>
 800ac9c:	e783      	b.n	800aba6 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac9e:	f7ff ff6b 	bl	800ab78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aca2:	4620      	mov	r0, r4
 800aca4:	f7ff ff6a 	bl	800ab7c <HAL_TIM_PWM_PulseFinishedCallback>
 800aca8:	e792      	b.n	800abd0 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acaa:	f7ff ff65 	bl	800ab78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acae:	4620      	mov	r0, r4
 800acb0:	f7ff ff64 	bl	800ab7c <HAL_TIM_PWM_PulseFinishedCallback>
 800acb4:	e7a0      	b.n	800abf8 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acb6:	f7ff ff5f 	bl	800ab78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acba:	4620      	mov	r0, r4
 800acbc:	f7ff ff5e 	bl	800ab7c <HAL_TIM_PWM_PulseFinishedCallback>
 800acc0:	e7af      	b.n	800ac22 <HAL_TIM_IRQHandler+0xa2>
}
 800acc2:	bd10      	pop	{r4, pc}

0800acc4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800acc4:	4a1a      	ldr	r2, [pc, #104]	; (800ad30 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800acc6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800acc8:	4290      	cmp	r0, r2
 800acca:	d00a      	beq.n	800ace2 <TIM_Base_SetConfig+0x1e>
 800accc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800acd0:	d007      	beq.n	800ace2 <TIM_Base_SetConfig+0x1e>
 800acd2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800acd6:	4290      	cmp	r0, r2
 800acd8:	d003      	beq.n	800ace2 <TIM_Base_SetConfig+0x1e>
 800acda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800acde:	4290      	cmp	r0, r2
 800ace0:	d115      	bne.n	800ad0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800ace2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ace4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800ace8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800acea:	4a11      	ldr	r2, [pc, #68]	; (800ad30 <TIM_Base_SetConfig+0x6c>)
 800acec:	4290      	cmp	r0, r2
 800acee:	d00a      	beq.n	800ad06 <TIM_Base_SetConfig+0x42>
 800acf0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800acf4:	d007      	beq.n	800ad06 <TIM_Base_SetConfig+0x42>
 800acf6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800acfa:	4290      	cmp	r0, r2
 800acfc:	d003      	beq.n	800ad06 <TIM_Base_SetConfig+0x42>
 800acfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad02:	4290      	cmp	r0, r2
 800ad04:	d103      	bne.n	800ad0e <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad06:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad0c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad0e:	694a      	ldr	r2, [r1, #20]
 800ad10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad14:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800ad16:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad18:	688b      	ldr	r3, [r1, #8]
 800ad1a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad1c:	680b      	ldr	r3, [r1, #0]
 800ad1e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad20:	4b03      	ldr	r3, [pc, #12]	; (800ad30 <TIM_Base_SetConfig+0x6c>)
 800ad22:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad24:	bf04      	itt	eq
 800ad26:	690b      	ldreq	r3, [r1, #16]
 800ad28:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	6143      	str	r3, [r0, #20]
}
 800ad2e:	4770      	bx	lr
 800ad30:	40012c00 	.word	0x40012c00

0800ad34 <HAL_TIM_Base_Init>:
{
 800ad34:	b510      	push	{r4, lr}
  if (htim == NULL)
 800ad36:	4604      	mov	r4, r0
 800ad38:	b330      	cbz	r0, 800ad88 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ad3a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ad3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ad42:	b91b      	cbnz	r3, 800ad4c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800ad44:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800ad48:	f7fc fdbe 	bl	80078c8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800ad4c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad4e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800ad50:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad54:	1d21      	adds	r1, r4, #4
 800ad56:	f7ff ffb5 	bl	800acc4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad5a:	2301      	movs	r3, #1
  return HAL_OK;
 800ad5c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad5e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad62:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800ad66:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800ad6a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800ad6e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad7a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ad7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800ad82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800ad86:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800ad88:	2001      	movs	r0, #1
 800ad8a:	e7fc      	b.n	800ad86 <HAL_TIM_Base_Init+0x52>

0800ad8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ad8c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad8e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad90:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad92:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad96:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800ad9a:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad9c:	6082      	str	r2, [r0, #8]
}
 800ad9e:	bd10      	pop	{r4, pc}

0800ada0 <HAL_TIM_ConfigClockSource>:
{
 800ada0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800ada2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800ada6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	f04f 0002 	mov.w	r0, #2
 800adae:	d027      	beq.n	800ae00 <HAL_TIM_ConfigClockSource+0x60>
 800adb0:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800adb2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800adb6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800adb8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800adbc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800adbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800adc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800adc6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800adc8:	680b      	ldr	r3, [r1, #0]
 800adca:	2b60      	cmp	r3, #96	; 0x60
 800adcc:	d04d      	beq.n	800ae6a <HAL_TIM_ConfigClockSource+0xca>
 800adce:	d832      	bhi.n	800ae36 <HAL_TIM_ConfigClockSource+0x96>
 800add0:	2b40      	cmp	r3, #64	; 0x40
 800add2:	d062      	beq.n	800ae9a <HAL_TIM_ConfigClockSource+0xfa>
 800add4:	d815      	bhi.n	800ae02 <HAL_TIM_ConfigClockSource+0x62>
 800add6:	2b20      	cmp	r3, #32
 800add8:	d003      	beq.n	800ade2 <HAL_TIM_ConfigClockSource+0x42>
 800adda:	d809      	bhi.n	800adf0 <HAL_TIM_ConfigClockSource+0x50>
 800addc:	f033 0210 	bics.w	r2, r3, #16
 800ade0:	d108      	bne.n	800adf4 <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 800ade2:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ade4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ade8:	4313      	orrs	r3, r2
 800adea:	f043 0307 	orr.w	r3, r3, #7
 800adee:	e020      	b.n	800ae32 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 800adf0:	2b30      	cmp	r3, #48	; 0x30
 800adf2:	d0f6      	beq.n	800ade2 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 800adf4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800adf6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800adf8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800adfc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800ae00:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800ae02:	2b50      	cmp	r3, #80	; 0x50
 800ae04:	d1f6      	bne.n	800adf4 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae06:	684a      	ldr	r2, [r1, #4]
 800ae08:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800ae0a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae0c:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae0e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae12:	f025 0501 	bic.w	r5, r5, #1
 800ae16:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae18:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800ae1a:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae20:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800ae24:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800ae26:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800ae28:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae2e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800ae32:	6083      	str	r3, [r0, #8]
}
 800ae34:	e7de      	b.n	800adf4 <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 800ae36:	2b70      	cmp	r3, #112	; 0x70
 800ae38:	d00c      	beq.n	800ae54 <HAL_TIM_ConfigClockSource+0xb4>
 800ae3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae3e:	d1d9      	bne.n	800adf4 <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 800ae40:	68cb      	ldr	r3, [r1, #12]
 800ae42:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800ae46:	f7ff ffa1 	bl	800ad8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae4a:	6822      	ldr	r2, [r4, #0]
 800ae4c:	6893      	ldr	r3, [r2, #8]
 800ae4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae52:	e008      	b.n	800ae66 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 800ae54:	68cb      	ldr	r3, [r1, #12]
 800ae56:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800ae5a:	f7ff ff97 	bl	800ad8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ae5e:	6822      	ldr	r2, [r4, #0]
 800ae60:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae62:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae66:	6093      	str	r3, [r2, #8]
      break;
 800ae68:	e7c4      	b.n	800adf4 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae6a:	684d      	ldr	r5, [r1, #4]
 800ae6c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae6e:	6a01      	ldr	r1, [r0, #32]
 800ae70:	f021 0110 	bic.w	r1, r1, #16
 800ae74:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae76:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800ae78:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae7a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae82:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae86:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800ae8a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800ae8c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800ae8e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae94:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800ae98:	e7cb      	b.n	800ae32 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae9a:	684a      	ldr	r2, [r1, #4]
 800ae9c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800ae9e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aea0:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aea2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aea6:	f025 0501 	bic.w	r5, r5, #1
 800aeaa:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aeac:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800aeae:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aeb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aeb4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800aeb8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800aeba:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800aebc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800aebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aec2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800aec6:	e7b4      	b.n	800ae32 <HAL_TIM_ConfigClockSource+0x92>

0800aec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aec8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aeca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800aece:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	f04f 0002 	mov.w	r0, #2
 800aed6:	d022      	beq.n	800af1e <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aed8:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800aeda:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800aede:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aee0:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800aee2:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aee6:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 800aee8:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aeea:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aeec:	4c0c      	ldr	r4, [pc, #48]	; (800af20 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800aeee:	42a3      	cmp	r3, r4
 800aef0:	d00a      	beq.n	800af08 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800aef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aef6:	d007      	beq.n	800af08 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800aef8:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 800aefc:	42a3      	cmp	r3, r4
 800aefe:	d003      	beq.n	800af08 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800af00:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800af04:	42a3      	cmp	r3, r4
 800af06:	d104      	bne.n	800af12 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af08:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af0a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af0e:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af10:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af12:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800af14:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800af16:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800af1a:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 800af1e:	bd30      	pop	{r4, r5, pc}
 800af20:	40012c00 	.word	0x40012c00

0800af24 <HAL_TIMEx_CommutCallback>:
 800af24:	4770      	bx	lr

0800af26 <HAL_TIMEx_BreakCallback>:
 800af26:	4770      	bx	lr

0800af28 <_ZdlPv>:
 800af28:	f000 b85c 	b.w	800afe4 <free>

0800af2c <_ZdlPvj>:
 800af2c:	f7ff bffc 	b.w	800af28 <_ZdlPv>

0800af30 <_ZdaPv>:
 800af30:	f7ff bffa 	b.w	800af28 <_ZdlPv>

0800af34 <_Znwj>:
 800af34:	2801      	cmp	r0, #1
 800af36:	bf38      	it	cc
 800af38:	2001      	movcc	r0, #1
 800af3a:	b510      	push	{r4, lr}
 800af3c:	4604      	mov	r4, r0
 800af3e:	4620      	mov	r0, r4
 800af40:	f000 f848 	bl	800afd4 <malloc>
 800af44:	b930      	cbnz	r0, 800af54 <_Znwj+0x20>
 800af46:	f000 f80b 	bl	800af60 <_ZSt15get_new_handlerv>
 800af4a:	b908      	cbnz	r0, 800af50 <_Znwj+0x1c>
 800af4c:	f000 f810 	bl	800af70 <abort>
 800af50:	4780      	blx	r0
 800af52:	e7f4      	b.n	800af3e <_Znwj+0xa>
 800af54:	bd10      	pop	{r4, pc}

0800af56 <_Znaj>:
 800af56:	f7ff bfed 	b.w	800af34 <_Znwj>

0800af5a <_ZSt20__throw_length_errorPKc>:
 800af5a:	b508      	push	{r3, lr}
 800af5c:	f000 f808 	bl	800af70 <abort>

0800af60 <_ZSt15get_new_handlerv>:
 800af60:	4b02      	ldr	r3, [pc, #8]	; (800af6c <_ZSt15get_new_handlerv+0xc>)
 800af62:	6818      	ldr	r0, [r3, #0]
 800af64:	f3bf 8f5b 	dmb	ish
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop
 800af6c:	2000245c 	.word	0x2000245c

0800af70 <abort>:
 800af70:	2006      	movs	r0, #6
 800af72:	b508      	push	{r3, lr}
 800af74:	f000 f940 	bl	800b1f8 <raise>
 800af78:	2001      	movs	r0, #1
 800af7a:	f7fc fd11 	bl	80079a0 <_exit>
	...

0800af80 <__errno>:
 800af80:	4b01      	ldr	r3, [pc, #4]	; (800af88 <__errno+0x8>)
 800af82:	6818      	ldr	r0, [r3, #0]
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	20000080 	.word	0x20000080

0800af8c <__libc_init_array>:
 800af8c:	b570      	push	{r4, r5, r6, lr}
 800af8e:	2600      	movs	r6, #0
 800af90:	4d0c      	ldr	r5, [pc, #48]	; (800afc4 <__libc_init_array+0x38>)
 800af92:	4c0d      	ldr	r4, [pc, #52]	; (800afc8 <__libc_init_array+0x3c>)
 800af94:	1b64      	subs	r4, r4, r5
 800af96:	10a4      	asrs	r4, r4, #2
 800af98:	42a6      	cmp	r6, r4
 800af9a:	d109      	bne.n	800afb0 <__libc_init_array+0x24>
 800af9c:	f000 f956 	bl	800b24c <_init>
 800afa0:	2600      	movs	r6, #0
 800afa2:	4d0a      	ldr	r5, [pc, #40]	; (800afcc <__libc_init_array+0x40>)
 800afa4:	4c0a      	ldr	r4, [pc, #40]	; (800afd0 <__libc_init_array+0x44>)
 800afa6:	1b64      	subs	r4, r4, r5
 800afa8:	10a4      	asrs	r4, r4, #2
 800afaa:	42a6      	cmp	r6, r4
 800afac:	d105      	bne.n	800afba <__libc_init_array+0x2e>
 800afae:	bd70      	pop	{r4, r5, r6, pc}
 800afb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800afb4:	4798      	blx	r3
 800afb6:	3601      	adds	r6, #1
 800afb8:	e7ee      	b.n	800af98 <__libc_init_array+0xc>
 800afba:	f855 3b04 	ldr.w	r3, [r5], #4
 800afbe:	4798      	blx	r3
 800afc0:	3601      	adds	r6, #1
 800afc2:	e7f2      	b.n	800afaa <__libc_init_array+0x1e>
 800afc4:	0800b338 	.word	0x0800b338
 800afc8:	0800b338 	.word	0x0800b338
 800afcc:	0800b338 	.word	0x0800b338
 800afd0:	0800b354 	.word	0x0800b354

0800afd4 <malloc>:
 800afd4:	4b02      	ldr	r3, [pc, #8]	; (800afe0 <malloc+0xc>)
 800afd6:	4601      	mov	r1, r0
 800afd8:	6818      	ldr	r0, [r3, #0]
 800afda:	f000 b87b 	b.w	800b0d4 <_malloc_r>
 800afde:	bf00      	nop
 800afe0:	20000080 	.word	0x20000080

0800afe4 <free>:
 800afe4:	4b02      	ldr	r3, [pc, #8]	; (800aff0 <free+0xc>)
 800afe6:	4601      	mov	r1, r0
 800afe8:	6818      	ldr	r0, [r3, #0]
 800afea:	f000 b827 	b.w	800b03c <_free_r>
 800afee:	bf00      	nop
 800aff0:	20000080 	.word	0x20000080

0800aff4 <memcmp>:
 800aff4:	b530      	push	{r4, r5, lr}
 800aff6:	2400      	movs	r4, #0
 800aff8:	3901      	subs	r1, #1
 800affa:	42a2      	cmp	r2, r4
 800affc:	d101      	bne.n	800b002 <memcmp+0xe>
 800affe:	2000      	movs	r0, #0
 800b000:	e005      	b.n	800b00e <memcmp+0x1a>
 800b002:	5d03      	ldrb	r3, [r0, r4]
 800b004:	3401      	adds	r4, #1
 800b006:	5d0d      	ldrb	r5, [r1, r4]
 800b008:	42ab      	cmp	r3, r5
 800b00a:	d0f6      	beq.n	800affa <memcmp+0x6>
 800b00c:	1b58      	subs	r0, r3, r5
 800b00e:	bd30      	pop	{r4, r5, pc}

0800b010 <memcpy>:
 800b010:	440a      	add	r2, r1
 800b012:	4291      	cmp	r1, r2
 800b014:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b018:	d100      	bne.n	800b01c <memcpy+0xc>
 800b01a:	4770      	bx	lr
 800b01c:	b510      	push	{r4, lr}
 800b01e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b022:	4291      	cmp	r1, r2
 800b024:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b028:	d1f9      	bne.n	800b01e <memcpy+0xe>
 800b02a:	bd10      	pop	{r4, pc}

0800b02c <memset>:
 800b02c:	4603      	mov	r3, r0
 800b02e:	4402      	add	r2, r0
 800b030:	4293      	cmp	r3, r2
 800b032:	d100      	bne.n	800b036 <memset+0xa>
 800b034:	4770      	bx	lr
 800b036:	f803 1b01 	strb.w	r1, [r3], #1
 800b03a:	e7f9      	b.n	800b030 <memset+0x4>

0800b03c <_free_r>:
 800b03c:	b538      	push	{r3, r4, r5, lr}
 800b03e:	4605      	mov	r5, r0
 800b040:	2900      	cmp	r1, #0
 800b042:	d043      	beq.n	800b0cc <_free_r+0x90>
 800b044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b048:	1f0c      	subs	r4, r1, #4
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	bfb8      	it	lt
 800b04e:	18e4      	addlt	r4, r4, r3
 800b050:	f000 f8ee 	bl	800b230 <__malloc_lock>
 800b054:	4a1e      	ldr	r2, [pc, #120]	; (800b0d0 <_free_r+0x94>)
 800b056:	6813      	ldr	r3, [r2, #0]
 800b058:	4610      	mov	r0, r2
 800b05a:	b933      	cbnz	r3, 800b06a <_free_r+0x2e>
 800b05c:	6063      	str	r3, [r4, #4]
 800b05e:	6014      	str	r4, [r2, #0]
 800b060:	4628      	mov	r0, r5
 800b062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b066:	f000 b8e9 	b.w	800b23c <__malloc_unlock>
 800b06a:	42a3      	cmp	r3, r4
 800b06c:	d90a      	bls.n	800b084 <_free_r+0x48>
 800b06e:	6821      	ldr	r1, [r4, #0]
 800b070:	1862      	adds	r2, r4, r1
 800b072:	4293      	cmp	r3, r2
 800b074:	bf01      	itttt	eq
 800b076:	681a      	ldreq	r2, [r3, #0]
 800b078:	685b      	ldreq	r3, [r3, #4]
 800b07a:	1852      	addeq	r2, r2, r1
 800b07c:	6022      	streq	r2, [r4, #0]
 800b07e:	6063      	str	r3, [r4, #4]
 800b080:	6004      	str	r4, [r0, #0]
 800b082:	e7ed      	b.n	800b060 <_free_r+0x24>
 800b084:	461a      	mov	r2, r3
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	b10b      	cbz	r3, 800b08e <_free_r+0x52>
 800b08a:	42a3      	cmp	r3, r4
 800b08c:	d9fa      	bls.n	800b084 <_free_r+0x48>
 800b08e:	6811      	ldr	r1, [r2, #0]
 800b090:	1850      	adds	r0, r2, r1
 800b092:	42a0      	cmp	r0, r4
 800b094:	d10b      	bne.n	800b0ae <_free_r+0x72>
 800b096:	6820      	ldr	r0, [r4, #0]
 800b098:	4401      	add	r1, r0
 800b09a:	1850      	adds	r0, r2, r1
 800b09c:	4283      	cmp	r3, r0
 800b09e:	6011      	str	r1, [r2, #0]
 800b0a0:	d1de      	bne.n	800b060 <_free_r+0x24>
 800b0a2:	6818      	ldr	r0, [r3, #0]
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	4401      	add	r1, r0
 800b0a8:	6011      	str	r1, [r2, #0]
 800b0aa:	6053      	str	r3, [r2, #4]
 800b0ac:	e7d8      	b.n	800b060 <_free_r+0x24>
 800b0ae:	d902      	bls.n	800b0b6 <_free_r+0x7a>
 800b0b0:	230c      	movs	r3, #12
 800b0b2:	602b      	str	r3, [r5, #0]
 800b0b4:	e7d4      	b.n	800b060 <_free_r+0x24>
 800b0b6:	6820      	ldr	r0, [r4, #0]
 800b0b8:	1821      	adds	r1, r4, r0
 800b0ba:	428b      	cmp	r3, r1
 800b0bc:	bf01      	itttt	eq
 800b0be:	6819      	ldreq	r1, [r3, #0]
 800b0c0:	685b      	ldreq	r3, [r3, #4]
 800b0c2:	1809      	addeq	r1, r1, r0
 800b0c4:	6021      	streq	r1, [r4, #0]
 800b0c6:	6063      	str	r3, [r4, #4]
 800b0c8:	6054      	str	r4, [r2, #4]
 800b0ca:	e7c9      	b.n	800b060 <_free_r+0x24>
 800b0cc:	bd38      	pop	{r3, r4, r5, pc}
 800b0ce:	bf00      	nop
 800b0d0:	20002460 	.word	0x20002460

0800b0d4 <_malloc_r>:
 800b0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0d6:	1ccd      	adds	r5, r1, #3
 800b0d8:	f025 0503 	bic.w	r5, r5, #3
 800b0dc:	3508      	adds	r5, #8
 800b0de:	2d0c      	cmp	r5, #12
 800b0e0:	bf38      	it	cc
 800b0e2:	250c      	movcc	r5, #12
 800b0e4:	2d00      	cmp	r5, #0
 800b0e6:	4606      	mov	r6, r0
 800b0e8:	db01      	blt.n	800b0ee <_malloc_r+0x1a>
 800b0ea:	42a9      	cmp	r1, r5
 800b0ec:	d903      	bls.n	800b0f6 <_malloc_r+0x22>
 800b0ee:	230c      	movs	r3, #12
 800b0f0:	6033      	str	r3, [r6, #0]
 800b0f2:	2000      	movs	r0, #0
 800b0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0f6:	f000 f89b 	bl	800b230 <__malloc_lock>
 800b0fa:	4921      	ldr	r1, [pc, #132]	; (800b180 <_malloc_r+0xac>)
 800b0fc:	680a      	ldr	r2, [r1, #0]
 800b0fe:	4614      	mov	r4, r2
 800b100:	b99c      	cbnz	r4, 800b12a <_malloc_r+0x56>
 800b102:	4f20      	ldr	r7, [pc, #128]	; (800b184 <_malloc_r+0xb0>)
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	b923      	cbnz	r3, 800b112 <_malloc_r+0x3e>
 800b108:	4621      	mov	r1, r4
 800b10a:	4630      	mov	r0, r6
 800b10c:	f000 f83c 	bl	800b188 <_sbrk_r>
 800b110:	6038      	str	r0, [r7, #0]
 800b112:	4629      	mov	r1, r5
 800b114:	4630      	mov	r0, r6
 800b116:	f000 f837 	bl	800b188 <_sbrk_r>
 800b11a:	1c43      	adds	r3, r0, #1
 800b11c:	d123      	bne.n	800b166 <_malloc_r+0x92>
 800b11e:	230c      	movs	r3, #12
 800b120:	4630      	mov	r0, r6
 800b122:	6033      	str	r3, [r6, #0]
 800b124:	f000 f88a 	bl	800b23c <__malloc_unlock>
 800b128:	e7e3      	b.n	800b0f2 <_malloc_r+0x1e>
 800b12a:	6823      	ldr	r3, [r4, #0]
 800b12c:	1b5b      	subs	r3, r3, r5
 800b12e:	d417      	bmi.n	800b160 <_malloc_r+0x8c>
 800b130:	2b0b      	cmp	r3, #11
 800b132:	d903      	bls.n	800b13c <_malloc_r+0x68>
 800b134:	6023      	str	r3, [r4, #0]
 800b136:	441c      	add	r4, r3
 800b138:	6025      	str	r5, [r4, #0]
 800b13a:	e004      	b.n	800b146 <_malloc_r+0x72>
 800b13c:	6863      	ldr	r3, [r4, #4]
 800b13e:	42a2      	cmp	r2, r4
 800b140:	bf0c      	ite	eq
 800b142:	600b      	streq	r3, [r1, #0]
 800b144:	6053      	strne	r3, [r2, #4]
 800b146:	4630      	mov	r0, r6
 800b148:	f000 f878 	bl	800b23c <__malloc_unlock>
 800b14c:	f104 000b 	add.w	r0, r4, #11
 800b150:	1d23      	adds	r3, r4, #4
 800b152:	f020 0007 	bic.w	r0, r0, #7
 800b156:	1ac2      	subs	r2, r0, r3
 800b158:	d0cc      	beq.n	800b0f4 <_malloc_r+0x20>
 800b15a:	1a1b      	subs	r3, r3, r0
 800b15c:	50a3      	str	r3, [r4, r2]
 800b15e:	e7c9      	b.n	800b0f4 <_malloc_r+0x20>
 800b160:	4622      	mov	r2, r4
 800b162:	6864      	ldr	r4, [r4, #4]
 800b164:	e7cc      	b.n	800b100 <_malloc_r+0x2c>
 800b166:	1cc4      	adds	r4, r0, #3
 800b168:	f024 0403 	bic.w	r4, r4, #3
 800b16c:	42a0      	cmp	r0, r4
 800b16e:	d0e3      	beq.n	800b138 <_malloc_r+0x64>
 800b170:	1a21      	subs	r1, r4, r0
 800b172:	4630      	mov	r0, r6
 800b174:	f000 f808 	bl	800b188 <_sbrk_r>
 800b178:	3001      	adds	r0, #1
 800b17a:	d1dd      	bne.n	800b138 <_malloc_r+0x64>
 800b17c:	e7cf      	b.n	800b11e <_malloc_r+0x4a>
 800b17e:	bf00      	nop
 800b180:	20002460 	.word	0x20002460
 800b184:	20002464 	.word	0x20002464

0800b188 <_sbrk_r>:
 800b188:	b538      	push	{r3, r4, r5, lr}
 800b18a:	2300      	movs	r3, #0
 800b18c:	4d05      	ldr	r5, [pc, #20]	; (800b1a4 <_sbrk_r+0x1c>)
 800b18e:	4604      	mov	r4, r0
 800b190:	4608      	mov	r0, r1
 800b192:	602b      	str	r3, [r5, #0]
 800b194:	f7fc fc0a 	bl	80079ac <_sbrk>
 800b198:	1c43      	adds	r3, r0, #1
 800b19a:	d102      	bne.n	800b1a2 <_sbrk_r+0x1a>
 800b19c:	682b      	ldr	r3, [r5, #0]
 800b19e:	b103      	cbz	r3, 800b1a2 <_sbrk_r+0x1a>
 800b1a0:	6023      	str	r3, [r4, #0]
 800b1a2:	bd38      	pop	{r3, r4, r5, pc}
 800b1a4:	20002648 	.word	0x20002648

0800b1a8 <_raise_r>:
 800b1a8:	291f      	cmp	r1, #31
 800b1aa:	b538      	push	{r3, r4, r5, lr}
 800b1ac:	4604      	mov	r4, r0
 800b1ae:	460d      	mov	r5, r1
 800b1b0:	d904      	bls.n	800b1bc <_raise_r+0x14>
 800b1b2:	2316      	movs	r3, #22
 800b1b4:	6003      	str	r3, [r0, #0]
 800b1b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1ba:	bd38      	pop	{r3, r4, r5, pc}
 800b1bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b1be:	b112      	cbz	r2, 800b1c6 <_raise_r+0x1e>
 800b1c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1c4:	b94b      	cbnz	r3, 800b1da <_raise_r+0x32>
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	f000 f830 	bl	800b22c <_getpid_r>
 800b1cc:	462a      	mov	r2, r5
 800b1ce:	4601      	mov	r1, r0
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1d6:	f000 b817 	b.w	800b208 <_kill_r>
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d00a      	beq.n	800b1f4 <_raise_r+0x4c>
 800b1de:	1c59      	adds	r1, r3, #1
 800b1e0:	d103      	bne.n	800b1ea <_raise_r+0x42>
 800b1e2:	2316      	movs	r3, #22
 800b1e4:	6003      	str	r3, [r0, #0]
 800b1e6:	2001      	movs	r0, #1
 800b1e8:	e7e7      	b.n	800b1ba <_raise_r+0x12>
 800b1ea:	2400      	movs	r4, #0
 800b1ec:	4628      	mov	r0, r5
 800b1ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b1f2:	4798      	blx	r3
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	e7e0      	b.n	800b1ba <_raise_r+0x12>

0800b1f8 <raise>:
 800b1f8:	4b02      	ldr	r3, [pc, #8]	; (800b204 <raise+0xc>)
 800b1fa:	4601      	mov	r1, r0
 800b1fc:	6818      	ldr	r0, [r3, #0]
 800b1fe:	f7ff bfd3 	b.w	800b1a8 <_raise_r>
 800b202:	bf00      	nop
 800b204:	20000080 	.word	0x20000080

0800b208 <_kill_r>:
 800b208:	b538      	push	{r3, r4, r5, lr}
 800b20a:	2300      	movs	r3, #0
 800b20c:	4d06      	ldr	r5, [pc, #24]	; (800b228 <_kill_r+0x20>)
 800b20e:	4604      	mov	r4, r0
 800b210:	4608      	mov	r0, r1
 800b212:	4611      	mov	r1, r2
 800b214:	602b      	str	r3, [r5, #0]
 800b216:	f7fc fbbb 	bl	8007990 <_kill>
 800b21a:	1c43      	adds	r3, r0, #1
 800b21c:	d102      	bne.n	800b224 <_kill_r+0x1c>
 800b21e:	682b      	ldr	r3, [r5, #0]
 800b220:	b103      	cbz	r3, 800b224 <_kill_r+0x1c>
 800b222:	6023      	str	r3, [r4, #0]
 800b224:	bd38      	pop	{r3, r4, r5, pc}
 800b226:	bf00      	nop
 800b228:	20002648 	.word	0x20002648

0800b22c <_getpid_r>:
 800b22c:	f7fc bbae 	b.w	800798c <_getpid>

0800b230 <__malloc_lock>:
 800b230:	4801      	ldr	r0, [pc, #4]	; (800b238 <__malloc_lock+0x8>)
 800b232:	f000 b809 	b.w	800b248 <__retarget_lock_acquire_recursive>
 800b236:	bf00      	nop
 800b238:	20002650 	.word	0x20002650

0800b23c <__malloc_unlock>:
 800b23c:	4801      	ldr	r0, [pc, #4]	; (800b244 <__malloc_unlock+0x8>)
 800b23e:	f000 b804 	b.w	800b24a <__retarget_lock_release_recursive>
 800b242:	bf00      	nop
 800b244:	20002650 	.word	0x20002650

0800b248 <__retarget_lock_acquire_recursive>:
 800b248:	4770      	bx	lr

0800b24a <__retarget_lock_release_recursive>:
 800b24a:	4770      	bx	lr

0800b24c <_init>:
 800b24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24e:	bf00      	nop
 800b250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b252:	bc08      	pop	{r3}
 800b254:	469e      	mov	lr, r3
 800b256:	4770      	bx	lr

0800b258 <_fini>:
 800b258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b25a:	bf00      	nop
 800b25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b25e:	bc08      	pop	{r3}
 800b260:	469e      	mov	lr, r3
 800b262:	4770      	bx	lr
