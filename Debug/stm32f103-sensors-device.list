
stm32f103-sensors-device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc94  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800bda8  0800bda8  0001bda8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bea0  0800bea0  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bea0  0800bea0  0001bea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bea8  0800bea8  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000001c  0800bea8  0800bea8  0001bea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  0800bec4  0800bec4  0001bec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800bed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024d4  200000d0  0800bfa4  000200d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200025a4  0800bfa4  000225a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006bf55  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000880d  00000000  00000000  0008c04e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000286e5  00000000  00000000  0009485b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001ad0  00000000  00000000  000bcf40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000024b8  00000000  00000000  000bea10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000219f6  00000000  00000000  000c0ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001d191  00000000  00000000  000e28be  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000aa49f  00000000  00000000  000ffa4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001a9eee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005acc  00000000  00000000  001a9f6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000d0 	.word	0x200000d0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bd8c 	.word	0x0800bd8c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000d4 	.word	0x200000d4
 800014c:	0800bd8c 	.word	0x0800bd8c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__gesf2>:
 8000ac8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000acc:	e006      	b.n	8000adc <__cmpsf2+0x4>
 8000ace:	bf00      	nop

08000ad0 <__lesf2>:
 8000ad0:	f04f 0c01 	mov.w	ip, #1
 8000ad4:	e002      	b.n	8000adc <__cmpsf2+0x4>
 8000ad6:	bf00      	nop

08000ad8 <__cmpsf2>:
 8000ad8:	f04f 0c01 	mov.w	ip, #1
 8000adc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ae0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ae4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ae8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aec:	bf18      	it	ne
 8000aee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af2:	d011      	beq.n	8000b18 <__cmpsf2+0x40>
 8000af4:	b001      	add	sp, #4
 8000af6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000afa:	bf18      	it	ne
 8000afc:	ea90 0f01 	teqne	r0, r1
 8000b00:	bf58      	it	pl
 8000b02:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b06:	bf88      	it	hi
 8000b08:	17c8      	asrhi	r0, r1, #31
 8000b0a:	bf38      	it	cc
 8000b0c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b10:	bf18      	it	ne
 8000b12:	f040 0001 	orrne.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b1c:	d102      	bne.n	8000b24 <__cmpsf2+0x4c>
 8000b1e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b22:	d105      	bne.n	8000b30 <__cmpsf2+0x58>
 8000b24:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b28:	d1e4      	bne.n	8000af4 <__cmpsf2+0x1c>
 8000b2a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b2e:	d0e1      	beq.n	8000af4 <__cmpsf2+0x1c>
 8000b30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <__aeabi_cfrcmple>:
 8000b38:	4684      	mov	ip, r0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	4661      	mov	r1, ip
 8000b3e:	e7ff      	b.n	8000b40 <__aeabi_cfcmpeq>

08000b40 <__aeabi_cfcmpeq>:
 8000b40:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b42:	f7ff ffc9 	bl	8000ad8 <__cmpsf2>
 8000b46:	2800      	cmp	r0, #0
 8000b48:	bf48      	it	mi
 8000b4a:	f110 0f00 	cmnmi.w	r0, #0
 8000b4e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b50 <__aeabi_fcmpeq>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff fff4 	bl	8000b40 <__aeabi_cfcmpeq>
 8000b58:	bf0c      	ite	eq
 8000b5a:	2001      	moveq	r0, #1
 8000b5c:	2000      	movne	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_fcmplt>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffea 	bl	8000b40 <__aeabi_cfcmpeq>
 8000b6c:	bf34      	ite	cc
 8000b6e:	2001      	movcc	r0, #1
 8000b70:	2000      	movcs	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_fcmple>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffe0 	bl	8000b40 <__aeabi_cfcmpeq>
 8000b80:	bf94      	ite	ls
 8000b82:	2001      	movls	r0, #1
 8000b84:	2000      	movhi	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_fcmpge>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffd2 	bl	8000b38 <__aeabi_cfrcmple>
 8000b94:	bf94      	ite	ls
 8000b96:	2001      	movls	r0, #1
 8000b98:	2000      	movhi	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fcmpgt>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff ffc8 	bl	8000b38 <__aeabi_cfrcmple>
 8000ba8:	bf34      	ite	cc
 8000baa:	2001      	movcc	r0, #1
 8000bac:	2000      	movcs	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_ldivmod>:
 8000bb4:	b97b      	cbnz	r3, 8000bd6 <__aeabi_ldivmod+0x22>
 8000bb6:	b972      	cbnz	r2, 8000bd6 <__aeabi_ldivmod+0x22>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bfbe      	ittt	lt
 8000bbc:	2000      	movlt	r0, #0
 8000bbe:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bc2:	e006      	blt.n	8000bd2 <__aeabi_ldivmod+0x1e>
 8000bc4:	bf08      	it	eq
 8000bc6:	2800      	cmpeq	r0, #0
 8000bc8:	bf1c      	itt	ne
 8000bca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bce:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bd2:	f000 b9bf 	b.w	8000f54 <__aeabi_idiv0>
 8000bd6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bda:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bde:	2900      	cmp	r1, #0
 8000be0:	db09      	blt.n	8000bf6 <__aeabi_ldivmod+0x42>
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	db1a      	blt.n	8000c1c <__aeabi_ldivmod+0x68>
 8000be6:	f000 f84d 	bl	8000c84 <__udivmoddi4>
 8000bea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf2:	b004      	add	sp, #16
 8000bf4:	4770      	bx	lr
 8000bf6:	4240      	negs	r0, r0
 8000bf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db1b      	blt.n	8000c38 <__aeabi_ldivmod+0x84>
 8000c00:	f000 f840 	bl	8000c84 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4240      	negs	r0, r0
 8000c10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c14:	4252      	negs	r2, r2
 8000c16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1a:	4770      	bx	lr
 8000c1c:	4252      	negs	r2, r2
 8000c1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c22:	f000 f82f 	bl	8000c84 <__udivmoddi4>
 8000c26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2e:	b004      	add	sp, #16
 8000c30:	4240      	negs	r0, r0
 8000c32:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c36:	4770      	bx	lr
 8000c38:	4252      	negs	r2, r2
 8000c3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c3e:	f000 f821 	bl	8000c84 <__udivmoddi4>
 8000c42:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4a:	b004      	add	sp, #16
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	4770      	bx	lr

08000c54 <__aeabi_uldivmod>:
 8000c54:	b953      	cbnz	r3, 8000c6c <__aeabi_uldivmod+0x18>
 8000c56:	b94a      	cbnz	r2, 8000c6c <__aeabi_uldivmod+0x18>
 8000c58:	2900      	cmp	r1, #0
 8000c5a:	bf08      	it	eq
 8000c5c:	2800      	cmpeq	r0, #0
 8000c5e:	bf1c      	itt	ne
 8000c60:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c64:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c68:	f000 b974 	b.w	8000f54 <__aeabi_idiv0>
 8000c6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c74:	f000 f806 	bl	8000c84 <__udivmoddi4>
 8000c78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c80:	b004      	add	sp, #16
 8000c82:	4770      	bx	lr

08000c84 <__udivmoddi4>:
 8000c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c88:	468c      	mov	ip, r1
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d14b      	bne.n	8000d2a <__udivmoddi4+0xa6>
 8000c92:	428a      	cmp	r2, r1
 8000c94:	4615      	mov	r5, r2
 8000c96:	d967      	bls.n	8000d68 <__udivmoddi4+0xe4>
 8000c98:	fab2 f282 	clz	r2, r2
 8000c9c:	b14a      	cbz	r2, 8000cb2 <__udivmoddi4+0x2e>
 8000c9e:	f1c2 0720 	rsb	r7, r2, #32
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	fa20 f707 	lsr.w	r7, r0, r7
 8000caa:	4095      	lsls	r5, r2
 8000cac:	ea47 0c03 	orr.w	ip, r7, r3
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb6:	fbbc f7fe 	udiv	r7, ip, lr
 8000cba:	fa1f f885 	uxth.w	r8, r5
 8000cbe:	fb0e c317 	mls	r3, lr, r7, ip
 8000cc2:	fb07 f908 	mul.w	r9, r7, r8
 8000cc6:	0c21      	lsrs	r1, r4, #16
 8000cc8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ccc:	4599      	cmp	r9, r3
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x60>
 8000cd0:	18eb      	adds	r3, r5, r3
 8000cd2:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000cd6:	f080 811c 	bcs.w	8000f12 <__udivmoddi4+0x28e>
 8000cda:	4599      	cmp	r9, r3
 8000cdc:	f240 8119 	bls.w	8000f12 <__udivmoddi4+0x28e>
 8000ce0:	3f02      	subs	r7, #2
 8000ce2:	442b      	add	r3, r5
 8000ce4:	eba3 0309 	sub.w	r3, r3, r9
 8000ce8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cec:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf0:	fb00 f108 	mul.w	r1, r0, r8
 8000cf4:	b2a4      	uxth	r4, r4
 8000cf6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfa:	42a1      	cmp	r1, r4
 8000cfc:	d909      	bls.n	8000d12 <__udivmoddi4+0x8e>
 8000cfe:	192c      	adds	r4, r5, r4
 8000d00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d04:	f080 8107 	bcs.w	8000f16 <__udivmoddi4+0x292>
 8000d08:	42a1      	cmp	r1, r4
 8000d0a:	f240 8104 	bls.w	8000f16 <__udivmoddi4+0x292>
 8000d0e:	3802      	subs	r0, #2
 8000d10:	442c      	add	r4, r5
 8000d12:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d16:	2700      	movs	r7, #0
 8000d18:	1a64      	subs	r4, r4, r1
 8000d1a:	b11e      	cbz	r6, 8000d24 <__udivmoddi4+0xa0>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	40d4      	lsrs	r4, r2
 8000d20:	e9c6 4300 	strd	r4, r3, [r6]
 8000d24:	4639      	mov	r1, r7
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d909      	bls.n	8000d42 <__udivmoddi4+0xbe>
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	f000 80ec 	beq.w	8000f0c <__udivmoddi4+0x288>
 8000d34:	2700      	movs	r7, #0
 8000d36:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3a:	4638      	mov	r0, r7
 8000d3c:	4639      	mov	r1, r7
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	fab3 f783 	clz	r7, r3
 8000d46:	2f00      	cmp	r7, #0
 8000d48:	d148      	bne.n	8000ddc <__udivmoddi4+0x158>
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xd0>
 8000d4e:	4282      	cmp	r2, r0
 8000d50:	f200 80fb 	bhi.w	8000f4a <__udivmoddi4+0x2c6>
 8000d54:	1a84      	subs	r4, r0, r2
 8000d56:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	469c      	mov	ip, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d0e0      	beq.n	8000d24 <__udivmoddi4+0xa0>
 8000d62:	e9c6 4c00 	strd	r4, ip, [r6]
 8000d66:	e7dd      	b.n	8000d24 <__udivmoddi4+0xa0>
 8000d68:	b902      	cbnz	r2, 8000d6c <__udivmoddi4+0xe8>
 8000d6a:	deff      	udf	#255	; 0xff
 8000d6c:	fab2 f282 	clz	r2, r2
 8000d70:	2a00      	cmp	r2, #0
 8000d72:	f040 808f 	bne.w	8000e94 <__udivmoddi4+0x210>
 8000d76:	2701      	movs	r7, #1
 8000d78:	1b49      	subs	r1, r1, r5
 8000d7a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000d7e:	fa1f f985 	uxth.w	r9, r5
 8000d82:	fbb1 fef8 	udiv	lr, r1, r8
 8000d86:	fb08 111e 	mls	r1, r8, lr, r1
 8000d8a:	fb09 f00e 	mul.w	r0, r9, lr
 8000d8e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000d92:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000d96:	4298      	cmp	r0, r3
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x126>
 8000d9a:	18eb      	adds	r3, r5, r3
 8000d9c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000da0:	d202      	bcs.n	8000da8 <__udivmoddi4+0x124>
 8000da2:	4298      	cmp	r0, r3
 8000da4:	f200 80cd 	bhi.w	8000f42 <__udivmoddi4+0x2be>
 8000da8:	468e      	mov	lr, r1
 8000daa:	1a1b      	subs	r3, r3, r0
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	fb09 f900 	mul.w	r9, r9, r0
 8000db8:	b2a4      	uxth	r4, r4
 8000dba:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dbe:	45a1      	cmp	r9, r4
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x14e>
 8000dc2:	192c      	adds	r4, r5, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc8:	d202      	bcs.n	8000dd0 <__udivmoddi4+0x14c>
 8000dca:	45a1      	cmp	r9, r4
 8000dcc:	f200 80b6 	bhi.w	8000f3c <__udivmoddi4+0x2b8>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	eba4 0409 	sub.w	r4, r4, r9
 8000dd6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000dda:	e79e      	b.n	8000d1a <__udivmoddi4+0x96>
 8000ddc:	f1c7 0520 	rsb	r5, r7, #32
 8000de0:	40bb      	lsls	r3, r7
 8000de2:	fa22 fc05 	lsr.w	ip, r2, r5
 8000de6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dea:	fa21 f405 	lsr.w	r4, r1, r5
 8000dee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000df2:	fbb4 f9fe 	udiv	r9, r4, lr
 8000df6:	fa1f f88c 	uxth.w	r8, ip
 8000dfa:	fb0e 4419 	mls	r4, lr, r9, r4
 8000dfe:	fa20 f305 	lsr.w	r3, r0, r5
 8000e02:	40b9      	lsls	r1, r7
 8000e04:	fb09 fa08 	mul.w	sl, r9, r8
 8000e08:	4319      	orrs	r1, r3
 8000e0a:	0c0b      	lsrs	r3, r1, #16
 8000e0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e10:	45a2      	cmp	sl, r4
 8000e12:	fa02 f207 	lsl.w	r2, r2, r7
 8000e16:	fa00 f307 	lsl.w	r3, r0, r7
 8000e1a:	d90b      	bls.n	8000e34 <__udivmoddi4+0x1b0>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e24:	f080 8088 	bcs.w	8000f38 <__udivmoddi4+0x2b4>
 8000e28:	45a2      	cmp	sl, r4
 8000e2a:	f240 8085 	bls.w	8000f38 <__udivmoddi4+0x2b4>
 8000e2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e32:	4464      	add	r4, ip
 8000e34:	eba4 040a 	sub.w	r4, r4, sl
 8000e38:	fbb4 f0fe 	udiv	r0, r4, lr
 8000e3c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000e40:	fb00 fa08 	mul.w	sl, r0, r8
 8000e44:	b289      	uxth	r1, r1
 8000e46:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x1dc>
 8000e4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e52:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e56:	d26b      	bcs.n	8000f30 <__udivmoddi4+0x2ac>
 8000e58:	45a2      	cmp	sl, r4
 8000e5a:	d969      	bls.n	8000f30 <__udivmoddi4+0x2ac>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4464      	add	r4, ip
 8000e60:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e64:	fba0 8902 	umull	r8, r9, r0, r2
 8000e68:	eba4 040a 	sub.w	r4, r4, sl
 8000e6c:	454c      	cmp	r4, r9
 8000e6e:	4641      	mov	r1, r8
 8000e70:	46ce      	mov	lr, r9
 8000e72:	d354      	bcc.n	8000f1e <__udivmoddi4+0x29a>
 8000e74:	d051      	beq.n	8000f1a <__udivmoddi4+0x296>
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d069      	beq.n	8000f4e <__udivmoddi4+0x2ca>
 8000e7a:	1a5a      	subs	r2, r3, r1
 8000e7c:	eb64 040e 	sbc.w	r4, r4, lr
 8000e80:	fa04 f505 	lsl.w	r5, r4, r5
 8000e84:	fa22 f307 	lsr.w	r3, r2, r7
 8000e88:	40fc      	lsrs	r4, r7
 8000e8a:	431d      	orrs	r5, r3
 8000e8c:	e9c6 5400 	strd	r5, r4, [r6]
 8000e90:	2700      	movs	r7, #0
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0xa0>
 8000e94:	4095      	lsls	r5, r2
 8000e96:	f1c2 0320 	rsb	r3, r2, #32
 8000e9a:	fa21 f003 	lsr.w	r0, r1, r3
 8000e9e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000ea2:	fbb0 f7f8 	udiv	r7, r0, r8
 8000ea6:	fa1f f985 	uxth.w	r9, r5
 8000eaa:	fb08 0017 	mls	r0, r8, r7, r0
 8000eae:	fa24 f303 	lsr.w	r3, r4, r3
 8000eb2:	4091      	lsls	r1, r2
 8000eb4:	fb07 fc09 	mul.w	ip, r7, r9
 8000eb8:	430b      	orrs	r3, r1
 8000eba:	0c19      	lsrs	r1, r3, #16
 8000ebc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ec0:	458c      	cmp	ip, r1
 8000ec2:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec6:	d907      	bls.n	8000ed8 <__udivmoddi4+0x254>
 8000ec8:	1869      	adds	r1, r5, r1
 8000eca:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000ece:	d231      	bcs.n	8000f34 <__udivmoddi4+0x2b0>
 8000ed0:	458c      	cmp	ip, r1
 8000ed2:	d92f      	bls.n	8000f34 <__udivmoddi4+0x2b0>
 8000ed4:	3f02      	subs	r7, #2
 8000ed6:	4429      	add	r1, r5
 8000ed8:	eba1 010c 	sub.w	r1, r1, ip
 8000edc:	fbb1 f0f8 	udiv	r0, r1, r8
 8000ee0:	fb08 1c10 	mls	ip, r8, r0, r1
 8000ee4:	fb00 fe09 	mul.w	lr, r0, r9
 8000ee8:	b299      	uxth	r1, r3
 8000eea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eee:	458e      	cmp	lr, r1
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x27e>
 8000ef2:	1869      	adds	r1, r5, r1
 8000ef4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ef8:	d218      	bcs.n	8000f2c <__udivmoddi4+0x2a8>
 8000efa:	458e      	cmp	lr, r1
 8000efc:	d916      	bls.n	8000f2c <__udivmoddi4+0x2a8>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4429      	add	r1, r5
 8000f02:	eba1 010e 	sub.w	r1, r1, lr
 8000f06:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0a:	e73a      	b.n	8000d82 <__udivmoddi4+0xfe>
 8000f0c:	4637      	mov	r7, r6
 8000f0e:	4630      	mov	r0, r6
 8000f10:	e708      	b.n	8000d24 <__udivmoddi4+0xa0>
 8000f12:	460f      	mov	r7, r1
 8000f14:	e6e6      	b.n	8000ce4 <__udivmoddi4+0x60>
 8000f16:	4618      	mov	r0, r3
 8000f18:	e6fb      	b.n	8000d12 <__udivmoddi4+0x8e>
 8000f1a:	4543      	cmp	r3, r8
 8000f1c:	d2ab      	bcs.n	8000e76 <__udivmoddi4+0x1f2>
 8000f1e:	ebb8 0102 	subs.w	r1, r8, r2
 8000f22:	eb69 020c 	sbc.w	r2, r9, ip
 8000f26:	3801      	subs	r0, #1
 8000f28:	4696      	mov	lr, r2
 8000f2a:	e7a4      	b.n	8000e76 <__udivmoddi4+0x1f2>
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	e7e8      	b.n	8000f02 <__udivmoddi4+0x27e>
 8000f30:	4608      	mov	r0, r1
 8000f32:	e795      	b.n	8000e60 <__udivmoddi4+0x1dc>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e7cf      	b.n	8000ed8 <__udivmoddi4+0x254>
 8000f38:	4681      	mov	r9, r0
 8000f3a:	e77b      	b.n	8000e34 <__udivmoddi4+0x1b0>
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	442c      	add	r4, r5
 8000f40:	e747      	b.n	8000dd2 <__udivmoddi4+0x14e>
 8000f42:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f46:	442b      	add	r3, r5
 8000f48:	e72f      	b.n	8000daa <__udivmoddi4+0x126>
 8000f4a:	4638      	mov	r0, r7
 8000f4c:	e707      	b.n	8000d5e <__udivmoddi4+0xda>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	e6e8      	b.n	8000d24 <__udivmoddi4+0xa0>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <Erase_flash>:
//	  }
}

//////////////////////// ОЧИСТКА ПАМЯТИ /////////////////////////////
void Erase_flash(void)
{
 8000f58:	b530      	push	{r4, r5, lr}
 8000f5a:	b083      	sub	sp, #12
	static FLASH_EraseInitTypeDef EraseInitStruct;     // структура для очистки флеша

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // постраничная очистка, FLASH_TYPEERASE_MASSERASE - очистка всего флеша
 8000f5c:	4c09      	ldr	r4, [pc, #36]	; (8000f84 <Erase_flash+0x2c>)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	6023      	str	r3, [r4, #0]
	EraseInitStruct.PageAddress = STARTADDR;
 8000f62:	4a09      	ldr	r2, [pc, #36]	; (8000f88 <Erase_flash+0x30>)
 8000f64:	60a2      	str	r2, [r4, #8]
	EraseInitStruct.NbPages = PAGES;
 8000f66:	2201      	movs	r2, #1
 8000f68:	60e2      	str	r2, [r4, #12]
	//EraseInitStruct.Banks = FLASH_BANK_1; // FLASH_BANK_2 - банк №2, FLASH_BANK_BOTH - оба банка
	uint32_t page_error = 0; // переменная, в которую запишется адрес страницы при неудачном стирании
 8000f6a:	ad02      	add	r5, sp, #8
 8000f6c:	f845 3d04 	str.w	r3, [r5, #-4]!

	HAL_FLASH_Unlock(); // разблокировать флеш
 8000f70:	f006 ffa0 	bl	8007eb4 <HAL_FLASH_Unlock>

	if(HAL_FLASHEx_Erase(&EraseInitStruct, &page_error) != HAL_OK)
 8000f74:	4629      	mov	r1, r5
 8000f76:	4620      	mov	r0, r4
 8000f78:	f007 f858 	bl	800802c <HAL_FLASHEx_Erase>
	else
	{

	}

	HAL_FLASH_Lock();
 8000f7c:	f006 ffb0 	bl	8007ee0 <HAL_FLASH_Lock>
}
 8000f80:	b003      	add	sp, #12
 8000f82:	bd30      	pop	{r4, r5, pc}
 8000f84:	200000ec 	.word	0x200000ec
 8000f88:	0801fc00 	.word	0x0801fc00

08000f8c <Flash_search_adress>:

//////////////////////// ПОИСК СВОБОДНЫХ ЯЧЕЕК /////////////////////////////
uint32_t Flash_search_adress(uint32_t address, uint16_t cnt)
{
 8000f8c:	b570      	push	{r4, r5, r6, lr}
	uint16_t count_byte = cnt;

	while(count_byte)
 8000f8e:	460e      	mov	r6, r1
 8000f90:	4603      	mov	r3, r0
 8000f92:	b1a9      	cbz	r1, 8000fc0 <Flash_search_adress+0x34>
	uint16_t count_byte = cnt;
 8000f94:	460a      	mov	r2, r1
	{
		if(0xFF == *(uint8_t*)address++) count_byte--;
		else count_byte = cnt;

		if(address == ENDMEMORY - 1) // если достигнут конец флеша
 8000f96:	4c0b      	ldr	r4, [pc, #44]	; (8000fc4 <Flash_search_adress+0x38>)
		else count_byte = cnt;
 8000f98:	460d      	mov	r5, r1
 8000f9a:	e005      	b.n	8000fa8 <Flash_search_adress+0x1c>
		if(0xFF == *(uint8_t*)address++) count_byte--;
 8000f9c:	3a01      	subs	r2, #1
 8000f9e:	b292      	uxth	r2, r2
		if(address == ENDMEMORY - 1) // если достигнут конец флеша
 8000fa0:	42a3      	cmp	r3, r4
 8000fa2:	d009      	beq.n	8000fb8 <Flash_search_adress+0x2c>
	while(count_byte)
 8000fa4:	b162      	cbz	r2, 8000fc0 <Flash_search_adress+0x34>
		else count_byte = cnt;
 8000fa6:	4618      	mov	r0, r3
		if(0xFF == *(uint8_t*)address++) count_byte--;
 8000fa8:	1c43      	adds	r3, r0, #1
 8000faa:	7801      	ldrb	r1, [r0, #0]
 8000fac:	29ff      	cmp	r1, #255	; 0xff
 8000fae:	d0f5      	beq.n	8000f9c <Flash_search_adress+0x10>
		if(address == ENDMEMORY - 1) // если достигнут конец флеша
 8000fb0:	42a3      	cmp	r3, r4
 8000fb2:	d001      	beq.n	8000fb8 <Flash_search_adress+0x2c>
		else count_byte = cnt;
 8000fb4:	462a      	mov	r2, r5
 8000fb6:	e7f6      	b.n	8000fa6 <Flash_search_adress+0x1a>
		{
			Erase_flash();        // тогда очищаем память
 8000fb8:	f7ff ffce 	bl	8000f58 <Erase_flash>
			return STARTADDR;     // устанавливаем адрес для записи с самого начала
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <Flash_search_adress+0x3c>)
 8000fbe:	e000      	b.n	8000fc2 <Flash_search_adress+0x36>
		}
	}

	return address -= cnt;
 8000fc0:	1b98      	subs	r0, r3, r6
}
 8000fc2:	bd70      	pop	{r4, r5, r6, pc}
 8000fc4:	0801ffff 	.word	0x0801ffff
 8000fc8:	0801fc00 	.word	0x0801fc00

08000fcc <Write_to_flash>:

//////////////////////// ЗАПИСЬ ДАННЫХ /////////////////////////////
void Write_to_flash(uint32_t *buff)
{
 8000fcc:	b570      	push	{r4, r5, r6, lr}
 8000fce:	4606      	mov	r6, r0
	res_addr = Flash_search_adress(res_addr, BUFFSIZE * DATAWIDTH); // ищем свободные ячейки начиная с последнего известного адреса
 8000fd0:	4c0e      	ldr	r4, [pc, #56]	; (800100c <Write_to_flash+0x40>)
 8000fd2:	2108      	movs	r1, #8
 8000fd4:	6820      	ldr	r0, [r4, #0]
 8000fd6:	f7ff ffd9 	bl	8000f8c <Flash_search_adress>
 8000fda:	6020      	str	r0, [r4, #0]

	//////////////////////// ЗАПИСЬ ////////////////////////////
	HAL_FLASH_Unlock(); // разблокировать флеш
 8000fdc:	f006 ff6a 	bl	8007eb4 <HAL_FLASH_Unlock>

	for(uint16_t i = 0; i < BUFFSIZE; i++)
	{
		if(HAL_FLASH_Program(WIDTHWRITE, res_addr, buff[i]) != HAL_OK)
 8000fe0:	2500      	movs	r5, #0
 8000fe2:	6832      	ldr	r2, [r6, #0]
 8000fe4:	462b      	mov	r3, r5
 8000fe6:	6821      	ldr	r1, [r4, #0]
 8000fe8:	2002      	movs	r0, #2
 8000fea:	f006 ffb9 	bl	8007f60 <HAL_FLASH_Program>
		{
			//uint32_t er = HAL_FLASH_GetError();
		}

		res_addr = res_addr + DATAWIDTH;
 8000fee:	6821      	ldr	r1, [r4, #0]
 8000ff0:	3104      	adds	r1, #4
 8000ff2:	6021      	str	r1, [r4, #0]
		if(HAL_FLASH_Program(WIDTHWRITE, res_addr, buff[i]) != HAL_OK)
 8000ff4:	6872      	ldr	r2, [r6, #4]
 8000ff6:	462b      	mov	r3, r5
 8000ff8:	2002      	movs	r0, #2
 8000ffa:	f006 ffb1 	bl	8007f60 <HAL_FLASH_Program>
		res_addr = res_addr + DATAWIDTH;
 8000ffe:	6823      	ldr	r3, [r4, #0]
 8001000:	3304      	adds	r3, #4
 8001002:	6023      	str	r3, [r4, #0]
	}

	HAL_FLASH_Lock(); // заблокировать флеш
 8001004:	f006 ff6c 	bl	8007ee0 <HAL_FLASH_Lock>
//	if(sum1 != sum2) // если суммы записанного и прочитанного не равны, тогда что-то пошло не так
//	{
//		return;
//	}
	//////////////////////// конец проверки записанного ////////////////////////
}
 8001008:	bd70      	pop	{r4, r5, r6, pc}
 800100a:	bf00      	nop
 800100c:	2000243c 	.word	0x2000243c

08001010 <Read_last_data_in_flash>:

//////////////////////// ЧТЕНИЕ ПОСЛЕДНИХ ДАННЫХ /////////////////////////////
void Read_last_data_in_flash(uint32_t *buff)
{
	if(res_addr == STARTADDR)
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <Read_last_data_in_flash+0x18>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a05      	ldr	r2, [pc, #20]	; (800102c <Read_last_data_in_flash+0x1c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d005      	beq.n	8001026 <Read_last_data_in_flash+0x16>

	uint32_t adr = res_addr - BUFFSIZE * DATAWIDTH; // сдвигаемся на начало последних данных

	for(uint16_t i = 0; i < BUFFSIZE; i++)
	{
		buff[i] = *(uint32_t*)adr; // читаем
 800101a:	f853 2c08 	ldr.w	r2, [r3, #-8]
 800101e:	6002      	str	r2, [r0, #0]
 8001020:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8001024:	6043      	str	r3, [r0, #4]
		adr = adr + DATAWIDTH;
	}
}
 8001026:	4770      	bx	lr
 8001028:	2000243c 	.word	0x2000243c
 800102c:	0801fc00 	.word	0x0801fc00

08001030 <Read_control_module_info_from_flash>:
void Read_control_module_info_from_flash(uint32_t *buff) {
 8001030:	b510      	push	{r4, lr}
 8001032:	4604      	mov	r4, r0
	  res_addr = Flash_search_adress(STARTADDR, BUFFSIZE * DATAWIDTH);
 8001034:	2108      	movs	r1, #8
 8001036:	4804      	ldr	r0, [pc, #16]	; (8001048 <Read_control_module_info_from_flash+0x18>)
 8001038:	f7ff ffa8 	bl	8000f8c <Flash_search_adress>
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <Read_control_module_info_from_flash+0x1c>)
 800103e:	6018      	str	r0, [r3, #0]
	  Read_last_data_in_flash(buff);
 8001040:	4620      	mov	r0, r4
 8001042:	f7ff ffe5 	bl	8001010 <Read_last_data_in_flash>
}
 8001046:	bd10      	pop	{r4, pc}
 8001048:	0801fc00 	.word	0x0801fc00
 800104c:	2000243c 	.word	0x2000243c

08001050 <_ZN11Grow_sensor13set_system_idESt5arrayIhLj12EE>:
        }
}

// --- Поля класса-платы ---

void Grow_sensor::set_system_id(std::array<uint8_t, AMT_BYTES_SYSTEM_ID> system_id) {
 8001050:	b410      	push	{r4}
 8001052:	b085      	sub	sp, #20
 8001054:	4604      	mov	r4, r0
 8001056:	a801      	add	r0, sp, #4
 8001058:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    system_id_ = system_id;
 800105c:	c807      	ldmia	r0, {r0, r1, r2}
 800105e:	e884 000b 	stmia.w	r4, {r0, r1, r3}
}
 8001062:	b005      	add	sp, #20
 8001064:	bc10      	pop	{r4}
 8001066:	4770      	bx	lr

08001068 <_ZNK11Grow_sensor13get_system_idEv>:
std::array<uint8_t, AMT_BYTES_SYSTEM_ID> Grow_sensor::get_system_id() const {
 8001068:	b410      	push	{r4}
 800106a:	4604      	mov	r4, r0
    return system_id_;
 800106c:	460b      	mov	r3, r1
 800106e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001070:	6020      	str	r0, [r4, #0]
 8001072:	6061      	str	r1, [r4, #4]
 8001074:	60a2      	str	r2, [r4, #8]
}
 8001076:	4620      	mov	r0, r4
 8001078:	bc10      	pop	{r4}
 800107a:	4770      	bx	lr

0800107c <_ZN11Grow_sensor10set_activeEh>:

void Grow_sensor::set_active(uint8_t active) {
    if(active < 3)
 800107c:	2902      	cmp	r1, #2
        active_ = active;
 800107e:	bf98      	it	ls
 8001080:	f880 102d 	strbls.w	r1, [r0, #45]	; 0x2d
}
 8001084:	4770      	bx	lr

08001086 <_ZNK11Grow_sensor10get_activeEv>:

uint8_t Grow_sensor::get_active() const {
    return active_;
}
 8001086:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 800108a:	4770      	bx	lr

0800108c <_ZN11Grow_sensor26set_address_control_moduleE12LoRa_address>:
uint16_t Grow_sensor::get_address() const {
    return address_;
}

#if !defined( ESP32 )
bool Grow_sensor::set_address_control_module(LoRa_address address) {
 800108c:	b082      	sub	sp, #8
 800108e:	9101      	str	r1, [sp, #4]
	if(address.branch != 0)
 8001090:	0c0b      	lsrs	r3, r1, #16
		return true;
	address_control_module_ = address;
 8001092:	bf03      	ittte	eq
 8001094:	460b      	moveq	r3, r1
 8001096:	61c3      	streq	r3, [r0, #28]
	return false;
 8001098:	2000      	moveq	r0, #0
		return true;
 800109a:	2001      	movne	r0, #1
}
 800109c:	b002      	add	sp, #8
 800109e:	4770      	bx	lr

080010a0 <_ZNK11Grow_sensor26get_address_control_moduleEv>:
LoRa_address Grow_sensor::get_address_control_module() const {
 80010a0:	b082      	sub	sp, #8
	return address_control_module_;
 80010a2:	69c3      	ldr	r3, [r0, #28]
 80010a4:	2000      	movs	r0, #0
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	f362 000f 	bfi	r0, r2, #0, #16
 80010ac:	0c1b      	lsrs	r3, r3, #16
 80010ae:	f363 401f 	bfi	r0, r3, #16, #16
}
 80010b2:	b002      	add	sp, #8
 80010b4:	4770      	bx	lr

080010b6 <_ZNK11Grow_sensor11get_settingEv>:
void Grow_sensor::set_setting(uint8_t setting) {
    setting_ = setting;
}
uint8_t Grow_sensor::get_setting() const {
    return setting_;
}
 80010b6:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
 80010ba:	4770      	bx	lr

080010bc <_ZNK11Grow_sensor8get_typeEhRh>:
    if(get_count_component() <= num)
        return true;
    result = component_[num].get_type();
    return false;
}
bool Grow_sensor::get_type(uint8_t num, uint8_t &result) const {
 80010bc:	b538      	push	{r3, r4, r5, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80010be:	6904      	ldr	r4, [r0, #16]
 80010c0:	6943      	ldr	r3, [r0, #20]
 80010c2:	1b1b      	subs	r3, r3, r4
    if(get_count_component() <= num)
 80010c4:	f3c3 03c7 	ubfx	r3, r3, #3, #8
 80010c8:	4299      	cmp	r1, r3
 80010ca:	d301      	bcc.n	80010d0 <_ZNK11Grow_sensor8get_typeEhRh+0x14>
        return true;
 80010cc:	2001      	movs	r0, #1
    result = component_[num].get_type();
    return false;
}
 80010ce:	bd38      	pop	{r3, r4, r5, pc}
 80010d0:	4615      	mov	r5, r2
    result = component_[num].get_type();
 80010d2:	eb04 00c1 	add.w	r0, r4, r1, lsl #3
 80010d6:	f000 fb16 	bl	8001706 <_ZNK21Grow_sensor_component8get_typeEv>
 80010da:	7028      	strb	r0, [r5, #0]
    return false;
 80010dc:	2000      	movs	r0, #0
 80010de:	e7f6      	b.n	80010ce <_ZNK11Grow_sensor8get_typeEhRh+0x12>

080010e0 <_ZNK11Grow_sensor6get_idEhRh>:
    std::vector<enum Type_sensor> type_sensor;
    for(int i = 0; i < get_count_component(); ++i)
        type_sensor.push_back(component_[i].get_type());
    return type_sensor;
}
bool Grow_sensor::get_id(uint8_t num, uint8_t &result) const {
 80010e0:	b538      	push	{r3, r4, r5, lr}
 80010e2:	6904      	ldr	r4, [r0, #16]
 80010e4:	6943      	ldr	r3, [r0, #20]
 80010e6:	1b1b      	subs	r3, r3, r4
    if(get_count_component() <= num)
 80010e8:	f3c3 03c7 	ubfx	r3, r3, #3, #8
 80010ec:	4299      	cmp	r1, r3
 80010ee:	d301      	bcc.n	80010f4 <_ZNK11Grow_sensor6get_idEhRh+0x14>
        return true;
 80010f0:	2001      	movs	r0, #1
    result = component_[num].get_id();
    return false;
}
 80010f2:	bd38      	pop	{r3, r4, r5, pc}
 80010f4:	4615      	mov	r5, r2
    result = component_[num].get_id();
 80010f6:	eb04 00c1 	add.w	r0, r4, r1, lsl #3
 80010fa:	f000 fb06 	bl	800170a <_ZNK21Grow_sensor_component6get_idEv>
 80010fe:	7028      	strb	r0, [r5, #0]
    return false;
 8001100:	2000      	movs	r0, #0
 8001102:	e7f6      	b.n	80010f2 <_ZNK11Grow_sensor6get_idEhRh+0x12>

08001104 <_ZN11Grow_sensor9set_valueEhf>:
    for(int i = 0; i < get_count_component(); ++i)
        id.push_back(component_[i].get_id());
    return id;
}

bool Grow_sensor::set_value(uint8_t num, float value) {
 8001104:	b538      	push	{r3, r4, r5, lr}
 8001106:	6905      	ldr	r5, [r0, #16]
 8001108:	6943      	ldr	r3, [r0, #20]
 800110a:	1b5b      	subs	r3, r3, r5
    if(get_count_component() <= num)
 800110c:	f3c3 03c7 	ubfx	r3, r3, #3, #8
 8001110:	4299      	cmp	r1, r3
 8001112:	d301      	bcc.n	8001118 <_ZN11Grow_sensor9set_valueEhf+0x14>
        return true;
 8001114:	2001      	movs	r0, #1
    component_[num].set_value(value);
    change_value_ = true;
    return false;
}
 8001116:	bd38      	pop	{r3, r4, r5, pc}
 8001118:	460b      	mov	r3, r1
 800111a:	4604      	mov	r4, r0
    component_[num].set_value(value);
 800111c:	4611      	mov	r1, r2
 800111e:	eb05 00c3 	add.w	r0, r5, r3, lsl #3
 8001122:	f000 faf6 	bl	8001712 <_ZN21Grow_sensor_component9set_valueEf>
    change_value_ = true;
 8001126:	2301      	movs	r3, #1
 8001128:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    return false;
 800112c:	2000      	movs	r0, #0
 800112e:	e7f2      	b.n	8001116 <_ZN11Grow_sensor9set_valueEhf+0x12>

08001130 <_ZN11Grow_sensor9get_valueEhRf>:
bool Grow_sensor::get_value(uint8_t num, float &result) {
 8001130:	b538      	push	{r3, r4, r5, lr}
 8001132:	6904      	ldr	r4, [r0, #16]
 8001134:	6943      	ldr	r3, [r0, #20]
 8001136:	1b1b      	subs	r3, r3, r4
    if(get_count_component() <= num)
 8001138:	f3c3 03c7 	ubfx	r3, r3, #3, #8
 800113c:	4299      	cmp	r1, r3
 800113e:	d301      	bcc.n	8001144 <_ZN11Grow_sensor9get_valueEhRf+0x14>
        return true;
 8001140:	2001      	movs	r0, #1
    result = component_[num].get_value();
    return false;
}
 8001142:	bd38      	pop	{r3, r4, r5, pc}
 8001144:	4615      	mov	r5, r2
    result = component_[num].get_value();
 8001146:	eb04 00c1 	add.w	r0, r4, r1, lsl #3
 800114a:	f000 fae0 	bl	800170e <_ZN21Grow_sensor_component9get_valueEv>
 800114e:	6028      	str	r0, [r5, #0]
    return false;
 8001150:	2000      	movs	r0, #0
 8001152:	e7f6      	b.n	8001142 <_ZN11Grow_sensor9get_valueEhRf+0x12>

08001154 <_ZNK11Grow_sensor19get_count_componentEv>:
 8001154:	6943      	ldr	r3, [r0, #20]
 8001156:	6900      	ldr	r0, [r0, #16]
 8001158:	1a18      	subs	r0, r3, r0
}
// --- Информации о компонентах ---

uint8_t Grow_sensor::get_count_component() const {
    return component_.size();
}
 800115a:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 800115e:	4770      	bx	lr

08001160 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8001160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001164:	4606      	mov	r6, r0
 8001166:	460c      	mov	r4, r1
 8001168:	4691      	mov	r9, r2
 800116a:	6807      	ldr	r7, [r0, #0]
 800116c:	6843      	ldr	r3, [r0, #4]
 800116e:	1bdb      	subs	r3, r3, r7
 8001170:	10db      	asrs	r3, r3, #3
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001172:	b18b      	cbz	r3, 8001198 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x38>
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
 8001174:	005a      	lsls	r2, r3, #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001176:	4293      	cmp	r3, r2
 8001178:	d903      	bls.n	8001182 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x22>
  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800117a:	1bcf      	subs	r7, r1, r7
 800117c:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
 8001180:	e00d      	b.n	800119e <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
 8001182:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
 8001186:	4590      	cmp	r8, r2
 8001188:	bf28      	it	cs
 800118a:	4690      	movcs	r8, r2
 800118c:	1bcf      	subs	r7, r1, r7
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800118e:	b932      	cbnz	r2, 800119e <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
 8001190:	2500      	movs	r5, #0
 8001192:	e009      	b.n	80011a8 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x48>
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
 8001194:	462b      	mov	r3, r5
 8001196:	e022      	b.n	80011de <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7e>
 8001198:	1bcf      	subs	r7, r1, r7
 800119a:	f04f 0801 	mov.w	r8, #1
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800119e:	ea4f 00c8 	mov.w	r0, r8, lsl #3
 80011a2:	f009 fc4f 	bl	800aa44 <_Znwj>
 80011a6:	4605      	mov	r5, r0

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80011a8:	19ef      	adds	r7, r5, r7
 80011aa:	bf1c      	itt	ne
 80011ac:	e9d9 0100 	ldrdne	r0, r1, [r9]
 80011b0:	e9c7 0100 	strdne	r0, r1, [r7]
#endif
	  __new_finish = pointer();

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 80011b4:	f8d6 c000 	ldr.w	ip, [r6]
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
 80011b8:	45a4      	cmp	ip, r4
 80011ba:	d0eb      	beq.n	8001194 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x34>
 80011bc:	f10c 0208 	add.w	r2, ip, #8
 80011c0:	1aa7      	subs	r7, r4, r2
 80011c2:	f027 0707 	bic.w	r7, r7, #7
 80011c6:	3708      	adds	r7, #8
 80011c8:	442f      	add	r7, r5
	  _ForwardIterator __cur = __result;
 80011ca:	462b      	mov	r3, r5
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 80011cc:	b11b      	cbz	r3, 80011d6 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x76>
 80011ce:	e912 0003 	ldmdb	r2, {r0, r1}
 80011d2:	e883 0003 	stmia.w	r3, {r0, r1}
	      for (; __first != __last; ++__first, (void)++__cur)
 80011d6:	3308      	adds	r3, #8
 80011d8:	3208      	adds	r2, #8
 80011da:	42bb      	cmp	r3, r7
 80011dc:	d1f6      	bne.n	80011cc <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6c>
	     __new_start, _M_get_Tp_allocator());

	  ++__new_finish;
 80011de:	f103 0708 	add.w	r7, r3, #8

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 80011e2:	6872      	ldr	r2, [r6, #4]
 80011e4:	42a2      	cmp	r2, r4
 80011e6:	d015      	beq.n	8001214 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>
 80011e8:	3408      	adds	r4, #8
 80011ea:	1b12      	subs	r2, r2, r4
 80011ec:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
 80011f0:	f10e 0202 	add.w	r2, lr, #2
 80011f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	  _ForwardIterator __cur = __result;
 80011f8:	463a      	mov	r2, r7
 80011fa:	b11a      	cbz	r2, 8001204 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>
 80011fc:	e914 0003 	ldmdb	r4, {r0, r1}
 8001200:	e882 0003 	stmia.w	r2, {r0, r1}
	      for (; __first != __last; ++__first, (void)++__cur)
 8001204:	3208      	adds	r2, #8
 8001206:	3408      	adds	r4, #8
 8001208:	429a      	cmp	r2, r3
 800120a:	d1f6      	bne.n	80011fa <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
 800120c:	f10e 0e01 	add.w	lr, lr, #1
 8001210:	eb07 07ce 	add.w	r7, r7, lr, lsl #3
	if (__p)
 8001214:	f1bc 0f00 	cmp.w	ip, #0
 8001218:	d002      	beq.n	8001220 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc0>
	::operator delete(__p);
 800121a:	4660      	mov	r0, ip
 800121c:	f009 fc2c 	bl	800aa78 <_ZdlPv>
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		    _M_get_Tp_allocator());
      _M_deallocate(this->_M_impl._M_start,
		    this->_M_impl._M_end_of_storage
		    - this->_M_impl._M_start);
      this->_M_impl._M_start = __new_start;
 8001220:	6035      	str	r5, [r6, #0]
      this->_M_impl._M_finish = __new_finish;
 8001222:	6077      	str	r7, [r6, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001224:	eb05 05c8 	add.w	r5, r5, r8, lsl #3
 8001228:	60b5      	str	r5, [r6, #8]
    }
 800122a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800122e <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800122e:	b510      	push	{r4, lr}
 8001230:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001232:	6844      	ldr	r4, [r0, #4]
 8001234:	6882      	ldr	r2, [r0, #8]
 8001236:	4294      	cmp	r4, r2
 8001238:	d007      	beq.n	800124a <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800123a:	b114      	cbz	r4, 8001242 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x14>
 800123c:	c903      	ldmia	r1, {r0, r1}
 800123e:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	3208      	adds	r2, #8
 8001246:	605a      	str	r2, [r3, #4]
      }
 8001248:	bd10      	pop	{r4, pc}
 800124a:	460a      	mov	r2, r1
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800124c:	4621      	mov	r1, r4
 800124e:	f7ff ff87 	bl	8001160 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8001252:	e7f9      	b.n	8001248 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x1a>

08001254 <_ZN11Grow_sensorC1EhP11Type_sensor>:
Grow_sensor::Grow_sensor(uint8_t amt_component, enum Type_sensor* type_sensor) {
 8001254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	4606      	mov	r6, r0
 800125c:	f100 0910 	add.w	r9, r0, #16
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8001260:	2300      	movs	r3, #0
 8001262:	6103      	str	r3, [r0, #16]
 8001264:	6143      	str	r3, [r0, #20]
 8001266:	6183      	str	r3, [r0, #24]
class LoRa_address {
public:
    uint16_t group = 0xFFFF;  // Адрес группы
    uint16_t branch = 0xFFFF; // Адрес ветви
public:
    LoRa_address() = default;
 8001268:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800126c:	8383      	strh	r3, [r0, #28]
 800126e:	83c3      	strh	r3, [r0, #30]
 8001270:	1e43      	subs	r3, r0, #1
 8001272:	f100 040b 	add.w	r4, r0, #11
        system_id_[i] = 0;
 8001276:	2000      	movs	r0, #0
 8001278:	f803 0f01 	strb.w	r0, [r3, #1]!
    for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
 800127c:	42a3      	cmp	r3, r4
 800127e:	d1fb      	bne.n	8001278 <_ZN11Grow_sensorC1EhP11Type_sensor+0x24>
    address_ = 0xFFFF;
 8001280:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001284:	81b3      	strh	r3, [r6, #12]
    setting_ = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    active_ = false;
 800128c:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    change_value_ = false;
 8001290:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
 8001294:	4d15      	ldr	r5, [pc, #84]	; (80012ec <_ZN11Grow_sensorC1EhP11Type_sensor+0x98>)
 8001296:	f105 000d 	add.w	r0, r5, #13
 800129a:	462c      	mov	r4, r5
        id_mas_sensors[i] = 0;
 800129c:	f804 3b01 	strb.w	r3, [r4], #1
    for(int i = 0; i < COUNT_TYPE_SENSOR; ++i)
 80012a0:	4284      	cmp	r4, r0
 80012a2:	d1fb      	bne.n	800129c <_ZN11Grow_sensorC1EhP11Type_sensor+0x48>
    for(int i = 0; i < amt_component; ++i)
 80012a4:	b1a1      	cbz	r1, 80012d0 <_ZN11Grow_sensorC1EhP11Type_sensor+0x7c>
 80012a6:	4617      	mov	r7, r2
 80012a8:	eb02 0a01 	add.w	sl, r2, r1
        component_.push_back(Grow_sensor_component(type_sensor[i], (id_mas_sensors[type_sensor[i]]++)));
 80012ac:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80012ec <_ZN11Grow_sensorC1EhP11Type_sensor+0x98>
 80012b0:	f817 1b01 	ldrb.w	r1, [r7], #1
 80012b4:	f818 2001 	ldrb.w	r2, [r8, r1]
 80012b8:	1c53      	adds	r3, r2, #1
 80012ba:	f808 3001 	strb.w	r3, [r8, r1]
 80012be:	4668      	mov	r0, sp
 80012c0:	f000 fa1c 	bl	80016fc <_ZN21Grow_sensor_componentC1E11Type_sensorh>
      { emplace_back(std::move(__x)); }
 80012c4:	4669      	mov	r1, sp
 80012c6:	4648      	mov	r0, r9
 80012c8:	f7ff ffb1 	bl	800122e <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
    for(int i = 0; i < amt_component; ++i)
 80012cc:	4557      	cmp	r7, sl
 80012ce:	d1ef      	bne.n	80012b0 <_ZN11Grow_sensorC1EhP11Type_sensor+0x5c>
            setting_ = 0x04; // 0000.0100 - бит индивидуального номера, в случае наличия повторов
 80012d0:	2204      	movs	r2, #4
        if(id_mas_sensors[i] > 1) {
 80012d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80012d6:	2b01      	cmp	r3, #1
            setting_ = 0x04; // 0000.0100 - бит индивидуального номера, в случае наличия повторов
 80012d8:	bf88      	it	hi
 80012da:	f886 202f 	strbhi.w	r2, [r6, #47]	; 0x2f
    for (int i = 0; i < COUNT_TYPE_SENSOR; ++i)
 80012de:	42a5      	cmp	r5, r4
 80012e0:	d1f7      	bne.n	80012d2 <_ZN11Grow_sensorC1EhP11Type_sensor+0x7e>
}
 80012e2:	4630      	mov	r0, r6
 80012e4:	b002      	add	sp, #8
 80012e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ea:	bf00      	nop
 80012ec:	200000fc 	.word	0x200000fc

080012f0 <_ZN21Grow_sensor_interface9load_dataER11Grow_sensorR17LoRa_contact_datamm>:

uint8_t data[50];

// --- Сохранение в энергонезависимую память ---

void Grow_sensor_interface::load_data(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data, uint32_t adr, uint32_t channel) {
 80012f0:	b530      	push	{r4, r5, lr}
 80012f2:	b083      	sub	sp, #12
 80012f4:	460c      	mov	r4, r1
 80012f6:	4615      	mov	r5, r2
	LoRa_address address(adr);
 80012f8:	4619      	mov	r1, r3
 80012fa:	a801      	add	r0, sp, #4
 80012fc:	f004 fabd 	bl	800587a <_ZN12LoRa_addressC1Em>
    contact_data.set_my_adr(address);
 8001300:	9901      	ldr	r1, [sp, #4]
 8001302:	4628      	mov	r0, r5
 8001304:	f000 fa5e 	bl	80017c4 <_ZN17LoRa_contact_data10set_my_adrE12LoRa_address>
    address.branch = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	f8ad 3006 	strh.w	r3, [sp, #6]
    grow_sensor.set_address_control_module(address);
 800130e:	9901      	ldr	r1, [sp, #4]
 8001310:	4620      	mov	r0, r4
 8001312:	f7ff febb 	bl	800108c <_ZN11Grow_sensor26set_address_control_moduleE12LoRa_address>
    contact_data.set_channel(channel);
 8001316:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 800131a:	4628      	mov	r0, r5
 800131c:	f000 fa62 	bl	80017e4 <_ZN17LoRa_contact_data11set_channelEt>
    grow_sensor.set_active(2);
 8001320:	2102      	movs	r1, #2
 8001322:	4620      	mov	r0, r4
 8001324:	f7ff feaa 	bl	800107c <_ZN11Grow_sensor10set_activeEh>
}
 8001328:	b003      	add	sp, #12
 800132a:	bd30      	pop	{r4, r5, pc}

0800132c <_ZN21Grow_sensor_interface9save_dataERK11Grow_sensorRK17LoRa_contact_dataRmS6_>:
bool Grow_sensor_interface::save_data(const Grow_sensor &grow_sensor, const LoRa_contact_data& contact_data, uint32_t &adr, uint32_t &channel) {
 800132c:	b570      	push	{r4, r5, r6, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	4614      	mov	r4, r2
 8001332:	461d      	mov	r5, r3
	if(grow_sensor.get_active() != 2)
 8001334:	4608      	mov	r0, r1
 8001336:	f7ff fea6 	bl	8001086 <_ZNK11Grow_sensor10get_activeEv>
 800133a:	2802      	cmp	r0, #2
 800133c:	d002      	beq.n	8001344 <_ZN21Grow_sensor_interface9save_dataERK11Grow_sensorRK17LoRa_contact_dataRmS6_+0x18>
		return true;
 800133e:	2001      	movs	r0, #1
	adr = (contact_data.get_my_adr().group << 16 | contact_data.get_my_adr().branch);
	//adr =
	channel = contact_data.get_channel();
	return false;
}
 8001340:	b002      	add	sp, #8
 8001342:	bd70      	pop	{r4, r5, r6, pc}
	adr = (contact_data.get_my_adr().group << 16 | contact_data.get_my_adr().branch);
 8001344:	4620      	mov	r0, r4
 8001346:	f000 fa42 	bl	80017ce <_ZNK17LoRa_contact_data10get_my_adrEv>
 800134a:	0406      	lsls	r6, r0, #16
 800134c:	4620      	mov	r0, r4
 800134e:	f000 fa3e 	bl	80017ce <_ZNK17LoRa_contact_data10get_my_adrEv>
 8001352:	ea46 4010 	orr.w	r0, r6, r0, lsr #16
 8001356:	6028      	str	r0, [r5, #0]
	channel = contact_data.get_channel();
 8001358:	4620      	mov	r0, r4
 800135a:	f000 fa4b 	bl	80017f4 <_ZNK17LoRa_contact_data11get_channelEv>
 800135e:	9b06      	ldr	r3, [sp, #24]
 8001360:	6018      	str	r0, [r3, #0]
	return false;
 8001362:	2000      	movs	r0, #0
 8001364:	e7ec      	b.n	8001340 <_ZN21Grow_sensor_interface9save_dataERK11Grow_sensorRK17LoRa_contact_dataRmS6_+0x14>
	...

08001368 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data>:

// --- Обмен с телефоном ---

// --- LoRa-соединение ---
void Grow_sensor_interface::send_registration_packet(const Grow_sensor &grow_sensor, LoRa_contact_data& contact_data) {
 8001368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800136c:	b08c      	sub	sp, #48	; 0x30
 800136e:	460e      	mov	r6, r1
 8001370:	4617      	mov	r7, r2
    LoRa_packet packet;
 8001372:	a803      	add	r0, sp, #12
 8001374:	f003 f91c 	bl	80045b0 <_ZN11LoRa_packetC1Ev>
    packet_system.set_dest_adr(packet, LORA_GLOBAL_ADDRESS);
 8001378:	4d31      	ldr	r5, [pc, #196]	; (8001440 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xd8>)
 800137a:	4629      	mov	r1, r5
 800137c:	a805      	add	r0, sp, #20
 800137e:	f004 fa7c 	bl	800587a <_ZN12LoRa_addressC1Em>
 8001382:	4c30      	ldr	r4, [pc, #192]	; (8001444 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xdc>)
 8001384:	9a05      	ldr	r2, [sp, #20]
 8001386:	a903      	add	r1, sp, #12
 8001388:	4620      	mov	r0, r4
 800138a:	f004 fb10 	bl	80059ae <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address>
    packet_system.set_sour_adr(packet, LORA_GLOBAL_ADDRESS);
 800138e:	4629      	mov	r1, r5
 8001390:	a806      	add	r0, sp, #24
 8001392:	f004 fa72 	bl	800587a <_ZN12LoRa_addressC1Em>
 8001396:	9a06      	ldr	r2, [sp, #24]
 8001398:	a903      	add	r1, sp, #12
 800139a:	4620      	mov	r0, r4
 800139c:	f004 fb3d 	bl	8005a1a <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address>
    packet_system.set_packet_type(packet, Packet_Type::SYSTEM);
 80013a0:	2203      	movs	r2, #3
 80013a2:	a903      	add	r1, sp, #12
 80013a4:	4620      	mov	r0, r4
 80013a6:	f004 fb5a 	bl	8005a5e <_ZN15Packet_analyzer15set_packet_typeER11LoRa_packet11Packet_Type>

    uint8_t com = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	f88d 300b 	strb.w	r3, [sp, #11]
    // uint8_t sensor_type = 0;
    uint8_t len = grow_sensor.get_count_component();
 80013b0:	4630      	mov	r0, r6
 80013b2:	f7ff fecf 	bl	8001154 <_ZNK11Grow_sensor19get_count_componentEv>
 80013b6:	f88d 000a 	strb.w	r0, [sp, #10]
 80013ba:	ac07      	add	r4, sp, #28
 80013bc:	4d22      	ldr	r5, [pc, #136]	; (8001448 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xe0>)
 80013be:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    uint8_t num_byte = 0;
    //uint8_t* data = new uint8_t[len + 6]; // ID, Type, Length
//    uint8_t data[AMT_COMPONENT + 2 + AMT_BYTES_SYSTEM_ID] = {0};

    for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
    	data[num_byte++] = grow_sensor.get_system_id()[i];
 80013c2:	4631      	mov	r1, r6
 80013c4:	a807      	add	r0, sp, #28
 80013c6:	f7ff fe4f 	bl	8001068 <_ZNK11Grow_sensor13get_system_idEv>
 80013ca:	f814 3b01 	ldrb.w	r3, [r4], #1
 80013ce:	f805 3b01 	strb.w	r3, [r5], #1
    for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
 80013d2:	45a0      	cmp	r8, r4
 80013d4:	d1f5      	bne.n	80013c2 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0x5a>
//    data[num_byte++] = (grow_sensor.get_system_id() >> 24) & 0xFF;
//    data[num_byte++] = (grow_sensor.get_system_id() >> 16) & 0xFF;
//    data[num_byte++] = (grow_sensor.get_system_id() >> 8) & 0xFF;
//    data[num_byte++] = grow_sensor.get_system_id() & 0xFF;

    data[num_byte++] = 0x01; // Type = sensors
 80013d6:	4a1c      	ldr	r2, [pc, #112]	; (8001448 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xe0>)
 80013d8:	2301      	movs	r3, #1
 80013da:	7313      	strb	r3, [r2, #12]

    data[num_byte++] = len; // Length = grow_sensor.get_count_component();
 80013dc:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80013e0:	7353      	strb	r3, [r2, #13]
    for(int i = 0; i < len; ++i)
 80013e2:	b173      	cbz	r3, 8001402 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0x9a>
 80013e4:	2400      	movs	r4, #0
    // {
        grow_sensor.get_type(i, data[num_byte++]);
 80013e6:	4615      	mov	r5, r2
 80013e8:	b2e1      	uxtb	r1, r4
 80013ea:	f101 020e 	add.w	r2, r1, #14
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	442a      	add	r2, r5
 80013f2:	4630      	mov	r0, r6
 80013f4:	f7ff fe62 	bl	80010bc <_ZNK11Grow_sensor8get_typeEhRh>
    for(int i = 0; i < len; ++i)
 80013f8:	3401      	adds	r4, #1
 80013fa:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80013fe:	42a3      	cmp	r3, r4
 8001400:	dcf2      	bgt.n	80013e8 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0x80>
    //     grow_sensor.get_type(i, sensor_type);
    //     data[num_byte++] = sensor_type;
    // }
    packet_system.set_packet_data(packet, &com, data, &len);
 8001402:	f10d 030a 	add.w	r3, sp, #10
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xe0>)
 800140a:	f10d 020b 	add.w	r2, sp, #11
 800140e:	a903      	add	r1, sp, #12
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xdc>)
 8001412:	f004 fda1 	bl	8005f58 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_>
    //delete[] data;
    contact_data.add_packet(std::move(packet));
 8001416:	a903      	add	r1, sp, #12
 8001418:	a80a      	add	r0, sp, #40	; 0x28
 800141a:	f003 f954 	bl	80046c6 <_ZN11LoRa_packetC1EOS_>
 800141e:	a90a      	add	r1, sp, #40	; 0x28
 8001420:	4638      	mov	r0, r7
 8001422:	f000 f9e9 	bl	80017f8 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet>
 8001426:	a80a      	add	r0, sp, #40	; 0x28
 8001428:	f003 f8cb 	bl	80045c2 <_ZN11LoRa_packetD1Ev>
    contact_data.broadcast_send();
 800142c:	2100      	movs	r1, #0
 800142e:	4638      	mov	r0, r7
 8001430:	f000 ffab 	bl	800238a <_ZN17LoRa_contact_data14broadcast_sendEb>
    LoRa_packet packet;
 8001434:	a803      	add	r0, sp, #12
 8001436:	f003 f8c4 	bl	80045c2 <_ZN11LoRa_packetD1Ev>
}
 800143a:	b00c      	add	sp, #48	; 0x30
 800143c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001440:	01ff7fff 	.word	0x01ff7fff
 8001444:	20002404 	.word	0x20002404
 8001448:	20000188 	.word	0x20000188

0800144c <_GLOBAL__sub_I_grow_sensor_interface>:
	        buf[save_size++] = (*(pchar++)) & 0xFF;
	        buf[save_size++] = (*(pchar++)) & 0xFF;
	        buf[save_size++] = (*(pchar++)) & 0xFF;
    }
    return save_size;
}
 800144c:	b538      	push	{r3, r4, r5, lr}
 800144e:	4c05      	ldr	r4, [pc, #20]	; (8001464 <_GLOBAL__sub_I_grow_sensor_interface+0x18>)
 8001450:	f104 0578 	add.w	r5, r4, #120	; 0x78
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  N  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
 8001454:	4620      	mov	r0, r4
 8001456:	f003 f8ab 	bl	80045b0 <_ZN11LoRa_packetC1Ev>
 800145a:	3408      	adds	r4, #8
 800145c:	42ac      	cmp	r4, r5
 800145e:	d1f9      	bne.n	8001454 <_GLOBAL__sub_I_grow_sensor_interface+0x8>
 8001460:	bd38      	pop	{r3, r4, r5, pc}
 8001462:	bf00      	nop
 8001464:	2000010c 	.word	0x2000010c

08001468 <_GLOBAL__sub_D_grow_sensor_interface>:
 8001468:	b538      	push	{r3, r4, r5, lr}
 800146a:	4c05      	ldr	r4, [pc, #20]	; (8001480 <_GLOBAL__sub_D_grow_sensor_interface+0x18>)
 800146c:	f1a4 0578 	sub.w	r5, r4, #120	; 0x78
 8001470:	3c08      	subs	r4, #8
 8001472:	4620      	mov	r0, r4
 8001474:	f003 f8a5 	bl	80045c2 <_ZN11LoRa_packetD1Ev>
 8001478:	42ac      	cmp	r4, r5
 800147a:	d1f9      	bne.n	8001470 <_GLOBAL__sub_D_grow_sensor_interface+0x8>
 800147c:	bd38      	pop	{r3, r4, r5, pc}
 800147e:	bf00      	nop
 8001480:	20000184 	.word	0x20000184

08001484 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data>:
uint8_t Grow_sensor_interface::build_data_packet(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data) {
 8001484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001488:	b08d      	sub	sp, #52	; 0x34
 800148a:	460c      	mov	r4, r1
 800148c:	4691      	mov	r9, r2
	if(grow_sensor.get_active() == 0)
 800148e:	4608      	mov	r0, r1
 8001490:	f7ff fdf9 	bl	8001086 <_ZNK11Grow_sensor10get_activeEv>
 8001494:	4605      	mov	r5, r0
 8001496:	b918      	cbnz	r0, 80014a0 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x1c>
}
 8001498:	4628      	mov	r0, r5
 800149a:	b00d      	add	sp, #52	; 0x34
 800149c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
																					STADY_CONACT_NUMBER = 1;
 80014a0:	4b45      	ldr	r3, [pc, #276]	; (80015b8 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x134>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]
    if(contact_data.get_signal_start_connect())
 80014a6:	4648      	mov	r0, r9
 80014a8:	f000 fa54 	bl	8001954 <_ZN17LoRa_contact_data24get_signal_start_connectEv>
 80014ac:	b108      	cbz	r0, 80014b2 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x2e>
        return 0;
 80014ae:	2500      	movs	r5, #0
 80014b0:	e7f2      	b.n	8001498 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x14>
																					STADY_CONACT_NUMBER = 2;
 80014b2:	4d41      	ldr	r5, [pc, #260]	; (80015b8 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x134>)
 80014b4:	2302      	movs	r3, #2
 80014b6:	702b      	strb	r3, [r5, #0]
    contact_data.end_contact();
 80014b8:	4648      	mov	r0, r9
 80014ba:	f000 fedf 	bl	800227c <_ZN17LoRa_contact_data11end_contactEv>
    contact_data.clear_send_packet();
 80014be:	4648      	mov	r0, r9
 80014c0:	f000 f9d4 	bl	800186c <_ZN17LoRa_contact_data17clear_send_packetEv>
																					STADY_CONACT_NUMBER = 3;
 80014c4:	2303      	movs	r3, #3
 80014c6:	702b      	strb	r3, [r5, #0]
    LoRa_packet packet;
 80014c8:	a805      	add	r0, sp, #20
 80014ca:	f003 f871 	bl	80045b0 <_ZN11LoRa_packetC1Ev>
    uint8_t amt = grow_sensor.get_count_component();
 80014ce:	4620      	mov	r0, r4
 80014d0:	f7ff fe40 	bl	8001154 <_ZNK11Grow_sensor19get_count_componentEv>
 80014d4:	4605      	mov	r5, r0
    packet_sensor.set_setting(grow_sensor.get_setting());
 80014d6:	4620      	mov	r0, r4
 80014d8:	f7ff fded 	bl	80010b6 <_ZNK11Grow_sensor11get_settingEv>
 80014dc:	4601      	mov	r1, r0
 80014de:	4837      	ldr	r0, [pc, #220]	; (80015bc <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x138>)
 80014e0:	f004 f9a8 	bl	8005834 <_ZN13Packet_Sensor11set_settingEh>
    for(i = 0; i < amt; ++i) {
 80014e4:	46ab      	mov	fp, r5
 80014e6:	2d00      	cmp	r5, #0
 80014e8:	dd63      	ble.n	80015b2 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x12e>
 80014ea:	2500      	movs	r5, #0
																					STADY_CONACT_NUMBER = 5;
 80014ec:	4f32      	ldr	r7, [pc, #200]	; (80015b8 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x134>)
 80014ee:	f04f 0a05 	mov.w	sl, #5
        packet_sensor.set_dest_adr(packet, grow_sensor.get_address_control_module()); // адреса задаются при передаче в LoRa_contact_data LORA_GLOBAL_ADDRESS
 80014f2:	4e32      	ldr	r6, [pc, #200]	; (80015bc <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x138>)
																					STADY_CONACT_NUMBER = 5;
 80014f4:	f887 a000 	strb.w	sl, [r7]
        packet_sensor.set_dest_adr(packet, grow_sensor.get_address_control_module()); // адреса задаются при передаче в LoRa_contact_data LORA_GLOBAL_ADDRESS
 80014f8:	4620      	mov	r0, r4
 80014fa:	f7ff fdd1 	bl	80010a0 <_ZNK11Grow_sensor26get_address_control_moduleEv>
 80014fe:	4602      	mov	r2, r0
 8001500:	a905      	add	r1, sp, #20
 8001502:	4630      	mov	r0, r6
 8001504:	f004 fa53 	bl	80059ae <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address>
        packet_sensor.set_sour_adr(packet, contact_data.get_my_adr()); // адреса задаются при передаче в LoRa_contact_data LORA_GLOBAL_ADDRESS
 8001508:	4648      	mov	r0, r9
 800150a:	f000 f960 	bl	80017ce <_ZNK17LoRa_contact_data10get_my_adrEv>
 800150e:	4602      	mov	r2, r0
 8001510:	a905      	add	r1, sp, #20
 8001512:	4630      	mov	r0, r6
 8001514:	f004 fa81 	bl	8005a1a <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address>
																					STADY_CONACT_NUMBER = 6;
 8001518:	2306      	movs	r3, #6
 800151a:	703b      	strb	r3, [r7, #0]
        err = grow_sensor.get_type(i, param);
 800151c:	fa5f f885 	uxtb.w	r8, r5
 8001520:	f10d 0213 	add.w	r2, sp, #19
 8001524:	4641      	mov	r1, r8
 8001526:	4620      	mov	r0, r4
 8001528:	f7ff fdc8 	bl	80010bc <_ZNK11Grow_sensor8get_typeEhRh>
        if(err) break;
 800152c:	bb80      	cbnz	r0, 8001590 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x10c>
        err = grow_sensor.get_id(i, id);
 800152e:	f10d 0212 	add.w	r2, sp, #18
 8001532:	4641      	mov	r1, r8
 8001534:	4620      	mov	r0, r4
 8001536:	f7ff fdd3 	bl	80010e0 <_ZNK11Grow_sensor6get_idEhRh>
        if(err) break;
 800153a:	bb48      	cbnz	r0, 8001590 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x10c>
        err = grow_sensor.get_value(i, *reinterpret_cast<float*>(&value));
 800153c:	aa03      	add	r2, sp, #12
 800153e:	4641      	mov	r1, r8
 8001540:	4620      	mov	r0, r4
 8001542:	f7ff fdf5 	bl	8001130 <_ZN11Grow_sensor9get_valueEhRf>
        if(err) break;
 8001546:	bb18      	cbnz	r0, 8001590 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x10c>
        packet_sensor.set_packet_type(packet, Packet_Type::SENSOR);
 8001548:	2201      	movs	r2, #1
 800154a:	a905      	add	r1, sp, #20
 800154c:	4630      	mov	r0, r6
 800154e:	f004 fa86 	bl	8005a5e <_ZN15Packet_analyzer15set_packet_typeER11LoRa_packet11Packet_Type>
																					STADY_CONACT_NUMBER = 7;
 8001552:	2307      	movs	r3, #7
 8001554:	703b      	strb	r3, [r7, #0]
        err = packet_sensor.set_packet_data(packet, nullptr, &param, &id, &value);
 8001556:	ab03      	add	r3, sp, #12
 8001558:	9301      	str	r3, [sp, #4]
 800155a:	f10d 0312 	add.w	r3, sp, #18
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	f10d 0313 	add.w	r3, sp, #19
 8001564:	2200      	movs	r2, #0
 8001566:	a905      	add	r1, sp, #20
 8001568:	4630      	mov	r0, r6
 800156a:	f004 fc53 	bl	8005e14 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm>
        if(err) break;
 800156e:	b978      	cbnz	r0, 8001590 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x10c>
																					STADY_CONACT_NUMBER = 8;
 8001570:	2308      	movs	r3, #8
 8001572:	703b      	strb	r3, [r7, #0]
        contact_data.add_packet(std::move(packet));
 8001574:	a905      	add	r1, sp, #20
 8001576:	a809      	add	r0, sp, #36	; 0x24
 8001578:	f003 f8a5 	bl	80046c6 <_ZN11LoRa_packetC1EOS_>
 800157c:	a909      	add	r1, sp, #36	; 0x24
 800157e:	4648      	mov	r0, r9
 8001580:	f000 f93a 	bl	80017f8 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet>
 8001584:	a809      	add	r0, sp, #36	; 0x24
 8001586:	f003 f81c 	bl	80045c2 <_ZN11LoRa_packetD1Ev>
    for(i = 0; i < amt; ++i) {
 800158a:	3501      	adds	r5, #1
 800158c:	455d      	cmp	r5, fp
 800158e:	d1b1      	bne.n	80014f4 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x70>
																					STADY_CONACT_NUMBER = 9;
 8001590:	4e09      	ldr	r6, [pc, #36]	; (80015b8 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x134>)
 8001592:	2309      	movs	r3, #9
 8001594:	7033      	strb	r3, [r6, #0]
    contact_data.wait_recipient(grow_sensor.get_address_control_module());
 8001596:	4620      	mov	r0, r4
 8001598:	f7ff fd82 	bl	80010a0 <_ZNK11Grow_sensor26get_address_control_moduleEv>
 800159c:	4601      	mov	r1, r0
 800159e:	4648      	mov	r0, r9
 80015a0:	f000 fd9c 	bl	80020dc <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>
																					STADY_CONACT_NUMBER = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	7033      	strb	r3, [r6, #0]
    return i;
 80015a8:	b2ed      	uxtb	r5, r5
    LoRa_packet packet;
 80015aa:	a805      	add	r0, sp, #20
 80015ac:	f003 f809 	bl	80045c2 <_ZN11LoRa_packetD1Ev>
 80015b0:	e772      	b.n	8001498 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x14>
    for(i = 0; i < amt; ++i) {
 80015b2:	2500      	movs	r5, #0
 80015b4:	e7ec      	b.n	8001590 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x10c>
 80015b6:	bf00      	nop
 80015b8:	20002424 	.word	0x20002424
 80015bc:	200023e4 	.word	0x200023e4

080015c0 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data>:
bool Grow_sensor_interface::check_regist_packet(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data) {
 80015c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015c4:	b0a9      	sub	sp, #164	; 0xa4
 80015c6:	9003      	str	r0, [sp, #12]
 80015c8:	468a      	mov	sl, r1
 80015ca:	4691      	mov	r9, r2
    all_packets = contact_data.get_all_packet(all_packets_len);
 80015cc:	ae05      	add	r6, sp, #20
 80015ce:	4a45      	ldr	r2, [pc, #276]	; (80016e4 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x124>)
 80015d0:	4649      	mov	r1, r9
 80015d2:	4630      	mov	r0, r6
 80015d4:	f000 f95c 	bl	8001890 <_ZN17LoRa_contact_data14get_all_packetERh>
 80015d8:	4c43      	ldr	r4, [pc, #268]	; (80016e8 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x128>)
 80015da:	4637      	mov	r7, r6
 80015dc:	f104 0878 	add.w	r8, r4, #120	; 0x78
 80015e0:	4625      	mov	r5, r4
 80015e2:	4631      	mov	r1, r6
 80015e4:	4628      	mov	r0, r5
 80015e6:	f003 f85f 	bl	80046a8 <_ZN11LoRa_packetaSEOS_>
 80015ea:	3508      	adds	r5, #8
 80015ec:	3608      	adds	r6, #8
 80015ee:	4545      	cmp	r5, r8
 80015f0:	d1f7      	bne.n	80015e2 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x22>
 80015f2:	ad21      	add	r5, sp, #132	; 0x84
 80015f4:	3f08      	subs	r7, #8
 80015f6:	4628      	mov	r0, r5
 80015f8:	f002 ffe3 	bl	80045c2 <_ZN11LoRa_packetD1Ev>
 80015fc:	3d08      	subs	r5, #8
 80015fe:	42bd      	cmp	r5, r7
 8001600:	d1f9      	bne.n	80015f6 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x36>
    for(int i = 0; i < all_packets_len; ++i) {
 8001602:	4b38      	ldr	r3, [pc, #224]	; (80016e4 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x124>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d069      	beq.n	80016de <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x11e>
 800160a:	2500      	movs	r5, #0
        if(packet_analyzer.get_packet_type(all_packets[i]) == Packet_Type::SYSTEM) {
 800160c:	4e37      	ldr	r6, [pc, #220]	; (80016ec <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x12c>)
            err = packet_system.get_size_by_packet(all_packets[i], size);
 800160e:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80016f4 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x134>
            packet_system.get_packet_data(all_packets[i], &com, data, &len);
 8001612:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 80016f0 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x130>
 8001616:	e005      	b.n	8001624 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x64>
    for(int i = 0; i < all_packets_len; ++i) {
 8001618:	3501      	adds	r5, #1
 800161a:	3408      	adds	r4, #8
 800161c:	4b31      	ldr	r3, [pc, #196]	; (80016e4 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x124>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	42ab      	cmp	r3, r5
 8001622:	dd58      	ble.n	80016d6 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x116>
      { return const_cast<_Tp&>(__t[__n]); }
 8001624:	4627      	mov	r7, r4
        if(packet_analyzer.get_packet_type(all_packets[i]) == Packet_Type::SYSTEM) {
 8001626:	4621      	mov	r1, r4
 8001628:	4630      	mov	r0, r6
 800162a:	f004 f99d 	bl	8005968 <_ZN15Packet_analyzer15get_packet_typeERK11LoRa_packet>
 800162e:	2803      	cmp	r0, #3
 8001630:	d1f2      	bne.n	8001618 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x58>
            uint8_t size = 0;
 8001632:	aa28      	add	r2, sp, #160	; 0xa0
 8001634:	2300      	movs	r3, #0
 8001636:	f802 3d8f 	strb.w	r3, [r2, #-143]!
            err = packet_system.get_size_by_packet(all_packets[i], size);
 800163a:	4621      	mov	r1, r4
 800163c:	4640      	mov	r0, r8
 800163e:	f004 fd65 	bl	800610c <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh>
            if((err != 0) || (size != (3+AMT_BYTES_SYSTEM_ID)))
 8001642:	2800      	cmp	r0, #0
 8001644:	d1e8      	bne.n	8001618 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x58>
 8001646:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800164a:	2b0f      	cmp	r3, #15
 800164c:	d1e4      	bne.n	8001618 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x58>
            uint8_t com = 0x00;
 800164e:	2300      	movs	r3, #0
 8001650:	f88d 3012 	strb.w	r3, [sp, #18]
            uint8_t len = 0;
 8001654:	f88d 3013 	strb.w	r3, [sp, #19]
            packet_system.get_packet_data(all_packets[i], &com, data, &len);
 8001658:	f10d 0313 	add.w	r3, sp, #19
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	465b      	mov	r3, fp
 8001660:	f10d 0212 	add.w	r2, sp, #18
 8001664:	4621      	mov	r1, r4
 8001666:	4640      	mov	r0, r8
 8001668:	f004 fce6 	bl	8006038 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_>
            if(com != 0x01)
 800166c:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d1d1      	bne.n	8001618 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x58>
 8001674:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x130>)
 8001676:	aa05      	add	r2, sp, #20
 8001678:	f103 000c 	add.w	r0, r3, #12
            	sensor_id[i]= data[num_byte++];
 800167c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001680:	f802 1b01 	strb.w	r1, [r2], #1
            for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
 8001684:	4298      	cmp	r0, r3
 8001686:	d1f9      	bne.n	800167c <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xbc>
            if(sensor_id != grow_sensor.get_system_id())
 8001688:	4651      	mov	r1, sl
 800168a:	a823      	add	r0, sp, #140	; 0x8c
 800168c:	f7ff fcec 	bl	8001068 <_ZNK11Grow_sensor13get_system_idEv>
      template<typename _Tp>
        static bool
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
        {
	  if (const size_t __len = (__last1 - __first1))
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 8001690:	220c      	movs	r2, #12
 8001692:	a923      	add	r1, sp, #140	; 0x8c
 8001694:	a805      	add	r0, sp, #20
 8001696:	f00a fa5b 	bl	800bb50 <memcmp>
 800169a:	2800      	cmp	r0, #0
 800169c:	d1bc      	bne.n	8001618 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x58>
            grow_sensor.set_address_control_module(packet_system.get_sour_adr(all_packets[i]));
 800169e:	4639      	mov	r1, r7
 80016a0:	4814      	ldr	r0, [pc, #80]	; (80016f4 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x134>)
 80016a2:	f004 f94d 	bl	8005940 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>
 80016a6:	4601      	mov	r1, r0
 80016a8:	4650      	mov	r0, sl
 80016aa:	f7ff fcef 	bl	800108c <_ZN11Grow_sensor26set_address_control_moduleE12LoRa_address>
            contact_data.set_my_adr(LoRa_address(&data[num_byte]));
 80016ae:	2203      	movs	r2, #3
 80016b0:	4911      	ldr	r1, [pc, #68]	; (80016f8 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x138>)
 80016b2:	a827      	add	r0, sp, #156	; 0x9c
 80016b4:	f004 f8c6 	bl	8005844 <_ZN12LoRa_addressC1EPKhh>
 80016b8:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80016ba:	4648      	mov	r0, r9
 80016bc:	f000 f882 	bl	80017c4 <_ZN17LoRa_contact_data10set_my_adrE12LoRa_address>
            grow_sensor.set_active(2);
 80016c0:	2102      	movs	r1, #2
 80016c2:	4650      	mov	r0, sl
 80016c4:	f7ff fcda 	bl	800107c <_ZN11Grow_sensor10set_activeEh>
            build_data_packet(grow_sensor, contact_data);
 80016c8:	464a      	mov	r2, r9
 80016ca:	4651      	mov	r1, sl
 80016cc:	9803      	ldr	r0, [sp, #12]
 80016ce:	f7ff fed9 	bl	8001484 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data>
            return true;
 80016d2:	2001      	movs	r0, #1
 80016d4:	e000      	b.n	80016d8 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x118>
    return false;
 80016d6:	2000      	movs	r0, #0
}
 80016d8:	b029      	add	sp, #164	; 0xa4
 80016da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return false;
 80016de:	2000      	movs	r0, #0
 80016e0:	e7fa      	b.n	80016d8 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x118>
 80016e2:	bf00      	nop
 80016e4:	20000184 	.word	0x20000184
 80016e8:	2000010c 	.word	0x2000010c
 80016ec:	20002388 	.word	0x20002388
 80016f0:	20000188 	.word	0x20000188
 80016f4:	20002404 	.word	0x20002404
 80016f8:	20000194 	.word	0x20000194

080016fc <_ZN21Grow_sensor_componentC1E11Type_sensorh>:
#include "Grow_sensor_component.h"

Grow_sensor_component::Grow_sensor_component(Type_sensor type_sensor, uint8_t id) {
    type_sensor_ = type_sensor;
 80016fc:	7001      	strb	r1, [r0, #0]
    id_ = id;
 80016fe:	7042      	strb	r2, [r0, #1]
    value_ = 0;
 8001700:	2200      	movs	r2, #0
 8001702:	6042      	str	r2, [r0, #4]
}
 8001704:	4770      	bx	lr

08001706 <_ZNK21Grow_sensor_component8get_typeEv>:

enum Type_sensor Grow_sensor_component::get_type() const {
    return type_sensor_;
}
 8001706:	7800      	ldrb	r0, [r0, #0]
 8001708:	4770      	bx	lr

0800170a <_ZNK21Grow_sensor_component6get_idEv>:
uint8_t Grow_sensor_component::get_id() const {
    return id_;
}
 800170a:	7840      	ldrb	r0, [r0, #1]
 800170c:	4770      	bx	lr

0800170e <_ZN21Grow_sensor_component9get_valueEv>:
void Grow_sensor_component::set_id(uint8_t id) {
    id_ = id;
}
float Grow_sensor_component::get_value() {
    return value_;
}
 800170e:	6840      	ldr	r0, [r0, #4]
 8001710:	4770      	bx	lr

08001712 <_ZN21Grow_sensor_component9set_valueEf>:
bool Grow_sensor_component::set_value(float value) {
 8001712:	b538      	push	{r3, r4, r5, lr}
 8001714:	4604      	mov	r4, r0
 8001716:	460d      	mov	r5, r1
    if(value_ == value)
 8001718:	6840      	ldr	r0, [r0, #4]
 800171a:	f7ff fa19 	bl	8000b50 <__aeabi_fcmpeq>
 800171e:	b910      	cbnz	r0, 8001726 <_ZN21Grow_sensor_component9set_valueEf+0x14>
        return false;
    value_ = value;
 8001720:	6065      	str	r5, [r4, #4]
    return true;
 8001722:	2001      	movs	r0, #1
}
 8001724:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 8001726:	2000      	movs	r0, #0
 8001728:	e7fc      	b.n	8001724 <_ZN21Grow_sensor_component9set_valueEf+0x12>

0800172a <_ZN17LoRa_contact_dataD1Ev>:
LoRa_contact_data::LoRa_contact_data(LoRa_address adr) {
    // (-) ----- добавить стандартный конструктор
    clear();
    set_my_adr(adr);
}
LoRa_contact_data::~LoRa_contact_data() {
 800172a:	b570      	push	{r4, r5, r6, lr}
 800172c:	4605      	mov	r5, r0
    struct array
 800172e:	f110 06bc 	adds.w	r6, r0, #188	; 0xbc
 8001732:	d007      	beq.n	8001744 <_ZN17LoRa_contact_dataD1Ev+0x1a>
 8001734:	f500 749a 	add.w	r4, r0, #308	; 0x134
 8001738:	3c08      	subs	r4, #8
 800173a:	4620      	mov	r0, r4
 800173c:	f002 ff41 	bl	80045c2 <_ZN11LoRa_packetD1Ev>
 8001740:	42a6      	cmp	r6, r4
 8001742:	d1f9      	bne.n	8001738 <_ZN17LoRa_contact_dataD1Ev+0xe>
 8001744:	f115 0634 	adds.w	r6, r5, #52	; 0x34
 8001748:	d007      	beq.n	800175a <_ZN17LoRa_contact_dataD1Ev+0x30>
 800174a:	f105 04ac 	add.w	r4, r5, #172	; 0xac
 800174e:	3c08      	subs	r4, #8
 8001750:	4620      	mov	r0, r4
 8001752:	f002 ff36 	bl	80045c2 <_ZN11LoRa_packetD1Ev>
 8001756:	42a6      	cmp	r6, r4
 8001758:	d1f9      	bne.n	800174e <_ZN17LoRa_contact_dataD1Ev+0x24>
 800175a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800175e:	f002 ff30 	bl	80045c2 <_ZN11LoRa_packetD1Ev>
 8001762:	f105 0020 	add.w	r0, r5, #32
 8001766:	f002 ff2c 	bl	80045c2 <_ZN11LoRa_packetD1Ev>

}
 800176a:	4628      	mov	r0, r5
 800176c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001770 <_ZN17LoRa_contact_data16init_lora_moduleEP19__SPI_HandleTypeDef>:
        return false;
    }
    return true;
}
#else
bool LoRa_contact_data::init_lora_module(SPI_HandleTypeDef *spi) {
 8001770:	b510      	push	{r4, lr}
 8001772:	4604      	mov	r4, r0
	LoRa.init(spi);
 8001774:	4803      	ldr	r0, [pc, #12]	; (8001784 <_ZN17LoRa_contact_data16init_lora_moduleEP19__SPI_HandleTypeDef+0x14>)
 8001776:	f002 f82f 	bl	80037d8 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef>
	lora_init_ = true;
 800177a:	2301      	movs	r3, #1
 800177c:	7023      	strb	r3, [r4, #0]
	return false;
}
 800177e:	2000      	movs	r0, #0
 8001780:	bd10      	pop	{r4, pc}
 8001782:	bf00      	nop
 8001784:	20000370 	.word	0x20000370

08001788 <_ZN17LoRa_contact_data17begin_lora_moduleEmbhhmh>:
#endif
// Функция запуска работы системы и LoRa-модуля
uint8_t LoRa_contact_data::begin_lora_module(ulong frequency, bool paboost,
          uint8_t signal_power, uint8_t SF, ulong SBW, uint8_t sync_word) {
 8001788:	b530      	push	{r4, r5, lr}
 800178a:	b089      	sub	sp, #36	; 0x24
 800178c:	4605      	mov	r5, r0
#if defined ( ESP32 )
    uint8_t err = lora_.begin(frequency, paboost, signal_power, SF, SBW, sync_word);
#else
    uint8_t err = LoRa.begin(frequency, paboost, signal_power, SF, SBW, sync_word);
 800178e:	2000      	movs	r0, #0
 8001790:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
 8001794:	9406      	str	r4, [sp, #24]
 8001796:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8001798:	9404      	str	r4, [sp, #16]
 800179a:	9005      	str	r0, [sp, #20]
 800179c:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 80017a0:	9402      	str	r4, [sp, #8]
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	9200      	str	r2, [sp, #0]
 80017a6:	460a      	mov	r2, r1
 80017a8:	4603      	mov	r3, r0
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <_ZN17LoRa_contact_data17begin_lora_moduleEmbhhmh+0x38>)
 80017ac:	f002 fac8 	bl	8003d40 <_ZN10LoRa_class5beginEybhhyh>
#endif
    if(err == 0) {
 80017b0:	4603      	mov	r3, r0
 80017b2:	b908      	cbnz	r0, 80017b8 <_ZN17LoRa_contact_data17begin_lora_moduleEmbhhmh+0x30>
        lora_begin_ = true;
 80017b4:	2201      	movs	r2, #1
 80017b6:	706a      	strb	r2, [r5, #1]
    }
    return err;
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	b009      	add	sp, #36	; 0x24
 80017bc:	bd30      	pop	{r4, r5, pc}
 80017be:	bf00      	nop
 80017c0:	20000370 	.word	0x20000370

080017c4 <_ZN17LoRa_contact_data10set_my_adrE12LoRa_address>:

// Установка адреса этого модуля
bool LoRa_contact_data::set_my_adr(LoRa_address adr) {
 80017c4:	b082      	sub	sp, #8
    // (-) ----- проверка на ошибку
    my_adr_ = adr;
 80017c6:	6041      	str	r1, [r0, #4]
    return false;
}
 80017c8:	2000      	movs	r0, #0
 80017ca:	b002      	add	sp, #8
 80017cc:	4770      	bx	lr

080017ce <_ZNK17LoRa_contact_data10get_my_adrEv>:
// Получаение адреса этого модуля
LoRa_address LoRa_contact_data::get_my_adr() const {
 80017ce:	b082      	sub	sp, #8
    return my_adr_;
 80017d0:	6843      	ldr	r3, [r0, #4]
 80017d2:	2000      	movs	r0, #0
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	f362 000f 	bfi	r0, r2, #0, #16
 80017da:	0c1b      	lsrs	r3, r3, #16
 80017dc:	f363 401f 	bfi	r0, r3, #16, #16
}
 80017e0:	b002      	add	sp, #8
 80017e2:	4770      	bx	lr

080017e4 <_ZN17LoRa_contact_data11set_channelEt>:
}

// Установка канала связи
bool LoRa_contact_data::set_channel(uint16_t channel) {
    // (-) ----- скорректировать проверку канала и добавить настройку LoRa-модуля в зависимости от канала
    if((channel < 1) || (channel > 240))
 80017e4:	1e4b      	subs	r3, r1, #1
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	2bef      	cmp	r3, #239	; 0xef
        return true;
    channel_ = channel;
 80017ea:	bf9a      	itte	ls
 80017ec:	8041      	strhls	r1, [r0, #2]
    return false;
 80017ee:	2000      	movls	r0, #0
        return true;
 80017f0:	2001      	movhi	r0, #1
}
 80017f2:	4770      	bx	lr

080017f4 <_ZNK17LoRa_contact_data11get_channelEv>:
// Получаение канала связи
uint16_t LoRa_contact_data::get_channel() const {
    return channel_;
}
 80017f4:	8840      	ldrh	r0, [r0, #2]
 80017f6:	4770      	bx	lr

080017f8 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet>:
    }
    return packet.size();
}
#endif

bool LoRa_contact_data::add_packet(LoRa_packet packet) {
 80017f8:	b530      	push	{r4, r5, lr}
 80017fa:	b083      	sub	sp, #12
 80017fc:	4604      	mov	r4, r0
 80017fe:	460d      	mov	r5, r1

    // if((!_init) || (packet.len < MINIMAL_PACKET_SIZE) || (send_packet_.size() >= 250)) // проверка на инициализацию только в 1 сторону (?) -----

    if(init_) {
 8001800:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
 8001804:	b163      	cbz	r3, 8001820 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet+0x28>
        // if((packet_analyzer.get_dest_adr_group(packet) != connect_adr_.group) ||
        //    (packet_analyzer.get_dest_adr_branch(packet) != connect_adr_.branch))
        if(packet_analyzer.get_dest_adr(packet)!= connect_adr_)
 8001806:	4818      	ldr	r0, [pc, #96]	; (8001868 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet+0x70>)
 8001808:	f004 f876 	bl	80058f8 <_ZN15Packet_analyzer12get_dest_adrERK11LoRa_packet>
 800180c:	ab02      	add	r3, sp, #8
 800180e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8001812:	f104 0108 	add.w	r1, r4, #8
 8001816:	4618      	mov	r0, r3
 8001818:	f004 f842 	bl	80058a0 <_ZneRK12LoRa_addressS1_>
 800181c:	4603      	mov	r3, r0
 800181e:	bb00      	cbnz	r0, 8001862 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet+0x6a>
            return true;
    }
    packet_analyzer.set_packet_number(packet, num_end_packet_++);
 8001820:	8a22      	ldrh	r2, [r4, #16]
 8001822:	1c53      	adds	r3, r2, #1
 8001824:	8223      	strh	r3, [r4, #16]
 8001826:	4629      	mov	r1, r5
 8001828:	480f      	ldr	r0, [pc, #60]	; (8001868 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet+0x70>)
 800182a:	f004 f922 	bl	8005a72 <_ZN15Packet_analyzer17set_packet_numberER11LoRa_packett>
#if defined ( USE_VECTOR )
    send_packet_.push_back(std::move(packet));
    send_flag_.push_back(true);
    amt_packet_ = send_packet_.size();
#else
    if(send_packet_len == CONTACT_DATA_MAX_PACKET ||
 800182e:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
        send_flag_len == CONTACT_DATA_MAX_PACKET) {
        // (-) ----- (!) ----- ERRROR
    }
    send_packet_[send_packet_len++] = std::move(packet);
 8001832:	1c5a      	adds	r2, r3, #1
 8001834:	f884 2134 	strb.w	r2, [r4, #308]	; 0x134
      { return const_cast<_Tp&>(__t[__n]); }
 8001838:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800183c:	4629      	mov	r1, r5
 800183e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8001842:	f002 ff31 	bl	80046a8 <_ZN11LoRa_packetaSEOS_>
    send_flag_[send_flag_len++] = true;
 8001846:	f894 3136 	ldrb.w	r3, [r4, #310]	; 0x136
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	f884 2136 	strb.w	r2, [r4, #310]	; 0x136
 8001850:	4423      	add	r3, r4
 8001852:	2201      	movs	r2, #1
 8001854:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    amt_packet_ = send_packet_len;
 8001858:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 800185c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
#endif
    return false;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	b003      	add	sp, #12
 8001866:	bd30      	pop	{r4, r5, pc}
 8001868:	20002388 	.word	0x20002388

0800186c <_ZN17LoRa_contact_data17clear_send_packetEv>:
    if(send_packet_.size() == 0)
        return true;
    num_end_packet_ -= send_packet_.size();
    send_packet_.clear();
#else
    if(send_packet_len == 0)
 800186c:	f890 3134 	ldrb.w	r3, [r0, #308]	; 0x134
 8001870:	b14b      	cbz	r3, 8001886 <_ZN17LoRa_contact_data17clear_send_packetEv+0x1a>
        return true;
    num_end_packet_ -= send_packet_len;
 8001872:	8a02      	ldrh	r2, [r0, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	8203      	strh	r3, [r0, #16]
    send_packet_len = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	f880 3134 	strb.w	r3, [r0, #308]	; 0x134
    send_flag_len = 0;
 800187e:	f880 3136 	strb.w	r3, [r0, #310]	; 0x136
#endif
    return false;
 8001882:	4618      	mov	r0, r3
 8001884:	4770      	bx	lr
        return true;
 8001886:	2001      	movs	r0, #1
}
 8001888:	4770      	bx	lr

0800188a <_ZN17LoRa_contact_data17get_state_contactEv>:
}

// Получить текущую стадию контакта/трансляции
int8_t LoRa_contact_data::get_state_contact() {
    return (int8_t) current_stage_.stade_communication;
}
 800188a:	f990 0014 	ldrsb.w	r0, [r0, #20]
 800188e:	4770      	bx	lr

08001890 <_ZN17LoRa_contact_data14get_all_packetERh>:

// Изъять все пришедшие пакеты
#if defined ( USE_VECTOR )
std::vector<LoRa_packet> LoRa_contact_data::get_all_packet() {
#else
std::array<LoRa_packet, CONTACT_DATA_MAX_PACKET> LoRa_contact_data::get_all_packet(uint8_t& count) {
 8001890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001892:	4607      	mov	r7, r0
}


// Выдаёт сигнал, если текущая стадия SC_COMPLETE 
bool LoRa_contact_data::get_signal_complete() {
    return (current_stage_.stade_communication == SC_COMPLETE);
 8001894:	7d0b      	ldrb	r3, [r1, #20]
    if((!get_signal_complete()) && (current_stage_.stade_communication != SC_PACKET_ACCEPTED))
 8001896:	2b04      	cmp	r3, #4
 8001898:	d03f      	beq.n	800191a <_ZN17LoRa_contact_data14get_all_packetERh+0x8a>
 800189a:	2b07      	cmp	r3, #7
 800189c:	d102      	bne.n	80018a4 <_ZN17LoRa_contact_data14get_all_packetERh+0x14>
        current_stage_.stade_communication = SC_WAITING;
 800189e:	2306      	movs	r3, #6
 80018a0:	750b      	strb	r3, [r1, #20]
 80018a2:	e03c      	b.n	800191e <_ZN17LoRa_contact_data14get_all_packetERh+0x8e>
        return {};
 80018a4:	f002 fe84 	bl	80045b0 <_ZN11LoRa_packetC1Ev>
 80018a8:	f107 0008 	add.w	r0, r7, #8
 80018ac:	f002 fe80 	bl	80045b0 <_ZN11LoRa_packetC1Ev>
 80018b0:	f107 0010 	add.w	r0, r7, #16
 80018b4:	f002 fe7c 	bl	80045b0 <_ZN11LoRa_packetC1Ev>
 80018b8:	f107 0018 	add.w	r0, r7, #24
 80018bc:	f002 fe78 	bl	80045b0 <_ZN11LoRa_packetC1Ev>
 80018c0:	f107 0020 	add.w	r0, r7, #32
 80018c4:	f002 fe74 	bl	80045b0 <_ZN11LoRa_packetC1Ev>
 80018c8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80018cc:	f002 fe70 	bl	80045b0 <_ZN11LoRa_packetC1Ev>
 80018d0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80018d4:	f002 fe6c 	bl	80045b0 <_ZN11LoRa_packetC1Ev>
 80018d8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80018dc:	f002 fe68 	bl	80045b0 <_ZN11LoRa_packetC1Ev>
 80018e0:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80018e4:	f002 fe64 	bl	80045b0 <_ZN11LoRa_packetC1Ev>
 80018e8:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80018ec:	f002 fe60 	bl	80045b0 <_ZN11LoRa_packetC1Ev>
 80018f0:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80018f4:	f002 fe5c 	bl	80045b0 <_ZN11LoRa_packetC1Ev>
 80018f8:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80018fc:	f002 fe58 	bl	80045b0 <_ZN11LoRa_packetC1Ev>
 8001900:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001904:	f002 fe54 	bl	80045b0 <_ZN11LoRa_packetC1Ev>
 8001908:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800190c:	f002 fe50 	bl	80045b0 <_ZN11LoRa_packetC1Ev>
 8001910:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001914:	f002 fe4c 	bl	80045b0 <_ZN11LoRa_packetC1Ev>
 8001918:	e014      	b.n	8001944 <_ZN17LoRa_contact_data14get_all_packetERh+0xb4>
        current_stage_.stade_communication = SC_DOWNTIME;
 800191a:	2300      	movs	r3, #0
 800191c:	750b      	strb	r3, [r1, #20]
    count = reciev_packet_len;
 800191e:	f891 3135 	ldrb.w	r3, [r1, #309]	; 0x135
 8001922:	7013      	strb	r3, [r2, #0]
    reciev_packet_len = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	f881 3135 	strb.w	r3, [r1, #309]	; 0x135
 800192a:	463c      	mov	r4, r7
    struct array
 800192c:	f101 05bc 	add.w	r5, r1, #188	; 0xbc
 8001930:	f107 0678 	add.w	r6, r7, #120	; 0x78
 8001934:	4629      	mov	r1, r5
 8001936:	4620      	mov	r0, r4
 8001938:	f002 fec5 	bl	80046c6 <_ZN11LoRa_packetC1EOS_>
 800193c:	3408      	adds	r4, #8
 800193e:	3508      	adds	r5, #8
 8001940:	42b4      	cmp	r4, r6
 8001942:	d1f7      	bne.n	8001934 <_ZN17LoRa_contact_data14get_all_packetERh+0xa4>
}
 8001944:	4638      	mov	r0, r7
 8001946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001948 <_ZN17LoRa_contact_data19get_signal_completeEv>:
    return (current_stage_.stade_communication == SC_COMPLETE);
 8001948:	7d00      	ldrb	r0, [r0, #20]
}
 800194a:	2804      	cmp	r0, #4
 800194c:	bf14      	ite	ne
 800194e:	2000      	movne	r0, #0
 8001950:	2001      	moveq	r0, #1
 8001952:	4770      	bx	lr

08001954 <_ZN17LoRa_contact_data24get_signal_start_connectEv>:

bool LoRa_contact_data::get_signal_start_connect() {
    return start_connect_;
}
 8001954:	f890 0137 	ldrb.w	r0, [r0, #311]	; 0x137
 8001958:	4770      	bx	lr

0800195a <_ZN17LoRa_contact_data5clearEv>:

//   ----- ----- ----- ----- ----- ----- -----
// ----- ----- -----  Private  ----- ----- -----
//   ----- ----- ----- ----- ----- ----- -----

void LoRa_contact_data::clear() {
 800195a:	4603      	mov	r3, r0
#if defined ( USE_VECTOR )
    send_packet_.clear();
    send_flag_.clear();
    reciev_packet_.clear();
#else
    send_packet_len = 0;
 800195c:	2200      	movs	r2, #0
 800195e:	f880 2134 	strb.w	r2, [r0, #308]	; 0x134
    send_flag_len = 0;
 8001962:	f880 2136 	strb.w	r2, [r0, #310]	; 0x136
    reciev_packet_len = 0;
 8001966:	f880 2135 	strb.w	r2, [r0, #309]	; 0x135
#endif
    current_stage_.type_communication = TC_INITIATOR;
 800196a:	74c2      	strb	r2, [r0, #19]
    current_stage_.stade_communication = SC_DOWNTIME;
 800196c:	7502      	strb	r2, [r0, #20]
    current_stage_.connection = C_EXPECTATION;
 800196e:	7542      	strb	r2, [r0, #21]
    current_stage_.exchange = E_BOARDCAST;
 8001970:	7582      	strb	r2, [r0, #22]
    current_stage_.disconnect = D_WAITING_CONNECTION_BREAK;
 8001972:	75c2      	strb	r2, [r0, #23]
    past_stage_ = current_stage_;
 8001974:	f100 0218 	add.w	r2, r0, #24
 8001978:	f8d0 0013 	ldr.w	r0, [r0, #19]
 800197c:	6198      	str	r0, [r3, #24]
 800197e:	2300      	movs	r3, #0
 8001980:	7113      	strb	r3, [r2, #4]
}
 8001982:	4770      	bx	lr

08001984 <_ZN17LoRa_contact_dataC1Ev>:
LoRa_contact_data::LoRa_contact_data() {
 8001984:	b570      	push	{r4, r5, r6, lr}
 8001986:	4605      	mov	r5, r0
 8001988:	2400      	movs	r4, #0
 800198a:	7004      	strb	r4, [r0, #0]
 800198c:	7044      	strb	r4, [r0, #1]
 800198e:	8044      	strh	r4, [r0, #2]
 8001990:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001994:	8083      	strh	r3, [r0, #4]
 8001996:	80c3      	strh	r3, [r0, #6]
 8001998:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800199c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019a0:	3008      	adds	r0, #8
 80019a2:	f003 ff67 	bl	8005874 <_ZN12LoRa_addressC1Ett>
 80019a6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80019aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019ae:	f105 000c 	add.w	r0, r5, #12
 80019b2:	f003 ff5f 	bl	8005874 <_ZN12LoRa_addressC1Ett>
 80019b6:	822c      	strh	r4, [r5, #16]
 80019b8:	776c      	strb	r4, [r5, #29]
 80019ba:	f105 0020 	add.w	r0, r5, #32
 80019be:	f002 fdf7 	bl	80045b0 <_ZN11LoRa_packetC1Ev>
 80019c2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80019c6:	f002 fdf3 	bl	80045b0 <_ZN11LoRa_packetC1Ev>
 80019ca:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
 80019ce:	f885 4031 	strb.w	r4, [r5, #49]	; 0x31
 80019d2:	f105 0434 	add.w	r4, r5, #52	; 0x34
 80019d6:	f105 06ac 	add.w	r6, r5, #172	; 0xac
 80019da:	4620      	mov	r0, r4
 80019dc:	f002 fde8 	bl	80045b0 <_ZN11LoRa_packetC1Ev>
 80019e0:	3408      	adds	r4, #8
 80019e2:	42b4      	cmp	r4, r6
 80019e4:	d1f9      	bne.n	80019da <_ZN17LoRa_contact_dataC1Ev+0x56>
 80019e6:	f105 04bc 	add.w	r4, r5, #188	; 0xbc
 80019ea:	f505 769a 	add.w	r6, r5, #308	; 0x134
 80019ee:	4620      	mov	r0, r4
 80019f0:	f002 fdde 	bl	80045b0 <_ZN11LoRa_packetC1Ev>
 80019f4:	3408      	adds	r4, #8
 80019f6:	42a6      	cmp	r6, r4
 80019f8:	d1f9      	bne.n	80019ee <_ZN17LoRa_contact_dataC1Ev+0x6a>
 80019fa:	2300      	movs	r3, #0
 80019fc:	f885 3134 	strb.w	r3, [r5, #308]	; 0x134
 8001a00:	f885 3135 	strb.w	r3, [r5, #309]	; 0x135
 8001a04:	f885 3136 	strb.w	r3, [r5, #310]	; 0x136
 8001a08:	f885 3137 	strb.w	r3, [r5, #311]	; 0x137
 8001a0c:	f885 3138 	strb.w	r3, [r5, #312]	; 0x138
 8001a10:	f885 3139 	strb.w	r3, [r5, #313]	; 0x139
 8001a14:	f885 313a 	strb.w	r3, [r5, #314]	; 0x13a
    clear();
 8001a18:	4628      	mov	r0, r5
 8001a1a:	f7ff ff9e 	bl	800195a <_ZN17LoRa_contact_data5clearEv>
    time_constraints_.I_connect  = 1500;    // Ответа на запрос об установке соединения
 8001a1e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001a22:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
    time_constraints_.I_wait_connect = -1;  // Отложенного соединения
 8001a26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a2a:	f8c5 2148 	str.w	r2, [r5, #328]	; 0x148
    time_constraints_.I_amt_pack = 1500;    // Ответа с количеством принятых пакетов
 8001a2e:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
    time_constraints_.I_num_pack = 1000;    // Ответа с номерами принятых пакетов
 8001a32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a36:	f8c5 2150 	str.w	r2, [r5, #336]	; 0x150
    time_constraints_.R_connect    = 2500; // Запроса после сброса ожидания (отложенного соединения)
 8001a3a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001a3e:	f8c5 2154 	str.w	r2, [r5, #340]	; 0x154
    time_constraints_.R_data_pack  = 3500; // Пакетов данных (после отправляется пакет с количеством пришедших пакетов)
 8001a42:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001a46:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
    time_constraints_.R_correct_pack = 3500;// Результатов подтверждения
 8001a4a:	f8c5 215c 	str.w	r2, [r5, #348]	; 0x15c
    time_constraints_.R_disconnect = 1500;  // Разрыва соединения
 8001a4e:	f8c5 3160 	str.w	r3, [r5, #352]	; 0x160
    packet_constraints_.I_connect  = 10;     // Запрос на установку соединения
 8001a52:	230a      	movs	r3, #10
 8001a54:	f885 3165 	strb.w	r3, [r5, #357]	; 0x165
    packet_constraints_.I_amt_pack = 10;     // Запрос о количестве принятых пакетов
 8001a58:	f885 3166 	strb.w	r3, [r5, #358]	; 0x166
    packet_constraints_.I_num_pack = 15;     // Запрос номеров принятых пакетов
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	f885 2167 	strb.w	r2, [r5, #359]	; 0x167
    packet_constraints_.R_wait_connect = 10; // Сбросов ожидания (отложенного соединения)
 8001a62:	f885 3168 	strb.w	r3, [r5, #360]	; 0x168
    packet_constraints_.R_correct_pack = 10; // Ответов с количеством принятых пакетов
 8001a66:	f885 3169 	strb.w	r3, [r5, #361]	; 0x169
}
 8001a6a:	4628      	mov	r0, r5
 8001a6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001a70 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>:

// --- функции создания пакетов ---


// создание основы пакета
void LoRa_contact_data::create_packet(uint8_t size, Packet_Type type_packet) {
 8001a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a72:	4605      	mov	r5, r0
 8001a74:	4617      	mov	r7, r2
    // last_send_packet_.creat_packet(size, type_packet);
    // last_send_packet_.packet->set_dest_adr(connect_adr_);
    // last_send_packet_.packet->set_sour_adr(my_adr_);
    // last_send_packet_.packet->set_packet_type(type_packet);
    // last_send_packet_.packet->set_packet_number(num_end_packet_++);
    last_send_packet_.clear_packet();
 8001a76:	f100 0428 	add.w	r4, r0, #40	; 0x28
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	f002 fdd5 	bl	800462a <_ZN11LoRa_packet12clear_packetEv>
    packet_analyzer.set_dest_adr(last_send_packet_, connect_adr_);
 8001a80:	4e0b      	ldr	r6, [pc, #44]	; (8001ab0 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type+0x40>)
 8001a82:	68aa      	ldr	r2, [r5, #8]
 8001a84:	4621      	mov	r1, r4
 8001a86:	4630      	mov	r0, r6
 8001a88:	f003 ff91 	bl	80059ae <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address>
    packet_analyzer.set_sour_adr(last_send_packet_, my_adr_);
 8001a8c:	686a      	ldr	r2, [r5, #4]
 8001a8e:	4621      	mov	r1, r4
 8001a90:	4630      	mov	r0, r6
 8001a92:	f003 ffc2 	bl	8005a1a <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address>
    packet_analyzer.set_packet_type(last_send_packet_, type_packet);
 8001a96:	463a      	mov	r2, r7
 8001a98:	4621      	mov	r1, r4
 8001a9a:	4630      	mov	r0, r6
 8001a9c:	f003 ffdf 	bl	8005a5e <_ZN15Packet_analyzer15set_packet_typeER11LoRa_packet11Packet_Type>
    packet_analyzer.set_packet_number(last_send_packet_, (num_end_packet_++));
 8001aa0:	8a2a      	ldrh	r2, [r5, #16]
 8001aa2:	1c53      	adds	r3, r2, #1
 8001aa4:	822b      	strh	r3, [r5, #16]
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	4630      	mov	r0, r6
 8001aaa:	f003 ffe2 	bl	8005a72 <_ZN15Packet_analyzer17set_packet_numberER11LoRa_packett>
}
 8001aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ab0:	20002388 	.word	0x20002388

08001ab4 <_ZN17LoRa_contact_data21create_connect_packetEhb>:

// создание пакета установки соединения (num = count_pack) или ответа на
//   запрос соединения (3 реакции +, +num и -wait) (и при замене инициативы)
bool LoRa_contact_data::create_connect_packet(uint8_t amt_packet, bool swap_type) {
 8001ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	4605      	mov	r5, r0
 8001aba:	460e      	mov	r6, r1
 8001abc:	4614      	mov	r4, r2
    bool err = false;
    uint8_t size = 11;
    uint8_t com = 0x01;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t len;
    uint8_t data[2] = {0, 0};
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f88d 300c 	strb.w	r3, [sp, #12]
 8001aca:	f88d 300d 	strb.w	r3, [sp, #13]
    // switch (current_stage_.type_communication) {
    switch ((use_past_stage)?(past_stage_.type_communication):(current_stage_.type_communication)) {
 8001ace:	7f43      	ldrb	r3, [r0, #29]
 8001ad0:	b12b      	cbz	r3, 8001ade <_ZN17LoRa_contact_data21create_connect_packetEhb+0x2a>
 8001ad2:	7e03      	ldrb	r3, [r0, #24]
 8001ad4:	b12b      	cbz	r3, 8001ae2 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x2e>
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d01e      	beq.n	8001b18 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x64>
            packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
        }
        break;
    }
    default:
        err = true;
 8001ada:	2001      	movs	r0, #1
 8001adc:	e01a      	b.n	8001b14 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x60>
    switch ((use_past_stage)?(past_stage_.type_communication):(current_stage_.type_communication)) {
 8001ade:	7cc3      	ldrb	r3, [r0, #19]
 8001ae0:	e7f8      	b.n	8001ad4 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x20>
        com = 0x00;
 8001ae2:	2400      	movs	r4, #0
 8001ae4:	f88d 400f 	strb.w	r4, [sp, #15]
        len = 0;
 8001ae8:	f88d 400e 	strb.w	r4, [sp, #14]
        data[0] = amt_packet;
 8001aec:	af04      	add	r7, sp, #16
 8001aee:	f807 6d04 	strb.w	r6, [r7, #-4]!
        create_packet(size, Packet_Type::CONNECTION);
 8001af2:	4622      	mov	r2, r4
 8001af4:	210b      	movs	r1, #11
 8001af6:	4628      	mov	r0, r5
 8001af8:	f7ff ffba 	bl	8001a70 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001afc:	f10d 030e 	add.w	r3, sp, #14
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	463b      	mov	r3, r7
 8001b04:	f10d 020f 	add.w	r2, sp, #15
 8001b08:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8001b0c:	4830      	ldr	r0, [pc, #192]	; (8001bd0 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x11c>)
 8001b0e:	f004 f891 	bl	8005c34 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    bool err = false;
 8001b12:	4620      	mov	r0, r4
        break;
    }
    return err;
}
 8001b14:	b005      	add	sp, #20
 8001b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
        connect_adr_ = packet_analyzer.get_sour_adr(last_receive_packet_);
 8001b18:	f105 0120 	add.w	r1, r5, #32
 8001b1c:	482d      	ldr	r0, [pc, #180]	; (8001bd4 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x120>)
 8001b1e:	f003 ff0f 	bl	8005940 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>
 8001b22:	60a8      	str	r0, [r5, #8]
        if(amt_packet != 255) {
 8001b24:	2eff      	cmp	r6, #255	; 0xff
 8001b26:	d036      	beq.n	8001b96 <_ZN17LoRa_contact_data21create_connect_packetEhb+0xe2>
            if(!swap_type) {
 8001b28:	b9c4      	cbnz	r4, 8001b5c <_ZN17LoRa_contact_data21create_connect_packetEhb+0xa8>
                com = 0x01;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	f88d 300f 	strb.w	r3, [sp, #15]
                data[1] = 0;
 8001b30:	2200      	movs	r2, #0
 8001b32:	f88d 200d 	strb.w	r2, [sp, #13]
                len = 1;
 8001b36:	f88d 300e 	strb.w	r3, [sp, #14]
                create_packet(size, Packet_Type::CONNECTION);
 8001b3a:	210b      	movs	r1, #11
 8001b3c:	4628      	mov	r0, r5
 8001b3e:	f7ff ff97 	bl	8001a70 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
                packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001b42:	f10d 030e 	add.w	r3, sp, #14
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	ab03      	add	r3, sp, #12
 8001b4a:	f10d 020f 	add.w	r2, sp, #15
 8001b4e:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8001b52:	481f      	ldr	r0, [pc, #124]	; (8001bd0 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x11c>)
 8001b54:	f004 f86e 	bl	8005c34 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    bool err = false;
 8001b58:	4620      	mov	r0, r4
 8001b5a:	e7db      	b.n	8001b14 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x60>
                com = 0x01;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	f88d 300f 	strb.w	r3, [sp, #15]
                data[0] = 0;
 8001b62:	2400      	movs	r4, #0
 8001b64:	f88d 400c 	strb.w	r4, [sp, #12]
                data[1] = amt_packet;
 8001b68:	f88d 600d 	strb.w	r6, [sp, #13]
                len = 2;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	f88d 300e 	strb.w	r3, [sp, #14]
                create_packet(size, Packet_Type::CONNECTION);
 8001b72:	4622      	mov	r2, r4
 8001b74:	210c      	movs	r1, #12
 8001b76:	4628      	mov	r0, r5
 8001b78:	f7ff ff7a 	bl	8001a70 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
                packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001b7c:	f10d 030e 	add.w	r3, sp, #14
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	ab03      	add	r3, sp, #12
 8001b84:	f10d 020f 	add.w	r2, sp, #15
 8001b88:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8001b8c:	4810      	ldr	r0, [pc, #64]	; (8001bd0 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x11c>)
 8001b8e:	f004 f851 	bl	8005c34 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    bool err = false;
 8001b92:	4620      	mov	r0, r4
 8001b94:	e7be      	b.n	8001b14 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x60>
            com = 0x01;
 8001b96:	2301      	movs	r3, #1
 8001b98:	f88d 300f 	strb.w	r3, [sp, #15]
            len = 0;
 8001b9c:	2600      	movs	r6, #0
 8001b9e:	f88d 600e 	strb.w	r6, [sp, #14]
            data[0] = 1;
 8001ba2:	af04      	add	r7, sp, #16
 8001ba4:	f807 3d04 	strb.w	r3, [r7, #-4]!
            size = 11 + (uint8_t)swap_type;
 8001ba8:	f104 010b 	add.w	r1, r4, #11
            create_packet(size, Packet_Type::CONNECTION);
 8001bac:	4632      	mov	r2, r6
 8001bae:	b2c9      	uxtb	r1, r1
 8001bb0:	4628      	mov	r0, r5
 8001bb2:	f7ff ff5d 	bl	8001a70 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
            packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001bb6:	f10d 030e 	add.w	r3, sp, #14
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	463b      	mov	r3, r7
 8001bbe:	f10d 020f 	add.w	r2, sp, #15
 8001bc2:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8001bc6:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x11c>)
 8001bc8:	f004 f834 	bl	8005c34 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    bool err = false;
 8001bcc:	4630      	mov	r0, r6
 8001bce:	e7a1      	b.n	8001b14 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x60>
 8001bd0:	200023a4 	.word	0x200023a4
 8001bd4:	20002388 	.word	0x20002388

08001bd8 <_ZN17LoRa_contact_data18create_data_packetEv>:


// создание пакета на основе номера из списка
bool LoRa_contact_data::create_data_packet() {
    bool err = true;
    switch (current_stage_.type_communication) {
 8001bd8:	7cc3      	ldrb	r3, [r0, #19]
 8001bda:	b11b      	cbz	r3, 8001be4 <_ZN17LoRa_contact_data18create_data_packetEv+0xc>
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d001      	beq.n	8001be4 <_ZN17LoRa_contact_data18create_data_packetEv+0xc>
    bool err = true;
 8001be0:	2001      	movs	r0, #1
        break;
    }
    default: break;
    }
    return err;
}
 8001be2:	4770      	bx	lr
bool LoRa_contact_data::create_data_packet() {
 8001be4:	b570      	push	{r4, r5, r6, lr}
 8001be6:	4605      	mov	r5, r0
        last_send_packet_.clear_packet();
 8001be8:	f100 0628 	add.w	r6, r0, #40	; 0x28
 8001bec:	4630      	mov	r0, r6
 8001bee:	f002 fd1c 	bl	800462a <_ZN11LoRa_packet12clear_packetEv>
        for(unsigned int i = 0; i < send_packet_len; ++i)
 8001bf2:	f895 1134 	ldrb.w	r1, [r5, #308]	; 0x134
 8001bf6:	b1e1      	cbz	r1, 8001c32 <_ZN17LoRa_contact_data18create_data_packetEv+0x5a>
            if(send_flag_[i]) {
 8001bf8:	f895 30ac 	ldrb.w	r3, [r5, #172]	; 0xac
 8001bfc:	b9ab      	cbnz	r3, 8001c2a <_ZN17LoRa_contact_data18create_data_packetEv+0x52>
 8001bfe:	f105 03ac 	add.w	r3, r5, #172	; 0xac
        for(unsigned int i = 0; i < send_packet_len; ++i)
 8001c02:	2400      	movs	r4, #0
 8001c04:	3401      	adds	r4, #1
 8001c06:	428c      	cmp	r4, r1
 8001c08:	d011      	beq.n	8001c2e <_ZN17LoRa_contact_data18create_data_packetEv+0x56>
            if(send_flag_[i]) {
 8001c0a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8001c0e:	2a00      	cmp	r2, #0
 8001c10:	d0f8      	beq.n	8001c04 <_ZN17LoRa_contact_data18create_data_packetEv+0x2c>
      { return const_cast<_Tp&>(__t[__n]); }
 8001c12:	f105 0134 	add.w	r1, r5, #52	; 0x34
                last_send_packet_ = send_packet_[i];
 8001c16:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8001c1a:	4630      	mov	r0, r6
 8001c1c:	f002 fd22 	bl	8004664 <_ZN11LoRa_packetaSERKS_>
                send_flag_[i] = false;
 8001c20:	442c      	add	r4, r5
 8001c22:	2000      	movs	r0, #0
 8001c24:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
}
 8001c28:	bd70      	pop	{r4, r5, r6, pc}
        for(unsigned int i = 0; i < send_packet_len; ++i)
 8001c2a:	2400      	movs	r4, #0
 8001c2c:	e7f1      	b.n	8001c12 <_ZN17LoRa_contact_data18create_data_packetEv+0x3a>
    bool err = true;
 8001c2e:	2001      	movs	r0, #1
 8001c30:	e7fa      	b.n	8001c28 <_ZN17LoRa_contact_data18create_data_packetEv+0x50>
 8001c32:	2001      	movs	r0, #1
 8001c34:	e7f8      	b.n	8001c28 <_ZN17LoRa_contact_data18create_data_packetEv+0x50>
	...

08001c38 <_ZN17LoRa_contact_data17create_amt_packetEv>:

// создание пакета количества пакетов
bool LoRa_contact_data::create_amt_packet() {
 8001c38:	b530      	push	{r4, r5, lr}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	4604      	mov	r4, r0
    bool err = false;
    switch (current_stage_.type_communication) {
 8001c3e:	7cc3      	ldrb	r3, [r0, #19]
 8001c40:	b11b      	cbz	r3, 8001c4a <_ZN17LoRa_contact_data17create_amt_packetEv+0x12>
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d019      	beq.n	8001c7a <_ZN17LoRa_contact_data17create_amt_packetEv+0x42>
        // static_cast<Packet_Connection*>(last_send_packet_.packet)->set_packet_data(&com, data, nullptr);
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
        break;
    }
    default:
        err = true;
 8001c46:	2001      	movs	r0, #1
 8001c48:	e015      	b.n	8001c76 <_ZN17LoRa_contact_data17create_amt_packetEv+0x3e>
        uint8_t com = 0x03;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	f88d 300e 	strb.w	r3, [sp, #14]
        uint8_t len = 0;
 8001c50:	2500      	movs	r5, #0
 8001c52:	f88d 500f 	strb.w	r5, [sp, #15]
        create_packet(size, Packet_Type::CONNECTION);
 8001c56:	462a      	mov	r2, r5
 8001c58:	210a      	movs	r1, #10
 8001c5a:	f7ff ff09 	bl	8001a70 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, nullptr, &len);
 8001c5e:	f10d 030f 	add.w	r3, sp, #15
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	462b      	mov	r3, r5
 8001c66:	f10d 020e 	add.w	r2, sp, #14
 8001c6a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8001c6e:	4810      	ldr	r0, [pc, #64]	; (8001cb0 <_ZN17LoRa_contact_data17create_amt_packetEv+0x78>)
 8001c70:	f003 ffe0 	bl	8005c34 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    bool err = false;
 8001c74:	4628      	mov	r0, r5
        break;
    }
    return err;
}
 8001c76:	b005      	add	sp, #20
 8001c78:	bd30      	pop	{r4, r5, pc}
        uint8_t com = 0x04;
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	f88d 300e 	strb.w	r3, [sp, #14]
        uint8_t data[1] = {amt_packet_};
 8001c80:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8001c84:	f88d 300c 	strb.w	r3, [sp, #12]
        uint8_t len = 1;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	f88d 300f 	strb.w	r3, [sp, #15]
        create_packet(size, Packet_Type::CONNECTION);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	210b      	movs	r1, #11
 8001c92:	f7ff feed 	bl	8001a70 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001c96:	f10d 030f 	add.w	r3, sp, #15
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	ab03      	add	r3, sp, #12
 8001c9e:	f10d 020e 	add.w	r2, sp, #14
 8001ca2:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8001ca6:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <_ZN17LoRa_contact_data17create_amt_packetEv+0x78>)
 8001ca8:	f003 ffc4 	bl	8005c34 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    bool err = false;
 8001cac:	2000      	movs	r0, #0
 8001cae:	e7e2      	b.n	8001c76 <_ZN17LoRa_contact_data17create_amt_packetEv+0x3e>
 8001cb0:	200023a4 	.word	0x200023a4

08001cb4 <_ZN17LoRa_contact_data20create_number_packetEv>:

// Создание пакета номеров пришедших пакетов
bool LoRa_contact_data::create_number_packet() {
 8001cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	4607      	mov	r7, r0
    bool err = false;
    switch (current_stage_.type_communication) {
 8001cbc:	7cc3      	ldrb	r3, [r0, #19]
 8001cbe:	b11b      	cbz	r3, 8001cc8 <_ZN17LoRa_contact_data20create_number_packetEv+0x14>
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d019      	beq.n	8001cf8 <_ZN17LoRa_contact_data20create_number_packetEv+0x44>
        if(len != 0)
            delete[] data;
        break;
    }
    default:
        err = true;
 8001cc4:	2001      	movs	r0, #1
        break;
    }
    return err;
 8001cc6:	e014      	b.n	8001cf2 <_ZN17LoRa_contact_data20create_number_packetEv+0x3e>
        uint8_t com = 0x05;
 8001cc8:	2305      	movs	r3, #5
 8001cca:	f88d 300f 	strb.w	r3, [sp, #15]
        uint8_t len = 0;
 8001cce:	2400      	movs	r4, #0
 8001cd0:	f88d 4010 	strb.w	r4, [sp, #16]
        create_packet(size, Packet_Type::CONNECTION);
 8001cd4:	4622      	mov	r2, r4
 8001cd6:	210a      	movs	r1, #10
 8001cd8:	f7ff feca 	bl	8001a70 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, nullptr, &len);
 8001cdc:	ab04      	add	r3, sp, #16
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	4623      	mov	r3, r4
 8001ce2:	f10d 020f 	add.w	r2, sp, #15
 8001ce6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001cea:	4834      	ldr	r0, [pc, #208]	; (8001dbc <_ZN17LoRa_contact_data20create_number_packetEv+0x108>)
 8001cec:	f003 ffa2 	bl	8005c34 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    bool err = false;
 8001cf0:	4620      	mov	r0, r4
}
 8001cf2:	b006      	add	sp, #24
 8001cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        LoRa_packet packet;
 8001cf8:	a804      	add	r0, sp, #16
 8001cfa:	f002 fc59 	bl	80045b0 <_ZN11LoRa_packetC1Ev>
        uint8_t com = 0x06;
 8001cfe:	2306      	movs	r3, #6
 8001d00:	f88d 300e 	strb.w	r3, [sp, #14]
        uint8_t len = reciev_packet_len * 2;
 8001d04:	f897 0135 	ldrb.w	r0, [r7, #309]	; 0x135
 8001d08:	0040      	lsls	r0, r0, #1
 8001d0a:	b2c0      	uxtb	r0, r0
 8001d0c:	f88d 000f 	strb.w	r0, [sp, #15]
        uint8_t size = 11 + len;
 8001d10:	f100 0a0b 	add.w	sl, r0, #11
 8001d14:	fa5f fa8a 	uxtb.w	sl, sl
        if(len != 0)
 8001d18:	b9a0      	cbnz	r0, 8001d44 <_ZN17LoRa_contact_data20create_number_packetEv+0x90>
        create_packet(size, Packet_Type::CONNECTION);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	4651      	mov	r1, sl
 8001d1e:	4638      	mov	r0, r7
 8001d20:	f7ff fea6 	bl	8001a70 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001d24:	f10d 030f 	add.w	r3, sp, #15
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f10d 020e 	add.w	r2, sp, #14
 8001d30:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001d34:	4821      	ldr	r0, [pc, #132]	; (8001dbc <_ZN17LoRa_contact_data20create_number_packetEv+0x108>)
 8001d36:	f003 ff7d 	bl	8005c34 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
        LoRa_packet packet;
 8001d3a:	a804      	add	r0, sp, #16
 8001d3c:	f002 fc41 	bl	80045c2 <_ZN11LoRa_packetD1Ev>
    bool err = false;
 8001d40:	2000      	movs	r0, #0
 8001d42:	e7d6      	b.n	8001cf2 <_ZN17LoRa_contact_data20create_number_packetEv+0x3e>
            data = new uint8_t[len];
 8001d44:	f008 fe7a 	bl	800aa3c <_Znaj>
 8001d48:	4680      	mov	r8, r0
        for(int i = 0; i < (len / 2); ++i) {
 8001d4a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d919      	bls.n	8001d86 <_ZN17LoRa_contact_data20create_number_packetEv+0xd2>
 8001d52:	f107 06bc 	add.w	r6, r7, #188	; 0xbc
 8001d56:	4605      	mov	r5, r0
 8001d58:	2400      	movs	r4, #0
            number = packet_analyzer.get_packet_number(packet);
 8001d5a:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8001dc0 <_ZN17LoRa_contact_data20create_number_packetEv+0x10c>
            packet = reciev_packet_[i];
 8001d5e:	4631      	mov	r1, r6
 8001d60:	a804      	add	r0, sp, #16
 8001d62:	f002 fc7f 	bl	8004664 <_ZN11LoRa_packetaSERKS_>
            number = packet_analyzer.get_packet_number(packet);
 8001d66:	a904      	add	r1, sp, #16
 8001d68:	4648      	mov	r0, r9
 8001d6a:	f003 fe04 	bl	8005976 <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>
            data[i * 2] = (number >> 8) & 0xFF;
 8001d6e:	0a03      	lsrs	r3, r0, #8
 8001d70:	f808 3014 	strb.w	r3, [r8, r4, lsl #1]
            data[(i * 2) + 1] = number & 0xFF;
 8001d74:	7068      	strb	r0, [r5, #1]
        for(int i = 0; i < (len / 2); ++i) {
 8001d76:	3401      	adds	r4, #1
 8001d78:	3608      	adds	r6, #8
 8001d7a:	3502      	adds	r5, #2
 8001d7c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001d80:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 8001d84:	dbeb      	blt.n	8001d5e <_ZN17LoRa_contact_data20create_number_packetEv+0xaa>
        create_packet(size, Packet_Type::CONNECTION);
 8001d86:	2200      	movs	r2, #0
 8001d88:	4651      	mov	r1, sl
 8001d8a:	4638      	mov	r0, r7
 8001d8c:	f7ff fe70 	bl	8001a70 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001d90:	f10d 030f 	add.w	r3, sp, #15
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	4643      	mov	r3, r8
 8001d98:	f10d 020e 	add.w	r2, sp, #14
 8001d9c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001da0:	4806      	ldr	r0, [pc, #24]	; (8001dbc <_ZN17LoRa_contact_data20create_number_packetEv+0x108>)
 8001da2:	f003 ff47 	bl	8005c34 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
        if(len != 0)
 8001da6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0c5      	beq.n	8001d3a <_ZN17LoRa_contact_data20create_number_packetEv+0x86>
            delete[] data;
 8001dae:	f1b8 0f00 	cmp.w	r8, #0
 8001db2:	d0c2      	beq.n	8001d3a <_ZN17LoRa_contact_data20create_number_packetEv+0x86>
 8001db4:	4640      	mov	r0, r8
 8001db6:	f008 fe3f 	bl	800aa38 <_ZdaPv>
 8001dba:	e7be      	b.n	8001d3a <_ZN17LoRa_contact_data20create_number_packetEv+0x86>
 8001dbc:	200023a4 	.word	0x200023a4
 8001dc0:	20002388 	.word	0x20002388

08001dc4 <_ZN17LoRa_contact_data23create_disconnet_packetEb>:
    return err;
}
// Создание пакета разрыва соединения // err переменная класса? 
bool LoRa_contact_data::create_disconnet_packet(bool error) {
    bool err = false;
    init_ = false;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f880 3138 	strb.w	r3, [r0, #312]	; 0x138
    switch (current_stage_.type_communication) {
 8001dca:	7cc3      	ldrb	r3, [r0, #19]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d822      	bhi.n	8001e16 <_ZN17LoRa_contact_data23create_disconnet_packetEb+0x52>
bool LoRa_contact_data::create_disconnet_packet(bool error) {
 8001dd0:	b510      	push	{r4, lr}
 8001dd2:	b084      	sub	sp, #16
    case TC_INITIATOR:
    // Получатель
    case TC_RECIPIENT: {
        // Создание пакета
        uint8_t size = 11;
        uint8_t com = 0x08;
 8001dd4:	2308      	movs	r3, #8
 8001dd6:	f88d 300e 	strb.w	r3, [sp, #14]
        uint8_t len = 1;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	f88d 300f 	strb.w	r3, [sp, #15]
        uint8_t data[1] = {0};
        if(error)
 8001de0:	b9a9      	cbnz	r1, 8001e0e <_ZN17LoRa_contact_data23create_disconnet_packetEb+0x4a>
        uint8_t data[1] = {0};
 8001de2:	2300      	movs	r3, #0
 8001de4:	f88d 300c 	strb.w	r3, [sp, #12]
 8001de8:	4604      	mov	r4, r0
            data[0] = 2;
        create_packet(size, Packet_Type::CONNECTION);
 8001dea:	2200      	movs	r2, #0
 8001dec:	210b      	movs	r1, #11
 8001dee:	f7ff fe3f 	bl	8001a70 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        // static_cast<Packet_Connection*>(last_send_packet_.packet)->set_packet_data(&com, data, nullptr);
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001df2:	f10d 030f 	add.w	r3, sp, #15
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	ab03      	add	r3, sp, #12
 8001dfa:	f10d 020e 	add.w	r2, sp, #14
 8001dfe:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8001e02:	4806      	ldr	r0, [pc, #24]	; (8001e1c <_ZN17LoRa_contact_data23create_disconnet_packetEb+0x58>)
 8001e04:	f003 ff16 	bl	8005c34 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    bool err = false;
 8001e08:	2000      	movs	r0, #0
    default:
        err = true;
        break;
    }
    return err;
}
 8001e0a:	b004      	add	sp, #16
 8001e0c:	bd10      	pop	{r4, pc}
            data[0] = 2;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	f88d 300c 	strb.w	r3, [sp, #12]
 8001e14:	e7e8      	b.n	8001de8 <_ZN17LoRa_contact_data23create_disconnet_packetEb+0x24>
        err = true;
 8001e16:	2001      	movs	r0, #1
}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	200023a4 	.word	0x200023a4

08001e20 <_ZN17LoRa_contact_data19packet_dont_correctEbb>:

// --- функции обработки пакетов ---

// Проверка пакета на "пришёл" и "мой|глобальный", и от того, кого
//   я жду | от всех (при глобальном адресе ожидания - тоже все)
bool LoRa_contact_data::packet_dont_correct(bool global_adr, bool all_adr_sendler) {
 8001e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e22:	b085      	sub	sp, #20
 8001e24:	4604      	mov	r4, r0
 8001e26:	460e      	mov	r6, r1
 8001e28:	4617      	mov	r7, r2
    // Проверка размера пакета
    if(last_receive_packet_.get_len() < PACKET_HEADER_SIZE)
 8001e2a:	f100 0520 	add.w	r5, r0, #32
 8001e2e:	4628      	mov	r0, r5
 8001e30:	f002 fc08 	bl	8004644 <_ZNK11LoRa_packet7get_lenEv>
 8001e34:	2808      	cmp	r0, #8
 8001e36:	d803      	bhi.n	8001e40 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x20>
        return false;
 8001e38:	2300      	movs	r3, #0
        // Проверка "мне важно кто отправил"
        // if(last_receive_packet_.packet->get_sour_adr() != connect_adr_)
        if(packet_analyzer.get_sour_adr(last_receive_packet_) != connect_adr_)
            return false;
    return true;
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	b005      	add	sp, #20
 8001e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(packet_analyzer.get_dest_adr(last_receive_packet_) != my_adr_) {
 8001e40:	4629      	mov	r1, r5
 8001e42:	4819      	ldr	r0, [pc, #100]	; (8001ea8 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x88>)
 8001e44:	f003 fd58 	bl	80058f8 <_ZN15Packet_analyzer12get_dest_adrERK11LoRa_packet>
 8001e48:	ab04      	add	r3, sp, #16
 8001e4a:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8001e4e:	1d21      	adds	r1, r4, #4
 8001e50:	4618      	mov	r0, r3
 8001e52:	f003 fd25 	bl	80058a0 <_ZneRK12LoRa_addressS1_>
 8001e56:	b170      	cbz	r0, 8001e76 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x56>
        if(!(global_adr && (packet_analyzer.get_dest_adr(last_receive_packet_).global()))) {
 8001e58:	b90e      	cbnz	r6, 8001e5e <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x3e>
            return false;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	e7ed      	b.n	8001e3a <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x1a>
        if(!(global_adr && (packet_analyzer.get_dest_adr(last_receive_packet_).global()))) {
 8001e5e:	4629      	mov	r1, r5
 8001e60:	4811      	ldr	r0, [pc, #68]	; (8001ea8 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x88>)
 8001e62:	f003 fd49 	bl	80058f8 <_ZN15Packet_analyzer12get_dest_adrERK11LoRa_packet>
 8001e66:	ab04      	add	r3, sp, #16
 8001e68:	f843 0d08 	str.w	r0, [r3, #-8]!
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f003 fd08 	bl	8005882 <_ZN12LoRa_address6globalEv>
 8001e72:	2800      	cmp	r0, #0
 8001e74:	d0f1      	beq.n	8001e5a <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x3a>
    if(!((connect_adr_.global()) || all_adr_sendler))
 8001e76:	3408      	adds	r4, #8
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f003 fd02 	bl	8005882 <_ZN12LoRa_address6globalEv>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2800      	cmp	r0, #0
 8001e82:	d1da      	bne.n	8001e3a <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x1a>
 8001e84:	b10f      	cbz	r7, 8001e8a <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x6a>
    return true;
 8001e86:	463b      	mov	r3, r7
 8001e88:	e7d7      	b.n	8001e3a <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x1a>
        if(packet_analyzer.get_sour_adr(last_receive_packet_) != connect_adr_)
 8001e8a:	4629      	mov	r1, r5
 8001e8c:	4806      	ldr	r0, [pc, #24]	; (8001ea8 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x88>)
 8001e8e:	f003 fd57 	bl	8005940 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>
 8001e92:	ab04      	add	r3, sp, #16
 8001e94:	f843 0d04 	str.w	r0, [r3, #-4]!
 8001e98:	4621      	mov	r1, r4
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f003 fd00 	bl	80058a0 <_ZneRK12LoRa_addressS1_>
 8001ea0:	f080 0001 	eor.w	r0, r0, #1
 8001ea4:	b2c3      	uxtb	r3, r0
 8001ea6:	e7c8      	b.n	8001e3a <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x1a>
 8001ea8:	20002388 	.word	0x20002388

08001eac <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type>:
        if(last_receive_packet_[9] == subtype_packet[i])
            return true;
    return false;
}
#else
bool LoRa_contact_data::check_packet_type(Packet_Type type_packet) {
 8001eac:	b510      	push	{r4, lr}
 8001eae:	460c      	mov	r4, r1
    return (packet_analyzer.get_packet_type(last_receive_packet_) == type_packet);
 8001eb0:	f100 0120 	add.w	r1, r0, #32
 8001eb4:	4803      	ldr	r0, [pc, #12]	; (8001ec4 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type+0x18>)
 8001eb6:	f003 fd57 	bl	8005968 <_ZN15Packet_analyzer15get_packet_typeERK11LoRa_packet>
}
 8001eba:	42a0      	cmp	r0, r4
 8001ebc:	bf14      	ite	ne
 8001ebe:	2000      	movne	r0, #0
 8001ec0:	2001      	moveq	r0, #1
 8001ec2:	bd10      	pop	{r4, pc}
 8001ec4:	20002388 	.word	0x20002388

08001ec8 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>:
bool LoRa_contact_data::check_packet_type(Packet_Type type_packet, const uint8_t& subtype_packet) {
 8001ec8:	b570      	push	{r4, r5, r6, lr}
 8001eca:	460d      	mov	r5, r1
 8001ecc:	4616      	mov	r6, r2
    if(packet_analyzer.get_packet_type(last_receive_packet_) != type_packet)
 8001ece:	f100 0420 	add.w	r4, r0, #32
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	4808      	ldr	r0, [pc, #32]	; (8001ef8 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh+0x30>)
 8001ed6:	f003 fd47 	bl	8005968 <_ZN15Packet_analyzer15get_packet_typeERK11LoRa_packet>
 8001eda:	42a8      	cmp	r0, r5
 8001edc:	d001      	beq.n	8001ee2 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh+0x1a>
        return false;
 8001ede:	2000      	movs	r0, #0
    if(last_receive_packet_[9] == subtype_packet)
        return true;
    return false;
}
 8001ee0:	bd70      	pop	{r4, r5, r6, pc}
    if(last_receive_packet_[9] == subtype_packet)
 8001ee2:	2109      	movs	r1, #9
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f002 fbb5 	bl	8004654 <_ZN11LoRa_packetixEi>
 8001eea:	7800      	ldrb	r0, [r0, #0]
 8001eec:	7833      	ldrb	r3, [r6, #0]
 8001eee:	4298      	cmp	r0, r3
 8001ef0:	bf14      	ite	ne
 8001ef2:	2000      	movne	r0, #0
 8001ef4:	2001      	moveq	r0, #1
 8001ef6:	e7f3      	b.n	8001ee0 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh+0x18>
 8001ef8:	20002388 	.word	0x20002388

08001efc <_ZN17LoRa_contact_data17search_num_packetEt>:
int16_t LoRa_contact_data::search_num_packet(uint16_t number) {
    // class Exchange_packet packet;
#if defined ( USE_VECTOR )
    for(int16_t i = 0; i < send_packet_.size(); ++i)
#else
    for(uint16_t i = 0; i < send_packet_len; ++i)
 8001efc:	f890 3134 	ldrb.w	r3, [r0, #308]	; 0x134
 8001f00:	b1d3      	cbz	r3, 8001f38 <_ZN17LoRa_contact_data17search_num_packetEt+0x3c>
int16_t LoRa_contact_data::search_num_packet(uint16_t number) {
 8001f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f06:	460e      	mov	r6, r1
 8001f08:	4605      	mov	r5, r0
    for(uint16_t i = 0; i < send_packet_len; ++i)
 8001f0a:	2400      	movs	r4, #0
 8001f0c:	f100 0834 	add.w	r8, r0, #52	; 0x34
#endif
    {
        // packet.set_packet(send_packet_[i]);
        if(number == packet_analyzer.get_packet_number(send_packet_[i]))
 8001f10:	4f0b      	ldr	r7, [pc, #44]	; (8001f40 <_ZN17LoRa_contact_data17search_num_packetEt+0x44>)
 8001f12:	eb08 01c4 	add.w	r1, r8, r4, lsl #3
 8001f16:	4638      	mov	r0, r7
 8001f18:	f003 fd2d 	bl	8005976 <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>
 8001f1c:	42b0      	cmp	r0, r6
 8001f1e:	d008      	beq.n	8001f32 <_ZN17LoRa_contact_data17search_num_packetEt+0x36>
    for(uint16_t i = 0; i < send_packet_len; ++i)
 8001f20:	3401      	adds	r4, #1
 8001f22:	b2a4      	uxth	r4, r4
 8001f24:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 8001f28:	42a3      	cmp	r3, r4
 8001f2a:	d8f2      	bhi.n	8001f12 <_ZN17LoRa_contact_data17search_num_packetEt+0x16>
        // packet.set_packet(send_packet_[i]);
        // if(packet.packet->get_packet_number() == number)
        //     return i;

    }
    return -1;
 8001f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f30:	e000      	b.n	8001f34 <_ZN17LoRa_contact_data17search_num_packetEt+0x38>
            return i;
 8001f32:	b220      	sxth	r0, r4
}
 8001f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20002388 	.word	0x20002388

08001f44 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh>:
        send_flag_.push_back(true);
    return i;
}
#else
uint8_t LoRa_contact_data::pop_num_packet(const std::array<uint16_t, CONTACT_DATA_MAX_PACKET>& number, uint8_t len) {
    if(len > send_packet_len)
 8001f44:	f890 3134 	ldrb.w	r3, [r0, #308]	; 0x134
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d346      	bcc.n	8001fda <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x96>
uint8_t LoRa_contact_data::pop_num_packet(const std::array<uint16_t, CONTACT_DATA_MAX_PACKET>& number, uint8_t len) {
 8001f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f50:	4691      	mov	r9, r2
 8001f52:	4606      	mov	r6, r0
        return 0;
    int i;
    for(i = 0; i < len; ++i) {
 8001f54:	4692      	mov	sl, r2
 8001f56:	b3f2      	cbz	r2, 8001fd6 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x92>
 8001f58:	f1a1 0802 	sub.w	r8, r1, #2
 8001f5c:	2700      	movs	r7, #0
 8001f5e:	e005      	b.n	8001f6c <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x28>
        if(search == -1)
            break;
        for(int j = search; j < send_packet_len - 1; ++j) {
        	send_packet_[j] = std::move(send_packet_[j+1]);
        }
		--send_packet_len;
 8001f60:	3b01      	subs	r3, #1
 8001f62:	f886 3134 	strb.w	r3, [r6, #308]	; 0x134
    for(i = 0; i < len; ++i) {
 8001f66:	3701      	adds	r7, #1
 8001f68:	4557      	cmp	r7, sl
 8001f6a:	d01d      	beq.n	8001fa8 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x64>
        int16_t search = search_num_packet(number[i]);
 8001f6c:	f838 1f02 	ldrh.w	r1, [r8, #2]!
 8001f70:	4630      	mov	r0, r6
 8001f72:	f7ff ffc3 	bl	8001efc <_ZN17LoRa_contact_data17search_num_packetEt>
        if(search == -1)
 8001f76:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001f7a:	d016      	beq.n	8001faa <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x66>
        for(int j = search; j < send_packet_len - 1; ++j) {
 8001f7c:	4605      	mov	r5, r0
 8001f7e:	f896 3134 	ldrb.w	r3, [r6, #308]	; 0x134
 8001f82:	1e5a      	subs	r2, r3, #1
 8001f84:	4290      	cmp	r0, r2
 8001f86:	daeb      	bge.n	8001f60 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x1c>
 8001f88:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
 8001f8c:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8001f90:	4620      	mov	r0, r4
        	send_packet_[j] = std::move(send_packet_[j+1]);
 8001f92:	3501      	adds	r5, #1
 8001f94:	3408      	adds	r4, #8
 8001f96:	4621      	mov	r1, r4
 8001f98:	f002 fb86 	bl	80046a8 <_ZN11LoRa_packetaSEOS_>
        for(int j = search; j < send_packet_len - 1; ++j) {
 8001f9c:	f896 3134 	ldrb.w	r3, [r6, #308]	; 0x134
 8001fa0:	1e5a      	subs	r2, r3, #1
 8001fa2:	42aa      	cmp	r2, r5
 8001fa4:	dcf4      	bgt.n	8001f90 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x4c>
 8001fa6:	e7db      	b.n	8001f60 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x1c>
    for(i = 0; i < len; ++i) {
 8001fa8:	464f      	mov	r7, r9
    }
    amt_packet_ = send_packet_len;
 8001faa:	f896 3134 	ldrb.w	r3, [r6, #308]	; 0x134
 8001fae:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    send_flag_len = send_packet_len;
 8001fb2:	f886 3136 	strb.w	r3, [r6, #310]	; 0x136
    for(int j = 0; j < send_flag_len; ++j) {
 8001fb6:	b15b      	cbz	r3, 8001fd0 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x8c>
 8001fb8:	f106 03ab 	add.w	r3, r6, #171	; 0xab
        send_flag_[j] = true;
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	7058      	strb	r0, [r3, #1]
 8001fc0:	f1a3 02aa 	sub.w	r2, r3, #170	; 0xaa
 8001fc4:	1b92      	subs	r2, r2, r6
 8001fc6:	3301      	adds	r3, #1
    for(int j = 0; j < send_flag_len; ++j) {
 8001fc8:	f896 1136 	ldrb.w	r1, [r6, #310]	; 0x136
 8001fcc:	4291      	cmp	r1, r2
 8001fce:	dcf6      	bgt.n	8001fbe <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x7a>
    }
    return i;
 8001fd0:	b2f8      	uxtb	r0, r7
}
 8001fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for(i = 0; i < len; ++i) {
 8001fd6:	2700      	movs	r7, #0
 8001fd8:	e7e7      	b.n	8001faa <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x66>
        return 0;
 8001fda:	2000      	movs	r0, #0
}
 8001fdc:	4770      	bx	lr
	...

08001fe0 <_ZN17LoRa_contact_data15sort_num_packetEv>:
#endif

// сортировка reciev_packet_
void LoRa_contact_data::sort_num_packet() {
 8001fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	4682      	mov	sl, r0
    uint16_t number1, number2;
    bool swap;
#if defined ( USE_VECTOR )
    for(unsigned int i = 0; (i < (reciev_packet_.size() - 1)) && (reciev_packet_.size() != 0);)
#else
    for(unsigned int i = 0; (i < (reciev_packet_len - 1)) && (reciev_packet_len != 0);)
 8001fe8:	2500      	movs	r5, #0
 8001fea:	f100 09bc 	add.w	r9, r0, #188	; 0xbc
        // packet.set_packet(reciev_packet_[i]);
        // number1 = packet.packet->get_packet_number();
        // packet.set_packet(reciev_packet_[i+1]);
        // number2 = packet.packet->get_packet_number();

        number1 = packet_analyzer.get_packet_number(reciev_packet_[i]);
 8001fee:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8002068 <_ZN17LoRa_contact_data15sort_num_packetEv+0x88>
 8001ff2:	e019      	b.n	8002028 <_ZN17LoRa_contact_data15sort_num_packetEv+0x48>

            if(i != 0)
                --i;
        }
        else
            ++i;
 8001ff4:	465d      	mov	r5, fp
 8001ff6:	e017      	b.n	8002028 <_ZN17LoRa_contact_data15sort_num_packetEv+0x48>
        else if (number2 == 0) {
 8001ff8:	b918      	cbnz	r0, 8002002 <_ZN17LoRa_contact_data15sort_num_packetEv+0x22>
            if(number1 <= 0x00FF)
 8001ffa:	2fff      	cmp	r7, #255	; 0xff
 8001ffc:	d903      	bls.n	8002006 <_ZN17LoRa_contact_data15sort_num_packetEv+0x26>
            ++i;
 8001ffe:	465d      	mov	r5, fp
 8002000:	e012      	b.n	8002028 <_ZN17LoRa_contact_data15sort_num_packetEv+0x48>
            if(number2 < number1)
 8002002:	4287      	cmp	r7, r0
 8002004:	d9f6      	bls.n	8001ff4 <_ZN17LoRa_contact_data15sort_num_packetEv+0x14>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002006:	4631      	mov	r1, r6
 8002008:	4668      	mov	r0, sp
 800200a:	f002 fb5c 	bl	80046c6 <_ZN11LoRa_packetC1EOS_>
      __a = _GLIBCXX_MOVE(__b);
 800200e:	4621      	mov	r1, r4
 8002010:	4630      	mov	r0, r6
 8002012:	f002 fb49 	bl	80046a8 <_ZN11LoRa_packetaSEOS_>
      __b = _GLIBCXX_MOVE(__tmp);
 8002016:	4669      	mov	r1, sp
 8002018:	4620      	mov	r0, r4
 800201a:	f002 fb45 	bl	80046a8 <_ZN11LoRa_packetaSEOS_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800201e:	4668      	mov	r0, sp
 8002020:	f002 facf 	bl	80045c2 <_ZN11LoRa_packetD1Ev>
            if(i != 0)
 8002024:	b105      	cbz	r5, 8002028 <_ZN17LoRa_contact_data15sort_num_packetEv+0x48>
                --i;
 8002026:	3d01      	subs	r5, #1
    for(unsigned int i = 0; (i < (reciev_packet_len - 1)) && (reciev_packet_len != 0);)
 8002028:	f89a 3135 	ldrb.w	r3, [sl, #309]	; 0x135
 800202c:	1e5a      	subs	r2, r3, #1
 800202e:	42aa      	cmp	r2, r5
 8002030:	d917      	bls.n	8002062 <_ZN17LoRa_contact_data15sort_num_packetEv+0x82>
 8002032:	b1b3      	cbz	r3, 8002062 <_ZN17LoRa_contact_data15sort_num_packetEv+0x82>
 8002034:	00ec      	lsls	r4, r5, #3
 8002036:	eb09 0604 	add.w	r6, r9, r4
        number1 = packet_analyzer.get_packet_number(reciev_packet_[i]);
 800203a:	4631      	mov	r1, r6
 800203c:	4640      	mov	r0, r8
 800203e:	f003 fc9a 	bl	8005976 <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>
 8002042:	4607      	mov	r7, r0
        number2 = packet_analyzer.get_packet_number(reciev_packet_[i+1]);
 8002044:	f105 0b01 	add.w	fp, r5, #1
 8002048:	3408      	adds	r4, #8
 800204a:	444c      	add	r4, r9
 800204c:	4621      	mov	r1, r4
 800204e:	4640      	mov	r0, r8
 8002050:	f003 fc91 	bl	8005976 <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>
        if(number1 == 0) {
 8002054:	2f00      	cmp	r7, #0
 8002056:	d1cf      	bne.n	8001ff8 <_ZN17LoRa_contact_data15sort_num_packetEv+0x18>
            if(0xFF00 <= number2)
 8002058:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 800205c:	d2d3      	bcs.n	8002006 <_ZN17LoRa_contact_data15sort_num_packetEv+0x26>
            ++i;
 800205e:	465d      	mov	r5, fp
 8002060:	e7e2      	b.n	8002028 <_ZN17LoRa_contact_data15sort_num_packetEv+0x48>
    }
}
 8002062:	b003      	add	sp, #12
 8002064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002068:	20002388 	.word	0x20002388

0800206c <_ZN17LoRa_contact_data15init_disconnectER13Stage_control>:
    //   (стадия stade_communication_ = SC_DOWNTIME)
    // - Отправить пакет о разрыве соединения с ошибкой
    //   (стадия stade_communication_ = SC_DOWNTIME)
    // ----- ---- -----
    // Проверка состояние модуля
    switch (module_state_) {
 800206c:	7c83      	ldrb	r3, [r0, #18]
        //   _стадия stade_communication_ = SC_DOWNTIME|SC_COMPLETE;  // (!) -----
        //   contact_complete();
        break;
    }
    default:
        error = 131;
 800206e:	2b01      	cmp	r3, #1
        break;
    }
    return error;
}
 8002070:	bf0c      	ite	eq
 8002072:	2000      	moveq	r0, #0
 8002074:	2083      	movne	r0, #131	; 0x83
 8002076:	4770      	bx	lr

08002078 <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control>:
        error = 210;
        break;
    }
    return error;
}
uint32_t LoRa_contact_data::recip_connection_queue_check(Stage_control& use_stage) {
 8002078:	4603      	mov	r3, r0
    //   (стадия _connection = C_AWAITING_REQUEST)
    // - Сброс ожидания определённого модуля => отправить пакет сброса
    //   (стадия _connection = C_AWAITING_REQUEST)
    // ----- ---- -----
    // Проверка состояние модуля
    switch (module_state_) {
 800207a:	7c82      	ldrb	r2, [r0, #18]
 800207c:	2a01      	cmp	r2, #1
 800207e:	d113      	bne.n	80020a8 <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control+0x30>
			//     create_reset_wait_packet();
			//     set_LoRa_mode_send();
        }
#endif
        else {
            connect_adr_ = wait_adr_;
 8002080:	68c2      	ldr	r2, [r0, #12]
 8002082:	6082      	str	r2, [r0, #8]
        }
        if(!use_past_stage)
 8002084:	7f42      	ldrb	r2, [r0, #29]
 8002086:	b94a      	cbnz	r2, 800209c <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control+0x24>
            past_stage_ = current_stage_;
 8002088:	4602      	mov	r2, r0
 800208a:	f852 0f13 	ldr.w	r0, [r2, #19]!
 800208e:	6198      	str	r0, [r3, #24]
 8002090:	7912      	ldrb	r2, [r2, #4]
 8002092:	771a      	strb	r2, [r3, #28]
        else
            current_stage_ = past_stage_;
        current_stage_.connection = C_AWAITING_REQUEST;
 8002094:	2203      	movs	r2, #3
 8002096:	755a      	strb	r2, [r3, #21]
    uint32_t error = 0;
 8002098:	2000      	movs	r0, #0
        break;
 800209a:	4770      	bx	lr
            current_stage_ = past_stage_;
 800209c:	6980      	ldr	r0, [r0, #24]
 800209e:	f8c3 0013 	str.w	r0, [r3, #19]
 80020a2:	7f1a      	ldrb	r2, [r3, #28]
 80020a4:	75da      	strb	r2, [r3, #23]
 80020a6:	e7f5      	b.n	8002094 <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control+0x1c>
    }
    default:
        error = 211;
 80020a8:	20d3      	movs	r0, #211	; 0xd3
        break;
    }
    return error;
}
 80020aa:	4770      	bx	lr

080020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>:
    current_stage_.stade_communication = SC_COMPLETE;
    past_stage_ = current_stage_;
    start_connect_ = false;
    set_LoRa_mode_sleep();
}
void LoRa_contact_data::set_LoRa_mode_receive() {
 80020ac:	b510      	push	{r4, lr}
 80020ae:	b084      	sub	sp, #16
    module_state_ = MS_LoRa_RECIEVE;
 80020b0:	2302      	movs	r3, #2
 80020b2:	7483      	strb	r3, [r0, #18]
#if defined ( ESP32 )
    lora_.mode_sleep();
    // delay(1);
    lora_.receiver_packet(1, 0);
#else
    LoRa.mode_sleep();
 80020b4:	4c08      	ldr	r4, [pc, #32]	; (80020d8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv+0x2c>)
 80020b6:	4620      	mov	r0, r4
 80020b8:	f001 fc52 	bl	8003960 <_ZN10LoRa_class10mode_sleepEv>
    //HAL_Delay(1);
    LoRa.receiver_packet(1, 0);
 80020bc:	2300      	movs	r3, #0
 80020be:	9301      	str	r3, [sp, #4]
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	2201      	movs	r2, #1
 80020c4:	4621      	mov	r1, r4
 80020c6:	a802      	add	r0, sp, #8
 80020c8:	f001 ffca 	bl	8004060 <_ZN10LoRa_class15receiver_packetEhmbb>
 80020cc:	a802      	add	r0, sp, #8
 80020ce:	f002 fa78 	bl	80045c2 <_ZN11LoRa_packetD1Ev>
#endif
}
 80020d2:	b004      	add	sp, #16
 80020d4:	bd10      	pop	{r4, pc}
 80020d6:	bf00      	nop
 80020d8:	20000370 	.word	0x20000370

080020dc <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>:
bool LoRa_contact_data::wait_recipient(LoRa_address address) {
 80020dc:	b500      	push	{lr}
 80020de:	b083      	sub	sp, #12
 80020e0:	4603      	mov	r3, r0
 80020e2:	9101      	str	r1, [sp, #4]
    wait_adr_ = address;
 80020e4:	60c1      	str	r1, [r0, #12]
    current_stage_.type_communication = TC_RECIPIENT;
 80020e6:	2201      	movs	r2, #1
 80020e8:	74c2      	strb	r2, [r0, #19]
    current_stage_.stade_communication = SC_CONNECTION;
 80020ea:	7502      	strb	r2, [r0, #20]
    current_stage_.connection = C_AWAITING_REQUEST;
 80020ec:	2203      	movs	r2, #3
 80020ee:	7542      	strb	r2, [r0, #21]
    past_stage_ = current_stage_;
 80020f0:	4602      	mov	r2, r0
 80020f2:	f852 0f13 	ldr.w	r0, [r2, #19]!
 80020f6:	6198      	str	r0, [r3, #24]
 80020f8:	7912      	ldrb	r2, [r2, #4]
 80020fa:	771a      	strb	r2, [r3, #28]
    set_LoRa_mode_receive();
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ffd5 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
}
 8002102:	2000      	movs	r0, #0
 8002104:	b003      	add	sp, #12
 8002106:	f85d fb04 	ldr.w	pc, [sp], #4

0800210a <_ZN17LoRa_contact_data17broadcast_receiveE12LoRa_address>:
uint16_t LoRa_contact_data::broadcast_receive(LoRa_address address) {
 800210a:	b510      	push	{r4, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	4604      	mov	r4, r0
 8002110:	9101      	str	r1, [sp, #4]
    clear();
 8002112:	f7ff fc22 	bl	800195a <_ZN17LoRa_contact_data5clearEv>
    wait_adr_ = address;
 8002116:	9b01      	ldr	r3, [sp, #4]
 8002118:	60e3      	str	r3, [r4, #12]
    current_stage_.type_communication = TC_BROADCAST;
 800211a:	2302      	movs	r3, #2
 800211c:	74e3      	strb	r3, [r4, #19]
    current_stage_.stade_communication = SC_WAITING;
 800211e:	2306      	movs	r3, #6
 8002120:	7523      	strb	r3, [r4, #20]
    past_stage_ = current_stage_;
 8002122:	4623      	mov	r3, r4
 8002124:	f853 0f13 	ldr.w	r0, [r3, #19]!
 8002128:	61a0      	str	r0, [r4, #24]
 800212a:	791b      	ldrb	r3, [r3, #4]
 800212c:	7723      	strb	r3, [r4, #28]
    set_LoRa_mode_receive();
 800212e:	4620      	mov	r0, r4
 8002130:	f7ff ffbc 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
}
 8002134:	2000      	movs	r0, #0
 8002136:	b002      	add	sp, #8
 8002138:	bd10      	pop	{r4, pc}

0800213a <_ZN17LoRa_contact_data21broadcast_wait_packetEv>:
uint32_t LoRa_contact_data::broadcast_wait_packet() {
 800213a:	b510      	push	{r4, lr}
 800213c:	4604      	mov	r4, r0
    switch (module_state_) {
 800213e:	7c83      	ldrb	r3, [r0, #18]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d004      	beq.n	800214e <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x14>
 8002144:	2b02      	cmp	r3, #2
 8002146:	d006      	beq.n	8002156 <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x1c>
        error = 310;
 8002148:	f44f 709b 	mov.w	r0, #310	; 0x136
    return error;
 800214c:	e002      	b.n	8002154 <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x1a>
        set_LoRa_mode_receive();
 800214e:	f7ff ffad 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002152:	2000      	movs	r0, #0
}
 8002154:	bd10      	pop	{r4, pc}
        if(!packet_dont_correct(true, true)) {
 8002156:	2201      	movs	r2, #1
 8002158:	4611      	mov	r1, r2
 800215a:	f7ff fe61 	bl	8001e20 <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 800215e:	b198      	cbz	r0, 8002188 <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x4e>
			if(reciev_packet_len == CONTACT_DATA_MAX_PACKET) {
 8002160:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
			reciev_packet_[reciev_packet_len++] = last_receive_packet_;
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	f884 2135 	strb.w	r2, [r4, #309]	; 0x135
 800216a:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 800216e:	f104 0120 	add.w	r1, r4, #32
 8002172:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8002176:	f002 fa75 	bl	8004664 <_ZN11LoRa_packetaSERKS_>
            current_stage_.stade_communication = SC_PACKET_ACCEPTED;
 800217a:	2307      	movs	r3, #7
 800217c:	7523      	strb	r3, [r4, #20]
            set_LoRa_mode_receive();
 800217e:	4620      	mov	r0, r4
 8002180:	f7ff ff94 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002184:	2000      	movs	r0, #0
 8002186:	e7e5      	b.n	8002154 <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x1a>
            set_LoRa_mode_receive();
 8002188:	4620      	mov	r0, r4
 800218a:	f7ff ff8f 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 800218e:	2000      	movs	r0, #0
 8002190:	e7e0      	b.n	8002154 <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x1a>
	...

08002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>:
void LoRa_contact_data::set_LoRa_mode_send(bool first) {
 8002194:	b538      	push	{r3, r4, r5, lr}
 8002196:	4604      	mov	r4, r0
 8002198:	460d      	mov	r5, r1
    module_state_ = MS_LoRa_SEND;
 800219a:	2301      	movs	r3, #1
 800219c:	7483      	strb	r3, [r0, #18]
#if defined ( ESP32 )
    time_last_packet_ = millis();
#else
    time_last_packet_ = HAL_GetTick();
 800219e:	f005 fd89 	bl	8007cb4 <HAL_GetTick>
 80021a2:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
#endif
    if(first)
 80021a6:	b10d      	cbz	r5, 80021ac <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x18>
        time_first_packet_ = time_last_packet_;
 80021a8:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c

                                                            #if defined ( ALL_SAVE_PACKET )
                                                            all_packet.push_back(pack(last_send_packet_.get_data(), true));
                                                            #endif
#else
    LoRa.mode_sleep();
 80021ac:	480e      	ldr	r0, [pc, #56]	; (80021e8 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x54>)
 80021ae:	f001 fbd7 	bl	8003960 <_ZN10LoRa_class10mode_sleepEv>
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x58>)
    for(int i = 0; i < 125000; i++) __NOP(); // HAL_Delay(3);
 80021b4:	bf00      	nop
 80021b6:	3b01      	subs	r3, #1
 80021b8:	d1fc      	bne.n	80021b4 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x20>
    LoRa.mode_FSTX();
 80021ba:	480b      	ldr	r0, [pc, #44]	; (80021e8 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x54>)
 80021bc:	f001 fbf6 	bl	80039ac <_ZN10LoRa_class9mode_FSTXEv>
 80021c0:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x58>)
    for(int i = 0; i < 125000; i++) __NOP(); // HAL_Delay(3);
 80021c2:	bf00      	nop
 80021c4:	3b01      	subs	r3, #1
 80021c6:	d1fc      	bne.n	80021c2 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x2e>
    LoRa.sender_packet(&last_send_packet_[0], last_send_packet_.get_len(), false);
 80021c8:	3428      	adds	r4, #40	; 0x28
 80021ca:	2100      	movs	r1, #0
 80021cc:	4620      	mov	r0, r4
 80021ce:	f002 fa41 	bl	8004654 <_ZN11LoRa_packetixEi>
 80021d2:	4605      	mov	r5, r0
 80021d4:	4620      	mov	r0, r4
 80021d6:	f002 fa35 	bl	8004644 <_ZNK11LoRa_packet7get_lenEv>
 80021da:	2300      	movs	r3, #0
 80021dc:	4602      	mov	r2, r0
 80021de:	4629      	mov	r1, r5
 80021e0:	4801      	ldr	r0, [pc, #4]	; (80021e8 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x54>)
 80021e2:	f002 f937 	bl	8004454 <_ZN10LoRa_class13sender_packetEPhhm>
#endif
}
 80021e6:	bd38      	pop	{r3, r4, r5, pc}
 80021e8:	20000370 	.word	0x20000370
 80021ec:	0001e848 	.word	0x0001e848

080021f0 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control>:
    switch (module_state_) {
 80021f0:	7c83      	ldrb	r3, [r0, #18]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d121      	bne.n	800223a <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x4a>
uint32_t LoRa_contact_data::init_exchange_boardcast(Stage_control& use_stage) {
 80021f6:	b510      	push	{r4, lr}
 80021f8:	4604      	mov	r4, r0
        for(unsigned int i = 0; i < send_flag_len; ++i)
 80021fa:	f890 2136 	ldrb.w	r2, [r0, #310]	; 0x136
 80021fe:	b1f2      	cbz	r2, 800223e <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x4e>
            if(send_flag_[i] == true) {
 8002200:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8002204:	b953      	cbnz	r3, 800221c <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x2c>
 8002206:	f100 03ac 	add.w	r3, r0, #172	; 0xac
 800220a:	f100 01ab 	add.w	r1, r0, #171	; 0xab
 800220e:	4411      	add	r1, r2
        for(unsigned int i = 0; i < send_flag_len; ++i)
 8002210:	428b      	cmp	r3, r1
 8002212:	d014      	beq.n	800223e <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x4e>
            if(send_flag_[i] == true) {
 8002214:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002218:	2a00      	cmp	r2, #0
 800221a:	d0f9      	beq.n	8002210 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x20>
            create_data_packet();
 800221c:	4620      	mov	r0, r4
 800221e:	f7ff fcdb 	bl	8001bd8 <_ZN17LoRa_contact_data18create_data_packetEv>
            set_LoRa_mode_send();
 8002222:	2100      	movs	r1, #0
 8002224:	4620      	mov	r0, r4
 8002226:	f7ff ffb5 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 800222a:	2000      	movs	r0, #0
 800222c:	e01a      	b.n	8002264 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x74>
                current_stage_ = past_stage_;
 800222e:	69a0      	ldr	r0, [r4, #24]
 8002230:	f8c4 0013 	str.w	r0, [r4, #19]
 8002234:	7f23      	ldrb	r3, [r4, #28]
 8002236:	75e3      	strb	r3, [r4, #23]
 8002238:	e00a      	b.n	8002250 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x60>
        error = 121;
 800223a:	2079      	movs	r0, #121	; 0x79
}
 800223c:	4770      	bx	lr
            if(!use_past_stage)
 800223e:	7f63      	ldrb	r3, [r4, #29]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1f4      	bne.n	800222e <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x3e>
                past_stage_ = current_stage_;
 8002244:	4623      	mov	r3, r4
 8002246:	f853 0f13 	ldr.w	r0, [r3, #19]!
 800224a:	61a0      	str	r0, [r4, #24]
 800224c:	791b      	ldrb	r3, [r3, #4]
 800224e:	7723      	strb	r3, [r4, #28]
            current_stage_.exchange = E_WAITING_CONFIRMATION;
 8002250:	2301      	movs	r3, #1
 8002252:	75a3      	strb	r3, [r4, #22]
            create_amt_packet();
 8002254:	4620      	mov	r0, r4
 8002256:	f7ff fcef 	bl	8001c38 <_ZN17LoRa_contact_data17create_amt_packetEv>
            set_LoRa_mode_send();
 800225a:	2100      	movs	r1, #0
 800225c:	4620      	mov	r0, r4
 800225e:	f7ff ff99 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 8002262:	2000      	movs	r0, #0
}
 8002264:	bd10      	pop	{r4, pc}
	...

08002268 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>:
void LoRa_contact_data::set_LoRa_mode_sleep() {
 8002268:	b508      	push	{r3, lr}
    module_state_ = MS_LoRa_SLEEP;
 800226a:	2300      	movs	r3, #0
 800226c:	7483      	strb	r3, [r0, #18]
    // lora mode
#if defined ( ESP32 )
    lora_.mode_sleep();
#else
    LoRa.mode_sleep();
 800226e:	4802      	ldr	r0, [pc, #8]	; (8002278 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv+0x10>)
 8002270:	f001 fb76 	bl	8003960 <_ZN10LoRa_class10mode_sleepEv>
#endif
}
 8002274:	bd08      	pop	{r3, pc}
 8002276:	bf00      	nop
 8002278:	20000370 	.word	0x20000370

0800227c <_ZN17LoRa_contact_data11end_contactEv>:
bool LoRa_contact_data::end_contact() {
 800227c:	b510      	push	{r4, lr}
 800227e:	4604      	mov	r4, r0
    set_LoRa_mode_sleep();
 8002280:	f7ff fff2 	bl	8002268 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>
    if((current_stage_.stade_communication != SC_DOWNTIME) &&
 8002284:	7d23      	ldrb	r3, [r4, #20]
 8002286:	b18b      	cbz	r3, 80022ac <_ZN17LoRa_contact_data11end_contactEv+0x30>
 8002288:	2b01      	cmp	r3, #1
 800228a:	d102      	bne.n	8002292 <_ZN17LoRa_contact_data11end_contactEv+0x16>
      ((current_stage_.stade_communication != SC_CONNECTION) || (current_stage_.type_communication != TC_RECIPIENT))) {
 800228c:	7ce3      	ldrb	r3, [r4, #19]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d00c      	beq.n	80022ac <_ZN17LoRa_contact_data11end_contactEv+0x30>
        clear();
 8002292:	4620      	mov	r0, r4
 8002294:	f7ff fb61 	bl	800195a <_ZN17LoRa_contact_data5clearEv>
        current_stage_.stade_communication = SC_DOWNTIME;
 8002298:	2300      	movs	r3, #0
 800229a:	7523      	strb	r3, [r4, #20]
        past_stage_ = current_stage_;
 800229c:	4623      	mov	r3, r4
 800229e:	f853 0f13 	ldr.w	r0, [r3, #19]!
 80022a2:	61a0      	str	r0, [r4, #24]
 80022a4:	791b      	ldrb	r3, [r3, #4]
 80022a6:	7723      	strb	r3, [r4, #28]
        return true;
 80022a8:	2001      	movs	r0, #1
 80022aa:	e008      	b.n	80022be <_ZN17LoRa_contact_data11end_contactEv+0x42>
    current_stage_.stade_communication = SC_DOWNTIME;
 80022ac:	2300      	movs	r3, #0
 80022ae:	7523      	strb	r3, [r4, #20]
    past_stage_ = current_stage_;
 80022b0:	4622      	mov	r2, r4
 80022b2:	f852 0f13 	ldr.w	r0, [r2, #19]!
 80022b6:	61a0      	str	r0, [r4, #24]
 80022b8:	7912      	ldrb	r2, [r2, #4]
 80022ba:	7722      	strb	r2, [r4, #28]
    return false;
 80022bc:	4618      	mov	r0, r3
}
 80022be:	bd10      	pop	{r4, pc}

080022c0 <_ZN17LoRa_contact_data16contact_completeEv>:
void LoRa_contact_data::contact_complete() {
 80022c0:	b508      	push	{r3, lr}
 80022c2:	4603      	mov	r3, r0
    current_stage_.stade_communication = SC_COMPLETE;
 80022c4:	2204      	movs	r2, #4
 80022c6:	7502      	strb	r2, [r0, #20]
    past_stage_ = current_stage_;
 80022c8:	4602      	mov	r2, r0
 80022ca:	f852 0f13 	ldr.w	r0, [r2, #19]!
 80022ce:	6198      	str	r0, [r3, #24]
 80022d0:	7912      	ldrb	r2, [r2, #4]
 80022d2:	771a      	strb	r2, [r3, #28]
    start_connect_ = false;
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
    set_LoRa_mode_sleep();
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff ffc4 	bl	8002268 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>
}
 80022e0:	bd08      	pop	{r3, pc}

080022e2 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control>:
    switch (use_stage.disconnect) {
 80022e2:	790b      	ldrb	r3, [r1, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d14e      	bne.n	8002386 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0xa4>
uint32_t LoRa_contact_data::recip_disconnect(Stage_control& use_stage) {
 80022e8:	b530      	push	{r4, r5, lr}
 80022ea:	b083      	sub	sp, #12
 80022ec:	4604      	mov	r4, r0
        switch (module_state_) {
 80022ee:	7c83      	ldrb	r3, [r0, #18]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d003      	beq.n	80022fc <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x1a>
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d006      	beq.n	8002306 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x24>
            error = 231;
 80022f8:	20e7      	movs	r0, #231	; 0xe7
 80022fa:	e002      	b.n	8002302 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x20>
            set_LoRa_mode_receive();
 80022fc:	f7ff fed6 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002300:	2000      	movs	r0, #0
}
 8002302:	b003      	add	sp, #12
 8002304:	bd30      	pop	{r4, r5, pc}
            if(!packet_dont_correct()) {
 8002306:	2200      	movs	r2, #0
 8002308:	4611      	mov	r1, r2
 800230a:	f7ff fd89 	bl	8001e20 <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 800230e:	bb38      	cbnz	r0, 8002360 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x7e>
                if(HAL_GetTick() - time_last_packet_ < time_constraints_.R_disconnect)
 8002310:	f005 fcd0 	bl	8007cb4 <HAL_GetTick>
 8002314:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002318:	1ac0      	subs	r0, r0, r3
 800231a:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
 800231e:	4298      	cmp	r0, r3
 8002320:	d313      	bcc.n	800234a <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x68>
                    if(!use_past_stage)
 8002322:	7f63      	ldrb	r3, [r4, #29]
 8002324:	b9b3      	cbnz	r3, 8002354 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x72>
                        past_stage_ = current_stage_;
 8002326:	4623      	mov	r3, r4
 8002328:	f853 0f13 	ldr.w	r0, [r3, #19]!
 800232c:	61a0      	str	r0, [r4, #24]
 800232e:	791b      	ldrb	r3, [r3, #4]
 8002330:	7723      	strb	r3, [r4, #28]
                    current_stage_.stade_communication = SC_DOWNTIME;
 8002332:	2500      	movs	r5, #0
 8002334:	7525      	strb	r5, [r4, #20]
                    create_disconnet_packet(true);
 8002336:	2101      	movs	r1, #1
 8002338:	4620      	mov	r0, r4
 800233a:	f7ff fd43 	bl	8001dc4 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 800233e:	2101      	movs	r1, #1
 8002340:	4620      	mov	r0, r4
 8002342:	f7ff ff27 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 8002346:	4628      	mov	r0, r5
 8002348:	e7db      	b.n	8002302 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x20>
                    set_LoRa_mode_receive();
 800234a:	4620      	mov	r0, r4
 800234c:	f7ff feae 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002350:	2000      	movs	r0, #0
 8002352:	e7d6      	b.n	8002302 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x20>
                        current_stage_ = past_stage_;
 8002354:	69a0      	ldr	r0, [r4, #24]
 8002356:	f8c4 0013 	str.w	r0, [r4, #19]
 800235a:	7f23      	ldrb	r3, [r4, #28]
 800235c:	75e3      	strb	r3, [r4, #23]
 800235e:	e7e8      	b.n	8002332 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x50>
                if(check_packet_type(Packet_Type::CONNECTION, {0x08})) {
 8002360:	aa02      	add	r2, sp, #8
 8002362:	2308      	movs	r3, #8
 8002364:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8002368:	2100      	movs	r1, #0
 800236a:	4620      	mov	r0, r4
 800236c:	f7ff fdac 	bl	8001ec8 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002370:	b908      	cbnz	r0, 8002376 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x94>
    uint32_t error = 0;
 8002372:	2000      	movs	r0, #0
    return error;
 8002374:	e7c5      	b.n	8002302 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x20>
                    sort_num_packet();
 8002376:	4620      	mov	r0, r4
 8002378:	f7ff fe32 	bl	8001fe0 <_ZN17LoRa_contact_data15sort_num_packetEv>
                    contact_complete();
 800237c:	4620      	mov	r0, r4
 800237e:	f7ff ff9f 	bl	80022c0 <_ZN17LoRa_contact_data16contact_completeEv>
    uint32_t error = 0;
 8002382:	2000      	movs	r0, #0
 8002384:	e7bd      	b.n	8002302 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x20>
        error = 230;
 8002386:	20e6      	movs	r0, #230	; 0xe6
}
 8002388:	4770      	bx	lr

0800238a <_ZN17LoRa_contact_data14broadcast_sendEb>:
uint16_t LoRa_contact_data::broadcast_send(bool reply) {
 800238a:	b538      	push	{r3, r4, r5, lr}
    if(send_packet_len == 0)
 800238c:	f890 3134 	ldrb.w	r3, [r0, #308]	; 0x134
 8002390:	b90b      	cbnz	r3, 8002396 <_ZN17LoRa_contact_data14broadcast_sendEb+0xc>
        return 1;
 8002392:	2001      	movs	r0, #1
}
 8002394:	bd38      	pop	{r3, r4, r5, pc}
 8002396:	460d      	mov	r5, r1
 8002398:	4604      	mov	r4, r0
    set_LoRa_mode_sleep();
 800239a:	f7ff ff65 	bl	8002268 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>
    current_stage_.type_communication = TC_BROADCAST;
 800239e:	2302      	movs	r3, #2
 80023a0:	74e3      	strb	r3, [r4, #19]
    if(reply)
 80023a2:	b185      	cbz	r5, 80023c6 <_ZN17LoRa_contact_data14broadcast_sendEb+0x3c>
        current_stage_.stade_communication = SC_REPLY_BROADCAST;
 80023a4:	2308      	movs	r3, #8
 80023a6:	7523      	strb	r3, [r4, #20]
    past_stage_ = current_stage_;
 80023a8:	4623      	mov	r3, r4
 80023aa:	f853 0f13 	ldr.w	r0, [r3, #19]!
 80023ae:	61a0      	str	r0, [r4, #24]
 80023b0:	791b      	ldrb	r3, [r3, #4]
 80023b2:	7723      	strb	r3, [r4, #28]
    create_data_packet();
 80023b4:	4620      	mov	r0, r4
 80023b6:	f7ff fc0f 	bl	8001bd8 <_ZN17LoRa_contact_data18create_data_packetEv>
    set_LoRa_mode_send();
 80023ba:	2100      	movs	r1, #0
 80023bc:	4620      	mov	r0, r4
 80023be:	f7ff fee9 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    return 0;
 80023c2:	2000      	movs	r0, #0
 80023c4:	e7e6      	b.n	8002394 <_ZN17LoRa_contact_data14broadcast_sendEb+0xa>
        current_stage_.stade_communication = SC_BROADCASTING;
 80023c6:	2305      	movs	r3, #5
 80023c8:	7523      	strb	r3, [r4, #20]
 80023ca:	e7ed      	b.n	80023a8 <_ZN17LoRa_contact_data14broadcast_sendEb+0x1e>

080023cc <_ZN17LoRa_contact_data21broadcast_send_packetEv>:
    switch (module_state_) {
 80023cc:	7c83      	ldrb	r3, [r0, #18]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d125      	bne.n	800241e <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x52>
uint32_t LoRa_contact_data::broadcast_send_packet() {
 80023d2:	b510      	push	{r4, lr}
 80023d4:	4604      	mov	r4, r0
        for(unsigned int i = 0; i < send_flag_len; ++i)
 80023d6:	f890 2136 	ldrb.w	r2, [r0, #310]	; 0x136
 80023da:	b31a      	cbz	r2, 8002424 <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x58>
            if(send_flag_[i] == true) {
 80023dc:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 80023e0:	b953      	cbnz	r3, 80023f8 <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x2c>
 80023e2:	f100 03ac 	add.w	r3, r0, #172	; 0xac
 80023e6:	f100 01ab 	add.w	r1, r0, #171	; 0xab
 80023ea:	4411      	add	r1, r2
        for(unsigned int i = 0; i < send_flag_len; ++i)
 80023ec:	4299      	cmp	r1, r3
 80023ee:	d019      	beq.n	8002424 <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x58>
            if(send_flag_[i] == true) {
 80023f0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80023f4:	2a00      	cmp	r2, #0
 80023f6:	d0f9      	beq.n	80023ec <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x20>
            create_data_packet();
 80023f8:	4620      	mov	r0, r4
 80023fa:	f7ff fbed 	bl	8001bd8 <_ZN17LoRa_contact_data18create_data_packetEv>
            set_LoRa_mode_send();
 80023fe:	2100      	movs	r1, #0
 8002400:	4620      	mov	r0, r4
 8002402:	f7ff fec7 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 8002406:	2000      	movs	r0, #0
 8002408:	e01e      	b.n	8002448 <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x7c>
                current_stage_.stade_communication = SC_COMPLETE;
 800240a:	2304      	movs	r3, #4
 800240c:	7523      	strb	r3, [r4, #20]
                set_LoRa_mode_sleep();
 800240e:	4620      	mov	r0, r4
 8002410:	f7ff ff2a 	bl	8002268 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>
    uint32_t error = 0;
 8002414:	2000      	movs	r0, #0
 8002416:	e017      	b.n	8002448 <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x7c>
                    current_stage_.stade_communication = SC_PACKET_ACCEPTED;
 8002418:	2307      	movs	r3, #7
 800241a:	7523      	strb	r3, [r4, #20]
 800241c:	e010      	b.n	8002440 <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x74>
        error = 320;
 800241e:	f44f 70a0 	mov.w	r0, #320	; 0x140
}
 8002422:	4770      	bx	lr
            send_packet_len = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
			send_flag_len = 0;
 800242a:	f884 3136 	strb.w	r3, [r4, #310]	; 0x136
            if(current_stage_.stade_communication == SC_BROADCASTING) {
 800242e:	7d23      	ldrb	r3, [r4, #20]
 8002430:	2b05      	cmp	r3, #5
 8002432:	d0ea      	beq.n	800240a <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x3e>
                if(reciev_packet_len == 0)
 8002434:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1ed      	bne.n	8002418 <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x4c>
                    current_stage_.stade_communication = SC_WAITING;
 800243c:	2306      	movs	r3, #6
 800243e:	7523      	strb	r3, [r4, #20]
                set_LoRa_mode_receive();
 8002440:	4620      	mov	r0, r4
 8002442:	f7ff fe33 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002446:	2000      	movs	r0, #0
}
 8002448:	bd10      	pop	{r4, pc}
	...

0800244c <_ZN17LoRa_contact_data19work_contact_systemEv>:
uint32_t LoRa_contact_data::work_contact_system() {
 800244c:	b510      	push	{r4, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	4604      	mov	r4, r0
    if(((in_processing_) || (!lora_init_) || (!lora_begin_) || (current_stage_.stade_communication == SC_DOWNTIME) || (current_stage_.stade_communication == SC_COMPLETE)) && !use_past_stage)
 8002452:	f890 313a 	ldrb.w	r3, [r0, #314]	; 0x13a
 8002456:	b93b      	cbnz	r3, 8002468 <_ZN17LoRa_contact_data19work_contact_systemEv+0x1c>
 8002458:	7803      	ldrb	r3, [r0, #0]
 800245a:	b12b      	cbz	r3, 8002468 <_ZN17LoRa_contact_data19work_contact_systemEv+0x1c>
 800245c:	7843      	ldrb	r3, [r0, #1]
 800245e:	b11b      	cbz	r3, 8002468 <_ZN17LoRa_contact_data19work_contact_systemEv+0x1c>
 8002460:	7d03      	ldrb	r3, [r0, #20]
 8002462:	f013 0ffb 	tst.w	r3, #251	; 0xfb
 8002466:	d110      	bne.n	800248a <_ZN17LoRa_contact_data19work_contact_systemEv+0x3e>
 8002468:	7f63      	ldrb	r3, [r4, #29]
 800246a:	b15b      	cbz	r3, 8002484 <_ZN17LoRa_contact_data19work_contact_systemEv+0x38>
        use_stage = &past_stage_;
 800246c:	f104 0118 	add.w	r1, r4, #24
    switch (use_stage->type_communication) {
 8002470:	7e23      	ldrb	r3, [r4, #24]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d061      	beq.n	800253a <_ZN17LoRa_contact_data19work_contact_systemEv+0xee>
 8002476:	2b00      	cmp	r3, #0
 8002478:	d04a      	beq.n	8002510 <_ZN17LoRa_contact_data19work_contact_systemEv+0xc4>
 800247a:	2b02      	cmp	r3, #2
 800247c:	d03a      	beq.n	80024f4 <_ZN17LoRa_contact_data19work_contact_systemEv+0xa8>
        error = 400;
 800247e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002482:	e079      	b.n	8002578 <_ZN17LoRa_contact_data19work_contact_systemEv+0x12c>
        return 0;
 8002484:	2000      	movs	r0, #0
}
 8002486:	b004      	add	sp, #16
 8002488:	bd10      	pop	{r4, pc}
    if(!use_past_stage) {
 800248a:	7f43      	ldrb	r3, [r0, #29]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1ed      	bne.n	800246c <_ZN17LoRa_contact_data19work_contact_systemEv+0x20>
        in_processing_ = true;
 8002490:	2301      	movs	r3, #1
 8002492:	f880 313a 	strb.w	r3, [r0, #314]	; 0x13a
        if(module_state_ == MS_LoRa_RECIEVE) {
 8002496:	7c83      	ldrb	r3, [r0, #18]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d00b      	beq.n	80024b4 <_ZN17LoRa_contact_data19work_contact_systemEv+0x68>
        use_stage = &current_stage_;
 800249c:	f100 0113 	add.w	r1, r0, #19
    switch (use_stage->type_communication) {
 80024a0:	7cc3      	ldrb	r3, [r0, #19]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d049      	beq.n	800253a <_ZN17LoRa_contact_data19work_contact_systemEv+0xee>
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d032      	beq.n	8002510 <_ZN17LoRa_contact_data19work_contact_systemEv+0xc4>
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d022      	beq.n	80024f4 <_ZN17LoRa_contact_data19work_contact_systemEv+0xa8>
        error = 400;
 80024ae:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80024b2:	e05c      	b.n	800256e <_ZN17LoRa_contact_data19work_contact_systemEv+0x122>
            class LoRa_packet read_packet = LoRa.receiver_packet(0, 0);
 80024b4:	2200      	movs	r2, #0
 80024b6:	9201      	str	r2, [sp, #4]
 80024b8:	9200      	str	r2, [sp, #0]
 80024ba:	4613      	mov	r3, r2
 80024bc:	4936      	ldr	r1, [pc, #216]	; (8002598 <_ZN17LoRa_contact_data19work_contact_systemEv+0x14c>)
 80024be:	a802      	add	r0, sp, #8
 80024c0:	f001 fdce 	bl	8004060 <_ZN10LoRa_class15receiver_packetEhmbb>
            if(!((read_packet.get_len() < PACKET_HEADER_SIZE) || (read_packet.get_crc_error()))) {
 80024c4:	a802      	add	r0, sp, #8
 80024c6:	f002 f8bd 	bl	8004644 <_ZNK11LoRa_packet7get_lenEv>
 80024ca:	2808      	cmp	r0, #8
 80024cc:	d903      	bls.n	80024d6 <_ZN17LoRa_contact_data19work_contact_systemEv+0x8a>
 80024ce:	a802      	add	r0, sp, #8
 80024d0:	f002 f8be 	bl	8004650 <_ZNK11LoRa_packet13get_crc_errorEv>
 80024d4:	b1b0      	cbz	r0, 8002504 <_ZN17LoRa_contact_data19work_contact_systemEv+0xb8>
                last_receive_packet_.clear_packet();
 80024d6:	f104 0020 	add.w	r0, r4, #32
 80024da:	f002 f8a6 	bl	800462a <_ZN11LoRa_packet12clear_packetEv>
            class LoRa_packet read_packet = LoRa.receiver_packet(0, 0);
 80024de:	a802      	add	r0, sp, #8
 80024e0:	f002 f86f 	bl	80045c2 <_ZN11LoRa_packetD1Ev>
        use_stage = &current_stage_;
 80024e4:	f104 0113 	add.w	r1, r4, #19
    switch (use_stage->type_communication) {
 80024e8:	7ce3      	ldrb	r3, [r4, #19]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d025      	beq.n	800253a <_ZN17LoRa_contact_data19work_contact_systemEv+0xee>
 80024ee:	b17b      	cbz	r3, 8002510 <_ZN17LoRa_contact_data19work_contact_systemEv+0xc4>
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d14b      	bne.n	800258c <_ZN17LoRa_contact_data19work_contact_systemEv+0x140>
        switch (use_stage->stade_communication) {
 80024f4:	784b      	ldrb	r3, [r1, #1]
 80024f6:	3b05      	subs	r3, #5
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d84a      	bhi.n	8002592 <_ZN17LoRa_contact_data19work_contact_systemEv+0x146>
 80024fc:	e8df f003 	tbb	[pc, r3]
 8002500:	42323242 	.word	0x42323242
                last_receive_packet_ = read_packet;
 8002504:	a902      	add	r1, sp, #8
 8002506:	f104 0020 	add.w	r0, r4, #32
 800250a:	f002 f8ab 	bl	8004664 <_ZN11LoRa_packetaSERKS_>
 800250e:	e7e6      	b.n	80024de <_ZN17LoRa_contact_data19work_contact_systemEv+0x92>
        switch (use_stage->stade_communication) {
 8002510:	784b      	ldrb	r3, [r1, #1]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d009      	beq.n	800252a <_ZN17LoRa_contact_data19work_contact_systemEv+0xde>
 8002516:	2b03      	cmp	r3, #3
 8002518:	d00b      	beq.n	8002532 <_ZN17LoRa_contact_data19work_contact_systemEv+0xe6>
 800251a:	2b01      	cmp	r3, #1
 800251c:	d001      	beq.n	8002522 <_ZN17LoRa_contact_data19work_contact_systemEv+0xd6>
            error = 100;
 800251e:	2064      	movs	r0, #100	; 0x64
 8002520:	e023      	b.n	800256a <_ZN17LoRa_contact_data19work_contact_systemEv+0x11e>
            error = init_connection(*use_stage);
 8002522:	4620      	mov	r0, r4
 8002524:	f000 f981 	bl	800282a <_ZN17LoRa_contact_data15init_connectionER13Stage_control>
            break;
 8002528:	e01f      	b.n	800256a <_ZN17LoRa_contact_data19work_contact_systemEv+0x11e>
            error = init_exchange(*use_stage);
 800252a:	4620      	mov	r0, r4
 800252c:	f000 fb2e 	bl	8002b8c <_ZN17LoRa_contact_data13init_exchangeER13Stage_control>
            break;
 8002530:	e01b      	b.n	800256a <_ZN17LoRa_contact_data19work_contact_systemEv+0x11e>
            error = init_disconnect(*use_stage);
 8002532:	4620      	mov	r0, r4
 8002534:	f7ff fd9a 	bl	800206c <_ZN17LoRa_contact_data15init_disconnectER13Stage_control>
            break;
 8002538:	e017      	b.n	800256a <_ZN17LoRa_contact_data19work_contact_systemEv+0x11e>
        switch (use_stage->stade_communication) {
 800253a:	784b      	ldrb	r3, [r1, #1]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d009      	beq.n	8002554 <_ZN17LoRa_contact_data19work_contact_systemEv+0x108>
 8002540:	2b03      	cmp	r3, #3
 8002542:	d00b      	beq.n	800255c <_ZN17LoRa_contact_data19work_contact_systemEv+0x110>
 8002544:	2b01      	cmp	r3, #1
 8002546:	d001      	beq.n	800254c <_ZN17LoRa_contact_data19work_contact_systemEv+0x100>
            error = 200;
 8002548:	20c8      	movs	r0, #200	; 0xc8
 800254a:	e00e      	b.n	800256a <_ZN17LoRa_contact_data19work_contact_systemEv+0x11e>
            error = recip_connection(*use_stage);
 800254c:	4620      	mov	r0, r4
 800254e:	f000 fc0b 	bl	8002d68 <_ZN17LoRa_contact_data16recip_connectionER13Stage_control>
            break;
 8002552:	e00a      	b.n	800256a <_ZN17LoRa_contact_data19work_contact_systemEv+0x11e>
            error = recip_exchange(*use_stage);
 8002554:	4620      	mov	r0, r4
 8002556:	f000 fd4f 	bl	8002ff8 <_ZN17LoRa_contact_data14recip_exchangeER13Stage_control>
            break;
 800255a:	e006      	b.n	800256a <_ZN17LoRa_contact_data19work_contact_systemEv+0x11e>
            error = recip_disconnect(*use_stage);
 800255c:	4620      	mov	r0, r4
 800255e:	f7ff fec0 	bl	80022e2 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control>
            break;
 8002562:	e002      	b.n	800256a <_ZN17LoRa_contact_data19work_contact_systemEv+0x11e>
            error = broadcast_wait_packet();
 8002564:	4620      	mov	r0, r4
 8002566:	f7ff fde8 	bl	800213a <_ZN17LoRa_contact_data21broadcast_wait_packetEv>
    if(!use_past_stage)
 800256a:	7f63      	ldrb	r3, [r4, #29]
 800256c:	b913      	cbnz	r3, 8002574 <_ZN17LoRa_contact_data19work_contact_systemEv+0x128>
        in_processing_ = false;
 800256e:	2300      	movs	r3, #0
 8002570:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
    if(error != 0) {
 8002574:	2800      	cmp	r0, #0
 8002576:	d086      	beq.n	8002486 <_ZN17LoRa_contact_data19work_contact_systemEv+0x3a>
        start_connect_ = false;
 8002578:	2300      	movs	r3, #0
 800257a:	f884 3137 	strb.w	r3, [r4, #311]	; 0x137
        init_ = false;
 800257e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8002582:	e780      	b.n	8002486 <_ZN17LoRa_contact_data19work_contact_systemEv+0x3a>
            error = broadcast_send_packet();
 8002584:	4620      	mov	r0, r4
 8002586:	f7ff ff21 	bl	80023cc <_ZN17LoRa_contact_data21broadcast_send_packetEv>
            break;
 800258a:	e7ee      	b.n	800256a <_ZN17LoRa_contact_data19work_contact_systemEv+0x11e>
        error = 400;
 800258c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002590:	e7eb      	b.n	800256a <_ZN17LoRa_contact_data19work_contact_systemEv+0x11e>
            error = 300;
 8002592:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002596:	e7e8      	b.n	800256a <_ZN17LoRa_contact_data19work_contact_systemEv+0x11e>
 8002598:	20000370 	.word	0x20000370

0800259c <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control>:
uint32_t LoRa_contact_data::init_connection_expect(Stage_control& use_stage) {
 800259c:	b530      	push	{r4, r5, lr}
 800259e:	b085      	sub	sp, #20
 80025a0:	4604      	mov	r4, r0
    switch (module_state_) {
 80025a2:	7c83      	ldrb	r3, [r0, #18]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d003      	beq.n	80025b0 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x14>
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d006      	beq.n	80025ba <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x1e>
        error = 111;
 80025ac:	206f      	movs	r0, #111	; 0x6f
    return error;
 80025ae:	e002      	b.n	80025b6 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x1a>
        set_LoRa_mode_receive();
 80025b0:	f7ff fd7c 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 80025b4:	2000      	movs	r0, #0
}
 80025b6:	b005      	add	sp, #20
 80025b8:	bd30      	pop	{r4, r5, pc}
        if(!packet_dont_correct()) {
 80025ba:	2200      	movs	r2, #0
 80025bc:	4611      	mov	r1, r2
 80025be:	f7ff fc2f 	bl	8001e20 <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 80025c2:	bbc8      	cbnz	r0, 8002638 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x9c>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.I_connect) {
 80025c4:	f005 fb76 	bl	8007cb4 <HAL_GetTick>
 80025c8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80025cc:	1ac0      	subs	r0, r0, r3
 80025ce:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 80025d2:	4298      	cmp	r0, r3
 80025d4:	d30e      	bcc.n	80025f4 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x58>
                if(send_packet_amt_ < packet_constraints_.I_connect) {
 80025d6:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 80025da:	f894 2165 	ldrb.w	r2, [r4, #357]	; 0x165
 80025de:	429a      	cmp	r2, r3
 80025e0:	d90d      	bls.n	80025fe <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x62>
                    ++send_packet_amt_;
 80025e2:	3301      	adds	r3, #1
 80025e4:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    set_LoRa_mode_send();
 80025e8:	2100      	movs	r1, #0
 80025ea:	4620      	mov	r0, r4
 80025ec:	f7ff fdd2 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 80025f0:	2000      	movs	r0, #0
 80025f2:	e7e0      	b.n	80025b6 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x1a>
                set_LoRa_mode_receive();
 80025f4:	4620      	mov	r0, r4
 80025f6:	f7ff fd59 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 80025fa:	2000      	movs	r0, #0
 80025fc:	e7db      	b.n	80025b6 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x1a>
                    send_packet_amt_ = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    if(!use_past_stage)
 8002604:	7f63      	ldrb	r3, [r4, #29]
 8002606:	b98b      	cbnz	r3, 800262c <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x90>
                        past_stage_ = current_stage_;
 8002608:	4623      	mov	r3, r4
 800260a:	f853 0f13 	ldr.w	r0, [r3, #19]!
 800260e:	61a0      	str	r0, [r4, #24]
 8002610:	791b      	ldrb	r3, [r3, #4]
 8002612:	7723      	strb	r3, [r4, #28]
                    current_stage_.stade_communication = SC_DOWNTIME;
 8002614:	2300      	movs	r3, #0
 8002616:	7523      	strb	r3, [r4, #20]
                    create_disconnet_packet(true);
 8002618:	2101      	movs	r1, #1
 800261a:	4620      	mov	r0, r4
 800261c:	f7ff fbd2 	bl	8001dc4 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 8002620:	2101      	movs	r1, #1
 8002622:	4620      	mov	r0, r4
 8002624:	f7ff fdb6 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    error = 112;
 8002628:	2070      	movs	r0, #112	; 0x70
 800262a:	e7c4      	b.n	80025b6 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x1a>
                        current_stage_ = past_stage_;
 800262c:	69a0      	ldr	r0, [r4, #24]
 800262e:	f8c4 0013 	str.w	r0, [r4, #19]
 8002632:	7f23      	ldrb	r3, [r4, #28]
 8002634:	75e3      	strb	r3, [r4, #23]
 8002636:	e7ed      	b.n	8002614 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x78>
            if(check_packet_type(Packet_Type::CONNECTION, {0x01})) {
 8002638:	aa04      	add	r2, sp, #16
 800263a:	2301      	movs	r3, #1
 800263c:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8002640:	2100      	movs	r1, #0
 8002642:	4620      	mov	r0, r4
 8002644:	f7ff fc40 	bl	8001ec8 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002648:	2800      	cmp	r0, #0
 800264a:	d077      	beq.n	800273c <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x1a0>
                send_packet_amt_ = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                uint8_t data[2] = {0, 0};
 8002652:	f88d 300c 	strb.w	r3, [sp, #12]
 8002656:	f88d 300d 	strb.w	r3, [sp, #13]
                uint8_t com = 0x01;
 800265a:	2301      	movs	r3, #1
 800265c:	f88d 300a 	strb.w	r3, [sp, #10]
                uint8_t len = 1;
 8002660:	f88d 300b 	strb.w	r3, [sp, #11]
                if(amt_packet_ == 0xFF)
 8002664:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8002668:	2bff      	cmp	r3, #255	; 0xff
                    len = 2;
 800266a:	bf04      	itt	eq
 800266c:	2302      	moveq	r3, #2
 800266e:	f88d 300b 	strbeq.w	r3, [sp, #11]
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 8002672:	f10d 030b 	add.w	r3, sp, #11
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	ab03      	add	r3, sp, #12
 800267a:	f10d 020a 	add.w	r2, sp, #10
 800267e:	f104 0120 	add.w	r1, r4, #32
 8002682:	4836      	ldr	r0, [pc, #216]	; (800275c <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x1c0>)
 8002684:	f003 fb6a 	bl	8005d5c <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
                if(data[0] == 0) {
 8002688:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d140      	bne.n	8002712 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x176>
                    if(amt_packet_ == 0xFF) {
 8002690:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8002694:	2bff      	cmp	r3, #255	; 0xff
 8002696:	d013      	beq.n	80026c0 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x124>
                        if(!use_past_stage)
 8002698:	7f63      	ldrb	r3, [r4, #29]
 800269a:	bba3      	cbnz	r3, 8002706 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x16a>
                            past_stage_ = current_stage_;
 800269c:	4623      	mov	r3, r4
 800269e:	f853 0f13 	ldr.w	r0, [r3, #19]!
 80026a2:	61a0      	str	r0, [r4, #24]
 80026a4:	791b      	ldrb	r3, [r3, #4]
 80026a6:	7723      	strb	r3, [r4, #28]
                        current_stage_.exchange = E_BOARDCAST;
 80026a8:	2300      	movs	r3, #0
 80026aa:	75a3      	strb	r3, [r4, #22]
                        current_stage_.stade_communication = SC_EXCHANGE;
 80026ac:	2302      	movs	r3, #2
 80026ae:	7523      	strb	r3, [r4, #20]
                        create_data_packet();
 80026b0:	4620      	mov	r0, r4
 80026b2:	f7ff fa91 	bl	8001bd8 <_ZN17LoRa_contact_data18create_data_packetEv>
                        set_LoRa_mode_send(true);
 80026b6:	2101      	movs	r1, #1
 80026b8:	4620      	mov	r0, r4
 80026ba:	f7ff fd6b 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 80026be:	e035      	b.n	800272c <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x190>
                        if(!use_past_stage)
 80026c0:	7f63      	ldrb	r3, [r4, #29]
 80026c2:	b9d3      	cbnz	r3, 80026fa <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x15e>
                            past_stage_ = current_stage_;
 80026c4:	4623      	mov	r3, r4
 80026c6:	f853 0f13 	ldr.w	r0, [r3, #19]!
 80026ca:	61a0      	str	r0, [r4, #24]
 80026cc:	791b      	ldrb	r3, [r3, #4]
 80026ce:	7723      	strb	r3, [r4, #28]
                        current_stage_.type_communication = TC_RECIPIENT;
 80026d0:	2501      	movs	r5, #1
 80026d2:	74e5      	strb	r5, [r4, #19]
                        current_stage_.stade_communication = SC_EXCHANGE;
 80026d4:	2302      	movs	r3, #2
 80026d6:	7523      	strb	r3, [r4, #20]
                        current_stage_.exchange = E_BOARDCAST;
 80026d8:	2100      	movs	r1, #0
 80026da:	75a1      	strb	r1, [r4, #22]
                        expected_amt_packet_ = data[1];
 80026dc:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80026e0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
                        amt_packet_ = 0;
 80026e4:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
                        create_connect_packet(0, true); // уже не инициатор
 80026e8:	462a      	mov	r2, r5
 80026ea:	4620      	mov	r0, r4
 80026ec:	f7ff f9e2 	bl	8001ab4 <_ZN17LoRa_contact_data21create_connect_packetEhb>
                        set_LoRa_mode_send(true);
 80026f0:	4629      	mov	r1, r5
 80026f2:	4620      	mov	r0, r4
 80026f4:	f7ff fd4e 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 80026f8:	e018      	b.n	800272c <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x190>
                            current_stage_ = past_stage_;
 80026fa:	69a0      	ldr	r0, [r4, #24]
 80026fc:	f8c4 0013 	str.w	r0, [r4, #19]
 8002700:	7f23      	ldrb	r3, [r4, #28]
 8002702:	75e3      	strb	r3, [r4, #23]
 8002704:	e7e4      	b.n	80026d0 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x134>
                            current_stage_ = past_stage_;
 8002706:	69a0      	ldr	r0, [r4, #24]
 8002708:	f8c4 0013 	str.w	r0, [r4, #19]
 800270c:	7f23      	ldrb	r3, [r4, #28]
 800270e:	75e3      	strb	r3, [r4, #23]
 8002710:	e7ca      	b.n	80026a8 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x10c>
                    if(!use_past_stage)
 8002712:	7f63      	ldrb	r3, [r4, #29]
 8002714:	b963      	cbnz	r3, 8002730 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x194>
                        past_stage_ = current_stage_;
 8002716:	4623      	mov	r3, r4
 8002718:	f853 0f13 	ldr.w	r0, [r3, #19]!
 800271c:	61a0      	str	r0, [r4, #24]
 800271e:	791b      	ldrb	r3, [r3, #4]
 8002720:	7723      	strb	r3, [r4, #28]
                    current_stage_.connection = C_WAIT_RESET;
 8002722:	2301      	movs	r3, #1
 8002724:	7563      	strb	r3, [r4, #21]
                    set_LoRa_mode_receive();
 8002726:	4620      	mov	r0, r4
 8002728:	f7ff fcc0 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 800272c:	2000      	movs	r0, #0
 800272e:	e742      	b.n	80025b6 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x1a>
                        current_stage_ = past_stage_;
 8002730:	69a0      	ldr	r0, [r4, #24]
 8002732:	f8c4 0013 	str.w	r0, [r4, #19]
 8002736:	7f23      	ldrb	r3, [r4, #28]
 8002738:	75e3      	strb	r3, [r4, #23]
 800273a:	e7f2      	b.n	8002722 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x186>
                if(!use_past_stage) {
 800273c:	7f63      	ldrb	r3, [r4, #29]
 800273e:	b123      	cbz	r3, 800274a <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x1ae>
                    set_LoRa_mode_receive(); // -+-+-
 8002740:	4620      	mov	r0, r4
 8002742:	f7ff fcb3 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002746:	2000      	movs	r0, #0
 8002748:	e735      	b.n	80025b6 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x1a>
                    use_past_stage = true;
 800274a:	2301      	movs	r3, #1
 800274c:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 800274e:	4620      	mov	r0, r4
 8002750:	f7ff fe7c 	bl	800244c <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8002754:	2300      	movs	r3, #0
 8002756:	7763      	strb	r3, [r4, #29]
 8002758:	e72d      	b.n	80025b6 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x1a>
 800275a:	bf00      	nop
 800275c:	200023a4 	.word	0x200023a4

08002760 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control>:
uint32_t LoRa_contact_data::init_connection_wait(Stage_control& use_stage) {
 8002760:	b510      	push	{r4, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	4604      	mov	r4, r0
    switch (module_state_) {
 8002766:	7c83      	ldrb	r3, [r0, #18]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d003      	beq.n	8002774 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x14>
 800276c:	2b02      	cmp	r3, #2
 800276e:	d006      	beq.n	800277e <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x1e>
        error = 113;
 8002770:	2071      	movs	r0, #113	; 0x71
    return error;
 8002772:	e002      	b.n	800277a <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x1a>
        set_LoRa_mode_receive();
 8002774:	f7ff fc9a 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002778:	2000      	movs	r0, #0
}
 800277a:	b002      	add	sp, #8
 800277c:	bd10      	pop	{r4, pc}
        if(!packet_dont_correct()) {
 800277e:	2200      	movs	r2, #0
 8002780:	4611      	mov	r1, r2
 8002782:	f7ff fb4d 	bl	8001e20 <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002786:	bb38      	cbnz	r0, 80027d8 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x78>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.I_wait_connect) {
 8002788:	f005 fa94 	bl	8007cb4 <HAL_GetTick>
 800278c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002790:	1ac0      	subs	r0, r0, r3
 8002792:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8002796:	4298      	cmp	r0, r3
 8002798:	d204      	bcs.n	80027a4 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x44>
                set_LoRa_mode_receive();
 800279a:	4620      	mov	r0, r4
 800279c:	f7ff fc86 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 80027a0:	2000      	movs	r0, #0
 80027a2:	e7ea      	b.n	800277a <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x1a>
                if(!use_past_stage)
 80027a4:	7f63      	ldrb	r3, [r4, #29]
 80027a6:	b98b      	cbnz	r3, 80027cc <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x6c>
                    past_stage_ = current_stage_;
 80027a8:	4623      	mov	r3, r4
 80027aa:	f853 0f13 	ldr.w	r0, [r3, #19]!
 80027ae:	61a0      	str	r0, [r4, #24]
 80027b0:	791b      	ldrb	r3, [r3, #4]
 80027b2:	7723      	strb	r3, [r4, #28]
                current_stage_.stade_communication = SC_DOWNTIME;
 80027b4:	2300      	movs	r3, #0
 80027b6:	7523      	strb	r3, [r4, #20]
                create_disconnet_packet(true);
 80027b8:	2101      	movs	r1, #1
 80027ba:	4620      	mov	r0, r4
 80027bc:	f7ff fb02 	bl	8001dc4 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                set_LoRa_mode_send(true);
 80027c0:	2101      	movs	r1, #1
 80027c2:	4620      	mov	r0, r4
 80027c4:	f7ff fce6 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                error = 114;
 80027c8:	2072      	movs	r0, #114	; 0x72
 80027ca:	e7d6      	b.n	800277a <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x1a>
                    current_stage_ = past_stage_;
 80027cc:	69a0      	ldr	r0, [r4, #24]
 80027ce:	f8c4 0013 	str.w	r0, [r4, #19]
 80027d2:	7f23      	ldrb	r3, [r4, #28]
 80027d4:	75e3      	strb	r3, [r4, #23]
 80027d6:	e7ed      	b.n	80027b4 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x54>
            if(check_packet_type(Packet_Type::CONNECTION, {0x02})) {
 80027d8:	aa02      	add	r2, sp, #8
 80027da:	2302      	movs	r3, #2
 80027dc:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80027e0:	2100      	movs	r1, #0
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7ff fb70 	bl	8001ec8 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 80027e8:	b180      	cbz	r0, 800280c <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0xac>
                if(!use_past_stage)
 80027ea:	7f63      	ldrb	r3, [r4, #29]
 80027ec:	b943      	cbnz	r3, 8002800 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0xa0>
                    past_stage_ = current_stage_;
 80027ee:	4623      	mov	r3, r4
 80027f0:	f853 0f13 	ldr.w	r0, [r3, #19]!
 80027f4:	61a0      	str	r0, [r4, #24]
 80027f6:	791b      	ldrb	r3, [r3, #4]
 80027f8:	7723      	strb	r3, [r4, #28]
                current_stage_.connection = C_EXPECTATION; // ??? (?) -----
 80027fa:	2000      	movs	r0, #0
 80027fc:	7560      	strb	r0, [r4, #21]
 80027fe:	e7bc      	b.n	800277a <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x1a>
                    current_stage_ = past_stage_;
 8002800:	69a0      	ldr	r0, [r4, #24]
 8002802:	f8c4 0013 	str.w	r0, [r4, #19]
 8002806:	7f23      	ldrb	r3, [r4, #28]
 8002808:	75e3      	strb	r3, [r4, #23]
 800280a:	e7f6      	b.n	80027fa <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x9a>
                if(!use_past_stage) {
 800280c:	7f63      	ldrb	r3, [r4, #29]
 800280e:	b123      	cbz	r3, 800281a <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0xba>
                    set_LoRa_mode_receive(); // -+-+-
 8002810:	4620      	mov	r0, r4
 8002812:	f7ff fc4b 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002816:	2000      	movs	r0, #0
 8002818:	e7af      	b.n	800277a <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x1a>
                    use_past_stage = true;
 800281a:	2301      	movs	r3, #1
 800281c:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 800281e:	4620      	mov	r0, r4
 8002820:	f7ff fe14 	bl	800244c <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8002824:	2300      	movs	r3, #0
 8002826:	7763      	strb	r3, [r4, #29]
 8002828:	e7a7      	b.n	800277a <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x1a>

0800282a <_ZN17LoRa_contact_data15init_connectionER13Stage_control>:
uint32_t LoRa_contact_data::init_connection(Stage_control& use_stage) {
 800282a:	b508      	push	{r3, lr}
    switch (use_stage.connection) {
 800282c:	788b      	ldrb	r3, [r1, #2]
 800282e:	b11b      	cbz	r3, 8002838 <_ZN17LoRa_contact_data15init_connectionER13Stage_control+0xe>
 8002830:	2b01      	cmp	r3, #1
 8002832:	d004      	beq.n	800283e <_ZN17LoRa_contact_data15init_connectionER13Stage_control+0x14>
        error = 110;
 8002834:	206e      	movs	r0, #110	; 0x6e
    return error;
 8002836:	e001      	b.n	800283c <_ZN17LoRa_contact_data15init_connectionER13Stage_control+0x12>
        error = init_connection_expect(use_stage);
 8002838:	f7ff feb0 	bl	800259c <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control>
}
 800283c:	bd08      	pop	{r3, pc}
        error = init_connection_wait(use_stage);
 800283e:	f7ff ff8f 	bl	8002760 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control>
        break;
 8002842:	e7fb      	b.n	800283c <_ZN17LoRa_contact_data15init_connectionER13Stage_control+0x12>

08002844 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control>:
uint32_t LoRa_contact_data::init_exchange_wait_confirmation(Stage_control& use_stage) {
 8002844:	b510      	push	{r4, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	4604      	mov	r4, r0
    switch (module_state_) {
 800284a:	7c83      	ldrb	r3, [r0, #18]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d003      	beq.n	8002858 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x14>
 8002850:	2b02      	cmp	r3, #2
 8002852:	d006      	beq.n	8002862 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x1e>
        error = 122;
 8002854:	207a      	movs	r0, #122	; 0x7a
    return error;
 8002856:	e002      	b.n	800285e <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x1a>
        set_LoRa_mode_receive();
 8002858:	f7ff fc28 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 800285c:	2000      	movs	r0, #0
}
 800285e:	b004      	add	sp, #16
 8002860:	bd10      	pop	{r4, pc}
        if(!packet_dont_correct()) {
 8002862:	2200      	movs	r2, #0
 8002864:	4611      	mov	r1, r2
 8002866:	f7ff fadb 	bl	8001e20 <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 800286a:	bbc8      	cbnz	r0, 80028e0 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x9c>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.I_amt_pack) {
 800286c:	f005 fa22 	bl	8007cb4 <HAL_GetTick>
 8002870:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002874:	1ac0      	subs	r0, r0, r3
 8002876:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 800287a:	4298      	cmp	r0, r3
 800287c:	d30e      	bcc.n	800289c <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x58>
                if(send_packet_amt_ < packet_constraints_.I_amt_pack) {
 800287e:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 8002882:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
 8002886:	429a      	cmp	r2, r3
 8002888:	d90d      	bls.n	80028a6 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x62>
                    ++send_packet_amt_;
 800288a:	3301      	adds	r3, #1
 800288c:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    set_LoRa_mode_send();
 8002890:	2100      	movs	r1, #0
 8002892:	4620      	mov	r0, r4
 8002894:	f7ff fc7e 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 8002898:	2000      	movs	r0, #0
 800289a:	e7e0      	b.n	800285e <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x1a>
                set_LoRa_mode_receive();
 800289c:	4620      	mov	r0, r4
 800289e:	f7ff fc05 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 80028a2:	2000      	movs	r0, #0
 80028a4:	e7db      	b.n	800285e <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x1a>
                    send_packet_amt_ = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    if(!use_past_stage)
 80028ac:	7f63      	ldrb	r3, [r4, #29]
 80028ae:	b98b      	cbnz	r3, 80028d4 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x90>
                        past_stage_ = current_stage_;
 80028b0:	4623      	mov	r3, r4
 80028b2:	f853 0f13 	ldr.w	r0, [r3, #19]!
 80028b6:	61a0      	str	r0, [r4, #24]
 80028b8:	791b      	ldrb	r3, [r3, #4]
 80028ba:	7723      	strb	r3, [r4, #28]
                    current_stage_.stade_communication = SC_DOWNTIME;
 80028bc:	2300      	movs	r3, #0
 80028be:	7523      	strb	r3, [r4, #20]
                    create_disconnet_packet(true);
 80028c0:	2101      	movs	r1, #1
 80028c2:	4620      	mov	r0, r4
 80028c4:	f7ff fa7e 	bl	8001dc4 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 80028c8:	2101      	movs	r1, #1
 80028ca:	4620      	mov	r0, r4
 80028cc:	f7ff fc62 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    error = 123;
 80028d0:	207b      	movs	r0, #123	; 0x7b
 80028d2:	e7c4      	b.n	800285e <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x1a>
                        current_stage_ = past_stage_;
 80028d4:	69a0      	ldr	r0, [r4, #24]
 80028d6:	f8c4 0013 	str.w	r0, [r4, #19]
 80028da:	7f23      	ldrb	r3, [r4, #28]
 80028dc:	75e3      	strb	r3, [r4, #23]
 80028de:	e7ed      	b.n	80028bc <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x78>
            if(check_packet_type(Packet_Type::CONNECTION, {0x04})) {
 80028e0:	aa04      	add	r2, sp, #16
 80028e2:	2304      	movs	r3, #4
 80028e4:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80028e8:	2100      	movs	r1, #0
 80028ea:	4620      	mov	r0, r4
 80028ec:	f7ff faec 	bl	8001ec8 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 80028f0:	b938      	cbnz	r0, 8002902 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0xbe>
                if(!use_past_stage) {
 80028f2:	7f63      	ldrb	r3, [r4, #29]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d045      	beq.n	8002984 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x140>
                    set_LoRa_mode_receive(); // -+-+-
 80028f8:	4620      	mov	r0, r4
 80028fa:	f7ff fbd7 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 80028fe:	2000      	movs	r0, #0
 8002900:	e7ad      	b.n	800285e <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x1a>
                send_packet_amt_ = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                uint8_t data[1] = {0};
 8002908:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t com = 0x04;
 800290c:	2304      	movs	r3, #4
 800290e:	f88d 300d 	strb.w	r3, [sp, #13]
                uint8_t len = 1;
 8002912:	2301      	movs	r3, #1
 8002914:	f88d 300e 	strb.w	r3, [sp, #14]
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 8002918:	f10d 030e 	add.w	r3, sp, #14
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	ab03      	add	r3, sp, #12
 8002920:	f10d 020d 	add.w	r2, sp, #13
 8002924:	f104 0120 	add.w	r1, r4, #32
 8002928:	481a      	ldr	r0, [pc, #104]	; (8002994 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x150>)
 800292a:	f003 fa17 	bl	8005d5c <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
                if(data[0] == amt_packet_) {
 800292e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8002932:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8002936:	429a      	cmp	r2, r3
 8002938:	d012      	beq.n	8002960 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x11c>
                    if(!use_past_stage)
 800293a:	7f63      	ldrb	r3, [r4, #29]
 800293c:	b9e3      	cbnz	r3, 8002978 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x134>
                        past_stage_ = current_stage_;
 800293e:	4623      	mov	r3, r4
 8002940:	f853 0f13 	ldr.w	r0, [r3, #19]!
 8002944:	61a0      	str	r0, [r4, #24]
 8002946:	791b      	ldrb	r3, [r3, #4]
 8002948:	7723      	strb	r3, [r4, #28]
                    current_stage_.exchange = E_WAITING_NUMBERS;
 800294a:	2302      	movs	r3, #2
 800294c:	75a3      	strb	r3, [r4, #22]
                    create_number_packet();
 800294e:	4620      	mov	r0, r4
 8002950:	f7ff f9b0 	bl	8001cb4 <_ZN17LoRa_contact_data20create_number_packetEv>
                    set_LoRa_mode_send();
 8002954:	2100      	movs	r1, #0
 8002956:	4620      	mov	r0, r4
 8002958:	f7ff fc1c 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 800295c:	2000      	movs	r0, #0
 800295e:	e77e      	b.n	800285e <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x1a>
                    contact_complete();
 8002960:	4620      	mov	r0, r4
 8002962:	f7ff fcad 	bl	80022c0 <_ZN17LoRa_contact_data16contact_completeEv>
                    create_disconnet_packet();
 8002966:	2100      	movs	r1, #0
 8002968:	4620      	mov	r0, r4
 800296a:	f7ff fa2b 	bl	8001dc4 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 800296e:	2101      	movs	r1, #1
 8002970:	4620      	mov	r0, r4
 8002972:	f7ff fc0f 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 8002976:	e7f1      	b.n	800295c <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x118>
                        current_stage_ = past_stage_;
 8002978:	69a0      	ldr	r0, [r4, #24]
 800297a:	f8c4 0013 	str.w	r0, [r4, #19]
 800297e:	7f23      	ldrb	r3, [r4, #28]
 8002980:	75e3      	strb	r3, [r4, #23]
 8002982:	e7e2      	b.n	800294a <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x106>
                    use_past_stage = true;
 8002984:	2301      	movs	r3, #1
 8002986:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 8002988:	4620      	mov	r0, r4
 800298a:	f7ff fd5f 	bl	800244c <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 800298e:	2300      	movs	r3, #0
 8002990:	7763      	strb	r3, [r4, #29]
 8002992:	e764      	b.n	800285e <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x1a>
 8002994:	200023a4 	.word	0x200023a4

08002998 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control>:
uint32_t LoRa_contact_data::init_exchange_wait_numbers(Stage_control& use_stage) {
 8002998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800299a:	b08d      	sub	sp, #52	; 0x34
 800299c:	4604      	mov	r4, r0
    switch (module_state_) {
 800299e:	7c83      	ldrb	r3, [r0, #18]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d003      	beq.n	80029ac <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x14>
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d006      	beq.n	80029b6 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1e>
        error = 124;
 80029a8:	207c      	movs	r0, #124	; 0x7c
    return error;
 80029aa:	e002      	b.n	80029b2 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1a>
        set_LoRa_mode_receive();
 80029ac:	f7ff fb7e 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 80029b0:	2000      	movs	r0, #0
}
 80029b2:	b00d      	add	sp, #52	; 0x34
 80029b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(!packet_dont_correct()) {
 80029b6:	2200      	movs	r2, #0
 80029b8:	4611      	mov	r1, r2
 80029ba:	f7ff fa31 	bl	8001e20 <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 80029be:	bbc8      	cbnz	r0, 8002a34 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x9c>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.I_num_pack) {
 80029c0:	f005 f978 	bl	8007cb4 <HAL_GetTick>
 80029c4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80029c8:	1ac0      	subs	r0, r0, r3
 80029ca:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 80029ce:	4298      	cmp	r0, r3
 80029d0:	d30e      	bcc.n	80029f0 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x58>
                if(send_packet_amt_ < packet_constraints_.I_num_pack) {
 80029d2:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 80029d6:	f894 2167 	ldrb.w	r2, [r4, #359]	; 0x167
 80029da:	429a      	cmp	r2, r3
 80029dc:	d90d      	bls.n	80029fa <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x62>
                    ++send_packet_amt_;
 80029de:	3301      	adds	r3, #1
 80029e0:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    set_LoRa_mode_send();
 80029e4:	2100      	movs	r1, #0
 80029e6:	4620      	mov	r0, r4
 80029e8:	f7ff fbd4 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 80029ec:	2000      	movs	r0, #0
 80029ee:	e7e0      	b.n	80029b2 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1a>
                set_LoRa_mode_receive();
 80029f0:	4620      	mov	r0, r4
 80029f2:	f7ff fb5b 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 80029f6:	2000      	movs	r0, #0
 80029f8:	e7db      	b.n	80029b2 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1a>
                    send_packet_amt_ = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    if(!use_past_stage)
 8002a00:	7f63      	ldrb	r3, [r4, #29]
 8002a02:	b98b      	cbnz	r3, 8002a28 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x90>
                        past_stage_ = current_stage_;
 8002a04:	4623      	mov	r3, r4
 8002a06:	f853 0f13 	ldr.w	r0, [r3, #19]!
 8002a0a:	61a0      	str	r0, [r4, #24]
 8002a0c:	791b      	ldrb	r3, [r3, #4]
 8002a0e:	7723      	strb	r3, [r4, #28]
                    current_stage_.stade_communication = SC_DOWNTIME;
 8002a10:	2300      	movs	r3, #0
 8002a12:	7523      	strb	r3, [r4, #20]
                    create_disconnet_packet(true);
 8002a14:	2101      	movs	r1, #1
 8002a16:	4620      	mov	r0, r4
 8002a18:	f7ff f9d4 	bl	8001dc4 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	4620      	mov	r0, r4
 8002a20:	f7ff fbb8 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    error = 125;
 8002a24:	207d      	movs	r0, #125	; 0x7d
 8002a26:	e7c4      	b.n	80029b2 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1a>
                        current_stage_ = past_stage_;
 8002a28:	69a0      	ldr	r0, [r4, #24]
 8002a2a:	f8c4 0013 	str.w	r0, [r4, #19]
 8002a2e:	7f23      	ldrb	r3, [r4, #28]
 8002a30:	75e3      	strb	r3, [r4, #23]
 8002a32:	e7ed      	b.n	8002a10 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x78>
            if(check_packet_type(Packet_Type::CONNECTION, {0x06})) {
 8002a34:	aa0c      	add	r2, sp, #48	; 0x30
 8002a36:	2306      	movs	r3, #6
 8002a38:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f7ff fa42 	bl	8001ec8 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002a44:	2800      	cmp	r0, #0
 8002a46:	f000 808a 	beq.w	8002b5e <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1c6>
                if(!use_past_stage)
 8002a4a:	7f63      	ldrb	r3, [r4, #29]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d152      	bne.n	8002af6 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x15e>
                    past_stage_ = current_stage_;
 8002a50:	4623      	mov	r3, r4
 8002a52:	f853 0f13 	ldr.w	r0, [r3, #19]!
 8002a56:	61a0      	str	r0, [r4, #24]
 8002a58:	791b      	ldrb	r3, [r3, #4]
 8002a5a:	7723      	strb	r3, [r4, #28]
                current_stage_.exchange = E_BOARDCAST;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	75a3      	strb	r3, [r4, #22]
                send_packet_amt_ = 0;
 8002a60:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                uint8_t size = 0;
 8002a64:	aa0c      	add	r2, sp, #48	; 0x30
 8002a66:	f802 3d23 	strb.w	r3, [r2, #-35]!
                packet_connection.get_size_by_packet(last_receive_packet_, size);
 8002a6a:	f104 0520 	add.w	r5, r4, #32
 8002a6e:	4629      	mov	r1, r5
 8002a70:	4845      	ldr	r0, [pc, #276]	; (8002b88 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1f0>)
 8002a72:	f003 f985 	bl	8005d80 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh>
                if(size != 0)
 8002a76:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002a7a:	2800      	cmp	r0, #0
 8002a7c:	d141      	bne.n	8002b02 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x16a>
                uint8_t com = 0xFF;
 8002a7e:	23ff      	movs	r3, #255	; 0xff
 8002a80:	f88d 300e 	strb.w	r3, [sp, #14]
                uint8_t len = 0xFF;
 8002a84:	f88d 300f 	strb.w	r3, [sp, #15]
                packet_connection.get_packet_data(last_receive_packet_, &com, data, &len);
 8002a88:	f10d 030f 	add.w	r3, sp, #15
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f10d 020e 	add.w	r2, sp, #14
 8002a94:	4629      	mov	r1, r5
 8002a96:	483c      	ldr	r0, [pc, #240]	; (8002b88 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1f0>)
 8002a98:	f003 f960 	bl	8005d5c <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
                if (com != 0x06) {
 8002a9c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002aa0:	2b06      	cmp	r3, #6
 8002aa2:	d148      	bne.n	8002b36 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x19e>
					for(int i = 0; i < len/2; ++i) {
 8002aa4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8002aa8:	0852      	lsrs	r2, r2, #1
 8002aaa:	4694      	mov	ip, r2
 8002aac:	2a00      	cmp	r2, #0
 8002aae:	d065      	beq.n	8002b7c <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1e4>
                uint8_t *data = nullptr;
 8002ab0:	2600      	movs	r6, #0
 8002ab2:	4635      	mov	r5, r6
					for(int i = 0; i < len/2; ++i) {
 8002ab4:	2300      	movs	r3, #0
						pack_num[pack_num_len++] = (((uint16_t)data[i*2]) << 8) | (data[i*2+1]);
 8002ab6:	b2d9      	uxtb	r1, r3
 8002ab8:	a80c      	add	r0, sp, #48	; 0x30
 8002aba:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8002abe:	f816 7013 	ldrb.w	r7, [r6, r3, lsl #1]
 8002ac2:	7868      	ldrb	r0, [r5, #1]
 8002ac4:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
 8002ac8:	f821 0c20 	strh.w	r0, [r1, #-32]
					for(int i = 0; i < len/2; ++i) {
 8002acc:	3301      	adds	r3, #1
 8002ace:	3502      	adds	r5, #2
 8002ad0:	4563      	cmp	r3, ip
 8002ad2:	d1f0      	bne.n	8002ab6 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x11e>
                    pop_num_packet(pack_num, pack_num_len);
 8002ad4:	a904      	add	r1, sp, #16
 8002ad6:	4620      	mov	r0, r4
 8002ad8:	f7ff fa34 	bl	8001f44 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh>
                    if(data != nullptr)
 8002adc:	b116      	cbz	r6, 8002ae4 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x14c>
                        delete[] data;
 8002ade:	4630      	mov	r0, r6
 8002ae0:	f007 ffaa 	bl	800aa38 <_ZdaPv>
                    create_data_packet();
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f7ff f877 	bl	8001bd8 <_ZN17LoRa_contact_data18create_data_packetEv>
                    set_LoRa_mode_send(true);
 8002aea:	2101      	movs	r1, #1
 8002aec:	4620      	mov	r0, r4
 8002aee:	f7ff fb51 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 8002af2:	2000      	movs	r0, #0
 8002af4:	e75d      	b.n	80029b2 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1a>
                    current_stage_ = past_stage_;
 8002af6:	69a0      	ldr	r0, [r4, #24]
 8002af8:	f8c4 0013 	str.w	r0, [r4, #19]
 8002afc:	7f23      	ldrb	r3, [r4, #28]
 8002afe:	75e3      	strb	r3, [r4, #23]
 8002b00:	e7ac      	b.n	8002a5c <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0xc4>
                    data = new uint8_t[size];
 8002b02:	f007 ff9b 	bl	800aa3c <_Znaj>
 8002b06:	4606      	mov	r6, r0
                uint8_t com = 0xFF;
 8002b08:	23ff      	movs	r3, #255	; 0xff
 8002b0a:	f88d 300e 	strb.w	r3, [sp, #14]
                uint8_t len = 0xFF;
 8002b0e:	f88d 300f 	strb.w	r3, [sp, #15]
                packet_connection.get_packet_data(last_receive_packet_, &com, data, &len);
 8002b12:	f10d 030f 	add.w	r3, sp, #15
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f10d 020e 	add.w	r2, sp, #14
 8002b1e:	4629      	mov	r1, r5
 8002b20:	4819      	ldr	r0, [pc, #100]	; (8002b88 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1f0>)
 8002b22:	f003 f91b 	bl	8005d5c <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
                if (com != 0x06) {
 8002b26:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002b2a:	2b06      	cmp	r3, #6
 8002b2c:	d00f      	beq.n	8002b4e <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1b6>
                    if(data != nullptr)
 8002b2e:	b116      	cbz	r6, 8002b36 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x19e>
                        delete[] data;
 8002b30:	4630      	mov	r0, r6
 8002b32:	f007 ff81 	bl	800aa38 <_ZdaPv>
                    current_stage_.stade_communication = SC_DOWNTIME;
 8002b36:	2300      	movs	r3, #0
 8002b38:	7523      	strb	r3, [r4, #20]
                    create_disconnet_packet(true);
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	f7ff f941 	bl	8001dc4 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 8002b42:	2101      	movs	r1, #1
 8002b44:	4620      	mov	r0, r4
 8002b46:	f7ff fb25 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    error = 126;
 8002b4a:	207e      	movs	r0, #126	; 0x7e
 8002b4c:	e731      	b.n	80029b2 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1a>
					for(int i = 0; i < len/2; ++i) {
 8002b4e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8002b52:	0852      	lsrs	r2, r2, #1
 8002b54:	4694      	mov	ip, r2
 8002b56:	2a00      	cmp	r2, #0
 8002b58:	d1ab      	bne.n	8002ab2 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x11a>
					uint8_t pack_num_len = 0;;
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	e7ba      	b.n	8002ad4 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x13c>
                if(!use_past_stage) {
 8002b5e:	7f63      	ldrb	r3, [r4, #29]
 8002b60:	b123      	cbz	r3, 8002b6c <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1d4>
                    set_LoRa_mode_receive(); // -+-+-
 8002b62:	4620      	mov	r0, r4
 8002b64:	f7ff faa2 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002b68:	2000      	movs	r0, #0
 8002b6a:	e722      	b.n	80029b2 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1a>
                    use_past_stage = true;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 8002b70:	4620      	mov	r0, r4
 8002b72:	f7ff fc6b 	bl	800244c <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8002b76:	2300      	movs	r3, #0
 8002b78:	7763      	strb	r3, [r4, #29]
 8002b7a:	e71a      	b.n	80029b2 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1a>
                    pop_num_packet(pack_num, pack_num_len);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	a904      	add	r1, sp, #16
 8002b80:	4620      	mov	r0, r4
 8002b82:	f7ff f9df 	bl	8001f44 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh>
 8002b86:	e7ad      	b.n	8002ae4 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x14c>
 8002b88:	200023a4 	.word	0x200023a4

08002b8c <_ZN17LoRa_contact_data13init_exchangeER13Stage_control>:
uint32_t LoRa_contact_data::init_exchange(Stage_control& use_stage) {
 8002b8c:	b508      	push	{r3, lr}
    switch (use_stage.exchange) {
 8002b8e:	78cb      	ldrb	r3, [r1, #3]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d007      	beq.n	8002ba4 <_ZN17LoRa_contact_data13init_exchangeER13Stage_control+0x18>
 8002b94:	b11b      	cbz	r3, 8002b9e <_ZN17LoRa_contact_data13init_exchangeER13Stage_control+0x12>
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d007      	beq.n	8002baa <_ZN17LoRa_contact_data13init_exchangeER13Stage_control+0x1e>
        error = 120;
 8002b9a:	2078      	movs	r0, #120	; 0x78
    return error;
 8002b9c:	e001      	b.n	8002ba2 <_ZN17LoRa_contact_data13init_exchangeER13Stage_control+0x16>
        error = init_exchange_boardcast(use_stage);
 8002b9e:	f7ff fb27 	bl	80021f0 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control>
}
 8002ba2:	bd08      	pop	{r3, pc}
        error = init_exchange_wait_confirmation(use_stage);
 8002ba4:	f7ff fe4e 	bl	8002844 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control>
        break;
 8002ba8:	e7fb      	b.n	8002ba2 <_ZN17LoRa_contact_data13init_exchangeER13Stage_control+0x16>
        error = init_exchange_wait_numbers(use_stage);
 8002baa:	f7ff fef5 	bl	8002998 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control>
        break;
 8002bae:	e7f8      	b.n	8002ba2 <_ZN17LoRa_contact_data13init_exchangeER13Stage_control+0x16>

08002bb0 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control>:
uint32_t LoRa_contact_data::recip_connection_wait_request(Stage_control& use_stage) {
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	4604      	mov	r4, r0
    switch (module_state_) {
 8002bb6:	7c83      	ldrb	r3, [r0, #18]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d003      	beq.n	8002bc4 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x14>
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d006      	beq.n	8002bce <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1e>
        error = 212;
 8002bc0:	20d4      	movs	r0, #212	; 0xd4
    return error;
 8002bc2:	e002      	b.n	8002bca <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1a>
        set_LoRa_mode_receive();
 8002bc4:	f7ff fa72 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002bc8:	2000      	movs	r0, #0
}
 8002bca:	b004      	add	sp, #16
 8002bcc:	bd70      	pop	{r4, r5, r6, pc}
        if(!packet_dont_correct(true)) {
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	f7ff f925 	bl	8001e20 <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002bd6:	2800      	cmp	r0, #0
 8002bd8:	d144      	bne.n	8002c64 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0xb4>
            if(!packet_dont_correct(true, true)) {
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4611      	mov	r1, r2
 8002bde:	4620      	mov	r0, r4
 8002be0:	f7ff f91e 	bl	8001e20 <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002be4:	bbc8      	cbnz	r0, 8002c5a <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0xaa>
                if (send_wait_reset_packet_)
 8002be6:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
 8002bea:	b38b      	cbz	r3, 8002c50 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0xa0>
                    if(HAL_GetTick() - time_last_packet_ < time_constraints_.R_connect) {
 8002bec:	f005 f862 	bl	8007cb4 <HAL_GetTick>
 8002bf0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002bf4:	1ac0      	subs	r0, r0, r3
 8002bf6:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8002bfa:	4298      	cmp	r0, r3
 8002bfc:	d30e      	bcc.n	8002c1c <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x6c>
                        if(send_packet_amt_ < packet_constraints_.R_wait_connect) {
 8002bfe:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 8002c02:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d90d      	bls.n	8002c26 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x76>
                            ++send_packet_amt_;
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                            set_LoRa_mode_send();
 8002c10:	2100      	movs	r1, #0
 8002c12:	4620      	mov	r0, r4
 8002c14:	f7ff fabe 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 8002c18:	2000      	movs	r0, #0
 8002c1a:	e7d6      	b.n	8002bca <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1a>
                        set_LoRa_mode_receive();
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	f7ff fa45 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002c22:	2000      	movs	r0, #0
 8002c24:	e7d1      	b.n	8002bca <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1a>
                            send_packet_amt_ = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                            if(!use_past_stage)
 8002c2c:	7f63      	ldrb	r3, [r4, #29]
 8002c2e:	b94b      	cbnz	r3, 8002c44 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x94>
                                past_stage_ = current_stage_;
 8002c30:	4623      	mov	r3, r4
 8002c32:	f853 0f13 	ldr.w	r0, [r3, #19]!
 8002c36:	61a0      	str	r0, [r4, #24]
 8002c38:	791b      	ldrb	r3, [r3, #4]
 8002c3a:	7723      	strb	r3, [r4, #28]
                            current_stage_.connection = C_QUEUE_CHECK;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	7563      	strb	r3, [r4, #21]
                            error = 213;
 8002c40:	20d5      	movs	r0, #213	; 0xd5
 8002c42:	e7c2      	b.n	8002bca <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1a>
                                current_stage_ = past_stage_;
 8002c44:	69a0      	ldr	r0, [r4, #24]
 8002c46:	f8c4 0013 	str.w	r0, [r4, #19]
 8002c4a:	7f23      	ldrb	r3, [r4, #28]
 8002c4c:	75e3      	strb	r3, [r4, #23]
 8002c4e:	e7f5      	b.n	8002c3c <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x8c>
                    set_LoRa_mode_receive();
 8002c50:	4620      	mov	r0, r4
 8002c52:	f7ff fa2b 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002c56:	2000      	movs	r0, #0
 8002c58:	e7b7      	b.n	8002bca <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1a>
                    set_LoRa_mode_receive();
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	f7ff fa26 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002c60:	2000      	movs	r0, #0
 8002c62:	e7b2      	b.n	8002bca <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1a>
            if(check_packet_type(Packet_Type::CONNECTION, {0x00})) {
 8002c64:	2100      	movs	r1, #0
 8002c66:	aa04      	add	r2, sp, #16
 8002c68:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	f7ff f92b 	bl	8001ec8 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002c72:	b938      	cbnz	r0, 8002c84 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0xd4>
                if(!use_past_stage) {
 8002c74:	7f63      	ldrb	r3, [r4, #29]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d069      	beq.n	8002d4e <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x19e>
                    set_LoRa_mode_receive(); // -+-+-
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	f7ff fa16 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002c80:	2000      	movs	r0, #0
 8002c82:	e7a2      	b.n	8002bca <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1a>
                send_packet_amt_ = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                send_wait_reset_packet_ = false;
 8002c8a:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
                uint8_t data[1] = {0};
 8002c8e:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t com = 0x00;
 8002c92:	f88d 300d 	strb.w	r3, [sp, #13]
                uint8_t len = 1;
 8002c96:	2301      	movs	r3, #1
 8002c98:	f88d 300e 	strb.w	r3, [sp, #14]
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 8002c9c:	f104 0520 	add.w	r5, r4, #32
 8002ca0:	f10d 030e 	add.w	r3, sp, #14
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	ab03      	add	r3, sp, #12
 8002ca8:	f10d 020d 	add.w	r2, sp, #13
 8002cac:	4629      	mov	r1, r5
 8002cae:	482c      	ldr	r0, [pc, #176]	; (8002d60 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1b0>)
 8002cb0:	f003 f854 	bl	8005d5c <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
                if(data[0] == 0xFF) {
 8002cb4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002cb8:	2bff      	cmp	r3, #255	; 0xff
 8002cba:	d01c      	beq.n	8002cf6 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x146>
                    if(!use_past_stage)
 8002cbc:	7f62      	ldrb	r2, [r4, #29]
 8002cbe:	2a00      	cmp	r2, #0
 8002cc0:	d13f      	bne.n	8002d42 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x192>
                        past_stage_ = current_stage_;
 8002cc2:	4622      	mov	r2, r4
 8002cc4:	f852 0f13 	ldr.w	r0, [r2, #19]!
 8002cc8:	61a0      	str	r0, [r4, #24]
 8002cca:	7912      	ldrb	r2, [r2, #4]
 8002ccc:	7722      	strb	r2, [r4, #28]
                    current_stage_.exchange = E_EXPECTATION;
 8002cce:	2203      	movs	r2, #3
 8002cd0:	75a2      	strb	r2, [r4, #22]
                    current_stage_.stade_communication = SC_EXCHANGE;
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	7522      	strb	r2, [r4, #20]
                    expected_amt_packet_ = data[0];
 8002cd6:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
                    amt_packet_ = 0;
 8002cda:	2500      	movs	r5, #0
 8002cdc:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
                    create_connect_packet();
 8002ce0:	462a      	mov	r2, r5
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	f7fe fee5 	bl	8001ab4 <_ZN17LoRa_contact_data21create_connect_packetEhb>
                    set_LoRa_mode_send();
 8002cea:	4629      	mov	r1, r5
 8002cec:	4620      	mov	r0, r4
 8002cee:	f7ff fa51 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	e769      	b.n	8002bca <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1a>
					start_connect_ = true;
 8002cf6:	2601      	movs	r6, #1
 8002cf8:	f884 6137 	strb.w	r6, [r4, #311]	; 0x137
                    connect_adr_ = packet_analyzer.get_sour_adr(last_receive_packet_); // (?) -----
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	4819      	ldr	r0, [pc, #100]	; (8002d64 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1b4>)
 8002d00:	f002 fe1e 	bl	8005940 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>
 8002d04:	60a0      	str	r0, [r4, #8]
                    create_connect_packet(send_packet_len, true);
 8002d06:	4632      	mov	r2, r6
 8002d08:	f894 1134 	ldrb.w	r1, [r4, #308]	; 0x134
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	f7fe fed1 	bl	8001ab4 <_ZN17LoRa_contact_data21create_connect_packetEhb>
                    set_LoRa_mode_send();
 8002d12:	2100      	movs	r1, #0
 8002d14:	4620      	mov	r0, r4
 8002d16:	f7ff fa3d 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    if(!use_past_stage)
 8002d1a:	7f63      	ldrb	r3, [r4, #29]
 8002d1c:	b95b      	cbnz	r3, 8002d36 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x186>
                        past_stage_ = current_stage_;
 8002d1e:	4623      	mov	r3, r4
 8002d20:	f853 0f13 	ldr.w	r0, [r3, #19]!
 8002d24:	61a0      	str	r0, [r4, #24]
 8002d26:	791b      	ldrb	r3, [r3, #4]
 8002d28:	7723      	strb	r3, [r4, #28]
                    current_stage_.type_communication = TC_INITIATOR;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	74e3      	strb	r3, [r4, #19]
                    current_stage_.stade_communication = SC_CONNECTION;
 8002d2e:	2201      	movs	r2, #1
 8002d30:	7522      	strb	r2, [r4, #20]
                    current_stage_.connection = C_EXPECTATION;
 8002d32:	7563      	strb	r3, [r4, #21]
 8002d34:	e7dd      	b.n	8002cf2 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x142>
                        current_stage_ = past_stage_;
 8002d36:	69a0      	ldr	r0, [r4, #24]
 8002d38:	f8c4 0013 	str.w	r0, [r4, #19]
 8002d3c:	7f23      	ldrb	r3, [r4, #28]
 8002d3e:	75e3      	strb	r3, [r4, #23]
 8002d40:	e7f3      	b.n	8002d2a <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x17a>
                        current_stage_ = past_stage_;
 8002d42:	69a0      	ldr	r0, [r4, #24]
 8002d44:	f8c4 0013 	str.w	r0, [r4, #19]
 8002d48:	7f22      	ldrb	r2, [r4, #28]
 8002d4a:	75e2      	strb	r2, [r4, #23]
 8002d4c:	e7bf      	b.n	8002cce <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x11e>
                    use_past_stage = true;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 8002d52:	4620      	mov	r0, r4
 8002d54:	f7ff fb7a 	bl	800244c <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	7763      	strb	r3, [r4, #29]
 8002d5c:	e735      	b.n	8002bca <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1a>
 8002d5e:	bf00      	nop
 8002d60:	200023a4 	.word	0x200023a4
 8002d64:	20002388 	.word	0x20002388

08002d68 <_ZN17LoRa_contact_data16recip_connectionER13Stage_control>:
uint32_t LoRa_contact_data::recip_connection(Stage_control& use_stage) {
 8002d68:	b508      	push	{r3, lr}
    switch (use_stage.connection) {
 8002d6a:	788b      	ldrb	r3, [r1, #2]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d003      	beq.n	8002d78 <_ZN17LoRa_contact_data16recip_connectionER13Stage_control+0x10>
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d004      	beq.n	8002d7e <_ZN17LoRa_contact_data16recip_connectionER13Stage_control+0x16>
        error = 210;
 8002d74:	20d2      	movs	r0, #210	; 0xd2
    return error;
 8002d76:	e001      	b.n	8002d7c <_ZN17LoRa_contact_data16recip_connectionER13Stage_control+0x14>
        error = recip_connection_queue_check(use_stage);
 8002d78:	f7ff f97e 	bl	8002078 <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control>
}
 8002d7c:	bd08      	pop	{r3, pc}
        error = recip_connection_wait_request(use_stage);
 8002d7e:	f7ff ff17 	bl	8002bb0 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control>
        break;
 8002d82:	e7fb      	b.n	8002d7c <_ZN17LoRa_contact_data16recip_connectionER13Stage_control+0x14>

08002d84 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control>:
uint32_t LoRa_contact_data::recip_exchange_expect(Stage_control& use_stage) {
 8002d84:	b510      	push	{r4, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	4604      	mov	r4, r0
    switch (module_state_) {
 8002d8a:	7c83      	ldrb	r3, [r0, #18]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d003      	beq.n	8002d98 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x14>
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d006      	beq.n	8002da2 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x1e>
        error = 221;
 8002d94:	20dd      	movs	r0, #221	; 0xdd
    return error;
 8002d96:	e002      	b.n	8002d9e <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x1a>
        set_LoRa_mode_receive();
 8002d98:	f7ff f988 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002d9c:	2000      	movs	r0, #0
}
 8002d9e:	b002      	add	sp, #8
 8002da0:	bd10      	pop	{r4, pc}
        if(!packet_dont_correct()) {
 8002da2:	2200      	movs	r2, #0
 8002da4:	4611      	mov	r1, r2
 8002da6:	f7ff f83b 	bl	8001e20 <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002daa:	bb30      	cbnz	r0, 8002dfa <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x76>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.R_data_pack) {
 8002dac:	f004 ff82 	bl	8007cb4 <HAL_GetTick>
 8002db0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002db4:	1ac0      	subs	r0, r0, r3
 8002db6:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
 8002dba:	4298      	cmp	r0, r3
 8002dbc:	d312      	bcc.n	8002de4 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x60>
                create_amt_packet();
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	f7fe ff3a 	bl	8001c38 <_ZN17LoRa_contact_data17create_amt_packetEv>
                set_LoRa_mode_send();
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f7ff f9e4 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                if(!use_past_stage)
 8002dcc:	7f63      	ldrb	r3, [r4, #29]
 8002dce:	b973      	cbnz	r3, 8002dee <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x6a>
                    past_stage_ = current_stage_;
 8002dd0:	4623      	mov	r3, r4
 8002dd2:	f853 0f13 	ldr.w	r0, [r3, #19]!
 8002dd6:	61a0      	str	r0, [r4, #24]
 8002dd8:	791b      	ldrb	r3, [r3, #4]
 8002dda:	7723      	strb	r3, [r4, #28]
                current_stage_.exchange = E_WAITING_REACTION;
 8002ddc:	2304      	movs	r3, #4
 8002dde:	75a3      	strb	r3, [r4, #22]
    uint32_t error = 0;
 8002de0:	2000      	movs	r0, #0
 8002de2:	e7dc      	b.n	8002d9e <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x1a>
                set_LoRa_mode_receive();
 8002de4:	4620      	mov	r0, r4
 8002de6:	f7ff f961 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002dea:	2000      	movs	r0, #0
 8002dec:	e7d7      	b.n	8002d9e <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x1a>
                    current_stage_ = past_stage_;
 8002dee:	69a0      	ldr	r0, [r4, #24]
 8002df0:	f8c4 0013 	str.w	r0, [r4, #19]
 8002df4:	7f23      	ldrb	r3, [r4, #28]
 8002df6:	75e3      	strb	r3, [r4, #23]
 8002df8:	e7f0      	b.n	8002ddc <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x58>
            if(check_packet_type(Packet_Type::CONNECTION, {0x03})) {
 8002dfa:	aa02      	add	r2, sp, #8
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8002e02:	2100      	movs	r1, #0
 8002e04:	4620      	mov	r0, r4
 8002e06:	f7ff f85f 	bl	8001ec8 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002e0a:	b1c0      	cbz	r0, 8002e3e <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xba>
                create_amt_packet();
 8002e0c:	4620      	mov	r0, r4
 8002e0e:	f7fe ff13 	bl	8001c38 <_ZN17LoRa_contact_data17create_amt_packetEv>
                set_LoRa_mode_send();
 8002e12:	2100      	movs	r1, #0
 8002e14:	4620      	mov	r0, r4
 8002e16:	f7ff f9bd 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                if(!use_past_stage)
 8002e1a:	7f63      	ldrb	r3, [r4, #29]
 8002e1c:	b94b      	cbnz	r3, 8002e32 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xae>
                    past_stage_ = current_stage_;
 8002e1e:	4623      	mov	r3, r4
 8002e20:	f853 0f13 	ldr.w	r0, [r3, #19]!
 8002e24:	61a0      	str	r0, [r4, #24]
 8002e26:	791b      	ldrb	r3, [r3, #4]
 8002e28:	7723      	strb	r3, [r4, #28]
                current_stage_.exchange = E_WAITING_REACTION;
 8002e2a:	2304      	movs	r3, #4
 8002e2c:	75a3      	strb	r3, [r4, #22]
    uint32_t error = 0;
 8002e2e:	2000      	movs	r0, #0
 8002e30:	e7b5      	b.n	8002d9e <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x1a>
                    current_stage_ = past_stage_;
 8002e32:	69a0      	ldr	r0, [r4, #24]
 8002e34:	f8c4 0013 	str.w	r0, [r4, #19]
 8002e38:	7f23      	ldrb	r3, [r4, #28]
 8002e3a:	75e3      	strb	r3, [r4, #23]
 8002e3c:	e7f5      	b.n	8002e2a <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xa6>
            else if(check_packet_type(Packet_Type::DEVICE) ||
 8002e3e:	2102      	movs	r1, #2
 8002e40:	4620      	mov	r0, r4
 8002e42:	f7ff f833 	bl	8001eac <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type>
                    check_packet_type(Packet_Type::SENSOR) ||
 8002e46:	b920      	cbnz	r0, 8002e52 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xce>
 8002e48:	2101      	movs	r1, #1
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	f7ff f82e 	bl	8001eac <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type>
            else if(check_packet_type(Packet_Type::DEVICE) ||
 8002e50:	b1b0      	cbz	r0, 8002e80 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xfc>
                if(reciev_packet_len == CONTACT_DATA_MAX_PACKET) {
 8002e52:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
				reciev_packet_[reciev_packet_len++] = last_receive_packet_;
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	f884 2135 	strb.w	r2, [r4, #309]	; 0x135
 8002e5c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8002e60:	f104 0120 	add.w	r1, r4, #32
 8002e64:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8002e68:	f001 fbfc 	bl	8004664 <_ZN11LoRa_packetaSERKS_>
                ++amt_packet_;
 8002e6c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8002e70:	3301      	adds	r3, #1
 8002e72:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
                set_LoRa_mode_receive();
 8002e76:	4620      	mov	r0, r4
 8002e78:	f7ff f918 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	e78e      	b.n	8002d9e <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x1a>
                    check_packet_type(Packet_Type::SYSTEM)) {
 8002e80:	2103      	movs	r1, #3
 8002e82:	4620      	mov	r0, r4
 8002e84:	f7ff f812 	bl	8001eac <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type>
                    check_packet_type(Packet_Type::SENSOR) ||
 8002e88:	2800      	cmp	r0, #0
 8002e8a:	d1e2      	bne.n	8002e52 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xce>
                if(!use_past_stage) {
 8002e8c:	7f63      	ldrb	r3, [r4, #29]
 8002e8e:	b123      	cbz	r3, 8002e9a <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x116>
                    set_LoRa_mode_receive(); // -+-+-
 8002e90:	4620      	mov	r0, r4
 8002e92:	f7ff f90b 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002e96:	2000      	movs	r0, #0
 8002e98:	e781      	b.n	8002d9e <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x1a>
                    use_past_stage = true;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f7ff fad4 	bl	800244c <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	7763      	strb	r3, [r4, #29]
 8002ea8:	e779      	b.n	8002d9e <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x1a>

08002eaa <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control>:
uint32_t LoRa_contact_data::recip_exchange_wait_reaction(Stage_control& use_stage) {
 8002eaa:	b530      	push	{r4, r5, lr}
 8002eac:	b083      	sub	sp, #12
 8002eae:	4604      	mov	r4, r0
    switch (module_state_) {
 8002eb0:	7c83      	ldrb	r3, [r0, #18]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d003      	beq.n	8002ebe <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x14>
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d006      	beq.n	8002ec8 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x1e>
        error = 222;
 8002eba:	20de      	movs	r0, #222	; 0xde
    return error;
 8002ebc:	e002      	b.n	8002ec4 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x1a>
        set_LoRa_mode_receive();
 8002ebe:	f7ff f8f5 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002ec2:	2000      	movs	r0, #0
}
 8002ec4:	b003      	add	sp, #12
 8002ec6:	bd30      	pop	{r4, r5, pc}
        if(!packet_dont_correct()) {
 8002ec8:	2200      	movs	r2, #0
 8002eca:	4611      	mov	r1, r2
 8002ecc:	f7fe ffa8 	bl	8001e20 <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002ed0:	2800      	cmp	r0, #0
 8002ed2:	d147      	bne.n	8002f64 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0xba>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.R_correct_pack) {
 8002ed4:	f004 feee 	bl	8007cb4 <HAL_GetTick>
 8002ed8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002edc:	1ac0      	subs	r0, r0, r3
 8002ede:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
 8002ee2:	4298      	cmp	r0, r3
 8002ee4:	d322      	bcc.n	8002f2c <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x82>
                if(send_packet_amt_ < packet_constraints_.R_correct_pack) {
 8002ee6:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 8002eea:	f894 2169 	ldrb.w	r2, [r4, #361]	; 0x169
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d821      	bhi.n	8002f36 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x8c>
                    if(expected_amt_packet_ != reciev_packet_len)
 8002ef2:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8002ef6:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d02a      	beq.n	8002f54 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0xaa>
                        send_packet_amt_ = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                        if(!use_past_stage)
 8002f04:	7f63      	ldrb	r3, [r4, #29]
 8002f06:	b9fb      	cbnz	r3, 8002f48 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x9e>
                            past_stage_ = current_stage_;
 8002f08:	4623      	mov	r3, r4
 8002f0a:	f853 0f13 	ldr.w	r0, [r3, #19]!
 8002f0e:	61a0      	str	r0, [r4, #24]
 8002f10:	791b      	ldrb	r3, [r3, #4]
 8002f12:	7723      	strb	r3, [r4, #28]
                        current_stage_.stade_communication = SC_DOWNTIME;
 8002f14:	2300      	movs	r3, #0
 8002f16:	7523      	strb	r3, [r4, #20]
                        create_disconnet_packet(true);
 8002f18:	2101      	movs	r1, #1
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	f7fe ff52 	bl	8001dc4 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                        set_LoRa_mode_send(true);
 8002f20:	2101      	movs	r1, #1
 8002f22:	4620      	mov	r0, r4
 8002f24:	f7ff f936 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                        error = 223;
 8002f28:	20df      	movs	r0, #223	; 0xdf
 8002f2a:	e7cb      	b.n	8002ec4 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x1a>
                set_LoRa_mode_receive();
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	f7ff f8bd 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002f32:	2000      	movs	r0, #0
 8002f34:	e7c6      	b.n	8002ec4 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x1a>
                    ++send_packet_amt_;
 8002f36:	3301      	adds	r3, #1
 8002f38:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    set_LoRa_mode_send();
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4620      	mov	r0, r4
 8002f40:	f7ff f928 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 8002f44:	2000      	movs	r0, #0
 8002f46:	e7bd      	b.n	8002ec4 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x1a>
                            current_stage_ = past_stage_;
 8002f48:	69a0      	ldr	r0, [r4, #24]
 8002f4a:	f8c4 0013 	str.w	r0, [r4, #19]
 8002f4e:	7f23      	ldrb	r3, [r4, #28]
 8002f50:	75e3      	strb	r3, [r4, #23]
 8002f52:	e7df      	b.n	8002f14 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x6a>
                        sort_num_packet();
 8002f54:	4620      	mov	r0, r4
 8002f56:	f7ff f843 	bl	8001fe0 <_ZN17LoRa_contact_data15sort_num_packetEv>
                        contact_complete();
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	f7ff f9b0 	bl	80022c0 <_ZN17LoRa_contact_data16contact_completeEv>
    uint32_t error = 0;
 8002f60:	2000      	movs	r0, #0
 8002f62:	e7af      	b.n	8002ec4 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x1a>
            if(check_packet_type(Packet_Type::CONNECTION, {0x05})) {
 8002f64:	aa02      	add	r2, sp, #8
 8002f66:	2305      	movs	r3, #5
 8002f68:	f802 3d02 	strb.w	r3, [r2, #-2]!
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	4620      	mov	r0, r4
 8002f70:	f7fe ffaa 	bl	8001ec8 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002f74:	b1e8      	cbz	r0, 8002fb2 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x108>
                send_packet_amt_ = 0;
 8002f76:	2500      	movs	r5, #0
 8002f78:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                create_number_packet();
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	f7fe fe99 	bl	8001cb4 <_ZN17LoRa_contact_data20create_number_packetEv>
                set_LoRa_mode_send();
 8002f82:	4629      	mov	r1, r5
 8002f84:	4620      	mov	r0, r4
 8002f86:	f7ff f905 	bl	8002194 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                amt_packet_ = 0;
 8002f8a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
                if(!use_past_stage)
 8002f8e:	7f63      	ldrb	r3, [r4, #29]
 8002f90:	b94b      	cbnz	r3, 8002fa6 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0xfc>
                    past_stage_ = current_stage_;
 8002f92:	4623      	mov	r3, r4
 8002f94:	f853 0f13 	ldr.w	r0, [r3, #19]!
 8002f98:	61a0      	str	r0, [r4, #24]
 8002f9a:	791b      	ldrb	r3, [r3, #4]
 8002f9c:	7723      	strb	r3, [r4, #28]
                current_stage_.exchange = E_EXPECTATION;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	75a3      	strb	r3, [r4, #22]
    uint32_t error = 0;
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	e78e      	b.n	8002ec4 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x1a>
                    current_stage_ = past_stage_;
 8002fa6:	69a0      	ldr	r0, [r4, #24]
 8002fa8:	f8c4 0013 	str.w	r0, [r4, #19]
 8002fac:	7f23      	ldrb	r3, [r4, #28]
 8002fae:	75e3      	strb	r3, [r4, #23]
 8002fb0:	e7f5      	b.n	8002f9e <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0xf4>
            else if(check_packet_type(Packet_Type::CONNECTION, {0x08})) {
 8002fb2:	aa02      	add	r2, sp, #8
 8002fb4:	2308      	movs	r3, #8
 8002fb6:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f7fe ff83 	bl	8001ec8 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002fc2:	b930      	cbnz	r0, 8002fd2 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x128>
                if(!use_past_stage) {
 8002fc4:	7f63      	ldrb	r3, [r4, #29]
 8002fc6:	b17b      	cbz	r3, 8002fe8 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x13e>
                    set_LoRa_mode_receive(); // -+-+-
 8002fc8:	4620      	mov	r0, r4
 8002fca:	f7ff f86f 	bl	80020ac <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002fce:	2000      	movs	r0, #0
 8002fd0:	e778      	b.n	8002ec4 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x1a>
                send_packet_amt_ = 0;
 8002fd2:	2500      	movs	r5, #0
 8002fd4:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                sort_num_packet();
 8002fd8:	4620      	mov	r0, r4
 8002fda:	f7ff f801 	bl	8001fe0 <_ZN17LoRa_contact_data15sort_num_packetEv>
                contact_complete();
 8002fde:	4620      	mov	r0, r4
 8002fe0:	f7ff f96e 	bl	80022c0 <_ZN17LoRa_contact_data16contact_completeEv>
    uint32_t error = 0;
 8002fe4:	4628      	mov	r0, r5
 8002fe6:	e76d      	b.n	8002ec4 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x1a>
                    use_past_stage = true;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 8002fec:	4620      	mov	r0, r4
 8002fee:	f7ff fa2d 	bl	800244c <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	7763      	strb	r3, [r4, #29]
 8002ff6:	e765      	b.n	8002ec4 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x1a>

08002ff8 <_ZN17LoRa_contact_data14recip_exchangeER13Stage_control>:
uint32_t LoRa_contact_data::recip_exchange(Stage_control& use_stage) {
 8002ff8:	b508      	push	{r3, lr}
    switch (use_stage.exchange) {
 8002ffa:	78cb      	ldrb	r3, [r1, #3]
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	d003      	beq.n	8003008 <_ZN17LoRa_contact_data14recip_exchangeER13Stage_control+0x10>
 8003000:	2b04      	cmp	r3, #4
 8003002:	d004      	beq.n	800300e <_ZN17LoRa_contact_data14recip_exchangeER13Stage_control+0x16>
        error = 220;
 8003004:	20dc      	movs	r0, #220	; 0xdc
    return error;
 8003006:	e001      	b.n	800300c <_ZN17LoRa_contact_data14recip_exchangeER13Stage_control+0x14>
        error = recip_exchange_expect(use_stage);
 8003008:	f7ff febc 	bl	8002d84 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control>
}
 800300c:	bd08      	pop	{r3, pc}
        error = recip_exchange_wait_reaction(use_stage);
 800300e:	f7ff ff4c 	bl	8002eaa <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control>
        break;
 8003012:	e7fb      	b.n	800300c <_ZN17LoRa_contact_data14recip_exchangeER13Stage_control+0x14>

08003014 <Get_control_module_info_from_main>:


extern "C" {

void Get_control_module_info_from_main(uint32_t* id_main) {
	lora_network_address = id_main[0];
 8003014:	6802      	ldr	r2, [r0, #0]
 8003016:	4b03      	ldr	r3, [pc, #12]	; (8003024 <Get_control_module_info_from_main+0x10>)
 8003018:	601a      	str	r2, [r3, #0]
	lora_network_channel = id_main[1];
 800301a:	6842      	ldr	r2, [r0, #4]
 800301c:	4b02      	ldr	r3, [pc, #8]	; (8003028 <Get_control_module_info_from_main+0x14>)
 800301e:	601a      	str	r2, [r3, #0]
}
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	20000364 	.word	0x20000364
 8003028:	20000368 	.word	0x20000368

0800302c <Send_registration_packet>:

void Send_registration_packet() {
 800302c:	b508      	push	{r3, lr}
	grow_sensor_interface.send_registration_packet(grow_sensor, contact_data);
 800302e:	4a03      	ldr	r2, [pc, #12]	; (800303c <Send_registration_packet+0x10>)
 8003030:	4903      	ldr	r1, [pc, #12]	; (8003040 <Send_registration_packet+0x14>)
 8003032:	4804      	ldr	r0, [pc, #16]	; (8003044 <Send_registration_packet+0x18>)
 8003034:	f7fe f998 	bl	8001368 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data>
}
 8003038:	bd08      	pop	{r3, pc}
 800303a:	bf00      	nop
 800303c:	200001c4 	.word	0x200001c4
 8003040:	20000334 	.word	0x20000334
 8003044:	200001bc 	.word	0x200001bc

08003048 <Init_lora_module>:

bool Init_lora_module(SPI_HandleTypeDef *spi) {
 8003048:	b508      	push	{r3, lr}
	return contact_data.init_lora_module(spi);
 800304a:	4601      	mov	r1, r0
 800304c:	4801      	ldr	r0, [pc, #4]	; (8003054 <Init_lora_module+0xc>)
 800304e:	f7fe fb8f 	bl	8001770 <_ZN17LoRa_contact_data16init_lora_moduleEP19__SPI_HandleTypeDef>
}
 8003052:	bd08      	pop	{r3, pc}
 8003054:	200001c4 	.word	0x200001c4

08003058 <Begin_lora_module>:
uint8_t Begin_lora_module(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8003058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800305a:	b087      	sub	sp, #28
 800305c:	4604      	mov	r4, r0
 800305e:	4615      	mov	r5, r2
 8003060:	461e      	mov	r6, r3
 8003062:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	grow_sensor.set_system_id(MODULE_ID);
 8003064:	4b18      	ldr	r3, [pc, #96]	; (80030c8 <Begin_lora_module+0x70>)
 8003066:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003068:	4818      	ldr	r0, [pc, #96]	; (80030cc <Begin_lora_module+0x74>)
 800306a:	f7fd fff1 	bl	8001050 <_ZN11Grow_sensor13set_system_idESt5arrayIhLj12EE>
	contact_data.begin_lora_module(frequency, paboost, signal_power, SF, SBW, sync_word);
 800306e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8003072:	9302      	str	r3, [sp, #8]
 8003074:	9701      	str	r7, [sp, #4]
 8003076:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	4633      	mov	r3, r6
 800307e:	462a      	mov	r2, r5
 8003080:	4621      	mov	r1, r4
 8003082:	4813      	ldr	r0, [pc, #76]	; (80030d0 <Begin_lora_module+0x78>)
 8003084:	f7fe fb80 	bl	8001788 <_ZN17LoRa_contact_data17begin_lora_moduleEmbhhmh>
	if (lora_network_address == 0x00000000) {
 8003088:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <Begin_lora_module+0x7c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	b1b3      	cbz	r3, 80030bc <Begin_lora_module+0x64>
		current_mode = REGISTRATION_MODE;
		Send_registration_packet();
	}
	else {
		grow_sensor_interface.load_data(grow_sensor, contact_data, lora_network_address, lora_network_channel);
 800308e:	4c10      	ldr	r4, [pc, #64]	; (80030d0 <Begin_lora_module+0x78>)
 8003090:	4d0e      	ldr	r5, [pc, #56]	; (80030cc <Begin_lora_module+0x74>)
 8003092:	4a11      	ldr	r2, [pc, #68]	; (80030d8 <Begin_lora_module+0x80>)
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	9200      	str	r2, [sp, #0]
 8003098:	4622      	mov	r2, r4
 800309a:	4629      	mov	r1, r5
 800309c:	480f      	ldr	r0, [pc, #60]	; (80030dc <Begin_lora_module+0x84>)
 800309e:	f7fe f927 	bl	80012f0 <_ZN21Grow_sensor_interface9load_dataER11Grow_sensorR17LoRa_contact_datamm>
		current_mode = WORKING_MODE;
 80030a2:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <Begin_lora_module+0x88>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	701a      	strb	r2, [r3, #0]
		contact_data.wait_recipient(grow_sensor.get_address_control_module());
 80030a8:	4628      	mov	r0, r5
 80030aa:	f7fd fff9 	bl	80010a0 <_ZNK11Grow_sensor26get_address_control_moduleEv>
 80030ae:	4601      	mov	r1, r0
 80030b0:	4620      	mov	r0, r4
 80030b2:	f7ff f813 	bl	80020dc <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>
	}
	return 0;
}
 80030b6:	2000      	movs	r0, #0
 80030b8:	b007      	add	sp, #28
 80030ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		current_mode = REGISTRATION_MODE;
 80030bc:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <Begin_lora_module+0x88>)
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
		Send_registration_packet();
 80030c2:	f7ff ffb3 	bl	800302c <Send_registration_packet>
 80030c6:	e7f6      	b.n	80030b6 <Begin_lora_module+0x5e>
 80030c8:	0800bdb8 	.word	0x0800bdb8
 80030cc:	20000334 	.word	0x20000334
 80030d0:	200001c4 	.word	0x200001c4
 80030d4:	20000364 	.word	0x20000364
 80030d8:	20000368 	.word	0x20000368
 80030dc:	200001bc 	.word	0x200001bc
 80030e0:	20000330 	.word	0x20000330

080030e4 <Main_cpp>:

void Main_cpp(SensorsDataTypeDef* sensors_data) {
 80030e4:	b510      	push	{r4, lr}
	grow_sensor.set_value(0, sensors_data->lux);
 80030e6:	4c06      	ldr	r4, [pc, #24]	; (8003100 <Main_cpp+0x1c>)
 80030e8:	6802      	ldr	r2, [r0, #0]
 80030ea:	2100      	movs	r1, #0
 80030ec:	4620      	mov	r0, r4
 80030ee:	f7fe f809 	bl	8001104 <_ZN11Grow_sensor9set_valueEhf>
	grow_sensor_interface.build_data_packet(grow_sensor, contact_data);
 80030f2:	4a04      	ldr	r2, [pc, #16]	; (8003104 <Main_cpp+0x20>)
 80030f4:	4621      	mov	r1, r4
 80030f6:	4804      	ldr	r0, [pc, #16]	; (8003108 <Main_cpp+0x24>)
 80030f8:	f7fe f9c4 	bl	8001484 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data>
}
 80030fc:	bd10      	pop	{r4, pc}
 80030fe:	bf00      	nop
 8003100:	20000334 	.word	0x20000334
 8003104:	200001c4 	.word	0x200001c4
 8003108:	200001bc 	.word	0x200001bc

0800310c <Contact_group_control_module>:

void Contact_group_control_module() {
 800310c:	b530      	push	{r4, r5, lr}
 800310e:	b08b      	sub	sp, #44	; 0x2c
	contact_status = contact_data.work_contact_system();
 8003110:	482e      	ldr	r0, [pc, #184]	; (80031cc <Contact_group_control_module+0xc0>)
 8003112:	f7ff f99b 	bl	800244c <_ZN17LoRa_contact_data19work_contact_systemEv>
 8003116:	4b2e      	ldr	r3, [pc, #184]	; (80031d0 <Contact_group_control_module+0xc4>)
 8003118:	6018      	str	r0, [r3, #0]
	switch (current_mode) {
 800311a:	4b2e      	ldr	r3, [pc, #184]	; (80031d4 <Contact_group_control_module+0xc8>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	b11b      	cbz	r3, 8003128 <Contact_group_control_module+0x1c>
 8003120:	2b01      	cmp	r3, #1
 8003122:	d039      	beq.n	8003198 <Contact_group_control_module+0x8c>
	        	contact_count++;
	            contact_data.wait_recipient(grow_sensor.get_address_control_module());
	        }
		}
	}
}
 8003124:	b00b      	add	sp, #44	; 0x2c
 8003126:	bd30      	pop	{r4, r5, pc}
			if(contact_data.get_signal_complete()) {
 8003128:	4828      	ldr	r0, [pc, #160]	; (80031cc <Contact_group_control_module+0xc0>)
 800312a:	f7fe fc0d 	bl	8001948 <_ZN17LoRa_contact_data19get_signal_completeEv>
 800312e:	bb38      	cbnz	r0, 8003180 <Contact_group_control_module+0x74>
			if(contact_data.get_state_contact() == SC_PACKET_ACCEPTED) {
 8003130:	4826      	ldr	r0, [pc, #152]	; (80031cc <Contact_group_control_module+0xc0>)
 8003132:	f7fe fbaa 	bl	800188a <_ZN17LoRa_contact_data17get_state_contactEv>
 8003136:	2807      	cmp	r0, #7
 8003138:	d1f4      	bne.n	8003124 <Contact_group_control_module+0x18>
				if(grow_sensor_interface.check_regist_packet(grow_sensor, contact_data)) {
 800313a:	4a24      	ldr	r2, [pc, #144]	; (80031cc <Contact_group_control_module+0xc0>)
 800313c:	4926      	ldr	r1, [pc, #152]	; (80031d8 <Contact_group_control_module+0xcc>)
 800313e:	4827      	ldr	r0, [pc, #156]	; (80031dc <Contact_group_control_module+0xd0>)
 8003140:	f7fe fa3e 	bl	80015c0 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data>
 8003144:	2800      	cmp	r0, #0
 8003146:	d0ed      	beq.n	8003124 <Contact_group_control_module+0x18>
					current_mode = WORKING_MODE;
 8003148:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <Contact_group_control_module+0xc8>)
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
					grow_sensor_interface.save_data(grow_sensor, contact_data, save_adr, save_channel);
 800314e:	4c1f      	ldr	r4, [pc, #124]	; (80031cc <Contact_group_control_module+0xc0>)
 8003150:	4d21      	ldr	r5, [pc, #132]	; (80031d8 <Contact_group_control_module+0xcc>)
 8003152:	ab03      	add	r3, sp, #12
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	ab02      	add	r3, sp, #8
 8003158:	4622      	mov	r2, r4
 800315a:	4629      	mov	r1, r5
 800315c:	481f      	ldr	r0, [pc, #124]	; (80031dc <Contact_group_control_module+0xd0>)
 800315e:	f7fe f8e5 	bl	800132c <_ZN21Grow_sensor_interface9save_dataERK11Grow_sensorRK17LoRa_contact_dataRmS6_>
					uint32_t control_module_id_and_channel[BUFFSIZE] = {save_adr, save_channel};
 8003162:	9b02      	ldr	r3, [sp, #8]
 8003164:	9304      	str	r3, [sp, #16]
 8003166:	9b03      	ldr	r3, [sp, #12]
 8003168:	9305      	str	r3, [sp, #20]
					Write_to_flash(control_module_id_and_channel);
 800316a:	a804      	add	r0, sp, #16
 800316c:	f7fd ff2e 	bl	8000fcc <Write_to_flash>
					contact_data.wait_recipient(grow_sensor.get_address_control_module()); // Начинаем слушать на наличие управляющих пакетов
 8003170:	4628      	mov	r0, r5
 8003172:	f7fd ff95 	bl	80010a0 <_ZNK11Grow_sensor26get_address_control_moduleEv>
 8003176:	4601      	mov	r1, r0
 8003178:	4620      	mov	r0, r4
 800317a:	f7fe ffaf 	bl	80020dc <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>
 800317e:	e7d1      	b.n	8003124 <Contact_group_control_module+0x18>
				contact_data.broadcast_receive(); // Ожидаем ответа на запрос или ошибку запроса
 8003180:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003184:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003188:	a806      	add	r0, sp, #24
 800318a:	f002 fb73 	bl	8005874 <_ZN12LoRa_addressC1Ett>
 800318e:	9906      	ldr	r1, [sp, #24]
 8003190:	480e      	ldr	r0, [pc, #56]	; (80031cc <Contact_group_control_module+0xc0>)
 8003192:	f7fe ffba 	bl	800210a <_ZN17LoRa_contact_data17broadcast_receiveE12LoRa_address>
 8003196:	e7cb      	b.n	8003130 <Contact_group_control_module+0x24>
	        if(contact_status != 0) {
 8003198:	b980      	cbnz	r0, 80031bc <Contact_group_control_module+0xb0>
	        if(contact_data.get_signal_complete()) {
 800319a:	480c      	ldr	r0, [pc, #48]	; (80031cc <Contact_group_control_module+0xc0>)
 800319c:	f7fe fbd4 	bl	8001948 <_ZN17LoRa_contact_data19get_signal_completeEv>
 80031a0:	2800      	cmp	r0, #0
 80031a2:	d0bf      	beq.n	8003124 <Contact_group_control_module+0x18>
	        	contact_count++;
 80031a4:	4a0e      	ldr	r2, [pc, #56]	; (80031e0 <Contact_group_control_module+0xd4>)
 80031a6:	6813      	ldr	r3, [r2, #0]
 80031a8:	3301      	adds	r3, #1
 80031aa:	6013      	str	r3, [r2, #0]
	            contact_data.wait_recipient(grow_sensor.get_address_control_module());
 80031ac:	480a      	ldr	r0, [pc, #40]	; (80031d8 <Contact_group_control_module+0xcc>)
 80031ae:	f7fd ff77 	bl	80010a0 <_ZNK11Grow_sensor26get_address_control_moduleEv>
 80031b2:	4601      	mov	r1, r0
 80031b4:	4805      	ldr	r0, [pc, #20]	; (80031cc <Contact_group_control_module+0xc0>)
 80031b6:	f7fe ff91 	bl	80020dc <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>
}
 80031ba:	e7b3      	b.n	8003124 <Contact_group_control_module+0x18>
	            contact_data.wait_recipient(grow_sensor.get_address_control_module());
 80031bc:	4806      	ldr	r0, [pc, #24]	; (80031d8 <Contact_group_control_module+0xcc>)
 80031be:	f7fd ff6f 	bl	80010a0 <_ZNK11Grow_sensor26get_address_control_moduleEv>
 80031c2:	4601      	mov	r1, r0
 80031c4:	4801      	ldr	r0, [pc, #4]	; (80031cc <Contact_group_control_module+0xc0>)
 80031c6:	f7fe ff89 	bl	80020dc <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>
 80031ca:	e7e6      	b.n	800319a <Contact_group_control_module+0x8e>
 80031cc:	200001c4 	.word	0x200001c4
 80031d0:	20002428 	.word	0x20002428
 80031d4:	20000330 	.word	0x20000330
 80031d8:	20000334 	.word	0x20000334
 80031dc:	200001bc 	.word	0x200001bc
 80031e0:	200001c0 	.word	0x200001c0

080031e4 <_GLOBAL__sub_I_sensor_array>:

} // extern "C"
 80031e4:	b508      	push	{r3, lr}
LoRa_contact_data contact_data;
 80031e6:	4804      	ldr	r0, [pc, #16]	; (80031f8 <_GLOBAL__sub_I_sensor_array+0x14>)
 80031e8:	f7fe fbcc 	bl	8001984 <_ZN17LoRa_contact_dataC1Ev>
Grow_sensor grow_sensor(AMT_COMPONENT, sensor_array);
 80031ec:	4a03      	ldr	r2, [pc, #12]	; (80031fc <_GLOBAL__sub_I_sensor_array+0x18>)
 80031ee:	2101      	movs	r1, #1
 80031f0:	4803      	ldr	r0, [pc, #12]	; (8003200 <_GLOBAL__sub_I_sensor_array+0x1c>)
 80031f2:	f7fe f82f 	bl	8001254 <_ZN11Grow_sensorC1EhP11Type_sensor>
} // extern "C"
 80031f6:	bd08      	pop	{r3, pc}
 80031f8:	200001c4 	.word	0x200001c4
 80031fc:	20000000 	.word	0x20000000
 8003200:	20000334 	.word	0x20000334

08003204 <_GLOBAL__sub_D_sensor_array>:
 8003204:	b508      	push	{r3, lr}
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003206:	4b04      	ldr	r3, [pc, #16]	; (8003218 <_GLOBAL__sub_D_sensor_array+0x14>)
 8003208:	6918      	ldr	r0, [r3, #16]
	if (__p)
 800320a:	b108      	cbz	r0, 8003210 <_GLOBAL__sub_D_sensor_array+0xc>
	::operator delete(__p);
 800320c:	f007 fc34 	bl	800aa78 <_ZdlPv>
LoRa_contact_data contact_data;
 8003210:	4802      	ldr	r0, [pc, #8]	; (800321c <_GLOBAL__sub_D_sensor_array+0x18>)
 8003212:	f7fe fa8a 	bl	800172a <_ZN17LoRa_contact_dataD1Ev>
} // extern "C"
 8003216:	bd08      	pop	{r3, pc}
 8003218:	20000334 	.word	0x20000334
 800321c:	200001c4 	.word	0x200001c4

08003220 <_ZN8RegisterC1Ethh>:

//   ----- ----- ----- ---- ----- ----- -----
// ----- ----- ----- Register ----- ----- -----
//   ----- ----- ----- ---- ----- ----- -----

Register::Register(uint16_t address, uint8_t bit_count, uint8_t bit_bias): address_(address), bit_count_(bit_count), bit_bias_(bit_bias) {
 8003220:	b430      	push	{r4, r5}
 8003222:	8001      	strh	r1, [r0, #0]
 8003224:	7082      	strb	r2, [r0, #2]
 8003226:	70c3      	strb	r3, [r0, #3]
    if (value < min_value)
 8003228:	b162      	cbz	r2, 8003244 <_ZN8RegisterC1Ethh+0x24>
 800322a:	2a08      	cmp	r2, #8
 800322c:	bf28      	it	cs
 800322e:	2208      	movcs	r2, #8
    uint8_t bit_in_reg = 8;
    bit_count = value_range(bit_count, 1, bit_in_reg);
    bit_bias = value_range(bit_bias, 0, (bit_in_reg - bit_count));
 8003230:	f1c2 0508 	rsb	r5, r2, #8
 8003234:	b2ed      	uxtb	r5, r5
 8003236:	2100      	movs	r1, #0
    uint32_t mask = 0x00;
 8003238:	460c      	mov	r4, r1
    for (uint8_t i = 0; i < bit_in_reg; ++i) {
        if (i < bit_count)
            mask = (mask << 1) + 1;
        else
            if (i < (bit_count + bit_bias))
 800323a:	429d      	cmp	r5, r3
 800323c:	bf94      	ite	ls
 800323e:	1953      	addls	r3, r2, r5
 8003240:	18d3      	addhi	r3, r2, r3
 8003242:	e007      	b.n	8003254 <_ZN8RegisterC1Ethh+0x34>
        return min_value;
 8003244:	2201      	movs	r2, #1
 8003246:	e7f3      	b.n	8003230 <_ZN8RegisterC1Ethh+0x10>
            if (i < (bit_count + bit_bias))
 8003248:	428b      	cmp	r3, r1
                mask <<= 1;
 800324a:	bfc8      	it	gt
 800324c:	0064      	lslgt	r4, r4, #1
 800324e:	3101      	adds	r1, #1
    for (uint8_t i = 0; i < bit_in_reg; ++i) {
 8003250:	2908      	cmp	r1, #8
 8003252:	d005      	beq.n	8003260 <_ZN8RegisterC1Ethh+0x40>
        if (i < bit_count)
 8003254:	b2cd      	uxtb	r5, r1
 8003256:	42aa      	cmp	r2, r5
 8003258:	d9f6      	bls.n	8003248 <_ZN8RegisterC1Ethh+0x28>
            mask = (mask << 1) + 1;
 800325a:	0064      	lsls	r4, r4, #1
 800325c:	3401      	adds	r4, #1
 800325e:	e7f6      	b.n	800324e <_ZN8RegisterC1Ethh+0x2e>
    }
    mask_ = mask;
 8003260:	6044      	str	r4, [r0, #4]
}
 8003262:	bc30      	pop	{r4, r5}
 8003264:	4770      	bx	lr

08003266 <_ZNK8Register7addressEv>:

uint16_t Register::address() const {
    return address_;
}
 8003266:	8800      	ldrh	r0, [r0, #0]
 8003268:	4770      	bx	lr

0800326a <_ZNK8Register4maskEv>:
uint8_t Register::bit_bias() const {
    return bit_bias_;
}
uint32_t Register::mask() const {
    return mask_;
}
 800326a:	6840      	ldr	r0, [r0, #4]
 800326c:	4770      	bx	lr

0800326e <_ZeqRK8RegisterS1_>:

bool operator==(const Register& left, const Register& right) {
    if(left.address_ != right.address_)
 800326e:	8802      	ldrh	r2, [r0, #0]
 8003270:	880b      	ldrh	r3, [r1, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d001      	beq.n	800327a <_ZeqRK8RegisterS1_+0xc>
        return false;
 8003276:	2000      	movs	r0, #0
 8003278:	4770      	bx	lr
    if(left.bit_count_ != right.bit_count_)
 800327a:	7882      	ldrb	r2, [r0, #2]
 800327c:	788b      	ldrb	r3, [r1, #2]
 800327e:	429a      	cmp	r2, r3
 8003280:	d001      	beq.n	8003286 <_ZeqRK8RegisterS1_+0x18>
        return false;
 8003282:	2000      	movs	r0, #0
 8003284:	4770      	bx	lr
    if(left.bit_bias_ != right.bit_bias_)
 8003286:	78c2      	ldrb	r2, [r0, #3]
 8003288:	78cb      	ldrb	r3, [r1, #3]
 800328a:	429a      	cmp	r2, r3
 800328c:	d001      	beq.n	8003292 <_ZeqRK8RegisterS1_+0x24>
        return false;
 800328e:	2000      	movs	r0, #0
    if(left.mask_ != right.mask_)
        return false;
    return true;
}
 8003290:	4770      	bx	lr
    if(left.mask_ != right.mask_)
 8003292:	6840      	ldr	r0, [r0, #4]
 8003294:	684b      	ldr	r3, [r1, #4]
 8003296:	4298      	cmp	r0, r3
 8003298:	bf14      	ite	ne
 800329a:	2000      	movne	r0, #0
 800329c:	2001      	moveq	r0, #1
 800329e:	4770      	bx	lr

080032a0 <_ZneRK8RegisterS1_>:

bool operator!=(const Register& left, const Register& right) {
 80032a0:	b508      	push	{r3, lr}
    return !(left == right);
 80032a2:	f7ff ffe4 	bl	800326e <_ZeqRK8RegisterS1_>
 80032a6:	f080 0001 	eor.w	r0, r0, #1
}
 80032aa:	b2c0      	uxtb	r0, r0
 80032ac:	bd08      	pop	{r3, pc}
	...

080032b0 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm>:
                             const uint32_t max_value, const uint32_t *reserved_value, const uint32_t reserv_count) {
    init_address_field(registers, reg_count, reg_revers, mode, min_value, max_value, reserved_value, reserv_count);
}

bool Address_field::init_address_field(const Register *registers, const uint8_t reg_count, const bool reg_revers, const char mode, const uint32_t min_value,
                                       const uint32_t max_value, const uint32_t *reserved_value, const uint32_t reserv_count) {
 80032b0:	b4f0      	push	{r4, r5, r6, r7}
 80032b2:	f89d 6010 	ldrb.w	r6, [sp, #16]
 80032b6:	9d05      	ldr	r5, [sp, #20]
    if ((mode != 'r') && (mode != 'w') && (mode != 'c'))
 80032b8:	f1a6 0463 	sub.w	r4, r6, #99	; 0x63
 80032bc:	b2e4      	uxtb	r4, r4
 80032be:	2c14      	cmp	r4, #20
 80032c0:	d83c      	bhi.n	800333c <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x8c>
 80032c2:	4f20      	ldr	r7, [pc, #128]	; (8003344 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x94>)
 80032c4:	fa27 f404 	lsr.w	r4, r7, r4
 80032c8:	f014 0f01 	tst.w	r4, #1
 80032cc:	d038      	beq.n	8003340 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x90>
        return true;
    uint8_t bit_count = 0;
    uint32_t value = 0;
    mode_ = mode;
 80032ce:	7606      	strb	r6, [r0, #24]
    registers_ = registers;
 80032d0:	6001      	str	r1, [r0, #0]
    reg_count_ = reg_count;
 80032d2:	7102      	strb	r2, [r0, #4]
    reg_revers_ = reg_revers;
 80032d4:	7143      	strb	r3, [r0, #5]
    reserved_value_ = reserved_value;
 80032d6:	9b07      	ldr	r3, [sp, #28]
 80032d8:	6103      	str	r3, [r0, #16]
    reserv_count_ = reserv_count;
 80032da:	9b08      	ldr	r3, [sp, #32]
 80032dc:	6143      	str	r3, [r0, #20]
    max_address_ = 0;
 80032de:	2300      	movs	r3, #0
 80032e0:	80c3      	strh	r3, [r0, #6]
    for (int i = 0; i < reg_count_; ++i) {
 80032e2:	b33a      	cbz	r2, 8003334 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x84>
 80032e4:	460b      	mov	r3, r1
 80032e6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    uint8_t bit_count = 0;
 80032ea:	2400      	movs	r4, #0
        bit_count += registers_[i].bit_count();
 80032ec:	789e      	ldrb	r6, [r3, #2]
 80032ee:	4434      	add	r4, r6
 80032f0:	b2e4      	uxtb	r4, r4
    return address_;
 80032f2:	881e      	ldrh	r6, [r3, #0]
        if (max_address_ < registers_[i].address())
 80032f4:	88c7      	ldrh	r7, [r0, #6]
 80032f6:	42b7      	cmp	r7, r6
            max_address_ = registers_[i].address();
 80032f8:	bf38      	it	cc
 80032fa:	80c6      	strhcc	r6, [r0, #6]
 80032fc:	3308      	adds	r3, #8
    for (int i = 0; i < reg_count_; ++i) {
 80032fe:	428b      	cmp	r3, r1
 8003300:	d1f4      	bne.n	80032ec <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x3c>
    }
    for (int i = 0; i < bit_count; ++i)
 8003302:	4621      	mov	r1, r4
 8003304:	b1c4      	cbz	r4, 8003338 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x88>
 8003306:	2200      	movs	r2, #0
    uint32_t value = 0;
 8003308:	4613      	mov	r3, r2
        value = (value << 1) + 1;
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	3301      	adds	r3, #1
    for (int i = 0; i < bit_count; ++i)
 800330e:	3201      	adds	r2, #1
 8003310:	4291      	cmp	r1, r2
 8003312:	d1fa      	bne.n	800330a <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x5a>
    min_value_ = value_range(min_value, 0, value);
 8003314:	462a      	mov	r2, r5
 8003316:	429d      	cmp	r5, r3
 8003318:	bf28      	it	cs
 800331a:	461a      	movcs	r2, r3
 800331c:	6082      	str	r2, [r0, #8]
    if (value < min_value)
 800331e:	9a06      	ldr	r2, [sp, #24]
 8003320:	4295      	cmp	r5, r2
 8003322:	d803      	bhi.n	800332c <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x7c>
 8003324:	429a      	cmp	r2, r3
 8003326:	bf28      	it	cs
 8003328:	461a      	movcs	r2, r3
 800332a:	4615      	mov	r5, r2
    max_value_ = value_range(max_value, min_value, value);
 800332c:	60c5      	str	r5, [r0, #12]
    return false;
 800332e:	2000      	movs	r0, #0
}
 8003330:	bcf0      	pop	{r4, r5, r6, r7}
 8003332:	4770      	bx	lr
    uint32_t value = 0;
 8003334:	2300      	movs	r3, #0
 8003336:	e7ed      	b.n	8003314 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x64>
 8003338:	2300      	movs	r3, #0
 800333a:	e7eb      	b.n	8003314 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x64>
        return true;
 800333c:	2001      	movs	r0, #1
 800333e:	e7f7      	b.n	8003330 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x80>
 8003340:	2001      	movs	r0, #1
 8003342:	e7f5      	b.n	8003330 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x80>
 8003344:	00108001 	.word	0x00108001

08003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>:
Address_field::Address_field(const Register* registers, const uint8_t reg_count, const bool reg_revers, const char mode, const uint32_t min_value,
 8003348:	b530      	push	{r4, r5, lr}
 800334a:	b087      	sub	sp, #28
 800334c:	4604      	mov	r4, r0
    init_address_field(registers, reg_count, reg_revers, mode, min_value, max_value, reserved_value, reserv_count);
 800334e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003350:	9504      	str	r5, [sp, #16]
 8003352:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003354:	9503      	str	r5, [sp, #12]
 8003356:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003358:	9502      	str	r5, [sp, #8]
 800335a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800335c:	9501      	str	r5, [sp, #4]
 800335e:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8003362:	9500      	str	r5, [sp, #0]
 8003364:	f7ff ffa4 	bl	80032b0 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm>
}
 8003368:	4620      	mov	r0, r4
 800336a:	b007      	add	sp, #28
 800336c:	bd30      	pop	{r4, r5, pc}

0800336e <_ZNK13Address_field9get_valueEPKhi>:


uint32_t Address_field::get_value(const uint8_t *register_value, int register_count) const {
    if (register_count < (max_address_ + 1))
 800336e:	88c3      	ldrh	r3, [r0, #6]
 8003370:	3301      	adds	r3, #1
 8003372:	4293      	cmp	r3, r2
 8003374:	dc2e      	bgt.n	80033d4 <_ZNK13Address_field9get_valueEPKhi+0x66>
uint32_t Address_field::get_value(const uint8_t *register_value, int register_count) const {
 8003376:	b430      	push	{r4, r5}
        return -1;
    uint32_t value = 0;
    if(reg_revers_) {
 8003378:	7943      	ldrb	r3, [r0, #5]
 800337a:	b19b      	cbz	r3, 80033a4 <_ZNK13Address_field9get_valueEPKhi+0x36>
        for (int i = 0; i < reg_count_; ++i) {
 800337c:	7905      	ldrb	r5, [r0, #4]
 800337e:	b365      	cbz	r5, 80033da <_ZNK13Address_field9get_valueEPKhi+0x6c>
 8003380:	6803      	ldr	r3, [r0, #0]
 8003382:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    uint32_t value = 0;
 8003386:	2000      	movs	r0, #0
            value <<= registers_[i].bit_count();
 8003388:	789a      	ldrb	r2, [r3, #2]
 800338a:	4090      	lsls	r0, r2
            value |= (register_value[registers_[i].address()] & registers_[i].mask()) >> registers_[i].bit_bias();
 800338c:	881a      	ldrh	r2, [r3, #0]
 800338e:	5c8a      	ldrb	r2, [r1, r2]
 8003390:	685c      	ldr	r4, [r3, #4]
 8003392:	4022      	ands	r2, r4
 8003394:	78dc      	ldrb	r4, [r3, #3]
 8003396:	40e2      	lsrs	r2, r4
 8003398:	4310      	orrs	r0, r2
 800339a:	3308      	adds	r3, #8
        for (int i = 0; i < reg_count_; ++i) {
 800339c:	42ab      	cmp	r3, r5
 800339e:	d1f3      	bne.n	8003388 <_ZNK13Address_field9get_valueEPKhi+0x1a>
            value <<= registers_[i].bit_count();
            value |= (register_value[registers_[i].address()] & registers_[i].mask()) >> registers_[i].bit_bias();
        }
    }
    return value;
}
 80033a0:	bc30      	pop	{r4, r5}
 80033a2:	4770      	bx	lr
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 80033a4:	7903      	ldrb	r3, [r0, #4]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d419      	bmi.n	80033de <_ZNK13Address_field9get_valueEPKhi+0x70>
            value <<= registers_[i].bit_count();
 80033aa:	6805      	ldr	r5, [r0, #0]
 80033ac:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    uint32_t value = 0;
 80033b0:	2000      	movs	r0, #0
            value <<= registers_[i].bit_count();
 80033b2:	f813 2c06 	ldrb.w	r2, [r3, #-6]
 80033b6:	4090      	lsls	r0, r2
            value |= (register_value[registers_[i].address()] & registers_[i].mask()) >> registers_[i].bit_bias();
 80033b8:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80033bc:	5c8a      	ldrb	r2, [r1, r2]
 80033be:	f853 4c04 	ldr.w	r4, [r3, #-4]
 80033c2:	4022      	ands	r2, r4
 80033c4:	f813 4c05 	ldrb.w	r4, [r3, #-5]
 80033c8:	40e2      	lsrs	r2, r4
 80033ca:	4310      	orrs	r0, r2
 80033cc:	3b08      	subs	r3, #8
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 80033ce:	42ab      	cmp	r3, r5
 80033d0:	d1ef      	bne.n	80033b2 <_ZNK13Address_field9get_valueEPKhi+0x44>
 80033d2:	e7e5      	b.n	80033a0 <_ZNK13Address_field9get_valueEPKhi+0x32>
        return -1;
 80033d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80033d8:	4770      	bx	lr
    uint32_t value = 0;
 80033da:	2000      	movs	r0, #0
 80033dc:	e7e0      	b.n	80033a0 <_ZNK13Address_field9get_valueEPKhi+0x32>
 80033de:	2000      	movs	r0, #0
 80033e0:	e7de      	b.n	80033a0 <_ZNK13Address_field9get_valueEPKhi+0x32>

080033e2 <_ZNK13Address_field9set_valueEmPhi>:

bool Address_field::set_value(uint32_t value, uint8_t *register_value, int register_count) const {
 80033e2:	b4f0      	push	{r4, r5, r6, r7}
    if ((register_count < (max_address_ + 1)) || (mode_ == 'r') ||
 80033e4:	88c4      	ldrh	r4, [r0, #6]
 80033e6:	3401      	adds	r4, #1
 80033e8:	429c      	cmp	r4, r3
 80033ea:	dc65      	bgt.n	80034b8 <_ZNK13Address_field9set_valueEmPhi+0xd6>
 80033ec:	7e03      	ldrb	r3, [r0, #24]
 80033ee:	2b72      	cmp	r3, #114	; 0x72
 80033f0:	d066      	beq.n	80034c0 <_ZNK13Address_field9set_valueEmPhi+0xde>
 80033f2:	6883      	ldr	r3, [r0, #8]
 80033f4:	428b      	cmp	r3, r1
 80033f6:	d865      	bhi.n	80034c4 <_ZNK13Address_field9set_valueEmPhi+0xe2>
                (value < min_value_) || (value > max_value_))
 80033f8:	68c3      	ldr	r3, [r0, #12]
 80033fa:	428b      	cmp	r3, r1
 80033fc:	d364      	bcc.n	80034c8 <_ZNK13Address_field9set_valueEmPhi+0xe6>
        return true;
    for (uint32_t i = 0; i < reserv_count_; ++i)
 80033fe:	6946      	ldr	r6, [r0, #20]
 8003400:	b16e      	cbz	r6, 800341e <_ZNK13Address_field9set_valueEmPhi+0x3c>
        if (value == reserved_value_[i])
 8003402:	6904      	ldr	r4, [r0, #16]
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	428b      	cmp	r3, r1
 8003408:	d060      	beq.n	80034cc <_ZNK13Address_field9set_valueEmPhi+0xea>
    for (uint32_t i = 0; i < reserv_count_; ++i)
 800340a:	2300      	movs	r3, #0
 800340c:	3301      	adds	r3, #1
 800340e:	42b3      	cmp	r3, r6
 8003410:	d005      	beq.n	800341e <_ZNK13Address_field9set_valueEmPhi+0x3c>
        if (value == reserved_value_[i])
 8003412:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8003416:	428d      	cmp	r5, r1
 8003418:	d1f8      	bne.n	800340c <_ZNK13Address_field9set_valueEmPhi+0x2a>
            return true;
 800341a:	2301      	movs	r3, #1
 800341c:	e04d      	b.n	80034ba <_ZNK13Address_field9set_valueEmPhi+0xd8>
    if(reg_revers_) {
 800341e:	7943      	ldrb	r3, [r0, #5]
 8003420:	b30b      	cbz	r3, 8003466 <_ZNK13Address_field9set_valueEmPhi+0x84>
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 8003422:	7905      	ldrb	r5, [r0, #4]
 8003424:	3d01      	subs	r5, #1
 8003426:	d453      	bmi.n	80034d0 <_ZNK13Address_field9set_valueEmPhi+0xee>
 8003428:	00ec      	lsls	r4, r5, #3
            register_value[registers_[i].address()] &= ~registers_[i].mask();
 800342a:	6803      	ldr	r3, [r0, #0]
 800342c:	191f      	adds	r7, r3, r4
 800342e:	5b1e      	ldrh	r6, [r3, r4]
 8003430:	687f      	ldr	r7, [r7, #4]
 8003432:	5d93      	ldrb	r3, [r2, r6]
 8003434:	ea23 0307 	bic.w	r3, r3, r7
 8003438:	5593      	strb	r3, [r2, r6]
            register_value[registers_[i].address()] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
 800343a:	6806      	ldr	r6, [r0, #0]
 800343c:	1933      	adds	r3, r6, r4
 800343e:	78df      	ldrb	r7, [r3, #3]
 8003440:	5b36      	ldrh	r6, [r6, r4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	40fb      	lsrs	r3, r7
 8003446:	400b      	ands	r3, r1
 8003448:	40bb      	lsls	r3, r7
 800344a:	5d97      	ldrb	r7, [r2, r6]
 800344c:	433b      	orrs	r3, r7
 800344e:	5593      	strb	r3, [r2, r6]
    return bit_count_;
 8003450:	6803      	ldr	r3, [r0, #0]
 8003452:	4423      	add	r3, r4
            value >>= registers_[i].bit_count();
 8003454:	789b      	ldrb	r3, [r3, #2]
 8003456:	40d9      	lsrs	r1, r3
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 8003458:	3d01      	subs	r5, #1
 800345a:	3c08      	subs	r4, #8
 800345c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003460:	d1e3      	bne.n	800342a <_ZNK13Address_field9set_valueEmPhi+0x48>
            register_value[registers_[i].address()] &= ~registers_[i].mask();
            register_value[registers_[i].address()] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
            value >>= registers_[i].bit_count();
        }
    }
    return false;
 8003462:	2300      	movs	r3, #0
 8003464:	e029      	b.n	80034ba <_ZNK13Address_field9set_valueEmPhi+0xd8>
        for (int i = 0; i < reg_count_; ++i) {
 8003466:	7904      	ldrb	r4, [r0, #4]
 8003468:	b33c      	cbz	r4, 80034ba <_ZNK13Address_field9set_valueEmPhi+0xd8>
 800346a:	2500      	movs	r5, #0
 800346c:	00ee      	lsls	r6, r5, #3
            register_value[registers_[i].address()] &= ~registers_[i].mask();
 800346e:	6804      	ldr	r4, [r0, #0]
 8003470:	eb04 0c06 	add.w	ip, r4, r6
 8003474:	f834 7035 	ldrh.w	r7, [r4, r5, lsl #3]
 8003478:	f8dc c004 	ldr.w	ip, [ip, #4]
 800347c:	5dd4      	ldrb	r4, [r2, r7]
 800347e:	ea24 040c 	bic.w	r4, r4, ip
 8003482:	55d4      	strb	r4, [r2, r7]
            register_value[registers_[i].address()] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
 8003484:	6807      	ldr	r7, [r0, #0]
 8003486:	19bc      	adds	r4, r7, r6
 8003488:	f894 c003 	ldrb.w	ip, [r4, #3]
 800348c:	f837 7035 	ldrh.w	r7, [r7, r5, lsl #3]
 8003490:	6864      	ldr	r4, [r4, #4]
 8003492:	fa24 f40c 	lsr.w	r4, r4, ip
 8003496:	400c      	ands	r4, r1
 8003498:	fa04 f40c 	lsl.w	r4, r4, ip
 800349c:	f812 c007 	ldrb.w	ip, [r2, r7]
 80034a0:	ea44 040c 	orr.w	r4, r4, ip
 80034a4:	55d4      	strb	r4, [r2, r7]
    return bit_count_;
 80034a6:	6804      	ldr	r4, [r0, #0]
 80034a8:	4434      	add	r4, r6
            value >>= registers_[i].bit_count();
 80034aa:	78a4      	ldrb	r4, [r4, #2]
 80034ac:	40e1      	lsrs	r1, r4
        for (int i = 0; i < reg_count_; ++i) {
 80034ae:	3501      	adds	r5, #1
 80034b0:	7904      	ldrb	r4, [r0, #4]
 80034b2:	42ac      	cmp	r4, r5
 80034b4:	dcda      	bgt.n	800346c <_ZNK13Address_field9set_valueEmPhi+0x8a>
 80034b6:	e000      	b.n	80034ba <_ZNK13Address_field9set_valueEmPhi+0xd8>
        return true;
 80034b8:	2301      	movs	r3, #1
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	bcf0      	pop	{r4, r5, r6, r7}
 80034be:	4770      	bx	lr
        return true;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e7fa      	b.n	80034ba <_ZNK13Address_field9set_valueEmPhi+0xd8>
 80034c4:	2301      	movs	r3, #1
 80034c6:	e7f8      	b.n	80034ba <_ZNK13Address_field9set_valueEmPhi+0xd8>
 80034c8:	2301      	movs	r3, #1
 80034ca:	e7f6      	b.n	80034ba <_ZNK13Address_field9set_valueEmPhi+0xd8>
            return true;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e7f4      	b.n	80034ba <_ZNK13Address_field9set_valueEmPhi+0xd8>
    return false;
 80034d0:	2300      	movs	r3, #0
 80034d2:	e7f2      	b.n	80034ba <_ZNK13Address_field9set_valueEmPhi+0xd8>

080034d4 <_ZNK13Address_field9get_valueERK11LoRa_packeth>:

#if defined( ADD_LORA_PACKET_CODE )
uint32_t Address_field::get_value(const class LoRa_packet& packet, uint8_t bias) const {
 80034d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ((SIZE_LORA_PACKET_MAX_LEN - bias) < ((uint32_t)max_address_ + 1))
 80034d8:	f1c2 0432 	rsb	r4, r2, #50	; 0x32
 80034dc:	88c3      	ldrh	r3, [r0, #6]
 80034de:	3301      	adds	r3, #1
 80034e0:	429c      	cmp	r4, r3
 80034e2:	d351      	bcc.n	8003588 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0xb4>
 80034e4:	4616      	mov	r6, r2
 80034e6:	460f      	mov	r7, r1
 80034e8:	4604      	mov	r4, r0
        return -1;
    uint32_t value = 0;
    if(reg_revers_) {
 80034ea:	7943      	ldrb	r3, [r0, #5]
 80034ec:	b30b      	cbz	r3, 8003532 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0x5e>
        for (int i = 0; i < reg_count_; ++i) {
 80034ee:	7903      	ldrb	r3, [r0, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d04d      	beq.n	8003590 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0xbc>
 80034f4:	2500      	movs	r5, #0
    uint32_t value = 0;
 80034f6:	4628      	mov	r0, r5
 80034f8:	ea4f 09c5 	mov.w	r9, r5, lsl #3
            value <<= registers_[i].bit_count();
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	eb03 0209 	add.w	r2, r3, r9
 8003502:	f892 8002 	ldrb.w	r8, [r2, #2]
 8003506:	fa00 f808 	lsl.w	r8, r0, r8
            value |= (packet[registers_[i].address() + bias] & registers_[i].mask()) >> registers_[i].bit_bias();
 800350a:	f833 1035 	ldrh.w	r1, [r3, r5, lsl #3]
 800350e:	4431      	add	r1, r6
 8003510:	4638      	mov	r0, r7
 8003512:	f001 f8a3 	bl	800465c <_ZNK11LoRa_packetixEi>
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	444b      	add	r3, r9
 800351a:	7800      	ldrb	r0, [r0, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	4010      	ands	r0, r2
 8003520:	78db      	ldrb	r3, [r3, #3]
 8003522:	40d8      	lsrs	r0, r3
 8003524:	ea40 0008 	orr.w	r0, r0, r8
        for (int i = 0; i < reg_count_; ++i) {
 8003528:	3501      	adds	r5, #1
 800352a:	7923      	ldrb	r3, [r4, #4]
 800352c:	42ab      	cmp	r3, r5
 800352e:	dce3      	bgt.n	80034f8 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0x24>
 8003530:	e02c      	b.n	800358c <_ZNK13Address_field9get_valueERK11LoRa_packeth+0xb8>
        }
    }
    else {
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 8003532:	f890 9004 	ldrb.w	r9, [r0, #4]
 8003536:	f1b9 0f01 	cmp.w	r9, #1
 800353a:	d42b      	bmi.n	8003594 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0xc0>
 800353c:	2500      	movs	r5, #0
    uint32_t value = 0;
 800353e:	4628      	mov	r0, r5
 8003540:	f109 5a00 	add.w	sl, r9, #536870912	; 0x20000000
 8003544:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003548:	ebaa 0205 	sub.w	r2, sl, r5
 800354c:	ea4f 08c2 	mov.w	r8, r2, lsl #3
            value <<= registers_[i].bit_count();
 8003550:	6823      	ldr	r3, [r4, #0]
 8003552:	eb03 0108 	add.w	r1, r3, r8
 8003556:	f891 b002 	ldrb.w	fp, [r1, #2]
 800355a:	fa00 fb0b 	lsl.w	fp, r0, fp
            value |= (packet[registers_[i].address() + bias] & registers_[i].mask()) >> registers_[i].bit_bias();
 800355e:	f833 1032 	ldrh.w	r1, [r3, r2, lsl #3]
 8003562:	4431      	add	r1, r6
 8003564:	4638      	mov	r0, r7
 8003566:	f001 f879 	bl	800465c <_ZNK11LoRa_packetixEi>
 800356a:	6823      	ldr	r3, [r4, #0]
 800356c:	4498      	add	r8, r3
 800356e:	7800      	ldrb	r0, [r0, #0]
 8003570:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003574:	4018      	ands	r0, r3
 8003576:	f898 3003 	ldrb.w	r3, [r8, #3]
 800357a:	40d8      	lsrs	r0, r3
 800357c:	ea40 000b 	orr.w	r0, r0, fp
 8003580:	3501      	adds	r5, #1
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 8003582:	45a9      	cmp	r9, r5
 8003584:	d1e0      	bne.n	8003548 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0x74>
 8003586:	e001      	b.n	800358c <_ZNK13Address_field9get_valueERK11LoRa_packeth+0xb8>
        return -1;
 8003588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
    }
    return value;
}
 800358c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t value = 0;
 8003590:	2000      	movs	r0, #0
 8003592:	e7fb      	b.n	800358c <_ZNK13Address_field9get_valueERK11LoRa_packeth+0xb8>
 8003594:	2000      	movs	r0, #0
 8003596:	e7f9      	b.n	800358c <_ZNK13Address_field9get_valueERK11LoRa_packeth+0xb8>

08003598 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>:
bool Address_field::set_value(uint32_t value, class LoRa_packet& packet, uint8_t bias) const {
 8003598:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800359c:	4690      	mov	r8, r2
 800359e:	461e      	mov	r6, r3
    if (((SIZE_LORA_PACKET_MAX_LEN - bias) < ((uint32_t)max_address_ + 1)) || (mode_ == 'r') ||
 80035a0:	f1c3 0232 	rsb	r2, r3, #50	; 0x32
 80035a4:	88c3      	ldrh	r3, [r0, #6]
 80035a6:	3301      	adds	r3, #1
 80035a8:	429a      	cmp	r2, r3
 80035aa:	f0c0 809f 	bcc.w	80036ec <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x154>
 80035ae:	4604      	mov	r4, r0
 80035b0:	460d      	mov	r5, r1
 80035b2:	7e03      	ldrb	r3, [r0, #24]
 80035b4:	2b72      	cmp	r3, #114	; 0x72
 80035b6:	f000 809d 	beq.w	80036f4 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x15c>
 80035ba:	6883      	ldr	r3, [r0, #8]
 80035bc:	428b      	cmp	r3, r1
 80035be:	f200 809b 	bhi.w	80036f8 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x160>
                (value < min_value_) || (value > max_value_))
 80035c2:	68c3      	ldr	r3, [r0, #12]
 80035c4:	428b      	cmp	r3, r1
 80035c6:	f0c0 8099 	bcc.w	80036fc <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x164>
        return true;
    for (uint32_t i = 0; i < reserv_count_; ++i)
 80035ca:	6940      	ldr	r0, [r0, #20]
 80035cc:	b170      	cbz	r0, 80035ec <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x54>
        if (value == reserved_value_[i])
 80035ce:	6922      	ldr	r2, [r4, #16]
 80035d0:	6813      	ldr	r3, [r2, #0]
 80035d2:	428b      	cmp	r3, r1
 80035d4:	f000 8094 	beq.w	8003700 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x168>
    for (uint32_t i = 0; i < reserv_count_; ++i)
 80035d8:	2300      	movs	r3, #0
 80035da:	3301      	adds	r3, #1
 80035dc:	4298      	cmp	r0, r3
 80035de:	d005      	beq.n	80035ec <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x54>
        if (value == reserved_value_[i])
 80035e0:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80035e4:	42a9      	cmp	r1, r5
 80035e6:	d1f8      	bne.n	80035da <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x42>
            return true;
 80035e8:	2701      	movs	r7, #1
 80035ea:	e080      	b.n	80036ee <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x156>

    // while(packet.get_len() < max_address_ + bias)
    //     packet.add_packet_data(0);
    packet.add_packet_data(&packet[packet.get_len()-1], max_address_ + bias - packet.get_len() + 1);
 80035ec:	4640      	mov	r0, r8
 80035ee:	f001 f829 	bl	8004644 <_ZNK11LoRa_packet7get_lenEv>
 80035f2:	1e41      	subs	r1, r0, #1
 80035f4:	4640      	mov	r0, r8
 80035f6:	f001 f82d 	bl	8004654 <_ZN11LoRa_packetixEi>
 80035fa:	4681      	mov	r9, r0
 80035fc:	79a7      	ldrb	r7, [r4, #6]
 80035fe:	4437      	add	r7, r6
 8003600:	b2ff      	uxtb	r7, r7
 8003602:	4640      	mov	r0, r8
 8003604:	f001 f81e 	bl	8004644 <_ZNK11LoRa_packet7get_lenEv>
 8003608:	3701      	adds	r7, #1
 800360a:	1a3f      	subs	r7, r7, r0
 800360c:	b2fa      	uxtb	r2, r7
 800360e:	4649      	mov	r1, r9
 8003610:	4640      	mov	r0, r8
 8003612:	f000 ffe0 	bl	80045d6 <_ZN11LoRa_packet15add_packet_dataEPKhh>

    if(reg_revers_) {
 8003616:	7967      	ldrb	r7, [r4, #5]
 8003618:	b397      	cbz	r7, 8003680 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0xe8>
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 800361a:	f894 a004 	ldrb.w	sl, [r4, #4]
 800361e:	f1ba 0a01 	subs.w	sl, sl, #1
 8003622:	d46f      	bmi.n	8003704 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x16c>
 8003624:	ea4f 09ca 	mov.w	r9, sl, lsl #3
            packet[registers_[i].address() + bias] &= ~registers_[i].mask();
 8003628:	6822      	ldr	r2, [r4, #0]
 800362a:	eb02 0309 	add.w	r3, r2, r9
 800362e:	685f      	ldr	r7, [r3, #4]
 8003630:	43ff      	mvns	r7, r7
 8003632:	f832 1009 	ldrh.w	r1, [r2, r9]
 8003636:	4431      	add	r1, r6
 8003638:	4640      	mov	r0, r8
 800363a:	f001 f80b 	bl	8004654 <_ZN11LoRa_packetixEi>
 800363e:	7803      	ldrb	r3, [r0, #0]
 8003640:	403b      	ands	r3, r7
 8003642:	7003      	strb	r3, [r0, #0]
            packet[registers_[i].address() + bias] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	eb03 0109 	add.w	r1, r3, r9
 800364a:	78ca      	ldrb	r2, [r1, #3]
 800364c:	684f      	ldr	r7, [r1, #4]
 800364e:	40d7      	lsrs	r7, r2
 8003650:	402f      	ands	r7, r5
 8003652:	4097      	lsls	r7, r2
 8003654:	f833 1009 	ldrh.w	r1, [r3, r9]
 8003658:	4431      	add	r1, r6
 800365a:	4640      	mov	r0, r8
 800365c:	f000 fffa 	bl	8004654 <_ZN11LoRa_packetixEi>
 8003660:	7803      	ldrb	r3, [r0, #0]
 8003662:	431f      	orrs	r7, r3
 8003664:	7007      	strb	r7, [r0, #0]
    return bit_count_;
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	444b      	add	r3, r9
            value >>= registers_[i].bit_count();
 800366a:	789b      	ldrb	r3, [r3, #2]
 800366c:	40dd      	lsrs	r5, r3
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 800366e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003672:	f1a9 0908 	sub.w	r9, r9, #8
 8003676:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800367a:	d1d5      	bne.n	8003628 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x90>
            packet[registers_[i].address() + bias] &= ~registers_[i].mask();
            packet[registers_[i].address() + bias] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
            value >>= registers_[i].bit_count();
        }
    }
    return false;
 800367c:	2700      	movs	r7, #0
 800367e:	e036      	b.n	80036ee <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x156>
        for (int i = 0; i < reg_count_; ++i) {
 8003680:	7923      	ldrb	r3, [r4, #4]
 8003682:	b3a3      	cbz	r3, 80036ee <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x156>
 8003684:	f04f 0a00 	mov.w	sl, #0
 8003688:	ea4f 0bca 	mov.w	fp, sl, lsl #3
            packet[registers_[i].address() + bias] &= ~registers_[i].mask();
 800368c:	6822      	ldr	r2, [r4, #0]
 800368e:	eb02 030b 	add.w	r3, r2, fp
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	ea6f 0903 	mvn.w	r9, r3
 8003698:	f832 103a 	ldrh.w	r1, [r2, sl, lsl #3]
 800369c:	4431      	add	r1, r6
 800369e:	4640      	mov	r0, r8
 80036a0:	f000 ffd8 	bl	8004654 <_ZN11LoRa_packetixEi>
 80036a4:	7803      	ldrb	r3, [r0, #0]
 80036a6:	ea03 0309 	and.w	r3, r3, r9
 80036aa:	7003      	strb	r3, [r0, #0]
            packet[registers_[i].address() + bias] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
 80036ac:	6822      	ldr	r2, [r4, #0]
 80036ae:	eb02 030b 	add.w	r3, r2, fp
 80036b2:	78d9      	ldrb	r1, [r3, #3]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	fa23 f901 	lsr.w	r9, r3, r1
 80036ba:	ea09 0905 	and.w	r9, r9, r5
 80036be:	fa09 f901 	lsl.w	r9, r9, r1
 80036c2:	f832 103a 	ldrh.w	r1, [r2, sl, lsl #3]
 80036c6:	4431      	add	r1, r6
 80036c8:	4640      	mov	r0, r8
 80036ca:	f000 ffc3 	bl	8004654 <_ZN11LoRa_packetixEi>
 80036ce:	7803      	ldrb	r3, [r0, #0]
 80036d0:	ea43 0909 	orr.w	r9, r3, r9
 80036d4:	f880 9000 	strb.w	r9, [r0]
    return bit_count_;
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	445b      	add	r3, fp
            value >>= registers_[i].bit_count();
 80036dc:	789b      	ldrb	r3, [r3, #2]
 80036de:	40dd      	lsrs	r5, r3
        for (int i = 0; i < reg_count_; ++i) {
 80036e0:	f10a 0a01 	add.w	sl, sl, #1
 80036e4:	7923      	ldrb	r3, [r4, #4]
 80036e6:	4553      	cmp	r3, sl
 80036e8:	dcce      	bgt.n	8003688 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0xf0>
 80036ea:	e000      	b.n	80036ee <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x156>
        return true;
 80036ec:	2701      	movs	r7, #1
}
 80036ee:	4638      	mov	r0, r7
 80036f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return true;
 80036f4:	2701      	movs	r7, #1
 80036f6:	e7fa      	b.n	80036ee <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x156>
 80036f8:	2701      	movs	r7, #1
 80036fa:	e7f8      	b.n	80036ee <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x156>
 80036fc:	2701      	movs	r7, #1
 80036fe:	e7f6      	b.n	80036ee <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x156>
            return true;
 8003700:	2701      	movs	r7, #1
 8003702:	e7f4      	b.n	80036ee <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x156>
    return false;
 8003704:	2700      	movs	r7, #0
 8003706:	e7f2      	b.n	80036ee <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x156>

08003708 <_ZNK13Address_field13get_registersEv>:
#endif

const Register *Address_field::get_registers() const {
    return registers_;
}
 8003708:	6800      	ldr	r0, [r0, #0]
 800370a:	4770      	bx	lr

0800370c <_ZNK13Address_field13get_reg_countEv>:
uint8_t Address_field::get_reg_count() const {
    return reg_count_;
}
 800370c:	7900      	ldrb	r0, [r0, #4]
 800370e:	4770      	bx	lr

08003710 <_ZeqRK13Address_fieldS1_>:
char Address_field::get_mode() const {
    return mode_;
}

bool operator==(const Address_field& left, const Address_field& right) {
    if(left.reg_count_ != right.reg_count_)
 8003710:	7903      	ldrb	r3, [r0, #4]
 8003712:	790a      	ldrb	r2, [r1, #4]
 8003714:	429a      	cmp	r2, r3
 8003716:	d001      	beq.n	800371c <_ZeqRK13Address_fieldS1_+0xc>
        return false;
 8003718:	2000      	movs	r0, #0
    for(uint32_t i = 0; i < left.reserv_count_; ++i) {
        if(left.reserved_value_[i] != right.reserved_value_[i])
            return false;
    }
    return true;
}
 800371a:	4770      	bx	lr
bool operator==(const Address_field& left, const Address_field& right) {
 800371c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(left.max_address_ != right.max_address_)
 8003720:	88c4      	ldrh	r4, [r0, #6]
 8003722:	88ca      	ldrh	r2, [r1, #6]
 8003724:	4294      	cmp	r4, r2
 8003726:	d002      	beq.n	800372e <_ZeqRK13Address_fieldS1_+0x1e>
        return false;
 8003728:	2000      	movs	r0, #0
}
 800372a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(left.min_value_ != right.min_value_)
 800372e:	6884      	ldr	r4, [r0, #8]
 8003730:	688a      	ldr	r2, [r1, #8]
 8003732:	4294      	cmp	r4, r2
 8003734:	d001      	beq.n	800373a <_ZeqRK13Address_fieldS1_+0x2a>
        return false;
 8003736:	2000      	movs	r0, #0
 8003738:	e7f7      	b.n	800372a <_ZeqRK13Address_fieldS1_+0x1a>
    if(left.max_value_ != right.max_value_)
 800373a:	68c4      	ldr	r4, [r0, #12]
 800373c:	68ca      	ldr	r2, [r1, #12]
 800373e:	4294      	cmp	r4, r2
 8003740:	d001      	beq.n	8003746 <_ZeqRK13Address_fieldS1_+0x36>
        return false;
 8003742:	2000      	movs	r0, #0
 8003744:	e7f1      	b.n	800372a <_ZeqRK13Address_fieldS1_+0x1a>
    if(left.reserv_count_ != right.reserv_count_)
 8003746:	6945      	ldr	r5, [r0, #20]
 8003748:	694a      	ldr	r2, [r1, #20]
 800374a:	4295      	cmp	r5, r2
 800374c:	d001      	beq.n	8003752 <_ZeqRK13Address_fieldS1_+0x42>
        return false;
 800374e:	2000      	movs	r0, #0
 8003750:	e7eb      	b.n	800372a <_ZeqRK13Address_fieldS1_+0x1a>
    if(left.mode_ != right.mode_)
 8003752:	7e04      	ldrb	r4, [r0, #24]
 8003754:	7e0a      	ldrb	r2, [r1, #24]
 8003756:	4294      	cmp	r4, r2
 8003758:	d001      	beq.n	800375e <_ZeqRK13Address_fieldS1_+0x4e>
        return false;
 800375a:	2000      	movs	r0, #0
 800375c:	e7e5      	b.n	800372a <_ZeqRK13Address_fieldS1_+0x1a>
 800375e:	4688      	mov	r8, r1
 8003760:	4604      	mov	r4, r0
    for(int i = 0; i < left.reg_count_; ++i) {
 8003762:	469a      	mov	sl, r3
 8003764:	b173      	cbz	r3, 8003784 <_ZeqRK13Address_fieldS1_+0x74>
 8003766:	6807      	ldr	r7, [r0, #0]
 8003768:	680e      	ldr	r6, [r1, #0]
 800376a:	f04f 0900 	mov.w	r9, #0
        if(left.registers_[i] != right.registers_[i])
 800376e:	4631      	mov	r1, r6
 8003770:	4638      	mov	r0, r7
 8003772:	f7ff fd95 	bl	80032a0 <_ZneRK8RegisterS1_>
 8003776:	b9e8      	cbnz	r0, 80037b4 <_ZeqRK13Address_fieldS1_+0xa4>
    for(int i = 0; i < left.reg_count_; ++i) {
 8003778:	f109 0901 	add.w	r9, r9, #1
 800377c:	3708      	adds	r7, #8
 800377e:	3608      	adds	r6, #8
 8003780:	45d1      	cmp	r9, sl
 8003782:	d1f4      	bne.n	800376e <_ZeqRK13Address_fieldS1_+0x5e>
    for(uint32_t i = 0; i < left.reserv_count_; ++i) {
 8003784:	b1a5      	cbz	r5, 80037b0 <_ZeqRK13Address_fieldS1_+0xa0>
        if(left.reserved_value_[i] != right.reserved_value_[i])
 8003786:	6921      	ldr	r1, [r4, #16]
 8003788:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800378c:	6808      	ldr	r0, [r1, #0]
 800378e:	6813      	ldr	r3, [r2, #0]
 8003790:	4298      	cmp	r0, r3
 8003792:	d111      	bne.n	80037b8 <_ZeqRK13Address_fieldS1_+0xa8>
    for(uint32_t i = 0; i < left.reserv_count_; ++i) {
 8003794:	2300      	movs	r3, #0
 8003796:	3301      	adds	r3, #1
 8003798:	429d      	cmp	r5, r3
 800379a:	d007      	beq.n	80037ac <_ZeqRK13Address_fieldS1_+0x9c>
        if(left.reserved_value_[i] != right.reserved_value_[i])
 800379c:	f851 4f04 	ldr.w	r4, [r1, #4]!
 80037a0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80037a4:	4284      	cmp	r4, r0
 80037a6:	d0f6      	beq.n	8003796 <_ZeqRK13Address_fieldS1_+0x86>
            return false;
 80037a8:	2000      	movs	r0, #0
 80037aa:	e7be      	b.n	800372a <_ZeqRK13Address_fieldS1_+0x1a>
    return true;
 80037ac:	2001      	movs	r0, #1
 80037ae:	e7bc      	b.n	800372a <_ZeqRK13Address_fieldS1_+0x1a>
 80037b0:	2001      	movs	r0, #1
 80037b2:	e7ba      	b.n	800372a <_ZeqRK13Address_fieldS1_+0x1a>
            return false;
 80037b4:	2000      	movs	r0, #0
 80037b6:	e7b8      	b.n	800372a <_ZeqRK13Address_fieldS1_+0x1a>
            return false;
 80037b8:	2000      	movs	r0, #0
 80037ba:	e7b6      	b.n	800372a <_ZeqRK13Address_fieldS1_+0x1a>

080037bc <_ZN10LoRa_classD1Ev>:
	init(nullptr);
}
LoRa_class::LoRa_class(SPI_HandleTypeDef *spi) {
	init(spi);
}
LoRa_class::~LoRa_class() {
 80037bc:	b510      	push	{r4, lr}
 80037be:	4604      	mov	r4, r0
    if(_spi != nullptr)
 80037c0:	6800      	ldr	r0, [r0, #0]
 80037c2:	b110      	cbz	r0, 80037ca <_ZN10LoRa_classD1Ev+0xe>
        delete _spi;
 80037c4:	2158      	movs	r1, #88	; 0x58
 80037c6:	f007 f93b 	bl	800aa40 <_ZdlPvj>
LoRa_class::~LoRa_class() {
 80037ca:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80037ce:	f000 ff95 	bl	80046fc <_ZN13LoRa_registerD1Ev>
}
 80037d2:	4620      	mov	r0, r4
 80037d4:	bd10      	pop	{r4, pc}
	...

080037d8 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef>:

void LoRa_class::init(SPI_HandleTypeDef *spi) {
 80037d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_reset_pin = LORA_RESET_Pin;
 80037da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037de:	8083      	strh	r3, [r0, #4]
	_reset_port = LORA_RESET_GPIO_Port;
 80037e0:	4c0e      	ldr	r4, [pc, #56]	; (800381c <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef+0x44>)
 80037e2:	6084      	str	r4, [r0, #8]
	_nss_pin = LORA_NSS_Pin;
 80037e4:	2310      	movs	r3, #16
 80037e6:	8183      	strh	r3, [r0, #12]
	_nss_port = LORA_NSS_GPIO_Port;
 80037e8:	4a0d      	ldr	r2, [pc, #52]	; (8003820 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef+0x48>)
 80037ea:	6102      	str	r2, [r0, #16]
#ifdef LoRa_DIO0_Pin
	_dio0_pin = LORA_DIO0_Pin;
 80037ec:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80037f0:	8285      	strh	r5, [r0, #20]
	_dio0_port = LORA_DIO0_GPIO_Port;
 80037f2:	6184      	str	r4, [r0, #24]
#else
	_dio0_pin = 0;
	_dio0_port = 0;
#endif
#ifdef LoRa_DIO1_Pin
	_dio1_pin = LORA_DIO1_Pin;
 80037f4:	2504      	movs	r5, #4
 80037f6:	8385      	strh	r5, [r0, #28]
	_dio1_port = LORA_DIO1_GPIO_Port;
 80037f8:	6204      	str	r4, [r0, #32]
#endif
#ifdef LoRa_DIO3_Pin
	_dio3_pin = LORA_DIO3_Pin;
	_dio3_port = LORA_DIO3_GPIO_Port;
#else
	_dio3_pin = 0;
 80037fa:	2400      	movs	r4, #0
 80037fc:	8484      	strh	r4, [r0, #36]	; 0x24
	_dio3_port = 0;
 80037fe:	6284      	str	r4, [r0, #40]	; 0x28
#endif
	_spi = spi;
 8003800:	6001      	str	r1, [r0, #0]
	_frequency = 0;
 8003802:	2600      	movs	r6, #0
 8003804:	2700      	movs	r7, #0
 8003806:	e9c0 670c 	strd	r6, r7, [r0, #48]	; 0x30
	_FifoTxBaseAddr = 0;
 800380a:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
	_packet_length = 0;
 800380e:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
	_reg_field.init(spi, _nss_port, _nss_pin);
 8003812:	303c      	adds	r0, #60	; 0x3c
 8003814:	f000 ff73 	bl	80046fe <_ZN13LoRa_register4initEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
}
 8003818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800381a:	bf00      	nop
 800381c:	40010c00 	.word	0x40010c00
 8003820:	40010800 	.word	0x40010800

08003824 <_ZN10LoRa_classC1Ev>:
LoRa_class::LoRa_class(/* args */) {
 8003824:	b510      	push	{r4, lr}
 8003826:	4604      	mov	r4, r0
 8003828:	303c      	adds	r0, #60	; 0x3c
 800382a:	f000 ff7f 	bl	800472c <_ZN13LoRa_registerC1Ev>
	init(nullptr);
 800382e:	2100      	movs	r1, #0
 8003830:	4620      	mov	r0, r4
 8003832:	f7ff ffd1 	bl	80037d8 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef>
}
 8003836:	4620      	mov	r0, r4
 8003838:	bd10      	pop	{r4, pc}

0800383a <_ZN10LoRa_class9field_setE13Address_fieldmb>:

uint8_t LoRa_class::field_set(Address_field field, uint32_t value, bool write) {
 800383a:	b084      	sub	sp, #16
 800383c:	b570      	push	{r4, r5, r6, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	ac0b      	add	r4, sp, #44	; 0x2c
 8003842:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8003846:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
    uint8_t result;
    result = _reg_field.set_field_value(field, value);
 800384a:	f100 053c 	add.w	r5, r0, #60	; 0x3c
 800384e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003850:	9304      	str	r3, [sp, #16]
 8003852:	ab0e      	add	r3, sp, #56	; 0x38
 8003854:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003856:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800385a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800385e:	4628      	mov	r0, r5
 8003860:	f001 f99a 	bl	8004b98 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
    if(write) {
 8003864:	b926      	cbnz	r6, 8003870 <_ZN10LoRa_class9field_setE13Address_fieldmb+0x36>
        result = _reg_field.register_write(field, true, true);
    }
    return result;
}
 8003866:	b006      	add	sp, #24
 8003868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800386c:	b004      	add	sp, #16
 800386e:	4770      	bx	lr
        result = _reg_field.register_write(field, true, true);
 8003870:	2301      	movs	r3, #1
 8003872:	9305      	str	r3, [sp, #20]
 8003874:	9304      	str	r3, [sp, #16]
 8003876:	ab0e      	add	r3, sp, #56	; 0x38
 8003878:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800387a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800387e:	ab0b      	add	r3, sp, #44	; 0x2c
 8003880:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003882:	4628      	mov	r0, r5
 8003884:	f001 f9d4 	bl	8004c30 <_ZN13LoRa_register14register_writeE13Address_fieldbb>
 8003888:	e7ed      	b.n	8003866 <_ZN10LoRa_class9field_setE13Address_fieldmb+0x2c>

0800388a <_ZN10LoRa_class9field_setEP13Address_fieldPmhb>:
uint8_t LoRa_class::field_set(Address_field* fields, uint32_t* values, uint8_t amt, bool write) {
 800388a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800388c:	b083      	sub	sp, #12
 800388e:	460e      	mov	r6, r1
 8003890:	461f      	mov	r7, r3
 8003892:	f89d 5020 	ldrb.w	r5, [sp, #32]
    uint8_t result;
    result = _reg_field.set_field_value(fields, values, amt);
 8003896:	f100 043c 	add.w	r4, r0, #60	; 0x3c
 800389a:	4620      	mov	r0, r4
 800389c:	f001 f938 	bl	8004b10 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
    if(write) {
 80038a0:	b90d      	cbnz	r5, 80038a6 <_ZN10LoRa_class9field_setEP13Address_fieldPmhb+0x1c>
        result = _reg_field.register_write(fields, amt, true, true);
    }
    return result;
}
 80038a2:	b003      	add	sp, #12
 80038a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        result = _reg_field.register_write(fields, amt, true, true);
 80038a6:	2301      	movs	r3, #1
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	463a      	mov	r2, r7
 80038ac:	4631      	mov	r1, r6
 80038ae:	4620      	mov	r0, r4
 80038b0:	f001 f986 	bl	8004bc0 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
 80038b4:	e7f5      	b.n	80038a2 <_ZN10LoRa_class9field_setEP13Address_fieldPmhb+0x18>

080038b6 <_ZN10LoRa_class9field_getE13Address_fieldPmb>:

uint8_t LoRa_class::field_get(Address_field field, uint32_t* value, bool read) {
 80038b6:	b084      	sub	sp, #16
 80038b8:	b530      	push	{r4, r5, lr}
 80038ba:	b087      	sub	sp, #28
 80038bc:	ac0b      	add	r4, sp, #44	; 0x2c
 80038be:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return _reg_field.get_field_value(field, value, read);
 80038c2:	f100 053c 	add.w	r5, r0, #60	; 0x3c
 80038c6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80038ca:	9305      	str	r3, [sp, #20]
 80038cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80038ce:	9304      	str	r3, [sp, #16]
 80038d0:	ab0e      	add	r3, sp, #56	; 0x38
 80038d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038d4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80038d8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80038dc:	4628      	mov	r0, r5
 80038de:	f001 f904 	bl	8004aea <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>
}
 80038e2:	b007      	add	sp, #28
 80038e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038e8:	b004      	add	sp, #16
 80038ea:	4770      	bx	lr

080038ec <_ZN10LoRa_class9field_getEP13Address_fieldPmhb>:
uint8_t LoRa_class::field_get(Address_field fields[], uint32_t* values, uint8_t amt, bool read) {
 80038ec:	b510      	push	{r4, lr}
 80038ee:	b082      	sub	sp, #8
    return _reg_field.get_field_value(fields, values, amt, read);
 80038f0:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80038f4:	9400      	str	r4, [sp, #0]
 80038f6:	303c      	adds	r0, #60	; 0x3c
 80038f8:	f001 f8c9 	bl	8004a8e <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb>
}
 80038fc:	b002      	add	sp, #8
 80038fe:	bd10      	pop	{r4, pc}

08003900 <_ZN10LoRa_class8set_modeEh>:
    // переход в режим сна
    mode_sleep();
}


uint8_t LoRa_class::set_mode(uint8_t mode) {
 8003900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003902:	b09b      	sub	sp, #108	; 0x6c
 8003904:	4606      	mov	r6, r0
 8003906:	460f      	mov	r7, r1
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8003908:	ac05      	add	r4, sp, #20
 800390a:	4d12      	ldr	r5, [pc, #72]	; (8003954 <_ZN10LoRa_class8set_modeEh+0x54>)
 800390c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800390e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003910:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003914:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003918:	ac0c      	add	r4, sp, #48	; 0x30
 800391a:	4d0f      	ldr	r5, [pc, #60]	; (8003958 <_ZN10LoRa_class8set_modeEh+0x58>)
 800391c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800391e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003920:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003924:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003928:	ac13      	add	r4, sp, #76	; 0x4c
 800392a:	4d0c      	ldr	r5, [pc, #48]	; (800395c <_ZN10LoRa_class8set_modeEh+0x5c>)
 800392c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800392e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003930:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003934:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    uint32_t values[3] = {1, 0, mode};
 8003938:	2300      	movs	r3, #0
 800393a:	9303      	str	r3, [sp, #12]
 800393c:	2301      	movs	r3, #1
 800393e:	9302      	str	r3, [sp, #8]
 8003940:	9704      	str	r7, [sp, #16]
    return field_set(fields, values, 3);
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	2303      	movs	r3, #3
 8003946:	aa02      	add	r2, sp, #8
 8003948:	a905      	add	r1, sp, #20
 800394a:	4630      	mov	r0, r6
 800394c:	f7ff ff9d 	bl	800388a <_ZN10LoRa_class9field_setEP13Address_fieldPmhb>
}
 8003950:	b01b      	add	sp, #108	; 0x6c
 8003952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003954:	20001d24 	.word	0x20001d24
 8003958:	20001d5c 	.word	0x20001d5c
 800395c:	20001d94 	.word	0x20001d94

08003960 <_ZN10LoRa_class10mode_sleepEv>:
// Режим сна/настройки
uint8_t LoRa_class::mode_sleep() {
 8003960:	b508      	push	{r3, lr}
    return set_mode(MODE_SLEEP);
 8003962:	2100      	movs	r1, #0
 8003964:	f7ff ffcc 	bl	8003900 <_ZN10LoRa_class8set_modeEh>
}
 8003968:	bd08      	pop	{r3, pc}

0800396a <_ZN10LoRa_class10mode_STDBYEv>:
// Режим ожидания
uint8_t LoRa_class::mode_STDBY() {
 800396a:	b508      	push	{r3, lr}
    return set_mode(MODE_STDBY);
 800396c:	2101      	movs	r1, #1
 800396e:	f7ff ffc7 	bl	8003900 <_ZN10LoRa_class8set_modeEh>
}
 8003972:	bd08      	pop	{r3, pc}

08003974 <_ZN10LoRa_class7mode_TXEb>:
// Режим отправки
uint8_t LoRa_class::mode_TX(bool set_dio) {
 8003974:	b530      	push	{r4, r5, lr}
 8003976:	b087      	sub	sp, #28
 8003978:	4604      	mov	r4, r0
    if (set_dio & (_dio0_pin != 0))
 800397a:	8a83      	ldrh	r3, [r0, #20]
 800397c:	b173      	cbz	r3, 800399c <_ZN10LoRa_class7mode_TXEb+0x28>
 800397e:	b169      	cbz	r1, 800399c <_ZN10LoRa_class7mode_TXEb+0x28>
        field_set(Dio0Mapping, 1);
 8003980:	4d09      	ldr	r5, [pc, #36]	; (80039a8 <_ZN10LoRa_class7mode_TXEb+0x34>)
 8003982:	2301      	movs	r3, #1
 8003984:	9305      	str	r3, [sp, #20]
 8003986:	9304      	str	r3, [sp, #16]
 8003988:	f105 030c 	add.w	r3, r5, #12
 800398c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800398e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003992:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003996:	4620      	mov	r0, r4
 8003998:	f7ff ff4f 	bl	800383a <_ZN10LoRa_class9field_setE13Address_fieldmb>
    return set_mode(MODE_TX);
 800399c:	2103      	movs	r1, #3
 800399e:	4620      	mov	r0, r4
 80039a0:	f7ff ffae 	bl	8003900 <_ZN10LoRa_class8set_modeEh>
}
 80039a4:	b007      	add	sp, #28
 80039a6:	bd30      	pop	{r4, r5, pc}
 80039a8:	20001bf0 	.word	0x20001bf0

080039ac <_ZN10LoRa_class9mode_FSTXEv>:
uint8_t LoRa_class::mode_FSTX() {
 80039ac:	b508      	push	{r3, lr}
    return set_mode(MODE_FSTX);
 80039ae:	2102      	movs	r1, #2
 80039b0:	f7ff ffa6 	bl	8003900 <_ZN10LoRa_class8set_modeEh>
}
 80039b4:	bd08      	pop	{r3, pc}
	...

080039b8 <_ZN10LoRa_class14mode_RX_singleEb>:
        field_set(Dio1Mapping, 0);
    }
    return set_mode(MODE_RX_CONTINUOUS);
}
// Режим единичного приёма
uint8_t LoRa_class::mode_RX_single(bool set_dio) {
 80039b8:	b570      	push	{r4, r5, r6, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	4604      	mov	r4, r0
    if (set_dio & ((_dio0_pin != 0) || (_dio1_pin != 0))) {
 80039be:	8a83      	ldrh	r3, [r0, #20]
 80039c0:	bb3b      	cbnz	r3, 8003a12 <_ZN10LoRa_class14mode_RX_singleEb+0x5a>
 80039c2:	8b83      	ldrh	r3, [r0, #28]
 80039c4:	3300      	adds	r3, #0
 80039c6:	bf18      	it	ne
 80039c8:	2301      	movne	r3, #1
 80039ca:	b1e3      	cbz	r3, 8003a06 <_ZN10LoRa_class14mode_RX_singleEb+0x4e>
 80039cc:	b1d9      	cbz	r1, 8003a06 <_ZN10LoRa_class14mode_RX_singleEb+0x4e>
        field_set(Dio0Mapping, 0, false);
 80039ce:	4d12      	ldr	r5, [pc, #72]	; (8003a18 <_ZN10LoRa_class14mode_RX_singleEb+0x60>)
 80039d0:	2600      	movs	r6, #0
 80039d2:	9605      	str	r6, [sp, #20]
 80039d4:	9604      	str	r6, [sp, #16]
 80039d6:	f105 030c 	add.w	r3, r5, #12
 80039da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039dc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80039e0:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80039e4:	4620      	mov	r0, r4
 80039e6:	f7ff ff28 	bl	800383a <_ZN10LoRa_class9field_setE13Address_fieldmb>
        field_set(Dio1Mapping, 0);
 80039ea:	4d0c      	ldr	r5, [pc, #48]	; (8003a1c <_ZN10LoRa_class14mode_RX_singleEb+0x64>)
 80039ec:	2301      	movs	r3, #1
 80039ee:	9305      	str	r3, [sp, #20]
 80039f0:	9604      	str	r6, [sp, #16]
 80039f2:	f105 030c 	add.w	r3, r5, #12
 80039f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039f8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80039fc:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003a00:	4620      	mov	r0, r4
 8003a02:	f7ff ff1a 	bl	800383a <_ZN10LoRa_class9field_setE13Address_fieldmb>
    }
    return set_mode(MODE_RX_SINGLE);
 8003a06:	2106      	movs	r1, #6
 8003a08:	4620      	mov	r0, r4
 8003a0a:	f7ff ff79 	bl	8003900 <_ZN10LoRa_class8set_modeEh>
}
 8003a0e:	b006      	add	sp, #24
 8003a10:	bd70      	pop	{r4, r5, r6, pc}
    if (set_dio & ((_dio0_pin != 0) || (_dio1_pin != 0))) {
 8003a12:	2301      	movs	r3, #1
 8003a14:	e7d9      	b.n	80039ca <_ZN10LoRa_class14mode_RX_singleEb+0x12>
 8003a16:	bf00      	nop
 8003a18:	20001bf0 	.word	0x20001bf0
 8003a1c:	20001c0c 	.word	0x20001c0c

08003a20 <_ZN10LoRa_class12set_TX_powerEhbh>:
    return set_mode(MODE_CAD);
}


// Установка силы отправляемого пакета
uint8_t LoRa_class::set_TX_power(uint8_t power, bool paboost, uint8_t max_power) {
 8003a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a24:	b0a2      	sub	sp, #136	; 0x88
 8003a26:	4607      	mov	r7, r0
 8003a28:	460c      	mov	r4, r1
 8003a2a:	4690      	mov	r8, r2
 8003a2c:	469c      	mov	ip, r3
    Address_field fields[4] = {PaDac, PaSelect, MaxPower, OutputPower};
 8003a2e:	ad06      	add	r5, sp, #24
 8003a30:	4e2d      	ldr	r6, [pc, #180]	; (8003ae8 <_ZN10LoRa_class12set_TX_powerEhbh+0xc8>)
 8003a32:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a36:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003a3a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003a3e:	ad0d      	add	r5, sp, #52	; 0x34
 8003a40:	4e2a      	ldr	r6, [pc, #168]	; (8003aec <_ZN10LoRa_class12set_TX_powerEhbh+0xcc>)
 8003a42:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a46:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003a4a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003a4e:	ad14      	add	r5, sp, #80	; 0x50
 8003a50:	4e27      	ldr	r6, [pc, #156]	; (8003af0 <_ZN10LoRa_class12set_TX_powerEhbh+0xd0>)
 8003a52:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003a54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a56:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003a5a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003a5e:	ad1b      	add	r5, sp, #108	; 0x6c
 8003a60:	4e24      	ldr	r6, [pc, #144]	; (8003af4 <_ZN10LoRa_class12set_TX_powerEhbh+0xd4>)
 8003a62:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a66:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003a6a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    uint32_t pa_dac, pa_select;
    int16_t power_adjustment, min_power_value, max_power_value;
    if (max_power < 0x01)
 8003a6e:	f1bc 0f00 	cmp.w	ip, #0
 8003a72:	d031      	beq.n	8003ad8 <_ZN10LoRa_class12set_TX_powerEhbh+0xb8>
 8003a74:	4665      	mov	r5, ip
 8003a76:	2d07      	cmp	r5, #7
 8003a78:	bf28      	it	cs
 8003a7a:	2507      	movcs	r5, #7
        max_power = 0x01;
    else if (max_power > 0x07)
        max_power = 0x07;
    _reg_field.register_read(fields, 4);
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	2204      	movs	r2, #4
 8003a80:	a906      	add	r1, sp, #24
 8003a82:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003a86:	f000 ffcc 	bl	8004a22 <_ZN13LoRa_register13register_readEP13Address_fieldhb>
    // Изменение бита PABOOST
    if (paboost) {
 8003a8a:	f1b8 0f00 	cmp.w	r8, #0
 8003a8e:	d025      	beq.n	8003adc <_ZN10LoRa_class12set_TX_powerEhbh+0xbc>
        pa_select = 1;
        min_power_value = 2;
        max_power_value = 20;
 8003a90:	2314      	movs	r3, #20
 8003a92:	2202      	movs	r2, #2
 8003a94:	2c11      	cmp	r4, #17
 8003a96:	bf8c      	ite	hi
 8003a98:	f06f 0004 	mvnhi.w	r0, #4
 8003a9c:	f06f 0001 	mvnls.w	r0, #1
 8003aa0:	2101      	movs	r1, #1
        min_power_value = -1;
        max_power_value = 14;
        power_adjustment = 1;
    }
    // Проверка выхода силы сигнала за диапазон
    if (power < min_power_value)
 8003aa2:	4294      	cmp	r4, r2
        power = min_power_value;
 8003aa4:	bfb8      	it	lt
 8003aa6:	b2d4      	uxtblt	r4, r2
    if (power > max_power_value)
 8003aa8:	429c      	cmp	r4, r3
        power = max_power_value;
 8003aaa:	bfc8      	it	gt
 8003aac:	b2dc      	uxtbgt	r4, r3
    // Корректировка параметра
    power += power_adjustment;
 8003aae:	4404      	add	r4, r0
 8003ab0:	b2e4      	uxtb	r4, r4
    // Настройка флага высокого сигнала
    if (power > 17)
        pa_dac = RF_PADAC_20DBM_ON;
    else
        pa_dac = RF_PADAC_20DBM_OFF;
 8003ab2:	2c11      	cmp	r4, #17
 8003ab4:	bf8c      	ite	hi
 8003ab6:	2307      	movhi	r3, #7
 8003ab8:	2304      	movls	r3, #4
    // Передача настроек
    uint32_t values[4] = {pa_dac, pa_select, max_power, power};
 8003aba:	9302      	str	r3, [sp, #8]
 8003abc:	9103      	str	r1, [sp, #12]
 8003abe:	9504      	str	r5, [sp, #16]
 8003ac0:	9405      	str	r4, [sp, #20]
    return field_set(fields, values, 4);
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	2304      	movs	r3, #4
 8003ac8:	aa02      	add	r2, sp, #8
 8003aca:	a906      	add	r1, sp, #24
 8003acc:	4638      	mov	r0, r7
 8003ace:	f7ff fedc 	bl	800388a <_ZN10LoRa_class9field_setEP13Address_fieldPmhb>
}
 8003ad2:	b022      	add	sp, #136	; 0x88
 8003ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        max_power = 0x01;
 8003ad8:	2501      	movs	r5, #1
 8003ada:	e7cf      	b.n	8003a7c <_ZN10LoRa_class12set_TX_powerEhbh+0x5c>
        max_power_value = 14;
 8003adc:	230e      	movs	r3, #14
        min_power_value = -1;
 8003ade:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
        power_adjustment = 1;
 8003ae2:	2001      	movs	r0, #1
        pa_select = 0;
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	e7dc      	b.n	8003aa2 <_ZN10LoRa_class12set_TX_powerEhbh+0x82>
 8003ae8:	20001dcc 	.word	0x20001dcc
 8003aec:	20001de8 	.word	0x20001de8
 8003af0:	20001d78 	.word	0x20001d78
 8003af4:	20001db0 	.word	0x20001db0

08003af8 <_ZN10LoRa_class13set_frequencyEy>:

// Установка частоты радиосигнала
uint8_t LoRa_class::set_frequency(uint64_t frequency) {
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	4605      	mov	r5, r0
 8003afe:	4616      	mov	r6, r2
    _frequency = frequency;
 8003b00:	632a      	str	r2, [r5, #48]	; 0x30
 8003b02:	6343      	str	r3, [r0, #52]	; 0x34
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
    return field_set(Frf, frf);
 8003b04:	4c0b      	ldr	r4, [pc, #44]	; (8003b34 <_ZN10LoRa_class13set_frequencyEy+0x3c>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	9205      	str	r2, [sp, #20]
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
 8003b0a:	04d9      	lsls	r1, r3, #19
 8003b0c:	4a0a      	ldr	r2, [pc, #40]	; (8003b38 <_ZN10LoRa_class13set_frequencyEy+0x40>)
 8003b0e:	2300      	movs	r3, #0
 8003b10:	04f0      	lsls	r0, r6, #19
 8003b12:	ea41 3156 	orr.w	r1, r1, r6, lsr #13
 8003b16:	f7fd f89d 	bl	8000c54 <__aeabi_uldivmod>
 8003b1a:	9004      	str	r0, [sp, #16]
    return field_set(Frf, frf);
 8003b1c:	f104 030c 	add.w	r3, r4, #12
 8003b20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b22:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003b26:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	f7ff fe85 	bl	800383a <_ZN10LoRa_class9field_setE13Address_fieldmb>
}
 8003b30:	b006      	add	sp, #24
 8003b32:	bd70      	pop	{r4, r5, r6, pc}
 8003b34:	20001cec 	.word	0x20001cec
 8003b38:	01e84800 	.word	0x01e84800

08003b3c <_ZN10LoRa_class20set_spreading_factorEh>:

// Установка силы коэффициента распространения SF
uint8_t LoRa_class::set_spreading_factor(uint8_t SF) {
 8003b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b3e:	b09b      	sub	sp, #108	; 0x6c
 8003b40:	4607      	mov	r7, r0
    uint32_t detection_optimize, detection_threshold;
    if (SF < 6)
 8003b42:	2905      	cmp	r1, #5
 8003b44:	d90d      	bls.n	8003b62 <_ZN10LoRa_class20set_spreading_factorEh+0x26>
 8003b46:	460e      	mov	r6, r1
        SF = 6;
    else if (SF > 12)
 8003b48:	290c      	cmp	r1, #12
 8003b4a:	d836      	bhi.n	8003bba <_ZN10LoRa_class20set_spreading_factorEh+0x7e>
        detection_optimize = DO_SF6;
        detection_threshold = DT_SF6;
    }
    else {
        detection_optimize = DO_SF7_12;
        detection_threshold = DT_SF7_12;
 8003b4c:	2906      	cmp	r1, #6
 8003b4e:	bf0b      	itete	eq
 8003b50:	f04f 0c0c 	moveq.w	ip, #12
 8003b54:	f04f 0c0a 	movne.w	ip, #10
 8003b58:	f04f 0e05 	moveq.w	lr, #5
 8003b5c:	f04f 0e03 	movne.w	lr, #3
 8003b60:	e004      	b.n	8003b6c <_ZN10LoRa_class20set_spreading_factorEh+0x30>
        SF = 6;
 8003b62:	2606      	movs	r6, #6
        detection_threshold = DT_SF6;
 8003b64:	f04f 0c0c 	mov.w	ip, #12
        detection_optimize = DO_SF6;
 8003b68:	f04f 0e05 	mov.w	lr, #5
    }
    Address_field fields[3] = {DetectionOptimize, DetectionThreshold, SpreadingFactor};
 8003b6c:	ac05      	add	r4, sp, #20
 8003b6e:	4d16      	ldr	r5, [pc, #88]	; (8003bc8 <_ZN10LoRa_class20set_spreading_factorEh+0x8c>)
 8003b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003b7c:	ac0c      	add	r4, sp, #48	; 0x30
 8003b7e:	4d13      	ldr	r5, [pc, #76]	; (8003bcc <_ZN10LoRa_class20set_spreading_factorEh+0x90>)
 8003b80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003b8c:	ac13      	add	r4, sp, #76	; 0x4c
 8003b8e:	4d10      	ldr	r5, [pc, #64]	; (8003bd0 <_ZN10LoRa_class20set_spreading_factorEh+0x94>)
 8003b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    uint32_t values[3] = {detection_optimize, detection_threshold, SF};
 8003b9c:	f8cd e008 	str.w	lr, [sp, #8]
 8003ba0:	f8cd c00c 	str.w	ip, [sp, #12]
 8003ba4:	9604      	str	r6, [sp, #16]
    return field_set(fields, values, 3);
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	2303      	movs	r3, #3
 8003bac:	aa02      	add	r2, sp, #8
 8003bae:	a905      	add	r1, sp, #20
 8003bb0:	4638      	mov	r0, r7
 8003bb2:	f7ff fe6a 	bl	800388a <_ZN10LoRa_class9field_setEP13Address_fieldPmhb>
}
 8003bb6:	b01b      	add	sp, #108	; 0x6c
 8003bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SF = 12;
 8003bba:	260c      	movs	r6, #12
        detection_threshold = DT_SF7_12;
 8003bbc:	f04f 0c0a 	mov.w	ip, #10
        detection_optimize = DO_SF7_12;
 8003bc0:	f04f 0e03 	mov.w	lr, #3
 8003bc4:	e7d2      	b.n	8003b6c <_ZN10LoRa_class20set_spreading_factorEh+0x30>
 8003bc6:	bf00      	nop
 8003bc8:	20001bb8 	.word	0x20001bb8
 8003bcc:	20001bd4 	.word	0x20001bd4
 8003bd0:	20001ee4 	.word	0x20001ee4
 8003bd4:	00000000 	.word	0x00000000

08003bd8 <_ZN10LoRa_class20set_signal_bandwidthEy>:

// Установка пропускной способности
uint8_t LoRa_class::set_signal_bandwidth(uint64_t sbw) {
 8003bd8:	b570      	push	{r4, r5, r6, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	4606      	mov	r6, r0
    uint8_t bw;
    if (sbw <= 7.8E3)        bw = 0;
 8003bde:	4610      	mov	r0, r2
 8003be0:	4619      	mov	r1, r3
 8003be2:	f7fc fc3b 	bl	800045c <__aeabi_ul2d>
 8003be6:	4604      	mov	r4, r0
 8003be8:	460d      	mov	r5, r1
 8003bea:	a337      	add	r3, pc, #220	; (adr r3, 8003cc8 <_ZN10LoRa_class20set_signal_bandwidthEy+0xf0>)
 8003bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf0:	f7fc fee6 	bl	80009c0 <__aeabi_dcmple>
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	d148      	bne.n	8003c8a <_ZN10LoRa_class20set_signal_bandwidthEy+0xb2>
    else if (sbw <= 10.4E3)  bw = 1;
 8003bf8:	a335      	add	r3, pc, #212	; (adr r3, 8003cd0 <_ZN10LoRa_class20set_signal_bandwidthEy+0xf8>)
 8003bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfe:	4620      	mov	r0, r4
 8003c00:	4629      	mov	r1, r5
 8003c02:	f7fc fedd 	bl	80009c0 <__aeabi_dcmple>
 8003c06:	2800      	cmp	r0, #0
 8003c08:	d150      	bne.n	8003cac <_ZN10LoRa_class20set_signal_bandwidthEy+0xd4>
    else if (sbw <= 15.6E3)  bw = 2;
 8003c0a:	a333      	add	r3, pc, #204	; (adr r3, 8003cd8 <_ZN10LoRa_class20set_signal_bandwidthEy+0x100>)
 8003c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c10:	4620      	mov	r0, r4
 8003c12:	4629      	mov	r1, r5
 8003c14:	f7fc fed4 	bl	80009c0 <__aeabi_dcmple>
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	d149      	bne.n	8003cb0 <_ZN10LoRa_class20set_signal_bandwidthEy+0xd8>
    else if (sbw <= 20.8E3)  bw = 3;
 8003c1c:	a330      	add	r3, pc, #192	; (adr r3, 8003ce0 <_ZN10LoRa_class20set_signal_bandwidthEy+0x108>)
 8003c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c22:	4620      	mov	r0, r4
 8003c24:	4629      	mov	r1, r5
 8003c26:	f7fc fecb 	bl	80009c0 <__aeabi_dcmple>
 8003c2a:	2800      	cmp	r0, #0
 8003c2c:	d142      	bne.n	8003cb4 <_ZN10LoRa_class20set_signal_bandwidthEy+0xdc>
    else if (sbw <= 31.25E3) bw = 4;
 8003c2e:	a32e      	add	r3, pc, #184	; (adr r3, 8003ce8 <_ZN10LoRa_class20set_signal_bandwidthEy+0x110>)
 8003c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c34:	4620      	mov	r0, r4
 8003c36:	4629      	mov	r1, r5
 8003c38:	f7fc fec2 	bl	80009c0 <__aeabi_dcmple>
 8003c3c:	2800      	cmp	r0, #0
 8003c3e:	d13b      	bne.n	8003cb8 <_ZN10LoRa_class20set_signal_bandwidthEy+0xe0>
    else if (sbw <= 41.7E3)  bw = 5;
 8003c40:	a32b      	add	r3, pc, #172	; (adr r3, 8003cf0 <_ZN10LoRa_class20set_signal_bandwidthEy+0x118>)
 8003c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c46:	4620      	mov	r0, r4
 8003c48:	4629      	mov	r1, r5
 8003c4a:	f7fc feb9 	bl	80009c0 <__aeabi_dcmple>
 8003c4e:	2800      	cmp	r0, #0
 8003c50:	d134      	bne.n	8003cbc <_ZN10LoRa_class20set_signal_bandwidthEy+0xe4>
    else if (sbw <= 62.5E3)  bw = 6;
 8003c52:	a329      	add	r3, pc, #164	; (adr r3, 8003cf8 <_ZN10LoRa_class20set_signal_bandwidthEy+0x120>)
 8003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c58:	4620      	mov	r0, r4
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	f7fc feb0 	bl	80009c0 <__aeabi_dcmple>
 8003c60:	bb70      	cbnz	r0, 8003cc0 <_ZN10LoRa_class20set_signal_bandwidthEy+0xe8>
    else if (sbw <= 125E3)   bw = 7;
 8003c62:	a327      	add	r3, pc, #156	; (adr r3, 8003d00 <_ZN10LoRa_class20set_signal_bandwidthEy+0x128>)
 8003c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c68:	4620      	mov	r0, r4
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	f7fc fea8 	bl	80009c0 <__aeabi_dcmple>
 8003c70:	bb40      	cbnz	r0, 8003cc4 <_ZN10LoRa_class20set_signal_bandwidthEy+0xec>
    else if (sbw <= 250E3)   bw = 8;
 8003c72:	a325      	add	r3, pc, #148	; (adr r3, 8003d08 <_ZN10LoRa_class20set_signal_bandwidthEy+0x130>)
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	4620      	mov	r0, r4
 8003c7a:	4629      	mov	r1, r5
 8003c7c:	f7fc fea0 	bl	80009c0 <__aeabi_dcmple>
 8003c80:	2800      	cmp	r0, #0
    else                     bw = 9;
 8003c82:	bf14      	ite	ne
 8003c84:	2208      	movne	r2, #8
 8003c86:	2209      	moveq	r2, #9
 8003c88:	e000      	b.n	8003c8c <_ZN10LoRa_class20set_signal_bandwidthEy+0xb4>
    if (sbw <= 7.8E3)        bw = 0;
 8003c8a:	2200      	movs	r2, #0
    return field_set(Bw, bw);
 8003c8c:	4c20      	ldr	r4, [pc, #128]	; (8003d10 <_ZN10LoRa_class20set_signal_bandwidthEy+0x138>)
 8003c8e:	2301      	movs	r3, #1
 8003c90:	9305      	str	r3, [sp, #20]
 8003c92:	9204      	str	r2, [sp, #16]
 8003c94:	f104 030c 	add.w	r3, r4, #12
 8003c98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c9a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003c9e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003ca2:	4630      	mov	r0, r6
 8003ca4:	f7ff fdc9 	bl	800383a <_ZN10LoRa_class9field_setE13Address_fieldmb>
}
 8003ca8:	b006      	add	sp, #24
 8003caa:	bd70      	pop	{r4, r5, r6, pc}
    else if (sbw <= 10.4E3)  bw = 1;
 8003cac:	2201      	movs	r2, #1
 8003cae:	e7ed      	b.n	8003c8c <_ZN10LoRa_class20set_signal_bandwidthEy+0xb4>
    else if (sbw <= 15.6E3)  bw = 2;
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	e7eb      	b.n	8003c8c <_ZN10LoRa_class20set_signal_bandwidthEy+0xb4>
    else if (sbw <= 20.8E3)  bw = 3;
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	e7e9      	b.n	8003c8c <_ZN10LoRa_class20set_signal_bandwidthEy+0xb4>
    else if (sbw <= 31.25E3) bw = 4;
 8003cb8:	2204      	movs	r2, #4
 8003cba:	e7e7      	b.n	8003c8c <_ZN10LoRa_class20set_signal_bandwidthEy+0xb4>
    else if (sbw <= 41.7E3)  bw = 5;
 8003cbc:	2205      	movs	r2, #5
 8003cbe:	e7e5      	b.n	8003c8c <_ZN10LoRa_class20set_signal_bandwidthEy+0xb4>
    else if (sbw <= 62.5E3)  bw = 6;
 8003cc0:	2206      	movs	r2, #6
 8003cc2:	e7e3      	b.n	8003c8c <_ZN10LoRa_class20set_signal_bandwidthEy+0xb4>
    else if (sbw <= 125E3)   bw = 7;
 8003cc4:	2207      	movs	r2, #7
 8003cc6:	e7e1      	b.n	8003c8c <_ZN10LoRa_class20set_signal_bandwidthEy+0xb4>
 8003cc8:	00000000 	.word	0x00000000
 8003ccc:	40be7800 	.word	0x40be7800
 8003cd0:	00000000 	.word	0x00000000
 8003cd4:	40c45000 	.word	0x40c45000
 8003cd8:	00000000 	.word	0x00000000
 8003cdc:	40ce7800 	.word	0x40ce7800
 8003ce0:	00000000 	.word	0x00000000
 8003ce4:	40d45000 	.word	0x40d45000
 8003ce8:	00000000 	.word	0x00000000
 8003cec:	40de8480 	.word	0x40de8480
 8003cf0:	00000000 	.word	0x00000000
 8003cf4:	40e45c80 	.word	0x40e45c80
 8003cf8:	00000000 	.word	0x00000000
 8003cfc:	40ee8480 	.word	0x40ee8480
 8003d00:	00000000 	.word	0x00000000
 8003d04:	40fe8480 	.word	0x40fe8480
 8003d08:	00000000 	.word	0x00000000
 8003d0c:	410e8480 	.word	0x410e8480
 8003d10:	20001b64 	.word	0x20001b64

08003d14 <_ZN10LoRa_class10crc_enableEv>:
uint8_t LoRa_class::set_sync_word(uint8_t SW) {
    return field_set(SyncWord, SW);
}

// Включение CRC на LoRa-модуле
uint8_t LoRa_class::crc_enable() {
 8003d14:	b530      	push	{r4, r5, lr}
 8003d16:	b087      	sub	sp, #28
 8003d18:	4605      	mov	r5, r0
    return field_set(RxPayloadCrcOn, 1);
 8003d1a:	4c08      	ldr	r4, [pc, #32]	; (8003d3c <_ZN10LoRa_class10crc_enableEv+0x28>)
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	9305      	str	r3, [sp, #20]
 8003d20:	9304      	str	r3, [sp, #16]
 8003d22:	f104 030c 	add.w	r3, r4, #12
 8003d26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d28:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003d2c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003d30:	4628      	mov	r0, r5
 8003d32:	f7ff fd82 	bl	800383a <_ZN10LoRa_class9field_setE13Address_fieldmb>
}
 8003d36:	b007      	add	sp, #28
 8003d38:	bd30      	pop	{r4, r5, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20001eac 	.word	0x20001eac

08003d40 <_ZN10LoRa_class5beginEybhhyh>:
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8003d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d44:	b089      	sub	sp, #36	; 0x24
 8003d46:	4604      	mov	r4, r0
 8003d48:	4690      	mov	r8, r2
 8003d4a:	4699      	mov	r9, r3
    uint32_t result = 0;
 8003d4c:	2700      	movs	r7, #0
 8003d4e:	ae08      	add	r6, sp, #32
 8003d50:	f846 7d04 	str.w	r7, [r6, #-4]!
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 8003d54:	2201      	movs	r2, #1
 8003d56:	8881      	ldrh	r1, [r0, #4]
 8003d58:	6880      	ldr	r0, [r0, #8]
 8003d5a:	f004 fac7 	bl	80082ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_RESET);
 8003d5e:	463a      	mov	r2, r7
 8003d60:	88a1      	ldrh	r1, [r4, #4]
 8003d62:	68a0      	ldr	r0, [r4, #8]
 8003d64:	f004 fac2 	bl	80082ec <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8003d68:	2014      	movs	r0, #20
 8003d6a:	f003 ffa9 	bl	8007cc0 <HAL_Delay>
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 8003d6e:	2201      	movs	r2, #1
 8003d70:	88a1      	ldrh	r1, [r4, #4]
 8003d72:	68a0      	ldr	r0, [r4, #8]
 8003d74:	f004 faba 	bl	80082ec <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8003d78:	2032      	movs	r0, #50	; 0x32
 8003d7a:	f003 ffa1 	bl	8007cc0 <HAL_Delay>
    amt = field_get(Version, &result);
 8003d7e:	4d63      	ldr	r5, [pc, #396]	; (8003f0c <_ZN10LoRa_class5beginEybhhyh+0x1cc>)
 8003d80:	9705      	str	r7, [sp, #20]
 8003d82:	9604      	str	r6, [sp, #16]
 8003d84:	f105 030c 	add.w	r3, r5, #12
 8003d88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d8a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003d8e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003d92:	4620      	mov	r0, r4
 8003d94:	f7ff fd8f 	bl	80038b6 <_ZN10LoRa_class9field_getE13Address_fieldPmb>
    if ((result != 0x12) || (amt != 1)) return 2;
 8003d98:	9b07      	ldr	r3, [sp, #28]
 8003d9a:	2b12      	cmp	r3, #18
 8003d9c:	f040 80aa 	bne.w	8003ef4 <_ZN10LoRa_class5beginEybhhyh+0x1b4>
 8003da0:	2801      	cmp	r0, #1
 8003da2:	d001      	beq.n	8003da8 <_ZN10LoRa_class5beginEybhhyh+0x68>
 8003da4:	2002      	movs	r0, #2
 8003da6:	e0a6      	b.n	8003ef6 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(mode_sleep() != 1) return 3;
 8003da8:	4620      	mov	r0, r4
 8003daa:	f7ff fdd9 	bl	8003960 <_ZN10LoRa_class10mode_sleepEv>
 8003dae:	2801      	cmp	r0, #1
 8003db0:	d001      	beq.n	8003db6 <_ZN10LoRa_class5beginEybhhyh+0x76>
 8003db2:	2003      	movs	r0, #3
 8003db4:	e09f      	b.n	8003ef6 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(set_frequency(frequency) != 3) return 4;
 8003db6:	4642      	mov	r2, r8
 8003db8:	464b      	mov	r3, r9
 8003dba:	4620      	mov	r0, r4
 8003dbc:	f7ff fe9c 	bl	8003af8 <_ZN10LoRa_class13set_frequencyEy>
 8003dc0:	2803      	cmp	r0, #3
 8003dc2:	d001      	beq.n	8003dc8 <_ZN10LoRa_class5beginEybhhyh+0x88>
 8003dc4:	2004      	movs	r0, #4
 8003dc6:	e096      	b.n	8003ef6 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(field_set(FifoRxBaseAddr, 0x00) != 1) return 5;
 8003dc8:	4d51      	ldr	r5, [pc, #324]	; (8003f10 <_ZN10LoRa_class5beginEybhhyh+0x1d0>)
 8003dca:	2301      	movs	r3, #1
 8003dcc:	9305      	str	r3, [sp, #20]
 8003dce:	9704      	str	r7, [sp, #16]
 8003dd0:	f105 030c 	add.w	r3, r5, #12
 8003dd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dd6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003dda:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003dde:	4620      	mov	r0, r4
 8003de0:	f7ff fd2b 	bl	800383a <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8003de4:	2801      	cmp	r0, #1
 8003de6:	d001      	beq.n	8003dec <_ZN10LoRa_class5beginEybhhyh+0xac>
 8003de8:	2005      	movs	r0, #5
 8003dea:	e084      	b.n	8003ef6 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(field_set(FifoTxBaseAddr, _FifoTxBaseAddr) != 1) return 6;
 8003dec:	4d49      	ldr	r5, [pc, #292]	; (8003f14 <_ZN10LoRa_class5beginEybhhyh+0x1d4>)
 8003dee:	2301      	movs	r3, #1
 8003df0:	9305      	str	r3, [sp, #20]
 8003df2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003df6:	9304      	str	r3, [sp, #16]
 8003df8:	f105 030c 	add.w	r3, r5, #12
 8003dfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dfe:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003e02:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003e06:	4620      	mov	r0, r4
 8003e08:	f7ff fd17 	bl	800383a <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8003e0c:	2801      	cmp	r0, #1
 8003e0e:	d001      	beq.n	8003e14 <_ZN10LoRa_class5beginEybhhyh+0xd4>
 8003e10:	2006      	movs	r0, #6
 8003e12:	e070      	b.n	8003ef6 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(field_set(LnaBoostHf, 0x03) != 1) return 7;
 8003e14:	4d40      	ldr	r5, [pc, #256]	; (8003f18 <_ZN10LoRa_class5beginEybhhyh+0x1d8>)
 8003e16:	2301      	movs	r3, #1
 8003e18:	9305      	str	r3, [sp, #20]
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	9304      	str	r3, [sp, #16]
 8003e1e:	f105 030c 	add.w	r3, r5, #12
 8003e22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e24:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003e28:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f7ff fd04 	bl	800383a <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8003e32:	2801      	cmp	r0, #1
 8003e34:	d001      	beq.n	8003e3a <_ZN10LoRa_class5beginEybhhyh+0xfa>
 8003e36:	2007      	movs	r0, #7
 8003e38:	e05d      	b.n	8003ef6 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(field_set(LowDataRateOptimize, 0) != 1) return 8;
 8003e3a:	4d38      	ldr	r5, [pc, #224]	; (8003f1c <_ZN10LoRa_class5beginEybhhyh+0x1dc>)
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	9305      	str	r3, [sp, #20]
 8003e40:	9704      	str	r7, [sp, #16]
 8003e42:	f105 030c 	add.w	r3, r5, #12
 8003e46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e48:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003e4c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003e50:	4620      	mov	r0, r4
 8003e52:	f7ff fcf2 	bl	800383a <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8003e56:	2801      	cmp	r0, #1
 8003e58:	d001      	beq.n	8003e5e <_ZN10LoRa_class5beginEybhhyh+0x11e>
 8003e5a:	2008      	movs	r0, #8
 8003e5c:	e04b      	b.n	8003ef6 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(field_set(AgcAutoOn, 1) != 1) return 9;
 8003e5e:	4d30      	ldr	r5, [pc, #192]	; (8003f20 <_ZN10LoRa_class5beginEybhhyh+0x1e0>)
 8003e60:	2301      	movs	r3, #1
 8003e62:	9305      	str	r3, [sp, #20]
 8003e64:	9304      	str	r3, [sp, #16]
 8003e66:	f105 030c 	add.w	r3, r5, #12
 8003e6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e6c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003e70:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003e74:	4620      	mov	r0, r4
 8003e76:	f7ff fce0 	bl	800383a <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8003e7a:	2801      	cmp	r0, #1
 8003e7c:	d001      	beq.n	8003e82 <_ZN10LoRa_class5beginEybhhyh+0x142>
 8003e7e:	2009      	movs	r0, #9
 8003e80:	e039      	b.n	8003ef6 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(set_TX_power(signal_power, paboost) != 2) return 10;
 8003e82:	2307      	movs	r3, #7
 8003e84:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8003e88:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f7ff fdc7 	bl	8003a20 <_ZN10LoRa_class12set_TX_powerEhbh>
 8003e92:	2802      	cmp	r0, #2
 8003e94:	d132      	bne.n	8003efc <_ZN10LoRa_class5beginEybhhyh+0x1bc>
    if(set_spreading_factor(SF) != 3) return 11;
 8003e96:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8003e9a:	4620      	mov	r0, r4
 8003e9c:	f7ff fe4e 	bl	8003b3c <_ZN10LoRa_class20set_spreading_factorEh>
 8003ea0:	2803      	cmp	r0, #3
 8003ea2:	d001      	beq.n	8003ea8 <_ZN10LoRa_class5beginEybhhyh+0x168>
 8003ea4:	200b      	movs	r0, #11
 8003ea6:	e026      	b.n	8003ef6 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(set_signal_bandwidth(SBW) != 1) return 12;
 8003ea8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8003eac:	4620      	mov	r0, r4
 8003eae:	f7ff fe93 	bl	8003bd8 <_ZN10LoRa_class20set_signal_bandwidthEy>
 8003eb2:	2801      	cmp	r0, #1
 8003eb4:	d124      	bne.n	8003f00 <_ZN10LoRa_class5beginEybhhyh+0x1c0>
    if(field_set(SyncWord, sync_word) != 1) return 13;
 8003eb6:	4d1b      	ldr	r5, [pc, #108]	; (8003f24 <_ZN10LoRa_class5beginEybhhyh+0x1e4>)
 8003eb8:	2301      	movs	r3, #1
 8003eba:	9305      	str	r3, [sp, #20]
 8003ebc:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8003ec0:	9304      	str	r3, [sp, #16]
 8003ec2:	f105 030c 	add.w	r3, r5, #12
 8003ec6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ec8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003ecc:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	f7ff fcb2 	bl	800383a <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8003ed6:	2801      	cmp	r0, #1
 8003ed8:	d114      	bne.n	8003f04 <_ZN10LoRa_class5beginEybhhyh+0x1c4>
    if(crc_enable() != 1) return 14;
 8003eda:	4620      	mov	r0, r4
 8003edc:	f7ff ff1a 	bl	8003d14 <_ZN10LoRa_class10crc_enableEv>
 8003ee0:	2801      	cmp	r0, #1
 8003ee2:	d111      	bne.n	8003f08 <_ZN10LoRa_class5beginEybhhyh+0x1c8>
    if(mode_STDBY() != 1) return 15;
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	f7ff fd40 	bl	800396a <_ZN10LoRa_class10mode_STDBYEv>
    return 0;
 8003eea:	2801      	cmp	r0, #1
 8003eec:	bf14      	ite	ne
 8003eee:	200f      	movne	r0, #15
 8003ef0:	4638      	moveq	r0, r7
 8003ef2:	e000      	b.n	8003ef6 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if ((result != 0x12) || (amt != 1)) return 2;
 8003ef4:	2002      	movs	r0, #2
}
 8003ef6:	b009      	add	sp, #36	; 0x24
 8003ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(set_TX_power(signal_power, paboost) != 2) return 10;
 8003efc:	200a      	movs	r0, #10
 8003efe:	e7fa      	b.n	8003ef6 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(set_signal_bandwidth(SBW) != 1) return 12;
 8003f00:	200c      	movs	r0, #12
 8003f02:	e7f8      	b.n	8003ef6 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(field_set(SyncWord, sync_word) != 1) return 13;
 8003f04:	200d      	movs	r0, #13
 8003f06:	e7f6      	b.n	8003ef6 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(crc_enable() != 1) return 14;
 8003f08:	200e      	movs	r0, #14
 8003f0a:	e7f4      	b.n	8003ef6 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
 8003f0c:	20001f54 	.word	0x20001f54
 8003f10:	20001c7c 	.word	0x20001c7c
 8003f14:	20001cd0 	.word	0x20001cd0
 8003f18:	20001d08 	.word	0x20001d08
 8003f1c:	20001d40 	.word	0x20001d40
 8003f20:	20001b48 	.word	0x20001b48
 8003f24:	20001f00 	.word	0x20001f00

08003f28 <_ZN10LoRa_class11packet_rssiEv>:
    // delete[] data;
    return send_packet;
}

// RSSI последнего принятого пакета
uint8_t LoRa_class::packet_rssi() {
 8003f28:	b530      	push	{r4, r5, lr}
 8003f2a:	b089      	sub	sp, #36	; 0x24
 8003f2c:	4605      	mov	r5, r0
    uint32_t rssi = 0;
 8003f2e:	ab08      	add	r3, sp, #32
 8003f30:	2200      	movs	r2, #0
 8003f32:	f843 2d04 	str.w	r2, [r3, #-4]!
    field_get(PacketRssi, &rssi, true);
 8003f36:	4c14      	ldr	r4, [pc, #80]	; (8003f88 <_ZN10LoRa_class11packet_rssiEv+0x60>)
 8003f38:	2201      	movs	r2, #1
 8003f3a:	9205      	str	r2, [sp, #20]
 8003f3c:	9304      	str	r3, [sp, #16]
 8003f3e:	f104 030c 	add.w	r3, r4, #12
 8003f42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f44:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003f48:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	f7ff fcb2 	bl	80038b6 <_ZN10LoRa_class9field_getE13Address_fieldPmb>
    if (_frequency < 868E6)
 8003f52:	e9d5 010c 	ldrd	r0, r1, [r5, #48]	; 0x30
 8003f56:	f7fc fa81 	bl	800045c <__aeabi_ul2d>
 8003f5a:	a309      	add	r3, pc, #36	; (adr r3, 8003f80 <_ZN10LoRa_class11packet_rssiEv+0x58>)
 8003f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f60:	f7fc fd24 	bl	80009ac <__aeabi_dcmplt>
 8003f64:	b930      	cbnz	r0, 8003f74 <_ZN10LoRa_class11packet_rssiEv+0x4c>
        rssi -= 164;
    else
        rssi -= 157;
 8003f66:	9b07      	ldr	r3, [sp, #28]
 8003f68:	3b9d      	subs	r3, #157	; 0x9d
 8003f6a:	9307      	str	r3, [sp, #28]
    return rssi;
}
 8003f6c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8003f70:	b009      	add	sp, #36	; 0x24
 8003f72:	bd30      	pop	{r4, r5, pc}
        rssi -= 164;
 8003f74:	9b07      	ldr	r3, [sp, #28]
 8003f76:	3ba4      	subs	r3, #164	; 0xa4
 8003f78:	9307      	str	r3, [sp, #28]
 8003f7a:	e7f7      	b.n	8003f6c <_ZN10LoRa_class11packet_rssiEv+0x44>
 8003f7c:	f3af 8000 	nop.w
 8003f80:	80000000 	.word	0x80000000
 8003f84:	41c9de50 	.word	0x41c9de50
 8003f88:	20001e04 	.word	0x20001e04

08003f8c <_ZN10LoRa_class16read_packet_dataEbbb>:
class LoRa_packet LoRa_class::read_packet_data(bool crc_err, bool f_rssi, bool f_snr) {
 8003f8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f90:	b08b      	sub	sp, #44	; 0x2c
 8003f92:	4680      	mov	r8, r0
 8003f94:	4689      	mov	r9, r1
 8003f96:	4615      	mov	r5, r2
    if (f_rssi)
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d153      	bne.n	8004044 <_ZN10LoRa_class16read_packet_dataEbbb+0xb8>
        rssi = 0;
 8003f9c:	2600      	movs	r6, #0
    field_get(FifoRxBytesNb, &length, true);
 8003f9e:	4c2c      	ldr	r4, [pc, #176]	; (8004050 <_ZN10LoRa_class16read_packet_dataEbbb+0xc4>)
 8003fa0:	2701      	movs	r7, #1
 8003fa2:	9705      	str	r7, [sp, #20]
 8003fa4:	ab09      	add	r3, sp, #36	; 0x24
 8003fa6:	9304      	str	r3, [sp, #16]
 8003fa8:	f104 030c 	add.w	r3, r4, #12
 8003fac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fae:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003fb2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003fb6:	4648      	mov	r0, r9
 8003fb8:	f7ff fc7d 	bl	80038b6 <_ZN10LoRa_class9field_getE13Address_fieldPmb>
    field_get(FifoRxCurrentAddr, &adr, true);
 8003fbc:	4c25      	ldr	r4, [pc, #148]	; (8004054 <_ZN10LoRa_class16read_packet_dataEbbb+0xc8>)
 8003fbe:	9705      	str	r7, [sp, #20]
 8003fc0:	ab08      	add	r3, sp, #32
 8003fc2:	9304      	str	r3, [sp, #16]
 8003fc4:	f104 030c 	add.w	r3, r4, #12
 8003fc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fca:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003fce:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003fd2:	4648      	mov	r0, r9
 8003fd4:	f7ff fc6f 	bl	80038b6 <_ZN10LoRa_class9field_getE13Address_fieldPmb>
    field_set(FifoAddrPtr, adr);
 8003fd8:	4c1f      	ldr	r4, [pc, #124]	; (8004058 <_ZN10LoRa_class16read_packet_dataEbbb+0xcc>)
 8003fda:	9705      	str	r7, [sp, #20]
 8003fdc:	9b08      	ldr	r3, [sp, #32]
 8003fde:	9304      	str	r3, [sp, #16]
 8003fe0:	f104 030c 	add.w	r3, r4, #12
 8003fe4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fe6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003fea:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003fee:	4648      	mov	r0, r9
 8003ff0:	f7ff fc23 	bl	800383a <_ZN10LoRa_class9field_setE13Address_fieldmb>
    class LoRa_packet send_packet(nullptr, 0, crc_err, rssi);
 8003ff4:	9600      	str	r6, [sp, #0]
 8003ff6:	462b      	mov	r3, r5
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	4640      	mov	r0, r8
 8003ffe:	f000 fafd 	bl	80045fc <_ZN11LoRa_packetC1EPKhhbh>
    uint32_t data32 = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	9307      	str	r3, [sp, #28]
    for(unsigned int i = 0; i < length; ++i) {
 8004006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004008:	b1c3      	cbz	r3, 800403c <_ZN10LoRa_class16read_packet_dataEbbb+0xb0>
 800400a:	2600      	movs	r6, #0
        field_get(Fifo, &data32, true);
 800400c:	4d13      	ldr	r5, [pc, #76]	; (800405c <_ZN10LoRa_class16read_packet_dataEbbb+0xd0>)
 800400e:	f105 040c 	add.w	r4, r5, #12
 8004012:	9705      	str	r7, [sp, #20]
 8004014:	ab07      	add	r3, sp, #28
 8004016:	9304      	str	r3, [sp, #16]
 8004018:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800401c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8004020:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8004024:	4648      	mov	r0, r9
 8004026:	f7ff fc46 	bl	80038b6 <_ZN10LoRa_class9field_getE13Address_fieldPmb>
        send_packet.add_packet_data(data32);
 800402a:	f89d 101c 	ldrb.w	r1, [sp, #28]
 800402e:	4640      	mov	r0, r8
 8004030:	f000 facc 	bl	80045cc <_ZN11LoRa_packet15add_packet_dataEh>
    for(unsigned int i = 0; i < length; ++i) {
 8004034:	3601      	adds	r6, #1
 8004036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004038:	42b3      	cmp	r3, r6
 800403a:	d8ea      	bhi.n	8004012 <_ZN10LoRa_class16read_packet_dataEbbb+0x86>
}
 800403c:	4640      	mov	r0, r8
 800403e:	b00b      	add	sp, #44	; 0x2c
 8004040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rssi = packet_rssi();
 8004044:	4608      	mov	r0, r1
 8004046:	f7ff ff6f 	bl	8003f28 <_ZN10LoRa_class11packet_rssiEv>
 800404a:	4606      	mov	r6, r0
 800404c:	e7a7      	b.n	8003f9e <_ZN10LoRa_class16read_packet_dataEbbb+0x12>
 800404e:	bf00      	nop
 8004050:	20001c98 	.word	0x20001c98
 8004054:	20001cb4 	.word	0x20001cb4
 8004058:	20001c60 	.word	0x20001c60
 800405c:	20001c44 	.word	0x20001c44

08004060 <_ZN10LoRa_class15receiver_packetEhmbb>:
class LoRa_packet LoRa_class::receiver_packet(uint8_t count, ulong wait, bool rssi, bool snr) {
 8004060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004064:	b0bb      	sub	sp, #236	; 0xec
 8004066:	9007      	str	r0, [sp, #28]
 8004068:	460c      	mov	r4, r1
 800406a:	4616      	mov	r6, r2
 800406c:	461d      	mov	r5, r3
    class LoRa_packet send_packet;
 800406e:	f000 fa9f 	bl	80045b0 <_ZN11LoRa_packetC1Ev>
    Address_field fields[3] = {RxTimeout, RxDone, PayloadCrcError};
 8004072:	af23      	add	r7, sp, #140	; 0x8c
 8004074:	f8df c268 	ldr.w	ip, [pc, #616]	; 80042e0 <_ZN10LoRa_class15receiver_packetEhmbb+0x280>
 8004078:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800407c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800407e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8004082:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004086:	f8df 9254 	ldr.w	r9, [pc, #596]	; 80042dc <_ZN10LoRa_class15receiver_packetEhmbb+0x27c>
 800408a:	af2a      	add	r7, sp, #168	; 0xa8
 800408c:	46cc      	mov	ip, r9
 800408e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004092:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004094:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8004098:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800409c:	f8df e244 	ldr.w	lr, [pc, #580]	; 80042e4 <_ZN10LoRa_class15receiver_packetEhmbb+0x284>
 80040a0:	f10d 08c4 	add.w	r8, sp, #196	; 0xc4
 80040a4:	4677      	mov	r7, lr
 80040a6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80040a8:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80040ac:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80040b0:	e888 0007 	stmia.w	r8, {r0, r1, r2}
    Address_field flags[3] = {RxDone, ValidHeader, PayloadCrcError};
 80040b4:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80040b8:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 80040bc:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80040c0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80040c4:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 80040c8:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 80040cc:	f8df 8218 	ldr.w	r8, [pc, #536]	; 80042e8 <_ZN10LoRa_class15receiver_packetEhmbb+0x288>
 80040d0:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80040d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80040d8:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80040dc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80040e0:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 80040e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80040e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80040ec:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80040f0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    if(count <= 1) {
 80040f4:	2e01      	cmp	r6, #1
 80040f6:	d909      	bls.n	800410c <_ZN10LoRa_class15receiver_packetEhmbb+0xac>
        for(int i = 0; i < count; ++i) {
 80040f8:	4632      	mov	r2, r6
 80040fa:	b11e      	cbz	r6, 8004104 <_ZN10LoRa_class15receiver_packetEhmbb+0xa4>
 80040fc:	2300      	movs	r3, #0
 80040fe:	3301      	adds	r3, #1
 8004100:	4293      	cmp	r3, r2
 8004102:	d1fc      	bne.n	80040fe <_ZN10LoRa_class15receiver_packetEhmbb+0x9e>
}
 8004104:	9807      	ldr	r0, [sp, #28]
 8004106:	b03b      	add	sp, #236	; 0xec
 8004108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(count == 1)
 800410c:	d00f      	beq.n	800412e <_ZN10LoRa_class15receiver_packetEhmbb+0xce>
        uint32_t values[3] = {0, 0, 0};
 800410e:	2300      	movs	r3, #0
 8004110:	930b      	str	r3, [sp, #44]	; 0x2c
 8004112:	930c      	str	r3, [sp, #48]	; 0x30
 8004114:	930d      	str	r3, [sp, #52]	; 0x34
        if(wait == 0)
 8004116:	b97d      	cbnz	r5, 8004138 <_ZN10LoRa_class15receiver_packetEhmbb+0xd8>
            time = 0;
 8004118:	f04f 0900 	mov.w	r9, #0
        for(start_time = time, read_time = time; (wait == 0) || (HAL_GetTick() - time < wait);) {
 800411c:	f8cd 9020 	str.w	r9, [sp, #32]
        bool signal = false;
 8004120:	f04f 0b00 	mov.w	fp, #0
                    _reg_field.clear_flags(RxTimeout);
 8004124:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80042e0 <_ZN10LoRa_class15receiver_packetEhmbb+0x280>
 8004128:	f108 070c 	add.w	r7, r8, #12
 800412c:	e0c7      	b.n	80042be <_ZN10LoRa_class15receiver_packetEhmbb+0x25e>
            mode_RX_single();
 800412e:	2101      	movs	r1, #1
 8004130:	4620      	mov	r0, r4
 8004132:	f7ff fc41 	bl	80039b8 <_ZN10LoRa_class14mode_RX_singleEb>
 8004136:	e7ea      	b.n	800410e <_ZN10LoRa_class15receiver_packetEhmbb+0xae>
            time = HAL_GetTick();
 8004138:	f003 fdbc 	bl	8007cb4 <HAL_GetTick>
 800413c:	4681      	mov	r9, r0
 800413e:	e7ed      	b.n	800411c <_ZN10LoRa_class15receiver_packetEhmbb+0xbc>
        for(start_time = time, read_time = time; (wait == 0) || (HAL_GetTick() - time < wait);) {
 8004140:	f003 fdb8 	bl	8007cb4 <HAL_GetTick>
 8004144:	eba0 0009 	sub.w	r0, r0, r9
 8004148:	42a8      	cmp	r0, r5
 800414a:	d25b      	bcs.n	8004204 <_ZN10LoRa_class15receiver_packetEhmbb+0x1a4>
            if((wait == 0) || (HAL_GetTick() - read_time > 10U)) {
 800414c:	f003 fdb2 	bl	8007cb4 <HAL_GetTick>
 8004150:	eba0 0009 	sub.w	r0, r0, r9
 8004154:	280a      	cmp	r0, #10
 8004156:	f200 80b5 	bhi.w	80042c4 <_ZN10LoRa_class15receiver_packetEhmbb+0x264>
 800415a:	e0b0      	b.n	80042be <_ZN10LoRa_class15receiver_packetEhmbb+0x25e>
                	pin_done = HAL_GPIO_ReadPin(_dio0_port, _dio0_pin);
 800415c:	69a0      	ldr	r0, [r4, #24]
 800415e:	f004 f8bf 	bl	80082e0 <HAL_GPIO_ReadPin>
 8004162:	4682      	mov	sl, r0
                	pin_timeout = HAL_GPIO_ReadPin(_dio1_port, _dio1_pin);
 8004164:	8ba1      	ldrh	r1, [r4, #28]
 8004166:	6a20      	ldr	r0, [r4, #32]
 8004168:	f004 f8ba 	bl	80082e0 <HAL_GPIO_ReadPin>
 800416c:	9009      	str	r0, [sp, #36]	; 0x24
                    if (_dio3_pin != 0) {
 800416e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8004170:	bb11      	cbnz	r1, 80041b8 <_ZN10LoRa_class15receiver_packetEhmbb+0x158>
                        pin_crc_err = GPIO_PIN_RESET;
 8004172:	2000      	movs	r0, #0
                    if ((pin_done == GPIO_PIN_SET) || (pin_timeout == GPIO_PIN_SET) || (pin_crc_err == GPIO_PIN_SET)) {
 8004174:	f1ba 0f01 	cmp.w	sl, #1
 8004178:	d022      	beq.n	80041c0 <_ZN10LoRa_class15receiver_packetEhmbb+0x160>
 800417a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800417c:	2b01      	cmp	r3, #1
 800417e:	d022      	beq.n	80041c6 <_ZN10LoRa_class15receiver_packetEhmbb+0x166>
                        signal = true;
 8004180:	2801      	cmp	r0, #1
 8004182:	bf08      	it	eq
 8004184:	f04f 0b01 	moveq.w	fp, #1
                if (((count == 0) && (wait == 0)) || (_dio0_pin == 0) || (_dio1_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 8004188:	b916      	cbnz	r6, 8004190 <_ZN10LoRa_class15receiver_packetEhmbb+0x130>
 800418a:	2d00      	cmp	r5, #0
 800418c:	f000 808b 	beq.w	80042a6 <_ZN10LoRa_class15receiver_packetEhmbb+0x246>
 8004190:	8aa3      	ldrh	r3, [r4, #20]
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 8087 	beq.w	80042a6 <_ZN10LoRa_class15receiver_packetEhmbb+0x246>
 8004198:	8ba3      	ldrh	r3, [r4, #28]
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 8083 	beq.w	80042a6 <_ZN10LoRa_class15receiver_packetEhmbb+0x246>
 80041a0:	f003 fd88 	bl	8007cb4 <HAL_GetTick>
 80041a4:	9b08      	ldr	r3, [sp, #32]
 80041a6:	1ac0      	subs	r0, r0, r3
 80041a8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80041ac:	d87b      	bhi.n	80042a6 <_ZN10LoRa_class15receiver_packetEhmbb+0x246>
 80041ae:	f1bb 0f00 	cmp.w	fp, #0
 80041b2:	f000 8082 	beq.w	80042ba <_ZN10LoRa_class15receiver_packetEhmbb+0x25a>
 80041b6:	e076      	b.n	80042a6 <_ZN10LoRa_class15receiver_packetEhmbb+0x246>
                    	pin_crc_err = HAL_GPIO_ReadPin(_dio3_port, _dio3_pin);
 80041b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80041ba:	f004 f891 	bl	80082e0 <HAL_GPIO_ReadPin>
 80041be:	e7d9      	b.n	8004174 <_ZN10LoRa_class15receiver_packetEhmbb+0x114>
                        signal = true;
 80041c0:	f04f 0b01 	mov.w	fp, #1
 80041c4:	e7e0      	b.n	8004188 <_ZN10LoRa_class15receiver_packetEhmbb+0x128>
 80041c6:	f04f 0b01 	mov.w	fp, #1
 80041ca:	e7dd      	b.n	8004188 <_ZN10LoRa_class15receiver_packetEhmbb+0x128>
                        rx_timeout = values[0];
 80041cc:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
                        crc_err = values[2];
 80041d0:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
                if(rx_done != 0) {
 80041d4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80041d8:	bb4b      	cbnz	r3, 800422e <_ZN10LoRa_class15receiver_packetEhmbb+0x1ce>
                if(rx_timeout != 0) {
 80041da:	2a00      	cmp	r2, #0
 80041dc:	d06d      	beq.n	80042ba <_ZN10LoRa_class15receiver_packetEhmbb+0x25a>
                    _reg_field.clear_flags(RxTimeout);
 80041de:	f04f 0a00 	mov.w	sl, #0
 80041e2:	f8cd a010 	str.w	sl, [sp, #16]
 80041e6:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80041ea:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80041ee:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80041f2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80041f6:	f000 fd97 	bl	8004d28 <_ZN13LoRa_register11clear_flagsE13Address_fieldb>
                    mode_RX_single(false);
 80041fa:	4651      	mov	r1, sl
 80041fc:	4620      	mov	r0, r4
 80041fe:	f7ff fbdb 	bl	80039b8 <_ZN10LoRa_class14mode_RX_singleEb>
                    if(wait != 0)
 8004202:	b97d      	cbnz	r5, 8004224 <_ZN10LoRa_class15receiver_packetEhmbb+0x1c4>
            field_get(fields, values, 3, true);
 8004204:	2301      	movs	r3, #1
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	2303      	movs	r3, #3
 800420a:	aa0b      	add	r2, sp, #44	; 0x2c
 800420c:	a923      	add	r1, sp, #140	; 0x8c
 800420e:	4620      	mov	r0, r4
 8004210:	f7ff fb6c 	bl	80038ec <_ZN10LoRa_class9field_getEP13Address_fieldPmhb>
            _reg_field.clear_flags(flags, 3);
 8004214:	2300      	movs	r3, #0
 8004216:	2203      	movs	r2, #3
 8004218:	a90e      	add	r1, sp, #56	; 0x38
 800421a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800421e:	f000 fd1b 	bl	8004c58 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb>
 8004222:	e036      	b.n	8004292 <_ZN10LoRa_class15receiver_packetEhmbb+0x232>
                        start_time = HAL_GetTick();
 8004224:	f003 fd46 	bl	8007cb4 <HAL_GetTick>
 8004228:	9008      	str	r0, [sp, #32]
                    signal = false;
 800422a:	46d3      	mov	fp, sl
 800422c:	e047      	b.n	80042be <_ZN10LoRa_class15receiver_packetEhmbb+0x25e>
            _reg_field.clear_flags(RxDone);
 800422e:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 8004232:	4f2a      	ldr	r7, [pc, #168]	; (80042dc <_ZN10LoRa_class15receiver_packetEhmbb+0x27c>)
 8004234:	f04f 0800 	mov.w	r8, #0
 8004238:	f8cd 8010 	str.w	r8, [sp, #16]
 800423c:	f107 030c 	add.w	r3, r7, #12
 8004240:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004242:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8004246:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800424a:	4630      	mov	r0, r6
 800424c:	f000 fd6c 	bl	8004d28 <_ZN13LoRa_register11clear_flagsE13Address_fieldb>
            _reg_field.clear_flags(RxTimeout);
 8004250:	4f23      	ldr	r7, [pc, #140]	; (80042e0 <_ZN10LoRa_class15receiver_packetEhmbb+0x280>)
 8004252:	f8cd 8010 	str.w	r8, [sp, #16]
 8004256:	f107 030c 	add.w	r3, r7, #12
 800425a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800425c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8004260:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8004264:	4630      	mov	r0, r6
 8004266:	f000 fd5f 	bl	8004d28 <_ZN13LoRa_register11clear_flagsE13Address_fieldb>
            send_packet = read_packet_data(crc_err, rssi, snr);
 800426a:	f89d 3114 	ldrb.w	r3, [sp, #276]	; 0x114
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	f89d 3110 	ldrb.w	r3, [sp, #272]	; 0x110
 8004274:	ebba 0208 	subs.w	r2, sl, r8
 8004278:	bf18      	it	ne
 800427a:	2201      	movne	r2, #1
 800427c:	4621      	mov	r1, r4
 800427e:	a838      	add	r0, sp, #224	; 0xe0
 8004280:	f7ff fe84 	bl	8003f8c <_ZN10LoRa_class16read_packet_dataEbbb>
 8004284:	a938      	add	r1, sp, #224	; 0xe0
 8004286:	9807      	ldr	r0, [sp, #28]
 8004288:	f000 fa0e 	bl	80046a8 <_ZN11LoRa_packetaSEOS_>
 800428c:	a838      	add	r0, sp, #224	; 0xe0
 800428e:	f000 f998 	bl	80045c2 <_ZN11LoRa_packetD1Ev>
        if(wait != 0)
 8004292:	2d00      	cmp	r5, #0
 8004294:	f43f af36 	beq.w	8004104 <_ZN10LoRa_class15receiver_packetEhmbb+0xa4>
            mode_sleep();
 8004298:	4620      	mov	r0, r4
 800429a:	f7ff fb61 	bl	8003960 <_ZN10LoRa_class10mode_sleepEv>
 800429e:	e731      	b.n	8004104 <_ZN10LoRa_class15receiver_packetEhmbb+0xa4>
                if (((count == 0) && (wait == 0)) || (_dio0_pin == 0) || (_dio1_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 80042a0:	2e00      	cmp	r6, #0
 80042a2:	f43f af72 	beq.w	800418a <_ZN10LoRa_class15receiver_packetEhmbb+0x12a>
                    amt = field_get(fields, values, 3, true);
 80042a6:	2301      	movs	r3, #1
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	2303      	movs	r3, #3
 80042ac:	aa0b      	add	r2, sp, #44	; 0x2c
 80042ae:	a923      	add	r1, sp, #140	; 0x8c
 80042b0:	4620      	mov	r0, r4
 80042b2:	f7ff fb1b 	bl	80038ec <_ZN10LoRa_class9field_getEP13Address_fieldPmhb>
                    if(amt == 3) {
 80042b6:	2803      	cmp	r0, #3
 80042b8:	d088      	beq.n	80041cc <_ZN10LoRa_class15receiver_packetEhmbb+0x16c>
                if(wait == 0) {
 80042ba:	2d00      	cmp	r5, #0
 80042bc:	d0a2      	beq.n	8004204 <_ZN10LoRa_class15receiver_packetEhmbb+0x1a4>
        for(start_time = time, read_time = time; (wait == 0) || (HAL_GetTick() - time < wait);) {
 80042be:	2d00      	cmp	r5, #0
 80042c0:	f47f af3e 	bne.w	8004140 <_ZN10LoRa_class15receiver_packetEhmbb+0xe0>
            	if ((_dio0_pin != 0) && (_dio1_pin != 0)) {
 80042c4:	8aa1      	ldrh	r1, [r4, #20]
 80042c6:	2900      	cmp	r1, #0
 80042c8:	d0ea      	beq.n	80042a0 <_ZN10LoRa_class15receiver_packetEhmbb+0x240>
 80042ca:	8ba3      	ldrh	r3, [r4, #28]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f47f af45 	bne.w	800415c <_ZN10LoRa_class15receiver_packetEhmbb+0xfc>
                if (((count == 0) && (wait == 0)) || (_dio0_pin == 0) || (_dio1_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 80042d2:	2e00      	cmp	r6, #0
 80042d4:	d1e7      	bne.n	80042a6 <_ZN10LoRa_class15receiver_packetEhmbb+0x246>
 80042d6:	2d00      	cmp	r5, #0
 80042d8:	d0e5      	beq.n	80042a6 <_ZN10LoRa_class15receiver_packetEhmbb+0x246>
 80042da:	e75d      	b.n	8004198 <_ZN10LoRa_class15receiver_packetEhmbb+0x138>
 80042dc:	20001e90 	.word	0x20001e90
 80042e0:	20001ec8 	.word	0x20001ec8
 80042e4:	20001e3c 	.word	0x20001e3c
 80042e8:	20001f38 	.word	0x20001f38

080042ec <_ZN10LoRa_class12packet_beginEv>:
    if (packet_end(wait))
        return true;
    return false;
}
// Объявление пакета
bool LoRa_class::packet_begin() {
 80042ec:	b570      	push	{r4, r5, r6, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	4605      	mov	r5, r0
    mode_STDBY();
 80042f2:	f7ff fb3a 	bl	800396a <_ZN10LoRa_class10mode_STDBYEv>
    field_set(FifoAddrPtr, _FifoTxBaseAddr);
 80042f6:	4c0b      	ldr	r4, [pc, #44]	; (8004324 <_ZN10LoRa_class12packet_beginEv+0x38>)
 80042f8:	2601      	movs	r6, #1
 80042fa:	9605      	str	r6, [sp, #20]
 80042fc:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8004300:	9304      	str	r3, [sp, #16]
 8004302:	f104 030c 	add.w	r3, r4, #12
 8004306:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004308:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800430c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004310:	4628      	mov	r0, r5
 8004312:	f7ff fa92 	bl	800383a <_ZN10LoRa_class9field_setE13Address_fieldmb>
    _packet_length = 0;
 8004316:	2300      	movs	r3, #0
 8004318:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    return true;
}
 800431c:	4630      	mov	r0, r6
 800431e:	b006      	add	sp, #24
 8004320:	bd70      	pop	{r4, r5, r6, pc}
 8004322:	bf00      	nop
 8004324:	20001c60 	.word	0x20001c60

08004328 <_ZN10LoRa_class12packet_writeEPhh>:
// Отправка данных в пакет buffer, size=None? (len)
bool LoRa_class::packet_write(uint8_t* packet, uint8_t len) {
 8004328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800432c:	b087      	sub	sp, #28
    if (len + _packet_length > 255)
 800432e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004332:	189c      	adds	r4, r3, r2
 8004334:	2cff      	cmp	r4, #255	; 0xff
 8004336:	dc2f      	bgt.n	8004398 <_ZN10LoRa_class12packet_writeEPhh+0x70>
 8004338:	4607      	mov	r7, r0
        return true;
    _packet_length += len;
 800433a:	f887 4039 	strb.w	r4, [r7, #57]	; 0x39
    for(int i = 0; i < len; ++i)
 800433e:	b1ba      	cbz	r2, 8004370 <_ZN10LoRa_class12packet_writeEPhh+0x48>
 8004340:	460e      	mov	r6, r1
 8004342:	eb01 0802 	add.w	r8, r1, r2
        field_set(Fifo, packet[i]);
 8004346:	4d15      	ldr	r5, [pc, #84]	; (800439c <_ZN10LoRa_class12packet_writeEPhh+0x74>)
 8004348:	f04f 0901 	mov.w	r9, #1
 800434c:	f105 040c 	add.w	r4, r5, #12
 8004350:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004354:	f8cd 9014 	str.w	r9, [sp, #20]
 8004358:	9304      	str	r3, [sp, #16]
 800435a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800435e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8004362:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8004366:	4638      	mov	r0, r7
 8004368:	f7ff fa67 	bl	800383a <_ZN10LoRa_class9field_setE13Address_fieldmb>
    for(int i = 0; i < len; ++i)
 800436c:	4546      	cmp	r6, r8
 800436e:	d1ef      	bne.n	8004350 <_ZN10LoRa_class12packet_writeEPhh+0x28>
    field_set(PayloadLength, _packet_length);
 8004370:	4c0b      	ldr	r4, [pc, #44]	; (80043a0 <_ZN10LoRa_class12packet_writeEPhh+0x78>)
 8004372:	2301      	movs	r3, #1
 8004374:	9305      	str	r3, [sp, #20]
 8004376:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800437a:	9304      	str	r3, [sp, #16]
 800437c:	f104 030c 	add.w	r3, r4, #12
 8004380:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004382:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8004386:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800438a:	4638      	mov	r0, r7
 800438c:	f7ff fa55 	bl	800383a <_ZN10LoRa_class9field_setE13Address_fieldmb>
    return false;
 8004390:	2000      	movs	r0, #0
}
 8004392:	b007      	add	sp, #28
 8004394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
 8004398:	2001      	movs	r0, #1
 800439a:	e7fa      	b.n	8004392 <_ZN10LoRa_class12packet_writeEPhh+0x6a>
 800439c:	20001c44 	.word	0x20001c44
 80043a0:	20001e58 	.word	0x20001e58

080043a4 <_ZN10LoRa_class10packet_endEmb>:
    field_set(PayloadLength, _packet_length);
    return false;
}

// Отправка пакета
bool LoRa_class::packet_end(uint32_t wait, bool sleep) {
 80043a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a8:	b089      	sub	sp, #36	; 0x24
 80043aa:	4606      	mov	r6, r0
 80043ac:	460d      	mov	r5, r1
 80043ae:	4692      	mov	sl, r2
    mode_TX();
 80043b0:	2101      	movs	r1, #1
 80043b2:	f7ff fadf 	bl	8003974 <_ZN10LoRa_class7mode_TXEb>
    bool result = false;
    if(wait > 0) {
 80043b6:	b91d      	cbnz	r5, 80043c0 <_ZN10LoRa_class10packet_endEmb+0x1c>
        if(sleep && (tx_done != 0)) {
            mode_sleep();
        }
    }
    return result;
}
 80043b8:	2000      	movs	r0, #0
 80043ba:	b009      	add	sp, #36	; 0x24
 80043bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t tx_done = 0;
 80043c0:	2700      	movs	r7, #0
 80043c2:	9707      	str	r7, [sp, #28]
        for(time = HAL_GetTick(), start_time = time, read_time = time; HAL_GetTick() - time < wait;) {
 80043c4:	f003 fc76 	bl	8007cb4 <HAL_GetTick>
 80043c8:	4604      	mov	r4, r0
                    field_get(TxDone, &tx_done, true);
 80043ca:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8004450 <_ZN10LoRa_class10packet_endEmb+0xac>
 80043ce:	f04f 0b01 	mov.w	fp, #1
 80043d2:	f108 090c 	add.w	r9, r8, #12
        for(time = HAL_GetTick(), start_time = time, read_time = time; HAL_GetTick() - time < wait;) {
 80043d6:	f003 fc6d 	bl	8007cb4 <HAL_GetTick>
 80043da:	1b00      	subs	r0, r0, r4
 80043dc:	42a8      	cmp	r0, r5
 80043de:	d22c      	bcs.n	800443a <_ZN10LoRa_class10packet_endEmb+0x96>
            if(HAL_GetTick() - read_time > 10) {
 80043e0:	f003 fc68 	bl	8007cb4 <HAL_GetTick>
 80043e4:	1b00      	subs	r0, r0, r4
 80043e6:	280a      	cmp	r0, #10
 80043e8:	d9f5      	bls.n	80043d6 <_ZN10LoRa_class10packet_endEmb+0x32>
                if (_dio0_pin != 0) {
 80043ea:	8ab1      	ldrh	r1, [r6, #20]
 80043ec:	b999      	cbnz	r1, 8004416 <_ZN10LoRa_class10packet_endEmb+0x72>
                    field_get(TxDone, &tx_done, true);
 80043ee:	f8cd b014 	str.w	fp, [sp, #20]
 80043f2:	ab07      	add	r3, sp, #28
 80043f4:	9304      	str	r3, [sp, #16]
 80043f6:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 80043fa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80043fe:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8004402:	4630      	mov	r0, r6
 8004404:	f7ff fa57 	bl	80038b6 <_ZN10LoRa_class9field_getE13Address_fieldPmb>
                if(tx_done != 0) {
 8004408:	9b07      	ldr	r3, [sp, #28]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0e3      	beq.n	80043d6 <_ZN10LoRa_class10packet_endEmb+0x32>
        if(sleep && (tx_done != 0)) {
 800440e:	f1ba 0f00 	cmp.w	sl, #0
 8004412:	d118      	bne.n	8004446 <_ZN10LoRa_class10packet_endEmb+0xa2>
 8004414:	e7d0      	b.n	80043b8 <_ZN10LoRa_class10packet_endEmb+0x14>
                	pin_done = HAL_GPIO_ReadPin(_dio0_port, _dio0_pin);
 8004416:	69b0      	ldr	r0, [r6, #24]
 8004418:	f003 ff62 	bl	80082e0 <HAL_GPIO_ReadPin>
                        signal = true;
 800441c:	2801      	cmp	r0, #1
 800441e:	bf08      	it	eq
 8004420:	2701      	moveq	r7, #1
                if ((_dio0_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 8004422:	8ab3      	ldrh	r3, [r6, #20]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0e2      	beq.n	80043ee <_ZN10LoRa_class10packet_endEmb+0x4a>
 8004428:	f003 fc44 	bl	8007cb4 <HAL_GetTick>
 800442c:	1b00      	subs	r0, r0, r4
 800442e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8004432:	d8dc      	bhi.n	80043ee <_ZN10LoRa_class10packet_endEmb+0x4a>
 8004434:	2f00      	cmp	r7, #0
 8004436:	d0e7      	beq.n	8004408 <_ZN10LoRa_class10packet_endEmb+0x64>
 8004438:	e7d9      	b.n	80043ee <_ZN10LoRa_class10packet_endEmb+0x4a>
        if(sleep && (tx_done != 0)) {
 800443a:	f1ba 0f00 	cmp.w	sl, #0
 800443e:	d0bb      	beq.n	80043b8 <_ZN10LoRa_class10packet_endEmb+0x14>
 8004440:	9b07      	ldr	r3, [sp, #28]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0b8      	beq.n	80043b8 <_ZN10LoRa_class10packet_endEmb+0x14>
            mode_sleep();
 8004446:	4630      	mov	r0, r6
 8004448:	f7ff fa8a 	bl	8003960 <_ZN10LoRa_class10mode_sleepEv>
    return result;
 800444c:	e7b4      	b.n	80043b8 <_ZN10LoRa_class10packet_endEmb+0x14>
 800444e:	bf00      	nop
 8004450:	20001f1c 	.word	0x20001f1c

08004454 <_ZN10LoRa_class13sender_packetEPhhm>:
bool LoRa_class::sender_packet(uint8_t* packet, uint8_t len, uint32_t wait) {
 8004454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004456:	4604      	mov	r4, r0
 8004458:	460d      	mov	r5, r1
 800445a:	4616      	mov	r6, r2
 800445c:	461f      	mov	r7, r3
    packet_begin();
 800445e:	f7ff ff45 	bl	80042ec <_ZN10LoRa_class12packet_beginEv>
    if (packet_write(packet, len))
 8004462:	4632      	mov	r2, r6
 8004464:	4629      	mov	r1, r5
 8004466:	4620      	mov	r0, r4
 8004468:	f7ff ff5e 	bl	8004328 <_ZN10LoRa_class12packet_writeEPhh>
 800446c:	4603      	mov	r3, r0
 800446e:	b108      	cbz	r0, 8004474 <_ZN10LoRa_class13sender_packetEPhhm+0x20>
}
 8004470:	4618      	mov	r0, r3
 8004472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (packet_end(wait))
 8004474:	2200      	movs	r2, #0
 8004476:	4639      	mov	r1, r7
 8004478:	4620      	mov	r0, r4
 800447a:	f7ff ff93 	bl	80043a4 <_ZN10LoRa_class10packet_endEmb>
 800447e:	4603      	mov	r3, r0
 8004480:	e7f6      	b.n	8004470 <_ZN10LoRa_class13sender_packetEPhhm+0x1c>
	...

08004484 <_GLOBAL__sub_I_LoRa>:
}
 8004484:	b508      	push	{r3, lr}
class LoRa_class LoRa;
 8004486:	4802      	ldr	r0, [pc, #8]	; (8004490 <_GLOBAL__sub_I_LoRa+0xc>)
 8004488:	f7ff f9cc 	bl	8003824 <_ZN10LoRa_classC1Ev>
}
 800448c:	bd08      	pop	{r3, pc}
 800448e:	bf00      	nop
 8004490:	20000370 	.word	0x20000370

08004494 <_GLOBAL__sub_D_LoRa>:
 8004494:	b508      	push	{r3, lr}
class LoRa_class LoRa;
 8004496:	4802      	ldr	r0, [pc, #8]	; (80044a0 <_GLOBAL__sub_D_LoRa+0xc>)
 8004498:	f7ff f990 	bl	80037bc <_ZN10LoRa_classD1Ev>
}
 800449c:	bd08      	pop	{r3, pc}
 800449e:	bf00      	nop
 80044a0:	20000370 	.word	0x20000370

080044a4 <_ZN16LoRa_packet_data8add_dataEh>:
LoRa_packet_data lora_packet_data[SIZE_LORA_PACKET_BUFFER];
#endif


bool LoRa_packet_data::add_data(uint8_t data_byte) {
    if(len >= SIZE_LORA_PACKET_MAX_LEN)
 80044a4:	7843      	ldrb	r3, [r0, #1]
 80044a6:	2b31      	cmp	r3, #49	; 0x31
 80044a8:	d805      	bhi.n	80044b6 <_ZN16LoRa_packet_data8add_dataEh+0x12>
        return true;
    data[len++] = data_byte;
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	7042      	strb	r2, [r0, #1]
 80044ae:	4418      	add	r0, r3
 80044b0:	7081      	strb	r1, [r0, #2]
    return false;
 80044b2:	2000      	movs	r0, #0
 80044b4:	4770      	bx	lr
        return true;
 80044b6:	2001      	movs	r0, #1
}
 80044b8:	4770      	bx	lr

080044ba <_ZN16LoRa_packet_data8add_dataEPKhh>:
bool LoRa_packet_data::add_data(const uint8_t* data_byte, uint8_t amt_byte) {
 80044ba:	b470      	push	{r4, r5, r6}
    if((len + amt_byte) > SIZE_LORA_PACKET_MAX_LEN)
 80044bc:	7846      	ldrb	r6, [r0, #1]
 80044be:	18b3      	adds	r3, r6, r2
 80044c0:	2b32      	cmp	r3, #50	; 0x32
 80044c2:	d80f      	bhi.n	80044e4 <_ZN16LoRa_packet_data8add_dataEPKhh+0x2a>
        return true;
    for(size_t i = 0; i < amt_byte; ++i)
 80044c4:	b14a      	cbz	r2, 80044da <_ZN16LoRa_packet_data8add_dataEPKhh+0x20>
 80044c6:	460b      	mov	r3, r1
 80044c8:	1c74      	adds	r4, r6, #1
 80044ca:	4404      	add	r4, r0
 80044cc:	4411      	add	r1, r2
        data[i+len] = data_byte[i];
 80044ce:	f813 5b01 	ldrb.w	r5, [r3], #1
 80044d2:	f804 5f01 	strb.w	r5, [r4, #1]!
    for(size_t i = 0; i < amt_byte; ++i)
 80044d6:	428b      	cmp	r3, r1
 80044d8:	d1f9      	bne.n	80044ce <_ZN16LoRa_packet_data8add_dataEPKhh+0x14>
    len += amt_byte;
 80044da:	4416      	add	r6, r2
 80044dc:	7046      	strb	r6, [r0, #1]
    return false;
 80044de:	2000      	movs	r0, #0
}
 80044e0:	bc70      	pop	{r4, r5, r6}
 80044e2:	4770      	bx	lr
        return true;
 80044e4:	2001      	movs	r0, #1
 80044e6:	e7fb      	b.n	80044e0 <_ZN16LoRa_packet_data8add_dataEPKhh+0x26>

080044e8 <_ZN16LoRa_packet_data8set_dataEPKhh>:

bool LoRa_packet_data::set_data(const uint8_t* set_data, uint8_t set_len) {
    if(set_len > SIZE_LORA_PACKET_MAX_LEN)
 80044e8:	2a32      	cmp	r2, #50	; 0x32
 80044ea:	d812      	bhi.n	8004512 <_ZN16LoRa_packet_data8set_dataEPKhh+0x2a>
        return true;
    if((set_data != nullptr) && (set_len != 0)){
 80044ec:	b169      	cbz	r1, 800450a <_ZN16LoRa_packet_data8set_dataEPKhh+0x22>
 80044ee:	b162      	cbz	r2, 800450a <_ZN16LoRa_packet_data8set_dataEPKhh+0x22>
        len = set_len;
 80044f0:	7042      	strb	r2, [r0, #1]
        for(int i = 0; i < set_len; ++i)
 80044f2:	b182      	cbz	r2, 8004516 <_ZN16LoRa_packet_data8set_dataEPKhh+0x2e>
 80044f4:	460b      	mov	r3, r1
 80044f6:	3001      	adds	r0, #1
 80044f8:	4411      	add	r1, r2
            data[i] = set_data[i];
 80044fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044fe:	f800 2f01 	strb.w	r2, [r0, #1]!
        for(int i = 0; i < set_len; ++i)
 8004502:	428b      	cmp	r3, r1
 8004504:	d1f9      	bne.n	80044fa <_ZN16LoRa_packet_data8set_dataEPKhh+0x12>
    }
    else
        len = 0;
    return false;
 8004506:	2000      	movs	r0, #0
}
 8004508:	4770      	bx	lr
        len = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	7043      	strb	r3, [r0, #1]
    return false;
 800450e:	4618      	mov	r0, r3
 8004510:	4770      	bx	lr
        return true;
 8004512:	2001      	movs	r0, #1
 8004514:	4770      	bx	lr
    return false;
 8004516:	2000      	movs	r0, #0
 8004518:	4770      	bx	lr
	...

0800451c <_ZN11LoRa_packet11search_dataEv>:
}
void LoRa_packet_data::set_data(class LoRa_packet_data&& lora_packet) {
    *this = std::move(lora_packet);
}
bool LoRa_packet_data::free() const {
    return free_object_;
 800451c:	4b1e      	ldr	r3, [pc, #120]	; (8004598 <_ZN11LoRa_packet11search_dataEv+0x7c>)
      typename iterator_traits<_RandomAccessIterator>::difference_type
	__trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
	{
	  if (__pred(__first))
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	bb8b      	cbnz	r3, 8004586 <_ZN11LoRa_packet11search_dataEv+0x6a>
 8004522:	4b1d      	ldr	r3, [pc, #116]	; (8004598 <_ZN11LoRa_packet11search_dataEv+0x7c>)
	    return __first;
	  ++__first;

	  if (__pred(__first))
 8004524:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004528:	bb83      	cbnz	r3, 800458c <_ZN11LoRa_packet11search_dataEv+0x70>
 800452a:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <_ZN11LoRa_packet11search_dataEv+0x7c>)
	    return __first;
	  ++__first;

	  if (__pred(__first))
 800452c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004530:	bb73      	cbnz	r3, 8004590 <_ZN11LoRa_packet11search_dataEv+0x74>
 8004532:	4b19      	ldr	r3, [pc, #100]	; (8004598 <_ZN11LoRa_packet11search_dataEv+0x7c>)
	    return __first;
	  ++__first;

	  if (__pred(__first))
 8004534:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8004538:	bb63      	cbnz	r3, 8004594 <_ZN11LoRa_packet11search_dataEv+0x78>
	    return __first;
	  ++__first;
 800453a:	4b18      	ldr	r3, [pc, #96]	; (800459c <_ZN11LoRa_packet11search_dataEv+0x80>)
      for (; __trip_count > 0; --__trip_count)
 800453c:	f503 6177 	add.w	r1, r3, #3952	; 0xf70
	  if (__pred(__first))
 8004540:	781a      	ldrb	r2, [r3, #0]
 8004542:	b962      	cbnz	r2, 800455e <_ZN11LoRa_packet11search_dataEv+0x42>
	  if (__pred(__first))
 8004544:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8004548:	b99a      	cbnz	r2, 8004572 <_ZN11LoRa_packet11search_dataEv+0x56>
	  if (__pred(__first))
 800454a:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800454e:	b992      	cbnz	r2, 8004576 <_ZN11LoRa_packet11search_dataEv+0x5a>
	  if (__pred(__first))
 8004550:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8004554:	b98a      	cbnz	r2, 800457a <_ZN11LoRa_packet11search_dataEv+0x5e>
 8004556:	33d0      	adds	r3, #208	; 0xd0
      for (; __trip_count > 0; --__trip_count)
 8004558:	428b      	cmp	r3, r1
 800455a:	d1f1      	bne.n	8004540 <_ZN11LoRa_packet11search_dataEv+0x24>
	  if (__pred(__first))
	    return __first;
	  ++__first;
	case 0:
	default:
	  return __last;
 800455c:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <_ZN11LoRa_packet11search_dataEv+0x84>)


// ----- LoRa_packet -----
bool LoRa_packet::search_data() {
#if defined( USE_STANDARD_ARRAY )
    packet_data = std::find_if(lora_packet_data.begin(), lora_packet_data.end(),
 800455e:	6003      	str	r3, [r0, #0]
                        [](const LoRa_packet_data &data){return data.free();} );
    if(packet_data == lora_packet_data.end()) {
 8004560:	4a0f      	ldr	r2, [pc, #60]	; (80045a0 <_ZN11LoRa_packet11search_dataEv+0x84>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d00b      	beq.n	800457e <_ZN11LoRa_packet11search_dataEv+0x62>
#if defined( ESP32 )
        Serial.println("!lora_packet_data memory error!");
#endif
        return true;
    }
    packet_data->free_object_ = false;
 8004566:	2200      	movs	r2, #0
 8004568:	701a      	strb	r2, [r3, #0]
    packet_data->len = 0;
 800456a:	6803      	ldr	r3, [r0, #0]
 800456c:	705a      	strb	r2, [r3, #1]
    return false;
 800456e:	4610      	mov	r0, r2
        }
    }
    packet_data = nullptr;
    return true;
#endif
}
 8004570:	4770      	bx	lr
	  ++__first;
 8004572:	3334      	adds	r3, #52	; 0x34
 8004574:	e7f3      	b.n	800455e <_ZN11LoRa_packet11search_dataEv+0x42>
	  ++__first;
 8004576:	3368      	adds	r3, #104	; 0x68
 8004578:	e7f1      	b.n	800455e <_ZN11LoRa_packet11search_dataEv+0x42>
	  ++__first;
 800457a:	339c      	adds	r3, #156	; 0x9c
 800457c:	e7ef      	b.n	800455e <_ZN11LoRa_packet11search_dataEv+0x42>
        packet_data = nullptr;
 800457e:	2300      	movs	r3, #0
 8004580:	6003      	str	r3, [r0, #0]
        return true;
 8004582:	2001      	movs	r0, #1
 8004584:	4770      	bx	lr
	  if (__pred(__first))
 8004586:	4b04      	ldr	r3, [pc, #16]	; (8004598 <_ZN11LoRa_packet11search_dataEv+0x7c>)
    packet_data = std::find_if(lora_packet_data.begin(), lora_packet_data.end(),
 8004588:	6003      	str	r3, [r0, #0]
 800458a:	e7ec      	b.n	8004566 <_ZN11LoRa_packet11search_dataEv+0x4a>
	  ++__first;
 800458c:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <_ZN11LoRa_packet11search_dataEv+0x88>)
 800458e:	e7fb      	b.n	8004588 <_ZN11LoRa_packet11search_dataEv+0x6c>
	  ++__first;
 8004590:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <_ZN11LoRa_packet11search_dataEv+0x8c>)
 8004592:	e7f9      	b.n	8004588 <_ZN11LoRa_packet11search_dataEv+0x6c>
	  ++__first;
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <_ZN11LoRa_packet11search_dataEv+0x90>)
 8004596:	e7f7      	b.n	8004588 <_ZN11LoRa_packet11search_dataEv+0x6c>
 8004598:	200006c0 	.word	0x200006c0
 800459c:	20000790 	.word	0x20000790
 80045a0:	20001700 	.word	0x20001700
 80045a4:	200006f4 	.word	0x200006f4
 80045a8:	20000728 	.word	0x20000728
 80045ac:	2000075c 	.word	0x2000075c

080045b0 <_ZN11LoRa_packetC1Ev>:


LoRa_packet::LoRa_packet() {
 80045b0:	b510      	push	{r4, lr}
 80045b2:	4604      	mov	r4, r0
 80045b4:	2300      	movs	r3, #0
 80045b6:	7103      	strb	r3, [r0, #4]
 80045b8:	7143      	strb	r3, [r0, #5]
    search_data();
 80045ba:	f7ff ffaf 	bl	800451c <_ZN11LoRa_packet11search_dataEv>
}
 80045be:	4620      	mov	r0, r4
 80045c0:	bd10      	pop	{r4, pc}

080045c2 <_ZN11LoRa_packetD1Ev>:
    packet_data = nullptr;
    *this = std::move(right);
}

LoRa_packet::~LoRa_packet() {
    if(packet_data != nullptr)
 80045c2:	6803      	ldr	r3, [r0, #0]
 80045c4:	b10b      	cbz	r3, 80045ca <_ZN11LoRa_packetD1Ev+0x8>
        packet_data->free_object_ = true;
 80045c6:	2201      	movs	r2, #1
 80045c8:	701a      	strb	r2, [r3, #0]
}
 80045ca:	4770      	bx	lr

080045cc <_ZN11LoRa_packet15add_packet_dataEh>:

bool LoRa_packet::add_packet_data(uint8_t data) {
 80045cc:	b508      	push	{r3, lr}
    return packet_data->add_data(data);
 80045ce:	6800      	ldr	r0, [r0, #0]
 80045d0:	f7ff ff68 	bl	80044a4 <_ZN16LoRa_packet_data8add_dataEh>
}
 80045d4:	bd08      	pop	{r3, pc}

080045d6 <_ZN11LoRa_packet15add_packet_dataEPKhh>:
bool LoRa_packet::add_packet_data(const  uint8_t* data, uint8_t len) {
 80045d6:	b508      	push	{r3, lr}
    return packet_data->add_data(data, len);
 80045d8:	6800      	ldr	r0, [r0, #0]
 80045da:	f7ff ff6e 	bl	80044ba <_ZN16LoRa_packet_data8add_dataEPKhh>
}
 80045de:	bd08      	pop	{r3, pc}

080045e0 <_ZN11LoRa_packet10set_packetEPKhhbh>:
bool LoRa_packet::set_packet(const uint8_t* data, uint8_t len, bool crc_error, uint8_t rssi) {
 80045e0:	b538      	push	{r3, r4, r5, lr}
 80045e2:	4604      	mov	r4, r0
 80045e4:	461d      	mov	r5, r3
    if(packet_data->set_data(data, len))
 80045e6:	6800      	ldr	r0, [r0, #0]
 80045e8:	f7ff ff7e 	bl	80044e8 <_ZN16LoRa_packet_data8set_dataEPKhh>
 80045ec:	4603      	mov	r3, r0
 80045ee:	b918      	cbnz	r0, 80045f8 <_ZN11LoRa_packet10set_packetEPKhhbh+0x18>
        return true;
    crc_error_ = crc_error;
 80045f0:	7165      	strb	r5, [r4, #5]
    rssi_ = rssi;
 80045f2:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80045f6:	7122      	strb	r2, [r4, #4]
    return false;
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	bd38      	pop	{r3, r4, r5, pc}

080045fc <_ZN11LoRa_packetC1EPKhhbh>:
LoRa_packet::LoRa_packet(const uint8_t* data, uint8_t len, bool crc_error, uint8_t rssi) {
 80045fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045fe:	b083      	sub	sp, #12
 8004600:	4604      	mov	r4, r0
 8004602:	460d      	mov	r5, r1
 8004604:	4616      	mov	r6, r2
 8004606:	461f      	mov	r7, r3
 8004608:	2300      	movs	r3, #0
 800460a:	7103      	strb	r3, [r0, #4]
 800460c:	7143      	strb	r3, [r0, #5]
    search_data();
 800460e:	f7ff ff85 	bl	800451c <_ZN11LoRa_packet11search_dataEv>
    set_packet(data, len, crc_error, rssi);
 8004612:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	463b      	mov	r3, r7
 800461a:	4632      	mov	r2, r6
 800461c:	4629      	mov	r1, r5
 800461e:	4620      	mov	r0, r4
 8004620:	f7ff ffde 	bl	80045e0 <_ZN11LoRa_packet10set_packetEPKhhbh>
}
 8004624:	4620      	mov	r0, r4
 8004626:	b003      	add	sp, #12
 8004628:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800462a <_ZN11LoRa_packet12clear_packetEv>:
    crc_error_ = crc_error;
    rssi_ = rssi;
    return false;
}

void LoRa_packet::clear_packet() {
 800462a:	b510      	push	{r4, lr}
 800462c:	4604      	mov	r4, r0
    if(packet_data == nullptr)
 800462e:	6803      	ldr	r3, [r0, #0]
 8004630:	b12b      	cbz	r3, 800463e <_ZN11LoRa_packet12clear_packetEv+0x14>
        search_data();
    else
        packet_data->len = 0;
 8004632:	2200      	movs	r2, #0
 8004634:	705a      	strb	r2, [r3, #1]
    rssi_ = 0;
 8004636:	2300      	movs	r3, #0
 8004638:	7123      	strb	r3, [r4, #4]
    crc_error_  = false;
 800463a:	7163      	strb	r3, [r4, #5]
}
 800463c:	bd10      	pop	{r4, pc}
        search_data();
 800463e:	f7ff ff6d 	bl	800451c <_ZN11LoRa_packet11search_dataEv>
 8004642:	e7f8      	b.n	8004636 <_ZN11LoRa_packet12clear_packetEv+0xc>

08004644 <_ZNK11LoRa_packet7get_lenEv>:
}
uint8_t LoRa_packet::get_data(int num) const {
    return packet_data->data[num];
}
uint8_t LoRa_packet::get_len() const {
    if(packet_data == nullptr)
 8004644:	6803      	ldr	r3, [r0, #0]
 8004646:	b10b      	cbz	r3, 800464c <_ZNK11LoRa_packet7get_lenEv+0x8>
        return 0;
    return packet_data->len;
 8004648:	7858      	ldrb	r0, [r3, #1]
 800464a:	4770      	bx	lr
        return 0;
 800464c:	2000      	movs	r0, #0
}
 800464e:	4770      	bx	lr

08004650 <_ZNK11LoRa_packet13get_crc_errorEv>:
bool LoRa_packet::get_crc_error() const {
    return crc_error_;
}
 8004650:	7940      	ldrb	r0, [r0, #5]
 8004652:	4770      	bx	lr

08004654 <_ZN11LoRa_packetixEi>:
 8004654:	6800      	ldr	r0, [r0, #0]
 8004656:	3002      	adds	r0, #2
uint8_t LoRa_packet::get_rssi() const {
    return rssi_;
}
uint8_t& LoRa_packet::operator[] (const int index) {
    return packet_data->data[index];
}
 8004658:	4408      	add	r0, r1
 800465a:	4770      	bx	lr

0800465c <_ZNK11LoRa_packetixEi>:
 800465c:	6800      	ldr	r0, [r0, #0]
 800465e:	3002      	adds	r0, #2
const uint8_t& LoRa_packet::operator[](const int index) const {
    return packet_data->data[index];
}
 8004660:	4408      	add	r0, r1
 8004662:	4770      	bx	lr

08004664 <_ZN11LoRa_packetaSERKS_>:
class LoRa_packet& LoRa_packet::operator=(const class LoRa_packet& right) {
 8004664:	b538      	push	{r3, r4, r5, lr}
 8004666:	4604      	mov	r4, r0
    // Проверка на самоприсваивание
    if (this == &right)
 8004668:	4288      	cmp	r0, r1
 800466a:	d018      	beq.n	800469e <_ZN11LoRa_packetaSERKS_+0x3a>
 800466c:	460d      	mov	r5, r1
        return *this;
    // Проверка на пустой объект
    if(packet_data == nullptr)
 800466e:	6803      	ldr	r3, [r0, #0]
 8004670:	b1bb      	cbz	r3, 80046a2 <_ZN11LoRa_packetaSERKS_+0x3e>
        search_data();
    // Перенос значений
    packet_data->len = right.packet_data->len;
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	682a      	ldr	r2, [r5, #0]
 8004676:	7852      	ldrb	r2, [r2, #1]
 8004678:	705a      	strb	r2, [r3, #1]
    crc_error_ = right.crc_error_;
 800467a:	796b      	ldrb	r3, [r5, #5]
 800467c:	7163      	strb	r3, [r4, #5]
    rssi_ = right.rssi_;
 800467e:	792b      	ldrb	r3, [r5, #4]
 8004680:	7123      	strb	r3, [r4, #4]
    for(int i = 0; i < packet_data->len; ++i)
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	785a      	ldrb	r2, [r3, #1]
 8004686:	b152      	cbz	r2, 800469e <_ZN11LoRa_packetaSERKS_+0x3a>
 8004688:	2200      	movs	r2, #0
        packet_data->data[i] = right.packet_data->data[i];
 800468a:	6829      	ldr	r1, [r5, #0]
 800468c:	4411      	add	r1, r2
 800468e:	7889      	ldrb	r1, [r1, #2]
 8004690:	4413      	add	r3, r2
 8004692:	7099      	strb	r1, [r3, #2]
    for(int i = 0; i < packet_data->len; ++i)
 8004694:	3201      	adds	r2, #1
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	7859      	ldrb	r1, [r3, #1]
 800469a:	4291      	cmp	r1, r2
 800469c:	dcf5      	bgt.n	800468a <_ZN11LoRa_packetaSERKS_+0x26>
    return *this;
}
 800469e:	4620      	mov	r0, r4
 80046a0:	bd38      	pop	{r3, r4, r5, pc}
        search_data();
 80046a2:	f7ff ff3b 	bl	800451c <_ZN11LoRa_packet11search_dataEv>
 80046a6:	e7e4      	b.n	8004672 <_ZN11LoRa_packetaSERKS_+0xe>

080046a8 <_ZN11LoRa_packetaSEOS_>:

class LoRa_packet& LoRa_packet::operator=(class LoRa_packet&& right) {
    // Проверка на самоприсваивание
    if (this == &right)
 80046a8:	4288      	cmp	r0, r1
 80046aa:	d00b      	beq.n	80046c4 <_ZN11LoRa_packetaSEOS_+0x1c>
        return *this;
    // Перенос значений
    if(packet_data != nullptr) {
 80046ac:	6803      	ldr	r3, [r0, #0]
 80046ae:	b10b      	cbz	r3, 80046b4 <_ZN11LoRa_packetaSEOS_+0xc>
        packet_data->free_object_=true;
 80046b0:	2201      	movs	r2, #1
 80046b2:	701a      	strb	r2, [r3, #0]
    }
    packet_data = right.packet_data;
 80046b4:	680b      	ldr	r3, [r1, #0]
 80046b6:	6003      	str	r3, [r0, #0]
    crc_error_ = right.crc_error_;
 80046b8:	794b      	ldrb	r3, [r1, #5]
 80046ba:	7143      	strb	r3, [r0, #5]
    rssi_ = right.rssi_;
 80046bc:	790b      	ldrb	r3, [r1, #4]
 80046be:	7103      	strb	r3, [r0, #4]
    right.packet_data = nullptr;
 80046c0:	2300      	movs	r3, #0
 80046c2:	600b      	str	r3, [r1, #0]
    return *this;
}
 80046c4:	4770      	bx	lr

080046c6 <_ZN11LoRa_packetC1EOS_>:
LoRa_packet::LoRa_packet(LoRa_packet&& right) {
 80046c6:	b510      	push	{r4, lr}
 80046c8:	4604      	mov	r4, r0
 80046ca:	2300      	movs	r3, #0
 80046cc:	7103      	strb	r3, [r0, #4]
 80046ce:	7143      	strb	r3, [r0, #5]
    packet_data = nullptr;
 80046d0:	6003      	str	r3, [r0, #0]
    *this = std::move(right);
 80046d2:	f7ff ffe9 	bl	80046a8 <_ZN11LoRa_packetaSEOS_>
}
 80046d6:	4620      	mov	r0, r4
 80046d8:	bd10      	pop	{r4, pc}
	...

080046dc <_GLOBAL__sub_I_lora_packet_data>:
}
 80046dc:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <_GLOBAL__sub_I_lora_packet_data+0x1c>)
 80046de:	f503 5082 	add.w	r0, r3, #4160	; 0x1040
    std::array<uint8_t, SIZE_LORA_PACKET_MAX_LEN> data;
#else
    uint8_t data[SIZE_LORA_PACKET_MAX_LEN]; // Байты
#endif

    LoRa_packet_data() = default;
 80046e2:	2101      	movs	r1, #1
 80046e4:	2200      	movs	r2, #0
 80046e6:	f803 1c34 	strb.w	r1, [r3, #-52]
 80046ea:	f803 2c33 	strb.w	r2, [r3, #-51]
 80046ee:	3334      	adds	r3, #52	; 0x34
    struct array
 80046f0:	4283      	cmp	r3, r0
 80046f2:	d1f8      	bne.n	80046e6 <_GLOBAL__sub_I_lora_packet_data+0xa>
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	200006f4 	.word	0x200006f4

080046fc <_ZN13LoRa_registerD1Ev>:
    init(spi, nss_port, nss_pin);
}
#endif

LoRa_register::~LoRa_register() {
}
 80046fc:	4770      	bx	lr

080046fe <_ZN13LoRa_register4initEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
    pinMode(_nss, OUTPUT);
    digitalWrite(_nss, HIGH);
}
#else
void LoRa_register::init(SPI_HandleTypeDef* spi, GPIO_TypeDef* nss_port, uint16_t nss_pin) {
    _spi = spi;
 80046fe:	6001      	str	r1, [r0, #0]
    _nss_port = nss_port;
 8004700:	6082      	str	r2, [r0, #8]
	_nss_pin = nss_pin;
 8004702:	8083      	strh	r3, [r0, #4]
}
 8004704:	4770      	bx	lr

08004706 <_ZN13LoRa_register5clearEv>:
#endif



void LoRa_register::clear() {
 8004706:	b410      	push	{r4}
 8004708:	f100 030b 	add.w	r3, r0, #11
 800470c:	f100 027b 	add.w	r2, r0, #123	; 0x7b
 8004710:	4614      	mov	r4, r2
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
        _registers_data[i] = 0;
 8004712:	2100      	movs	r1, #0
 8004714:	f803 1f01 	strb.w	r1, [r3, #1]!
        _registers_state[i] = false;
 8004718:	f802 1f01 	strb.w	r1, [r2, #1]!
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 800471c:	42a3      	cmp	r3, r4
 800471e:	d1f9      	bne.n	8004714 <_ZN13LoRa_register5clearEv+0xe>
    }
    _send = false;
 8004720:	2300      	movs	r3, #0
 8004722:	f880 30ec 	strb.w	r3, [r0, #236]	; 0xec
}
 8004726:	bc10      	pop	{r4}
 8004728:	4770      	bx	lr
	...

0800472c <_ZN13LoRa_registerC1Ev>:
LoRa_register::LoRa_register() {
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	4604      	mov	r4, r0
 8004730:	f100 05f0 	add.w	r5, r0, #240	; 0xf0
 8004734:	4e26      	ldr	r6, [pc, #152]	; (80047d0 <_ZN13LoRa_registerC1Ev+0xa4>)
 8004736:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004738:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800473a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800473e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004742:	f504 7586 	add.w	r5, r4, #268	; 0x10c
 8004746:	4e23      	ldr	r6, [pc, #140]	; (80047d4 <_ZN13LoRa_registerC1Ev+0xa8>)
 8004748:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800474a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800474c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004750:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004754:	f504 7594 	add.w	r5, r4, #296	; 0x128
 8004758:	4e1f      	ldr	r6, [pc, #124]	; (80047d8 <_ZN13LoRa_registerC1Ev+0xac>)
 800475a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800475c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800475e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004762:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004766:	f504 75a2 	add.w	r5, r4, #324	; 0x144
 800476a:	4e1c      	ldr	r6, [pc, #112]	; (80047dc <_ZN13LoRa_registerC1Ev+0xb0>)
 800476c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800476e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004770:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004774:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004778:	f504 75b0 	add.w	r5, r4, #352	; 0x160
 800477c:	4e18      	ldr	r6, [pc, #96]	; (80047e0 <_ZN13LoRa_registerC1Ev+0xb4>)
 800477e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004782:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004786:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800478a:	f504 75be 	add.w	r5, r4, #380	; 0x17c
 800478e:	4e15      	ldr	r6, [pc, #84]	; (80047e4 <_ZN13LoRa_registerC1Ev+0xb8>)
 8004790:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004794:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004798:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800479c:	f504 75cc 	add.w	r5, r4, #408	; 0x198
 80047a0:	4e11      	ldr	r6, [pc, #68]	; (80047e8 <_ZN13LoRa_registerC1Ev+0xbc>)
 80047a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80047a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047a6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80047aa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80047ae:	f504 75da 	add.w	r5, r4, #436	; 0x1b4
 80047b2:	4e0e      	ldr	r6, [pc, #56]	; (80047ec <_ZN13LoRa_registerC1Ev+0xc0>)
 80047b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80047b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047b8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80047bc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    _send = false;
 80047c0:	2300      	movs	r3, #0
 80047c2:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    clear();
 80047c6:	4620      	mov	r0, r4
 80047c8:	f7ff ff9d 	bl	8004706 <_ZN13LoRa_register5clearEv>
}
 80047cc:	4620      	mov	r0, r4
 80047ce:	bd70      	pop	{r4, r5, r6, pc}
 80047d0:	20001ec8 	.word	0x20001ec8
 80047d4:	20001e90 	.word	0x20001e90
 80047d8:	20001e3c 	.word	0x20001e3c
 80047dc:	20001f38 	.word	0x20001f38
 80047e0:	20001f1c 	.word	0x20001f1c
 80047e4:	20001b9c 	.word	0x20001b9c
 80047e8:	20001c28 	.word	0x20001c28
 80047ec:	20001b80 	.word	0x20001b80

080047f0 <_ZN13LoRa_register15field_registersEP13Address_fieldh>:
        result_field_registers_data[result_field_registers_len++] = ((uint8_t)(field.get_registers()[i].address() & 0xFF));
    }
    return result_field_registers_len;
}
uint8_t LoRa_register::field_registers(Address_field* fields, uint8_t amt_fields) {
    result_field_registers_len = 0;
 80047f0:	2300      	movs	r3, #0
 80047f2:	f880 3220 	strb.w	r3, [r0, #544]	; 0x220
    bool reg_add[LORA_DATA_SIZE];
    uint8_t adr;
    if((fields == nullptr) || (amt_fields == 0))
 80047f6:	2900      	cmp	r1, #0
 80047f8:	d044      	beq.n	8004884 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x94>
uint8_t LoRa_register::field_registers(Address_field* fields, uint8_t amt_fields) {
 80047fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047fe:	b09d      	sub	sp, #116	; 0x74
 8004800:	4689      	mov	r9, r1
    if((fields == nullptr) || (amt_fields == 0))
 8004802:	2a00      	cmp	r2, #0
 8004804:	d040      	beq.n	8004888 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x98>
 8004806:	f10d 33ff 	add.w	r3, sp, #4294967295	; 0xffffffff
 800480a:	f10d 046f 	add.w	r4, sp, #111	; 0x6f
        return result_field_registers_len;
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
        reg_add[i] = false;
 800480e:	2100      	movs	r1, #0
 8004810:	f803 1f01 	strb.w	r1, [r3, #1]!
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8004814:	42a3      	cmp	r3, r4
 8004816:	d1fb      	bne.n	8004810 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x20>
 8004818:	4606      	mov	r6, r0
    }
    for(int i = 0; i < amt_fields; ++i) {
 800481a:	b372      	cbz	r2, 800487a <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x8a>
 800481c:	464f      	mov	r7, r9
 800481e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8004822:	eb09 0982 	add.w	r9, r9, r2, lsl #2
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
            if(reg_add[adr] == false) {
                result_field_registers_data[result_field_registers_len++] = adr;
                reg_add[adr] = true;
 8004826:	f04f 0801 	mov.w	r8, #1
 800482a:	e023      	b.n	8004874 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x84>
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 800482c:	3401      	adds	r4, #1
 800482e:	4628      	mov	r0, r5
 8004830:	f7fe ff6c 	bl	800370c <_ZNK13Address_field13get_reg_countEv>
 8004834:	42a0      	cmp	r0, r4
 8004836:	dd1a      	ble.n	800486e <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x7e>
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 8004838:	4628      	mov	r0, r5
 800483a:	f7fe ff65 	bl	8003708 <_ZNK13Address_field13get_registersEv>
 800483e:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8004842:	f7fe fd10 	bl	8003266 <_ZNK8Register7addressEv>
 8004846:	b2c0      	uxtb	r0, r0
            if(reg_add[adr] == false) {
 8004848:	ab1c      	add	r3, sp, #112	; 0x70
 800484a:	4403      	add	r3, r0
 800484c:	f813 3c70 	ldrb.w	r3, [r3, #-112]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1eb      	bne.n	800482c <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x3c>
                result_field_registers_data[result_field_registers_len++] = adr;
 8004854:	f896 3220 	ldrb.w	r3, [r6, #544]	; 0x220
 8004858:	1c5a      	adds	r2, r3, #1
 800485a:	f886 2220 	strb.w	r2, [r6, #544]	; 0x220
 800485e:	4433      	add	r3, r6
 8004860:	f883 01d0 	strb.w	r0, [r3, #464]	; 0x1d0
                reg_add[adr] = true;
 8004864:	ab1c      	add	r3, sp, #112	; 0x70
 8004866:	4418      	add	r0, r3
 8004868:	f800 8c70 	strb.w	r8, [r0, #-112]
 800486c:	e7de      	b.n	800482c <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x3c>
 800486e:	371c      	adds	r7, #28
    for(int i = 0; i < amt_fields; ++i) {
 8004870:	454f      	cmp	r7, r9
 8004872:	d002      	beq.n	800487a <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x8a>
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8004874:	463d      	mov	r5, r7
 8004876:	2400      	movs	r4, #0
 8004878:	e7d9      	b.n	800482e <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x3e>
            }
        }
    }
    return result_field_registers_len;
 800487a:	f896 0220 	ldrb.w	r0, [r6, #544]	; 0x220
}
 800487e:	b01d      	add	sp, #116	; 0x74
 8004880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return result_field_registers_len;
 8004884:	2000      	movs	r0, #0
}
 8004886:	4770      	bx	lr
        return result_field_registers_len;
 8004888:	4610      	mov	r0, r2
 800488a:	e7f8      	b.n	800487e <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x8e>

0800488c <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>:
        }
    }
    return result_check_missing_register_len;
}
uint8_t LoRa_register::check_missing_register(Address_field* fields, uint8_t amt_fields) {
    result_check_missing_register_len = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	f880 3271 	strb.w	r3, [r0, #625]	; 0x271
    if((fields == nullptr) || (amt_fields == 0))
 8004892:	b331      	cbz	r1, 80048e2 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x56>
 8004894:	b90a      	cbnz	r2, 800489a <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0xe>
        return result_check_missing_register_len;
 8004896:	4610      	mov	r0, r2
        if(_registers_state[result_field_registers_data[i]] == false) {
            result_check_missing_register_data[result_check_missing_register_len++] = result_field_registers_data[i];
        }
    }
    return result_check_missing_register_len;
}
 8004898:	4770      	bx	lr
uint8_t LoRa_register::check_missing_register(Address_field* fields, uint8_t amt_fields) {
 800489a:	b510      	push	{r4, lr}
 800489c:	4604      	mov	r4, r0
    field_registers(fields, amt_fields);
 800489e:	f7ff ffa7 	bl	80047f0 <_ZN13LoRa_register15field_registersEP13Address_fieldh>
    for(int i = result_field_registers_len - 1; i >= 0; --i) {
 80048a2:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d418      	bmi.n	80048dc <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x50>
 80048aa:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80048ae:	4423      	add	r3, r4
 80048b0:	f504 71e8 	add.w	r1, r4, #464	; 0x1d0
 80048b4:	e001      	b.n	80048ba <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x2e>
 80048b6:	428b      	cmp	r3, r1
 80048b8:	d010      	beq.n	80048dc <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x50>
        if(_registers_state[result_field_registers_data[i]] == false) {
 80048ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80048be:	4422      	add	r2, r4
 80048c0:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
 80048c4:	2a00      	cmp	r2, #0
 80048c6:	d1f6      	bne.n	80048b6 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x2a>
            result_check_missing_register_data[result_check_missing_register_len++] = result_field_registers_data[i];
 80048c8:	f894 2271 	ldrb.w	r2, [r4, #625]	; 0x271
 80048cc:	1c50      	adds	r0, r2, #1
 80048ce:	f884 0271 	strb.w	r0, [r4, #625]	; 0x271
 80048d2:	7818      	ldrb	r0, [r3, #0]
 80048d4:	4422      	add	r2, r4
 80048d6:	f882 0221 	strb.w	r0, [r2, #545]	; 0x221
 80048da:	e7ec      	b.n	80048b6 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x2a>
    return result_check_missing_register_len;
 80048dc:	f894 0271 	ldrb.w	r0, [r4, #625]	; 0x271
}
 80048e0:	bd10      	pop	{r4, pc}
        return result_check_missing_register_len;
 80048e2:	2000      	movs	r0, #0
 80048e4:	4770      	bx	lr

080048e6 <_ZN13LoRa_register10check_readEP13Address_fieldh>:
            if(field.get_registers()[i].mask() != 0xFF)
                return true;
    }
    return false;
}
bool LoRa_register::check_read(Address_field* fields, uint8_t amt_fields) {
 80048e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ea:	b09d      	sub	sp, #116	; 0x74
 80048ec:	4606      	mov	r6, r0
 80048ee:	f10d 35ff 	add.w	r5, sp, #4294967295	; 0xffffffff
 80048f2:	f10d 046f 	add.w	r4, sp, #111	; 0x6f
 80048f6:	462b      	mov	r3, r5
    bool check_reg_read = false;
    uint8_t reg_bit[LORA_DATA_SIZE];
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
        reg_bit[i] = 0;
 80048f8:	2000      	movs	r0, #0
 80048fa:	f803 0f01 	strb.w	r0, [r3, #1]!
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 80048fe:	42a3      	cmp	r3, r4
 8004900:	d1fb      	bne.n	80048fa <_ZN13LoRa_register10check_readEP13Address_fieldh+0x14>
    }
    // Достаём из полей значения битов регистров
    uint8_t adr;
    for(int i = 0; i < amt_fields; ++i) {
 8004902:	b34a      	cbz	r2, 8004958 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x72>
 8004904:	4689      	mov	r9, r1
 8004906:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800490a:	eb01 0a82 	add.w	sl, r1, r2, lsl #2
 800490e:	e003      	b.n	8004918 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x32>
 8004910:	f109 091c 	add.w	r9, r9, #28
 8004914:	45d1      	cmp	r9, sl
 8004916:	d01f      	beq.n	8004958 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x72>
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8004918:	46c8      	mov	r8, r9
 800491a:	2700      	movs	r7, #0
 800491c:	4640      	mov	r0, r8
 800491e:	f7fe fef5 	bl	800370c <_ZNK13Address_field13get_reg_countEv>
 8004922:	42b8      	cmp	r0, r7
 8004924:	ddf4      	ble.n	8004910 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x2a>
            adr = fields[i].get_registers()[j].address();
 8004926:	4640      	mov	r0, r8
 8004928:	f7fe feee 	bl	8003708 <_ZNK13Address_field13get_registersEv>
 800492c:	ea4f 0bc7 	mov.w	fp, r7, lsl #3
 8004930:	4458      	add	r0, fp
 8004932:	f7fe fc98 	bl	8003266 <_ZNK8Register7addressEv>
 8004936:	4604      	mov	r4, r0
            reg_bit[adr] |= fields[i].get_registers()[j].mask();
 8004938:	4640      	mov	r0, r8
 800493a:	f7fe fee5 	bl	8003708 <_ZNK13Address_field13get_registersEv>
 800493e:	4458      	add	r0, fp
 8004940:	f7fe fc93 	bl	800326a <_ZNK8Register4maskEv>
 8004944:	b2e3      	uxtb	r3, r4
 8004946:	aa1c      	add	r2, sp, #112	; 0x70
 8004948:	4413      	add	r3, r2
 800494a:	f813 2c70 	ldrb.w	r2, [r3, #-112]
 800494e:	4310      	orrs	r0, r2
 8004950:	f803 0c70 	strb.w	r0, [r3, #-112]
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8004954:	3701      	adds	r7, #1
 8004956:	e7e1      	b.n	800491c <_ZN13LoRa_register10check_readEP13Address_fieldh+0x36>
        }
    }

    reg_read_len = 0;
 8004958:	2000      	movs	r0, #0
 800495a:	f886 02c2 	strb.w	r0, [r6, #706]	; 0x2c2
    reg_not_read_len = 0;
 800495e:	f886 0313 	strb.w	r0, [r6, #787]	; 0x313

    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8004962:	4603      	mov	r3, r0
                reg_not_read[reg_not_read_len++] = i;
            }
            else {
                // Если хоть один бит не занят, то без считывания его можно будет затереть => считывать необходимо
                reg_read[reg_read_len++] = i;
                check_reg_read = true;
 8004964:	2401      	movs	r4, #1
 8004966:	e00a      	b.n	800497e <_ZN13LoRa_register10check_readEP13Address_fieldh+0x98>
                reg_not_read[reg_not_read_len++] = i;
 8004968:	f896 2313 	ldrb.w	r2, [r6, #787]	; 0x313
 800496c:	1c51      	adds	r1, r2, #1
 800496e:	f886 1313 	strb.w	r1, [r6, #787]	; 0x313
 8004972:	4432      	add	r2, r6
 8004974:	f882 32c3 	strb.w	r3, [r2, #707]	; 0x2c3
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8004978:	3301      	adds	r3, #1
 800497a:	2b70      	cmp	r3, #112	; 0x70
 800497c:	d014      	beq.n	80049a8 <_ZN13LoRa_register10check_readEP13Address_fieldh+0xc2>
        if (reg_bit[i] != 0x00) {
 800497e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004982:	2a00      	cmp	r2, #0
 8004984:	d0f8      	beq.n	8004978 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x92>
            if ((reg_bit[i] == 0xFF) || (_registers_state[i] == true)) {
 8004986:	2aff      	cmp	r2, #255	; 0xff
 8004988:	d0ee      	beq.n	8004968 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x82>
 800498a:	18f2      	adds	r2, r6, r3
 800498c:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
 8004990:	2a00      	cmp	r2, #0
 8004992:	d1e9      	bne.n	8004968 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x82>
                reg_read[reg_read_len++] = i;
 8004994:	f896 22c2 	ldrb.w	r2, [r6, #706]	; 0x2c2
 8004998:	1c51      	adds	r1, r2, #1
 800499a:	f886 12c2 	strb.w	r1, [r6, #706]	; 0x2c2
 800499e:	4432      	add	r2, r6
 80049a0:	f882 3272 	strb.w	r3, [r2, #626]	; 0x272
                check_reg_read = true;
 80049a4:	4620      	mov	r0, r4
 80049a6:	e7e7      	b.n	8004978 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x92>
            }
        }
    }
    return check_reg_read; // Наличие хоть одного регистра, который нужно будет считать

}
 80049a8:	b01d      	add	sp, #116	; 0x74
 80049aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080049ae <_ZN13LoRa_register16_single_transferEhh>:
    return _single_transfer(address & 0x7f, 0x00);
}
void LoRa_register::_write_register(uint8_t address, uint8_t value) {
    _single_transfer(address | 0x80, value);
}
uint8_t LoRa_register::_single_transfer(uint8_t address, uint8_t value) {
 80049ae:	b510      	push	{r4, lr}
 80049b0:	b086      	sub	sp, #24
 80049b2:	4604      	mov	r4, r0
 80049b4:	f88d 100f 	strb.w	r1, [sp, #15]
 80049b8:	f88d 200e 	strb.w	r2, [sp, #14]
    _spi->endTransaction();
    // Прекращение NSS сигнала
    digitalWrite(_nss, HIGH);
#else
    // Подача NSS сигнала
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 80049bc:	2200      	movs	r2, #0
 80049be:	8881      	ldrh	r1, [r0, #4]
 80049c0:	6880      	ldr	r0, [r0, #8]
 80049c2:	f003 fc93 	bl	80082ec <HAL_GPIO_WritePin>
    // Отправка бита действия и 7 бит адреса
    HAL_SPI_TransmitReceive(_spi, &address, &response, 1, 1000);
 80049c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	2301      	movs	r3, #1
 80049ce:	f10d 0217 	add.w	r2, sp, #23
 80049d2:	f10d 010f 	add.w	r1, sp, #15
 80049d6:	6820      	ldr	r0, [r4, #0]
 80049d8:	f005 fd33 	bl	800a442 <HAL_SPI_TransmitReceive>
 80049dc:	2332      	movs	r3, #50	; 0x32
    for(int i = 0; i < 50; i++) __NOP();
 80049de:	bf00      	nop
 80049e0:	3b01      	subs	r3, #1
 80049e2:	d1fc      	bne.n	80049de <_ZN13LoRa_register16_single_transferEhh+0x30>
    // Отправка/приём байта значения
    HAL_SPI_TransmitReceive(_spi, &value, &response, 1, 1000);
 80049e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	2301      	movs	r3, #1
 80049ec:	f10d 0217 	add.w	r2, sp, #23
 80049f0:	f10d 010e 	add.w	r1, sp, #14
 80049f4:	6820      	ldr	r0, [r4, #0]
 80049f6:	f005 fd24 	bl	800a442 <HAL_SPI_TransmitReceive>
 80049fa:	2314      	movs	r3, #20
    for(int i = 0; i < 20; i++) __NOP();
 80049fc:	bf00      	nop
 80049fe:	3b01      	subs	r3, #1
 8004a00:	d1fc      	bne.n	80049fc <_ZN13LoRa_register16_single_transferEhh+0x4e>
    // Прекращение NSS сигнала
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_SET);
 8004a02:	2201      	movs	r2, #1
 8004a04:	88a1      	ldrh	r1, [r4, #4]
 8004a06:	68a0      	ldr	r0, [r4, #8]
 8004a08:	f003 fc70 	bl	80082ec <HAL_GPIO_WritePin>
#endif
    return response;
}
 8004a0c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8004a10:	b006      	add	sp, #24
 8004a12:	bd10      	pop	{r4, pc}

08004a14 <_ZN13LoRa_register14_read_registerEh>:
uint8_t LoRa_register::_read_register(uint8_t address) {
 8004a14:	b508      	push	{r3, lr}
    return _single_transfer(address & 0x7f, 0x00);
 8004a16:	2200      	movs	r2, #0
 8004a18:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004a1c:	f7ff ffc7 	bl	80049ae <_ZN13LoRa_register16_single_transferEhh>
}
 8004a20:	bd08      	pop	{r3, pc}

08004a22 <_ZN13LoRa_register13register_readEP13Address_fieldhb>:
uint8_t LoRa_register::register_read(Address_field* fields, uint8_t amt_fields, bool update) {
 8004a22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a26:	4606      	mov	r6, r0
 8004a28:	460c      	mov	r4, r1
 8004a2a:	4615      	mov	r5, r2
 8004a2c:	461f      	mov	r7, r3
    if (_send)
 8004a2e:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
 8004a32:	b9fb      	cbnz	r3, 8004a74 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x52>
    if (update) {
 8004a34:	b30f      	cbz	r7, 8004a7a <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x58>
        field_registers(fields, amt_fields);
 8004a36:	462a      	mov	r2, r5
 8004a38:	4621      	mov	r1, r4
 8004a3a:	4630      	mov	r0, r6
 8004a3c:	f7ff fed8 	bl	80047f0 <_ZN13LoRa_register15field_registersEP13Address_fieldh>
        registers = &result_field_registers_data;
 8004a40:	f506 77e8 	add.w	r7, r6, #464	; 0x1d0
        len = result_field_registers_len;
 8004a44:	f896 9220 	ldrb.w	r9, [r6, #544]	; 0x220
    for(int i = 0; i < amt_read; ++i) {
 8004a48:	f1b9 0f00 	cmp.w	r9, #0
 8004a4c:	d00f      	beq.n	8004a6e <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x4c>
 8004a4e:	463d      	mov	r5, r7
 8004a50:	444f      	add	r7, r9
        _registers_state[adr] = true;
 8004a52:	f04f 0801 	mov.w	r8, #1
        adr = (*registers)[i];
 8004a56:	f815 4b01 	ldrb.w	r4, [r5], #1
        _registers_data[adr] = _read_register(adr);
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	f7ff ffd9 	bl	8004a14 <_ZN13LoRa_register14_read_registerEh>
 8004a62:	4434      	add	r4, r6
 8004a64:	7320      	strb	r0, [r4, #12]
        _registers_state[adr] = true;
 8004a66:	f884 807c 	strb.w	r8, [r4, #124]	; 0x7c
    for(int i = 0; i < amt_read; ++i) {
 8004a6a:	42bd      	cmp	r5, r7
 8004a6c:	d1f3      	bne.n	8004a56 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x34>
}
 8004a6e:	4648      	mov	r0, r9
 8004a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        clear();
 8004a74:	f7ff fe47 	bl	8004706 <_ZN13LoRa_register5clearEv>
 8004a78:	e7dc      	b.n	8004a34 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x12>
        check_missing_register(fields, amt_fields);
 8004a7a:	462a      	mov	r2, r5
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	4630      	mov	r0, r6
 8004a80:	f7ff ff04 	bl	800488c <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
        registers = &result_check_missing_register_data;
 8004a84:	f206 2721 	addw	r7, r6, #545	; 0x221
        len = result_check_missing_register_len;
 8004a88:	f896 9271 	ldrb.w	r9, [r6, #625]	; 0x271
 8004a8c:	e7dc      	b.n	8004a48 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x26>

08004a8e <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb>:
uint8_t LoRa_register::get_field_value(Address_field* fields, uint32_t* values, uint8_t amt, bool read) {
 8004a8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a92:	4606      	mov	r6, r0
 8004a94:	460f      	mov	r7, r1
 8004a96:	4615      	mov	r5, r2
 8004a98:	4699      	mov	r9, r3
 8004a9a:	f89d 4020 	ldrb.w	r4, [sp, #32]
    check_missing_register(fields, amt);
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f7ff fef4 	bl	800488c <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
    if((result_check_missing_register_len != 0) || read) {
 8004aa4:	f896 3271 	ldrb.w	r3, [r6, #625]	; 0x271
 8004aa8:	b903      	cbnz	r3, 8004aac <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x1e>
 8004aaa:	b12c      	cbz	r4, 8004ab8 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x2a>
        register_read(fields, amt, read);
 8004aac:	4623      	mov	r3, r4
 8004aae:	464a      	mov	r2, r9
 8004ab0:	4639      	mov	r1, r7
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	f7ff ffb5 	bl	8004a22 <_ZN13LoRa_register13register_readEP13Address_fieldhb>
    for(int i = 0; i < amt; ++i)
 8004ab8:	f1b9 0f00 	cmp.w	r9, #0
 8004abc:	d012      	beq.n	8004ae4 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x56>
 8004abe:	463c      	mov	r4, r7
 8004ac0:	3d04      	subs	r5, #4
 8004ac2:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8004ac6:	eb07 0783 	add.w	r7, r7, r3, lsl #2
        values[i] = fields[i].get_value(_registers_data, LORA_DATA_SIZE);
 8004aca:	360c      	adds	r6, #12
 8004acc:	f04f 0870 	mov.w	r8, #112	; 0x70
 8004ad0:	4642      	mov	r2, r8
 8004ad2:	4631      	mov	r1, r6
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	f7fe fc4a 	bl	800336e <_ZNK13Address_field9get_valueEPKhi>
 8004ada:	f845 0f04 	str.w	r0, [r5, #4]!
 8004ade:	341c      	adds	r4, #28
    for(int i = 0; i < amt; ++i)
 8004ae0:	42bc      	cmp	r4, r7
 8004ae2:	d1f5      	bne.n	8004ad0 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x42>
}
 8004ae4:	4648      	mov	r0, r9
 8004ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004aea <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>:
uint8_t LoRa_register::get_field_value(Address_field field, uint32_t* value, bool read) {
 8004aea:	b084      	sub	sp, #16
 8004aec:	b510      	push	{r4, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	ac05      	add	r4, sp, #20
 8004af2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return get_field_value(&field, value, 1, read);
 8004af6:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	2301      	movs	r3, #1
 8004afe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b00:	4621      	mov	r1, r4
 8004b02:	f7ff ffc4 	bl	8004a8e <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb>
}
 8004b06:	b002      	add	sp, #8
 8004b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b0c:	b004      	add	sp, #16
 8004b0e:	4770      	bx	lr

08004b10 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>:
uint8_t LoRa_register::set_field_value(Address_field* fields, uint32_t* values, uint8_t amt) {
 8004b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b14:	4680      	mov	r8, r0
 8004b16:	460e      	mov	r6, r1
 8004b18:	4617      	mov	r7, r2
 8004b1a:	461c      	mov	r4, r3
    check_missing_register(fields, amt);
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	f7ff feb5 	bl	800488c <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
    if(result_check_missing_register_len > 0) {
 8004b22:	f898 3271 	ldrb.w	r3, [r8, #625]	; 0x271
 8004b26:	b9cb      	cbnz	r3, 8004b5c <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x4c>
    for(int i = 0; i < amt; ++i) {
 8004b28:	46a1      	mov	r9, r4
 8004b2a:	b39c      	cbz	r4, 8004b94 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x84>
 8004b2c:	3f04      	subs	r7, #4
 8004b2e:	2500      	movs	r5, #0
        result = fields[i].set_value(values[i], _registers_data, LORA_DATA_SIZE);
 8004b30:	f108 080c 	add.w	r8, r8, #12
 8004b34:	f04f 0a70 	mov.w	sl, #112	; 0x70
 8004b38:	b2ec      	uxtb	r4, r5
 8004b3a:	4653      	mov	r3, sl
 8004b3c:	4642      	mov	r2, r8
 8004b3e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8004b42:	4630      	mov	r0, r6
 8004b44:	f7fe fc4d 	bl	80033e2 <_ZNK13Address_field9set_valueEmPhi>
        if(result)
 8004b48:	b928      	cbnz	r0, 8004b56 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x46>
 8004b4a:	3401      	adds	r4, #1
 8004b4c:	b2e4      	uxtb	r4, r4
    for(int i = 0; i < amt; ++i) {
 8004b4e:	3501      	adds	r5, #1
 8004b50:	361c      	adds	r6, #28
 8004b52:	454d      	cmp	r5, r9
 8004b54:	d1f0      	bne.n	8004b38 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x28>
}
 8004b56:	4620      	mov	r0, r4
 8004b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        read_fields = check_read(fields, amt);
 8004b5c:	4622      	mov	r2, r4
 8004b5e:	4631      	mov	r1, r6
 8004b60:	4640      	mov	r0, r8
 8004b62:	f7ff fec0 	bl	80048e6 <_ZN13LoRa_register10check_readEP13Address_fieldh>
        for(int i = 0; i < reg_not_read_len; ++i) {
 8004b66:	f898 1313 	ldrb.w	r1, [r8, #787]	; 0x313
 8004b6a:	b151      	cbz	r1, 8004b82 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x72>
 8004b6c:	f208 22c2 	addw	r2, r8, #706	; 0x2c2
 8004b70:	4411      	add	r1, r2
            _registers_state[reg_not_read[i]] = true;
 8004b72:	2501      	movs	r5, #1
 8004b74:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8004b78:	4443      	add	r3, r8
 8004b7a:	f883 507c 	strb.w	r5, [r3, #124]	; 0x7c
        for(int i = 0; i < reg_not_read_len; ++i) {
 8004b7e:	428a      	cmp	r2, r1
 8004b80:	d1f8      	bne.n	8004b74 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x64>
        if(read_fields) {
 8004b82:	2800      	cmp	r0, #0
 8004b84:	d0d0      	beq.n	8004b28 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x18>
            register_read(fields, amt, false);
 8004b86:	2300      	movs	r3, #0
 8004b88:	4622      	mov	r2, r4
 8004b8a:	4631      	mov	r1, r6
 8004b8c:	4640      	mov	r0, r8
 8004b8e:	f7ff ff48 	bl	8004a22 <_ZN13LoRa_register13register_readEP13Address_fieldhb>
 8004b92:	e7c9      	b.n	8004b28 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x18>
    for(int i = 0; i < amt; ++i) {
 8004b94:	2400      	movs	r4, #0
 8004b96:	e7de      	b.n	8004b56 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x46>

08004b98 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>:
uint8_t LoRa_register::set_field_value(Address_field field, uint32_t value) {
 8004b98:	b084      	sub	sp, #16
 8004b9a:	b510      	push	{r4, lr}
 8004b9c:	ac03      	add	r4, sp, #12
 8004b9e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return set_field_value(&field, &value, 1);
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	aa0a      	add	r2, sp, #40	; 0x28
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	f7ff ffb2 	bl	8004b10 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
}
 8004bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bb0:	b004      	add	sp, #16
 8004bb2:	4770      	bx	lr

08004bb4 <_ZN13LoRa_register15_write_registerEhh>:
void LoRa_register::_write_register(uint8_t address, uint8_t value) {
 8004bb4:	b508      	push	{r3, lr}
    _single_transfer(address | 0x80, value);
 8004bb6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004bba:	f7ff fef8 	bl	80049ae <_ZN13LoRa_register16_single_transferEhh>
}
 8004bbe:	bd08      	pop	{r3, pc}

08004bc0 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>:
uint8_t LoRa_register::register_write(Address_field* fields, uint8_t amt_fields, bool fl_clear, bool error_clear) {
 8004bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bc4:	4605      	mov	r5, r0
 8004bc6:	460e      	mov	r6, r1
 8004bc8:	4690      	mov	r8, r2
 8004bca:	461f      	mov	r7, r3
 8004bcc:	f89d 4018 	ldrb.w	r4, [sp, #24]
    if(check_missing_register(fields, amt_fields) != 0) {
 8004bd0:	f7ff fe5c 	bl	800488c <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
 8004bd4:	b140      	cbz	r0, 8004be8 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x28>
        if(error_clear)
 8004bd6:	b914      	cbnz	r4, 8004bde <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x1e>
        return 0;
 8004bd8:	2000      	movs	r0, #0
}
 8004bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            clear();
 8004bde:	4628      	mov	r0, r5
 8004be0:	f7ff fd91 	bl	8004706 <_ZN13LoRa_register5clearEv>
        return 0;
 8004be4:	2000      	movs	r0, #0
 8004be6:	e7f8      	b.n	8004bda <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x1a>
    field_registers(fields, amt_fields);
 8004be8:	4642      	mov	r2, r8
 8004bea:	4631      	mov	r1, r6
 8004bec:	4628      	mov	r0, r5
 8004bee:	f7ff fdff 	bl	80047f0 <_ZN13LoRa_register15field_registersEP13Address_fieldh>
    for(int i = 0; i < result_field_registers_len; ++i) {
 8004bf2:	f895 3220 	ldrb.w	r3, [r5, #544]	; 0x220
 8004bf6:	b183      	cbz	r3, 8004c1a <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x5a>
 8004bf8:	f205 14cf 	addw	r4, r5, #463	; 0x1cf
 8004bfc:	1c66      	adds	r6, r4, #1
        _write_register(result_field_registers_data[i], _registers_data[result_field_registers_data[i]]);
 8004bfe:	7861      	ldrb	r1, [r4, #1]
 8004c00:	186b      	adds	r3, r5, r1
 8004c02:	7b1a      	ldrb	r2, [r3, #12]
 8004c04:	4628      	mov	r0, r5
 8004c06:	f7ff ffd5 	bl	8004bb4 <_ZN13LoRa_register15_write_registerEhh>
 8004c0a:	f5a4 74e7 	sub.w	r4, r4, #462	; 0x1ce
 8004c0e:	1b63      	subs	r3, r4, r5
 8004c10:	4634      	mov	r4, r6
    for(int i = 0; i < result_field_registers_len; ++i) {
 8004c12:	f895 2220 	ldrb.w	r2, [r5, #544]	; 0x220
 8004c16:	429a      	cmp	r2, r3
 8004c18:	dcf0      	bgt.n	8004bfc <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x3c>
    _send = true;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
    if (fl_clear) {
 8004c20:	b917      	cbnz	r7, 8004c28 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x68>
    return result_field_registers_len;
 8004c22:	f895 0220 	ldrb.w	r0, [r5, #544]	; 0x220
 8004c26:	e7d8      	b.n	8004bda <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x1a>
        clear();
 8004c28:	4628      	mov	r0, r5
 8004c2a:	f7ff fd6c 	bl	8004706 <_ZN13LoRa_register5clearEv>
 8004c2e:	e7f8      	b.n	8004c22 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x62>

08004c30 <_ZN13LoRa_register14register_writeE13Address_fieldbb>:
uint8_t LoRa_register::register_write(Address_field field, bool fl_clear, bool error_clear) {
 8004c30:	b084      	sub	sp, #16
 8004c32:	b510      	push	{r4, lr}
 8004c34:	b082      	sub	sp, #8
 8004c36:	ac05      	add	r4, sp, #20
 8004c38:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return register_write(&field, 1, fl_clear, error_clear);
 8004c3c:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8004c46:	2201      	movs	r2, #1
 8004c48:	4621      	mov	r1, r4
 8004c4a:	f7ff ffb9 	bl	8004bc0 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
}
 8004c4e:	b002      	add	sp, #8
 8004c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c54:	b004      	add	sp, #16
 8004c56:	4770      	bx	lr

08004c58 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb>:
uint8_t LoRa_register::clear_flags(Address_field* flags, uint8_t amt_flags, bool back_value) {
 8004c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c5c:	b085      	sub	sp, #20
    if(_registers_state[REG_IRQ_FLAGS] == false) {
 8004c5e:	4c2f      	ldr	r4, [pc, #188]	; (8004d1c <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0xc4>)
 8004c60:	f894 b000 	ldrb.w	fp, [r4]
 8004c64:	eb00 040b 	add.w	r4, r0, fp
 8004c68:	f894 407c 	ldrb.w	r4, [r4, #124]	; 0x7c
 8004c6c:	b18c      	cbz	r4, 8004c92 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x3a>
 8004c6e:	9303      	str	r3, [sp, #12]
 8004c70:	9201      	str	r2, [sp, #4]
 8004c72:	9102      	str	r1, [sp, #8]
 8004c74:	4681      	mov	r9, r0
    for(int i = 0; i < amt_flags; ++i) {
 8004c76:	4692      	mov	sl, r2
 8004c78:	2a00      	cmp	r2, #0
 8004c7a:	d049      	beq.n	8004d10 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0xb8>
 8004c7c:	460f      	mov	r7, r1
 8004c7e:	f04f 0800 	mov.w	r8, #0
 8004c82:	f500 76e8 	add.w	r6, r0, #464	; 0x1d0
 8004c86:	e00b      	b.n	8004ca0 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x48>
        _registers_data[REG_IRQ_FLAGS] = data;
 8004c88:	44d9      	add	r9, fp
 8004c8a:	f889 400c 	strb.w	r4, [r9, #12]
    return amt_flags;
 8004c8e:	4628      	mov	r0, r5
 8004c90:	e013      	b.n	8004cba <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x62>
        return 0; // флаги не считаны
 8004c92:	2000      	movs	r0, #0
 8004c94:	e011      	b.n	8004cba <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x62>
    for(int i = 0; i < amt_flags; ++i) {
 8004c96:	f108 0801 	add.w	r8, r8, #1
 8004c9a:	371c      	adds	r7, #28
 8004c9c:	45d0      	cmp	r8, sl
 8004c9e:	d00f      	beq.n	8004cc0 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x68>
            if(flags[i] == _flags[j]) {
 8004ca0:	463d      	mov	r5, r7
 8004ca2:	f109 04f0 	add.w	r4, r9, #240	; 0xf0
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	4628      	mov	r0, r5
 8004caa:	f7fe fd31 	bl	8003710 <_ZeqRK13Address_fieldS1_>
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	d1f1      	bne.n	8004c96 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x3e>
 8004cb2:	341c      	adds	r4, #28
        for(int j = 0; j < AMT_FLAGS; ++j) {
 8004cb4:	42b4      	cmp	r4, r6
 8004cb6:	d1f6      	bne.n	8004ca6 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x4e>
            return 0; // хоть одно поле не флаг
 8004cb8:	2000      	movs	r0, #0
}
 8004cba:	b005      	add	sp, #20
 8004cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t data = _registers_data[REG_IRQ_FLAGS];
 8004cc0:	eb09 030b 	add.w	r3, r9, fp
 8004cc4:	7b1c      	ldrb	r4, [r3, #12]
    _registers_data[REG_IRQ_FLAGS] = 0;
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	731a      	strb	r2, [r3, #12]
 8004cca:	4b15      	ldr	r3, [pc, #84]	; (8004d20 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0xc8>)
 8004ccc:	9a01      	ldr	r2, [sp, #4]
 8004cce:	eb03 0182 	add.w	r1, r3, r2, lsl #2
        _values_clear_flags_[i] = 1;
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f843 2f04 	str.w	r2, [r3, #4]!
    for(int i = 0; i < amt_flags; ++i)
 8004cd8:	4299      	cmp	r1, r3
 8004cda:	d1fb      	bne.n	8004cd4 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x7c>
    set_field_value(flags, _values_clear_flags_, amt_flags);
 8004cdc:	9d01      	ldr	r5, [sp, #4]
 8004cde:	462b      	mov	r3, r5
 8004ce0:	4a10      	ldr	r2, [pc, #64]	; (8004d24 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0xcc>)
 8004ce2:	9902      	ldr	r1, [sp, #8]
 8004ce4:	4648      	mov	r0, r9
 8004ce6:	f7ff ff13 	bl	8004b10 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
    _write_register(REG_IRQ_FLAGS, _registers_data[REG_IRQ_FLAGS]);
 8004cea:	eb09 030b 	add.w	r3, r9, fp
 8004cee:	7b1a      	ldrb	r2, [r3, #12]
 8004cf0:	4659      	mov	r1, fp
 8004cf2:	4648      	mov	r0, r9
 8004cf4:	f7ff ff5e 	bl	8004bb4 <_ZN13LoRa_register15_write_registerEhh>
    if(back_value) {
 8004cf8:	9b03      	ldr	r3, [sp, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1c4      	bne.n	8004c88 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x30>
        _registers_data[REG_IRQ_FLAGS] = data | ~_registers_data[REG_IRQ_FLAGS];
 8004cfe:	44d9      	add	r9, fp
 8004d00:	f899 300c 	ldrb.w	r3, [r9, #12]
 8004d04:	ea64 0403 	orn	r4, r4, r3
 8004d08:	f889 400c 	strb.w	r4, [r9, #12]
    return amt_flags;
 8004d0c:	9801      	ldr	r0, [sp, #4]
 8004d0e:	e7d4      	b.n	8004cba <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x62>
    uint8_t data = _registers_data[REG_IRQ_FLAGS];
 8004d10:	eb00 030b 	add.w	r3, r0, fp
 8004d14:	7b1c      	ldrb	r4, [r3, #12]
    _registers_data[REG_IRQ_FLAGS] = 0;
 8004d16:	2200      	movs	r2, #0
 8004d18:	731a      	strb	r2, [r3, #12]
 8004d1a:	e7df      	b.n	8004cdc <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x84>
 8004d1c:	0800bdc4 	.word	0x0800bdc4
 8004d20:	200016fc 	.word	0x200016fc
 8004d24:	20001700 	.word	0x20001700

08004d28 <_ZN13LoRa_register11clear_flagsE13Address_fieldb>:
uint8_t LoRa_register::clear_flags(Address_field flag, bool back_value) {
 8004d28:	b084      	sub	sp, #16
 8004d2a:	b510      	push	{r4, lr}
 8004d2c:	ac03      	add	r4, sp, #12
 8004d2e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return clear_flags(&flag, 1, back_value);
 8004d32:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8004d36:	2201      	movs	r2, #1
 8004d38:	4621      	mov	r1, r4
 8004d3a:	f7ff ff8d 	bl	8004c58 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb>
}
 8004d3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d42:	b004      	add	sp, #16
 8004d44:	4770      	bx	lr
	...

08004d48 <_GLOBAL__sub_I_REG_FIFO>:
    // Dio2Mapping, Dio3Mapping, Dio4Mapping, Dio5Mapping,
    Version,
    // FastHopOn, TcxoInputOn,
    PaDac
    // FormerTemp, BitRateFrac, AgcReferenceLevel, AgcStep1, AgcStep2, AgcStep3, AgcStep4, AgcStep5, PllBandwidth
};
 8004d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d4c:	b087      	sub	sp, #28
reg_fifo[1] = {Register(REG_FIFO, 8, 0)},
 8004d4e:	4dc8      	ldr	r5, [pc, #800]	; (8005070 <_GLOBAL__sub_I_REG_FIFO+0x328>)
 8004d50:	2300      	movs	r3, #0
 8004d52:	2208      	movs	r2, #8
 8004d54:	4619      	mov	r1, r3
 8004d56:	4628      	mov	r0, r5
 8004d58:	f7fe fa62 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_long_range_mode[1] = {Register(REG_OP_MODE, 1, 7)},
 8004d5c:	f8df a3d0 	ldr.w	sl, [pc, #976]	; 8005130 <_GLOBAL__sub_I_REG_FIFO+0x3e8>
 8004d60:	2307      	movs	r3, #7
 8004d62:	2201      	movs	r2, #1
 8004d64:	4611      	mov	r1, r2
 8004d66:	4650      	mov	r0, sl
 8004d68:	f7fe fa5a 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_low_frequency_mode_on[1] = {Register(REG_OP_MODE, 1, 3)},
 8004d6c:	f8df 93c4 	ldr.w	r9, [pc, #964]	; 8005134 <_GLOBAL__sub_I_REG_FIFO+0x3ec>
 8004d70:	2303      	movs	r3, #3
 8004d72:	2201      	movs	r2, #1
 8004d74:	4611      	mov	r1, r2
 8004d76:	4648      	mov	r0, r9
 8004d78:	f7fe fa52 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_mode[1] = {Register(REG_OP_MODE, 3, 0)},
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	2203      	movs	r2, #3
 8004d80:	2101      	movs	r1, #1
 8004d82:	48bc      	ldr	r0, [pc, #752]	; (8005074 <_GLOBAL__sub_I_REG_FIFO+0x32c>)
 8004d84:	f7fe fa4c 	bl	8003220 <_ZN8RegisterC1Ethh>
              Register(REG_FRF_MSB, 8, 0)},
 8004d88:	f8df 83ac 	ldr.w	r8, [pc, #940]	; 8005138 <_GLOBAL__sub_I_REG_FIFO+0x3f0>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	2208      	movs	r2, #8
 8004d90:	4611      	mov	r1, r2
 8004d92:	4640      	mov	r0, r8
 8004d94:	f7fe fa44 	bl	8003220 <_ZN8RegisterC1Ethh>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	2208      	movs	r2, #8
 8004d9c:	2107      	movs	r1, #7
 8004d9e:	eb08 0002 	add.w	r0, r8, r2
 8004da2:	f7fe fa3d 	bl	8003220 <_ZN8RegisterC1Ethh>
 8004da6:	2300      	movs	r3, #0
 8004da8:	2208      	movs	r2, #8
 8004daa:	2106      	movs	r1, #6
 8004dac:	f108 0010 	add.w	r0, r8, #16
 8004db0:	f7fe fa36 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_pa_select[1] = {Register(REG_PA_CONFIG, 1, 7)},
 8004db4:	2307      	movs	r3, #7
 8004db6:	2201      	movs	r2, #1
 8004db8:	2109      	movs	r1, #9
 8004dba:	48af      	ldr	r0, [pc, #700]	; (8005078 <_GLOBAL__sub_I_REG_FIFO+0x330>)
 8004dbc:	f7fe fa30 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_max_power[1] = {Register(REG_PA_CONFIG, 3, 4)},
 8004dc0:	2304      	movs	r3, #4
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	2109      	movs	r1, #9
 8004dc6:	48ad      	ldr	r0, [pc, #692]	; (800507c <_GLOBAL__sub_I_REG_FIFO+0x334>)
 8004dc8:	f7fe fa2a 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_output_power[1] = {Register(REG_PA_CONFIG, 4, 0)},
 8004dcc:	2300      	movs	r3, #0
 8004dce:	2204      	movs	r2, #4
 8004dd0:	2109      	movs	r1, #9
 8004dd2:	48ab      	ldr	r0, [pc, #684]	; (8005080 <_GLOBAL__sub_I_REG_FIFO+0x338>)
 8004dd4:	f7fe fa24 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_lna_boost_hf[1] = {Register(REG_LNA, 2, 0)},
 8004dd8:	2300      	movs	r3, #0
 8004dda:	2202      	movs	r2, #2
 8004ddc:	210c      	movs	r1, #12
 8004dde:	48a9      	ldr	r0, [pc, #676]	; (8005084 <_GLOBAL__sub_I_REG_FIFO+0x33c>)
 8004de0:	f7fe fa1e 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_fifo_addr_ptr[1] = {Register(REG_FIFO_ADDR_PTR, 8, 0)},
 8004de4:	2300      	movs	r3, #0
 8004de6:	2208      	movs	r2, #8
 8004de8:	210d      	movs	r1, #13
 8004dea:	48a7      	ldr	r0, [pc, #668]	; (8005088 <_GLOBAL__sub_I_REG_FIFO+0x340>)
 8004dec:	f7fe fa18 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_fifo_tx_base_addr[1] = {Register(REG_FIFO_TX_BASE_ADDR, 8, 0)},
 8004df0:	2300      	movs	r3, #0
 8004df2:	2208      	movs	r2, #8
 8004df4:	210e      	movs	r1, #14
 8004df6:	48a5      	ldr	r0, [pc, #660]	; (800508c <_GLOBAL__sub_I_REG_FIFO+0x344>)
 8004df8:	f7fe fa12 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_fifo_rx_base_addr[1] = {Register(REG_FIFO_RX_BASE_ADDR, 8, 0)},
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	2208      	movs	r2, #8
 8004e00:	210f      	movs	r1, #15
 8004e02:	48a3      	ldr	r0, [pc, #652]	; (8005090 <_GLOBAL__sub_I_REG_FIFO+0x348>)
 8004e04:	f7fe fa0c 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_fifo_rx_current_addr[1] = {Register(REG_FIFO_RX_CURRENT_ADDR, 8, 0)},
 8004e08:	2300      	movs	r3, #0
 8004e0a:	2208      	movs	r2, #8
 8004e0c:	2110      	movs	r1, #16
 8004e0e:	48a1      	ldr	r0, [pc, #644]	; (8005094 <_GLOBAL__sub_I_REG_FIFO+0x34c>)
 8004e10:	f7fe fa06 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_rx_timeout[1] = {Register(REG_IRQ_FLAGS, 1, 7)},
 8004e14:	2307      	movs	r3, #7
 8004e16:	2201      	movs	r2, #1
 8004e18:	2112      	movs	r1, #18
 8004e1a:	489f      	ldr	r0, [pc, #636]	; (8005098 <_GLOBAL__sub_I_REG_FIFO+0x350>)
 8004e1c:	f7fe fa00 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_rx_done[1] = {Register(REG_IRQ_FLAGS, 1, 6)},
 8004e20:	2306      	movs	r3, #6
 8004e22:	2201      	movs	r2, #1
 8004e24:	2112      	movs	r1, #18
 8004e26:	489d      	ldr	r0, [pc, #628]	; (800509c <_GLOBAL__sub_I_REG_FIFO+0x354>)
 8004e28:	f7fe f9fa 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_payload_crc_error[1] = {Register(REG_IRQ_FLAGS, 1, 5)},
 8004e2c:	2305      	movs	r3, #5
 8004e2e:	2201      	movs	r2, #1
 8004e30:	2112      	movs	r1, #18
 8004e32:	489b      	ldr	r0, [pc, #620]	; (80050a0 <_GLOBAL__sub_I_REG_FIFO+0x358>)
 8004e34:	f7fe f9f4 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_valid_header[1] = {Register(REG_IRQ_FLAGS, 1, 4)},
 8004e38:	2304      	movs	r3, #4
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	2112      	movs	r1, #18
 8004e3e:	4899      	ldr	r0, [pc, #612]	; (80050a4 <_GLOBAL__sub_I_REG_FIFO+0x35c>)
 8004e40:	f7fe f9ee 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_tx_done[1] = {Register(REG_IRQ_FLAGS, 1, 3)},
 8004e44:	2303      	movs	r3, #3
 8004e46:	2201      	movs	r2, #1
 8004e48:	2112      	movs	r1, #18
 8004e4a:	4897      	ldr	r0, [pc, #604]	; (80050a8 <_GLOBAL__sub_I_REG_FIFO+0x360>)
 8004e4c:	f7fe f9e8 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_cad_done[1] = {Register(REG_IRQ_FLAGS, 1, 2)},
 8004e50:	2302      	movs	r3, #2
 8004e52:	2201      	movs	r2, #1
 8004e54:	2112      	movs	r1, #18
 8004e56:	4895      	ldr	r0, [pc, #596]	; (80050ac <_GLOBAL__sub_I_REG_FIFO+0x364>)
 8004e58:	f7fe f9e2 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_fhss_change_channel[1] = {Register(REG_IRQ_FLAGS, 1, 1)},
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	461a      	mov	r2, r3
 8004e60:	2112      	movs	r1, #18
 8004e62:	4893      	ldr	r0, [pc, #588]	; (80050b0 <_GLOBAL__sub_I_REG_FIFO+0x368>)
 8004e64:	f7fe f9dc 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_cad_detected[1] = {Register(REG_IRQ_FLAGS, 1, 0)},
 8004e68:	2300      	movs	r3, #0
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	2112      	movs	r1, #18
 8004e6e:	4891      	ldr	r0, [pc, #580]	; (80050b4 <_GLOBAL__sub_I_REG_FIFO+0x36c>)
 8004e70:	f7fe f9d6 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_fifo_rx_bytes_nb[1] = {Register(REG_RX_NB_BYTES, 8, 0)},
 8004e74:	2300      	movs	r3, #0
 8004e76:	2208      	movs	r2, #8
 8004e78:	2113      	movs	r1, #19
 8004e7a:	488f      	ldr	r0, [pc, #572]	; (80050b8 <_GLOBAL__sub_I_REG_FIFO+0x370>)
 8004e7c:	f7fe f9d0 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_packet_snr[1] = {Register(REG_PKT_SNR_VALUE, 8, 0)},
 8004e80:	2300      	movs	r3, #0
 8004e82:	2208      	movs	r2, #8
 8004e84:	2119      	movs	r1, #25
 8004e86:	488d      	ldr	r0, [pc, #564]	; (80050bc <_GLOBAL__sub_I_REG_FIFO+0x374>)
 8004e88:	f7fe f9ca 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_packet_rssi[1] = {Register(REG_PKT_RSSI_VALUE, 8, 0)},
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	2208      	movs	r2, #8
 8004e90:	211a      	movs	r1, #26
 8004e92:	488b      	ldr	r0, [pc, #556]	; (80050c0 <_GLOBAL__sub_I_REG_FIFO+0x378>)
 8004e94:	f7fe f9c4 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_bw[1] = {Register(REG_MODEM_CONFIG_1, 4, 4)},
 8004e98:	2304      	movs	r3, #4
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	211d      	movs	r1, #29
 8004e9e:	4889      	ldr	r0, [pc, #548]	; (80050c4 <_GLOBAL__sub_I_REG_FIFO+0x37c>)
 8004ea0:	f7fe f9be 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_spreading_factor[1] = {Register(REG_MODEM_CONFIG_2, 4, 4)},
 8004ea4:	2304      	movs	r3, #4
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	211e      	movs	r1, #30
 8004eaa:	4887      	ldr	r0, [pc, #540]	; (80050c8 <_GLOBAL__sub_I_REG_FIFO+0x380>)
 8004eac:	f7fe f9b8 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_rx_payload_crc_on[1] = {Register(REG_MODEM_CONFIG_2, 1, 2)},
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	211e      	movs	r1, #30
 8004eb6:	4885      	ldr	r0, [pc, #532]	; (80050cc <_GLOBAL__sub_I_REG_FIFO+0x384>)
 8004eb8:	f7fe f9b2 	bl	8003220 <_ZN8RegisterC1Ethh>
                          Register(REG_PREAMBLE_MSB, 8, 0)},
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	2208      	movs	r2, #8
 8004ec0:	2121      	movs	r1, #33	; 0x21
 8004ec2:	4883      	ldr	r0, [pc, #524]	; (80050d0 <_GLOBAL__sub_I_REG_FIFO+0x388>)
 8004ec4:	f7fe f9ac 	bl	8003220 <_ZN8RegisterC1Ethh>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	2208      	movs	r2, #8
 8004ecc:	2120      	movs	r1, #32
 8004ece:	4880      	ldr	r0, [pc, #512]	; (80050d0 <_GLOBAL__sub_I_REG_FIFO+0x388>)
 8004ed0:	4410      	add	r0, r2
 8004ed2:	f7fe f9a5 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_payload_length[1] = {Register(REG_PAYLOAD_LENGTH, 8, 0)},
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	2208      	movs	r2, #8
 8004eda:	2122      	movs	r1, #34	; 0x22
 8004edc:	487d      	ldr	r0, [pc, #500]	; (80050d4 <_GLOBAL__sub_I_REG_FIFO+0x38c>)
 8004ede:	f7fe f99f 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_low_data_rate_optimize[1] = {Register(REG_MODEM_CONFIG_3, 1, 3)},
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	2126      	movs	r1, #38	; 0x26
 8004ee8:	487b      	ldr	r0, [pc, #492]	; (80050d8 <_GLOBAL__sub_I_REG_FIFO+0x390>)
 8004eea:	f7fe f999 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_agc_auto_on[1] = {Register(REG_MODEM_CONFIG_3, 1, 2)},
 8004eee:	2302      	movs	r3, #2
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	2126      	movs	r1, #38	; 0x26
 8004ef4:	4879      	ldr	r0, [pc, #484]	; (80050dc <_GLOBAL__sub_I_REG_FIFO+0x394>)
 8004ef6:	f7fe f993 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_detection_optimize[1] = {Register(REG_DETECTION_OPTIMIZE, 3, 0)},
 8004efa:	2300      	movs	r3, #0
 8004efc:	2203      	movs	r2, #3
 8004efe:	2131      	movs	r1, #49	; 0x31
 8004f00:	4877      	ldr	r0, [pc, #476]	; (80050e0 <_GLOBAL__sub_I_REG_FIFO+0x398>)
 8004f02:	f7fe f98d 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_detection_threshold[1] = {Register(REG_DETECTION_THRESHOLD, 8, 0)},
 8004f06:	2300      	movs	r3, #0
 8004f08:	2208      	movs	r2, #8
 8004f0a:	2137      	movs	r1, #55	; 0x37
 8004f0c:	4875      	ldr	r0, [pc, #468]	; (80050e4 <_GLOBAL__sub_I_REG_FIFO+0x39c>)
 8004f0e:	f7fe f987 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_sync_word[1] = {Register(REG_SYNC_WORD, 8, 0)},  // , reserved_value=[0x34])
 8004f12:	2300      	movs	r3, #0
 8004f14:	2208      	movs	r2, #8
 8004f16:	2139      	movs	r1, #57	; 0x39
 8004f18:	4873      	ldr	r0, [pc, #460]	; (80050e8 <_GLOBAL__sub_I_REG_FIFO+0x3a0>)
 8004f1a:	f7fe f981 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_dio0_mapping[1] = {Register(REG_DIO_MAPPING_1, 2, 6)},
 8004f1e:	2306      	movs	r3, #6
 8004f20:	2202      	movs	r2, #2
 8004f22:	2140      	movs	r1, #64	; 0x40
 8004f24:	4871      	ldr	r0, [pc, #452]	; (80050ec <_GLOBAL__sub_I_REG_FIFO+0x3a4>)
 8004f26:	f7fe f97b 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_dio1_mapping[1] = {Register(REG_DIO_MAPPING_1, 2, 4)},
 8004f2a:	2304      	movs	r3, #4
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	2140      	movs	r1, #64	; 0x40
 8004f30:	486f      	ldr	r0, [pc, #444]	; (80050f0 <_GLOBAL__sub_I_REG_FIFO+0x3a8>)
 8004f32:	f7fe f975 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_map_preamble_detect[1] = {Register(REG_DIO_MAPPING_2, 1, 0)},
 8004f36:	2300      	movs	r3, #0
 8004f38:	2201      	movs	r2, #1
 8004f3a:	2141      	movs	r1, #65	; 0x41
 8004f3c:	486d      	ldr	r0, [pc, #436]	; (80050f4 <_GLOBAL__sub_I_REG_FIFO+0x3ac>)
 8004f3e:	f7fe f96f 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_version[1] = {Register(REG_VERSION, 8, 0)},
 8004f42:	2300      	movs	r3, #0
 8004f44:	2208      	movs	r2, #8
 8004f46:	2142      	movs	r1, #66	; 0x42
 8004f48:	486b      	ldr	r0, [pc, #428]	; (80050f8 <_GLOBAL__sub_I_REG_FIFO+0x3b0>)
 8004f4a:	f7fe f969 	bl	8003220 <_ZN8RegisterC1Ethh>
reg_pa_dac[1] = {Register(REG_PA_DAC, 3, 0)}//,
 8004f4e:	2300      	movs	r3, #0
 8004f50:	2203      	movs	r2, #3
 8004f52:	214d      	movs	r1, #77	; 0x4d
 8004f54:	4869      	ldr	r0, [pc, #420]	; (80050fc <_GLOBAL__sub_I_REG_FIFO+0x3b4>)
 8004f56:	f7fe f963 	bl	8003220 <_ZN8RegisterC1Ethh>
Fifo(reg_fifo, 1, false, 'w', 0x00, 0xFF),
 8004f5a:	2400      	movs	r4, #0
 8004f5c:	9404      	str	r4, [sp, #16]
 8004f5e:	9403      	str	r4, [sp, #12]
 8004f60:	27ff      	movs	r7, #255	; 0xff
 8004f62:	9702      	str	r7, [sp, #8]
 8004f64:	9401      	str	r4, [sp, #4]
 8004f66:	2677      	movs	r6, #119	; 0x77
 8004f68:	9600      	str	r6, [sp, #0]
 8004f6a:	4623      	mov	r3, r4
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	4629      	mov	r1, r5
 8004f70:	4863      	ldr	r0, [pc, #396]	; (8005100 <_GLOBAL__sub_I_REG_FIFO+0x3b8>)
 8004f72:	f7fe f9e9 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
LongRangeMode(reg_long_range_mode, 1, false, 'w', 0x00, 0x01),
 8004f76:	9404      	str	r4, [sp, #16]
 8004f78:	9403      	str	r4, [sp, #12]
 8004f7a:	2501      	movs	r5, #1
 8004f7c:	9502      	str	r5, [sp, #8]
 8004f7e:	9401      	str	r4, [sp, #4]
 8004f80:	9600      	str	r6, [sp, #0]
 8004f82:	4623      	mov	r3, r4
 8004f84:	462a      	mov	r2, r5
 8004f86:	4651      	mov	r1, sl
 8004f88:	485e      	ldr	r0, [pc, #376]	; (8005104 <_GLOBAL__sub_I_REG_FIFO+0x3bc>)
 8004f8a:	f7fe f9dd 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
LowFrequencyModeOn(reg_low_frequency_mode_on, 1, false, 'w', 0x00, 0x01),
 8004f8e:	9404      	str	r4, [sp, #16]
 8004f90:	9403      	str	r4, [sp, #12]
 8004f92:	9502      	str	r5, [sp, #8]
 8004f94:	9401      	str	r4, [sp, #4]
 8004f96:	9600      	str	r6, [sp, #0]
 8004f98:	4623      	mov	r3, r4
 8004f9a:	462a      	mov	r2, r5
 8004f9c:	4649      	mov	r1, r9
 8004f9e:	485a      	ldr	r0, [pc, #360]	; (8005108 <_GLOBAL__sub_I_REG_FIFO+0x3c0>)
 8004fa0:	f7fe f9d2 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Mode(reg_mode, 1, false, 'w', 0x00, 0x07),
 8004fa4:	9404      	str	r4, [sp, #16]
 8004fa6:	9403      	str	r4, [sp, #12]
 8004fa8:	f04f 0b07 	mov.w	fp, #7
 8004fac:	f8cd b008 	str.w	fp, [sp, #8]
 8004fb0:	9401      	str	r4, [sp, #4]
 8004fb2:	9600      	str	r6, [sp, #0]
 8004fb4:	4623      	mov	r3, r4
 8004fb6:	462a      	mov	r2, r5
 8004fb8:	492e      	ldr	r1, [pc, #184]	; (8005074 <_GLOBAL__sub_I_REG_FIFO+0x32c>)
 8004fba:	4854      	ldr	r0, [pc, #336]	; (800510c <_GLOBAL__sub_I_REG_FIFO+0x3c4>)
 8004fbc:	f7fe f9c4 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Frf(reg_frf, 3, false, 'w', 0x000000, 0xFFFFFF),
 8004fc0:	9404      	str	r4, [sp, #16]
 8004fc2:	9403      	str	r4, [sp, #12]
 8004fc4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8004fc8:	9302      	str	r3, [sp, #8]
 8004fca:	9401      	str	r4, [sp, #4]
 8004fcc:	9600      	str	r6, [sp, #0]
 8004fce:	4623      	mov	r3, r4
 8004fd0:	2203      	movs	r2, #3
 8004fd2:	4641      	mov	r1, r8
 8004fd4:	484e      	ldr	r0, [pc, #312]	; (8005110 <_GLOBAL__sub_I_REG_FIFO+0x3c8>)
 8004fd6:	f7fe f9b7 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PaSelect(reg_pa_select, 1, false, 'w', 0x00, 0x01),
 8004fda:	9404      	str	r4, [sp, #16]
 8004fdc:	9403      	str	r4, [sp, #12]
 8004fde:	9502      	str	r5, [sp, #8]
 8004fe0:	9401      	str	r4, [sp, #4]
 8004fe2:	9600      	str	r6, [sp, #0]
 8004fe4:	4623      	mov	r3, r4
 8004fe6:	462a      	mov	r2, r5
 8004fe8:	4923      	ldr	r1, [pc, #140]	; (8005078 <_GLOBAL__sub_I_REG_FIFO+0x330>)
 8004fea:	484a      	ldr	r0, [pc, #296]	; (8005114 <_GLOBAL__sub_I_REG_FIFO+0x3cc>)
 8004fec:	f7fe f9ac 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
MaxPower(reg_max_power, 1, false, 'w', 0x00, 0x07),
 8004ff0:	9404      	str	r4, [sp, #16]
 8004ff2:	9403      	str	r4, [sp, #12]
 8004ff4:	f8cd b008 	str.w	fp, [sp, #8]
 8004ff8:	9401      	str	r4, [sp, #4]
 8004ffa:	9600      	str	r6, [sp, #0]
 8004ffc:	4623      	mov	r3, r4
 8004ffe:	462a      	mov	r2, r5
 8005000:	491e      	ldr	r1, [pc, #120]	; (800507c <_GLOBAL__sub_I_REG_FIFO+0x334>)
 8005002:	4845      	ldr	r0, [pc, #276]	; (8005118 <_GLOBAL__sub_I_REG_FIFO+0x3d0>)
 8005004:	f7fe f9a0 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
OutputPower(reg_output_power, 1, false, 'w', 0x00, 0x0F),
 8005008:	9404      	str	r4, [sp, #16]
 800500a:	9403      	str	r4, [sp, #12]
 800500c:	230f      	movs	r3, #15
 800500e:	9302      	str	r3, [sp, #8]
 8005010:	9401      	str	r4, [sp, #4]
 8005012:	9600      	str	r6, [sp, #0]
 8005014:	4623      	mov	r3, r4
 8005016:	462a      	mov	r2, r5
 8005018:	4919      	ldr	r1, [pc, #100]	; (8005080 <_GLOBAL__sub_I_REG_FIFO+0x338>)
 800501a:	4840      	ldr	r0, [pc, #256]	; (800511c <_GLOBAL__sub_I_REG_FIFO+0x3d4>)
 800501c:	f7fe f994 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
LnaBoostHf(reg_lna_boost_hf, 1, false, 'w', 0x00, 0x03, reserv_lna_boost_hf, 2),
 8005020:	2302      	movs	r3, #2
 8005022:	9304      	str	r3, [sp, #16]
 8005024:	4b3e      	ldr	r3, [pc, #248]	; (8005120 <_GLOBAL__sub_I_REG_FIFO+0x3d8>)
 8005026:	9303      	str	r3, [sp, #12]
 8005028:	f04f 0a03 	mov.w	sl, #3
 800502c:	f8cd a008 	str.w	sl, [sp, #8]
 8005030:	9401      	str	r4, [sp, #4]
 8005032:	9600      	str	r6, [sp, #0]
 8005034:	4623      	mov	r3, r4
 8005036:	462a      	mov	r2, r5
 8005038:	4912      	ldr	r1, [pc, #72]	; (8005084 <_GLOBAL__sub_I_REG_FIFO+0x33c>)
 800503a:	483a      	ldr	r0, [pc, #232]	; (8005124 <_GLOBAL__sub_I_REG_FIFO+0x3dc>)
 800503c:	f7fe f984 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FifoAddrPtr(reg_fifo_addr_ptr, 1, false, 'w', 0x00, 0xFF),
 8005040:	9404      	str	r4, [sp, #16]
 8005042:	9403      	str	r4, [sp, #12]
 8005044:	9702      	str	r7, [sp, #8]
 8005046:	9401      	str	r4, [sp, #4]
 8005048:	9600      	str	r6, [sp, #0]
 800504a:	4623      	mov	r3, r4
 800504c:	462a      	mov	r2, r5
 800504e:	490e      	ldr	r1, [pc, #56]	; (8005088 <_GLOBAL__sub_I_REG_FIFO+0x340>)
 8005050:	4835      	ldr	r0, [pc, #212]	; (8005128 <_GLOBAL__sub_I_REG_FIFO+0x3e0>)
 8005052:	f7fe f979 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FifoTxBaseAddr(reg_fifo_tx_base_addr, 1, false, 'w', 0x00, 0xFF),
 8005056:	9404      	str	r4, [sp, #16]
 8005058:	9403      	str	r4, [sp, #12]
 800505a:	9702      	str	r7, [sp, #8]
 800505c:	9401      	str	r4, [sp, #4]
 800505e:	9600      	str	r6, [sp, #0]
 8005060:	4623      	mov	r3, r4
 8005062:	462a      	mov	r2, r5
 8005064:	4909      	ldr	r1, [pc, #36]	; (800508c <_GLOBAL__sub_I_REG_FIFO+0x344>)
 8005066:	4831      	ldr	r0, [pc, #196]	; (800512c <_GLOBAL__sub_I_REG_FIFO+0x3e4>)
 8005068:	f7fe f96e 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 800506c:	e066      	b.n	800513c <_GLOBAL__sub_I_REG_FIFO+0x3f4>
 800506e:	bf00      	nop
 8005070:	200020cc 	.word	0x200020cc
 8005074:	200020d4 	.word	0x200020d4
 8005078:	20001fa0 	.word	0x20001fa0
 800507c:	20001f98 	.word	0x20001f98
 8005080:	20001ff0 	.word	0x20001ff0
 8005084:	20001fe8 	.word	0x20001fe8
 8005088:	2000201c 	.word	0x2000201c
 800508c:	2000205c 	.word	0x2000205c
 8005090:	20002054 	.word	0x20002054
 8005094:	20002094 	.word	0x20002094
 8005098:	20001fb8 	.word	0x20001fb8
 800509c:	20001f78 	.word	0x20001f78
 80050a0:	20002064 	.word	0x20002064
 80050a4:	20001ff8 	.word	0x20001ff8
 80050a8:	20001f80 	.word	0x20001f80
 80050ac:	20001f90 	.word	0x20001f90
 80050b0:	20002084 	.word	0x20002084
 80050b4:	20001fd0 	.word	0x20001fd0
 80050b8:	20002044 	.word	0x20002044
 80050bc:	20001fb0 	.word	0x20001fb0
 80050c0:	20001fc8 	.word	0x20001fc8
 80050c4:	200020ac 	.word	0x200020ac
 80050c8:	2000204c 	.word	0x2000204c
 80050cc:	2000206c 	.word	0x2000206c
 80050d0:	20002034 	.word	0x20002034
 80050d4:	20002024 	.word	0x20002024
 80050d8:	200020a4 	.word	0x200020a4
 80050dc:	20001fc0 	.word	0x20001fc0
 80050e0:	20002074 	.word	0x20002074
 80050e4:	2000207c 	.word	0x2000207c
 80050e8:	20001fa8 	.word	0x20001fa8
 80050ec:	20001fd8 	.word	0x20001fd8
 80050f0:	20001fe0 	.word	0x20001fe0
 80050f4:	2000208c 	.word	0x2000208c
 80050f8:	20001f88 	.word	0x20001f88
 80050fc:	20001f70 	.word	0x20001f70
 8005100:	20001c44 	.word	0x20001c44
 8005104:	20001d24 	.word	0x20001d24
 8005108:	20001d5c 	.word	0x20001d5c
 800510c:	20001d94 	.word	0x20001d94
 8005110:	20001cec 	.word	0x20001cec
 8005114:	20001de8 	.word	0x20001de8
 8005118:	20001d78 	.word	0x20001d78
 800511c:	20001db0 	.word	0x20001db0
 8005120:	0800bdd0 	.word	0x0800bdd0
 8005124:	20001d08 	.word	0x20001d08
 8005128:	20001c60 	.word	0x20001c60
 800512c:	20001cd0 	.word	0x20001cd0
 8005130:	2000202c 	.word	0x2000202c
 8005134:	2000209c 	.word	0x2000209c
 8005138:	200020b4 	.word	0x200020b4
FifoRxBaseAddr(reg_fifo_rx_base_addr, 1, false, 'w', 0x00, 0xFF),
 800513c:	9404      	str	r4, [sp, #16]
 800513e:	9403      	str	r4, [sp, #12]
 8005140:	9702      	str	r7, [sp, #8]
 8005142:	9401      	str	r4, [sp, #4]
 8005144:	9600      	str	r6, [sp, #0]
 8005146:	4623      	mov	r3, r4
 8005148:	462a      	mov	r2, r5
 800514a:	49a7      	ldr	r1, [pc, #668]	; (80053e8 <_GLOBAL__sub_I_REG_FIFO+0x6a0>)
 800514c:	48a7      	ldr	r0, [pc, #668]	; (80053ec <_GLOBAL__sub_I_REG_FIFO+0x6a4>)
 800514e:	f7fe f8fb 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FifoRxCurrentAddr(reg_fifo_rx_current_addr, 1, false, 'r', 0x00, 0xFF),
 8005152:	9404      	str	r4, [sp, #16]
 8005154:	9403      	str	r4, [sp, #12]
 8005156:	9702      	str	r7, [sp, #8]
 8005158:	9401      	str	r4, [sp, #4]
 800515a:	f04f 0972 	mov.w	r9, #114	; 0x72
 800515e:	f8cd 9000 	str.w	r9, [sp]
 8005162:	4623      	mov	r3, r4
 8005164:	462a      	mov	r2, r5
 8005166:	49a2      	ldr	r1, [pc, #648]	; (80053f0 <_GLOBAL__sub_I_REG_FIFO+0x6a8>)
 8005168:	48a2      	ldr	r0, [pc, #648]	; (80053f4 <_GLOBAL__sub_I_REG_FIFO+0x6ac>)
 800516a:	f7fe f8ed 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
RxTimeout(reg_rx_timeout, 1, false, 'c', 0x00, 0x01),
 800516e:	9404      	str	r4, [sp, #16]
 8005170:	9403      	str	r4, [sp, #12]
 8005172:	9502      	str	r5, [sp, #8]
 8005174:	9401      	str	r4, [sp, #4]
 8005176:	f04f 0863 	mov.w	r8, #99	; 0x63
 800517a:	f8cd 8000 	str.w	r8, [sp]
 800517e:	4623      	mov	r3, r4
 8005180:	462a      	mov	r2, r5
 8005182:	499d      	ldr	r1, [pc, #628]	; (80053f8 <_GLOBAL__sub_I_REG_FIFO+0x6b0>)
 8005184:	489d      	ldr	r0, [pc, #628]	; (80053fc <_GLOBAL__sub_I_REG_FIFO+0x6b4>)
 8005186:	f7fe f8df 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
RxDone(reg_rx_done, 1, false, 'c', 0x00, 0x01),
 800518a:	9404      	str	r4, [sp, #16]
 800518c:	9403      	str	r4, [sp, #12]
 800518e:	9502      	str	r5, [sp, #8]
 8005190:	9401      	str	r4, [sp, #4]
 8005192:	f8cd 8000 	str.w	r8, [sp]
 8005196:	4623      	mov	r3, r4
 8005198:	462a      	mov	r2, r5
 800519a:	4999      	ldr	r1, [pc, #612]	; (8005400 <_GLOBAL__sub_I_REG_FIFO+0x6b8>)
 800519c:	4899      	ldr	r0, [pc, #612]	; (8005404 <_GLOBAL__sub_I_REG_FIFO+0x6bc>)
 800519e:	f7fe f8d3 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PayloadCrcError(reg_payload_crc_error, 1, false, 'c', 0x00, 0x01),
 80051a2:	9404      	str	r4, [sp, #16]
 80051a4:	9403      	str	r4, [sp, #12]
 80051a6:	9502      	str	r5, [sp, #8]
 80051a8:	9401      	str	r4, [sp, #4]
 80051aa:	f8cd 8000 	str.w	r8, [sp]
 80051ae:	4623      	mov	r3, r4
 80051b0:	462a      	mov	r2, r5
 80051b2:	4995      	ldr	r1, [pc, #596]	; (8005408 <_GLOBAL__sub_I_REG_FIFO+0x6c0>)
 80051b4:	4895      	ldr	r0, [pc, #596]	; (800540c <_GLOBAL__sub_I_REG_FIFO+0x6c4>)
 80051b6:	f7fe f8c7 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
ValidHeader(reg_valid_header, 1, false, 'c', 0x00, 0x01),
 80051ba:	9404      	str	r4, [sp, #16]
 80051bc:	9403      	str	r4, [sp, #12]
 80051be:	9502      	str	r5, [sp, #8]
 80051c0:	9401      	str	r4, [sp, #4]
 80051c2:	f8cd 8000 	str.w	r8, [sp]
 80051c6:	4623      	mov	r3, r4
 80051c8:	462a      	mov	r2, r5
 80051ca:	4991      	ldr	r1, [pc, #580]	; (8005410 <_GLOBAL__sub_I_REG_FIFO+0x6c8>)
 80051cc:	4891      	ldr	r0, [pc, #580]	; (8005414 <_GLOBAL__sub_I_REG_FIFO+0x6cc>)
 80051ce:	f7fe f8bb 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
TxDone(reg_tx_done, 1, false, 'c', 0x00, 0x01),
 80051d2:	9404      	str	r4, [sp, #16]
 80051d4:	9403      	str	r4, [sp, #12]
 80051d6:	9502      	str	r5, [sp, #8]
 80051d8:	9401      	str	r4, [sp, #4]
 80051da:	f8cd 8000 	str.w	r8, [sp]
 80051de:	4623      	mov	r3, r4
 80051e0:	462a      	mov	r2, r5
 80051e2:	498d      	ldr	r1, [pc, #564]	; (8005418 <_GLOBAL__sub_I_REG_FIFO+0x6d0>)
 80051e4:	488d      	ldr	r0, [pc, #564]	; (800541c <_GLOBAL__sub_I_REG_FIFO+0x6d4>)
 80051e6:	f7fe f8af 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
CadDone(reg_cad_done, 1, false, 'c', 0x00, 0x01),
 80051ea:	9404      	str	r4, [sp, #16]
 80051ec:	9403      	str	r4, [sp, #12]
 80051ee:	9502      	str	r5, [sp, #8]
 80051f0:	9401      	str	r4, [sp, #4]
 80051f2:	f8cd 8000 	str.w	r8, [sp]
 80051f6:	4623      	mov	r3, r4
 80051f8:	462a      	mov	r2, r5
 80051fa:	4989      	ldr	r1, [pc, #548]	; (8005420 <_GLOBAL__sub_I_REG_FIFO+0x6d8>)
 80051fc:	4889      	ldr	r0, [pc, #548]	; (8005424 <_GLOBAL__sub_I_REG_FIFO+0x6dc>)
 80051fe:	f7fe f8a3 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FhssChangeChannel(reg_fhss_change_channel, 1, false, 'c', 0x00, 0x01),
 8005202:	9404      	str	r4, [sp, #16]
 8005204:	9403      	str	r4, [sp, #12]
 8005206:	9502      	str	r5, [sp, #8]
 8005208:	9401      	str	r4, [sp, #4]
 800520a:	f8cd 8000 	str.w	r8, [sp]
 800520e:	4623      	mov	r3, r4
 8005210:	462a      	mov	r2, r5
 8005212:	4985      	ldr	r1, [pc, #532]	; (8005428 <_GLOBAL__sub_I_REG_FIFO+0x6e0>)
 8005214:	4885      	ldr	r0, [pc, #532]	; (800542c <_GLOBAL__sub_I_REG_FIFO+0x6e4>)
 8005216:	f7fe f897 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
CadDetected(reg_cad_detected, 1, false, 'c', 0x00, 0x01),
 800521a:	9404      	str	r4, [sp, #16]
 800521c:	9403      	str	r4, [sp, #12]
 800521e:	9502      	str	r5, [sp, #8]
 8005220:	9401      	str	r4, [sp, #4]
 8005222:	f8cd 8000 	str.w	r8, [sp]
 8005226:	4623      	mov	r3, r4
 8005228:	462a      	mov	r2, r5
 800522a:	4981      	ldr	r1, [pc, #516]	; (8005430 <_GLOBAL__sub_I_REG_FIFO+0x6e8>)
 800522c:	4881      	ldr	r0, [pc, #516]	; (8005434 <_GLOBAL__sub_I_REG_FIFO+0x6ec>)
 800522e:	f7fe f88b 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FifoRxBytesNb(reg_fifo_rx_bytes_nb, 1, false, 'r', 0x00, 0xFF),
 8005232:	9404      	str	r4, [sp, #16]
 8005234:	9403      	str	r4, [sp, #12]
 8005236:	9702      	str	r7, [sp, #8]
 8005238:	9401      	str	r4, [sp, #4]
 800523a:	f8cd 9000 	str.w	r9, [sp]
 800523e:	4623      	mov	r3, r4
 8005240:	462a      	mov	r2, r5
 8005242:	497d      	ldr	r1, [pc, #500]	; (8005438 <_GLOBAL__sub_I_REG_FIFO+0x6f0>)
 8005244:	487d      	ldr	r0, [pc, #500]	; (800543c <_GLOBAL__sub_I_REG_FIFO+0x6f4>)
 8005246:	f7fe f87f 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PacketSnr(reg_packet_snr, 1, false, 'r', 0x00, 0xFF),
 800524a:	9404      	str	r4, [sp, #16]
 800524c:	9403      	str	r4, [sp, #12]
 800524e:	9702      	str	r7, [sp, #8]
 8005250:	9401      	str	r4, [sp, #4]
 8005252:	f8cd 9000 	str.w	r9, [sp]
 8005256:	4623      	mov	r3, r4
 8005258:	462a      	mov	r2, r5
 800525a:	4979      	ldr	r1, [pc, #484]	; (8005440 <_GLOBAL__sub_I_REG_FIFO+0x6f8>)
 800525c:	4879      	ldr	r0, [pc, #484]	; (8005444 <_GLOBAL__sub_I_REG_FIFO+0x6fc>)
 800525e:	f7fe f873 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PacketRssi(reg_packet_rssi, 1, false, 'r', 0x00, 0xFF),
 8005262:	9404      	str	r4, [sp, #16]
 8005264:	9403      	str	r4, [sp, #12]
 8005266:	9702      	str	r7, [sp, #8]
 8005268:	9401      	str	r4, [sp, #4]
 800526a:	f8cd 9000 	str.w	r9, [sp]
 800526e:	4623      	mov	r3, r4
 8005270:	462a      	mov	r2, r5
 8005272:	4975      	ldr	r1, [pc, #468]	; (8005448 <_GLOBAL__sub_I_REG_FIFO+0x700>)
 8005274:	4875      	ldr	r0, [pc, #468]	; (800544c <_GLOBAL__sub_I_REG_FIFO+0x704>)
 8005276:	f7fe f867 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Bw(reg_bw, 1, false, 'w', 0x00, 0x09),
 800527a:	9404      	str	r4, [sp, #16]
 800527c:	9403      	str	r4, [sp, #12]
 800527e:	2309      	movs	r3, #9
 8005280:	9302      	str	r3, [sp, #8]
 8005282:	9401      	str	r4, [sp, #4]
 8005284:	9600      	str	r6, [sp, #0]
 8005286:	4623      	mov	r3, r4
 8005288:	462a      	mov	r2, r5
 800528a:	4971      	ldr	r1, [pc, #452]	; (8005450 <_GLOBAL__sub_I_REG_FIFO+0x708>)
 800528c:	4871      	ldr	r0, [pc, #452]	; (8005454 <_GLOBAL__sub_I_REG_FIFO+0x70c>)
 800528e:	f7fe f85b 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
SpreadingFactor(reg_spreading_factor, 1, false, 'w', 0x06, 0x0C),
 8005292:	9404      	str	r4, [sp, #16]
 8005294:	9403      	str	r4, [sp, #12]
 8005296:	f04f 080c 	mov.w	r8, #12
 800529a:	f8cd 8008 	str.w	r8, [sp, #8]
 800529e:	2306      	movs	r3, #6
 80052a0:	9301      	str	r3, [sp, #4]
 80052a2:	9600      	str	r6, [sp, #0]
 80052a4:	4623      	mov	r3, r4
 80052a6:	462a      	mov	r2, r5
 80052a8:	496b      	ldr	r1, [pc, #428]	; (8005458 <_GLOBAL__sub_I_REG_FIFO+0x710>)
 80052aa:	486c      	ldr	r0, [pc, #432]	; (800545c <_GLOBAL__sub_I_REG_FIFO+0x714>)
 80052ac:	f7fe f84c 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
RxPayloadCrcOn(reg_rx_payload_crc_on, 1, false, 'w', 0x00, 0x01),
 80052b0:	9404      	str	r4, [sp, #16]
 80052b2:	9403      	str	r4, [sp, #12]
 80052b4:	9502      	str	r5, [sp, #8]
 80052b6:	9401      	str	r4, [sp, #4]
 80052b8:	9600      	str	r6, [sp, #0]
 80052ba:	4623      	mov	r3, r4
 80052bc:	462a      	mov	r2, r5
 80052be:	4968      	ldr	r1, [pc, #416]	; (8005460 <_GLOBAL__sub_I_REG_FIFO+0x718>)
 80052c0:	4868      	ldr	r0, [pc, #416]	; (8005464 <_GLOBAL__sub_I_REG_FIFO+0x71c>)
 80052c2:	f7fe f841 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PreambleLength(reg_preamble_length, 2, false, 'w', 0x0000, 0xFFFF),
 80052c6:	9404      	str	r4, [sp, #16]
 80052c8:	9403      	str	r4, [sp, #12]
 80052ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052ce:	9302      	str	r3, [sp, #8]
 80052d0:	9401      	str	r4, [sp, #4]
 80052d2:	9600      	str	r6, [sp, #0]
 80052d4:	4623      	mov	r3, r4
 80052d6:	2202      	movs	r2, #2
 80052d8:	4963      	ldr	r1, [pc, #396]	; (8005468 <_GLOBAL__sub_I_REG_FIFO+0x720>)
 80052da:	4864      	ldr	r0, [pc, #400]	; (800546c <_GLOBAL__sub_I_REG_FIFO+0x724>)
 80052dc:	f7fe f834 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PayloadLength(reg_payload_length, 1, false, 'w', 0x01, 0xFF),
 80052e0:	9404      	str	r4, [sp, #16]
 80052e2:	9403      	str	r4, [sp, #12]
 80052e4:	9702      	str	r7, [sp, #8]
 80052e6:	9501      	str	r5, [sp, #4]
 80052e8:	9600      	str	r6, [sp, #0]
 80052ea:	4623      	mov	r3, r4
 80052ec:	462a      	mov	r2, r5
 80052ee:	4960      	ldr	r1, [pc, #384]	; (8005470 <_GLOBAL__sub_I_REG_FIFO+0x728>)
 80052f0:	4860      	ldr	r0, [pc, #384]	; (8005474 <_GLOBAL__sub_I_REG_FIFO+0x72c>)
 80052f2:	f7fe f829 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
LowDataRateOptimize(reg_low_data_rate_optimize, 1, false, 'w', 0x00, 0x01),
 80052f6:	9404      	str	r4, [sp, #16]
 80052f8:	9403      	str	r4, [sp, #12]
 80052fa:	9502      	str	r5, [sp, #8]
 80052fc:	9401      	str	r4, [sp, #4]
 80052fe:	9600      	str	r6, [sp, #0]
 8005300:	4623      	mov	r3, r4
 8005302:	462a      	mov	r2, r5
 8005304:	495c      	ldr	r1, [pc, #368]	; (8005478 <_GLOBAL__sub_I_REG_FIFO+0x730>)
 8005306:	485d      	ldr	r0, [pc, #372]	; (800547c <_GLOBAL__sub_I_REG_FIFO+0x734>)
 8005308:	f7fe f81e 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
AgcAutoOn(reg_agc_auto_on, 1, false, 'w', 0x00, 0x01),
 800530c:	9404      	str	r4, [sp, #16]
 800530e:	9403      	str	r4, [sp, #12]
 8005310:	9502      	str	r5, [sp, #8]
 8005312:	9401      	str	r4, [sp, #4]
 8005314:	9600      	str	r6, [sp, #0]
 8005316:	4623      	mov	r3, r4
 8005318:	462a      	mov	r2, r5
 800531a:	4959      	ldr	r1, [pc, #356]	; (8005480 <_GLOBAL__sub_I_REG_FIFO+0x738>)
 800531c:	4859      	ldr	r0, [pc, #356]	; (8005484 <_GLOBAL__sub_I_REG_FIFO+0x73c>)
 800531e:	f7fe f813 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
DetectionOptimize(reg_detection_optimize, 1, false, 'w', 0x03, 0x05, reserv_detection_optimize, 1),
 8005322:	9504      	str	r5, [sp, #16]
 8005324:	4b58      	ldr	r3, [pc, #352]	; (8005488 <_GLOBAL__sub_I_REG_FIFO+0x740>)
 8005326:	9303      	str	r3, [sp, #12]
 8005328:	2305      	movs	r3, #5
 800532a:	9302      	str	r3, [sp, #8]
 800532c:	f8cd a004 	str.w	sl, [sp, #4]
 8005330:	9600      	str	r6, [sp, #0]
 8005332:	4623      	mov	r3, r4
 8005334:	462a      	mov	r2, r5
 8005336:	4955      	ldr	r1, [pc, #340]	; (800548c <_GLOBAL__sub_I_REG_FIFO+0x744>)
 8005338:	4855      	ldr	r0, [pc, #340]	; (8005490 <_GLOBAL__sub_I_REG_FIFO+0x748>)
 800533a:	f7fe f805 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
DetectionThreshold(reg_detection_threshold, 1, false, 'w', 0x0A, 0x0C, reserv_detection_threshold, 1),
 800533e:	9504      	str	r5, [sp, #16]
 8005340:	4b54      	ldr	r3, [pc, #336]	; (8005494 <_GLOBAL__sub_I_REG_FIFO+0x74c>)
 8005342:	9303      	str	r3, [sp, #12]
 8005344:	f8cd 8008 	str.w	r8, [sp, #8]
 8005348:	230a      	movs	r3, #10
 800534a:	9301      	str	r3, [sp, #4]
 800534c:	9600      	str	r6, [sp, #0]
 800534e:	4623      	mov	r3, r4
 8005350:	462a      	mov	r2, r5
 8005352:	4951      	ldr	r1, [pc, #324]	; (8005498 <_GLOBAL__sub_I_REG_FIFO+0x750>)
 8005354:	4851      	ldr	r0, [pc, #324]	; (800549c <_GLOBAL__sub_I_REG_FIFO+0x754>)
 8005356:	f7fd fff7 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
SyncWord(reg_sync_word, 1, false, 'w', 0x00, 0xFF),  // , reserv_sync_word, 1),
 800535a:	9404      	str	r4, [sp, #16]
 800535c:	9403      	str	r4, [sp, #12]
 800535e:	9702      	str	r7, [sp, #8]
 8005360:	9401      	str	r4, [sp, #4]
 8005362:	9600      	str	r6, [sp, #0]
 8005364:	4623      	mov	r3, r4
 8005366:	462a      	mov	r2, r5
 8005368:	494d      	ldr	r1, [pc, #308]	; (80054a0 <_GLOBAL__sub_I_REG_FIFO+0x758>)
 800536a:	484e      	ldr	r0, [pc, #312]	; (80054a4 <_GLOBAL__sub_I_REG_FIFO+0x75c>)
 800536c:	f7fd ffec 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Dio0Mapping(reg_dio0_mapping, 1, false, 'w', 0x00, 0x03),
 8005370:	9404      	str	r4, [sp, #16]
 8005372:	9403      	str	r4, [sp, #12]
 8005374:	f8cd a008 	str.w	sl, [sp, #8]
 8005378:	9401      	str	r4, [sp, #4]
 800537a:	9600      	str	r6, [sp, #0]
 800537c:	4623      	mov	r3, r4
 800537e:	462a      	mov	r2, r5
 8005380:	4949      	ldr	r1, [pc, #292]	; (80054a8 <_GLOBAL__sub_I_REG_FIFO+0x760>)
 8005382:	484a      	ldr	r0, [pc, #296]	; (80054ac <_GLOBAL__sub_I_REG_FIFO+0x764>)
 8005384:	f7fd ffe0 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Dio1Mapping(reg_dio1_mapping, 1, false, 'w', 0x00, 0x03),
 8005388:	9404      	str	r4, [sp, #16]
 800538a:	9403      	str	r4, [sp, #12]
 800538c:	f8cd a008 	str.w	sl, [sp, #8]
 8005390:	9401      	str	r4, [sp, #4]
 8005392:	9600      	str	r6, [sp, #0]
 8005394:	4623      	mov	r3, r4
 8005396:	462a      	mov	r2, r5
 8005398:	4945      	ldr	r1, [pc, #276]	; (80054b0 <_GLOBAL__sub_I_REG_FIFO+0x768>)
 800539a:	4846      	ldr	r0, [pc, #280]	; (80054b4 <_GLOBAL__sub_I_REG_FIFO+0x76c>)
 800539c:	f7fd ffd4 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
MapPreambleDetect(reg_map_preamble_detect, 1, false, 'w', 0x00, 0x01),
 80053a0:	9404      	str	r4, [sp, #16]
 80053a2:	9403      	str	r4, [sp, #12]
 80053a4:	9502      	str	r5, [sp, #8]
 80053a6:	9401      	str	r4, [sp, #4]
 80053a8:	9600      	str	r6, [sp, #0]
 80053aa:	4623      	mov	r3, r4
 80053ac:	462a      	mov	r2, r5
 80053ae:	4942      	ldr	r1, [pc, #264]	; (80054b8 <_GLOBAL__sub_I_REG_FIFO+0x770>)
 80053b0:	4842      	ldr	r0, [pc, #264]	; (80054bc <_GLOBAL__sub_I_REG_FIFO+0x774>)
 80053b2:	f7fd ffc9 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Version(reg_version, 1, false, 'r', 0x00, 0xFF),
 80053b6:	9404      	str	r4, [sp, #16]
 80053b8:	9403      	str	r4, [sp, #12]
 80053ba:	9702      	str	r7, [sp, #8]
 80053bc:	9401      	str	r4, [sp, #4]
 80053be:	f8cd 9000 	str.w	r9, [sp]
 80053c2:	4623      	mov	r3, r4
 80053c4:	462a      	mov	r2, r5
 80053c6:	493e      	ldr	r1, [pc, #248]	; (80054c0 <_GLOBAL__sub_I_REG_FIFO+0x778>)
 80053c8:	483e      	ldr	r0, [pc, #248]	; (80054c4 <_GLOBAL__sub_I_REG_FIFO+0x77c>)
 80053ca:	f7fd ffbd 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PaDac(reg_pa_dac, 1, false, 'w', 0x04, 0x07, reserv_pa_dac, 2) //,
 80053ce:	2302      	movs	r3, #2
 80053d0:	9304      	str	r3, [sp, #16]
 80053d2:	4b3d      	ldr	r3, [pc, #244]	; (80054c8 <_GLOBAL__sub_I_REG_FIFO+0x780>)
 80053d4:	9303      	str	r3, [sp, #12]
 80053d6:	f8cd b008 	str.w	fp, [sp, #8]
 80053da:	2304      	movs	r3, #4
 80053dc:	9301      	str	r3, [sp, #4]
 80053de:	9600      	str	r6, [sp, #0]
 80053e0:	4623      	mov	r3, r4
 80053e2:	462a      	mov	r2, r5
 80053e4:	e072      	b.n	80054cc <_GLOBAL__sub_I_REG_FIFO+0x784>
 80053e6:	bf00      	nop
 80053e8:	20002054 	.word	0x20002054
 80053ec:	20001c7c 	.word	0x20001c7c
 80053f0:	20002094 	.word	0x20002094
 80053f4:	20001cb4 	.word	0x20001cb4
 80053f8:	20001fb8 	.word	0x20001fb8
 80053fc:	20001ec8 	.word	0x20001ec8
 8005400:	20001f78 	.word	0x20001f78
 8005404:	20001e90 	.word	0x20001e90
 8005408:	20002064 	.word	0x20002064
 800540c:	20001e3c 	.word	0x20001e3c
 8005410:	20001ff8 	.word	0x20001ff8
 8005414:	20001f38 	.word	0x20001f38
 8005418:	20001f80 	.word	0x20001f80
 800541c:	20001f1c 	.word	0x20001f1c
 8005420:	20001f90 	.word	0x20001f90
 8005424:	20001b9c 	.word	0x20001b9c
 8005428:	20002084 	.word	0x20002084
 800542c:	20001c28 	.word	0x20001c28
 8005430:	20001fd0 	.word	0x20001fd0
 8005434:	20001b80 	.word	0x20001b80
 8005438:	20002044 	.word	0x20002044
 800543c:	20001c98 	.word	0x20001c98
 8005440:	20001fb0 	.word	0x20001fb0
 8005444:	20001e20 	.word	0x20001e20
 8005448:	20001fc8 	.word	0x20001fc8
 800544c:	20001e04 	.word	0x20001e04
 8005450:	200020ac 	.word	0x200020ac
 8005454:	20001b64 	.word	0x20001b64
 8005458:	2000204c 	.word	0x2000204c
 800545c:	20001ee4 	.word	0x20001ee4
 8005460:	2000206c 	.word	0x2000206c
 8005464:	20001eac 	.word	0x20001eac
 8005468:	20002034 	.word	0x20002034
 800546c:	20001e74 	.word	0x20001e74
 8005470:	20002024 	.word	0x20002024
 8005474:	20001e58 	.word	0x20001e58
 8005478:	200020a4 	.word	0x200020a4
 800547c:	20001d40 	.word	0x20001d40
 8005480:	20001fc0 	.word	0x20001fc0
 8005484:	20001b48 	.word	0x20001b48
 8005488:	0800bdd8 	.word	0x0800bdd8
 800548c:	20002074 	.word	0x20002074
 8005490:	20001bb8 	.word	0x20001bb8
 8005494:	0800bddc 	.word	0x0800bddc
 8005498:	2000207c 	.word	0x2000207c
 800549c:	20001bd4 	.word	0x20001bd4
 80054a0:	20001fa8 	.word	0x20001fa8
 80054a4:	20001f00 	.word	0x20001f00
 80054a8:	20001fd8 	.word	0x20001fd8
 80054ac:	20001bf0 	.word	0x20001bf0
 80054b0:	20001fe0 	.word	0x20001fe0
 80054b4:	20001c0c 	.word	0x20001c0c
 80054b8:	2000208c 	.word	0x2000208c
 80054bc:	20002000 	.word	0x20002000
 80054c0:	20001f88 	.word	0x20001f88
 80054c4:	20001f54 	.word	0x20001f54
 80054c8:	0800bdc8 	.word	0x0800bdc8
 80054cc:	49af      	ldr	r1, [pc, #700]	; (800578c <_GLOBAL__sub_I_REG_FIFO+0xa44>)
 80054ce:	48b0      	ldr	r0, [pc, #704]	; (8005790 <_GLOBAL__sub_I_REG_FIFO+0xa48>)
 80054d0:	f7fd ff3a 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
};
 80054d4:	4caf      	ldr	r4, [pc, #700]	; (8005794 <_GLOBAL__sub_I_REG_FIFO+0xa4c>)
 80054d6:	4626      	mov	r6, r4
 80054d8:	4daf      	ldr	r5, [pc, #700]	; (8005798 <_GLOBAL__sub_I_REG_FIFO+0xa50>)
 80054da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054dc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80054de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80054e2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80054e6:	f104 061c 	add.w	r6, r4, #28
 80054ea:	4dac      	ldr	r5, [pc, #688]	; (800579c <_GLOBAL__sub_I_REG_FIFO+0xa54>)
 80054ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80054f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80054f4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80054f8:	f104 0638 	add.w	r6, r4, #56	; 0x38
 80054fc:	4da8      	ldr	r5, [pc, #672]	; (80057a0 <_GLOBAL__sub_I_REG_FIFO+0xa58>)
 80054fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005500:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005502:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005506:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800550a:	f104 0554 	add.w	r5, r4, #84	; 0x54
 800550e:	4ea5      	ldr	r6, [pc, #660]	; (80057a4 <_GLOBAL__sub_I_REG_FIFO+0xa5c>)
 8005510:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005514:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005518:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800551c:	f104 0670 	add.w	r6, r4, #112	; 0x70
 8005520:	4da1      	ldr	r5, [pc, #644]	; (80057a8 <_GLOBAL__sub_I_REG_FIFO+0xa60>)
 8005522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005524:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005526:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800552a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800552e:	f104 068c 	add.w	r6, r4, #140	; 0x8c
 8005532:	4d9e      	ldr	r5, [pc, #632]	; (80057ac <_GLOBAL__sub_I_REG_FIFO+0xa64>)
 8005534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005536:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005538:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800553c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8005540:	f104 06a8 	add.w	r6, r4, #168	; 0xa8
 8005544:	4d9a      	ldr	r5, [pc, #616]	; (80057b0 <_GLOBAL__sub_I_REG_FIFO+0xa68>)
 8005546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005548:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800554a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800554e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8005552:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
 8005556:	4d97      	ldr	r5, [pc, #604]	; (80057b4 <_GLOBAL__sub_I_REG_FIFO+0xa6c>)
 8005558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800555a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800555c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005560:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8005564:	f104 06e0 	add.w	r6, r4, #224	; 0xe0
 8005568:	4d93      	ldr	r5, [pc, #588]	; (80057b8 <_GLOBAL__sub_I_REG_FIFO+0xa70>)
 800556a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800556c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800556e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005572:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8005576:	f104 06fc 	add.w	r6, r4, #252	; 0xfc
 800557a:	4d90      	ldr	r5, [pc, #576]	; (80057bc <_GLOBAL__sub_I_REG_FIFO+0xa74>)
 800557c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800557e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005580:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005584:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8005588:	f504 748c 	add.w	r4, r4, #280	; 0x118
 800558c:	4d8c      	ldr	r5, [pc, #560]	; (80057c0 <_GLOBAL__sub_I_REG_FIFO+0xa78>)
 800558e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005592:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005596:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800559a:	f5a4 7494 	sub.w	r4, r4, #296	; 0x128
 800559e:	f504 759a 	add.w	r5, r4, #308	; 0x134
 80055a2:	4e88      	ldr	r6, [pc, #544]	; (80057c4 <_GLOBAL__sub_I_REG_FIFO+0xa7c>)
 80055a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80055a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055a8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80055ac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80055b0:	f504 75a8 	add.w	r5, r4, #336	; 0x150
 80055b4:	4e84      	ldr	r6, [pc, #528]	; (80057c8 <_GLOBAL__sub_I_REG_FIFO+0xa80>)
 80055b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80055b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055ba:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80055be:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80055c2:	f504 75b6 	add.w	r5, r4, #364	; 0x16c
 80055c6:	4e81      	ldr	r6, [pc, #516]	; (80057cc <_GLOBAL__sub_I_REG_FIFO+0xa84>)
 80055c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80055ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055cc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80055d0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80055d4:	f504 75c4 	add.w	r5, r4, #392	; 0x188
 80055d8:	4e7d      	ldr	r6, [pc, #500]	; (80057d0 <_GLOBAL__sub_I_REG_FIFO+0xa88>)
 80055da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80055dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055de:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80055e2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80055e6:	f504 75d2 	add.w	r5, r4, #420	; 0x1a4
 80055ea:	4e7a      	ldr	r6, [pc, #488]	; (80057d4 <_GLOBAL__sub_I_REG_FIFO+0xa8c>)
 80055ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80055ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055f0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80055f4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80055f8:	f504 75e0 	add.w	r5, r4, #448	; 0x1c0
 80055fc:	4e76      	ldr	r6, [pc, #472]	; (80057d8 <_GLOBAL__sub_I_REG_FIFO+0xa90>)
 80055fe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005602:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005606:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800560a:	f504 75ee 	add.w	r5, r4, #476	; 0x1dc
 800560e:	4e73      	ldr	r6, [pc, #460]	; (80057dc <_GLOBAL__sub_I_REG_FIFO+0xa94>)
 8005610:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005612:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005614:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005618:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800561c:	f504 75fc 	add.w	r5, r4, #504	; 0x1f8
 8005620:	4e6f      	ldr	r6, [pc, #444]	; (80057e0 <_GLOBAL__sub_I_REG_FIFO+0xa98>)
 8005622:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005626:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800562a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800562e:	f504 7505 	add.w	r5, r4, #532	; 0x214
 8005632:	4e6c      	ldr	r6, [pc, #432]	; (80057e4 <_GLOBAL__sub_I_REG_FIFO+0xa9c>)
 8005634:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005638:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800563c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005640:	f504 750c 	add.w	r5, r4, #560	; 0x230
 8005644:	4e68      	ldr	r6, [pc, #416]	; (80057e8 <_GLOBAL__sub_I_REG_FIFO+0xaa0>)
 8005646:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800564a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800564e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005652:	f504 7513 	add.w	r5, r4, #588	; 0x24c
 8005656:	4e65      	ldr	r6, [pc, #404]	; (80057ec <_GLOBAL__sub_I_REG_FIFO+0xaa4>)
 8005658:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800565a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800565c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005660:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005664:	f504 751a 	add.w	r5, r4, #616	; 0x268
 8005668:	4e61      	ldr	r6, [pc, #388]	; (80057f0 <_GLOBAL__sub_I_REG_FIFO+0xaa8>)
 800566a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800566c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800566e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005672:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005676:	f504 7521 	add.w	r5, r4, #644	; 0x284
 800567a:	4e5e      	ldr	r6, [pc, #376]	; (80057f4 <_GLOBAL__sub_I_REG_FIFO+0xaac>)
 800567c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800567e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005680:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005684:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005688:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 800568c:	4e5a      	ldr	r6, [pc, #360]	; (80057f8 <_GLOBAL__sub_I_REG_FIFO+0xab0>)
 800568e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005692:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005696:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800569a:	f504 752f 	add.w	r5, r4, #700	; 0x2bc
 800569e:	4e57      	ldr	r6, [pc, #348]	; (80057fc <_GLOBAL__sub_I_REG_FIFO+0xab4>)
 80056a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80056a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056a4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80056a8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80056ac:	f504 7536 	add.w	r5, r4, #728	; 0x2d8
 80056b0:	4e53      	ldr	r6, [pc, #332]	; (8005800 <_GLOBAL__sub_I_REG_FIFO+0xab8>)
 80056b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80056b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056b6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80056ba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80056be:	f504 753d 	add.w	r5, r4, #756	; 0x2f4
 80056c2:	4e50      	ldr	r6, [pc, #320]	; (8005804 <_GLOBAL__sub_I_REG_FIFO+0xabc>)
 80056c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80056c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056c8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80056cc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80056d0:	f504 7544 	add.w	r5, r4, #784	; 0x310
 80056d4:	4e4c      	ldr	r6, [pc, #304]	; (8005808 <_GLOBAL__sub_I_REG_FIFO+0xac0>)
 80056d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80056d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056da:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80056de:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80056e2:	f504 754b 	add.w	r5, r4, #812	; 0x32c
 80056e6:	4e49      	ldr	r6, [pc, #292]	; (800580c <_GLOBAL__sub_I_REG_FIFO+0xac4>)
 80056e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80056ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056ec:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80056f0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80056f4:	f504 7552 	add.w	r5, r4, #840	; 0x348
 80056f8:	4e45      	ldr	r6, [pc, #276]	; (8005810 <_GLOBAL__sub_I_REG_FIFO+0xac8>)
 80056fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80056fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056fe:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005702:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005706:	f504 7559 	add.w	r5, r4, #868	; 0x364
 800570a:	4e42      	ldr	r6, [pc, #264]	; (8005814 <_GLOBAL__sub_I_REG_FIFO+0xacc>)
 800570c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800570e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005710:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005714:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005718:	f504 7560 	add.w	r5, r4, #896	; 0x380
 800571c:	4e3e      	ldr	r6, [pc, #248]	; (8005818 <_GLOBAL__sub_I_REG_FIFO+0xad0>)
 800571e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005722:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005726:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800572a:	f504 7567 	add.w	r5, r4, #924	; 0x39c
 800572e:	4e3b      	ldr	r6, [pc, #236]	; (800581c <_GLOBAL__sub_I_REG_FIFO+0xad4>)
 8005730:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005734:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005738:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800573c:	f504 756e 	add.w	r5, r4, #952	; 0x3b8
 8005740:	4e37      	ldr	r6, [pc, #220]	; (8005820 <_GLOBAL__sub_I_REG_FIFO+0xad8>)
 8005742:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005746:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800574a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800574e:	f504 7575 	add.w	r5, r4, #980	; 0x3d4
 8005752:	4e34      	ldr	r6, [pc, #208]	; (8005824 <_GLOBAL__sub_I_REG_FIFO+0xadc>)
 8005754:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005758:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800575c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005760:	f504 757c 	add.w	r5, r4, #1008	; 0x3f0
 8005764:	4e30      	ldr	r6, [pc, #192]	; (8005828 <_GLOBAL__sub_I_REG_FIFO+0xae0>)
 8005766:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800576a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800576e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005772:	f204 440c 	addw	r4, r4, #1036	; 0x40c
 8005776:	4d06      	ldr	r5, [pc, #24]	; (8005790 <_GLOBAL__sub_I_REG_FIFO+0xa48>)
 8005778:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800577a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800577c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005780:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005784:	b007      	add	sp, #28
 8005786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800578a:	bf00      	nop
 800578c:	20001f70 	.word	0x20001f70
 8005790:	20001dcc 	.word	0x20001dcc
 8005794:	20001720 	.word	0x20001720
 8005798:	20001c44 	.word	0x20001c44
 800579c:	20001d24 	.word	0x20001d24
 80057a0:	20001d5c 	.word	0x20001d5c
 80057a4:	20001d94 	.word	0x20001d94
 80057a8:	20001cec 	.word	0x20001cec
 80057ac:	20001de8 	.word	0x20001de8
 80057b0:	20001d78 	.word	0x20001d78
 80057b4:	20001db0 	.word	0x20001db0
 80057b8:	20001d08 	.word	0x20001d08
 80057bc:	20001c60 	.word	0x20001c60
 80057c0:	20001cd0 	.word	0x20001cd0
 80057c4:	20001c7c 	.word	0x20001c7c
 80057c8:	20001cb4 	.word	0x20001cb4
 80057cc:	20001ec8 	.word	0x20001ec8
 80057d0:	20001e90 	.word	0x20001e90
 80057d4:	20001e3c 	.word	0x20001e3c
 80057d8:	20001f38 	.word	0x20001f38
 80057dc:	20001f1c 	.word	0x20001f1c
 80057e0:	20001b9c 	.word	0x20001b9c
 80057e4:	20001c28 	.word	0x20001c28
 80057e8:	20001b80 	.word	0x20001b80
 80057ec:	20001c98 	.word	0x20001c98
 80057f0:	20001e20 	.word	0x20001e20
 80057f4:	20001e04 	.word	0x20001e04
 80057f8:	20001b64 	.word	0x20001b64
 80057fc:	20001ee4 	.word	0x20001ee4
 8005800:	20001eac 	.word	0x20001eac
 8005804:	20001e74 	.word	0x20001e74
 8005808:	20001e58 	.word	0x20001e58
 800580c:	20001d40 	.word	0x20001d40
 8005810:	20001b48 	.word	0x20001b48
 8005814:	20001bb8 	.word	0x20001bb8
 8005818:	20001bd4 	.word	0x20001bd4
 800581c:	20001f00 	.word	0x20001f00
 8005820:	20001bf0 	.word	0x20001bf0
 8005824:	20001c0c 	.word	0x20001c0c
 8005828:	20001f54 	.word	0x20001f54

0800582c <_ZN15Packet_analyzer11set_settingEh>:
    // return field_header_[num_number]->set_value(num, &(packet[0]));
}

bool Packet_analyzer::set_setting(uint8_t setting) {
    return false; // настройки индивидуальны, у общего класса их нет
}
 800582c:	2000      	movs	r0, #0
 800582e:	4770      	bx	lr

08005830 <_ZN17Packet_Connection11set_settingEh>:
// ----- ----- ----- ----- ----- Packet_Connection ----- ----- ----- ----- -----
//   ----- ----- ----- ----- -----  ----- -----  ----- ----- ----- ----- -----

bool Packet_Connection::set_setting(uint8_t setting) {
    return false; // не зависит от настроек
}
 8005830:	2000      	movs	r0, #0
 8005832:	4770      	bx	lr

08005834 <_ZN13Packet_Sensor11set_settingEh>:
// ----- ----- ----- ----- -----  Packet_Sensor  ----- ----- ----- ----- -----
//   ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----

bool Packet_Sensor::set_setting(uint8_t setting) {
    // if по типам
    setting_ = setting;
 8005834:	7401      	strb	r1, [r0, #16]
    return false;
}
 8005836:	2000      	movs	r0, #0
 8005838:	4770      	bx	lr

0800583a <_ZN13Packet_Device11set_settingEh>:
//   ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----


bool Packet_Device::set_setting(uint8_t setting) {
    // if по типам
    setting_ = setting;
 800583a:	7401      	strb	r1, [r0, #16]
    return false;
}
 800583c:	2000      	movs	r0, #0
 800583e:	4770      	bx	lr

08005840 <_ZN13Packet_System11set_settingEh>:


bool Packet_System::set_setting(uint8_t setting) {
    // if по типам
    return true; // не реализованы
}
 8005840:	2001      	movs	r0, #1
 8005842:	4770      	bx	lr

08005844 <_ZN12LoRa_addressC1EPKhh>:
LoRa_address::LoRa_address(const uint8_t* bytes, const uint8_t len) {
 8005844:	b570      	push	{r4, r5, r6, lr}
 8005846:	4604      	mov	r4, r0
 8005848:	460d      	mov	r5, r1
 800584a:	4616      	mov	r6, r2
 800584c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005850:	8003      	strh	r3, [r0, #0]
 8005852:	8043      	strh	r3, [r0, #2]
	group = field_dest_adr_group.get_value(bytes, len);
 8005854:	4805      	ldr	r0, [pc, #20]	; (800586c <_ZN12LoRa_addressC1EPKhh+0x28>)
 8005856:	f7fd fd8a 	bl	800336e <_ZNK13Address_field9get_valueEPKhi>
 800585a:	8020      	strh	r0, [r4, #0]
	branch = field_dest_adr_branch.get_value(bytes, len);
 800585c:	4632      	mov	r2, r6
 800585e:	4629      	mov	r1, r5
 8005860:	4803      	ldr	r0, [pc, #12]	; (8005870 <_ZN12LoRa_addressC1EPKhh+0x2c>)
 8005862:	f7fd fd84 	bl	800336e <_ZNK13Address_field9get_valueEPKhi>
 8005866:	8060      	strh	r0, [r4, #2]
}
 8005868:	4620      	mov	r0, r4
 800586a:	bd70      	pop	{r4, r5, r6, pc}
 800586c:	200021c4 	.word	0x200021c4
 8005870:	200021fc 	.word	0x200021fc

08005874 <_ZN12LoRa_addressC1Ett>:
LoRa_address::LoRa_address(const uint16_t group, const uint16_t branch):group(group),branch(branch){}
 8005874:	8001      	strh	r1, [r0, #0]
 8005876:	8042      	strh	r2, [r0, #2]
 8005878:	4770      	bx	lr

0800587a <_ZN12LoRa_addressC1Em>:
LoRa_address::LoRa_address(const uint32_t adr):group((uint16_t)(adr >> 16)),branch((uint16_t)(adr)){}
 800587a:	0c0a      	lsrs	r2, r1, #16
 800587c:	8002      	strh	r2, [r0, #0]
 800587e:	8041      	strh	r1, [r0, #2]
 8005880:	4770      	bx	lr

08005882 <_ZN12LoRa_address6globalEv>:
    return ((group == LORA_GLOBAL_ADR_GROUP) && (branch == LORA_GLOBAL_ADR_BRANCH));
 8005882:	8802      	ldrh	r2, [r0, #0]
 8005884:	f240 13ff 	movw	r3, #511	; 0x1ff
 8005888:	429a      	cmp	r2, r3
 800588a:	d001      	beq.n	8005890 <_ZN12LoRa_address6globalEv+0xe>
 800588c:	2000      	movs	r0, #0
}
 800588e:	4770      	bx	lr
    return ((group == LORA_GLOBAL_ADR_GROUP) && (branch == LORA_GLOBAL_ADR_BRANCH));
 8005890:	8840      	ldrh	r0, [r0, #2]
 8005892:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005896:	4298      	cmp	r0, r3
 8005898:	bf14      	ite	ne
 800589a:	2000      	movne	r0, #0
 800589c:	2001      	moveq	r0, #1
 800589e:	4770      	bx	lr

080058a0 <_ZneRK12LoRa_addressS1_>:
    return ((left.group != right.group) || (left.branch != right.branch));
 80058a0:	8802      	ldrh	r2, [r0, #0]
 80058a2:	880b      	ldrh	r3, [r1, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d001      	beq.n	80058ac <_ZneRK12LoRa_addressS1_+0xc>
 80058a8:	2001      	movs	r0, #1
}
 80058aa:	4770      	bx	lr
    return ((left.group != right.group) || (left.branch != right.branch));
 80058ac:	8840      	ldrh	r0, [r0, #2]
 80058ae:	884b      	ldrh	r3, [r1, #2]
 80058b0:	1ac0      	subs	r0, r0, r3
 80058b2:	bf18      	it	ne
 80058b4:	2001      	movne	r0, #1
 80058b6:	4770      	bx	lr

080058b8 <_ZN15Packet_analyzerC1Ev>:
Packet_analyzer::Packet_analyzer() {
 80058b8:	4a05      	ldr	r2, [pc, #20]	; (80058d0 <_ZN15Packet_analyzerC1Ev+0x18>)
 80058ba:	6002      	str	r2, [r0, #0]
 80058bc:	2200      	movs	r2, #0
 80058be:	6142      	str	r2, [r0, #20]
 80058c0:	6182      	str	r2, [r0, #24]
    field_packet_ = nullptr;
 80058c2:	6082      	str	r2, [r0, #8]
    amt_field_packet_ = 0;
 80058c4:	81c2      	strh	r2, [r0, #14]
    field_header_ = field_packet_header;
 80058c6:	4a03      	ldr	r2, [pc, #12]	; (80058d4 <_ZN15Packet_analyzerC1Ev+0x1c>)
 80058c8:	6042      	str	r2, [r0, #4]
    amt_field_header_ = count_field_packet_header;
 80058ca:	2206      	movs	r2, #6
 80058cc:	8182      	strh	r2, [r0, #12]
}
 80058ce:	4770      	bx	lr
 80058d0:	0800be34 	.word	0x0800be34
 80058d4:	20000004 	.word	0x20000004

080058d8 <_ZN15Packet_analyzer18get_dest_adr_groupERK11LoRa_packet>:
uint16_t Packet_analyzer::get_dest_adr_group(const LoRa_packet& packet) {
 80058d8:	b508      	push	{r3, lr}
    return field_header_[num_dest_adr_group]->get_value(packet);
 80058da:	6843      	ldr	r3, [r0, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	6818      	ldr	r0, [r3, #0]
 80058e0:	f7fd fdf8 	bl	80034d4 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 80058e4:	b280      	uxth	r0, r0
 80058e6:	bd08      	pop	{r3, pc}

080058e8 <_ZN15Packet_analyzer19get_dest_adr_branchERK11LoRa_packet>:
uint16_t Packet_analyzer::get_dest_adr_branch(const LoRa_packet& packet) {
 80058e8:	b508      	push	{r3, lr}
    return field_header_[num_dest_adr_branch]->get_value(packet);
 80058ea:	6843      	ldr	r3, [r0, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	6858      	ldr	r0, [r3, #4]
 80058f0:	f7fd fdf0 	bl	80034d4 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 80058f4:	b280      	uxth	r0, r0
 80058f6:	bd08      	pop	{r3, pc}

080058f8 <_ZN15Packet_analyzer12get_dest_adrERK11LoRa_packet>:
LoRa_address Packet_analyzer::get_dest_adr(const LoRa_packet& packet) {
 80058f8:	b570      	push	{r4, r5, r6, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	4605      	mov	r5, r0
 80058fe:	460e      	mov	r6, r1
    return {get_dest_adr_group(packet), get_dest_adr_branch(packet)};
 8005900:	f7ff ffea 	bl	80058d8 <_ZN15Packet_analyzer18get_dest_adr_groupERK11LoRa_packet>
 8005904:	4604      	mov	r4, r0
 8005906:	4631      	mov	r1, r6
 8005908:	4628      	mov	r0, r5
 800590a:	f7ff ffed 	bl	80058e8 <_ZN15Packet_analyzer19get_dest_adr_branchERK11LoRa_packet>
 800590e:	2300      	movs	r3, #0
 8005910:	f364 030f 	bfi	r3, r4, #0, #16
 8005914:	b280      	uxth	r0, r0
 8005916:	f360 431f 	bfi	r3, r0, #16, #16
}
 800591a:	4618      	mov	r0, r3
 800591c:	b002      	add	sp, #8
 800591e:	bd70      	pop	{r4, r5, r6, pc}

08005920 <_ZN15Packet_analyzer18get_sour_adr_groupERK11LoRa_packet>:
uint16_t Packet_analyzer::get_sour_adr_group(const LoRa_packet& packet) {
 8005920:	b508      	push	{r3, lr}
    return field_header_[num_sour_adr_group]->get_value(packet);
 8005922:	6843      	ldr	r3, [r0, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	6898      	ldr	r0, [r3, #8]
 8005928:	f7fd fdd4 	bl	80034d4 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 800592c:	b280      	uxth	r0, r0
 800592e:	bd08      	pop	{r3, pc}

08005930 <_ZN15Packet_analyzer19get_sour_adr_branchERK11LoRa_packet>:
uint16_t Packet_analyzer::get_sour_adr_branch(const LoRa_packet& packet) {
 8005930:	b508      	push	{r3, lr}
    return field_header_[num_sour_adr_branch]->get_value(packet);
 8005932:	6843      	ldr	r3, [r0, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	68d8      	ldr	r0, [r3, #12]
 8005938:	f7fd fdcc 	bl	80034d4 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 800593c:	b280      	uxth	r0, r0
 800593e:	bd08      	pop	{r3, pc}

08005940 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>:
LoRa_address Packet_analyzer::get_sour_adr(const LoRa_packet& packet) {
 8005940:	b570      	push	{r4, r5, r6, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	4605      	mov	r5, r0
 8005946:	460e      	mov	r6, r1
    return {get_sour_adr_group(packet), get_sour_adr_branch(packet)};
 8005948:	f7ff ffea 	bl	8005920 <_ZN15Packet_analyzer18get_sour_adr_groupERK11LoRa_packet>
 800594c:	4604      	mov	r4, r0
 800594e:	4631      	mov	r1, r6
 8005950:	4628      	mov	r0, r5
 8005952:	f7ff ffed 	bl	8005930 <_ZN15Packet_analyzer19get_sour_adr_branchERK11LoRa_packet>
 8005956:	2300      	movs	r3, #0
 8005958:	f364 030f 	bfi	r3, r4, #0, #16
 800595c:	b280      	uxth	r0, r0
 800595e:	f360 431f 	bfi	r3, r0, #16, #16
}
 8005962:	4618      	mov	r0, r3
 8005964:	b002      	add	sp, #8
 8005966:	bd70      	pop	{r4, r5, r6, pc}

08005968 <_ZN15Packet_analyzer15get_packet_typeERK11LoRa_packet>:
Packet_Type Packet_analyzer::get_packet_type(const LoRa_packet& packet) {
 8005968:	b508      	push	{r3, lr}
    return (Packet_Type)field_header_[num_type]->get_value(packet);
 800596a:	6843      	ldr	r3, [r0, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	6918      	ldr	r0, [r3, #16]
 8005970:	f7fd fdb0 	bl	80034d4 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 8005974:	bd08      	pop	{r3, pc}

08005976 <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>:
uint16_t Packet_analyzer::get_packet_number(const LoRa_packet& packet) {
 8005976:	b508      	push	{r3, lr}
    return field_header_[num_number]->get_value(packet);
 8005978:	6843      	ldr	r3, [r0, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	6958      	ldr	r0, [r3, #20]
 800597e:	f7fd fda9 	bl	80034d4 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 8005982:	b280      	uxth	r0, r0
 8005984:	bd08      	pop	{r3, pc}

08005986 <_ZN15Packet_analyzer18set_dest_adr_groupER11LoRa_packett>:
bool Packet_analyzer::set_dest_adr_group(LoRa_packet& packet, uint16_t adr) {
 8005986:	b510      	push	{r4, lr}
 8005988:	4614      	mov	r4, r2
    return field_header_[num_dest_adr_group]->set_value(adr, packet);
 800598a:	6840      	ldr	r0, [r0, #4]
 800598c:	2300      	movs	r3, #0
 800598e:	460a      	mov	r2, r1
 8005990:	4621      	mov	r1, r4
 8005992:	6800      	ldr	r0, [r0, #0]
 8005994:	f7fd fe00 	bl	8003598 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
}
 8005998:	bd10      	pop	{r4, pc}

0800599a <_ZN15Packet_analyzer19set_dest_adr_branchER11LoRa_packett>:
bool Packet_analyzer::set_dest_adr_branch(LoRa_packet& packet, uint16_t adr) {
 800599a:	b510      	push	{r4, lr}
 800599c:	4614      	mov	r4, r2
    return field_header_[num_dest_adr_branch]->set_value(adr, packet);
 800599e:	6840      	ldr	r0, [r0, #4]
 80059a0:	2300      	movs	r3, #0
 80059a2:	460a      	mov	r2, r1
 80059a4:	4621      	mov	r1, r4
 80059a6:	6840      	ldr	r0, [r0, #4]
 80059a8:	f7fd fdf6 	bl	8003598 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
}
 80059ac:	bd10      	pop	{r4, pc}

080059ae <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address>:
bool Packet_analyzer::set_dest_adr(LoRa_packet& packet, LoRa_address adr) {
 80059ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059b0:	b083      	sub	sp, #12
 80059b2:	4604      	mov	r4, r0
 80059b4:	460d      	mov	r5, r1
 80059b6:	9201      	str	r2, [sp, #4]
    uint16_t buffer = get_dest_adr_group(packet);
 80059b8:	f7ff ff8e 	bl	80058d8 <_ZN15Packet_analyzer18get_dest_adr_groupERK11LoRa_packet>
 80059bc:	4607      	mov	r7, r0
    if(set_dest_adr_group(packet, adr.group))
 80059be:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80059c2:	4629      	mov	r1, r5
 80059c4:	4620      	mov	r0, r4
 80059c6:	f7ff ffde 	bl	8005986 <_ZN15Packet_analyzer18set_dest_adr_groupER11LoRa_packett>
 80059ca:	4606      	mov	r6, r0
 80059cc:	b110      	cbz	r0, 80059d4 <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address+0x26>
}
 80059ce:	4630      	mov	r0, r6
 80059d0:	b003      	add	sp, #12
 80059d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(set_dest_adr_branch(packet, adr.branch)) {
 80059d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80059d8:	4629      	mov	r1, r5
 80059da:	4620      	mov	r0, r4
 80059dc:	f7ff ffdd 	bl	800599a <_ZN15Packet_analyzer19set_dest_adr_branchER11LoRa_packett>
 80059e0:	4606      	mov	r6, r0
 80059e2:	2800      	cmp	r0, #0
 80059e4:	d0f3      	beq.n	80059ce <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address+0x20>
        set_dest_adr_group(packet, buffer);
 80059e6:	463a      	mov	r2, r7
 80059e8:	4629      	mov	r1, r5
 80059ea:	4620      	mov	r0, r4
 80059ec:	f7ff ffcb 	bl	8005986 <_ZN15Packet_analyzer18set_dest_adr_groupER11LoRa_packett>
        return true;
 80059f0:	e7ed      	b.n	80059ce <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address+0x20>

080059f2 <_ZN15Packet_analyzer18set_sour_adr_groupER11LoRa_packett>:
bool Packet_analyzer::set_sour_adr_group(LoRa_packet& packet, uint16_t adr) {
 80059f2:	b510      	push	{r4, lr}
 80059f4:	4614      	mov	r4, r2
    return field_header_[num_sour_adr_group]->set_value(adr, packet);
 80059f6:	6840      	ldr	r0, [r0, #4]
 80059f8:	2300      	movs	r3, #0
 80059fa:	460a      	mov	r2, r1
 80059fc:	4621      	mov	r1, r4
 80059fe:	6880      	ldr	r0, [r0, #8]
 8005a00:	f7fd fdca 	bl	8003598 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
}
 8005a04:	bd10      	pop	{r4, pc}

08005a06 <_ZN15Packet_analyzer19set_sour_adr_branchER11LoRa_packett>:
bool Packet_analyzer::set_sour_adr_branch(LoRa_packet& packet, uint16_t adr) {
 8005a06:	b510      	push	{r4, lr}
 8005a08:	4614      	mov	r4, r2
    return field_header_[num_sour_adr_branch]->set_value(adr, packet);
 8005a0a:	6840      	ldr	r0, [r0, #4]
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	460a      	mov	r2, r1
 8005a10:	4621      	mov	r1, r4
 8005a12:	68c0      	ldr	r0, [r0, #12]
 8005a14:	f7fd fdc0 	bl	8003598 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
}
 8005a18:	bd10      	pop	{r4, pc}

08005a1a <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address>:
bool Packet_analyzer::set_sour_adr(LoRa_packet& packet, LoRa_address adr) {
 8005a1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a1c:	b083      	sub	sp, #12
 8005a1e:	4604      	mov	r4, r0
 8005a20:	460d      	mov	r5, r1
 8005a22:	9201      	str	r2, [sp, #4]
    uint16_t buffer = get_sour_adr_group(packet);
 8005a24:	f7ff ff7c 	bl	8005920 <_ZN15Packet_analyzer18get_sour_adr_groupERK11LoRa_packet>
 8005a28:	4607      	mov	r7, r0
    if(set_sour_adr_group(packet, adr.group))
 8005a2a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8005a2e:	4629      	mov	r1, r5
 8005a30:	4620      	mov	r0, r4
 8005a32:	f7ff ffde 	bl	80059f2 <_ZN15Packet_analyzer18set_sour_adr_groupER11LoRa_packett>
 8005a36:	4606      	mov	r6, r0
 8005a38:	b110      	cbz	r0, 8005a40 <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address+0x26>
}
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	b003      	add	sp, #12
 8005a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(set_sour_adr_branch(packet, adr.branch)) {
 8005a40:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005a44:	4629      	mov	r1, r5
 8005a46:	4620      	mov	r0, r4
 8005a48:	f7ff ffdd 	bl	8005a06 <_ZN15Packet_analyzer19set_sour_adr_branchER11LoRa_packett>
 8005a4c:	4606      	mov	r6, r0
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	d0f3      	beq.n	8005a3a <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address+0x20>
        set_sour_adr_group(packet, buffer);
 8005a52:	463a      	mov	r2, r7
 8005a54:	4629      	mov	r1, r5
 8005a56:	4620      	mov	r0, r4
 8005a58:	f7ff ffcb 	bl	80059f2 <_ZN15Packet_analyzer18set_sour_adr_groupER11LoRa_packett>
        return true;
 8005a5c:	e7ed      	b.n	8005a3a <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address+0x20>

08005a5e <_ZN15Packet_analyzer15set_packet_typeER11LoRa_packet11Packet_Type>:
bool Packet_analyzer::set_packet_type(LoRa_packet& packet, Packet_Type pac_type) {
 8005a5e:	b510      	push	{r4, lr}
 8005a60:	4614      	mov	r4, r2
    return  field_header_[num_type]->set_value((uint32_t)pac_type, packet);
 8005a62:	6840      	ldr	r0, [r0, #4]
 8005a64:	2300      	movs	r3, #0
 8005a66:	460a      	mov	r2, r1
 8005a68:	4621      	mov	r1, r4
 8005a6a:	6900      	ldr	r0, [r0, #16]
 8005a6c:	f7fd fd94 	bl	8003598 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
}
 8005a70:	bd10      	pop	{r4, pc}

08005a72 <_ZN15Packet_analyzer17set_packet_numberER11LoRa_packett>:
bool Packet_analyzer::set_packet_number(LoRa_packet& packet, uint16_t num) {
 8005a72:	b510      	push	{r4, lr}
 8005a74:	4614      	mov	r4, r2
    return field_header_[num_number]->set_value(num, packet);
 8005a76:	6840      	ldr	r0, [r0, #4]
 8005a78:	2300      	movs	r3, #0
 8005a7a:	460a      	mov	r2, r1
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	6940      	ldr	r0, [r0, #20]
 8005a80:	f7fd fd8a 	bl	8003598 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
}
 8005a84:	bd10      	pop	{r4, pc}
	...

08005a88 <_ZN17Packet_Connection11set_commandER11LoRa_packeth>:
    if (!(com < CONNECT_COMMAND_DATA))
 8005a88:	2a0c      	cmp	r2, #12
 8005a8a:	d901      	bls.n	8005a90 <_ZN17Packet_Connection11set_commandER11LoRa_packeth+0x8>
        return 1;
 8005a8c:	2001      	movs	r0, #1
}
 8005a8e:	4770      	bx	lr
uint8_t Packet_Connection::set_command(LoRa_packet& packet, uint8_t com) {
 8005a90:	b538      	push	{r3, r4, r5, lr}
 8005a92:	4614      	mov	r4, r2
 8005a94:	460a      	mov	r2, r1
 8005a96:	4605      	mov	r5, r0
    command_ = com;
 8005a98:	7704      	strb	r4, [r0, #28]
    last_filled_byte = PACKET_HEADER_SIZE; // Команда всегда находится сразу после шапки
 8005a9a:	2309      	movs	r3, #9
 8005a9c:	6143      	str	r3, [r0, #20]
    error = field_byte.set_value(command_, packet, last_filled_byte);
 8005a9e:	4621      	mov	r1, r4
 8005aa0:	4804      	ldr	r0, [pc, #16]	; (8005ab4 <_ZN17Packet_Connection11set_commandER11LoRa_packeth+0x2c>)
 8005aa2:	f7fd fd79 	bl	8003598 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
    if (error)
 8005aa6:	b918      	cbnz	r0, 8005ab0 <_ZN17Packet_Connection11set_commandER11LoRa_packeth+0x28>
    ++last_filled_byte;
 8005aa8:	696b      	ldr	r3, [r5, #20]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	616b      	str	r3, [r5, #20]
}
 8005aae:	bd38      	pop	{r3, r4, r5, pc}
        return 2;
 8005ab0:	2002      	movs	r0, #2
 8005ab2:	e7fc      	b.n	8005aae <_ZN17Packet_Connection11set_commandER11LoRa_packeth+0x26>
 8005ab4:	200020dc 	.word	0x200020dc

08005ab8 <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh>:
uint8_t Packet_Connection::get_command(const LoRa_packet& packet, uint8_t *com) {
 8005ab8:	b538      	push	{r3, r4, r5, lr}
    last_read_byte = PACKET_HEADER_SIZE; // Команда всегда находится сразу после шапки
 8005aba:	2309      	movs	r3, #9
 8005abc:	6183      	str	r3, [r0, #24]
    if(com == nullptr)
 8005abe:	b19a      	cbz	r2, 8005ae8 <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh+0x30>
 8005ac0:	4615      	mov	r5, r2
 8005ac2:	4604      	mov	r4, r0
    command_ = field_byte.get_value(packet, last_read_byte);
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4809      	ldr	r0, [pc, #36]	; (8005aec <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh+0x34>)
 8005ac8:	f7fd fd04 	bl	80034d4 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005acc:	b2c0      	uxtb	r0, r0
 8005ace:	7720      	strb	r0, [r4, #28]
    ++last_read_byte;
 8005ad0:	69a3      	ldr	r3, [r4, #24]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	61a3      	str	r3, [r4, #24]
    if (!(command_ < CONNECT_COMMAND_DATA)) {
 8005ad6:	280c      	cmp	r0, #12
 8005ad8:	d802      	bhi.n	8005ae0 <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh+0x28>
    *com = command_;
 8005ada:	7028      	strb	r0, [r5, #0]
    return 0;
 8005adc:	2000      	movs	r0, #0
 8005ade:	e004      	b.n	8005aea <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh+0x32>
        command_ = 0xFF;
 8005ae0:	23ff      	movs	r3, #255	; 0xff
 8005ae2:	7723      	strb	r3, [r4, #28]
        return 2;
 8005ae4:	2002      	movs	r0, #2
 8005ae6:	e000      	b.n	8005aea <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh+0x32>
        return 1;
 8005ae8:	2001      	movs	r0, #1
}
 8005aea:	bd38      	pop	{r3, r4, r5, pc}
 8005aec:	200020dc 	.word	0x200020dc

08005af0 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>:
    size_data = 0;
 8005af0:	2000      	movs	r0, #0
 8005af2:	7018      	strb	r0, [r3, #0]
    if (!(*com < CONNECT_COMMAND_DATA)) {
 8005af4:	7809      	ldrb	r1, [r1, #0]
 8005af6:	290c      	cmp	r1, #12
 8005af8:	d825      	bhi.n	8005b46 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x56>
    if (connect_com_data[*com] != 0xFF) {
 8005afa:	4817      	ldr	r0, [pc, #92]	; (8005b58 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x68>)
 8005afc:	5c40      	ldrb	r0, [r0, r1]
 8005afe:	28ff      	cmp	r0, #255	; 0xff
 8005b00:	d002      	beq.n	8005b08 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x18>
        size_data = connect_com_data[*com];
 8005b02:	7018      	strb	r0, [r3, #0]
    return 0;
 8005b04:	2000      	movs	r0, #0
 8005b06:	4770      	bx	lr
        if(len == nullptr)
 8005b08:	b1fa      	cbz	r2, 8005b4a <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x5a>
        switch (*com)
 8005b0a:	3901      	subs	r1, #1
 8005b0c:	290b      	cmp	r1, #11
 8005b0e:	d81e      	bhi.n	8005b4e <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x5e>
 8005b10:	e8df f001 	tbb	[pc, r1]
 8005b14:	1d1d1d08 	.word	0x1d1d1d08
 8005b18:	1d1d101d 	.word	0x1d1d101d
 8005b1c:	151d0606 	.word	0x151d0606
    return 0;
 8005b20:	2000      	movs	r0, #0
 8005b22:	4770      	bx	lr
            if ((*len != 1) && (*len != 2))
 8005b24:	7811      	ldrb	r1, [r2, #0]
 8005b26:	1e4a      	subs	r2, r1, #1
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	2a01      	cmp	r2, #1
 8005b2c:	d811      	bhi.n	8005b52 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x62>
            size_data = *len;
 8005b2e:	7019      	strb	r1, [r3, #0]
    return 0;
 8005b30:	2000      	movs	r0, #0
            break;
 8005b32:	4770      	bx	lr
            size_data = *len * 2;
 8005b34:	7812      	ldrb	r2, [r2, #0]
 8005b36:	0052      	lsls	r2, r2, #1
 8005b38:	701a      	strb	r2, [r3, #0]
    return 0;
 8005b3a:	2000      	movs	r0, #0
            break;
 8005b3c:	4770      	bx	lr
            size_data = *len;
 8005b3e:	7812      	ldrb	r2, [r2, #0]
 8005b40:	701a      	strb	r2, [r3, #0]
    return 0;
 8005b42:	2000      	movs	r0, #0
            break;
 8005b44:	4770      	bx	lr
        return 1;
 8005b46:	2001      	movs	r0, #1
 8005b48:	4770      	bx	lr
            return 2;
 8005b4a:	2002      	movs	r0, #2
 8005b4c:	4770      	bx	lr
            return 4;
 8005b4e:	2004      	movs	r0, #4
 8005b50:	4770      	bx	lr
                return 3;
 8005b52:	2003      	movs	r0, #3
}
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	0800bde8 	.word	0x0800bde8

08005b5c <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh>:
uint8_t Packet_Connection::set_data(LoRa_packet& packet, uint8_t *data, uint8_t len) {
 8005b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b60:	b085      	sub	sp, #20
 8005b62:	4604      	mov	r4, r0
 8005b64:	460e      	mov	r6, r1
 8005b66:	4615      	mov	r5, r2
 8005b68:	f88d 3007 	strb.w	r3, [sp, #7]
    error = get_size_by_data(&command_, &len, len_data);
 8005b6c:	f10d 030f 	add.w	r3, sp, #15
 8005b70:	f10d 0207 	add.w	r2, sp, #7
 8005b74:	f100 011c 	add.w	r1, r0, #28
 8005b78:	f7ff ffba 	bl	8005af0 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
    if(error)
 8005b7c:	4681      	mov	r9, r0
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d150      	bne.n	8005c24 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xc8>
    if (connect_com_data[command_] == 0xFF) {
 8005b82:	7f23      	ldrb	r3, [r4, #28]
 8005b84:	4a29      	ldr	r2, [pc, #164]	; (8005c2c <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xd0>)
 8005b86:	5cd2      	ldrb	r2, [r2, r3]
 8005b88:	2aff      	cmp	r2, #255	; 0xff
 8005b8a:	d018      	beq.n	8005bbe <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0x62>
    for (int i = 0; i < len_data; ++i) {
 8005b8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d047      	beq.n	8005c24 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xc8>
 8005b94:	46a8      	mov	r8, r5
        error = field_byte.set_value(data[i], packet, last_filled_byte);
 8005b96:	4f26      	ldr	r7, [pc, #152]	; (8005c30 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xd4>)
 8005b98:	7d23      	ldrb	r3, [r4, #20]
 8005b9a:	4632      	mov	r2, r6
 8005b9c:	f815 1b01 	ldrb.w	r1, [r5], #1
 8005ba0:	4638      	mov	r0, r7
 8005ba2:	f7fd fcf9 	bl	8003598 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
        ++last_filled_byte;
 8005ba6:	6963      	ldr	r3, [r4, #20]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	6163      	str	r3, [r4, #20]
        if (error)
 8005bac:	2800      	cmp	r0, #0
 8005bae:	d137      	bne.n	8005c20 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xc4>
    for (int i = 0; i < len_data; ++i) {
 8005bb0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8005bb4:	eba5 0308 	sub.w	r3, r5, r8
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	dced      	bgt.n	8005b98 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0x3c>
 8005bbc:	e032      	b.n	8005c24 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xc8>
        switch (command_) {
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	2b0b      	cmp	r3, #11
 8005bc2:	d82a      	bhi.n	8005c1a <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xbe>
 8005bc4:	a201      	add	r2, pc, #4	; (adr r2, 8005bcc <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0x70>)
 8005bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bca:	bf00      	nop
 8005bcc:	08005b8d 	.word	0x08005b8d
 8005bd0:	08005c1b 	.word	0x08005c1b
 8005bd4:	08005c1b 	.word	0x08005c1b
 8005bd8:	08005c1b 	.word	0x08005c1b
 8005bdc:	08005c1b 	.word	0x08005c1b
 8005be0:	08005bfd 	.word	0x08005bfd
 8005be4:	08005c1b 	.word	0x08005c1b
 8005be8:	08005c1b 	.word	0x08005c1b
 8005bec:	08005b8d 	.word	0x08005b8d
 8005bf0:	08005b8d 	.word	0x08005b8d
 8005bf4:	08005c1b 	.word	0x08005c1b
 8005bf8:	08005bfd 	.word	0x08005bfd
            error = field_byte.set_value(len, packet, last_filled_byte);
 8005bfc:	7d23      	ldrb	r3, [r4, #20]
 8005bfe:	4632      	mov	r2, r6
 8005c00:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005c04:	480a      	ldr	r0, [pc, #40]	; (8005c30 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xd4>)
 8005c06:	f7fd fcc7 	bl	8003598 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            ++last_filled_byte;
 8005c0a:	6963      	ldr	r3, [r4, #20]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	6163      	str	r3, [r4, #20]
            if (error)
 8005c10:	2800      	cmp	r0, #0
 8005c12:	d0bb      	beq.n	8005b8c <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0x30>
                return 4;
 8005c14:	f04f 0904 	mov.w	r9, #4
 8005c18:	e004      	b.n	8005c24 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xc8>
            return 6;
 8005c1a:	f04f 0906 	mov.w	r9, #6
 8005c1e:	e001      	b.n	8005c24 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xc8>
            return 8;
 8005c20:	f04f 0908 	mov.w	r9, #8
}
 8005c24:	4648      	mov	r0, r9
 8005c26:	b005      	add	sp, #20
 8005c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c2c:	0800bde8 	.word	0x0800bde8
 8005c30:	200020dc 	.word	0x200020dc

08005c34 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>:
uint8_t Packet_Connection::set_packet_data(LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 8005c34:	b570      	push	{r4, r5, r6, lr}
 8005c36:	4604      	mov	r4, r0
 8005c38:	460d      	mov	r5, r1
 8005c3a:	461e      	mov	r6, r3
    error = set_command(packet, *com);
 8005c3c:	7812      	ldrb	r2, [r2, #0]
 8005c3e:	f7ff ff23 	bl	8005a88 <_ZN17Packet_Connection11set_commandER11LoRa_packeth>
    if(error)
 8005c42:	4603      	mov	r3, r0
 8005c44:	b108      	cbz	r0, 8005c4a <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_+0x16>
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	bd70      	pop	{r4, r5, r6, pc}
    error = set_data(packet, data, *len);
 8005c4a:	9b04      	ldr	r3, [sp, #16]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	4632      	mov	r2, r6
 8005c50:	4629      	mov	r1, r5
 8005c52:	4620      	mov	r0, r4
 8005c54:	f7ff ff82 	bl	8005b5c <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh>
 8005c58:	4603      	mov	r3, r0
    return error;
 8005c5a:	e7f4      	b.n	8005c46 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_+0x12>

08005c5c <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_>:
uint8_t Packet_Connection::get_data(const LoRa_packet& packet, uint8_t *data, uint8_t *len) {
 8005c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c60:	b083      	sub	sp, #12
    if(len == nullptr)
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d071      	beq.n	8005d4a <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xee>
 8005c66:	4698      	mov	r8, r3
 8005c68:	4617      	mov	r7, r2
 8005c6a:	460e      	mov	r6, r1
 8005c6c:	4604      	mov	r4, r0
    error = get_size_by_data(&command_, nullptr, len_data);
 8005c6e:	f100 091c 	add.w	r9, r0, #28
 8005c72:	f10d 0307 	add.w	r3, sp, #7
 8005c76:	2200      	movs	r2, #0
 8005c78:	4649      	mov	r1, r9
 8005c7a:	f7ff ff39 	bl	8005af0 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
 8005c7e:	4605      	mov	r5, r0
    if(error == 2) {
 8005c80:	2802      	cmp	r0, #2
 8005c82:	d022      	beq.n	8005cca <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x6e>
    else if(error == 3) {
 8005c84:	2803      	cmp	r0, #3
 8005c86:	d047      	beq.n	8005d18 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xbc>
        *len = len_data;
 8005c88:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005c8c:	f888 3000 	strb.w	r3, [r8]
    if(error)
 8005c90:	2d00      	cmp	r5, #0
 8005c92:	d15b      	bne.n	8005d4c <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xf0>
    if(len_data > 0) {
 8005c94:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8005c98:	2d00      	cmp	r5, #0
 8005c9a:	d057      	beq.n	8005d4c <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xf0>
        if(data == nullptr)
 8005c9c:	2f00      	cmp	r7, #0
 8005c9e:	d059      	beq.n	8005d54 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xf8>
 8005ca0:	1e7d      	subs	r5, r7, #1
        for (int i = 0; i < len_data; ++i) {
 8005ca2:	2700      	movs	r7, #0
            data[i] = field_byte.get_value(packet, last_read_byte);
 8005ca4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8005d58 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xfc>
 8005ca8:	7e22      	ldrb	r2, [r4, #24]
 8005caa:	4631      	mov	r1, r6
 8005cac:	4640      	mov	r0, r8
 8005cae:	f7fd fc11 	bl	80034d4 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005cb2:	f805 0f01 	strb.w	r0, [r5, #1]!
            ++last_read_byte;
 8005cb6:	69a3      	ldr	r3, [r4, #24]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	61a3      	str	r3, [r4, #24]
        for (int i = 0; i < len_data; ++i) {
 8005cbc:	3701      	adds	r7, #1
 8005cbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005cc2:	42bb      	cmp	r3, r7
 8005cc4:	dcf0      	bgt.n	8005ca8 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x4c>
    return 0;
 8005cc6:	2500      	movs	r5, #0
 8005cc8:	e040      	b.n	8005d4c <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xf0>
        if(command_ == 0x01) {
 8005cca:	7f23      	ldrb	r3, [r4, #28]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d01a      	beq.n	8005d06 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xaa>
            *len = field_byte.get_value(packet, last_read_byte);
 8005cd0:	7e22      	ldrb	r2, [r4, #24]
 8005cd2:	4631      	mov	r1, r6
 8005cd4:	4820      	ldr	r0, [pc, #128]	; (8005d58 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xfc>)
 8005cd6:	f7fd fbfd 	bl	80034d4 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005cda:	f888 0000 	strb.w	r0, [r8]
            ++last_read_byte;
 8005cde:	69a3      	ldr	r3, [r4, #24]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	61a3      	str	r3, [r4, #24]
            error = get_size_by_data(&command_, len, len_data);
 8005ce4:	f10d 0307 	add.w	r3, sp, #7
 8005ce8:	4642      	mov	r2, r8
 8005cea:	4649      	mov	r1, r9
 8005cec:	4620      	mov	r0, r4
 8005cee:	f7ff feff 	bl	8005af0 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
 8005cf2:	4605      	mov	r5, r0
            if (command_ == 0x06) {
 8005cf4:	7f23      	ldrb	r3, [r4, #28]
 8005cf6:	2b06      	cmp	r3, #6
                *len = len_data/2;
 8005cf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005cfc:	bf08      	it	eq
 8005cfe:	085b      	lsreq	r3, r3, #1
                *len = len_data;
 8005d00:	f888 3000 	strb.w	r3, [r8]
 8005d04:	e7c4      	b.n	8005c90 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x34>
            error = get_size_by_data(&command_, len, len_data);
 8005d06:	f10d 0307 	add.w	r3, sp, #7
 8005d0a:	4642      	mov	r2, r8
 8005d0c:	4649      	mov	r1, r9
 8005d0e:	4620      	mov	r0, r4
 8005d10:	f7ff feee 	bl	8005af0 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
 8005d14:	4605      	mov	r5, r0
 8005d16:	e7bb      	b.n	8005c90 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x34>
        if (((packet.get_len() - last_read_byte) == 1) || ((packet.get_len() - last_read_byte) == 2)) {
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f7fe fc93 	bl	8004644 <_ZNK11LoRa_packet7get_lenEv>
 8005d1e:	69a3      	ldr	r3, [r4, #24]
 8005d20:	1ac0      	subs	r0, r0, r3
 8005d22:	2801      	cmp	r0, #1
 8005d24:	d006      	beq.n	8005d34 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xd8>
 8005d26:	4630      	mov	r0, r6
 8005d28:	f7fe fc8c 	bl	8004644 <_ZNK11LoRa_packet7get_lenEv>
 8005d2c:	69a3      	ldr	r3, [r4, #24]
 8005d2e:	1ac0      	subs	r0, r0, r3
 8005d30:	2802      	cmp	r0, #2
 8005d32:	d10b      	bne.n	8005d4c <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xf0>
            len_data = packet.get_len() - last_read_byte;
 8005d34:	4630      	mov	r0, r6
 8005d36:	f7fe fc85 	bl	8004644 <_ZNK11LoRa_packet7get_lenEv>
 8005d3a:	69a3      	ldr	r3, [r4, #24]
 8005d3c:	1ac0      	subs	r0, r0, r3
 8005d3e:	b2c0      	uxtb	r0, r0
 8005d40:	f88d 0007 	strb.w	r0, [sp, #7]
            *len = len_data;
 8005d44:	f888 0000 	strb.w	r0, [r8]
 8005d48:	e7a4      	b.n	8005c94 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x38>
        return 1;
 8005d4a:	2501      	movs	r5, #1
}
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	b003      	add	sp, #12
 8005d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return 6;
 8005d54:	2506      	movs	r5, #6
 8005d56:	e7f9      	b.n	8005d4c <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xf0>
 8005d58:	200020dc 	.word	0x200020dc

08005d5c <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>:
uint8_t Packet_Connection::get_packet_data(const LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	4604      	mov	r4, r0
 8005d60:	460d      	mov	r5, r1
 8005d62:	461e      	mov	r6, r3
    error = get_command(packet, com);
 8005d64:	f7ff fea8 	bl	8005ab8 <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh>
    if(error)
 8005d68:	4603      	mov	r3, r0
 8005d6a:	b108      	cbz	r0, 8005d70 <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_+0x14>
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	bd70      	pop	{r4, r5, r6, pc}
    error = get_data(packet, data, len);
 8005d70:	9b04      	ldr	r3, [sp, #16]
 8005d72:	4632      	mov	r2, r6
 8005d74:	4629      	mov	r1, r5
 8005d76:	4620      	mov	r0, r4
 8005d78:	f7ff ff70 	bl	8005c5c <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_>
 8005d7c:	4603      	mov	r3, r0
    return error;
 8005d7e:	e7f5      	b.n	8005d6c <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_+0x10>

08005d80 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh>:
uint8_t Packet_Connection::get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data) {
 8005d80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d84:	b083      	sub	sp, #12
 8005d86:	4604      	mov	r4, r0
 8005d88:	4689      	mov	r9, r1
 8005d8a:	4617      	mov	r7, r2
    error = get_command(packet, &command_);
 8005d8c:	f100 051c 	add.w	r5, r0, #28
 8005d90:	462a      	mov	r2, r5
 8005d92:	f7ff fe91 	bl	8005ab8 <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh>
    if(error)
 8005d96:	4606      	mov	r6, r0
 8005d98:	b118      	cbz	r0, 8005da2 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x22>
}
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	b003      	add	sp, #12
 8005d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    error = get_size_by_data(&command_, nullptr, size_data);
 8005da2:	463b      	mov	r3, r7
 8005da4:	2200      	movs	r2, #0
 8005da6:	4629      	mov	r1, r5
 8005da8:	4620      	mov	r0, r4
 8005daa:	f7ff fea1 	bl	8005af0 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
 8005dae:	4680      	mov	r8, r0
    if(error == 2) {
 8005db0:	2802      	cmp	r0, #2
 8005db2:	d004      	beq.n	8005dbe <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x3e>
    if(error == 3) {
 8005db4:	f1b8 0f03 	cmp.w	r8, #3
 8005db8:	d012      	beq.n	8005de0 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x60>
 8005dba:	4646      	mov	r6, r8
 8005dbc:	e7ed      	b.n	8005d9a <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x1a>
        uint8_t len = field_byte.get_value(packet, last_read_byte);
 8005dbe:	7e22      	ldrb	r2, [r4, #24]
 8005dc0:	4649      	mov	r1, r9
 8005dc2:	4813      	ldr	r0, [pc, #76]	; (8005e10 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x90>)
 8005dc4:	f7fd fb86 	bl	80034d4 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005dc8:	aa02      	add	r2, sp, #8
 8005dca:	f802 0d01 	strb.w	r0, [r2, #-1]!
        error = get_size_by_data(&command_, &len, size_data);
 8005dce:	463b      	mov	r3, r7
 8005dd0:	4629      	mov	r1, r5
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	f7ff fe8c 	bl	8005af0 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
 8005dd8:	4680      	mov	r8, r0
        last_read_byte = PACKET_HEADER_SIZE + 1;
 8005dda:	230a      	movs	r3, #10
 8005ddc:	61a3      	str	r3, [r4, #24]
 8005dde:	e7e9      	b.n	8005db4 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x34>
        if (((packet.get_len() - last_read_byte) == 1) || ((packet.get_len() - last_read_byte) == 2)) {
 8005de0:	4648      	mov	r0, r9
 8005de2:	f7fe fc2f 	bl	8004644 <_ZNK11LoRa_packet7get_lenEv>
 8005de6:	69a3      	ldr	r3, [r4, #24]
 8005de8:	1ac0      	subs	r0, r0, r3
 8005dea:	2801      	cmp	r0, #1
 8005dec:	d008      	beq.n	8005e00 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x80>
 8005dee:	4648      	mov	r0, r9
 8005df0:	f7fe fc28 	bl	8004644 <_ZNK11LoRa_packet7get_lenEv>
 8005df4:	69a3      	ldr	r3, [r4, #24]
 8005df6:	1ac0      	subs	r0, r0, r3
 8005df8:	2802      	cmp	r0, #2
 8005dfa:	d001      	beq.n	8005e00 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x80>
 8005dfc:	4646      	mov	r6, r8
 8005dfe:	e7cc      	b.n	8005d9a <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x1a>
            size_data = packet.get_len() - last_read_byte;
 8005e00:	4648      	mov	r0, r9
 8005e02:	f7fe fc1f 	bl	8004644 <_ZNK11LoRa_packet7get_lenEv>
 8005e06:	69a3      	ldr	r3, [r4, #24]
 8005e08:	1ac0      	subs	r0, r0, r3
 8005e0a:	7038      	strb	r0, [r7, #0]
 8005e0c:	e7c5      	b.n	8005d9a <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x1a>
 8005e0e:	bf00      	nop
 8005e10:	200020dc 	.word	0x200020dc

08005e14 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm>:
uint8_t Packet_Sensor::set_packet_data(LoRa_packet& packet, uint8_t* amt, uint8_t* param, uint8_t* id, uint32_t* data) {
 8005e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	9101      	str	r1, [sp, #4]
 8005e1e:	4615      	mov	r5, r2
 8005e20:	461e      	mov	r6, r3
    last_filled_byte = PACKET_HEADER_SIZE;
 8005e22:	2309      	movs	r3, #9
 8005e24:	6143      	str	r3, [r0, #20]
    if (field_bit[0].get_value(&setting_) != 0) {
 8005e26:	f100 0710 	add.w	r7, r0, #16
 8005e2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e2e:	4639      	mov	r1, r7
 8005e30:	4844      	ldr	r0, [pc, #272]	; (8005f44 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x130>)
 8005e32:	f7fd fa9c 	bl	800336e <_ZNK13Address_field9get_valueEPKhi>
 8005e36:	b960      	cbnz	r0, 8005e52 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x3e>
    for (int i = 0; i < count; ++i) {
 8005e38:	f04f 0b01 	mov.w	fp, #1
        if (!(param[i] < SENSOR_PARAM_DATA)) {
 8005e3c:	7833      	ldrb	r3, [r6, #0]
 8005e3e:	2b0c      	cmp	r3, #12
 8005e40:	d816      	bhi.n	8005e70 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x5c>
    for (int i = 0; i < count; ++i) {
 8005e42:	2500      	movs	r5, #0
        if (field_bit[1].get_value(&setting_) != 1) {
 8005e44:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8005f44 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x130>
 8005e48:	f108 091c 	add.w	r9, r8, #28
        switch (sensor_param_data[param_]) {
 8005e4c:	f8df a104 	ldr.w	sl, [pc, #260]	; 8005f54 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x140>
 8005e50:	e03f      	b.n	8005ed2 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xbe>
        field_byte.set_value(*amt, packet, last_filled_byte);
 8005e52:	7d23      	ldrb	r3, [r4, #20]
 8005e54:	9a01      	ldr	r2, [sp, #4]
 8005e56:	7829      	ldrb	r1, [r5, #0]
 8005e58:	483b      	ldr	r0, [pc, #236]	; (8005f48 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x134>)
 8005e5a:	f7fd fb9d 	bl	8003598 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
        count = *amt;
 8005e5e:	782a      	ldrb	r2, [r5, #0]
        ++last_filled_byte;
 8005e60:	6963      	ldr	r3, [r4, #20]
 8005e62:	3301      	adds	r3, #1
 8005e64:	6163      	str	r3, [r4, #20]
    for (int i = 0; i < count; ++i) {
 8005e66:	4693      	mov	fp, r2
 8005e68:	2a00      	cmp	r2, #0
 8005e6a:	d1e7      	bne.n	8005e3c <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x28>
    return 0;
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	e04c      	b.n	8005f0a <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xf6>
            param_ = 0xFF;
 8005e70:	23ff      	movs	r3, #255	; 0xff
 8005e72:	7723      	strb	r3, [r4, #28]
            return 2;
 8005e74:	2002      	movs	r0, #2
 8005e76:	e048      	b.n	8005f0a <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xf6>
            error = field_byte.set_value(param_, packet, last_filled_byte);
 8005e78:	7d23      	ldrb	r3, [r4, #20]
 8005e7a:	9a01      	ldr	r2, [sp, #4]
 8005e7c:	7f21      	ldrb	r1, [r4, #28]
 8005e7e:	4832      	ldr	r0, [pc, #200]	; (8005f48 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x134>)
 8005e80:	f7fd fb8a 	bl	8003598 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            ++last_filled_byte;
 8005e84:	6963      	ldr	r3, [r4, #20]
 8005e86:	3301      	adds	r3, #1
 8005e88:	6163      	str	r3, [r4, #20]
        if (error)
 8005e8a:	b358      	cbz	r0, 8005ee4 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xd0>
            return 3;
 8005e8c:	2003      	movs	r0, #3
 8005e8e:	e03c      	b.n	8005f0a <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xf6>
            error = field_byte.set_value(id[i], packet, last_filled_byte);
 8005e90:	7d23      	ldrb	r3, [r4, #20]
 8005e92:	9a01      	ldr	r2, [sp, #4]
 8005e94:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e96:	5d49      	ldrb	r1, [r1, r5]
 8005e98:	482b      	ldr	r0, [pc, #172]	; (8005f48 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x134>)
 8005e9a:	f7fd fb7d 	bl	8003598 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            ++last_filled_byte;
 8005e9e:	6963      	ldr	r3, [r4, #20]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	6163      	str	r3, [r4, #20]
        if (error)
 8005ea4:	b338      	cbz	r0, 8005ef6 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xe2>
            return 4;
 8005ea6:	2004      	movs	r0, #4
 8005ea8:	e02f      	b.n	8005f0a <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xf6>
            error = field_byte.set_value(*(data + i), packet, last_filled_byte);
 8005eaa:	7d23      	ldrb	r3, [r4, #20]
 8005eac:	9a01      	ldr	r2, [sp, #4]
 8005eae:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005eb0:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8005eb4:	4824      	ldr	r0, [pc, #144]	; (8005f48 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x134>)
 8005eb6:	f7fd fb6f 	bl	8003598 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            last_filled_byte += 1;
 8005eba:	6963      	ldr	r3, [r4, #20]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	6163      	str	r3, [r4, #20]
        if (error)
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	d13d      	bne.n	8005f40 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x12c>
    for (int i = 0; i < count; ++i) {
 8005ec4:	3501      	adds	r5, #1
 8005ec6:	455d      	cmp	r5, fp
 8005ec8:	da1f      	bge.n	8005f0a <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xf6>
        if (!(param[i] < SENSOR_PARAM_DATA)) {
 8005eca:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8005ece:	2b0c      	cmp	r3, #12
 8005ed0:	d8ce      	bhi.n	8005e70 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x5c>
        param_ = param[i];
 8005ed2:	7723      	strb	r3, [r4, #28]
        if (field_bit[1].get_value(&setting_) != 1) {
 8005ed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ed8:	4639      	mov	r1, r7
 8005eda:	4648      	mov	r0, r9
 8005edc:	f7fd fa47 	bl	800336e <_ZNK13Address_field9get_valueEPKhi>
 8005ee0:	2801      	cmp	r0, #1
 8005ee2:	d1c9      	bne.n	8005e78 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x64>
        if (field_bit[2].get_value(&setting_) != 0) {
 8005ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ee8:	4639      	mov	r1, r7
 8005eea:	f108 0038 	add.w	r0, r8, #56	; 0x38
 8005eee:	f7fd fa3e 	bl	800336e <_ZNK13Address_field9get_valueEPKhi>
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	d1cc      	bne.n	8005e90 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x7c>
        switch (sensor_param_data[param_]) {
 8005ef6:	7f23      	ldrb	r3, [r4, #28]
 8005ef8:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d007      	beq.n	8005f10 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xfc>
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d011      	beq.n	8005f28 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x114>
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d0d0      	beq.n	8005eaa <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x96>
            return 5;
 8005f08:	2005      	movs	r0, #5
}
 8005f0a:	b003      	add	sp, #12
 8005f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            error = field_PWM.set_value(*(data + i), packet, last_filled_byte);
 8005f10:	7d23      	ldrb	r3, [r4, #20]
 8005f12:	9a01      	ldr	r2, [sp, #4]
 8005f14:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005f16:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8005f1a:	480c      	ldr	r0, [pc, #48]	; (8005f4c <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x138>)
 8005f1c:	f7fd fb3c 	bl	8003598 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            last_filled_byte += 2;
 8005f20:	6963      	ldr	r3, [r4, #20]
 8005f22:	3302      	adds	r3, #2
 8005f24:	6163      	str	r3, [r4, #20]
            break;
 8005f26:	e7cb      	b.n	8005ec0 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xac>
            error = field_float.set_value(*(data + i), packet, last_filled_byte);
 8005f28:	7d23      	ldrb	r3, [r4, #20]
 8005f2a:	9a01      	ldr	r2, [sp, #4]
 8005f2c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005f2e:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8005f32:	4807      	ldr	r0, [pc, #28]	; (8005f50 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x13c>)
 8005f34:	f7fd fb30 	bl	8003598 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            last_filled_byte += 4;
 8005f38:	6963      	ldr	r3, [r4, #20]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	6163      	str	r3, [r4, #20]
            break;
 8005f3e:	e7bf      	b.n	8005ec0 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xac>
            return 6;
 8005f40:	2006      	movs	r0, #6
 8005f42:	e7e2      	b.n	8005f0a <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xf6>
 8005f44:	200022a8 	.word	0x200022a8
 8005f48:	200020dc 	.word	0x200020dc
 8005f4c:	2000228c 	.word	0x2000228c
 8005f50:	20002114 	.word	0x20002114
 8005f54:	0800bdf8 	.word	0x0800bdf8

08005f58 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_>:



uint8_t Packet_System::set_packet_data(LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 8005f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	4688      	mov	r8, r1
 8005f60:	461f      	mov	r7, r3
    bool error = false;
    last_filled_byte = PACKET_HEADER_SIZE;
 8005f62:	2309      	movs	r3, #9
 8005f64:	6143      	str	r3, [r0, #20]


    // комманда
    if (!(*com < SYSTEM_COMMAND_DATA)) {
 8005f66:	7811      	ldrb	r1, [r2, #0]
 8005f68:	2907      	cmp	r1, #7
 8005f6a:	d824      	bhi.n	8005fb6 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x5e>
        command_ = 0xFF;
        return 2;
    }
    command_ = *com;
 8005f6c:	7701      	strb	r1, [r0, #28]
    error = field_byte.set_value(command_, packet, last_filled_byte);
 8005f6e:	2309      	movs	r3, #9
 8005f70:	4642      	mov	r2, r8
 8005f72:	482f      	ldr	r0, [pc, #188]	; (8006030 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xd8>)
 8005f74:	f7fd fb10 	bl	8003598 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
    ++last_filled_byte;
 8005f78:	6963      	ldr	r3, [r4, #20]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	6163      	str	r3, [r4, #20]
    if (error)
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	d148      	bne.n	8006014 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xbc>
        return 3;

    // данные
    int _len;
    if (system_com_data[command_] != 0xFF) {
 8005f82:	7f23      	ldrb	r3, [r4, #28]
 8005f84:	4a2b      	ldr	r2, [pc, #172]	; (8006034 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xdc>)
 8005f86:	5cd6      	ldrb	r6, [r2, r3]
 8005f88:	2eff      	cmp	r6, #255	; 0xff
 8005f8a:	d019      	beq.n	8005fc0 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x68>
        default:
            return 7;
        }
    }

    for (int i = 0; i < _len; ++i) {
 8005f8c:	2e00      	cmp	r6, #0
 8005f8e:	d04b      	beq.n	8006028 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xd0>
 8005f90:	1e7d      	subs	r5, r7, #1
 8005f92:	443e      	add	r6, r7
 8005f94:	3e01      	subs	r6, #1
        error = field_byte.set_value(data[i], packet, last_filled_byte);
 8005f96:	4f26      	ldr	r7, [pc, #152]	; (8006030 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xd8>)
 8005f98:	7d23      	ldrb	r3, [r4, #20]
 8005f9a:	4642      	mov	r2, r8
 8005f9c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005fa0:	4638      	mov	r0, r7
 8005fa2:	f7fd faf9 	bl	8003598 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
        ++last_filled_byte;
 8005fa6:	6962      	ldr	r2, [r4, #20]
 8005fa8:	3201      	adds	r2, #1
 8005faa:	6162      	str	r2, [r4, #20]
        if (error)
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d13d      	bne.n	800602c <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xd4>
    for (int i = 0; i < _len; ++i) {
 8005fb0:	42b5      	cmp	r5, r6
 8005fb2:	d1f1      	bne.n	8005f98 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x40>
 8005fb4:	e002      	b.n	8005fbc <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x64>
        command_ = 0xFF;
 8005fb6:	23ff      	movs	r3, #255	; 0xff
 8005fb8:	7703      	strb	r3, [r0, #28]
        return 2;
 8005fba:	2002      	movs	r0, #2
            return 8;
    }

    return 0;
}
 8005fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        switch (command_)
 8005fc0:	bb53      	cbnz	r3, 8006018 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xc0>
 8005fc2:	1e7d      	subs	r5, r7, #1
 8005fc4:	f107 090b 	add.w	r9, r7, #11
                error = field_byte.set_value(data[i], packet, last_filled_byte);
 8005fc8:	4e19      	ldr	r6, [pc, #100]	; (8006030 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xd8>)
 8005fca:	7d23      	ldrb	r3, [r4, #20]
 8005fcc:	4642      	mov	r2, r8
 8005fce:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	f7fd fae0 	bl	8003598 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
                ++last_filled_byte;
 8005fd8:	6963      	ldr	r3, [r4, #20]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	6163      	str	r3, [r4, #20]
                if (error)
 8005fde:	b9e8      	cbnz	r0, 800601c <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xc4>
            for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i) {
 8005fe0:	454d      	cmp	r5, r9
 8005fe2:	d1f2      	bne.n	8005fca <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x72>
            _len = *len;
 8005fe4:	9a08      	ldr	r2, [sp, #32]
 8005fe6:	7816      	ldrb	r6, [r2, #0]
            error = field_byte.set_value(_len, packet, last_filled_byte);
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	4642      	mov	r2, r8
 8005fec:	4631      	mov	r1, r6
 8005fee:	4810      	ldr	r0, [pc, #64]	; (8006030 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xd8>)
 8005ff0:	f7fd fad2 	bl	8003598 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            ++last_filled_byte;
 8005ff4:	6963      	ldr	r3, [r4, #20]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	6163      	str	r3, [r4, #20]
            if (error)
 8005ffa:	b988      	cbnz	r0, 8006020 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xc8>
            error = field_byte.set_value(data[0], packet, last_filled_byte);
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	4642      	mov	r2, r8
 8006000:	7b79      	ldrb	r1, [r7, #13]
 8006002:	480b      	ldr	r0, [pc, #44]	; (8006030 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xd8>)
 8006004:	f7fd fac8 	bl	8003598 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            ++last_filled_byte;
 8006008:	6963      	ldr	r3, [r4, #20]
 800600a:	3301      	adds	r3, #1
 800600c:	6163      	str	r3, [r4, #20]
            if (error)
 800600e:	b948      	cbnz	r0, 8006024 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xcc>
            data = data + 1;
 8006010:	370e      	adds	r7, #14
            break;
 8006012:	e7bb      	b.n	8005f8c <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x34>
        return 3;
 8006014:	2003      	movs	r0, #3
 8006016:	e7d1      	b.n	8005fbc <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x64>
            return 7;
 8006018:	2007      	movs	r0, #7
 800601a:	e7cf      	b.n	8005fbc <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x64>
                    return 4;
 800601c:	2004      	movs	r0, #4
 800601e:	e7cd      	b.n	8005fbc <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x64>
                return 5;
 8006020:	2005      	movs	r0, #5
 8006022:	e7cb      	b.n	8005fbc <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x64>
                return 6;
 8006024:	2006      	movs	r0, #6
 8006026:	e7c9      	b.n	8005fbc <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x64>
    return 0;
 8006028:	2000      	movs	r0, #0
 800602a:	e7c7      	b.n	8005fbc <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x64>
            return 8;
 800602c:	2008      	movs	r0, #8
 800602e:	e7c5      	b.n	8005fbc <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x64>
 8006030:	200020dc 	.word	0x200020dc
 8006034:	0800bde0 	.word	0x0800bde0

08006038 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_>:

uint8_t Packet_System::get_packet_data(const LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 8006038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800603c:	4604      	mov	r4, r0
 800603e:	460f      	mov	r7, r1
 8006040:	4615      	mov	r5, r2
 8006042:	461e      	mov	r6, r3
    last_read_byte = PACKET_HEADER_SIZE;
 8006044:	2209      	movs	r2, #9
 8006046:	6182      	str	r2, [r0, #24]

    // комманда
    command_ = field_byte.get_value(packet, last_read_byte);
 8006048:	482e      	ldr	r0, [pc, #184]	; (8006104 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xcc>)
 800604a:	f7fd fa43 	bl	80034d4 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 800604e:	b2c0      	uxtb	r0, r0
 8006050:	7720      	strb	r0, [r4, #28]
    ++last_read_byte;
 8006052:	69a3      	ldr	r3, [r4, #24]
 8006054:	3301      	adds	r3, #1
 8006056:	61a3      	str	r3, [r4, #24]
    if (!(command_ < SYSTEM_COMMAND_DATA)) {
 8006058:	2807      	cmp	r0, #7
 800605a:	d81f      	bhi.n	800609c <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x64>
        command_ = 0xFF;
        return 2;
    }
    *com = command_;
 800605c:	7028      	strb	r0, [r5, #0]


    // данные
    int _len;
    if (system_com_data[command_] != 0xFF) {
 800605e:	7f22      	ldrb	r2, [r4, #28]
 8006060:	4b29      	ldr	r3, [pc, #164]	; (8006108 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xd0>)
 8006062:	5c9b      	ldrb	r3, [r3, r2]
 8006064:	2bff      	cmp	r3, #255	; 0xff
 8006066:	d01d      	beq.n	80060a4 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x6c>
        _len = system_com_data[command_];
 8006068:	4698      	mov	r8, r3
        *len = _len;
 800606a:	9a08      	ldr	r2, [sp, #32]
 800606c:	7013      	strb	r3, [r2, #0]
        default:
            return 4;
        }
    }

    for (int i = 0; i < _len; ++i) {
 800606e:	f1b8 0f00 	cmp.w	r8, #0
 8006072:	d045      	beq.n	8006100 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xc8>
 8006074:	1e75      	subs	r5, r6, #1
 8006076:	4446      	add	r6, r8
 8006078:	3e01      	subs	r6, #1
        data[i] = field_byte.get_value(packet, last_read_byte);
 800607a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8006104 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xcc>
 800607e:	7e22      	ldrb	r2, [r4, #24]
 8006080:	4639      	mov	r1, r7
 8006082:	4640      	mov	r0, r8
 8006084:	f7fd fa26 	bl	80034d4 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8006088:	f805 0f01 	strb.w	r0, [r5, #1]!
        ++last_read_byte;
 800608c:	69a2      	ldr	r2, [r4, #24]
 800608e:	3201      	adds	r2, #1
 8006090:	61a2      	str	r2, [r4, #24]
    for (int i = 0; i < _len; ++i) {
 8006092:	42b5      	cmp	r5, r6
 8006094:	d1f3      	bne.n	800607e <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x46>
    }
    return 0;
 8006096:	2000      	movs	r0, #0
}
 8006098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        command_ = 0xFF;
 800609c:	23ff      	movs	r3, #255	; 0xff
 800609e:	7723      	strb	r3, [r4, #28]
        return 2;
 80060a0:	2002      	movs	r0, #2
 80060a2:	e7f9      	b.n	8006098 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x60>
        switch (command_)
 80060a4:	bb52      	cbnz	r2, 80060fc <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xc4>
 80060a6:	1e75      	subs	r5, r6, #1
 80060a8:	f106 090b 	add.w	r9, r6, #11
                data[i] = field_byte.get_value(packet, last_read_byte);
 80060ac:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8006104 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xcc>
 80060b0:	7e22      	ldrb	r2, [r4, #24]
 80060b2:	4639      	mov	r1, r7
 80060b4:	4640      	mov	r0, r8
 80060b6:	f7fd fa0d 	bl	80034d4 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 80060ba:	f805 0f01 	strb.w	r0, [r5, #1]!
                ++last_read_byte;
 80060be:	69a2      	ldr	r2, [r4, #24]
 80060c0:	3201      	adds	r2, #1
 80060c2:	61a2      	str	r2, [r4, #24]
            for (int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i) {
 80060c4:	454d      	cmp	r5, r9
 80060c6:	d1f3      	bne.n	80060b0 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x78>
            data[0] = field_byte.get_value(packet, last_read_byte);
 80060c8:	4d0e      	ldr	r5, [pc, #56]	; (8006104 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xcc>)
 80060ca:	b2d2      	uxtb	r2, r2
 80060cc:	4639      	mov	r1, r7
 80060ce:	4628      	mov	r0, r5
 80060d0:	f7fd fa00 	bl	80034d4 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 80060d4:	7330      	strb	r0, [r6, #12]
            ++last_read_byte;
 80060d6:	69a3      	ldr	r3, [r4, #24]
 80060d8:	3301      	adds	r3, #1
 80060da:	61a3      	str	r3, [r4, #24]
            *len = _len = data[0];
 80060dc:	f896 800c 	ldrb.w	r8, [r6, #12]
 80060e0:	9b08      	ldr	r3, [sp, #32]
 80060e2:	f883 8000 	strb.w	r8, [r3]
            data[0] = field_byte.get_value(packet, last_read_byte);
 80060e6:	7e22      	ldrb	r2, [r4, #24]
 80060e8:	4639      	mov	r1, r7
 80060ea:	4628      	mov	r0, r5
 80060ec:	f7fd f9f2 	bl	80034d4 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 80060f0:	7370      	strb	r0, [r6, #13]
            ++last_read_byte;
 80060f2:	69a3      	ldr	r3, [r4, #24]
 80060f4:	3301      	adds	r3, #1
 80060f6:	61a3      	str	r3, [r4, #24]
            data = data + 1;
 80060f8:	360e      	adds	r6, #14
            break;
 80060fa:	e7b8      	b.n	800606e <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x36>
            return 4;
 80060fc:	2004      	movs	r0, #4
 80060fe:	e7cb      	b.n	8006098 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x60>
    return 0;
 8006100:	2000      	movs	r0, #0
 8006102:	e7c9      	b.n	8006098 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x60>
 8006104:	200020dc 	.word	0x200020dc
 8006108:	0800bde0 	.word	0x0800bde0

0800610c <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh>:
    }
    size_data += _len;
    last_read_byte += _len;
    return 0;
}
uint8_t Packet_System::get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data) {
 800610c:	b570      	push	{r4, r5, r6, lr}
 800610e:	4604      	mov	r4, r0
 8006110:	460e      	mov	r6, r1
 8006112:	4615      	mov	r5, r2
    last_read_byte = PACKET_HEADER_SIZE;
 8006114:	2209      	movs	r2, #9
 8006116:	6182      	str	r2, [r0, #24]
    // комманда
    command_ = field_byte.get_value(packet, last_read_byte);
 8006118:	4819      	ldr	r0, [pc, #100]	; (8006180 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x74>)
 800611a:	f7fd f9db 	bl	80034d4 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 800611e:	b2c3      	uxtb	r3, r0
 8006120:	7723      	strb	r3, [r4, #28]
    ++last_read_byte;
 8006122:	69a2      	ldr	r2, [r4, #24]
 8006124:	1c51      	adds	r1, r2, #1
 8006126:	61a1      	str	r1, [r4, #24]
    if (!(command_ < SYSTEM_COMMAND_DATA)) {
 8006128:	2b07      	cmp	r3, #7
 800612a:	d80b      	bhi.n	8006144 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x38>
        command_ = 0xFF;
        return 2;
    }
    // данные
    if (system_com_data[command_] != 0xFF) {
 800612c:	b2c0      	uxtb	r0, r0
 800612e:	4915      	ldr	r1, [pc, #84]	; (8006184 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x78>)
 8006130:	5c09      	ldrb	r1, [r1, r0]
 8006132:	29ff      	cmp	r1, #255	; 0xff
 8006134:	d00a      	beq.n	800614c <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x40>
        size_data = system_com_data[command_];
 8006136:	7029      	strb	r1, [r5, #0]
            break;
        default:
            return 4;
        }
    }
    last_read_byte += size_data;
 8006138:	782a      	ldrb	r2, [r5, #0]
 800613a:	69a3      	ldr	r3, [r4, #24]
 800613c:	4413      	add	r3, r2
 800613e:	61a3      	str	r3, [r4, #24]
    return 0;
 8006140:	2000      	movs	r0, #0
}
 8006142:	bd70      	pop	{r4, r5, r6, pc}
        command_ = 0xFF;
 8006144:	23ff      	movs	r3, #255	; 0xff
 8006146:	7723      	strb	r3, [r4, #28]
        return 2;
 8006148:	2002      	movs	r0, #2
 800614a:	e7fa      	b.n	8006142 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x36>
        switch (command_)
 800614c:	b9ab      	cbnz	r3, 800617a <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x6e>
            last_read_byte += AMT_BYTES_SYSTEM_ID; // смещение на ID
 800614e:	320d      	adds	r2, #13
 8006150:	61a2      	str	r2, [r4, #24]
            size_data = AMT_BYTES_SYSTEM_ID; // смещение на ID
 8006152:	230c      	movs	r3, #12
 8006154:	702b      	strb	r3, [r5, #0]
            size_data += field_byte.get_value(packet, last_read_byte);
 8006156:	7e22      	ldrb	r2, [r4, #24]
 8006158:	4631      	mov	r1, r6
 800615a:	4809      	ldr	r0, [pc, #36]	; (8006180 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x74>)
 800615c:	f7fd f9ba 	bl	80034d4 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8006160:	782b      	ldrb	r3, [r5, #0]
 8006162:	4418      	add	r0, r3
 8006164:	7028      	strb	r0, [r5, #0]
            last_read_byte += 2; // смещение на length и type
 8006166:	69a3      	ldr	r3, [r4, #24]
 8006168:	3302      	adds	r3, #2
 800616a:	61a3      	str	r3, [r4, #24]
            size_data += 2; // смещение на length и type
 800616c:	782b      	ldrb	r3, [r5, #0]
 800616e:	3302      	adds	r3, #2
 8006170:	702b      	strb	r3, [r5, #0]
            ++last_read_byte;
 8006172:	69a3      	ldr	r3, [r4, #24]
 8006174:	3301      	adds	r3, #1
 8006176:	61a3      	str	r3, [r4, #24]
            break;
 8006178:	e7de      	b.n	8006138 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x2c>
            return 4;
 800617a:	2004      	movs	r0, #4
 800617c:	e7e1      	b.n	8006142 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x36>
 800617e:	bf00      	nop
 8006180:	200020dc 	.word	0x200020dc
 8006184:	0800bde0 	.word	0x0800bde0

08006188 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH>:
}
 8006188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800618c:	b087      	sub	sp, #28
const uint16_t LORA_ADDRESS_BRANCH = 24 - LORA_ADDRESS_GROUP;

const Register Hendler[11] = {Register(0, 8, 0), Register(1, 1, 7), Register(1, 7, 0), Register(2, 8, 0),
                              Register(3, 8, 0), Register(4, 1, 7), Register(4, 7, 0), Register(5, 8, 0),
                              Register(6, 8, 0),
                              Register(7, 8, 0), Register(8, 8, 0)};
 800618e:	4ed2      	ldr	r6, [pc, #840]	; (80064d8 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x350>)
 8006190:	2300      	movs	r3, #0
 8006192:	2208      	movs	r2, #8
 8006194:	4619      	mov	r1, r3
 8006196:	4630      	mov	r0, r6
 8006198:	f7fd f842 	bl	8003220 <_ZN8RegisterC1Ethh>
 800619c:	2307      	movs	r3, #7
 800619e:	2201      	movs	r2, #1
 80061a0:	4611      	mov	r1, r2
 80061a2:	f106 0008 	add.w	r0, r6, #8
 80061a6:	f7fd f83b 	bl	8003220 <_ZN8RegisterC1Ethh>
 80061aa:	f106 0b10 	add.w	fp, r6, #16
 80061ae:	2300      	movs	r3, #0
 80061b0:	2207      	movs	r2, #7
 80061b2:	2101      	movs	r1, #1
 80061b4:	4658      	mov	r0, fp
 80061b6:	f7fd f833 	bl	8003220 <_ZN8RegisterC1Ethh>
 80061ba:	2300      	movs	r3, #0
 80061bc:	2208      	movs	r2, #8
 80061be:	2102      	movs	r1, #2
 80061c0:	f106 0018 	add.w	r0, r6, #24
 80061c4:	f7fd f82c 	bl	8003220 <_ZN8RegisterC1Ethh>
 80061c8:	f106 0a20 	add.w	sl, r6, #32
 80061cc:	2300      	movs	r3, #0
 80061ce:	2208      	movs	r2, #8
 80061d0:	2103      	movs	r1, #3
 80061d2:	4650      	mov	r0, sl
 80061d4:	f7fd f824 	bl	8003220 <_ZN8RegisterC1Ethh>
 80061d8:	2307      	movs	r3, #7
 80061da:	2201      	movs	r2, #1
 80061dc:	2104      	movs	r1, #4
 80061de:	f106 0028 	add.w	r0, r6, #40	; 0x28
 80061e2:	f7fd f81d 	bl	8003220 <_ZN8RegisterC1Ethh>
 80061e6:	2300      	movs	r3, #0
 80061e8:	2207      	movs	r2, #7
 80061ea:	2104      	movs	r1, #4
 80061ec:	f106 0030 	add.w	r0, r6, #48	; 0x30
 80061f0:	f7fd f816 	bl	8003220 <_ZN8RegisterC1Ethh>
 80061f4:	2300      	movs	r3, #0
 80061f6:	2208      	movs	r2, #8
 80061f8:	2105      	movs	r1, #5
 80061fa:	f106 0038 	add.w	r0, r6, #56	; 0x38
 80061fe:	f7fd f80f 	bl	8003220 <_ZN8RegisterC1Ethh>
 8006202:	f106 0840 	add.w	r8, r6, #64	; 0x40
 8006206:	2300      	movs	r3, #0
 8006208:	2208      	movs	r2, #8
 800620a:	2106      	movs	r1, #6
 800620c:	4640      	mov	r0, r8
 800620e:	f7fd f807 	bl	8003220 <_ZN8RegisterC1Ethh>
 8006212:	f106 0748 	add.w	r7, r6, #72	; 0x48
 8006216:	2300      	movs	r3, #0
 8006218:	2208      	movs	r2, #8
 800621a:	2107      	movs	r1, #7
 800621c:	4638      	mov	r0, r7
 800621e:	f7fc ffff 	bl	8003220 <_ZN8RegisterC1Ethh>
 8006222:	2300      	movs	r3, #0
 8006224:	2208      	movs	r2, #8
 8006226:	4611      	mov	r1, r2
 8006228:	f106 0050 	add.w	r0, r6, #80	; 0x50
 800622c:	f7fc fff8 	bl	8003220 <_ZN8RegisterC1Ethh>

const Address_field field_dest_adr_group(&Hendler[0], 2, true),  // Destination Address group (адресс группы устройства назначения)
 8006230:	2400      	movs	r4, #0
 8006232:	9404      	str	r4, [sp, #16]
 8006234:	9403      	str	r4, [sp, #12]
 8006236:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800623a:	9502      	str	r5, [sp, #8]
 800623c:	9401      	str	r4, [sp, #4]
 800623e:	f04f 0977 	mov.w	r9, #119	; 0x77
 8006242:	f8cd 9000 	str.w	r9, [sp]
 8006246:	2301      	movs	r3, #1
 8006248:	2202      	movs	r2, #2
 800624a:	4631      	mov	r1, r6
 800624c:	48a3      	ldr	r0, [pc, #652]	; (80064dc <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x354>)
 800624e:	f7fd f87b 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_dest_adr_branch(&Hendler[2], 2, true), // Destination Address branch (адресс ветви устройства назначения)
 8006252:	9404      	str	r4, [sp, #16]
 8006254:	9403      	str	r4, [sp, #12]
 8006256:	9502      	str	r5, [sp, #8]
 8006258:	9401      	str	r4, [sp, #4]
 800625a:	f8cd 9000 	str.w	r9, [sp]
 800625e:	2301      	movs	r3, #1
 8006260:	2202      	movs	r2, #2
 8006262:	4659      	mov	r1, fp
 8006264:	489e      	ldr	r0, [pc, #632]	; (80064e0 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x358>)
 8006266:	f7fd f86f 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_sour_adr_group(&Hendler[4], 2, true),  // Source Address group (адресс группы отправляющего устройства)
 800626a:	9404      	str	r4, [sp, #16]
 800626c:	9403      	str	r4, [sp, #12]
 800626e:	9502      	str	r5, [sp, #8]
 8006270:	9401      	str	r4, [sp, #4]
 8006272:	f8cd 9000 	str.w	r9, [sp]
 8006276:	2301      	movs	r3, #1
 8006278:	2202      	movs	r2, #2
 800627a:	4651      	mov	r1, sl
 800627c:	4899      	ldr	r0, [pc, #612]	; (80064e4 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x35c>)
 800627e:	f7fd f863 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_sour_adr_branch(&Hendler[6], 2, true), // Source Address branch (адресс ветви отправляющего устройства)
 8006282:	9404      	str	r4, [sp, #16]
 8006284:	9403      	str	r4, [sp, #12]
 8006286:	9502      	str	r5, [sp, #8]
 8006288:	9401      	str	r4, [sp, #4]
 800628a:	f8cd 9000 	str.w	r9, [sp]
 800628e:	2301      	movs	r3, #1
 8006290:	2202      	movs	r2, #2
 8006292:	f106 0130 	add.w	r1, r6, #48	; 0x30
 8006296:	4894      	ldr	r0, [pc, #592]	; (80064e8 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x360>)
 8006298:	f7fd f856 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_type(&Hendler[8], 1, true),   // Packet Type (тип пакетп)
 800629c:	9404      	str	r4, [sp, #16]
 800629e:	9403      	str	r4, [sp, #12]
 80062a0:	9502      	str	r5, [sp, #8]
 80062a2:	9401      	str	r4, [sp, #4]
 80062a4:	f8cd 9000 	str.w	r9, [sp]
 80062a8:	2301      	movs	r3, #1
 80062aa:	461a      	mov	r2, r3
 80062ac:	4641      	mov	r1, r8
 80062ae:	488f      	ldr	r0, [pc, #572]	; (80064ec <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x364>)
 80062b0:	f7fd f84a 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_number(&Hendler[9], 2, true); // Packet Number (номер пакета)
 80062b4:	9404      	str	r4, [sp, #16]
 80062b6:	9403      	str	r4, [sp, #12]
 80062b8:	9502      	str	r5, [sp, #8]
 80062ba:	9401      	str	r4, [sp, #4]
 80062bc:	f8cd 9000 	str.w	r9, [sp]
 80062c0:	2301      	movs	r3, #1
 80062c2:	2202      	movs	r2, #2
 80062c4:	4639      	mov	r1, r7
 80062c6:	488a      	ldr	r0, [pc, #552]	; (80064f0 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x368>)
 80062c8:	f7fd f83e 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                                               &field_sour_adr_group, &field_sour_adr_branch,
                                               &field_type, &field_number};


// Типы данных
const Register register_PWM[2]   = {Register(0, 4, 0), Register(1, 8, 0)},
 80062cc:	f8df 824c 	ldr.w	r8, [pc, #588]	; 800651c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x394>
 80062d0:	4623      	mov	r3, r4
 80062d2:	2204      	movs	r2, #4
 80062d4:	4621      	mov	r1, r4
 80062d6:	4640      	mov	r0, r8
 80062d8:	f7fc ffa2 	bl	8003220 <_ZN8RegisterC1Ethh>
 80062dc:	4623      	mov	r3, r4
 80062de:	2208      	movs	r2, #8
 80062e0:	2101      	movs	r1, #1
 80062e2:	eb08 0002 	add.w	r0, r8, r2
 80062e6:	f7fc ff9b 	bl	8003220 <_ZN8RegisterC1Ethh>
               register_byte[1]  = {Register(0, 8, 0)},
 80062ea:	4623      	mov	r3, r4
 80062ec:	2208      	movs	r2, #8
 80062ee:	4621      	mov	r1, r4
 80062f0:	4880      	ldr	r0, [pc, #512]	; (80064f4 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x36c>)
 80062f2:	f7fc ff95 	bl	8003220 <_ZN8RegisterC1Ethh>
               register_float[4] = {Register(0, 8, 0), Register(1, 8, 0), Register(2, 8, 0), Register(3, 8, 0)},
 80062f6:	4f80      	ldr	r7, [pc, #512]	; (80064f8 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x370>)
 80062f8:	4623      	mov	r3, r4
 80062fa:	2208      	movs	r2, #8
 80062fc:	4621      	mov	r1, r4
 80062fe:	4638      	mov	r0, r7
 8006300:	f7fc ff8e 	bl	8003220 <_ZN8RegisterC1Ethh>
 8006304:	4623      	mov	r3, r4
 8006306:	2208      	movs	r2, #8
 8006308:	2101      	movs	r1, #1
 800630a:	18b8      	adds	r0, r7, r2
 800630c:	f7fc ff88 	bl	8003220 <_ZN8RegisterC1Ethh>
 8006310:	4623      	mov	r3, r4
 8006312:	2208      	movs	r2, #8
 8006314:	2102      	movs	r1, #2
 8006316:	f107 0010 	add.w	r0, r7, #16
 800631a:	f7fc ff81 	bl	8003220 <_ZN8RegisterC1Ethh>
 800631e:	4623      	mov	r3, r4
 8006320:	2208      	movs	r2, #8
 8006322:	2103      	movs	r1, #3
 8006324:	f107 0018 	add.w	r0, r7, #24
 8006328:	f7fc ff7a 	bl	8003220 <_ZN8RegisterC1Ethh>
               register_bit[8]   = {Register(0, 1, 0), Register(0, 1, 1), Register(0, 1, 2), Register(0, 1, 3),
                                    Register(0, 1, 4), Register(0, 1, 5), Register(0, 1, 6), Register(0, 1, 7)};
 800632c:	4e73      	ldr	r6, [pc, #460]	; (80064fc <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x374>)
 800632e:	4623      	mov	r3, r4
 8006330:	2201      	movs	r2, #1
 8006332:	4621      	mov	r1, r4
 8006334:	4630      	mov	r0, r6
 8006336:	f7fc ff73 	bl	8003220 <_ZN8RegisterC1Ethh>
 800633a:	2301      	movs	r3, #1
 800633c:	461a      	mov	r2, r3
 800633e:	4621      	mov	r1, r4
 8006340:	f106 0008 	add.w	r0, r6, #8
 8006344:	f7fc ff6c 	bl	8003220 <_ZN8RegisterC1Ethh>
 8006348:	2302      	movs	r3, #2
 800634a:	2201      	movs	r2, #1
 800634c:	4621      	mov	r1, r4
 800634e:	f106 0010 	add.w	r0, r6, #16
 8006352:	f7fc ff65 	bl	8003220 <_ZN8RegisterC1Ethh>
 8006356:	2303      	movs	r3, #3
 8006358:	2201      	movs	r2, #1
 800635a:	4621      	mov	r1, r4
 800635c:	f106 0018 	add.w	r0, r6, #24
 8006360:	f7fc ff5e 	bl	8003220 <_ZN8RegisterC1Ethh>
 8006364:	2304      	movs	r3, #4
 8006366:	2201      	movs	r2, #1
 8006368:	4621      	mov	r1, r4
 800636a:	f106 0020 	add.w	r0, r6, #32
 800636e:	f7fc ff57 	bl	8003220 <_ZN8RegisterC1Ethh>
 8006372:	f106 0b28 	add.w	fp, r6, #40	; 0x28
 8006376:	2305      	movs	r3, #5
 8006378:	2201      	movs	r2, #1
 800637a:	4621      	mov	r1, r4
 800637c:	4658      	mov	r0, fp
 800637e:	f7fc ff4f 	bl	8003220 <_ZN8RegisterC1Ethh>
 8006382:	f106 0a30 	add.w	sl, r6, #48	; 0x30
 8006386:	2306      	movs	r3, #6
 8006388:	2201      	movs	r2, #1
 800638a:	4621      	mov	r1, r4
 800638c:	4650      	mov	r0, sl
 800638e:	f7fc ff47 	bl	8003220 <_ZN8RegisterC1Ethh>
 8006392:	2307      	movs	r3, #7
 8006394:	2201      	movs	r2, #1
 8006396:	4621      	mov	r1, r4
 8006398:	f106 0038 	add.w	r0, r6, #56	; 0x38
 800639c:	f7fc ff40 	bl	8003220 <_ZN8RegisterC1Ethh>

const Address_field field_PWM(&register_PWM[0], 2, true),
 80063a0:	9404      	str	r4, [sp, #16]
 80063a2:	9403      	str	r4, [sp, #12]
 80063a4:	9502      	str	r5, [sp, #8]
 80063a6:	9401      	str	r4, [sp, #4]
 80063a8:	f8cd 9000 	str.w	r9, [sp]
 80063ac:	2301      	movs	r3, #1
 80063ae:	2202      	movs	r2, #2
 80063b0:	4641      	mov	r1, r8
 80063b2:	4853      	ldr	r0, [pc, #332]	; (8006500 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x378>)
 80063b4:	f7fc ffc8 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_byte(&register_byte[0]),
 80063b8:	9404      	str	r4, [sp, #16]
 80063ba:	9403      	str	r4, [sp, #12]
 80063bc:	9502      	str	r5, [sp, #8]
 80063be:	9401      	str	r4, [sp, #4]
 80063c0:	f8cd 9000 	str.w	r9, [sp]
 80063c4:	4623      	mov	r3, r4
 80063c6:	2201      	movs	r2, #1
 80063c8:	494a      	ldr	r1, [pc, #296]	; (80064f4 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x36c>)
 80063ca:	484e      	ldr	r0, [pc, #312]	; (8006504 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x37c>)
 80063cc:	f7fc ffbc 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_float(&register_float[0], 4, false),
 80063d0:	9404      	str	r4, [sp, #16]
 80063d2:	9403      	str	r4, [sp, #12]
 80063d4:	9502      	str	r5, [sp, #8]
 80063d6:	9401      	str	r4, [sp, #4]
 80063d8:	f8cd 9000 	str.w	r9, [sp]
 80063dc:	4623      	mov	r3, r4
 80063de:	2204      	movs	r2, #4
 80063e0:	4639      	mov	r1, r7
 80063e2:	4849      	ldr	r0, [pc, #292]	; (8006508 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x380>)
 80063e4:	f7fc ffb0 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_bit[8] = {Address_field(&register_bit[0]), Address_field(&register_bit[1]),
                                    Address_field(&register_bit[2]), Address_field(&register_bit[3]),
                                    Address_field(&register_bit[4]), Address_field(&register_bit[5]),
                                    Address_field(&register_bit[6]), Address_field(&register_bit[7])};
 80063e8:	4f48      	ldr	r7, [pc, #288]	; (800650c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x384>)
 80063ea:	9404      	str	r4, [sp, #16]
 80063ec:	9403      	str	r4, [sp, #12]
 80063ee:	9502      	str	r5, [sp, #8]
 80063f0:	9401      	str	r4, [sp, #4]
 80063f2:	f8cd 9000 	str.w	r9, [sp]
 80063f6:	4623      	mov	r3, r4
 80063f8:	2201      	movs	r2, #1
 80063fa:	4631      	mov	r1, r6
 80063fc:	4638      	mov	r0, r7
 80063fe:	f7fc ffa3 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 8006402:	9404      	str	r4, [sp, #16]
 8006404:	9403      	str	r4, [sp, #12]
 8006406:	9502      	str	r5, [sp, #8]
 8006408:	9401      	str	r4, [sp, #4]
 800640a:	f8cd 9000 	str.w	r9, [sp]
 800640e:	4623      	mov	r3, r4
 8006410:	2201      	movs	r2, #1
 8006412:	f106 0108 	add.w	r1, r6, #8
 8006416:	f107 001c 	add.w	r0, r7, #28
 800641a:	f7fc ff95 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 800641e:	9404      	str	r4, [sp, #16]
 8006420:	9403      	str	r4, [sp, #12]
 8006422:	9502      	str	r5, [sp, #8]
 8006424:	9401      	str	r4, [sp, #4]
 8006426:	f8cd 9000 	str.w	r9, [sp]
 800642a:	4623      	mov	r3, r4
 800642c:	2201      	movs	r2, #1
 800642e:	f106 0110 	add.w	r1, r6, #16
 8006432:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8006436:	f7fc ff87 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 800643a:	9404      	str	r4, [sp, #16]
 800643c:	9403      	str	r4, [sp, #12]
 800643e:	9502      	str	r5, [sp, #8]
 8006440:	9401      	str	r4, [sp, #4]
 8006442:	f8cd 9000 	str.w	r9, [sp]
 8006446:	4623      	mov	r3, r4
 8006448:	2201      	movs	r2, #1
 800644a:	f106 0118 	add.w	r1, r6, #24
 800644e:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8006452:	f7fc ff79 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 8006456:	9404      	str	r4, [sp, #16]
 8006458:	9403      	str	r4, [sp, #12]
 800645a:	9502      	str	r5, [sp, #8]
 800645c:	9401      	str	r4, [sp, #4]
 800645e:	f8cd 9000 	str.w	r9, [sp]
 8006462:	4623      	mov	r3, r4
 8006464:	2201      	movs	r2, #1
 8006466:	f106 0120 	add.w	r1, r6, #32
 800646a:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800646e:	f7fc ff6b 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 8006472:	9404      	str	r4, [sp, #16]
 8006474:	9403      	str	r4, [sp, #12]
 8006476:	9502      	str	r5, [sp, #8]
 8006478:	9401      	str	r4, [sp, #4]
 800647a:	f8cd 9000 	str.w	r9, [sp]
 800647e:	4623      	mov	r3, r4
 8006480:	2201      	movs	r2, #1
 8006482:	4659      	mov	r1, fp
 8006484:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8006488:	f7fc ff5e 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 800648c:	9404      	str	r4, [sp, #16]
 800648e:	9403      	str	r4, [sp, #12]
 8006490:	9502      	str	r5, [sp, #8]
 8006492:	9401      	str	r4, [sp, #4]
 8006494:	f8cd 9000 	str.w	r9, [sp]
 8006498:	4623      	mov	r3, r4
 800649a:	2201      	movs	r2, #1
 800649c:	4651      	mov	r1, sl
 800649e:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 80064a2:	f7fc ff51 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 80064a6:	9404      	str	r4, [sp, #16]
 80064a8:	9403      	str	r4, [sp, #12]
 80064aa:	9502      	str	r5, [sp, #8]
 80064ac:	9401      	str	r4, [sp, #4]
 80064ae:	f8cd 9000 	str.w	r9, [sp]
 80064b2:	4623      	mov	r3, r4
 80064b4:	2201      	movs	r2, #1
 80064b6:	f106 0138 	add.w	r1, r6, #56	; 0x38
 80064ba:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 80064be:	f7fc ff43 	bl	8003348 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Packet_analyzer packet_analyzer;
 80064c2:	4813      	ldr	r0, [pc, #76]	; (8006510 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x388>)
 80064c4:	f7ff f9f8 	bl	80058b8 <_ZN15Packet_analyzerC1Ev>
    virtual bool set_setting(uint8_t setting=0);
    uint8_t get_setting();
};


class Packet_Connection: public Packet_analyzer {
 80064c8:	4d12      	ldr	r5, [pc, #72]	; (8006514 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x38c>)
 80064ca:	4628      	mov	r0, r5
 80064cc:	f7ff f9f4 	bl	80058b8 <_ZN15Packet_analyzerC1Ev>
 80064d0:	4b11      	ldr	r3, [pc, #68]	; (8006518 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x390>)
 80064d2:	602b      	str	r3, [r5, #0]
 80064d4:	772c      	strb	r4, [r5, #28]
 80064d6:	e023      	b.n	8006520 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x398>
 80064d8:	20002234 	.word	0x20002234
 80064dc:	200021c4 	.word	0x200021c4
 80064e0:	200021fc 	.word	0x200021fc
 80064e4:	200021e0 	.word	0x200021e0
 80064e8:	20002218 	.word	0x20002218
 80064ec:	200020f8 	.word	0x200020f8
 80064f0:	20002130 	.word	0x20002130
 80064f4:	2000219c 	.word	0x2000219c
 80064f8:	200021a4 	.word	0x200021a4
 80064fc:	2000215c 	.word	0x2000215c
 8006500:	2000228c 	.word	0x2000228c
 8006504:	200020dc 	.word	0x200020dc
 8006508:	20002114 	.word	0x20002114
 800650c:	200022a8 	.word	0x200022a8
 8006510:	20002388 	.word	0x20002388
 8006514:	200023a4 	.word	0x200023a4
 8006518:	0800be40 	.word	0x0800be40
 800651c:	2000214c 	.word	0x2000214c
    uint8_t get_size_by_data(const uint8_t *com, const uint8_t *len, uint8_t &size_data);
    // Узнать объём поля данных по содержимому пакета
    uint8_t get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data);
};

class Packet_Sensor: public Packet_analyzer {
 8006520:	4c0a      	ldr	r4, [pc, #40]	; (800654c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3c4>)
 8006522:	4620      	mov	r0, r4
 8006524:	f7ff f9c8 	bl	80058b8 <_ZN15Packet_analyzerC1Ev>
 8006528:	4b09      	ldr	r3, [pc, #36]	; (8006550 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3c8>)
 800652a:	6023      	str	r3, [r4, #0]
    uint8_t get_size_by_data(const uint8_t *amt, const uint8_t *param, uint8_t &size_data);
    // узнать объём поля данных по содержимому пакета
    uint8_t get_size_by_packet(const LoRa_packet& packet, uint8_t *amt, uint8_t *param, uint8_t &size_data);
};

class Packet_Device: public Packet_analyzer {
 800652c:	4c09      	ldr	r4, [pc, #36]	; (8006554 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3cc>)
 800652e:	4620      	mov	r0, r4
 8006530:	f7ff f9c2 	bl	80058b8 <_ZN15Packet_analyzerC1Ev>
 8006534:	4b08      	ldr	r3, [pc, #32]	; (8006558 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3d0>)
 8006536:	6023      	str	r3, [r4, #0]
    uint8_t get_size_by_data(const uint8_t *obj, const uint8_t *com, uint8_t &size_data);
    // узнать объём поля данных по содержимому пакета
    uint8_t get_size_by_packet(const LoRa_packet& packet, uint8_t *obj, uint8_t &size_data);
};

class Packet_System: public Packet_analyzer {
 8006538:	4c08      	ldr	r4, [pc, #32]	; (800655c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3d4>)
 800653a:	4620      	mov	r0, r4
 800653c:	f7ff f9bc 	bl	80058b8 <_ZN15Packet_analyzerC1Ev>
 8006540:	4b07      	ldr	r3, [pc, #28]	; (8006560 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3d8>)
 8006542:	6023      	str	r3, [r4, #0]
}
 8006544:	b007      	add	sp, #28
 8006546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800654a:	bf00      	nop
 800654c:	200023e4 	.word	0x200023e4
 8006550:	0800be1c 	.word	0x0800be1c
 8006554:	200023c4 	.word	0x200023c4
 8006558:	0800be10 	.word	0x0800be10
 800655c:	20002404 	.word	0x20002404
 8006560:	0800be28 	.word	0x0800be28

08006564 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8006564:	b148      	cbz	r0, 800657a <null_ptr_check+0x16>
 8006566:	6842      	ldr	r2, [r0, #4]
 8006568:	b152      	cbz	r2, 8006580 <null_ptr_check+0x1c>
 800656a:	6882      	ldr	r2, [r0, #8]
 800656c:	b15a      	cbz	r2, 8006586 <null_ptr_check+0x22>
 800656e:	68c0      	ldr	r0, [r0, #12]
 8006570:	fab0 f080 	clz	r0, r0
 8006574:	0940      	lsrs	r0, r0, #5
 8006576:	4240      	negs	r0, r0
 8006578:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 800657a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800657e:	4770      	bx	lr
 8006580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006584:	4770      	bx	lr
 8006586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		/* Device structure is fine */
		rslt = BME280_OK;
	}

	return rslt;
}
 800658a:	4770      	bx	lr

0800658c <bme280_get_regs>:
{
 800658c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006590:	4605      	mov	r5, r0
 8006592:	4688      	mov	r8, r1
 8006594:	4617      	mov	r7, r2
 8006596:	461c      	mov	r4, r3
	rslt = null_ptr_check(dev);
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff ffe3 	bl	8006564 <null_ptr_check>
	if (rslt == BME280_OK) {
 800659e:	4603      	mov	r3, r0
 80065a0:	b970      	cbnz	r0, 80065c0 <bme280_get_regs+0x34>
		if (dev->intf != BME280_I2C_INTF)
 80065a2:	78a3      	ldrb	r3, [r4, #2]
 80065a4:	2b01      	cmp	r3, #1
			reg_addr = reg_addr | 0x80;
 80065a6:	bf18      	it	ne
 80065a8:	f045 0580 	orrne.w	r5, r5, #128	; 0x80
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80065ac:	6866      	ldr	r6, [r4, #4]
 80065ae:	463b      	mov	r3, r7
 80065b0:	4642      	mov	r2, r8
 80065b2:	4629      	mov	r1, r5
 80065b4:	7860      	ldrb	r0, [r4, #1]
 80065b6:	47b0      	blx	r6
		if (rslt != BME280_OK)
 80065b8:	1e03      	subs	r3, r0, #0
			rslt = BME280_E_COMM_FAIL;
 80065ba:	bf18      	it	ne
 80065bc:	f06f 0303 	mvnne.w	r3, #3
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080065c6 <bme280_set_regs>:
{
 80065c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	4607      	mov	r7, r0
 80065ce:	460d      	mov	r5, r1
 80065d0:	4690      	mov	r8, r2
 80065d2:	461e      	mov	r6, r3
 80065d4:	4614      	mov	r4, r2
 80065d6:	2a0a      	cmp	r2, #10
 80065d8:	bf28      	it	cs
 80065da:	240a      	movcs	r4, #10
	rslt = null_ptr_check(dev);
 80065dc:	4618      	mov	r0, r3
 80065de:	f7ff ffc1 	bl	8006564 <null_ptr_check>
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 80065e2:	2800      	cmp	r0, #0
 80065e4:	d139      	bne.n	800665a <bme280_set_regs+0x94>
 80065e6:	2f00      	cmp	r7, #0
 80065e8:	d03a      	beq.n	8006660 <bme280_set_regs+0x9a>
 80065ea:	2d00      	cmp	r5, #0
 80065ec:	d03b      	beq.n	8006666 <bme280_set_regs+0xa0>
		if (len != 0) {
 80065ee:	f1b8 0f00 	cmp.w	r8, #0
 80065f2:	d03b      	beq.n	800666c <bme280_set_regs+0xa6>
			temp_buff[0] = reg_data[0];
 80065f4:	782b      	ldrb	r3, [r5, #0]
 80065f6:	f88d 3004 	strb.w	r3, [sp, #4]
			if (dev->intf != BME280_I2C_INTF) {
 80065fa:	78b3      	ldrb	r3, [r6, #2]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d00a      	beq.n	8006616 <bme280_set_regs+0x50>
 8006600:	1e7b      	subs	r3, r7, #1
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8006602:	2200      	movs	r2, #0
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8006604:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8006608:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800660c:	7019      	strb	r1, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800660e:	3201      	adds	r2, #1
 8006610:	b2d2      	uxtb	r2, r2
 8006612:	42a2      	cmp	r2, r4
 8006614:	d3f6      	bcc.n	8006604 <bme280_set_regs+0x3e>
			if (len > 1) {
 8006616:	f1b8 0f01 	cmp.w	r8, #1
 800661a:	d80c      	bhi.n	8006636 <bme280_set_regs+0x70>
				temp_len = len;
 800661c:	b2a3      	uxth	r3, r4
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 800661e:	68b4      	ldr	r4, [r6, #8]
 8006620:	aa01      	add	r2, sp, #4
 8006622:	7839      	ldrb	r1, [r7, #0]
 8006624:	7870      	ldrb	r0, [r6, #1]
 8006626:	47a0      	blx	r4
			if (rslt != BME280_OK)
 8006628:	2800      	cmp	r0, #0
				rslt = BME280_E_COMM_FAIL;
 800662a:	bf18      	it	ne
 800662c:	f06f 0003 	mvnne.w	r0, #3
}
 8006630:	b006      	add	sp, #24
 8006632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006636:	4639      	mov	r1, r7
 8006638:	aa01      	add	r2, sp, #4
			if (len > 1) {
 800663a:	2301      	movs	r3, #1
		temp_buff[(index * 2) - 1] = reg_addr[index];
 800663c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006640:	7050      	strb	r0, [r2, #1]
		temp_buff[index * 2] = reg_data[index];
 8006642:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8006646:	f802 0f02 	strb.w	r0, [r2, #2]!
 800664a:	3301      	adds	r3, #1
	for (index = 1; index < len; index++) {
 800664c:	b2d8      	uxtb	r0, r3
 800664e:	4284      	cmp	r4, r0
 8006650:	d8f4      	bhi.n	800663c <bme280_set_regs+0x76>
				temp_len = ((len * 2) - 1);
 8006652:	0064      	lsls	r4, r4, #1
 8006654:	3c01      	subs	r4, #1
 8006656:	b2a3      	uxth	r3, r4
 8006658:	e7e1      	b.n	800661e <bme280_set_regs+0x58>
		rslt = BME280_E_NULL_PTR;
 800665a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800665e:	e7e7      	b.n	8006630 <bme280_set_regs+0x6a>
 8006660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006664:	e7e4      	b.n	8006630 <bme280_set_regs+0x6a>
 8006666:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800666a:	e7e1      	b.n	8006630 <bme280_set_regs+0x6a>
			rslt = BME280_E_INVALID_LEN;
 800666c:	f06f 0002 	mvn.w	r0, #2
 8006670:	e7de      	b.n	8006630 <bme280_set_regs+0x6a>

08006672 <set_osr_settings>:
{
 8006672:	b570      	push	{r4, r5, r6, lr}
 8006674:	b082      	sub	sp, #8
 8006676:	4604      	mov	r4, r0
 8006678:	460e      	mov	r6, r1
 800667a:	4615      	mov	r5, r2
	if (desired_settings & BME280_OSR_HUM_SEL)
 800667c:	f010 0f04 	tst.w	r0, #4
 8006680:	d106      	bne.n	8006690 <set_osr_settings+0x1e>
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8006682:	2301      	movs	r3, #1
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8006684:	f014 0f03 	tst.w	r4, #3
 8006688:	d12a      	bne.n	80066e0 <set_osr_settings+0x6e>
}
 800668a:	4618      	mov	r0, r3
 800668c:	b002      	add	sp, #8
 800668e:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8006690:	23f2      	movs	r3, #242	; 0xf2
 8006692:	f88d 3007 	strb.w	r3, [sp, #7]
	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8006696:	788b      	ldrb	r3, [r1, #2]
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	a902      	add	r1, sp, #8
 800669e:	f801 3d03 	strb.w	r3, [r1, #-3]!
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80066a2:	4613      	mov	r3, r2
 80066a4:	2201      	movs	r2, #1
 80066a6:	f10d 0007 	add.w	r0, sp, #7
 80066aa:	f7ff ff8c 	bl	80065c6 <bme280_set_regs>
	if (rslt == BME280_OK) {
 80066ae:	4603      	mov	r3, r0
 80066b0:	2800      	cmp	r0, #0
 80066b2:	d1e7      	bne.n	8006684 <set_osr_settings+0x12>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 80066b4:	20f4      	movs	r0, #244	; 0xf4
 80066b6:	f88d 0007 	strb.w	r0, [sp, #7]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80066ba:	462b      	mov	r3, r5
 80066bc:	2201      	movs	r2, #1
 80066be:	f10d 0106 	add.w	r1, sp, #6
 80066c2:	f7ff ff63 	bl	800658c <bme280_get_regs>
		if (rslt == BME280_OK)
 80066c6:	4603      	mov	r3, r0
 80066c8:	2800      	cmp	r0, #0
 80066ca:	d1db      	bne.n	8006684 <set_osr_settings+0x12>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80066cc:	462b      	mov	r3, r5
 80066ce:	2201      	movs	r2, #1
 80066d0:	f10d 0106 	add.w	r1, sp, #6
 80066d4:	f10d 0007 	add.w	r0, sp, #7
 80066d8:	f7ff ff75 	bl	80065c6 <bme280_set_regs>
 80066dc:	4603      	mov	r3, r0
 80066de:	e7d1      	b.n	8006684 <set_osr_settings+0x12>
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80066e0:	20f4      	movs	r0, #244	; 0xf4
 80066e2:	f88d 0006 	strb.w	r0, [sp, #6]
	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80066e6:	462b      	mov	r3, r5
 80066e8:	2201      	movs	r2, #1
 80066ea:	f10d 0107 	add.w	r1, sp, #7
 80066ee:	f7ff ff4d 	bl	800658c <bme280_get_regs>
	if (rslt == BME280_OK) {
 80066f2:	4603      	mov	r3, r0
 80066f4:	2800      	cmp	r0, #0
 80066f6:	d1c8      	bne.n	800668a <set_osr_settings+0x18>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 80066f8:	f014 0f01 	tst.w	r4, #1
 80066fc:	d10c      	bne.n	8006718 <set_osr_settings+0xa6>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80066fe:	f014 0f02 	tst.w	r4, #2
 8006702:	d115      	bne.n	8006730 <set_osr_settings+0xbe>
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8006704:	462b      	mov	r3, r5
 8006706:	2201      	movs	r2, #1
 8006708:	f10d 0107 	add.w	r1, sp, #7
 800670c:	f10d 0006 	add.w	r0, sp, #6
 8006710:	f7ff ff59 	bl	80065c6 <bme280_set_regs>
 8006714:	4603      	mov	r3, r0
 8006716:	e7b8      	b.n	800668a <set_osr_settings+0x18>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8006718:	7833      	ldrb	r3, [r6, #0]
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	f003 031c 	and.w	r3, r3, #28
 8006720:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8006724:	f022 021c 	bic.w	r2, r2, #28
 8006728:	4313      	orrs	r3, r2
 800672a:	f88d 3007 	strb.w	r3, [sp, #7]
 800672e:	e7e6      	b.n	80066fe <set_osr_settings+0x8c>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8006730:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006734:	f003 031f 	and.w	r3, r3, #31
 8006738:	7872      	ldrb	r2, [r6, #1]
 800673a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800673e:	f88d 3007 	strb.w	r3, [sp, #7]
 8006742:	e7df      	b.n	8006704 <set_osr_settings+0x92>

08006744 <set_filter_standby_settings>:
{
 8006744:	b570      	push	{r4, r5, r6, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	4605      	mov	r5, r0
 800674a:	460e      	mov	r6, r1
 800674c:	4614      	mov	r4, r2
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 800674e:	20f5      	movs	r0, #245	; 0xf5
 8006750:	f88d 0007 	strb.w	r0, [sp, #7]
	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8006754:	4613      	mov	r3, r2
 8006756:	2201      	movs	r2, #1
 8006758:	f10d 0106 	add.w	r1, sp, #6
 800675c:	f7ff ff16 	bl	800658c <bme280_get_regs>
	if (rslt == BME280_OK) {
 8006760:	4603      	mov	r3, r0
 8006762:	b970      	cbnz	r0, 8006782 <set_filter_standby_settings+0x3e>
		if (desired_settings & BME280_FILTER_SEL)
 8006764:	f015 0f08 	tst.w	r5, #8
 8006768:	d10e      	bne.n	8006788 <set_filter_standby_settings+0x44>
		if (desired_settings & BME280_STANDBY_SEL)
 800676a:	f015 0f10 	tst.w	r5, #16
 800676e:	d117      	bne.n	80067a0 <set_filter_standby_settings+0x5c>
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8006770:	4623      	mov	r3, r4
 8006772:	2201      	movs	r2, #1
 8006774:	f10d 0106 	add.w	r1, sp, #6
 8006778:	f10d 0007 	add.w	r0, sp, #7
 800677c:	f7ff ff23 	bl	80065c6 <bme280_set_regs>
 8006780:	4603      	mov	r3, r0
}
 8006782:	4618      	mov	r0, r3
 8006784:	b002      	add	sp, #8
 8006786:	bd70      	pop	{r4, r5, r6, pc}
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8006788:	78f3      	ldrb	r3, [r6, #3]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	f003 031c 	and.w	r3, r3, #28
 8006790:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8006794:	f022 021c 	bic.w	r2, r2, #28
 8006798:	4313      	orrs	r3, r2
 800679a:	f88d 3006 	strb.w	r3, [sp, #6]
 800679e:	e7e4      	b.n	800676a <set_filter_standby_settings+0x26>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80067a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80067a4:	f003 031f 	and.w	r3, r3, #31
 80067a8:	7932      	ldrb	r2, [r6, #4]
 80067aa:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80067ae:	f88d 3006 	strb.w	r3, [sp, #6]
 80067b2:	e7dd      	b.n	8006770 <set_filter_standby_settings+0x2c>

080067b4 <bme280_get_sensor_mode>:
{
 80067b4:	b538      	push	{r3, r4, r5, lr}
 80067b6:	4605      	mov	r5, r0
 80067b8:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 80067ba:	4608      	mov	r0, r1
 80067bc:	f7ff fed2 	bl	8006564 <null_ptr_check>
	if (rslt == BME280_OK) {
 80067c0:	4603      	mov	r3, r0
 80067c2:	b108      	cbz	r0, 80067c8 <bme280_get_sensor_mode+0x14>
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	bd38      	pop	{r3, r4, r5, pc}
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 80067c8:	4623      	mov	r3, r4
 80067ca:	2201      	movs	r2, #1
 80067cc:	4629      	mov	r1, r5
 80067ce:	20f4      	movs	r0, #244	; 0xf4
 80067d0:	f7ff fedc 	bl	800658c <bme280_get_regs>
 80067d4:	4603      	mov	r3, r0
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 80067d6:	782a      	ldrb	r2, [r5, #0]
 80067d8:	f002 0203 	and.w	r2, r2, #3
 80067dc:	702a      	strb	r2, [r5, #0]
 80067de:	e7f1      	b.n	80067c4 <bme280_get_sensor_mode+0x10>

080067e0 <bme280_soft_reset>:
{
 80067e0:	b530      	push	{r4, r5, lr}
 80067e2:	b083      	sub	sp, #12
 80067e4:	4605      	mov	r5, r0
	uint8_t reg_addr = BME280_RESET_ADDR;
 80067e6:	23e0      	movs	r3, #224	; 0xe0
 80067e8:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t soft_rst_cmd = 0xB6;
 80067ec:	23b6      	movs	r3, #182	; 0xb6
 80067ee:	f88d 3006 	strb.w	r3, [sp, #6]
	rslt = null_ptr_check(dev);
 80067f2:	f7ff feb7 	bl	8006564 <null_ptr_check>
	if (rslt == BME280_OK) {
 80067f6:	4604      	mov	r4, r0
 80067f8:	b110      	cbz	r0, 8006800 <bme280_soft_reset+0x20>
}
 80067fa:	4620      	mov	r0, r4
 80067fc:	b003      	add	sp, #12
 80067fe:	bd30      	pop	{r4, r5, pc}
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8006800:	462b      	mov	r3, r5
 8006802:	2201      	movs	r2, #1
 8006804:	f10d 0106 	add.w	r1, sp, #6
 8006808:	f10d 0007 	add.w	r0, sp, #7
 800680c:	f7ff fedb 	bl	80065c6 <bme280_set_regs>
 8006810:	4604      	mov	r4, r0
		dev->delay_ms(2);
 8006812:	68eb      	ldr	r3, [r5, #12]
 8006814:	2002      	movs	r0, #2
 8006816:	4798      	blx	r3
 8006818:	e7ef      	b.n	80067fa <bme280_soft_reset+0x1a>

0800681a <bme280_init>:
{
 800681a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800681c:	b089      	sub	sp, #36	; 0x24
 800681e:	4605      	mov	r5, r0
	uint8_t chip_id = 0;
 8006820:	2300      	movs	r3, #0
 8006822:	f88d 301f 	strb.w	r3, [sp, #31]
	rslt = null_ptr_check(dev);
 8006826:	f7ff fe9d 	bl	8006564 <null_ptr_check>
	if (rslt ==  BME280_OK) {
 800682a:	4603      	mov	r3, r0
 800682c:	b998      	cbnz	r0, 8006856 <bme280_init+0x3c>
 800682e:	2405      	movs	r4, #5
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8006830:	2601      	movs	r6, #1
 8006832:	27d0      	movs	r7, #208	; 0xd0
 8006834:	462b      	mov	r3, r5
 8006836:	4632      	mov	r2, r6
 8006838:	f10d 011f 	add.w	r1, sp, #31
 800683c:	4638      	mov	r0, r7
 800683e:	f7ff fea5 	bl	800658c <bme280_get_regs>
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8006842:	b158      	cbz	r0, 800685c <bme280_init+0x42>
			dev->delay_ms(1);
 8006844:	68eb      	ldr	r3, [r5, #12]
 8006846:	4630      	mov	r0, r6
 8006848:	4798      	blx	r3
 800684a:	1e63      	subs	r3, r4, #1
		while (try_count) {
 800684c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8006850:	d1f0      	bne.n	8006834 <bme280_init+0x1a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8006852:	f06f 0301 	mvn.w	r3, #1
}
 8006856:	4618      	mov	r0, r3
 8006858:	b009      	add	sp, #36	; 0x24
 800685a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 800685c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8006860:	2b60      	cmp	r3, #96	; 0x60
 8006862:	d1ef      	bne.n	8006844 <bme280_init+0x2a>
				dev->chip_id = chip_id;
 8006864:	702b      	strb	r3, [r5, #0]
				rslt = bme280_soft_reset(dev);
 8006866:	4628      	mov	r0, r5
 8006868:	f7ff ffba 	bl	80067e0 <bme280_soft_reset>
				if (rslt == BME280_OK) {
 800686c:	4603      	mov	r3, r0
 800686e:	b120      	cbz	r0, 800687a <bme280_init+0x60>
			rslt = BME280_E_DEV_NOT_FOUND;
 8006870:	2c00      	cmp	r4, #0
 8006872:	bf08      	it	eq
 8006874:	f06f 0301 	mvneq.w	r3, #1
 8006878:	e7ed      	b.n	8006856 <bme280_init+0x3c>
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 800687a:	2300      	movs	r3, #0
 800687c:	9301      	str	r3, [sp, #4]
 800687e:	9302      	str	r3, [sp, #8]
 8006880:	9303      	str	r3, [sp, #12]
 8006882:	9304      	str	r3, [sp, #16]
 8006884:	9305      	str	r3, [sp, #20]
 8006886:	9306      	str	r3, [sp, #24]
 8006888:	f8ad 301c 	strh.w	r3, [sp, #28]
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800688c:	462b      	mov	r3, r5
 800688e:	221a      	movs	r2, #26
 8006890:	a901      	add	r1, sp, #4
 8006892:	2088      	movs	r0, #136	; 0x88
 8006894:	f7ff fe7a 	bl	800658c <bme280_get_regs>
	if (rslt == BME280_OK) {
 8006898:	4603      	mov	r3, r0
 800689a:	2800      	cmp	r0, #0
 800689c:	d1e8      	bne.n	8006870 <bme280_init+0x56>
	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800689e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80068a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80068a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80068aa:	822b      	strh	r3, [r5, #16]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80068ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80068b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80068b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80068b8:	826b      	strh	r3, [r5, #18]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80068ba:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80068be:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80068c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80068c6:	82ab      	strh	r3, [r5, #20]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80068c8:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80068cc:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80068d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80068d4:	82eb      	strh	r3, [r5, #22]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80068d6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80068da:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80068de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80068e2:	832b      	strh	r3, [r5, #24]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80068e4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80068e8:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80068ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80068f0:	836b      	strh	r3, [r5, #26]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80068f2:	f89d 2011 	ldrb.w	r2, [sp, #17]
 80068f6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80068fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80068fe:	83ab      	strh	r3, [r5, #28]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8006900:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8006904:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8006908:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800690c:	83eb      	strh	r3, [r5, #30]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800690e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8006912:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8006916:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800691a:	842b      	strh	r3, [r5, #32]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800691c:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8006920:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006924:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006928:	846b      	strh	r3, [r5, #34]	; 0x22
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 800692a:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800692e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006932:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006936:	84ab      	strh	r3, [r5, #36]	; 0x24
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8006938:	f89d 201b 	ldrb.w	r2, [sp, #27]
 800693c:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8006940:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006944:	84eb      	strh	r3, [r5, #38]	; 0x26
	calib_data->dig_H1 = reg_data[25];
 8006946:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800694a:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800694e:	462b      	mov	r3, r5
 8006950:	2207      	movs	r2, #7
 8006952:	a901      	add	r1, sp, #4
 8006954:	20e1      	movs	r0, #225	; 0xe1
 8006956:	f7ff fe19 	bl	800658c <bme280_get_regs>
		if (rslt == BME280_OK) {
 800695a:	4603      	mov	r3, r0
 800695c:	2800      	cmp	r0, #0
 800695e:	d187      	bne.n	8006870 <bme280_init+0x56>
	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8006960:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8006964:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006968:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800696c:	856a      	strh	r2, [r5, #42]	; 0x2a
	calib_data->dig_H3 = reg_data[2];
 800696e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8006972:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8006976:	f89d 2008 	ldrb.w	r2, [sp, #8]
	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 800697a:	f99d 0007 	ldrsb.w	r0, [sp, #7]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 800697e:	f002 010f 	and.w	r1, r2, #15
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8006982:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8006986:	85e9      	strh	r1, [r5, #46]	; 0x2e
	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8006988:	f99d 1009 	ldrsb.w	r1, [sp, #9]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 800698c:	0912      	lsrs	r2, r2, #4
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 800698e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8006992:	862a      	strh	r2, [r5, #48]	; 0x30
	calib_data->dig_H6 = (int8_t)reg_data[6];
 8006994:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8006998:	f885 2032 	strb.w	r2, [r5, #50]	; 0x32
 800699c:	e768      	b.n	8006870 <bme280_init+0x56>

0800699e <put_device_to_sleep>:
{
 800699e:	b510      	push	{r4, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	4604      	mov	r4, r0
	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80069a4:	4603      	mov	r3, r0
 80069a6:	2204      	movs	r2, #4
 80069a8:	a903      	add	r1, sp, #12
 80069aa:	20f2      	movs	r0, #242	; 0xf2
 80069ac:	f7ff fdee 	bl	800658c <bme280_get_regs>
	if (rslt == BME280_OK) {
 80069b0:	4603      	mov	r3, r0
 80069b2:	b110      	cbz	r0, 80069ba <put_device_to_sleep+0x1c>
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	b004      	add	sp, #16
 80069b8:	bd10      	pop	{r4, pc}
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80069ba:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	f88d 3006 	strb.w	r3, [sp, #6]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80069c6:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80069ca:	f3c3 0282 	ubfx	r2, r3, #2, #3
 80069ce:	f88d 2004 	strb.w	r2, [sp, #4]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80069d2:	095b      	lsrs	r3, r3, #5
 80069d4:	f88d 3005 	strb.w	r3, [sp, #5]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80069d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80069dc:	f3c3 0282 	ubfx	r2, r3, #2, #3
 80069e0:	f88d 2007 	strb.w	r2, [sp, #7]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80069e4:	095b      	lsrs	r3, r3, #5
 80069e6:	f88d 3008 	strb.w	r3, [sp, #8]
		rslt = bme280_soft_reset(dev);
 80069ea:	4620      	mov	r0, r4
 80069ec:	f7ff fef8 	bl	80067e0 <bme280_soft_reset>
		if (rslt == BME280_OK)
 80069f0:	4603      	mov	r3, r0
 80069f2:	2800      	cmp	r0, #0
 80069f4:	d1de      	bne.n	80069b4 <put_device_to_sleep+0x16>
	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80069f6:	4622      	mov	r2, r4
 80069f8:	a901      	add	r1, sp, #4
 80069fa:	201f      	movs	r0, #31
 80069fc:	f7ff fe39 	bl	8006672 <set_osr_settings>
	if (rslt == BME280_OK)
 8006a00:	4603      	mov	r3, r0
 8006a02:	2800      	cmp	r0, #0
 8006a04:	d1d6      	bne.n	80069b4 <put_device_to_sleep+0x16>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8006a06:	4622      	mov	r2, r4
 8006a08:	a901      	add	r1, sp, #4
 8006a0a:	201f      	movs	r0, #31
 8006a0c:	f7ff fe9a 	bl	8006744 <set_filter_standby_settings>
 8006a10:	4603      	mov	r3, r0
 8006a12:	e7cf      	b.n	80069b4 <put_device_to_sleep+0x16>

08006a14 <bme280_set_sensor_settings>:
{
 8006a14:	b570      	push	{r4, r5, r6, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	4606      	mov	r6, r0
 8006a1a:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 8006a1c:	4608      	mov	r0, r1
 8006a1e:	f7ff fda1 	bl	8006564 <null_ptr_check>
	if (rslt == BME280_OK) {
 8006a22:	4605      	mov	r5, r0
 8006a24:	b110      	cbz	r0, 8006a2c <bme280_set_sensor_settings+0x18>
}
 8006a26:	4628      	mov	r0, r5
 8006a28:	b002      	add	sp, #8
 8006a2a:	bd70      	pop	{r4, r5, r6, pc}
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	f10d 0007 	add.w	r0, sp, #7
 8006a32:	f7ff febf 	bl	80067b4 <bme280_get_sensor_mode>
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8006a36:	4605      	mov	r5, r0
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	d1f4      	bne.n	8006a26 <bme280_set_sensor_settings+0x12>
 8006a3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006a40:	b96b      	cbnz	r3, 8006a5e <bme280_set_sensor_settings+0x4a>
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8006a42:	f016 0f07 	tst.w	r6, #7
 8006a46:	d111      	bne.n	8006a6c <bme280_set_sensor_settings+0x58>
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8006a48:	f016 0f18 	tst.w	r6, #24
 8006a4c:	d0eb      	beq.n	8006a26 <bme280_set_sensor_settings+0x12>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8006a4e:	4622      	mov	r2, r4
 8006a50:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8006a54:	4630      	mov	r0, r6
 8006a56:	f7ff fe75 	bl	8006744 <set_filter_standby_settings>
 8006a5a:	4605      	mov	r5, r0
 8006a5c:	e7e3      	b.n	8006a26 <bme280_set_sensor_settings+0x12>
			rslt = put_device_to_sleep(dev);
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f7ff ff9d 	bl	800699e <put_device_to_sleep>
		if (rslt == BME280_OK) {
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d0ec      	beq.n	8006a42 <bme280_set_sensor_settings+0x2e>
			rslt = put_device_to_sleep(dev);
 8006a68:	4605      	mov	r5, r0
 8006a6a:	e7dc      	b.n	8006a26 <bme280_set_sensor_settings+0x12>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8006a6c:	4622      	mov	r2, r4
 8006a6e:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8006a72:	4630      	mov	r0, r6
 8006a74:	f7ff fdfd 	bl	8006672 <set_osr_settings>
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	d0e5      	beq.n	8006a48 <bme280_set_sensor_settings+0x34>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8006a7c:	4605      	mov	r5, r0
 8006a7e:	e7d2      	b.n	8006a26 <bme280_set_sensor_settings+0x12>

08006a80 <bme280_set_sensor_mode>:
{
 8006a80:	b530      	push	{r4, r5, lr}
 8006a82:	b083      	sub	sp, #12
 8006a84:	4605      	mov	r5, r0
 8006a86:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 8006a88:	4608      	mov	r0, r1
 8006a8a:	f7ff fd6b 	bl	8006564 <null_ptr_check>
	if (rslt == BME280_OK) {
 8006a8e:	4603      	mov	r3, r0
 8006a90:	b110      	cbz	r0, 8006a98 <bme280_set_sensor_mode+0x18>
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	b003      	add	sp, #12
 8006a96:	bd30      	pop	{r4, r5, pc}
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8006a98:	4621      	mov	r1, r4
 8006a9a:	f10d 0007 	add.w	r0, sp, #7
 8006a9e:	f7ff fe89 	bl	80067b4 <bme280_get_sensor_mode>
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	d1f4      	bne.n	8006a92 <bme280_set_sensor_mode+0x12>
 8006aa8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006aac:	b9eb      	cbnz	r3, 8006aea <bme280_set_sensor_mode+0x6a>
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8006aae:	20f4      	movs	r0, #244	; 0xf4
 8006ab0:	f88d 0005 	strb.w	r0, [sp, #5]
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8006ab4:	4623      	mov	r3, r4
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f10d 0106 	add.w	r1, sp, #6
 8006abc:	f7ff fd66 	bl	800658c <bme280_get_regs>
	if (rslt == BME280_OK) {
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	d1e5      	bne.n	8006a92 <bme280_set_sensor_mode+0x12>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8006ac6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006aca:	f023 0303 	bic.w	r3, r3, #3
 8006ace:	f005 0503 	and.w	r5, r5, #3
 8006ad2:	431d      	orrs	r5, r3
 8006ad4:	a902      	add	r1, sp, #8
 8006ad6:	f801 5d02 	strb.w	r5, [r1, #-2]!
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8006ada:	4623      	mov	r3, r4
 8006adc:	2201      	movs	r2, #1
 8006ade:	f10d 0005 	add.w	r0, sp, #5
 8006ae2:	f7ff fd70 	bl	80065c6 <bme280_set_regs>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	e7d3      	b.n	8006a92 <bme280_set_sensor_mode+0x12>
			rslt = put_device_to_sleep(dev);
 8006aea:	4620      	mov	r0, r4
 8006aec:	f7ff ff57 	bl	800699e <put_device_to_sleep>
		if (rslt == BME280_OK)
 8006af0:	4603      	mov	r3, r0
 8006af2:	2800      	cmp	r0, #0
 8006af4:	d1cd      	bne.n	8006a92 <bme280_set_sensor_mode+0x12>
 8006af6:	e7da      	b.n	8006aae <bme280_set_sensor_mode+0x2e>

08006af8 <bme280_parse_sensor_data>:
	data_msb = (uint32_t)reg_data[0] << 12;
 8006af8:	7802      	ldrb	r2, [r0, #0]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8006afa:	7843      	ldrb	r3, [r0, #1]
 8006afc:	011b      	lsls	r3, r3, #4
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8006afe:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8006b02:	7882      	ldrb	r2, [r0, #2]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8006b04:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8006b08:	600b      	str	r3, [r1, #0]
	data_msb = (uint32_t)reg_data[3] << 12;
 8006b0a:	78c2      	ldrb	r2, [r0, #3]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8006b0c:	7903      	ldrb	r3, [r0, #4]
 8006b0e:	011b      	lsls	r3, r3, #4
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8006b10:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8006b14:	7942      	ldrb	r2, [r0, #5]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8006b16:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8006b1a:	604b      	str	r3, [r1, #4]
	data_lsb = (uint32_t)reg_data[6] << 8;
 8006b1c:	7982      	ldrb	r2, [r0, #6]
	data_msb = (uint32_t)reg_data[7];
 8006b1e:	79c3      	ldrb	r3, [r0, #7]
	uncomp_data->humidity = data_msb | data_lsb;
 8006b20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006b24:	608b      	str	r3, [r1, #8]
}
 8006b26:	4770      	bx	lr

08006b28 <bme280_compensate_data>:
	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8006b28:	2900      	cmp	r1, #0
 8006b2a:	f000 8232 	beq.w	8006f92 <bme280_compensate_data+0x46a>
{
 8006b2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b32:	b087      	sub	sp, #28
 8006b34:	460c      	mov	r4, r1
	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8006b36:	2a00      	cmp	r2, #0
 8006b38:	f000 822e 	beq.w	8006f98 <bme280_compensate_data+0x470>
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 822e 	beq.w	8006f9e <bme280_compensate_data+0x476>
		comp_data->temperature = 0;
 8006b42:	2100      	movs	r1, #0
 8006b44:	6051      	str	r1, [r2, #4]
		comp_data->pressure = 0;
 8006b46:	6011      	str	r1, [r2, #0]
		comp_data->humidity = 0;
 8006b48:	6091      	str	r1, [r2, #8]
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8006b4a:	f010 0f07 	tst.w	r0, #7
 8006b4e:	f040 81bd 	bne.w	8006ecc <bme280_compensate_data+0x3a4>
 8006b52:	9403      	str	r4, [sp, #12]
 8006b54:	461c      	mov	r4, r3
 8006b56:	9202      	str	r2, [sp, #8]
 8006b58:	4605      	mov	r5, r0
		if (sensor_comp & BME280_PRESS) {
 8006b5a:	f010 0f01 	tst.w	r0, #1
 8006b5e:	f000 8146 	beq.w	8006dee <bme280_compensate_data+0x2c6>
	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8006b62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b64:	17d3      	asrs	r3, r2, #31
 8006b66:	f5b2 36fa 	subs.w	r6, r2, #128000	; 0x1f400
 8006b6a:	f143 37ff 	adc.w	r7, r3, #4294967295	; 0xffffffff
 8006b6e:	e9cd 6704 	strd	r6, r7, [sp, #16]
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8006b72:	fb06 f107 	mul.w	r1, r6, r7
 8006b76:	fba6 2306 	umull	r2, r3, r6, r6
 8006b7a:	e9cd 2300 	strd	r2, r3, [sp]
 8006b7e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8006b82:	9301      	str	r3, [sp, #4]
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8006b84:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8006b88:	17c1      	asrs	r1, r0, #31
 8006b8a:	fb00 fc07 	mul.w	ip, r0, r7
 8006b8e:	fb06 cc01 	mla	ip, r6, r1, ip
 8006b92:	fba0 0106 	umull	r0, r1, r0, r6
 8006b96:	4461      	add	r1, ip
 8006b98:	030f      	lsls	r7, r1, #12
 8006b9a:	ea47 5710 	orr.w	r7, r7, r0, lsr #20
 8006b9e:	0306      	lsls	r6, r0, #12
 8006ba0:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 8006ba4:	17c1      	asrs	r1, r0, #31
 8006ba6:	e9dd 8900 	ldrd	r8, r9, [sp]
 8006baa:	fb00 fc09 	mul.w	ip, r0, r9
 8006bae:	fb08 cc01 	mla	ip, r8, r1, ip
 8006bb2:	fba0 0108 	umull	r0, r1, r0, r8
 8006bb6:	4461      	add	r1, ip
 8006bb8:	4682      	mov	sl, r0
 8006bba:	468b      	mov	fp, r1
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	f171 0300 	sbcs.w	r3, r1, #0
 8006bc2:	f2c0 81b9 	blt.w	8006f38 <bme280_compensate_data+0x410>
 8006bc6:	ea4f 201a 	mov.w	r0, sl, lsr #8
 8006bca:	ea40 600b 	orr.w	r0, r0, fp, lsl #24
 8006bce:	ea4f 212b 	mov.w	r1, fp, asr #8
 8006bd2:	eb16 0800 	adds.w	r8, r6, r0
 8006bd6:	eb47 0901 	adc.w	r9, r7, r1
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8006bda:	f118 0a00 	adds.w	sl, r8, #0
 8006bde:	f549 4b00 	adc.w	fp, r9, #32768	; 0x8000
 8006be2:	f8b4 8006 	ldrh.w	r8, [r4, #6]
 8006be6:	fbaa 0108 	umull	r0, r1, sl, r8
 8006bea:	fb08 110b 	mla	r1, r8, fp, r1
 8006bee:	468b      	mov	fp, r1
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	f171 0300 	sbcs.w	r3, r1, #0
 8006bf6:	f2c0 81a4 	blt.w	8006f42 <bme280_compensate_data+0x41a>
 8006bfa:	ea4f 086b 	mov.w	r8, fp, asr #1
 8006bfe:	ea4f 79eb 	mov.w	r9, fp, asr #31
	if (var1 != 0) {
 8006c02:	ea58 0309 	orrs.w	r3, r8, r9
 8006c06:	f000 81c2 	beq.w	8006f8e <bme280_compensate_data+0x466>
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8006c0a:	f9b4 a010 	ldrsh.w	sl, [r4, #16]
 8006c0e:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8006c12:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006c16:	fb0a f702 	mul.w	r7, sl, r2
 8006c1a:	fb01 710b 	mla	r1, r1, fp, r7
 8006c1e:	9b00      	ldr	r3, [sp, #0]
 8006c20:	fbaa 2303 	umull	r2, r3, sl, r3
 8006c24:	e9cd 2300 	strd	r2, r3, [sp]
 8006c28:	440b      	add	r3, r1
 8006c2a:	9301      	str	r3, [sp, #4]
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8006c2c:	f9b4 600e 	ldrsh.w	r6, [r4, #14]
 8006c30:	17f7      	asrs	r7, r6, #31
 8006c32:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006c36:	465b      	mov	r3, fp
 8006c38:	fb06 f303 	mul.w	r3, r6, r3
 8006c3c:	fb0a 3107 	mla	r1, sl, r7, r3
 8006c40:	fba6 230a 	umull	r2, r3, r6, sl
 8006c44:	440b      	add	r3, r1
 8006c46:	045f      	lsls	r7, r3, #17
 8006c48:	ea47 37d2 	orr.w	r7, r7, r2, lsr #15
 8006c4c:	0456      	lsls	r6, r2, #17
 8006c4e:	e9dd ab00 	ldrd	sl, fp, [sp]
 8006c52:	eb1a 0a06 	adds.w	sl, sl, r6
 8006c56:	eb4b 0b07 	adc.w	fp, fp, r7
		var4 = 1048576 - uncomp_data->pressure;
 8006c5a:	9b03      	ldr	r3, [sp, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8006c62:	f04f 0c00 	mov.w	ip, #0
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8006c66:	0859      	lsrs	r1, r3, #1
 8006c68:	07d8      	lsls	r0, r3, #31
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8006c6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c6e:	00d3      	lsls	r3, r2, #3
 8006c70:	eb1c 060a 	adds.w	r6, ip, sl
 8006c74:	eb43 070b 	adc.w	r7, r3, fp
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8006c78:	1b80      	subs	r0, r0, r6
 8006c7a:	eb61 0107 	sbc.w	r1, r1, r7
 8006c7e:	4682      	mov	sl, r0
 8006c80:	468b      	mov	fp, r1
 8006c82:	1800      	adds	r0, r0, r0
 8006c84:	4149      	adcs	r1, r1
 8006c86:	eb10 060a 	adds.w	r6, r0, sl
 8006c8a:	eb41 070b 	adc.w	r7, r1, fp
 8006c8e:	01bb      	lsls	r3, r7, #6
 8006c90:	ea43 6396 	orr.w	r3, r3, r6, lsr #26
 8006c94:	01b2      	lsls	r2, r6, #6
 8006c96:	18b0      	adds	r0, r6, r2
 8006c98:	eb47 0103 	adc.w	r1, r7, r3
 8006c9c:	008b      	lsls	r3, r1, #2
 8006c9e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ca2:	0082      	lsls	r2, r0, #2
 8006ca4:	eb12 060a 	adds.w	r6, r2, sl
 8006ca8:	eb43 070b 	adc.w	r7, r3, fp
 8006cac:	00bb      	lsls	r3, r7, #2
 8006cae:	ea43 7396 	orr.w	r3, r3, r6, lsr #30
 8006cb2:	00b2      	lsls	r2, r6, #2
 8006cb4:	4616      	mov	r6, r2
 8006cb6:	461f      	mov	r7, r3
 8006cb8:	4642      	mov	r2, r8
 8006cba:	464b      	mov	r3, r9
 8006cbc:	eb16 000a 	adds.w	r0, r6, sl
 8006cc0:	eb47 010b 	adc.w	r1, r7, fp
 8006cc4:	f7f9 ff76 	bl	8000bb4 <__aeabi_ldivmod>
 8006cc8:	4682      	mov	sl, r0
 8006cca:	468b      	mov	fp, r1
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8006ccc:	4601      	mov	r1, r0
 8006cce:	465a      	mov	r2, fp
 8006cd0:	f1ba 0f00 	cmp.w	sl, #0
 8006cd4:	f17b 0300 	sbcs.w	r3, fp, #0
 8006cd8:	f2c0 8138 	blt.w	8006f4c <bme280_compensate_data+0x424>
 8006cdc:	ea4f 3c51 	mov.w	ip, r1, lsr #13
 8006ce0:	ea4c 4cc2 	orr.w	ip, ip, r2, lsl #19
 8006ce4:	1356      	asrs	r6, r2, #13
 8006ce6:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8006cea:	17d3      	asrs	r3, r2, #31
 8006cec:	fb02 f706 	mul.w	r7, r2, r6
 8006cf0:	fb0c 7703 	mla	r7, ip, r3, r7
 8006cf4:	fba2 230c 	umull	r2, r3, r2, ip
 8006cf8:	443b      	add	r3, r7
 8006cfa:	fb02 f606 	mul.w	r6, r2, r6
 8006cfe:	fb0c 6603 	mla	r6, ip, r3, r6
 8006d02:	fba2 230c 	umull	r2, r3, r2, ip
 8006d06:	4433      	add	r3, r6
 8006d08:	4690      	mov	r8, r2
 8006d0a:	4699      	mov	r9, r3
 8006d0c:	2a00      	cmp	r2, #0
 8006d0e:	f173 0100 	sbcs.w	r1, r3, #0
 8006d12:	f2c0 8123 	blt.w	8006f5c <bme280_compensate_data+0x434>
 8006d16:	ea4f 6258 	mov.w	r2, r8, lsr #25
 8006d1a:	ea42 12c9 	orr.w	r2, r2, r9, lsl #7
 8006d1e:	ea4f 6369 	mov.w	r3, r9, asr #25
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8006d22:	eb12 080a 	adds.w	r8, r2, sl
 8006d26:	eb43 090b 	adc.w	r9, r3, fp
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8006d2a:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8006d2e:	17f7      	asrs	r7, r6, #31
 8006d30:	fb06 f10b 	mul.w	r1, r6, fp
 8006d34:	fb0a 1307 	mla	r3, sl, r7, r1
 8006d38:	fba6 010a 	umull	r0, r1, r6, sl
 8006d3c:	4419      	add	r1, r3
 8006d3e:	4682      	mov	sl, r0
 8006d40:	468b      	mov	fp, r1
 8006d42:	2800      	cmp	r0, #0
 8006d44:	f171 0300 	sbcs.w	r3, r1, #0
 8006d48:	f2c0 8110 	blt.w	8006f6c <bme280_compensate_data+0x444>
 8006d4c:	ea4f 40da 	mov.w	r0, sl, lsr #19
 8006d50:	ea40 304b 	orr.w	r0, r0, fp, lsl #13
 8006d54:	ea4f 41eb 	mov.w	r1, fp, asr #19
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8006d58:	eb10 0208 	adds.w	r2, r0, r8
 8006d5c:	eb41 0309 	adc.w	r3, r1, r9
 8006d60:	4610      	mov	r0, r2
 8006d62:	4619      	mov	r1, r3
 8006d64:	2a00      	cmp	r2, #0
 8006d66:	f173 0600 	sbcs.w	r6, r3, #0
 8006d6a:	f2c0 8106 	blt.w	8006f7a <bme280_compensate_data+0x452>
 8006d6e:	0a03      	lsrs	r3, r0, #8
 8006d70:	ea43 6601 	orr.w	r6, r3, r1, lsl #24
 8006d74:	120f      	asrs	r7, r1, #8
 8006d76:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
 8006d7a:	17c1      	asrs	r1, r0, #31
 8006d7c:	010b      	lsls	r3, r1, #4
 8006d7e:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8006d82:	0102      	lsls	r2, r0, #4
 8006d84:	eb12 0806 	adds.w	r8, r2, r6
 8006d88:	eb43 0907 	adc.w	r9, r3, r7
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 8006d8c:	ea4f 71d9 	mov.w	r1, r9, lsr #31
 8006d90:	eb18 0201 	adds.w	r2, r8, r1
 8006d94:	f149 0300 	adc.w	r3, r9, #0
 8006d98:	ea5f 0963 	movs.w	r9, r3, asr #1
 8006d9c:	ea4f 0832 	mov.w	r8, r2, rrx
 8006da0:	eb18 0008 	adds.w	r0, r8, r8
 8006da4:	eb49 0109 	adc.w	r1, r9, r9
 8006da8:	eb10 0208 	adds.w	r2, r0, r8
 8006dac:	eb41 0309 	adc.w	r3, r1, r9
 8006db0:	015f      	lsls	r7, r3, #5
 8006db2:	ea47 67d2 	orr.w	r7, r7, r2, lsr #27
 8006db6:	0156      	lsls	r6, r2, #5
 8006db8:	1990      	adds	r0, r2, r6
 8006dba:	eb43 0107 	adc.w	r1, r3, r7
 8006dbe:	eb18 0200 	adds.w	r2, r8, r0
 8006dc2:	eb49 0301 	adc.w	r3, r9, r1
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	4619      	mov	r1, r3
 8006dca:	2a00      	cmp	r2, #0
 8006dcc:	f173 0600 	sbcs.w	r6, r3, #0
 8006dd0:	f2c0 80d8 	blt.w	8006f84 <bme280_compensate_data+0x45c>
 8006dd4:	09c3      	lsrs	r3, r0, #7
 8006dd6:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8006dda:	4a73      	ldr	r2, [pc, #460]	; (8006fa8 <bme280_compensate_data+0x480>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	bf28      	it	cs
 8006de0:	4613      	movcs	r3, r2
 8006de2:	4a72      	ldr	r2, [pc, #456]	; (8006fac <bme280_compensate_data+0x484>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	bf38      	it	cc
 8006de8:	4613      	movcc	r3, r2
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8006dea:	9a02      	ldr	r2, [sp, #8]
 8006dec:	6013      	str	r3, [r2, #0]
		if (sensor_comp & BME280_HUM) {
 8006dee:	f015 0f04 	tst.w	r5, #4
 8006df2:	f000 80d7 	beq.w	8006fa4 <bme280_compensate_data+0x47c>
	var1 = calib_data->t_fine - ((int32_t)76800);
 8006df6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006df8:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 8006dfc:	9a03      	ldr	r2, [sp, #12]
 8006dfe:	6891      	ldr	r1, [r2, #8]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8006e00:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 8006e04:	0512      	lsls	r2, r2, #20
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8006e06:	ebc2 3181 	rsb	r1, r2, r1, lsl #14
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 8006e0a:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8006e0e:	fb03 1212 	mls	r2, r3, r2, r1
 8006e12:	f512 4280 	adds.w	r2, r2, #16384	; 0x4000
 8006e16:	bf44      	itt	mi
 8006e18:	f502 42ff 	addmi.w	r2, r2, #32640	; 0x7f80
 8006e1c:	327f      	addmi	r2, #127	; 0x7f
 8006e1e:	13d2      	asrs	r2, r2, #15
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8006e20:	7f21      	ldrb	r1, [r4, #28]
 8006e22:	fb03 f101 	mul.w	r1, r3, r1
 8006e26:	2900      	cmp	r1, #0
 8006e28:	bfb8      	it	lt
 8006e2a:	f201 71ff 	addwlt	r1, r1, #2047	; 0x7ff
 8006e2e:	12c9      	asrs	r1, r1, #11
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8006e30:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8006e34:	f994 0022 	ldrsb.w	r0, [r4, #34]	; 0x22
 8006e38:	fb03 f300 	mul.w	r3, r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	bfb8      	it	lt
 8006e40:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8006e44:	129b      	asrs	r3, r3, #10
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8006e46:	fb03 f301 	mul.w	r3, r3, r1
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	bfb8      	it	lt
 8006e4e:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8006e52:	129b      	asrs	r3, r3, #10
 8006e54:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8006e58:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
 8006e5c:	fb01 f303 	mul.w	r3, r1, r3
 8006e60:	f513 5300 	adds.w	r3, r3, #8192	; 0x2000
 8006e64:	bf44      	itt	mi
 8006e66:	f503 537f 	addmi.w	r3, r3, #16320	; 0x3fc0
 8006e6a:	333f      	addmi	r3, #63	; 0x3f
 8006e6c:	139b      	asrs	r3, r3, #14
	var3 = var5 * var2;
 8006e6e:	fb02 f303 	mul.w	r3, r2, r3
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8006e72:	461a      	mov	r2, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	bfbc      	itt	lt
 8006e78:	f503 42ff 	addlt.w	r2, r3, #32640	; 0x7f80
 8006e7c:	327f      	addlt	r2, #127	; 0x7f
 8006e7e:	13d2      	asrs	r2, r2, #15
 8006e80:	fb02 f202 	mul.w	r2, r2, r2
 8006e84:	2a00      	cmp	r2, #0
 8006e86:	bfb8      	it	lt
 8006e88:	327f      	addlt	r2, #127	; 0x7f
 8006e8a:	11d2      	asrs	r2, r2, #7
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8006e8c:	7e21      	ldrb	r1, [r4, #24]
 8006e8e:	fb01 f202 	mul.w	r2, r1, r2
 8006e92:	2a00      	cmp	r2, #0
 8006e94:	bfb8      	it	lt
 8006e96:	320f      	addlt	r2, #15
 8006e98:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	var5 = (var5 < 0 ? 0 : var5);
 8006e9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8006ea0:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8006ea4:	bfa8      	it	ge
 8006ea6:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
	humidity = (uint32_t)(var5 / 4096);
 8006eaa:	461a      	mov	r2, r3
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	bfb8      	it	lt
 8006eb0:	f603 72ff 	addwlt	r2, r3, #4095	; 0xfff
 8006eb4:	1312      	asrs	r2, r2, #12
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8006eb6:	f5b2 3fc8 	cmp.w	r2, #102400	; 0x19000
 8006eba:	bf28      	it	cs
 8006ebc:	f44f 32c8 	movcs.w	r2, #102400	; 0x19000
 8006ec0:	9b02      	ldr	r3, [sp, #8]
 8006ec2:	609a      	str	r2, [r3, #8]
	int8_t rslt = BME280_OK;
 8006ec4:	2000      	movs	r0, #0
}
 8006ec6:	b007      	add	sp, #28
 8006ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 8006ecc:	6867      	ldr	r7, [r4, #4]
 8006ece:	8819      	ldrh	r1, [r3, #0]
 8006ed0:	004e      	lsls	r6, r1, #1
 8006ed2:	ebc6 05d7 	rsb	r5, r6, r7, lsr #3
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8006ed6:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8006eda:	fb06 f605 	mul.w	r6, r6, r5
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8006ede:	ebc1 1117 	rsb	r1, r1, r7, lsr #4
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8006ee2:	fb01 f101 	mul.w	r1, r1, r1
 8006ee6:	2900      	cmp	r1, #0
 8006ee8:	bfb8      	it	lt
 8006eea:	f601 71ff 	addwlt	r1, r1, #4095	; 0xfff
 8006eee:	1309      	asrs	r1, r1, #12
 8006ef0:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8006ef4:	fb05 f501 	mul.w	r5, r5, r1
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8006ef8:	4631      	mov	r1, r6
 8006efa:	2e00      	cmp	r6, #0
 8006efc:	bfb8      	it	lt
 8006efe:	f206 71ff 	addwlt	r1, r6, #2047	; 0x7ff
 8006f02:	12c9      	asrs	r1, r1, #11
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8006f04:	462e      	mov	r6, r5
 8006f06:	2d00      	cmp	r5, #0
 8006f08:	bfbc      	itt	lt
 8006f0a:	f505 567f 	addlt.w	r6, r5, #16320	; 0x3fc0
 8006f0e:	363f      	addlt	r6, #63	; 0x3f
	calib_data->t_fine = var1 + var2;
 8006f10:	eb01 31a6 	add.w	r1, r1, r6, asr #14
 8006f14:	6259      	str	r1, [r3, #36]	; 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8006f16:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006f1a:	3180      	adds	r1, #128	; 0x80
 8006f1c:	bf48      	it	mi
 8006f1e:	31ff      	addmi	r1, #255	; 0xff
 8006f20:	1209      	asrs	r1, r1, #8
 8006f22:	f242 1534 	movw	r5, #8500	; 0x2134
 8006f26:	42a9      	cmp	r1, r5
 8006f28:	bfa8      	it	ge
 8006f2a:	4629      	movge	r1, r5
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8006f2c:	4d20      	ldr	r5, [pc, #128]	; (8006fb0 <bme280_compensate_data+0x488>)
 8006f2e:	42a9      	cmp	r1, r5
 8006f30:	bfb8      	it	lt
 8006f32:	4629      	movlt	r1, r5
 8006f34:	6051      	str	r1, [r2, #4]
 8006f36:	e60c      	b.n	8006b52 <bme280_compensate_data+0x2a>
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8006f38:	f110 0aff 	adds.w	sl, r0, #255	; 0xff
 8006f3c:	f141 0b00 	adc.w	fp, r1, #0
 8006f40:	e641      	b.n	8006bc6 <bme280_compensate_data+0x9e>
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8006f42:	f110 3aff 	adds.w	sl, r0, #4294967295	; 0xffffffff
 8006f46:	f141 0b01 	adc.w	fp, r1, #1
 8006f4a:	e656      	b.n	8006bfa <bme280_compensate_data+0xd2>
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8006f4c:	f641 76ff 	movw	r6, #8191	; 0x1fff
 8006f50:	2700      	movs	r7, #0
 8006f52:	eb16 010a 	adds.w	r1, r6, sl
 8006f56:	eb47 020b 	adc.w	r2, r7, fp
 8006f5a:	e6bf      	b.n	8006cdc <bme280_compensate_data+0x1b4>
 8006f5c:	f06f 467e 	mvn.w	r6, #4261412864	; 0xfe000000
 8006f60:	2700      	movs	r7, #0
 8006f62:	eb16 0802 	adds.w	r8, r6, r2
 8006f66:	eb47 0903 	adc.w	r9, r7, r3
 8006f6a:	e6d4      	b.n	8006d16 <bme280_compensate_data+0x1ee>
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8006f6c:	4e11      	ldr	r6, [pc, #68]	; (8006fb4 <bme280_compensate_data+0x48c>)
 8006f6e:	2700      	movs	r7, #0
 8006f70:	eb16 0a00 	adds.w	sl, r6, r0
 8006f74:	eb47 0b01 	adc.w	fp, r7, r1
 8006f78:	e6e8      	b.n	8006d4c <bme280_compensate_data+0x224>
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8006f7a:	f112 00ff 	adds.w	r0, r2, #255	; 0xff
 8006f7e:	f143 0100 	adc.w	r1, r3, #0
 8006f82:	e6f4      	b.n	8006d6e <bme280_compensate_data+0x246>
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 8006f84:	f112 007f 	adds.w	r0, r2, #127	; 0x7f
 8006f88:	f143 0100 	adc.w	r1, r3, #0
 8006f8c:	e722      	b.n	8006dd4 <bme280_compensate_data+0x2ac>
		pressure = pressure_min;
 8006f8e:	4b07      	ldr	r3, [pc, #28]	; (8006fac <bme280_compensate_data+0x484>)
 8006f90:	e72b      	b.n	8006dea <bme280_compensate_data+0x2c2>
		rslt = BME280_E_NULL_PTR;
 8006f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006f96:	4770      	bx	lr
		rslt = BME280_E_NULL_PTR;
 8006f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f9c:	e793      	b.n	8006ec6 <bme280_compensate_data+0x39e>
 8006f9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fa2:	e790      	b.n	8006ec6 <bme280_compensate_data+0x39e>
	int8_t rslt = BME280_OK;
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	e78e      	b.n	8006ec6 <bme280_compensate_data+0x39e>
 8006fa8:	00a7d8c0 	.word	0x00a7d8c0
 8006fac:	002dc6c0 	.word	0x002dc6c0
 8006fb0:	fffff060 	.word	0xfffff060
 8006fb4:	0007ffff 	.word	0x0007ffff

08006fb8 <bme280_get_sensor_data>:
{
 8006fb8:	b570      	push	{r4, r5, r6, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	4606      	mov	r6, r0
 8006fbe:	460d      	mov	r5, r1
 8006fc0:	4614      	mov	r4, r2
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	9304      	str	r3, [sp, #16]
 8006fc6:	9305      	str	r3, [sp, #20]
	struct bme280_uncomp_data uncomp_data = {0};
 8006fc8:	9301      	str	r3, [sp, #4]
 8006fca:	9302      	str	r3, [sp, #8]
 8006fcc:	9303      	str	r3, [sp, #12]
	rslt = null_ptr_check(dev);
 8006fce:	4610      	mov	r0, r2
 8006fd0:	f7ff fac8 	bl	8006564 <null_ptr_check>
	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8006fd4:	b9c0      	cbnz	r0, 8007008 <bme280_get_sensor_data+0x50>
 8006fd6:	b1d5      	cbz	r5, 800700e <bme280_get_sensor_data+0x56>
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8006fd8:	4623      	mov	r3, r4
 8006fda:	2208      	movs	r2, #8
 8006fdc:	a904      	add	r1, sp, #16
 8006fde:	20f7      	movs	r0, #247	; 0xf7
 8006fe0:	f7ff fad4 	bl	800658c <bme280_get_regs>
		if (rslt == BME280_OK) {
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	b110      	cbz	r0, 8006fee <bme280_get_sensor_data+0x36>
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	b006      	add	sp, #24
 8006fec:	bd70      	pop	{r4, r5, r6, pc}
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8006fee:	a901      	add	r1, sp, #4
 8006ff0:	a804      	add	r0, sp, #16
 8006ff2:	f7ff fd81 	bl	8006af8 <bme280_parse_sensor_data>
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8006ff6:	f104 0310 	add.w	r3, r4, #16
 8006ffa:	462a      	mov	r2, r5
 8006ffc:	a901      	add	r1, sp, #4
 8006ffe:	4630      	mov	r0, r6
 8007000:	f7ff fd92 	bl	8006b28 <bme280_compensate_data>
 8007004:	4603      	mov	r3, r0
 8007006:	e7ef      	b.n	8006fe8 <bme280_get_sensor_data+0x30>
		rslt = BME280_E_NULL_PTR;
 8007008:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800700c:	e7ec      	b.n	8006fe8 <bme280_get_sensor_data+0x30>
 800700e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007012:	e7e9      	b.n	8006fe8 <bme280_get_sensor_data+0x30>
 8007014:	0000      	movs	r0, r0
	...

08007018 <TSL2561_getLux>:
// ms: integration time in ms, from setTiming() or from manual integration
// CH0, CH1: results from getData()
// lux will be set to resulting lux calculation
// returns true (1) if calculation was successful
// RETURNS false (0) AND lux = 0.0 IF EITHER SENSOR WAS SATURATED (0XFFFF)
bool TSL2561_getLux(unsigned char gain, unsigned int ms, unsigned int CH0, unsigned int CH1, double *lux) {
 8007018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800701c:	b082      	sub	sp, #8
	double ratio, d0, d1;
	// Determine if either sensor saturated (0xFFFF)
	// If so, abandon ship (calculation will not be accurate)
	if ((CH0 == 0xFFFF) || (CH1 == 0xFFFF)) {
 800701e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8007022:	42a2      	cmp	r2, r4
 8007024:	d06a      	beq.n	80070fc <TSL2561_getLux+0xe4>
 8007026:	42a3      	cmp	r3, r4
 8007028:	d068      	beq.n	80070fc <TSL2561_getLux+0xe4>
 800702a:	461c      	mov	r4, r3
 800702c:	4688      	mov	r8, r1
 800702e:	4682      	mov	sl, r0
		*lux = 0.0;
		return false;
	}
	// Convert from unsigned integer to floating point
	d0 = CH0; d1 = CH1;
 8007030:	4610      	mov	r0, r2
 8007032:	f7f9 f9cf 	bl	80003d4 <__aeabi_ui2d>
 8007036:	4606      	mov	r6, r0
 8007038:	460f      	mov	r7, r1
 800703a:	4620      	mov	r0, r4
 800703c:	f7f9 f9ca 	bl	80003d4 <__aeabi_ui2d>
 8007040:	e9cd 0100 	strd	r0, r1, [sp]
	// We will need the ratio for subsequent calculations
	ratio = d1 / d0;
 8007044:	4632      	mov	r2, r6
 8007046:	463b      	mov	r3, r7
 8007048:	f7f9 fb68 	bl	800071c <__aeabi_ddiv>
 800704c:	4604      	mov	r4, r0
 800704e:	460d      	mov	r5, r1
	// Normalize for integration time
	d0 *= (402.0/ms);
 8007050:	4640      	mov	r0, r8
 8007052:	f7f9 f9bf 	bl	80003d4 <__aeabi_ui2d>
 8007056:	4602      	mov	r2, r0
 8007058:	460b      	mov	r3, r1
 800705a:	a169      	add	r1, pc, #420	; (adr r1, 8007200 <TSL2561_getLux+0x1e8>)
 800705c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007060:	f7f9 fb5c 	bl	800071c <__aeabi_ddiv>
 8007064:	4680      	mov	r8, r0
 8007066:	4689      	mov	r9, r1
 8007068:	4632      	mov	r2, r6
 800706a:	463b      	mov	r3, r7
 800706c:	f7f9 fa2c 	bl	80004c8 <__aeabi_dmul>
 8007070:	4606      	mov	r6, r0
 8007072:	460f      	mov	r7, r1
	d1 *= (402.0/ms);
 8007074:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007078:	4640      	mov	r0, r8
 800707a:	4649      	mov	r1, r9
 800707c:	f7f9 fa24 	bl	80004c8 <__aeabi_dmul>
 8007080:	4680      	mov	r8, r0
 8007082:	4689      	mov	r9, r1
	// Normalize for gain
	if (!gain) {
 8007084:	f1ba 0f00 	cmp.w	sl, #0
 8007088:	d10f      	bne.n	80070aa <TSL2561_getLux+0x92>
		d0 *= 16;
 800708a:	2200      	movs	r2, #0
 800708c:	4b76      	ldr	r3, [pc, #472]	; (8007268 <TSL2561_getLux+0x250>)
 800708e:	4630      	mov	r0, r6
 8007090:	4639      	mov	r1, r7
 8007092:	f7f9 fa19 	bl	80004c8 <__aeabi_dmul>
 8007096:	4606      	mov	r6, r0
 8007098:	460f      	mov	r7, r1
		d1 *= 16;
 800709a:	2200      	movs	r2, #0
 800709c:	4b72      	ldr	r3, [pc, #456]	; (8007268 <TSL2561_getLux+0x250>)
 800709e:	4640      	mov	r0, r8
 80070a0:	4649      	mov	r1, r9
 80070a2:	f7f9 fa11 	bl	80004c8 <__aeabi_dmul>
 80070a6:	4680      	mov	r8, r0
 80070a8:	4689      	mov	r9, r1
	}

	// Determine lux per datasheet equations:
	if (ratio < 0.5) {
 80070aa:	2200      	movs	r2, #0
 80070ac:	4b6f      	ldr	r3, [pc, #444]	; (800726c <TSL2561_getLux+0x254>)
 80070ae:	4620      	mov	r0, r4
 80070b0:	4629      	mov	r1, r5
 80070b2:	f7f9 fc7b 	bl	80009ac <__aeabi_dcmplt>
 80070b6:	bb50      	cbnz	r0, 800710e <TSL2561_getLux+0xf6>
		*lux = 0.0304 * d0 - 0.062 * d0 * pow(ratio,1.4);
		return true;
	}
	if (ratio < 0.61) {
 80070b8:	a353      	add	r3, pc, #332	; (adr r3, 8007208 <TSL2561_getLux+0x1f0>)
 80070ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070be:	4620      	mov	r0, r4
 80070c0:	4629      	mov	r1, r5
 80070c2:	f7f9 fc73 	bl	80009ac <__aeabi_dcmplt>
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d149      	bne.n	800715e <TSL2561_getLux+0x146>
		*lux = 0.0224 * d0 - 0.031 * d1;
		return true;
	}
	if (ratio < 0.80) {
 80070ca:	a351      	add	r3, pc, #324	; (adr r3, 8007210 <TSL2561_getLux+0x1f8>)
 80070cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d0:	4620      	mov	r0, r4
 80070d2:	4629      	mov	r1, r5
 80070d4:	f7f9 fc6a 	bl	80009ac <__aeabi_dcmplt>
 80070d8:	2800      	cmp	r0, #0
 80070da:	d15b      	bne.n	8007194 <TSL2561_getLux+0x17c>
		*lux = 0.0128 * d0 - 0.0153 * d1;
		return true;
	}
	if (ratio < 1.30) {
 80070dc:	a34e      	add	r3, pc, #312	; (adr r3, 8007218 <TSL2561_getLux+0x200>)
 80070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e2:	4620      	mov	r0, r4
 80070e4:	4629      	mov	r1, r5
 80070e6:	f7f9 fc61 	bl	80009ac <__aeabi_dcmplt>
 80070ea:	2800      	cmp	r0, #0
 80070ec:	d16d      	bne.n	80071ca <TSL2561_getLux+0x1b2>
		*lux = 0.00146 * d0 - 0.00112 * d1;
		return true;
	}
	// if (ratio > 1.30)
	*lux = 0.0;
 80070ee:	2200      	movs	r2, #0
 80070f0:	2300      	movs	r3, #0
 80070f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80070f4:	e9c1 2300 	strd	r2, r3, [r1]
	return true;
 80070f8:	2001      	movs	r0, #1
 80070fa:	e005      	b.n	8007108 <TSL2561_getLux+0xf0>
		*lux = 0.0;
 80070fc:	2200      	movs	r2, #0
 80070fe:	2300      	movs	r3, #0
 8007100:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007102:	e9c1 2300 	strd	r2, r3, [r1]
		return false;
 8007106:	2000      	movs	r0, #0
}
 8007108:	b002      	add	sp, #8
 800710a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		*lux = 0.0304 * d0 - 0.062 * d0 * pow(ratio,1.4);
 800710e:	a344      	add	r3, pc, #272	; (adr r3, 8007220 <TSL2561_getLux+0x208>)
 8007110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007114:	4620      	mov	r0, r4
 8007116:	4629      	mov	r1, r5
 8007118:	f003 fcb0 	bl	800aa7c <pow>
 800711c:	4680      	mov	r8, r0
 800711e:	4689      	mov	r9, r1
 8007120:	a341      	add	r3, pc, #260	; (adr r3, 8007228 <TSL2561_getLux+0x210>)
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	4630      	mov	r0, r6
 8007128:	4639      	mov	r1, r7
 800712a:	f7f9 f9cd 	bl	80004c8 <__aeabi_dmul>
 800712e:	4604      	mov	r4, r0
 8007130:	460d      	mov	r5, r1
 8007132:	a33f      	add	r3, pc, #252	; (adr r3, 8007230 <TSL2561_getLux+0x218>)
 8007134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007138:	4630      	mov	r0, r6
 800713a:	4639      	mov	r1, r7
 800713c:	f7f9 f9c4 	bl	80004c8 <__aeabi_dmul>
 8007140:	4642      	mov	r2, r8
 8007142:	464b      	mov	r3, r9
 8007144:	f7f9 f9c0 	bl	80004c8 <__aeabi_dmul>
 8007148:	4602      	mov	r2, r0
 800714a:	460b      	mov	r3, r1
 800714c:	4620      	mov	r0, r4
 800714e:	4629      	mov	r1, r5
 8007150:	f7f9 f802 	bl	8000158 <__aeabi_dsub>
 8007154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007156:	e9c3 0100 	strd	r0, r1, [r3]
		return true;
 800715a:	2001      	movs	r0, #1
 800715c:	e7d4      	b.n	8007108 <TSL2561_getLux+0xf0>
		*lux = 0.0224 * d0 - 0.031 * d1;
 800715e:	a336      	add	r3, pc, #216	; (adr r3, 8007238 <TSL2561_getLux+0x220>)
 8007160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007164:	4630      	mov	r0, r6
 8007166:	4639      	mov	r1, r7
 8007168:	f7f9 f9ae 	bl	80004c8 <__aeabi_dmul>
 800716c:	4604      	mov	r4, r0
 800716e:	460d      	mov	r5, r1
 8007170:	a333      	add	r3, pc, #204	; (adr r3, 8007240 <TSL2561_getLux+0x228>)
 8007172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007176:	4640      	mov	r0, r8
 8007178:	4649      	mov	r1, r9
 800717a:	f7f9 f9a5 	bl	80004c8 <__aeabi_dmul>
 800717e:	4602      	mov	r2, r0
 8007180:	460b      	mov	r3, r1
 8007182:	4620      	mov	r0, r4
 8007184:	4629      	mov	r1, r5
 8007186:	f7f8 ffe7 	bl	8000158 <__aeabi_dsub>
 800718a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800718c:	e9c3 0100 	strd	r0, r1, [r3]
		return true;
 8007190:	2001      	movs	r0, #1
 8007192:	e7b9      	b.n	8007108 <TSL2561_getLux+0xf0>
		*lux = 0.0128 * d0 - 0.0153 * d1;
 8007194:	a32c      	add	r3, pc, #176	; (adr r3, 8007248 <TSL2561_getLux+0x230>)
 8007196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719a:	4630      	mov	r0, r6
 800719c:	4639      	mov	r1, r7
 800719e:	f7f9 f993 	bl	80004c8 <__aeabi_dmul>
 80071a2:	4604      	mov	r4, r0
 80071a4:	460d      	mov	r5, r1
 80071a6:	a32a      	add	r3, pc, #168	; (adr r3, 8007250 <TSL2561_getLux+0x238>)
 80071a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ac:	4640      	mov	r0, r8
 80071ae:	4649      	mov	r1, r9
 80071b0:	f7f9 f98a 	bl	80004c8 <__aeabi_dmul>
 80071b4:	4602      	mov	r2, r0
 80071b6:	460b      	mov	r3, r1
 80071b8:	4620      	mov	r0, r4
 80071ba:	4629      	mov	r1, r5
 80071bc:	f7f8 ffcc 	bl	8000158 <__aeabi_dsub>
 80071c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071c2:	e9c3 0100 	strd	r0, r1, [r3]
		return true;
 80071c6:	2001      	movs	r0, #1
 80071c8:	e79e      	b.n	8007108 <TSL2561_getLux+0xf0>
		*lux = 0.00146 * d0 - 0.00112 * d1;
 80071ca:	a323      	add	r3, pc, #140	; (adr r3, 8007258 <TSL2561_getLux+0x240>)
 80071cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d0:	4630      	mov	r0, r6
 80071d2:	4639      	mov	r1, r7
 80071d4:	f7f9 f978 	bl	80004c8 <__aeabi_dmul>
 80071d8:	4604      	mov	r4, r0
 80071da:	460d      	mov	r5, r1
 80071dc:	a320      	add	r3, pc, #128	; (adr r3, 8007260 <TSL2561_getLux+0x248>)
 80071de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e2:	4640      	mov	r0, r8
 80071e4:	4649      	mov	r1, r9
 80071e6:	f7f9 f96f 	bl	80004c8 <__aeabi_dmul>
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	4620      	mov	r0, r4
 80071f0:	4629      	mov	r1, r5
 80071f2:	f7f8 ffb1 	bl	8000158 <__aeabi_dsub>
 80071f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071f8:	e9c3 0100 	strd	r0, r1, [r3]
		return true;
 80071fc:	2001      	movs	r0, #1
 80071fe:	e783      	b.n	8007108 <TSL2561_getLux+0xf0>
 8007200:	00000000 	.word	0x00000000
 8007204:	40792000 	.word	0x40792000
 8007208:	b851eb85 	.word	0xb851eb85
 800720c:	3fe3851e 	.word	0x3fe3851e
 8007210:	9999999a 	.word	0x9999999a
 8007214:	3fe99999 	.word	0x3fe99999
 8007218:	cccccccd 	.word	0xcccccccd
 800721c:	3ff4cccc 	.word	0x3ff4cccc
 8007220:	66666666 	.word	0x66666666
 8007224:	3ff66666 	.word	0x3ff66666
 8007228:	77318fc5 	.word	0x77318fc5
 800722c:	3f9f212d 	.word	0x3f9f212d
 8007230:	c8b43958 	.word	0xc8b43958
 8007234:	3fafbe76 	.word	0x3fafbe76
 8007238:	8db8bac7 	.word	0x8db8bac7
 800723c:	3f96f006 	.word	0x3f96f006
 8007240:	c8b43958 	.word	0xc8b43958
 8007244:	3f9fbe76 	.word	0x3f9fbe76
 8007248:	eb1c432d 	.word	0xeb1c432d
 800724c:	3f8a36e2 	.word	0x3f8a36e2
 8007250:	3d07c84b 	.word	0x3d07c84b
 8007254:	3f8f559b 	.word	0x3f8f559b
 8007258:	102363b2 	.word	0x102363b2
 800725c:	3f57ebaf 	.word	0x3f57ebaf
 8007260:	d7c6fbd2 	.word	0xd7c6fbd2
 8007264:	3f52599e 	.word	0x3f52599e
 8007268:	40300000 	.word	0x40300000
 800726c:	3fe00000 	.word	0x3fe00000

08007270 <TSL2561_WriteByte>:
		return true;
	}
	return false;
}

bool TSL2561_WriteByte(uint8_t regAdr, uint8_t value) {
 8007270:	b500      	push	{lr}
 8007272:	b085      	sub	sp, #20
	uint8_t data[2] = {0, 0};
	data[0] = ((regAdr & 0x0F) | TSL2561_CMD);
 8007274:	f000 000f 	and.w	r0, r0, #15
 8007278:	f060 007f 	orn	r0, r0, #127	; 0x7f
 800727c:	f88d 000c 	strb.w	r0, [sp, #12]
	data[1] = value;
 8007280:	f88d 100d 	strb.w	r1, [sp, #13]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, data, 2, 1000) == HAL_OK) {
 8007284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	2302      	movs	r3, #2
 800728c:	aa03      	add	r2, sp, #12
 800728e:	2172      	movs	r1, #114	; 0x72
 8007290:	4804      	ldr	r0, [pc, #16]	; (80072a4 <TSL2561_WriteByte+0x34>)
 8007292:	f001 fa1d 	bl	80086d0 <HAL_I2C_Master_Transmit>
		return true;
	}
	else {
		return false;
	}
}
 8007296:	fab0 f080 	clz	r0, r0
 800729a:	0940      	lsrs	r0, r0, #5
 800729c:	b005      	add	sp, #20
 800729e:	f85d fb04 	ldr.w	pc, [sp], #4
 80072a2:	bf00      	nop
 80072a4:	20002454 	.word	0x20002454

080072a8 <TSL2561_setPowerUp>:
bool TSL2561_setPowerUp(void) {
 80072a8:	b508      	push	{r3, lr}
	return(TSL2561_WriteByte(TSL2561_REG_CONTROL,0x03));
 80072aa:	2103      	movs	r1, #3
 80072ac:	2000      	movs	r0, #0
 80072ae:	f7ff ffdf 	bl	8007270 <TSL2561_WriteByte>
}
 80072b2:	bd08      	pop	{r3, pc}

080072b4 <TSL2561_ReadByte>:

bool TSL2561_ReadByte(uint8_t regAdr, uint8_t *value) {
 80072b4:	b510      	push	{r4, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	460c      	mov	r4, r1
	uint8_t data = ((regAdr & 0x0F) | TSL2561_CMD);
 80072ba:	f000 000f 	and.w	r0, r0, #15
 80072be:	f060 007f 	orn	r0, r0, #127	; 0x7f
 80072c2:	aa04      	add	r2, sp, #16
 80072c4:	f802 0d01 	strb.w	r0, [r2, #-1]!
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK) {
 80072c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	2301      	movs	r3, #1
 80072d0:	2172      	movs	r1, #114	; 0x72
 80072d2:	480a      	ldr	r0, [pc, #40]	; (80072fc <TSL2561_ReadByte+0x48>)
 80072d4:	f001 f9fc 	bl	80086d0 <HAL_I2C_Master_Transmit>
 80072d8:	b110      	cbz	r0, 80072e0 <TSL2561_ReadByte+0x2c>
		else {
			return false;
		}
	}
	else {
		return false;
 80072da:	2000      	movs	r0, #0
	}
}
 80072dc:	b004      	add	sp, #16
 80072de:	bd10      	pop	{r4, pc}
		if(HAL_I2C_Master_Receive(&hi2c1, (uint16_t) TSL2561_ADDR, value, 1, 1000) == HAL_OK) {
 80072e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	2301      	movs	r3, #1
 80072e8:	4622      	mov	r2, r4
 80072ea:	2172      	movs	r1, #114	; 0x72
 80072ec:	4803      	ldr	r0, [pc, #12]	; (80072fc <TSL2561_ReadByte+0x48>)
 80072ee:	f001 faf1 	bl	80088d4 <HAL_I2C_Master_Receive>
 80072f2:	fab0 f080 	clz	r0, r0
 80072f6:	0940      	lsrs	r0, r0, #5
 80072f8:	e7f0      	b.n	80072dc <TSL2561_ReadByte+0x28>
 80072fa:	bf00      	nop
 80072fc:	20002454 	.word	0x20002454

08007300 <TSL2561_setTiming>:
bool TSL2561_setTiming(bool gain, uint8_t time) {
 8007300:	b530      	push	{r4, r5, lr}
 8007302:	b083      	sub	sp, #12
 8007304:	4605      	mov	r5, r0
 8007306:	460c      	mov	r4, r1
	if (TSL2561_ReadByte(TSL2561_REG_TIMING, &timing)) {
 8007308:	f10d 0107 	add.w	r1, sp, #7
 800730c:	2001      	movs	r0, #1
 800730e:	f7ff ffd1 	bl	80072b4 <TSL2561_ReadByte>
 8007312:	4603      	mov	r3, r0
 8007314:	b198      	cbz	r0, 800733e <TSL2561_setTiming+0x3e>
		if (gain)
 8007316:	b1ad      	cbz	r5, 8007344 <TSL2561_setTiming+0x44>
			timing |= 0x10;
 8007318:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800731c:	f043 0310 	orr.w	r3, r3, #16
 8007320:	f88d 3007 	strb.w	r3, [sp, #7]
		timing &= ~0x03;
 8007324:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8007328:	f021 0103 	bic.w	r1, r1, #3
		timing |= (time & 0x03);
 800732c:	f004 0403 	and.w	r4, r4, #3
 8007330:	4321      	orrs	r1, r4
 8007332:	f88d 1007 	strb.w	r1, [sp, #7]
		if (TSL2561_WriteByte(TSL2561_REG_TIMING, timing))
 8007336:	2001      	movs	r0, #1
 8007338:	f7ff ff9a 	bl	8007270 <TSL2561_WriteByte>
 800733c:	4603      	mov	r3, r0
}
 800733e:	4618      	mov	r0, r3
 8007340:	b003      	add	sp, #12
 8007342:	bd30      	pop	{r4, r5, pc}
			timing &= ~0x10;
 8007344:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007348:	f023 0310 	bic.w	r3, r3, #16
 800734c:	f88d 3007 	strb.w	r3, [sp, #7]
 8007350:	e7e8      	b.n	8007324 <TSL2561_setTiming+0x24>

08007352 <TSL2561_setTiming_ms>:
bool TSL2561_setTiming_ms(bool gain, uint8_t time, unsigned int *ms) {
 8007352:	b508      	push	{r3, lr}
	switch (time) {
 8007354:	2901      	cmp	r1, #1
 8007356:	d00a      	beq.n	800736e <TSL2561_setTiming_ms+0x1c>
 8007358:	b121      	cbz	r1, 8007364 <TSL2561_setTiming_ms+0x12>
 800735a:	2902      	cmp	r1, #2
 800735c:	d00a      	beq.n	8007374 <TSL2561_setTiming_ms+0x22>
		default: *ms = 0;
 800735e:	2300      	movs	r3, #0
 8007360:	6013      	str	r3, [r2, #0]
 8007362:	e001      	b.n	8007368 <TSL2561_setTiming_ms+0x16>
		case 0:  *ms = 14; break;
 8007364:	230e      	movs	r3, #14
 8007366:	6013      	str	r3, [r2, #0]
	return(TSL2561_setTiming(gain, time));
 8007368:	f7ff ffca 	bl	8007300 <TSL2561_setTiming>
}
 800736c:	bd08      	pop	{r3, pc}
		case 1:  *ms = 101; break;
 800736e:	2365      	movs	r3, #101	; 0x65
 8007370:	6013      	str	r3, [r2, #0]
 8007372:	e7f9      	b.n	8007368 <TSL2561_setTiming_ms+0x16>
		case 2:  *ms = 402; break;
 8007374:	f44f 73c9 	mov.w	r3, #402	; 0x192
 8007378:	6013      	str	r3, [r2, #0]
 800737a:	e7f5      	b.n	8007368 <TSL2561_setTiming_ms+0x16>

0800737c <TSL2561_readUInt>:
// Reads an unsigned integer (16 bits) from a TSL2561 address (low byte first)
// Address: TSL2561 address (0 to 15), low byte first
// Value will be set to stored unsigned integer
// Returns true (1) if successful, false (0) if there was an I2C error
// (Also see getError() above)
bool TSL2561_readUInt(uint8_t address, unsigned int *value) {
 800737c:	b510      	push	{r4, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	460c      	mov	r4, r1
	char high, low;
	// Set up command byte for read
	uint8_t data = ((address & 0x0F) | TSL2561_CMD);
 8007382:	f000 000f 	and.w	r0, r0, #15
 8007386:	f060 007f 	orn	r0, r0, #127	; 0x7f
 800738a:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t tmpValue[2] = {0, 0};
 800738e:	2300      	movs	r3, #0
 8007390:	f88d 300c 	strb.w	r3, [sp, #12]
 8007394:	f88d 300d 	strb.w	r3, [sp, #13]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK) {
 8007398:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	2301      	movs	r3, #1
 80073a0:	f10d 020f 	add.w	r2, sp, #15
 80073a4:	2172      	movs	r1, #114	; 0x72
 80073a6:	480e      	ldr	r0, [pc, #56]	; (80073e0 <TSL2561_readUInt+0x64>)
 80073a8:	f001 f992 	bl	80086d0 <HAL_I2C_Master_Transmit>
 80073ac:	b110      	cbz	r0, 80073b4 <TSL2561_readUInt+0x38>
		else {
			return false;
		}
	}
	else {
		return false;
 80073ae:	2000      	movs	r0, #0
	}
}
 80073b0:	b004      	add	sp, #16
 80073b2:	bd10      	pop	{r4, pc}
		if(HAL_I2C_Master_Receive(&hi2c1, (uint16_t) TSL2561_ADDR, tmpValue, 2, 1000) == HAL_OK) {
 80073b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	2302      	movs	r3, #2
 80073bc:	aa03      	add	r2, sp, #12
 80073be:	2172      	movs	r1, #114	; 0x72
 80073c0:	4807      	ldr	r0, [pc, #28]	; (80073e0 <TSL2561_readUInt+0x64>)
 80073c2:	f001 fa87 	bl	80088d4 <HAL_I2C_Master_Receive>
 80073c6:	b940      	cbnz	r0, 80073da <TSL2561_readUInt+0x5e>
			*value = high << 8 |  low;
 80073c8:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80073cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80073d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80073d4:	6023      	str	r3, [r4, #0]
			return true;
 80073d6:	2001      	movs	r0, #1
 80073d8:	e7ea      	b.n	80073b0 <TSL2561_readUInt+0x34>
			return false;
 80073da:	2000      	movs	r0, #0
 80073dc:	e7e8      	b.n	80073b0 <TSL2561_readUInt+0x34>
 80073de:	bf00      	nop
 80073e0:	20002454 	.word	0x20002454

080073e4 <TSL2561_getData>:
bool TSL2561_getData(unsigned int *data0, unsigned int *data1) {
 80073e4:	b510      	push	{r4, lr}
 80073e6:	460c      	mov	r4, r1
	return TSL2561_readUInt(TSL2561_REG_DATA_0, data0) && TSL2561_readUInt(TSL2561_REG_DATA_1, data1);
 80073e8:	4601      	mov	r1, r0
 80073ea:	200c      	movs	r0, #12
 80073ec:	f7ff ffc6 	bl	800737c <TSL2561_readUInt>
 80073f0:	b918      	cbnz	r0, 80073fa <TSL2561_getData+0x16>
 80073f2:	2000      	movs	r0, #0
}
 80073f4:	f000 0001 	and.w	r0, r0, #1
 80073f8:	bd10      	pop	{r4, pc}
	return TSL2561_readUInt(TSL2561_REG_DATA_0, data0) && TSL2561_readUInt(TSL2561_REG_DATA_1, data1);
 80073fa:	4621      	mov	r1, r4
 80073fc:	200e      	movs	r0, #14
 80073fe:	f7ff ffbd 	bl	800737c <TSL2561_readUInt>
 8007402:	e7f7      	b.n	80073f4 <TSL2561_getData+0x10>

08007404 <user_i2c_read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8007404:	b570      	push	{r4, r5, r6, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	4604      	mov	r4, r0
 800740a:	4615      	mov	r5, r2
 800740c:	461e      	mov	r6, r3
 800740e:	aa04      	add	r2, sp, #16
 8007410:	f802 1d01 	strb.w	r1, [r2, #-1]!
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8007414:	230a      	movs	r3, #10
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	2301      	movs	r3, #1
 800741a:	fa00 f103 	lsl.w	r1, r0, r3
 800741e:	480b      	ldr	r0, [pc, #44]	; (800744c <user_i2c_read+0x48>)
 8007420:	f001 f956 	bl	80086d0 <HAL_I2C_Master_Transmit>
 8007424:	b978      	cbnz	r0, 8007446 <user_i2c_read+0x42>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8007426:	0061      	lsls	r1, r4, #1
 8007428:	230a      	movs	r3, #10
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	4633      	mov	r3, r6
 800742e:	462a      	mov	r2, r5
 8007430:	f041 0101 	orr.w	r1, r1, #1
 8007434:	4805      	ldr	r0, [pc, #20]	; (800744c <user_i2c_read+0x48>)
 8007436:	f001 fa4d 	bl	80088d4 <HAL_I2C_Master_Receive>
 800743a:	3000      	adds	r0, #0
 800743c:	bf18      	it	ne
 800743e:	2001      	movne	r0, #1
 8007440:	4240      	negs	r0, r0

  return 0;
}
 8007442:	b004      	add	sp, #16
 8007444:	bd70      	pop	{r4, r5, r6, pc}
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8007446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800744a:	e7fa      	b.n	8007442 <user_i2c_read+0x3e>
 800744c:	20002454 	.word	0x20002454

08007450 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 8007450:	b508      	push	{r3, lr}
  HAL_Delay(period);
 8007452:	f000 fc35 	bl	8007cc0 <HAL_Delay>
}
 8007456:	bd08      	pop	{r3, pc}

08007458 <user_i2c_write>:

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8007458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800745c:	b083      	sub	sp, #12
 800745e:	4607      	mov	r7, r0
 8007460:	4689      	mov	r9, r1
 8007462:	4690      	mov	r8, r2
 8007464:	461e      	mov	r6, r3
  int8_t *buf;
  buf = malloc(len +1);
 8007466:	1c5d      	adds	r5, r3, #1
 8007468:	4628      	mov	r0, r5
 800746a:	f004 fb61 	bl	800bb30 <malloc>
 800746e:	4604      	mov	r4, r0
  buf[0] = reg_addr;
 8007470:	f800 9b01 	strb.w	r9, [r0], #1
  memcpy(buf +1, data, len);
 8007474:	4632      	mov	r2, r6
 8007476:	4641      	mov	r1, r8
 8007478:	f004 fb79 	bl	800bb6e <memcpy>
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 800747c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	b2ab      	uxth	r3, r5
 8007484:	4622      	mov	r2, r4
 8007486:	0079      	lsls	r1, r7, #1
 8007488:	4806      	ldr	r0, [pc, #24]	; (80074a4 <user_i2c_write+0x4c>)
 800748a:	f001 f921 	bl	80086d0 <HAL_I2C_Master_Transmit>
 800748e:	b930      	cbnz	r0, 800749e <user_i2c_write+0x46>
  free(buf);
 8007490:	4620      	mov	r0, r4
 8007492:	f004 fb55 	bl	800bb40 <free>
  return 0;
 8007496:	2000      	movs	r0, #0
}
 8007498:	b003      	add	sp, #12
 800749a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 800749e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074a2:	e7f9      	b.n	8007498 <user_i2c_write+0x40>
 80074a4:	20002454 	.word	0x20002454

080074a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80074a8:	b500      	push	{lr}
 80074aa:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80074ac:	2224      	movs	r2, #36	; 0x24
 80074ae:	2100      	movs	r1, #0
 80074b0:	a807      	add	r0, sp, #28
 80074b2:	f004 fb67 	bl	800bb84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80074b6:	2300      	movs	r3, #0
 80074b8:	9301      	str	r3, [sp, #4]
 80074ba:	9302      	str	r3, [sp, #8]
 80074bc:	9303      	str	r3, [sp, #12]
 80074be:	9304      	str	r3, [sp, #16]
 80074c0:	9305      	str	r3, [sp, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80074c2:	2302      	movs	r3, #2
 80074c4:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80074c6:	2301      	movs	r3, #1
 80074c8:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80074ca:	2310      	movs	r3, #16
 80074cc:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80074ce:	a806      	add	r0, sp, #24
 80074d0:	f002 fbc4 	bl	8009c5c <HAL_RCC_OscConfig>
 80074d4:	b968      	cbnz	r0, 80074f2 <SystemClock_Config+0x4a>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80074d6:	230f      	movs	r3, #15
 80074d8:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80074da:	2100      	movs	r1, #0
 80074dc:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80074de:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80074e0:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80074e2:	9105      	str	r1, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80074e4:	a801      	add	r0, sp, #4
 80074e6:	f002 fe09 	bl	800a0fc <HAL_RCC_ClockConfig>
 80074ea:	b920      	cbnz	r0, 80074f6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
  }
}
 80074ec:	b011      	add	sp, #68	; 0x44
 80074ee:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80074f2:	b672      	cpsid	i
 80074f4:	e7fe      	b.n	80074f4 <SystemClock_Config+0x4c>
 80074f6:	b672      	cpsid	i
 80074f8:	e7fe      	b.n	80074f8 <SystemClock_Config+0x50>
 80074fa:	0000      	movs	r0, r0
 80074fc:	0000      	movs	r0, r0
	...

08007500 <main>:
{
 8007500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007504:	b090      	sub	sp, #64	; 0x40
	Read_control_module_info_from_flash(control_module_id_and_channel);
 8007506:	4c8c      	ldr	r4, [pc, #560]	; (8007738 <main+0x238>)
 8007508:	4620      	mov	r0, r4
 800750a:	f7f9 fd91 	bl	8001030 <Read_control_module_info_from_flash>
	Get_control_module_info_from_main(control_module_id_and_channel);
 800750e:	4620      	mov	r0, r4
 8007510:	f7fb fd80 	bl	8003014 <Get_control_module_info_from_main>
  HAL_Init();
 8007514:	f000 fbb0 	bl	8007c78 <HAL_Init>
  SystemClock_Config();
 8007518:	f7ff ffc6 	bl	80074a8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800751c:	2400      	movs	r4, #0
 800751e:	940c      	str	r4, [sp, #48]	; 0x30
 8007520:	940d      	str	r4, [sp, #52]	; 0x34
 8007522:	940e      	str	r4, [sp, #56]	; 0x38
 8007524:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007526:	4b85      	ldr	r3, [pc, #532]	; (800773c <main+0x23c>)
 8007528:	699a      	ldr	r2, [r3, #24]
 800752a:	f042 0220 	orr.w	r2, r2, #32
 800752e:	619a      	str	r2, [r3, #24]
 8007530:	699a      	ldr	r2, [r3, #24]
 8007532:	f002 0220 	and.w	r2, r2, #32
 8007536:	9207      	str	r2, [sp, #28]
 8007538:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800753a:	699a      	ldr	r2, [r3, #24]
 800753c:	f042 0204 	orr.w	r2, r2, #4
 8007540:	619a      	str	r2, [r3, #24]
 8007542:	699a      	ldr	r2, [r3, #24]
 8007544:	f002 0204 	and.w	r2, r2, #4
 8007548:	9208      	str	r2, [sp, #32]
 800754a:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800754c:	699a      	ldr	r2, [r3, #24]
 800754e:	f042 0208 	orr.w	r2, r2, #8
 8007552:	619a      	str	r2, [r3, #24]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	f003 0308 	and.w	r3, r3, #8
 800755a:	9309      	str	r3, [sp, #36]	; 0x24
 800755c:	9b09      	ldr	r3, [sp, #36]	; 0x24

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin, GPIO_PIN_RESET);
 800755e:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8007780 <main+0x280>
 8007562:	4622      	mov	r2, r4
 8007564:	f641 4110 	movw	r1, #7184	; 0x1c10
 8007568:	4640      	mov	r0, r8
 800756a:	f000 febf 	bl	80082ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LORA_RESET_Pin|CO2_WAKE_UP_Pin, GPIO_PIN_RESET);
 800756e:	4d74      	ldr	r5, [pc, #464]	; (8007740 <main+0x240>)
 8007570:	4622      	mov	r2, r4
 8007572:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8007576:	4628      	mov	r0, r5
 8007578:	f000 feb8 	bl	80082ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LORA_NSS_Pin LED1_PIN_Pin LED3_PIN_Pin LED2_PIN_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin;
 800757c:	f641 4310 	movw	r3, #7184	; 0x1c10
 8007580:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007582:	2701      	movs	r7, #1
 8007584:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007586:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007588:	2602      	movs	r6, #2
 800758a:	960f      	str	r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800758c:	a90c      	add	r1, sp, #48	; 0x30
 800758e:	4640      	mov	r0, r8
 8007590:	f000 fdb0 	bl	80080f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_DIO1_Pin LORA_DIO0_Pin */
  GPIO_InitStruct.Pin = LORA_DIO1_Pin|LORA_DIO0_Pin;
 8007594:	f240 4304 	movw	r3, #1028	; 0x404
 8007598:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800759a:	4b6a      	ldr	r3, [pc, #424]	; (8007744 <main+0x244>)
 800759c:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800759e:	960e      	str	r6, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075a0:	a90c      	add	r1, sp, #48	; 0x30
 80075a2:	4628      	mov	r0, r5
 80075a4:	f000 fda6 	bl	80080f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RESET_Pin CO2_WAKE_UP_Pin */
  GPIO_InitStruct.Pin = LORA_RESET_Pin|CO2_WAKE_UP_Pin;
 80075a8:	f44f 6301 	mov.w	r3, #2064	; 0x810
 80075ac:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075ae:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b0:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075b2:	960f      	str	r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075b4:	a90c      	add	r1, sp, #48	; 0x30
 80075b6:	4628      	mov	r0, r5
 80075b8:	f000 fd9c 	bl	80080f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80075bc:	4622      	mov	r2, r4
 80075be:	4621      	mov	r1, r4
 80075c0:	2008      	movs	r0, #8
 80075c2:	f000 fba3 	bl	8007d0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80075c6:	2008      	movs	r0, #8
 80075c8:	f000 fbd2 	bl	8007d70 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80075cc:	4622      	mov	r2, r4
 80075ce:	4621      	mov	r1, r4
 80075d0:	2028      	movs	r0, #40	; 0x28
 80075d2:	f000 fb9b 	bl	8007d0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80075d6:	2028      	movs	r0, #40	; 0x28
 80075d8:	f000 fbca 	bl	8007d70 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 80075dc:	485a      	ldr	r0, [pc, #360]	; (8007748 <main+0x248>)
 80075de:	4b5b      	ldr	r3, [pc, #364]	; (800774c <main+0x24c>)
 80075e0:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80075e2:	4b5b      	ldr	r3, [pc, #364]	; (8007750 <main+0x250>)
 80075e4:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80075e6:	6084      	str	r4, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80075e8:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80075ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80075ee:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80075f0:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80075f2:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80075f4:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80075f6:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80075f8:	f000 ffac 	bl	8008554 <HAL_I2C_Init>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	f040 808c 	bne.w	800771a <main+0x21a>
  hspi1.Instance = SPI1;
 8007602:	4854      	ldr	r0, [pc, #336]	; (8007754 <main+0x254>)
 8007604:	4b54      	ldr	r3, [pc, #336]	; (8007758 <main+0x258>)
 8007606:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007608:	f44f 7382 	mov.w	r3, #260	; 0x104
 800760c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800760e:	2300      	movs	r3, #0
 8007610:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007612:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007614:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007616:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800761c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800761e:	2220      	movs	r2, #32
 8007620:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007622:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007624:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007626:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007628:	230a      	movs	r3, #10
 800762a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800762c:	f002 feae 	bl	800a38c <HAL_SPI_Init>
 8007630:	2800      	cmp	r0, #0
 8007632:	d174      	bne.n	800771e <main+0x21e>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007634:	2300      	movs	r3, #0
 8007636:	930c      	str	r3, [sp, #48]	; 0x30
 8007638:	930d      	str	r3, [sp, #52]	; 0x34
 800763a:	930e      	str	r3, [sp, #56]	; 0x38
 800763c:	930f      	str	r3, [sp, #60]	; 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800763e:	930a      	str	r3, [sp, #40]	; 0x28
 8007640:	930b      	str	r3, [sp, #44]	; 0x2c
  htim2.Instance = TIM2;
 8007642:	4846      	ldr	r0, [pc, #280]	; (800775c <main+0x25c>)
 8007644:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007648:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 72;
 800764a:	2248      	movs	r2, #72	; 0x48
 800764c:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800764e:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8007650:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007654:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007656:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007658:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800765a:	f003 f8df 	bl	800a81c <HAL_TIM_Base_Init>
 800765e:	2800      	cmp	r0, #0
 8007660:	d15f      	bne.n	8007722 <main+0x222>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007662:	a910      	add	r1, sp, #64	; 0x40
 8007664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007668:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800766c:	483b      	ldr	r0, [pc, #236]	; (800775c <main+0x25c>)
 800766e:	f003 f90b 	bl	800a888 <HAL_TIM_ConfigClockSource>
 8007672:	2800      	cmp	r0, #0
 8007674:	d157      	bne.n	8007726 <main+0x226>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007676:	2300      	movs	r3, #0
 8007678:	930a      	str	r3, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800767a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800767c:	a90a      	add	r1, sp, #40	; 0x28
 800767e:	4837      	ldr	r0, [pc, #220]	; (800775c <main+0x25c>)
 8007680:	f003 f9a6 	bl	800a9d0 <HAL_TIMEx_MasterConfigSynchronization>
 8007684:	2800      	cmp	r0, #0
 8007686:	d150      	bne.n	800772a <main+0x22a>
  Init_lora_module(&hspi1);
 8007688:	4832      	ldr	r0, [pc, #200]	; (8007754 <main+0x254>)
 800768a:	f7fb fcdd 	bl	8003048 <Init_lora_module>
  result = Begin_lora_module(BAND, true, 14, 8, 250E3, 0x4A);
 800768e:	234a      	movs	r3, #74	; 0x4a
 8007690:	9304      	str	r3, [sp, #16]
 8007692:	4a33      	ldr	r2, [pc, #204]	; (8007760 <main+0x260>)
 8007694:	2300      	movs	r3, #0
 8007696:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800769a:	2308      	movs	r3, #8
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	230e      	movs	r3, #14
 80076a0:	2201      	movs	r2, #1
 80076a2:	a123      	add	r1, pc, #140	; (adr r1, 8007730 <main+0x230>)
 80076a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076a8:	f7fb fcd6 	bl	8003058 <Begin_lora_module>
 80076ac:	4c2d      	ldr	r4, [pc, #180]	; (8007764 <main+0x264>)
 80076ae:	7020      	strb	r0, [r4, #0]
  HAL_Delay(1000);
 80076b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80076b4:	f000 fb04 	bl	8007cc0 <HAL_Delay>
  if(result == 0) {
 80076b8:	7823      	ldrb	r3, [r4, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d064      	beq.n	8007788 <main+0x288>
  TSL2561_setTiming_ms (gain, time, & ms);
 80076be:	4a2a      	ldr	r2, [pc, #168]	; (8007768 <main+0x268>)
 80076c0:	2102      	movs	r1, #2
 80076c2:	4b2a      	ldr	r3, [pc, #168]	; (800776c <main+0x26c>)
 80076c4:	7818      	ldrb	r0, [r3, #0]
 80076c6:	f7ff fe44 	bl	8007352 <TSL2561_setTiming_ms>
  TSL2561_setPowerUp ();
 80076ca:	f7ff fded 	bl	80072a8 <TSL2561_setPowerUp>
  rslt = bme280_init(&dev);
 80076ce:	4c28      	ldr	r4, [pc, #160]	; (8007770 <main+0x270>)
 80076d0:	4620      	mov	r0, r4
 80076d2:	f7ff f8a2 	bl	800681a <bme280_init>
 80076d6:	4d27      	ldr	r5, [pc, #156]	; (8007774 <main+0x274>)
 80076d8:	7028      	strb	r0, [r5, #0]
  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 80076da:	2301      	movs	r3, #1
 80076dc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 80076e0:	2305      	movs	r3, #5
 80076e2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 80076e6:	2302      	movs	r3, #2
 80076e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  dev.settings.filter = BME280_FILTER_COEFF_16;
 80076ec:	2304      	movs	r3, #4
 80076ee:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 80076f2:	4621      	mov	r1, r4
 80076f4:	200f      	movs	r0, #15
 80076f6:	f7ff f98d 	bl	8006a14 <bme280_set_sensor_settings>
 80076fa:	7028      	strb	r0, [r5, #0]
  rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 80076fc:	4621      	mov	r1, r4
 80076fe:	2003      	movs	r0, #3
 8007700:	f7ff f9be 	bl	8006a80 <bme280_set_sensor_mode>
 8007704:	7028      	strb	r0, [r5, #0]
		TSL2561_getLux(gain, ms, data0, data1, &lux);
 8007706:	f8df a060 	ldr.w	sl, [pc, #96]	; 8007768 <main+0x268>
		sensors_data.lux = lux;
 800770a:	4c1b      	ldr	r4, [pc, #108]	; (8007778 <main+0x278>)
		sensors_data.temperature = comp_data.temperature / 100.0;      /* C  */
 800770c:	f04f 0800 	mov.w	r8, #0
 8007710:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8007784 <main+0x284>
		sensors_data.humidity = comp_data.humidity / 1024.0;           /* %   */
 8007714:	2600      	movs	r6, #0
 8007716:	4f19      	ldr	r7, [pc, #100]	; (800777c <main+0x27c>)
 8007718:	e0d1      	b.n	80078be <main+0x3be>
 800771a:	b672      	cpsid	i
 800771c:	e7fe      	b.n	800771c <main+0x21c>
 800771e:	b672      	cpsid	i
 8007720:	e7fe      	b.n	8007720 <main+0x220>
 8007722:	b672      	cpsid	i
 8007724:	e7fe      	b.n	8007724 <main+0x224>
 8007726:	b672      	cpsid	i
 8007728:	e7fe      	b.n	8007728 <main+0x228>
 800772a:	b672      	cpsid	i
 800772c:	e7fe      	b.n	800772c <main+0x22c>
 800772e:	bf00      	nop
 8007730:	19d2ded0 	.word	0x19d2ded0
 8007734:	00000000 	.word	0x00000000
 8007738:	2000242c 	.word	0x2000242c
 800773c:	40021000 	.word	0x40021000
 8007740:	40010c00 	.word	0x40010c00
 8007744:	10110000 	.word	0x10110000
 8007748:	20002454 	.word	0x20002454
 800774c:	40005400 	.word	0x40005400
 8007750:	00061a80 	.word	0x00061a80
 8007754:	200024bc 	.word	0x200024bc
 8007758:	40013000 	.word	0x40013000
 800775c:	20002514 	.word	0x20002514
 8007760:	0003d090 	.word	0x0003d090
 8007764:	200024b8 	.word	0x200024b8
 8007768:	20002438 	.word	0x20002438
 800776c:	20002434 	.word	0x20002434
 8007770:	2000001c 	.word	0x2000001c
 8007774:	20002450 	.word	0x20002450
 8007778:	20002560 	.word	0x20002560
 800777c:	3f500000 	.word	0x3f500000
 8007780:	40010800 	.word	0x40010800
 8007784:	40590000 	.word	0x40590000
	  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 8007788:	4c6d      	ldr	r4, [pc, #436]	; (8007940 <main+0x440>)
 800778a:	2201      	movs	r2, #1
 800778c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007790:	4620      	mov	r0, r4
 8007792:	f000 fdab 	bl	80082ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_SET);
 8007796:	2201      	movs	r2, #1
 8007798:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800779c:	4620      	mov	r0, r4
 800779e:	f000 fda5 	bl	80082ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_SET);
 80077a2:	2201      	movs	r2, #1
 80077a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80077a8:	4620      	mov	r0, r4
 80077aa:	f000 fd9f 	bl	80082ec <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80077ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80077b2:	f000 fa85 	bl	8007cc0 <HAL_Delay>
	  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_RESET);
 80077b6:	2200      	movs	r2, #0
 80077b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80077bc:	4620      	mov	r0, r4
 80077be:	f000 fd95 	bl	80082ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_RESET);
 80077c2:	2200      	movs	r2, #0
 80077c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80077c8:	4620      	mov	r0, r4
 80077ca:	f000 fd8f 	bl	80082ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_RESET);
 80077ce:	2200      	movs	r2, #0
 80077d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80077d4:	4620      	mov	r0, r4
 80077d6:	f000 fd89 	bl	80082ec <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80077da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80077de:	f000 fa6f 	bl	8007cc0 <HAL_Delay>
	  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 80077e2:	2201      	movs	r2, #1
 80077e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80077e8:	4620      	mov	r0, r4
 80077ea:	f000 fd7f 	bl	80082ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_SET);
 80077ee:	2201      	movs	r2, #1
 80077f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80077f4:	4620      	mov	r0, r4
 80077f6:	f000 fd79 	bl	80082ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_SET);
 80077fa:	2201      	movs	r2, #1
 80077fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007800:	4620      	mov	r0, r4
 8007802:	f000 fd73 	bl	80082ec <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8007806:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800780a:	f000 fa59 	bl	8007cc0 <HAL_Delay>
	  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_RESET);
 800780e:	2200      	movs	r2, #0
 8007810:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007814:	4620      	mov	r0, r4
 8007816:	f000 fd69 	bl	80082ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_RESET);
 800781a:	2200      	movs	r2, #0
 800781c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007820:	4620      	mov	r0, r4
 8007822:	f000 fd63 	bl	80082ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_RESET);
 8007826:	2200      	movs	r2, #0
 8007828:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800782c:	4620      	mov	r0, r4
 800782e:	f000 fd5d 	bl	80082ec <HAL_GPIO_WritePin>
	  while(result != 0) {
 8007832:	4b44      	ldr	r3, [pc, #272]	; (8007944 <main+0x444>)
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	f43f af41 	beq.w	80076be <main+0x1be>
		  result = Begin_lora_module(BAND, true, 14, 8, 250E3, 0x4A);
 800783c:	f20f 09e8 	addw	r9, pc, #232	; 0xe8
 8007840:	e9d9 8900 	ldrd	r8, r9, [r9]
 8007844:	4e40      	ldr	r6, [pc, #256]	; (8007948 <main+0x448>)
 8007846:	2700      	movs	r7, #0
 8007848:	234a      	movs	r3, #74	; 0x4a
 800784a:	9304      	str	r3, [sp, #16]
 800784c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007850:	2308      	movs	r3, #8
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	230e      	movs	r3, #14
 8007856:	2201      	movs	r2, #1
 8007858:	4640      	mov	r0, r8
 800785a:	4649      	mov	r1, r9
 800785c:	f7fb fbfc 	bl	8003058 <Begin_lora_module>
 8007860:	4d38      	ldr	r5, [pc, #224]	; (8007944 <main+0x444>)
 8007862:	7028      	strb	r0, [r5, #0]
			  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 8007864:	2201      	movs	r2, #1
 8007866:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800786a:	4620      	mov	r0, r4
 800786c:	f000 fd3e 	bl	80082ec <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_RESET);
 8007870:	2200      	movs	r2, #0
 8007872:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007876:	4620      	mov	r0, r4
 8007878:	f000 fd38 	bl	80082ec <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_RESET);
 800787c:	2200      	movs	r2, #0
 800787e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007882:	4620      	mov	r0, r4
 8007884:	f000 fd32 	bl	80082ec <HAL_GPIO_WritePin>
	  while(result != 0) {
 8007888:	782b      	ldrb	r3, [r5, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1dc      	bne.n	8007848 <main+0x348>
 800788e:	e716      	b.n	80076be <main+0x1be>
		TSL2561_getLux(gain, ms, data0, data1, &lux);
 8007890:	4b2e      	ldr	r3, [pc, #184]	; (800794c <main+0x44c>)
 8007892:	7818      	ldrb	r0, [r3, #0]
 8007894:	ab0c      	add	r3, sp, #48	; 0x30
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800789a:	9a06      	ldr	r2, [sp, #24]
 800789c:	f8da 1000 	ldr.w	r1, [sl]
 80078a0:	f7ff fbba 	bl	8007018 <TSL2561_getLux>
		sensors_data.lux = lux;
 80078a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80078a8:	f7f9 f8be 	bl	8000a28 <__aeabi_d2f>
 80078ac:	6020      	str	r0, [r4, #0]
 80078ae:	e00c      	b.n	80078ca <main+0x3ca>
	HAL_Delay(5000);
 80078b0:	f241 3088 	movw	r0, #5000	; 0x1388
 80078b4:	f000 fa04 	bl	8007cc0 <HAL_Delay>
	Main_cpp(&sensors_data);
 80078b8:	4620      	mov	r0, r4
 80078ba:	f7fb fc13 	bl	80030e4 <Main_cpp>
	if (TSL2561_getData(&data0, &data1))
 80078be:	a90a      	add	r1, sp, #40	; 0x28
 80078c0:	a806      	add	r0, sp, #24
 80078c2:	f7ff fd8f 	bl	80073e4 <TSL2561_getData>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	d1e2      	bne.n	8007890 <main+0x390>
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 80078ca:	4a21      	ldr	r2, [pc, #132]	; (8007950 <main+0x450>)
 80078cc:	4921      	ldr	r1, [pc, #132]	; (8007954 <main+0x454>)
 80078ce:	2007      	movs	r0, #7
 80078d0:	f7ff fb72 	bl	8006fb8 <bme280_get_sensor_data>
 80078d4:	4b20      	ldr	r3, [pc, #128]	; (8007958 <main+0x458>)
 80078d6:	7018      	strb	r0, [r3, #0]
	if(rslt == BME280_OK)
 80078d8:	2800      	cmp	r0, #0
 80078da:	d1e9      	bne.n	80078b0 <main+0x3b0>
		sensors_data.temperature = comp_data.temperature / 100.0;      /* C  */
 80078dc:	4d1d      	ldr	r5, [pc, #116]	; (8007954 <main+0x454>)
 80078de:	6868      	ldr	r0, [r5, #4]
 80078e0:	f7f8 fd88 	bl	80003f4 <__aeabi_i2d>
 80078e4:	4642      	mov	r2, r8
 80078e6:	464b      	mov	r3, r9
 80078e8:	f7f8 ff18 	bl	800071c <__aeabi_ddiv>
 80078ec:	f7f9 f89c 	bl	8000a28 <__aeabi_d2f>
 80078f0:	6060      	str	r0, [r4, #4]
		sensors_data.humidity = comp_data.humidity / 1024.0;           /* %   */
 80078f2:	68a8      	ldr	r0, [r5, #8]
 80078f4:	f7f8 fd6e 	bl	80003d4 <__aeabi_ui2d>
 80078f8:	4632      	mov	r2, r6
 80078fa:	463b      	mov	r3, r7
 80078fc:	f7f8 fde4 	bl	80004c8 <__aeabi_dmul>
 8007900:	f7f9 f892 	bl	8000a28 <__aeabi_d2f>
 8007904:	60a0      	str	r0, [r4, #8]
		sensors_data.pressure = comp_data.pressure / 10000.0 / 1.333;  /* hPa or mmhg */
 8007906:	6828      	ldr	r0, [r5, #0]
 8007908:	f7f8 fd64 	bl	80003d4 <__aeabi_ui2d>
 800790c:	a308      	add	r3, pc, #32	; (adr r3, 8007930 <main+0x430>)
 800790e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007912:	f7f8 ff03 	bl	800071c <__aeabi_ddiv>
 8007916:	a308      	add	r3, pc, #32	; (adr r3, 8007938 <main+0x438>)
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	f7f8 fefe 	bl	800071c <__aeabi_ddiv>
 8007920:	f7f9 f882 	bl	8000a28 <__aeabi_d2f>
 8007924:	60e0      	str	r0, [r4, #12]
 8007926:	e7c3      	b.n	80078b0 <main+0x3b0>
 8007928:	19d2ded0 	.word	0x19d2ded0
	...
 8007934:	40c38800 	.word	0x40c38800
 8007938:	ced91687 	.word	0xced91687
 800793c:	3ff553f7 	.word	0x3ff553f7
 8007940:	40010800 	.word	0x40010800
 8007944:	200024b8 	.word	0x200024b8
 8007948:	0003d090 	.word	0x0003d090
 800794c:	20002434 	.word	0x20002434
 8007950:	2000001c 	.word	0x2000001c
 8007954:	200024a8 	.word	0x200024a8
 8007958:	20002450 	.word	0x20002450

0800795c <HAL_GPIO_EXTI_Callback>:

}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800795c:	b508      	push	{r3, lr}
  if(GPIO_Pin== GPIO_PIN_2) {
 800795e:	2804      	cmp	r0, #4
 8007960:	d004      	beq.n	800796c <HAL_GPIO_EXTI_Callback+0x10>
    exti2++;
    Contact_group_control_module();
  } else if(GPIO_Pin== GPIO_PIN_10){
 8007962:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007966:	d008      	beq.n	800797a <HAL_GPIO_EXTI_Callback+0x1e>
    exti5_10++;
    Contact_group_control_module();
  } else{
    __NOP();
 8007968:	bf00      	nop
  }
}
 800796a:	bd08      	pop	{r3, pc}
    exti2++;
 800796c:	4a06      	ldr	r2, [pc, #24]	; (8007988 <HAL_GPIO_EXTI_Callback+0x2c>)
 800796e:	8813      	ldrh	r3, [r2, #0]
 8007970:	3301      	adds	r3, #1
 8007972:	8013      	strh	r3, [r2, #0]
    Contact_group_control_module();
 8007974:	f7fb fbca 	bl	800310c <Contact_group_control_module>
 8007978:	e7f7      	b.n	800796a <HAL_GPIO_EXTI_Callback+0xe>
    exti5_10++;
 800797a:	4a04      	ldr	r2, [pc, #16]	; (800798c <HAL_GPIO_EXTI_Callback+0x30>)
 800797c:	8813      	ldrh	r3, [r2, #0]
 800797e:	3301      	adds	r3, #1
 8007980:	8013      	strh	r3, [r2, #0]
    Contact_group_control_module();
 8007982:	f7fb fbc3 	bl	800310c <Contact_group_control_module>
 8007986:	e7f0      	b.n	800796a <HAL_GPIO_EXTI_Callback+0xe>
 8007988:	200024ba 	.word	0x200024ba
 800798c:	2000257a 	.word	0x2000257a

08007990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007990:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007992:	4b0e      	ldr	r3, [pc, #56]	; (80079cc <HAL_MspInit+0x3c>)
 8007994:	699a      	ldr	r2, [r3, #24]
 8007996:	f042 0201 	orr.w	r2, r2, #1
 800799a:	619a      	str	r2, [r3, #24]
 800799c:	699a      	ldr	r2, [r3, #24]
 800799e:	f002 0201 	and.w	r2, r2, #1
 80079a2:	9200      	str	r2, [sp, #0]
 80079a4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80079a6:	69da      	ldr	r2, [r3, #28]
 80079a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80079ac:	61da      	str	r2, [r3, #28]
 80079ae:	69db      	ldr	r3, [r3, #28]
 80079b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079b4:	9301      	str	r3, [sp, #4]
 80079b6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80079b8:	4a05      	ldr	r2, [pc, #20]	; (80079d0 <HAL_MspInit+0x40>)
 80079ba:	6853      	ldr	r3, [r2, #4]
 80079bc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80079c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80079c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80079c6:	b002      	add	sp, #8
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	40021000 	.word	0x40021000
 80079d0:	40010000 	.word	0x40010000

080079d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80079d4:	b510      	push	{r4, lr}
 80079d6:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079d8:	2300      	movs	r3, #0
 80079da:	9302      	str	r3, [sp, #8]
 80079dc:	9303      	str	r3, [sp, #12]
 80079de:	9304      	str	r3, [sp, #16]
 80079e0:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 80079e2:	6802      	ldr	r2, [r0, #0]
 80079e4:	4b1d      	ldr	r3, [pc, #116]	; (8007a5c <HAL_I2C_MspInit+0x88>)
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d001      	beq.n	80079ee <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80079ea:	b006      	add	sp, #24
 80079ec:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079ee:	4c1c      	ldr	r4, [pc, #112]	; (8007a60 <HAL_I2C_MspInit+0x8c>)
 80079f0:	69a3      	ldr	r3, [r4, #24]
 80079f2:	f043 0308 	orr.w	r3, r3, #8
 80079f6:	61a3      	str	r3, [r4, #24]
 80079f8:	69a3      	ldr	r3, [r4, #24]
 80079fa:	f003 0308 	and.w	r3, r3, #8
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007a02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007a06:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a08:	2312      	movs	r3, #18
 8007a0a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a10:	a902      	add	r1, sp, #8
 8007a12:	4814      	ldr	r0, [pc, #80]	; (8007a64 <HAL_I2C_MspInit+0x90>)
 8007a14:	f000 fb6e 	bl	80080f4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8007a18:	4a13      	ldr	r2, [pc, #76]	; (8007a68 <HAL_I2C_MspInit+0x94>)
 8007a1a:	6853      	ldr	r3, [r2, #4]
 8007a1c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8007a20:	f043 0302 	orr.w	r3, r3, #2
 8007a24:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007a26:	69e3      	ldr	r3, [r4, #28]
 8007a28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a2c:	61e3      	str	r3, [r4, #28]
 8007a2e:	69e3      	ldr	r3, [r4, #28]
 8007a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a34:	9301      	str	r3, [sp, #4]
 8007a36:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8007a38:	2200      	movs	r2, #0
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	201f      	movs	r0, #31
 8007a3e:	f000 f965 	bl	8007d0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8007a42:	201f      	movs	r0, #31
 8007a44:	f000 f994 	bl	8007d70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8007a48:	2200      	movs	r2, #0
 8007a4a:	4611      	mov	r1, r2
 8007a4c:	2020      	movs	r0, #32
 8007a4e:	f000 f95d 	bl	8007d0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8007a52:	2020      	movs	r0, #32
 8007a54:	f000 f98c 	bl	8007d70 <HAL_NVIC_EnableIRQ>
}
 8007a58:	e7c7      	b.n	80079ea <HAL_I2C_MspInit+0x16>
 8007a5a:	bf00      	nop
 8007a5c:	40005400 	.word	0x40005400
 8007a60:	40021000 	.word	0x40021000
 8007a64:	40010c00 	.word	0x40010c00
 8007a68:	40010000 	.word	0x40010000

08007a6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007a6c:	b530      	push	{r4, r5, lr}
 8007a6e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a70:	2300      	movs	r3, #0
 8007a72:	9302      	str	r3, [sp, #8]
 8007a74:	9303      	str	r3, [sp, #12]
 8007a76:	9304      	str	r3, [sp, #16]
 8007a78:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI1)
 8007a7a:	6802      	ldr	r2, [r0, #0]
 8007a7c:	4b1a      	ldr	r3, [pc, #104]	; (8007ae8 <HAL_SPI_MspInit+0x7c>)
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d001      	beq.n	8007a86 <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007a82:	b007      	add	sp, #28
 8007a84:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007a86:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8007a8a:	699a      	ldr	r2, [r3, #24]
 8007a8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a90:	619a      	str	r2, [r3, #24]
 8007a92:	699a      	ldr	r2, [r3, #24]
 8007a94:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007a98:	9200      	str	r2, [sp, #0]
 8007a9a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a9c:	699a      	ldr	r2, [r3, #24]
 8007a9e:	f042 0204 	orr.w	r2, r2, #4
 8007aa2:	619a      	str	r2, [r3, #24]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	f003 0304 	and.w	r3, r3, #4
 8007aaa:	9301      	str	r3, [sp, #4]
 8007aac:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8007aae:	23a0      	movs	r3, #160	; 0xa0
 8007ab0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ab2:	2302      	movs	r3, #2
 8007ab4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007aba:	4d0c      	ldr	r5, [pc, #48]	; (8007aec <HAL_SPI_MspInit+0x80>)
 8007abc:	a902      	add	r1, sp, #8
 8007abe:	4628      	mov	r0, r5
 8007ac0:	f000 fb18 	bl	80080f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007ac4:	2340      	movs	r3, #64	; 0x40
 8007ac6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ac8:	2400      	movs	r4, #0
 8007aca:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007acc:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ace:	a902      	add	r1, sp, #8
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	f000 fb0f 	bl	80080f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8007ad6:	4622      	mov	r2, r4
 8007ad8:	4621      	mov	r1, r4
 8007ada:	2023      	movs	r0, #35	; 0x23
 8007adc:	f000 f916 	bl	8007d0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8007ae0:	2023      	movs	r0, #35	; 0x23
 8007ae2:	f000 f945 	bl	8007d70 <HAL_NVIC_EnableIRQ>
}
 8007ae6:	e7cc      	b.n	8007a82 <HAL_SPI_MspInit+0x16>
 8007ae8:	40013000 	.word	0x40013000
 8007aec:	40010800 	.word	0x40010800

08007af0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8007af0:	6803      	ldr	r3, [r0, #0]
 8007af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af6:	d000      	beq.n	8007afa <HAL_TIM_Base_MspInit+0xa>
 8007af8:	4770      	bx	lr
{
 8007afa:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007afc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8007b00:	69da      	ldr	r2, [r3, #28]
 8007b02:	f042 0201 	orr.w	r2, r2, #1
 8007b06:	61da      	str	r2, [r3, #28]
 8007b08:	69db      	ldr	r3, [r3, #28]
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	9301      	str	r3, [sp, #4]
 8007b10:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8007b12:	b002      	add	sp, #8
 8007b14:	4770      	bx	lr

08007b16 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007b16:	e7fe      	b.n	8007b16 <NMI_Handler>

08007b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007b18:	e7fe      	b.n	8007b18 <HardFault_Handler>

08007b1a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007b1a:	e7fe      	b.n	8007b1a <MemManage_Handler>

08007b1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007b1c:	e7fe      	b.n	8007b1c <BusFault_Handler>

08007b1e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007b1e:	e7fe      	b.n	8007b1e <UsageFault_Handler>

08007b20 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007b20:	4770      	bx	lr

08007b22 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007b22:	4770      	bx	lr

08007b24 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007b24:	4770      	bx	lr

08007b26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007b26:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007b28:	f000 f8b8 	bl	8007c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007b2c:	bd08      	pop	{r3, pc}

08007b2e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007b2e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8007b30:	2004      	movs	r0, #4
 8007b32:	f000 fbe1 	bl	80082f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007b36:	bd08      	pop	{r3, pc}

08007b38 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8007b38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8007b3a:	4802      	ldr	r0, [pc, #8]	; (8007b44 <I2C1_EV_IRQHandler+0xc>)
 8007b3c:	f001 fa78 	bl	8009030 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8007b40:	bd08      	pop	{r3, pc}
 8007b42:	bf00      	nop
 8007b44:	20002454 	.word	0x20002454

08007b48 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8007b48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8007b4a:	4802      	ldr	r0, [pc, #8]	; (8007b54 <I2C1_ER_IRQHandler+0xc>)
 8007b4c:	f001 ffac 	bl	8009aa8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8007b50:	bd08      	pop	{r3, pc}
 8007b52:	bf00      	nop
 8007b54:	20002454 	.word	0x20002454

08007b58 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8007b58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8007b5a:	4802      	ldr	r0, [pc, #8]	; (8007b64 <SPI1_IRQHandler+0xc>)
 8007b5c:	f002 fd8e 	bl	800a67c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8007b60:	bd08      	pop	{r3, pc}
 8007b62:	bf00      	nop
 8007b64:	200024bc 	.word	0x200024bc

08007b68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007b68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8007b6a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007b6e:	f000 fbc3 	bl	80082f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007b72:	bd08      	pop	{r3, pc}

08007b74 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8007b74:	2001      	movs	r0, #1
 8007b76:	4770      	bx	lr

08007b78 <_kill>:

int _kill(int pid, int sig)
{
 8007b78:	b508      	push	{r3, lr}
	errno = EINVAL;
 8007b7a:	f003 ffaf 	bl	800badc <__errno>
 8007b7e:	2316      	movs	r3, #22
 8007b80:	6003      	str	r3, [r0, #0]
	return -1;
}
 8007b82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b86:	bd08      	pop	{r3, pc}

08007b88 <_exit>:

void _exit (int status)
{
 8007b88:	b508      	push	{r3, lr}
	errno = EINVAL;
 8007b8a:	f003 ffa7 	bl	800badc <__errno>
 8007b8e:	2316      	movs	r3, #22
 8007b90:	6003      	str	r3, [r0, #0]
 8007b92:	e7fe      	b.n	8007b92 <_exit+0xa>

08007b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007b94:	b508      	push	{r3, lr}
 8007b96:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007b98:	4a0c      	ldr	r2, [pc, #48]	; (8007bcc <_sbrk+0x38>)
 8007b9a:	6812      	ldr	r2, [r2, #0]
 8007b9c:	b152      	cbz	r2, 8007bb4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007b9e:	4a0b      	ldr	r2, [pc, #44]	; (8007bcc <_sbrk+0x38>)
 8007ba0:	6810      	ldr	r0, [r2, #0]
 8007ba2:	4403      	add	r3, r0
 8007ba4:	4a0a      	ldr	r2, [pc, #40]	; (8007bd0 <_sbrk+0x3c>)
 8007ba6:	490b      	ldr	r1, [pc, #44]	; (8007bd4 <_sbrk+0x40>)
 8007ba8:	1a52      	subs	r2, r2, r1
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d806      	bhi.n	8007bbc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8007bae:	4a07      	ldr	r2, [pc, #28]	; (8007bcc <_sbrk+0x38>)
 8007bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8007bb2:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8007bb4:	4a05      	ldr	r2, [pc, #20]	; (8007bcc <_sbrk+0x38>)
 8007bb6:	4908      	ldr	r1, [pc, #32]	; (8007bd8 <_sbrk+0x44>)
 8007bb8:	6011      	str	r1, [r2, #0]
 8007bba:	e7f0      	b.n	8007b9e <_sbrk+0xa>
    errno = ENOMEM;
 8007bbc:	f003 ff8e 	bl	800badc <__errno>
 8007bc0:	230c      	movs	r3, #12
 8007bc2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8007bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bc8:	e7f3      	b.n	8007bb2 <_sbrk+0x1e>
 8007bca:	bf00      	nop
 8007bcc:	20002440 	.word	0x20002440
 8007bd0:	20005000 	.word	0x20005000
 8007bd4:	00000400 	.word	0x00000400
 8007bd8:	200025a8 	.word	0x200025a8

08007bdc <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007bdc:	4770      	bx	lr
	...

08007be0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8007be0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8007be2:	e003      	b.n	8007bec <LoopCopyDataInit>

08007be4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007be4:	4b0b      	ldr	r3, [pc, #44]	; (8007c14 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8007be6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8007be8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8007bea:	3104      	adds	r1, #4

08007bec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007bec:	480a      	ldr	r0, [pc, #40]	; (8007c18 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8007bee:	4b0b      	ldr	r3, [pc, #44]	; (8007c1c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8007bf0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8007bf2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007bf4:	d3f6      	bcc.n	8007be4 <CopyDataInit>
  ldr r2, =_sbss
 8007bf6:	4a0a      	ldr	r2, [pc, #40]	; (8007c20 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8007bf8:	e002      	b.n	8007c00 <LoopFillZerobss>

08007bfa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8007bfa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8007bfc:	f842 3b04 	str.w	r3, [r2], #4

08007c00 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8007c00:	4b08      	ldr	r3, [pc, #32]	; (8007c24 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8007c02:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007c04:	d3f9      	bcc.n	8007bfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007c06:	f7ff ffe9 	bl	8007bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007c0a:	f003 ff6d 	bl	800bae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007c0e:	f7ff fc77 	bl	8007500 <main>
  bx lr
 8007c12:	4770      	bx	lr
  ldr r3, =_sidata
 8007c14:	0800bed4 	.word	0x0800bed4
  ldr r0, =_sdata
 8007c18:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8007c1c:	200000d0 	.word	0x200000d0
  ldr r2, =_sbss
 8007c20:	200000d0 	.word	0x200000d0
  ldr r3, = _ebss
 8007c24:	200025a4 	.word	0x200025a4

08007c28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007c28:	e7fe      	b.n	8007c28 <ADC1_2_IRQHandler>
	...

08007c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007c2c:	b510      	push	{r4, lr}
 8007c2e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007c30:	4b0e      	ldr	r3, [pc, #56]	; (8007c6c <HAL_InitTick+0x40>)
 8007c32:	7818      	ldrb	r0, [r3, #0]
 8007c34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c38:	fbb3 f3f0 	udiv	r3, r3, r0
 8007c3c:	4a0c      	ldr	r2, [pc, #48]	; (8007c70 <HAL_InitTick+0x44>)
 8007c3e:	6810      	ldr	r0, [r2, #0]
 8007c40:	fbb0 f0f3 	udiv	r0, r0, r3
 8007c44:	f000 f8a2 	bl	8007d8c <HAL_SYSTICK_Config>
 8007c48:	b968      	cbnz	r0, 8007c66 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007c4a:	2c0f      	cmp	r4, #15
 8007c4c:	d901      	bls.n	8007c52 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8007c4e:	2001      	movs	r0, #1
 8007c50:	e00a      	b.n	8007c68 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007c52:	2200      	movs	r2, #0
 8007c54:	4621      	mov	r1, r4
 8007c56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c5a:	f000 f857 	bl	8007d0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007c5e:	4b05      	ldr	r3, [pc, #20]	; (8007c74 <HAL_InitTick+0x48>)
 8007c60:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c62:	2000      	movs	r0, #0
 8007c64:	e000      	b.n	8007c68 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8007c66:	2001      	movs	r0, #1
}
 8007c68:	bd10      	pop	{r4, pc}
 8007c6a:	bf00      	nop
 8007c6c:	20000060 	.word	0x20000060
 8007c70:	2000005c 	.word	0x2000005c
 8007c74:	20000064 	.word	0x20000064

08007c78 <HAL_Init>:
{
 8007c78:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007c7a:	4a07      	ldr	r2, [pc, #28]	; (8007c98 <HAL_Init+0x20>)
 8007c7c:	6813      	ldr	r3, [r2, #0]
 8007c7e:	f043 0310 	orr.w	r3, r3, #16
 8007c82:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007c84:	2003      	movs	r0, #3
 8007c86:	f000 f82f 	bl	8007ce8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	f7ff ffce 	bl	8007c2c <HAL_InitTick>
  HAL_MspInit();
 8007c90:	f7ff fe7e 	bl	8007990 <HAL_MspInit>
}
 8007c94:	2000      	movs	r0, #0
 8007c96:	bd08      	pop	{r3, pc}
 8007c98:	40022000 	.word	0x40022000

08007c9c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007c9c:	4a03      	ldr	r2, [pc, #12]	; (8007cac <HAL_IncTick+0x10>)
 8007c9e:	6811      	ldr	r1, [r2, #0]
 8007ca0:	4b03      	ldr	r3, [pc, #12]	; (8007cb0 <HAL_IncTick+0x14>)
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	440b      	add	r3, r1
 8007ca6:	6013      	str	r3, [r2, #0]
}
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	2000257c 	.word	0x2000257c
 8007cb0:	20000060 	.word	0x20000060

08007cb4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007cb4:	4b01      	ldr	r3, [pc, #4]	; (8007cbc <HAL_GetTick+0x8>)
 8007cb6:	6818      	ldr	r0, [r3, #0]
}
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	2000257c 	.word	0x2000257c

08007cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007cc4:	f7ff fff6 	bl	8007cb4 <HAL_GetTick>
 8007cc8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007cca:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007cce:	d002      	beq.n	8007cd6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8007cd0:	4b04      	ldr	r3, [pc, #16]	; (8007ce4 <HAL_Delay+0x24>)
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007cd6:	f7ff ffed 	bl	8007cb4 <HAL_GetTick>
 8007cda:	1b40      	subs	r0, r0, r5
 8007cdc:	42a0      	cmp	r0, r4
 8007cde:	d3fa      	bcc.n	8007cd6 <HAL_Delay+0x16>
  {
  }
}
 8007ce0:	bd38      	pop	{r3, r4, r5, pc}
 8007ce2:	bf00      	nop
 8007ce4:	20000060 	.word	0x20000060

08007ce8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ce8:	4a07      	ldr	r2, [pc, #28]	; (8007d08 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8007cea:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007cec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007cf0:	041b      	lsls	r3, r3, #16
 8007cf2:	0c1b      	lsrs	r3, r3, #16
 8007cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007cfc:	0200      	lsls	r0, r0, #8
 8007cfe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8007d02:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8007d04:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007d06:	4770      	bx	lr
 8007d08:	e000ed00 	.word	0xe000ed00

08007d0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007d0c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007d0e:	4b16      	ldr	r3, [pc, #88]	; (8007d68 <HAL_NVIC_SetPriority+0x5c>)
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d16:	f1c3 0407 	rsb	r4, r3, #7
 8007d1a:	2c04      	cmp	r4, #4
 8007d1c:	bf28      	it	cs
 8007d1e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d20:	1d1d      	adds	r5, r3, #4
 8007d22:	2d06      	cmp	r5, #6
 8007d24:	bf8c      	ite	hi
 8007d26:	3b03      	subhi	r3, #3
 8007d28:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d2a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007d2e:	fa05 f404 	lsl.w	r4, r5, r4
 8007d32:	ea21 0104 	bic.w	r1, r1, r4
 8007d36:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d38:	fa05 f303 	lsl.w	r3, r5, r3
 8007d3c:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d40:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8007d42:	2800      	cmp	r0, #0
 8007d44:	db09      	blt.n	8007d5a <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d46:	0109      	lsls	r1, r1, #4
 8007d48:	b2c9      	uxtb	r1, r1
 8007d4a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8007d4e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8007d52:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007d56:	bc30      	pop	{r4, r5}
 8007d58:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d5a:	f000 000f 	and.w	r0, r0, #15
 8007d5e:	0109      	lsls	r1, r1, #4
 8007d60:	b2c9      	uxtb	r1, r1
 8007d62:	4b02      	ldr	r3, [pc, #8]	; (8007d6c <HAL_NVIC_SetPriority+0x60>)
 8007d64:	5419      	strb	r1, [r3, r0]
 8007d66:	e7f6      	b.n	8007d56 <HAL_NVIC_SetPriority+0x4a>
 8007d68:	e000ed00 	.word	0xe000ed00
 8007d6c:	e000ed14 	.word	0xe000ed14

08007d70 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007d70:	2800      	cmp	r0, #0
 8007d72:	db08      	blt.n	8007d86 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d74:	0942      	lsrs	r2, r0, #5
 8007d76:	f000 001f 	and.w	r0, r0, #31
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	fa03 f000 	lsl.w	r0, r3, r0
 8007d80:	4b01      	ldr	r3, [pc, #4]	; (8007d88 <HAL_NVIC_EnableIRQ+0x18>)
 8007d82:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007d86:	4770      	bx	lr
 8007d88:	e000e100 	.word	0xe000e100

08007d8c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007d8c:	3801      	subs	r0, #1
 8007d8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007d92:	d20a      	bcs.n	8007daa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d94:	4b06      	ldr	r3, [pc, #24]	; (8007db0 <HAL_SYSTICK_Config+0x24>)
 8007d96:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d98:	4a06      	ldr	r2, [pc, #24]	; (8007db4 <HAL_SYSTICK_Config+0x28>)
 8007d9a:	21f0      	movs	r1, #240	; 0xf0
 8007d9c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007da0:	2000      	movs	r0, #0
 8007da2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007da4:	2207      	movs	r2, #7
 8007da6:	601a      	str	r2, [r3, #0]
 8007da8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8007daa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	e000e010 	.word	0xe000e010
 8007db4:	e000ed00 	.word	0xe000ed00

08007db8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007db8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007dba:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d003      	beq.n	8007dca <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007dc2:	2304      	movs	r3, #4
 8007dc4:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8007dc6:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8007dc8:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007dca:	6802      	ldr	r2, [r0, #0]
 8007dcc:	6813      	ldr	r3, [r2, #0]
 8007dce:	f023 030e 	bic.w	r3, r3, #14
 8007dd2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8007dd4:	6802      	ldr	r2, [r0, #0]
 8007dd6:	6813      	ldr	r3, [r2, #0]
 8007dd8:	f023 0301 	bic.w	r3, r3, #1
 8007ddc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007dde:	6803      	ldr	r3, [r0, #0]
 8007de0:	4a18      	ldr	r2, [pc, #96]	; (8007e44 <HAL_DMA_Abort_IT+0x8c>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d013      	beq.n	8007e0e <HAL_DMA_Abort_IT+0x56>
 8007de6:	3214      	adds	r2, #20
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d01e      	beq.n	8007e2a <HAL_DMA_Abort_IT+0x72>
 8007dec:	3214      	adds	r2, #20
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d01d      	beq.n	8007e2e <HAL_DMA_Abort_IT+0x76>
 8007df2:	3214      	adds	r2, #20
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d01d      	beq.n	8007e34 <HAL_DMA_Abort_IT+0x7c>
 8007df8:	3214      	adds	r2, #20
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d01d      	beq.n	8007e3a <HAL_DMA_Abort_IT+0x82>
 8007dfe:	3214      	adds	r2, #20
 8007e00:	4293      	cmp	r3, r2
 8007e02:	bf0c      	ite	eq
 8007e04:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8007e08:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8007e0c:	e000      	b.n	8007e10 <HAL_DMA_Abort_IT+0x58>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	4a0d      	ldr	r2, [pc, #52]	; (8007e48 <HAL_DMA_Abort_IT+0x90>)
 8007e12:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8007e14:	2301      	movs	r3, #1
 8007e16:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8007e20:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007e22:	b16b      	cbz	r3, 8007e40 <HAL_DMA_Abort_IT+0x88>
      hdma->XferAbortCallback(hdma);
 8007e24:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8007e26:	2000      	movs	r0, #0
 8007e28:	e7ce      	b.n	8007dc8 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007e2a:	2310      	movs	r3, #16
 8007e2c:	e7f0      	b.n	8007e10 <HAL_DMA_Abort_IT+0x58>
 8007e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e32:	e7ed      	b.n	8007e10 <HAL_DMA_Abort_IT+0x58>
 8007e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e38:	e7ea      	b.n	8007e10 <HAL_DMA_Abort_IT+0x58>
 8007e3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e3e:	e7e7      	b.n	8007e10 <HAL_DMA_Abort_IT+0x58>
  HAL_StatusTypeDef status = HAL_OK;
 8007e40:	2000      	movs	r0, #0
 8007e42:	e7c1      	b.n	8007dc8 <HAL_DMA_Abort_IT+0x10>
 8007e44:	40020008 	.word	0x40020008
 8007e48:	40020000 	.word	0x40020000

08007e4c <HAL_DMA_GetState>:
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
}
 8007e4c:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 8007e50:	4770      	bx	lr
	...

08007e54 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8007e54:	4b15      	ldr	r3, [pc, #84]	; (8007eac <FLASH_SetErrorCode+0x58>)
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	f013 0f10 	tst.w	r3, #16
 8007e5c:	d023      	beq.n	8007ea6 <FLASH_SetErrorCode+0x52>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007e5e:	4a14      	ldr	r2, [pc, #80]	; (8007eb0 <FLASH_SetErrorCode+0x5c>)
 8007e60:	69d3      	ldr	r3, [r2, #28]
 8007e62:	f043 0302 	orr.w	r3, r3, #2
 8007e66:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8007e68:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007e6a:	4a10      	ldr	r2, [pc, #64]	; (8007eac <FLASH_SetErrorCode+0x58>)
 8007e6c:	68d2      	ldr	r2, [r2, #12]
 8007e6e:	f012 0f04 	tst.w	r2, #4
 8007e72:	d006      	beq.n	8007e82 <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8007e74:	490e      	ldr	r1, [pc, #56]	; (8007eb0 <FLASH_SetErrorCode+0x5c>)
 8007e76:	69ca      	ldr	r2, [r1, #28]
 8007e78:	f042 0201 	orr.w	r2, r2, #1
 8007e7c:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8007e7e:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8007e82:	4a0a      	ldr	r2, [pc, #40]	; (8007eac <FLASH_SetErrorCode+0x58>)
 8007e84:	69d2      	ldr	r2, [r2, #28]
 8007e86:	f012 0f01 	tst.w	r2, #1
 8007e8a:	d009      	beq.n	8007ea0 <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8007e8c:	4908      	ldr	r1, [pc, #32]	; (8007eb0 <FLASH_SetErrorCode+0x5c>)
 8007e8e:	69ca      	ldr	r2, [r1, #28]
 8007e90:	f042 0204 	orr.w	r2, r2, #4
 8007e94:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8007e96:	4905      	ldr	r1, [pc, #20]	; (8007eac <FLASH_SetErrorCode+0x58>)
 8007e98:	69ca      	ldr	r2, [r1, #28]
 8007e9a:	f022 0201 	bic.w	r2, r2, #1
 8007e9e:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8007ea0:	4a02      	ldr	r2, [pc, #8]	; (8007eac <FLASH_SetErrorCode+0x58>)
 8007ea2:	60d3      	str	r3, [r2, #12]
}  
 8007ea4:	4770      	bx	lr
  uint32_t flags = 0U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	e7df      	b.n	8007e6a <FLASH_SetErrorCode+0x16>
 8007eaa:	bf00      	nop
 8007eac:	40022000 	.word	0x40022000
 8007eb0:	20002580 	.word	0x20002580

08007eb4 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007eb4:	4b08      	ldr	r3, [pc, #32]	; (8007ed8 <HAL_FLASH_Unlock+0x24>)
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ebc:	d009      	beq.n	8007ed2 <HAL_FLASH_Unlock+0x1e>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007ebe:	4b06      	ldr	r3, [pc, #24]	; (8007ed8 <HAL_FLASH_Unlock+0x24>)
 8007ec0:	4a06      	ldr	r2, [pc, #24]	; (8007edc <HAL_FLASH_Unlock+0x28>)
 8007ec2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007ec4:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8007ec8:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007eca:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8007ecc:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8007ed0:	4770      	bx	lr
 8007ed2:	2000      	movs	r0, #0
}
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	40022000 	.word	0x40022000
 8007edc:	45670123 	.word	0x45670123

08007ee0 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007ee0:	4a03      	ldr	r2, [pc, #12]	; (8007ef0 <HAL_FLASH_Lock+0x10>)
 8007ee2:	6913      	ldr	r3, [r2, #16]
 8007ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ee8:	6113      	str	r3, [r2, #16]
}
 8007eea:	2000      	movs	r0, #0
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	40022000 	.word	0x40022000

08007ef4 <FLASH_WaitForLastOperation>:
{
 8007ef4:	b570      	push	{r4, r5, r6, lr}
 8007ef6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007ef8:	f7ff fedc 	bl	8007cb4 <HAL_GetTick>
 8007efc:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007efe:	4d17      	ldr	r5, [pc, #92]	; (8007f5c <FLASH_WaitForLastOperation+0x68>)
 8007f00:	68eb      	ldr	r3, [r5, #12]
 8007f02:	f013 0f01 	tst.w	r3, #1
 8007f06:	d00a      	beq.n	8007f1e <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8007f08:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007f0c:	d0f8      	beq.n	8007f00 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007f0e:	b30c      	cbz	r4, 8007f54 <FLASH_WaitForLastOperation+0x60>
 8007f10:	f7ff fed0 	bl	8007cb4 <HAL_GetTick>
 8007f14:	1b80      	subs	r0, r0, r6
 8007f16:	42a0      	cmp	r0, r4
 8007f18:	d9f2      	bls.n	8007f00 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8007f1a:	2003      	movs	r0, #3
 8007f1c:	e019      	b.n	8007f52 <FLASH_WaitForLastOperation+0x5e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007f1e:	4b0f      	ldr	r3, [pc, #60]	; (8007f5c <FLASH_WaitForLastOperation+0x68>)
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	f013 0f20 	tst.w	r3, #32
 8007f26:	d002      	beq.n	8007f2e <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007f28:	4b0c      	ldr	r3, [pc, #48]	; (8007f5c <FLASH_WaitForLastOperation+0x68>)
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007f2e:	4b0b      	ldr	r3, [pc, #44]	; (8007f5c <FLASH_WaitForLastOperation+0x68>)
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	f013 0f10 	tst.w	r3, #16
 8007f36:	d109      	bne.n	8007f4c <FLASH_WaitForLastOperation+0x58>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007f38:	4b08      	ldr	r3, [pc, #32]	; (8007f5c <FLASH_WaitForLastOperation+0x68>)
 8007f3a:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007f3c:	f013 0f01 	tst.w	r3, #1
 8007f40:	d104      	bne.n	8007f4c <FLASH_WaitForLastOperation+0x58>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007f42:	4b06      	ldr	r3, [pc, #24]	; (8007f5c <FLASH_WaitForLastOperation+0x68>)
 8007f44:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007f46:	f013 0f04 	tst.w	r3, #4
 8007f4a:	d005      	beq.n	8007f58 <FLASH_WaitForLastOperation+0x64>
    FLASH_SetErrorCode();
 8007f4c:	f7ff ff82 	bl	8007e54 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007f50:	2001      	movs	r0, #1
}
 8007f52:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 8007f54:	2003      	movs	r0, #3
 8007f56:	e7fc      	b.n	8007f52 <FLASH_WaitForLastOperation+0x5e>
  return HAL_OK;
 8007f58:	2000      	movs	r0, #0
 8007f5a:	e7fa      	b.n	8007f52 <FLASH_WaitForLastOperation+0x5e>
 8007f5c:	40022000 	.word	0x40022000

08007f60 <HAL_FLASH_Program>:
{
 8007f60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f64:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8007f66:	4b26      	ldr	r3, [pc, #152]	; (8008000 <HAL_FLASH_Program+0xa0>)
 8007f68:	7e1b      	ldrb	r3, [r3, #24]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d042      	beq.n	8007ff4 <HAL_FLASH_Program+0x94>
 8007f6e:	4604      	mov	r4, r0
 8007f70:	460e      	mov	r6, r1
 8007f72:	4690      	mov	r8, r2
 8007f74:	4b22      	ldr	r3, [pc, #136]	; (8008000 <HAL_FLASH_Program+0xa0>)
 8007f76:	2201      	movs	r2, #1
 8007f78:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007f7a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007f7e:	f7ff ffb9 	bl	8007ef4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8007f82:	4603      	mov	r3, r0
 8007f84:	bb80      	cbnz	r0, 8007fe8 <HAL_FLASH_Program+0x88>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007f86:	2c01      	cmp	r4, #1
 8007f88:	d036      	beq.n	8007ff8 <HAL_FLASH_Program+0x98>
      nbiterations = 4U;
 8007f8a:	2c02      	cmp	r4, #2
 8007f8c:	bf0c      	ite	eq
 8007f8e:	f04f 0b02 	moveq.w	fp, #2
 8007f92:	f04f 0b04 	movne.w	fp, #4
{
 8007f96:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007f98:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008000 <HAL_FLASH_Program+0xa0>
 8007f9c:	46a9      	mov	r9, r5
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007f9e:	4c19      	ldr	r4, [pc, #100]	; (8008004 <HAL_FLASH_Program+0xa4>)
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8007fa0:	012b      	lsls	r3, r5, #4
 8007fa2:	f1c3 0120 	rsb	r1, r3, #32
 8007fa6:	f1a3 0220 	sub.w	r2, r3, #32
 8007faa:	fa28 f303 	lsr.w	r3, r8, r3
 8007fae:	fa07 f101 	lsl.w	r1, r7, r1
 8007fb2:	430b      	orrs	r3, r1
 8007fb4:	fa27 f202 	lsr.w	r2, r7, r2
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007fbc:	f8ca 901c 	str.w	r9, [sl, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007fc0:	6922      	ldr	r2, [r4, #16]
 8007fc2:	f042 0201 	orr.w	r2, r2, #1
 8007fc6:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8007fc8:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007fca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007fce:	f7ff ff91 	bl	8007ef4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007fd2:	6923      	ldr	r3, [r4, #16]
 8007fd4:	f023 0301 	bic.w	r3, r3, #1
 8007fd8:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8007fda:	4603      	mov	r3, r0
 8007fdc:	b920      	cbnz	r0, 8007fe8 <HAL_FLASH_Program+0x88>
 8007fde:	3501      	adds	r5, #1
 8007fe0:	3602      	adds	r6, #2
    for (index = 0U; index < nbiterations; index++)
 8007fe2:	b2ea      	uxtb	r2, r5
 8007fe4:	4593      	cmp	fp, r2
 8007fe6:	d8db      	bhi.n	8007fa0 <HAL_FLASH_Program+0x40>
  __HAL_UNLOCK(&pFlash);
 8007fe8:	4a05      	ldr	r2, [pc, #20]	; (8008000 <HAL_FLASH_Program+0xa0>)
 8007fea:	2100      	movs	r1, #0
 8007fec:	7611      	strb	r1, [r2, #24]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	e7fa      	b.n	8007fee <HAL_FLASH_Program+0x8e>
      nbiterations = 1U;
 8007ff8:	f04f 0b01 	mov.w	fp, #1
 8007ffc:	e7cb      	b.n	8007f96 <HAL_FLASH_Program+0x36>
 8007ffe:	bf00      	nop
 8008000:	20002580 	.word	0x20002580
 8008004:	40022000 	.word	0x40022000

08008008 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008008:	4b06      	ldr	r3, [pc, #24]	; (8008024 <FLASH_PageErase+0x1c>)
 800800a:	2200      	movs	r2, #0
 800800c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800800e:	4b06      	ldr	r3, [pc, #24]	; (8008028 <FLASH_PageErase+0x20>)
 8008010:	691a      	ldr	r2, [r3, #16]
 8008012:	f042 0202 	orr.w	r2, r2, #2
 8008016:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8008018:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800801a:	691a      	ldr	r2, [r3, #16]
 800801c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008020:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8008022:	4770      	bx	lr
 8008024:	20002580 	.word	0x20002580
 8008028:	40022000 	.word	0x40022000

0800802c <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 800802c:	4b2f      	ldr	r3, [pc, #188]	; (80080ec <HAL_FLASHEx_Erase+0xc0>)
 800802e:	7e1b      	ldrb	r3, [r3, #24]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d058      	beq.n	80080e6 <HAL_FLASHEx_Erase+0xba>
{
 8008034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008038:	460f      	mov	r7, r1
 800803a:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 800803c:	4b2b      	ldr	r3, [pc, #172]	; (80080ec <HAL_FLASHEx_Erase+0xc0>)
 800803e:	2201      	movs	r2, #1
 8008040:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008042:	6803      	ldr	r3, [r0, #0]
 8008044:	2b02      	cmp	r3, #2
 8008046:	d026      	beq.n	8008096 <HAL_FLASHEx_Erase+0x6a>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8008048:	f24c 3050 	movw	r0, #50000	; 0xc350
 800804c:	f7ff ff52 	bl	8007ef4 <FLASH_WaitForLastOperation>
 8008050:	2800      	cmp	r0, #0
 8008052:	d13f      	bne.n	80080d4 <HAL_FLASHEx_Erase+0xa8>
        *PageError = 0xFFFFFFFFU;
 8008054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008058:	603b      	str	r3, [r7, #0]
        for(address = pEraseInit->PageAddress;
 800805a:	68ac      	ldr	r4, [r5, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800805c:	68eb      	ldr	r3, [r5, #12]
 800805e:	eb04 2383 	add.w	r3, r4, r3, lsl #10
        for(address = pEraseInit->PageAddress;
 8008062:	429c      	cmp	r4, r3
 8008064:	d23d      	bcs.n	80080e2 <HAL_FLASHEx_Erase+0xb6>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008066:	f24c 3850 	movw	r8, #50000	; 0xc350
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800806a:	4e21      	ldr	r6, [pc, #132]	; (80080f0 <HAL_FLASHEx_Erase+0xc4>)
          FLASH_PageErase(address);
 800806c:	4620      	mov	r0, r4
 800806e:	f7ff ffcb 	bl	8008008 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008072:	4640      	mov	r0, r8
 8008074:	f7ff ff3e 	bl	8007ef4 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8008078:	6933      	ldr	r3, [r6, #16]
 800807a:	f023 0302 	bic.w	r3, r3, #2
 800807e:	6133      	str	r3, [r6, #16]
          if (status != HAL_OK)
 8008080:	4602      	mov	r2, r0
 8008082:	bb28      	cbnz	r0, 80080d0 <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 8008084:	f504 6480 	add.w	r4, r4, #1024	; 0x400
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8008088:	68e9      	ldr	r1, [r5, #12]
 800808a:	68ab      	ldr	r3, [r5, #8]
 800808c:	eb03 2381 	add.w	r3, r3, r1, lsl #10
        for(address = pEraseInit->PageAddress;
 8008090:	42a3      	cmp	r3, r4
 8008092:	d8eb      	bhi.n	800806c <HAL_FLASHEx_Erase+0x40>
 8008094:	e01f      	b.n	80080d6 <HAL_FLASHEx_Erase+0xaa>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8008096:	f24c 3050 	movw	r0, #50000	; 0xc350
 800809a:	f7ff ff2b 	bl	8007ef4 <FLASH_WaitForLastOperation>
 800809e:	b108      	cbz	r0, 80080a4 <HAL_FLASHEx_Erase+0x78>
  HAL_StatusTypeDef status = HAL_ERROR;
 80080a0:	2201      	movs	r2, #1
 80080a2:	e018      	b.n	80080d6 <HAL_FLASHEx_Erase+0xaa>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80080a4:	4b11      	ldr	r3, [pc, #68]	; (80080ec <HAL_FLASHEx_Erase+0xc0>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80080aa:	4c11      	ldr	r4, [pc, #68]	; (80080f0 <HAL_FLASHEx_Erase+0xc4>)
 80080ac:	6923      	ldr	r3, [r4, #16]
 80080ae:	f043 0304 	orr.w	r3, r3, #4
 80080b2:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80080b4:	6923      	ldr	r3, [r4, #16]
 80080b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080ba:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80080bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80080c0:	f7ff ff18 	bl	8007ef4 <FLASH_WaitForLastOperation>
 80080c4:	4602      	mov	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80080c6:	6923      	ldr	r3, [r4, #16]
 80080c8:	f023 0304 	bic.w	r3, r3, #4
 80080cc:	6123      	str	r3, [r4, #16]
 80080ce:	e002      	b.n	80080d6 <HAL_FLASHEx_Erase+0xaa>
            *PageError = address;
 80080d0:	603c      	str	r4, [r7, #0]
            break;
 80080d2:	e000      	b.n	80080d6 <HAL_FLASHEx_Erase+0xaa>
  HAL_StatusTypeDef status = HAL_ERROR;
 80080d4:	2201      	movs	r2, #1
  __HAL_UNLOCK(&pFlash);
 80080d6:	4b05      	ldr	r3, [pc, #20]	; (80080ec <HAL_FLASHEx_Erase+0xc0>)
 80080d8:	2100      	movs	r1, #0
 80080da:	7619      	strb	r1, [r3, #24]
}
 80080dc:	4610      	mov	r0, r2
 80080de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_ERROR;
 80080e2:	2201      	movs	r2, #1
 80080e4:	e7f7      	b.n	80080d6 <HAL_FLASHEx_Erase+0xaa>
  __HAL_LOCK(&pFlash);
 80080e6:	2202      	movs	r2, #2
}
 80080e8:	4610      	mov	r0, r2
 80080ea:	4770      	bx	lr
 80080ec:	20002580 	.word	0x20002580
 80080f0:	40022000 	.word	0x40022000

080080f4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80080f4:	680b      	ldr	r3, [r1, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f000 80e0 	beq.w	80082bc <HAL_GPIO_Init+0x1c8>
{
 80080fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008100:	b083      	sub	sp, #12
  uint32_t config = 0x00u;
 8008102:	2500      	movs	r5, #0
  uint32_t position = 0x00u;
 8008104:	462a      	mov	r2, r5
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008106:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 80082cc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800810a:	4c6d      	ldr	r4, [pc, #436]	; (80082c0 <HAL_GPIO_Init+0x1cc>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800810c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80082d0 <HAL_GPIO_Init+0x1dc>
      switch (GPIO_Init->Mode)
 8008110:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 80082d4 <HAL_GPIO_Init+0x1e0>
 8008114:	e0a2      	b.n	800825c <HAL_GPIO_Init+0x168>
 8008116:	f1b9 0f00 	cmp.w	r9, #0
 800811a:	d01b      	beq.n	8008154 <HAL_GPIO_Init+0x60>
 800811c:	f1b9 0f01 	cmp.w	r9, #1
 8008120:	d123      	bne.n	800816a <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008122:	68cd      	ldr	r5, [r1, #12]
          break;
 8008124:	e021      	b.n	800816a <HAL_GPIO_Init+0x76>
      switch (GPIO_Init->Mode)
 8008126:	45f1      	cmp	r9, lr
 8008128:	d014      	beq.n	8008154 <HAL_GPIO_Init+0x60>
 800812a:	d90b      	bls.n	8008144 <HAL_GPIO_Init+0x50>
 800812c:	4f65      	ldr	r7, [pc, #404]	; (80082c4 <HAL_GPIO_Init+0x1d0>)
 800812e:	45b9      	cmp	r9, r7
 8008130:	d010      	beq.n	8008154 <HAL_GPIO_Init+0x60>
 8008132:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8008136:	45b9      	cmp	r9, r7
 8008138:	d00c      	beq.n	8008154 <HAL_GPIO_Init+0x60>
 800813a:	f8df a19c 	ldr.w	sl, [pc, #412]	; 80082d8 <HAL_GPIO_Init+0x1e4>
 800813e:	45d1      	cmp	r9, sl
 8008140:	d113      	bne.n	800816a <HAL_GPIO_Init+0x76>
 8008142:	e007      	b.n	8008154 <HAL_GPIO_Init+0x60>
 8008144:	f8df a194 	ldr.w	sl, [pc, #404]	; 80082dc <HAL_GPIO_Init+0x1e8>
 8008148:	45d1      	cmp	r9, sl
 800814a:	d003      	beq.n	8008154 <HAL_GPIO_Init+0x60>
 800814c:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
 8008150:	45d1      	cmp	r9, sl
 8008152:	d10a      	bne.n	800816a <HAL_GPIO_Init+0x76>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008154:	688d      	ldr	r5, [r1, #8]
 8008156:	2d00      	cmp	r5, #0
 8008158:	f000 80a2 	beq.w	80082a0 <HAL_GPIO_Init+0x1ac>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800815c:	2d01      	cmp	r5, #1
            GPIOx->BSRR = ioposition;
 800815e:	bf0c      	ite	eq
 8008160:	6106      	streq	r6, [r0, #16]
            GPIOx->BRR = ioposition;
 8008162:	6146      	strne	r6, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008164:	2508      	movs	r5, #8
 8008166:	e000      	b.n	800816a <HAL_GPIO_Init+0x76>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008168:	2500      	movs	r5, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800816a:	2bff      	cmp	r3, #255	; 0xff
 800816c:	bf99      	ittee	ls
 800816e:	4682      	movls	sl, r0
 8008170:	6806      	ldrls	r6, [r0, #0]
 8008172:	f100 0a04 	addhi.w	sl, r0, #4
 8008176:	6846      	ldrhi	r6, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008178:	2bff      	cmp	r3, #255	; 0xff
 800817a:	bf91      	iteee	ls
 800817c:	ea4f 0982 	movls.w	r9, r2, lsl #2
 8008180:	f102 4980 	addhi.w	r9, r2, #1073741824	; 0x40000000
 8008184:	f1a9 0908 	subhi.w	r9, r9, #8
 8008188:	ea4f 0989 	movhi.w	r9, r9, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800818c:	f04f 0b0f 	mov.w	fp, #15
 8008190:	fa0b fb09 	lsl.w	fp, fp, r9
 8008194:	ea26 060b 	bic.w	r6, r6, fp
 8008198:	fa05 f909 	lsl.w	r9, r5, r9
 800819c:	ea46 0609 	orr.w	r6, r6, r9
 80081a0:	f8ca 6000 	str.w	r6, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80081a4:	684e      	ldr	r6, [r1, #4]
 80081a6:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 80081aa:	d052      	beq.n	8008252 <HAL_GPIO_Init+0x15e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80081ac:	4f46      	ldr	r7, [pc, #280]	; (80082c8 <HAL_GPIO_Init+0x1d4>)
 80081ae:	69be      	ldr	r6, [r7, #24]
 80081b0:	f046 0601 	orr.w	r6, r6, #1
 80081b4:	61be      	str	r6, [r7, #24]
 80081b6:	69be      	ldr	r6, [r7, #24]
 80081b8:	f006 0601 	and.w	r6, r6, #1
 80081bc:	9601      	str	r6, [sp, #4]
 80081be:	9e01      	ldr	r6, [sp, #4]
 80081c0:	f022 0603 	bic.w	r6, r2, #3
 80081c4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80081c8:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2u];
 80081cc:	f8d6 a008 	ldr.w	sl, [r6, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80081d0:	f002 0903 	and.w	r9, r2, #3
 80081d4:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 80081d8:	f04f 090f 	mov.w	r9, #15
 80081dc:	fa09 f90b 	lsl.w	r9, r9, fp
 80081e0:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80081e4:	4560      	cmp	r0, ip
 80081e6:	d05d      	beq.n	80082a4 <HAL_GPIO_Init+0x1b0>
 80081e8:	4540      	cmp	r0, r8
 80081ea:	d05e      	beq.n	80082aa <HAL_GPIO_Init+0x1b6>
 80081ec:	f5a7 3780 	sub.w	r7, r7, #65536	; 0x10000
 80081f0:	42b8      	cmp	r0, r7
 80081f2:	d05d      	beq.n	80082b0 <HAL_GPIO_Init+0x1bc>
 80081f4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80081f8:	42b8      	cmp	r0, r7
 80081fa:	bf0c      	ite	eq
 80081fc:	f04f 0903 	moveq.w	r9, #3
 8008200:	f04f 0904 	movne.w	r9, #4
 8008204:	fa09 f90b 	lsl.w	r9, r9, fp
 8008208:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 800820c:	f8c6 9008 	str.w	r9, [r6, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008210:	684e      	ldr	r6, [r1, #4]
 8008212:	f416 3f80 	tst.w	r6, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8008216:	6826      	ldr	r6, [r4, #0]
 8008218:	bf14      	ite	ne
 800821a:	431e      	orrne	r6, r3
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800821c:	439e      	biceq	r6, r3
 800821e:	6026      	str	r6, [r4, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008220:	684e      	ldr	r6, [r1, #4]
 8008222:	f416 3f00 	tst.w	r6, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8008226:	6866      	ldr	r6, [r4, #4]
 8008228:	bf14      	ite	ne
 800822a:	431e      	orrne	r6, r3
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800822c:	439e      	biceq	r6, r3
 800822e:	6066      	str	r6, [r4, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008230:	684e      	ldr	r6, [r1, #4]
 8008232:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8008236:	68a6      	ldr	r6, [r4, #8]
 8008238:	bf14      	ite	ne
 800823a:	431e      	orrne	r6, r3
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800823c:	439e      	biceq	r6, r3
 800823e:	60a6      	str	r6, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008240:	684e      	ldr	r6, [r1, #4]
 8008242:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8008246:	68e6      	ldr	r6, [r4, #12]
 8008248:	bf14      	ite	ne
 800824a:	4333      	orrne	r3, r6
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800824c:	ea26 0303 	biceq.w	r3, r6, r3
 8008250:	60e3      	str	r3, [r4, #12]
        }
      }
    }

	position++;
 8008252:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008254:	680b      	ldr	r3, [r1, #0]
 8008256:	fa33 f602 	lsrs.w	r6, r3, r2
 800825a:	d02c      	beq.n	80082b6 <HAL_GPIO_Init+0x1c2>
    ioposition = (0x01uL << position);
 800825c:	2601      	movs	r6, #1
 800825e:	4096      	lsls	r6, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008260:	4033      	ands	r3, r6
    if (iocurrent == ioposition)
 8008262:	429e      	cmp	r6, r3
 8008264:	d1f5      	bne.n	8008252 <HAL_GPIO_Init+0x15e>
      switch (GPIO_Init->Mode)
 8008266:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800826a:	f1b9 0f12 	cmp.w	r9, #18
 800826e:	d014      	beq.n	800829a <HAL_GPIO_Init+0x1a6>
 8008270:	f63f af59 	bhi.w	8008126 <HAL_GPIO_Init+0x32>
 8008274:	f1b9 0f02 	cmp.w	r9, #2
 8008278:	d00c      	beq.n	8008294 <HAL_GPIO_Init+0x1a0>
 800827a:	f67f af4c 	bls.w	8008116 <HAL_GPIO_Init+0x22>
 800827e:	f1b9 0f03 	cmp.w	r9, #3
 8008282:	f43f af71 	beq.w	8008168 <HAL_GPIO_Init+0x74>
 8008286:	f1b9 0f11 	cmp.w	r9, #17
 800828a:	f47f af6e 	bne.w	800816a <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800828e:	68cd      	ldr	r5, [r1, #12]
 8008290:	3504      	adds	r5, #4
          break;
 8008292:	e76a      	b.n	800816a <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008294:	68cd      	ldr	r5, [r1, #12]
 8008296:	3508      	adds	r5, #8
          break;
 8008298:	e767      	b.n	800816a <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800829a:	68cd      	ldr	r5, [r1, #12]
 800829c:	350c      	adds	r5, #12
          break;
 800829e:	e764      	b.n	800816a <HAL_GPIO_Init+0x76>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80082a0:	2504      	movs	r5, #4
 80082a2:	e762      	b.n	800816a <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80082a4:	f04f 0900 	mov.w	r9, #0
 80082a8:	e7ac      	b.n	8008204 <HAL_GPIO_Init+0x110>
 80082aa:	f04f 0901 	mov.w	r9, #1
 80082ae:	e7a9      	b.n	8008204 <HAL_GPIO_Init+0x110>
 80082b0:	f04f 0902 	mov.w	r9, #2
 80082b4:	e7a6      	b.n	8008204 <HAL_GPIO_Init+0x110>
  }
}
 80082b6:	b003      	add	sp, #12
 80082b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	40010400 	.word	0x40010400
 80082c4:	10310000 	.word	0x10310000
 80082c8:	40021000 	.word	0x40021000
 80082cc:	40010800 	.word	0x40010800
 80082d0:	40010c00 	.word	0x40010c00
 80082d4:	10210000 	.word	0x10210000
 80082d8:	10220000 	.word	0x10220000
 80082dc:	10110000 	.word	0x10110000

080082e0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80082e0:	6883      	ldr	r3, [r0, #8]
 80082e2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80082e4:	bf14      	ite	ne
 80082e6:	2001      	movne	r0, #1
 80082e8:	2000      	moveq	r0, #0
 80082ea:	4770      	bx	lr

080082ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80082ec:	b912      	cbnz	r2, 80082f4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80082ee:	0409      	lsls	r1, r1, #16
 80082f0:	6101      	str	r1, [r0, #16]
  }
}
 80082f2:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80082f4:	6101      	str	r1, [r0, #16]
 80082f6:	4770      	bx	lr

080082f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80082f8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80082fa:	4b05      	ldr	r3, [pc, #20]	; (8008310 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	4203      	tst	r3, r0
 8008300:	d100      	bne.n	8008304 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8008302:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008304:	4b02      	ldr	r3, [pc, #8]	; (8008310 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8008306:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008308:	f7ff fb28 	bl	800795c <HAL_GPIO_EXTI_Callback>
}
 800830c:	e7f9      	b.n	8008302 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800830e:	bf00      	nop
 8008310:	40010400 	.word	0x40010400

08008314 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008314:	6803      	ldr	r3, [r0, #0]
 8008316:	695a      	ldr	r2, [r3, #20]
 8008318:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800831c:	d011      	beq.n	8008342 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800831e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008322:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008324:	2300      	movs	r3, #0
 8008326:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008328:	2220      	movs	r2, #32
 800832a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800832e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008332:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008334:	f042 0204 	orr.w	r2, r2, #4
 8008338:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800833a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 800833e:	2001      	movs	r0, #1
 8008340:	4770      	bx	lr
  }
  return HAL_OK;
 8008342:	2000      	movs	r0, #0
}
 8008344:	4770      	bx	lr

08008346 <I2C_WaitOnFlagUntilTimeout>:
{
 8008346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800834a:	4606      	mov	r6, r0
 800834c:	4690      	mov	r8, r2
 800834e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008350:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8008354:	b28c      	uxth	r4, r1
 8008356:	2f01      	cmp	r7, #1
 8008358:	6833      	ldr	r3, [r6, #0]
 800835a:	bf0c      	ite	eq
 800835c:	695b      	ldreq	r3, [r3, #20]
 800835e:	699b      	ldrne	r3, [r3, #24]
 8008360:	ea34 0303 	bics.w	r3, r4, r3
 8008364:	bf0c      	ite	eq
 8008366:	2301      	moveq	r3, #1
 8008368:	2300      	movne	r3, #0
 800836a:	4598      	cmp	r8, r3
 800836c:	d119      	bne.n	80083a2 <I2C_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800836e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008372:	d0f0      	beq.n	8008356 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008374:	f7ff fc9e 	bl	8007cb4 <HAL_GetTick>
 8008378:	9b06      	ldr	r3, [sp, #24]
 800837a:	1ac0      	subs	r0, r0, r3
 800837c:	42a8      	cmp	r0, r5
 800837e:	d801      	bhi.n	8008384 <I2C_WaitOnFlagUntilTimeout+0x3e>
 8008380:	2d00      	cmp	r5, #0
 8008382:	d1e8      	bne.n	8008356 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008384:	2300      	movs	r3, #0
 8008386:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008388:	2220      	movs	r2, #32
 800838a:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800838e:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008392:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8008394:	f042 0220 	orr.w	r2, r2, #32
 8008398:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800839a:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 800839e:	2001      	movs	r0, #1
 80083a0:	e000      	b.n	80083a4 <I2C_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 80083a2:	2000      	movs	r0, #0
}
 80083a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080083a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80083a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ac:	4604      	mov	r4, r0
 80083ae:	4617      	mov	r7, r2
 80083b0:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80083b2:	f3c1 4607 	ubfx	r6, r1, #16, #8
 80083b6:	b28d      	uxth	r5, r1
 80083b8:	2e01      	cmp	r6, #1
 80083ba:	6823      	ldr	r3, [r4, #0]
 80083bc:	bf0c      	ite	eq
 80083be:	695b      	ldreq	r3, [r3, #20]
 80083c0:	699b      	ldrne	r3, [r3, #24]
 80083c2:	ea35 0303 	bics.w	r3, r5, r3
 80083c6:	bf14      	ite	ne
 80083c8:	2301      	movne	r3, #1
 80083ca:	2300      	moveq	r3, #0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d035      	beq.n	800843c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80083d0:	6823      	ldr	r3, [r4, #0]
 80083d2:	695a      	ldr	r2, [r3, #20]
 80083d4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80083d8:	d119      	bne.n	800840e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 80083da:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80083de:	d0eb      	beq.n	80083b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083e0:	f7ff fc68 	bl	8007cb4 <HAL_GetTick>
 80083e4:	eba0 0008 	sub.w	r0, r0, r8
 80083e8:	42b8      	cmp	r0, r7
 80083ea:	d801      	bhi.n	80083f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
 80083ec:	2f00      	cmp	r7, #0
 80083ee:	d1e3      	bne.n	80083b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80083f0:	2300      	movs	r3, #0
 80083f2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083f4:	2220      	movs	r2, #32
 80083f6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008400:	f042 0220 	orr.w	r2, r2, #32
 8008404:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008406:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800840a:	2001      	movs	r0, #1
 800840c:	e017      	b.n	800843e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x96>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008414:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008416:	6823      	ldr	r3, [r4, #0]
 8008418:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800841c:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800841e:	2300      	movs	r3, #0
 8008420:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008422:	2220      	movs	r2, #32
 8008424:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008428:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800842c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800842e:	f042 0204 	orr.w	r2, r2, #4
 8008432:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8008434:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8008438:	2001      	movs	r0, #1
 800843a:	e000      	b.n	800843e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x96>
  return HAL_OK;
 800843c:	2000      	movs	r0, #0
}
 800843e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008442 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8008442:	b570      	push	{r4, r5, r6, lr}
 8008444:	4604      	mov	r4, r0
 8008446:	460d      	mov	r5, r1
 8008448:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008452:	d11c      	bne.n	800848e <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008454:	4620      	mov	r0, r4
 8008456:	f7ff ff5d 	bl	8008314 <I2C_IsAcknowledgeFailed>
 800845a:	b9d0      	cbnz	r0, 8008492 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800845c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008460:	d0f3      	beq.n	800844a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008462:	f7ff fc27 	bl	8007cb4 <HAL_GetTick>
 8008466:	1b80      	subs	r0, r0, r6
 8008468:	42a8      	cmp	r0, r5
 800846a:	d801      	bhi.n	8008470 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800846c:	2d00      	cmp	r5, #0
 800846e:	d1ec      	bne.n	800844a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008470:	2300      	movs	r3, #0
 8008472:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008474:	2220      	movs	r2, #32
 8008476:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800847a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800847e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008480:	f042 0220 	orr.w	r2, r2, #32
 8008484:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008486:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800848a:	2001      	movs	r0, #1
 800848c:	e000      	b.n	8008490 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 800848e:	2000      	movs	r0, #0
}
 8008490:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8008492:	2001      	movs	r0, #1
 8008494:	e7fc      	b.n	8008490 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08008496 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8008496:	b570      	push	{r4, r5, r6, lr}
 8008498:	4604      	mov	r4, r0
 800849a:	460d      	mov	r5, r1
 800849c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	f013 0f04 	tst.w	r3, #4
 80084a6:	d11c      	bne.n	80084e2 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80084a8:	4620      	mov	r0, r4
 80084aa:	f7ff ff33 	bl	8008314 <I2C_IsAcknowledgeFailed>
 80084ae:	b9d0      	cbnz	r0, 80084e6 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80084b0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80084b4:	d0f3      	beq.n	800849e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084b6:	f7ff fbfd 	bl	8007cb4 <HAL_GetTick>
 80084ba:	1b80      	subs	r0, r0, r6
 80084bc:	42a8      	cmp	r0, r5
 80084be:	d801      	bhi.n	80084c4 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80084c0:	2d00      	cmp	r5, #0
 80084c2:	d1ec      	bne.n	800849e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80084c4:	2300      	movs	r3, #0
 80084c6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80084c8:	2220      	movs	r2, #32
 80084ca:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084ce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80084d4:	f042 0220 	orr.w	r2, r2, #32
 80084d8:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80084da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80084de:	2001      	movs	r0, #1
 80084e0:	e000      	b.n	80084e4 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 80084e2:	2000      	movs	r0, #0
}
 80084e4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80084e6:	2001      	movs	r0, #1
 80084e8:	e7fc      	b.n	80084e4 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

080084ea <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80084ea:	b570      	push	{r4, r5, r6, lr}
 80084ec:	4605      	mov	r5, r0
 80084ee:	460c      	mov	r4, r1
 80084f0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80084f2:	682b      	ldr	r3, [r5, #0]
 80084f4:	695a      	ldr	r2, [r3, #20]
 80084f6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80084fa:	d129      	bne.n	8008550 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80084fc:	695a      	ldr	r2, [r3, #20]
 80084fe:	f012 0f10 	tst.w	r2, #16
 8008502:	d115      	bne.n	8008530 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008504:	f7ff fbd6 	bl	8007cb4 <HAL_GetTick>
 8008508:	1b80      	subs	r0, r0, r6
 800850a:	42a0      	cmp	r0, r4
 800850c:	d801      	bhi.n	8008512 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 800850e:	2c00      	cmp	r4, #0
 8008510:	d1ef      	bne.n	80084f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008512:	2300      	movs	r3, #0
 8008514:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008516:	2220      	movs	r2, #32
 8008518:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800851c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008520:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8008522:	f042 0220 	orr.w	r2, r2, #32
 8008526:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8008528:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800852c:	2001      	movs	r0, #1
}
 800852e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008530:	f06f 0210 	mvn.w	r2, #16
 8008534:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008536:	2300      	movs	r3, #0
 8008538:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800853a:	2220      	movs	r2, #32
 800853c:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008540:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008544:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8008546:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8008548:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800854c:	2001      	movs	r0, #1
 800854e:	e7ee      	b.n	800852e <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8008550:	2000      	movs	r0, #0
 8008552:	e7ec      	b.n	800852e <I2C_WaitOnRXNEFlagUntilTimeout+0x44>

08008554 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8008554:	2800      	cmp	r0, #0
 8008556:	f000 80ac 	beq.w	80086b2 <HAL_I2C_Init+0x15e>
{
 800855a:	b570      	push	{r4, r5, r6, lr}
 800855c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800855e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008562:	2b00      	cmp	r3, #0
 8008564:	d076      	beq.n	8008654 <HAL_I2C_Init+0x100>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008566:	2324      	movs	r3, #36	; 0x24
 8008568:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800856c:	6822      	ldr	r2, [r4, #0]
 800856e:	6813      	ldr	r3, [r2, #0]
 8008570:	f023 0301 	bic.w	r3, r3, #1
 8008574:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008576:	6822      	ldr	r2, [r4, #0]
 8008578:	6813      	ldr	r3, [r2, #0]
 800857a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800857e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008580:	6822      	ldr	r2, [r4, #0]
 8008582:	6813      	ldr	r3, [r2, #0]
 8008584:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008588:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800858a:	f001 fe6f 	bl	800a26c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800858e:	6862      	ldr	r2, [r4, #4]
 8008590:	4b4a      	ldr	r3, [pc, #296]	; (80086bc <HAL_I2C_Init+0x168>)
 8008592:	429a      	cmp	r2, r3
 8008594:	bf94      	ite	ls
 8008596:	4b4a      	ldrls	r3, [pc, #296]	; (80086c0 <HAL_I2C_Init+0x16c>)
 8008598:	4b4a      	ldrhi	r3, [pc, #296]	; (80086c4 <HAL_I2C_Init+0x170>)
 800859a:	4298      	cmp	r0, r3
 800859c:	bf8c      	ite	hi
 800859e:	2300      	movhi	r3, #0
 80085a0:	2301      	movls	r3, #1
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f040 8087 	bne.w	80086b6 <HAL_I2C_Init+0x162>
  freqrange = I2C_FREQRANGE(pclk1);
 80085a8:	4b47      	ldr	r3, [pc, #284]	; (80086c8 <HAL_I2C_Init+0x174>)
 80085aa:	fba3 2300 	umull	r2, r3, r3, r0
 80085ae:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80085b0:	6821      	ldr	r1, [r4, #0]
 80085b2:	684a      	ldr	r2, [r1, #4]
 80085b4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80085b8:	431a      	orrs	r2, r3
 80085ba:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80085bc:	6825      	ldr	r5, [r4, #0]
 80085be:	6a2a      	ldr	r2, [r5, #32]
 80085c0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80085c4:	6866      	ldr	r6, [r4, #4]
 80085c6:	493d      	ldr	r1, [pc, #244]	; (80086bc <HAL_I2C_Init+0x168>)
 80085c8:	428e      	cmp	r6, r1
 80085ca:	d848      	bhi.n	800865e <HAL_I2C_Init+0x10a>
 80085cc:	3301      	adds	r3, #1
 80085ce:	4313      	orrs	r3, r2
 80085d0:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80085d2:	6825      	ldr	r5, [r4, #0]
 80085d4:	69e9      	ldr	r1, [r5, #28]
 80085d6:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80085da:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80085de:	6862      	ldr	r2, [r4, #4]
 80085e0:	4b36      	ldr	r3, [pc, #216]	; (80086bc <HAL_I2C_Init+0x168>)
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d845      	bhi.n	8008672 <HAL_I2C_Init+0x11e>
 80085e6:	3801      	subs	r0, #1
 80085e8:	0053      	lsls	r3, r2, #1
 80085ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80085ee:	3301      	adds	r3, #1
 80085f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085f4:	2b04      	cmp	r3, #4
 80085f6:	bf38      	it	cc
 80085f8:	2304      	movcc	r3, #4
 80085fa:	430b      	orrs	r3, r1
 80085fc:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80085fe:	6821      	ldr	r1, [r4, #0]
 8008600:	680a      	ldr	r2, [r1, #0]
 8008602:	69e3      	ldr	r3, [r4, #28]
 8008604:	6a20      	ldr	r0, [r4, #32]
 8008606:	4303      	orrs	r3, r0
 8008608:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800860c:	4313      	orrs	r3, r2
 800860e:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008610:	6821      	ldr	r1, [r4, #0]
 8008612:	688a      	ldr	r2, [r1, #8]
 8008614:	6923      	ldr	r3, [r4, #16]
 8008616:	68e0      	ldr	r0, [r4, #12]
 8008618:	4303      	orrs	r3, r0
 800861a:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 800861e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008622:	4313      	orrs	r3, r2
 8008624:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008626:	6821      	ldr	r1, [r4, #0]
 8008628:	68ca      	ldr	r2, [r1, #12]
 800862a:	6963      	ldr	r3, [r4, #20]
 800862c:	69a0      	ldr	r0, [r4, #24]
 800862e:	4303      	orrs	r3, r0
 8008630:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008634:	4313      	orrs	r3, r2
 8008636:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8008638:	6822      	ldr	r2, [r4, #0]
 800863a:	6813      	ldr	r3, [r2, #0]
 800863c:	f043 0301 	orr.w	r3, r3, #1
 8008640:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008642:	2000      	movs	r0, #0
 8008644:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008646:	2320      	movs	r3, #32
 8008648:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800864c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800864e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8008652:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8008654:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8008658:	f7ff f9bc 	bl	80079d4 <HAL_I2C_MspInit>
 800865c:	e783      	b.n	8008566 <HAL_I2C_Init+0x12>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800865e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008662:	fb01 f303 	mul.w	r3, r1, r3
 8008666:	4919      	ldr	r1, [pc, #100]	; (80086cc <HAL_I2C_Init+0x178>)
 8008668:	fba1 1303 	umull	r1, r3, r1, r3
 800866c:	099b      	lsrs	r3, r3, #6
 800866e:	3301      	adds	r3, #1
 8008670:	e7ad      	b.n	80085ce <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008672:	68a3      	ldr	r3, [r4, #8]
 8008674:	b953      	cbnz	r3, 800868c <HAL_I2C_Init+0x138>
 8008676:	3801      	subs	r0, #1
 8008678:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800867c:	fbb0 f2f2 	udiv	r2, r0, r2
 8008680:	3201      	adds	r2, #1
 8008682:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8008686:	b97a      	cbnz	r2, 80086a8 <HAL_I2C_Init+0x154>
 8008688:	2301      	movs	r3, #1
 800868a:	e7b6      	b.n	80085fa <HAL_I2C_Init+0xa6>
 800868c:	3801      	subs	r0, #1
 800868e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008692:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008696:	fbb0 f2f2 	udiv	r2, r0, r2
 800869a:	3201      	adds	r2, #1
 800869c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80086a0:	b12a      	cbz	r2, 80086ae <HAL_I2C_Init+0x15a>
 80086a2:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 80086a6:	e7a8      	b.n	80085fa <HAL_I2C_Init+0xa6>
 80086a8:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 80086ac:	e7a5      	b.n	80085fa <HAL_I2C_Init+0xa6>
 80086ae:	2301      	movs	r3, #1
 80086b0:	e7a3      	b.n	80085fa <HAL_I2C_Init+0xa6>
    return HAL_ERROR;
 80086b2:	2001      	movs	r0, #1
}
 80086b4:	4770      	bx	lr
    return HAL_ERROR;
 80086b6:	2001      	movs	r0, #1
 80086b8:	e7cb      	b.n	8008652 <HAL_I2C_Init+0xfe>
 80086ba:	bf00      	nop
 80086bc:	000186a0 	.word	0x000186a0
 80086c0:	001e847f 	.word	0x001e847f
 80086c4:	003d08ff 	.word	0x003d08ff
 80086c8:	431bde83 	.word	0x431bde83
 80086cc:	10624dd3 	.word	0x10624dd3

080086d0 <HAL_I2C_Master_Transmit>:
{
 80086d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d4:	b084      	sub	sp, #16
 80086d6:	4604      	mov	r4, r0
 80086d8:	460e      	mov	r6, r1
 80086da:	4690      	mov	r8, r2
 80086dc:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 80086de:	f7ff fae9 	bl	8007cb4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80086e2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	2b20      	cmp	r3, #32
 80086ea:	d004      	beq.n	80086f6 <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 80086ec:	2602      	movs	r6, #2
}
 80086ee:	4630      	mov	r0, r6
 80086f0:	b004      	add	sp, #16
 80086f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f6:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80086f8:	9000      	str	r0, [sp, #0]
 80086fa:	2319      	movs	r3, #25
 80086fc:	2201      	movs	r2, #1
 80086fe:	4971      	ldr	r1, [pc, #452]	; (80088c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8008700:	4620      	mov	r0, r4
 8008702:	f7ff fe20 	bl	8008346 <I2C_WaitOnFlagUntilTimeout>
 8008706:	2800      	cmp	r0, #0
 8008708:	f040 80d5 	bne.w	80088b6 <HAL_I2C_Master_Transmit+0x1e6>
    __HAL_LOCK(hi2c);
 800870c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008710:	2b01      	cmp	r3, #1
 8008712:	f000 80d2 	beq.w	80088ba <HAL_I2C_Master_Transmit+0x1ea>
 8008716:	2301      	movs	r3, #1
 8008718:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800871c:	6823      	ldr	r3, [r4, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	f012 0f01 	tst.w	r2, #1
 8008724:	d103      	bne.n	800872e <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	f042 0201 	orr.w	r2, r2, #1
 800872c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800872e:	6822      	ldr	r2, [r4, #0]
 8008730:	6813      	ldr	r3, [r2, #0]
 8008732:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008736:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008738:	2321      	movs	r3, #33	; 0x21
 800873a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800873e:	2310      	movs	r3, #16
 8008740:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008744:	2300      	movs	r3, #0
 8008746:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8008748:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800874c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800874e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008750:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008752:	4b5d      	ldr	r3, [pc, #372]	; (80088c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8008754:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008756:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008758:	2b08      	cmp	r3, #8
 800875a:	d00d      	beq.n	8008778 <HAL_I2C_Master_Transmit+0xa8>
 800875c:	2b01      	cmp	r3, #1
 800875e:	d00b      	beq.n	8008778 <HAL_I2C_Master_Transmit+0xa8>
 8008760:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008764:	d008      	beq.n	8008778 <HAL_I2C_Master_Transmit+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008766:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008768:	2b12      	cmp	r3, #18
 800876a:	d10a      	bne.n	8008782 <HAL_I2C_Master_Transmit+0xb2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800876c:	6822      	ldr	r2, [r4, #0]
 800876e:	6813      	ldr	r3, [r2, #0]
 8008770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008774:	6013      	str	r3, [r2, #0]
 8008776:	e004      	b.n	8008782 <HAL_I2C_Master_Transmit+0xb2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008778:	6822      	ldr	r2, [r4, #0]
 800877a:	6813      	ldr	r3, [r2, #0]
 800877c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008780:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008782:	9500      	str	r5, [sp, #0]
 8008784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008786:	2200      	movs	r2, #0
 8008788:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800878c:	4620      	mov	r0, r4
 800878e:	f7ff fdda 	bl	8008346 <I2C_WaitOnFlagUntilTimeout>
 8008792:	b148      	cbz	r0, 80087a8 <HAL_I2C_Master_Transmit+0xd8>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008794:	6823      	ldr	r3, [r4, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f413 7f80 	tst.w	r3, #256	; 0x100
 800879c:	d002      	beq.n	80087a4 <HAL_I2C_Master_Transmit+0xd4>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800879e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087a2:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80087a4:	2601      	movs	r6, #1
 80087a6:	e7a2      	b.n	80086ee <HAL_I2C_Master_Transmit+0x1e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80087a8:	6923      	ldr	r3, [r4, #16]
 80087aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087ae:	d115      	bne.n	80087dc <HAL_I2C_Master_Transmit+0x10c>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 80087b6:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80087b8:	462b      	mov	r3, r5
 80087ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087bc:	4943      	ldr	r1, [pc, #268]	; (80088cc <HAL_I2C_Master_Transmit+0x1fc>)
 80087be:	4620      	mov	r0, r4
 80087c0:	f7ff fdf2 	bl	80083a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80087c4:	4606      	mov	r6, r0
 80087c6:	2800      	cmp	r0, #0
 80087c8:	d179      	bne.n	80088be <HAL_I2C_Master_Transmit+0x1ee>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087ca:	2300      	movs	r3, #0
 80087cc:	9303      	str	r3, [sp, #12]
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	695a      	ldr	r2, [r3, #20]
 80087d2:	9203      	str	r2, [sp, #12]
 80087d4:	699b      	ldr	r3, [r3, #24]
 80087d6:	9303      	str	r3, [sp, #12]
 80087d8:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80087da:	e025      	b.n	8008828 <HAL_I2C_Master_Transmit+0x158>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80087dc:	6822      	ldr	r2, [r4, #0]
 80087de:	11f3      	asrs	r3, r6, #7
 80087e0:	f003 0306 	and.w	r3, r3, #6
 80087e4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80087e8:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80087ea:	462b      	mov	r3, r5
 80087ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087ee:	4938      	ldr	r1, [pc, #224]	; (80088d0 <HAL_I2C_Master_Transmit+0x200>)
 80087f0:	4620      	mov	r0, r4
 80087f2:	f7ff fdd9 	bl	80083a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	d1d4      	bne.n	80087a4 <HAL_I2C_Master_Transmit+0xd4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	b2f6      	uxtb	r6, r6
 80087fe:	611e      	str	r6, [r3, #16]
 8008800:	e7da      	b.n	80087b8 <HAL_I2C_Master_Transmit+0xe8>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008802:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008804:	2b04      	cmp	r3, #4
 8008806:	d001      	beq.n	800880c <HAL_I2C_Master_Transmit+0x13c>
        return HAL_ERROR;
 8008808:	2601      	movs	r6, #1
 800880a:	e770      	b.n	80086ee <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800880c:	6822      	ldr	r2, [r4, #0]
 800880e:	6813      	ldr	r3, [r2, #0]
 8008810:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008814:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8008816:	2601      	movs	r6, #1
 8008818:	e769      	b.n	80086ee <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800881a:	462a      	mov	r2, r5
 800881c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800881e:	4620      	mov	r0, r4
 8008820:	f7ff fe39 	bl	8008496 <I2C_WaitOnBTFFlagUntilTimeout>
 8008824:	2800      	cmp	r0, #0
 8008826:	d12c      	bne.n	8008882 <HAL_I2C_Master_Transmit+0x1b2>
    while (hi2c->XferSize > 0U)
 8008828:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800882a:	2b00      	cmp	r3, #0
 800882c:	d035      	beq.n	800889a <HAL_I2C_Master_Transmit+0x1ca>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800882e:	462a      	mov	r2, r5
 8008830:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008832:	4620      	mov	r0, r4
 8008834:	f7ff fe05 	bl	8008442 <I2C_WaitOnTXEFlagUntilTimeout>
 8008838:	2800      	cmp	r0, #0
 800883a:	d1e2      	bne.n	8008802 <HAL_I2C_Master_Transmit+0x132>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008840:	7812      	ldrb	r2, [r2, #0]
 8008842:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008844:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008846:	1c4b      	adds	r3, r1, #1
 8008848:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800884a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800884c:	3b01      	subs	r3, #1
 800884e:	b29b      	uxth	r3, r3
 8008850:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008852:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008854:	3b01      	subs	r3, #1
 8008856:	b29b      	uxth	r3, r3
 8008858:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800885a:	6822      	ldr	r2, [r4, #0]
 800885c:	6950      	ldr	r0, [r2, #20]
 800885e:	f010 0f04 	tst.w	r0, #4
 8008862:	d0da      	beq.n	800881a <HAL_I2C_Master_Transmit+0x14a>
 8008864:	2b00      	cmp	r3, #0
 8008866:	d0d8      	beq.n	800881a <HAL_I2C_Master_Transmit+0x14a>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008868:	784b      	ldrb	r3, [r1, #1]
 800886a:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 800886c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800886e:	3301      	adds	r3, #1
 8008870:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8008872:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008874:	3b01      	subs	r3, #1
 8008876:	b29b      	uxth	r3, r3
 8008878:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800887a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800887c:	3b01      	subs	r3, #1
 800887e:	8523      	strh	r3, [r4, #40]	; 0x28
 8008880:	e7cb      	b.n	800881a <HAL_I2C_Master_Transmit+0x14a>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008882:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008884:	2b04      	cmp	r3, #4
 8008886:	d001      	beq.n	800888c <HAL_I2C_Master_Transmit+0x1bc>
        return HAL_ERROR;
 8008888:	2601      	movs	r6, #1
 800888a:	e730      	b.n	80086ee <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800888c:	6822      	ldr	r2, [r4, #0]
 800888e:	6813      	ldr	r3, [r2, #0]
 8008890:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008894:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8008896:	2601      	movs	r6, #1
 8008898:	e729      	b.n	80086ee <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800889a:	6822      	ldr	r2, [r4, #0]
 800889c:	6813      	ldr	r3, [r2, #0]
 800889e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80088a2:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80088a4:	2320      	movs	r3, #32
 80088a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80088aa:	2300      	movs	r3, #0
 80088ac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80088b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80088b4:	e71b      	b.n	80086ee <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 80088b6:	2602      	movs	r6, #2
 80088b8:	e719      	b.n	80086ee <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 80088ba:	2602      	movs	r6, #2
 80088bc:	e717      	b.n	80086ee <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 80088be:	2601      	movs	r6, #1
 80088c0:	e715      	b.n	80086ee <HAL_I2C_Master_Transmit+0x1e>
 80088c2:	bf00      	nop
 80088c4:	00100002 	.word	0x00100002
 80088c8:	ffff0000 	.word	0xffff0000
 80088cc:	00010002 	.word	0x00010002
 80088d0:	00010008 	.word	0x00010008

080088d4 <HAL_I2C_Master_Receive>:
{
 80088d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088d8:	b089      	sub	sp, #36	; 0x24
 80088da:	4604      	mov	r4, r0
 80088dc:	460e      	mov	r6, r1
 80088de:	4690      	mov	r8, r2
 80088e0:	461f      	mov	r7, r3
  __IO uint32_t count = 0U;
 80088e2:	2300      	movs	r3, #0
 80088e4:	9307      	str	r3, [sp, #28]
  uint32_t tickstart = HAL_GetTick();
 80088e6:	f7ff f9e5 	bl	8007cb4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80088ea:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	2b20      	cmp	r3, #32
 80088f2:	d004      	beq.n	80088fe <HAL_I2C_Master_Receive+0x2a>
    return HAL_BUSY;
 80088f4:	2602      	movs	r6, #2
}
 80088f6:	4630      	mov	r0, r6
 80088f8:	b009      	add	sp, #36	; 0x24
 80088fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088fe:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008900:	9000      	str	r0, [sp, #0]
 8008902:	2319      	movs	r3, #25
 8008904:	2201      	movs	r2, #1
 8008906:	4999      	ldr	r1, [pc, #612]	; (8008b6c <HAL_I2C_Master_Receive+0x298>)
 8008908:	4620      	mov	r0, r4
 800890a:	f7ff fd1c 	bl	8008346 <I2C_WaitOnFlagUntilTimeout>
 800890e:	2800      	cmp	r0, #0
 8008910:	f040 81e6 	bne.w	8008ce0 <HAL_I2C_Master_Receive+0x40c>
    __HAL_LOCK(hi2c);
 8008914:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008918:	2b01      	cmp	r3, #1
 800891a:	f000 81e3 	beq.w	8008ce4 <HAL_I2C_Master_Receive+0x410>
 800891e:	2301      	movs	r3, #1
 8008920:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008924:	6823      	ldr	r3, [r4, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	f012 0f01 	tst.w	r2, #1
 800892c:	d103      	bne.n	8008936 <HAL_I2C_Master_Receive+0x62>
      __HAL_I2C_ENABLE(hi2c);
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	f042 0201 	orr.w	r2, r2, #1
 8008934:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008936:	6822      	ldr	r2, [r4, #0]
 8008938:	6813      	ldr	r3, [r2, #0]
 800893a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800893e:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008940:	2322      	movs	r3, #34	; 0x22
 8008942:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008946:	2310      	movs	r3, #16
 8008948:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800894c:	2300      	movs	r3, #0
 800894e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8008950:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008954:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008956:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008958:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800895a:	4b85      	ldr	r3, [pc, #532]	; (8008b70 <HAL_I2C_Master_Receive+0x29c>)
 800895c:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800895e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008960:	6821      	ldr	r1, [r4, #0]
 8008962:	680b      	ldr	r3, [r1, #0]
 8008964:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008968:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800896a:	2a08      	cmp	r2, #8
 800896c:	d00d      	beq.n	800898a <HAL_I2C_Master_Receive+0xb6>
 800896e:	2a01      	cmp	r2, #1
 8008970:	d00b      	beq.n	800898a <HAL_I2C_Master_Receive+0xb6>
 8008972:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8008976:	d008      	beq.n	800898a <HAL_I2C_Master_Receive+0xb6>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008978:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800897a:	2b11      	cmp	r3, #17
 800897c:	d10a      	bne.n	8008994 <HAL_I2C_Master_Receive+0xc0>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800897e:	6822      	ldr	r2, [r4, #0]
 8008980:	6813      	ldr	r3, [r2, #0]
 8008982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008986:	6013      	str	r3, [r2, #0]
 8008988:	e004      	b.n	8008994 <HAL_I2C_Master_Receive+0xc0>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800898a:	6822      	ldr	r2, [r4, #0]
 800898c:	6813      	ldr	r3, [r2, #0]
 800898e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008992:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008994:	9500      	str	r5, [sp, #0]
 8008996:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008998:	2200      	movs	r2, #0
 800899a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800899e:	4620      	mov	r0, r4
 80089a0:	f7ff fcd1 	bl	8008346 <I2C_WaitOnFlagUntilTimeout>
 80089a4:	b148      	cbz	r0, 80089ba <HAL_I2C_Master_Receive+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80089a6:	6823      	ldr	r3, [r4, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80089ae:	d002      	beq.n	80089b6 <HAL_I2C_Master_Receive+0xe2>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80089b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089b4:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80089b6:	2601      	movs	r6, #1
 80089b8:	e79d      	b.n	80088f6 <HAL_I2C_Master_Receive+0x22>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80089ba:	6923      	ldr	r3, [r4, #16]
 80089bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089c0:	d15d      	bne.n	8008a7e <HAL_I2C_Master_Receive+0x1aa>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	f046 0601 	orr.w	r6, r6, #1
 80089c8:	b2f6      	uxtb	r6, r6
 80089ca:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80089cc:	462b      	mov	r3, r5
 80089ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80089d0:	4968      	ldr	r1, [pc, #416]	; (8008b74 <HAL_I2C_Master_Receive+0x2a0>)
 80089d2:	4620      	mov	r0, r4
 80089d4:	f7ff fce8 	bl	80083a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80089d8:	4606      	mov	r6, r0
 80089da:	2800      	cmp	r0, #0
 80089dc:	f040 8184 	bne.w	8008ce8 <HAL_I2C_Master_Receive+0x414>
    if (hi2c->XferSize == 0U)
 80089e0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f040 8088 	bne.w	8008af8 <HAL_I2C_Master_Receive+0x224>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089e8:	9302      	str	r3, [sp, #8]
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	695a      	ldr	r2, [r3, #20]
 80089ee:	9202      	str	r2, [sp, #8]
 80089f0:	699a      	ldr	r2, [r3, #24]
 80089f2:	9202      	str	r2, [sp, #8]
 80089f4:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089fc:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80089fe:	4f5e      	ldr	r7, [pc, #376]	; (8008b78 <HAL_I2C_Master_Receive+0x2a4>)
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008a00:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008b80 <HAL_I2C_Master_Receive+0x2ac>
 8008a04:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8008b84 <HAL_I2C_Master_Receive+0x2b0>
    while (hi2c->XferSize > 0U)
 8008a08:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f000 815f 	beq.w	8008cce <HAL_I2C_Master_Receive+0x3fa>
      if (hi2c->XferSize <= 3U)
 8008a10:	2b03      	cmp	r3, #3
 8008a12:	f200 8134 	bhi.w	8008c7e <HAL_I2C_Master_Receive+0x3aa>
        if (hi2c->XferSize == 1U)
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	f000 80b6 	beq.w	8008b88 <HAL_I2C_Master_Receive+0x2b4>
        else if (hi2c->XferSize == 2U)
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	f040 80ca 	bne.w	8008bb6 <HAL_I2C_Master_Receive+0x2e2>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008a22:	9500      	str	r5, [sp, #0]
 8008a24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a26:	2200      	movs	r2, #0
 8008a28:	4639      	mov	r1, r7
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f7ff fc8b 	bl	8008346 <I2C_WaitOnFlagUntilTimeout>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	f040 815d 	bne.w	8008cf0 <HAL_I2C_Master_Receive+0x41c>
 8008a36:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a38:	6822      	ldr	r2, [r4, #0]
 8008a3a:	6813      	ldr	r3, [r2, #0]
 8008a3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a40:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	691a      	ldr	r2, [r3, #16]
 8008a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a48:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008a50:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008a52:	3b01      	subs	r3, #1
 8008a54:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008a56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008a5e:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a60:	6823      	ldr	r3, [r4, #0]
 8008a62:	691a      	ldr	r2, [r3, #16]
 8008a64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a66:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008a68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008a6e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008a70:	3b01      	subs	r3, #1
 8008a72:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008a74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008a76:	3b01      	subs	r3, #1
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	8563      	strh	r3, [r4, #42]	; 0x2a
 8008a7c:	e7c4      	b.n	8008a08 <HAL_I2C_Master_Receive+0x134>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008a7e:	11f7      	asrs	r7, r6, #7
 8008a80:	f007 0706 	and.w	r7, r7, #6
 8008a84:	6823      	ldr	r3, [r4, #0]
 8008a86:	f047 02f0 	orr.w	r2, r7, #240	; 0xf0
 8008a8a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008a8c:	462b      	mov	r3, r5
 8008a8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a90:	493a      	ldr	r1, [pc, #232]	; (8008b7c <HAL_I2C_Master_Receive+0x2a8>)
 8008a92:	4620      	mov	r0, r4
 8008a94:	f7ff fc88 	bl	80083a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	d18c      	bne.n	80089b6 <HAL_I2C_Master_Receive+0xe2>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008a9c:	6823      	ldr	r3, [r4, #0]
 8008a9e:	b2f6      	uxtb	r6, r6
 8008aa0:	611e      	str	r6, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008aa2:	462b      	mov	r3, r5
 8008aa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008aa6:	4933      	ldr	r1, [pc, #204]	; (8008b74 <HAL_I2C_Master_Receive+0x2a0>)
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f7ff fc7d 	bl	80083a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d181      	bne.n	80089b6 <HAL_I2C_Master_Receive+0xe2>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	9206      	str	r2, [sp, #24]
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	6959      	ldr	r1, [r3, #20]
 8008aba:	9106      	str	r1, [sp, #24]
 8008abc:	6999      	ldr	r1, [r3, #24]
 8008abe:	9106      	str	r1, [sp, #24]
 8008ac0:	9906      	ldr	r1, [sp, #24]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ac2:	6819      	ldr	r1, [r3, #0]
 8008ac4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008ac8:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008aca:	9500      	str	r5, [sp, #0]
 8008acc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ace:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f7ff fc37 	bl	8008346 <I2C_WaitOnFlagUntilTimeout>
 8008ad8:	b148      	cbz	r0, 8008aee <HAL_I2C_Master_Receive+0x21a>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ada:	6823      	ldr	r3, [r4, #0]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008ae2:	f43f af68 	beq.w	80089b6 <HAL_I2C_Master_Receive+0xe2>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008aea:	6423      	str	r3, [r4, #64]	; 0x40
 8008aec:	e763      	b.n	80089b6 <HAL_I2C_Master_Receive+0xe2>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008aee:	6823      	ldr	r3, [r4, #0]
 8008af0:	f047 07f1 	orr.w	r7, r7, #241	; 0xf1
 8008af4:	611f      	str	r7, [r3, #16]
 8008af6:	e769      	b.n	80089cc <HAL_I2C_Master_Receive+0xf8>
    else if (hi2c->XferSize == 1U)
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d00f      	beq.n	8008b1c <HAL_I2C_Master_Receive+0x248>
    else if (hi2c->XferSize == 2U)
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d021      	beq.n	8008b44 <HAL_I2C_Master_Receive+0x270>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b00:	6822      	ldr	r2, [r4, #0]
 8008b02:	6813      	ldr	r3, [r2, #0]
 8008b04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b08:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	9305      	str	r3, [sp, #20]
 8008b0e:	6823      	ldr	r3, [r4, #0]
 8008b10:	695a      	ldr	r2, [r3, #20]
 8008b12:	9205      	str	r2, [sp, #20]
 8008b14:	699b      	ldr	r3, [r3, #24]
 8008b16:	9305      	str	r3, [sp, #20]
 8008b18:	9b05      	ldr	r3, [sp, #20]
 8008b1a:	e770      	b.n	80089fe <HAL_I2C_Master_Receive+0x12a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b1c:	6822      	ldr	r2, [r4, #0]
 8008b1e:	6813      	ldr	r3, [r2, #0]
 8008b20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b24:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b26:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b28:	2300      	movs	r3, #0
 8008b2a:	9303      	str	r3, [sp, #12]
 8008b2c:	6823      	ldr	r3, [r4, #0]
 8008b2e:	695a      	ldr	r2, [r3, #20]
 8008b30:	9203      	str	r2, [sp, #12]
 8008b32:	699a      	ldr	r2, [r3, #24]
 8008b34:	9203      	str	r2, [sp, #12]
 8008b36:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008b40:	b662      	cpsie	i
 8008b42:	e75c      	b.n	80089fe <HAL_I2C_Master_Receive+0x12a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b44:	6822      	ldr	r2, [r4, #0]
 8008b46:	6813      	ldr	r3, [r2, #0]
 8008b48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008b4c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b4e:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b50:	2300      	movs	r3, #0
 8008b52:	9304      	str	r3, [sp, #16]
 8008b54:	6823      	ldr	r3, [r4, #0]
 8008b56:	695a      	ldr	r2, [r3, #20]
 8008b58:	9204      	str	r2, [sp, #16]
 8008b5a:	699a      	ldr	r2, [r3, #24]
 8008b5c:	9204      	str	r2, [sp, #16]
 8008b5e:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008b68:	b662      	cpsie	i
 8008b6a:	e748      	b.n	80089fe <HAL_I2C_Master_Receive+0x12a>
 8008b6c:	00100002 	.word	0x00100002
 8008b70:	ffff0000 	.word	0xffff0000
 8008b74:	00010002 	.word	0x00010002
 8008b78:	00010004 	.word	0x00010004
 8008b7c:	00010008 	.word	0x00010008
 8008b80:	2000005c 	.word	0x2000005c
 8008b84:	14f8b589 	.word	0x14f8b589
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b88:	462a      	mov	r2, r5
 8008b8a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	f7ff fcac 	bl	80084ea <I2C_WaitOnRXNEFlagUntilTimeout>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	f040 80aa 	bne.w	8008cec <HAL_I2C_Master_Receive+0x418>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b98:	6823      	ldr	r3, [r4, #0]
 8008b9a:	691a      	ldr	r2, [r3, #16]
 8008b9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b9e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008ba6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008bac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	8563      	strh	r3, [r4, #42]	; 0x2a
 8008bb4:	e728      	b.n	8008a08 <HAL_I2C_Master_Receive+0x134>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008bb6:	9500      	str	r5, [sp, #0]
 8008bb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bba:	2200      	movs	r2, #0
 8008bbc:	4639      	mov	r1, r7
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f7ff fbc1 	bl	8008346 <I2C_WaitOnFlagUntilTimeout>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	f040 8095 	bne.w	8008cf4 <HAL_I2C_Master_Receive+0x420>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bca:	6822      	ldr	r2, [r4, #0]
 8008bcc:	6813      	ldr	r3, [r2, #0]
 8008bce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bd2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008bd4:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	691a      	ldr	r2, [r3, #16]
 8008bda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bdc:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008bde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008be0:	3301      	adds	r3, #1
 8008be2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008be4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008be6:	3b01      	subs	r3, #1
 8008be8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008bea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008bec:	3b01      	subs	r3, #1
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008bf2:	f8d9 3000 	ldr.w	r3, [r9]
 8008bf6:	08db      	lsrs	r3, r3, #3
 8008bf8:	fba8 2303 	umull	r2, r3, r8, r3
 8008bfc:	0a1b      	lsrs	r3, r3, #8
 8008bfe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008c02:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008c06:	9307      	str	r3, [sp, #28]
            count--;
 8008c08:	9b07      	ldr	r3, [sp, #28]
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	9307      	str	r3, [sp, #28]
            if (count == 0U)
 8008c0e:	9b07      	ldr	r3, [sp, #28]
 8008c10:	b333      	cbz	r3, 8008c60 <HAL_I2C_Master_Receive+0x38c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	695a      	ldr	r2, [r3, #20]
 8008c16:	f012 0f04 	tst.w	r2, #4
 8008c1a:	d0f5      	beq.n	8008c08 <HAL_I2C_Master_Receive+0x334>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c22:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c24:	6823      	ldr	r3, [r4, #0]
 8008c26:	691a      	ldr	r2, [r3, #16]
 8008c28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c2a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008c2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c2e:	3301      	adds	r3, #1
 8008c30:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008c32:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008c34:	3b01      	subs	r3, #1
 8008c36:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008c38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008c40:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c42:	6823      	ldr	r3, [r4, #0]
 8008c44:	691a      	ldr	r2, [r3, #16]
 8008c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c48:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008c4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008c50:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008c52:	3b01      	subs	r3, #1
 8008c54:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008c56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	8563      	strh	r3, [r4, #42]	; 0x2a
 8008c5e:	e6d3      	b.n	8008a08 <HAL_I2C_Master_Receive+0x134>
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008c60:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8008c62:	2220      	movs	r2, #32
 8008c64:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c68:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c6c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008c6e:	f042 0220 	orr.w	r2, r2, #32
 8008c72:	6422      	str	r2, [r4, #64]	; 0x40
 8008c74:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8008c76:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8008c7a:	2601      	movs	r6, #1
 8008c7c:	e63b      	b.n	80088f6 <HAL_I2C_Master_Receive+0x22>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c7e:	462a      	mov	r2, r5
 8008c80:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008c82:	4620      	mov	r0, r4
 8008c84:	f7ff fc31 	bl	80084ea <I2C_WaitOnRXNEFlagUntilTimeout>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	d135      	bne.n	8008cf8 <HAL_I2C_Master_Receive+0x424>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c8c:	6823      	ldr	r3, [r4, #0]
 8008c8e:	691a      	ldr	r2, [r3, #16]
 8008c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c92:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008c94:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008c96:	1c53      	adds	r3, r2, #1
 8008c98:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8008c9a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8008ca0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008ca8:	6823      	ldr	r3, [r4, #0]
 8008caa:	6959      	ldr	r1, [r3, #20]
 8008cac:	f011 0f04 	tst.w	r1, #4
 8008cb0:	f43f aeaa 	beq.w	8008a08 <HAL_I2C_Master_Receive+0x134>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8008cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cba:	3301      	adds	r3, #1
 8008cbc:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008cbe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008cc4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	8563      	strh	r3, [r4, #42]	; 0x2a
 8008ccc:	e69c      	b.n	8008a08 <HAL_I2C_Master_Receive+0x134>
    hi2c->State = HAL_I2C_STATE_READY;
 8008cce:	2320      	movs	r3, #32
 8008cd0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8008cda:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8008cde:	e60a      	b.n	80088f6 <HAL_I2C_Master_Receive+0x22>
      return HAL_BUSY;
 8008ce0:	2602      	movs	r6, #2
 8008ce2:	e608      	b.n	80088f6 <HAL_I2C_Master_Receive+0x22>
    __HAL_LOCK(hi2c);
 8008ce4:	2602      	movs	r6, #2
 8008ce6:	e606      	b.n	80088f6 <HAL_I2C_Master_Receive+0x22>
      return HAL_ERROR;
 8008ce8:	2601      	movs	r6, #1
 8008cea:	e604      	b.n	80088f6 <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 8008cec:	2601      	movs	r6, #1
 8008cee:	e602      	b.n	80088f6 <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 8008cf0:	2601      	movs	r6, #1
 8008cf2:	e600      	b.n	80088f6 <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 8008cf4:	2601      	movs	r6, #1
 8008cf6:	e5fe      	b.n	80088f6 <HAL_I2C_Master_Receive+0x22>
          return HAL_ERROR;
 8008cf8:	2601      	movs	r6, #1
 8008cfa:	e5fc      	b.n	80088f6 <HAL_I2C_Master_Receive+0x22>

08008cfc <HAL_I2C_MasterTxCpltCallback>:
}
 8008cfc:	4770      	bx	lr

08008cfe <HAL_I2C_MasterRxCpltCallback>:
}
 8008cfe:	4770      	bx	lr

08008d00 <HAL_I2C_SlaveTxCpltCallback>:
}
 8008d00:	4770      	bx	lr

08008d02 <HAL_I2C_SlaveRxCpltCallback>:
}
 8008d02:	4770      	bx	lr

08008d04 <HAL_I2C_AddrCallback>:
}
 8008d04:	4770      	bx	lr

08008d06 <HAL_I2C_ListenCpltCallback>:
}
 8008d06:	4770      	bx	lr

08008d08 <HAL_I2C_MemTxCpltCallback>:
}
 8008d08:	4770      	bx	lr

08008d0a <I2C_MemoryTransmit_TXE_BTF>:
{
 8008d0a:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d0c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 8008d10:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008d12:	b99a      	cbnz	r2, 8008d3c <I2C_MemoryTransmit_TXE_BTF+0x32>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008d14:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d008      	beq.n	8008d2c <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008d1a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8008d1c:	6802      	ldr	r2, [r0, #0]
 8008d1e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8008d22:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 8008d24:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008d26:	3301      	adds	r3, #1
 8008d28:	6503      	str	r3, [r0, #80]	; 0x50
}
 8008d2a:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008d2c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8008d2e:	6802      	ldr	r2, [r0, #0]
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8008d34:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008d36:	3302      	adds	r3, #2
 8008d38:	6503      	str	r3, [r0, #80]	; 0x50
 8008d3a:	e7f6      	b.n	8008d2a <I2C_MemoryTransmit_TXE_BTF+0x20>
 8008d3c:	b2db      	uxtb	r3, r3
  else if (hi2c->EventCount == 1U)
 8008d3e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008d40:	2a01      	cmp	r2, #1
 8008d42:	d00b      	beq.n	8008d5c <I2C_MemoryTransmit_TXE_BTF+0x52>
  else if (hi2c->EventCount == 2U)
 8008d44:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008d46:	2a02      	cmp	r2, #2
 8008d48:	d1ef      	bne.n	8008d2a <I2C_MemoryTransmit_TXE_BTF+0x20>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008d4a:	2b22      	cmp	r3, #34	; 0x22
 8008d4c:	d00e      	beq.n	8008d6c <I2C_MemoryTransmit_TXE_BTF+0x62>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008d4e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8008d50:	b292      	uxth	r2, r2
 8008d52:	b1ea      	cbz	r2, 8008d90 <I2C_MemoryTransmit_TXE_BTF+0x86>
 8008d54:	2b21      	cmp	r3, #33	; 0x21
 8008d56:	d00f      	beq.n	8008d78 <I2C_MemoryTransmit_TXE_BTF+0x6e>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008d58:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8008d5a:	e7e6      	b.n	8008d2a <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008d5c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8008d5e:	6802      	ldr	r2, [r0, #0]
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 8008d64:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008d66:	3301      	adds	r3, #1
 8008d68:	6503      	str	r3, [r0, #80]	; 0x50
 8008d6a:	e7de      	b.n	8008d2a <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008d6c:	6802      	ldr	r2, [r0, #0]
 8008d6e:	6813      	ldr	r3, [r2, #0]
 8008d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d74:	6013      	str	r3, [r2, #0]
 8008d76:	e7d8      	b.n	8008d2a <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d78:	6803      	ldr	r3, [r0, #0]
 8008d7a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008d7c:	7812      	ldrb	r2, [r2, #0]
 8008d7e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008d80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008d82:	3301      	adds	r3, #1
 8008d84:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8008d86:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	8543      	strh	r3, [r0, #42]	; 0x2a
 8008d8e:	e7cc      	b.n	8008d2a <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008d90:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8008d92:	b292      	uxth	r2, r2
 8008d94:	2a00      	cmp	r2, #0
 8008d96:	d1c8      	bne.n	8008d2a <I2C_MemoryTransmit_TXE_BTF+0x20>
 8008d98:	2b21      	cmp	r3, #33	; 0x21
 8008d9a:	d1c6      	bne.n	8008d2a <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008d9c:	6802      	ldr	r2, [r0, #0]
 8008d9e:	6853      	ldr	r3, [r2, #4]
 8008da0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008da4:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008da6:	6802      	ldr	r2, [r0, #0]
 8008da8:	6813      	ldr	r3, [r2, #0]
 8008daa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008dae:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008db0:	2300      	movs	r3, #0
 8008db2:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008db4:	2220      	movs	r2, #32
 8008db6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dba:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008dbe:	f7ff ffa3 	bl	8008d08 <HAL_I2C_MemTxCpltCallback>
}
 8008dc2:	e7b2      	b.n	8008d2a <I2C_MemoryTransmit_TXE_BTF+0x20>

08008dc4 <HAL_I2C_MemRxCpltCallback>:
}
 8008dc4:	4770      	bx	lr

08008dc6 <HAL_I2C_ErrorCallback>:
}
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_I2C_AbortCpltCallback>:
}
 8008dc8:	4770      	bx	lr
	...

08008dcc <I2C_DMAAbort>:
{
 8008dcc:	b500      	push	{lr}
 8008dce:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	9301      	str	r3, [sp, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008dd4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008dd6:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8008dda:	b2d2      	uxtb	r2, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008ddc:	4b32      	ldr	r3, [pc, #200]	; (8008ea8 <I2C_DMAAbort+0xdc>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	08db      	lsrs	r3, r3, #3
 8008de2:	4932      	ldr	r1, [pc, #200]	; (8008eac <I2C_DMAAbort+0xe0>)
 8008de4:	fba1 1303 	umull	r1, r3, r1, r3
 8008de8:	0a1b      	lsrs	r3, r3, #8
 8008dea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008dee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008df2:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8008df4:	9b01      	ldr	r3, [sp, #4]
 8008df6:	b143      	cbz	r3, 8008e0a <I2C_DMAAbort+0x3e>
    count--;
 8008df8:	9b01      	ldr	r3, [sp, #4]
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008dfe:	6803      	ldr	r3, [r0, #0]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008e06:	d1f5      	bne.n	8008df4 <I2C_DMAAbort+0x28>
 8008e08:	e003      	b.n	8008e12 <I2C_DMAAbort+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e0a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008e0c:	f043 0320 	orr.w	r3, r3, #32
 8008e10:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 8008e12:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008e14:	b10b      	cbz	r3, 8008e1a <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008e16:	2100      	movs	r1, #0
 8008e18:	6299      	str	r1, [r3, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8008e1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008e1c:	b10b      	cbz	r3, 8008e22 <I2C_DMAAbort+0x56>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008e1e:	2100      	movs	r1, #0
 8008e20:	6299      	str	r1, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e22:	6801      	ldr	r1, [r0, #0]
 8008e24:	680b      	ldr	r3, [r1, #0]
 8008e26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e2a:	600b      	str	r3, [r1, #0]
  hi2c->XferCount = 0U;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8008e30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008e32:	b10b      	cbz	r3, 8008e38 <I2C_DMAAbort+0x6c>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008e34:	2100      	movs	r1, #0
 8008e36:	6359      	str	r1, [r3, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 8008e38:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008e3a:	b10b      	cbz	r3, 8008e40 <I2C_DMAAbort+0x74>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	6359      	str	r1, [r3, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 8008e40:	6801      	ldr	r1, [r0, #0]
 8008e42:	680b      	ldr	r3, [r1, #0]
 8008e44:	f023 0301 	bic.w	r3, r3, #1
 8008e48:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008e4a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2b60      	cmp	r3, #96	; 0x60
 8008e52:	d00e      	beq.n	8008e72 <I2C_DMAAbort+0xa6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e54:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8008e58:	2a28      	cmp	r2, #40	; 0x28
 8008e5a:	d014      	beq.n	8008e86 <I2C_DMAAbort+0xba>
      hi2c->State = HAL_I2C_STATE_READY;
 8008e5c:	2320      	movs	r3, #32
 8008e5e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e62:	2300      	movs	r3, #0
 8008e64:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008e68:	f7ff ffad 	bl	8008dc6 <HAL_I2C_ErrorCallback>
}
 8008e6c:	b003      	add	sp, #12
 8008e6e:	f85d fb04 	ldr.w	pc, [sp], #4
    hi2c->State         = HAL_I2C_STATE_READY;
 8008e72:	2320      	movs	r3, #32
 8008e74:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008e7e:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8008e80:	f7ff ffa2 	bl	8008dc8 <HAL_I2C_AbortCpltCallback>
 8008e84:	e7f2      	b.n	8008e6c <I2C_DMAAbort+0xa0>
      __HAL_I2C_ENABLE(hi2c);
 8008e86:	6802      	ldr	r2, [r0, #0]
 8008e88:	6813      	ldr	r3, [r2, #0]
 8008e8a:	f043 0301 	orr.w	r3, r3, #1
 8008e8e:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e90:	6802      	ldr	r2, [r0, #0]
 8008e92:	6813      	ldr	r3, [r2, #0]
 8008e94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008e98:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008e9e:	2328      	movs	r3, #40	; 0x28
 8008ea0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8008ea4:	e7e0      	b.n	8008e68 <I2C_DMAAbort+0x9c>
 8008ea6:	bf00      	nop
 8008ea8:	2000005c 	.word	0x2000005c
 8008eac:	14f8b589 	.word	0x14f8b589

08008eb0 <I2C_ITError>:
{
 8008eb0:	b510      	push	{r4, lr}
 8008eb2:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008eb4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8008eb8:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008eba:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8008ebe:	b2db      	uxtb	r3, r3
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008ec0:	2b10      	cmp	r3, #16
 8008ec2:	d035      	beq.n	8008f30 <I2C_ITError+0x80>
 8008ec4:	2b40      	cmp	r3, #64	; 0x40
 8008ec6:	d033      	beq.n	8008f30 <I2C_ITError+0x80>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008ec8:	f002 0328 	and.w	r3, r2, #40	; 0x28
 8008ecc:	2b28      	cmp	r3, #40	; 0x28
 8008ece:	d03c      	beq.n	8008f4a <I2C_ITError+0x9a>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8008ed8:	d107      	bne.n	8008eea <I2C_ITError+0x3a>
 8008eda:	2a60      	cmp	r2, #96	; 0x60
 8008edc:	d005      	beq.n	8008eea <I2C_ITError+0x3a>
      hi2c->State = HAL_I2C_STATE_READY;
 8008ede:	2320      	movs	r3, #32
 8008ee0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8008eea:	2300      	movs	r3, #0
 8008eec:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008eee:	6823      	ldr	r3, [r4, #0]
 8008ef0:	685a      	ldr	r2, [r3, #4]
 8008ef2:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008ef6:	d04c      	beq.n	8008f92 <I2C_ITError+0xe2>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008ef8:	685a      	ldr	r2, [r3, #4]
 8008efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008efe:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008f00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f02:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8008f06:	2a01      	cmp	r2, #1
 8008f08:	d025      	beq.n	8008f56 <I2C_ITError+0xa6>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008f0a:	4a47      	ldr	r2, [pc, #284]	; (8009028 <I2C_ITError+0x178>)
 8008f0c:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008f0e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008f10:	f7fe ff52 	bl	8007db8 <HAL_DMA_Abort_IT>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d04e      	beq.n	8008fb6 <I2C_ITError+0x106>
        __HAL_I2C_DISABLE(hi2c);
 8008f18:	6822      	ldr	r2, [r4, #0]
 8008f1a:	6813      	ldr	r3, [r2, #0]
 8008f1c:	f023 0301 	bic.w	r3, r3, #1
 8008f20:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8008f22:	2320      	movs	r3, #32
 8008f24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008f28:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008f2a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008f2c:	4798      	blx	r3
 8008f2e:	e042      	b.n	8008fb6 <I2C_ITError+0x106>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008f30:	2a22      	cmp	r2, #34	; 0x22
 8008f32:	d1c9      	bne.n	8008ec8 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008f34:	6822      	ldr	r2, [r4, #0]
 8008f36:	6813      	ldr	r3, [r2, #0]
 8008f38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f3c:	6013      	str	r3, [r2, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008f3e:	6823      	ldr	r3, [r4, #0]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8008f46:	d0ca      	beq.n	8008ede <I2C_ITError+0x2e>
 8008f48:	e7cf      	b.n	8008eea <I2C_ITError+0x3a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008f4e:	2328      	movs	r3, #40	; 0x28
 8008f50:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8008f54:	e7cb      	b.n	8008eee <I2C_ITError+0x3e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008f56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f58:	4a33      	ldr	r2, [pc, #204]	; (8009028 <I2C_ITError+0x178>)
 8008f5a:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008f5c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008f5e:	f7fe ff2b 	bl	8007db8 <HAL_DMA_Abort_IT>
 8008f62:	b340      	cbz	r0, 8008fb6 <I2C_ITError+0x106>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008f64:	6823      	ldr	r3, [r4, #0]
 8008f66:	695a      	ldr	r2, [r3, #20]
 8008f68:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008f6c:	d005      	beq.n	8008f7a <I2C_ITError+0xca>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f6e:	691a      	ldr	r2, [r3, #16]
 8008f70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f72:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f76:	3301      	adds	r3, #1
 8008f78:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8008f7a:	6822      	ldr	r2, [r4, #0]
 8008f7c:	6813      	ldr	r3, [r2, #0]
 8008f7e:	f023 0301 	bic.w	r3, r3, #1
 8008f82:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8008f84:	2320      	movs	r3, #32
 8008f86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008f8a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008f8c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008f8e:	4798      	blx	r3
 8008f90:	e011      	b.n	8008fb6 <I2C_ITError+0x106>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008f92:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8008f96:	b2d2      	uxtb	r2, r2
 8008f98:	2a60      	cmp	r2, #96	; 0x60
 8008f9a:	d01f      	beq.n	8008fdc <I2C_ITError+0x12c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008f9c:	695a      	ldr	r2, [r3, #20]
 8008f9e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008fa2:	d005      	beq.n	8008fb0 <I2C_ITError+0x100>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fa4:	691a      	ldr	r2, [r3, #16]
 8008fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fa8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8008faa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fac:	3301      	adds	r3, #1
 8008fae:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f7ff ff08 	bl	8008dc6 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 8008fb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008fb8:	f013 0f0f 	tst.w	r3, #15
 8008fbc:	d004      	beq.n	8008fc8 <I2C_ITError+0x118>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008fbe:	6822      	ldr	r2, [r4, #0]
 8008fc0:	6853      	ldr	r3, [r2, #4]
 8008fc2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008fc6:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8008fc8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008fcc:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008fce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008fd0:	f012 0f04 	tst.w	r2, #4
 8008fd4:	d001      	beq.n	8008fda <I2C_ITError+0x12a>
 8008fd6:	2b28      	cmp	r3, #40	; 0x28
 8008fd8:	d018      	beq.n	800900c <I2C_ITError+0x15c>
}
 8008fda:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8008fdc:	2220      	movs	r2, #32
 8008fde:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008fe6:	695a      	ldr	r2, [r3, #20]
 8008fe8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008fec:	d005      	beq.n	8008ffa <I2C_ITError+0x14a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fee:	691a      	ldr	r2, [r3, #16]
 8008ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ff2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8008ff4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8008ffa:	6822      	ldr	r2, [r4, #0]
 8008ffc:	6813      	ldr	r3, [r2, #0]
 8008ffe:	f023 0301 	bic.w	r3, r3, #1
 8009002:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8009004:	4620      	mov	r0, r4
 8009006:	f7ff fedf 	bl	8008dc8 <HAL_I2C_AbortCpltCallback>
 800900a:	e7d4      	b.n	8008fb6 <I2C_ITError+0x106>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800900c:	4b07      	ldr	r3, [pc, #28]	; (800902c <I2C_ITError+0x17c>)
 800900e:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009010:	2300      	movs	r3, #0
 8009012:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009014:	2220      	movs	r2, #32
 8009016:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800901a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 800901e:	4620      	mov	r0, r4
 8009020:	f7ff fe71 	bl	8008d06 <HAL_I2C_ListenCpltCallback>
}
 8009024:	e7d9      	b.n	8008fda <I2C_ITError+0x12a>
 8009026:	bf00      	nop
 8009028:	08008dcd 	.word	0x08008dcd
 800902c:	ffff0000 	.word	0xffff0000

08009030 <HAL_I2C_EV_IRQHandler>:
{
 8009030:	b570      	push	{r4, r5, r6, lr}
 8009032:	b08e      	sub	sp, #56	; 0x38
 8009034:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8009036:	6802      	ldr	r2, [r0, #0]
 8009038:	6850      	ldr	r0, [r2, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800903a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800903c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8009040:	b2db      	uxtb	r3, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009042:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8009046:	2b10      	cmp	r3, #16
 8009048:	d022      	beq.n	8009090 <HAL_I2C_EV_IRQHandler+0x60>
 800904a:	b2c9      	uxtb	r1, r1
 800904c:	2b40      	cmp	r3, #64	; 0x40
 800904e:	d01f      	beq.n	8009090 <HAL_I2C_EV_IRQHandler+0x60>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009050:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009052:	2b00      	cmp	r3, #0
 8009054:	f000 83a7 	beq.w	80097a6 <HAL_I2C_EV_IRQHandler+0x776>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009058:	6953      	ldr	r3, [r2, #20]
  uint32_t sr2itflags               = 0U;
 800905a:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800905c:	f013 0f02 	tst.w	r3, #2
 8009060:	f000 83b8 	beq.w	80097d4 <HAL_I2C_EV_IRQHandler+0x7a4>
 8009064:	f410 7f00 	tst.w	r0, #512	; 0x200
 8009068:	f000 83ba 	beq.w	80097e0 <HAL_I2C_EV_IRQHandler+0x7b0>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800906c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800906e:	b103      	cbz	r3, 8009072 <HAL_I2C_EV_IRQHandler+0x42>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009070:	6995      	ldr	r5, [r2, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009072:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8009076:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800907a:	2b28      	cmp	r3, #40	; 0x28
 800907c:	f000 8396 	beq.w	80097ac <HAL_I2C_EV_IRQHandler+0x77c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009080:	f06f 0302 	mvn.w	r3, #2
 8009084:	6153      	str	r3, [r2, #20]
    __HAL_UNLOCK(hi2c);
 8009086:	2300      	movs	r3, #0
 8009088:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800908c:	b00e      	add	sp, #56	; 0x38
 800908e:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009090:	6996      	ldr	r6, [r2, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009092:	6951      	ldr	r1, [r2, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8009094:	f011 0f01 	tst.w	r1, #1
 8009098:	d11d      	bne.n	80090d6 <HAL_I2C_EV_IRQHandler+0xa6>
 800909a:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 800909e:	d0f5      	beq.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
 80090a0:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 80090a4:	d0f2      	beq.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80090a6:	f011 0f08 	tst.w	r1, #8
 80090aa:	d01b      	beq.n	80090e4 <HAL_I2C_EV_IRQHandler+0xb4>
 80090ac:	f410 7f00 	tst.w	r0, #512	; 0x200
 80090b0:	f000 8184 	beq.w	80093bc <HAL_I2C_EV_IRQHandler+0x38c>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80090b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	6113      	str	r3, [r2, #16]
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80090ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f000 8084 	beq.w	80091ca <HAL_I2C_EV_IRQHandler+0x19a>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80090c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f000 8085 	beq.w	80091d4 <HAL_I2C_EV_IRQHandler+0x1a4>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80090ca:	6822      	ldr	r2, [r4, #0]
 80090cc:	6853      	ldr	r3, [r2, #4]
 80090ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80090d2:	6053      	str	r3, [r2, #4]
 80090d4:	e7da      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80090d6:	f410 7f00 	tst.w	r0, #512	; 0x200
 80090da:	d11d      	bne.n	8009118 <HAL_I2C_EV_IRQHandler+0xe8>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80090dc:	f011 0f08 	tst.w	r1, #8
 80090e0:	f040 816c 	bne.w	80093bc <HAL_I2C_EV_IRQHandler+0x38c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80090e4:	f011 0f02 	tst.w	r1, #2
 80090e8:	f000 8168 	beq.w	80093bc <HAL_I2C_EV_IRQHandler+0x38c>
 80090ec:	f410 7f00 	tst.w	r0, #512	; 0x200
 80090f0:	f000 8164 	beq.w	80093bc <HAL_I2C_EV_IRQHandler+0x38c>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80090f4:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80090f8:	b2d9      	uxtb	r1, r3
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80090fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 80090fc:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80090fe:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b22      	cmp	r3, #34	; 0x22
 8009106:	d06b      	beq.n	80091e0 <HAL_I2C_EV_IRQHandler+0x1b0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009108:	2300      	movs	r3, #0
 800910a:	930b      	str	r3, [sp, #44]	; 0x2c
 800910c:	6953      	ldr	r3, [r2, #20]
 800910e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009110:	6993      	ldr	r3, [r2, #24]
 8009112:	930b      	str	r3, [sp, #44]	; 0x2c
 8009114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009116:	e7b9      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009118:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800911a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800911e:	d01d      	beq.n	800915c <HAL_I2C_EV_IRQHandler+0x12c>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009120:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009122:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009126:	bf04      	itt	eq
 8009128:	2308      	moveq	r3, #8
 800912a:	62e3      	streq	r3, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800912c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b40      	cmp	r3, #64	; 0x40
 8009134:	d015      	beq.n	8009162 <HAL_I2C_EV_IRQHandler+0x132>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009136:	6923      	ldr	r3, [r4, #16]
 8009138:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800913c:	d01e      	beq.n	800917c <HAL_I2C_EV_IRQHandler+0x14c>
      if (hi2c->EventCount == 0U)
 800913e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009140:	2b00      	cmp	r3, #0
 8009142:	d039      	beq.n	80091b8 <HAL_I2C_EV_IRQHandler+0x188>
      else if (hi2c->EventCount == 1U)
 8009144:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009146:	2b01      	cmp	r3, #1
 8009148:	d1a0      	bne.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800914a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800914c:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8009150:	f003 0306 	and.w	r3, r3, #6
 8009154:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 8009158:	6113      	str	r3, [r2, #16]
 800915a:	e797      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800915c:	2301      	movs	r3, #1
 800915e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009160:	e7e4      	b.n	800912c <HAL_I2C_EV_IRQHandler+0xfc>
    if (hi2c->EventCount == 0U)
 8009162:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009164:	b923      	cbnz	r3, 8009170 <HAL_I2C_EV_IRQHandler+0x140>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009166:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009168:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800916c:	6113      	str	r3, [r2, #16]
 800916e:	e78d      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009170:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009172:	f043 0301 	orr.w	r3, r3, #1
 8009176:	b2db      	uxtb	r3, r3
 8009178:	6113      	str	r3, [r2, #16]
 800917a:	e787      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800917c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b21      	cmp	r3, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009184:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009186:	bf0e      	itee	eq
 8009188:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800918c:	f043 0301 	orrne.w	r3, r3, #1
 8009190:	b2db      	uxtbne	r3, r3
 8009192:	6113      	str	r3, [r2, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009194:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009196:	b13b      	cbz	r3, 80091a8 <HAL_I2C_EV_IRQHandler+0x178>
 8009198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919a:	b12b      	cbz	r3, 80091a8 <HAL_I2C_EV_IRQHandler+0x178>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800919c:	6822      	ldr	r2, [r4, #0]
 800919e:	6853      	ldr	r3, [r2, #4]
 80091a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80091a4:	6053      	str	r3, [r2, #4]
 80091a6:	e771      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80091a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f43f af6e 	beq.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
 80091b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1f2      	bne.n	800919c <HAL_I2C_EV_IRQHandler+0x16c>
 80091b6:	e769      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80091b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80091ba:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 80091be:	f003 0306 	and.w	r3, r3, #6
 80091c2:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80091c6:	6113      	str	r3, [r2, #16]
 80091c8:	e760      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80091ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80091cc:	2a00      	cmp	r2, #0
 80091ce:	f47f af78 	bne.w	80090c2 <HAL_I2C_EV_IRQHandler+0x92>
 80091d2:	e75b      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80091d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80091d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f47f af76 	bne.w	80090ca <HAL_I2C_EV_IRQHandler+0x9a>
 80091de:	e755      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80091e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80091e2:	b90b      	cbnz	r3, 80091e8 <HAL_I2C_EV_IRQHandler+0x1b8>
 80091e4:	2940      	cmp	r1, #64	; 0x40
 80091e6:	d015      	beq.n	8009214 <HAL_I2C_EV_IRQHandler+0x1e4>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80091e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80091ea:	b91b      	cbnz	r3, 80091f4 <HAL_I2C_EV_IRQHandler+0x1c4>
 80091ec:	6923      	ldr	r3, [r4, #16]
 80091ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80091f2:	d016      	beq.n	8009222 <HAL_I2C_EV_IRQHandler+0x1f2>
      if (hi2c->XferCount == 0U)
 80091f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	bb13      	cbnz	r3, 8009240 <HAL_I2C_EV_IRQHandler+0x210>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091fa:	9303      	str	r3, [sp, #12]
 80091fc:	6953      	ldr	r3, [r2, #20]
 80091fe:	9303      	str	r3, [sp, #12]
 8009200:	6993      	ldr	r3, [r2, #24]
 8009202:	9303      	str	r3, [sp, #12]
 8009204:	9b03      	ldr	r3, [sp, #12]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009206:	6813      	ldr	r3, [r2, #0]
 8009208:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800920c:	6013      	str	r3, [r2, #0]
      hi2c->EventCount = 0U;
 800920e:	2300      	movs	r3, #0
 8009210:	6523      	str	r3, [r4, #80]	; 0x50
 8009212:	e73b      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009214:	9301      	str	r3, [sp, #4]
 8009216:	6953      	ldr	r3, [r2, #20]
 8009218:	9301      	str	r3, [sp, #4]
 800921a:	6993      	ldr	r3, [r2, #24]
 800921c:	9301      	str	r3, [sp, #4]
 800921e:	9b01      	ldr	r3, [sp, #4]
 8009220:	e734      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009222:	2300      	movs	r3, #0
 8009224:	9302      	str	r3, [sp, #8]
 8009226:	6953      	ldr	r3, [r2, #20]
 8009228:	9302      	str	r3, [sp, #8]
 800922a:	6993      	ldr	r3, [r2, #24]
 800922c:	9302      	str	r3, [sp, #8]
 800922e:	9b02      	ldr	r3, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009230:	6813      	ldr	r3, [r2, #0]
 8009232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009236:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 8009238:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800923a:	3301      	adds	r3, #1
 800923c:	6523      	str	r3, [r4, #80]	; 0x50
 800923e:	e725      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
      else if (hi2c->XferCount == 1U)
 8009240:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009242:	b29b      	uxth	r3, r3
 8009244:	2b01      	cmp	r3, #1
 8009246:	d025      	beq.n	8009294 <HAL_I2C_EV_IRQHandler+0x264>
      else if (hi2c->XferCount == 2U)
 8009248:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800924a:	b29b      	uxth	r3, r3
 800924c:	2b02      	cmp	r3, #2
 800924e:	d079      	beq.n	8009344 <HAL_I2C_EV_IRQHandler+0x314>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009250:	6813      	ldr	r3, [r2, #0]
 8009252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009256:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009258:	6823      	ldr	r3, [r4, #0]
 800925a:	685a      	ldr	r2, [r3, #4]
 800925c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8009260:	d00f      	beq.n	8009282 <HAL_I2C_EV_IRQHandler+0x252>
 8009262:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8009266:	d008      	beq.n	800927a <HAL_I2C_EV_IRQHandler+0x24a>
 8009268:	3801      	subs	r0, #1
 800926a:	281f      	cmp	r0, #31
 800926c:	d809      	bhi.n	8009282 <HAL_I2C_EV_IRQHandler+0x252>
 800926e:	4a98      	ldr	r2, [pc, #608]	; (80094d0 <HAL_I2C_EV_IRQHandler+0x4a0>)
 8009270:	fa22 f000 	lsr.w	r0, r2, r0
 8009274:	f010 0f01 	tst.w	r0, #1
 8009278:	d003      	beq.n	8009282 <HAL_I2C_EV_IRQHandler+0x252>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009280:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009282:	2300      	movs	r3, #0
 8009284:	930a      	str	r3, [sp, #40]	; 0x28
 8009286:	6823      	ldr	r3, [r4, #0]
 8009288:	695a      	ldr	r2, [r3, #20]
 800928a:	920a      	str	r2, [sp, #40]	; 0x28
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	930a      	str	r3, [sp, #40]	; 0x28
 8009290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009292:	e7bc      	b.n	800920e <HAL_I2C_EV_IRQHandler+0x1de>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009294:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8009298:	d01a      	beq.n	80092d0 <HAL_I2C_EV_IRQHandler+0x2a0>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800929a:	2808      	cmp	r0, #8
 800929c:	d041      	beq.n	8009322 <HAL_I2C_EV_IRQHandler+0x2f2>
 800929e:	2820      	cmp	r0, #32
 80092a0:	d03f      	beq.n	8009322 <HAL_I2C_EV_IRQHandler+0x2f2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80092a2:	2d12      	cmp	r5, #18
 80092a4:	d036      	beq.n	8009314 <HAL_I2C_EV_IRQHandler+0x2e4>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80092a6:	2810      	cmp	r0, #16
 80092a8:	d836      	bhi.n	8009318 <HAL_I2C_EV_IRQHandler+0x2e8>
 80092aa:	4b8a      	ldr	r3, [pc, #552]	; (80094d4 <HAL_I2C_EV_IRQHandler+0x4a4>)
 80092ac:	fa23 f000 	lsr.w	r0, r3, r0
 80092b0:	f010 0f01 	tst.w	r0, #1
 80092b4:	d030      	beq.n	8009318 <HAL_I2C_EV_IRQHandler+0x2e8>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092b6:	6813      	ldr	r3, [r2, #0]
 80092b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80092bc:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092be:	2300      	movs	r3, #0
 80092c0:	9306      	str	r3, [sp, #24]
 80092c2:	6823      	ldr	r3, [r4, #0]
 80092c4:	695a      	ldr	r2, [r3, #20]
 80092c6:	9206      	str	r2, [sp, #24]
 80092c8:	699b      	ldr	r3, [r3, #24]
 80092ca:	9306      	str	r3, [sp, #24]
 80092cc:	9b06      	ldr	r3, [sp, #24]
 80092ce:	e79e      	b.n	800920e <HAL_I2C_EV_IRQHandler+0x1de>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092d0:	6813      	ldr	r3, [r2, #0]
 80092d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092d6:	6013      	str	r3, [r2, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80092d8:	6823      	ldr	r3, [r4, #0]
 80092da:	685a      	ldr	r2, [r3, #4]
 80092dc:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80092e0:	d00c      	beq.n	80092fc <HAL_I2C_EV_IRQHandler+0x2cc>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092e8:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092ea:	2300      	movs	r3, #0
 80092ec:	9304      	str	r3, [sp, #16]
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	695a      	ldr	r2, [r3, #20]
 80092f2:	9204      	str	r2, [sp, #16]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	9304      	str	r3, [sp, #16]
 80092f8:	9b04      	ldr	r3, [sp, #16]
 80092fa:	e788      	b.n	800920e <HAL_I2C_EV_IRQHandler+0x1de>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092fc:	2200      	movs	r2, #0
 80092fe:	9205      	str	r2, [sp, #20]
 8009300:	695a      	ldr	r2, [r3, #20]
 8009302:	9205      	str	r2, [sp, #20]
 8009304:	699a      	ldr	r2, [r3, #24]
 8009306:	9205      	str	r2, [sp, #20]
 8009308:	9a05      	ldr	r2, [sp, #20]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009310:	601a      	str	r2, [r3, #0]
 8009312:	e77c      	b.n	800920e <HAL_I2C_EV_IRQHandler+0x1de>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8009314:	2801      	cmp	r0, #1
 8009316:	d104      	bne.n	8009322 <HAL_I2C_EV_IRQHandler+0x2f2>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009318:	6813      	ldr	r3, [r2, #0]
 800931a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800931e:	6013      	str	r3, [r2, #0]
 8009320:	e7cd      	b.n	80092be <HAL_I2C_EV_IRQHandler+0x28e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009322:	6813      	ldr	r3, [r2, #0]
 8009324:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009328:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800932a:	2300      	movs	r3, #0
 800932c:	9307      	str	r3, [sp, #28]
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	695a      	ldr	r2, [r3, #20]
 8009332:	9207      	str	r2, [sp, #28]
 8009334:	699a      	ldr	r2, [r3, #24]
 8009336:	9207      	str	r2, [sp, #28]
 8009338:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009340:	601a      	str	r2, [r3, #0]
 8009342:	e764      	b.n	800920e <HAL_I2C_EV_IRQHandler+0x1de>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009344:	2810      	cmp	r0, #16
 8009346:	d828      	bhi.n	800939a <HAL_I2C_EV_IRQHandler+0x36a>
 8009348:	4b62      	ldr	r3, [pc, #392]	; (80094d4 <HAL_I2C_EV_IRQHandler+0x4a4>)
 800934a:	40c3      	lsrs	r3, r0
 800934c:	f013 0f01 	tst.w	r3, #1
 8009350:	d023      	beq.n	800939a <HAL_I2C_EV_IRQHandler+0x36a>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009352:	6813      	ldr	r3, [r2, #0]
 8009354:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009358:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800935a:	2300      	movs	r3, #0
 800935c:	9309      	str	r3, [sp, #36]	; 0x24
 800935e:	6823      	ldr	r3, [r4, #0]
 8009360:	695a      	ldr	r2, [r3, #20]
 8009362:	9209      	str	r2, [sp, #36]	; 0x24
 8009364:	699b      	ldr	r3, [r3, #24]
 8009366:	9309      	str	r3, [sp, #36]	; 0x24
 8009368:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800936a:	6823      	ldr	r3, [r4, #0]
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8009372:	f43f af4c 	beq.w	800920e <HAL_I2C_EV_IRQHandler+0x1de>
 8009376:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800937a:	d009      	beq.n	8009390 <HAL_I2C_EV_IRQHandler+0x360>
 800937c:	3801      	subs	r0, #1
 800937e:	281f      	cmp	r0, #31
 8009380:	f63f af45 	bhi.w	800920e <HAL_I2C_EV_IRQHandler+0x1de>
 8009384:	4a52      	ldr	r2, [pc, #328]	; (80094d0 <HAL_I2C_EV_IRQHandler+0x4a0>)
 8009386:	40c2      	lsrs	r2, r0
 8009388:	f012 0f01 	tst.w	r2, #1
 800938c:	f43f af3f 	beq.w	800920e <HAL_I2C_EV_IRQHandler+0x1de>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009390:	685a      	ldr	r2, [r3, #4]
 8009392:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009396:	605a      	str	r2, [r3, #4]
 8009398:	e739      	b.n	800920e <HAL_I2C_EV_IRQHandler+0x1de>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800939a:	6813      	ldr	r3, [r2, #0]
 800939c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80093a0:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093a2:	2300      	movs	r3, #0
 80093a4:	9308      	str	r3, [sp, #32]
 80093a6:	6823      	ldr	r3, [r4, #0]
 80093a8:	695a      	ldr	r2, [r3, #20]
 80093aa:	9208      	str	r2, [sp, #32]
 80093ac:	699a      	ldr	r2, [r3, #24]
 80093ae:	9208      	str	r2, [sp, #32]
 80093b0:	9a08      	ldr	r2, [sp, #32]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093b8:	601a      	str	r2, [r3, #0]
 80093ba:	e7d6      	b.n	800936a <HAL_I2C_EV_IRQHandler+0x33a>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80093bc:	f016 0f04 	tst.w	r6, #4
 80093c0:	f000 80ca 	beq.w	8009558 <HAL_I2C_EV_IRQHandler+0x528>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80093c4:	6855      	ldr	r5, [r2, #4]
 80093c6:	f415 6f00 	tst.w	r5, #2048	; 0x800
 80093ca:	f47f ae5f 	bne.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80093ce:	f011 0f80 	tst.w	r1, #128	; 0x80
 80093d2:	d06e      	beq.n	80094b2 <HAL_I2C_EV_IRQHandler+0x482>
 80093d4:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80093d8:	d06b      	beq.n	80094b2 <HAL_I2C_EV_IRQHandler+0x482>
 80093da:	f011 0f04 	tst.w	r1, #4
 80093de:	d16c      	bne.n	80094ba <HAL_I2C_EV_IRQHandler+0x48a>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80093e0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80093e4:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80093e6:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 80093ea:	b2c9      	uxtb	r1, r1
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80093ec:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80093ee:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d140      	bne.n	8009476 <HAL_I2C_EV_IRQHandler+0x446>
 80093f4:	2b21      	cmp	r3, #33	; 0x21
 80093f6:	d006      	beq.n	8009406 <HAL_I2C_EV_IRQHandler+0x3d6>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80093f8:	2940      	cmp	r1, #64	; 0x40
 80093fa:	f47f ae47 	bne.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80093fe:	2b22      	cmp	r3, #34	; 0x22
 8009400:	f47f ae44 	bne.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
 8009404:	e039      	b.n	800947a <HAL_I2C_EV_IRQHandler+0x44a>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009406:	2d08      	cmp	r5, #8
 8009408:	d014      	beq.n	8009434 <HAL_I2C_EV_IRQHandler+0x404>
 800940a:	2d20      	cmp	r5, #32
 800940c:	d012      	beq.n	8009434 <HAL_I2C_EV_IRQHandler+0x404>
 800940e:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8009412:	d00f      	beq.n	8009434 <HAL_I2C_EV_IRQHandler+0x404>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009414:	6853      	ldr	r3, [r2, #4]
 8009416:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800941a:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800941c:	2311      	movs	r3, #17
 800941e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009420:	2300      	movs	r3, #0
 8009422:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8009426:	2320      	movs	r3, #32
 8009428:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800942c:	4620      	mov	r0, r4
 800942e:	f7ff fc65 	bl	8008cfc <HAL_I2C_MasterTxCpltCallback>
 8009432:	e62b      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009434:	6853      	ldr	r3, [r2, #4]
 8009436:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800943a:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800943c:	6822      	ldr	r2, [r4, #0]
 800943e:	6813      	ldr	r3, [r2, #0]
 8009440:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009444:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009446:	2300      	movs	r3, #0
 8009448:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800944a:	2320      	movs	r3, #32
 800944c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009450:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2b40      	cmp	r3, #64	; 0x40
 8009458:	d006      	beq.n	8009468 <HAL_I2C_EV_IRQHandler+0x438>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800945a:	2300      	movs	r3, #0
 800945c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009460:	4620      	mov	r0, r4
 8009462:	f7ff fc4b 	bl	8008cfc <HAL_I2C_MasterTxCpltCallback>
 8009466:	e611      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009468:	2300      	movs	r3, #0
 800946a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 800946e:	4620      	mov	r0, r4
 8009470:	f7ff fc4a 	bl	8008d08 <HAL_I2C_MemTxCpltCallback>
 8009474:	e60a      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8009476:	2b21      	cmp	r3, #33	; 0x21
 8009478:	d1be      	bne.n	80093f8 <HAL_I2C_EV_IRQHandler+0x3c8>
    if (hi2c->XferCount == 0U)
 800947a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800947c:	b29b      	uxth	r3, r3
 800947e:	b17b      	cbz	r3, 80094a0 <HAL_I2C_EV_IRQHandler+0x470>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009480:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b40      	cmp	r3, #64	; 0x40
 8009488:	d00f      	beq.n	80094aa <HAL_I2C_EV_IRQHandler+0x47a>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800948a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8009490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009492:	3301      	adds	r3, #1
 8009494:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8009496:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009498:	3b01      	subs	r3, #1
 800949a:	b29b      	uxth	r3, r3
 800949c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800949e:	e5f5      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80094a0:	6853      	ldr	r3, [r2, #4]
 80094a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094a6:	6053      	str	r3, [r2, #4]
 80094a8:	e5f0      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80094aa:	4620      	mov	r0, r4
 80094ac:	f7ff fc2d 	bl	8008d0a <I2C_MemoryTransmit_TXE_BTF>
 80094b0:	e5ec      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80094b2:	f011 0f04 	tst.w	r1, #4
 80094b6:	f43f ade9 	beq.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
 80094ba:	f410 7f00 	tst.w	r0, #512	; 0x200
 80094be:	f43f ade5 	beq.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80094c2:	2b10      	cmp	r3, #16
 80094c4:	d008      	beq.n	80094d8 <HAL_I2C_EV_IRQHandler+0x4a8>
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80094c6:	4620      	mov	r0, r4
 80094c8:	f7ff fc1f 	bl	8008d0a <I2C_MemoryTransmit_TXE_BTF>
 80094cc:	e5de      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
 80094ce:	bf00      	nop
 80094d0:	80008081 	.word	0x80008081
 80094d4:	00010014 	.word	0x00010014
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80094d8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80094da:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	2b21      	cmp	r3, #33	; 0x21
 80094e2:	f47f add3 	bne.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
    if (hi2c->XferCount != 0U)
 80094e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	b9d3      	cbnz	r3, 8009522 <HAL_I2C_EV_IRQHandler+0x4f2>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80094ec:	2908      	cmp	r1, #8
 80094ee:	d004      	beq.n	80094fa <HAL_I2C_EV_IRQHandler+0x4ca>
 80094f0:	2920      	cmp	r1, #32
 80094f2:	d002      	beq.n	80094fa <HAL_I2C_EV_IRQHandler+0x4ca>
 80094f4:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80094f8:	d11e      	bne.n	8009538 <HAL_I2C_EV_IRQHandler+0x508>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80094fa:	6853      	ldr	r3, [r2, #4]
 80094fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009500:	6053      	str	r3, [r2, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009502:	6822      	ldr	r2, [r4, #0]
 8009504:	6813      	ldr	r3, [r2, #0]
 8009506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800950a:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800950c:	2300      	movs	r3, #0
 800950e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009510:	2220      	movs	r2, #32
 8009512:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009516:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800951a:	4620      	mov	r0, r4
 800951c:	f7ff fbee 	bl	8008cfc <HAL_I2C_MasterTxCpltCallback>
 8009520:	e5b4      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	6113      	str	r3, [r2, #16]
      hi2c->pBuffPtr++;
 8009528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800952a:	3301      	adds	r3, #1
 800952c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800952e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009530:	3b01      	subs	r3, #1
 8009532:	b29b      	uxth	r3, r3
 8009534:	8563      	strh	r3, [r4, #42]	; 0x2a
 8009536:	e5a9      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009538:	6853      	ldr	r3, [r2, #4]
 800953a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800953e:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009540:	2311      	movs	r3, #17
 8009542:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009544:	2300      	movs	r3, #0
 8009546:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800954a:	2320      	movs	r3, #32
 800954c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009550:	4620      	mov	r0, r4
 8009552:	f7ff fbd3 	bl	8008cfc <HAL_I2C_MasterTxCpltCallback>
 8009556:	e599      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8009558:	6853      	ldr	r3, [r2, #4]
 800955a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800955e:	f47f ad95 	bne.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009562:	f011 0f40 	tst.w	r1, #64	; 0x40
 8009566:	f000 808c 	beq.w	8009682 <HAL_I2C_EV_IRQHandler+0x652>
 800956a:	f410 6f80 	tst.w	r0, #1024	; 0x400
 800956e:	f000 8088 	beq.w	8009682 <HAL_I2C_EV_IRQHandler+0x652>
 8009572:	f011 0f04 	tst.w	r1, #4
 8009576:	f040 8088 	bne.w	800968a <HAL_I2C_EV_IRQHandler+0x65a>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800957a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800957e:	b2db      	uxtb	r3, r3
 8009580:	2b22      	cmp	r3, #34	; 0x22
 8009582:	f47f ad83 	bne.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
    tmp = hi2c->XferCount;
 8009586:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009588:	b29b      	uxth	r3, r3
    if (tmp > 3U)
 800958a:	2b03      	cmp	r3, #3
 800958c:	d914      	bls.n	80095b8 <HAL_I2C_EV_IRQHandler+0x588>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800958e:	6912      	ldr	r2, [r2, #16]
 8009590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009592:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009594:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009596:	3301      	adds	r3, #1
 8009598:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800959a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800959c:	3b01      	subs	r3, #1
 800959e:	b29b      	uxth	r3, r3
 80095a0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 80095a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	2b03      	cmp	r3, #3
 80095a8:	f47f ad70 	bne.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80095ac:	6822      	ldr	r2, [r4, #0]
 80095ae:	6853      	ldr	r3, [r2, #4]
 80095b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095b4:	6053      	str	r3, [r2, #4]
 80095b6:	e569      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80095b8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80095ba:	2902      	cmp	r1, #2
 80095bc:	f43f ad66 	beq.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	f63f ad63 	bhi.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
  __IO uint32_t count = 0U;
 80095c6:	2300      	movs	r3, #0
 80095c8:	930c      	str	r3, [sp, #48]	; 0x30
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80095ca:	4ba2      	ldr	r3, [pc, #648]	; (8009854 <HAL_I2C_EV_IRQHandler+0x824>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80095d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80095d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80095da:	930c      	str	r3, [sp, #48]	; 0x30
    count--;
 80095dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095de:	3b01      	subs	r3, #1
 80095e0:	930c      	str	r3, [sp, #48]	; 0x30
    if (count == 0U)
 80095e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095e4:	b343      	cbz	r3, 8009638 <HAL_I2C_EV_IRQHandler+0x608>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80095e6:	6813      	ldr	r3, [r2, #0]
 80095e8:	f413 7f00 	tst.w	r3, #512	; 0x200
 80095ec:	d1f6      	bne.n	80095dc <HAL_I2C_EV_IRQHandler+0x5ac>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095ee:	6813      	ldr	r3, [r2, #0]
 80095f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095f4:	6013      	str	r3, [r2, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80095f6:	6822      	ldr	r2, [r4, #0]
 80095f8:	6853      	ldr	r3, [r2, #4]
 80095fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80095fe:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009600:	6823      	ldr	r3, [r4, #0]
 8009602:	691a      	ldr	r2, [r3, #16]
 8009604:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009606:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8009608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800960a:	3301      	adds	r3, #1
 800960c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800960e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009610:	3b01      	subs	r3, #1
 8009612:	b29b      	uxth	r3, r3
 8009614:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009616:	2320      	movs	r3, #32
 8009618:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800961c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8009620:	b2db      	uxtb	r3, r3
 8009622:	2b40      	cmp	r3, #64	; 0x40
 8009624:	d025      	beq.n	8009672 <HAL_I2C_EV_IRQHandler+0x642>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009626:	2300      	movs	r3, #0
 8009628:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800962c:	2312      	movs	r3, #18
 800962e:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8009630:	4620      	mov	r0, r4
 8009632:	f7ff fb64 	bl	8008cfe <HAL_I2C_MasterRxCpltCallback>
 8009636:	e529      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009638:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800963a:	f043 0320 	orr.w	r3, r3, #32
 800963e:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009640:	6853      	ldr	r3, [r2, #4]
 8009642:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009646:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009648:	6823      	ldr	r3, [r4, #0]
 800964a:	691a      	ldr	r2, [r3, #16]
 800964c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800964e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8009650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009652:	3301      	adds	r3, #1
 8009654:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8009656:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009658:	3b01      	subs	r3, #1
 800965a:	b29b      	uxth	r3, r3
 800965c:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800965e:	2320      	movs	r3, #32
 8009660:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009664:	2300      	movs	r3, #0
 8009666:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800966a:	4620      	mov	r0, r4
 800966c:	f7ff fbab 	bl	8008dc6 <HAL_I2C_ErrorCallback>
 8009670:	e50c      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009672:	2300      	movs	r3, #0
 8009674:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8009678:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800967a:	4620      	mov	r0, r4
 800967c:	f7ff fba2 	bl	8008dc4 <HAL_I2C_MemRxCpltCallback>
 8009680:	e504      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009682:	f011 0f04 	tst.w	r1, #4
 8009686:	f43f ad01 	beq.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
 800968a:	f410 7f00 	tst.w	r0, #512	; 0x200
 800968e:	f43f acfd 	beq.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009692:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8009694:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009696:	b29b      	uxth	r3, r3
 8009698:	2b04      	cmp	r3, #4
 800969a:	d012      	beq.n	80096c2 <HAL_I2C_EV_IRQHandler+0x692>
  else if (hi2c->XferCount == 3U)
 800969c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800969e:	b29b      	uxth	r3, r3
 80096a0:	2b03      	cmp	r3, #3
 80096a2:	d01e      	beq.n	80096e2 <HAL_I2C_EV_IRQHandler+0x6b2>
  else if (hi2c->XferCount == 2U)
 80096a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	d033      	beq.n	8009714 <HAL_I2C_EV_IRQHandler+0x6e4>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096ac:	6912      	ldr	r2, [r2, #16]
 80096ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80096b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096b4:	3301      	adds	r3, #1
 80096b6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80096b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80096ba:	3b01      	subs	r3, #1
 80096bc:	b29b      	uxth	r3, r3
 80096be:	8563      	strh	r3, [r4, #42]	; 0x2a
 80096c0:	e4e4      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80096c2:	6853      	ldr	r3, [r2, #4]
 80096c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096c8:	6053      	str	r3, [r2, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096ca:	6823      	ldr	r3, [r4, #0]
 80096cc:	691a      	ldr	r2, [r3, #16]
 80096ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80096d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096d4:	3301      	adds	r3, #1
 80096d6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80096d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80096da:	3b01      	subs	r3, #1
 80096dc:	b29b      	uxth	r3, r3
 80096de:	8563      	strh	r3, [r4, #42]	; 0x2a
 80096e0:	e4d4      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80096e2:	6853      	ldr	r3, [r2, #4]
 80096e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096e8:	6053      	str	r3, [r2, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80096ea:	2904      	cmp	r1, #4
 80096ec:	d006      	beq.n	80096fc <HAL_I2C_EV_IRQHandler+0x6cc>
 80096ee:	2902      	cmp	r1, #2
 80096f0:	d004      	beq.n	80096fc <HAL_I2C_EV_IRQHandler+0x6cc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096f2:	6822      	ldr	r2, [r4, #0]
 80096f4:	6813      	ldr	r3, [r2, #0]
 80096f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096fa:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096fc:	6823      	ldr	r3, [r4, #0]
 80096fe:	691a      	ldr	r2, [r3, #16]
 8009700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009702:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009704:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009706:	3301      	adds	r3, #1
 8009708:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800970a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800970c:	3b01      	subs	r3, #1
 800970e:	b29b      	uxth	r3, r3
 8009710:	8563      	strh	r3, [r4, #42]	; 0x2a
 8009712:	e4bb      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8009714:	2901      	cmp	r1, #1
 8009716:	d00a      	beq.n	800972e <HAL_I2C_EV_IRQHandler+0x6fe>
 8009718:	2910      	cmp	r1, #16
 800971a:	d008      	beq.n	800972e <HAL_I2C_EV_IRQHandler+0x6fe>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800971c:	2904      	cmp	r1, #4
 800971e:	d035      	beq.n	800978c <HAL_I2C_EV_IRQHandler+0x75c>
 8009720:	2902      	cmp	r1, #2
 8009722:	d033      	beq.n	800978c <HAL_I2C_EV_IRQHandler+0x75c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009724:	6813      	ldr	r3, [r2, #0]
 8009726:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800972a:	6013      	str	r3, [r2, #0]
 800972c:	e003      	b.n	8009736 <HAL_I2C_EV_IRQHandler+0x706>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800972e:	6813      	ldr	r3, [r2, #0]
 8009730:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009734:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009736:	6823      	ldr	r3, [r4, #0]
 8009738:	691a      	ldr	r2, [r3, #16]
 800973a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800973c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800973e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009740:	1c53      	adds	r3, r2, #1
 8009742:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8009744:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009746:	3b01      	subs	r3, #1
 8009748:	b29b      	uxth	r3, r3
 800974a:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800974c:	6823      	ldr	r3, [r4, #0]
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 8009752:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009754:	3301      	adds	r3, #1
 8009756:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8009758:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800975a:	3b01      	subs	r3, #1
 800975c:	b29b      	uxth	r3, r3
 800975e:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009760:	6822      	ldr	r2, [r4, #0]
 8009762:	6853      	ldr	r3, [r2, #4]
 8009764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009768:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800976a:	2320      	movs	r3, #32
 800976c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009770:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8009774:	b2db      	uxtb	r3, r3
 8009776:	2b40      	cmp	r3, #64	; 0x40
 8009778:	d00d      	beq.n	8009796 <HAL_I2C_EV_IRQHandler+0x766>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800977a:	2300      	movs	r3, #0
 800977c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009780:	2312      	movs	r3, #18
 8009782:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009784:	4620      	mov	r0, r4
 8009786:	f7ff faba 	bl	8008cfe <HAL_I2C_MasterRxCpltCallback>
 800978a:	e47f      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800978c:	6813      	ldr	r3, [r2, #0]
 800978e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009792:	6013      	str	r3, [r2, #0]
 8009794:	e7cf      	b.n	8009736 <HAL_I2C_EV_IRQHandler+0x706>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009796:	2300      	movs	r3, #0
 8009798:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800979c:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800979e:	4620      	mov	r0, r4
 80097a0:	f7ff fb10 	bl	8008dc4 <HAL_I2C_MemRxCpltCallback>
 80097a4:	e472      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80097a6:	6995      	ldr	r5, [r2, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80097a8:	6953      	ldr	r3, [r2, #20]
 80097aa:	e457      	b.n	800905c <HAL_I2C_EV_IRQHandler+0x2c>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80097ac:	6853      	ldr	r3, [r2, #4]
 80097ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097b2:	6053      	str	r3, [r2, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80097b4:	f085 0104 	eor.w	r1, r5, #4
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80097b8:	f3c1 0180 	ubfx	r1, r1, #2, #1
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80097bc:	f015 0f80 	tst.w	r5, #128	; 0x80
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80097c0:	bf0c      	ite	eq
 80097c2:	89a2      	ldrheq	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80097c4:	8b22      	ldrhne	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 80097c6:	2300      	movs	r3, #0
 80097c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80097cc:	4620      	mov	r0, r4
 80097ce:	f7ff fa99 	bl	8008d04 <HAL_I2C_AddrCallback>
 80097d2:	e45b      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80097d4:	f013 0f10 	tst.w	r3, #16
 80097d8:	d002      	beq.n	80097e0 <HAL_I2C_EV_IRQHandler+0x7b0>
 80097da:	f410 7f00 	tst.w	r0, #512	; 0x200
 80097de:	d13b      	bne.n	8009858 <HAL_I2C_EV_IRQHandler+0x828>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80097e0:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 80097e4:	2921      	cmp	r1, #33	; 0x21
 80097e6:	f000 80f6 	beq.w	80099d6 <HAL_I2C_EV_IRQHandler+0x9a6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80097ea:	f013 0f40 	tst.w	r3, #64	; 0x40
 80097ee:	f000 813d 	beq.w	8009a6c <HAL_I2C_EV_IRQHandler+0xa3c>
 80097f2:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80097f6:	f000 8139 	beq.w	8009a6c <HAL_I2C_EV_IRQHandler+0xa3c>
 80097fa:	f013 0f04 	tst.w	r3, #4
 80097fe:	f040 8139 	bne.w	8009a74 <HAL_I2C_EV_IRQHandler+0xa44>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009802:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8009806:	b2d9      	uxtb	r1, r3
  if (hi2c->XferCount != 0U)
 8009808:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800980a:	b29b      	uxth	r3, r3
 800980c:	2b00      	cmp	r3, #0
 800980e:	f43f ac3d 	beq.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009812:	6912      	ldr	r2, [r2, #16]
 8009814:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009816:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009818:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800981a:	3301      	adds	r3, #1
 800981c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800981e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009820:	3b01      	subs	r3, #1
 8009822:	b29b      	uxth	r3, r3
 8009824:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009826:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009828:	b29b      	uxth	r3, r3
 800982a:	2b00      	cmp	r3, #0
 800982c:	f47f ac2e 	bne.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
 8009830:	292a      	cmp	r1, #42	; 0x2a
 8009832:	f47f ac2b 	bne.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009836:	6822      	ldr	r2, [r4, #0]
 8009838:	6853      	ldr	r3, [r2, #4]
 800983a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800983e:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009840:	2322      	movs	r3, #34	; 0x22
 8009842:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009844:	2328      	movs	r3, #40	; 0x28
 8009846:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800984a:	4620      	mov	r0, r4
 800984c:	f7ff fa59 	bl	8008d02 <HAL_I2C_SlaveRxCpltCallback>
 8009850:	e41c      	b.n	800908c <HAL_I2C_EV_IRQHandler+0x5c>
 8009852:	bf00      	nop
 8009854:	2000005c 	.word	0x2000005c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009858:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
 800985c:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800985e:	6853      	ldr	r3, [r2, #4]
 8009860:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009864:	6053      	str	r3, [r2, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009866:	2300      	movs	r3, #0
 8009868:	930d      	str	r3, [sp, #52]	; 0x34
 800986a:	6823      	ldr	r3, [r4, #0]
 800986c:	695a      	ldr	r2, [r3, #20]
 800986e:	920d      	str	r2, [sp, #52]	; 0x34
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	f042 0201 	orr.w	r2, r2, #1
 8009876:	601a      	str	r2, [r3, #0]
 8009878:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800987a:	6822      	ldr	r2, [r4, #0]
 800987c:	6813      	ldr	r3, [r2, #0]
 800987e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009882:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009884:	6823      	ldr	r3, [r4, #0]
 8009886:	685a      	ldr	r2, [r3, #4]
 8009888:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800988c:	d038      	beq.n	8009900 <HAL_I2C_EV_IRQHandler+0x8d0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800988e:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8009892:	2a22      	cmp	r2, #34	; 0x22
 8009894:	d01f      	beq.n	80098d6 <HAL_I2C_EV_IRQHandler+0x8a6>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009896:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009898:	6812      	ldr	r2, [r2, #0]
 800989a:	6852      	ldr	r2, [r2, #4]
 800989c:	b292      	uxth	r2, r2
 800989e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80098a0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80098a2:	b292      	uxth	r2, r2
 80098a4:	b11a      	cbz	r2, 80098ae <HAL_I2C_EV_IRQHandler+0x87e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80098a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80098a8:	f042 0204 	orr.w	r2, r2, #4
 80098ac:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80098ae:	685a      	ldr	r2, [r3, #4]
 80098b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80098b4:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80098b6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80098b8:	f7fe fac8 	bl	8007e4c <HAL_DMA_GetState>
 80098bc:	2801      	cmp	r0, #1
 80098be:	d01f      	beq.n	8009900 <HAL_I2C_EV_IRQHandler+0x8d0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80098c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098c2:	4a77      	ldr	r2, [pc, #476]	; (8009aa0 <HAL_I2C_EV_IRQHandler+0xa70>)
 80098c4:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80098c6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80098c8:	f7fe fa76 	bl	8007db8 <HAL_DMA_Abort_IT>
 80098cc:	b1c0      	cbz	r0, 8009900 <HAL_I2C_EV_IRQHandler+0x8d0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80098ce:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80098d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80098d2:	4798      	blx	r3
 80098d4:	e014      	b.n	8009900 <HAL_I2C_EV_IRQHandler+0x8d0>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80098d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80098d8:	6812      	ldr	r2, [r2, #0]
 80098da:	6852      	ldr	r2, [r2, #4]
 80098dc:	b292      	uxth	r2, r2
 80098de:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80098e0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80098e2:	b292      	uxth	r2, r2
 80098e4:	b11a      	cbz	r2, 80098ee <HAL_I2C_EV_IRQHandler+0x8be>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80098e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80098e8:	f042 0204 	orr.w	r2, r2, #4
 80098ec:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80098ee:	685a      	ldr	r2, [r3, #4]
 80098f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80098f4:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80098f6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80098f8:	f7fe faa8 	bl	8007e4c <HAL_DMA_GetState>
 80098fc:	2801      	cmp	r0, #1
 80098fe:	d142      	bne.n	8009986 <HAL_I2C_EV_IRQHandler+0x956>
  if (hi2c->XferCount != 0U)
 8009900:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009902:	b29b      	uxth	r3, r3
 8009904:	b323      	cbz	r3, 8009950 <HAL_I2C_EV_IRQHandler+0x920>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009906:	6823      	ldr	r3, [r4, #0]
 8009908:	695a      	ldr	r2, [r3, #20]
 800990a:	f012 0f04 	tst.w	r2, #4
 800990e:	d009      	beq.n	8009924 <HAL_I2C_EV_IRQHandler+0x8f4>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009910:	691a      	ldr	r2, [r3, #16]
 8009912:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009914:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009918:	3301      	adds	r3, #1
 800991a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800991c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800991e:	3b01      	subs	r3, #1
 8009920:	b29b      	uxth	r3, r3
 8009922:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009924:	6823      	ldr	r3, [r4, #0]
 8009926:	695a      	ldr	r2, [r3, #20]
 8009928:	f012 0f40 	tst.w	r2, #64	; 0x40
 800992c:	d009      	beq.n	8009942 <HAL_I2C_EV_IRQHandler+0x912>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800992e:	691a      	ldr	r2, [r3, #16]
 8009930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009932:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009934:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009936:	3301      	adds	r3, #1
 8009938:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800993a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800993c:	3b01      	subs	r3, #1
 800993e:	b29b      	uxth	r3, r3
 8009940:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8009942:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009944:	b29b      	uxth	r3, r3
 8009946:	b11b      	cbz	r3, 8009950 <HAL_I2C_EV_IRQHandler+0x920>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009948:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800994a:	f043 0304 	orr.w	r3, r3, #4
 800994e:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009950:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009952:	bb23      	cbnz	r3, 800999e <HAL_I2C_EV_IRQHandler+0x96e>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009954:	2d2a      	cmp	r5, #42	; 0x2a
 8009956:	d027      	beq.n	80099a8 <HAL_I2C_EV_IRQHandler+0x978>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009958:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800995c:	b2db      	uxtb	r3, r3
 800995e:	2b28      	cmp	r3, #40	; 0x28
 8009960:	d02b      	beq.n	80099ba <HAL_I2C_EV_IRQHandler+0x98a>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009962:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009964:	2b22      	cmp	r3, #34	; 0x22
 8009966:	d002      	beq.n	800996e <HAL_I2C_EV_IRQHandler+0x93e>
 8009968:	2d22      	cmp	r5, #34	; 0x22
 800996a:	f47f ab8f 	bne.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
        hi2c->PreviousState = I2C_STATE_NONE;
 800996e:	2300      	movs	r3, #0
 8009970:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009972:	2220      	movs	r2, #32
 8009974:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009978:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800997c:	4620      	mov	r0, r4
 800997e:	f7ff f9c0 	bl	8008d02 <HAL_I2C_SlaveRxCpltCallback>
 8009982:	f7ff bb83 	b.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009986:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009988:	4a45      	ldr	r2, [pc, #276]	; (8009aa0 <HAL_I2C_EV_IRQHandler+0xa70>)
 800998a:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800998c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800998e:	f7fe fa13 	bl	8007db8 <HAL_DMA_Abort_IT>
 8009992:	2800      	cmp	r0, #0
 8009994:	d0b4      	beq.n	8009900 <HAL_I2C_EV_IRQHandler+0x8d0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009996:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009998:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800999a:	4798      	blx	r3
 800999c:	e7b0      	b.n	8009900 <HAL_I2C_EV_IRQHandler+0x8d0>
    I2C_ITError(hi2c);
 800999e:	4620      	mov	r0, r4
 80099a0:	f7ff fa86 	bl	8008eb0 <I2C_ITError>
 80099a4:	f7ff bb72 	b.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
      hi2c->PreviousState = I2C_STATE_NONE;
 80099a8:	2300      	movs	r3, #0
 80099aa:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80099ac:	2328      	movs	r3, #40	; 0x28
 80099ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80099b2:	4620      	mov	r0, r4
 80099b4:	f7ff f9a5 	bl	8008d02 <HAL_I2C_SlaveRxCpltCallback>
 80099b8:	e7ce      	b.n	8009958 <HAL_I2C_EV_IRQHandler+0x928>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80099ba:	4b3a      	ldr	r3, [pc, #232]	; (8009aa4 <HAL_I2C_EV_IRQHandler+0xa74>)
 80099bc:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80099be:	2300      	movs	r3, #0
 80099c0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80099c2:	2220      	movs	r2, #32
 80099c4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80099c8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80099cc:	4620      	mov	r0, r4
 80099ce:	f7ff f99a 	bl	8008d06 <HAL_I2C_ListenCpltCallback>
 80099d2:	f7ff bb5b 	b.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80099d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80099da:	d02e      	beq.n	8009a3a <HAL_I2C_EV_IRQHandler+0xa0a>
 80099dc:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80099e0:	d02b      	beq.n	8009a3a <HAL_I2C_EV_IRQHandler+0xa0a>
 80099e2:	f013 0f04 	tst.w	r3, #4
 80099e6:	d12c      	bne.n	8009a42 <HAL_I2C_EV_IRQHandler+0xa12>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80099e8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80099ec:	b2d9      	uxtb	r1, r3
  if (hi2c->XferCount != 0U)
 80099ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f43f ab4a 	beq.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	6113      	str	r3, [r2, #16]
    hi2c->pBuffPtr++;
 80099fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a00:	3301      	adds	r3, #1
 8009a02:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8009a04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009a06:	3b01      	subs	r3, #1
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009a0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f47f ab3b 	bne.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
 8009a16:	2929      	cmp	r1, #41	; 0x29
 8009a18:	f47f ab38 	bne.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009a1c:	6822      	ldr	r2, [r4, #0]
 8009a1e:	6853      	ldr	r3, [r2, #4]
 8009a20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a24:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009a26:	2321      	movs	r3, #33	; 0x21
 8009a28:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009a2a:	2328      	movs	r3, #40	; 0x28
 8009a2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009a30:	4620      	mov	r0, r4
 8009a32:	f7ff f965 	bl	8008d00 <HAL_I2C_SlaveTxCpltCallback>
 8009a36:	f7ff bb29 	b.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009a3a:	f013 0f04 	tst.w	r3, #4
 8009a3e:	f43f ab25 	beq.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
 8009a42:	f410 7f00 	tst.w	r0, #512	; 0x200
 8009a46:	f43f ab21 	beq.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
  if (hi2c->XferCount != 0U)
 8009a4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f43f ab1c 	beq.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	6113      	str	r3, [r2, #16]
    hi2c->pBuffPtr++;
 8009a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8009a60:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009a62:	3b01      	subs	r3, #1
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	8563      	strh	r3, [r4, #42]	; 0x2a
 8009a68:	f7ff bb10 	b.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009a6c:	f013 0f04 	tst.w	r3, #4
 8009a70:	f43f ab0c 	beq.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
 8009a74:	f410 7f00 	tst.w	r0, #512	; 0x200
 8009a78:	f43f ab08 	beq.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
  if (hi2c->XferCount != 0U)
 8009a7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f43f ab03 	beq.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a86:	6912      	ldr	r2, [r2, #16]
 8009a88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a8a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009a8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a8e:	3301      	adds	r3, #1
 8009a90:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8009a92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009a94:	3b01      	subs	r3, #1
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	8563      	strh	r3, [r4, #42]	; 0x2a
 8009a9a:	f7ff baf7 	b.w	800908c <HAL_I2C_EV_IRQHandler+0x5c>
 8009a9e:	bf00      	nop
 8009aa0:	08008dcd 	.word	0x08008dcd
 8009aa4:	ffff0000 	.word	0xffff0000

08009aa8 <HAL_I2C_ER_IRQHandler>:
{
 8009aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aaa:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8009aac:	6803      	ldr	r3, [r0, #0]
 8009aae:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8009ab0:	6859      	ldr	r1, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009ab2:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8009ab6:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009ab8:	f415 7f80 	tst.w	r5, #256	; 0x100
 8009abc:	d012      	beq.n	8009ae4 <HAL_I2C_ER_IRQHandler+0x3c>
 8009abe:	f411 7f80 	tst.w	r1, #256	; 0x100
 8009ac2:	d00f      	beq.n	8009ae4 <HAL_I2C_ER_IRQHandler+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009ac4:	f46f 7080 	mvn.w	r0, #256	; 0x100
 8009ac8:	6158      	str	r0, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8009aca:	6820      	ldr	r0, [r4, #0]
 8009acc:	6803      	ldr	r3, [r0, #0]
 8009ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ad2:	6003      	str	r3, [r0, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009ad4:	f415 7f00 	tst.w	r5, #512	; 0x200
 8009ad8:	d11f      	bne.n	8009b1a <HAL_I2C_ER_IRQHandler+0x72>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009ada:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8009ade:	d146      	bne.n	8009b6e <HAL_I2C_ER_IRQHandler+0xc6>
    error |= HAL_I2C_ERROR_BERR;
 8009ae0:	2601      	movs	r6, #1
 8009ae2:	e0a2      	b.n	8009c2a <HAL_I2C_ER_IRQHandler+0x182>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009ae4:	f415 7f00 	tst.w	r5, #512	; 0x200
 8009ae8:	d019      	beq.n	8009b1e <HAL_I2C_ER_IRQHandler+0x76>
 8009aea:	f411 7f80 	tst.w	r1, #256	; 0x100
 8009aee:	d105      	bne.n	8009afc <HAL_I2C_ER_IRQHandler+0x54>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009af0:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8009af4:	f040 80ae 	bne.w	8009c54 <HAL_I2C_ER_IRQHandler+0x1ac>
 8009af8:	2600      	movs	r6, #0
 8009afa:	e096      	b.n	8009c2a <HAL_I2C_ER_IRQHandler+0x182>
 8009afc:	2600      	movs	r6, #0
    error |= HAL_I2C_ERROR_ARLO;
 8009afe:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	f46f 7000 	mvn.w	r0, #512	; 0x200
 8009b08:	6158      	str	r0, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009b0a:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8009b0e:	d113      	bne.n	8009b38 <HAL_I2C_ER_IRQHandler+0x90>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009b10:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8009b14:	f040 808d 	bne.w	8009c32 <HAL_I2C_ER_IRQHandler+0x18a>
 8009b18:	e095      	b.n	8009c46 <HAL_I2C_ER_IRQHandler+0x19e>
    error |= HAL_I2C_ERROR_BERR;
 8009b1a:	2601      	movs	r6, #1
 8009b1c:	e7ef      	b.n	8009afe <HAL_I2C_ER_IRQHandler+0x56>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009b1e:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8009b22:	f000 8081 	beq.w	8009c28 <HAL_I2C_ER_IRQHandler+0x180>
 8009b26:	f411 7f80 	tst.w	r1, #256	; 0x100
 8009b2a:	d104      	bne.n	8009b36 <HAL_I2C_ER_IRQHandler+0x8e>
 8009b2c:	2600      	movs	r6, #0
  if (error != HAL_I2C_ERROR_NONE)
 8009b2e:	2e00      	cmp	r6, #0
 8009b30:	f040 8089 	bne.w	8009c46 <HAL_I2C_ER_IRQHandler+0x19e>
}
 8009b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b36:	2600      	movs	r6, #0
    tmp2 = hi2c->XferCount;
 8009b38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009b3a:	b29b      	uxth	r3, r3
    tmp3 = hi2c->State;
 8009b3c:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8009b40:	b2c0      	uxtb	r0, r0
    tmp4 = hi2c->PreviousState;
 8009b42:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8009b44:	2a20      	cmp	r2, #32
 8009b46:	d014      	beq.n	8009b72 <HAL_I2C_ER_IRQHandler+0xca>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b48:	6823      	ldr	r3, [r4, #0]
 8009b4a:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8009b4e:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8009b50:	f046 0604 	orr.w	r6, r6, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8009b54:	2a10      	cmp	r2, #16
 8009b56:	d001      	beq.n	8009b5c <HAL_I2C_ER_IRQHandler+0xb4>
 8009b58:	2a40      	cmp	r2, #64	; 0x40
 8009b5a:	d104      	bne.n	8009b66 <HAL_I2C_ER_IRQHandler+0xbe>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b5c:	6822      	ldr	r2, [r4, #0]
 8009b5e:	6813      	ldr	r3, [r2, #0]
 8009b60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009b64:	6013      	str	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009b66:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8009b6a:	d166      	bne.n	8009c3a <HAL_I2C_ER_IRQHandler+0x192>
 8009b6c:	e06b      	b.n	8009c46 <HAL_I2C_ER_IRQHandler+0x19e>
    error |= HAL_I2C_ERROR_BERR;
 8009b6e:	2601      	movs	r6, #1
 8009b70:	e7e2      	b.n	8009b38 <HAL_I2C_ER_IRQHandler+0x90>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8009b72:	b92b      	cbnz	r3, 8009b80 <HAL_I2C_ER_IRQHandler+0xd8>
 8009b74:	f000 03f7 	and.w	r3, r0, #247	; 0xf7
 8009b78:	2b21      	cmp	r3, #33	; 0x21
 8009b7a:	d00a      	beq.n	8009b92 <HAL_I2C_ER_IRQHandler+0xea>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8009b7c:	2828      	cmp	r0, #40	; 0x28
 8009b7e:	d006      	beq.n	8009b8e <HAL_I2C_ER_IRQHandler+0xe6>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b80:	6823      	ldr	r3, [r4, #0]
 8009b82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009b86:	615a      	str	r2, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8009b88:	f046 0604 	orr.w	r6, r6, #4
 8009b8c:	e7c0      	b.n	8009b10 <HAL_I2C_ER_IRQHandler+0x68>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8009b8e:	2f21      	cmp	r7, #33	; 0x21
 8009b90:	d1f6      	bne.n	8009b80 <HAL_I2C_ER_IRQHandler+0xd8>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009b92:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8009b96:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009b98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009b9a:	2a08      	cmp	r2, #8
 8009b9c:	d001      	beq.n	8009ba2 <HAL_I2C_ER_IRQHandler+0xfa>
 8009b9e:	2a20      	cmp	r2, #32
 8009ba0:	d101      	bne.n	8009ba6 <HAL_I2C_ER_IRQHandler+0xfe>
 8009ba2:	2b28      	cmp	r3, #40	; 0x28
 8009ba4:	d009      	beq.n	8009bba <HAL_I2C_ER_IRQHandler+0x112>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009ba6:	2b21      	cmp	r3, #33	; 0x21
 8009ba8:	d022      	beq.n	8009bf0 <HAL_I2C_ER_IRQHandler+0x148>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009baa:	6823      	ldr	r3, [r4, #0]
 8009bac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009bb0:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009bb2:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8009bb6:	d0ba      	beq.n	8009b2e <HAL_I2C_ER_IRQHandler+0x86>
 8009bb8:	e03f      	b.n	8009c3a <HAL_I2C_ER_IRQHandler+0x192>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009bba:	4b27      	ldr	r3, [pc, #156]	; (8009c58 <HAL_I2C_ER_IRQHandler+0x1b0>)
 8009bbc:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009bbe:	6822      	ldr	r2, [r4, #0]
 8009bc0:	6853      	ldr	r3, [r2, #4]
 8009bc2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009bc6:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009bc8:	6823      	ldr	r3, [r4, #0]
 8009bca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009bce:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bd0:	6822      	ldr	r2, [r4, #0]
 8009bd2:	6813      	ldr	r3, [r2, #0]
 8009bd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bd8:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009bde:	2220      	movs	r2, #32
 8009be0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009be4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8009be8:	4620      	mov	r0, r4
 8009bea:	f7ff f88c 	bl	8008d06 <HAL_I2C_ListenCpltCallback>
 8009bee:	e7e0      	b.n	8009bb2 <HAL_I2C_ER_IRQHandler+0x10a>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009bf0:	4b19      	ldr	r3, [pc, #100]	; (8009c58 <HAL_I2C_ER_IRQHandler+0x1b0>)
 8009bf2:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009bf4:	2321      	movs	r3, #33	; 0x21
 8009bf6:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009bf8:	2320      	movs	r3, #32
 8009bfa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009c04:	6822      	ldr	r2, [r4, #0]
 8009c06:	6853      	ldr	r3, [r2, #4]
 8009c08:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009c0c:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c0e:	6823      	ldr	r3, [r4, #0]
 8009c10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009c14:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c16:	6822      	ldr	r2, [r4, #0]
 8009c18:	6813      	ldr	r3, [r2, #0]
 8009c1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c1e:	6013      	str	r3, [r2, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009c20:	4620      	mov	r0, r4
 8009c22:	f7ff f86d 	bl	8008d00 <HAL_I2C_SlaveTxCpltCallback>
 8009c26:	e7c4      	b.n	8009bb2 <HAL_I2C_ER_IRQHandler+0x10a>
 8009c28:	2600      	movs	r6, #0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009c2a:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8009c2e:	f43f af7e 	beq.w	8009b2e <HAL_I2C_ER_IRQHandler+0x86>
 8009c32:	f411 7f80 	tst.w	r1, #256	; 0x100
 8009c36:	f43f af7a 	beq.w	8009b2e <HAL_I2C_ER_IRQHandler+0x86>
    error |= HAL_I2C_ERROR_OVR;
 8009c3a:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009c3e:	6823      	ldr	r3, [r4, #0]
 8009c40:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8009c44:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 8009c46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c48:	431e      	orrs	r6, r3
 8009c4a:	6426      	str	r6, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	f7ff f92f 	bl	8008eb0 <I2C_ITError>
}
 8009c52:	e76f      	b.n	8009b34 <HAL_I2C_ER_IRQHandler+0x8c>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009c54:	2600      	movs	r6, #0
 8009c56:	e76a      	b.n	8009b2e <HAL_I2C_ER_IRQHandler+0x86>
 8009c58:	ffff0000 	.word	0xffff0000

08009c5c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	f000 8206 	beq.w	800a06e <HAL_RCC_OscConfig+0x412>
{
 8009c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c6a:	6803      	ldr	r3, [r0, #0]
 8009c6c:	f013 0f01 	tst.w	r3, #1
 8009c70:	d02c      	beq.n	8009ccc <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009c72:	4bab      	ldr	r3, [pc, #684]	; (8009f20 <HAL_RCC_OscConfig+0x2c4>)
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	f003 030c 	and.w	r3, r3, #12
 8009c7a:	2b04      	cmp	r3, #4
 8009c7c:	d01d      	beq.n	8009cba <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009c7e:	4ba8      	ldr	r3, [pc, #672]	; (8009f20 <HAL_RCC_OscConfig+0x2c4>)
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	f003 030c 	and.w	r3, r3, #12
 8009c86:	2b08      	cmp	r3, #8
 8009c88:	d012      	beq.n	8009cb0 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009c8a:	6863      	ldr	r3, [r4, #4]
 8009c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c90:	d041      	beq.n	8009d16 <HAL_RCC_OscConfig+0xba>
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d155      	bne.n	8009d42 <HAL_RCC_OscConfig+0xe6>
 8009c96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009c9a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009ca4:	601a      	str	r2, [r3, #0]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009cac:	601a      	str	r2, [r3, #0]
 8009cae:	e037      	b.n	8009d20 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009cb0:	4b9b      	ldr	r3, [pc, #620]	; (8009f20 <HAL_RCC_OscConfig+0x2c4>)
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009cb8:	d0e7      	beq.n	8009c8a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009cba:	4b99      	ldr	r3, [pc, #612]	; (8009f20 <HAL_RCC_OscConfig+0x2c4>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009cc2:	d003      	beq.n	8009ccc <HAL_RCC_OscConfig+0x70>
 8009cc4:	6863      	ldr	r3, [r4, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f000 81d3 	beq.w	800a072 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ccc:	6823      	ldr	r3, [r4, #0]
 8009cce:	f013 0f02 	tst.w	r3, #2
 8009cd2:	d076      	beq.n	8009dc2 <HAL_RCC_OscConfig+0x166>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009cd4:	4b92      	ldr	r3, [pc, #584]	; (8009f20 <HAL_RCC_OscConfig+0x2c4>)
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	f013 0f0c 	tst.w	r3, #12
 8009cdc:	d05f      	beq.n	8009d9e <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009cde:	4b90      	ldr	r3, [pc, #576]	; (8009f20 <HAL_RCC_OscConfig+0x2c4>)
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	f003 030c 	and.w	r3, r3, #12
 8009ce6:	2b08      	cmp	r3, #8
 8009ce8:	d054      	beq.n	8009d94 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009cea:	6923      	ldr	r3, [r4, #16]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	f000 808a 	beq.w	8009e06 <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009cf2:	4b8c      	ldr	r3, [pc, #560]	; (8009f24 <HAL_RCC_OscConfig+0x2c8>)
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cf8:	f7fd ffdc 	bl	8007cb4 <HAL_GetTick>
 8009cfc:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009cfe:	4d88      	ldr	r5, [pc, #544]	; (8009f20 <HAL_RCC_OscConfig+0x2c4>)
 8009d00:	682b      	ldr	r3, [r5, #0]
 8009d02:	f013 0f02 	tst.w	r3, #2
 8009d06:	d175      	bne.n	8009df4 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d08:	f7fd ffd4 	bl	8007cb4 <HAL_GetTick>
 8009d0c:	1b80      	subs	r0, r0, r6
 8009d0e:	2802      	cmp	r0, #2
 8009d10:	d9f6      	bls.n	8009d00 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8009d12:	2003      	movs	r0, #3
 8009d14:	e1b0      	b.n	800a078 <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d16:	4a82      	ldr	r2, [pc, #520]	; (8009f20 <HAL_RCC_OscConfig+0x2c4>)
 8009d18:	6813      	ldr	r3, [r2, #0]
 8009d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d1e:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009d20:	6863      	ldr	r3, [r4, #4]
 8009d22:	b343      	cbz	r3, 8009d76 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8009d24:	f7fd ffc6 	bl	8007cb4 <HAL_GetTick>
 8009d28:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d2a:	4d7d      	ldr	r5, [pc, #500]	; (8009f20 <HAL_RCC_OscConfig+0x2c4>)
 8009d2c:	682b      	ldr	r3, [r5, #0]
 8009d2e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009d32:	d1cb      	bne.n	8009ccc <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d34:	f7fd ffbe 	bl	8007cb4 <HAL_GetTick>
 8009d38:	1b80      	subs	r0, r0, r6
 8009d3a:	2864      	cmp	r0, #100	; 0x64
 8009d3c:	d9f6      	bls.n	8009d2c <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8009d3e:	2003      	movs	r0, #3
 8009d40:	e19a      	b.n	800a078 <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d46:	d009      	beq.n	8009d5c <HAL_RCC_OscConfig+0x100>
 8009d48:	4b75      	ldr	r3, [pc, #468]	; (8009f20 <HAL_RCC_OscConfig+0x2c4>)
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009d50:	601a      	str	r2, [r3, #0]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009d58:	601a      	str	r2, [r3, #0]
 8009d5a:	e7e1      	b.n	8009d20 <HAL_RCC_OscConfig+0xc4>
 8009d5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009d60:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8009d6a:	601a      	str	r2, [r3, #0]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009d72:	601a      	str	r2, [r3, #0]
 8009d74:	e7d4      	b.n	8009d20 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8009d76:	f7fd ff9d 	bl	8007cb4 <HAL_GetTick>
 8009d7a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d7c:	4d68      	ldr	r5, [pc, #416]	; (8009f20 <HAL_RCC_OscConfig+0x2c4>)
 8009d7e:	682b      	ldr	r3, [r5, #0]
 8009d80:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009d84:	d0a2      	beq.n	8009ccc <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d86:	f7fd ff95 	bl	8007cb4 <HAL_GetTick>
 8009d8a:	1b80      	subs	r0, r0, r6
 8009d8c:	2864      	cmp	r0, #100	; 0x64
 8009d8e:	d9f6      	bls.n	8009d7e <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8009d90:	2003      	movs	r0, #3
 8009d92:	e171      	b.n	800a078 <HAL_RCC_OscConfig+0x41c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009d94:	4b62      	ldr	r3, [pc, #392]	; (8009f20 <HAL_RCC_OscConfig+0x2c4>)
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009d9c:	d1a5      	bne.n	8009cea <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009d9e:	4b60      	ldr	r3, [pc, #384]	; (8009f20 <HAL_RCC_OscConfig+0x2c4>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f013 0f02 	tst.w	r3, #2
 8009da6:	d004      	beq.n	8009db2 <HAL_RCC_OscConfig+0x156>
 8009da8:	6923      	ldr	r3, [r4, #16]
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d001      	beq.n	8009db2 <HAL_RCC_OscConfig+0x156>
        return HAL_ERROR;
 8009dae:	2001      	movs	r0, #1
 8009db0:	e162      	b.n	800a078 <HAL_RCC_OscConfig+0x41c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009db2:	4a5b      	ldr	r2, [pc, #364]	; (8009f20 <HAL_RCC_OscConfig+0x2c4>)
 8009db4:	6813      	ldr	r3, [r2, #0]
 8009db6:	6961      	ldr	r1, [r4, #20]
 8009db8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009dbc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009dc0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009dc2:	6823      	ldr	r3, [r4, #0]
 8009dc4:	f013 0f08 	tst.w	r3, #8
 8009dc8:	d03c      	beq.n	8009e44 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009dca:	69a3      	ldr	r3, [r4, #24]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d065      	beq.n	8009e9c <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009dd0:	4b55      	ldr	r3, [pc, #340]	; (8009f28 <HAL_RCC_OscConfig+0x2cc>)
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009dd6:	f7fd ff6d 	bl	8007cb4 <HAL_GetTick>
 8009dda:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009ddc:	4d50      	ldr	r5, [pc, #320]	; (8009f20 <HAL_RCC_OscConfig+0x2c4>)
 8009dde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009de0:	f013 0f02 	tst.w	r3, #2
 8009de4:	d121      	bne.n	8009e2a <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009de6:	f7fd ff65 	bl	8007cb4 <HAL_GetTick>
 8009dea:	1b80      	subs	r0, r0, r6
 8009dec:	2802      	cmp	r0, #2
 8009dee:	d9f6      	bls.n	8009dde <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8009df0:	2003      	movs	r0, #3
 8009df2:	e141      	b.n	800a078 <HAL_RCC_OscConfig+0x41c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009df4:	4a4a      	ldr	r2, [pc, #296]	; (8009f20 <HAL_RCC_OscConfig+0x2c4>)
 8009df6:	6813      	ldr	r3, [r2, #0]
 8009df8:	6961      	ldr	r1, [r4, #20]
 8009dfa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009dfe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009e02:	6013      	str	r3, [r2, #0]
 8009e04:	e7dd      	b.n	8009dc2 <HAL_RCC_OscConfig+0x166>
        __HAL_RCC_HSI_DISABLE();
 8009e06:	4b47      	ldr	r3, [pc, #284]	; (8009f24 <HAL_RCC_OscConfig+0x2c8>)
 8009e08:	2200      	movs	r2, #0
 8009e0a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009e0c:	f7fd ff52 	bl	8007cb4 <HAL_GetTick>
 8009e10:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e12:	4d43      	ldr	r5, [pc, #268]	; (8009f20 <HAL_RCC_OscConfig+0x2c4>)
 8009e14:	682b      	ldr	r3, [r5, #0]
 8009e16:	f013 0f02 	tst.w	r3, #2
 8009e1a:	d0d2      	beq.n	8009dc2 <HAL_RCC_OscConfig+0x166>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e1c:	f7fd ff4a 	bl	8007cb4 <HAL_GetTick>
 8009e20:	1b80      	subs	r0, r0, r6
 8009e22:	2802      	cmp	r0, #2
 8009e24:	d9f6      	bls.n	8009e14 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8009e26:	2003      	movs	r0, #3
 8009e28:	e126      	b.n	800a078 <HAL_RCC_OscConfig+0x41c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009e2a:	4b40      	ldr	r3, [pc, #256]	; (8009f2c <HAL_RCC_OscConfig+0x2d0>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a40      	ldr	r2, [pc, #256]	; (8009f30 <HAL_RCC_OscConfig+0x2d4>)
 8009e30:	fba2 2303 	umull	r2, r3, r2, r3
 8009e34:	0a5b      	lsrs	r3, r3, #9
 8009e36:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8009e38:	bf00      	nop
  }
  while (Delay --);
 8009e3a:	9b01      	ldr	r3, [sp, #4]
 8009e3c:	1e5a      	subs	r2, r3, #1
 8009e3e:	9201      	str	r2, [sp, #4]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1f9      	bne.n	8009e38 <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e44:	6823      	ldr	r3, [r4, #0]
 8009e46:	f013 0f04 	tst.w	r3, #4
 8009e4a:	f000 809e 	beq.w	8009f8a <HAL_RCC_OscConfig+0x32e>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e4e:	4b34      	ldr	r3, [pc, #208]	; (8009f20 <HAL_RCC_OscConfig+0x2c4>)
 8009e50:	69db      	ldr	r3, [r3, #28]
 8009e52:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8009e56:	d133      	bne.n	8009ec0 <HAL_RCC_OscConfig+0x264>
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e58:	4b31      	ldr	r3, [pc, #196]	; (8009f20 <HAL_RCC_OscConfig+0x2c4>)
 8009e5a:	69da      	ldr	r2, [r3, #28]
 8009e5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009e60:	61da      	str	r2, [r3, #28]
 8009e62:	69db      	ldr	r3, [r3, #28]
 8009e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e68:	9300      	str	r3, [sp, #0]
 8009e6a:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8009e6c:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e6e:	4b31      	ldr	r3, [pc, #196]	; (8009f34 <HAL_RCC_OscConfig+0x2d8>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009e76:	d025      	beq.n	8009ec4 <HAL_RCC_OscConfig+0x268>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e78:	68e3      	ldr	r3, [r4, #12]
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d036      	beq.n	8009eec <HAL_RCC_OscConfig+0x290>
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d15a      	bne.n	8009f38 <HAL_RCC_OscConfig+0x2dc>
 8009e82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009e86:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8009e8a:	6a1a      	ldr	r2, [r3, #32]
 8009e8c:	f022 0201 	bic.w	r2, r2, #1
 8009e90:	621a      	str	r2, [r3, #32]
 8009e92:	6a1a      	ldr	r2, [r3, #32]
 8009e94:	f022 0204 	bic.w	r2, r2, #4
 8009e98:	621a      	str	r2, [r3, #32]
 8009e9a:	e02c      	b.n	8009ef6 <HAL_RCC_OscConfig+0x29a>
      __HAL_RCC_LSI_DISABLE();
 8009e9c:	4b22      	ldr	r3, [pc, #136]	; (8009f28 <HAL_RCC_OscConfig+0x2cc>)
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8009ea2:	f7fd ff07 	bl	8007cb4 <HAL_GetTick>
 8009ea6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ea8:	4d1d      	ldr	r5, [pc, #116]	; (8009f20 <HAL_RCC_OscConfig+0x2c4>)
 8009eaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009eac:	f013 0f02 	tst.w	r3, #2
 8009eb0:	d0c8      	beq.n	8009e44 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009eb2:	f7fd feff 	bl	8007cb4 <HAL_GetTick>
 8009eb6:	1b80      	subs	r0, r0, r6
 8009eb8:	2802      	cmp	r0, #2
 8009eba:	d9f6      	bls.n	8009eaa <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 8009ebc:	2003      	movs	r0, #3
 8009ebe:	e0db      	b.n	800a078 <HAL_RCC_OscConfig+0x41c>
    FlagStatus       pwrclkchanged = RESET;
 8009ec0:	2500      	movs	r5, #0
 8009ec2:	e7d4      	b.n	8009e6e <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009ec4:	4a1b      	ldr	r2, [pc, #108]	; (8009f34 <HAL_RCC_OscConfig+0x2d8>)
 8009ec6:	6813      	ldr	r3, [r2, #0]
 8009ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ecc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8009ece:	f7fd fef1 	bl	8007cb4 <HAL_GetTick>
 8009ed2:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ed4:	4e17      	ldr	r6, [pc, #92]	; (8009f34 <HAL_RCC_OscConfig+0x2d8>)
 8009ed6:	6833      	ldr	r3, [r6, #0]
 8009ed8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009edc:	d1cc      	bne.n	8009e78 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ede:	f7fd fee9 	bl	8007cb4 <HAL_GetTick>
 8009ee2:	1bc0      	subs	r0, r0, r7
 8009ee4:	2864      	cmp	r0, #100	; 0x64
 8009ee6:	d9f6      	bls.n	8009ed6 <HAL_RCC_OscConfig+0x27a>
          return HAL_TIMEOUT;
 8009ee8:	2003      	movs	r0, #3
 8009eea:	e0c5      	b.n	800a078 <HAL_RCC_OscConfig+0x41c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009eec:	4a0c      	ldr	r2, [pc, #48]	; (8009f20 <HAL_RCC_OscConfig+0x2c4>)
 8009eee:	6a13      	ldr	r3, [r2, #32]
 8009ef0:	f043 0301 	orr.w	r3, r3, #1
 8009ef4:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009ef6:	68e3      	ldr	r3, [r4, #12]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d033      	beq.n	8009f64 <HAL_RCC_OscConfig+0x308>
      tickstart = HAL_GetTick();
 8009efc:	f7fd feda 	bl	8007cb4 <HAL_GetTick>
 8009f00:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f02:	4e07      	ldr	r6, [pc, #28]	; (8009f20 <HAL_RCC_OscConfig+0x2c4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f04:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f08:	6a33      	ldr	r3, [r6, #32]
 8009f0a:	f013 0f02 	tst.w	r3, #2
 8009f0e:	d13b      	bne.n	8009f88 <HAL_RCC_OscConfig+0x32c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f10:	f7fd fed0 	bl	8007cb4 <HAL_GetTick>
 8009f14:	eba0 0008 	sub.w	r0, r0, r8
 8009f18:	42b8      	cmp	r0, r7
 8009f1a:	d9f5      	bls.n	8009f08 <HAL_RCC_OscConfig+0x2ac>
          return HAL_TIMEOUT;
 8009f1c:	2003      	movs	r0, #3
 8009f1e:	e0ab      	b.n	800a078 <HAL_RCC_OscConfig+0x41c>
 8009f20:	40021000 	.word	0x40021000
 8009f24:	42420000 	.word	0x42420000
 8009f28:	42420480 	.word	0x42420480
 8009f2c:	2000005c 	.word	0x2000005c
 8009f30:	10624dd3 	.word	0x10624dd3
 8009f34:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f38:	2b05      	cmp	r3, #5
 8009f3a:	d009      	beq.n	8009f50 <HAL_RCC_OscConfig+0x2f4>
 8009f3c:	4b51      	ldr	r3, [pc, #324]	; (800a084 <HAL_RCC_OscConfig+0x428>)
 8009f3e:	6a1a      	ldr	r2, [r3, #32]
 8009f40:	f022 0201 	bic.w	r2, r2, #1
 8009f44:	621a      	str	r2, [r3, #32]
 8009f46:	6a1a      	ldr	r2, [r3, #32]
 8009f48:	f022 0204 	bic.w	r2, r2, #4
 8009f4c:	621a      	str	r2, [r3, #32]
 8009f4e:	e7d2      	b.n	8009ef6 <HAL_RCC_OscConfig+0x29a>
 8009f50:	4b4c      	ldr	r3, [pc, #304]	; (800a084 <HAL_RCC_OscConfig+0x428>)
 8009f52:	6a1a      	ldr	r2, [r3, #32]
 8009f54:	f042 0204 	orr.w	r2, r2, #4
 8009f58:	621a      	str	r2, [r3, #32]
 8009f5a:	6a1a      	ldr	r2, [r3, #32]
 8009f5c:	f042 0201 	orr.w	r2, r2, #1
 8009f60:	621a      	str	r2, [r3, #32]
 8009f62:	e7c8      	b.n	8009ef6 <HAL_RCC_OscConfig+0x29a>
      tickstart = HAL_GetTick();
 8009f64:	f7fd fea6 	bl	8007cb4 <HAL_GetTick>
 8009f68:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009f6a:	4e46      	ldr	r6, [pc, #280]	; (800a084 <HAL_RCC_OscConfig+0x428>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f6c:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009f70:	6a33      	ldr	r3, [r6, #32]
 8009f72:	f013 0f02 	tst.w	r3, #2
 8009f76:	d007      	beq.n	8009f88 <HAL_RCC_OscConfig+0x32c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f78:	f7fd fe9c 	bl	8007cb4 <HAL_GetTick>
 8009f7c:	eba0 0008 	sub.w	r0, r0, r8
 8009f80:	42b8      	cmp	r0, r7
 8009f82:	d9f5      	bls.n	8009f70 <HAL_RCC_OscConfig+0x314>
          return HAL_TIMEOUT;
 8009f84:	2003      	movs	r0, #3
 8009f86:	e077      	b.n	800a078 <HAL_RCC_OscConfig+0x41c>
    if (pwrclkchanged == SET)
 8009f88:	b9e5      	cbnz	r5, 8009fc4 <HAL_RCC_OscConfig+0x368>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009f8a:	69e3      	ldr	r3, [r4, #28]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d072      	beq.n	800a076 <HAL_RCC_OscConfig+0x41a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009f90:	4a3c      	ldr	r2, [pc, #240]	; (800a084 <HAL_RCC_OscConfig+0x428>)
 8009f92:	6852      	ldr	r2, [r2, #4]
 8009f94:	f002 020c 	and.w	r2, r2, #12
 8009f98:	2a08      	cmp	r2, #8
 8009f9a:	d056      	beq.n	800a04a <HAL_RCC_OscConfig+0x3ee>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	d017      	beq.n	8009fd0 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_PLL_DISABLE();
 8009fa0:	4b39      	ldr	r3, [pc, #228]	; (800a088 <HAL_RCC_OscConfig+0x42c>)
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009fa6:	f7fd fe85 	bl	8007cb4 <HAL_GetTick>
 8009faa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009fac:	4c35      	ldr	r4, [pc, #212]	; (800a084 <HAL_RCC_OscConfig+0x428>)
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009fb4:	d047      	beq.n	800a046 <HAL_RCC_OscConfig+0x3ea>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fb6:	f7fd fe7d 	bl	8007cb4 <HAL_GetTick>
 8009fba:	1b40      	subs	r0, r0, r5
 8009fbc:	2802      	cmp	r0, #2
 8009fbe:	d9f6      	bls.n	8009fae <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 8009fc0:	2003      	movs	r0, #3
 8009fc2:	e059      	b.n	800a078 <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009fc4:	4a2f      	ldr	r2, [pc, #188]	; (800a084 <HAL_RCC_OscConfig+0x428>)
 8009fc6:	69d3      	ldr	r3, [r2, #28]
 8009fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fcc:	61d3      	str	r3, [r2, #28]
 8009fce:	e7dc      	b.n	8009f8a <HAL_RCC_OscConfig+0x32e>
        __HAL_RCC_PLL_DISABLE();
 8009fd0:	4b2d      	ldr	r3, [pc, #180]	; (800a088 <HAL_RCC_OscConfig+0x42c>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009fd6:	f7fd fe6d 	bl	8007cb4 <HAL_GetTick>
 8009fda:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009fdc:	4d29      	ldr	r5, [pc, #164]	; (800a084 <HAL_RCC_OscConfig+0x428>)
 8009fde:	682b      	ldr	r3, [r5, #0]
 8009fe0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009fe4:	d006      	beq.n	8009ff4 <HAL_RCC_OscConfig+0x398>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fe6:	f7fd fe65 	bl	8007cb4 <HAL_GetTick>
 8009fea:	1b80      	subs	r0, r0, r6
 8009fec:	2802      	cmp	r0, #2
 8009fee:	d9f6      	bls.n	8009fde <HAL_RCC_OscConfig+0x382>
            return HAL_TIMEOUT;
 8009ff0:	2003      	movs	r0, #3
 8009ff2:	e041      	b.n	800a078 <HAL_RCC_OscConfig+0x41c>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009ff4:	6a23      	ldr	r3, [r4, #32]
 8009ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ffa:	d01a      	beq.n	800a032 <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009ffc:	4921      	ldr	r1, [pc, #132]	; (800a084 <HAL_RCC_OscConfig+0x428>)
 8009ffe:	684a      	ldr	r2, [r1, #4]
 800a000:	6a23      	ldr	r3, [r4, #32]
 800a002:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a004:	4303      	orrs	r3, r0
 800a006:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800a00a:	4313      	orrs	r3, r2
 800a00c:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800a00e:	4b1e      	ldr	r3, [pc, #120]	; (800a088 <HAL_RCC_OscConfig+0x42c>)
 800a010:	2201      	movs	r2, #1
 800a012:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a014:	f7fd fe4e 	bl	8007cb4 <HAL_GetTick>
 800a018:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a01a:	4c1a      	ldr	r4, [pc, #104]	; (800a084 <HAL_RCC_OscConfig+0x428>)
 800a01c:	6823      	ldr	r3, [r4, #0]
 800a01e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800a022:	d10e      	bne.n	800a042 <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a024:	f7fd fe46 	bl	8007cb4 <HAL_GetTick>
 800a028:	1b40      	subs	r0, r0, r5
 800a02a:	2802      	cmp	r0, #2
 800a02c:	d9f6      	bls.n	800a01c <HAL_RCC_OscConfig+0x3c0>
            return HAL_TIMEOUT;
 800a02e:	2003      	movs	r0, #3
 800a030:	e022      	b.n	800a078 <HAL_RCC_OscConfig+0x41c>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a032:	4a14      	ldr	r2, [pc, #80]	; (800a084 <HAL_RCC_OscConfig+0x428>)
 800a034:	6853      	ldr	r3, [r2, #4]
 800a036:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a03a:	68a1      	ldr	r1, [r4, #8]
 800a03c:	430b      	orrs	r3, r1
 800a03e:	6053      	str	r3, [r2, #4]
 800a040:	e7dc      	b.n	8009ffc <HAL_RCC_OscConfig+0x3a0>
  return HAL_OK;
 800a042:	2000      	movs	r0, #0
 800a044:	e018      	b.n	800a078 <HAL_RCC_OscConfig+0x41c>
 800a046:	2000      	movs	r0, #0
 800a048:	e016      	b.n	800a078 <HAL_RCC_OscConfig+0x41c>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d017      	beq.n	800a07e <HAL_RCC_OscConfig+0x422>
        pll_config = RCC->CFGR;
 800a04e:	4b0d      	ldr	r3, [pc, #52]	; (800a084 <HAL_RCC_OscConfig+0x428>)
 800a050:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a052:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800a056:	6a22      	ldr	r2, [r4, #32]
 800a058:	4291      	cmp	r1, r2
 800a05a:	d001      	beq.n	800a060 <HAL_RCC_OscConfig+0x404>
          return HAL_ERROR;
 800a05c:	2001      	movs	r0, #1
 800a05e:	e00b      	b.n	800a078 <HAL_RCC_OscConfig+0x41c>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a060:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a064:	6a60      	ldr	r0, [r4, #36]	; 0x24
    return HAL_ERROR;
 800a066:	1a18      	subs	r0, r3, r0
 800a068:	bf18      	it	ne
 800a06a:	2001      	movne	r0, #1
 800a06c:	e004      	b.n	800a078 <HAL_RCC_OscConfig+0x41c>
 800a06e:	2001      	movs	r0, #1
}
 800a070:	4770      	bx	lr
        return HAL_ERROR;
 800a072:	2001      	movs	r0, #1
 800a074:	e000      	b.n	800a078 <HAL_RCC_OscConfig+0x41c>
  return HAL_OK;
 800a076:	2000      	movs	r0, #0
}
 800a078:	b002      	add	sp, #8
 800a07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 800a07e:	2001      	movs	r0, #1
 800a080:	e7fa      	b.n	800a078 <HAL_RCC_OscConfig+0x41c>
 800a082:	bf00      	nop
 800a084:	40021000 	.word	0x40021000
 800a088:	42420060 	.word	0x42420060

0800a08c <HAL_RCC_GetSysClockFreq>:
{
 800a08c:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800a08e:	4b17      	ldr	r3, [pc, #92]	; (800a0ec <HAL_RCC_GetSysClockFreq+0x60>)
 800a090:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a092:	f10d 0c18 	add.w	ip, sp, #24
 800a096:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800a09a:	2301      	movs	r3, #1
 800a09c:	f88d 3004 	strb.w	r3, [sp, #4]
 800a0a0:	2302      	movs	r3, #2
 800a0a2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800a0a6:	4b12      	ldr	r3, [pc, #72]	; (800a0f0 <HAL_RCC_GetSysClockFreq+0x64>)
 800a0a8:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800a0aa:	f003 020c 	and.w	r2, r3, #12
 800a0ae:	2a08      	cmp	r2, #8
 800a0b0:	d119      	bne.n	800a0e6 <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a0b2:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800a0b6:	4462      	add	r2, ip
 800a0b8:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a0bc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800a0c0:	d104      	bne.n	800a0cc <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a0c2:	480c      	ldr	r0, [pc, #48]	; (800a0f4 <HAL_RCC_GetSysClockFreq+0x68>)
 800a0c4:	fb00 f002 	mul.w	r0, r0, r2
}
 800a0c8:	b006      	add	sp, #24
 800a0ca:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a0cc:	4b08      	ldr	r3, [pc, #32]	; (800a0f0 <HAL_RCC_GetSysClockFreq+0x64>)
 800a0ce:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a0d0:	4809      	ldr	r0, [pc, #36]	; (800a0f8 <HAL_RCC_GetSysClockFreq+0x6c>)
 800a0d2:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a0d6:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800a0da:	4463      	add	r3, ip
 800a0dc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a0e0:	fbb0 f0f3 	udiv	r0, r0, r3
 800a0e4:	e7f0      	b.n	800a0c8 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 800a0e6:	4804      	ldr	r0, [pc, #16]	; (800a0f8 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800a0e8:	e7ee      	b.n	800a0c8 <HAL_RCC_GetSysClockFreq+0x3c>
 800a0ea:	bf00      	nop
 800a0ec:	0800bda8 	.word	0x0800bda8
 800a0f0:	40021000 	.word	0x40021000
 800a0f4:	003d0900 	.word	0x003d0900
 800a0f8:	007a1200 	.word	0x007a1200

0800a0fc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	f000 80a6 	beq.w	800a24e <HAL_RCC_ClockConfig+0x152>
{
 800a102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a106:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a108:	4b53      	ldr	r3, [pc, #332]	; (800a258 <HAL_RCC_ClockConfig+0x15c>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f003 0307 	and.w	r3, r3, #7
 800a110:	428b      	cmp	r3, r1
 800a112:	d20d      	bcs.n	800a130 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a114:	4a50      	ldr	r2, [pc, #320]	; (800a258 <HAL_RCC_ClockConfig+0x15c>)
 800a116:	6813      	ldr	r3, [r2, #0]
 800a118:	f023 0307 	bic.w	r3, r3, #7
 800a11c:	430b      	orrs	r3, r1
 800a11e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a120:	6813      	ldr	r3, [r2, #0]
 800a122:	f003 0307 	and.w	r3, r3, #7
 800a126:	428b      	cmp	r3, r1
 800a128:	d002      	beq.n	800a130 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800a12a:	2001      	movs	r0, #1
}
 800a12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a130:	6823      	ldr	r3, [r4, #0]
 800a132:	f013 0f02 	tst.w	r3, #2
 800a136:	d017      	beq.n	800a168 <HAL_RCC_ClockConfig+0x6c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a138:	f013 0f04 	tst.w	r3, #4
 800a13c:	d004      	beq.n	800a148 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a13e:	4a47      	ldr	r2, [pc, #284]	; (800a25c <HAL_RCC_ClockConfig+0x160>)
 800a140:	6853      	ldr	r3, [r2, #4]
 800a142:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a146:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a148:	6823      	ldr	r3, [r4, #0]
 800a14a:	f013 0f08 	tst.w	r3, #8
 800a14e:	d004      	beq.n	800a15a <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a150:	4a42      	ldr	r2, [pc, #264]	; (800a25c <HAL_RCC_ClockConfig+0x160>)
 800a152:	6853      	ldr	r3, [r2, #4]
 800a154:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a158:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a15a:	4a40      	ldr	r2, [pc, #256]	; (800a25c <HAL_RCC_ClockConfig+0x160>)
 800a15c:	6853      	ldr	r3, [r2, #4]
 800a15e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a162:	68a0      	ldr	r0, [r4, #8]
 800a164:	4303      	orrs	r3, r0
 800a166:	6053      	str	r3, [r2, #4]
 800a168:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	f013 0f01 	tst.w	r3, #1
 800a170:	d032      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0xdc>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a172:	6862      	ldr	r2, [r4, #4]
 800a174:	2a01      	cmp	r2, #1
 800a176:	d021      	beq.n	800a1bc <HAL_RCC_ClockConfig+0xc0>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a178:	2a02      	cmp	r2, #2
 800a17a:	d026      	beq.n	800a1ca <HAL_RCC_ClockConfig+0xce>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a17c:	4b37      	ldr	r3, [pc, #220]	; (800a25c <HAL_RCC_ClockConfig+0x160>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f013 0f02 	tst.w	r3, #2
 800a184:	d065      	beq.n	800a252 <HAL_RCC_ClockConfig+0x156>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a186:	4935      	ldr	r1, [pc, #212]	; (800a25c <HAL_RCC_ClockConfig+0x160>)
 800a188:	684b      	ldr	r3, [r1, #4]
 800a18a:	f023 0303 	bic.w	r3, r3, #3
 800a18e:	4313      	orrs	r3, r2
 800a190:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800a192:	f7fd fd8f 	bl	8007cb4 <HAL_GetTick>
 800a196:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a198:	4e30      	ldr	r6, [pc, #192]	; (800a25c <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a19a:	f241 3788 	movw	r7, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a19e:	6873      	ldr	r3, [r6, #4]
 800a1a0:	f003 030c 	and.w	r3, r3, #12
 800a1a4:	6862      	ldr	r2, [r4, #4]
 800a1a6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800a1aa:	d015      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0xdc>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1ac:	f7fd fd82 	bl	8007cb4 <HAL_GetTick>
 800a1b0:	eba0 0008 	sub.w	r0, r0, r8
 800a1b4:	42b8      	cmp	r0, r7
 800a1b6:	d9f2      	bls.n	800a19e <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 800a1b8:	2003      	movs	r0, #3
 800a1ba:	e7b7      	b.n	800a12c <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a1bc:	4b27      	ldr	r3, [pc, #156]	; (800a25c <HAL_RCC_ClockConfig+0x160>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a1c4:	d1df      	bne.n	800a186 <HAL_RCC_ClockConfig+0x8a>
        return HAL_ERROR;
 800a1c6:	2001      	movs	r0, #1
 800a1c8:	e7b0      	b.n	800a12c <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a1ca:	4b24      	ldr	r3, [pc, #144]	; (800a25c <HAL_RCC_ClockConfig+0x160>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800a1d2:	d1d8      	bne.n	800a186 <HAL_RCC_ClockConfig+0x8a>
        return HAL_ERROR;
 800a1d4:	2001      	movs	r0, #1
 800a1d6:	e7a9      	b.n	800a12c <HAL_RCC_ClockConfig+0x30>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a1d8:	4b1f      	ldr	r3, [pc, #124]	; (800a258 <HAL_RCC_ClockConfig+0x15c>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 0307 	and.w	r3, r3, #7
 800a1e0:	42ab      	cmp	r3, r5
 800a1e2:	d90c      	bls.n	800a1fe <HAL_RCC_ClockConfig+0x102>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1e4:	4a1c      	ldr	r2, [pc, #112]	; (800a258 <HAL_RCC_ClockConfig+0x15c>)
 800a1e6:	6813      	ldr	r3, [r2, #0]
 800a1e8:	f023 0307 	bic.w	r3, r3, #7
 800a1ec:	432b      	orrs	r3, r5
 800a1ee:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1f0:	6813      	ldr	r3, [r2, #0]
 800a1f2:	f003 0307 	and.w	r3, r3, #7
 800a1f6:	42ab      	cmp	r3, r5
 800a1f8:	d001      	beq.n	800a1fe <HAL_RCC_ClockConfig+0x102>
    return HAL_ERROR;
 800a1fa:	2001      	movs	r0, #1
 800a1fc:	e796      	b.n	800a12c <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1fe:	6823      	ldr	r3, [r4, #0]
 800a200:	f013 0f04 	tst.w	r3, #4
 800a204:	d006      	beq.n	800a214 <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a206:	4a15      	ldr	r2, [pc, #84]	; (800a25c <HAL_RCC_ClockConfig+0x160>)
 800a208:	6853      	ldr	r3, [r2, #4]
 800a20a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a20e:	68e1      	ldr	r1, [r4, #12]
 800a210:	430b      	orrs	r3, r1
 800a212:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a214:	6823      	ldr	r3, [r4, #0]
 800a216:	f013 0f08 	tst.w	r3, #8
 800a21a:	d007      	beq.n	800a22c <HAL_RCC_ClockConfig+0x130>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a21c:	4a0f      	ldr	r2, [pc, #60]	; (800a25c <HAL_RCC_ClockConfig+0x160>)
 800a21e:	6853      	ldr	r3, [r2, #4]
 800a220:	6921      	ldr	r1, [r4, #16]
 800a222:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800a226:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a22a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a22c:	f7ff ff2e 	bl	800a08c <HAL_RCC_GetSysClockFreq>
 800a230:	4b0a      	ldr	r3, [pc, #40]	; (800a25c <HAL_RCC_ClockConfig+0x160>)
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a238:	4a09      	ldr	r2, [pc, #36]	; (800a260 <HAL_RCC_ClockConfig+0x164>)
 800a23a:	5cd3      	ldrb	r3, [r2, r3]
 800a23c:	40d8      	lsrs	r0, r3
 800a23e:	4b09      	ldr	r3, [pc, #36]	; (800a264 <HAL_RCC_ClockConfig+0x168>)
 800a240:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800a242:	4b09      	ldr	r3, [pc, #36]	; (800a268 <HAL_RCC_ClockConfig+0x16c>)
 800a244:	6818      	ldr	r0, [r3, #0]
 800a246:	f7fd fcf1 	bl	8007c2c <HAL_InitTick>
  return HAL_OK;
 800a24a:	2000      	movs	r0, #0
 800a24c:	e76e      	b.n	800a12c <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 800a24e:	2001      	movs	r0, #1
}
 800a250:	4770      	bx	lr
        return HAL_ERROR;
 800a252:	2001      	movs	r0, #1
 800a254:	e76a      	b.n	800a12c <HAL_RCC_ClockConfig+0x30>
 800a256:	bf00      	nop
 800a258:	40022000 	.word	0x40022000
 800a25c:	40021000 	.word	0x40021000
 800a260:	0800be44 	.word	0x0800be44
 800a264:	2000005c 	.word	0x2000005c
 800a268:	20000064 	.word	0x20000064

0800a26c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a26c:	4b04      	ldr	r3, [pc, #16]	; (800a280 <HAL_RCC_GetPCLK1Freq+0x14>)
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800a274:	4a03      	ldr	r2, [pc, #12]	; (800a284 <HAL_RCC_GetPCLK1Freq+0x18>)
 800a276:	5cd3      	ldrb	r3, [r2, r3]
 800a278:	4a03      	ldr	r2, [pc, #12]	; (800a288 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800a27a:	6810      	ldr	r0, [r2, #0]
}
 800a27c:	40d8      	lsrs	r0, r3
 800a27e:	4770      	bx	lr
 800a280:	40021000 	.word	0x40021000
 800a284:	0800be54 	.word	0x0800be54
 800a288:	2000005c 	.word	0x2000005c

0800a28c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a28c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a290:	b083      	sub	sp, #12
 800a292:	4680      	mov	r8, r0
 800a294:	460e      	mov	r6, r1
 800a296:	4615      	mov	r5, r2
 800a298:	461c      	mov	r4, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a29a:	f7fd fd0b 	bl	8007cb4 <HAL_GetTick>
 800a29e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a2a0:	4427      	add	r7, r4
 800a2a2:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 800a2a4:	f7fd fd06 	bl	8007cb4 <HAL_GetTick>
 800a2a8:	4681      	mov	r9, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a2aa:	4b2d      	ldr	r3, [pc, #180]	; (800a360 <SPI_WaitFlagStateUntilTimeout+0xd4>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800a2b2:	fb07 f303 	mul.w	r3, r7, r3
 800a2b6:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a2b8:	f8d8 2000 	ldr.w	r2, [r8]
 800a2bc:	6893      	ldr	r3, [r2, #8]
 800a2be:	ea36 0303 	bics.w	r3, r6, r3
 800a2c2:	bf0c      	ite	eq
 800a2c4:	2301      	moveq	r3, #1
 800a2c6:	2300      	movne	r3, #0
 800a2c8:	42ab      	cmp	r3, r5
 800a2ca:	d045      	beq.n	800a358 <SPI_WaitFlagStateUntilTimeout+0xcc>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a2cc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800a2d0:	d0f4      	beq.n	800a2bc <SPI_WaitFlagStateUntilTimeout+0x30>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a2d2:	f7fd fcef 	bl	8007cb4 <HAL_GetTick>
 800a2d6:	eba0 0009 	sub.w	r0, r0, r9
 800a2da:	42b8      	cmp	r0, r7
 800a2dc:	d208      	bcs.n	800a2f0 <SPI_WaitFlagStateUntilTimeout+0x64>
 800a2de:	b13f      	cbz	r7, 800a2f0 <SPI_WaitFlagStateUntilTimeout+0x64>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a2e0:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	bf08      	it	eq
 800a2e6:	2700      	moveq	r7, #0
      }
      count--;
 800a2e8:	9b01      	ldr	r3, [sp, #4]
 800a2ea:	3b01      	subs	r3, #1
 800a2ec:	9301      	str	r3, [sp, #4]
 800a2ee:	e7e3      	b.n	800a2b8 <SPI_WaitFlagStateUntilTimeout+0x2c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a2f0:	f8d8 2000 	ldr.w	r2, [r8]
 800a2f4:	6853      	ldr	r3, [r2, #4]
 800a2f6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800a2fa:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a2fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a300:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a304:	d00c      	beq.n	800a320 <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a306:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800a30a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a30e:	d016      	beq.n	800a33e <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 800a310:	2301      	movs	r3, #1
 800a312:	f888 3051 	strb.w	r3, [r8, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800a316:	2300      	movs	r3, #0
 800a318:	f888 3050 	strb.w	r3, [r8, #80]	; 0x50
        return HAL_TIMEOUT;
 800a31c:	2003      	movs	r0, #3
 800a31e:	e01c      	b.n	800a35a <SPI_WaitFlagStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a320:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a328:	d002      	beq.n	800a330 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a32a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a32e:	d1ea      	bne.n	800a306 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 800a330:	f8d8 2000 	ldr.w	r2, [r8]
 800a334:	6813      	ldr	r3, [r2, #0]
 800a336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a33a:	6013      	str	r3, [r2, #0]
 800a33c:	e7e3      	b.n	800a306 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 800a33e:	f8d8 2000 	ldr.w	r2, [r8]
 800a342:	6813      	ldr	r3, [r2, #0]
 800a344:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a348:	6013      	str	r3, [r2, #0]
 800a34a:	f8d8 2000 	ldr.w	r2, [r8]
 800a34e:	6813      	ldr	r3, [r2, #0]
 800a350:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a354:	6013      	str	r3, [r2, #0]
 800a356:	e7db      	b.n	800a310 <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 800a358:	2000      	movs	r0, #0
}
 800a35a:	b003      	add	sp, #12
 800a35c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a360:	2000005c 	.word	0x2000005c

0800a364 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a364:	b510      	push	{r4, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a36a:	9200      	str	r2, [sp, #0]
 800a36c:	460b      	mov	r3, r1
 800a36e:	2200      	movs	r2, #0
 800a370:	2180      	movs	r1, #128	; 0x80
 800a372:	f7ff ff8b 	bl	800a28c <SPI_WaitFlagStateUntilTimeout>
 800a376:	4603      	mov	r3, r0
 800a378:	b910      	cbnz	r0, 800a380 <SPI_EndRxTxTransaction+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	b002      	add	sp, #8
 800a37e:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a380:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a382:	f043 0320 	orr.w	r3, r3, #32
 800a386:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 800a388:	2303      	movs	r3, #3
 800a38a:	e7f6      	b.n	800a37a <SPI_EndRxTxTransaction+0x16>

0800a38c <HAL_SPI_Init>:
  if (hspi == NULL)
 800a38c:	2800      	cmp	r0, #0
 800a38e:	d056      	beq.n	800a43e <HAL_SPI_Init+0xb2>
{
 800a390:	b510      	push	{r4, lr}
 800a392:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a394:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a396:	b933      	cbnz	r3, 800a3a6 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a398:	6843      	ldr	r3, [r0, #4]
 800a39a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a39e:	d005      	beq.n	800a3ac <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	61c3      	str	r3, [r0, #28]
 800a3a4:	e002      	b.n	800a3ac <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a3aa:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800a3b0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d03c      	beq.n	800a432 <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800a3be:	6822      	ldr	r2, [r4, #0]
 800a3c0:	6813      	ldr	r3, [r2, #0]
 800a3c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3c6:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a3c8:	6822      	ldr	r2, [r4, #0]
 800a3ca:	6863      	ldr	r3, [r4, #4]
 800a3cc:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800a3d0:	68a1      	ldr	r1, [r4, #8]
 800a3d2:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800a3d6:	430b      	orrs	r3, r1
 800a3d8:	68e1      	ldr	r1, [r4, #12]
 800a3da:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 800a3de:	430b      	orrs	r3, r1
 800a3e0:	6921      	ldr	r1, [r4, #16]
 800a3e2:	f001 0102 	and.w	r1, r1, #2
 800a3e6:	430b      	orrs	r3, r1
 800a3e8:	6961      	ldr	r1, [r4, #20]
 800a3ea:	f001 0101 	and.w	r1, r1, #1
 800a3ee:	430b      	orrs	r3, r1
 800a3f0:	69a1      	ldr	r1, [r4, #24]
 800a3f2:	f401 7100 	and.w	r1, r1, #512	; 0x200
 800a3f6:	430b      	orrs	r3, r1
 800a3f8:	69e1      	ldr	r1, [r4, #28]
 800a3fa:	f001 0138 	and.w	r1, r1, #56	; 0x38
 800a3fe:	430b      	orrs	r3, r1
 800a400:	6a21      	ldr	r1, [r4, #32]
 800a402:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800a406:	430b      	orrs	r3, r1
 800a408:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a40a:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800a40e:	430b      	orrs	r3, r1
 800a410:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800a412:	6822      	ldr	r2, [r4, #0]
 800a414:	8b63      	ldrh	r3, [r4, #26]
 800a416:	f003 0304 	and.w	r3, r3, #4
 800a41a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a41c:	6822      	ldr	r2, [r4, #0]
 800a41e:	69d3      	ldr	r3, [r2, #28]
 800a420:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a424:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a426:	2000      	movs	r0, #0
 800a428:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a42a:	2301      	movs	r3, #1
 800a42c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800a430:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800a432:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800a436:	4620      	mov	r0, r4
 800a438:	f7fd fb18 	bl	8007a6c <HAL_SPI_MspInit>
 800a43c:	e7bc      	b.n	800a3b8 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 800a43e:	2001      	movs	r0, #1
}
 800a440:	4770      	bx	lr

0800a442 <HAL_SPI_TransmitReceive>:
{
 800a442:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a446:	b083      	sub	sp, #12
 800a448:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 800a44c:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 800a450:	2c01      	cmp	r4, #1
 800a452:	f000 810f 	beq.w	800a674 <HAL_SPI_TransmitReceive+0x232>
 800a456:	461d      	mov	r5, r3
 800a458:	4617      	mov	r7, r2
 800a45a:	460e      	mov	r6, r1
 800a45c:	4604      	mov	r4, r0
 800a45e:	2301      	movs	r3, #1
 800a460:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800a464:	f7fd fc26 	bl	8007cb4 <HAL_GetTick>
 800a468:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 800a46a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800a46e:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a470:	2801      	cmp	r0, #1
 800a472:	d016      	beq.n	800a4a2 <HAL_SPI_TransmitReceive+0x60>
 800a474:	6863      	ldr	r3, [r4, #4]
 800a476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a47a:	d00a      	beq.n	800a492 <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_BUSY;
 800a47c:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 800a47e:	2201      	movs	r2, #1
 800a480:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a484:	2200      	movs	r2, #0
 800a486:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	b003      	add	sp, #12
 800a48e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a492:	68a3      	ldr	r3, [r4, #8]
 800a494:	2b00      	cmp	r3, #0
 800a496:	f040 80e1 	bne.w	800a65c <HAL_SPI_TransmitReceive+0x21a>
 800a49a:	2804      	cmp	r0, #4
 800a49c:	d001      	beq.n	800a4a2 <HAL_SPI_TransmitReceive+0x60>
    errorcode = HAL_BUSY;
 800a49e:	2302      	movs	r3, #2
 800a4a0:	e7ed      	b.n	800a47e <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a4a2:	2e00      	cmp	r6, #0
 800a4a4:	f000 80dc 	beq.w	800a660 <HAL_SPI_TransmitReceive+0x21e>
 800a4a8:	2f00      	cmp	r7, #0
 800a4aa:	f000 80db 	beq.w	800a664 <HAL_SPI_TransmitReceive+0x222>
 800a4ae:	2d00      	cmp	r5, #0
 800a4b0:	f000 80da 	beq.w	800a668 <HAL_SPI_TransmitReceive+0x226>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a4b4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a4bc:	bf1c      	itt	ne
 800a4be:	2305      	movne	r3, #5
 800a4c0:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a4c8:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a4ca:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a4cc:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a4ce:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a4d0:	86e5      	strh	r5, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a4d2:	86a5      	strh	r5, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 800a4d4:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a4d6:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a4d8:	6823      	ldr	r3, [r4, #0]
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a4e0:	d103      	bne.n	800a4ea <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4e8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a4ea:	68e3      	ldr	r3, [r4, #12]
 800a4ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4f0:	d012      	beq.n	800a518 <HAL_SPI_TransmitReceive+0xd6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a4f2:	6863      	ldr	r3, [r4, #4]
 800a4f4:	b10b      	cbz	r3, 800a4fa <HAL_SPI_TransmitReceive+0xb8>
 800a4f6:	2d01      	cmp	r5, #1
 800a4f8:	d10a      	bne.n	800a510 <HAL_SPI_TransmitReceive+0xce>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a4fe:	7812      	ldrb	r2, [r2, #0]
 800a500:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a502:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a504:	3301      	adds	r3, #1
 800a506:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800a508:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a50a:	3b01      	subs	r3, #1
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800a510:	2501      	movs	r5, #1
        txallowed = 0U;
 800a512:	2700      	movs	r7, #0
        txallowed = 1U;
 800a514:	462e      	mov	r6, r5
 800a516:	e068      	b.n	800a5ea <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a518:	6863      	ldr	r3, [r4, #4]
 800a51a:	b10b      	cbz	r3, 800a520 <HAL_SPI_TransmitReceive+0xde>
 800a51c:	2d01      	cmp	r5, #1
 800a51e:	d10a      	bne.n	800a536 <HAL_SPI_TransmitReceive+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a520:	6823      	ldr	r3, [r4, #0]
 800a522:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a524:	8812      	ldrh	r2, [r2, #0]
 800a526:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a528:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a52a:	3302      	adds	r3, #2
 800a52c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800a52e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a530:	3b01      	subs	r3, #1
 800a532:	b29b      	uxth	r3, r3
 800a534:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800a536:	2501      	movs	r5, #1
        txallowed = 0U;
 800a538:	2700      	movs	r7, #0
        txallowed = 1U;
 800a53a:	462e      	mov	r6, r5
 800a53c:	e01b      	b.n	800a576 <HAL_SPI_TransmitReceive+0x134>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a53e:	6823      	ldr	r3, [r4, #0]
 800a540:	689a      	ldr	r2, [r3, #8]
 800a542:	f012 0f01 	tst.w	r2, #1
 800a546:	d00d      	beq.n	800a564 <HAL_SPI_TransmitReceive+0x122>
 800a548:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a54a:	b292      	uxth	r2, r2
 800a54c:	b152      	cbz	r2, 800a564 <HAL_SPI_TransmitReceive+0x122>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a54e:	68da      	ldr	r2, [r3, #12]
 800a550:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a552:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a554:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a556:	3302      	adds	r3, #2
 800a558:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800a55a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a55c:	3b01      	subs	r3, #1
 800a55e:	b29b      	uxth	r3, r3
 800a560:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800a562:	4635      	mov	r5, r6
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a564:	f7fd fba6 	bl	8007cb4 <HAL_GetTick>
 800a568:	eba0 0009 	sub.w	r0, r0, r9
 800a56c:	4540      	cmp	r0, r8
 800a56e:	d302      	bcc.n	800a576 <HAL_SPI_TransmitReceive+0x134>
 800a570:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800a574:	d17a      	bne.n	800a66c <HAL_SPI_TransmitReceive+0x22a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a576:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a578:	b29b      	uxth	r3, r3
 800a57a:	b91b      	cbnz	r3, 800a584 <HAL_SPI_TransmitReceive+0x142>
 800a57c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a57e:	b29b      	uxth	r3, r3
 800a580:	2b00      	cmp	r3, #0
 800a582:	d054      	beq.n	800a62e <HAL_SPI_TransmitReceive+0x1ec>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a584:	6823      	ldr	r3, [r4, #0]
 800a586:	689a      	ldr	r2, [r3, #8]
 800a588:	f012 0f02 	tst.w	r2, #2
 800a58c:	d0d7      	beq.n	800a53e <HAL_SPI_TransmitReceive+0xfc>
 800a58e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800a590:	b292      	uxth	r2, r2
 800a592:	2a00      	cmp	r2, #0
 800a594:	d0d3      	beq.n	800a53e <HAL_SPI_TransmitReceive+0xfc>
 800a596:	2d00      	cmp	r5, #0
 800a598:	d0d1      	beq.n	800a53e <HAL_SPI_TransmitReceive+0xfc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a59a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a59c:	8812      	ldrh	r2, [r2, #0]
 800a59e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a5a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a5a2:	3302      	adds	r3, #2
 800a5a4:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800a5a6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800a5ae:	463d      	mov	r5, r7
 800a5b0:	e7c5      	b.n	800a53e <HAL_SPI_TransmitReceive+0xfc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a5b2:	6823      	ldr	r3, [r4, #0]
 800a5b4:	689a      	ldr	r2, [r3, #8]
 800a5b6:	f012 0f01 	tst.w	r2, #1
 800a5ba:	d00d      	beq.n	800a5d8 <HAL_SPI_TransmitReceive+0x196>
 800a5bc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a5be:	b292      	uxth	r2, r2
 800a5c0:	b152      	cbz	r2, 800a5d8 <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a5c2:	68da      	ldr	r2, [r3, #12]
 800a5c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a5c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a5c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800a5ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800a5d6:	4635      	mov	r5, r6
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a5d8:	f7fd fb6c 	bl	8007cb4 <HAL_GetTick>
 800a5dc:	eba0 0009 	sub.w	r0, r0, r9
 800a5e0:	4540      	cmp	r0, r8
 800a5e2:	d31f      	bcc.n	800a624 <HAL_SPI_TransmitReceive+0x1e2>
 800a5e4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800a5e8:	d142      	bne.n	800a670 <HAL_SPI_TransmitReceive+0x22e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a5ea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	b913      	cbnz	r3, 800a5f6 <HAL_SPI_TransmitReceive+0x1b4>
 800a5f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	b1db      	cbz	r3, 800a62e <HAL_SPI_TransmitReceive+0x1ec>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a5f6:	6823      	ldr	r3, [r4, #0]
 800a5f8:	689a      	ldr	r2, [r3, #8]
 800a5fa:	f012 0f02 	tst.w	r2, #2
 800a5fe:	d0d8      	beq.n	800a5b2 <HAL_SPI_TransmitReceive+0x170>
 800a600:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800a602:	b292      	uxth	r2, r2
 800a604:	2a00      	cmp	r2, #0
 800a606:	d0d4      	beq.n	800a5b2 <HAL_SPI_TransmitReceive+0x170>
 800a608:	2d01      	cmp	r5, #1
 800a60a:	d1d2      	bne.n	800a5b2 <HAL_SPI_TransmitReceive+0x170>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a60c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a60e:	7812      	ldrb	r2, [r2, #0]
 800a610:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800a612:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a614:	3301      	adds	r3, #1
 800a616:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800a618:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a61a:	3b01      	subs	r3, #1
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800a620:	463d      	mov	r5, r7
 800a622:	e7c6      	b.n	800a5b2 <HAL_SPI_TransmitReceive+0x170>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a624:	f1b8 0f00 	cmp.w	r8, #0
 800a628:	d1df      	bne.n	800a5ea <HAL_SPI_TransmitReceive+0x1a8>
        errorcode = HAL_TIMEOUT;
 800a62a:	2303      	movs	r3, #3
 800a62c:	e727      	b.n	800a47e <HAL_SPI_TransmitReceive+0x3c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a62e:	464a      	mov	r2, r9
 800a630:	4641      	mov	r1, r8
 800a632:	4620      	mov	r0, r4
 800a634:	f7ff fe96 	bl	800a364 <SPI_EndRxTxTransaction>
 800a638:	4603      	mov	r3, r0
 800a63a:	b118      	cbz	r0, 800a644 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a63c:	2320      	movs	r3, #32
 800a63e:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a640:	2301      	movs	r3, #1
    goto error;
 800a642:	e71c      	b.n	800a47e <HAL_SPI_TransmitReceive+0x3c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a644:	68a2      	ldr	r2, [r4, #8]
 800a646:	2a00      	cmp	r2, #0
 800a648:	f47f af19 	bne.w	800a47e <HAL_SPI_TransmitReceive+0x3c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a64c:	9201      	str	r2, [sp, #4]
 800a64e:	6822      	ldr	r2, [r4, #0]
 800a650:	68d1      	ldr	r1, [r2, #12]
 800a652:	9101      	str	r1, [sp, #4]
 800a654:	6892      	ldr	r2, [r2, #8]
 800a656:	9201      	str	r2, [sp, #4]
 800a658:	9a01      	ldr	r2, [sp, #4]
 800a65a:	e710      	b.n	800a47e <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_BUSY;
 800a65c:	2302      	movs	r3, #2
 800a65e:	e70e      	b.n	800a47e <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	e70c      	b.n	800a47e <HAL_SPI_TransmitReceive+0x3c>
 800a664:	2301      	movs	r3, #1
 800a666:	e70a      	b.n	800a47e <HAL_SPI_TransmitReceive+0x3c>
 800a668:	2301      	movs	r3, #1
 800a66a:	e708      	b.n	800a47e <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 800a66c:	2303      	movs	r3, #3
 800a66e:	e706      	b.n	800a47e <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 800a670:	2303      	movs	r3, #3
 800a672:	e704      	b.n	800a47e <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 800a674:	2302      	movs	r3, #2
 800a676:	e708      	b.n	800a48a <HAL_SPI_TransmitReceive+0x48>

0800a678 <HAL_SPI_ErrorCallback>:
}
 800a678:	4770      	bx	lr
	...

0800a67c <HAL_SPI_IRQHandler>:
{
 800a67c:	b530      	push	{r4, r5, lr}
 800a67e:	b085      	sub	sp, #20
 800a680:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800a682:	6801      	ldr	r1, [r0, #0]
 800a684:	6848      	ldr	r0, [r1, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800a686:	688a      	ldr	r2, [r1, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a688:	0993      	lsrs	r3, r2, #6
 800a68a:	f013 0501 	ands.w	r5, r3, #1
 800a68e:	d109      	bne.n	800a6a4 <HAL_SPI_IRQHandler+0x28>
 800a690:	f012 0f01 	tst.w	r2, #1
 800a694:	d006      	beq.n	800a6a4 <HAL_SPI_IRQHandler+0x28>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a696:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a69a:	d003      	beq.n	800a6a4 <HAL_SPI_IRQHandler+0x28>
    hspi->RxISR(hspi);
 800a69c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a69e:	4620      	mov	r0, r4
 800a6a0:	4798      	blx	r3
    return;
 800a6a2:	e008      	b.n	800a6b6 <HAL_SPI_IRQHandler+0x3a>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a6a4:	f012 0f02 	tst.w	r2, #2
 800a6a8:	d007      	beq.n	800a6ba <HAL_SPI_IRQHandler+0x3e>
 800a6aa:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a6ae:	d004      	beq.n	800a6ba <HAL_SPI_IRQHandler+0x3e>
    hspi->TxISR(hspi);
 800a6b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	4798      	blx	r3
}
 800a6b6:	b005      	add	sp, #20
 800a6b8:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800a6ba:	0952      	lsrs	r2, r2, #5
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	f013 0f01 	tst.w	r3, #1
 800a6c2:	d0f8      	beq.n	800a6b6 <HAL_SPI_IRQHandler+0x3a>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a6c4:	f010 0f20 	tst.w	r0, #32
 800a6c8:	d0f5      	beq.n	800a6b6 <HAL_SPI_IRQHandler+0x3a>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a6ca:	b17d      	cbz	r5, 800a6ec <HAL_SPI_IRQHandler+0x70>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a6cc:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	2b03      	cmp	r3, #3
 800a6d4:	d048      	beq.n	800a768 <HAL_SPI_IRQHandler+0xec>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a6d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a6d8:	f043 0304 	orr.w	r3, r3, #4
 800a6dc:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a6de:	2300      	movs	r3, #0
 800a6e0:	9301      	str	r3, [sp, #4]
 800a6e2:	68cb      	ldr	r3, [r1, #12]
 800a6e4:	9301      	str	r3, [sp, #4]
 800a6e6:	688b      	ldr	r3, [r1, #8]
 800a6e8:	9301      	str	r3, [sp, #4]
 800a6ea:	9b01      	ldr	r3, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a6ec:	f012 0f01 	tst.w	r2, #1
 800a6f0:	d00c      	beq.n	800a70c <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a6f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a6f4:	f043 0301 	orr.w	r3, r3, #1
 800a6f8:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	9303      	str	r3, [sp, #12]
 800a6fe:	688b      	ldr	r3, [r1, #8]
 800a700:	9303      	str	r3, [sp, #12]
 800a702:	680b      	ldr	r3, [r1, #0]
 800a704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a708:	600b      	str	r3, [r1, #0]
 800a70a:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a70c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d0d1      	beq.n	800a6b6 <HAL_SPI_IRQHandler+0x3a>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a712:	6822      	ldr	r2, [r4, #0]
 800a714:	6853      	ldr	r3, [r2, #4]
 800a716:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800a71a:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800a71c:	2301      	movs	r3, #1
 800a71e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a722:	f010 0f03 	tst.w	r0, #3
 800a726:	d027      	beq.n	800a778 <HAL_SPI_IRQHandler+0xfc>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a728:	6822      	ldr	r2, [r4, #0]
 800a72a:	6853      	ldr	r3, [r2, #4]
 800a72c:	f023 0303 	bic.w	r3, r3, #3
 800a730:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800a732:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a734:	b14b      	cbz	r3, 800a74a <HAL_SPI_IRQHandler+0xce>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a736:	4a12      	ldr	r2, [pc, #72]	; (800a780 <HAL_SPI_IRQHandler+0x104>)
 800a738:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a73a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a73c:	f7fd fb3c 	bl	8007db8 <HAL_DMA_Abort_IT>
 800a740:	b118      	cbz	r0, 800a74a <HAL_SPI_IRQHandler+0xce>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a742:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a748:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a74a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d0b2      	beq.n	800a6b6 <HAL_SPI_IRQHandler+0x3a>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a750:	4a0b      	ldr	r2, [pc, #44]	; (800a780 <HAL_SPI_IRQHandler+0x104>)
 800a752:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a754:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a756:	f7fd fb2f 	bl	8007db8 <HAL_DMA_Abort_IT>
 800a75a:	2800      	cmp	r0, #0
 800a75c:	d0ab      	beq.n	800a6b6 <HAL_SPI_IRQHandler+0x3a>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a75e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a764:	6563      	str	r3, [r4, #84]	; 0x54
 800a766:	e7a6      	b.n	800a6b6 <HAL_SPI_IRQHandler+0x3a>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a768:	2300      	movs	r3, #0
 800a76a:	9302      	str	r3, [sp, #8]
 800a76c:	68cb      	ldr	r3, [r1, #12]
 800a76e:	9302      	str	r3, [sp, #8]
 800a770:	688b      	ldr	r3, [r1, #8]
 800a772:	9302      	str	r3, [sp, #8]
 800a774:	9b02      	ldr	r3, [sp, #8]
        return;
 800a776:	e79e      	b.n	800a6b6 <HAL_SPI_IRQHandler+0x3a>
        HAL_SPI_ErrorCallback(hspi);
 800a778:	4620      	mov	r0, r4
 800a77a:	f7ff ff7d 	bl	800a678 <HAL_SPI_ErrorCallback>
 800a77e:	e79a      	b.n	800a6b6 <HAL_SPI_IRQHandler+0x3a>
 800a780:	0800a785 	.word	0x0800a785

0800a784 <SPI_DMAAbortOnError>:
{
 800a784:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a786:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 800a788:	2300      	movs	r3, #0
 800a78a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a78c:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 800a78e:	f7ff ff73 	bl	800a678 <HAL_SPI_ErrorCallback>
}
 800a792:	bd08      	pop	{r3, pc}

0800a794 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a794:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a796:	4a20      	ldr	r2, [pc, #128]	; (800a818 <TIM_Base_SetConfig+0x84>)
 800a798:	4290      	cmp	r0, r2
 800a79a:	d014      	beq.n	800a7c6 <TIM_Base_SetConfig+0x32>
 800a79c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a7a0:	d02a      	beq.n	800a7f8 <TIM_Base_SetConfig+0x64>
 800a7a2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a7a6:	4290      	cmp	r0, r2
 800a7a8:	d02b      	beq.n	800a802 <TIM_Base_SetConfig+0x6e>
 800a7aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a7ae:	4290      	cmp	r0, r2
 800a7b0:	d02c      	beq.n	800a80c <TIM_Base_SetConfig+0x78>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7b6:	694a      	ldr	r2, [r1, #20]
 800a7b8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800a7ba:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7bc:	688b      	ldr	r3, [r1, #8]
 800a7be:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a7c0:	680b      	ldr	r3, [r1, #0]
 800a7c2:	6283      	str	r3, [r0, #40]	; 0x28
 800a7c4:	e015      	b.n	800a7f2 <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a7ca:	684a      	ldr	r2, [r1, #4]
 800a7cc:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7d2:	68ca      	ldr	r2, [r1, #12]
 800a7d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7da:	694a      	ldr	r2, [r1, #20]
 800a7dc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800a7de:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7e0:	688b      	ldr	r3, [r1, #8]
 800a7e2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a7e4:	680b      	ldr	r3, [r1, #0]
 800a7e6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7e8:	4b0b      	ldr	r3, [pc, #44]	; (800a818 <TIM_Base_SetConfig+0x84>)
 800a7ea:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a7ec:	bf04      	itt	eq
 800a7ee:	690a      	ldreq	r2, [r1, #16]
 800a7f0:	631a      	streq	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	6143      	str	r3, [r0, #20]
}
 800a7f6:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a7fc:	684a      	ldr	r2, [r1, #4]
 800a7fe:	4313      	orrs	r3, r2
 800a800:	e7e5      	b.n	800a7ce <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a806:	684a      	ldr	r2, [r1, #4]
 800a808:	4313      	orrs	r3, r2
 800a80a:	e7e0      	b.n	800a7ce <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a80c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a810:	684a      	ldr	r2, [r1, #4]
 800a812:	4313      	orrs	r3, r2
 800a814:	e7db      	b.n	800a7ce <TIM_Base_SetConfig+0x3a>
 800a816:	bf00      	nop
 800a818:	40012c00 	.word	0x40012c00

0800a81c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800a81c:	b338      	cbz	r0, 800a86e <HAL_TIM_Base_Init+0x52>
{
 800a81e:	b510      	push	{r4, lr}
 800a820:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800a822:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a826:	b1eb      	cbz	r3, 800a864 <HAL_TIM_Base_Init+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 800a828:	2302      	movs	r3, #2
 800a82a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a82e:	1d21      	adds	r1, r4, #4
 800a830:	6820      	ldr	r0, [r4, #0]
 800a832:	f7ff ffaf 	bl	800a794 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a836:	2301      	movs	r3, #1
 800a838:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a83c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800a840:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800a844:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800a848:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a84c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a854:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a858:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800a85c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800a860:	2000      	movs	r0, #0
}
 800a862:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800a864:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800a868:	f7fd f942 	bl	8007af0 <HAL_TIM_Base_MspInit>
 800a86c:	e7dc      	b.n	800a828 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800a86e:	2001      	movs	r0, #1
}
 800a870:	4770      	bx	lr

0800a872 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a872:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a874:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a876:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a87a:	430a      	orrs	r2, r1
 800a87c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800a880:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a882:	6083      	str	r3, [r0, #8]
}
 800a884:	bc10      	pop	{r4}
 800a886:	4770      	bx	lr

0800a888 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800a888:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	f000 809d 	beq.w	800a9cc <HAL_TIM_ConfigClockSource+0x144>
{
 800a892:	b570      	push	{r4, r5, r6, lr}
 800a894:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800a896:	2301      	movs	r3, #1
 800a898:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800a89c:	2302      	movs	r3, #2
 800a89e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800a8a2:	6802      	ldr	r2, [r0, #0]
 800a8a4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a8aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800a8ae:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800a8b0:	680b      	ldr	r3, [r1, #0]
 800a8b2:	2b40      	cmp	r3, #64	; 0x40
 800a8b4:	d070      	beq.n	800a998 <HAL_TIM_ConfigClockSource+0x110>
 800a8b6:	d913      	bls.n	800a8e0 <HAL_TIM_ConfigClockSource+0x58>
 800a8b8:	2b60      	cmp	r3, #96	; 0x60
 800a8ba:	d052      	beq.n	800a962 <HAL_TIM_ConfigClockSource+0xda>
 800a8bc:	d923      	bls.n	800a906 <HAL_TIM_ConfigClockSource+0x7e>
 800a8be:	2b70      	cmp	r3, #112	; 0x70
 800a8c0:	d03d      	beq.n	800a93e <HAL_TIM_ConfigClockSource+0xb6>
 800a8c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8c6:	d145      	bne.n	800a954 <HAL_TIM_ConfigClockSource+0xcc>
      TIM_ETR_SetConfig(htim->Instance,
 800a8c8:	68cb      	ldr	r3, [r1, #12]
 800a8ca:	684a      	ldr	r2, [r1, #4]
 800a8cc:	6889      	ldr	r1, [r1, #8]
 800a8ce:	6800      	ldr	r0, [r0, #0]
 800a8d0:	f7ff ffcf 	bl	800a872 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a8d4:	6822      	ldr	r2, [r4, #0]
 800a8d6:	6893      	ldr	r3, [r2, #8]
 800a8d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8dc:	6093      	str	r3, [r2, #8]
      break;
 800a8de:	e039      	b.n	800a954 <HAL_TIM_ConfigClockSource+0xcc>
  switch (sClockSourceConfig->ClockSource)
 800a8e0:	2b10      	cmp	r3, #16
 800a8e2:	d007      	beq.n	800a8f4 <HAL_TIM_ConfigClockSource+0x6c>
 800a8e4:	d904      	bls.n	800a8f0 <HAL_TIM_ConfigClockSource+0x68>
 800a8e6:	2b20      	cmp	r3, #32
 800a8e8:	d004      	beq.n	800a8f4 <HAL_TIM_ConfigClockSource+0x6c>
 800a8ea:	2b30      	cmp	r3, #48	; 0x30
 800a8ec:	d002      	beq.n	800a8f4 <HAL_TIM_ConfigClockSource+0x6c>
 800a8ee:	e031      	b.n	800a954 <HAL_TIM_ConfigClockSource+0xcc>
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d12f      	bne.n	800a954 <HAL_TIM_ConfigClockSource+0xcc>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a8f4:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800a8f6:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a8f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a8fc:	f043 0307 	orr.w	r3, r3, #7
 800a900:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 800a902:	608b      	str	r3, [r1, #8]
 800a904:	e026      	b.n	800a954 <HAL_TIM_ConfigClockSource+0xcc>
  switch (sClockSourceConfig->ClockSource)
 800a906:	2b50      	cmp	r3, #80	; 0x50
 800a908:	d124      	bne.n	800a954 <HAL_TIM_ConfigClockSource+0xcc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a90a:	6803      	ldr	r3, [r0, #0]
 800a90c:	6848      	ldr	r0, [r1, #4]
 800a90e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800a910:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a912:	6a1d      	ldr	r5, [r3, #32]
 800a914:	f025 0501 	bic.w	r5, r5, #1
 800a918:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a91a:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a91c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a920:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a924:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800a928:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800a92a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a92c:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a92e:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800a930:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a936:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800a93a:	6093      	str	r3, [r2, #8]
 800a93c:	e00a      	b.n	800a954 <HAL_TIM_ConfigClockSource+0xcc>
      TIM_ETR_SetConfig(htim->Instance,
 800a93e:	68cb      	ldr	r3, [r1, #12]
 800a940:	684a      	ldr	r2, [r1, #4]
 800a942:	6889      	ldr	r1, [r1, #8]
 800a944:	6800      	ldr	r0, [r0, #0]
 800a946:	f7ff ff94 	bl	800a872 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a94a:	6822      	ldr	r2, [r4, #0]
 800a94c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a94e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800a952:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800a954:	2301      	movs	r3, #1
 800a956:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a95a:	2000      	movs	r0, #0
 800a95c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800a960:	bd70      	pop	{r4, r5, r6, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a962:	6803      	ldr	r3, [r0, #0]
 800a964:	684d      	ldr	r5, [r1, #4]
 800a966:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a968:	6a18      	ldr	r0, [r3, #32]
 800a96a:	f020 0010 	bic.w	r0, r0, #16
 800a96e:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a970:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800a972:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a974:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a978:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a97c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800a980:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800a984:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800a986:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a988:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800a98a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a98c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a990:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800a994:	6093      	str	r3, [r2, #8]
 800a996:	e7dd      	b.n	800a954 <HAL_TIM_ConfigClockSource+0xcc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a998:	6803      	ldr	r3, [r0, #0]
 800a99a:	6848      	ldr	r0, [r1, #4]
 800a99c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800a99e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9a0:	6a1d      	ldr	r5, [r3, #32]
 800a9a2:	f025 0501 	bic.w	r5, r5, #1
 800a9a6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9a8:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9aa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a9ae:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9b2:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800a9b6:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800a9b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9ba:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a9bc:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800a9be:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a9c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a9c4:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800a9c8:	6093      	str	r3, [r2, #8]
 800a9ca:	e7c3      	b.n	800a954 <HAL_TIM_ConfigClockSource+0xcc>
  __HAL_LOCK(htim);
 800a9cc:	2002      	movs	r0, #2
}
 800a9ce:	4770      	bx	lr

0800a9d0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d02b      	beq.n	800aa30 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 800a9d8:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800a9da:	2301      	movs	r3, #1
 800a9dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9e0:	2302      	movs	r3, #2
 800a9e2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a9e6:	6804      	ldr	r4, [r0, #0]
 800a9e8:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a9ea:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a9ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a9f0:	680d      	ldr	r5, [r1, #0]
 800a9f2:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a9f4:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9f6:	6803      	ldr	r3, [r0, #0]
 800a9f8:	4c0e      	ldr	r4, [pc, #56]	; (800aa34 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 800a9fa:	42a3      	cmp	r3, r4
 800a9fc:	d00a      	beq.n	800aa14 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800a9fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa02:	d007      	beq.n	800aa14 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800aa04:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 800aa08:	42a3      	cmp	r3, r4
 800aa0a:	d003      	beq.n	800aa14 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800aa0c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800aa10:	42a3      	cmp	r3, r4
 800aa12:	d104      	bne.n	800aa1e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa18:	6849      	ldr	r1, [r1, #4]
 800aa1a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa24:	2300      	movs	r3, #0
 800aa26:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800aa2a:	4618      	mov	r0, r3
}
 800aa2c:	bc30      	pop	{r4, r5}
 800aa2e:	4770      	bx	lr
  __HAL_LOCK(htim);
 800aa30:	2002      	movs	r0, #2
}
 800aa32:	4770      	bx	lr
 800aa34:	40012c00 	.word	0x40012c00

0800aa38 <_ZdaPv>:
 800aa38:	f000 b81e 	b.w	800aa78 <_ZdlPv>

0800aa3c <_Znaj>:
 800aa3c:	f000 b802 	b.w	800aa44 <_Znwj>

0800aa40 <_ZdlPvj>:
 800aa40:	f000 b81a 	b.w	800aa78 <_ZdlPv>

0800aa44 <_Znwj>:
 800aa44:	b510      	push	{r4, lr}
 800aa46:	2800      	cmp	r0, #0
 800aa48:	bf14      	ite	ne
 800aa4a:	4604      	movne	r4, r0
 800aa4c:	2401      	moveq	r4, #1
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f001 f86e 	bl	800bb30 <malloc>
 800aa54:	b930      	cbnz	r0, 800aa64 <_Znwj+0x20>
 800aa56:	f000 f807 	bl	800aa68 <_ZSt15get_new_handlerv>
 800aa5a:	b908      	cbnz	r0, 800aa60 <_Znwj+0x1c>
 800aa5c:	f001 f837 	bl	800bace <abort>
 800aa60:	4780      	blx	r0
 800aa62:	e7f4      	b.n	800aa4e <_Znwj+0xa>
 800aa64:	bd10      	pop	{r4, pc}
	...

0800aa68 <_ZSt15get_new_handlerv>:
 800aa68:	4b02      	ldr	r3, [pc, #8]	; (800aa74 <_ZSt15get_new_handlerv+0xc>)
 800aa6a:	6818      	ldr	r0, [r3, #0]
 800aa6c:	f3bf 8f5b 	dmb	ish
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	20002444 	.word	0x20002444

0800aa78 <_ZdlPv>:
 800aa78:	f001 b862 	b.w	800bb40 <free>

0800aa7c <pow>:
 800aa7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa80:	b08f      	sub	sp, #60	; 0x3c
 800aa82:	461d      	mov	r5, r3
 800aa84:	4680      	mov	r8, r0
 800aa86:	4689      	mov	r9, r1
 800aa88:	4614      	mov	r4, r2
 800aa8a:	f000 f955 	bl	800ad38 <__ieee754_pow>
 800aa8e:	4fa1      	ldr	r7, [pc, #644]	; (800ad14 <pow+0x298>)
 800aa90:	e9cd 0100 	strd	r0, r1, [sp]
 800aa94:	f997 3000 	ldrsb.w	r3, [r7]
 800aa98:	463e      	mov	r6, r7
 800aa9a:	9302      	str	r3, [sp, #8]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	d05f      	beq.n	800ab60 <pow+0xe4>
 800aaa0:	4622      	mov	r2, r4
 800aaa2:	462b      	mov	r3, r5
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	4629      	mov	r1, r5
 800aaa8:	f7f5 ffa8 	bl	80009fc <__aeabi_dcmpun>
 800aaac:	4682      	mov	sl, r0
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d156      	bne.n	800ab60 <pow+0xe4>
 800aab2:	4642      	mov	r2, r8
 800aab4:	464b      	mov	r3, r9
 800aab6:	4640      	mov	r0, r8
 800aab8:	4649      	mov	r1, r9
 800aaba:	f7f5 ff9f 	bl	80009fc <__aeabi_dcmpun>
 800aabe:	9003      	str	r0, [sp, #12]
 800aac0:	b1e8      	cbz	r0, 800aafe <pow+0x82>
 800aac2:	2200      	movs	r2, #0
 800aac4:	2300      	movs	r3, #0
 800aac6:	4620      	mov	r0, r4
 800aac8:	4629      	mov	r1, r5
 800aaca:	f7f5 ff65 	bl	8000998 <__aeabi_dcmpeq>
 800aace:	2800      	cmp	r0, #0
 800aad0:	d046      	beq.n	800ab60 <pow+0xe4>
 800aad2:	2301      	movs	r3, #1
 800aad4:	2200      	movs	r2, #0
 800aad6:	9304      	str	r3, [sp, #16]
 800aad8:	4b8f      	ldr	r3, [pc, #572]	; (800ad18 <pow+0x29c>)
 800aada:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800aade:	9305      	str	r3, [sp, #20]
 800aae0:	4b8e      	ldr	r3, [pc, #568]	; (800ad1c <pow+0x2a0>)
 800aae2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800aae6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800aaea:	9b02      	ldr	r3, [sp, #8]
 800aaec:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	d031      	beq.n	800ab58 <pow+0xdc>
 800aaf4:	a804      	add	r0, sp, #16
 800aaf6:	f000 fedf 	bl	800b8b8 <matherr>
 800aafa:	bb38      	cbnz	r0, 800ab4c <pow+0xd0>
 800aafc:	e058      	b.n	800abb0 <pow+0x134>
 800aafe:	f04f 0a00 	mov.w	sl, #0
 800ab02:	f04f 0b00 	mov.w	fp, #0
 800ab06:	4652      	mov	r2, sl
 800ab08:	465b      	mov	r3, fp
 800ab0a:	4640      	mov	r0, r8
 800ab0c:	4649      	mov	r1, r9
 800ab0e:	f7f5 ff43 	bl	8000998 <__aeabi_dcmpeq>
 800ab12:	2800      	cmp	r0, #0
 800ab14:	d051      	beq.n	800abba <pow+0x13e>
 800ab16:	4652      	mov	r2, sl
 800ab18:	465b      	mov	r3, fp
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	4629      	mov	r1, r5
 800ab1e:	f7f5 ff3b 	bl	8000998 <__aeabi_dcmpeq>
 800ab22:	4606      	mov	r6, r0
 800ab24:	b308      	cbz	r0, 800ab6a <pow+0xee>
 800ab26:	2301      	movs	r3, #1
 800ab28:	9304      	str	r3, [sp, #16]
 800ab2a:	4b7b      	ldr	r3, [pc, #492]	; (800ad18 <pow+0x29c>)
 800ab2c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800ab30:	9305      	str	r3, [sp, #20]
 800ab32:	9b03      	ldr	r3, [sp, #12]
 800ab34:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800ab38:	930c      	str	r3, [sp, #48]	; 0x30
 800ab3a:	9b02      	ldr	r3, [sp, #8]
 800ab3c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d0d7      	beq.n	800aaf4 <pow+0x78>
 800ab44:	2200      	movs	r2, #0
 800ab46:	4b75      	ldr	r3, [pc, #468]	; (800ad1c <pow+0x2a0>)
 800ab48:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ab4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab4e:	b11b      	cbz	r3, 800ab58 <pow+0xdc>
 800ab50:	f000 ffc4 	bl	800badc <__errno>
 800ab54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab56:	6003      	str	r3, [r0, #0]
 800ab58:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800ab5c:	e9cd 3400 	strd	r3, r4, [sp]
 800ab60:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab64:	b00f      	add	sp, #60	; 0x3c
 800ab66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	f000 fe9d 	bl	800b8ac <finite>
 800ab72:	2800      	cmp	r0, #0
 800ab74:	d0f4      	beq.n	800ab60 <pow+0xe4>
 800ab76:	4652      	mov	r2, sl
 800ab78:	465b      	mov	r3, fp
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	f7f5 ff15 	bl	80009ac <__aeabi_dcmplt>
 800ab82:	2800      	cmp	r0, #0
 800ab84:	d0ec      	beq.n	800ab60 <pow+0xe4>
 800ab86:	2301      	movs	r3, #1
 800ab88:	9304      	str	r3, [sp, #16]
 800ab8a:	4b63      	ldr	r3, [pc, #396]	; (800ad18 <pow+0x29c>)
 800ab8c:	960c      	str	r6, [sp, #48]	; 0x30
 800ab8e:	9305      	str	r3, [sp, #20]
 800ab90:	f997 3000 	ldrsb.w	r3, [r7]
 800ab94:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800ab98:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800ab9c:	b913      	cbnz	r3, 800aba4 <pow+0x128>
 800ab9e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800aba2:	e7a7      	b.n	800aaf4 <pow+0x78>
 800aba4:	2000      	movs	r0, #0
 800aba6:	495e      	ldr	r1, [pc, #376]	; (800ad20 <pow+0x2a4>)
 800aba8:	2b02      	cmp	r3, #2
 800abaa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800abae:	d1a1      	bne.n	800aaf4 <pow+0x78>
 800abb0:	f000 ff94 	bl	800badc <__errno>
 800abb4:	2321      	movs	r3, #33	; 0x21
 800abb6:	6003      	str	r3, [r0, #0]
 800abb8:	e7c8      	b.n	800ab4c <pow+0xd0>
 800abba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abbe:	f000 fe75 	bl	800b8ac <finite>
 800abc2:	9002      	str	r0, [sp, #8]
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d177      	bne.n	800acb8 <pow+0x23c>
 800abc8:	4640      	mov	r0, r8
 800abca:	4649      	mov	r1, r9
 800abcc:	f000 fe6e 	bl	800b8ac <finite>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	d071      	beq.n	800acb8 <pow+0x23c>
 800abd4:	4620      	mov	r0, r4
 800abd6:	4629      	mov	r1, r5
 800abd8:	f000 fe68 	bl	800b8ac <finite>
 800abdc:	2800      	cmp	r0, #0
 800abde:	d06b      	beq.n	800acb8 <pow+0x23c>
 800abe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abe4:	4619      	mov	r1, r3
 800abe6:	4610      	mov	r0, r2
 800abe8:	f7f5 ff08 	bl	80009fc <__aeabi_dcmpun>
 800abec:	f997 7000 	ldrsb.w	r7, [r7]
 800abf0:	4b49      	ldr	r3, [pc, #292]	; (800ad18 <pow+0x29c>)
 800abf2:	b1a0      	cbz	r0, 800ac1e <pow+0x1a2>
 800abf4:	2201      	movs	r2, #1
 800abf6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800abfa:	9b02      	ldr	r3, [sp, #8]
 800abfc:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800ac00:	930c      	str	r3, [sp, #48]	; 0x30
 800ac02:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800ac06:	2f00      	cmp	r7, #0
 800ac08:	d0c9      	beq.n	800ab9e <pow+0x122>
 800ac0a:	4652      	mov	r2, sl
 800ac0c:	465b      	mov	r3, fp
 800ac0e:	4650      	mov	r0, sl
 800ac10:	4659      	mov	r1, fp
 800ac12:	f7f5 fd83 	bl	800071c <__aeabi_ddiv>
 800ac16:	2f02      	cmp	r7, #2
 800ac18:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ac1c:	e7c7      	b.n	800abae <pow+0x132>
 800ac1e:	2203      	movs	r2, #3
 800ac20:	900c      	str	r0, [sp, #48]	; 0x30
 800ac22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac26:	4620      	mov	r0, r4
 800ac28:	4629      	mov	r1, r5
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	4b3d      	ldr	r3, [pc, #244]	; (800ad24 <pow+0x2a8>)
 800ac2e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800ac32:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800ac36:	f7f5 fc47 	bl	80004c8 <__aeabi_dmul>
 800ac3a:	4604      	mov	r4, r0
 800ac3c:	460d      	mov	r5, r1
 800ac3e:	bb17      	cbnz	r7, 800ac86 <pow+0x20a>
 800ac40:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ac44:	4b38      	ldr	r3, [pc, #224]	; (800ad28 <pow+0x2ac>)
 800ac46:	4640      	mov	r0, r8
 800ac48:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ac4c:	4649      	mov	r1, r9
 800ac4e:	4652      	mov	r2, sl
 800ac50:	465b      	mov	r3, fp
 800ac52:	f7f5 feab 	bl	80009ac <__aeabi_dcmplt>
 800ac56:	2800      	cmp	r0, #0
 800ac58:	d054      	beq.n	800ad04 <pow+0x288>
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	4629      	mov	r1, r5
 800ac5e:	f000 fe33 	bl	800b8c8 <rint>
 800ac62:	4622      	mov	r2, r4
 800ac64:	462b      	mov	r3, r5
 800ac66:	f7f5 fe97 	bl	8000998 <__aeabi_dcmpeq>
 800ac6a:	b920      	cbnz	r0, 800ac76 <pow+0x1fa>
 800ac6c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ac70:	4b2e      	ldr	r3, [pc, #184]	; (800ad2c <pow+0x2b0>)
 800ac72:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ac76:	f996 3000 	ldrsb.w	r3, [r6]
 800ac7a:	2b02      	cmp	r3, #2
 800ac7c:	d142      	bne.n	800ad04 <pow+0x288>
 800ac7e:	f000 ff2d 	bl	800badc <__errno>
 800ac82:	2322      	movs	r3, #34	; 0x22
 800ac84:	e797      	b.n	800abb6 <pow+0x13a>
 800ac86:	2200      	movs	r2, #0
 800ac88:	4b29      	ldr	r3, [pc, #164]	; (800ad30 <pow+0x2b4>)
 800ac8a:	4640      	mov	r0, r8
 800ac8c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ac90:	4649      	mov	r1, r9
 800ac92:	4652      	mov	r2, sl
 800ac94:	465b      	mov	r3, fp
 800ac96:	f7f5 fe89 	bl	80009ac <__aeabi_dcmplt>
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	d0eb      	beq.n	800ac76 <pow+0x1fa>
 800ac9e:	4620      	mov	r0, r4
 800aca0:	4629      	mov	r1, r5
 800aca2:	f000 fe11 	bl	800b8c8 <rint>
 800aca6:	4622      	mov	r2, r4
 800aca8:	462b      	mov	r3, r5
 800acaa:	f7f5 fe75 	bl	8000998 <__aeabi_dcmpeq>
 800acae:	2800      	cmp	r0, #0
 800acb0:	d1e1      	bne.n	800ac76 <pow+0x1fa>
 800acb2:	2200      	movs	r2, #0
 800acb4:	4b1a      	ldr	r3, [pc, #104]	; (800ad20 <pow+0x2a4>)
 800acb6:	e7dc      	b.n	800ac72 <pow+0x1f6>
 800acb8:	2200      	movs	r2, #0
 800acba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800acbe:	2300      	movs	r3, #0
 800acc0:	f7f5 fe6a 	bl	8000998 <__aeabi_dcmpeq>
 800acc4:	2800      	cmp	r0, #0
 800acc6:	f43f af4b 	beq.w	800ab60 <pow+0xe4>
 800acca:	4640      	mov	r0, r8
 800accc:	4649      	mov	r1, r9
 800acce:	f000 fded 	bl	800b8ac <finite>
 800acd2:	2800      	cmp	r0, #0
 800acd4:	f43f af44 	beq.w	800ab60 <pow+0xe4>
 800acd8:	4620      	mov	r0, r4
 800acda:	4629      	mov	r1, r5
 800acdc:	f000 fde6 	bl	800b8ac <finite>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	f43f af3d 	beq.w	800ab60 <pow+0xe4>
 800ace6:	2304      	movs	r3, #4
 800ace8:	9304      	str	r3, [sp, #16]
 800acea:	4b0b      	ldr	r3, [pc, #44]	; (800ad18 <pow+0x29c>)
 800acec:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800acf0:	9305      	str	r3, [sp, #20]
 800acf2:	2300      	movs	r3, #0
 800acf4:	2400      	movs	r4, #0
 800acf6:	930c      	str	r3, [sp, #48]	; 0x30
 800acf8:	2300      	movs	r3, #0
 800acfa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800acfe:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800ad02:	e7b8      	b.n	800ac76 <pow+0x1fa>
 800ad04:	a804      	add	r0, sp, #16
 800ad06:	f000 fdd7 	bl	800b8b8 <matherr>
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	f47f af1e 	bne.w	800ab4c <pow+0xd0>
 800ad10:	e7b5      	b.n	800ac7e <pow+0x202>
 800ad12:	bf00      	nop
 800ad14:	20000068 	.word	0x20000068
 800ad18:	0800be5c 	.word	0x0800be5c
 800ad1c:	3ff00000 	.word	0x3ff00000
 800ad20:	fff00000 	.word	0xfff00000
 800ad24:	3fe00000 	.word	0x3fe00000
 800ad28:	47efffff 	.word	0x47efffff
 800ad2c:	c7efffff 	.word	0xc7efffff
 800ad30:	7ff00000 	.word	0x7ff00000
 800ad34:	00000000 	.word	0x00000000

0800ad38 <__ieee754_pow>:
 800ad38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad3c:	b091      	sub	sp, #68	; 0x44
 800ad3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad42:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800ad46:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800ad4a:	ea55 0302 	orrs.w	r3, r5, r2
 800ad4e:	4607      	mov	r7, r0
 800ad50:	4688      	mov	r8, r1
 800ad52:	f000 84b7 	beq.w	800b6c4 <__ieee754_pow+0x98c>
 800ad56:	4b80      	ldr	r3, [pc, #512]	; (800af58 <__ieee754_pow+0x220>)
 800ad58:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800ad5c:	429c      	cmp	r4, r3
 800ad5e:	4689      	mov	r9, r1
 800ad60:	4682      	mov	sl, r0
 800ad62:	dc09      	bgt.n	800ad78 <__ieee754_pow+0x40>
 800ad64:	d103      	bne.n	800ad6e <__ieee754_pow+0x36>
 800ad66:	b938      	cbnz	r0, 800ad78 <__ieee754_pow+0x40>
 800ad68:	42a5      	cmp	r5, r4
 800ad6a:	dc0d      	bgt.n	800ad88 <__ieee754_pow+0x50>
 800ad6c:	e001      	b.n	800ad72 <__ieee754_pow+0x3a>
 800ad6e:	429d      	cmp	r5, r3
 800ad70:	dc02      	bgt.n	800ad78 <__ieee754_pow+0x40>
 800ad72:	429d      	cmp	r5, r3
 800ad74:	d10e      	bne.n	800ad94 <__ieee754_pow+0x5c>
 800ad76:	b16a      	cbz	r2, 800ad94 <__ieee754_pow+0x5c>
 800ad78:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ad7c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ad80:	ea54 030a 	orrs.w	r3, r4, sl
 800ad84:	f000 849e 	beq.w	800b6c4 <__ieee754_pow+0x98c>
 800ad88:	4874      	ldr	r0, [pc, #464]	; (800af5c <__ieee754_pow+0x224>)
 800ad8a:	b011      	add	sp, #68	; 0x44
 800ad8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad90:	f000 bd94 	b.w	800b8bc <nan>
 800ad94:	f1b9 0f00 	cmp.w	r9, #0
 800ad98:	da53      	bge.n	800ae42 <__ieee754_pow+0x10a>
 800ad9a:	4b71      	ldr	r3, [pc, #452]	; (800af60 <__ieee754_pow+0x228>)
 800ad9c:	429d      	cmp	r5, r3
 800ad9e:	dc4e      	bgt.n	800ae3e <__ieee754_pow+0x106>
 800ada0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ada4:	429d      	cmp	r5, r3
 800ada6:	dd4c      	ble.n	800ae42 <__ieee754_pow+0x10a>
 800ada8:	152b      	asrs	r3, r5, #20
 800adaa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800adae:	2b14      	cmp	r3, #20
 800adb0:	dd28      	ble.n	800ae04 <__ieee754_pow+0xcc>
 800adb2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800adb6:	fa22 f103 	lsr.w	r1, r2, r3
 800adba:	fa01 f303 	lsl.w	r3, r1, r3
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d13f      	bne.n	800ae42 <__ieee754_pow+0x10a>
 800adc2:	f001 0101 	and.w	r1, r1, #1
 800adc6:	f1c1 0302 	rsb	r3, r1, #2
 800adca:	9300      	str	r3, [sp, #0]
 800adcc:	2a00      	cmp	r2, #0
 800adce:	d15c      	bne.n	800ae8a <__ieee754_pow+0x152>
 800add0:	4b61      	ldr	r3, [pc, #388]	; (800af58 <__ieee754_pow+0x220>)
 800add2:	429d      	cmp	r5, r3
 800add4:	d126      	bne.n	800ae24 <__ieee754_pow+0xec>
 800add6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800adda:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800adde:	ea53 030a 	orrs.w	r3, r3, sl
 800ade2:	f000 846f 	beq.w	800b6c4 <__ieee754_pow+0x98c>
 800ade6:	4b5f      	ldr	r3, [pc, #380]	; (800af64 <__ieee754_pow+0x22c>)
 800ade8:	429c      	cmp	r4, r3
 800adea:	dd2c      	ble.n	800ae46 <__ieee754_pow+0x10e>
 800adec:	2e00      	cmp	r6, #0
 800adee:	f280 846f 	bge.w	800b6d0 <__ieee754_pow+0x998>
 800adf2:	f04f 0b00 	mov.w	fp, #0
 800adf6:	f04f 0c00 	mov.w	ip, #0
 800adfa:	4658      	mov	r0, fp
 800adfc:	4661      	mov	r1, ip
 800adfe:	b011      	add	sp, #68	; 0x44
 800ae00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae04:	2a00      	cmp	r2, #0
 800ae06:	d13e      	bne.n	800ae86 <__ieee754_pow+0x14e>
 800ae08:	f1c3 0314 	rsb	r3, r3, #20
 800ae0c:	fa45 f103 	asr.w	r1, r5, r3
 800ae10:	fa01 f303 	lsl.w	r3, r1, r3
 800ae14:	42ab      	cmp	r3, r5
 800ae16:	f040 8463 	bne.w	800b6e0 <__ieee754_pow+0x9a8>
 800ae1a:	f001 0101 	and.w	r1, r1, #1
 800ae1e:	f1c1 0302 	rsb	r3, r1, #2
 800ae22:	9300      	str	r3, [sp, #0]
 800ae24:	4b50      	ldr	r3, [pc, #320]	; (800af68 <__ieee754_pow+0x230>)
 800ae26:	429d      	cmp	r5, r3
 800ae28:	d114      	bne.n	800ae54 <__ieee754_pow+0x11c>
 800ae2a:	2e00      	cmp	r6, #0
 800ae2c:	f280 8454 	bge.w	800b6d8 <__ieee754_pow+0x9a0>
 800ae30:	463a      	mov	r2, r7
 800ae32:	4643      	mov	r3, r8
 800ae34:	2000      	movs	r0, #0
 800ae36:	494c      	ldr	r1, [pc, #304]	; (800af68 <__ieee754_pow+0x230>)
 800ae38:	f7f5 fc70 	bl	800071c <__aeabi_ddiv>
 800ae3c:	e013      	b.n	800ae66 <__ieee754_pow+0x12e>
 800ae3e:	2302      	movs	r3, #2
 800ae40:	e7c3      	b.n	800adca <__ieee754_pow+0x92>
 800ae42:	2300      	movs	r3, #0
 800ae44:	e7c1      	b.n	800adca <__ieee754_pow+0x92>
 800ae46:	2e00      	cmp	r6, #0
 800ae48:	dad3      	bge.n	800adf2 <__ieee754_pow+0xba>
 800ae4a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800ae4e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800ae52:	e7d2      	b.n	800adfa <__ieee754_pow+0xc2>
 800ae54:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800ae58:	d108      	bne.n	800ae6c <__ieee754_pow+0x134>
 800ae5a:	463a      	mov	r2, r7
 800ae5c:	4643      	mov	r3, r8
 800ae5e:	4638      	mov	r0, r7
 800ae60:	4641      	mov	r1, r8
 800ae62:	f7f5 fb31 	bl	80004c8 <__aeabi_dmul>
 800ae66:	4683      	mov	fp, r0
 800ae68:	468c      	mov	ip, r1
 800ae6a:	e7c6      	b.n	800adfa <__ieee754_pow+0xc2>
 800ae6c:	4b3f      	ldr	r3, [pc, #252]	; (800af6c <__ieee754_pow+0x234>)
 800ae6e:	429e      	cmp	r6, r3
 800ae70:	d10b      	bne.n	800ae8a <__ieee754_pow+0x152>
 800ae72:	f1b9 0f00 	cmp.w	r9, #0
 800ae76:	db08      	blt.n	800ae8a <__ieee754_pow+0x152>
 800ae78:	4638      	mov	r0, r7
 800ae7a:	4641      	mov	r1, r8
 800ae7c:	b011      	add	sp, #68	; 0x44
 800ae7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae82:	f000 bc63 	b.w	800b74c <__ieee754_sqrt>
 800ae86:	2300      	movs	r3, #0
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	4638      	mov	r0, r7
 800ae8c:	4641      	mov	r1, r8
 800ae8e:	f000 fd09 	bl	800b8a4 <fabs>
 800ae92:	4683      	mov	fp, r0
 800ae94:	468c      	mov	ip, r1
 800ae96:	f1ba 0f00 	cmp.w	sl, #0
 800ae9a:	d12b      	bne.n	800aef4 <__ieee754_pow+0x1bc>
 800ae9c:	b124      	cbz	r4, 800aea8 <__ieee754_pow+0x170>
 800ae9e:	4b32      	ldr	r3, [pc, #200]	; (800af68 <__ieee754_pow+0x230>)
 800aea0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d125      	bne.n	800aef4 <__ieee754_pow+0x1bc>
 800aea8:	2e00      	cmp	r6, #0
 800aeaa:	da07      	bge.n	800aebc <__ieee754_pow+0x184>
 800aeac:	465a      	mov	r2, fp
 800aeae:	4663      	mov	r3, ip
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	492d      	ldr	r1, [pc, #180]	; (800af68 <__ieee754_pow+0x230>)
 800aeb4:	f7f5 fc32 	bl	800071c <__aeabi_ddiv>
 800aeb8:	4683      	mov	fp, r0
 800aeba:	468c      	mov	ip, r1
 800aebc:	f1b9 0f00 	cmp.w	r9, #0
 800aec0:	da9b      	bge.n	800adfa <__ieee754_pow+0xc2>
 800aec2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800aec6:	9b00      	ldr	r3, [sp, #0]
 800aec8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800aecc:	4323      	orrs	r3, r4
 800aece:	d108      	bne.n	800aee2 <__ieee754_pow+0x1aa>
 800aed0:	465a      	mov	r2, fp
 800aed2:	4663      	mov	r3, ip
 800aed4:	4658      	mov	r0, fp
 800aed6:	4661      	mov	r1, ip
 800aed8:	f7f5 f93e 	bl	8000158 <__aeabi_dsub>
 800aedc:	4602      	mov	r2, r0
 800aede:	460b      	mov	r3, r1
 800aee0:	e7aa      	b.n	800ae38 <__ieee754_pow+0x100>
 800aee2:	9b00      	ldr	r3, [sp, #0]
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d188      	bne.n	800adfa <__ieee754_pow+0xc2>
 800aee8:	4658      	mov	r0, fp
 800aeea:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800aeee:	4683      	mov	fp, r0
 800aef0:	469c      	mov	ip, r3
 800aef2:	e782      	b.n	800adfa <__ieee754_pow+0xc2>
 800aef4:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 800aef8:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800aefc:	930d      	str	r3, [sp, #52]	; 0x34
 800aefe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af00:	9b00      	ldr	r3, [sp, #0]
 800af02:	4313      	orrs	r3, r2
 800af04:	d104      	bne.n	800af10 <__ieee754_pow+0x1d8>
 800af06:	463a      	mov	r2, r7
 800af08:	4643      	mov	r3, r8
 800af0a:	4638      	mov	r0, r7
 800af0c:	4641      	mov	r1, r8
 800af0e:	e7e3      	b.n	800aed8 <__ieee754_pow+0x1a0>
 800af10:	4b17      	ldr	r3, [pc, #92]	; (800af70 <__ieee754_pow+0x238>)
 800af12:	429d      	cmp	r5, r3
 800af14:	f340 80fe 	ble.w	800b114 <__ieee754_pow+0x3dc>
 800af18:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800af1c:	429d      	cmp	r5, r3
 800af1e:	dd0b      	ble.n	800af38 <__ieee754_pow+0x200>
 800af20:	4b10      	ldr	r3, [pc, #64]	; (800af64 <__ieee754_pow+0x22c>)
 800af22:	429c      	cmp	r4, r3
 800af24:	dc0e      	bgt.n	800af44 <__ieee754_pow+0x20c>
 800af26:	2e00      	cmp	r6, #0
 800af28:	f6bf af63 	bge.w	800adf2 <__ieee754_pow+0xba>
 800af2c:	a308      	add	r3, pc, #32	; (adr r3, 800af50 <__ieee754_pow+0x218>)
 800af2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af32:	4610      	mov	r0, r2
 800af34:	4619      	mov	r1, r3
 800af36:	e794      	b.n	800ae62 <__ieee754_pow+0x12a>
 800af38:	4b0e      	ldr	r3, [pc, #56]	; (800af74 <__ieee754_pow+0x23c>)
 800af3a:	429c      	cmp	r4, r3
 800af3c:	ddf3      	ble.n	800af26 <__ieee754_pow+0x1ee>
 800af3e:	4b0a      	ldr	r3, [pc, #40]	; (800af68 <__ieee754_pow+0x230>)
 800af40:	429c      	cmp	r4, r3
 800af42:	dd19      	ble.n	800af78 <__ieee754_pow+0x240>
 800af44:	2e00      	cmp	r6, #0
 800af46:	dcf1      	bgt.n	800af2c <__ieee754_pow+0x1f4>
 800af48:	e753      	b.n	800adf2 <__ieee754_pow+0xba>
 800af4a:	bf00      	nop
 800af4c:	f3af 8000 	nop.w
 800af50:	8800759c 	.word	0x8800759c
 800af54:	7e37e43c 	.word	0x7e37e43c
 800af58:	7ff00000 	.word	0x7ff00000
 800af5c:	0800be5f 	.word	0x0800be5f
 800af60:	433fffff 	.word	0x433fffff
 800af64:	3fefffff 	.word	0x3fefffff
 800af68:	3ff00000 	.word	0x3ff00000
 800af6c:	3fe00000 	.word	0x3fe00000
 800af70:	41e00000 	.word	0x41e00000
 800af74:	3feffffe 	.word	0x3feffffe
 800af78:	4661      	mov	r1, ip
 800af7a:	2200      	movs	r2, #0
 800af7c:	4b60      	ldr	r3, [pc, #384]	; (800b100 <__ieee754_pow+0x3c8>)
 800af7e:	4658      	mov	r0, fp
 800af80:	f7f5 f8ea 	bl	8000158 <__aeabi_dsub>
 800af84:	a354      	add	r3, pc, #336	; (adr r3, 800b0d8 <__ieee754_pow+0x3a0>)
 800af86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8a:	4604      	mov	r4, r0
 800af8c:	460d      	mov	r5, r1
 800af8e:	f7f5 fa9b 	bl	80004c8 <__aeabi_dmul>
 800af92:	a353      	add	r3, pc, #332	; (adr r3, 800b0e0 <__ieee754_pow+0x3a8>)
 800af94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af98:	4606      	mov	r6, r0
 800af9a:	460f      	mov	r7, r1
 800af9c:	4620      	mov	r0, r4
 800af9e:	4629      	mov	r1, r5
 800afa0:	f7f5 fa92 	bl	80004c8 <__aeabi_dmul>
 800afa4:	2200      	movs	r2, #0
 800afa6:	4682      	mov	sl, r0
 800afa8:	468b      	mov	fp, r1
 800afaa:	4b56      	ldr	r3, [pc, #344]	; (800b104 <__ieee754_pow+0x3cc>)
 800afac:	4620      	mov	r0, r4
 800afae:	4629      	mov	r1, r5
 800afb0:	f7f5 fa8a 	bl	80004c8 <__aeabi_dmul>
 800afb4:	4602      	mov	r2, r0
 800afb6:	460b      	mov	r3, r1
 800afb8:	a14b      	add	r1, pc, #300	; (adr r1, 800b0e8 <__ieee754_pow+0x3b0>)
 800afba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afbe:	f7f5 f8cb 	bl	8000158 <__aeabi_dsub>
 800afc2:	4622      	mov	r2, r4
 800afc4:	462b      	mov	r3, r5
 800afc6:	f7f5 fa7f 	bl	80004c8 <__aeabi_dmul>
 800afca:	4602      	mov	r2, r0
 800afcc:	460b      	mov	r3, r1
 800afce:	2000      	movs	r0, #0
 800afd0:	494d      	ldr	r1, [pc, #308]	; (800b108 <__ieee754_pow+0x3d0>)
 800afd2:	f7f5 f8c1 	bl	8000158 <__aeabi_dsub>
 800afd6:	4622      	mov	r2, r4
 800afd8:	462b      	mov	r3, r5
 800afda:	4680      	mov	r8, r0
 800afdc:	4689      	mov	r9, r1
 800afde:	4620      	mov	r0, r4
 800afe0:	4629      	mov	r1, r5
 800afe2:	f7f5 fa71 	bl	80004c8 <__aeabi_dmul>
 800afe6:	4602      	mov	r2, r0
 800afe8:	460b      	mov	r3, r1
 800afea:	4640      	mov	r0, r8
 800afec:	4649      	mov	r1, r9
 800afee:	f7f5 fa6b 	bl	80004c8 <__aeabi_dmul>
 800aff2:	a33f      	add	r3, pc, #252	; (adr r3, 800b0f0 <__ieee754_pow+0x3b8>)
 800aff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff8:	f7f5 fa66 	bl	80004c8 <__aeabi_dmul>
 800affc:	4602      	mov	r2, r0
 800affe:	460b      	mov	r3, r1
 800b000:	4650      	mov	r0, sl
 800b002:	4659      	mov	r1, fp
 800b004:	f7f5 f8a8 	bl	8000158 <__aeabi_dsub>
 800b008:	4602      	mov	r2, r0
 800b00a:	460b      	mov	r3, r1
 800b00c:	4604      	mov	r4, r0
 800b00e:	460d      	mov	r5, r1
 800b010:	4630      	mov	r0, r6
 800b012:	4639      	mov	r1, r7
 800b014:	f7f5 f8a2 	bl	800015c <__adddf3>
 800b018:	2000      	movs	r0, #0
 800b01a:	468b      	mov	fp, r1
 800b01c:	4682      	mov	sl, r0
 800b01e:	4632      	mov	r2, r6
 800b020:	463b      	mov	r3, r7
 800b022:	f7f5 f899 	bl	8000158 <__aeabi_dsub>
 800b026:	4602      	mov	r2, r0
 800b028:	460b      	mov	r3, r1
 800b02a:	4620      	mov	r0, r4
 800b02c:	4629      	mov	r1, r5
 800b02e:	f7f5 f893 	bl	8000158 <__aeabi_dsub>
 800b032:	9b00      	ldr	r3, [sp, #0]
 800b034:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b036:	3b01      	subs	r3, #1
 800b038:	4313      	orrs	r3, r2
 800b03a:	f04f 0300 	mov.w	r3, #0
 800b03e:	bf0c      	ite	eq
 800b040:	4c32      	ldreq	r4, [pc, #200]	; (800b10c <__ieee754_pow+0x3d4>)
 800b042:	4c2f      	ldrne	r4, [pc, #188]	; (800b100 <__ieee754_pow+0x3c8>)
 800b044:	4606      	mov	r6, r0
 800b046:	e9cd 3400 	strd	r3, r4, [sp]
 800b04a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b04e:	2400      	movs	r4, #0
 800b050:	460f      	mov	r7, r1
 800b052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b056:	4622      	mov	r2, r4
 800b058:	462b      	mov	r3, r5
 800b05a:	f7f5 f87d 	bl	8000158 <__aeabi_dsub>
 800b05e:	4652      	mov	r2, sl
 800b060:	465b      	mov	r3, fp
 800b062:	f7f5 fa31 	bl	80004c8 <__aeabi_dmul>
 800b066:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b06a:	4680      	mov	r8, r0
 800b06c:	4689      	mov	r9, r1
 800b06e:	4630      	mov	r0, r6
 800b070:	4639      	mov	r1, r7
 800b072:	f7f5 fa29 	bl	80004c8 <__aeabi_dmul>
 800b076:	4602      	mov	r2, r0
 800b078:	460b      	mov	r3, r1
 800b07a:	4640      	mov	r0, r8
 800b07c:	4649      	mov	r1, r9
 800b07e:	f7f5 f86d 	bl	800015c <__adddf3>
 800b082:	4622      	mov	r2, r4
 800b084:	462b      	mov	r3, r5
 800b086:	4680      	mov	r8, r0
 800b088:	4689      	mov	r9, r1
 800b08a:	4650      	mov	r0, sl
 800b08c:	4659      	mov	r1, fp
 800b08e:	f7f5 fa1b 	bl	80004c8 <__aeabi_dmul>
 800b092:	4604      	mov	r4, r0
 800b094:	460d      	mov	r5, r1
 800b096:	460b      	mov	r3, r1
 800b098:	4602      	mov	r2, r0
 800b09a:	4649      	mov	r1, r9
 800b09c:	4640      	mov	r0, r8
 800b09e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b0a2:	f7f5 f85b 	bl	800015c <__adddf3>
 800b0a6:	4b1a      	ldr	r3, [pc, #104]	; (800b110 <__ieee754_pow+0x3d8>)
 800b0a8:	4682      	mov	sl, r0
 800b0aa:	4299      	cmp	r1, r3
 800b0ac:	460f      	mov	r7, r1
 800b0ae:	460e      	mov	r6, r1
 800b0b0:	f340 82e1 	ble.w	800b676 <__ieee754_pow+0x93e>
 800b0b4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b0b8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b0bc:	4303      	orrs	r3, r0
 800b0be:	f000 81db 	beq.w	800b478 <__ieee754_pow+0x740>
 800b0c2:	a30d      	add	r3, pc, #52	; (adr r3, 800b0f8 <__ieee754_pow+0x3c0>)
 800b0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0cc:	f7f5 f9fc 	bl	80004c8 <__aeabi_dmul>
 800b0d0:	a309      	add	r3, pc, #36	; (adr r3, 800b0f8 <__ieee754_pow+0x3c0>)
 800b0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d6:	e6c4      	b.n	800ae62 <__ieee754_pow+0x12a>
 800b0d8:	60000000 	.word	0x60000000
 800b0dc:	3ff71547 	.word	0x3ff71547
 800b0e0:	f85ddf44 	.word	0xf85ddf44
 800b0e4:	3e54ae0b 	.word	0x3e54ae0b
 800b0e8:	55555555 	.word	0x55555555
 800b0ec:	3fd55555 	.word	0x3fd55555
 800b0f0:	652b82fe 	.word	0x652b82fe
 800b0f4:	3ff71547 	.word	0x3ff71547
 800b0f8:	8800759c 	.word	0x8800759c
 800b0fc:	7e37e43c 	.word	0x7e37e43c
 800b100:	3ff00000 	.word	0x3ff00000
 800b104:	3fd00000 	.word	0x3fd00000
 800b108:	3fe00000 	.word	0x3fe00000
 800b10c:	bff00000 	.word	0xbff00000
 800b110:	408fffff 	.word	0x408fffff
 800b114:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b118:	f04f 0200 	mov.w	r2, #0
 800b11c:	da08      	bge.n	800b130 <__ieee754_pow+0x3f8>
 800b11e:	4658      	mov	r0, fp
 800b120:	4bcd      	ldr	r3, [pc, #820]	; (800b458 <__ieee754_pow+0x720>)
 800b122:	4661      	mov	r1, ip
 800b124:	f7f5 f9d0 	bl	80004c8 <__aeabi_dmul>
 800b128:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b12c:	4683      	mov	fp, r0
 800b12e:	460c      	mov	r4, r1
 800b130:	1523      	asrs	r3, r4, #20
 800b132:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b136:	4413      	add	r3, r2
 800b138:	930c      	str	r3, [sp, #48]	; 0x30
 800b13a:	4bc8      	ldr	r3, [pc, #800]	; (800b45c <__ieee754_pow+0x724>)
 800b13c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b140:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b144:	429c      	cmp	r4, r3
 800b146:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b14a:	dd08      	ble.n	800b15e <__ieee754_pow+0x426>
 800b14c:	4bc4      	ldr	r3, [pc, #784]	; (800b460 <__ieee754_pow+0x728>)
 800b14e:	429c      	cmp	r4, r3
 800b150:	f340 815b 	ble.w	800b40a <__ieee754_pow+0x6d2>
 800b154:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b156:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b15a:	3301      	adds	r3, #1
 800b15c:	930c      	str	r3, [sp, #48]	; 0x30
 800b15e:	f04f 0800 	mov.w	r8, #0
 800b162:	4658      	mov	r0, fp
 800b164:	4629      	mov	r1, r5
 800b166:	4bbf      	ldr	r3, [pc, #764]	; (800b464 <__ieee754_pow+0x72c>)
 800b168:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800b16c:	444b      	add	r3, r9
 800b16e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b172:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b176:	461a      	mov	r2, r3
 800b178:	4623      	mov	r3, r4
 800b17a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b17e:	f7f4 ffeb 	bl	8000158 <__aeabi_dsub>
 800b182:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b186:	4606      	mov	r6, r0
 800b188:	460f      	mov	r7, r1
 800b18a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b18e:	f7f4 ffe5 	bl	800015c <__adddf3>
 800b192:	4602      	mov	r2, r0
 800b194:	460b      	mov	r3, r1
 800b196:	2000      	movs	r0, #0
 800b198:	49b3      	ldr	r1, [pc, #716]	; (800b468 <__ieee754_pow+0x730>)
 800b19a:	f7f5 fabf 	bl	800071c <__aeabi_ddiv>
 800b19e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	4639      	mov	r1, r7
 800b1aa:	f7f5 f98d 	bl	80004c8 <__aeabi_dmul>
 800b1ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b1b2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b1b6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	2200      	movs	r2, #0
 800b1be:	106d      	asrs	r5, r5, #1
 800b1c0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b1c4:	9304      	str	r3, [sp, #16]
 800b1c6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b1ca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b1ce:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800b1d2:	4650      	mov	r0, sl
 800b1d4:	4659      	mov	r1, fp
 800b1d6:	4614      	mov	r4, r2
 800b1d8:	461d      	mov	r5, r3
 800b1da:	f7f5 f975 	bl	80004c8 <__aeabi_dmul>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	4630      	mov	r0, r6
 800b1e4:	4639      	mov	r1, r7
 800b1e6:	f7f4 ffb7 	bl	8000158 <__aeabi_dsub>
 800b1ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b1ee:	4606      	mov	r6, r0
 800b1f0:	460f      	mov	r7, r1
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	4629      	mov	r1, r5
 800b1f6:	f7f4 ffaf 	bl	8000158 <__aeabi_dsub>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b202:	f7f4 ffa9 	bl	8000158 <__aeabi_dsub>
 800b206:	4652      	mov	r2, sl
 800b208:	465b      	mov	r3, fp
 800b20a:	f7f5 f95d 	bl	80004c8 <__aeabi_dmul>
 800b20e:	4602      	mov	r2, r0
 800b210:	460b      	mov	r3, r1
 800b212:	4630      	mov	r0, r6
 800b214:	4639      	mov	r1, r7
 800b216:	f7f4 ff9f 	bl	8000158 <__aeabi_dsub>
 800b21a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b21e:	f7f5 f953 	bl	80004c8 <__aeabi_dmul>
 800b222:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b226:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b22a:	4610      	mov	r0, r2
 800b22c:	4619      	mov	r1, r3
 800b22e:	f7f5 f94b 	bl	80004c8 <__aeabi_dmul>
 800b232:	a377      	add	r3, pc, #476	; (adr r3, 800b410 <__ieee754_pow+0x6d8>)
 800b234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b238:	4604      	mov	r4, r0
 800b23a:	460d      	mov	r5, r1
 800b23c:	f7f5 f944 	bl	80004c8 <__aeabi_dmul>
 800b240:	a375      	add	r3, pc, #468	; (adr r3, 800b418 <__ieee754_pow+0x6e0>)
 800b242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b246:	f7f4 ff89 	bl	800015c <__adddf3>
 800b24a:	4622      	mov	r2, r4
 800b24c:	462b      	mov	r3, r5
 800b24e:	f7f5 f93b 	bl	80004c8 <__aeabi_dmul>
 800b252:	a373      	add	r3, pc, #460	; (adr r3, 800b420 <__ieee754_pow+0x6e8>)
 800b254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b258:	f7f4 ff80 	bl	800015c <__adddf3>
 800b25c:	4622      	mov	r2, r4
 800b25e:	462b      	mov	r3, r5
 800b260:	f7f5 f932 	bl	80004c8 <__aeabi_dmul>
 800b264:	a370      	add	r3, pc, #448	; (adr r3, 800b428 <__ieee754_pow+0x6f0>)
 800b266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26a:	f7f4 ff77 	bl	800015c <__adddf3>
 800b26e:	4622      	mov	r2, r4
 800b270:	462b      	mov	r3, r5
 800b272:	f7f5 f929 	bl	80004c8 <__aeabi_dmul>
 800b276:	a36e      	add	r3, pc, #440	; (adr r3, 800b430 <__ieee754_pow+0x6f8>)
 800b278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27c:	f7f4 ff6e 	bl	800015c <__adddf3>
 800b280:	4622      	mov	r2, r4
 800b282:	462b      	mov	r3, r5
 800b284:	f7f5 f920 	bl	80004c8 <__aeabi_dmul>
 800b288:	a36b      	add	r3, pc, #428	; (adr r3, 800b438 <__ieee754_pow+0x700>)
 800b28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28e:	f7f4 ff65 	bl	800015c <__adddf3>
 800b292:	4622      	mov	r2, r4
 800b294:	4606      	mov	r6, r0
 800b296:	460f      	mov	r7, r1
 800b298:	462b      	mov	r3, r5
 800b29a:	4620      	mov	r0, r4
 800b29c:	4629      	mov	r1, r5
 800b29e:	f7f5 f913 	bl	80004c8 <__aeabi_dmul>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	4630      	mov	r0, r6
 800b2a8:	4639      	mov	r1, r7
 800b2aa:	f7f5 f90d 	bl	80004c8 <__aeabi_dmul>
 800b2ae:	4604      	mov	r4, r0
 800b2b0:	460d      	mov	r5, r1
 800b2b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2b6:	4652      	mov	r2, sl
 800b2b8:	465b      	mov	r3, fp
 800b2ba:	f7f4 ff4f 	bl	800015c <__adddf3>
 800b2be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b2c2:	f7f5 f901 	bl	80004c8 <__aeabi_dmul>
 800b2c6:	4622      	mov	r2, r4
 800b2c8:	462b      	mov	r3, r5
 800b2ca:	f7f4 ff47 	bl	800015c <__adddf3>
 800b2ce:	4652      	mov	r2, sl
 800b2d0:	4606      	mov	r6, r0
 800b2d2:	460f      	mov	r7, r1
 800b2d4:	465b      	mov	r3, fp
 800b2d6:	4650      	mov	r0, sl
 800b2d8:	4659      	mov	r1, fp
 800b2da:	f7f5 f8f5 	bl	80004c8 <__aeabi_dmul>
 800b2de:	2200      	movs	r2, #0
 800b2e0:	4b62      	ldr	r3, [pc, #392]	; (800b46c <__ieee754_pow+0x734>)
 800b2e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b2e6:	f7f4 ff39 	bl	800015c <__adddf3>
 800b2ea:	4632      	mov	r2, r6
 800b2ec:	463b      	mov	r3, r7
 800b2ee:	f7f4 ff35 	bl	800015c <__adddf3>
 800b2f2:	9804      	ldr	r0, [sp, #16]
 800b2f4:	460d      	mov	r5, r1
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	4650      	mov	r0, sl
 800b2fe:	4659      	mov	r1, fp
 800b300:	f7f5 f8e2 	bl	80004c8 <__aeabi_dmul>
 800b304:	2200      	movs	r2, #0
 800b306:	4682      	mov	sl, r0
 800b308:	468b      	mov	fp, r1
 800b30a:	4b58      	ldr	r3, [pc, #352]	; (800b46c <__ieee754_pow+0x734>)
 800b30c:	4620      	mov	r0, r4
 800b30e:	4629      	mov	r1, r5
 800b310:	f7f4 ff22 	bl	8000158 <__aeabi_dsub>
 800b314:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b318:	f7f4 ff1e 	bl	8000158 <__aeabi_dsub>
 800b31c:	4602      	mov	r2, r0
 800b31e:	460b      	mov	r3, r1
 800b320:	4630      	mov	r0, r6
 800b322:	4639      	mov	r1, r7
 800b324:	f7f4 ff18 	bl	8000158 <__aeabi_dsub>
 800b328:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b32c:	f7f5 f8cc 	bl	80004c8 <__aeabi_dmul>
 800b330:	4622      	mov	r2, r4
 800b332:	4606      	mov	r6, r0
 800b334:	460f      	mov	r7, r1
 800b336:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b33a:	462b      	mov	r3, r5
 800b33c:	f7f5 f8c4 	bl	80004c8 <__aeabi_dmul>
 800b340:	4602      	mov	r2, r0
 800b342:	460b      	mov	r3, r1
 800b344:	4630      	mov	r0, r6
 800b346:	4639      	mov	r1, r7
 800b348:	f7f4 ff08 	bl	800015c <__adddf3>
 800b34c:	4606      	mov	r6, r0
 800b34e:	460f      	mov	r7, r1
 800b350:	4602      	mov	r2, r0
 800b352:	460b      	mov	r3, r1
 800b354:	4650      	mov	r0, sl
 800b356:	4659      	mov	r1, fp
 800b358:	f7f4 ff00 	bl	800015c <__adddf3>
 800b35c:	a338      	add	r3, pc, #224	; (adr r3, 800b440 <__ieee754_pow+0x708>)
 800b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b362:	9804      	ldr	r0, [sp, #16]
 800b364:	460d      	mov	r5, r1
 800b366:	4604      	mov	r4, r0
 800b368:	f7f5 f8ae 	bl	80004c8 <__aeabi_dmul>
 800b36c:	4652      	mov	r2, sl
 800b36e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b372:	465b      	mov	r3, fp
 800b374:	4620      	mov	r0, r4
 800b376:	4629      	mov	r1, r5
 800b378:	f7f4 feee 	bl	8000158 <__aeabi_dsub>
 800b37c:	4602      	mov	r2, r0
 800b37e:	460b      	mov	r3, r1
 800b380:	4630      	mov	r0, r6
 800b382:	4639      	mov	r1, r7
 800b384:	f7f4 fee8 	bl	8000158 <__aeabi_dsub>
 800b388:	a32f      	add	r3, pc, #188	; (adr r3, 800b448 <__ieee754_pow+0x710>)
 800b38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38e:	f7f5 f89b 	bl	80004c8 <__aeabi_dmul>
 800b392:	a32f      	add	r3, pc, #188	; (adr r3, 800b450 <__ieee754_pow+0x718>)
 800b394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b398:	4606      	mov	r6, r0
 800b39a:	460f      	mov	r7, r1
 800b39c:	4620      	mov	r0, r4
 800b39e:	4629      	mov	r1, r5
 800b3a0:	f7f5 f892 	bl	80004c8 <__aeabi_dmul>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	4639      	mov	r1, r7
 800b3ac:	f7f4 fed6 	bl	800015c <__adddf3>
 800b3b0:	4b2f      	ldr	r3, [pc, #188]	; (800b470 <__ieee754_pow+0x738>)
 800b3b2:	444b      	add	r3, r9
 800b3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b8:	f7f4 fed0 	bl	800015c <__adddf3>
 800b3bc:	4604      	mov	r4, r0
 800b3be:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b3c0:	460d      	mov	r5, r1
 800b3c2:	f7f5 f817 	bl	80003f4 <__aeabi_i2d>
 800b3c6:	4606      	mov	r6, r0
 800b3c8:	460f      	mov	r7, r1
 800b3ca:	4b2a      	ldr	r3, [pc, #168]	; (800b474 <__ieee754_pow+0x73c>)
 800b3cc:	4622      	mov	r2, r4
 800b3ce:	444b      	add	r3, r9
 800b3d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3d4:	462b      	mov	r3, r5
 800b3d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3da:	f7f4 febf 	bl	800015c <__adddf3>
 800b3de:	4642      	mov	r2, r8
 800b3e0:	464b      	mov	r3, r9
 800b3e2:	f7f4 febb 	bl	800015c <__adddf3>
 800b3e6:	4632      	mov	r2, r6
 800b3e8:	463b      	mov	r3, r7
 800b3ea:	f7f4 feb7 	bl	800015c <__adddf3>
 800b3ee:	9804      	ldr	r0, [sp, #16]
 800b3f0:	4632      	mov	r2, r6
 800b3f2:	463b      	mov	r3, r7
 800b3f4:	4682      	mov	sl, r0
 800b3f6:	468b      	mov	fp, r1
 800b3f8:	f7f4 feae 	bl	8000158 <__aeabi_dsub>
 800b3fc:	4642      	mov	r2, r8
 800b3fe:	464b      	mov	r3, r9
 800b400:	f7f4 feaa 	bl	8000158 <__aeabi_dsub>
 800b404:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b408:	e60b      	b.n	800b022 <__ieee754_pow+0x2ea>
 800b40a:	f04f 0801 	mov.w	r8, #1
 800b40e:	e6a8      	b.n	800b162 <__ieee754_pow+0x42a>
 800b410:	4a454eef 	.word	0x4a454eef
 800b414:	3fca7e28 	.word	0x3fca7e28
 800b418:	93c9db65 	.word	0x93c9db65
 800b41c:	3fcd864a 	.word	0x3fcd864a
 800b420:	a91d4101 	.word	0xa91d4101
 800b424:	3fd17460 	.word	0x3fd17460
 800b428:	518f264d 	.word	0x518f264d
 800b42c:	3fd55555 	.word	0x3fd55555
 800b430:	db6fabff 	.word	0xdb6fabff
 800b434:	3fdb6db6 	.word	0x3fdb6db6
 800b438:	33333303 	.word	0x33333303
 800b43c:	3fe33333 	.word	0x3fe33333
 800b440:	e0000000 	.word	0xe0000000
 800b444:	3feec709 	.word	0x3feec709
 800b448:	dc3a03fd 	.word	0xdc3a03fd
 800b44c:	3feec709 	.word	0x3feec709
 800b450:	145b01f5 	.word	0x145b01f5
 800b454:	be3e2fe0 	.word	0xbe3e2fe0
 800b458:	43400000 	.word	0x43400000
 800b45c:	0003988e 	.word	0x0003988e
 800b460:	000bb679 	.word	0x000bb679
 800b464:	0800be60 	.word	0x0800be60
 800b468:	3ff00000 	.word	0x3ff00000
 800b46c:	40080000 	.word	0x40080000
 800b470:	0800be80 	.word	0x0800be80
 800b474:	0800be70 	.word	0x0800be70
 800b478:	a39b      	add	r3, pc, #620	; (adr r3, 800b6e8 <__ieee754_pow+0x9b0>)
 800b47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47e:	4640      	mov	r0, r8
 800b480:	4649      	mov	r1, r9
 800b482:	f7f4 fe6b 	bl	800015c <__adddf3>
 800b486:	4622      	mov	r2, r4
 800b488:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b48c:	462b      	mov	r3, r5
 800b48e:	4650      	mov	r0, sl
 800b490:	4639      	mov	r1, r7
 800b492:	f7f4 fe61 	bl	8000158 <__aeabi_dsub>
 800b496:	4602      	mov	r2, r0
 800b498:	460b      	mov	r3, r1
 800b49a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b49e:	f7f5 faa3 	bl	80009e8 <__aeabi_dcmpgt>
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	f47f ae0d 	bne.w	800b0c2 <__ieee754_pow+0x38a>
 800b4a8:	4aa3      	ldr	r2, [pc, #652]	; (800b738 <__ieee754_pow+0xa00>)
 800b4aa:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	f340 8103 	ble.w	800b6ba <__ieee754_pow+0x982>
 800b4b4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	151b      	asrs	r3, r3, #20
 800b4bc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b4c0:	fa4a f303 	asr.w	r3, sl, r3
 800b4c4:	4433      	add	r3, r6
 800b4c6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b4ca:	4f9c      	ldr	r7, [pc, #624]	; (800b73c <__ieee754_pow+0xa04>)
 800b4cc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b4d0:	4117      	asrs	r7, r2
 800b4d2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b4d6:	ea23 0107 	bic.w	r1, r3, r7
 800b4da:	f1c2 0214 	rsb	r2, r2, #20
 800b4de:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b4e2:	fa4a fa02 	asr.w	sl, sl, r2
 800b4e6:	2e00      	cmp	r6, #0
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	4629      	mov	r1, r5
 800b4f0:	bfb8      	it	lt
 800b4f2:	f1ca 0a00 	rsblt	sl, sl, #0
 800b4f6:	f7f4 fe2f 	bl	8000158 <__aeabi_dsub>
 800b4fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b502:	4642      	mov	r2, r8
 800b504:	464b      	mov	r3, r9
 800b506:	f7f4 fe29 	bl	800015c <__adddf3>
 800b50a:	a379      	add	r3, pc, #484	; (adr r3, 800b6f0 <__ieee754_pow+0x9b8>)
 800b50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b510:	2000      	movs	r0, #0
 800b512:	460d      	mov	r5, r1
 800b514:	4604      	mov	r4, r0
 800b516:	f7f4 ffd7 	bl	80004c8 <__aeabi_dmul>
 800b51a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b51e:	4606      	mov	r6, r0
 800b520:	460f      	mov	r7, r1
 800b522:	4620      	mov	r0, r4
 800b524:	4629      	mov	r1, r5
 800b526:	f7f4 fe17 	bl	8000158 <__aeabi_dsub>
 800b52a:	4602      	mov	r2, r0
 800b52c:	460b      	mov	r3, r1
 800b52e:	4640      	mov	r0, r8
 800b530:	4649      	mov	r1, r9
 800b532:	f7f4 fe11 	bl	8000158 <__aeabi_dsub>
 800b536:	a370      	add	r3, pc, #448	; (adr r3, 800b6f8 <__ieee754_pow+0x9c0>)
 800b538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53c:	f7f4 ffc4 	bl	80004c8 <__aeabi_dmul>
 800b540:	a36f      	add	r3, pc, #444	; (adr r3, 800b700 <__ieee754_pow+0x9c8>)
 800b542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b546:	4680      	mov	r8, r0
 800b548:	4689      	mov	r9, r1
 800b54a:	4620      	mov	r0, r4
 800b54c:	4629      	mov	r1, r5
 800b54e:	f7f4 ffbb 	bl	80004c8 <__aeabi_dmul>
 800b552:	4602      	mov	r2, r0
 800b554:	460b      	mov	r3, r1
 800b556:	4640      	mov	r0, r8
 800b558:	4649      	mov	r1, r9
 800b55a:	f7f4 fdff 	bl	800015c <__adddf3>
 800b55e:	4604      	mov	r4, r0
 800b560:	460d      	mov	r5, r1
 800b562:	4602      	mov	r2, r0
 800b564:	460b      	mov	r3, r1
 800b566:	4630      	mov	r0, r6
 800b568:	4639      	mov	r1, r7
 800b56a:	f7f4 fdf7 	bl	800015c <__adddf3>
 800b56e:	4632      	mov	r2, r6
 800b570:	463b      	mov	r3, r7
 800b572:	4680      	mov	r8, r0
 800b574:	4689      	mov	r9, r1
 800b576:	f7f4 fdef 	bl	8000158 <__aeabi_dsub>
 800b57a:	4602      	mov	r2, r0
 800b57c:	460b      	mov	r3, r1
 800b57e:	4620      	mov	r0, r4
 800b580:	4629      	mov	r1, r5
 800b582:	f7f4 fde9 	bl	8000158 <__aeabi_dsub>
 800b586:	4642      	mov	r2, r8
 800b588:	4606      	mov	r6, r0
 800b58a:	460f      	mov	r7, r1
 800b58c:	464b      	mov	r3, r9
 800b58e:	4640      	mov	r0, r8
 800b590:	4649      	mov	r1, r9
 800b592:	f7f4 ff99 	bl	80004c8 <__aeabi_dmul>
 800b596:	a35c      	add	r3, pc, #368	; (adr r3, 800b708 <__ieee754_pow+0x9d0>)
 800b598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59c:	4604      	mov	r4, r0
 800b59e:	460d      	mov	r5, r1
 800b5a0:	f7f4 ff92 	bl	80004c8 <__aeabi_dmul>
 800b5a4:	a35a      	add	r3, pc, #360	; (adr r3, 800b710 <__ieee754_pow+0x9d8>)
 800b5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5aa:	f7f4 fdd5 	bl	8000158 <__aeabi_dsub>
 800b5ae:	4622      	mov	r2, r4
 800b5b0:	462b      	mov	r3, r5
 800b5b2:	f7f4 ff89 	bl	80004c8 <__aeabi_dmul>
 800b5b6:	a358      	add	r3, pc, #352	; (adr r3, 800b718 <__ieee754_pow+0x9e0>)
 800b5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5bc:	f7f4 fdce 	bl	800015c <__adddf3>
 800b5c0:	4622      	mov	r2, r4
 800b5c2:	462b      	mov	r3, r5
 800b5c4:	f7f4 ff80 	bl	80004c8 <__aeabi_dmul>
 800b5c8:	a355      	add	r3, pc, #340	; (adr r3, 800b720 <__ieee754_pow+0x9e8>)
 800b5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ce:	f7f4 fdc3 	bl	8000158 <__aeabi_dsub>
 800b5d2:	4622      	mov	r2, r4
 800b5d4:	462b      	mov	r3, r5
 800b5d6:	f7f4 ff77 	bl	80004c8 <__aeabi_dmul>
 800b5da:	a353      	add	r3, pc, #332	; (adr r3, 800b728 <__ieee754_pow+0x9f0>)
 800b5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e0:	f7f4 fdbc 	bl	800015c <__adddf3>
 800b5e4:	4622      	mov	r2, r4
 800b5e6:	462b      	mov	r3, r5
 800b5e8:	f7f4 ff6e 	bl	80004c8 <__aeabi_dmul>
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	4640      	mov	r0, r8
 800b5f2:	4649      	mov	r1, r9
 800b5f4:	f7f4 fdb0 	bl	8000158 <__aeabi_dsub>
 800b5f8:	4604      	mov	r4, r0
 800b5fa:	460d      	mov	r5, r1
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	460b      	mov	r3, r1
 800b600:	4640      	mov	r0, r8
 800b602:	4649      	mov	r1, r9
 800b604:	f7f4 ff60 	bl	80004c8 <__aeabi_dmul>
 800b608:	2200      	movs	r2, #0
 800b60a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b60e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b612:	4620      	mov	r0, r4
 800b614:	4629      	mov	r1, r5
 800b616:	f7f4 fd9f 	bl	8000158 <__aeabi_dsub>
 800b61a:	4602      	mov	r2, r0
 800b61c:	460b      	mov	r3, r1
 800b61e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b622:	f7f5 f87b 	bl	800071c <__aeabi_ddiv>
 800b626:	4632      	mov	r2, r6
 800b628:	4604      	mov	r4, r0
 800b62a:	460d      	mov	r5, r1
 800b62c:	463b      	mov	r3, r7
 800b62e:	4640      	mov	r0, r8
 800b630:	4649      	mov	r1, r9
 800b632:	f7f4 ff49 	bl	80004c8 <__aeabi_dmul>
 800b636:	4632      	mov	r2, r6
 800b638:	463b      	mov	r3, r7
 800b63a:	f7f4 fd8f 	bl	800015c <__adddf3>
 800b63e:	4602      	mov	r2, r0
 800b640:	460b      	mov	r3, r1
 800b642:	4620      	mov	r0, r4
 800b644:	4629      	mov	r1, r5
 800b646:	f7f4 fd87 	bl	8000158 <__aeabi_dsub>
 800b64a:	4642      	mov	r2, r8
 800b64c:	464b      	mov	r3, r9
 800b64e:	f7f4 fd83 	bl	8000158 <__aeabi_dsub>
 800b652:	4602      	mov	r2, r0
 800b654:	460b      	mov	r3, r1
 800b656:	2000      	movs	r0, #0
 800b658:	4939      	ldr	r1, [pc, #228]	; (800b740 <__ieee754_pow+0xa08>)
 800b65a:	f7f4 fd7d 	bl	8000158 <__aeabi_dsub>
 800b65e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b662:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b666:	da2b      	bge.n	800b6c0 <__ieee754_pow+0x988>
 800b668:	4652      	mov	r2, sl
 800b66a:	f000 f9b9 	bl	800b9e0 <scalbn>
 800b66e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b672:	f7ff bbf6 	b.w	800ae62 <__ieee754_pow+0x12a>
 800b676:	4b33      	ldr	r3, [pc, #204]	; (800b744 <__ieee754_pow+0xa0c>)
 800b678:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b67c:	429f      	cmp	r7, r3
 800b67e:	f77f af13 	ble.w	800b4a8 <__ieee754_pow+0x770>
 800b682:	4b31      	ldr	r3, [pc, #196]	; (800b748 <__ieee754_pow+0xa10>)
 800b684:	440b      	add	r3, r1
 800b686:	4303      	orrs	r3, r0
 800b688:	d00b      	beq.n	800b6a2 <__ieee754_pow+0x96a>
 800b68a:	a329      	add	r3, pc, #164	; (adr r3, 800b730 <__ieee754_pow+0x9f8>)
 800b68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b690:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b694:	f7f4 ff18 	bl	80004c8 <__aeabi_dmul>
 800b698:	a325      	add	r3, pc, #148	; (adr r3, 800b730 <__ieee754_pow+0x9f8>)
 800b69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69e:	f7ff bbe0 	b.w	800ae62 <__ieee754_pow+0x12a>
 800b6a2:	4622      	mov	r2, r4
 800b6a4:	462b      	mov	r3, r5
 800b6a6:	f7f4 fd57 	bl	8000158 <__aeabi_dsub>
 800b6aa:	4642      	mov	r2, r8
 800b6ac:	464b      	mov	r3, r9
 800b6ae:	f7f5 f991 	bl	80009d4 <__aeabi_dcmpge>
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	f43f aef8 	beq.w	800b4a8 <__ieee754_pow+0x770>
 800b6b8:	e7e7      	b.n	800b68a <__ieee754_pow+0x952>
 800b6ba:	f04f 0a00 	mov.w	sl, #0
 800b6be:	e71e      	b.n	800b4fe <__ieee754_pow+0x7c6>
 800b6c0:	4621      	mov	r1, r4
 800b6c2:	e7d4      	b.n	800b66e <__ieee754_pow+0x936>
 800b6c4:	f04f 0b00 	mov.w	fp, #0
 800b6c8:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b740 <__ieee754_pow+0xa08>
 800b6cc:	f7ff bb95 	b.w	800adfa <__ieee754_pow+0xc2>
 800b6d0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800b6d4:	f7ff bb91 	b.w	800adfa <__ieee754_pow+0xc2>
 800b6d8:	4638      	mov	r0, r7
 800b6da:	4641      	mov	r1, r8
 800b6dc:	f7ff bbc3 	b.w	800ae66 <__ieee754_pow+0x12e>
 800b6e0:	9200      	str	r2, [sp, #0]
 800b6e2:	f7ff bb9f 	b.w	800ae24 <__ieee754_pow+0xec>
 800b6e6:	bf00      	nop
 800b6e8:	652b82fe 	.word	0x652b82fe
 800b6ec:	3c971547 	.word	0x3c971547
 800b6f0:	00000000 	.word	0x00000000
 800b6f4:	3fe62e43 	.word	0x3fe62e43
 800b6f8:	fefa39ef 	.word	0xfefa39ef
 800b6fc:	3fe62e42 	.word	0x3fe62e42
 800b700:	0ca86c39 	.word	0x0ca86c39
 800b704:	be205c61 	.word	0xbe205c61
 800b708:	72bea4d0 	.word	0x72bea4d0
 800b70c:	3e663769 	.word	0x3e663769
 800b710:	c5d26bf1 	.word	0xc5d26bf1
 800b714:	3ebbbd41 	.word	0x3ebbbd41
 800b718:	af25de2c 	.word	0xaf25de2c
 800b71c:	3f11566a 	.word	0x3f11566a
 800b720:	16bebd93 	.word	0x16bebd93
 800b724:	3f66c16c 	.word	0x3f66c16c
 800b728:	5555553e 	.word	0x5555553e
 800b72c:	3fc55555 	.word	0x3fc55555
 800b730:	c2f8f359 	.word	0xc2f8f359
 800b734:	01a56e1f 	.word	0x01a56e1f
 800b738:	3fe00000 	.word	0x3fe00000
 800b73c:	000fffff 	.word	0x000fffff
 800b740:	3ff00000 	.word	0x3ff00000
 800b744:	4090cbff 	.word	0x4090cbff
 800b748:	3f6f3400 	.word	0x3f6f3400

0800b74c <__ieee754_sqrt>:
 800b74c:	4b54      	ldr	r3, [pc, #336]	; (800b8a0 <__ieee754_sqrt+0x154>)
 800b74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b752:	438b      	bics	r3, r1
 800b754:	4606      	mov	r6, r0
 800b756:	460d      	mov	r5, r1
 800b758:	460a      	mov	r2, r1
 800b75a:	460c      	mov	r4, r1
 800b75c:	d10f      	bne.n	800b77e <__ieee754_sqrt+0x32>
 800b75e:	4602      	mov	r2, r0
 800b760:	460b      	mov	r3, r1
 800b762:	f7f4 feb1 	bl	80004c8 <__aeabi_dmul>
 800b766:	4602      	mov	r2, r0
 800b768:	460b      	mov	r3, r1
 800b76a:	4630      	mov	r0, r6
 800b76c:	4629      	mov	r1, r5
 800b76e:	f7f4 fcf5 	bl	800015c <__adddf3>
 800b772:	4606      	mov	r6, r0
 800b774:	460d      	mov	r5, r1
 800b776:	4630      	mov	r0, r6
 800b778:	4629      	mov	r1, r5
 800b77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b77e:	2900      	cmp	r1, #0
 800b780:	4607      	mov	r7, r0
 800b782:	4603      	mov	r3, r0
 800b784:	dc0e      	bgt.n	800b7a4 <__ieee754_sqrt+0x58>
 800b786:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b78a:	ea5c 0707 	orrs.w	r7, ip, r7
 800b78e:	d0f2      	beq.n	800b776 <__ieee754_sqrt+0x2a>
 800b790:	b141      	cbz	r1, 800b7a4 <__ieee754_sqrt+0x58>
 800b792:	4602      	mov	r2, r0
 800b794:	460b      	mov	r3, r1
 800b796:	f7f4 fcdf 	bl	8000158 <__aeabi_dsub>
 800b79a:	4602      	mov	r2, r0
 800b79c:	460b      	mov	r3, r1
 800b79e:	f7f4 ffbd 	bl	800071c <__aeabi_ddiv>
 800b7a2:	e7e6      	b.n	800b772 <__ieee754_sqrt+0x26>
 800b7a4:	1512      	asrs	r2, r2, #20
 800b7a6:	d074      	beq.n	800b892 <__ieee754_sqrt+0x146>
 800b7a8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b7ac:	07d5      	lsls	r5, r2, #31
 800b7ae:	f04f 0500 	mov.w	r5, #0
 800b7b2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b7b6:	bf48      	it	mi
 800b7b8:	0fd9      	lsrmi	r1, r3, #31
 800b7ba:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800b7be:	bf44      	itt	mi
 800b7c0:	005b      	lslmi	r3, r3, #1
 800b7c2:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800b7c6:	1051      	asrs	r1, r2, #1
 800b7c8:	0fda      	lsrs	r2, r3, #31
 800b7ca:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	2216      	movs	r2, #22
 800b7d2:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800b7d6:	005b      	lsls	r3, r3, #1
 800b7d8:	1987      	adds	r7, r0, r6
 800b7da:	42a7      	cmp	r7, r4
 800b7dc:	bfde      	ittt	le
 800b7de:	19b8      	addle	r0, r7, r6
 800b7e0:	1be4      	suble	r4, r4, r7
 800b7e2:	19ad      	addle	r5, r5, r6
 800b7e4:	0fdf      	lsrs	r7, r3, #31
 800b7e6:	3a01      	subs	r2, #1
 800b7e8:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800b7ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b7f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b7f4:	d1f0      	bne.n	800b7d8 <__ieee754_sqrt+0x8c>
 800b7f6:	f04f 0c20 	mov.w	ip, #32
 800b7fa:	4696      	mov	lr, r2
 800b7fc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b800:	4284      	cmp	r4, r0
 800b802:	eb06 070e 	add.w	r7, r6, lr
 800b806:	dc02      	bgt.n	800b80e <__ieee754_sqrt+0xc2>
 800b808:	d112      	bne.n	800b830 <__ieee754_sqrt+0xe4>
 800b80a:	429f      	cmp	r7, r3
 800b80c:	d810      	bhi.n	800b830 <__ieee754_sqrt+0xe4>
 800b80e:	2f00      	cmp	r7, #0
 800b810:	eb07 0e06 	add.w	lr, r7, r6
 800b814:	da42      	bge.n	800b89c <__ieee754_sqrt+0x150>
 800b816:	f1be 0f00 	cmp.w	lr, #0
 800b81a:	db3f      	blt.n	800b89c <__ieee754_sqrt+0x150>
 800b81c:	f100 0801 	add.w	r8, r0, #1
 800b820:	1a24      	subs	r4, r4, r0
 800b822:	4640      	mov	r0, r8
 800b824:	429f      	cmp	r7, r3
 800b826:	bf88      	it	hi
 800b828:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 800b82c:	1bdb      	subs	r3, r3, r7
 800b82e:	4432      	add	r2, r6
 800b830:	0064      	lsls	r4, r4, #1
 800b832:	f1bc 0c01 	subs.w	ip, ip, #1
 800b836:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800b83a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b83e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b842:	d1dd      	bne.n	800b800 <__ieee754_sqrt+0xb4>
 800b844:	4323      	orrs	r3, r4
 800b846:	d006      	beq.n	800b856 <__ieee754_sqrt+0x10a>
 800b848:	1c54      	adds	r4, r2, #1
 800b84a:	bf0b      	itete	eq
 800b84c:	4662      	moveq	r2, ip
 800b84e:	3201      	addne	r2, #1
 800b850:	3501      	addeq	r5, #1
 800b852:	f022 0201 	bicne.w	r2, r2, #1
 800b856:	106b      	asrs	r3, r5, #1
 800b858:	0852      	lsrs	r2, r2, #1
 800b85a:	07e8      	lsls	r0, r5, #31
 800b85c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b860:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b864:	bf48      	it	mi
 800b866:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b86a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800b86e:	4616      	mov	r6, r2
 800b870:	e781      	b.n	800b776 <__ieee754_sqrt+0x2a>
 800b872:	0adc      	lsrs	r4, r3, #11
 800b874:	3915      	subs	r1, #21
 800b876:	055b      	lsls	r3, r3, #21
 800b878:	2c00      	cmp	r4, #0
 800b87a:	d0fa      	beq.n	800b872 <__ieee754_sqrt+0x126>
 800b87c:	02e6      	lsls	r6, r4, #11
 800b87e:	d50a      	bpl.n	800b896 <__ieee754_sqrt+0x14a>
 800b880:	f1c2 0020 	rsb	r0, r2, #32
 800b884:	fa23 f000 	lsr.w	r0, r3, r0
 800b888:	1e55      	subs	r5, r2, #1
 800b88a:	4093      	lsls	r3, r2
 800b88c:	4304      	orrs	r4, r0
 800b88e:	1b4a      	subs	r2, r1, r5
 800b890:	e78a      	b.n	800b7a8 <__ieee754_sqrt+0x5c>
 800b892:	4611      	mov	r1, r2
 800b894:	e7f0      	b.n	800b878 <__ieee754_sqrt+0x12c>
 800b896:	0064      	lsls	r4, r4, #1
 800b898:	3201      	adds	r2, #1
 800b89a:	e7ef      	b.n	800b87c <__ieee754_sqrt+0x130>
 800b89c:	4680      	mov	r8, r0
 800b89e:	e7bf      	b.n	800b820 <__ieee754_sqrt+0xd4>
 800b8a0:	7ff00000 	.word	0x7ff00000

0800b8a4 <fabs>:
 800b8a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	4770      	bx	lr

0800b8ac <finite>:
 800b8ac:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800b8b0:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800b8b4:	0fc0      	lsrs	r0, r0, #31
 800b8b6:	4770      	bx	lr

0800b8b8 <matherr>:
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	4770      	bx	lr

0800b8bc <nan>:
 800b8bc:	2000      	movs	r0, #0
 800b8be:	4901      	ldr	r1, [pc, #4]	; (800b8c4 <nan+0x8>)
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	7ff80000 	.word	0x7ff80000

0800b8c8 <rint>:
 800b8c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b8ce:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800b8d2:	f1bc 0f13 	cmp.w	ip, #19
 800b8d6:	4604      	mov	r4, r0
 800b8d8:	460d      	mov	r5, r1
 800b8da:	460b      	mov	r3, r1
 800b8dc:	4606      	mov	r6, r0
 800b8de:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800b8e2:	dc5a      	bgt.n	800b99a <rint+0xd2>
 800b8e4:	f1bc 0f00 	cmp.w	ip, #0
 800b8e8:	da2b      	bge.n	800b942 <rint+0x7a>
 800b8ea:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b8ee:	4302      	orrs	r2, r0
 800b8f0:	d023      	beq.n	800b93a <rint+0x72>
 800b8f2:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800b8f6:	4302      	orrs	r2, r0
 800b8f8:	4256      	negs	r6, r2
 800b8fa:	4316      	orrs	r6, r2
 800b8fc:	0c4b      	lsrs	r3, r1, #17
 800b8fe:	0b36      	lsrs	r6, r6, #12
 800b900:	4934      	ldr	r1, [pc, #208]	; (800b9d4 <rint+0x10c>)
 800b902:	045b      	lsls	r3, r3, #17
 800b904:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 800b908:	ea46 0503 	orr.w	r5, r6, r3
 800b90c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800b910:	4602      	mov	r2, r0
 800b912:	462b      	mov	r3, r5
 800b914:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b918:	4620      	mov	r0, r4
 800b91a:	4629      	mov	r1, r5
 800b91c:	f7f4 fc1e 	bl	800015c <__adddf3>
 800b920:	e9cd 0100 	strd	r0, r1, [sp]
 800b924:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b928:	462b      	mov	r3, r5
 800b92a:	4622      	mov	r2, r4
 800b92c:	f7f4 fc14 	bl	8000158 <__aeabi_dsub>
 800b930:	4604      	mov	r4, r0
 800b932:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b936:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800b93a:	4620      	mov	r0, r4
 800b93c:	4629      	mov	r1, r5
 800b93e:	b003      	add	sp, #12
 800b940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b942:	4a25      	ldr	r2, [pc, #148]	; (800b9d8 <rint+0x110>)
 800b944:	fa42 f20c 	asr.w	r2, r2, ip
 800b948:	4011      	ands	r1, r2
 800b94a:	4301      	orrs	r1, r0
 800b94c:	d0f5      	beq.n	800b93a <rint+0x72>
 800b94e:	0852      	lsrs	r2, r2, #1
 800b950:	ea05 0102 	and.w	r1, r5, r2
 800b954:	ea50 0601 	orrs.w	r6, r0, r1
 800b958:	d00c      	beq.n	800b974 <rint+0xac>
 800b95a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b95e:	f1bc 0f13 	cmp.w	ip, #19
 800b962:	bf0c      	ite	eq
 800b964:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800b968:	2600      	movne	r6, #0
 800b96a:	ea25 0202 	bic.w	r2, r5, r2
 800b96e:	fa43 f30c 	asr.w	r3, r3, ip
 800b972:	4313      	orrs	r3, r2
 800b974:	4917      	ldr	r1, [pc, #92]	; (800b9d4 <rint+0x10c>)
 800b976:	4632      	mov	r2, r6
 800b978:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800b97c:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b980:	4620      	mov	r0, r4
 800b982:	4629      	mov	r1, r5
 800b984:	f7f4 fbea 	bl	800015c <__adddf3>
 800b988:	e9cd 0100 	strd	r0, r1, [sp]
 800b98c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b990:	4622      	mov	r2, r4
 800b992:	462b      	mov	r3, r5
 800b994:	f7f4 fbe0 	bl	8000158 <__aeabi_dsub>
 800b998:	e008      	b.n	800b9ac <rint+0xe4>
 800b99a:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800b99e:	dd08      	ble.n	800b9b2 <rint+0xea>
 800b9a0:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800b9a4:	d1c9      	bne.n	800b93a <rint+0x72>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	f7f4 fbd8 	bl	800015c <__adddf3>
 800b9ac:	4604      	mov	r4, r0
 800b9ae:	460d      	mov	r5, r1
 800b9b0:	e7c3      	b.n	800b93a <rint+0x72>
 800b9b2:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800b9b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b9ba:	40ca      	lsrs	r2, r1
 800b9bc:	4210      	tst	r0, r2
 800b9be:	d0bc      	beq.n	800b93a <rint+0x72>
 800b9c0:	0852      	lsrs	r2, r2, #1
 800b9c2:	4210      	tst	r0, r2
 800b9c4:	bf1f      	itttt	ne
 800b9c6:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800b9ca:	ea20 0202 	bicne.w	r2, r0, r2
 800b9ce:	410e      	asrne	r6, r1
 800b9d0:	4316      	orrne	r6, r2
 800b9d2:	e7cf      	b.n	800b974 <rint+0xac>
 800b9d4:	0800be90 	.word	0x0800be90
 800b9d8:	000fffff 	.word	0x000fffff
 800b9dc:	00000000 	.word	0x00000000

0800b9e0 <scalbn>:
 800b9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9e2:	4616      	mov	r6, r2
 800b9e4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b9e8:	4604      	mov	r4, r0
 800b9ea:	460d      	mov	r5, r1
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	b982      	cbnz	r2, 800ba12 <scalbn+0x32>
 800b9f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b9f4:	4303      	orrs	r3, r0
 800b9f6:	d034      	beq.n	800ba62 <scalbn+0x82>
 800b9f8:	4b2d      	ldr	r3, [pc, #180]	; (800bab0 <scalbn+0xd0>)
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f7f4 fd64 	bl	80004c8 <__aeabi_dmul>
 800ba00:	4b2c      	ldr	r3, [pc, #176]	; (800bab4 <scalbn+0xd4>)
 800ba02:	4604      	mov	r4, r0
 800ba04:	429e      	cmp	r6, r3
 800ba06:	460d      	mov	r5, r1
 800ba08:	da0d      	bge.n	800ba26 <scalbn+0x46>
 800ba0a:	a325      	add	r3, pc, #148	; (adr r3, 800baa0 <scalbn+0xc0>)
 800ba0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba10:	e01c      	b.n	800ba4c <scalbn+0x6c>
 800ba12:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800ba16:	42ba      	cmp	r2, r7
 800ba18:	d109      	bne.n	800ba2e <scalbn+0x4e>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	f7f4 fb9e 	bl	800015c <__adddf3>
 800ba20:	4604      	mov	r4, r0
 800ba22:	460d      	mov	r5, r1
 800ba24:	e01d      	b.n	800ba62 <scalbn+0x82>
 800ba26:	460b      	mov	r3, r1
 800ba28:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ba2c:	3a36      	subs	r2, #54	; 0x36
 800ba2e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ba32:	4432      	add	r2, r6
 800ba34:	428a      	cmp	r2, r1
 800ba36:	dd0c      	ble.n	800ba52 <scalbn+0x72>
 800ba38:	4622      	mov	r2, r4
 800ba3a:	462b      	mov	r3, r5
 800ba3c:	a11a      	add	r1, pc, #104	; (adr r1, 800baa8 <scalbn+0xc8>)
 800ba3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba42:	f000 f83b 	bl	800babc <copysign>
 800ba46:	a318      	add	r3, pc, #96	; (adr r3, 800baa8 <scalbn+0xc8>)
 800ba48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4c:	f7f4 fd3c 	bl	80004c8 <__aeabi_dmul>
 800ba50:	e7e6      	b.n	800ba20 <scalbn+0x40>
 800ba52:	2a00      	cmp	r2, #0
 800ba54:	dd08      	ble.n	800ba68 <scalbn+0x88>
 800ba56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ba5a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ba5e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ba62:	4620      	mov	r0, r4
 800ba64:	4629      	mov	r1, r5
 800ba66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba68:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ba6c:	da0b      	bge.n	800ba86 <scalbn+0xa6>
 800ba6e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ba72:	429e      	cmp	r6, r3
 800ba74:	4622      	mov	r2, r4
 800ba76:	462b      	mov	r3, r5
 800ba78:	dce0      	bgt.n	800ba3c <scalbn+0x5c>
 800ba7a:	a109      	add	r1, pc, #36	; (adr r1, 800baa0 <scalbn+0xc0>)
 800ba7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba80:	f000 f81c 	bl	800babc <copysign>
 800ba84:	e7c1      	b.n	800ba0a <scalbn+0x2a>
 800ba86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ba8a:	3236      	adds	r2, #54	; 0x36
 800ba8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ba90:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ba94:	4620      	mov	r0, r4
 800ba96:	4629      	mov	r1, r5
 800ba98:	2200      	movs	r2, #0
 800ba9a:	4b07      	ldr	r3, [pc, #28]	; (800bab8 <scalbn+0xd8>)
 800ba9c:	e7d6      	b.n	800ba4c <scalbn+0x6c>
 800ba9e:	bf00      	nop
 800baa0:	c2f8f359 	.word	0xc2f8f359
 800baa4:	01a56e1f 	.word	0x01a56e1f
 800baa8:	8800759c 	.word	0x8800759c
 800baac:	7e37e43c 	.word	0x7e37e43c
 800bab0:	43500000 	.word	0x43500000
 800bab4:	ffff3cb0 	.word	0xffff3cb0
 800bab8:	3c900000 	.word	0x3c900000

0800babc <copysign>:
 800babc:	b530      	push	{r4, r5, lr}
 800babe:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800bac2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bac6:	ea42 0503 	orr.w	r5, r2, r3
 800baca:	4629      	mov	r1, r5
 800bacc:	bd30      	pop	{r4, r5, pc}

0800bace <abort>:
 800bace:	b508      	push	{r3, lr}
 800bad0:	2006      	movs	r0, #6
 800bad2:	f000 f93d 	bl	800bd50 <raise>
 800bad6:	2001      	movs	r0, #1
 800bad8:	f7fc f856 	bl	8007b88 <_exit>

0800badc <__errno>:
 800badc:	4b01      	ldr	r3, [pc, #4]	; (800bae4 <__errno+0x8>)
 800bade:	6818      	ldr	r0, [r3, #0]
 800bae0:	4770      	bx	lr
 800bae2:	bf00      	nop
 800bae4:	2000006c 	.word	0x2000006c

0800bae8 <__libc_init_array>:
 800bae8:	b570      	push	{r4, r5, r6, lr}
 800baea:	2500      	movs	r5, #0
 800baec:	4e0c      	ldr	r6, [pc, #48]	; (800bb20 <__libc_init_array+0x38>)
 800baee:	4c0d      	ldr	r4, [pc, #52]	; (800bb24 <__libc_init_array+0x3c>)
 800baf0:	1ba4      	subs	r4, r4, r6
 800baf2:	10a4      	asrs	r4, r4, #2
 800baf4:	42a5      	cmp	r5, r4
 800baf6:	d109      	bne.n	800bb0c <__libc_init_array+0x24>
 800baf8:	f000 f948 	bl	800bd8c <_init>
 800bafc:	2500      	movs	r5, #0
 800bafe:	4e0a      	ldr	r6, [pc, #40]	; (800bb28 <__libc_init_array+0x40>)
 800bb00:	4c0a      	ldr	r4, [pc, #40]	; (800bb2c <__libc_init_array+0x44>)
 800bb02:	1ba4      	subs	r4, r4, r6
 800bb04:	10a4      	asrs	r4, r4, #2
 800bb06:	42a5      	cmp	r5, r4
 800bb08:	d105      	bne.n	800bb16 <__libc_init_array+0x2e>
 800bb0a:	bd70      	pop	{r4, r5, r6, pc}
 800bb0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bb10:	4798      	blx	r3
 800bb12:	3501      	adds	r5, #1
 800bb14:	e7ee      	b.n	800baf4 <__libc_init_array+0xc>
 800bb16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bb1a:	4798      	blx	r3
 800bb1c:	3501      	adds	r5, #1
 800bb1e:	e7f2      	b.n	800bb06 <__libc_init_array+0x1e>
 800bb20:	0800bea8 	.word	0x0800bea8
 800bb24:	0800bea8 	.word	0x0800bea8
 800bb28:	0800bea8 	.word	0x0800bea8
 800bb2c:	0800bec4 	.word	0x0800bec4

0800bb30 <malloc>:
 800bb30:	4b02      	ldr	r3, [pc, #8]	; (800bb3c <malloc+0xc>)
 800bb32:	4601      	mov	r1, r0
 800bb34:	6818      	ldr	r0, [r3, #0]
 800bb36:	f000 b879 	b.w	800bc2c <_malloc_r>
 800bb3a:	bf00      	nop
 800bb3c:	2000006c 	.word	0x2000006c

0800bb40 <free>:
 800bb40:	4b02      	ldr	r3, [pc, #8]	; (800bb4c <free+0xc>)
 800bb42:	4601      	mov	r1, r0
 800bb44:	6818      	ldr	r0, [r3, #0]
 800bb46:	f000 b825 	b.w	800bb94 <_free_r>
 800bb4a:	bf00      	nop
 800bb4c:	2000006c 	.word	0x2000006c

0800bb50 <memcmp>:
 800bb50:	b530      	push	{r4, r5, lr}
 800bb52:	2400      	movs	r4, #0
 800bb54:	42a2      	cmp	r2, r4
 800bb56:	d101      	bne.n	800bb5c <memcmp+0xc>
 800bb58:	2000      	movs	r0, #0
 800bb5a:	e007      	b.n	800bb6c <memcmp+0x1c>
 800bb5c:	5d03      	ldrb	r3, [r0, r4]
 800bb5e:	3401      	adds	r4, #1
 800bb60:	190d      	adds	r5, r1, r4
 800bb62:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800bb66:	42ab      	cmp	r3, r5
 800bb68:	d0f4      	beq.n	800bb54 <memcmp+0x4>
 800bb6a:	1b58      	subs	r0, r3, r5
 800bb6c:	bd30      	pop	{r4, r5, pc}

0800bb6e <memcpy>:
 800bb6e:	b510      	push	{r4, lr}
 800bb70:	1e43      	subs	r3, r0, #1
 800bb72:	440a      	add	r2, r1
 800bb74:	4291      	cmp	r1, r2
 800bb76:	d100      	bne.n	800bb7a <memcpy+0xc>
 800bb78:	bd10      	pop	{r4, pc}
 800bb7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb82:	e7f7      	b.n	800bb74 <memcpy+0x6>

0800bb84 <memset>:
 800bb84:	4603      	mov	r3, r0
 800bb86:	4402      	add	r2, r0
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d100      	bne.n	800bb8e <memset+0xa>
 800bb8c:	4770      	bx	lr
 800bb8e:	f803 1b01 	strb.w	r1, [r3], #1
 800bb92:	e7f9      	b.n	800bb88 <memset+0x4>

0800bb94 <_free_r>:
 800bb94:	b538      	push	{r3, r4, r5, lr}
 800bb96:	4605      	mov	r5, r0
 800bb98:	2900      	cmp	r1, #0
 800bb9a:	d043      	beq.n	800bc24 <_free_r+0x90>
 800bb9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bba0:	1f0c      	subs	r4, r1, #4
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	bfb8      	it	lt
 800bba6:	18e4      	addlt	r4, r4, r3
 800bba8:	f000 f8ee 	bl	800bd88 <__malloc_lock>
 800bbac:	4a1e      	ldr	r2, [pc, #120]	; (800bc28 <_free_r+0x94>)
 800bbae:	6813      	ldr	r3, [r2, #0]
 800bbb0:	4610      	mov	r0, r2
 800bbb2:	b933      	cbnz	r3, 800bbc2 <_free_r+0x2e>
 800bbb4:	6063      	str	r3, [r4, #4]
 800bbb6:	6014      	str	r4, [r2, #0]
 800bbb8:	4628      	mov	r0, r5
 800bbba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbbe:	f000 b8e4 	b.w	800bd8a <__malloc_unlock>
 800bbc2:	42a3      	cmp	r3, r4
 800bbc4:	d90b      	bls.n	800bbde <_free_r+0x4a>
 800bbc6:	6821      	ldr	r1, [r4, #0]
 800bbc8:	1862      	adds	r2, r4, r1
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	bf01      	itttt	eq
 800bbce:	681a      	ldreq	r2, [r3, #0]
 800bbd0:	685b      	ldreq	r3, [r3, #4]
 800bbd2:	1852      	addeq	r2, r2, r1
 800bbd4:	6022      	streq	r2, [r4, #0]
 800bbd6:	6063      	str	r3, [r4, #4]
 800bbd8:	6004      	str	r4, [r0, #0]
 800bbda:	e7ed      	b.n	800bbb8 <_free_r+0x24>
 800bbdc:	4613      	mov	r3, r2
 800bbde:	685a      	ldr	r2, [r3, #4]
 800bbe0:	b10a      	cbz	r2, 800bbe6 <_free_r+0x52>
 800bbe2:	42a2      	cmp	r2, r4
 800bbe4:	d9fa      	bls.n	800bbdc <_free_r+0x48>
 800bbe6:	6819      	ldr	r1, [r3, #0]
 800bbe8:	1858      	adds	r0, r3, r1
 800bbea:	42a0      	cmp	r0, r4
 800bbec:	d10b      	bne.n	800bc06 <_free_r+0x72>
 800bbee:	6820      	ldr	r0, [r4, #0]
 800bbf0:	4401      	add	r1, r0
 800bbf2:	1858      	adds	r0, r3, r1
 800bbf4:	4282      	cmp	r2, r0
 800bbf6:	6019      	str	r1, [r3, #0]
 800bbf8:	d1de      	bne.n	800bbb8 <_free_r+0x24>
 800bbfa:	6810      	ldr	r0, [r2, #0]
 800bbfc:	6852      	ldr	r2, [r2, #4]
 800bbfe:	4401      	add	r1, r0
 800bc00:	6019      	str	r1, [r3, #0]
 800bc02:	605a      	str	r2, [r3, #4]
 800bc04:	e7d8      	b.n	800bbb8 <_free_r+0x24>
 800bc06:	d902      	bls.n	800bc0e <_free_r+0x7a>
 800bc08:	230c      	movs	r3, #12
 800bc0a:	602b      	str	r3, [r5, #0]
 800bc0c:	e7d4      	b.n	800bbb8 <_free_r+0x24>
 800bc0e:	6820      	ldr	r0, [r4, #0]
 800bc10:	1821      	adds	r1, r4, r0
 800bc12:	428a      	cmp	r2, r1
 800bc14:	bf01      	itttt	eq
 800bc16:	6811      	ldreq	r1, [r2, #0]
 800bc18:	6852      	ldreq	r2, [r2, #4]
 800bc1a:	1809      	addeq	r1, r1, r0
 800bc1c:	6021      	streq	r1, [r4, #0]
 800bc1e:	6062      	str	r2, [r4, #4]
 800bc20:	605c      	str	r4, [r3, #4]
 800bc22:	e7c9      	b.n	800bbb8 <_free_r+0x24>
 800bc24:	bd38      	pop	{r3, r4, r5, pc}
 800bc26:	bf00      	nop
 800bc28:	20002448 	.word	0x20002448

0800bc2c <_malloc_r>:
 800bc2c:	b570      	push	{r4, r5, r6, lr}
 800bc2e:	1ccd      	adds	r5, r1, #3
 800bc30:	f025 0503 	bic.w	r5, r5, #3
 800bc34:	3508      	adds	r5, #8
 800bc36:	2d0c      	cmp	r5, #12
 800bc38:	bf38      	it	cc
 800bc3a:	250c      	movcc	r5, #12
 800bc3c:	2d00      	cmp	r5, #0
 800bc3e:	4606      	mov	r6, r0
 800bc40:	db01      	blt.n	800bc46 <_malloc_r+0x1a>
 800bc42:	42a9      	cmp	r1, r5
 800bc44:	d903      	bls.n	800bc4e <_malloc_r+0x22>
 800bc46:	230c      	movs	r3, #12
 800bc48:	6033      	str	r3, [r6, #0]
 800bc4a:	2000      	movs	r0, #0
 800bc4c:	bd70      	pop	{r4, r5, r6, pc}
 800bc4e:	f000 f89b 	bl	800bd88 <__malloc_lock>
 800bc52:	4a21      	ldr	r2, [pc, #132]	; (800bcd8 <_malloc_r+0xac>)
 800bc54:	6814      	ldr	r4, [r2, #0]
 800bc56:	4621      	mov	r1, r4
 800bc58:	b991      	cbnz	r1, 800bc80 <_malloc_r+0x54>
 800bc5a:	4c20      	ldr	r4, [pc, #128]	; (800bcdc <_malloc_r+0xb0>)
 800bc5c:	6823      	ldr	r3, [r4, #0]
 800bc5e:	b91b      	cbnz	r3, 800bc68 <_malloc_r+0x3c>
 800bc60:	4630      	mov	r0, r6
 800bc62:	f000 f83d 	bl	800bce0 <_sbrk_r>
 800bc66:	6020      	str	r0, [r4, #0]
 800bc68:	4629      	mov	r1, r5
 800bc6a:	4630      	mov	r0, r6
 800bc6c:	f000 f838 	bl	800bce0 <_sbrk_r>
 800bc70:	1c43      	adds	r3, r0, #1
 800bc72:	d124      	bne.n	800bcbe <_malloc_r+0x92>
 800bc74:	230c      	movs	r3, #12
 800bc76:	4630      	mov	r0, r6
 800bc78:	6033      	str	r3, [r6, #0]
 800bc7a:	f000 f886 	bl	800bd8a <__malloc_unlock>
 800bc7e:	e7e4      	b.n	800bc4a <_malloc_r+0x1e>
 800bc80:	680b      	ldr	r3, [r1, #0]
 800bc82:	1b5b      	subs	r3, r3, r5
 800bc84:	d418      	bmi.n	800bcb8 <_malloc_r+0x8c>
 800bc86:	2b0b      	cmp	r3, #11
 800bc88:	d90f      	bls.n	800bcaa <_malloc_r+0x7e>
 800bc8a:	600b      	str	r3, [r1, #0]
 800bc8c:	18cc      	adds	r4, r1, r3
 800bc8e:	50cd      	str	r5, [r1, r3]
 800bc90:	4630      	mov	r0, r6
 800bc92:	f000 f87a 	bl	800bd8a <__malloc_unlock>
 800bc96:	f104 000b 	add.w	r0, r4, #11
 800bc9a:	1d23      	adds	r3, r4, #4
 800bc9c:	f020 0007 	bic.w	r0, r0, #7
 800bca0:	1ac3      	subs	r3, r0, r3
 800bca2:	d0d3      	beq.n	800bc4c <_malloc_r+0x20>
 800bca4:	425a      	negs	r2, r3
 800bca6:	50e2      	str	r2, [r4, r3]
 800bca8:	e7d0      	b.n	800bc4c <_malloc_r+0x20>
 800bcaa:	684b      	ldr	r3, [r1, #4]
 800bcac:	428c      	cmp	r4, r1
 800bcae:	bf16      	itet	ne
 800bcb0:	6063      	strne	r3, [r4, #4]
 800bcb2:	6013      	streq	r3, [r2, #0]
 800bcb4:	460c      	movne	r4, r1
 800bcb6:	e7eb      	b.n	800bc90 <_malloc_r+0x64>
 800bcb8:	460c      	mov	r4, r1
 800bcba:	6849      	ldr	r1, [r1, #4]
 800bcbc:	e7cc      	b.n	800bc58 <_malloc_r+0x2c>
 800bcbe:	1cc4      	adds	r4, r0, #3
 800bcc0:	f024 0403 	bic.w	r4, r4, #3
 800bcc4:	42a0      	cmp	r0, r4
 800bcc6:	d005      	beq.n	800bcd4 <_malloc_r+0xa8>
 800bcc8:	1a21      	subs	r1, r4, r0
 800bcca:	4630      	mov	r0, r6
 800bccc:	f000 f808 	bl	800bce0 <_sbrk_r>
 800bcd0:	3001      	adds	r0, #1
 800bcd2:	d0cf      	beq.n	800bc74 <_malloc_r+0x48>
 800bcd4:	6025      	str	r5, [r4, #0]
 800bcd6:	e7db      	b.n	800bc90 <_malloc_r+0x64>
 800bcd8:	20002448 	.word	0x20002448
 800bcdc:	2000244c 	.word	0x2000244c

0800bce0 <_sbrk_r>:
 800bce0:	b538      	push	{r3, r4, r5, lr}
 800bce2:	2300      	movs	r3, #0
 800bce4:	4c05      	ldr	r4, [pc, #20]	; (800bcfc <_sbrk_r+0x1c>)
 800bce6:	4605      	mov	r5, r0
 800bce8:	4608      	mov	r0, r1
 800bcea:	6023      	str	r3, [r4, #0]
 800bcec:	f7fb ff52 	bl	8007b94 <_sbrk>
 800bcf0:	1c43      	adds	r3, r0, #1
 800bcf2:	d102      	bne.n	800bcfa <_sbrk_r+0x1a>
 800bcf4:	6823      	ldr	r3, [r4, #0]
 800bcf6:	b103      	cbz	r3, 800bcfa <_sbrk_r+0x1a>
 800bcf8:	602b      	str	r3, [r5, #0]
 800bcfa:	bd38      	pop	{r3, r4, r5, pc}
 800bcfc:	200025a0 	.word	0x200025a0

0800bd00 <_raise_r>:
 800bd00:	291f      	cmp	r1, #31
 800bd02:	b538      	push	{r3, r4, r5, lr}
 800bd04:	4604      	mov	r4, r0
 800bd06:	460d      	mov	r5, r1
 800bd08:	d904      	bls.n	800bd14 <_raise_r+0x14>
 800bd0a:	2316      	movs	r3, #22
 800bd0c:	6003      	str	r3, [r0, #0]
 800bd0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd12:	bd38      	pop	{r3, r4, r5, pc}
 800bd14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bd16:	b112      	cbz	r2, 800bd1e <_raise_r+0x1e>
 800bd18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd1c:	b94b      	cbnz	r3, 800bd32 <_raise_r+0x32>
 800bd1e:	4620      	mov	r0, r4
 800bd20:	f000 f830 	bl	800bd84 <_getpid_r>
 800bd24:	462a      	mov	r2, r5
 800bd26:	4601      	mov	r1, r0
 800bd28:	4620      	mov	r0, r4
 800bd2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd2e:	f000 b817 	b.w	800bd60 <_kill_r>
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d00a      	beq.n	800bd4c <_raise_r+0x4c>
 800bd36:	1c59      	adds	r1, r3, #1
 800bd38:	d103      	bne.n	800bd42 <_raise_r+0x42>
 800bd3a:	2316      	movs	r3, #22
 800bd3c:	6003      	str	r3, [r0, #0]
 800bd3e:	2001      	movs	r0, #1
 800bd40:	e7e7      	b.n	800bd12 <_raise_r+0x12>
 800bd42:	2400      	movs	r4, #0
 800bd44:	4628      	mov	r0, r5
 800bd46:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd4a:	4798      	blx	r3
 800bd4c:	2000      	movs	r0, #0
 800bd4e:	e7e0      	b.n	800bd12 <_raise_r+0x12>

0800bd50 <raise>:
 800bd50:	4b02      	ldr	r3, [pc, #8]	; (800bd5c <raise+0xc>)
 800bd52:	4601      	mov	r1, r0
 800bd54:	6818      	ldr	r0, [r3, #0]
 800bd56:	f7ff bfd3 	b.w	800bd00 <_raise_r>
 800bd5a:	bf00      	nop
 800bd5c:	2000006c 	.word	0x2000006c

0800bd60 <_kill_r>:
 800bd60:	b538      	push	{r3, r4, r5, lr}
 800bd62:	2300      	movs	r3, #0
 800bd64:	4c06      	ldr	r4, [pc, #24]	; (800bd80 <_kill_r+0x20>)
 800bd66:	4605      	mov	r5, r0
 800bd68:	4608      	mov	r0, r1
 800bd6a:	4611      	mov	r1, r2
 800bd6c:	6023      	str	r3, [r4, #0]
 800bd6e:	f7fb ff03 	bl	8007b78 <_kill>
 800bd72:	1c43      	adds	r3, r0, #1
 800bd74:	d102      	bne.n	800bd7c <_kill_r+0x1c>
 800bd76:	6823      	ldr	r3, [r4, #0]
 800bd78:	b103      	cbz	r3, 800bd7c <_kill_r+0x1c>
 800bd7a:	602b      	str	r3, [r5, #0]
 800bd7c:	bd38      	pop	{r3, r4, r5, pc}
 800bd7e:	bf00      	nop
 800bd80:	200025a0 	.word	0x200025a0

0800bd84 <_getpid_r>:
 800bd84:	f7fb bef6 	b.w	8007b74 <_getpid>

0800bd88 <__malloc_lock>:
 800bd88:	4770      	bx	lr

0800bd8a <__malloc_unlock>:
 800bd8a:	4770      	bx	lr

0800bd8c <_init>:
 800bd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd8e:	bf00      	nop
 800bd90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd92:	bc08      	pop	{r3}
 800bd94:	469e      	mov	lr, r3
 800bd96:	4770      	bx	lr

0800bd98 <_fini>:
 800bd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9a:	bf00      	nop
 800bd9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd9e:	bc08      	pop	{r3}
 800bda0:	469e      	mov	lr, r3
 800bda2:	4770      	bx	lr
