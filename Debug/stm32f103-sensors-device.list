
stm32f103-sensors-device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba24  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800bb38  0800bb38  0001bb38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc30  0800bc30  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc30  0800bc30  0001bc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc38  0800bc38  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000001c  0800bc38  0800bc38  0001bc38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  0800bc54  0800bc54  0001bc54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800bc64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024cc  200000d0  0800bd34  000200d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000259c  0800bd34  0002259c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006cdf3  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008844  00000000  00000000  0008ceec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00028e5d  00000000  00000000  00095730  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001ad8  00000000  00000000  000be590  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000025b0  00000000  00000000  000c0068  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000219ec  00000000  00000000  000c2618  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001d249  00000000  00000000  000e4004  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000aa668  00000000  00000000  0010124d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001ab8b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b14  00000000  00000000  001ab930  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000d0 	.word	0x200000d0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bb1c 	.word	0x0800bb1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000d4 	.word	0x200000d4
 800014c:	0800bb1c 	.word	0x0800bb1c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__gesf2>:
 8000ac8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000acc:	e006      	b.n	8000adc <__cmpsf2+0x4>
 8000ace:	bf00      	nop

08000ad0 <__lesf2>:
 8000ad0:	f04f 0c01 	mov.w	ip, #1
 8000ad4:	e002      	b.n	8000adc <__cmpsf2+0x4>
 8000ad6:	bf00      	nop

08000ad8 <__cmpsf2>:
 8000ad8:	f04f 0c01 	mov.w	ip, #1
 8000adc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ae0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ae4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ae8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aec:	bf18      	it	ne
 8000aee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af2:	d011      	beq.n	8000b18 <__cmpsf2+0x40>
 8000af4:	b001      	add	sp, #4
 8000af6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000afa:	bf18      	it	ne
 8000afc:	ea90 0f01 	teqne	r0, r1
 8000b00:	bf58      	it	pl
 8000b02:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b06:	bf88      	it	hi
 8000b08:	17c8      	asrhi	r0, r1, #31
 8000b0a:	bf38      	it	cc
 8000b0c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b10:	bf18      	it	ne
 8000b12:	f040 0001 	orrne.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b1c:	d102      	bne.n	8000b24 <__cmpsf2+0x4c>
 8000b1e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b22:	d105      	bne.n	8000b30 <__cmpsf2+0x58>
 8000b24:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b28:	d1e4      	bne.n	8000af4 <__cmpsf2+0x1c>
 8000b2a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b2e:	d0e1      	beq.n	8000af4 <__cmpsf2+0x1c>
 8000b30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <__aeabi_cfrcmple>:
 8000b38:	4684      	mov	ip, r0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	4661      	mov	r1, ip
 8000b3e:	e7ff      	b.n	8000b40 <__aeabi_cfcmpeq>

08000b40 <__aeabi_cfcmpeq>:
 8000b40:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b42:	f7ff ffc9 	bl	8000ad8 <__cmpsf2>
 8000b46:	2800      	cmp	r0, #0
 8000b48:	bf48      	it	mi
 8000b4a:	f110 0f00 	cmnmi.w	r0, #0
 8000b4e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b50 <__aeabi_fcmpeq>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff fff4 	bl	8000b40 <__aeabi_cfcmpeq>
 8000b58:	bf0c      	ite	eq
 8000b5a:	2001      	moveq	r0, #1
 8000b5c:	2000      	movne	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_fcmplt>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffea 	bl	8000b40 <__aeabi_cfcmpeq>
 8000b6c:	bf34      	ite	cc
 8000b6e:	2001      	movcc	r0, #1
 8000b70:	2000      	movcs	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_fcmple>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffe0 	bl	8000b40 <__aeabi_cfcmpeq>
 8000b80:	bf94      	ite	ls
 8000b82:	2001      	movls	r0, #1
 8000b84:	2000      	movhi	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_fcmpge>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffd2 	bl	8000b38 <__aeabi_cfrcmple>
 8000b94:	bf94      	ite	ls
 8000b96:	2001      	movls	r0, #1
 8000b98:	2000      	movhi	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fcmpgt>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff ffc8 	bl	8000b38 <__aeabi_cfrcmple>
 8000ba8:	bf34      	ite	cc
 8000baa:	2001      	movcc	r0, #1
 8000bac:	2000      	movcs	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_ldivmod>:
 8000bb4:	b97b      	cbnz	r3, 8000bd6 <__aeabi_ldivmod+0x22>
 8000bb6:	b972      	cbnz	r2, 8000bd6 <__aeabi_ldivmod+0x22>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bfbe      	ittt	lt
 8000bbc:	2000      	movlt	r0, #0
 8000bbe:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bc2:	e006      	blt.n	8000bd2 <__aeabi_ldivmod+0x1e>
 8000bc4:	bf08      	it	eq
 8000bc6:	2800      	cmpeq	r0, #0
 8000bc8:	bf1c      	itt	ne
 8000bca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bce:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bd2:	f000 b9bf 	b.w	8000f54 <__aeabi_idiv0>
 8000bd6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bda:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bde:	2900      	cmp	r1, #0
 8000be0:	db09      	blt.n	8000bf6 <__aeabi_ldivmod+0x42>
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	db1a      	blt.n	8000c1c <__aeabi_ldivmod+0x68>
 8000be6:	f000 f84d 	bl	8000c84 <__udivmoddi4>
 8000bea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf2:	b004      	add	sp, #16
 8000bf4:	4770      	bx	lr
 8000bf6:	4240      	negs	r0, r0
 8000bf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db1b      	blt.n	8000c38 <__aeabi_ldivmod+0x84>
 8000c00:	f000 f840 	bl	8000c84 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4240      	negs	r0, r0
 8000c10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c14:	4252      	negs	r2, r2
 8000c16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1a:	4770      	bx	lr
 8000c1c:	4252      	negs	r2, r2
 8000c1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c22:	f000 f82f 	bl	8000c84 <__udivmoddi4>
 8000c26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2e:	b004      	add	sp, #16
 8000c30:	4240      	negs	r0, r0
 8000c32:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c36:	4770      	bx	lr
 8000c38:	4252      	negs	r2, r2
 8000c3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c3e:	f000 f821 	bl	8000c84 <__udivmoddi4>
 8000c42:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4a:	b004      	add	sp, #16
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	4770      	bx	lr

08000c54 <__aeabi_uldivmod>:
 8000c54:	b953      	cbnz	r3, 8000c6c <__aeabi_uldivmod+0x18>
 8000c56:	b94a      	cbnz	r2, 8000c6c <__aeabi_uldivmod+0x18>
 8000c58:	2900      	cmp	r1, #0
 8000c5a:	bf08      	it	eq
 8000c5c:	2800      	cmpeq	r0, #0
 8000c5e:	bf1c      	itt	ne
 8000c60:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c64:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c68:	f000 b974 	b.w	8000f54 <__aeabi_idiv0>
 8000c6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c74:	f000 f806 	bl	8000c84 <__udivmoddi4>
 8000c78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c80:	b004      	add	sp, #16
 8000c82:	4770      	bx	lr

08000c84 <__udivmoddi4>:
 8000c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c88:	468c      	mov	ip, r1
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d14b      	bne.n	8000d2a <__udivmoddi4+0xa6>
 8000c92:	428a      	cmp	r2, r1
 8000c94:	4615      	mov	r5, r2
 8000c96:	d967      	bls.n	8000d68 <__udivmoddi4+0xe4>
 8000c98:	fab2 f282 	clz	r2, r2
 8000c9c:	b14a      	cbz	r2, 8000cb2 <__udivmoddi4+0x2e>
 8000c9e:	f1c2 0720 	rsb	r7, r2, #32
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	fa20 f707 	lsr.w	r7, r0, r7
 8000caa:	4095      	lsls	r5, r2
 8000cac:	ea47 0c03 	orr.w	ip, r7, r3
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb6:	fbbc f7fe 	udiv	r7, ip, lr
 8000cba:	fa1f f885 	uxth.w	r8, r5
 8000cbe:	fb0e c317 	mls	r3, lr, r7, ip
 8000cc2:	fb07 f908 	mul.w	r9, r7, r8
 8000cc6:	0c21      	lsrs	r1, r4, #16
 8000cc8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ccc:	4599      	cmp	r9, r3
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x60>
 8000cd0:	18eb      	adds	r3, r5, r3
 8000cd2:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000cd6:	f080 811c 	bcs.w	8000f12 <__udivmoddi4+0x28e>
 8000cda:	4599      	cmp	r9, r3
 8000cdc:	f240 8119 	bls.w	8000f12 <__udivmoddi4+0x28e>
 8000ce0:	3f02      	subs	r7, #2
 8000ce2:	442b      	add	r3, r5
 8000ce4:	eba3 0309 	sub.w	r3, r3, r9
 8000ce8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cec:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf0:	fb00 f108 	mul.w	r1, r0, r8
 8000cf4:	b2a4      	uxth	r4, r4
 8000cf6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfa:	42a1      	cmp	r1, r4
 8000cfc:	d909      	bls.n	8000d12 <__udivmoddi4+0x8e>
 8000cfe:	192c      	adds	r4, r5, r4
 8000d00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d04:	f080 8107 	bcs.w	8000f16 <__udivmoddi4+0x292>
 8000d08:	42a1      	cmp	r1, r4
 8000d0a:	f240 8104 	bls.w	8000f16 <__udivmoddi4+0x292>
 8000d0e:	3802      	subs	r0, #2
 8000d10:	442c      	add	r4, r5
 8000d12:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d16:	2700      	movs	r7, #0
 8000d18:	1a64      	subs	r4, r4, r1
 8000d1a:	b11e      	cbz	r6, 8000d24 <__udivmoddi4+0xa0>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	40d4      	lsrs	r4, r2
 8000d20:	e9c6 4300 	strd	r4, r3, [r6]
 8000d24:	4639      	mov	r1, r7
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d909      	bls.n	8000d42 <__udivmoddi4+0xbe>
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	f000 80ec 	beq.w	8000f0c <__udivmoddi4+0x288>
 8000d34:	2700      	movs	r7, #0
 8000d36:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3a:	4638      	mov	r0, r7
 8000d3c:	4639      	mov	r1, r7
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	fab3 f783 	clz	r7, r3
 8000d46:	2f00      	cmp	r7, #0
 8000d48:	d148      	bne.n	8000ddc <__udivmoddi4+0x158>
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xd0>
 8000d4e:	4282      	cmp	r2, r0
 8000d50:	f200 80fb 	bhi.w	8000f4a <__udivmoddi4+0x2c6>
 8000d54:	1a84      	subs	r4, r0, r2
 8000d56:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	469c      	mov	ip, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d0e0      	beq.n	8000d24 <__udivmoddi4+0xa0>
 8000d62:	e9c6 4c00 	strd	r4, ip, [r6]
 8000d66:	e7dd      	b.n	8000d24 <__udivmoddi4+0xa0>
 8000d68:	b902      	cbnz	r2, 8000d6c <__udivmoddi4+0xe8>
 8000d6a:	deff      	udf	#255	; 0xff
 8000d6c:	fab2 f282 	clz	r2, r2
 8000d70:	2a00      	cmp	r2, #0
 8000d72:	f040 808f 	bne.w	8000e94 <__udivmoddi4+0x210>
 8000d76:	2701      	movs	r7, #1
 8000d78:	1b49      	subs	r1, r1, r5
 8000d7a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000d7e:	fa1f f985 	uxth.w	r9, r5
 8000d82:	fbb1 fef8 	udiv	lr, r1, r8
 8000d86:	fb08 111e 	mls	r1, r8, lr, r1
 8000d8a:	fb09 f00e 	mul.w	r0, r9, lr
 8000d8e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000d92:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000d96:	4298      	cmp	r0, r3
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x126>
 8000d9a:	18eb      	adds	r3, r5, r3
 8000d9c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000da0:	d202      	bcs.n	8000da8 <__udivmoddi4+0x124>
 8000da2:	4298      	cmp	r0, r3
 8000da4:	f200 80cd 	bhi.w	8000f42 <__udivmoddi4+0x2be>
 8000da8:	468e      	mov	lr, r1
 8000daa:	1a1b      	subs	r3, r3, r0
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	fb09 f900 	mul.w	r9, r9, r0
 8000db8:	b2a4      	uxth	r4, r4
 8000dba:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dbe:	45a1      	cmp	r9, r4
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x14e>
 8000dc2:	192c      	adds	r4, r5, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc8:	d202      	bcs.n	8000dd0 <__udivmoddi4+0x14c>
 8000dca:	45a1      	cmp	r9, r4
 8000dcc:	f200 80b6 	bhi.w	8000f3c <__udivmoddi4+0x2b8>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	eba4 0409 	sub.w	r4, r4, r9
 8000dd6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000dda:	e79e      	b.n	8000d1a <__udivmoddi4+0x96>
 8000ddc:	f1c7 0520 	rsb	r5, r7, #32
 8000de0:	40bb      	lsls	r3, r7
 8000de2:	fa22 fc05 	lsr.w	ip, r2, r5
 8000de6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dea:	fa21 f405 	lsr.w	r4, r1, r5
 8000dee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000df2:	fbb4 f9fe 	udiv	r9, r4, lr
 8000df6:	fa1f f88c 	uxth.w	r8, ip
 8000dfa:	fb0e 4419 	mls	r4, lr, r9, r4
 8000dfe:	fa20 f305 	lsr.w	r3, r0, r5
 8000e02:	40b9      	lsls	r1, r7
 8000e04:	fb09 fa08 	mul.w	sl, r9, r8
 8000e08:	4319      	orrs	r1, r3
 8000e0a:	0c0b      	lsrs	r3, r1, #16
 8000e0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e10:	45a2      	cmp	sl, r4
 8000e12:	fa02 f207 	lsl.w	r2, r2, r7
 8000e16:	fa00 f307 	lsl.w	r3, r0, r7
 8000e1a:	d90b      	bls.n	8000e34 <__udivmoddi4+0x1b0>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e24:	f080 8088 	bcs.w	8000f38 <__udivmoddi4+0x2b4>
 8000e28:	45a2      	cmp	sl, r4
 8000e2a:	f240 8085 	bls.w	8000f38 <__udivmoddi4+0x2b4>
 8000e2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e32:	4464      	add	r4, ip
 8000e34:	eba4 040a 	sub.w	r4, r4, sl
 8000e38:	fbb4 f0fe 	udiv	r0, r4, lr
 8000e3c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000e40:	fb00 fa08 	mul.w	sl, r0, r8
 8000e44:	b289      	uxth	r1, r1
 8000e46:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x1dc>
 8000e4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e52:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e56:	d26b      	bcs.n	8000f30 <__udivmoddi4+0x2ac>
 8000e58:	45a2      	cmp	sl, r4
 8000e5a:	d969      	bls.n	8000f30 <__udivmoddi4+0x2ac>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4464      	add	r4, ip
 8000e60:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e64:	fba0 8902 	umull	r8, r9, r0, r2
 8000e68:	eba4 040a 	sub.w	r4, r4, sl
 8000e6c:	454c      	cmp	r4, r9
 8000e6e:	4641      	mov	r1, r8
 8000e70:	46ce      	mov	lr, r9
 8000e72:	d354      	bcc.n	8000f1e <__udivmoddi4+0x29a>
 8000e74:	d051      	beq.n	8000f1a <__udivmoddi4+0x296>
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d069      	beq.n	8000f4e <__udivmoddi4+0x2ca>
 8000e7a:	1a5a      	subs	r2, r3, r1
 8000e7c:	eb64 040e 	sbc.w	r4, r4, lr
 8000e80:	fa04 f505 	lsl.w	r5, r4, r5
 8000e84:	fa22 f307 	lsr.w	r3, r2, r7
 8000e88:	40fc      	lsrs	r4, r7
 8000e8a:	431d      	orrs	r5, r3
 8000e8c:	e9c6 5400 	strd	r5, r4, [r6]
 8000e90:	2700      	movs	r7, #0
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0xa0>
 8000e94:	4095      	lsls	r5, r2
 8000e96:	f1c2 0320 	rsb	r3, r2, #32
 8000e9a:	fa21 f003 	lsr.w	r0, r1, r3
 8000e9e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000ea2:	fbb0 f7f8 	udiv	r7, r0, r8
 8000ea6:	fa1f f985 	uxth.w	r9, r5
 8000eaa:	fb08 0017 	mls	r0, r8, r7, r0
 8000eae:	fa24 f303 	lsr.w	r3, r4, r3
 8000eb2:	4091      	lsls	r1, r2
 8000eb4:	fb07 fc09 	mul.w	ip, r7, r9
 8000eb8:	430b      	orrs	r3, r1
 8000eba:	0c19      	lsrs	r1, r3, #16
 8000ebc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ec0:	458c      	cmp	ip, r1
 8000ec2:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec6:	d907      	bls.n	8000ed8 <__udivmoddi4+0x254>
 8000ec8:	1869      	adds	r1, r5, r1
 8000eca:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000ece:	d231      	bcs.n	8000f34 <__udivmoddi4+0x2b0>
 8000ed0:	458c      	cmp	ip, r1
 8000ed2:	d92f      	bls.n	8000f34 <__udivmoddi4+0x2b0>
 8000ed4:	3f02      	subs	r7, #2
 8000ed6:	4429      	add	r1, r5
 8000ed8:	eba1 010c 	sub.w	r1, r1, ip
 8000edc:	fbb1 f0f8 	udiv	r0, r1, r8
 8000ee0:	fb08 1c10 	mls	ip, r8, r0, r1
 8000ee4:	fb00 fe09 	mul.w	lr, r0, r9
 8000ee8:	b299      	uxth	r1, r3
 8000eea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eee:	458e      	cmp	lr, r1
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x27e>
 8000ef2:	1869      	adds	r1, r5, r1
 8000ef4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ef8:	d218      	bcs.n	8000f2c <__udivmoddi4+0x2a8>
 8000efa:	458e      	cmp	lr, r1
 8000efc:	d916      	bls.n	8000f2c <__udivmoddi4+0x2a8>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4429      	add	r1, r5
 8000f02:	eba1 010e 	sub.w	r1, r1, lr
 8000f06:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0a:	e73a      	b.n	8000d82 <__udivmoddi4+0xfe>
 8000f0c:	4637      	mov	r7, r6
 8000f0e:	4630      	mov	r0, r6
 8000f10:	e708      	b.n	8000d24 <__udivmoddi4+0xa0>
 8000f12:	460f      	mov	r7, r1
 8000f14:	e6e6      	b.n	8000ce4 <__udivmoddi4+0x60>
 8000f16:	4618      	mov	r0, r3
 8000f18:	e6fb      	b.n	8000d12 <__udivmoddi4+0x8e>
 8000f1a:	4543      	cmp	r3, r8
 8000f1c:	d2ab      	bcs.n	8000e76 <__udivmoddi4+0x1f2>
 8000f1e:	ebb8 0102 	subs.w	r1, r8, r2
 8000f22:	eb69 020c 	sbc.w	r2, r9, ip
 8000f26:	3801      	subs	r0, #1
 8000f28:	4696      	mov	lr, r2
 8000f2a:	e7a4      	b.n	8000e76 <__udivmoddi4+0x1f2>
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	e7e8      	b.n	8000f02 <__udivmoddi4+0x27e>
 8000f30:	4608      	mov	r0, r1
 8000f32:	e795      	b.n	8000e60 <__udivmoddi4+0x1dc>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e7cf      	b.n	8000ed8 <__udivmoddi4+0x254>
 8000f38:	4681      	mov	r9, r0
 8000f3a:	e77b      	b.n	8000e34 <__udivmoddi4+0x1b0>
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	442c      	add	r4, r5
 8000f40:	e747      	b.n	8000dd2 <__udivmoddi4+0x14e>
 8000f42:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f46:	442b      	add	r3, r5
 8000f48:	e72f      	b.n	8000daa <__udivmoddi4+0x126>
 8000f4a:	4638      	mov	r0, r7
 8000f4c:	e707      	b.n	8000d5e <__udivmoddi4+0xda>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	e6e8      	b.n	8000d24 <__udivmoddi4+0xa0>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <erase_flash>:
//	  }
}

//////////////////////// ОЧИСТКА ПАМЯТИ /////////////////////////////
void erase_flash(void)
{
 8000f58:	b530      	push	{r4, r5, lr}
 8000f5a:	b083      	sub	sp, #12
	static FLASH_EraseInitTypeDef EraseInitStruct;     // структура для очистки флеша

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // постраничная очистка, FLASH_TYPEERASE_MASSERASE - очистка всего флеша
 8000f5c:	4c09      	ldr	r4, [pc, #36]	; (8000f84 <erase_flash+0x2c>)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	6023      	str	r3, [r4, #0]
	EraseInitStruct.PageAddress = STARTADDR;
 8000f62:	4a09      	ldr	r2, [pc, #36]	; (8000f88 <erase_flash+0x30>)
 8000f64:	60a2      	str	r2, [r4, #8]
	EraseInitStruct.NbPages = PAGES;
 8000f66:	2202      	movs	r2, #2
 8000f68:	60e2      	str	r2, [r4, #12]
	//EraseInitStruct.Banks = FLASH_BANK_1; // FLASH_BANK_2 - банк №2, FLASH_BANK_BOTH - оба банка
	uint32_t page_error = 0; // переменная, в которую запишется адрес страницы при неудачном стирании
 8000f6a:	ad02      	add	r5, sp, #8
 8000f6c:	f845 3d04 	str.w	r3, [r5, #-4]!

	HAL_FLASH_Unlock(); // разблокировать флеш
 8000f70:	f006 febc 	bl	8007cec <HAL_FLASH_Unlock>

	if(HAL_FLASHEx_Erase(&EraseInitStruct, &page_error) != HAL_OK)
 8000f74:	4629      	mov	r1, r5
 8000f76:	4620      	mov	r0, r4
 8000f78:	f006 ff20 	bl	8007dbc <HAL_FLASHEx_Erase>
	else
	{

	}

	HAL_FLASH_Lock();
 8000f7c:	f006 fecc 	bl	8007d18 <HAL_FLASH_Lock>
}
 8000f80:	b003      	add	sp, #12
 8000f82:	bd30      	pop	{r4, r5, pc}
 8000f84:	200000ec 	.word	0x200000ec
 8000f88:	0801fc00 	.word	0x0801fc00

08000f8c <flash_search_adress>:

//////////////////////// ПОИСК СВОБОДНЫХ ЯЧЕЕК /////////////////////////////
uint32_t flash_search_adress(uint32_t address, uint16_t cnt)
{
 8000f8c:	b570      	push	{r4, r5, r6, lr}
	uint16_t count_byte = cnt;

	while(count_byte)
 8000f8e:	460e      	mov	r6, r1
 8000f90:	4603      	mov	r3, r0
 8000f92:	b1a9      	cbz	r1, 8000fc0 <flash_search_adress+0x34>
	uint16_t count_byte = cnt;
 8000f94:	460a      	mov	r2, r1
	{
		if(0xFF == *(uint8_t*)address++) count_byte--;
		else count_byte = cnt;

		if(address == ENDMEMORY - 1) // если достигнут конец флеша
 8000f96:	4c0b      	ldr	r4, [pc, #44]	; (8000fc4 <flash_search_adress+0x38>)
		else count_byte = cnt;
 8000f98:	460d      	mov	r5, r1
 8000f9a:	e005      	b.n	8000fa8 <flash_search_adress+0x1c>
		if(0xFF == *(uint8_t*)address++) count_byte--;
 8000f9c:	3a01      	subs	r2, #1
 8000f9e:	b292      	uxth	r2, r2
		if(address == ENDMEMORY - 1) // если достигнут конец флеша
 8000fa0:	42a3      	cmp	r3, r4
 8000fa2:	d009      	beq.n	8000fb8 <flash_search_adress+0x2c>
	while(count_byte)
 8000fa4:	b162      	cbz	r2, 8000fc0 <flash_search_adress+0x34>
		else count_byte = cnt;
 8000fa6:	4618      	mov	r0, r3
		if(0xFF == *(uint8_t*)address++) count_byte--;
 8000fa8:	1c43      	adds	r3, r0, #1
 8000faa:	7801      	ldrb	r1, [r0, #0]
 8000fac:	29ff      	cmp	r1, #255	; 0xff
 8000fae:	d0f5      	beq.n	8000f9c <flash_search_adress+0x10>
		if(address == ENDMEMORY - 1) // если достигнут конец флеша
 8000fb0:	42a3      	cmp	r3, r4
 8000fb2:	d001      	beq.n	8000fb8 <flash_search_adress+0x2c>
		else count_byte = cnt;
 8000fb4:	462a      	mov	r2, r5
 8000fb6:	e7f6      	b.n	8000fa6 <flash_search_adress+0x1a>
		{
			erase_flash();        // тогда очищаем память
 8000fb8:	f7ff ffce 	bl	8000f58 <erase_flash>
			return STARTADDR;     // устанавливаем адрес для записи с самого начала
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <flash_search_adress+0x3c>)
 8000fbe:	e000      	b.n	8000fc2 <flash_search_adress+0x36>
		}
	}

	return address -= cnt;
 8000fc0:	1b98      	subs	r0, r3, r6
}
 8000fc2:	bd70      	pop	{r4, r5, r6, pc}
 8000fc4:	0801ffff 	.word	0x0801ffff
 8000fc8:	0801fc00 	.word	0x0801fc00

08000fcc <read_last_data_in_flash>:
}

//////////////////////// ЧТЕНИЕ ПОСЛЕДНИХ ДАННЫХ /////////////////////////////
void read_last_data_in_flash(buf32_t *buff)
{
	if(res_addr == STARTADDR)
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <read_last_data_in_flash+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <read_last_data_in_flash+0x18>)
 8000fd2:	4293      	cmp	r3, r2

	uint32_t adr = res_addr - BUFFSIZE * DATAWIDTH; // сдвигаемся на начало последних данных

	for(uint16_t i = 0; i < BUFFSIZE; i++)
	{
		buff[i] = *(buf32_t*)adr; // читаем
 8000fd4:	bf1c      	itt	ne
 8000fd6:	f853 3c04 	ldrne.w	r3, [r3, #-4]
 8000fda:	6003      	strne	r3, [r0, #0]
		adr = adr + DATAWIDTH;
	}
}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20002428 	.word	0x20002428
 8000fe4:	0801fc00 	.word	0x0801fc00

08000fe8 <read_id_from_flash>:
void read_id_from_flash(buf32_t *buff) {
 8000fe8:	b510      	push	{r4, lr}
 8000fea:	4604      	mov	r4, r0
	  res_addr = flash_search_adress(STARTADDR, BUFFSIZE * DATAWIDTH);
 8000fec:	2104      	movs	r1, #4
 8000fee:	4804      	ldr	r0, [pc, #16]	; (8001000 <read_id_from_flash+0x18>)
 8000ff0:	f7ff ffcc 	bl	8000f8c <flash_search_adress>
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <read_id_from_flash+0x1c>)
 8000ff6:	6018      	str	r0, [r3, #0]
	  read_last_data_in_flash(buff);
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	f7ff ffe7 	bl	8000fcc <read_last_data_in_flash>
}
 8000ffe:	bd10      	pop	{r4, pc}
 8001000:	0801fc00 	.word	0x0801fc00
 8001004:	20002428 	.word	0x20002428

08001008 <_ZN11Grow_sensor13set_system_idESt5arrayIhLj12EE>:
        }
}

// --- Поля класса-платы ---

void Grow_sensor::set_system_id(std::array<uint8_t, AMT_BYTES_SYSTEM_ID> system_id) {
 8001008:	b410      	push	{r4}
 800100a:	b085      	sub	sp, #20
 800100c:	4604      	mov	r4, r0
 800100e:	a801      	add	r0, sp, #4
 8001010:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    system_id_ = system_id;
 8001014:	c807      	ldmia	r0, {r0, r1, r2}
 8001016:	e884 000b 	stmia.w	r4, {r0, r1, r3}
}
 800101a:	b005      	add	sp, #20
 800101c:	bc10      	pop	{r4}
 800101e:	4770      	bx	lr

08001020 <_ZNK11Grow_sensor13get_system_idEv>:
std::array<uint8_t, AMT_BYTES_SYSTEM_ID> Grow_sensor::get_system_id() const {
 8001020:	b410      	push	{r4}
 8001022:	4604      	mov	r4, r0
    return system_id_;
 8001024:	460b      	mov	r3, r1
 8001026:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001028:	6020      	str	r0, [r4, #0]
 800102a:	6061      	str	r1, [r4, #4]
 800102c:	60a2      	str	r2, [r4, #8]
}
 800102e:	4620      	mov	r0, r4
 8001030:	bc10      	pop	{r4}
 8001032:	4770      	bx	lr

08001034 <_ZN11Grow_sensor10set_activeEh>:

void Grow_sensor::set_active(uint8_t active) {
    if(active < 3)
 8001034:	2902      	cmp	r1, #2
        active_ = active;
 8001036:	bf98      	it	ls
 8001038:	f880 102d 	strbls.w	r1, [r0, #45]	; 0x2d
}
 800103c:	4770      	bx	lr

0800103e <_ZNK11Grow_sensor10get_activeEv>:

uint8_t Grow_sensor::get_active() const {
    return active_;
}
 800103e:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8001042:	4770      	bx	lr

08001044 <_ZN11Grow_sensor26set_address_control_moduleE12LoRa_address>:
uint16_t Grow_sensor::get_address() const {
    return address_;
}

#if !defined( ESP32 )
bool Grow_sensor::set_address_control_module(LoRa_address address) {
 8001044:	b082      	sub	sp, #8
 8001046:	9101      	str	r1, [sp, #4]
	if(address.branch != 0)
 8001048:	0c0b      	lsrs	r3, r1, #16
		return true;
	address_control_module_ = address;
 800104a:	bf03      	ittte	eq
 800104c:	460b      	moveq	r3, r1
 800104e:	61c3      	streq	r3, [r0, #28]
	return false;
 8001050:	2000      	moveq	r0, #0
		return true;
 8001052:	2001      	movne	r0, #1
}
 8001054:	b002      	add	sp, #8
 8001056:	4770      	bx	lr

08001058 <_ZNK11Grow_sensor26get_address_control_moduleEv>:
LoRa_address Grow_sensor::get_address_control_module() const {
 8001058:	b082      	sub	sp, #8
	return address_control_module_;
 800105a:	69c3      	ldr	r3, [r0, #28]
 800105c:	2000      	movs	r0, #0
 800105e:	b29a      	uxth	r2, r3
 8001060:	f362 000f 	bfi	r0, r2, #0, #16
 8001064:	0c1b      	lsrs	r3, r3, #16
 8001066:	f363 401f 	bfi	r0, r3, #16, #16
}
 800106a:	b002      	add	sp, #8
 800106c:	4770      	bx	lr

0800106e <_ZNK11Grow_sensor11get_settingEv>:
void Grow_sensor::set_setting(uint8_t setting) {
    setting_ = setting;
}
uint8_t Grow_sensor::get_setting() const {
    return setting_;
}
 800106e:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
 8001072:	4770      	bx	lr

08001074 <_ZNK11Grow_sensor8get_typeEhRh>:
    if(get_count_component() <= num)
        return true;
    result = component_[num].get_type();
    return false;
}
bool Grow_sensor::get_type(uint8_t num, uint8_t &result) const {
 8001074:	b538      	push	{r3, r4, r5, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001076:	6904      	ldr	r4, [r0, #16]
 8001078:	6943      	ldr	r3, [r0, #20]
 800107a:	1b1b      	subs	r3, r3, r4
    if(get_count_component() <= num)
 800107c:	f3c3 03c7 	ubfx	r3, r3, #3, #8
 8001080:	4299      	cmp	r1, r3
 8001082:	d301      	bcc.n	8001088 <_ZNK11Grow_sensor8get_typeEhRh+0x14>
        return true;
 8001084:	2001      	movs	r0, #1
    result = component_[num].get_type();
    return false;
}
 8001086:	bd38      	pop	{r3, r4, r5, pc}
 8001088:	4615      	mov	r5, r2
    result = component_[num].get_type();
 800108a:	eb04 00c1 	add.w	r0, r4, r1, lsl #3
 800108e:	f000 fada 	bl	8001646 <_ZNK21Grow_sensor_component8get_typeEv>
 8001092:	7028      	strb	r0, [r5, #0]
    return false;
 8001094:	2000      	movs	r0, #0
 8001096:	e7f6      	b.n	8001086 <_ZNK11Grow_sensor8get_typeEhRh+0x12>

08001098 <_ZNK11Grow_sensor6get_idEhRh>:
    std::vector<enum Type_sensor> type_sensor;
    for(int i = 0; i < get_count_component(); ++i)
        type_sensor.push_back(component_[i].get_type());
    return type_sensor;
}
bool Grow_sensor::get_id(uint8_t num, uint8_t &result) const {
 8001098:	b538      	push	{r3, r4, r5, lr}
 800109a:	6904      	ldr	r4, [r0, #16]
 800109c:	6943      	ldr	r3, [r0, #20]
 800109e:	1b1b      	subs	r3, r3, r4
    if(get_count_component() <= num)
 80010a0:	f3c3 03c7 	ubfx	r3, r3, #3, #8
 80010a4:	4299      	cmp	r1, r3
 80010a6:	d301      	bcc.n	80010ac <_ZNK11Grow_sensor6get_idEhRh+0x14>
        return true;
 80010a8:	2001      	movs	r0, #1
    result = component_[num].get_id();
    return false;
}
 80010aa:	bd38      	pop	{r3, r4, r5, pc}
 80010ac:	4615      	mov	r5, r2
    result = component_[num].get_id();
 80010ae:	eb04 00c1 	add.w	r0, r4, r1, lsl #3
 80010b2:	f000 faca 	bl	800164a <_ZNK21Grow_sensor_component6get_idEv>
 80010b6:	7028      	strb	r0, [r5, #0]
    return false;
 80010b8:	2000      	movs	r0, #0
 80010ba:	e7f6      	b.n	80010aa <_ZNK11Grow_sensor6get_idEhRh+0x12>

080010bc <_ZN11Grow_sensor9set_valueEhf>:
    for(int i = 0; i < get_count_component(); ++i)
        id.push_back(component_[i].get_id());
    return id;
}

bool Grow_sensor::set_value(uint8_t num, float value) {
 80010bc:	b538      	push	{r3, r4, r5, lr}
 80010be:	6905      	ldr	r5, [r0, #16]
 80010c0:	6943      	ldr	r3, [r0, #20]
 80010c2:	1b5b      	subs	r3, r3, r5
    if(get_count_component() <= num)
 80010c4:	f3c3 03c7 	ubfx	r3, r3, #3, #8
 80010c8:	4299      	cmp	r1, r3
 80010ca:	d301      	bcc.n	80010d0 <_ZN11Grow_sensor9set_valueEhf+0x14>
        return true;
 80010cc:	2001      	movs	r0, #1
    component_[num].set_value(value);
    change_value_ = true;
    return false;
}
 80010ce:	bd38      	pop	{r3, r4, r5, pc}
 80010d0:	460b      	mov	r3, r1
 80010d2:	4604      	mov	r4, r0
    component_[num].set_value(value);
 80010d4:	4611      	mov	r1, r2
 80010d6:	eb05 00c3 	add.w	r0, r5, r3, lsl #3
 80010da:	f000 faba 	bl	8001652 <_ZN21Grow_sensor_component9set_valueEf>
    change_value_ = true;
 80010de:	2301      	movs	r3, #1
 80010e0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    return false;
 80010e4:	2000      	movs	r0, #0
 80010e6:	e7f2      	b.n	80010ce <_ZN11Grow_sensor9set_valueEhf+0x12>

080010e8 <_ZN11Grow_sensor9get_valueEhRf>:
bool Grow_sensor::get_value(uint8_t num, float &result) {
 80010e8:	b538      	push	{r3, r4, r5, lr}
 80010ea:	6904      	ldr	r4, [r0, #16]
 80010ec:	6943      	ldr	r3, [r0, #20]
 80010ee:	1b1b      	subs	r3, r3, r4
    if(get_count_component() <= num)
 80010f0:	f3c3 03c7 	ubfx	r3, r3, #3, #8
 80010f4:	4299      	cmp	r1, r3
 80010f6:	d301      	bcc.n	80010fc <_ZN11Grow_sensor9get_valueEhRf+0x14>
        return true;
 80010f8:	2001      	movs	r0, #1
    result = component_[num].get_value();
    return false;
}
 80010fa:	bd38      	pop	{r3, r4, r5, pc}
 80010fc:	4615      	mov	r5, r2
    result = component_[num].get_value();
 80010fe:	eb04 00c1 	add.w	r0, r4, r1, lsl #3
 8001102:	f000 faa4 	bl	800164e <_ZN21Grow_sensor_component9get_valueEv>
 8001106:	6028      	str	r0, [r5, #0]
    return false;
 8001108:	2000      	movs	r0, #0
 800110a:	e7f6      	b.n	80010fa <_ZN11Grow_sensor9get_valueEhRf+0x12>

0800110c <_ZNK11Grow_sensor19get_count_componentEv>:
 800110c:	6943      	ldr	r3, [r0, #20]
 800110e:	6900      	ldr	r0, [r0, #16]
 8001110:	1a18      	subs	r0, r3, r0
}
// --- Информации о компонентах ---

uint8_t Grow_sensor::get_count_component() const {
    return component_.size();
}
 8001112:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 8001116:	4770      	bx	lr

08001118 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8001118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800111c:	4606      	mov	r6, r0
 800111e:	460c      	mov	r4, r1
 8001120:	4691      	mov	r9, r2
 8001122:	6807      	ldr	r7, [r0, #0]
 8001124:	6843      	ldr	r3, [r0, #4]
 8001126:	1bdb      	subs	r3, r3, r7
 8001128:	10db      	asrs	r3, r3, #3
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800112a:	b18b      	cbz	r3, 8001150 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x38>
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
 800112c:	005a      	lsls	r2, r3, #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800112e:	4293      	cmp	r3, r2
 8001130:	d903      	bls.n	800113a <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x22>
  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8001132:	1bcf      	subs	r7, r1, r7
 8001134:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
 8001138:	e00d      	b.n	8001156 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
 800113a:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
 800113e:	4590      	cmp	r8, r2
 8001140:	bf28      	it	cs
 8001142:	4690      	movcs	r8, r2
 8001144:	1bcf      	subs	r7, r1, r7
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001146:	b932      	cbnz	r2, 8001156 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
 8001148:	2500      	movs	r5, #0
 800114a:	e009      	b.n	8001160 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x48>
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
 800114c:	462b      	mov	r3, r5
 800114e:	e022      	b.n	8001196 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7e>
 8001150:	1bcf      	subs	r7, r1, r7
 8001152:	f04f 0801 	mov.w	r8, #1
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001156:	ea4f 00c8 	mov.w	r0, r8, lsl #3
 800115a:	f009 fb3b 	bl	800a7d4 <_Znwj>
 800115e:	4605      	mov	r5, r0

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001160:	19ef      	adds	r7, r5, r7
 8001162:	bf1c      	itt	ne
 8001164:	e9d9 0100 	ldrdne	r0, r1, [r9]
 8001168:	e9c7 0100 	strdne	r0, r1, [r7]
#endif
	  __new_finish = pointer();

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 800116c:	f8d6 c000 	ldr.w	ip, [r6]
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
 8001170:	45a4      	cmp	ip, r4
 8001172:	d0eb      	beq.n	800114c <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x34>
 8001174:	f10c 0208 	add.w	r2, ip, #8
 8001178:	1aa7      	subs	r7, r4, r2
 800117a:	f027 0707 	bic.w	r7, r7, #7
 800117e:	3708      	adds	r7, #8
 8001180:	442f      	add	r7, r5
	  _ForwardIterator __cur = __result;
 8001182:	462b      	mov	r3, r5
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8001184:	b11b      	cbz	r3, 800118e <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x76>
 8001186:	e912 0003 	ldmdb	r2, {r0, r1}
 800118a:	e883 0003 	stmia.w	r3, {r0, r1}
	      for (; __first != __last; ++__first, (void)++__cur)
 800118e:	3308      	adds	r3, #8
 8001190:	3208      	adds	r2, #8
 8001192:	42bb      	cmp	r3, r7
 8001194:	d1f6      	bne.n	8001184 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6c>
	     __new_start, _M_get_Tp_allocator());

	  ++__new_finish;
 8001196:	f103 0708 	add.w	r7, r3, #8

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 800119a:	6872      	ldr	r2, [r6, #4]
 800119c:	42a2      	cmp	r2, r4
 800119e:	d015      	beq.n	80011cc <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>
 80011a0:	3408      	adds	r4, #8
 80011a2:	1b12      	subs	r2, r2, r4
 80011a4:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
 80011a8:	f10e 0202 	add.w	r2, lr, #2
 80011ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	  _ForwardIterator __cur = __result;
 80011b0:	463a      	mov	r2, r7
 80011b2:	b11a      	cbz	r2, 80011bc <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>
 80011b4:	e914 0003 	ldmdb	r4, {r0, r1}
 80011b8:	e882 0003 	stmia.w	r2, {r0, r1}
	      for (; __first != __last; ++__first, (void)++__cur)
 80011bc:	3208      	adds	r2, #8
 80011be:	3408      	adds	r4, #8
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d1f6      	bne.n	80011b2 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
 80011c4:	f10e 0e01 	add.w	lr, lr, #1
 80011c8:	eb07 07ce 	add.w	r7, r7, lr, lsl #3
	if (__p)
 80011cc:	f1bc 0f00 	cmp.w	ip, #0
 80011d0:	d002      	beq.n	80011d8 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc0>
	::operator delete(__p);
 80011d2:	4660      	mov	r0, ip
 80011d4:	f009 fb18 	bl	800a808 <_ZdlPv>
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		    _M_get_Tp_allocator());
      _M_deallocate(this->_M_impl._M_start,
		    this->_M_impl._M_end_of_storage
		    - this->_M_impl._M_start);
      this->_M_impl._M_start = __new_start;
 80011d8:	6035      	str	r5, [r6, #0]
      this->_M_impl._M_finish = __new_finish;
 80011da:	6077      	str	r7, [r6, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80011dc:	eb05 05c8 	add.w	r5, r5, r8, lsl #3
 80011e0:	60b5      	str	r5, [r6, #8]
    }
 80011e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080011e6 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 80011e6:	b510      	push	{r4, lr}
 80011e8:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80011ea:	6844      	ldr	r4, [r0, #4]
 80011ec:	6882      	ldr	r2, [r0, #8]
 80011ee:	4294      	cmp	r4, r2
 80011f0:	d007      	beq.n	8001202 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80011f2:	b114      	cbz	r4, 80011fa <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x14>
 80011f4:	c903      	ldmia	r1, {r0, r1}
 80011f6:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	3208      	adds	r2, #8
 80011fe:	605a      	str	r2, [r3, #4]
      }
 8001200:	bd10      	pop	{r4, pc}
 8001202:	460a      	mov	r2, r1
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8001204:	4621      	mov	r1, r4
 8001206:	f7ff ff87 	bl	8001118 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 800120a:	e7f9      	b.n	8001200 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x1a>

0800120c <_ZN11Grow_sensorC1EhP11Type_sensor>:
Grow_sensor::Grow_sensor(uint8_t amt_component, enum Type_sensor* type_sensor) {
 800120c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	4606      	mov	r6, r0
 8001214:	f100 0910 	add.w	r9, r0, #16
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8001218:	2300      	movs	r3, #0
 800121a:	6103      	str	r3, [r0, #16]
 800121c:	6143      	str	r3, [r0, #20]
 800121e:	6183      	str	r3, [r0, #24]
class LoRa_address {
public:
    uint16_t group = 0xFFFF;  // Адрес группы
    uint16_t branch = 0xFFFF; // Адрес ветви
public:
    LoRa_address() = default;
 8001220:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001224:	8383      	strh	r3, [r0, #28]
 8001226:	83c3      	strh	r3, [r0, #30]
 8001228:	1e43      	subs	r3, r0, #1
 800122a:	f100 040b 	add.w	r4, r0, #11
        system_id_[i] = 0;
 800122e:	2000      	movs	r0, #0
 8001230:	f803 0f01 	strb.w	r0, [r3, #1]!
    for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
 8001234:	42a3      	cmp	r3, r4
 8001236:	d1fb      	bne.n	8001230 <_ZN11Grow_sensorC1EhP11Type_sensor+0x24>
    address_ = 0xFFFF;
 8001238:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800123c:	81b3      	strh	r3, [r6, #12]
    setting_ = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    active_ = false;
 8001244:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    change_value_ = false;
 8001248:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
 800124c:	4d15      	ldr	r5, [pc, #84]	; (80012a4 <_ZN11Grow_sensorC1EhP11Type_sensor+0x98>)
 800124e:	f105 000d 	add.w	r0, r5, #13
 8001252:	462c      	mov	r4, r5
        id_mas_sensors[i] = 0;
 8001254:	f804 3b01 	strb.w	r3, [r4], #1
    for(int i = 0; i < COUNT_TYPE_SENSOR; ++i)
 8001258:	4284      	cmp	r4, r0
 800125a:	d1fb      	bne.n	8001254 <_ZN11Grow_sensorC1EhP11Type_sensor+0x48>
    for(int i = 0; i < amt_component; ++i)
 800125c:	b1a1      	cbz	r1, 8001288 <_ZN11Grow_sensorC1EhP11Type_sensor+0x7c>
 800125e:	4617      	mov	r7, r2
 8001260:	eb02 0a01 	add.w	sl, r2, r1
        component_.push_back(Grow_sensor_component(type_sensor[i], (id_mas_sensors[type_sensor[i]]++)));
 8001264:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80012a4 <_ZN11Grow_sensorC1EhP11Type_sensor+0x98>
 8001268:	f817 1b01 	ldrb.w	r1, [r7], #1
 800126c:	f818 2001 	ldrb.w	r2, [r8, r1]
 8001270:	1c53      	adds	r3, r2, #1
 8001272:	f808 3001 	strb.w	r3, [r8, r1]
 8001276:	4668      	mov	r0, sp
 8001278:	f000 f9e0 	bl	800163c <_ZN21Grow_sensor_componentC1E11Type_sensorh>
      { emplace_back(std::move(__x)); }
 800127c:	4669      	mov	r1, sp
 800127e:	4648      	mov	r0, r9
 8001280:	f7ff ffb1 	bl	80011e6 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
    for(int i = 0; i < amt_component; ++i)
 8001284:	4557      	cmp	r7, sl
 8001286:	d1ef      	bne.n	8001268 <_ZN11Grow_sensorC1EhP11Type_sensor+0x5c>
            setting_ = 0x04; // 0000.0100 - бит индивидуального номера, в случае наличия повторов
 8001288:	2204      	movs	r2, #4
        if(id_mas_sensors[i] > 1) {
 800128a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800128e:	2b01      	cmp	r3, #1
            setting_ = 0x04; // 0000.0100 - бит индивидуального номера, в случае наличия повторов
 8001290:	bf88      	it	hi
 8001292:	f886 202f 	strbhi.w	r2, [r6, #47]	; 0x2f
    for (int i = 0; i < COUNT_TYPE_SENSOR; ++i)
 8001296:	42a5      	cmp	r5, r4
 8001298:	d1f7      	bne.n	800128a <_ZN11Grow_sensorC1EhP11Type_sensor+0x7e>
}
 800129a:	4630      	mov	r0, r6
 800129c:	b002      	add	sp, #8
 800129e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012a2:	bf00      	nop
 80012a4:	200000fc 	.word	0x200000fc

080012a8 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data>:
}

// --- Обмен с телефоном ---

// --- LoRa-соединение ---
void Grow_sensor_interface::send_registration_packet(const Grow_sensor &grow_sensor, LoRa_contact_data& contact_data) {
 80012a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012ac:	b08c      	sub	sp, #48	; 0x30
 80012ae:	460e      	mov	r6, r1
 80012b0:	4617      	mov	r7, r2
    LoRa_packet packet;
 80012b2:	a803      	add	r0, sp, #12
 80012b4:	f003 f894 	bl	80043e0 <_ZN11LoRa_packetC1Ev>
    packet_system.set_dest_adr(packet, LORA_GLOBAL_ADDRESS);
 80012b8:	4d31      	ldr	r5, [pc, #196]	; (8001380 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xd8>)
 80012ba:	4629      	mov	r1, r5
 80012bc:	a805      	add	r0, sp, #20
 80012be:	f004 f9f4 	bl	80056aa <_ZN12LoRa_addressC1Em>
 80012c2:	4c30      	ldr	r4, [pc, #192]	; (8001384 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xdc>)
 80012c4:	9a05      	ldr	r2, [sp, #20]
 80012c6:	a903      	add	r1, sp, #12
 80012c8:	4620      	mov	r0, r4
 80012ca:	f004 fa88 	bl	80057de <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address>
    packet_system.set_sour_adr(packet, LORA_GLOBAL_ADDRESS);
 80012ce:	4629      	mov	r1, r5
 80012d0:	a806      	add	r0, sp, #24
 80012d2:	f004 f9ea 	bl	80056aa <_ZN12LoRa_addressC1Em>
 80012d6:	9a06      	ldr	r2, [sp, #24]
 80012d8:	a903      	add	r1, sp, #12
 80012da:	4620      	mov	r0, r4
 80012dc:	f004 fab5 	bl	800584a <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address>
    packet_system.set_packet_type(packet, Packet_Type::SYSTEM);
 80012e0:	2203      	movs	r2, #3
 80012e2:	a903      	add	r1, sp, #12
 80012e4:	4620      	mov	r0, r4
 80012e6:	f004 fad2 	bl	800588e <_ZN15Packet_analyzer15set_packet_typeER11LoRa_packet11Packet_Type>

    uint8_t com = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f88d 300b 	strb.w	r3, [sp, #11]
    // uint8_t sensor_type = 0;
    uint8_t len = grow_sensor.get_count_component();
 80012f0:	4630      	mov	r0, r6
 80012f2:	f7ff ff0b 	bl	800110c <_ZNK11Grow_sensor19get_count_componentEv>
 80012f6:	f88d 000a 	strb.w	r0, [sp, #10]
 80012fa:	ac07      	add	r4, sp, #28
 80012fc:	4d22      	ldr	r5, [pc, #136]	; (8001388 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xe0>)
 80012fe:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    uint8_t num_byte = 0;
    //uint8_t* data = new uint8_t[len + 6]; // ID, Type, Length
//    uint8_t data[AMT_COMPONENT + 2 + AMT_BYTES_SYSTEM_ID] = {0};

    for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
    	data[num_byte++] = grow_sensor.get_system_id()[i];
 8001302:	4631      	mov	r1, r6
 8001304:	a807      	add	r0, sp, #28
 8001306:	f7ff fe8b 	bl	8001020 <_ZNK11Grow_sensor13get_system_idEv>
 800130a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800130e:	f805 3b01 	strb.w	r3, [r5], #1
    for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
 8001312:	45a0      	cmp	r8, r4
 8001314:	d1f5      	bne.n	8001302 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0x5a>
//    data[num_byte++] = (grow_sensor.get_system_id() >> 24) & 0xFF;
//    data[num_byte++] = (grow_sensor.get_system_id() >> 16) & 0xFF;
//    data[num_byte++] = (grow_sensor.get_system_id() >> 8) & 0xFF;
//    data[num_byte++] = grow_sensor.get_system_id() & 0xFF;

    data[num_byte++] = 0x01; // Type = sensors
 8001316:	4a1c      	ldr	r2, [pc, #112]	; (8001388 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xe0>)
 8001318:	2301      	movs	r3, #1
 800131a:	7313      	strb	r3, [r2, #12]

    data[num_byte++] = len; // Length = grow_sensor.get_count_component();
 800131c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001320:	7353      	strb	r3, [r2, #13]
    for(int i = 0; i < len; ++i)
 8001322:	b173      	cbz	r3, 8001342 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0x9a>
 8001324:	2400      	movs	r4, #0
    // {
        grow_sensor.get_type(i, data[num_byte++]);
 8001326:	4615      	mov	r5, r2
 8001328:	b2e1      	uxtb	r1, r4
 800132a:	f101 020e 	add.w	r2, r1, #14
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	442a      	add	r2, r5
 8001332:	4630      	mov	r0, r6
 8001334:	f7ff fe9e 	bl	8001074 <_ZNK11Grow_sensor8get_typeEhRh>
    for(int i = 0; i < len; ++i)
 8001338:	3401      	adds	r4, #1
 800133a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800133e:	42a3      	cmp	r3, r4
 8001340:	dcf2      	bgt.n	8001328 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0x80>
    //     grow_sensor.get_type(i, sensor_type);
    //     data[num_byte++] = sensor_type;
    // }
    packet_system.set_packet_data(packet, &com, data, &len);
 8001342:	f10d 030a 	add.w	r3, sp, #10
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xe0>)
 800134a:	f10d 020b 	add.w	r2, sp, #11
 800134e:	a903      	add	r1, sp, #12
 8001350:	480c      	ldr	r0, [pc, #48]	; (8001384 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xdc>)
 8001352:	f004 fd19 	bl	8005d88 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_>
    //delete[] data;
    contact_data.add_packet(std::move(packet));
 8001356:	a903      	add	r1, sp, #12
 8001358:	a80a      	add	r0, sp, #40	; 0x28
 800135a:	f003 f8cc 	bl	80044f6 <_ZN11LoRa_packetC1EOS_>
 800135e:	a90a      	add	r1, sp, #40	; 0x28
 8001360:	4638      	mov	r0, r7
 8001362:	f000 f9df 	bl	8001724 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet>
 8001366:	a80a      	add	r0, sp, #40	; 0x28
 8001368:	f003 f843 	bl	80043f2 <_ZN11LoRa_packetD1Ev>
    contact_data.broadcast_send();
 800136c:	2100      	movs	r1, #0
 800136e:	4638      	mov	r0, r7
 8001370:	f000 ff95 	bl	800229e <_ZN17LoRa_contact_data14broadcast_sendEb>
    LoRa_packet packet;
 8001374:	a803      	add	r0, sp, #12
 8001376:	f003 f83c 	bl	80043f2 <_ZN11LoRa_packetD1Ev>
}
 800137a:	b00c      	add	sp, #48	; 0x30
 800137c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001380:	01ff7fff 	.word	0x01ff7fff
 8001384:	200023f4 	.word	0x200023f4
 8001388:	20000188 	.word	0x20000188

0800138c <_GLOBAL__sub_I_grow_sensor_interface>:
	        buf[save_size++] = (*(pchar++)) & 0xFF;
	        buf[save_size++] = (*(pchar++)) & 0xFF;
	        buf[save_size++] = (*(pchar++)) & 0xFF;
    }
    return save_size;
}
 800138c:	b538      	push	{r3, r4, r5, lr}
 800138e:	4c05      	ldr	r4, [pc, #20]	; (80013a4 <_GLOBAL__sub_I_grow_sensor_interface+0x18>)
 8001390:	f104 0578 	add.w	r5, r4, #120	; 0x78
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  N  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
 8001394:	4620      	mov	r0, r4
 8001396:	f003 f823 	bl	80043e0 <_ZN11LoRa_packetC1Ev>
 800139a:	3408      	adds	r4, #8
 800139c:	42ac      	cmp	r4, r5
 800139e:	d1f9      	bne.n	8001394 <_GLOBAL__sub_I_grow_sensor_interface+0x8>
 80013a0:	bd38      	pop	{r3, r4, r5, pc}
 80013a2:	bf00      	nop
 80013a4:	2000010c 	.word	0x2000010c

080013a8 <_GLOBAL__sub_D_grow_sensor_interface>:
 80013a8:	b538      	push	{r3, r4, r5, lr}
 80013aa:	4c05      	ldr	r4, [pc, #20]	; (80013c0 <_GLOBAL__sub_D_grow_sensor_interface+0x18>)
 80013ac:	f1a4 0578 	sub.w	r5, r4, #120	; 0x78
 80013b0:	3c08      	subs	r4, #8
 80013b2:	4620      	mov	r0, r4
 80013b4:	f003 f81d 	bl	80043f2 <_ZN11LoRa_packetD1Ev>
 80013b8:	42ac      	cmp	r4, r5
 80013ba:	d1f9      	bne.n	80013b0 <_GLOBAL__sub_D_grow_sensor_interface+0x8>
 80013bc:	bd38      	pop	{r3, r4, r5, pc}
 80013be:	bf00      	nop
 80013c0:	20000184 	.word	0x20000184

080013c4 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data>:
uint8_t Grow_sensor_interface::build_data_packet(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data) {
 80013c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013c8:	b08d      	sub	sp, #52	; 0x34
 80013ca:	460c      	mov	r4, r1
 80013cc:	4691      	mov	r9, r2
	if(grow_sensor.get_active() == 0)
 80013ce:	4608      	mov	r0, r1
 80013d0:	f7ff fe35 	bl	800103e <_ZNK11Grow_sensor10get_activeEv>
 80013d4:	4605      	mov	r5, r0
 80013d6:	b918      	cbnz	r0, 80013e0 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x1c>
}
 80013d8:	4628      	mov	r0, r5
 80013da:	b00d      	add	sp, #52	; 0x34
 80013dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
																					STADY_CONACT_NUMBER = 1;
 80013e0:	4b45      	ldr	r3, [pc, #276]	; (80014f8 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x134>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]
    if(contact_data.get_signal_start_connect())
 80013e6:	4648      	mov	r0, r9
 80013e8:	f000 fa4a 	bl	8001880 <_ZN17LoRa_contact_data24get_signal_start_connectEv>
 80013ec:	b108      	cbz	r0, 80013f2 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x2e>
        return 0;
 80013ee:	2500      	movs	r5, #0
 80013f0:	e7f2      	b.n	80013d8 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x14>
																					STADY_CONACT_NUMBER = 2;
 80013f2:	4d41      	ldr	r5, [pc, #260]	; (80014f8 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x134>)
 80013f4:	2302      	movs	r3, #2
 80013f6:	702b      	strb	r3, [r5, #0]
    contact_data.end_contact();
 80013f8:	4648      	mov	r0, r9
 80013fa:	f000 fecd 	bl	8002198 <_ZN17LoRa_contact_data11end_contactEv>
    contact_data.clear_send_packet();
 80013fe:	4648      	mov	r0, r9
 8001400:	f000 f9ca 	bl	8001798 <_ZN17LoRa_contact_data17clear_send_packetEv>
																					STADY_CONACT_NUMBER = 3;
 8001404:	2303      	movs	r3, #3
 8001406:	702b      	strb	r3, [r5, #0]
    LoRa_packet packet;
 8001408:	a805      	add	r0, sp, #20
 800140a:	f002 ffe9 	bl	80043e0 <_ZN11LoRa_packetC1Ev>
    uint8_t amt = grow_sensor.get_count_component();
 800140e:	4620      	mov	r0, r4
 8001410:	f7ff fe7c 	bl	800110c <_ZNK11Grow_sensor19get_count_componentEv>
 8001414:	4605      	mov	r5, r0
    packet_sensor.set_setting(grow_sensor.get_setting());
 8001416:	4620      	mov	r0, r4
 8001418:	f7ff fe29 	bl	800106e <_ZNK11Grow_sensor11get_settingEv>
 800141c:	4601      	mov	r1, r0
 800141e:	4837      	ldr	r0, [pc, #220]	; (80014fc <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x138>)
 8001420:	f004 f920 	bl	8005664 <_ZN13Packet_Sensor11set_settingEh>
    for(i = 0; i < amt; ++i) {
 8001424:	46ab      	mov	fp, r5
 8001426:	2d00      	cmp	r5, #0
 8001428:	dd63      	ble.n	80014f2 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x12e>
 800142a:	2500      	movs	r5, #0
																					STADY_CONACT_NUMBER = 5;
 800142c:	4f32      	ldr	r7, [pc, #200]	; (80014f8 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x134>)
 800142e:	f04f 0a05 	mov.w	sl, #5
        packet_sensor.set_dest_adr(packet, grow_sensor.get_address_control_module()); // адреса задаются при передаче в LoRa_contact_data LORA_GLOBAL_ADDRESS
 8001432:	4e32      	ldr	r6, [pc, #200]	; (80014fc <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x138>)
																					STADY_CONACT_NUMBER = 5;
 8001434:	f887 a000 	strb.w	sl, [r7]
        packet_sensor.set_dest_adr(packet, grow_sensor.get_address_control_module()); // адреса задаются при передаче в LoRa_contact_data LORA_GLOBAL_ADDRESS
 8001438:	4620      	mov	r0, r4
 800143a:	f7ff fe0d 	bl	8001058 <_ZNK11Grow_sensor26get_address_control_moduleEv>
 800143e:	4602      	mov	r2, r0
 8001440:	a905      	add	r1, sp, #20
 8001442:	4630      	mov	r0, r6
 8001444:	f004 f9cb 	bl	80057de <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address>
        packet_sensor.set_sour_adr(packet, contact_data.get_my_adr()); // адреса задаются при передаче в LoRa_contact_data LORA_GLOBAL_ADDRESS
 8001448:	4648      	mov	r0, r9
 800144a:	f000 f960 	bl	800170e <_ZN17LoRa_contact_data10get_my_adrEv>
 800144e:	4602      	mov	r2, r0
 8001450:	a905      	add	r1, sp, #20
 8001452:	4630      	mov	r0, r6
 8001454:	f004 f9f9 	bl	800584a <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address>
																					STADY_CONACT_NUMBER = 6;
 8001458:	2306      	movs	r3, #6
 800145a:	703b      	strb	r3, [r7, #0]
        err = grow_sensor.get_type(i, param);
 800145c:	fa5f f885 	uxtb.w	r8, r5
 8001460:	f10d 0213 	add.w	r2, sp, #19
 8001464:	4641      	mov	r1, r8
 8001466:	4620      	mov	r0, r4
 8001468:	f7ff fe04 	bl	8001074 <_ZNK11Grow_sensor8get_typeEhRh>
        if(err) break;
 800146c:	bb80      	cbnz	r0, 80014d0 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x10c>
        err = grow_sensor.get_id(i, id);
 800146e:	f10d 0212 	add.w	r2, sp, #18
 8001472:	4641      	mov	r1, r8
 8001474:	4620      	mov	r0, r4
 8001476:	f7ff fe0f 	bl	8001098 <_ZNK11Grow_sensor6get_idEhRh>
        if(err) break;
 800147a:	bb48      	cbnz	r0, 80014d0 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x10c>
        err = grow_sensor.get_value(i, *reinterpret_cast<float*>(&value));
 800147c:	aa03      	add	r2, sp, #12
 800147e:	4641      	mov	r1, r8
 8001480:	4620      	mov	r0, r4
 8001482:	f7ff fe31 	bl	80010e8 <_ZN11Grow_sensor9get_valueEhRf>
        if(err) break;
 8001486:	bb18      	cbnz	r0, 80014d0 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x10c>
        packet_sensor.set_packet_type(packet, Packet_Type::SENSOR);
 8001488:	2201      	movs	r2, #1
 800148a:	a905      	add	r1, sp, #20
 800148c:	4630      	mov	r0, r6
 800148e:	f004 f9fe 	bl	800588e <_ZN15Packet_analyzer15set_packet_typeER11LoRa_packet11Packet_Type>
																					STADY_CONACT_NUMBER = 7;
 8001492:	2307      	movs	r3, #7
 8001494:	703b      	strb	r3, [r7, #0]
        err = packet_sensor.set_packet_data(packet, nullptr, &param, &id, &value);
 8001496:	ab03      	add	r3, sp, #12
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	f10d 0312 	add.w	r3, sp, #18
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	f10d 0313 	add.w	r3, sp, #19
 80014a4:	2200      	movs	r2, #0
 80014a6:	a905      	add	r1, sp, #20
 80014a8:	4630      	mov	r0, r6
 80014aa:	f004 fbcb 	bl	8005c44 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm>
        if(err) break;
 80014ae:	b978      	cbnz	r0, 80014d0 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x10c>
																					STADY_CONACT_NUMBER = 8;
 80014b0:	2308      	movs	r3, #8
 80014b2:	703b      	strb	r3, [r7, #0]
        contact_data.add_packet(std::move(packet));
 80014b4:	a905      	add	r1, sp, #20
 80014b6:	a809      	add	r0, sp, #36	; 0x24
 80014b8:	f003 f81d 	bl	80044f6 <_ZN11LoRa_packetC1EOS_>
 80014bc:	a909      	add	r1, sp, #36	; 0x24
 80014be:	4648      	mov	r0, r9
 80014c0:	f000 f930 	bl	8001724 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet>
 80014c4:	a809      	add	r0, sp, #36	; 0x24
 80014c6:	f002 ff94 	bl	80043f2 <_ZN11LoRa_packetD1Ev>
    for(i = 0; i < amt; ++i) {
 80014ca:	3501      	adds	r5, #1
 80014cc:	455d      	cmp	r5, fp
 80014ce:	d1b1      	bne.n	8001434 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x70>
																					STADY_CONACT_NUMBER = 9;
 80014d0:	4e09      	ldr	r6, [pc, #36]	; (80014f8 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x134>)
 80014d2:	2309      	movs	r3, #9
 80014d4:	7033      	strb	r3, [r6, #0]
    contact_data.wait_recipient(grow_sensor.get_address_control_module());
 80014d6:	4620      	mov	r0, r4
 80014d8:	f7ff fdbe 	bl	8001058 <_ZNK11Grow_sensor26get_address_control_moduleEv>
 80014dc:	4601      	mov	r1, r0
 80014de:	4648      	mov	r0, r9
 80014e0:	f000 fd92 	bl	8002008 <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>
																					STADY_CONACT_NUMBER = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	7033      	strb	r3, [r6, #0]
    return i;
 80014e8:	b2ed      	uxtb	r5, r5
    LoRa_packet packet;
 80014ea:	a805      	add	r0, sp, #20
 80014ec:	f002 ff81 	bl	80043f2 <_ZN11LoRa_packetD1Ev>
 80014f0:	e772      	b.n	80013d8 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x14>
    for(i = 0; i < amt; ++i) {
 80014f2:	2500      	movs	r5, #0
 80014f4:	e7ec      	b.n	80014d0 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x10c>
 80014f6:	bf00      	nop
 80014f8:	20002414 	.word	0x20002414
 80014fc:	200023d4 	.word	0x200023d4

08001500 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data>:
bool Grow_sensor_interface::check_regist_packet(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data) {
 8001500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001504:	b0a9      	sub	sp, #164	; 0xa4
 8001506:	9003      	str	r0, [sp, #12]
 8001508:	468a      	mov	sl, r1
 800150a:	4691      	mov	r9, r2
    all_packets = contact_data.get_all_packet(all_packets_len);
 800150c:	ae05      	add	r6, sp, #20
 800150e:	4a45      	ldr	r2, [pc, #276]	; (8001624 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x124>)
 8001510:	4649      	mov	r1, r9
 8001512:	4630      	mov	r0, r6
 8001514:	f000 f952 	bl	80017bc <_ZN17LoRa_contact_data14get_all_packetERh>
 8001518:	4c43      	ldr	r4, [pc, #268]	; (8001628 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x128>)
 800151a:	4637      	mov	r7, r6
 800151c:	f104 0878 	add.w	r8, r4, #120	; 0x78
 8001520:	4625      	mov	r5, r4
 8001522:	4631      	mov	r1, r6
 8001524:	4628      	mov	r0, r5
 8001526:	f002 ffd7 	bl	80044d8 <_ZN11LoRa_packetaSEOS_>
 800152a:	3508      	adds	r5, #8
 800152c:	3608      	adds	r6, #8
 800152e:	4545      	cmp	r5, r8
 8001530:	d1f7      	bne.n	8001522 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x22>
 8001532:	ad21      	add	r5, sp, #132	; 0x84
 8001534:	3f08      	subs	r7, #8
 8001536:	4628      	mov	r0, r5
 8001538:	f002 ff5b 	bl	80043f2 <_ZN11LoRa_packetD1Ev>
 800153c:	3d08      	subs	r5, #8
 800153e:	42bd      	cmp	r5, r7
 8001540:	d1f9      	bne.n	8001536 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x36>
    for(int i = 0; i < all_packets_len; ++i) {
 8001542:	4b38      	ldr	r3, [pc, #224]	; (8001624 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x124>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d069      	beq.n	800161e <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x11e>
 800154a:	2500      	movs	r5, #0
        if(packet_analyzer.get_packet_type(all_packets[i]) == Packet_Type::SYSTEM) {
 800154c:	4e37      	ldr	r6, [pc, #220]	; (800162c <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x12c>)
            err = packet_system.get_size_by_packet(all_packets[i], size);
 800154e:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8001634 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x134>
            packet_system.get_packet_data(all_packets[i], &com, data, &len);
 8001552:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 8001630 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x130>
 8001556:	e005      	b.n	8001564 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x64>
    for(int i = 0; i < all_packets_len; ++i) {
 8001558:	3501      	adds	r5, #1
 800155a:	3408      	adds	r4, #8
 800155c:	4b31      	ldr	r3, [pc, #196]	; (8001624 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x124>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	42ab      	cmp	r3, r5
 8001562:	dd58      	ble.n	8001616 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x116>
      { return const_cast<_Tp&>(__t[__n]); }
 8001564:	4627      	mov	r7, r4
        if(packet_analyzer.get_packet_type(all_packets[i]) == Packet_Type::SYSTEM) {
 8001566:	4621      	mov	r1, r4
 8001568:	4630      	mov	r0, r6
 800156a:	f004 f915 	bl	8005798 <_ZN15Packet_analyzer15get_packet_typeERK11LoRa_packet>
 800156e:	2803      	cmp	r0, #3
 8001570:	d1f2      	bne.n	8001558 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x58>
            uint8_t size = 0;
 8001572:	aa28      	add	r2, sp, #160	; 0xa0
 8001574:	2300      	movs	r3, #0
 8001576:	f802 3d8f 	strb.w	r3, [r2, #-143]!
            err = packet_system.get_size_by_packet(all_packets[i], size);
 800157a:	4621      	mov	r1, r4
 800157c:	4640      	mov	r0, r8
 800157e:	f004 fcdd 	bl	8005f3c <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh>
            if((err != 0) || (size != (5+AMT_BYTES_SYSTEM_ID)))
 8001582:	2800      	cmp	r0, #0
 8001584:	d1e8      	bne.n	8001558 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x58>
 8001586:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800158a:	2b11      	cmp	r3, #17
 800158c:	d1e4      	bne.n	8001558 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x58>
            uint8_t com = 0x00;
 800158e:	2300      	movs	r3, #0
 8001590:	f88d 3012 	strb.w	r3, [sp, #18]
            uint8_t len = 0;
 8001594:	f88d 3013 	strb.w	r3, [sp, #19]
            packet_system.get_packet_data(all_packets[i], &com, data, &len);
 8001598:	f10d 0313 	add.w	r3, sp, #19
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	465b      	mov	r3, fp
 80015a0:	f10d 0212 	add.w	r2, sp, #18
 80015a4:	4621      	mov	r1, r4
 80015a6:	4640      	mov	r0, r8
 80015a8:	f004 fc5e 	bl	8005e68 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_>
            if(com != 0x01)
 80015ac:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d1d1      	bne.n	8001558 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x58>
 80015b4:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x130>)
 80015b6:	aa05      	add	r2, sp, #20
 80015b8:	f103 000c 	add.w	r0, r3, #12
            	sensor_id[i]= data[num_byte++];
 80015bc:	f813 1b01 	ldrb.w	r1, [r3], #1
 80015c0:	f802 1b01 	strb.w	r1, [r2], #1
            for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
 80015c4:	4298      	cmp	r0, r3
 80015c6:	d1f9      	bne.n	80015bc <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xbc>
            if(sensor_id != grow_sensor.get_system_id())
 80015c8:	4651      	mov	r1, sl
 80015ca:	a823      	add	r0, sp, #140	; 0x8c
 80015cc:	f7ff fd28 	bl	8001020 <_ZNK11Grow_sensor13get_system_idEv>
      template<typename _Tp>
        static bool
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
        {
	  if (const size_t __len = (__last1 - __first1))
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 80015d0:	220c      	movs	r2, #12
 80015d2:	a923      	add	r1, sp, #140	; 0x8c
 80015d4:	a805      	add	r0, sp, #20
 80015d6:	f00a f983 	bl	800b8e0 <memcmp>
 80015da:	2800      	cmp	r0, #0
 80015dc:	d1bc      	bne.n	8001558 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x58>
            grow_sensor.set_address_control_module(packet_system.get_sour_adr(all_packets[i]));
 80015de:	4639      	mov	r1, r7
 80015e0:	4814      	ldr	r0, [pc, #80]	; (8001634 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x134>)
 80015e2:	f004 f8c5 	bl	8005770 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>
 80015e6:	4601      	mov	r1, r0
 80015e8:	4650      	mov	r0, sl
 80015ea:	f7ff fd2b 	bl	8001044 <_ZN11Grow_sensor26set_address_control_moduleE12LoRa_address>
            contact_data.set_my_adr(LoRa_address(&data[num_byte]));
 80015ee:	2203      	movs	r2, #3
 80015f0:	4911      	ldr	r1, [pc, #68]	; (8001638 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x138>)
 80015f2:	a827      	add	r0, sp, #156	; 0x9c
 80015f4:	f004 f83e 	bl	8005674 <_ZN12LoRa_addressC1EPKhh>
 80015f8:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80015fa:	4648      	mov	r0, r9
 80015fc:	f000 f882 	bl	8001704 <_ZN17LoRa_contact_data10set_my_adrE12LoRa_address>
            grow_sensor.set_active(2);
 8001600:	2102      	movs	r1, #2
 8001602:	4650      	mov	r0, sl
 8001604:	f7ff fd16 	bl	8001034 <_ZN11Grow_sensor10set_activeEh>
            build_data_packet(grow_sensor, contact_data);
 8001608:	464a      	mov	r2, r9
 800160a:	4651      	mov	r1, sl
 800160c:	9803      	ldr	r0, [sp, #12]
 800160e:	f7ff fed9 	bl	80013c4 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data>
            return true;
 8001612:	2001      	movs	r0, #1
 8001614:	e000      	b.n	8001618 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x118>
    return false;
 8001616:	2000      	movs	r0, #0
}
 8001618:	b029      	add	sp, #164	; 0xa4
 800161a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return false;
 800161e:	2000      	movs	r0, #0
 8001620:	e7fa      	b.n	8001618 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x118>
 8001622:	bf00      	nop
 8001624:	20000184 	.word	0x20000184
 8001628:	2000010c 	.word	0x2000010c
 800162c:	20002378 	.word	0x20002378
 8001630:	20000188 	.word	0x20000188
 8001634:	200023f4 	.word	0x200023f4
 8001638:	20000194 	.word	0x20000194

0800163c <_ZN21Grow_sensor_componentC1E11Type_sensorh>:
#include "Grow_sensor_component.h"

Grow_sensor_component::Grow_sensor_component(Type_sensor type_sensor, uint8_t id) {
    type_sensor_ = type_sensor;
 800163c:	7001      	strb	r1, [r0, #0]
    id_ = id;
 800163e:	7042      	strb	r2, [r0, #1]
    value_ = 0;
 8001640:	2200      	movs	r2, #0
 8001642:	6042      	str	r2, [r0, #4]
}
 8001644:	4770      	bx	lr

08001646 <_ZNK21Grow_sensor_component8get_typeEv>:

enum Type_sensor Grow_sensor_component::get_type() const {
    return type_sensor_;
}
 8001646:	7800      	ldrb	r0, [r0, #0]
 8001648:	4770      	bx	lr

0800164a <_ZNK21Grow_sensor_component6get_idEv>:
uint8_t Grow_sensor_component::get_id() const {
    return id_;
}
 800164a:	7840      	ldrb	r0, [r0, #1]
 800164c:	4770      	bx	lr

0800164e <_ZN21Grow_sensor_component9get_valueEv>:
void Grow_sensor_component::set_id(uint8_t id) {
    id_ = id;
}
float Grow_sensor_component::get_value() {
    return value_;
}
 800164e:	6840      	ldr	r0, [r0, #4]
 8001650:	4770      	bx	lr

08001652 <_ZN21Grow_sensor_component9set_valueEf>:
bool Grow_sensor_component::set_value(float value) {
 8001652:	b538      	push	{r3, r4, r5, lr}
 8001654:	4604      	mov	r4, r0
 8001656:	460d      	mov	r5, r1
    if(value_ == value)
 8001658:	6840      	ldr	r0, [r0, #4]
 800165a:	f7ff fa79 	bl	8000b50 <__aeabi_fcmpeq>
 800165e:	b910      	cbnz	r0, 8001666 <_ZN21Grow_sensor_component9set_valueEf+0x14>
        return false;
    value_ = value;
 8001660:	6065      	str	r5, [r4, #4]
    return true;
 8001662:	2001      	movs	r0, #1
}
 8001664:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 8001666:	2000      	movs	r0, #0
 8001668:	e7fc      	b.n	8001664 <_ZN21Grow_sensor_component9set_valueEf+0x12>

0800166a <_ZN17LoRa_contact_dataD1Ev>:
LoRa_contact_data::LoRa_contact_data(LoRa_address adr) {
    // (-) ----- добавить стандартный конструктор
    clear();
    set_my_adr(adr);
}
LoRa_contact_data::~LoRa_contact_data() {
 800166a:	b570      	push	{r4, r5, r6, lr}
 800166c:	4605      	mov	r5, r0
    struct array
 800166e:	f110 06bc 	adds.w	r6, r0, #188	; 0xbc
 8001672:	d007      	beq.n	8001684 <_ZN17LoRa_contact_dataD1Ev+0x1a>
 8001674:	f500 749a 	add.w	r4, r0, #308	; 0x134
 8001678:	3c08      	subs	r4, #8
 800167a:	4620      	mov	r0, r4
 800167c:	f002 feb9 	bl	80043f2 <_ZN11LoRa_packetD1Ev>
 8001680:	42a6      	cmp	r6, r4
 8001682:	d1f9      	bne.n	8001678 <_ZN17LoRa_contact_dataD1Ev+0xe>
 8001684:	f115 0634 	adds.w	r6, r5, #52	; 0x34
 8001688:	d007      	beq.n	800169a <_ZN17LoRa_contact_dataD1Ev+0x30>
 800168a:	f105 04ac 	add.w	r4, r5, #172	; 0xac
 800168e:	3c08      	subs	r4, #8
 8001690:	4620      	mov	r0, r4
 8001692:	f002 feae 	bl	80043f2 <_ZN11LoRa_packetD1Ev>
 8001696:	42a6      	cmp	r6, r4
 8001698:	d1f9      	bne.n	800168e <_ZN17LoRa_contact_dataD1Ev+0x24>
 800169a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800169e:	f002 fea8 	bl	80043f2 <_ZN11LoRa_packetD1Ev>
 80016a2:	f105 0020 	add.w	r0, r5, #32
 80016a6:	f002 fea4 	bl	80043f2 <_ZN11LoRa_packetD1Ev>

}
 80016aa:	4628      	mov	r0, r5
 80016ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080016b0 <_ZN17LoRa_contact_data16init_lora_moduleEP19__SPI_HandleTypeDef>:
        return false;
    }
    return true;
}
#else
bool LoRa_contact_data::init_lora_module(SPI_HandleTypeDef *spi) {
 80016b0:	b510      	push	{r4, lr}
 80016b2:	4604      	mov	r4, r0
	LoRa.init(spi);
 80016b4:	4803      	ldr	r0, [pc, #12]	; (80016c4 <_ZN17LoRa_contact_data16init_lora_moduleEP19__SPI_HandleTypeDef+0x14>)
 80016b6:	f001 ffa9 	bl	800360c <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef>
	lora_init_ = true;
 80016ba:	2301      	movs	r3, #1
 80016bc:	7023      	strb	r3, [r4, #0]
	return false;
}
 80016be:	2000      	movs	r0, #0
 80016c0:	bd10      	pop	{r4, pc}
 80016c2:	bf00      	nop
 80016c4:	20000360 	.word	0x20000360

080016c8 <_ZN17LoRa_contact_data17begin_lora_moduleEmbhhmh>:
#endif
// Функция запуска работы системы и LoRa-модуля
uint8_t LoRa_contact_data::begin_lora_module(ulong frequency, bool paboost,
          uint8_t signal_power, uint8_t SF, ulong SBW, uint8_t sync_word) {
 80016c8:	b530      	push	{r4, r5, lr}
 80016ca:	b089      	sub	sp, #36	; 0x24
 80016cc:	4605      	mov	r5, r0
#if defined ( ESP32 )
    uint8_t err = lora_.begin(frequency, paboost, signal_power, SF, SBW, sync_word);
#else
    uint8_t err = LoRa.begin(frequency, paboost, signal_power, SF, SBW, sync_word);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
 80016d4:	9406      	str	r4, [sp, #24]
 80016d6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80016d8:	9404      	str	r4, [sp, #16]
 80016da:	9005      	str	r0, [sp, #20]
 80016dc:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 80016e0:	9402      	str	r4, [sp, #8]
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	9200      	str	r2, [sp, #0]
 80016e6:	460a      	mov	r2, r1
 80016e8:	4603      	mov	r3, r0
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <_ZN17LoRa_contact_data17begin_lora_moduleEmbhhmh+0x38>)
 80016ec:	f002 fa40 	bl	8003b70 <_ZN10LoRa_class5beginEybhhyh>
#endif
    if(err == 0) {
 80016f0:	4603      	mov	r3, r0
 80016f2:	b908      	cbnz	r0, 80016f8 <_ZN17LoRa_contact_data17begin_lora_moduleEmbhhmh+0x30>
        lora_begin_ = true;
 80016f4:	2201      	movs	r2, #1
 80016f6:	706a      	strb	r2, [r5, #1]
    }
    return err;
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	b009      	add	sp, #36	; 0x24
 80016fc:	bd30      	pop	{r4, r5, pc}
 80016fe:	bf00      	nop
 8001700:	20000360 	.word	0x20000360

08001704 <_ZN17LoRa_contact_data10set_my_adrE12LoRa_address>:

// Установка адреса этого модуля
bool LoRa_contact_data::set_my_adr(LoRa_address adr) {
 8001704:	b082      	sub	sp, #8
    // (-) ----- проверка на ошибку
    my_adr_ = adr;
 8001706:	6041      	str	r1, [r0, #4]
    return false;
}
 8001708:	2000      	movs	r0, #0
 800170a:	b002      	add	sp, #8
 800170c:	4770      	bx	lr

0800170e <_ZN17LoRa_contact_data10get_my_adrEv>:
// Получаение адреса этого модуля
LoRa_address LoRa_contact_data::get_my_adr() {
 800170e:	b082      	sub	sp, #8
    return my_adr_;
 8001710:	6843      	ldr	r3, [r0, #4]
 8001712:	2000      	movs	r0, #0
 8001714:	b29a      	uxth	r2, r3
 8001716:	f362 000f 	bfi	r0, r2, #0, #16
 800171a:	0c1b      	lsrs	r3, r3, #16
 800171c:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001720:	b002      	add	sp, #8
 8001722:	4770      	bx	lr

08001724 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet>:
    }
    return packet.size();
}
#endif

bool LoRa_contact_data::add_packet(LoRa_packet packet) {
 8001724:	b530      	push	{r4, r5, lr}
 8001726:	b083      	sub	sp, #12
 8001728:	4604      	mov	r4, r0
 800172a:	460d      	mov	r5, r1

    // if((!_init) || (packet.len < MINIMAL_PACKET_SIZE) || (send_packet_.size() >= 250)) // проверка на инициализацию только в 1 сторону (?) -----

    if(init_) {
 800172c:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
 8001730:	b163      	cbz	r3, 800174c <_ZN17LoRa_contact_data10add_packetE11LoRa_packet+0x28>
        // if((packet_analyzer.get_dest_adr_group(packet) != connect_adr_.group) ||
        //    (packet_analyzer.get_dest_adr_branch(packet) != connect_adr_.branch))
        if(packet_analyzer.get_dest_adr(packet)!= connect_adr_)
 8001732:	4818      	ldr	r0, [pc, #96]	; (8001794 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet+0x70>)
 8001734:	f003 fff8 	bl	8005728 <_ZN15Packet_analyzer12get_dest_adrERK11LoRa_packet>
 8001738:	ab02      	add	r3, sp, #8
 800173a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800173e:	f104 0108 	add.w	r1, r4, #8
 8001742:	4618      	mov	r0, r3
 8001744:	f003 ffc4 	bl	80056d0 <_ZneRK12LoRa_addressS1_>
 8001748:	4603      	mov	r3, r0
 800174a:	bb00      	cbnz	r0, 800178e <_ZN17LoRa_contact_data10add_packetE11LoRa_packet+0x6a>
            return true;
    }
    packet_analyzer.set_packet_number(packet, num_end_packet_++);
 800174c:	8a22      	ldrh	r2, [r4, #16]
 800174e:	1c53      	adds	r3, r2, #1
 8001750:	8223      	strh	r3, [r4, #16]
 8001752:	4629      	mov	r1, r5
 8001754:	480f      	ldr	r0, [pc, #60]	; (8001794 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet+0x70>)
 8001756:	f004 f8a4 	bl	80058a2 <_ZN15Packet_analyzer17set_packet_numberER11LoRa_packett>
#if defined ( USE_VECTOR )
    send_packet_.push_back(std::move(packet));
    send_flag_.push_back(true);
    amt_packet_ = send_packet_.size();
#else
    if(send_packet_len == CONTACT_DATA_MAX_PACKET ||
 800175a:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
        send_flag_len == CONTACT_DATA_MAX_PACKET) {
        // (-) ----- (!) ----- ERRROR
    }
    send_packet_[send_packet_len++] = std::move(packet);
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	f884 2134 	strb.w	r2, [r4, #308]	; 0x134
      { return const_cast<_Tp&>(__t[__n]); }
 8001764:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8001768:	4629      	mov	r1, r5
 800176a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800176e:	f002 feb3 	bl	80044d8 <_ZN11LoRa_packetaSEOS_>
    send_flag_[send_flag_len++] = true;
 8001772:	f894 3136 	ldrb.w	r3, [r4, #310]	; 0x136
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	f884 2136 	strb.w	r2, [r4, #310]	; 0x136
 800177c:	4423      	add	r3, r4
 800177e:	2201      	movs	r2, #1
 8001780:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    amt_packet_ = send_packet_len;
 8001784:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8001788:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
#endif
    return false;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	b003      	add	sp, #12
 8001792:	bd30      	pop	{r4, r5, pc}
 8001794:	20002378 	.word	0x20002378

08001798 <_ZN17LoRa_contact_data17clear_send_packetEv>:
    if(send_packet_.size() == 0)
        return true;
    num_end_packet_ -= send_packet_.size();
    send_packet_.clear();
#else
    if(send_packet_len == 0)
 8001798:	f890 3134 	ldrb.w	r3, [r0, #308]	; 0x134
 800179c:	b14b      	cbz	r3, 80017b2 <_ZN17LoRa_contact_data17clear_send_packetEv+0x1a>
        return true;
    num_end_packet_ -= send_packet_len;
 800179e:	8a02      	ldrh	r2, [r0, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	8203      	strh	r3, [r0, #16]
    send_packet_len = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f880 3134 	strb.w	r3, [r0, #308]	; 0x134
    send_flag_len = 0;
 80017aa:	f880 3136 	strb.w	r3, [r0, #310]	; 0x136
#endif
    return false;
 80017ae:	4618      	mov	r0, r3
 80017b0:	4770      	bx	lr
        return true;
 80017b2:	2001      	movs	r0, #1
}
 80017b4:	4770      	bx	lr

080017b6 <_ZN17LoRa_contact_data17get_state_contactEv>:
}

// Получить текущую стадию контакта/трансляции
int8_t LoRa_contact_data::get_state_contact() {
    return (int8_t) current_stage_.stade_communication;
}
 80017b6:	f990 0014 	ldrsb.w	r0, [r0, #20]
 80017ba:	4770      	bx	lr

080017bc <_ZN17LoRa_contact_data14get_all_packetERh>:

// Изъять все пришедшие пакеты
#if defined ( USE_VECTOR )
std::vector<LoRa_packet> LoRa_contact_data::get_all_packet() {
#else
std::array<LoRa_packet, CONTACT_DATA_MAX_PACKET> LoRa_contact_data::get_all_packet(uint8_t& count) {
 80017bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017be:	4607      	mov	r7, r0
}


// Выдаёт сигнал, если текущая стадия SC_COMPLETE 
bool LoRa_contact_data::get_signal_complete() {
    return (current_stage_.stade_communication == SC_COMPLETE);
 80017c0:	7d0b      	ldrb	r3, [r1, #20]
    if((!get_signal_complete()) && (current_stage_.stade_communication != SC_PACKET_ACCEPTED))
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	d03f      	beq.n	8001846 <_ZN17LoRa_contact_data14get_all_packetERh+0x8a>
 80017c6:	2b07      	cmp	r3, #7
 80017c8:	d102      	bne.n	80017d0 <_ZN17LoRa_contact_data14get_all_packetERh+0x14>
        current_stage_.stade_communication = SC_WAITING;
 80017ca:	2306      	movs	r3, #6
 80017cc:	750b      	strb	r3, [r1, #20]
 80017ce:	e03c      	b.n	800184a <_ZN17LoRa_contact_data14get_all_packetERh+0x8e>
        return {};
 80017d0:	f002 fe06 	bl	80043e0 <_ZN11LoRa_packetC1Ev>
 80017d4:	f107 0008 	add.w	r0, r7, #8
 80017d8:	f002 fe02 	bl	80043e0 <_ZN11LoRa_packetC1Ev>
 80017dc:	f107 0010 	add.w	r0, r7, #16
 80017e0:	f002 fdfe 	bl	80043e0 <_ZN11LoRa_packetC1Ev>
 80017e4:	f107 0018 	add.w	r0, r7, #24
 80017e8:	f002 fdfa 	bl	80043e0 <_ZN11LoRa_packetC1Ev>
 80017ec:	f107 0020 	add.w	r0, r7, #32
 80017f0:	f002 fdf6 	bl	80043e0 <_ZN11LoRa_packetC1Ev>
 80017f4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80017f8:	f002 fdf2 	bl	80043e0 <_ZN11LoRa_packetC1Ev>
 80017fc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001800:	f002 fdee 	bl	80043e0 <_ZN11LoRa_packetC1Ev>
 8001804:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001808:	f002 fdea 	bl	80043e0 <_ZN11LoRa_packetC1Ev>
 800180c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001810:	f002 fde6 	bl	80043e0 <_ZN11LoRa_packetC1Ev>
 8001814:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001818:	f002 fde2 	bl	80043e0 <_ZN11LoRa_packetC1Ev>
 800181c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001820:	f002 fdde 	bl	80043e0 <_ZN11LoRa_packetC1Ev>
 8001824:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001828:	f002 fdda 	bl	80043e0 <_ZN11LoRa_packetC1Ev>
 800182c:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001830:	f002 fdd6 	bl	80043e0 <_ZN11LoRa_packetC1Ev>
 8001834:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001838:	f002 fdd2 	bl	80043e0 <_ZN11LoRa_packetC1Ev>
 800183c:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001840:	f002 fdce 	bl	80043e0 <_ZN11LoRa_packetC1Ev>
 8001844:	e014      	b.n	8001870 <_ZN17LoRa_contact_data14get_all_packetERh+0xb4>
        current_stage_.stade_communication = SC_DOWNTIME;
 8001846:	2300      	movs	r3, #0
 8001848:	750b      	strb	r3, [r1, #20]
    count = reciev_packet_len;
 800184a:	f891 3135 	ldrb.w	r3, [r1, #309]	; 0x135
 800184e:	7013      	strb	r3, [r2, #0]
    reciev_packet_len = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	f881 3135 	strb.w	r3, [r1, #309]	; 0x135
 8001856:	463c      	mov	r4, r7
    struct array
 8001858:	f101 05bc 	add.w	r5, r1, #188	; 0xbc
 800185c:	f107 0678 	add.w	r6, r7, #120	; 0x78
 8001860:	4629      	mov	r1, r5
 8001862:	4620      	mov	r0, r4
 8001864:	f002 fe47 	bl	80044f6 <_ZN11LoRa_packetC1EOS_>
 8001868:	3408      	adds	r4, #8
 800186a:	3508      	adds	r5, #8
 800186c:	42b4      	cmp	r4, r6
 800186e:	d1f7      	bne.n	8001860 <_ZN17LoRa_contact_data14get_all_packetERh+0xa4>
}
 8001870:	4638      	mov	r0, r7
 8001872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001874 <_ZN17LoRa_contact_data19get_signal_completeEv>:
    return (current_stage_.stade_communication == SC_COMPLETE);
 8001874:	7d00      	ldrb	r0, [r0, #20]
}
 8001876:	2804      	cmp	r0, #4
 8001878:	bf14      	ite	ne
 800187a:	2000      	movne	r0, #0
 800187c:	2001      	moveq	r0, #1
 800187e:	4770      	bx	lr

08001880 <_ZN17LoRa_contact_data24get_signal_start_connectEv>:

bool LoRa_contact_data::get_signal_start_connect() {
    return start_connect_;
}
 8001880:	f890 0137 	ldrb.w	r0, [r0, #311]	; 0x137
 8001884:	4770      	bx	lr

08001886 <_ZN17LoRa_contact_data5clearEv>:

//   ----- ----- ----- ----- ----- ----- -----
// ----- ----- -----  Private  ----- ----- -----
//   ----- ----- ----- ----- ----- ----- -----

void LoRa_contact_data::clear() {
 8001886:	4603      	mov	r3, r0
#if defined ( USE_VECTOR )
    send_packet_.clear();
    send_flag_.clear();
    reciev_packet_.clear();
#else
    send_packet_len = 0;
 8001888:	2200      	movs	r2, #0
 800188a:	f880 2134 	strb.w	r2, [r0, #308]	; 0x134
    send_flag_len = 0;
 800188e:	f880 2136 	strb.w	r2, [r0, #310]	; 0x136
    reciev_packet_len = 0;
 8001892:	f880 2135 	strb.w	r2, [r0, #309]	; 0x135
#endif
    current_stage_.type_communication = TC_INITIATOR;
 8001896:	74c2      	strb	r2, [r0, #19]
    current_stage_.stade_communication = SC_DOWNTIME;
 8001898:	7502      	strb	r2, [r0, #20]
    current_stage_.connection = C_EXPECTATION;
 800189a:	7542      	strb	r2, [r0, #21]
    current_stage_.exchange = E_BOARDCAST;
 800189c:	7582      	strb	r2, [r0, #22]
    current_stage_.disconnect = D_WAITING_CONNECTION_BREAK;
 800189e:	75c2      	strb	r2, [r0, #23]
    past_stage_ = current_stage_;
 80018a0:	f100 0218 	add.w	r2, r0, #24
 80018a4:	f8d0 0013 	ldr.w	r0, [r0, #19]
 80018a8:	6198      	str	r0, [r3, #24]
 80018aa:	2300      	movs	r3, #0
 80018ac:	7113      	strb	r3, [r2, #4]
}
 80018ae:	4770      	bx	lr

080018b0 <_ZN17LoRa_contact_dataC1Ev>:
LoRa_contact_data::LoRa_contact_data() {
 80018b0:	b570      	push	{r4, r5, r6, lr}
 80018b2:	4605      	mov	r5, r0
 80018b4:	2400      	movs	r4, #0
 80018b6:	7004      	strb	r4, [r0, #0]
 80018b8:	7044      	strb	r4, [r0, #1]
 80018ba:	8044      	strh	r4, [r0, #2]
 80018bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018c0:	8083      	strh	r3, [r0, #4]
 80018c2:	80c3      	strh	r3, [r0, #6]
 80018c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80018c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018cc:	3008      	adds	r0, #8
 80018ce:	f003 fee9 	bl	80056a4 <_ZN12LoRa_addressC1Ett>
 80018d2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80018d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018da:	f105 000c 	add.w	r0, r5, #12
 80018de:	f003 fee1 	bl	80056a4 <_ZN12LoRa_addressC1Ett>
 80018e2:	822c      	strh	r4, [r5, #16]
 80018e4:	776c      	strb	r4, [r5, #29]
 80018e6:	f105 0020 	add.w	r0, r5, #32
 80018ea:	f002 fd79 	bl	80043e0 <_ZN11LoRa_packetC1Ev>
 80018ee:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80018f2:	f002 fd75 	bl	80043e0 <_ZN11LoRa_packetC1Ev>
 80018f6:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
 80018fa:	f885 4031 	strb.w	r4, [r5, #49]	; 0x31
 80018fe:	f105 0434 	add.w	r4, r5, #52	; 0x34
 8001902:	f105 06ac 	add.w	r6, r5, #172	; 0xac
 8001906:	4620      	mov	r0, r4
 8001908:	f002 fd6a 	bl	80043e0 <_ZN11LoRa_packetC1Ev>
 800190c:	3408      	adds	r4, #8
 800190e:	42b4      	cmp	r4, r6
 8001910:	d1f9      	bne.n	8001906 <_ZN17LoRa_contact_dataC1Ev+0x56>
 8001912:	f105 04bc 	add.w	r4, r5, #188	; 0xbc
 8001916:	f505 769a 	add.w	r6, r5, #308	; 0x134
 800191a:	4620      	mov	r0, r4
 800191c:	f002 fd60 	bl	80043e0 <_ZN11LoRa_packetC1Ev>
 8001920:	3408      	adds	r4, #8
 8001922:	42a6      	cmp	r6, r4
 8001924:	d1f9      	bne.n	800191a <_ZN17LoRa_contact_dataC1Ev+0x6a>
 8001926:	2300      	movs	r3, #0
 8001928:	f885 3134 	strb.w	r3, [r5, #308]	; 0x134
 800192c:	f885 3135 	strb.w	r3, [r5, #309]	; 0x135
 8001930:	f885 3136 	strb.w	r3, [r5, #310]	; 0x136
 8001934:	f885 3137 	strb.w	r3, [r5, #311]	; 0x137
 8001938:	f885 3138 	strb.w	r3, [r5, #312]	; 0x138
 800193c:	f885 3139 	strb.w	r3, [r5, #313]	; 0x139
 8001940:	f885 313a 	strb.w	r3, [r5, #314]	; 0x13a
    clear();
 8001944:	4628      	mov	r0, r5
 8001946:	f7ff ff9e 	bl	8001886 <_ZN17LoRa_contact_data5clearEv>
    time_constraints_.I_connect  = 1500;    // Ответа на запрос об установке соединения
 800194a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800194e:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
    time_constraints_.I_wait_connect = -1;  // Отложенного соединения
 8001952:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001956:	f8c5 2148 	str.w	r2, [r5, #328]	; 0x148
    time_constraints_.I_amt_pack = 1500;    // Ответа с количеством принятых пакетов
 800195a:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
    time_constraints_.I_num_pack = 1000;    // Ответа с номерами принятых пакетов
 800195e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001962:	f8c5 2150 	str.w	r2, [r5, #336]	; 0x150
    time_constraints_.R_connect    = 2500; // Запроса после сброса ожидания (отложенного соединения)
 8001966:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800196a:	f8c5 2154 	str.w	r2, [r5, #340]	; 0x154
    time_constraints_.R_data_pack  = 3500; // Пакетов данных (после отправляется пакет с количеством пришедших пакетов)
 800196e:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001972:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
    time_constraints_.R_correct_pack = 3500;// Результатов подтверждения
 8001976:	f8c5 215c 	str.w	r2, [r5, #348]	; 0x15c
    time_constraints_.R_disconnect = 1500;  // Разрыва соединения
 800197a:	f8c5 3160 	str.w	r3, [r5, #352]	; 0x160
    packet_constraints_.I_connect  = 10;     // Запрос на установку соединения
 800197e:	230a      	movs	r3, #10
 8001980:	f885 3165 	strb.w	r3, [r5, #357]	; 0x165
    packet_constraints_.I_amt_pack = 10;     // Запрос о количестве принятых пакетов
 8001984:	f885 3166 	strb.w	r3, [r5, #358]	; 0x166
    packet_constraints_.I_num_pack = 15;     // Запрос номеров принятых пакетов
 8001988:	220f      	movs	r2, #15
 800198a:	f885 2167 	strb.w	r2, [r5, #359]	; 0x167
    packet_constraints_.R_wait_connect = 10; // Сбросов ожидания (отложенного соединения)
 800198e:	f885 3168 	strb.w	r3, [r5, #360]	; 0x168
    packet_constraints_.R_correct_pack = 10; // Ответов с количеством принятых пакетов
 8001992:	f885 3169 	strb.w	r3, [r5, #361]	; 0x169
}
 8001996:	4628      	mov	r0, r5
 8001998:	bd70      	pop	{r4, r5, r6, pc}
	...

0800199c <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>:

// --- функции создания пакетов ---


// создание основы пакета
void LoRa_contact_data::create_packet(uint8_t size, Packet_Type type_packet) {
 800199c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800199e:	4605      	mov	r5, r0
 80019a0:	4617      	mov	r7, r2
    // last_send_packet_.creat_packet(size, type_packet);
    // last_send_packet_.packet->set_dest_adr(connect_adr_);
    // last_send_packet_.packet->set_sour_adr(my_adr_);
    // last_send_packet_.packet->set_packet_type(type_packet);
    // last_send_packet_.packet->set_packet_number(num_end_packet_++);
    last_send_packet_.clear_packet();
 80019a2:	f100 0428 	add.w	r4, r0, #40	; 0x28
 80019a6:	4620      	mov	r0, r4
 80019a8:	f002 fd57 	bl	800445a <_ZN11LoRa_packet12clear_packetEv>
    packet_analyzer.set_dest_adr(last_send_packet_, connect_adr_);
 80019ac:	4e0b      	ldr	r6, [pc, #44]	; (80019dc <_ZN17LoRa_contact_data13create_packetEh11Packet_Type+0x40>)
 80019ae:	68aa      	ldr	r2, [r5, #8]
 80019b0:	4621      	mov	r1, r4
 80019b2:	4630      	mov	r0, r6
 80019b4:	f003 ff13 	bl	80057de <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address>
    packet_analyzer.set_sour_adr(last_send_packet_, my_adr_);
 80019b8:	686a      	ldr	r2, [r5, #4]
 80019ba:	4621      	mov	r1, r4
 80019bc:	4630      	mov	r0, r6
 80019be:	f003 ff44 	bl	800584a <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address>
    packet_analyzer.set_packet_type(last_send_packet_, type_packet);
 80019c2:	463a      	mov	r2, r7
 80019c4:	4621      	mov	r1, r4
 80019c6:	4630      	mov	r0, r6
 80019c8:	f003 ff61 	bl	800588e <_ZN15Packet_analyzer15set_packet_typeER11LoRa_packet11Packet_Type>
    packet_analyzer.set_packet_number(last_send_packet_, (num_end_packet_++));
 80019cc:	8a2a      	ldrh	r2, [r5, #16]
 80019ce:	1c53      	adds	r3, r2, #1
 80019d0:	822b      	strh	r3, [r5, #16]
 80019d2:	4621      	mov	r1, r4
 80019d4:	4630      	mov	r0, r6
 80019d6:	f003 ff64 	bl	80058a2 <_ZN15Packet_analyzer17set_packet_numberER11LoRa_packett>
}
 80019da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019dc:	20002378 	.word	0x20002378

080019e0 <_ZN17LoRa_contact_data21create_connect_packetEhb>:

// создание пакета установки соединения (num = count_pack) или ответа на
//   запрос соединения (3 реакции +, +num и -wait) (и при замене инициативы)
bool LoRa_contact_data::create_connect_packet(uint8_t amt_packet, bool swap_type) {
 80019e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019e2:	b085      	sub	sp, #20
 80019e4:	4605      	mov	r5, r0
 80019e6:	460e      	mov	r6, r1
 80019e8:	4614      	mov	r4, r2
    bool err = false;
    uint8_t size = 11;
    uint8_t com = 0x01;
 80019ea:	2301      	movs	r3, #1
 80019ec:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t len;
    uint8_t data[2] = {0, 0};
 80019f0:	2300      	movs	r3, #0
 80019f2:	f88d 300c 	strb.w	r3, [sp, #12]
 80019f6:	f88d 300d 	strb.w	r3, [sp, #13]
    // switch (current_stage_.type_communication) {
    switch ((use_past_stage)?(past_stage_.type_communication):(current_stage_.type_communication)) {
 80019fa:	7f43      	ldrb	r3, [r0, #29]
 80019fc:	b12b      	cbz	r3, 8001a0a <_ZN17LoRa_contact_data21create_connect_packetEhb+0x2a>
 80019fe:	7e03      	ldrb	r3, [r0, #24]
 8001a00:	b12b      	cbz	r3, 8001a0e <_ZN17LoRa_contact_data21create_connect_packetEhb+0x2e>
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d01e      	beq.n	8001a44 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x64>
            packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
        }
        break;
    }
    default:
        err = true;
 8001a06:	2001      	movs	r0, #1
 8001a08:	e01a      	b.n	8001a40 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x60>
    switch ((use_past_stage)?(past_stage_.type_communication):(current_stage_.type_communication)) {
 8001a0a:	7cc3      	ldrb	r3, [r0, #19]
 8001a0c:	e7f8      	b.n	8001a00 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x20>
        com = 0x00;
 8001a0e:	2400      	movs	r4, #0
 8001a10:	f88d 400f 	strb.w	r4, [sp, #15]
        len = 0;
 8001a14:	f88d 400e 	strb.w	r4, [sp, #14]
        data[0] = amt_packet;
 8001a18:	af04      	add	r7, sp, #16
 8001a1a:	f807 6d04 	strb.w	r6, [r7, #-4]!
        create_packet(size, Packet_Type::CONNECTION);
 8001a1e:	4622      	mov	r2, r4
 8001a20:	210b      	movs	r1, #11
 8001a22:	4628      	mov	r0, r5
 8001a24:	f7ff ffba 	bl	800199c <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001a28:	f10d 030e 	add.w	r3, sp, #14
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	463b      	mov	r3, r7
 8001a30:	f10d 020f 	add.w	r2, sp, #15
 8001a34:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8001a38:	4830      	ldr	r0, [pc, #192]	; (8001afc <_ZN17LoRa_contact_data21create_connect_packetEhb+0x11c>)
 8001a3a:	f004 f813 	bl	8005a64 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    bool err = false;
 8001a3e:	4620      	mov	r0, r4
        break;
    }
    return err;
}
 8001a40:	b005      	add	sp, #20
 8001a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
        connect_adr_ = packet_analyzer.get_sour_adr(last_receive_packet_);
 8001a44:	f105 0120 	add.w	r1, r5, #32
 8001a48:	482d      	ldr	r0, [pc, #180]	; (8001b00 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x120>)
 8001a4a:	f003 fe91 	bl	8005770 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>
 8001a4e:	60a8      	str	r0, [r5, #8]
        if(amt_packet != 255) {
 8001a50:	2eff      	cmp	r6, #255	; 0xff
 8001a52:	d036      	beq.n	8001ac2 <_ZN17LoRa_contact_data21create_connect_packetEhb+0xe2>
            if(!swap_type) {
 8001a54:	b9c4      	cbnz	r4, 8001a88 <_ZN17LoRa_contact_data21create_connect_packetEhb+0xa8>
                com = 0x01;
 8001a56:	2301      	movs	r3, #1
 8001a58:	f88d 300f 	strb.w	r3, [sp, #15]
                data[1] = 0;
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f88d 200d 	strb.w	r2, [sp, #13]
                len = 1;
 8001a62:	f88d 300e 	strb.w	r3, [sp, #14]
                create_packet(size, Packet_Type::CONNECTION);
 8001a66:	210b      	movs	r1, #11
 8001a68:	4628      	mov	r0, r5
 8001a6a:	f7ff ff97 	bl	800199c <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
                packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001a6e:	f10d 030e 	add.w	r3, sp, #14
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	ab03      	add	r3, sp, #12
 8001a76:	f10d 020f 	add.w	r2, sp, #15
 8001a7a:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8001a7e:	481f      	ldr	r0, [pc, #124]	; (8001afc <_ZN17LoRa_contact_data21create_connect_packetEhb+0x11c>)
 8001a80:	f003 fff0 	bl	8005a64 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    bool err = false;
 8001a84:	4620      	mov	r0, r4
 8001a86:	e7db      	b.n	8001a40 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x60>
                com = 0x01;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	f88d 300f 	strb.w	r3, [sp, #15]
                data[0] = 0;
 8001a8e:	2400      	movs	r4, #0
 8001a90:	f88d 400c 	strb.w	r4, [sp, #12]
                data[1] = amt_packet;
 8001a94:	f88d 600d 	strb.w	r6, [sp, #13]
                len = 2;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	f88d 300e 	strb.w	r3, [sp, #14]
                create_packet(size, Packet_Type::CONNECTION);
 8001a9e:	4622      	mov	r2, r4
 8001aa0:	210c      	movs	r1, #12
 8001aa2:	4628      	mov	r0, r5
 8001aa4:	f7ff ff7a 	bl	800199c <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
                packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001aa8:	f10d 030e 	add.w	r3, sp, #14
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	ab03      	add	r3, sp, #12
 8001ab0:	f10d 020f 	add.w	r2, sp, #15
 8001ab4:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8001ab8:	4810      	ldr	r0, [pc, #64]	; (8001afc <_ZN17LoRa_contact_data21create_connect_packetEhb+0x11c>)
 8001aba:	f003 ffd3 	bl	8005a64 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    bool err = false;
 8001abe:	4620      	mov	r0, r4
 8001ac0:	e7be      	b.n	8001a40 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x60>
            com = 0x01;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	f88d 300f 	strb.w	r3, [sp, #15]
            len = 0;
 8001ac8:	2600      	movs	r6, #0
 8001aca:	f88d 600e 	strb.w	r6, [sp, #14]
            data[0] = 1;
 8001ace:	af04      	add	r7, sp, #16
 8001ad0:	f807 3d04 	strb.w	r3, [r7, #-4]!
            size = 11 + (uint8_t)swap_type;
 8001ad4:	f104 010b 	add.w	r1, r4, #11
            create_packet(size, Packet_Type::CONNECTION);
 8001ad8:	4632      	mov	r2, r6
 8001ada:	b2c9      	uxtb	r1, r1
 8001adc:	4628      	mov	r0, r5
 8001ade:	f7ff ff5d 	bl	800199c <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
            packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001ae2:	f10d 030e 	add.w	r3, sp, #14
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	463b      	mov	r3, r7
 8001aea:	f10d 020f 	add.w	r2, sp, #15
 8001aee:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8001af2:	4802      	ldr	r0, [pc, #8]	; (8001afc <_ZN17LoRa_contact_data21create_connect_packetEhb+0x11c>)
 8001af4:	f003 ffb6 	bl	8005a64 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    bool err = false;
 8001af8:	4630      	mov	r0, r6
 8001afa:	e7a1      	b.n	8001a40 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x60>
 8001afc:	20002394 	.word	0x20002394
 8001b00:	20002378 	.word	0x20002378

08001b04 <_ZN17LoRa_contact_data18create_data_packetEv>:


// создание пакета на основе номера из списка
bool LoRa_contact_data::create_data_packet() {
    bool err = true;
    switch (current_stage_.type_communication) {
 8001b04:	7cc3      	ldrb	r3, [r0, #19]
 8001b06:	b11b      	cbz	r3, 8001b10 <_ZN17LoRa_contact_data18create_data_packetEv+0xc>
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d001      	beq.n	8001b10 <_ZN17LoRa_contact_data18create_data_packetEv+0xc>
    bool err = true;
 8001b0c:	2001      	movs	r0, #1
        break;
    }
    default: break;
    }
    return err;
}
 8001b0e:	4770      	bx	lr
bool LoRa_contact_data::create_data_packet() {
 8001b10:	b570      	push	{r4, r5, r6, lr}
 8001b12:	4605      	mov	r5, r0
        last_send_packet_.clear_packet();
 8001b14:	f100 0628 	add.w	r6, r0, #40	; 0x28
 8001b18:	4630      	mov	r0, r6
 8001b1a:	f002 fc9e 	bl	800445a <_ZN11LoRa_packet12clear_packetEv>
        for(unsigned int i = 0; i < send_packet_len; ++i)
 8001b1e:	f895 1134 	ldrb.w	r1, [r5, #308]	; 0x134
 8001b22:	b1e1      	cbz	r1, 8001b5e <_ZN17LoRa_contact_data18create_data_packetEv+0x5a>
            if(send_flag_[i]) {
 8001b24:	f895 30ac 	ldrb.w	r3, [r5, #172]	; 0xac
 8001b28:	b9ab      	cbnz	r3, 8001b56 <_ZN17LoRa_contact_data18create_data_packetEv+0x52>
 8001b2a:	f105 03ac 	add.w	r3, r5, #172	; 0xac
        for(unsigned int i = 0; i < send_packet_len; ++i)
 8001b2e:	2400      	movs	r4, #0
 8001b30:	3401      	adds	r4, #1
 8001b32:	428c      	cmp	r4, r1
 8001b34:	d011      	beq.n	8001b5a <_ZN17LoRa_contact_data18create_data_packetEv+0x56>
            if(send_flag_[i]) {
 8001b36:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8001b3a:	2a00      	cmp	r2, #0
 8001b3c:	d0f8      	beq.n	8001b30 <_ZN17LoRa_contact_data18create_data_packetEv+0x2c>
      { return const_cast<_Tp&>(__t[__n]); }
 8001b3e:	f105 0134 	add.w	r1, r5, #52	; 0x34
                last_send_packet_ = send_packet_[i];
 8001b42:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8001b46:	4630      	mov	r0, r6
 8001b48:	f002 fca4 	bl	8004494 <_ZN11LoRa_packetaSERKS_>
                send_flag_[i] = false;
 8001b4c:	442c      	add	r4, r5
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
}
 8001b54:	bd70      	pop	{r4, r5, r6, pc}
        for(unsigned int i = 0; i < send_packet_len; ++i)
 8001b56:	2400      	movs	r4, #0
 8001b58:	e7f1      	b.n	8001b3e <_ZN17LoRa_contact_data18create_data_packetEv+0x3a>
    bool err = true;
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	e7fa      	b.n	8001b54 <_ZN17LoRa_contact_data18create_data_packetEv+0x50>
 8001b5e:	2001      	movs	r0, #1
 8001b60:	e7f8      	b.n	8001b54 <_ZN17LoRa_contact_data18create_data_packetEv+0x50>
	...

08001b64 <_ZN17LoRa_contact_data17create_amt_packetEv>:

// создание пакета количества пакетов
bool LoRa_contact_data::create_amt_packet() {
 8001b64:	b530      	push	{r4, r5, lr}
 8001b66:	b085      	sub	sp, #20
 8001b68:	4604      	mov	r4, r0
    bool err = false;
    switch (current_stage_.type_communication) {
 8001b6a:	7cc3      	ldrb	r3, [r0, #19]
 8001b6c:	b11b      	cbz	r3, 8001b76 <_ZN17LoRa_contact_data17create_amt_packetEv+0x12>
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d019      	beq.n	8001ba6 <_ZN17LoRa_contact_data17create_amt_packetEv+0x42>
        // static_cast<Packet_Connection*>(last_send_packet_.packet)->set_packet_data(&com, data, nullptr);
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
        break;
    }
    default:
        err = true;
 8001b72:	2001      	movs	r0, #1
 8001b74:	e015      	b.n	8001ba2 <_ZN17LoRa_contact_data17create_amt_packetEv+0x3e>
        uint8_t com = 0x03;
 8001b76:	2303      	movs	r3, #3
 8001b78:	f88d 300e 	strb.w	r3, [sp, #14]
        uint8_t len = 0;
 8001b7c:	2500      	movs	r5, #0
 8001b7e:	f88d 500f 	strb.w	r5, [sp, #15]
        create_packet(size, Packet_Type::CONNECTION);
 8001b82:	462a      	mov	r2, r5
 8001b84:	210a      	movs	r1, #10
 8001b86:	f7ff ff09 	bl	800199c <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, nullptr, &len);
 8001b8a:	f10d 030f 	add.w	r3, sp, #15
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	462b      	mov	r3, r5
 8001b92:	f10d 020e 	add.w	r2, sp, #14
 8001b96:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8001b9a:	4810      	ldr	r0, [pc, #64]	; (8001bdc <_ZN17LoRa_contact_data17create_amt_packetEv+0x78>)
 8001b9c:	f003 ff62 	bl	8005a64 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    bool err = false;
 8001ba0:	4628      	mov	r0, r5
        break;
    }
    return err;
}
 8001ba2:	b005      	add	sp, #20
 8001ba4:	bd30      	pop	{r4, r5, pc}
        uint8_t com = 0x04;
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	f88d 300e 	strb.w	r3, [sp, #14]
        uint8_t data[1] = {amt_packet_};
 8001bac:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8001bb0:	f88d 300c 	strb.w	r3, [sp, #12]
        uint8_t len = 1;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	f88d 300f 	strb.w	r3, [sp, #15]
        create_packet(size, Packet_Type::CONNECTION);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	210b      	movs	r1, #11
 8001bbe:	f7ff feed 	bl	800199c <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001bc2:	f10d 030f 	add.w	r3, sp, #15
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	ab03      	add	r3, sp, #12
 8001bca:	f10d 020e 	add.w	r2, sp, #14
 8001bce:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8001bd2:	4802      	ldr	r0, [pc, #8]	; (8001bdc <_ZN17LoRa_contact_data17create_amt_packetEv+0x78>)
 8001bd4:	f003 ff46 	bl	8005a64 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    bool err = false;
 8001bd8:	2000      	movs	r0, #0
 8001bda:	e7e2      	b.n	8001ba2 <_ZN17LoRa_contact_data17create_amt_packetEv+0x3e>
 8001bdc:	20002394 	.word	0x20002394

08001be0 <_ZN17LoRa_contact_data20create_number_packetEv>:

// Создание пакета номеров пришедших пакетов
bool LoRa_contact_data::create_number_packet() {
 8001be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	4607      	mov	r7, r0
    bool err = false;
    switch (current_stage_.type_communication) {
 8001be8:	7cc3      	ldrb	r3, [r0, #19]
 8001bea:	b11b      	cbz	r3, 8001bf4 <_ZN17LoRa_contact_data20create_number_packetEv+0x14>
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d019      	beq.n	8001c24 <_ZN17LoRa_contact_data20create_number_packetEv+0x44>
        if(len != 0)
            delete[] data;
        break;
    }
    default:
        err = true;
 8001bf0:	2001      	movs	r0, #1
        break;
    }
    return err;
 8001bf2:	e014      	b.n	8001c1e <_ZN17LoRa_contact_data20create_number_packetEv+0x3e>
        uint8_t com = 0x05;
 8001bf4:	2305      	movs	r3, #5
 8001bf6:	f88d 300f 	strb.w	r3, [sp, #15]
        uint8_t len = 0;
 8001bfa:	2400      	movs	r4, #0
 8001bfc:	f88d 4010 	strb.w	r4, [sp, #16]
        create_packet(size, Packet_Type::CONNECTION);
 8001c00:	4622      	mov	r2, r4
 8001c02:	210a      	movs	r1, #10
 8001c04:	f7ff feca 	bl	800199c <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, nullptr, &len);
 8001c08:	ab04      	add	r3, sp, #16
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	4623      	mov	r3, r4
 8001c0e:	f10d 020f 	add.w	r2, sp, #15
 8001c12:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001c16:	4834      	ldr	r0, [pc, #208]	; (8001ce8 <_ZN17LoRa_contact_data20create_number_packetEv+0x108>)
 8001c18:	f003 ff24 	bl	8005a64 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    bool err = false;
 8001c1c:	4620      	mov	r0, r4
}
 8001c1e:	b006      	add	sp, #24
 8001c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        LoRa_packet packet;
 8001c24:	a804      	add	r0, sp, #16
 8001c26:	f002 fbdb 	bl	80043e0 <_ZN11LoRa_packetC1Ev>
        uint8_t com = 0x06;
 8001c2a:	2306      	movs	r3, #6
 8001c2c:	f88d 300e 	strb.w	r3, [sp, #14]
        uint8_t len = reciev_packet_len * 2;
 8001c30:	f897 0135 	ldrb.w	r0, [r7, #309]	; 0x135
 8001c34:	0040      	lsls	r0, r0, #1
 8001c36:	b2c0      	uxtb	r0, r0
 8001c38:	f88d 000f 	strb.w	r0, [sp, #15]
        uint8_t size = 11 + len;
 8001c3c:	f100 0a0b 	add.w	sl, r0, #11
 8001c40:	fa5f fa8a 	uxtb.w	sl, sl
        if(len != 0)
 8001c44:	b9a0      	cbnz	r0, 8001c70 <_ZN17LoRa_contact_data20create_number_packetEv+0x90>
        create_packet(size, Packet_Type::CONNECTION);
 8001c46:	2200      	movs	r2, #0
 8001c48:	4651      	mov	r1, sl
 8001c4a:	4638      	mov	r0, r7
 8001c4c:	f7ff fea6 	bl	800199c <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001c50:	f10d 030f 	add.w	r3, sp, #15
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	2300      	movs	r3, #0
 8001c58:	f10d 020e 	add.w	r2, sp, #14
 8001c5c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001c60:	4821      	ldr	r0, [pc, #132]	; (8001ce8 <_ZN17LoRa_contact_data20create_number_packetEv+0x108>)
 8001c62:	f003 feff 	bl	8005a64 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
        LoRa_packet packet;
 8001c66:	a804      	add	r0, sp, #16
 8001c68:	f002 fbc3 	bl	80043f2 <_ZN11LoRa_packetD1Ev>
    bool err = false;
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	e7d6      	b.n	8001c1e <_ZN17LoRa_contact_data20create_number_packetEv+0x3e>
            data = new uint8_t[len];
 8001c70:	f008 fdac 	bl	800a7cc <_Znaj>
 8001c74:	4680      	mov	r8, r0
        for(int i = 0; i < (len / 2); ++i) {
 8001c76:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d919      	bls.n	8001cb2 <_ZN17LoRa_contact_data20create_number_packetEv+0xd2>
 8001c7e:	f107 06bc 	add.w	r6, r7, #188	; 0xbc
 8001c82:	4605      	mov	r5, r0
 8001c84:	2400      	movs	r4, #0
            number = packet_analyzer.get_packet_number(packet);
 8001c86:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8001cec <_ZN17LoRa_contact_data20create_number_packetEv+0x10c>
            packet = reciev_packet_[i];
 8001c8a:	4631      	mov	r1, r6
 8001c8c:	a804      	add	r0, sp, #16
 8001c8e:	f002 fc01 	bl	8004494 <_ZN11LoRa_packetaSERKS_>
            number = packet_analyzer.get_packet_number(packet);
 8001c92:	a904      	add	r1, sp, #16
 8001c94:	4648      	mov	r0, r9
 8001c96:	f003 fd86 	bl	80057a6 <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>
            data[i * 2] = (number >> 8) & 0xFF;
 8001c9a:	0a03      	lsrs	r3, r0, #8
 8001c9c:	f808 3014 	strb.w	r3, [r8, r4, lsl #1]
            data[(i * 2) + 1] = number & 0xFF;
 8001ca0:	7068      	strb	r0, [r5, #1]
        for(int i = 0; i < (len / 2); ++i) {
 8001ca2:	3401      	adds	r4, #1
 8001ca4:	3608      	adds	r6, #8
 8001ca6:	3502      	adds	r5, #2
 8001ca8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001cac:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 8001cb0:	dbeb      	blt.n	8001c8a <_ZN17LoRa_contact_data20create_number_packetEv+0xaa>
        create_packet(size, Packet_Type::CONNECTION);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	4651      	mov	r1, sl
 8001cb6:	4638      	mov	r0, r7
 8001cb8:	f7ff fe70 	bl	800199c <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001cbc:	f10d 030f 	add.w	r3, sp, #15
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	4643      	mov	r3, r8
 8001cc4:	f10d 020e 	add.w	r2, sp, #14
 8001cc8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001ccc:	4806      	ldr	r0, [pc, #24]	; (8001ce8 <_ZN17LoRa_contact_data20create_number_packetEv+0x108>)
 8001cce:	f003 fec9 	bl	8005a64 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
        if(len != 0)
 8001cd2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0c5      	beq.n	8001c66 <_ZN17LoRa_contact_data20create_number_packetEv+0x86>
            delete[] data;
 8001cda:	f1b8 0f00 	cmp.w	r8, #0
 8001cde:	d0c2      	beq.n	8001c66 <_ZN17LoRa_contact_data20create_number_packetEv+0x86>
 8001ce0:	4640      	mov	r0, r8
 8001ce2:	f008 fd71 	bl	800a7c8 <_ZdaPv>
 8001ce6:	e7be      	b.n	8001c66 <_ZN17LoRa_contact_data20create_number_packetEv+0x86>
 8001ce8:	20002394 	.word	0x20002394
 8001cec:	20002378 	.word	0x20002378

08001cf0 <_ZN17LoRa_contact_data23create_disconnet_packetEb>:
    return err;
}
// Создание пакета разрыва соединения // err переменная класса? 
bool LoRa_contact_data::create_disconnet_packet(bool error) {
    bool err = false;
    init_ = false;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f880 3138 	strb.w	r3, [r0, #312]	; 0x138
    switch (current_stage_.type_communication) {
 8001cf6:	7cc3      	ldrb	r3, [r0, #19]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d822      	bhi.n	8001d42 <_ZN17LoRa_contact_data23create_disconnet_packetEb+0x52>
bool LoRa_contact_data::create_disconnet_packet(bool error) {
 8001cfc:	b510      	push	{r4, lr}
 8001cfe:	b084      	sub	sp, #16
    case TC_INITIATOR:
    // Получатель
    case TC_RECIPIENT: {
        // Создание пакета
        uint8_t size = 11;
        uint8_t com = 0x08;
 8001d00:	2308      	movs	r3, #8
 8001d02:	f88d 300e 	strb.w	r3, [sp, #14]
        uint8_t len = 1;
 8001d06:	2301      	movs	r3, #1
 8001d08:	f88d 300f 	strb.w	r3, [sp, #15]
        uint8_t data[1] = {0};
        if(error)
 8001d0c:	b9a9      	cbnz	r1, 8001d3a <_ZN17LoRa_contact_data23create_disconnet_packetEb+0x4a>
        uint8_t data[1] = {0};
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f88d 300c 	strb.w	r3, [sp, #12]
 8001d14:	4604      	mov	r4, r0
            data[0] = 2;
        create_packet(size, Packet_Type::CONNECTION);
 8001d16:	2200      	movs	r2, #0
 8001d18:	210b      	movs	r1, #11
 8001d1a:	f7ff fe3f 	bl	800199c <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        // static_cast<Packet_Connection*>(last_send_packet_.packet)->set_packet_data(&com, data, nullptr);
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001d1e:	f10d 030f 	add.w	r3, sp, #15
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	ab03      	add	r3, sp, #12
 8001d26:	f10d 020e 	add.w	r2, sp, #14
 8001d2a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8001d2e:	4806      	ldr	r0, [pc, #24]	; (8001d48 <_ZN17LoRa_contact_data23create_disconnet_packetEb+0x58>)
 8001d30:	f003 fe98 	bl	8005a64 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    bool err = false;
 8001d34:	2000      	movs	r0, #0
    default:
        err = true;
        break;
    }
    return err;
}
 8001d36:	b004      	add	sp, #16
 8001d38:	bd10      	pop	{r4, pc}
            data[0] = 2;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	f88d 300c 	strb.w	r3, [sp, #12]
 8001d40:	e7e8      	b.n	8001d14 <_ZN17LoRa_contact_data23create_disconnet_packetEb+0x24>
        err = true;
 8001d42:	2001      	movs	r0, #1
}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20002394 	.word	0x20002394

08001d4c <_ZN17LoRa_contact_data19packet_dont_correctEbb>:

// --- функции обработки пакетов ---

// Проверка пакета на "пришёл" и "мой|глобальный", и от того, кого
//   я жду | от всех (при глобальном адресе ожидания - тоже все)
bool LoRa_contact_data::packet_dont_correct(bool global_adr, bool all_adr_sendler) {
 8001d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	4604      	mov	r4, r0
 8001d52:	460e      	mov	r6, r1
 8001d54:	4617      	mov	r7, r2
    // Проверка размера пакета
    if(last_receive_packet_.get_len() < PACKET_HEADER_SIZE)
 8001d56:	f100 0520 	add.w	r5, r0, #32
 8001d5a:	4628      	mov	r0, r5
 8001d5c:	f002 fb8a 	bl	8004474 <_ZNK11LoRa_packet7get_lenEv>
 8001d60:	2808      	cmp	r0, #8
 8001d62:	d803      	bhi.n	8001d6c <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x20>
        return false;
 8001d64:	2300      	movs	r3, #0
        // Проверка "мне важно кто отправил"
        // if(last_receive_packet_.packet->get_sour_adr() != connect_adr_)
        if(packet_analyzer.get_sour_adr(last_receive_packet_) != connect_adr_)
            return false;
    return true;
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	b005      	add	sp, #20
 8001d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(packet_analyzer.get_dest_adr(last_receive_packet_) != my_adr_) {
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	4819      	ldr	r0, [pc, #100]	; (8001dd4 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x88>)
 8001d70:	f003 fcda 	bl	8005728 <_ZN15Packet_analyzer12get_dest_adrERK11LoRa_packet>
 8001d74:	ab04      	add	r3, sp, #16
 8001d76:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8001d7a:	1d21      	adds	r1, r4, #4
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f003 fca7 	bl	80056d0 <_ZneRK12LoRa_addressS1_>
 8001d82:	b170      	cbz	r0, 8001da2 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x56>
        if(!(global_adr && (packet_analyzer.get_dest_adr(last_receive_packet_).global()))) {
 8001d84:	b90e      	cbnz	r6, 8001d8a <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x3e>
            return false;
 8001d86:	2300      	movs	r3, #0
 8001d88:	e7ed      	b.n	8001d66 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x1a>
        if(!(global_adr && (packet_analyzer.get_dest_adr(last_receive_packet_).global()))) {
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	4811      	ldr	r0, [pc, #68]	; (8001dd4 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x88>)
 8001d8e:	f003 fccb 	bl	8005728 <_ZN15Packet_analyzer12get_dest_adrERK11LoRa_packet>
 8001d92:	ab04      	add	r3, sp, #16
 8001d94:	f843 0d08 	str.w	r0, [r3, #-8]!
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f003 fc8a 	bl	80056b2 <_ZN12LoRa_address6globalEv>
 8001d9e:	2800      	cmp	r0, #0
 8001da0:	d0f1      	beq.n	8001d86 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x3a>
    if(!((connect_adr_.global()) || all_adr_sendler))
 8001da2:	3408      	adds	r4, #8
 8001da4:	4620      	mov	r0, r4
 8001da6:	f003 fc84 	bl	80056b2 <_ZN12LoRa_address6globalEv>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2800      	cmp	r0, #0
 8001dae:	d1da      	bne.n	8001d66 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x1a>
 8001db0:	b10f      	cbz	r7, 8001db6 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x6a>
    return true;
 8001db2:	463b      	mov	r3, r7
 8001db4:	e7d7      	b.n	8001d66 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x1a>
        if(packet_analyzer.get_sour_adr(last_receive_packet_) != connect_adr_)
 8001db6:	4629      	mov	r1, r5
 8001db8:	4806      	ldr	r0, [pc, #24]	; (8001dd4 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x88>)
 8001dba:	f003 fcd9 	bl	8005770 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>
 8001dbe:	ab04      	add	r3, sp, #16
 8001dc0:	f843 0d04 	str.w	r0, [r3, #-4]!
 8001dc4:	4621      	mov	r1, r4
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f003 fc82 	bl	80056d0 <_ZneRK12LoRa_addressS1_>
 8001dcc:	f080 0001 	eor.w	r0, r0, #1
 8001dd0:	b2c3      	uxtb	r3, r0
 8001dd2:	e7c8      	b.n	8001d66 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x1a>
 8001dd4:	20002378 	.word	0x20002378

08001dd8 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type>:
        if(last_receive_packet_[9] == subtype_packet[i])
            return true;
    return false;
}
#else
bool LoRa_contact_data::check_packet_type(Packet_Type type_packet) {
 8001dd8:	b510      	push	{r4, lr}
 8001dda:	460c      	mov	r4, r1
    return (packet_analyzer.get_packet_type(last_receive_packet_) == type_packet);
 8001ddc:	f100 0120 	add.w	r1, r0, #32
 8001de0:	4803      	ldr	r0, [pc, #12]	; (8001df0 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type+0x18>)
 8001de2:	f003 fcd9 	bl	8005798 <_ZN15Packet_analyzer15get_packet_typeERK11LoRa_packet>
}
 8001de6:	42a0      	cmp	r0, r4
 8001de8:	bf14      	ite	ne
 8001dea:	2000      	movne	r0, #0
 8001dec:	2001      	moveq	r0, #1
 8001dee:	bd10      	pop	{r4, pc}
 8001df0:	20002378 	.word	0x20002378

08001df4 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>:
bool LoRa_contact_data::check_packet_type(Packet_Type type_packet, const uint8_t& subtype_packet) {
 8001df4:	b570      	push	{r4, r5, r6, lr}
 8001df6:	460d      	mov	r5, r1
 8001df8:	4616      	mov	r6, r2
    if(packet_analyzer.get_packet_type(last_receive_packet_) != type_packet)
 8001dfa:	f100 0420 	add.w	r4, r0, #32
 8001dfe:	4621      	mov	r1, r4
 8001e00:	4808      	ldr	r0, [pc, #32]	; (8001e24 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh+0x30>)
 8001e02:	f003 fcc9 	bl	8005798 <_ZN15Packet_analyzer15get_packet_typeERK11LoRa_packet>
 8001e06:	42a8      	cmp	r0, r5
 8001e08:	d001      	beq.n	8001e0e <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh+0x1a>
        return false;
 8001e0a:	2000      	movs	r0, #0
    if(last_receive_packet_[9] == subtype_packet)
        return true;
    return false;
}
 8001e0c:	bd70      	pop	{r4, r5, r6, pc}
    if(last_receive_packet_[9] == subtype_packet)
 8001e0e:	2109      	movs	r1, #9
 8001e10:	4620      	mov	r0, r4
 8001e12:	f002 fb37 	bl	8004484 <_ZN11LoRa_packetixEi>
 8001e16:	7800      	ldrb	r0, [r0, #0]
 8001e18:	7833      	ldrb	r3, [r6, #0]
 8001e1a:	4298      	cmp	r0, r3
 8001e1c:	bf14      	ite	ne
 8001e1e:	2000      	movne	r0, #0
 8001e20:	2001      	moveq	r0, #1
 8001e22:	e7f3      	b.n	8001e0c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh+0x18>
 8001e24:	20002378 	.word	0x20002378

08001e28 <_ZN17LoRa_contact_data17search_num_packetEt>:
int16_t LoRa_contact_data::search_num_packet(uint16_t number) {
    // class Exchange_packet packet;
#if defined ( USE_VECTOR )
    for(int16_t i = 0; i < send_packet_.size(); ++i)
#else
    for(uint16_t i = 0; i < send_packet_len; ++i)
 8001e28:	f890 3134 	ldrb.w	r3, [r0, #308]	; 0x134
 8001e2c:	b1d3      	cbz	r3, 8001e64 <_ZN17LoRa_contact_data17search_num_packetEt+0x3c>
int16_t LoRa_contact_data::search_num_packet(uint16_t number) {
 8001e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e32:	460e      	mov	r6, r1
 8001e34:	4605      	mov	r5, r0
    for(uint16_t i = 0; i < send_packet_len; ++i)
 8001e36:	2400      	movs	r4, #0
 8001e38:	f100 0834 	add.w	r8, r0, #52	; 0x34
#endif
    {
        // packet.set_packet(send_packet_[i]);
        if(number == packet_analyzer.get_packet_number(send_packet_[i]))
 8001e3c:	4f0b      	ldr	r7, [pc, #44]	; (8001e6c <_ZN17LoRa_contact_data17search_num_packetEt+0x44>)
 8001e3e:	eb08 01c4 	add.w	r1, r8, r4, lsl #3
 8001e42:	4638      	mov	r0, r7
 8001e44:	f003 fcaf 	bl	80057a6 <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>
 8001e48:	42b0      	cmp	r0, r6
 8001e4a:	d008      	beq.n	8001e5e <_ZN17LoRa_contact_data17search_num_packetEt+0x36>
    for(uint16_t i = 0; i < send_packet_len; ++i)
 8001e4c:	3401      	adds	r4, #1
 8001e4e:	b2a4      	uxth	r4, r4
 8001e50:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 8001e54:	42a3      	cmp	r3, r4
 8001e56:	d8f2      	bhi.n	8001e3e <_ZN17LoRa_contact_data17search_num_packetEt+0x16>
        // packet.set_packet(send_packet_[i]);
        // if(packet.packet->get_packet_number() == number)
        //     return i;

    }
    return -1;
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e5c:	e000      	b.n	8001e60 <_ZN17LoRa_contact_data17search_num_packetEt+0x38>
            return i;
 8001e5e:	b220      	sxth	r0, r4
}
 8001e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20002378 	.word	0x20002378

08001e70 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh>:
        send_flag_.push_back(true);
    return i;
}
#else
uint8_t LoRa_contact_data::pop_num_packet(const std::array<uint16_t, CONTACT_DATA_MAX_PACKET>& number, uint8_t len) {
    if(len > send_packet_len)
 8001e70:	f890 3134 	ldrb.w	r3, [r0, #308]	; 0x134
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d346      	bcc.n	8001f06 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x96>
uint8_t LoRa_contact_data::pop_num_packet(const std::array<uint16_t, CONTACT_DATA_MAX_PACKET>& number, uint8_t len) {
 8001e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e7c:	4691      	mov	r9, r2
 8001e7e:	4606      	mov	r6, r0
        return 0;
    int i;
    for(i = 0; i < len; ++i) {
 8001e80:	4692      	mov	sl, r2
 8001e82:	b3f2      	cbz	r2, 8001f02 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x92>
 8001e84:	f1a1 0802 	sub.w	r8, r1, #2
 8001e88:	2700      	movs	r7, #0
 8001e8a:	e005      	b.n	8001e98 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x28>
        if(search == -1)
            break;
        for(int j = search; j < send_packet_len - 1; ++j) {
        	send_packet_[j] = std::move(send_packet_[j+1]);
        }
		--send_packet_len;
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	f886 3134 	strb.w	r3, [r6, #308]	; 0x134
    for(i = 0; i < len; ++i) {
 8001e92:	3701      	adds	r7, #1
 8001e94:	4557      	cmp	r7, sl
 8001e96:	d01d      	beq.n	8001ed4 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x64>
        int16_t search = search_num_packet(number[i]);
 8001e98:	f838 1f02 	ldrh.w	r1, [r8, #2]!
 8001e9c:	4630      	mov	r0, r6
 8001e9e:	f7ff ffc3 	bl	8001e28 <_ZN17LoRa_contact_data17search_num_packetEt>
        if(search == -1)
 8001ea2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001ea6:	d016      	beq.n	8001ed6 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x66>
        for(int j = search; j < send_packet_len - 1; ++j) {
 8001ea8:	4605      	mov	r5, r0
 8001eaa:	f896 3134 	ldrb.w	r3, [r6, #308]	; 0x134
 8001eae:	1e5a      	subs	r2, r3, #1
 8001eb0:	4290      	cmp	r0, r2
 8001eb2:	daeb      	bge.n	8001e8c <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x1c>
 8001eb4:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
 8001eb8:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8001ebc:	4620      	mov	r0, r4
        	send_packet_[j] = std::move(send_packet_[j+1]);
 8001ebe:	3501      	adds	r5, #1
 8001ec0:	3408      	adds	r4, #8
 8001ec2:	4621      	mov	r1, r4
 8001ec4:	f002 fb08 	bl	80044d8 <_ZN11LoRa_packetaSEOS_>
        for(int j = search; j < send_packet_len - 1; ++j) {
 8001ec8:	f896 3134 	ldrb.w	r3, [r6, #308]	; 0x134
 8001ecc:	1e5a      	subs	r2, r3, #1
 8001ece:	42aa      	cmp	r2, r5
 8001ed0:	dcf4      	bgt.n	8001ebc <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x4c>
 8001ed2:	e7db      	b.n	8001e8c <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x1c>
    for(i = 0; i < len; ++i) {
 8001ed4:	464f      	mov	r7, r9
    }
    amt_packet_ = send_packet_len;
 8001ed6:	f896 3134 	ldrb.w	r3, [r6, #308]	; 0x134
 8001eda:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    send_flag_len = send_packet_len;
 8001ede:	f886 3136 	strb.w	r3, [r6, #310]	; 0x136
    for(int j = 0; j < send_flag_len; ++j) {
 8001ee2:	b15b      	cbz	r3, 8001efc <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x8c>
 8001ee4:	f106 03ab 	add.w	r3, r6, #171	; 0xab
        send_flag_[j] = true;
 8001ee8:	2001      	movs	r0, #1
 8001eea:	7058      	strb	r0, [r3, #1]
 8001eec:	f1a3 02aa 	sub.w	r2, r3, #170	; 0xaa
 8001ef0:	1b92      	subs	r2, r2, r6
 8001ef2:	3301      	adds	r3, #1
    for(int j = 0; j < send_flag_len; ++j) {
 8001ef4:	f896 1136 	ldrb.w	r1, [r6, #310]	; 0x136
 8001ef8:	4291      	cmp	r1, r2
 8001efa:	dcf6      	bgt.n	8001eea <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x7a>
    }
    return i;
 8001efc:	b2f8      	uxtb	r0, r7
}
 8001efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for(i = 0; i < len; ++i) {
 8001f02:	2700      	movs	r7, #0
 8001f04:	e7e7      	b.n	8001ed6 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x66>
        return 0;
 8001f06:	2000      	movs	r0, #0
}
 8001f08:	4770      	bx	lr
	...

08001f0c <_ZN17LoRa_contact_data15sort_num_packetEv>:
#endif

// сортировка reciev_packet_
void LoRa_contact_data::sort_num_packet() {
 8001f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f10:	b083      	sub	sp, #12
 8001f12:	4682      	mov	sl, r0
    uint16_t number1, number2;
    bool swap;
#if defined ( USE_VECTOR )
    for(unsigned int i = 0; (i < (reciev_packet_.size() - 1)) && (reciev_packet_.size() != 0);)
#else
    for(unsigned int i = 0; (i < (reciev_packet_len - 1)) && (reciev_packet_len != 0);)
 8001f14:	2500      	movs	r5, #0
 8001f16:	f100 09bc 	add.w	r9, r0, #188	; 0xbc
        // packet.set_packet(reciev_packet_[i]);
        // number1 = packet.packet->get_packet_number();
        // packet.set_packet(reciev_packet_[i+1]);
        // number2 = packet.packet->get_packet_number();

        number1 = packet_analyzer.get_packet_number(reciev_packet_[i]);
 8001f1a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001f94 <_ZN17LoRa_contact_data15sort_num_packetEv+0x88>
 8001f1e:	e019      	b.n	8001f54 <_ZN17LoRa_contact_data15sort_num_packetEv+0x48>

            if(i != 0)
                --i;
        }
        else
            ++i;
 8001f20:	465d      	mov	r5, fp
 8001f22:	e017      	b.n	8001f54 <_ZN17LoRa_contact_data15sort_num_packetEv+0x48>
        else if (number2 == 0) {
 8001f24:	b918      	cbnz	r0, 8001f2e <_ZN17LoRa_contact_data15sort_num_packetEv+0x22>
            if(number1 <= 0x00FF)
 8001f26:	2fff      	cmp	r7, #255	; 0xff
 8001f28:	d903      	bls.n	8001f32 <_ZN17LoRa_contact_data15sort_num_packetEv+0x26>
            ++i;
 8001f2a:	465d      	mov	r5, fp
 8001f2c:	e012      	b.n	8001f54 <_ZN17LoRa_contact_data15sort_num_packetEv+0x48>
            if(number2 < number1)
 8001f2e:	4287      	cmp	r7, r0
 8001f30:	d9f6      	bls.n	8001f20 <_ZN17LoRa_contact_data15sort_num_packetEv+0x14>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001f32:	4631      	mov	r1, r6
 8001f34:	4668      	mov	r0, sp
 8001f36:	f002 fade 	bl	80044f6 <_ZN11LoRa_packetC1EOS_>
      __a = _GLIBCXX_MOVE(__b);
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	4630      	mov	r0, r6
 8001f3e:	f002 facb 	bl	80044d8 <_ZN11LoRa_packetaSEOS_>
      __b = _GLIBCXX_MOVE(__tmp);
 8001f42:	4669      	mov	r1, sp
 8001f44:	4620      	mov	r0, r4
 8001f46:	f002 fac7 	bl	80044d8 <_ZN11LoRa_packetaSEOS_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001f4a:	4668      	mov	r0, sp
 8001f4c:	f002 fa51 	bl	80043f2 <_ZN11LoRa_packetD1Ev>
            if(i != 0)
 8001f50:	b105      	cbz	r5, 8001f54 <_ZN17LoRa_contact_data15sort_num_packetEv+0x48>
                --i;
 8001f52:	3d01      	subs	r5, #1
    for(unsigned int i = 0; (i < (reciev_packet_len - 1)) && (reciev_packet_len != 0);)
 8001f54:	f89a 3135 	ldrb.w	r3, [sl, #309]	; 0x135
 8001f58:	1e5a      	subs	r2, r3, #1
 8001f5a:	42aa      	cmp	r2, r5
 8001f5c:	d917      	bls.n	8001f8e <_ZN17LoRa_contact_data15sort_num_packetEv+0x82>
 8001f5e:	b1b3      	cbz	r3, 8001f8e <_ZN17LoRa_contact_data15sort_num_packetEv+0x82>
 8001f60:	00ec      	lsls	r4, r5, #3
 8001f62:	eb09 0604 	add.w	r6, r9, r4
        number1 = packet_analyzer.get_packet_number(reciev_packet_[i]);
 8001f66:	4631      	mov	r1, r6
 8001f68:	4640      	mov	r0, r8
 8001f6a:	f003 fc1c 	bl	80057a6 <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>
 8001f6e:	4607      	mov	r7, r0
        number2 = packet_analyzer.get_packet_number(reciev_packet_[i+1]);
 8001f70:	f105 0b01 	add.w	fp, r5, #1
 8001f74:	3408      	adds	r4, #8
 8001f76:	444c      	add	r4, r9
 8001f78:	4621      	mov	r1, r4
 8001f7a:	4640      	mov	r0, r8
 8001f7c:	f003 fc13 	bl	80057a6 <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>
        if(number1 == 0) {
 8001f80:	2f00      	cmp	r7, #0
 8001f82:	d1cf      	bne.n	8001f24 <_ZN17LoRa_contact_data15sort_num_packetEv+0x18>
            if(0xFF00 <= number2)
 8001f84:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 8001f88:	d2d3      	bcs.n	8001f32 <_ZN17LoRa_contact_data15sort_num_packetEv+0x26>
            ++i;
 8001f8a:	465d      	mov	r5, fp
 8001f8c:	e7e2      	b.n	8001f54 <_ZN17LoRa_contact_data15sort_num_packetEv+0x48>
    }
}
 8001f8e:	b003      	add	sp, #12
 8001f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f94:	20002378 	.word	0x20002378

08001f98 <_ZN17LoRa_contact_data15init_disconnectER13Stage_control>:
    //   (стадия stade_communication_ = SC_DOWNTIME)
    // - Отправить пакет о разрыве соединения с ошибкой
    //   (стадия stade_communication_ = SC_DOWNTIME)
    // ----- ---- -----
    // Проверка состояние модуля
    switch (module_state_) {
 8001f98:	7c83      	ldrb	r3, [r0, #18]
        //   _стадия stade_communication_ = SC_DOWNTIME|SC_COMPLETE;  // (!) -----
        //   contact_complete();
        break;
    }
    default:
        error = 131;
 8001f9a:	2b01      	cmp	r3, #1
        break;
    }
    return error;
}
 8001f9c:	bf0c      	ite	eq
 8001f9e:	2000      	moveq	r0, #0
 8001fa0:	2083      	movne	r0, #131	; 0x83
 8001fa2:	4770      	bx	lr

08001fa4 <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control>:
        error = 210;
        break;
    }
    return error;
}
uint32_t LoRa_contact_data::recip_connection_queue_check(Stage_control& use_stage) {
 8001fa4:	4603      	mov	r3, r0
    //   (стадия _connection = C_AWAITING_REQUEST)
    // - Сброс ожидания определённого модуля => отправить пакет сброса
    //   (стадия _connection = C_AWAITING_REQUEST)
    // ----- ---- -----
    // Проверка состояние модуля
    switch (module_state_) {
 8001fa6:	7c82      	ldrb	r2, [r0, #18]
 8001fa8:	2a01      	cmp	r2, #1
 8001faa:	d113      	bne.n	8001fd4 <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control+0x30>
			//     create_reset_wait_packet();
			//     set_LoRa_mode_send();
        }
#endif
        else {
            connect_adr_ = wait_adr_;
 8001fac:	68c2      	ldr	r2, [r0, #12]
 8001fae:	6082      	str	r2, [r0, #8]
        }
        if(!use_past_stage)
 8001fb0:	7f42      	ldrb	r2, [r0, #29]
 8001fb2:	b94a      	cbnz	r2, 8001fc8 <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control+0x24>
            past_stage_ = current_stage_;
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	f852 0f13 	ldr.w	r0, [r2, #19]!
 8001fba:	6198      	str	r0, [r3, #24]
 8001fbc:	7912      	ldrb	r2, [r2, #4]
 8001fbe:	771a      	strb	r2, [r3, #28]
        else
            current_stage_ = past_stage_;
        current_stage_.connection = C_AWAITING_REQUEST;
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	755a      	strb	r2, [r3, #21]
    uint32_t error = 0;
 8001fc4:	2000      	movs	r0, #0
        break;
 8001fc6:	4770      	bx	lr
            current_stage_ = past_stage_;
 8001fc8:	6980      	ldr	r0, [r0, #24]
 8001fca:	f8c3 0013 	str.w	r0, [r3, #19]
 8001fce:	7f1a      	ldrb	r2, [r3, #28]
 8001fd0:	75da      	strb	r2, [r3, #23]
 8001fd2:	e7f5      	b.n	8001fc0 <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control+0x1c>
    }
    default:
        error = 211;
 8001fd4:	20d3      	movs	r0, #211	; 0xd3
        break;
    }
    return error;
}
 8001fd6:	4770      	bx	lr

08001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>:
    current_stage_.stade_communication = SC_COMPLETE;
    past_stage_ = current_stage_;
    start_connect_ = false;
    set_LoRa_mode_sleep();
}
void LoRa_contact_data::set_LoRa_mode_receive() {
 8001fd8:	b510      	push	{r4, lr}
 8001fda:	b084      	sub	sp, #16
    module_state_ = MS_LoRa_RECIEVE;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	7483      	strb	r3, [r0, #18]
#if defined ( ESP32 )
    lora_.mode_sleep();
    // delay(1);
    lora_.receiver_packet(1, 0);
#else
    LoRa.mode_sleep();
 8001fe0:	4c08      	ldr	r4, [pc, #32]	; (8002004 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv+0x2c>)
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	f001 fbd6 	bl	8003794 <_ZN10LoRa_class10mode_sleepEv>
    //HAL_Delay(1);
    LoRa.receiver_packet(1, 0);
 8001fe8:	2300      	movs	r3, #0
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	4621      	mov	r1, r4
 8001ff2:	a802      	add	r0, sp, #8
 8001ff4:	f001 ff4c 	bl	8003e90 <_ZN10LoRa_class15receiver_packetEhmbb>
 8001ff8:	a802      	add	r0, sp, #8
 8001ffa:	f002 f9fa 	bl	80043f2 <_ZN11LoRa_packetD1Ev>
#endif
}
 8001ffe:	b004      	add	sp, #16
 8002000:	bd10      	pop	{r4, pc}
 8002002:	bf00      	nop
 8002004:	20000360 	.word	0x20000360

08002008 <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>:
bool LoRa_contact_data::wait_recipient(LoRa_address address) {
 8002008:	b500      	push	{lr}
 800200a:	b083      	sub	sp, #12
 800200c:	4603      	mov	r3, r0
 800200e:	9101      	str	r1, [sp, #4]
    wait_adr_ = address;
 8002010:	60c1      	str	r1, [r0, #12]
    current_stage_.type_communication = TC_RECIPIENT;
 8002012:	2201      	movs	r2, #1
 8002014:	74c2      	strb	r2, [r0, #19]
    current_stage_.stade_communication = SC_CONNECTION;
 8002016:	7502      	strb	r2, [r0, #20]
    current_stage_.connection = C_AWAITING_REQUEST;
 8002018:	2203      	movs	r2, #3
 800201a:	7542      	strb	r2, [r0, #21]
    past_stage_ = current_stage_;
 800201c:	4602      	mov	r2, r0
 800201e:	f852 0f13 	ldr.w	r0, [r2, #19]!
 8002022:	6198      	str	r0, [r3, #24]
 8002024:	7912      	ldrb	r2, [r2, #4]
 8002026:	771a      	strb	r2, [r3, #28]
    set_LoRa_mode_receive();
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ffd5 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
}
 800202e:	2000      	movs	r0, #0
 8002030:	b003      	add	sp, #12
 8002032:	f85d fb04 	ldr.w	pc, [sp], #4

08002036 <_ZN17LoRa_contact_data17broadcast_receiveE12LoRa_address>:
uint16_t LoRa_contact_data::broadcast_receive(LoRa_address address) {
 8002036:	b510      	push	{r4, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	4604      	mov	r4, r0
 800203c:	9101      	str	r1, [sp, #4]
    clear();
 800203e:	f7ff fc22 	bl	8001886 <_ZN17LoRa_contact_data5clearEv>
    wait_adr_ = address;
 8002042:	9b01      	ldr	r3, [sp, #4]
 8002044:	60e3      	str	r3, [r4, #12]
    current_stage_.type_communication = TC_BROADCAST;
 8002046:	2302      	movs	r3, #2
 8002048:	74e3      	strb	r3, [r4, #19]
    current_stage_.stade_communication = SC_WAITING;
 800204a:	2306      	movs	r3, #6
 800204c:	7523      	strb	r3, [r4, #20]
    past_stage_ = current_stage_;
 800204e:	4623      	mov	r3, r4
 8002050:	f853 0f13 	ldr.w	r0, [r3, #19]!
 8002054:	61a0      	str	r0, [r4, #24]
 8002056:	791b      	ldrb	r3, [r3, #4]
 8002058:	7723      	strb	r3, [r4, #28]
    set_LoRa_mode_receive();
 800205a:	4620      	mov	r0, r4
 800205c:	f7ff ffbc 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
}
 8002060:	2000      	movs	r0, #0
 8002062:	b002      	add	sp, #8
 8002064:	bd10      	pop	{r4, pc}

08002066 <_ZN17LoRa_contact_data21broadcast_wait_packetEv>:
uint32_t LoRa_contact_data::broadcast_wait_packet() {
 8002066:	b510      	push	{r4, lr}
 8002068:	4604      	mov	r4, r0
    switch (module_state_) {
 800206a:	7c83      	ldrb	r3, [r0, #18]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d004      	beq.n	800207a <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x14>
 8002070:	2b02      	cmp	r3, #2
 8002072:	d006      	beq.n	8002082 <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x1c>
        error = 310;
 8002074:	f44f 709b 	mov.w	r0, #310	; 0x136
    return error;
 8002078:	e002      	b.n	8002080 <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x1a>
        set_LoRa_mode_receive();
 800207a:	f7ff ffad 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 800207e:	2000      	movs	r0, #0
}
 8002080:	bd10      	pop	{r4, pc}
        if(!packet_dont_correct(true, true)) {
 8002082:	2201      	movs	r2, #1
 8002084:	4611      	mov	r1, r2
 8002086:	f7ff fe61 	bl	8001d4c <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 800208a:	b198      	cbz	r0, 80020b4 <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x4e>
			if(reciev_packet_len == CONTACT_DATA_MAX_PACKET) {
 800208c:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
			reciev_packet_[reciev_packet_len++] = last_receive_packet_;
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	f884 2135 	strb.w	r2, [r4, #309]	; 0x135
 8002096:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 800209a:	f104 0120 	add.w	r1, r4, #32
 800209e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80020a2:	f002 f9f7 	bl	8004494 <_ZN11LoRa_packetaSERKS_>
            current_stage_.stade_communication = SC_PACKET_ACCEPTED;
 80020a6:	2307      	movs	r3, #7
 80020a8:	7523      	strb	r3, [r4, #20]
            set_LoRa_mode_receive();
 80020aa:	4620      	mov	r0, r4
 80020ac:	f7ff ff94 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 80020b0:	2000      	movs	r0, #0
 80020b2:	e7e5      	b.n	8002080 <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x1a>
            set_LoRa_mode_receive();
 80020b4:	4620      	mov	r0, r4
 80020b6:	f7ff ff8f 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 80020ba:	2000      	movs	r0, #0
 80020bc:	e7e0      	b.n	8002080 <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x1a>
	...

080020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>:
void LoRa_contact_data::set_LoRa_mode_send(bool first) {
 80020c0:	b570      	push	{r4, r5, r6, lr}
 80020c2:	4604      	mov	r4, r0
 80020c4:	460d      	mov	r5, r1
    module_state_ = MS_LoRa_SEND;
 80020c6:	2301      	movs	r3, #1
 80020c8:	7483      	strb	r3, [r0, #18]
#if defined ( ESP32 )
    time_last_packet_ = millis();
#else
    time_last_packet_ = HAL_GetTick();
 80020ca:	f005 fd0f 	bl	8007aec <HAL_GetTick>
 80020ce:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
#endif
    if(first)
 80020d2:	b10d      	cbz	r5, 80020d8 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x18>
        time_first_packet_ = time_last_packet_;
 80020d4:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c

                                                            #if defined ( ALL_SAVE_PACKET )
                                                            all_packet.push_back(pack(last_send_packet_.get_data(), true));
                                                            #endif
#else
    LoRa.mode_sleep();
 80020d8:	4d0b      	ldr	r5, [pc, #44]	; (8002108 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x48>)
 80020da:	4628      	mov	r0, r5
 80020dc:	f001 fb5a 	bl	8003794 <_ZN10LoRa_class10mode_sleepEv>
    //HAL_Delay(3);
    LoRa.mode_FSTX();
 80020e0:	4628      	mov	r0, r5
 80020e2:	f001 fb7d 	bl	80037e0 <_ZN10LoRa_class9mode_FSTXEv>
    //HAL_Delay(3);
    LoRa.sender_packet(&last_send_packet_[0], last_send_packet_.get_len(), false);
 80020e6:	3428      	adds	r4, #40	; 0x28
 80020e8:	2100      	movs	r1, #0
 80020ea:	4620      	mov	r0, r4
 80020ec:	f002 f9ca 	bl	8004484 <_ZN11LoRa_packetixEi>
 80020f0:	4606      	mov	r6, r0
 80020f2:	4620      	mov	r0, r4
 80020f4:	f002 f9be 	bl	8004474 <_ZNK11LoRa_packet7get_lenEv>
 80020f8:	2300      	movs	r3, #0
 80020fa:	4602      	mov	r2, r0
 80020fc:	4631      	mov	r1, r6
 80020fe:	4628      	mov	r0, r5
 8002100:	f002 f8c0 	bl	8004284 <_ZN10LoRa_class13sender_packetEPhhm>
#endif
}
 8002104:	bd70      	pop	{r4, r5, r6, pc}
 8002106:	bf00      	nop
 8002108:	20000360 	.word	0x20000360

0800210c <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control>:
    switch (module_state_) {
 800210c:	7c83      	ldrb	r3, [r0, #18]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d121      	bne.n	8002156 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x4a>
uint32_t LoRa_contact_data::init_exchange_boardcast(Stage_control& use_stage) {
 8002112:	b510      	push	{r4, lr}
 8002114:	4604      	mov	r4, r0
        for(unsigned int i = 0; i < send_flag_len; ++i)
 8002116:	f890 2136 	ldrb.w	r2, [r0, #310]	; 0x136
 800211a:	b1f2      	cbz	r2, 800215a <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x4e>
            if(send_flag_[i] == true) {
 800211c:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8002120:	b953      	cbnz	r3, 8002138 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x2c>
 8002122:	f100 03ac 	add.w	r3, r0, #172	; 0xac
 8002126:	f100 01ab 	add.w	r1, r0, #171	; 0xab
 800212a:	4411      	add	r1, r2
        for(unsigned int i = 0; i < send_flag_len; ++i)
 800212c:	428b      	cmp	r3, r1
 800212e:	d014      	beq.n	800215a <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x4e>
            if(send_flag_[i] == true) {
 8002130:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002134:	2a00      	cmp	r2, #0
 8002136:	d0f9      	beq.n	800212c <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x20>
            create_data_packet();
 8002138:	4620      	mov	r0, r4
 800213a:	f7ff fce3 	bl	8001b04 <_ZN17LoRa_contact_data18create_data_packetEv>
            set_LoRa_mode_send();
 800213e:	2100      	movs	r1, #0
 8002140:	4620      	mov	r0, r4
 8002142:	f7ff ffbd 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 8002146:	2000      	movs	r0, #0
 8002148:	e01a      	b.n	8002180 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x74>
                current_stage_ = past_stage_;
 800214a:	69a0      	ldr	r0, [r4, #24]
 800214c:	f8c4 0013 	str.w	r0, [r4, #19]
 8002150:	7f23      	ldrb	r3, [r4, #28]
 8002152:	75e3      	strb	r3, [r4, #23]
 8002154:	e00a      	b.n	800216c <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x60>
        error = 121;
 8002156:	2079      	movs	r0, #121	; 0x79
}
 8002158:	4770      	bx	lr
            if(!use_past_stage)
 800215a:	7f63      	ldrb	r3, [r4, #29]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1f4      	bne.n	800214a <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x3e>
                past_stage_ = current_stage_;
 8002160:	4623      	mov	r3, r4
 8002162:	f853 0f13 	ldr.w	r0, [r3, #19]!
 8002166:	61a0      	str	r0, [r4, #24]
 8002168:	791b      	ldrb	r3, [r3, #4]
 800216a:	7723      	strb	r3, [r4, #28]
            current_stage_.exchange = E_WAITING_CONFIRMATION;
 800216c:	2301      	movs	r3, #1
 800216e:	75a3      	strb	r3, [r4, #22]
            create_amt_packet();
 8002170:	4620      	mov	r0, r4
 8002172:	f7ff fcf7 	bl	8001b64 <_ZN17LoRa_contact_data17create_amt_packetEv>
            set_LoRa_mode_send();
 8002176:	2100      	movs	r1, #0
 8002178:	4620      	mov	r0, r4
 800217a:	f7ff ffa1 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 800217e:	2000      	movs	r0, #0
}
 8002180:	bd10      	pop	{r4, pc}
	...

08002184 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>:
void LoRa_contact_data::set_LoRa_mode_sleep() {
 8002184:	b508      	push	{r3, lr}
    module_state_ = MS_LoRa_SLEEP;
 8002186:	2300      	movs	r3, #0
 8002188:	7483      	strb	r3, [r0, #18]
    // lora mode
#if defined ( ESP32 )
    lora_.mode_sleep();
#else
    LoRa.mode_sleep();
 800218a:	4802      	ldr	r0, [pc, #8]	; (8002194 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv+0x10>)
 800218c:	f001 fb02 	bl	8003794 <_ZN10LoRa_class10mode_sleepEv>
#endif
}
 8002190:	bd08      	pop	{r3, pc}
 8002192:	bf00      	nop
 8002194:	20000360 	.word	0x20000360

08002198 <_ZN17LoRa_contact_data11end_contactEv>:
bool LoRa_contact_data::end_contact() {
 8002198:	b510      	push	{r4, lr}
 800219a:	4604      	mov	r4, r0
    set_LoRa_mode_sleep();
 800219c:	f7ff fff2 	bl	8002184 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>
    if((current_stage_.stade_communication != SC_DOWNTIME) &&
 80021a0:	7d23      	ldrb	r3, [r4, #20]
 80021a2:	b17b      	cbz	r3, 80021c4 <_ZN17LoRa_contact_data11end_contactEv+0x2c>
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d102      	bne.n	80021ae <_ZN17LoRa_contact_data11end_contactEv+0x16>
      ((current_stage_.stade_communication != SC_CONNECTION) || (current_stage_.type_communication != TC_RECIPIENT))) {
 80021a8:	7ce3      	ldrb	r3, [r4, #19]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d00a      	beq.n	80021c4 <_ZN17LoRa_contact_data11end_contactEv+0x2c>
        clear();
 80021ae:	4620      	mov	r0, r4
 80021b0:	f7ff fb69 	bl	8001886 <_ZN17LoRa_contact_data5clearEv>
        past_stage_ = current_stage_;
 80021b4:	4623      	mov	r3, r4
 80021b6:	f853 0f13 	ldr.w	r0, [r3, #19]!
 80021ba:	61a0      	str	r0, [r4, #24]
 80021bc:	791b      	ldrb	r3, [r3, #4]
 80021be:	7723      	strb	r3, [r4, #28]
        return true;
 80021c0:	2001      	movs	r0, #1
 80021c2:	e006      	b.n	80021d2 <_ZN17LoRa_contact_data11end_contactEv+0x3a>
    past_stage_ = current_stage_;
 80021c4:	4623      	mov	r3, r4
 80021c6:	f853 0f13 	ldr.w	r0, [r3, #19]!
 80021ca:	61a0      	str	r0, [r4, #24]
 80021cc:	791b      	ldrb	r3, [r3, #4]
 80021ce:	7723      	strb	r3, [r4, #28]
    return false;
 80021d0:	2000      	movs	r0, #0
}
 80021d2:	bd10      	pop	{r4, pc}

080021d4 <_ZN17LoRa_contact_data16contact_completeEv>:
void LoRa_contact_data::contact_complete() {
 80021d4:	b508      	push	{r3, lr}
 80021d6:	4603      	mov	r3, r0
    current_stage_.stade_communication = SC_COMPLETE;
 80021d8:	2204      	movs	r2, #4
 80021da:	7502      	strb	r2, [r0, #20]
    past_stage_ = current_stage_;
 80021dc:	4602      	mov	r2, r0
 80021de:	f852 0f13 	ldr.w	r0, [r2, #19]!
 80021e2:	6198      	str	r0, [r3, #24]
 80021e4:	7912      	ldrb	r2, [r2, #4]
 80021e6:	771a      	strb	r2, [r3, #28]
    start_connect_ = false;
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
    set_LoRa_mode_sleep();
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff ffc8 	bl	8002184 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>
}
 80021f4:	bd08      	pop	{r3, pc}

080021f6 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control>:
    switch (use_stage.disconnect) {
 80021f6:	790b      	ldrb	r3, [r1, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d14e      	bne.n	800229a <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0xa4>
uint32_t LoRa_contact_data::recip_disconnect(Stage_control& use_stage) {
 80021fc:	b530      	push	{r4, r5, lr}
 80021fe:	b083      	sub	sp, #12
 8002200:	4604      	mov	r4, r0
        switch (module_state_) {
 8002202:	7c83      	ldrb	r3, [r0, #18]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d003      	beq.n	8002210 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x1a>
 8002208:	2b02      	cmp	r3, #2
 800220a:	d006      	beq.n	800221a <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x24>
            error = 231;
 800220c:	20e7      	movs	r0, #231	; 0xe7
 800220e:	e002      	b.n	8002216 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x20>
            set_LoRa_mode_receive();
 8002210:	f7ff fee2 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002214:	2000      	movs	r0, #0
}
 8002216:	b003      	add	sp, #12
 8002218:	bd30      	pop	{r4, r5, pc}
            if(!packet_dont_correct()) {
 800221a:	2200      	movs	r2, #0
 800221c:	4611      	mov	r1, r2
 800221e:	f7ff fd95 	bl	8001d4c <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002222:	bb38      	cbnz	r0, 8002274 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x7e>
                if(HAL_GetTick() - time_last_packet_ < time_constraints_.R_disconnect)
 8002224:	f005 fc62 	bl	8007aec <HAL_GetTick>
 8002228:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 800222c:	1ac0      	subs	r0, r0, r3
 800222e:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
 8002232:	4298      	cmp	r0, r3
 8002234:	d313      	bcc.n	800225e <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x68>
                    if(!use_past_stage)
 8002236:	7f63      	ldrb	r3, [r4, #29]
 8002238:	b9b3      	cbnz	r3, 8002268 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x72>
                        past_stage_ = current_stage_;
 800223a:	4623      	mov	r3, r4
 800223c:	f853 0f13 	ldr.w	r0, [r3, #19]!
 8002240:	61a0      	str	r0, [r4, #24]
 8002242:	791b      	ldrb	r3, [r3, #4]
 8002244:	7723      	strb	r3, [r4, #28]
                    current_stage_.stade_communication = SC_DOWNTIME;
 8002246:	2500      	movs	r5, #0
 8002248:	7525      	strb	r5, [r4, #20]
                    create_disconnet_packet(true);
 800224a:	2101      	movs	r1, #1
 800224c:	4620      	mov	r0, r4
 800224e:	f7ff fd4f 	bl	8001cf0 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 8002252:	2101      	movs	r1, #1
 8002254:	4620      	mov	r0, r4
 8002256:	f7ff ff33 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 800225a:	4628      	mov	r0, r5
 800225c:	e7db      	b.n	8002216 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x20>
                    set_LoRa_mode_receive();
 800225e:	4620      	mov	r0, r4
 8002260:	f7ff feba 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002264:	2000      	movs	r0, #0
 8002266:	e7d6      	b.n	8002216 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x20>
                        current_stage_ = past_stage_;
 8002268:	69a0      	ldr	r0, [r4, #24]
 800226a:	f8c4 0013 	str.w	r0, [r4, #19]
 800226e:	7f23      	ldrb	r3, [r4, #28]
 8002270:	75e3      	strb	r3, [r4, #23]
 8002272:	e7e8      	b.n	8002246 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x50>
                if(check_packet_type(Packet_Type::CONNECTION, {0x08})) {
 8002274:	aa02      	add	r2, sp, #8
 8002276:	2308      	movs	r3, #8
 8002278:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800227c:	2100      	movs	r1, #0
 800227e:	4620      	mov	r0, r4
 8002280:	f7ff fdb8 	bl	8001df4 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002284:	b908      	cbnz	r0, 800228a <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x94>
    uint32_t error = 0;
 8002286:	2000      	movs	r0, #0
    return error;
 8002288:	e7c5      	b.n	8002216 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x20>
                    sort_num_packet();
 800228a:	4620      	mov	r0, r4
 800228c:	f7ff fe3e 	bl	8001f0c <_ZN17LoRa_contact_data15sort_num_packetEv>
                    contact_complete();
 8002290:	4620      	mov	r0, r4
 8002292:	f7ff ff9f 	bl	80021d4 <_ZN17LoRa_contact_data16contact_completeEv>
    uint32_t error = 0;
 8002296:	2000      	movs	r0, #0
 8002298:	e7bd      	b.n	8002216 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x20>
        error = 230;
 800229a:	20e6      	movs	r0, #230	; 0xe6
}
 800229c:	4770      	bx	lr

0800229e <_ZN17LoRa_contact_data14broadcast_sendEb>:
uint16_t LoRa_contact_data::broadcast_send(bool reply) {
 800229e:	b538      	push	{r3, r4, r5, lr}
    if(send_packet_len == 0)
 80022a0:	f890 3134 	ldrb.w	r3, [r0, #308]	; 0x134
 80022a4:	b90b      	cbnz	r3, 80022aa <_ZN17LoRa_contact_data14broadcast_sendEb+0xc>
        return 1;
 80022a6:	2001      	movs	r0, #1
}
 80022a8:	bd38      	pop	{r3, r4, r5, pc}
 80022aa:	460d      	mov	r5, r1
 80022ac:	4604      	mov	r4, r0
    set_LoRa_mode_sleep();
 80022ae:	f7ff ff69 	bl	8002184 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>
    current_stage_.type_communication = TC_BROADCAST;
 80022b2:	2302      	movs	r3, #2
 80022b4:	74e3      	strb	r3, [r4, #19]
    if(reply)
 80022b6:	b185      	cbz	r5, 80022da <_ZN17LoRa_contact_data14broadcast_sendEb+0x3c>
        current_stage_.stade_communication = SC_REPLY_BROADCAST;
 80022b8:	2308      	movs	r3, #8
 80022ba:	7523      	strb	r3, [r4, #20]
    past_stage_ = current_stage_;
 80022bc:	4623      	mov	r3, r4
 80022be:	f853 0f13 	ldr.w	r0, [r3, #19]!
 80022c2:	61a0      	str	r0, [r4, #24]
 80022c4:	791b      	ldrb	r3, [r3, #4]
 80022c6:	7723      	strb	r3, [r4, #28]
    create_data_packet();
 80022c8:	4620      	mov	r0, r4
 80022ca:	f7ff fc1b 	bl	8001b04 <_ZN17LoRa_contact_data18create_data_packetEv>
    set_LoRa_mode_send();
 80022ce:	2100      	movs	r1, #0
 80022d0:	4620      	mov	r0, r4
 80022d2:	f7ff fef5 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    return 0;
 80022d6:	2000      	movs	r0, #0
 80022d8:	e7e6      	b.n	80022a8 <_ZN17LoRa_contact_data14broadcast_sendEb+0xa>
        current_stage_.stade_communication = SC_BROADCASTING;
 80022da:	2305      	movs	r3, #5
 80022dc:	7523      	strb	r3, [r4, #20]
 80022de:	e7ed      	b.n	80022bc <_ZN17LoRa_contact_data14broadcast_sendEb+0x1e>

080022e0 <_ZN17LoRa_contact_data21broadcast_send_packetEv>:
    switch (module_state_) {
 80022e0:	7c83      	ldrb	r3, [r0, #18]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d125      	bne.n	8002332 <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x52>
uint32_t LoRa_contact_data::broadcast_send_packet() {
 80022e6:	b510      	push	{r4, lr}
 80022e8:	4604      	mov	r4, r0
        for(unsigned int i = 0; i < send_flag_len; ++i)
 80022ea:	f890 2136 	ldrb.w	r2, [r0, #310]	; 0x136
 80022ee:	b31a      	cbz	r2, 8002338 <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x58>
            if(send_flag_[i] == true) {
 80022f0:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 80022f4:	b953      	cbnz	r3, 800230c <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x2c>
 80022f6:	f100 03ac 	add.w	r3, r0, #172	; 0xac
 80022fa:	f100 01ab 	add.w	r1, r0, #171	; 0xab
 80022fe:	4411      	add	r1, r2
        for(unsigned int i = 0; i < send_flag_len; ++i)
 8002300:	4299      	cmp	r1, r3
 8002302:	d019      	beq.n	8002338 <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x58>
            if(send_flag_[i] == true) {
 8002304:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002308:	2a00      	cmp	r2, #0
 800230a:	d0f9      	beq.n	8002300 <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x20>
            create_data_packet();
 800230c:	4620      	mov	r0, r4
 800230e:	f7ff fbf9 	bl	8001b04 <_ZN17LoRa_contact_data18create_data_packetEv>
            set_LoRa_mode_send();
 8002312:	2100      	movs	r1, #0
 8002314:	4620      	mov	r0, r4
 8002316:	f7ff fed3 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 800231a:	2000      	movs	r0, #0
 800231c:	e01e      	b.n	800235c <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x7c>
                current_stage_.stade_communication = SC_COMPLETE;
 800231e:	2304      	movs	r3, #4
 8002320:	7523      	strb	r3, [r4, #20]
                set_LoRa_mode_sleep();
 8002322:	4620      	mov	r0, r4
 8002324:	f7ff ff2e 	bl	8002184 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>
    uint32_t error = 0;
 8002328:	2000      	movs	r0, #0
 800232a:	e017      	b.n	800235c <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x7c>
                    current_stage_.stade_communication = SC_PACKET_ACCEPTED;
 800232c:	2307      	movs	r3, #7
 800232e:	7523      	strb	r3, [r4, #20]
 8002330:	e010      	b.n	8002354 <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x74>
        error = 320;
 8002332:	f44f 70a0 	mov.w	r0, #320	; 0x140
}
 8002336:	4770      	bx	lr
            send_packet_len = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
			send_flag_len = 0;
 800233e:	f884 3136 	strb.w	r3, [r4, #310]	; 0x136
            if(current_stage_.stade_communication == SC_BROADCASTING) {
 8002342:	7d23      	ldrb	r3, [r4, #20]
 8002344:	2b05      	cmp	r3, #5
 8002346:	d0ea      	beq.n	800231e <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x3e>
                if(reciev_packet_len == 0)
 8002348:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1ed      	bne.n	800232c <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x4c>
                    current_stage_.stade_communication = SC_WAITING;
 8002350:	2306      	movs	r3, #6
 8002352:	7523      	strb	r3, [r4, #20]
                set_LoRa_mode_receive();
 8002354:	4620      	mov	r0, r4
 8002356:	f7ff fe3f 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 800235a:	2000      	movs	r0, #0
}
 800235c:	bd10      	pop	{r4, pc}
	...

08002360 <_ZN17LoRa_contact_data19work_contact_systemEv>:
uint32_t LoRa_contact_data::work_contact_system() {
 8002360:	b510      	push	{r4, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	4604      	mov	r4, r0
    if(((in_processing_) || (!lora_init_) || (!lora_begin_) || (current_stage_.stade_communication == SC_DOWNTIME) || (current_stage_.stade_communication == SC_COMPLETE)) && !use_past_stage)
 8002366:	f890 313a 	ldrb.w	r3, [r0, #314]	; 0x13a
 800236a:	b93b      	cbnz	r3, 800237c <_ZN17LoRa_contact_data19work_contact_systemEv+0x1c>
 800236c:	7803      	ldrb	r3, [r0, #0]
 800236e:	b12b      	cbz	r3, 800237c <_ZN17LoRa_contact_data19work_contact_systemEv+0x1c>
 8002370:	7843      	ldrb	r3, [r0, #1]
 8002372:	b11b      	cbz	r3, 800237c <_ZN17LoRa_contact_data19work_contact_systemEv+0x1c>
 8002374:	7d03      	ldrb	r3, [r0, #20]
 8002376:	f013 0ffb 	tst.w	r3, #251	; 0xfb
 800237a:	d110      	bne.n	800239e <_ZN17LoRa_contact_data19work_contact_systemEv+0x3e>
 800237c:	7f63      	ldrb	r3, [r4, #29]
 800237e:	b15b      	cbz	r3, 8002398 <_ZN17LoRa_contact_data19work_contact_systemEv+0x38>
        use_stage = &past_stage_;
 8002380:	f104 0118 	add.w	r1, r4, #24
    switch (use_stage->type_communication) {
 8002384:	7e23      	ldrb	r3, [r4, #24]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d061      	beq.n	800244e <_ZN17LoRa_contact_data19work_contact_systemEv+0xee>
 800238a:	2b00      	cmp	r3, #0
 800238c:	d04a      	beq.n	8002424 <_ZN17LoRa_contact_data19work_contact_systemEv+0xc4>
 800238e:	2b02      	cmp	r3, #2
 8002390:	d03a      	beq.n	8002408 <_ZN17LoRa_contact_data19work_contact_systemEv+0xa8>
        error = 400;
 8002392:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002396:	e079      	b.n	800248c <_ZN17LoRa_contact_data19work_contact_systemEv+0x12c>
        return 0;
 8002398:	2000      	movs	r0, #0
}
 800239a:	b004      	add	sp, #16
 800239c:	bd10      	pop	{r4, pc}
    if(!use_past_stage) {
 800239e:	7f43      	ldrb	r3, [r0, #29]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1ed      	bne.n	8002380 <_ZN17LoRa_contact_data19work_contact_systemEv+0x20>
        in_processing_ = true;
 80023a4:	2301      	movs	r3, #1
 80023a6:	f880 313a 	strb.w	r3, [r0, #314]	; 0x13a
        if(module_state_ == MS_LoRa_RECIEVE) {
 80023aa:	7c83      	ldrb	r3, [r0, #18]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d00b      	beq.n	80023c8 <_ZN17LoRa_contact_data19work_contact_systemEv+0x68>
        use_stage = &current_stage_;
 80023b0:	f100 0113 	add.w	r1, r0, #19
    switch (use_stage->type_communication) {
 80023b4:	7cc3      	ldrb	r3, [r0, #19]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d049      	beq.n	800244e <_ZN17LoRa_contact_data19work_contact_systemEv+0xee>
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d032      	beq.n	8002424 <_ZN17LoRa_contact_data19work_contact_systemEv+0xc4>
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d022      	beq.n	8002408 <_ZN17LoRa_contact_data19work_contact_systemEv+0xa8>
        error = 400;
 80023c2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80023c6:	e05c      	b.n	8002482 <_ZN17LoRa_contact_data19work_contact_systemEv+0x122>
            class LoRa_packet read_packet = LoRa.receiver_packet(0, 0);
 80023c8:	2200      	movs	r2, #0
 80023ca:	9201      	str	r2, [sp, #4]
 80023cc:	9200      	str	r2, [sp, #0]
 80023ce:	4613      	mov	r3, r2
 80023d0:	4936      	ldr	r1, [pc, #216]	; (80024ac <_ZN17LoRa_contact_data19work_contact_systemEv+0x14c>)
 80023d2:	a802      	add	r0, sp, #8
 80023d4:	f001 fd5c 	bl	8003e90 <_ZN10LoRa_class15receiver_packetEhmbb>
            if(!((read_packet.get_len() < PACKET_HEADER_SIZE) || (read_packet.get_crc_error()))) {
 80023d8:	a802      	add	r0, sp, #8
 80023da:	f002 f84b 	bl	8004474 <_ZNK11LoRa_packet7get_lenEv>
 80023de:	2808      	cmp	r0, #8
 80023e0:	d903      	bls.n	80023ea <_ZN17LoRa_contact_data19work_contact_systemEv+0x8a>
 80023e2:	a802      	add	r0, sp, #8
 80023e4:	f002 f84c 	bl	8004480 <_ZNK11LoRa_packet13get_crc_errorEv>
 80023e8:	b1b0      	cbz	r0, 8002418 <_ZN17LoRa_contact_data19work_contact_systemEv+0xb8>
                last_receive_packet_.clear_packet();
 80023ea:	f104 0020 	add.w	r0, r4, #32
 80023ee:	f002 f834 	bl	800445a <_ZN11LoRa_packet12clear_packetEv>
            class LoRa_packet read_packet = LoRa.receiver_packet(0, 0);
 80023f2:	a802      	add	r0, sp, #8
 80023f4:	f001 fffd 	bl	80043f2 <_ZN11LoRa_packetD1Ev>
        use_stage = &current_stage_;
 80023f8:	f104 0113 	add.w	r1, r4, #19
    switch (use_stage->type_communication) {
 80023fc:	7ce3      	ldrb	r3, [r4, #19]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d025      	beq.n	800244e <_ZN17LoRa_contact_data19work_contact_systemEv+0xee>
 8002402:	b17b      	cbz	r3, 8002424 <_ZN17LoRa_contact_data19work_contact_systemEv+0xc4>
 8002404:	2b02      	cmp	r3, #2
 8002406:	d14b      	bne.n	80024a0 <_ZN17LoRa_contact_data19work_contact_systemEv+0x140>
        switch (use_stage->stade_communication) {
 8002408:	784b      	ldrb	r3, [r1, #1]
 800240a:	3b05      	subs	r3, #5
 800240c:	2b03      	cmp	r3, #3
 800240e:	d84a      	bhi.n	80024a6 <_ZN17LoRa_contact_data19work_contact_systemEv+0x146>
 8002410:	e8df f003 	tbb	[pc, r3]
 8002414:	42323242 	.word	0x42323242
                last_receive_packet_ = read_packet;
 8002418:	a902      	add	r1, sp, #8
 800241a:	f104 0020 	add.w	r0, r4, #32
 800241e:	f002 f839 	bl	8004494 <_ZN11LoRa_packetaSERKS_>
 8002422:	e7e6      	b.n	80023f2 <_ZN17LoRa_contact_data19work_contact_systemEv+0x92>
        switch (use_stage->stade_communication) {
 8002424:	784b      	ldrb	r3, [r1, #1]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d009      	beq.n	800243e <_ZN17LoRa_contact_data19work_contact_systemEv+0xde>
 800242a:	2b03      	cmp	r3, #3
 800242c:	d00b      	beq.n	8002446 <_ZN17LoRa_contact_data19work_contact_systemEv+0xe6>
 800242e:	2b01      	cmp	r3, #1
 8002430:	d001      	beq.n	8002436 <_ZN17LoRa_contact_data19work_contact_systemEv+0xd6>
            error = 100;
 8002432:	2064      	movs	r0, #100	; 0x64
 8002434:	e023      	b.n	800247e <_ZN17LoRa_contact_data19work_contact_systemEv+0x11e>
            error = init_connection(*use_stage);
 8002436:	4620      	mov	r0, r4
 8002438:	f000 f96e 	bl	8002718 <_ZN17LoRa_contact_data15init_connectionER13Stage_control>
            break;
 800243c:	e01f      	b.n	800247e <_ZN17LoRa_contact_data19work_contact_systemEv+0x11e>
            error = init_exchange(*use_stage);
 800243e:	4620      	mov	r0, r4
 8002440:	f000 fb12 	bl	8002a68 <_ZN17LoRa_contact_data13init_exchangeER13Stage_control>
            break;
 8002444:	e01b      	b.n	800247e <_ZN17LoRa_contact_data19work_contact_systemEv+0x11e>
            error = init_disconnect(*use_stage);
 8002446:	4620      	mov	r0, r4
 8002448:	f7ff fda6 	bl	8001f98 <_ZN17LoRa_contact_data15init_disconnectER13Stage_control>
            break;
 800244c:	e017      	b.n	800247e <_ZN17LoRa_contact_data19work_contact_systemEv+0x11e>
        switch (use_stage->stade_communication) {
 800244e:	784b      	ldrb	r3, [r1, #1]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d009      	beq.n	8002468 <_ZN17LoRa_contact_data19work_contact_systemEv+0x108>
 8002454:	2b03      	cmp	r3, #3
 8002456:	d00b      	beq.n	8002470 <_ZN17LoRa_contact_data19work_contact_systemEv+0x110>
 8002458:	2b01      	cmp	r3, #1
 800245a:	d001      	beq.n	8002460 <_ZN17LoRa_contact_data19work_contact_systemEv+0x100>
            error = 200;
 800245c:	20c8      	movs	r0, #200	; 0xc8
 800245e:	e00e      	b.n	800247e <_ZN17LoRa_contact_data19work_contact_systemEv+0x11e>
            error = recip_connection(*use_stage);
 8002460:	4620      	mov	r0, r4
 8002462:	f000 fbef 	bl	8002c44 <_ZN17LoRa_contact_data16recip_connectionER13Stage_control>
            break;
 8002466:	e00a      	b.n	800247e <_ZN17LoRa_contact_data19work_contact_systemEv+0x11e>
            error = recip_exchange(*use_stage);
 8002468:	4620      	mov	r0, r4
 800246a:	f000 fd20 	bl	8002eae <_ZN17LoRa_contact_data14recip_exchangeER13Stage_control>
            break;
 800246e:	e006      	b.n	800247e <_ZN17LoRa_contact_data19work_contact_systemEv+0x11e>
            error = recip_disconnect(*use_stage);
 8002470:	4620      	mov	r0, r4
 8002472:	f7ff fec0 	bl	80021f6 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control>
            break;
 8002476:	e002      	b.n	800247e <_ZN17LoRa_contact_data19work_contact_systemEv+0x11e>
            error = broadcast_wait_packet();
 8002478:	4620      	mov	r0, r4
 800247a:	f7ff fdf4 	bl	8002066 <_ZN17LoRa_contact_data21broadcast_wait_packetEv>
    if(!use_past_stage)
 800247e:	7f63      	ldrb	r3, [r4, #29]
 8002480:	b913      	cbnz	r3, 8002488 <_ZN17LoRa_contact_data19work_contact_systemEv+0x128>
        in_processing_ = false;
 8002482:	2300      	movs	r3, #0
 8002484:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
    if(error != 0) {
 8002488:	2800      	cmp	r0, #0
 800248a:	d086      	beq.n	800239a <_ZN17LoRa_contact_data19work_contact_systemEv+0x3a>
        start_connect_ = false;
 800248c:	2300      	movs	r3, #0
 800248e:	f884 3137 	strb.w	r3, [r4, #311]	; 0x137
        init_ = false;
 8002492:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8002496:	e780      	b.n	800239a <_ZN17LoRa_contact_data19work_contact_systemEv+0x3a>
            error = broadcast_send_packet();
 8002498:	4620      	mov	r0, r4
 800249a:	f7ff ff21 	bl	80022e0 <_ZN17LoRa_contact_data21broadcast_send_packetEv>
            break;
 800249e:	e7ee      	b.n	800247e <_ZN17LoRa_contact_data19work_contact_systemEv+0x11e>
        error = 400;
 80024a0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80024a4:	e7eb      	b.n	800247e <_ZN17LoRa_contact_data19work_contact_systemEv+0x11e>
            error = 300;
 80024a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80024aa:	e7e8      	b.n	800247e <_ZN17LoRa_contact_data19work_contact_systemEv+0x11e>
 80024ac:	20000360 	.word	0x20000360

080024b0 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control>:
uint32_t LoRa_contact_data::init_connection_expect(Stage_control& use_stage) {
 80024b0:	b530      	push	{r4, r5, lr}
 80024b2:	b085      	sub	sp, #20
 80024b4:	4604      	mov	r4, r0
    switch (module_state_) {
 80024b6:	7c83      	ldrb	r3, [r0, #18]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d003      	beq.n	80024c4 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x14>
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d006      	beq.n	80024ce <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x1e>
        error = 111;
 80024c0:	206f      	movs	r0, #111	; 0x6f
    return error;
 80024c2:	e002      	b.n	80024ca <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x1a>
        set_LoRa_mode_receive();
 80024c4:	f7ff fd88 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 80024c8:	2000      	movs	r0, #0
}
 80024ca:	b005      	add	sp, #20
 80024cc:	bd30      	pop	{r4, r5, pc}
        if(!packet_dont_correct()) {
 80024ce:	2200      	movs	r2, #0
 80024d0:	4611      	mov	r1, r2
 80024d2:	f7ff fc3b 	bl	8001d4c <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 80024d6:	bbc8      	cbnz	r0, 800254c <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x9c>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.I_connect) {
 80024d8:	f005 fb08 	bl	8007aec <HAL_GetTick>
 80024dc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80024e0:	1ac0      	subs	r0, r0, r3
 80024e2:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 80024e6:	4298      	cmp	r0, r3
 80024e8:	d30e      	bcc.n	8002508 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x58>
                if(send_packet_amt_ < packet_constraints_.I_connect) {
 80024ea:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 80024ee:	f894 2165 	ldrb.w	r2, [r4, #357]	; 0x165
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d90d      	bls.n	8002512 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x62>
                    ++send_packet_amt_;
 80024f6:	3301      	adds	r3, #1
 80024f8:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    set_LoRa_mode_send();
 80024fc:	2100      	movs	r1, #0
 80024fe:	4620      	mov	r0, r4
 8002500:	f7ff fdde 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 8002504:	2000      	movs	r0, #0
 8002506:	e7e0      	b.n	80024ca <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x1a>
                set_LoRa_mode_receive();
 8002508:	4620      	mov	r0, r4
 800250a:	f7ff fd65 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 800250e:	2000      	movs	r0, #0
 8002510:	e7db      	b.n	80024ca <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x1a>
                    send_packet_amt_ = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    if(!use_past_stage)
 8002518:	7f63      	ldrb	r3, [r4, #29]
 800251a:	b98b      	cbnz	r3, 8002540 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x90>
                        past_stage_ = current_stage_;
 800251c:	4623      	mov	r3, r4
 800251e:	f853 0f13 	ldr.w	r0, [r3, #19]!
 8002522:	61a0      	str	r0, [r4, #24]
 8002524:	791b      	ldrb	r3, [r3, #4]
 8002526:	7723      	strb	r3, [r4, #28]
                    current_stage_.stade_communication = SC_DOWNTIME;
 8002528:	2300      	movs	r3, #0
 800252a:	7523      	strb	r3, [r4, #20]
                    create_disconnet_packet(true);
 800252c:	2101      	movs	r1, #1
 800252e:	4620      	mov	r0, r4
 8002530:	f7ff fbde 	bl	8001cf0 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 8002534:	2101      	movs	r1, #1
 8002536:	4620      	mov	r0, r4
 8002538:	f7ff fdc2 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    error = 112;
 800253c:	2070      	movs	r0, #112	; 0x70
 800253e:	e7c4      	b.n	80024ca <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x1a>
                        current_stage_ = past_stage_;
 8002540:	69a0      	ldr	r0, [r4, #24]
 8002542:	f8c4 0013 	str.w	r0, [r4, #19]
 8002546:	7f23      	ldrb	r3, [r4, #28]
 8002548:	75e3      	strb	r3, [r4, #23]
 800254a:	e7ed      	b.n	8002528 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x78>
            if(check_packet_type(Packet_Type::CONNECTION, {0x01})) {
 800254c:	aa04      	add	r2, sp, #16
 800254e:	2301      	movs	r3, #1
 8002550:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8002554:	2100      	movs	r1, #0
 8002556:	4620      	mov	r0, r4
 8002558:	f7ff fc4c 	bl	8001df4 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 800255c:	2800      	cmp	r0, #0
 800255e:	d077      	beq.n	8002650 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x1a0>
                send_packet_amt_ = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                uint8_t data[2] = {0, 0};
 8002566:	f88d 300c 	strb.w	r3, [sp, #12]
 800256a:	f88d 300d 	strb.w	r3, [sp, #13]
                uint8_t com = 0x01;
 800256e:	2301      	movs	r3, #1
 8002570:	f88d 300a 	strb.w	r3, [sp, #10]
                uint8_t len = 1;
 8002574:	f88d 300b 	strb.w	r3, [sp, #11]
                if(amt_packet_ == 0xFF)
 8002578:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800257c:	2bff      	cmp	r3, #255	; 0xff
                    len = 2;
 800257e:	bf04      	itt	eq
 8002580:	2302      	moveq	r3, #2
 8002582:	f88d 300b 	strbeq.w	r3, [sp, #11]
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 8002586:	f10d 030b 	add.w	r3, sp, #11
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	ab03      	add	r3, sp, #12
 800258e:	f10d 020a 	add.w	r2, sp, #10
 8002592:	f104 0120 	add.w	r1, r4, #32
 8002596:	4836      	ldr	r0, [pc, #216]	; (8002670 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x1c0>)
 8002598:	f003 faf8 	bl	8005b8c <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
                if(data[0] == 0) {
 800259c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d140      	bne.n	8002626 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x176>
                    if(amt_packet_ == 0xFF) {
 80025a4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80025a8:	2bff      	cmp	r3, #255	; 0xff
 80025aa:	d013      	beq.n	80025d4 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x124>
                        if(!use_past_stage)
 80025ac:	7f63      	ldrb	r3, [r4, #29]
 80025ae:	bba3      	cbnz	r3, 800261a <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x16a>
                            past_stage_ = current_stage_;
 80025b0:	4623      	mov	r3, r4
 80025b2:	f853 0f13 	ldr.w	r0, [r3, #19]!
 80025b6:	61a0      	str	r0, [r4, #24]
 80025b8:	791b      	ldrb	r3, [r3, #4]
 80025ba:	7723      	strb	r3, [r4, #28]
                        current_stage_.exchange = E_BOARDCAST;
 80025bc:	2300      	movs	r3, #0
 80025be:	75a3      	strb	r3, [r4, #22]
                        current_stage_.stade_communication = SC_EXCHANGE;
 80025c0:	2302      	movs	r3, #2
 80025c2:	7523      	strb	r3, [r4, #20]
                        create_data_packet();
 80025c4:	4620      	mov	r0, r4
 80025c6:	f7ff fa9d 	bl	8001b04 <_ZN17LoRa_contact_data18create_data_packetEv>
                        set_LoRa_mode_send(true);
 80025ca:	2101      	movs	r1, #1
 80025cc:	4620      	mov	r0, r4
 80025ce:	f7ff fd77 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 80025d2:	e035      	b.n	8002640 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x190>
                        if(!use_past_stage)
 80025d4:	7f63      	ldrb	r3, [r4, #29]
 80025d6:	b9d3      	cbnz	r3, 800260e <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x15e>
                            past_stage_ = current_stage_;
 80025d8:	4623      	mov	r3, r4
 80025da:	f853 0f13 	ldr.w	r0, [r3, #19]!
 80025de:	61a0      	str	r0, [r4, #24]
 80025e0:	791b      	ldrb	r3, [r3, #4]
 80025e2:	7723      	strb	r3, [r4, #28]
                        current_stage_.type_communication = TC_RECIPIENT;
 80025e4:	2501      	movs	r5, #1
 80025e6:	74e5      	strb	r5, [r4, #19]
                        current_stage_.stade_communication = SC_EXCHANGE;
 80025e8:	2302      	movs	r3, #2
 80025ea:	7523      	strb	r3, [r4, #20]
                        current_stage_.exchange = E_BOARDCAST;
 80025ec:	2100      	movs	r1, #0
 80025ee:	75a1      	strb	r1, [r4, #22]
                        expected_amt_packet_ = data[1];
 80025f0:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80025f4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
                        amt_packet_ = 0;
 80025f8:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
                        create_connect_packet(0, true); // уже не инициатор
 80025fc:	462a      	mov	r2, r5
 80025fe:	4620      	mov	r0, r4
 8002600:	f7ff f9ee 	bl	80019e0 <_ZN17LoRa_contact_data21create_connect_packetEhb>
                        set_LoRa_mode_send(true);
 8002604:	4629      	mov	r1, r5
 8002606:	4620      	mov	r0, r4
 8002608:	f7ff fd5a 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 800260c:	e018      	b.n	8002640 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x190>
                            current_stage_ = past_stage_;
 800260e:	69a0      	ldr	r0, [r4, #24]
 8002610:	f8c4 0013 	str.w	r0, [r4, #19]
 8002614:	7f23      	ldrb	r3, [r4, #28]
 8002616:	75e3      	strb	r3, [r4, #23]
 8002618:	e7e4      	b.n	80025e4 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x134>
                            current_stage_ = past_stage_;
 800261a:	69a0      	ldr	r0, [r4, #24]
 800261c:	f8c4 0013 	str.w	r0, [r4, #19]
 8002620:	7f23      	ldrb	r3, [r4, #28]
 8002622:	75e3      	strb	r3, [r4, #23]
 8002624:	e7ca      	b.n	80025bc <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x10c>
                    if(!use_past_stage)
 8002626:	7f63      	ldrb	r3, [r4, #29]
 8002628:	b963      	cbnz	r3, 8002644 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x194>
                        past_stage_ = current_stage_;
 800262a:	4623      	mov	r3, r4
 800262c:	f853 0f13 	ldr.w	r0, [r3, #19]!
 8002630:	61a0      	str	r0, [r4, #24]
 8002632:	791b      	ldrb	r3, [r3, #4]
 8002634:	7723      	strb	r3, [r4, #28]
                    current_stage_.connection = C_WAIT_RESET;
 8002636:	2301      	movs	r3, #1
 8002638:	7563      	strb	r3, [r4, #21]
                    set_LoRa_mode_receive();
 800263a:	4620      	mov	r0, r4
 800263c:	f7ff fccc 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002640:	2000      	movs	r0, #0
 8002642:	e742      	b.n	80024ca <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x1a>
                        current_stage_ = past_stage_;
 8002644:	69a0      	ldr	r0, [r4, #24]
 8002646:	f8c4 0013 	str.w	r0, [r4, #19]
 800264a:	7f23      	ldrb	r3, [r4, #28]
 800264c:	75e3      	strb	r3, [r4, #23]
 800264e:	e7f2      	b.n	8002636 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x186>
                if(!use_past_stage) {
 8002650:	7f63      	ldrb	r3, [r4, #29]
 8002652:	b123      	cbz	r3, 800265e <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x1ae>
                    set_LoRa_mode_receive(); // -+-+-
 8002654:	4620      	mov	r0, r4
 8002656:	f7ff fcbf 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 800265a:	2000      	movs	r0, #0
 800265c:	e735      	b.n	80024ca <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x1a>
                    use_past_stage = true;
 800265e:	2301      	movs	r3, #1
 8002660:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 8002662:	4620      	mov	r0, r4
 8002664:	f7ff fe7c 	bl	8002360 <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8002668:	2300      	movs	r3, #0
 800266a:	7763      	strb	r3, [r4, #29]
 800266c:	e72d      	b.n	80024ca <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x1a>
 800266e:	bf00      	nop
 8002670:	20002394 	.word	0x20002394

08002674 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control>:
uint32_t LoRa_contact_data::init_connection_wait(Stage_control& use_stage) {
 8002674:	b530      	push	{r4, r5, lr}
 8002676:	b083      	sub	sp, #12
 8002678:	4604      	mov	r4, r0
    switch (module_state_) {
 800267a:	7c83      	ldrb	r3, [r0, #18]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d004      	beq.n	800268a <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x16>
 8002680:	460d      	mov	r5, r1
 8002682:	2b02      	cmp	r3, #2
 8002684:	d006      	beq.n	8002694 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x20>
        error = 113;
 8002686:	2071      	movs	r0, #113	; 0x71
    return error;
 8002688:	e002      	b.n	8002690 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x1c>
        set_LoRa_mode_receive();
 800268a:	f7ff fca5 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 800268e:	2000      	movs	r0, #0
}
 8002690:	b003      	add	sp, #12
 8002692:	bd30      	pop	{r4, r5, pc}
        if(!packet_dont_correct()) {
 8002694:	2200      	movs	r2, #0
 8002696:	4611      	mov	r1, r2
 8002698:	f7ff fb58 	bl	8001d4c <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 800269c:	b9e8      	cbnz	r0, 80026da <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x66>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.I_wait_connect) {
 800269e:	f005 fa25 	bl	8007aec <HAL_GetTick>
 80026a2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80026a6:	1ac0      	subs	r0, r0, r3
 80026a8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 80026ac:	4298      	cmp	r0, r3
 80026ae:	d204      	bcs.n	80026ba <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x46>
                set_LoRa_mode_receive();
 80026b0:	4620      	mov	r0, r4
 80026b2:	f7ff fc91 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 80026b6:	2000      	movs	r0, #0
 80026b8:	e7ea      	b.n	8002690 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x1c>
                past_stage_ = use_stage;
 80026ba:	6828      	ldr	r0, [r5, #0]
 80026bc:	61a0      	str	r0, [r4, #24]
 80026be:	792b      	ldrb	r3, [r5, #4]
 80026c0:	7723      	strb	r3, [r4, #28]
                current_stage_.stade_communication = SC_DOWNTIME;
 80026c2:	2300      	movs	r3, #0
 80026c4:	7523      	strb	r3, [r4, #20]
                create_disconnet_packet(true);
 80026c6:	2101      	movs	r1, #1
 80026c8:	4620      	mov	r0, r4
 80026ca:	f7ff fb11 	bl	8001cf0 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                set_LoRa_mode_send(true);
 80026ce:	2101      	movs	r1, #1
 80026d0:	4620      	mov	r0, r4
 80026d2:	f7ff fcf5 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                error = 114;
 80026d6:	2072      	movs	r0, #114	; 0x72
 80026d8:	e7da      	b.n	8002690 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x1c>
            if(check_packet_type(Packet_Type::CONNECTION, {0x02})) {
 80026da:	aa02      	add	r2, sp, #8
 80026dc:	2302      	movs	r3, #2
 80026de:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80026e2:	2100      	movs	r1, #0
 80026e4:	4620      	mov	r0, r4
 80026e6:	f7ff fb85 	bl	8001df4 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 80026ea:	b930      	cbnz	r0, 80026fa <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x86>
                if(!use_past_stage) {
 80026ec:	7f63      	ldrb	r3, [r4, #29]
 80026ee:	b15b      	cbz	r3, 8002708 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x94>
                    set_LoRa_mode_receive(); // -+-+-
 80026f0:	4620      	mov	r0, r4
 80026f2:	f7ff fc71 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 80026f6:	2000      	movs	r0, #0
 80026f8:	e7ca      	b.n	8002690 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x1c>
                past_stage_ = use_stage;
 80026fa:	6828      	ldr	r0, [r5, #0]
 80026fc:	61a0      	str	r0, [r4, #24]
 80026fe:	792b      	ldrb	r3, [r5, #4]
 8002700:	7723      	strb	r3, [r4, #28]
                current_stage_.connection = C_EXPECTATION; // ??? (?) -----
 8002702:	2000      	movs	r0, #0
 8002704:	7560      	strb	r0, [r4, #21]
 8002706:	e7c3      	b.n	8002690 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x1c>
                    use_past_stage = true;
 8002708:	2301      	movs	r3, #1
 800270a:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 800270c:	4620      	mov	r0, r4
 800270e:	f7ff fe27 	bl	8002360 <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8002712:	2300      	movs	r3, #0
 8002714:	7763      	strb	r3, [r4, #29]
 8002716:	e7bb      	b.n	8002690 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x1c>

08002718 <_ZN17LoRa_contact_data15init_connectionER13Stage_control>:
uint32_t LoRa_contact_data::init_connection(Stage_control& use_stage) {
 8002718:	b508      	push	{r3, lr}
    switch (use_stage.connection) {
 800271a:	788b      	ldrb	r3, [r1, #2]
 800271c:	b11b      	cbz	r3, 8002726 <_ZN17LoRa_contact_data15init_connectionER13Stage_control+0xe>
 800271e:	2b01      	cmp	r3, #1
 8002720:	d004      	beq.n	800272c <_ZN17LoRa_contact_data15init_connectionER13Stage_control+0x14>
        error = 110;
 8002722:	206e      	movs	r0, #110	; 0x6e
    return error;
 8002724:	e001      	b.n	800272a <_ZN17LoRa_contact_data15init_connectionER13Stage_control+0x12>
        error = init_connection_expect(use_stage);
 8002726:	f7ff fec3 	bl	80024b0 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control>
}
 800272a:	bd08      	pop	{r3, pc}
        error = init_connection_wait(use_stage);
 800272c:	f7ff ffa2 	bl	8002674 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control>
        break;
 8002730:	e7fb      	b.n	800272a <_ZN17LoRa_contact_data15init_connectionER13Stage_control+0x12>
	...

08002734 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control>:
uint32_t LoRa_contact_data::init_exchange_wait_confirmation(Stage_control& use_stage) {
 8002734:	b510      	push	{r4, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	4604      	mov	r4, r0
    switch (module_state_) {
 800273a:	7c83      	ldrb	r3, [r0, #18]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d003      	beq.n	8002748 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x14>
 8002740:	2b02      	cmp	r3, #2
 8002742:	d006      	beq.n	8002752 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x1e>
        error = 122;
 8002744:	207a      	movs	r0, #122	; 0x7a
    return error;
 8002746:	e002      	b.n	800274e <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x1a>
        set_LoRa_mode_receive();
 8002748:	f7ff fc46 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 800274c:	2000      	movs	r0, #0
}
 800274e:	b004      	add	sp, #16
 8002750:	bd10      	pop	{r4, pc}
        if(!packet_dont_correct()) {
 8002752:	2200      	movs	r2, #0
 8002754:	4611      	mov	r1, r2
 8002756:	f7ff faf9 	bl	8001d4c <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 800275a:	bbc8      	cbnz	r0, 80027d0 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x9c>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.I_amt_pack) {
 800275c:	f005 f9c6 	bl	8007aec <HAL_GetTick>
 8002760:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002764:	1ac0      	subs	r0, r0, r3
 8002766:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 800276a:	4298      	cmp	r0, r3
 800276c:	d30e      	bcc.n	800278c <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x58>
                if(send_packet_amt_ < packet_constraints_.I_amt_pack) {
 800276e:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 8002772:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
 8002776:	429a      	cmp	r2, r3
 8002778:	d90d      	bls.n	8002796 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x62>
                    ++send_packet_amt_;
 800277a:	3301      	adds	r3, #1
 800277c:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    set_LoRa_mode_send();
 8002780:	2100      	movs	r1, #0
 8002782:	4620      	mov	r0, r4
 8002784:	f7ff fc9c 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 8002788:	2000      	movs	r0, #0
 800278a:	e7e0      	b.n	800274e <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x1a>
                set_LoRa_mode_receive();
 800278c:	4620      	mov	r0, r4
 800278e:	f7ff fc23 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002792:	2000      	movs	r0, #0
 8002794:	e7db      	b.n	800274e <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x1a>
                    send_packet_amt_ = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    if(!use_past_stage)
 800279c:	7f63      	ldrb	r3, [r4, #29]
 800279e:	b98b      	cbnz	r3, 80027c4 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x90>
                        past_stage_ = current_stage_;
 80027a0:	4623      	mov	r3, r4
 80027a2:	f853 0f13 	ldr.w	r0, [r3, #19]!
 80027a6:	61a0      	str	r0, [r4, #24]
 80027a8:	791b      	ldrb	r3, [r3, #4]
 80027aa:	7723      	strb	r3, [r4, #28]
                    current_stage_.stade_communication = SC_DOWNTIME;
 80027ac:	2300      	movs	r3, #0
 80027ae:	7523      	strb	r3, [r4, #20]
                    create_disconnet_packet(true);
 80027b0:	2101      	movs	r1, #1
 80027b2:	4620      	mov	r0, r4
 80027b4:	f7ff fa9c 	bl	8001cf0 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 80027b8:	2101      	movs	r1, #1
 80027ba:	4620      	mov	r0, r4
 80027bc:	f7ff fc80 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    error = 123;
 80027c0:	207b      	movs	r0, #123	; 0x7b
 80027c2:	e7c4      	b.n	800274e <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x1a>
                        current_stage_ = past_stage_;
 80027c4:	69a0      	ldr	r0, [r4, #24]
 80027c6:	f8c4 0013 	str.w	r0, [r4, #19]
 80027ca:	7f23      	ldrb	r3, [r4, #28]
 80027cc:	75e3      	strb	r3, [r4, #23]
 80027ce:	e7ed      	b.n	80027ac <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x78>
            if(check_packet_type(Packet_Type::CONNECTION, {0x04})) {
 80027d0:	aa04      	add	r2, sp, #16
 80027d2:	2304      	movs	r3, #4
 80027d4:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80027d8:	2100      	movs	r1, #0
 80027da:	4620      	mov	r0, r4
 80027dc:	f7ff fb0a 	bl	8001df4 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 80027e0:	b938      	cbnz	r0, 80027f2 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0xbe>
                if(!use_past_stage) {
 80027e2:	7f63      	ldrb	r3, [r4, #29]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d045      	beq.n	8002874 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x140>
                    set_LoRa_mode_receive(); // -+-+-
 80027e8:	4620      	mov	r0, r4
 80027ea:	f7ff fbf5 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 80027ee:	2000      	movs	r0, #0
 80027f0:	e7ad      	b.n	800274e <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x1a>
                send_packet_amt_ = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                uint8_t data[1] = {0};
 80027f8:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t com = 0x04;
 80027fc:	2304      	movs	r3, #4
 80027fe:	f88d 300d 	strb.w	r3, [sp, #13]
                uint8_t len = 1;
 8002802:	2301      	movs	r3, #1
 8002804:	f88d 300e 	strb.w	r3, [sp, #14]
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 8002808:	f10d 030e 	add.w	r3, sp, #14
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	ab03      	add	r3, sp, #12
 8002810:	f10d 020d 	add.w	r2, sp, #13
 8002814:	f104 0120 	add.w	r1, r4, #32
 8002818:	481a      	ldr	r0, [pc, #104]	; (8002884 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x150>)
 800281a:	f003 f9b7 	bl	8005b8c <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
                if(data[0] == amt_packet_) {
 800281e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8002822:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8002826:	429a      	cmp	r2, r3
 8002828:	d012      	beq.n	8002850 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x11c>
                    if(!use_past_stage)
 800282a:	7f63      	ldrb	r3, [r4, #29]
 800282c:	b9e3      	cbnz	r3, 8002868 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x134>
                        past_stage_ = current_stage_;
 800282e:	4623      	mov	r3, r4
 8002830:	f853 0f13 	ldr.w	r0, [r3, #19]!
 8002834:	61a0      	str	r0, [r4, #24]
 8002836:	791b      	ldrb	r3, [r3, #4]
 8002838:	7723      	strb	r3, [r4, #28]
                    current_stage_.exchange = E_WAITING_NUMBERS;
 800283a:	2302      	movs	r3, #2
 800283c:	75a3      	strb	r3, [r4, #22]
                    create_number_packet();
 800283e:	4620      	mov	r0, r4
 8002840:	f7ff f9ce 	bl	8001be0 <_ZN17LoRa_contact_data20create_number_packetEv>
                    set_LoRa_mode_send();
 8002844:	2100      	movs	r1, #0
 8002846:	4620      	mov	r0, r4
 8002848:	f7ff fc3a 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 800284c:	2000      	movs	r0, #0
 800284e:	e77e      	b.n	800274e <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x1a>
                    contact_complete();
 8002850:	4620      	mov	r0, r4
 8002852:	f7ff fcbf 	bl	80021d4 <_ZN17LoRa_contact_data16contact_completeEv>
                    create_disconnet_packet();
 8002856:	2100      	movs	r1, #0
 8002858:	4620      	mov	r0, r4
 800285a:	f7ff fa49 	bl	8001cf0 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 800285e:	2101      	movs	r1, #1
 8002860:	4620      	mov	r0, r4
 8002862:	f7ff fc2d 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 8002866:	e7f1      	b.n	800284c <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x118>
                        current_stage_ = past_stage_;
 8002868:	69a0      	ldr	r0, [r4, #24]
 800286a:	f8c4 0013 	str.w	r0, [r4, #19]
 800286e:	7f23      	ldrb	r3, [r4, #28]
 8002870:	75e3      	strb	r3, [r4, #23]
 8002872:	e7e2      	b.n	800283a <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x106>
                    use_past_stage = true;
 8002874:	2301      	movs	r3, #1
 8002876:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 8002878:	4620      	mov	r0, r4
 800287a:	f7ff fd71 	bl	8002360 <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 800287e:	2300      	movs	r3, #0
 8002880:	7763      	strb	r3, [r4, #29]
 8002882:	e764      	b.n	800274e <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x1a>
 8002884:	20002394 	.word	0x20002394

08002888 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control>:
uint32_t LoRa_contact_data::init_exchange_wait_numbers(Stage_control& use_stage) {
 8002888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800288a:	b08d      	sub	sp, #52	; 0x34
 800288c:	4604      	mov	r4, r0
    switch (module_state_) {
 800288e:	7c83      	ldrb	r3, [r0, #18]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d004      	beq.n	800289e <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x16>
 8002894:	460d      	mov	r5, r1
 8002896:	2b02      	cmp	r3, #2
 8002898:	d006      	beq.n	80028a8 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x20>
        error = 124;
 800289a:	207c      	movs	r0, #124	; 0x7c
    return error;
 800289c:	e002      	b.n	80028a4 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1c>
        set_LoRa_mode_receive();
 800289e:	f7ff fb9b 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 80028a2:	2000      	movs	r0, #0
}
 80028a4:	b00d      	add	sp, #52	; 0x34
 80028a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(!packet_dont_correct()) {
 80028a8:	2200      	movs	r2, #0
 80028aa:	4611      	mov	r1, r2
 80028ac:	f7ff fa4e 	bl	8001d4c <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 80028b0:	bbc8      	cbnz	r0, 8002926 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x9e>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.I_num_pack) {
 80028b2:	f005 f91b 	bl	8007aec <HAL_GetTick>
 80028b6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80028ba:	1ac0      	subs	r0, r0, r3
 80028bc:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 80028c0:	4298      	cmp	r0, r3
 80028c2:	d30e      	bcc.n	80028e2 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x5a>
                if(send_packet_amt_ < packet_constraints_.I_num_pack) {
 80028c4:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 80028c8:	f894 2167 	ldrb.w	r2, [r4, #359]	; 0x167
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d90d      	bls.n	80028ec <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x64>
                    ++send_packet_amt_;
 80028d0:	3301      	adds	r3, #1
 80028d2:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    set_LoRa_mode_send();
 80028d6:	2100      	movs	r1, #0
 80028d8:	4620      	mov	r0, r4
 80028da:	f7ff fbf1 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 80028de:	2000      	movs	r0, #0
 80028e0:	e7e0      	b.n	80028a4 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1c>
                set_LoRa_mode_receive();
 80028e2:	4620      	mov	r0, r4
 80028e4:	f7ff fb78 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 80028e8:	2000      	movs	r0, #0
 80028ea:	e7db      	b.n	80028a4 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1c>
                    send_packet_amt_ = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    if(!use_past_stage)
 80028f2:	7f63      	ldrb	r3, [r4, #29]
 80028f4:	b98b      	cbnz	r3, 800291a <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x92>
                        past_stage_ = current_stage_;
 80028f6:	4623      	mov	r3, r4
 80028f8:	f853 0f13 	ldr.w	r0, [r3, #19]!
 80028fc:	61a0      	str	r0, [r4, #24]
 80028fe:	791b      	ldrb	r3, [r3, #4]
 8002900:	7723      	strb	r3, [r4, #28]
                    current_stage_.stade_communication = SC_DOWNTIME;
 8002902:	2300      	movs	r3, #0
 8002904:	7523      	strb	r3, [r4, #20]
                    create_disconnet_packet(true);
 8002906:	2101      	movs	r1, #1
 8002908:	4620      	mov	r0, r4
 800290a:	f7ff f9f1 	bl	8001cf0 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 800290e:	2101      	movs	r1, #1
 8002910:	4620      	mov	r0, r4
 8002912:	f7ff fbd5 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    error = 125;
 8002916:	207d      	movs	r0, #125	; 0x7d
 8002918:	e7c4      	b.n	80028a4 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1c>
                        current_stage_ = past_stage_;
 800291a:	69a0      	ldr	r0, [r4, #24]
 800291c:	f8c4 0013 	str.w	r0, [r4, #19]
 8002920:	7f23      	ldrb	r3, [r4, #28]
 8002922:	75e3      	strb	r3, [r4, #23]
 8002924:	e7ed      	b.n	8002902 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x7a>
            if(check_packet_type(Packet_Type::CONNECTION, {0x06})) {
 8002926:	aa0c      	add	r2, sp, #48	; 0x30
 8002928:	2306      	movs	r3, #6
 800292a:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800292e:	2100      	movs	r1, #0
 8002930:	4620      	mov	r0, r4
 8002932:	f7ff fa5f 	bl	8001df4 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002936:	b940      	cbnz	r0, 800294a <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0xc2>
                if(!use_past_stage) {
 8002938:	7f63      	ldrb	r3, [r4, #29]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 8084 	beq.w	8002a48 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1c0>
                    set_LoRa_mode_receive(); // -+-+-
 8002940:	4620      	mov	r0, r4
 8002942:	f7ff fb49 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002946:	2000      	movs	r0, #0
 8002948:	e7ac      	b.n	80028a4 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1c>
                past_stage_ = use_stage;
 800294a:	6828      	ldr	r0, [r5, #0]
 800294c:	61a0      	str	r0, [r4, #24]
 800294e:	792b      	ldrb	r3, [r5, #4]
 8002950:	7723      	strb	r3, [r4, #28]
                current_stage_.exchange = E_BOARDCAST;
 8002952:	2300      	movs	r3, #0
 8002954:	75a3      	strb	r3, [r4, #22]
                send_packet_amt_ = 0;
 8002956:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                uint8_t size = 0;
 800295a:	aa0c      	add	r2, sp, #48	; 0x30
 800295c:	f802 3d23 	strb.w	r3, [r2, #-35]!
                packet_connection.get_size_by_packet(last_receive_packet_, size);
 8002960:	f104 0520 	add.w	r5, r4, #32
 8002964:	4629      	mov	r1, r5
 8002966:	483f      	ldr	r0, [pc, #252]	; (8002a64 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1dc>)
 8002968:	f003 f922 	bl	8005bb0 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh>
                if(size != 0)
 800296c:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002970:	2800      	cmp	r0, #0
 8002972:	d13b      	bne.n	80029ec <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x164>
                uint8_t com = 0xFF;
 8002974:	23ff      	movs	r3, #255	; 0xff
 8002976:	f88d 300e 	strb.w	r3, [sp, #14]
                uint8_t len = 0xFF;
 800297a:	f88d 300f 	strb.w	r3, [sp, #15]
                packet_connection.get_packet_data(last_receive_packet_, &com, data, &len);
 800297e:	f10d 030f 	add.w	r3, sp, #15
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	2300      	movs	r3, #0
 8002986:	f10d 020e 	add.w	r2, sp, #14
 800298a:	4629      	mov	r1, r5
 800298c:	4835      	ldr	r0, [pc, #212]	; (8002a64 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1dc>)
 800298e:	f003 f8fd 	bl	8005b8c <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
                if (com != 0x06) {
 8002992:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002996:	2b06      	cmp	r3, #6
 8002998:	d142      	bne.n	8002a20 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x198>
					for(int i = 0; i < len/2; ++i) {
 800299a:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800299e:	0852      	lsrs	r2, r2, #1
 80029a0:	4694      	mov	ip, r2
 80029a2:	2a00      	cmp	r2, #0
 80029a4:	d058      	beq.n	8002a58 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1d0>
                uint8_t *data = nullptr;
 80029a6:	2600      	movs	r6, #0
 80029a8:	4635      	mov	r5, r6
					for(int i = 0; i < len/2; ++i) {
 80029aa:	2300      	movs	r3, #0
						pack_num[pack_num_len++] = (((uint16_t)data[i*2]) << 8) | (data[i*2+1]);
 80029ac:	b2d9      	uxtb	r1, r3
 80029ae:	a80c      	add	r0, sp, #48	; 0x30
 80029b0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80029b4:	f816 7013 	ldrb.w	r7, [r6, r3, lsl #1]
 80029b8:	7868      	ldrb	r0, [r5, #1]
 80029ba:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
 80029be:	f821 0c20 	strh.w	r0, [r1, #-32]
					for(int i = 0; i < len/2; ++i) {
 80029c2:	3301      	adds	r3, #1
 80029c4:	3502      	adds	r5, #2
 80029c6:	4563      	cmp	r3, ip
 80029c8:	d1f0      	bne.n	80029ac <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x124>
                    pop_num_packet(pack_num, pack_num_len);
 80029ca:	a904      	add	r1, sp, #16
 80029cc:	4620      	mov	r0, r4
 80029ce:	f7ff fa4f 	bl	8001e70 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh>
                    if(data != nullptr)
 80029d2:	b116      	cbz	r6, 80029da <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x152>
                        delete[] data;
 80029d4:	4630      	mov	r0, r6
 80029d6:	f007 fef7 	bl	800a7c8 <_ZdaPv>
                    create_data_packet();
 80029da:	4620      	mov	r0, r4
 80029dc:	f7ff f892 	bl	8001b04 <_ZN17LoRa_contact_data18create_data_packetEv>
                    set_LoRa_mode_send(true);
 80029e0:	2101      	movs	r1, #1
 80029e2:	4620      	mov	r0, r4
 80029e4:	f7ff fb6c 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 80029e8:	2000      	movs	r0, #0
 80029ea:	e75b      	b.n	80028a4 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1c>
                    data = new uint8_t[size];
 80029ec:	f007 feee 	bl	800a7cc <_Znaj>
 80029f0:	4606      	mov	r6, r0
                uint8_t com = 0xFF;
 80029f2:	23ff      	movs	r3, #255	; 0xff
 80029f4:	f88d 300e 	strb.w	r3, [sp, #14]
                uint8_t len = 0xFF;
 80029f8:	f88d 300f 	strb.w	r3, [sp, #15]
                packet_connection.get_packet_data(last_receive_packet_, &com, data, &len);
 80029fc:	f10d 030f 	add.w	r3, sp, #15
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	4603      	mov	r3, r0
 8002a04:	f10d 020e 	add.w	r2, sp, #14
 8002a08:	4629      	mov	r1, r5
 8002a0a:	4816      	ldr	r0, [pc, #88]	; (8002a64 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1dc>)
 8002a0c:	f003 f8be 	bl	8005b8c <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
                if (com != 0x06) {
 8002a10:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002a14:	2b06      	cmp	r3, #6
 8002a16:	d00f      	beq.n	8002a38 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1b0>
                    if(data != nullptr)
 8002a18:	b116      	cbz	r6, 8002a20 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x198>
                        delete[] data;
 8002a1a:	4630      	mov	r0, r6
 8002a1c:	f007 fed4 	bl	800a7c8 <_ZdaPv>
                    current_stage_.stade_communication = SC_DOWNTIME;
 8002a20:	2300      	movs	r3, #0
 8002a22:	7523      	strb	r3, [r4, #20]
                    create_disconnet_packet(true);
 8002a24:	2101      	movs	r1, #1
 8002a26:	4620      	mov	r0, r4
 8002a28:	f7ff f962 	bl	8001cf0 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	4620      	mov	r0, r4
 8002a30:	f7ff fb46 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    error = 126;
 8002a34:	207e      	movs	r0, #126	; 0x7e
 8002a36:	e735      	b.n	80028a4 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1c>
					for(int i = 0; i < len/2; ++i) {
 8002a38:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8002a3c:	0852      	lsrs	r2, r2, #1
 8002a3e:	4694      	mov	ip, r2
 8002a40:	2a00      	cmp	r2, #0
 8002a42:	d1b1      	bne.n	80029a8 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x120>
					uint8_t pack_num_len = 0;;
 8002a44:	2200      	movs	r2, #0
 8002a46:	e7c0      	b.n	80029ca <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x142>
                    use_past_stage = true;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f7ff fc87 	bl	8002360 <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8002a52:	2300      	movs	r3, #0
 8002a54:	7763      	strb	r3, [r4, #29]
 8002a56:	e725      	b.n	80028a4 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x1c>
                    pop_num_packet(pack_num, pack_num_len);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	a904      	add	r1, sp, #16
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	f7ff fa07 	bl	8001e70 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh>
 8002a62:	e7ba      	b.n	80029da <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x152>
 8002a64:	20002394 	.word	0x20002394

08002a68 <_ZN17LoRa_contact_data13init_exchangeER13Stage_control>:
uint32_t LoRa_contact_data::init_exchange(Stage_control& use_stage) {
 8002a68:	b508      	push	{r3, lr}
    switch (use_stage.exchange) {
 8002a6a:	78cb      	ldrb	r3, [r1, #3]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d007      	beq.n	8002a80 <_ZN17LoRa_contact_data13init_exchangeER13Stage_control+0x18>
 8002a70:	b11b      	cbz	r3, 8002a7a <_ZN17LoRa_contact_data13init_exchangeER13Stage_control+0x12>
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d007      	beq.n	8002a86 <_ZN17LoRa_contact_data13init_exchangeER13Stage_control+0x1e>
        error = 120;
 8002a76:	2078      	movs	r0, #120	; 0x78
    return error;
 8002a78:	e001      	b.n	8002a7e <_ZN17LoRa_contact_data13init_exchangeER13Stage_control+0x16>
        error = init_exchange_boardcast(use_stage);
 8002a7a:	f7ff fb47 	bl	800210c <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control>
}
 8002a7e:	bd08      	pop	{r3, pc}
        error = init_exchange_wait_confirmation(use_stage);
 8002a80:	f7ff fe58 	bl	8002734 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control>
        break;
 8002a84:	e7fb      	b.n	8002a7e <_ZN17LoRa_contact_data13init_exchangeER13Stage_control+0x16>
        error = init_exchange_wait_numbers(use_stage);
 8002a86:	f7ff feff 	bl	8002888 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control>
        break;
 8002a8a:	e7f8      	b.n	8002a7e <_ZN17LoRa_contact_data13init_exchangeER13Stage_control+0x16>

08002a8c <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control>:
uint32_t LoRa_contact_data::recip_connection_wait_request(Stage_control& use_stage) {
 8002a8c:	b570      	push	{r4, r5, r6, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	4604      	mov	r4, r0
    switch (module_state_) {
 8002a92:	7c83      	ldrb	r3, [r0, #18]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d003      	beq.n	8002aa0 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x14>
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d006      	beq.n	8002aaa <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1e>
        error = 212;
 8002a9c:	20d4      	movs	r0, #212	; 0xd4
    return error;
 8002a9e:	e002      	b.n	8002aa6 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1a>
        set_LoRa_mode_receive();
 8002aa0:	f7ff fa9a 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002aa4:	2000      	movs	r0, #0
}
 8002aa6:	b004      	add	sp, #16
 8002aa8:	bd70      	pop	{r4, r5, r6, pc}
        if(!packet_dont_correct(true)) {
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2101      	movs	r1, #1
 8002aae:	f7ff f94d 	bl	8001d4c <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002ab2:	2800      	cmp	r0, #0
 8002ab4:	d144      	bne.n	8002b40 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0xb4>
            if(!packet_dont_correct(true, true)) {
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4620      	mov	r0, r4
 8002abc:	f7ff f946 	bl	8001d4c <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002ac0:	bbc8      	cbnz	r0, 8002b36 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0xaa>
                if (send_wait_reset_packet_)
 8002ac2:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
 8002ac6:	b38b      	cbz	r3, 8002b2c <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0xa0>
                    if(HAL_GetTick() - time_last_packet_ < time_constraints_.R_connect) {
 8002ac8:	f005 f810 	bl	8007aec <HAL_GetTick>
 8002acc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002ad0:	1ac0      	subs	r0, r0, r3
 8002ad2:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8002ad6:	4298      	cmp	r0, r3
 8002ad8:	d30e      	bcc.n	8002af8 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x6c>
                        if(send_packet_amt_ < packet_constraints_.R_wait_connect) {
 8002ada:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 8002ade:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d90d      	bls.n	8002b02 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x76>
                            ++send_packet_amt_;
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                            set_LoRa_mode_send();
 8002aec:	2100      	movs	r1, #0
 8002aee:	4620      	mov	r0, r4
 8002af0:	f7ff fae6 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 8002af4:	2000      	movs	r0, #0
 8002af6:	e7d6      	b.n	8002aa6 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1a>
                        set_LoRa_mode_receive();
 8002af8:	4620      	mov	r0, r4
 8002afa:	f7ff fa6d 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002afe:	2000      	movs	r0, #0
 8002b00:	e7d1      	b.n	8002aa6 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1a>
                            send_packet_amt_ = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                            if(!use_past_stage)
 8002b08:	7f63      	ldrb	r3, [r4, #29]
 8002b0a:	b94b      	cbnz	r3, 8002b20 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x94>
                                past_stage_ = current_stage_;
 8002b0c:	4623      	mov	r3, r4
 8002b0e:	f853 0f13 	ldr.w	r0, [r3, #19]!
 8002b12:	61a0      	str	r0, [r4, #24]
 8002b14:	791b      	ldrb	r3, [r3, #4]
 8002b16:	7723      	strb	r3, [r4, #28]
                            current_stage_.connection = C_QUEUE_CHECK;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	7563      	strb	r3, [r4, #21]
                            error = 213;
 8002b1c:	20d5      	movs	r0, #213	; 0xd5
 8002b1e:	e7c2      	b.n	8002aa6 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1a>
                                current_stage_ = past_stage_;
 8002b20:	69a0      	ldr	r0, [r4, #24]
 8002b22:	f8c4 0013 	str.w	r0, [r4, #19]
 8002b26:	7f23      	ldrb	r3, [r4, #28]
 8002b28:	75e3      	strb	r3, [r4, #23]
 8002b2a:	e7f5      	b.n	8002b18 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x8c>
                    set_LoRa_mode_receive();
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f7ff fa53 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002b32:	2000      	movs	r0, #0
 8002b34:	e7b7      	b.n	8002aa6 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1a>
                    set_LoRa_mode_receive();
 8002b36:	4620      	mov	r0, r4
 8002b38:	f7ff fa4e 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	e7b2      	b.n	8002aa6 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1a>
            if(check_packet_type(Packet_Type::CONNECTION, {0x00})) {
 8002b40:	2100      	movs	r1, #0
 8002b42:	aa04      	add	r2, sp, #16
 8002b44:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8002b48:	4620      	mov	r0, r4
 8002b4a:	f7ff f953 	bl	8001df4 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002b4e:	b938      	cbnz	r0, 8002b60 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0xd4>
                if(!use_past_stage) {
 8002b50:	7f63      	ldrb	r3, [r4, #29]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d069      	beq.n	8002c2a <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x19e>
                    set_LoRa_mode_receive(); // -+-+-
 8002b56:	4620      	mov	r0, r4
 8002b58:	f7ff fa3e 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	e7a2      	b.n	8002aa6 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1a>
                send_packet_amt_ = 0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                send_wait_reset_packet_ = false;
 8002b66:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
                uint8_t data[1] = {0};
 8002b6a:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t com = 0x00;
 8002b6e:	f88d 300d 	strb.w	r3, [sp, #13]
                uint8_t len = 1;
 8002b72:	2301      	movs	r3, #1
 8002b74:	f88d 300e 	strb.w	r3, [sp, #14]
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 8002b78:	f104 0520 	add.w	r5, r4, #32
 8002b7c:	f10d 030e 	add.w	r3, sp, #14
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	ab03      	add	r3, sp, #12
 8002b84:	f10d 020d 	add.w	r2, sp, #13
 8002b88:	4629      	mov	r1, r5
 8002b8a:	482c      	ldr	r0, [pc, #176]	; (8002c3c <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1b0>)
 8002b8c:	f002 fffe 	bl	8005b8c <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
                if(data[0] == 0xFF) {
 8002b90:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002b94:	2bff      	cmp	r3, #255	; 0xff
 8002b96:	d01c      	beq.n	8002bd2 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x146>
                    if(!use_past_stage)
 8002b98:	7f62      	ldrb	r2, [r4, #29]
 8002b9a:	2a00      	cmp	r2, #0
 8002b9c:	d13f      	bne.n	8002c1e <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x192>
                        past_stage_ = current_stage_;
 8002b9e:	4622      	mov	r2, r4
 8002ba0:	f852 0f13 	ldr.w	r0, [r2, #19]!
 8002ba4:	61a0      	str	r0, [r4, #24]
 8002ba6:	7912      	ldrb	r2, [r2, #4]
 8002ba8:	7722      	strb	r2, [r4, #28]
                    current_stage_.exchange = E_EXPECTATION;
 8002baa:	2203      	movs	r2, #3
 8002bac:	75a2      	strb	r2, [r4, #22]
                    current_stage_.stade_communication = SC_EXCHANGE;
 8002bae:	2202      	movs	r2, #2
 8002bb0:	7522      	strb	r2, [r4, #20]
                    expected_amt_packet_ = data[0];
 8002bb2:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
                    amt_packet_ = 0;
 8002bb6:	2500      	movs	r5, #0
 8002bb8:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
                    create_connect_packet();
 8002bbc:	462a      	mov	r2, r5
 8002bbe:	4629      	mov	r1, r5
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	f7fe ff0d 	bl	80019e0 <_ZN17LoRa_contact_data21create_connect_packetEhb>
                    set_LoRa_mode_send();
 8002bc6:	4629      	mov	r1, r5
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f7ff fa79 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 8002bce:	2000      	movs	r0, #0
 8002bd0:	e769      	b.n	8002aa6 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1a>
					start_connect_ = true;
 8002bd2:	2601      	movs	r6, #1
 8002bd4:	f884 6137 	strb.w	r6, [r4, #311]	; 0x137
                    connect_adr_ = packet_analyzer.get_sour_adr(last_receive_packet_); // (?) -----
 8002bd8:	4629      	mov	r1, r5
 8002bda:	4819      	ldr	r0, [pc, #100]	; (8002c40 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1b4>)
 8002bdc:	f002 fdc8 	bl	8005770 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>
 8002be0:	60a0      	str	r0, [r4, #8]
                    create_connect_packet(send_packet_len, true);
 8002be2:	4632      	mov	r2, r6
 8002be4:	f894 1134 	ldrb.w	r1, [r4, #308]	; 0x134
 8002be8:	4620      	mov	r0, r4
 8002bea:	f7fe fef9 	bl	80019e0 <_ZN17LoRa_contact_data21create_connect_packetEhb>
                    set_LoRa_mode_send();
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	f7ff fa65 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    if(!use_past_stage)
 8002bf6:	7f63      	ldrb	r3, [r4, #29]
 8002bf8:	b95b      	cbnz	r3, 8002c12 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x186>
                        past_stage_ = current_stage_;
 8002bfa:	4623      	mov	r3, r4
 8002bfc:	f853 0f13 	ldr.w	r0, [r3, #19]!
 8002c00:	61a0      	str	r0, [r4, #24]
 8002c02:	791b      	ldrb	r3, [r3, #4]
 8002c04:	7723      	strb	r3, [r4, #28]
                    current_stage_.type_communication = TC_INITIATOR;
 8002c06:	2300      	movs	r3, #0
 8002c08:	74e3      	strb	r3, [r4, #19]
                    current_stage_.stade_communication = SC_CONNECTION;
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	7522      	strb	r2, [r4, #20]
                    current_stage_.connection = C_EXPECTATION;
 8002c0e:	7563      	strb	r3, [r4, #21]
 8002c10:	e7dd      	b.n	8002bce <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x142>
                        current_stage_ = past_stage_;
 8002c12:	69a0      	ldr	r0, [r4, #24]
 8002c14:	f8c4 0013 	str.w	r0, [r4, #19]
 8002c18:	7f23      	ldrb	r3, [r4, #28]
 8002c1a:	75e3      	strb	r3, [r4, #23]
 8002c1c:	e7f3      	b.n	8002c06 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x17a>
                        current_stage_ = past_stage_;
 8002c1e:	69a0      	ldr	r0, [r4, #24]
 8002c20:	f8c4 0013 	str.w	r0, [r4, #19]
 8002c24:	7f22      	ldrb	r2, [r4, #28]
 8002c26:	75e2      	strb	r2, [r4, #23]
 8002c28:	e7bf      	b.n	8002baa <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x11e>
                    use_past_stage = true;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f7ff fb96 	bl	8002360 <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8002c34:	2300      	movs	r3, #0
 8002c36:	7763      	strb	r3, [r4, #29]
 8002c38:	e735      	b.n	8002aa6 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1a>
 8002c3a:	bf00      	nop
 8002c3c:	20002394 	.word	0x20002394
 8002c40:	20002378 	.word	0x20002378

08002c44 <_ZN17LoRa_contact_data16recip_connectionER13Stage_control>:
uint32_t LoRa_contact_data::recip_connection(Stage_control& use_stage) {
 8002c44:	b508      	push	{r3, lr}
    switch (use_stage.connection) {
 8002c46:	788b      	ldrb	r3, [r1, #2]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d003      	beq.n	8002c54 <_ZN17LoRa_contact_data16recip_connectionER13Stage_control+0x10>
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d004      	beq.n	8002c5a <_ZN17LoRa_contact_data16recip_connectionER13Stage_control+0x16>
        error = 210;
 8002c50:	20d2      	movs	r0, #210	; 0xd2
    return error;
 8002c52:	e001      	b.n	8002c58 <_ZN17LoRa_contact_data16recip_connectionER13Stage_control+0x14>
        error = recip_connection_queue_check(use_stage);
 8002c54:	f7ff f9a6 	bl	8001fa4 <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control>
}
 8002c58:	bd08      	pop	{r3, pc}
        error = recip_connection_wait_request(use_stage);
 8002c5a:	f7ff ff17 	bl	8002a8c <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control>
        break;
 8002c5e:	e7fb      	b.n	8002c58 <_ZN17LoRa_contact_data16recip_connectionER13Stage_control+0x14>

08002c60 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control>:
uint32_t LoRa_contact_data::recip_exchange_expect(Stage_control& use_stage) {
 8002c60:	b530      	push	{r4, r5, lr}
 8002c62:	b083      	sub	sp, #12
 8002c64:	4604      	mov	r4, r0
    switch (module_state_) {
 8002c66:	7c83      	ldrb	r3, [r0, #18]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d004      	beq.n	8002c76 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x16>
 8002c6c:	460d      	mov	r5, r1
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d006      	beq.n	8002c80 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x20>
        error = 221;
 8002c72:	20dd      	movs	r0, #221	; 0xdd
    return error;
 8002c74:	e002      	b.n	8002c7c <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x1c>
        set_LoRa_mode_receive();
 8002c76:	f7ff f9af 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002c7a:	2000      	movs	r0, #0
}
 8002c7c:	b003      	add	sp, #12
 8002c7e:	bd30      	pop	{r4, r5, pc}
        if(!packet_dont_correct()) {
 8002c80:	2200      	movs	r2, #0
 8002c82:	4611      	mov	r1, r2
 8002c84:	f7ff f862 	bl	8001d4c <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002c88:	b9e0      	cbnz	r0, 8002cc4 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x64>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.R_data_pack) {
 8002c8a:	f004 ff2f 	bl	8007aec <HAL_GetTick>
 8002c8e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002c92:	1ac0      	subs	r0, r0, r3
 8002c94:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
 8002c98:	4298      	cmp	r0, r3
 8002c9a:	d204      	bcs.n	8002ca6 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x46>
                set_LoRa_mode_receive();
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	f7ff f99b 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	e7ea      	b.n	8002c7c <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x1c>
                create_amt_packet();
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	f7fe ff5c 	bl	8001b64 <_ZN17LoRa_contact_data17create_amt_packetEv>
                set_LoRa_mode_send();
 8002cac:	2100      	movs	r1, #0
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f7ff fa06 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                past_stage_ = use_stage;
 8002cb4:	6828      	ldr	r0, [r5, #0]
 8002cb6:	61a0      	str	r0, [r4, #24]
 8002cb8:	792b      	ldrb	r3, [r5, #4]
 8002cba:	7723      	strb	r3, [r4, #28]
                current_stage_.exchange = E_WAITING_REACTION;
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	75a3      	strb	r3, [r4, #22]
    uint32_t error = 0;
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	e7db      	b.n	8002c7c <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x1c>
            if(check_packet_type(Packet_Type::CONNECTION, {0x03})) {
 8002cc4:	aa02      	add	r2, sp, #8
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8002ccc:	2100      	movs	r1, #0
 8002cce:	4620      	mov	r0, r4
 8002cd0:	f7ff f890 	bl	8001df4 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002cd4:	bb00      	cbnz	r0, 8002d18 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xb8>
            else if(check_packet_type(Packet_Type::DEVICE) ||
 8002cd6:	2102      	movs	r1, #2
 8002cd8:	4620      	mov	r0, r4
 8002cda:	f7ff f87d 	bl	8001dd8 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type>
                    check_packet_type(Packet_Type::SENSOR) ||
 8002cde:	b920      	cbnz	r0, 8002cea <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x8a>
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	f7ff f878 	bl	8001dd8 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type>
            else if(check_packet_type(Packet_Type::DEVICE) ||
 8002ce8:	b328      	cbz	r0, 8002d36 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xd6>
                if(reciev_packet_len == CONTACT_DATA_MAX_PACKET) {
 8002cea:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
				reciev_packet_[reciev_packet_len++] = last_receive_packet_;
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	f884 2135 	strb.w	r2, [r4, #309]	; 0x135
 8002cf4:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8002cf8:	f104 0120 	add.w	r1, r4, #32
 8002cfc:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8002d00:	f001 fbc8 	bl	8004494 <_ZN11LoRa_packetaSERKS_>
                ++amt_packet_;
 8002d04:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8002d08:	3301      	adds	r3, #1
 8002d0a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
                set_LoRa_mode_receive();
 8002d0e:	4620      	mov	r0, r4
 8002d10:	f7ff f962 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002d14:	2000      	movs	r0, #0
 8002d16:	e7b1      	b.n	8002c7c <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x1c>
                create_amt_packet();
 8002d18:	4620      	mov	r0, r4
 8002d1a:	f7fe ff23 	bl	8001b64 <_ZN17LoRa_contact_data17create_amt_packetEv>
                set_LoRa_mode_send();
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4620      	mov	r0, r4
 8002d22:	f7ff f9cd 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                past_stage_ = use_stage;
 8002d26:	6828      	ldr	r0, [r5, #0]
 8002d28:	61a0      	str	r0, [r4, #24]
 8002d2a:	792b      	ldrb	r3, [r5, #4]
 8002d2c:	7723      	strb	r3, [r4, #28]
                current_stage_.exchange = E_WAITING_REACTION;
 8002d2e:	2304      	movs	r3, #4
 8002d30:	75a3      	strb	r3, [r4, #22]
    uint32_t error = 0;
 8002d32:	2000      	movs	r0, #0
 8002d34:	e7a2      	b.n	8002c7c <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x1c>
                    check_packet_type(Packet_Type::SYSTEM)) {
 8002d36:	2103      	movs	r1, #3
 8002d38:	4620      	mov	r0, r4
 8002d3a:	f7ff f84d 	bl	8001dd8 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type>
                    check_packet_type(Packet_Type::SENSOR) ||
 8002d3e:	2800      	cmp	r0, #0
 8002d40:	d1d3      	bne.n	8002cea <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x8a>
                if(!use_past_stage) {
 8002d42:	7f63      	ldrb	r3, [r4, #29]
 8002d44:	b123      	cbz	r3, 8002d50 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xf0>
                    set_LoRa_mode_receive(); // -+-+-
 8002d46:	4620      	mov	r0, r4
 8002d48:	f7ff f946 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	e795      	b.n	8002c7c <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x1c>
                    use_past_stage = true;
 8002d50:	2301      	movs	r3, #1
 8002d52:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 8002d54:	4620      	mov	r0, r4
 8002d56:	f7ff fb03 	bl	8002360 <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	7763      	strb	r3, [r4, #29]
 8002d5e:	e78d      	b.n	8002c7c <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x1c>

08002d60 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control>:
uint32_t LoRa_contact_data::recip_exchange_wait_reaction(Stage_control& use_stage) {
 8002d60:	b530      	push	{r4, r5, lr}
 8002d62:	b083      	sub	sp, #12
 8002d64:	4604      	mov	r4, r0
    switch (module_state_) {
 8002d66:	7c83      	ldrb	r3, [r0, #18]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d003      	beq.n	8002d74 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x14>
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d006      	beq.n	8002d7e <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x1e>
        error = 222;
 8002d70:	20de      	movs	r0, #222	; 0xde
    return error;
 8002d72:	e002      	b.n	8002d7a <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x1a>
        set_LoRa_mode_receive();
 8002d74:	f7ff f930 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002d78:	2000      	movs	r0, #0
}
 8002d7a:	b003      	add	sp, #12
 8002d7c:	bd30      	pop	{r4, r5, pc}
        if(!packet_dont_correct()) {
 8002d7e:	2200      	movs	r2, #0
 8002d80:	4611      	mov	r1, r2
 8002d82:	f7fe ffe3 	bl	8001d4c <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002d86:	2800      	cmp	r0, #0
 8002d88:	d147      	bne.n	8002e1a <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0xba>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.R_correct_pack) {
 8002d8a:	f004 feaf 	bl	8007aec <HAL_GetTick>
 8002d8e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002d92:	1ac0      	subs	r0, r0, r3
 8002d94:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
 8002d98:	4298      	cmp	r0, r3
 8002d9a:	d322      	bcc.n	8002de2 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x82>
                if(send_packet_amt_ < packet_constraints_.R_correct_pack) {
 8002d9c:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 8002da0:	f894 2169 	ldrb.w	r2, [r4, #361]	; 0x169
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d821      	bhi.n	8002dec <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x8c>
                    if(expected_amt_packet_ != reciev_packet_len)
 8002da8:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8002dac:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d02a      	beq.n	8002e0a <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0xaa>
                        send_packet_amt_ = 0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                        if(!use_past_stage)
 8002dba:	7f63      	ldrb	r3, [r4, #29]
 8002dbc:	b9fb      	cbnz	r3, 8002dfe <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x9e>
                            past_stage_ = current_stage_;
 8002dbe:	4623      	mov	r3, r4
 8002dc0:	f853 0f13 	ldr.w	r0, [r3, #19]!
 8002dc4:	61a0      	str	r0, [r4, #24]
 8002dc6:	791b      	ldrb	r3, [r3, #4]
 8002dc8:	7723      	strb	r3, [r4, #28]
                        current_stage_.stade_communication = SC_DOWNTIME;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	7523      	strb	r3, [r4, #20]
                        create_disconnet_packet(true);
 8002dce:	2101      	movs	r1, #1
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	f7fe ff8d 	bl	8001cf0 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                        set_LoRa_mode_send(true);
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	4620      	mov	r0, r4
 8002dda:	f7ff f971 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                        error = 223;
 8002dde:	20df      	movs	r0, #223	; 0xdf
 8002de0:	e7cb      	b.n	8002d7a <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x1a>
                set_LoRa_mode_receive();
 8002de2:	4620      	mov	r0, r4
 8002de4:	f7ff f8f8 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002de8:	2000      	movs	r0, #0
 8002dea:	e7c6      	b.n	8002d7a <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x1a>
                    ++send_packet_amt_;
 8002dec:	3301      	adds	r3, #1
 8002dee:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    set_LoRa_mode_send();
 8002df2:	2100      	movs	r1, #0
 8002df4:	4620      	mov	r0, r4
 8002df6:	f7ff f963 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	e7bd      	b.n	8002d7a <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x1a>
                            current_stage_ = past_stage_;
 8002dfe:	69a0      	ldr	r0, [r4, #24]
 8002e00:	f8c4 0013 	str.w	r0, [r4, #19]
 8002e04:	7f23      	ldrb	r3, [r4, #28]
 8002e06:	75e3      	strb	r3, [r4, #23]
 8002e08:	e7df      	b.n	8002dca <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x6a>
                        sort_num_packet();
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	f7ff f87e 	bl	8001f0c <_ZN17LoRa_contact_data15sort_num_packetEv>
                        contact_complete();
 8002e10:	4620      	mov	r0, r4
 8002e12:	f7ff f9df 	bl	80021d4 <_ZN17LoRa_contact_data16contact_completeEv>
    uint32_t error = 0;
 8002e16:	2000      	movs	r0, #0
 8002e18:	e7af      	b.n	8002d7a <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x1a>
            if(check_packet_type(Packet_Type::CONNECTION, {0x05})) {
 8002e1a:	aa02      	add	r2, sp, #8
 8002e1c:	2305      	movs	r3, #5
 8002e1e:	f802 3d02 	strb.w	r3, [r2, #-2]!
 8002e22:	2100      	movs	r1, #0
 8002e24:	4620      	mov	r0, r4
 8002e26:	f7fe ffe5 	bl	8001df4 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002e2a:	b1e8      	cbz	r0, 8002e68 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x108>
                send_packet_amt_ = 0;
 8002e2c:	2500      	movs	r5, #0
 8002e2e:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                create_number_packet();
 8002e32:	4620      	mov	r0, r4
 8002e34:	f7fe fed4 	bl	8001be0 <_ZN17LoRa_contact_data20create_number_packetEv>
                set_LoRa_mode_send();
 8002e38:	4629      	mov	r1, r5
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f7ff f940 	bl	80020c0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                amt_packet_ = 0;
 8002e40:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
                if(!use_past_stage)
 8002e44:	7f63      	ldrb	r3, [r4, #29]
 8002e46:	b94b      	cbnz	r3, 8002e5c <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0xfc>
                    past_stage_ = current_stage_;
 8002e48:	4623      	mov	r3, r4
 8002e4a:	f853 0f13 	ldr.w	r0, [r3, #19]!
 8002e4e:	61a0      	str	r0, [r4, #24]
 8002e50:	791b      	ldrb	r3, [r3, #4]
 8002e52:	7723      	strb	r3, [r4, #28]
                current_stage_.exchange = E_EXPECTATION;
 8002e54:	2303      	movs	r3, #3
 8002e56:	75a3      	strb	r3, [r4, #22]
    uint32_t error = 0;
 8002e58:	2000      	movs	r0, #0
 8002e5a:	e78e      	b.n	8002d7a <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x1a>
                    current_stage_ = past_stage_;
 8002e5c:	69a0      	ldr	r0, [r4, #24]
 8002e5e:	f8c4 0013 	str.w	r0, [r4, #19]
 8002e62:	7f23      	ldrb	r3, [r4, #28]
 8002e64:	75e3      	strb	r3, [r4, #23]
 8002e66:	e7f5      	b.n	8002e54 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0xf4>
            else if(check_packet_type(Packet_Type::CONNECTION, {0x08})) {
 8002e68:	aa02      	add	r2, sp, #8
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8002e70:	2100      	movs	r1, #0
 8002e72:	4620      	mov	r0, r4
 8002e74:	f7fe ffbe 	bl	8001df4 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002e78:	b930      	cbnz	r0, 8002e88 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x128>
                if(!use_past_stage) {
 8002e7a:	7f63      	ldrb	r3, [r4, #29]
 8002e7c:	b17b      	cbz	r3, 8002e9e <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x13e>
                    set_LoRa_mode_receive(); // -+-+-
 8002e7e:	4620      	mov	r0, r4
 8002e80:	f7ff f8aa 	bl	8001fd8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002e84:	2000      	movs	r0, #0
 8002e86:	e778      	b.n	8002d7a <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x1a>
                send_packet_amt_ = 0;
 8002e88:	2500      	movs	r5, #0
 8002e8a:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                sort_num_packet();
 8002e8e:	4620      	mov	r0, r4
 8002e90:	f7ff f83c 	bl	8001f0c <_ZN17LoRa_contact_data15sort_num_packetEv>
                contact_complete();
 8002e94:	4620      	mov	r0, r4
 8002e96:	f7ff f99d 	bl	80021d4 <_ZN17LoRa_contact_data16contact_completeEv>
    uint32_t error = 0;
 8002e9a:	4628      	mov	r0, r5
 8002e9c:	e76d      	b.n	8002d7a <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x1a>
                    use_past_stage = true;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	f7ff fa5c 	bl	8002360 <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	7763      	strb	r3, [r4, #29]
 8002eac:	e765      	b.n	8002d7a <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x1a>

08002eae <_ZN17LoRa_contact_data14recip_exchangeER13Stage_control>:
uint32_t LoRa_contact_data::recip_exchange(Stage_control& use_stage) {
 8002eae:	b508      	push	{r3, lr}
    switch (use_stage.exchange) {
 8002eb0:	78cb      	ldrb	r3, [r1, #3]
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d003      	beq.n	8002ebe <_ZN17LoRa_contact_data14recip_exchangeER13Stage_control+0x10>
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d004      	beq.n	8002ec4 <_ZN17LoRa_contact_data14recip_exchangeER13Stage_control+0x16>
        error = 220;
 8002eba:	20dc      	movs	r0, #220	; 0xdc
    return error;
 8002ebc:	e001      	b.n	8002ec2 <_ZN17LoRa_contact_data14recip_exchangeER13Stage_control+0x14>
        error = recip_exchange_expect(use_stage);
 8002ebe:	f7ff fecf 	bl	8002c60 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control>
}
 8002ec2:	bd08      	pop	{r3, pc}
        error = recip_exchange_wait_reaction(use_stage);
 8002ec4:	f7ff ff4c 	bl	8002d60 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control>
        break;
 8002ec8:	e7fb      	b.n	8002ec2 <_ZN17LoRa_contact_data14recip_exchangeER13Stage_control+0x14>
	...

08002ecc <Init_lora_module>:
} current_mode;


extern "C" {

bool Init_lora_module(SPI_HandleTypeDef *spi) {
 8002ecc:	b508      	push	{r3, lr}
	return contact_data.init_lora_module(spi);
 8002ece:	4601      	mov	r1, r0
 8002ed0:	4801      	ldr	r0, [pc, #4]	; (8002ed8 <Init_lora_module+0xc>)
 8002ed2:	f7fe fbed 	bl	80016b0 <_ZN17LoRa_contact_data16init_lora_moduleEP19__SPI_HandleTypeDef>
}
 8002ed6:	bd08      	pop	{r3, pc}
 8002ed8:	200001c0 	.word	0x200001c0

08002edc <Begin_lora_module>:
uint8_t Begin_lora_module(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8002edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	4604      	mov	r4, r0
 8002ee2:	4615      	mov	r5, r2
 8002ee4:	461e      	mov	r6, r3
 8002ee6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	current_mode = REGISTRATION_MODE;
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <Begin_lora_module+0x3c>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]
	grow_sensor.set_system_id(MODULE_ID);
 8002eee:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <Begin_lora_module+0x40>)
 8002ef0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ef2:	480b      	ldr	r0, [pc, #44]	; (8002f20 <Begin_lora_module+0x44>)
 8002ef4:	f7fe f888 	bl	8001008 <_ZN11Grow_sensor13set_system_idESt5arrayIhLj12EE>
	return contact_data.begin_lora_module(frequency, paboost, signal_power, SF, SBW, sync_word);
 8002ef8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8002efc:	9302      	str	r3, [sp, #8]
 8002efe:	9701      	str	r7, [sp, #4]
 8002f00:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	4633      	mov	r3, r6
 8002f08:	462a      	mov	r2, r5
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	4805      	ldr	r0, [pc, #20]	; (8002f24 <Begin_lora_module+0x48>)
 8002f0e:	f7fe fbdb 	bl	80016c8 <_ZN17LoRa_contact_data17begin_lora_moduleEmbhhmh>
}
 8002f12:	b005      	add	sp, #20
 8002f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f16:	bf00      	nop
 8002f18:	2000032c 	.word	0x2000032c
 8002f1c:	0800bb48 	.word	0x0800bb48
 8002f20:	20000330 	.word	0x20000330
 8002f24:	200001c0 	.word	0x200001c0

08002f28 <Main_cpp>:

void Main_cpp(SensorsDataTypeDef* sensors_data) {
 8002f28:	b510      	push	{r4, lr}
	grow_sensor.set_value(0, sensors_data->lux);
 8002f2a:	4c06      	ldr	r4, [pc, #24]	; (8002f44 <Main_cpp+0x1c>)
 8002f2c:	6802      	ldr	r2, [r0, #0]
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4620      	mov	r0, r4
 8002f32:	f7fe f8c3 	bl	80010bc <_ZN11Grow_sensor9set_valueEhf>
	grow_sensor_interface.build_data_packet(grow_sensor, contact_data);
 8002f36:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <Main_cpp+0x20>)
 8002f38:	4621      	mov	r1, r4
 8002f3a:	4804      	ldr	r0, [pc, #16]	; (8002f4c <Main_cpp+0x24>)
 8002f3c:	f7fe fa42 	bl	80013c4 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data>
//	sensors_data.lux
}
 8002f40:	bd10      	pop	{r4, pc}
 8002f42:	bf00      	nop
 8002f44:	20000330 	.word	0x20000330
 8002f48:	200001c0 	.word	0x200001c0
 8002f4c:	200001bc 	.word	0x200001bc

08002f50 <Send_registration_packet>:

void Send_registration_packet() {
 8002f50:	b508      	push	{r3, lr}
	grow_sensor_interface.send_registration_packet(grow_sensor, contact_data);
 8002f52:	4a03      	ldr	r2, [pc, #12]	; (8002f60 <Send_registration_packet+0x10>)
 8002f54:	4903      	ldr	r1, [pc, #12]	; (8002f64 <Send_registration_packet+0x14>)
 8002f56:	4804      	ldr	r0, [pc, #16]	; (8002f68 <Send_registration_packet+0x18>)
 8002f58:	f7fe f9a6 	bl	80012a8 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data>
	//contact_data.broadcast_receive();
}
 8002f5c:	bd08      	pop	{r3, pc}
 8002f5e:	bf00      	nop
 8002f60:	200001c0 	.word	0x200001c0
 8002f64:	20000330 	.word	0x20000330
 8002f68:	200001bc 	.word	0x200001bc

08002f6c <Contact_group_control_module>:

void Contact_group_control_module() {
 8002f6c:	b500      	push	{lr}
 8002f6e:	b085      	sub	sp, #20
	contact_status = contact_data.work_contact_system();
 8002f70:	4824      	ldr	r0, [pc, #144]	; (8003004 <Contact_group_control_module+0x98>)
 8002f72:	f7ff f9f5 	bl	8002360 <_ZN17LoRa_contact_data19work_contact_systemEv>
 8002f76:	4b24      	ldr	r3, [pc, #144]	; (8003008 <Contact_group_control_module+0x9c>)
 8002f78:	6018      	str	r0, [r3, #0]
	switch (current_mode) {
 8002f7a:	4b24      	ldr	r3, [pc, #144]	; (800300c <Contact_group_control_module+0xa0>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	b123      	cbz	r3, 8002f8a <Contact_group_control_module+0x1e>
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d029      	beq.n	8002fd8 <Contact_group_control_module+0x6c>
	        if(contact_data.get_signal_complete()) {
	            contact_data.wait_recipient(grow_sensor.get_address_control_module());
	        }
		}
	}
}
 8002f84:	b005      	add	sp, #20
 8002f86:	f85d fb04 	ldr.w	pc, [sp], #4
			if(contact_data.get_signal_complete()) {
 8002f8a:	481e      	ldr	r0, [pc, #120]	; (8003004 <Contact_group_control_module+0x98>)
 8002f8c:	f7fe fc72 	bl	8001874 <_ZN17LoRa_contact_data19get_signal_completeEv>
 8002f90:	b9b0      	cbnz	r0, 8002fc0 <Contact_group_control_module+0x54>
			if(contact_data.get_state_contact() == SC_PACKET_ACCEPTED) {
 8002f92:	481c      	ldr	r0, [pc, #112]	; (8003004 <Contact_group_control_module+0x98>)
 8002f94:	f7fe fc0f 	bl	80017b6 <_ZN17LoRa_contact_data17get_state_contactEv>
 8002f98:	2807      	cmp	r0, #7
 8002f9a:	d1f3      	bne.n	8002f84 <Contact_group_control_module+0x18>
				if(grow_sensor_interface.check_regist_packet(grow_sensor, contact_data)) {
 8002f9c:	4a19      	ldr	r2, [pc, #100]	; (8003004 <Contact_group_control_module+0x98>)
 8002f9e:	491c      	ldr	r1, [pc, #112]	; (8003010 <Contact_group_control_module+0xa4>)
 8002fa0:	481c      	ldr	r0, [pc, #112]	; (8003014 <Contact_group_control_module+0xa8>)
 8002fa2:	f7fe faad 	bl	8001500 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data>
 8002fa6:	2800      	cmp	r0, #0
 8002fa8:	d0ec      	beq.n	8002f84 <Contact_group_control_module+0x18>
					current_mode = WORKING_MODE;
 8002faa:	4b18      	ldr	r3, [pc, #96]	; (800300c <Contact_group_control_module+0xa0>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	701a      	strb	r2, [r3, #0]
					contact_data.wait_recipient(grow_sensor.get_address_control_module()); // Начинаем слушать на наличие управляющих пакетов
 8002fb0:	4817      	ldr	r0, [pc, #92]	; (8003010 <Contact_group_control_module+0xa4>)
 8002fb2:	f7fe f851 	bl	8001058 <_ZNK11Grow_sensor26get_address_control_moduleEv>
 8002fb6:	4601      	mov	r1, r0
 8002fb8:	4812      	ldr	r0, [pc, #72]	; (8003004 <Contact_group_control_module+0x98>)
 8002fba:	f7ff f825 	bl	8002008 <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>
					break;
 8002fbe:	e7e1      	b.n	8002f84 <Contact_group_control_module+0x18>
				contact_data.broadcast_receive(); // Ожидаем ответа на запрос или ошибку запроса
 8002fc0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002fc4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002fc8:	4668      	mov	r0, sp
 8002fca:	f002 fb6b 	bl	80056a4 <_ZN12LoRa_addressC1Ett>
 8002fce:	9900      	ldr	r1, [sp, #0]
 8002fd0:	480c      	ldr	r0, [pc, #48]	; (8003004 <Contact_group_control_module+0x98>)
 8002fd2:	f7ff f830 	bl	8002036 <_ZN17LoRa_contact_data17broadcast_receiveE12LoRa_address>
 8002fd6:	e7dc      	b.n	8002f92 <Contact_group_control_module+0x26>
	        if(contact_status != 0) {
 8002fd8:	b960      	cbnz	r0, 8002ff4 <Contact_group_control_module+0x88>
	        if(contact_data.get_signal_complete()) {
 8002fda:	480a      	ldr	r0, [pc, #40]	; (8003004 <Contact_group_control_module+0x98>)
 8002fdc:	f7fe fc4a 	bl	8001874 <_ZN17LoRa_contact_data19get_signal_completeEv>
 8002fe0:	2800      	cmp	r0, #0
 8002fe2:	d0cf      	beq.n	8002f84 <Contact_group_control_module+0x18>
	            contact_data.wait_recipient(grow_sensor.get_address_control_module());
 8002fe4:	480a      	ldr	r0, [pc, #40]	; (8003010 <Contact_group_control_module+0xa4>)
 8002fe6:	f7fe f837 	bl	8001058 <_ZNK11Grow_sensor26get_address_control_moduleEv>
 8002fea:	4601      	mov	r1, r0
 8002fec:	4805      	ldr	r0, [pc, #20]	; (8003004 <Contact_group_control_module+0x98>)
 8002fee:	f7ff f80b 	bl	8002008 <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>
}
 8002ff2:	e7c7      	b.n	8002f84 <Contact_group_control_module+0x18>
	            contact_data.wait_recipient(grow_sensor.get_address_control_module());
 8002ff4:	4806      	ldr	r0, [pc, #24]	; (8003010 <Contact_group_control_module+0xa4>)
 8002ff6:	f7fe f82f 	bl	8001058 <_ZNK11Grow_sensor26get_address_control_moduleEv>
 8002ffa:	4601      	mov	r1, r0
 8002ffc:	4801      	ldr	r0, [pc, #4]	; (8003004 <Contact_group_control_module+0x98>)
 8002ffe:	f7ff f803 	bl	8002008 <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>
 8003002:	e7ea      	b.n	8002fda <Contact_group_control_module+0x6e>
 8003004:	200001c0 	.word	0x200001c0
 8003008:	20002418 	.word	0x20002418
 800300c:	2000032c 	.word	0x2000032c
 8003010:	20000330 	.word	0x20000330
 8003014:	200001bc 	.word	0x200001bc

08003018 <_GLOBAL__sub_I_sensor_array>:

} // extern "C"
 8003018:	b508      	push	{r3, lr}
LoRa_contact_data contact_data;
 800301a:	4804      	ldr	r0, [pc, #16]	; (800302c <_GLOBAL__sub_I_sensor_array+0x14>)
 800301c:	f7fe fc48 	bl	80018b0 <_ZN17LoRa_contact_dataC1Ev>
Grow_sensor grow_sensor(AMT_COMPONENT, sensor_array);
 8003020:	4a03      	ldr	r2, [pc, #12]	; (8003030 <_GLOBAL__sub_I_sensor_array+0x18>)
 8003022:	2101      	movs	r1, #1
 8003024:	4803      	ldr	r0, [pc, #12]	; (8003034 <_GLOBAL__sub_I_sensor_array+0x1c>)
 8003026:	f7fe f8f1 	bl	800120c <_ZN11Grow_sensorC1EhP11Type_sensor>
} // extern "C"
 800302a:	bd08      	pop	{r3, pc}
 800302c:	200001c0 	.word	0x200001c0
 8003030:	20000000 	.word	0x20000000
 8003034:	20000330 	.word	0x20000330

08003038 <_GLOBAL__sub_D_sensor_array>:
 8003038:	b508      	push	{r3, lr}
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800303a:	4b04      	ldr	r3, [pc, #16]	; (800304c <_GLOBAL__sub_D_sensor_array+0x14>)
 800303c:	6918      	ldr	r0, [r3, #16]
	if (__p)
 800303e:	b108      	cbz	r0, 8003044 <_GLOBAL__sub_D_sensor_array+0xc>
	::operator delete(__p);
 8003040:	f007 fbe2 	bl	800a808 <_ZdlPv>
LoRa_contact_data contact_data;
 8003044:	4802      	ldr	r0, [pc, #8]	; (8003050 <_GLOBAL__sub_D_sensor_array+0x18>)
 8003046:	f7fe fb10 	bl	800166a <_ZN17LoRa_contact_dataD1Ev>
} // extern "C"
 800304a:	bd08      	pop	{r3, pc}
 800304c:	20000330 	.word	0x20000330
 8003050:	200001c0 	.word	0x200001c0

08003054 <_ZN8RegisterC1Ethh>:

//   ----- ----- ----- ---- ----- ----- -----
// ----- ----- ----- Register ----- ----- -----
//   ----- ----- ----- ---- ----- ----- -----

Register::Register(uint16_t address, uint8_t bit_count, uint8_t bit_bias): address_(address), bit_count_(bit_count), bit_bias_(bit_bias) {
 8003054:	b430      	push	{r4, r5}
 8003056:	8001      	strh	r1, [r0, #0]
 8003058:	7082      	strb	r2, [r0, #2]
 800305a:	70c3      	strb	r3, [r0, #3]
    if (value < min_value)
 800305c:	b162      	cbz	r2, 8003078 <_ZN8RegisterC1Ethh+0x24>
 800305e:	2a08      	cmp	r2, #8
 8003060:	bf28      	it	cs
 8003062:	2208      	movcs	r2, #8
    uint8_t bit_in_reg = 8;
    bit_count = value_range(bit_count, 1, bit_in_reg);
    bit_bias = value_range(bit_bias, 0, (bit_in_reg - bit_count));
 8003064:	f1c2 0508 	rsb	r5, r2, #8
 8003068:	b2ed      	uxtb	r5, r5
 800306a:	2100      	movs	r1, #0
    uint32_t mask = 0x00;
 800306c:	460c      	mov	r4, r1
    for (uint8_t i = 0; i < bit_in_reg; ++i) {
        if (i < bit_count)
            mask = (mask << 1) + 1;
        else
            if (i < (bit_count + bit_bias))
 800306e:	429d      	cmp	r5, r3
 8003070:	bf94      	ite	ls
 8003072:	1953      	addls	r3, r2, r5
 8003074:	18d3      	addhi	r3, r2, r3
 8003076:	e007      	b.n	8003088 <_ZN8RegisterC1Ethh+0x34>
        return min_value;
 8003078:	2201      	movs	r2, #1
 800307a:	e7f3      	b.n	8003064 <_ZN8RegisterC1Ethh+0x10>
            if (i < (bit_count + bit_bias))
 800307c:	428b      	cmp	r3, r1
                mask <<= 1;
 800307e:	bfc8      	it	gt
 8003080:	0064      	lslgt	r4, r4, #1
 8003082:	3101      	adds	r1, #1
    for (uint8_t i = 0; i < bit_in_reg; ++i) {
 8003084:	2908      	cmp	r1, #8
 8003086:	d005      	beq.n	8003094 <_ZN8RegisterC1Ethh+0x40>
        if (i < bit_count)
 8003088:	b2cd      	uxtb	r5, r1
 800308a:	42aa      	cmp	r2, r5
 800308c:	d9f6      	bls.n	800307c <_ZN8RegisterC1Ethh+0x28>
            mask = (mask << 1) + 1;
 800308e:	0064      	lsls	r4, r4, #1
 8003090:	3401      	adds	r4, #1
 8003092:	e7f6      	b.n	8003082 <_ZN8RegisterC1Ethh+0x2e>
    }
    mask_ = mask;
 8003094:	6044      	str	r4, [r0, #4]
}
 8003096:	bc30      	pop	{r4, r5}
 8003098:	4770      	bx	lr

0800309a <_ZNK8Register7addressEv>:

uint16_t Register::address() const {
    return address_;
}
 800309a:	8800      	ldrh	r0, [r0, #0]
 800309c:	4770      	bx	lr

0800309e <_ZNK8Register4maskEv>:
uint8_t Register::bit_bias() const {
    return bit_bias_;
}
uint32_t Register::mask() const {
    return mask_;
}
 800309e:	6840      	ldr	r0, [r0, #4]
 80030a0:	4770      	bx	lr

080030a2 <_ZeqRK8RegisterS1_>:

bool operator==(const Register& left, const Register& right) {
    if(left.address_ != right.address_)
 80030a2:	8802      	ldrh	r2, [r0, #0]
 80030a4:	880b      	ldrh	r3, [r1, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d001      	beq.n	80030ae <_ZeqRK8RegisterS1_+0xc>
        return false;
 80030aa:	2000      	movs	r0, #0
 80030ac:	4770      	bx	lr
    if(left.bit_count_ != right.bit_count_)
 80030ae:	7882      	ldrb	r2, [r0, #2]
 80030b0:	788b      	ldrb	r3, [r1, #2]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d001      	beq.n	80030ba <_ZeqRK8RegisterS1_+0x18>
        return false;
 80030b6:	2000      	movs	r0, #0
 80030b8:	4770      	bx	lr
    if(left.bit_bias_ != right.bit_bias_)
 80030ba:	78c2      	ldrb	r2, [r0, #3]
 80030bc:	78cb      	ldrb	r3, [r1, #3]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d001      	beq.n	80030c6 <_ZeqRK8RegisterS1_+0x24>
        return false;
 80030c2:	2000      	movs	r0, #0
    if(left.mask_ != right.mask_)
        return false;
    return true;
}
 80030c4:	4770      	bx	lr
    if(left.mask_ != right.mask_)
 80030c6:	6840      	ldr	r0, [r0, #4]
 80030c8:	684b      	ldr	r3, [r1, #4]
 80030ca:	4298      	cmp	r0, r3
 80030cc:	bf14      	ite	ne
 80030ce:	2000      	movne	r0, #0
 80030d0:	2001      	moveq	r0, #1
 80030d2:	4770      	bx	lr

080030d4 <_ZneRK8RegisterS1_>:

bool operator!=(const Register& left, const Register& right) {
 80030d4:	b508      	push	{r3, lr}
    return !(left == right);
 80030d6:	f7ff ffe4 	bl	80030a2 <_ZeqRK8RegisterS1_>
 80030da:	f080 0001 	eor.w	r0, r0, #1
}
 80030de:	b2c0      	uxtb	r0, r0
 80030e0:	bd08      	pop	{r3, pc}
	...

080030e4 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm>:
                             const uint32_t max_value, const uint32_t *reserved_value, const uint32_t reserv_count) {
    init_address_field(registers, reg_count, reg_revers, mode, min_value, max_value, reserved_value, reserv_count);
}

bool Address_field::init_address_field(const Register *registers, const uint8_t reg_count, const bool reg_revers, const char mode, const uint32_t min_value,
                                       const uint32_t max_value, const uint32_t *reserved_value, const uint32_t reserv_count) {
 80030e4:	b4f0      	push	{r4, r5, r6, r7}
 80030e6:	f89d 6010 	ldrb.w	r6, [sp, #16]
 80030ea:	9d05      	ldr	r5, [sp, #20]
    if ((mode != 'r') && (mode != 'w') && (mode != 'c'))
 80030ec:	f1a6 0463 	sub.w	r4, r6, #99	; 0x63
 80030f0:	b2e4      	uxtb	r4, r4
 80030f2:	2c14      	cmp	r4, #20
 80030f4:	d83c      	bhi.n	8003170 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x8c>
 80030f6:	4f20      	ldr	r7, [pc, #128]	; (8003178 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x94>)
 80030f8:	fa27 f404 	lsr.w	r4, r7, r4
 80030fc:	f014 0f01 	tst.w	r4, #1
 8003100:	d038      	beq.n	8003174 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x90>
        return true;
    uint8_t bit_count = 0;
    uint32_t value = 0;
    mode_ = mode;
 8003102:	7606      	strb	r6, [r0, #24]
    registers_ = registers;
 8003104:	6001      	str	r1, [r0, #0]
    reg_count_ = reg_count;
 8003106:	7102      	strb	r2, [r0, #4]
    reg_revers_ = reg_revers;
 8003108:	7143      	strb	r3, [r0, #5]
    reserved_value_ = reserved_value;
 800310a:	9b07      	ldr	r3, [sp, #28]
 800310c:	6103      	str	r3, [r0, #16]
    reserv_count_ = reserv_count;
 800310e:	9b08      	ldr	r3, [sp, #32]
 8003110:	6143      	str	r3, [r0, #20]
    max_address_ = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	80c3      	strh	r3, [r0, #6]
    for (int i = 0; i < reg_count_; ++i) {
 8003116:	b33a      	cbz	r2, 8003168 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x84>
 8003118:	460b      	mov	r3, r1
 800311a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    uint8_t bit_count = 0;
 800311e:	2400      	movs	r4, #0
        bit_count += registers_[i].bit_count();
 8003120:	789e      	ldrb	r6, [r3, #2]
 8003122:	4434      	add	r4, r6
 8003124:	b2e4      	uxtb	r4, r4
    return address_;
 8003126:	881e      	ldrh	r6, [r3, #0]
        if (max_address_ < registers_[i].address())
 8003128:	88c7      	ldrh	r7, [r0, #6]
 800312a:	42b7      	cmp	r7, r6
            max_address_ = registers_[i].address();
 800312c:	bf38      	it	cc
 800312e:	80c6      	strhcc	r6, [r0, #6]
 8003130:	3308      	adds	r3, #8
    for (int i = 0; i < reg_count_; ++i) {
 8003132:	428b      	cmp	r3, r1
 8003134:	d1f4      	bne.n	8003120 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x3c>
    }
    for (int i = 0; i < bit_count; ++i)
 8003136:	4621      	mov	r1, r4
 8003138:	b1c4      	cbz	r4, 800316c <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x88>
 800313a:	2200      	movs	r2, #0
    uint32_t value = 0;
 800313c:	4613      	mov	r3, r2
        value = (value << 1) + 1;
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	3301      	adds	r3, #1
    for (int i = 0; i < bit_count; ++i)
 8003142:	3201      	adds	r2, #1
 8003144:	4291      	cmp	r1, r2
 8003146:	d1fa      	bne.n	800313e <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x5a>
    min_value_ = value_range(min_value, 0, value);
 8003148:	462a      	mov	r2, r5
 800314a:	429d      	cmp	r5, r3
 800314c:	bf28      	it	cs
 800314e:	461a      	movcs	r2, r3
 8003150:	6082      	str	r2, [r0, #8]
    if (value < min_value)
 8003152:	9a06      	ldr	r2, [sp, #24]
 8003154:	4295      	cmp	r5, r2
 8003156:	d803      	bhi.n	8003160 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x7c>
 8003158:	429a      	cmp	r2, r3
 800315a:	bf28      	it	cs
 800315c:	461a      	movcs	r2, r3
 800315e:	4615      	mov	r5, r2
    max_value_ = value_range(max_value, min_value, value);
 8003160:	60c5      	str	r5, [r0, #12]
    return false;
 8003162:	2000      	movs	r0, #0
}
 8003164:	bcf0      	pop	{r4, r5, r6, r7}
 8003166:	4770      	bx	lr
    uint32_t value = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	e7ed      	b.n	8003148 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x64>
 800316c:	2300      	movs	r3, #0
 800316e:	e7eb      	b.n	8003148 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x64>
        return true;
 8003170:	2001      	movs	r0, #1
 8003172:	e7f7      	b.n	8003164 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x80>
 8003174:	2001      	movs	r0, #1
 8003176:	e7f5      	b.n	8003164 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x80>
 8003178:	00108001 	.word	0x00108001

0800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>:
Address_field::Address_field(const Register* registers, const uint8_t reg_count, const bool reg_revers, const char mode, const uint32_t min_value,
 800317c:	b530      	push	{r4, r5, lr}
 800317e:	b087      	sub	sp, #28
 8003180:	4604      	mov	r4, r0
    init_address_field(registers, reg_count, reg_revers, mode, min_value, max_value, reserved_value, reserv_count);
 8003182:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003184:	9504      	str	r5, [sp, #16]
 8003186:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800318c:	9502      	str	r5, [sp, #8]
 800318e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003190:	9501      	str	r5, [sp, #4]
 8003192:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8003196:	9500      	str	r5, [sp, #0]
 8003198:	f7ff ffa4 	bl	80030e4 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm>
}
 800319c:	4620      	mov	r0, r4
 800319e:	b007      	add	sp, #28
 80031a0:	bd30      	pop	{r4, r5, pc}

080031a2 <_ZNK13Address_field9get_valueEPKhi>:


uint32_t Address_field::get_value(const uint8_t *register_value, int register_count) const {
    if (register_count < (max_address_ + 1))
 80031a2:	88c3      	ldrh	r3, [r0, #6]
 80031a4:	3301      	adds	r3, #1
 80031a6:	4293      	cmp	r3, r2
 80031a8:	dc2e      	bgt.n	8003208 <_ZNK13Address_field9get_valueEPKhi+0x66>
uint32_t Address_field::get_value(const uint8_t *register_value, int register_count) const {
 80031aa:	b430      	push	{r4, r5}
        return -1;
    uint32_t value = 0;
    if(reg_revers_) {
 80031ac:	7943      	ldrb	r3, [r0, #5]
 80031ae:	b19b      	cbz	r3, 80031d8 <_ZNK13Address_field9get_valueEPKhi+0x36>
        for (int i = 0; i < reg_count_; ++i) {
 80031b0:	7905      	ldrb	r5, [r0, #4]
 80031b2:	b365      	cbz	r5, 800320e <_ZNK13Address_field9get_valueEPKhi+0x6c>
 80031b4:	6803      	ldr	r3, [r0, #0]
 80031b6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    uint32_t value = 0;
 80031ba:	2000      	movs	r0, #0
            value <<= registers_[i].bit_count();
 80031bc:	789a      	ldrb	r2, [r3, #2]
 80031be:	4090      	lsls	r0, r2
            value |= (register_value[registers_[i].address()] & registers_[i].mask()) >> registers_[i].bit_bias();
 80031c0:	881a      	ldrh	r2, [r3, #0]
 80031c2:	5c8a      	ldrb	r2, [r1, r2]
 80031c4:	685c      	ldr	r4, [r3, #4]
 80031c6:	4022      	ands	r2, r4
 80031c8:	78dc      	ldrb	r4, [r3, #3]
 80031ca:	40e2      	lsrs	r2, r4
 80031cc:	4310      	orrs	r0, r2
 80031ce:	3308      	adds	r3, #8
        for (int i = 0; i < reg_count_; ++i) {
 80031d0:	42ab      	cmp	r3, r5
 80031d2:	d1f3      	bne.n	80031bc <_ZNK13Address_field9get_valueEPKhi+0x1a>
            value <<= registers_[i].bit_count();
            value |= (register_value[registers_[i].address()] & registers_[i].mask()) >> registers_[i].bit_bias();
        }
    }
    return value;
}
 80031d4:	bc30      	pop	{r4, r5}
 80031d6:	4770      	bx	lr
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 80031d8:	7903      	ldrb	r3, [r0, #4]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d419      	bmi.n	8003212 <_ZNK13Address_field9get_valueEPKhi+0x70>
            value <<= registers_[i].bit_count();
 80031de:	6805      	ldr	r5, [r0, #0]
 80031e0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    uint32_t value = 0;
 80031e4:	2000      	movs	r0, #0
            value <<= registers_[i].bit_count();
 80031e6:	f813 2c06 	ldrb.w	r2, [r3, #-6]
 80031ea:	4090      	lsls	r0, r2
            value |= (register_value[registers_[i].address()] & registers_[i].mask()) >> registers_[i].bit_bias();
 80031ec:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80031f0:	5c8a      	ldrb	r2, [r1, r2]
 80031f2:	f853 4c04 	ldr.w	r4, [r3, #-4]
 80031f6:	4022      	ands	r2, r4
 80031f8:	f813 4c05 	ldrb.w	r4, [r3, #-5]
 80031fc:	40e2      	lsrs	r2, r4
 80031fe:	4310      	orrs	r0, r2
 8003200:	3b08      	subs	r3, #8
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 8003202:	42ab      	cmp	r3, r5
 8003204:	d1ef      	bne.n	80031e6 <_ZNK13Address_field9get_valueEPKhi+0x44>
 8003206:	e7e5      	b.n	80031d4 <_ZNK13Address_field9get_valueEPKhi+0x32>
        return -1;
 8003208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800320c:	4770      	bx	lr
    uint32_t value = 0;
 800320e:	2000      	movs	r0, #0
 8003210:	e7e0      	b.n	80031d4 <_ZNK13Address_field9get_valueEPKhi+0x32>
 8003212:	2000      	movs	r0, #0
 8003214:	e7de      	b.n	80031d4 <_ZNK13Address_field9get_valueEPKhi+0x32>

08003216 <_ZNK13Address_field9set_valueEmPhi>:

bool Address_field::set_value(uint32_t value, uint8_t *register_value, int register_count) const {
 8003216:	b4f0      	push	{r4, r5, r6, r7}
    if ((register_count < (max_address_ + 1)) || (mode_ == 'r') ||
 8003218:	88c4      	ldrh	r4, [r0, #6]
 800321a:	3401      	adds	r4, #1
 800321c:	429c      	cmp	r4, r3
 800321e:	dc65      	bgt.n	80032ec <_ZNK13Address_field9set_valueEmPhi+0xd6>
 8003220:	7e03      	ldrb	r3, [r0, #24]
 8003222:	2b72      	cmp	r3, #114	; 0x72
 8003224:	d066      	beq.n	80032f4 <_ZNK13Address_field9set_valueEmPhi+0xde>
 8003226:	6883      	ldr	r3, [r0, #8]
 8003228:	428b      	cmp	r3, r1
 800322a:	d865      	bhi.n	80032f8 <_ZNK13Address_field9set_valueEmPhi+0xe2>
                (value < min_value_) || (value > max_value_))
 800322c:	68c3      	ldr	r3, [r0, #12]
 800322e:	428b      	cmp	r3, r1
 8003230:	d364      	bcc.n	80032fc <_ZNK13Address_field9set_valueEmPhi+0xe6>
        return true;
    for (uint32_t i = 0; i < reserv_count_; ++i)
 8003232:	6946      	ldr	r6, [r0, #20]
 8003234:	b16e      	cbz	r6, 8003252 <_ZNK13Address_field9set_valueEmPhi+0x3c>
        if (value == reserved_value_[i])
 8003236:	6904      	ldr	r4, [r0, #16]
 8003238:	6823      	ldr	r3, [r4, #0]
 800323a:	428b      	cmp	r3, r1
 800323c:	d060      	beq.n	8003300 <_ZNK13Address_field9set_valueEmPhi+0xea>
    for (uint32_t i = 0; i < reserv_count_; ++i)
 800323e:	2300      	movs	r3, #0
 8003240:	3301      	adds	r3, #1
 8003242:	42b3      	cmp	r3, r6
 8003244:	d005      	beq.n	8003252 <_ZNK13Address_field9set_valueEmPhi+0x3c>
        if (value == reserved_value_[i])
 8003246:	f854 5f04 	ldr.w	r5, [r4, #4]!
 800324a:	428d      	cmp	r5, r1
 800324c:	d1f8      	bne.n	8003240 <_ZNK13Address_field9set_valueEmPhi+0x2a>
            return true;
 800324e:	2301      	movs	r3, #1
 8003250:	e04d      	b.n	80032ee <_ZNK13Address_field9set_valueEmPhi+0xd8>
    if(reg_revers_) {
 8003252:	7943      	ldrb	r3, [r0, #5]
 8003254:	b30b      	cbz	r3, 800329a <_ZNK13Address_field9set_valueEmPhi+0x84>
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 8003256:	7905      	ldrb	r5, [r0, #4]
 8003258:	3d01      	subs	r5, #1
 800325a:	d453      	bmi.n	8003304 <_ZNK13Address_field9set_valueEmPhi+0xee>
 800325c:	00ec      	lsls	r4, r5, #3
            register_value[registers_[i].address()] &= ~registers_[i].mask();
 800325e:	6803      	ldr	r3, [r0, #0]
 8003260:	191f      	adds	r7, r3, r4
 8003262:	5b1e      	ldrh	r6, [r3, r4]
 8003264:	687f      	ldr	r7, [r7, #4]
 8003266:	5d93      	ldrb	r3, [r2, r6]
 8003268:	ea23 0307 	bic.w	r3, r3, r7
 800326c:	5593      	strb	r3, [r2, r6]
            register_value[registers_[i].address()] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
 800326e:	6806      	ldr	r6, [r0, #0]
 8003270:	1933      	adds	r3, r6, r4
 8003272:	78df      	ldrb	r7, [r3, #3]
 8003274:	5b36      	ldrh	r6, [r6, r4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	40fb      	lsrs	r3, r7
 800327a:	400b      	ands	r3, r1
 800327c:	40bb      	lsls	r3, r7
 800327e:	5d97      	ldrb	r7, [r2, r6]
 8003280:	433b      	orrs	r3, r7
 8003282:	5593      	strb	r3, [r2, r6]
    return bit_count_;
 8003284:	6803      	ldr	r3, [r0, #0]
 8003286:	4423      	add	r3, r4
            value >>= registers_[i].bit_count();
 8003288:	789b      	ldrb	r3, [r3, #2]
 800328a:	40d9      	lsrs	r1, r3
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 800328c:	3d01      	subs	r5, #1
 800328e:	3c08      	subs	r4, #8
 8003290:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003294:	d1e3      	bne.n	800325e <_ZNK13Address_field9set_valueEmPhi+0x48>
            register_value[registers_[i].address()] &= ~registers_[i].mask();
            register_value[registers_[i].address()] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
            value >>= registers_[i].bit_count();
        }
    }
    return false;
 8003296:	2300      	movs	r3, #0
 8003298:	e029      	b.n	80032ee <_ZNK13Address_field9set_valueEmPhi+0xd8>
        for (int i = 0; i < reg_count_; ++i) {
 800329a:	7904      	ldrb	r4, [r0, #4]
 800329c:	b33c      	cbz	r4, 80032ee <_ZNK13Address_field9set_valueEmPhi+0xd8>
 800329e:	2500      	movs	r5, #0
 80032a0:	00ee      	lsls	r6, r5, #3
            register_value[registers_[i].address()] &= ~registers_[i].mask();
 80032a2:	6804      	ldr	r4, [r0, #0]
 80032a4:	eb04 0c06 	add.w	ip, r4, r6
 80032a8:	f834 7035 	ldrh.w	r7, [r4, r5, lsl #3]
 80032ac:	f8dc c004 	ldr.w	ip, [ip, #4]
 80032b0:	5dd4      	ldrb	r4, [r2, r7]
 80032b2:	ea24 040c 	bic.w	r4, r4, ip
 80032b6:	55d4      	strb	r4, [r2, r7]
            register_value[registers_[i].address()] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
 80032b8:	6807      	ldr	r7, [r0, #0]
 80032ba:	19bc      	adds	r4, r7, r6
 80032bc:	f894 c003 	ldrb.w	ip, [r4, #3]
 80032c0:	f837 7035 	ldrh.w	r7, [r7, r5, lsl #3]
 80032c4:	6864      	ldr	r4, [r4, #4]
 80032c6:	fa24 f40c 	lsr.w	r4, r4, ip
 80032ca:	400c      	ands	r4, r1
 80032cc:	fa04 f40c 	lsl.w	r4, r4, ip
 80032d0:	f812 c007 	ldrb.w	ip, [r2, r7]
 80032d4:	ea44 040c 	orr.w	r4, r4, ip
 80032d8:	55d4      	strb	r4, [r2, r7]
    return bit_count_;
 80032da:	6804      	ldr	r4, [r0, #0]
 80032dc:	4434      	add	r4, r6
            value >>= registers_[i].bit_count();
 80032de:	78a4      	ldrb	r4, [r4, #2]
 80032e0:	40e1      	lsrs	r1, r4
        for (int i = 0; i < reg_count_; ++i) {
 80032e2:	3501      	adds	r5, #1
 80032e4:	7904      	ldrb	r4, [r0, #4]
 80032e6:	42ac      	cmp	r4, r5
 80032e8:	dcda      	bgt.n	80032a0 <_ZNK13Address_field9set_valueEmPhi+0x8a>
 80032ea:	e000      	b.n	80032ee <_ZNK13Address_field9set_valueEmPhi+0xd8>
        return true;
 80032ec:	2301      	movs	r3, #1
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	bcf0      	pop	{r4, r5, r6, r7}
 80032f2:	4770      	bx	lr
        return true;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e7fa      	b.n	80032ee <_ZNK13Address_field9set_valueEmPhi+0xd8>
 80032f8:	2301      	movs	r3, #1
 80032fa:	e7f8      	b.n	80032ee <_ZNK13Address_field9set_valueEmPhi+0xd8>
 80032fc:	2301      	movs	r3, #1
 80032fe:	e7f6      	b.n	80032ee <_ZNK13Address_field9set_valueEmPhi+0xd8>
            return true;
 8003300:	2301      	movs	r3, #1
 8003302:	e7f4      	b.n	80032ee <_ZNK13Address_field9set_valueEmPhi+0xd8>
    return false;
 8003304:	2300      	movs	r3, #0
 8003306:	e7f2      	b.n	80032ee <_ZNK13Address_field9set_valueEmPhi+0xd8>

08003308 <_ZNK13Address_field9get_valueERK11LoRa_packeth>:

#if defined( ADD_LORA_PACKET_CODE )
uint32_t Address_field::get_value(const class LoRa_packet& packet, uint8_t bias) const {
 8003308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ((SIZE_LORA_PACKET_MAX_LEN - bias) < ((uint32_t)max_address_ + 1))
 800330c:	f1c2 0432 	rsb	r4, r2, #50	; 0x32
 8003310:	88c3      	ldrh	r3, [r0, #6]
 8003312:	3301      	adds	r3, #1
 8003314:	429c      	cmp	r4, r3
 8003316:	d351      	bcc.n	80033bc <_ZNK13Address_field9get_valueERK11LoRa_packeth+0xb4>
 8003318:	4616      	mov	r6, r2
 800331a:	460f      	mov	r7, r1
 800331c:	4604      	mov	r4, r0
        return -1;
    uint32_t value = 0;
    if(reg_revers_) {
 800331e:	7943      	ldrb	r3, [r0, #5]
 8003320:	b30b      	cbz	r3, 8003366 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0x5e>
        for (int i = 0; i < reg_count_; ++i) {
 8003322:	7903      	ldrb	r3, [r0, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d04d      	beq.n	80033c4 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0xbc>
 8003328:	2500      	movs	r5, #0
    uint32_t value = 0;
 800332a:	4628      	mov	r0, r5
 800332c:	ea4f 09c5 	mov.w	r9, r5, lsl #3
            value <<= registers_[i].bit_count();
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	eb03 0209 	add.w	r2, r3, r9
 8003336:	f892 8002 	ldrb.w	r8, [r2, #2]
 800333a:	fa00 f808 	lsl.w	r8, r0, r8
            value |= (packet[registers_[i].address() + bias] & registers_[i].mask()) >> registers_[i].bit_bias();
 800333e:	f833 1035 	ldrh.w	r1, [r3, r5, lsl #3]
 8003342:	4431      	add	r1, r6
 8003344:	4638      	mov	r0, r7
 8003346:	f001 f8a1 	bl	800448c <_ZNK11LoRa_packetixEi>
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	444b      	add	r3, r9
 800334e:	7800      	ldrb	r0, [r0, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	4010      	ands	r0, r2
 8003354:	78db      	ldrb	r3, [r3, #3]
 8003356:	40d8      	lsrs	r0, r3
 8003358:	ea40 0008 	orr.w	r0, r0, r8
        for (int i = 0; i < reg_count_; ++i) {
 800335c:	3501      	adds	r5, #1
 800335e:	7923      	ldrb	r3, [r4, #4]
 8003360:	42ab      	cmp	r3, r5
 8003362:	dce3      	bgt.n	800332c <_ZNK13Address_field9get_valueERK11LoRa_packeth+0x24>
 8003364:	e02c      	b.n	80033c0 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0xb8>
        }
    }
    else {
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 8003366:	f890 9004 	ldrb.w	r9, [r0, #4]
 800336a:	f1b9 0f01 	cmp.w	r9, #1
 800336e:	d42b      	bmi.n	80033c8 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0xc0>
 8003370:	2500      	movs	r5, #0
    uint32_t value = 0;
 8003372:	4628      	mov	r0, r5
 8003374:	f109 5a00 	add.w	sl, r9, #536870912	; 0x20000000
 8003378:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800337c:	ebaa 0205 	sub.w	r2, sl, r5
 8003380:	ea4f 08c2 	mov.w	r8, r2, lsl #3
            value <<= registers_[i].bit_count();
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	eb03 0108 	add.w	r1, r3, r8
 800338a:	f891 b002 	ldrb.w	fp, [r1, #2]
 800338e:	fa00 fb0b 	lsl.w	fp, r0, fp
            value |= (packet[registers_[i].address() + bias] & registers_[i].mask()) >> registers_[i].bit_bias();
 8003392:	f833 1032 	ldrh.w	r1, [r3, r2, lsl #3]
 8003396:	4431      	add	r1, r6
 8003398:	4638      	mov	r0, r7
 800339a:	f001 f877 	bl	800448c <_ZNK11LoRa_packetixEi>
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	4498      	add	r8, r3
 80033a2:	7800      	ldrb	r0, [r0, #0]
 80033a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80033a8:	4018      	ands	r0, r3
 80033aa:	f898 3003 	ldrb.w	r3, [r8, #3]
 80033ae:	40d8      	lsrs	r0, r3
 80033b0:	ea40 000b 	orr.w	r0, r0, fp
 80033b4:	3501      	adds	r5, #1
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 80033b6:	45a9      	cmp	r9, r5
 80033b8:	d1e0      	bne.n	800337c <_ZNK13Address_field9get_valueERK11LoRa_packeth+0x74>
 80033ba:	e001      	b.n	80033c0 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0xb8>
        return -1;
 80033bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
    }
    return value;
}
 80033c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t value = 0;
 80033c4:	2000      	movs	r0, #0
 80033c6:	e7fb      	b.n	80033c0 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0xb8>
 80033c8:	2000      	movs	r0, #0
 80033ca:	e7f9      	b.n	80033c0 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0xb8>

080033cc <_ZNK13Address_field9set_valueEmR11LoRa_packeth>:
bool Address_field::set_value(uint32_t value, class LoRa_packet& packet, uint8_t bias) const {
 80033cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033d0:	4690      	mov	r8, r2
 80033d2:	461e      	mov	r6, r3
    if (((SIZE_LORA_PACKET_MAX_LEN - bias) < ((uint32_t)max_address_ + 1)) || (mode_ == 'r') ||
 80033d4:	f1c3 0232 	rsb	r2, r3, #50	; 0x32
 80033d8:	88c3      	ldrh	r3, [r0, #6]
 80033da:	3301      	adds	r3, #1
 80033dc:	429a      	cmp	r2, r3
 80033de:	f0c0 809f 	bcc.w	8003520 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x154>
 80033e2:	4604      	mov	r4, r0
 80033e4:	460d      	mov	r5, r1
 80033e6:	7e03      	ldrb	r3, [r0, #24]
 80033e8:	2b72      	cmp	r3, #114	; 0x72
 80033ea:	f000 809d 	beq.w	8003528 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x15c>
 80033ee:	6883      	ldr	r3, [r0, #8]
 80033f0:	428b      	cmp	r3, r1
 80033f2:	f200 809b 	bhi.w	800352c <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x160>
                (value < min_value_) || (value > max_value_))
 80033f6:	68c3      	ldr	r3, [r0, #12]
 80033f8:	428b      	cmp	r3, r1
 80033fa:	f0c0 8099 	bcc.w	8003530 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x164>
        return true;
    for (uint32_t i = 0; i < reserv_count_; ++i)
 80033fe:	6940      	ldr	r0, [r0, #20]
 8003400:	b170      	cbz	r0, 8003420 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x54>
        if (value == reserved_value_[i])
 8003402:	6922      	ldr	r2, [r4, #16]
 8003404:	6813      	ldr	r3, [r2, #0]
 8003406:	428b      	cmp	r3, r1
 8003408:	f000 8094 	beq.w	8003534 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x168>
    for (uint32_t i = 0; i < reserv_count_; ++i)
 800340c:	2300      	movs	r3, #0
 800340e:	3301      	adds	r3, #1
 8003410:	4298      	cmp	r0, r3
 8003412:	d005      	beq.n	8003420 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x54>
        if (value == reserved_value_[i])
 8003414:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8003418:	42a9      	cmp	r1, r5
 800341a:	d1f8      	bne.n	800340e <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x42>
            return true;
 800341c:	2701      	movs	r7, #1
 800341e:	e080      	b.n	8003522 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x156>

    // while(packet.get_len() < max_address_ + bias)
    //     packet.add_packet_data(0);
    packet.add_packet_data(&packet[packet.get_len()-1], max_address_ + bias - packet.get_len() + 1);
 8003420:	4640      	mov	r0, r8
 8003422:	f001 f827 	bl	8004474 <_ZNK11LoRa_packet7get_lenEv>
 8003426:	1e41      	subs	r1, r0, #1
 8003428:	4640      	mov	r0, r8
 800342a:	f001 f82b 	bl	8004484 <_ZN11LoRa_packetixEi>
 800342e:	4681      	mov	r9, r0
 8003430:	79a7      	ldrb	r7, [r4, #6]
 8003432:	4437      	add	r7, r6
 8003434:	b2ff      	uxtb	r7, r7
 8003436:	4640      	mov	r0, r8
 8003438:	f001 f81c 	bl	8004474 <_ZNK11LoRa_packet7get_lenEv>
 800343c:	3701      	adds	r7, #1
 800343e:	1a3f      	subs	r7, r7, r0
 8003440:	b2fa      	uxtb	r2, r7
 8003442:	4649      	mov	r1, r9
 8003444:	4640      	mov	r0, r8
 8003446:	f000 ffde 	bl	8004406 <_ZN11LoRa_packet15add_packet_dataEPKhh>

    if(reg_revers_) {
 800344a:	7967      	ldrb	r7, [r4, #5]
 800344c:	b397      	cbz	r7, 80034b4 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0xe8>
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 800344e:	f894 a004 	ldrb.w	sl, [r4, #4]
 8003452:	f1ba 0a01 	subs.w	sl, sl, #1
 8003456:	d46f      	bmi.n	8003538 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x16c>
 8003458:	ea4f 09ca 	mov.w	r9, sl, lsl #3
            packet[registers_[i].address() + bias] &= ~registers_[i].mask();
 800345c:	6822      	ldr	r2, [r4, #0]
 800345e:	eb02 0309 	add.w	r3, r2, r9
 8003462:	685f      	ldr	r7, [r3, #4]
 8003464:	43ff      	mvns	r7, r7
 8003466:	f832 1009 	ldrh.w	r1, [r2, r9]
 800346a:	4431      	add	r1, r6
 800346c:	4640      	mov	r0, r8
 800346e:	f001 f809 	bl	8004484 <_ZN11LoRa_packetixEi>
 8003472:	7803      	ldrb	r3, [r0, #0]
 8003474:	403b      	ands	r3, r7
 8003476:	7003      	strb	r3, [r0, #0]
            packet[registers_[i].address() + bias] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
 8003478:	6823      	ldr	r3, [r4, #0]
 800347a:	eb03 0109 	add.w	r1, r3, r9
 800347e:	78ca      	ldrb	r2, [r1, #3]
 8003480:	684f      	ldr	r7, [r1, #4]
 8003482:	40d7      	lsrs	r7, r2
 8003484:	402f      	ands	r7, r5
 8003486:	4097      	lsls	r7, r2
 8003488:	f833 1009 	ldrh.w	r1, [r3, r9]
 800348c:	4431      	add	r1, r6
 800348e:	4640      	mov	r0, r8
 8003490:	f000 fff8 	bl	8004484 <_ZN11LoRa_packetixEi>
 8003494:	7803      	ldrb	r3, [r0, #0]
 8003496:	431f      	orrs	r7, r3
 8003498:	7007      	strb	r7, [r0, #0]
    return bit_count_;
 800349a:	6823      	ldr	r3, [r4, #0]
 800349c:	444b      	add	r3, r9
            value >>= registers_[i].bit_count();
 800349e:	789b      	ldrb	r3, [r3, #2]
 80034a0:	40dd      	lsrs	r5, r3
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 80034a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80034a6:	f1a9 0908 	sub.w	r9, r9, #8
 80034aa:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80034ae:	d1d5      	bne.n	800345c <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x90>
            packet[registers_[i].address() + bias] &= ~registers_[i].mask();
            packet[registers_[i].address() + bias] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
            value >>= registers_[i].bit_count();
        }
    }
    return false;
 80034b0:	2700      	movs	r7, #0
 80034b2:	e036      	b.n	8003522 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x156>
        for (int i = 0; i < reg_count_; ++i) {
 80034b4:	7923      	ldrb	r3, [r4, #4]
 80034b6:	b3a3      	cbz	r3, 8003522 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x156>
 80034b8:	f04f 0a00 	mov.w	sl, #0
 80034bc:	ea4f 0bca 	mov.w	fp, sl, lsl #3
            packet[registers_[i].address() + bias] &= ~registers_[i].mask();
 80034c0:	6822      	ldr	r2, [r4, #0]
 80034c2:	eb02 030b 	add.w	r3, r2, fp
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	ea6f 0903 	mvn.w	r9, r3
 80034cc:	f832 103a 	ldrh.w	r1, [r2, sl, lsl #3]
 80034d0:	4431      	add	r1, r6
 80034d2:	4640      	mov	r0, r8
 80034d4:	f000 ffd6 	bl	8004484 <_ZN11LoRa_packetixEi>
 80034d8:	7803      	ldrb	r3, [r0, #0]
 80034da:	ea03 0309 	and.w	r3, r3, r9
 80034de:	7003      	strb	r3, [r0, #0]
            packet[registers_[i].address() + bias] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
 80034e0:	6822      	ldr	r2, [r4, #0]
 80034e2:	eb02 030b 	add.w	r3, r2, fp
 80034e6:	78d9      	ldrb	r1, [r3, #3]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	fa23 f901 	lsr.w	r9, r3, r1
 80034ee:	ea09 0905 	and.w	r9, r9, r5
 80034f2:	fa09 f901 	lsl.w	r9, r9, r1
 80034f6:	f832 103a 	ldrh.w	r1, [r2, sl, lsl #3]
 80034fa:	4431      	add	r1, r6
 80034fc:	4640      	mov	r0, r8
 80034fe:	f000 ffc1 	bl	8004484 <_ZN11LoRa_packetixEi>
 8003502:	7803      	ldrb	r3, [r0, #0]
 8003504:	ea43 0909 	orr.w	r9, r3, r9
 8003508:	f880 9000 	strb.w	r9, [r0]
    return bit_count_;
 800350c:	6823      	ldr	r3, [r4, #0]
 800350e:	445b      	add	r3, fp
            value >>= registers_[i].bit_count();
 8003510:	789b      	ldrb	r3, [r3, #2]
 8003512:	40dd      	lsrs	r5, r3
        for (int i = 0; i < reg_count_; ++i) {
 8003514:	f10a 0a01 	add.w	sl, sl, #1
 8003518:	7923      	ldrb	r3, [r4, #4]
 800351a:	4553      	cmp	r3, sl
 800351c:	dcce      	bgt.n	80034bc <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0xf0>
 800351e:	e000      	b.n	8003522 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x156>
        return true;
 8003520:	2701      	movs	r7, #1
}
 8003522:	4638      	mov	r0, r7
 8003524:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return true;
 8003528:	2701      	movs	r7, #1
 800352a:	e7fa      	b.n	8003522 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x156>
 800352c:	2701      	movs	r7, #1
 800352e:	e7f8      	b.n	8003522 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x156>
 8003530:	2701      	movs	r7, #1
 8003532:	e7f6      	b.n	8003522 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x156>
            return true;
 8003534:	2701      	movs	r7, #1
 8003536:	e7f4      	b.n	8003522 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x156>
    return false;
 8003538:	2700      	movs	r7, #0
 800353a:	e7f2      	b.n	8003522 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x156>

0800353c <_ZNK13Address_field13get_registersEv>:
#endif

const Register *Address_field::get_registers() const {
    return registers_;
}
 800353c:	6800      	ldr	r0, [r0, #0]
 800353e:	4770      	bx	lr

08003540 <_ZNK13Address_field13get_reg_countEv>:
uint8_t Address_field::get_reg_count() const {
    return reg_count_;
}
 8003540:	7900      	ldrb	r0, [r0, #4]
 8003542:	4770      	bx	lr

08003544 <_ZeqRK13Address_fieldS1_>:
char Address_field::get_mode() const {
    return mode_;
}

bool operator==(const Address_field& left, const Address_field& right) {
    if(left.reg_count_ != right.reg_count_)
 8003544:	7903      	ldrb	r3, [r0, #4]
 8003546:	790a      	ldrb	r2, [r1, #4]
 8003548:	429a      	cmp	r2, r3
 800354a:	d001      	beq.n	8003550 <_ZeqRK13Address_fieldS1_+0xc>
        return false;
 800354c:	2000      	movs	r0, #0
    for(uint32_t i = 0; i < left.reserv_count_; ++i) {
        if(left.reserved_value_[i] != right.reserved_value_[i])
            return false;
    }
    return true;
}
 800354e:	4770      	bx	lr
bool operator==(const Address_field& left, const Address_field& right) {
 8003550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(left.max_address_ != right.max_address_)
 8003554:	88c4      	ldrh	r4, [r0, #6]
 8003556:	88ca      	ldrh	r2, [r1, #6]
 8003558:	4294      	cmp	r4, r2
 800355a:	d002      	beq.n	8003562 <_ZeqRK13Address_fieldS1_+0x1e>
        return false;
 800355c:	2000      	movs	r0, #0
}
 800355e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(left.min_value_ != right.min_value_)
 8003562:	6884      	ldr	r4, [r0, #8]
 8003564:	688a      	ldr	r2, [r1, #8]
 8003566:	4294      	cmp	r4, r2
 8003568:	d001      	beq.n	800356e <_ZeqRK13Address_fieldS1_+0x2a>
        return false;
 800356a:	2000      	movs	r0, #0
 800356c:	e7f7      	b.n	800355e <_ZeqRK13Address_fieldS1_+0x1a>
    if(left.max_value_ != right.max_value_)
 800356e:	68c4      	ldr	r4, [r0, #12]
 8003570:	68ca      	ldr	r2, [r1, #12]
 8003572:	4294      	cmp	r4, r2
 8003574:	d001      	beq.n	800357a <_ZeqRK13Address_fieldS1_+0x36>
        return false;
 8003576:	2000      	movs	r0, #0
 8003578:	e7f1      	b.n	800355e <_ZeqRK13Address_fieldS1_+0x1a>
    if(left.reserv_count_ != right.reserv_count_)
 800357a:	6945      	ldr	r5, [r0, #20]
 800357c:	694a      	ldr	r2, [r1, #20]
 800357e:	4295      	cmp	r5, r2
 8003580:	d001      	beq.n	8003586 <_ZeqRK13Address_fieldS1_+0x42>
        return false;
 8003582:	2000      	movs	r0, #0
 8003584:	e7eb      	b.n	800355e <_ZeqRK13Address_fieldS1_+0x1a>
    if(left.mode_ != right.mode_)
 8003586:	7e04      	ldrb	r4, [r0, #24]
 8003588:	7e0a      	ldrb	r2, [r1, #24]
 800358a:	4294      	cmp	r4, r2
 800358c:	d001      	beq.n	8003592 <_ZeqRK13Address_fieldS1_+0x4e>
        return false;
 800358e:	2000      	movs	r0, #0
 8003590:	e7e5      	b.n	800355e <_ZeqRK13Address_fieldS1_+0x1a>
 8003592:	4688      	mov	r8, r1
 8003594:	4604      	mov	r4, r0
    for(int i = 0; i < left.reg_count_; ++i) {
 8003596:	469a      	mov	sl, r3
 8003598:	b173      	cbz	r3, 80035b8 <_ZeqRK13Address_fieldS1_+0x74>
 800359a:	6807      	ldr	r7, [r0, #0]
 800359c:	680e      	ldr	r6, [r1, #0]
 800359e:	f04f 0900 	mov.w	r9, #0
        if(left.registers_[i] != right.registers_[i])
 80035a2:	4631      	mov	r1, r6
 80035a4:	4638      	mov	r0, r7
 80035a6:	f7ff fd95 	bl	80030d4 <_ZneRK8RegisterS1_>
 80035aa:	b9e8      	cbnz	r0, 80035e8 <_ZeqRK13Address_fieldS1_+0xa4>
    for(int i = 0; i < left.reg_count_; ++i) {
 80035ac:	f109 0901 	add.w	r9, r9, #1
 80035b0:	3708      	adds	r7, #8
 80035b2:	3608      	adds	r6, #8
 80035b4:	45d1      	cmp	r9, sl
 80035b6:	d1f4      	bne.n	80035a2 <_ZeqRK13Address_fieldS1_+0x5e>
    for(uint32_t i = 0; i < left.reserv_count_; ++i) {
 80035b8:	b1a5      	cbz	r5, 80035e4 <_ZeqRK13Address_fieldS1_+0xa0>
        if(left.reserved_value_[i] != right.reserved_value_[i])
 80035ba:	6921      	ldr	r1, [r4, #16]
 80035bc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80035c0:	6808      	ldr	r0, [r1, #0]
 80035c2:	6813      	ldr	r3, [r2, #0]
 80035c4:	4298      	cmp	r0, r3
 80035c6:	d111      	bne.n	80035ec <_ZeqRK13Address_fieldS1_+0xa8>
    for(uint32_t i = 0; i < left.reserv_count_; ++i) {
 80035c8:	2300      	movs	r3, #0
 80035ca:	3301      	adds	r3, #1
 80035cc:	429d      	cmp	r5, r3
 80035ce:	d007      	beq.n	80035e0 <_ZeqRK13Address_fieldS1_+0x9c>
        if(left.reserved_value_[i] != right.reserved_value_[i])
 80035d0:	f851 4f04 	ldr.w	r4, [r1, #4]!
 80035d4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80035d8:	4284      	cmp	r4, r0
 80035da:	d0f6      	beq.n	80035ca <_ZeqRK13Address_fieldS1_+0x86>
            return false;
 80035dc:	2000      	movs	r0, #0
 80035de:	e7be      	b.n	800355e <_ZeqRK13Address_fieldS1_+0x1a>
    return true;
 80035e0:	2001      	movs	r0, #1
 80035e2:	e7bc      	b.n	800355e <_ZeqRK13Address_fieldS1_+0x1a>
 80035e4:	2001      	movs	r0, #1
 80035e6:	e7ba      	b.n	800355e <_ZeqRK13Address_fieldS1_+0x1a>
            return false;
 80035e8:	2000      	movs	r0, #0
 80035ea:	e7b8      	b.n	800355e <_ZeqRK13Address_fieldS1_+0x1a>
            return false;
 80035ec:	2000      	movs	r0, #0
 80035ee:	e7b6      	b.n	800355e <_ZeqRK13Address_fieldS1_+0x1a>

080035f0 <_ZN10LoRa_classD1Ev>:
	init(nullptr);
}
LoRa_class::LoRa_class(SPI_HandleTypeDef *spi) {
	init(spi);
}
LoRa_class::~LoRa_class() {
 80035f0:	b510      	push	{r4, lr}
 80035f2:	4604      	mov	r4, r0
    if(_spi != nullptr)
 80035f4:	6800      	ldr	r0, [r0, #0]
 80035f6:	b110      	cbz	r0, 80035fe <_ZN10LoRa_classD1Ev+0xe>
        delete _spi;
 80035f8:	2158      	movs	r1, #88	; 0x58
 80035fa:	f007 f8e9 	bl	800a7d0 <_ZdlPvj>
LoRa_class::~LoRa_class() {
 80035fe:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8003602:	f000 ff93 	bl	800452c <_ZN13LoRa_registerD1Ev>
}
 8003606:	4620      	mov	r0, r4
 8003608:	bd10      	pop	{r4, pc}
	...

0800360c <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef>:

void LoRa_class::init(SPI_HandleTypeDef *spi) {
 800360c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_reset_pin = LORA_RESET_Pin;
 800360e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003612:	8083      	strh	r3, [r0, #4]
	_reset_port = LORA_RESET_GPIO_Port;
 8003614:	4c0e      	ldr	r4, [pc, #56]	; (8003650 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef+0x44>)
 8003616:	6084      	str	r4, [r0, #8]
	_nss_pin = LORA_NSS_Pin;
 8003618:	2310      	movs	r3, #16
 800361a:	8183      	strh	r3, [r0, #12]
	_nss_port = LORA_NSS_GPIO_Port;
 800361c:	4a0d      	ldr	r2, [pc, #52]	; (8003654 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef+0x48>)
 800361e:	6102      	str	r2, [r0, #16]
#ifdef LoRa_DIO0_Pin
	_dio0_pin = LORA_DIO0_Pin;
 8003620:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8003624:	8285      	strh	r5, [r0, #20]
	_dio0_port = LORA_DIO0_GPIO_Port;
 8003626:	6184      	str	r4, [r0, #24]
#else
	_dio0_pin = 0;
	_dio0_port = 0;
#endif
#ifdef LoRa_DIO1_Pin
	_dio1_pin = LORA_DIO1_Pin;
 8003628:	2504      	movs	r5, #4
 800362a:	8385      	strh	r5, [r0, #28]
	_dio1_port = LORA_DIO1_GPIO_Port;
 800362c:	6204      	str	r4, [r0, #32]
#endif
#ifdef LoRa_DIO3_Pin
	_dio3_pin = LORA_DIO3_Pin;
	_dio3_port = LORA_DIO3_GPIO_Port;
#else
	_dio3_pin = 0;
 800362e:	2400      	movs	r4, #0
 8003630:	8484      	strh	r4, [r0, #36]	; 0x24
	_dio3_port = 0;
 8003632:	6284      	str	r4, [r0, #40]	; 0x28
#endif
	_spi = spi;
 8003634:	6001      	str	r1, [r0, #0]
	_frequency = 0;
 8003636:	2600      	movs	r6, #0
 8003638:	2700      	movs	r7, #0
 800363a:	e9c0 670c 	strd	r6, r7, [r0, #48]	; 0x30
	_FifoTxBaseAddr = 0;
 800363e:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
	_packet_length = 0;
 8003642:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
	_reg_field.init(spi, _nss_port, _nss_pin);
 8003646:	303c      	adds	r0, #60	; 0x3c
 8003648:	f000 ff71 	bl	800452e <_ZN13LoRa_register4initEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
}
 800364c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800364e:	bf00      	nop
 8003650:	40010c00 	.word	0x40010c00
 8003654:	40010800 	.word	0x40010800

08003658 <_ZN10LoRa_classC1Ev>:
LoRa_class::LoRa_class(/* args */) {
 8003658:	b510      	push	{r4, lr}
 800365a:	4604      	mov	r4, r0
 800365c:	303c      	adds	r0, #60	; 0x3c
 800365e:	f000 ff7d 	bl	800455c <_ZN13LoRa_registerC1Ev>
	init(nullptr);
 8003662:	2100      	movs	r1, #0
 8003664:	4620      	mov	r0, r4
 8003666:	f7ff ffd1 	bl	800360c <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef>
}
 800366a:	4620      	mov	r0, r4
 800366c:	bd10      	pop	{r4, pc}

0800366e <_ZN10LoRa_class9field_setE13Address_fieldmb>:

uint8_t LoRa_class::field_set(Address_field field, uint32_t value, bool write) {
 800366e:	b084      	sub	sp, #16
 8003670:	b570      	push	{r4, r5, r6, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	ac0b      	add	r4, sp, #44	; 0x2c
 8003676:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800367a:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
    uint8_t result;
    result = _reg_field.set_field_value(field, value);
 800367e:	f100 053c 	add.w	r5, r0, #60	; 0x3c
 8003682:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003684:	9304      	str	r3, [sp, #16]
 8003686:	ab0e      	add	r3, sp, #56	; 0x38
 8003688:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800368a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800368e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003692:	4628      	mov	r0, r5
 8003694:	f001 f998 	bl	80049c8 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
    if(write) {
 8003698:	b926      	cbnz	r6, 80036a4 <_ZN10LoRa_class9field_setE13Address_fieldmb+0x36>
        result = _reg_field.register_write(field, true, true);
    }
    return result;
}
 800369a:	b006      	add	sp, #24
 800369c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80036a0:	b004      	add	sp, #16
 80036a2:	4770      	bx	lr
        result = _reg_field.register_write(field, true, true);
 80036a4:	2301      	movs	r3, #1
 80036a6:	9305      	str	r3, [sp, #20]
 80036a8:	9304      	str	r3, [sp, #16]
 80036aa:	ab0e      	add	r3, sp, #56	; 0x38
 80036ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036ae:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80036b2:	ab0b      	add	r3, sp, #44	; 0x2c
 80036b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036b6:	4628      	mov	r0, r5
 80036b8:	f001 f9d2 	bl	8004a60 <_ZN13LoRa_register14register_writeE13Address_fieldbb>
 80036bc:	e7ed      	b.n	800369a <_ZN10LoRa_class9field_setE13Address_fieldmb+0x2c>

080036be <_ZN10LoRa_class9field_setEP13Address_fieldPmhb>:
uint8_t LoRa_class::field_set(Address_field* fields, uint32_t* values, uint8_t amt, bool write) {
 80036be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036c0:	b083      	sub	sp, #12
 80036c2:	460e      	mov	r6, r1
 80036c4:	461f      	mov	r7, r3
 80036c6:	f89d 5020 	ldrb.w	r5, [sp, #32]
    uint8_t result;
    result = _reg_field.set_field_value(fields, values, amt);
 80036ca:	f100 043c 	add.w	r4, r0, #60	; 0x3c
 80036ce:	4620      	mov	r0, r4
 80036d0:	f001 f936 	bl	8004940 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
    if(write) {
 80036d4:	b90d      	cbnz	r5, 80036da <_ZN10LoRa_class9field_setEP13Address_fieldPmhb+0x1c>
        result = _reg_field.register_write(fields, amt, true, true);
    }
    return result;
}
 80036d6:	b003      	add	sp, #12
 80036d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        result = _reg_field.register_write(fields, amt, true, true);
 80036da:	2301      	movs	r3, #1
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	463a      	mov	r2, r7
 80036e0:	4631      	mov	r1, r6
 80036e2:	4620      	mov	r0, r4
 80036e4:	f001 f984 	bl	80049f0 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
 80036e8:	e7f5      	b.n	80036d6 <_ZN10LoRa_class9field_setEP13Address_fieldPmhb+0x18>

080036ea <_ZN10LoRa_class9field_getE13Address_fieldPmb>:

uint8_t LoRa_class::field_get(Address_field field, uint32_t* value, bool read) {
 80036ea:	b084      	sub	sp, #16
 80036ec:	b530      	push	{r4, r5, lr}
 80036ee:	b087      	sub	sp, #28
 80036f0:	ac0b      	add	r4, sp, #44	; 0x2c
 80036f2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return _reg_field.get_field_value(field, value, read);
 80036f6:	f100 053c 	add.w	r5, r0, #60	; 0x3c
 80036fa:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80036fe:	9305      	str	r3, [sp, #20]
 8003700:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003702:	9304      	str	r3, [sp, #16]
 8003704:	ab0e      	add	r3, sp, #56	; 0x38
 8003706:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003708:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800370c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003710:	4628      	mov	r0, r5
 8003712:	f001 f902 	bl	800491a <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>
}
 8003716:	b007      	add	sp, #28
 8003718:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800371c:	b004      	add	sp, #16
 800371e:	4770      	bx	lr

08003720 <_ZN10LoRa_class9field_getEP13Address_fieldPmhb>:
uint8_t LoRa_class::field_get(Address_field fields[], uint32_t* values, uint8_t amt, bool read) {
 8003720:	b510      	push	{r4, lr}
 8003722:	b082      	sub	sp, #8
    return _reg_field.get_field_value(fields, values, amt, read);
 8003724:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8003728:	9400      	str	r4, [sp, #0]
 800372a:	303c      	adds	r0, #60	; 0x3c
 800372c:	f001 f8c7 	bl	80048be <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb>
}
 8003730:	b002      	add	sp, #8
 8003732:	bd10      	pop	{r4, pc}

08003734 <_ZN10LoRa_class8set_modeEh>:
    // переход в режим сна
    mode_sleep();
}


uint8_t LoRa_class::set_mode(uint8_t mode) {
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003736:	b09b      	sub	sp, #108	; 0x6c
 8003738:	4606      	mov	r6, r0
 800373a:	460f      	mov	r7, r1
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 800373c:	ac05      	add	r4, sp, #20
 800373e:	4d12      	ldr	r5, [pc, #72]	; (8003788 <_ZN10LoRa_class8set_modeEh+0x54>)
 8003740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003744:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003748:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800374c:	ac0c      	add	r4, sp, #48	; 0x30
 800374e:	4d0f      	ldr	r5, [pc, #60]	; (800378c <_ZN10LoRa_class8set_modeEh+0x58>)
 8003750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003754:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003758:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800375c:	ac13      	add	r4, sp, #76	; 0x4c
 800375e:	4d0c      	ldr	r5, [pc, #48]	; (8003790 <_ZN10LoRa_class8set_modeEh+0x5c>)
 8003760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003764:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003768:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    uint32_t values[3] = {1, 0, mode};
 800376c:	2300      	movs	r3, #0
 800376e:	9303      	str	r3, [sp, #12]
 8003770:	2301      	movs	r3, #1
 8003772:	9302      	str	r3, [sp, #8]
 8003774:	9704      	str	r7, [sp, #16]
    return field_set(fields, values, 3);
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	2303      	movs	r3, #3
 800377a:	aa02      	add	r2, sp, #8
 800377c:	a905      	add	r1, sp, #20
 800377e:	4630      	mov	r0, r6
 8003780:	f7ff ff9d 	bl	80036be <_ZN10LoRa_class9field_setEP13Address_fieldPmhb>
}
 8003784:	b01b      	add	sp, #108	; 0x6c
 8003786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003788:	20001d14 	.word	0x20001d14
 800378c:	20001d4c 	.word	0x20001d4c
 8003790:	20001d84 	.word	0x20001d84

08003794 <_ZN10LoRa_class10mode_sleepEv>:
// Режим сна/настройки
uint8_t LoRa_class::mode_sleep() {
 8003794:	b508      	push	{r3, lr}
    return set_mode(MODE_SLEEP);
 8003796:	2100      	movs	r1, #0
 8003798:	f7ff ffcc 	bl	8003734 <_ZN10LoRa_class8set_modeEh>
}
 800379c:	bd08      	pop	{r3, pc}

0800379e <_ZN10LoRa_class10mode_STDBYEv>:
// Режим ожидания
uint8_t LoRa_class::mode_STDBY() {
 800379e:	b508      	push	{r3, lr}
    return set_mode(MODE_STDBY);
 80037a0:	2101      	movs	r1, #1
 80037a2:	f7ff ffc7 	bl	8003734 <_ZN10LoRa_class8set_modeEh>
}
 80037a6:	bd08      	pop	{r3, pc}

080037a8 <_ZN10LoRa_class7mode_TXEb>:
// Режим отправки
uint8_t LoRa_class::mode_TX(bool set_dio) {
 80037a8:	b530      	push	{r4, r5, lr}
 80037aa:	b087      	sub	sp, #28
 80037ac:	4604      	mov	r4, r0
    if (set_dio & (_dio0_pin != 0))
 80037ae:	8a83      	ldrh	r3, [r0, #20]
 80037b0:	b173      	cbz	r3, 80037d0 <_ZN10LoRa_class7mode_TXEb+0x28>
 80037b2:	b169      	cbz	r1, 80037d0 <_ZN10LoRa_class7mode_TXEb+0x28>
        field_set(Dio0Mapping, 1);
 80037b4:	4d09      	ldr	r5, [pc, #36]	; (80037dc <_ZN10LoRa_class7mode_TXEb+0x34>)
 80037b6:	2301      	movs	r3, #1
 80037b8:	9305      	str	r3, [sp, #20]
 80037ba:	9304      	str	r3, [sp, #16]
 80037bc:	f105 030c 	add.w	r3, r5, #12
 80037c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037c2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80037c6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80037ca:	4620      	mov	r0, r4
 80037cc:	f7ff ff4f 	bl	800366e <_ZN10LoRa_class9field_setE13Address_fieldmb>
    return set_mode(MODE_TX);
 80037d0:	2103      	movs	r1, #3
 80037d2:	4620      	mov	r0, r4
 80037d4:	f7ff ffae 	bl	8003734 <_ZN10LoRa_class8set_modeEh>
}
 80037d8:	b007      	add	sp, #28
 80037da:	bd30      	pop	{r4, r5, pc}
 80037dc:	20001be0 	.word	0x20001be0

080037e0 <_ZN10LoRa_class9mode_FSTXEv>:
uint8_t LoRa_class::mode_FSTX() {
 80037e0:	b508      	push	{r3, lr}
    return set_mode(MODE_FSTX);
 80037e2:	2102      	movs	r1, #2
 80037e4:	f7ff ffa6 	bl	8003734 <_ZN10LoRa_class8set_modeEh>
}
 80037e8:	bd08      	pop	{r3, pc}
	...

080037ec <_ZN10LoRa_class14mode_RX_singleEb>:
        field_set(Dio1Mapping, 0);
    }
    return set_mode(MODE_RX_CONTINUOUS);
}
// Режим единичного приёма
uint8_t LoRa_class::mode_RX_single(bool set_dio) {
 80037ec:	b570      	push	{r4, r5, r6, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	4604      	mov	r4, r0
    if (set_dio & ((_dio0_pin != 0) || (_dio1_pin != 0))) {
 80037f2:	8a83      	ldrh	r3, [r0, #20]
 80037f4:	bb3b      	cbnz	r3, 8003846 <_ZN10LoRa_class14mode_RX_singleEb+0x5a>
 80037f6:	8b83      	ldrh	r3, [r0, #28]
 80037f8:	3300      	adds	r3, #0
 80037fa:	bf18      	it	ne
 80037fc:	2301      	movne	r3, #1
 80037fe:	b1e3      	cbz	r3, 800383a <_ZN10LoRa_class14mode_RX_singleEb+0x4e>
 8003800:	b1d9      	cbz	r1, 800383a <_ZN10LoRa_class14mode_RX_singleEb+0x4e>
        field_set(Dio0Mapping, 0, false);
 8003802:	4d12      	ldr	r5, [pc, #72]	; (800384c <_ZN10LoRa_class14mode_RX_singleEb+0x60>)
 8003804:	2600      	movs	r6, #0
 8003806:	9605      	str	r6, [sp, #20]
 8003808:	9604      	str	r6, [sp, #16]
 800380a:	f105 030c 	add.w	r3, r5, #12
 800380e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003810:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003814:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003818:	4620      	mov	r0, r4
 800381a:	f7ff ff28 	bl	800366e <_ZN10LoRa_class9field_setE13Address_fieldmb>
        field_set(Dio1Mapping, 0);
 800381e:	4d0c      	ldr	r5, [pc, #48]	; (8003850 <_ZN10LoRa_class14mode_RX_singleEb+0x64>)
 8003820:	2301      	movs	r3, #1
 8003822:	9305      	str	r3, [sp, #20]
 8003824:	9604      	str	r6, [sp, #16]
 8003826:	f105 030c 	add.w	r3, r5, #12
 800382a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800382c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003830:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003834:	4620      	mov	r0, r4
 8003836:	f7ff ff1a 	bl	800366e <_ZN10LoRa_class9field_setE13Address_fieldmb>
    }
    return set_mode(MODE_RX_SINGLE);
 800383a:	2106      	movs	r1, #6
 800383c:	4620      	mov	r0, r4
 800383e:	f7ff ff79 	bl	8003734 <_ZN10LoRa_class8set_modeEh>
}
 8003842:	b006      	add	sp, #24
 8003844:	bd70      	pop	{r4, r5, r6, pc}
    if (set_dio & ((_dio0_pin != 0) || (_dio1_pin != 0))) {
 8003846:	2301      	movs	r3, #1
 8003848:	e7d9      	b.n	80037fe <_ZN10LoRa_class14mode_RX_singleEb+0x12>
 800384a:	bf00      	nop
 800384c:	20001be0 	.word	0x20001be0
 8003850:	20001bfc 	.word	0x20001bfc

08003854 <_ZN10LoRa_class12set_TX_powerEhbh>:
    return set_mode(MODE_CAD);
}


// Установка силы отправляемого пакета
uint8_t LoRa_class::set_TX_power(uint8_t power, bool paboost, uint8_t max_power) {
 8003854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003858:	b0a2      	sub	sp, #136	; 0x88
 800385a:	4607      	mov	r7, r0
 800385c:	460c      	mov	r4, r1
 800385e:	4690      	mov	r8, r2
 8003860:	469c      	mov	ip, r3
    Address_field fields[4] = {PaDac, PaSelect, MaxPower, OutputPower};
 8003862:	ad06      	add	r5, sp, #24
 8003864:	4e2d      	ldr	r6, [pc, #180]	; (800391c <_ZN10LoRa_class12set_TX_powerEhbh+0xc8>)
 8003866:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800386a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800386e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003872:	ad0d      	add	r5, sp, #52	; 0x34
 8003874:	4e2a      	ldr	r6, [pc, #168]	; (8003920 <_ZN10LoRa_class12set_TX_powerEhbh+0xcc>)
 8003876:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003878:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800387a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800387e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003882:	ad14      	add	r5, sp, #80	; 0x50
 8003884:	4e27      	ldr	r6, [pc, #156]	; (8003924 <_ZN10LoRa_class12set_TX_powerEhbh+0xd0>)
 8003886:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800388a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800388e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003892:	ad1b      	add	r5, sp, #108	; 0x6c
 8003894:	4e24      	ldr	r6, [pc, #144]	; (8003928 <_ZN10LoRa_class12set_TX_powerEhbh+0xd4>)
 8003896:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003898:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800389a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800389e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    uint32_t pa_dac, pa_select;
    int16_t power_adjustment, min_power_value, max_power_value;
    if (max_power < 0x01)
 80038a2:	f1bc 0f00 	cmp.w	ip, #0
 80038a6:	d031      	beq.n	800390c <_ZN10LoRa_class12set_TX_powerEhbh+0xb8>
 80038a8:	4665      	mov	r5, ip
 80038aa:	2d07      	cmp	r5, #7
 80038ac:	bf28      	it	cs
 80038ae:	2507      	movcs	r5, #7
        max_power = 0x01;
    else if (max_power > 0x07)
        max_power = 0x07;
    _reg_field.register_read(fields, 4);
 80038b0:	2301      	movs	r3, #1
 80038b2:	2204      	movs	r2, #4
 80038b4:	a906      	add	r1, sp, #24
 80038b6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80038ba:	f000 ffca 	bl	8004852 <_ZN13LoRa_register13register_readEP13Address_fieldhb>
    // Изменение бита PABOOST
    if (paboost) {
 80038be:	f1b8 0f00 	cmp.w	r8, #0
 80038c2:	d025      	beq.n	8003910 <_ZN10LoRa_class12set_TX_powerEhbh+0xbc>
        pa_select = 1;
        min_power_value = 2;
        max_power_value = 20;
 80038c4:	2314      	movs	r3, #20
 80038c6:	2202      	movs	r2, #2
 80038c8:	2c11      	cmp	r4, #17
 80038ca:	bf8c      	ite	hi
 80038cc:	f06f 0004 	mvnhi.w	r0, #4
 80038d0:	f06f 0001 	mvnls.w	r0, #1
 80038d4:	2101      	movs	r1, #1
        min_power_value = -1;
        max_power_value = 14;
        power_adjustment = 1;
    }
    // Проверка выхода силы сигнала за диапазон
    if (power < min_power_value)
 80038d6:	4294      	cmp	r4, r2
        power = min_power_value;
 80038d8:	bfb8      	it	lt
 80038da:	b2d4      	uxtblt	r4, r2
    if (power > max_power_value)
 80038dc:	429c      	cmp	r4, r3
        power = max_power_value;
 80038de:	bfc8      	it	gt
 80038e0:	b2dc      	uxtbgt	r4, r3
    // Корректировка параметра
    power += power_adjustment;
 80038e2:	4404      	add	r4, r0
 80038e4:	b2e4      	uxtb	r4, r4
    // Настройка флага высокого сигнала
    if (power > 17)
        pa_dac = RF_PADAC_20DBM_ON;
    else
        pa_dac = RF_PADAC_20DBM_OFF;
 80038e6:	2c11      	cmp	r4, #17
 80038e8:	bf8c      	ite	hi
 80038ea:	2307      	movhi	r3, #7
 80038ec:	2304      	movls	r3, #4
    // Передача настроек
    uint32_t values[4] = {pa_dac, pa_select, max_power, power};
 80038ee:	9302      	str	r3, [sp, #8]
 80038f0:	9103      	str	r1, [sp, #12]
 80038f2:	9504      	str	r5, [sp, #16]
 80038f4:	9405      	str	r4, [sp, #20]
    return field_set(fields, values, 4);
 80038f6:	2301      	movs	r3, #1
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	2304      	movs	r3, #4
 80038fc:	aa02      	add	r2, sp, #8
 80038fe:	a906      	add	r1, sp, #24
 8003900:	4638      	mov	r0, r7
 8003902:	f7ff fedc 	bl	80036be <_ZN10LoRa_class9field_setEP13Address_fieldPmhb>
}
 8003906:	b022      	add	sp, #136	; 0x88
 8003908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        max_power = 0x01;
 800390c:	2501      	movs	r5, #1
 800390e:	e7cf      	b.n	80038b0 <_ZN10LoRa_class12set_TX_powerEhbh+0x5c>
        max_power_value = 14;
 8003910:	230e      	movs	r3, #14
        min_power_value = -1;
 8003912:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
        power_adjustment = 1;
 8003916:	2001      	movs	r0, #1
        pa_select = 0;
 8003918:	2100      	movs	r1, #0
 800391a:	e7dc      	b.n	80038d6 <_ZN10LoRa_class12set_TX_powerEhbh+0x82>
 800391c:	20001dbc 	.word	0x20001dbc
 8003920:	20001dd8 	.word	0x20001dd8
 8003924:	20001d68 	.word	0x20001d68
 8003928:	20001da0 	.word	0x20001da0

0800392c <_ZN10LoRa_class13set_frequencyEy>:

// Установка частоты радиосигнала
uint8_t LoRa_class::set_frequency(uint64_t frequency) {
 800392c:	b570      	push	{r4, r5, r6, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	4605      	mov	r5, r0
 8003932:	4616      	mov	r6, r2
    _frequency = frequency;
 8003934:	632a      	str	r2, [r5, #48]	; 0x30
 8003936:	6343      	str	r3, [r0, #52]	; 0x34
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
    return field_set(Frf, frf);
 8003938:	4c0b      	ldr	r4, [pc, #44]	; (8003968 <_ZN10LoRa_class13set_frequencyEy+0x3c>)
 800393a:	2201      	movs	r2, #1
 800393c:	9205      	str	r2, [sp, #20]
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
 800393e:	04d9      	lsls	r1, r3, #19
 8003940:	4a0a      	ldr	r2, [pc, #40]	; (800396c <_ZN10LoRa_class13set_frequencyEy+0x40>)
 8003942:	2300      	movs	r3, #0
 8003944:	04f0      	lsls	r0, r6, #19
 8003946:	ea41 3156 	orr.w	r1, r1, r6, lsr #13
 800394a:	f7fd f983 	bl	8000c54 <__aeabi_uldivmod>
 800394e:	9004      	str	r0, [sp, #16]
    return field_set(Frf, frf);
 8003950:	f104 030c 	add.w	r3, r4, #12
 8003954:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003956:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800395a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800395e:	4628      	mov	r0, r5
 8003960:	f7ff fe85 	bl	800366e <_ZN10LoRa_class9field_setE13Address_fieldmb>
}
 8003964:	b006      	add	sp, #24
 8003966:	bd70      	pop	{r4, r5, r6, pc}
 8003968:	20001cdc 	.word	0x20001cdc
 800396c:	01e84800 	.word	0x01e84800

08003970 <_ZN10LoRa_class20set_spreading_factorEh>:

// Установка силы коэффициента распространения SF
uint8_t LoRa_class::set_spreading_factor(uint8_t SF) {
 8003970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003972:	b09b      	sub	sp, #108	; 0x6c
 8003974:	4607      	mov	r7, r0
    uint32_t detection_optimize, detection_threshold;
    if (SF < 6)
 8003976:	2905      	cmp	r1, #5
 8003978:	d90d      	bls.n	8003996 <_ZN10LoRa_class20set_spreading_factorEh+0x26>
 800397a:	460e      	mov	r6, r1
        SF = 6;
    else if (SF > 12)
 800397c:	290c      	cmp	r1, #12
 800397e:	d836      	bhi.n	80039ee <_ZN10LoRa_class20set_spreading_factorEh+0x7e>
        detection_optimize = DO_SF6;
        detection_threshold = DT_SF6;
    }
    else {
        detection_optimize = DO_SF7_12;
        detection_threshold = DT_SF7_12;
 8003980:	2906      	cmp	r1, #6
 8003982:	bf0b      	itete	eq
 8003984:	f04f 0c0c 	moveq.w	ip, #12
 8003988:	f04f 0c0a 	movne.w	ip, #10
 800398c:	f04f 0e05 	moveq.w	lr, #5
 8003990:	f04f 0e03 	movne.w	lr, #3
 8003994:	e004      	b.n	80039a0 <_ZN10LoRa_class20set_spreading_factorEh+0x30>
        SF = 6;
 8003996:	2606      	movs	r6, #6
        detection_threshold = DT_SF6;
 8003998:	f04f 0c0c 	mov.w	ip, #12
        detection_optimize = DO_SF6;
 800399c:	f04f 0e05 	mov.w	lr, #5
    }
    Address_field fields[3] = {DetectionOptimize, DetectionThreshold, SpreadingFactor};
 80039a0:	ac05      	add	r4, sp, #20
 80039a2:	4d16      	ldr	r5, [pc, #88]	; (80039fc <_ZN10LoRa_class20set_spreading_factorEh+0x8c>)
 80039a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80039ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80039b0:	ac0c      	add	r4, sp, #48	; 0x30
 80039b2:	4d13      	ldr	r5, [pc, #76]	; (8003a00 <_ZN10LoRa_class20set_spreading_factorEh+0x90>)
 80039b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80039bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80039c0:	ac13      	add	r4, sp, #76	; 0x4c
 80039c2:	4d10      	ldr	r5, [pc, #64]	; (8003a04 <_ZN10LoRa_class20set_spreading_factorEh+0x94>)
 80039c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80039cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    uint32_t values[3] = {detection_optimize, detection_threshold, SF};
 80039d0:	f8cd e008 	str.w	lr, [sp, #8]
 80039d4:	f8cd c00c 	str.w	ip, [sp, #12]
 80039d8:	9604      	str	r6, [sp, #16]
    return field_set(fields, values, 3);
 80039da:	2301      	movs	r3, #1
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	2303      	movs	r3, #3
 80039e0:	aa02      	add	r2, sp, #8
 80039e2:	a905      	add	r1, sp, #20
 80039e4:	4638      	mov	r0, r7
 80039e6:	f7ff fe6a 	bl	80036be <_ZN10LoRa_class9field_setEP13Address_fieldPmhb>
}
 80039ea:	b01b      	add	sp, #108	; 0x6c
 80039ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SF = 12;
 80039ee:	260c      	movs	r6, #12
        detection_threshold = DT_SF7_12;
 80039f0:	f04f 0c0a 	mov.w	ip, #10
        detection_optimize = DO_SF7_12;
 80039f4:	f04f 0e03 	mov.w	lr, #3
 80039f8:	e7d2      	b.n	80039a0 <_ZN10LoRa_class20set_spreading_factorEh+0x30>
 80039fa:	bf00      	nop
 80039fc:	20001ba8 	.word	0x20001ba8
 8003a00:	20001bc4 	.word	0x20001bc4
 8003a04:	20001ed4 	.word	0x20001ed4

08003a08 <_ZN10LoRa_class20set_signal_bandwidthEy>:

// Установка пропускной способности
uint8_t LoRa_class::set_signal_bandwidth(uint64_t sbw) {
 8003a08:	b570      	push	{r4, r5, r6, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	4606      	mov	r6, r0
    uint8_t bw;
    if (sbw <= 7.8E3)        bw = 0;
 8003a0e:	4610      	mov	r0, r2
 8003a10:	4619      	mov	r1, r3
 8003a12:	f7fc fd23 	bl	800045c <__aeabi_ul2d>
 8003a16:	4604      	mov	r4, r0
 8003a18:	460d      	mov	r5, r1
 8003a1a:	a337      	add	r3, pc, #220	; (adr r3, 8003af8 <_ZN10LoRa_class20set_signal_bandwidthEy+0xf0>)
 8003a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a20:	f7fc ffce 	bl	80009c0 <__aeabi_dcmple>
 8003a24:	2800      	cmp	r0, #0
 8003a26:	d148      	bne.n	8003aba <_ZN10LoRa_class20set_signal_bandwidthEy+0xb2>
    else if (sbw <= 10.4E3)  bw = 1;
 8003a28:	a335      	add	r3, pc, #212	; (adr r3, 8003b00 <_ZN10LoRa_class20set_signal_bandwidthEy+0xf8>)
 8003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2e:	4620      	mov	r0, r4
 8003a30:	4629      	mov	r1, r5
 8003a32:	f7fc ffc5 	bl	80009c0 <__aeabi_dcmple>
 8003a36:	2800      	cmp	r0, #0
 8003a38:	d150      	bne.n	8003adc <_ZN10LoRa_class20set_signal_bandwidthEy+0xd4>
    else if (sbw <= 15.6E3)  bw = 2;
 8003a3a:	a333      	add	r3, pc, #204	; (adr r3, 8003b08 <_ZN10LoRa_class20set_signal_bandwidthEy+0x100>)
 8003a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a40:	4620      	mov	r0, r4
 8003a42:	4629      	mov	r1, r5
 8003a44:	f7fc ffbc 	bl	80009c0 <__aeabi_dcmple>
 8003a48:	2800      	cmp	r0, #0
 8003a4a:	d149      	bne.n	8003ae0 <_ZN10LoRa_class20set_signal_bandwidthEy+0xd8>
    else if (sbw <= 20.8E3)  bw = 3;
 8003a4c:	a330      	add	r3, pc, #192	; (adr r3, 8003b10 <_ZN10LoRa_class20set_signal_bandwidthEy+0x108>)
 8003a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a52:	4620      	mov	r0, r4
 8003a54:	4629      	mov	r1, r5
 8003a56:	f7fc ffb3 	bl	80009c0 <__aeabi_dcmple>
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	d142      	bne.n	8003ae4 <_ZN10LoRa_class20set_signal_bandwidthEy+0xdc>
    else if (sbw <= 31.25E3) bw = 4;
 8003a5e:	a32e      	add	r3, pc, #184	; (adr r3, 8003b18 <_ZN10LoRa_class20set_signal_bandwidthEy+0x110>)
 8003a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a64:	4620      	mov	r0, r4
 8003a66:	4629      	mov	r1, r5
 8003a68:	f7fc ffaa 	bl	80009c0 <__aeabi_dcmple>
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	d13b      	bne.n	8003ae8 <_ZN10LoRa_class20set_signal_bandwidthEy+0xe0>
    else if (sbw <= 41.7E3)  bw = 5;
 8003a70:	a32b      	add	r3, pc, #172	; (adr r3, 8003b20 <_ZN10LoRa_class20set_signal_bandwidthEy+0x118>)
 8003a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a76:	4620      	mov	r0, r4
 8003a78:	4629      	mov	r1, r5
 8003a7a:	f7fc ffa1 	bl	80009c0 <__aeabi_dcmple>
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	d134      	bne.n	8003aec <_ZN10LoRa_class20set_signal_bandwidthEy+0xe4>
    else if (sbw <= 62.5E3)  bw = 6;
 8003a82:	a329      	add	r3, pc, #164	; (adr r3, 8003b28 <_ZN10LoRa_class20set_signal_bandwidthEy+0x120>)
 8003a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a88:	4620      	mov	r0, r4
 8003a8a:	4629      	mov	r1, r5
 8003a8c:	f7fc ff98 	bl	80009c0 <__aeabi_dcmple>
 8003a90:	bb70      	cbnz	r0, 8003af0 <_ZN10LoRa_class20set_signal_bandwidthEy+0xe8>
    else if (sbw <= 125E3)   bw = 7;
 8003a92:	a327      	add	r3, pc, #156	; (adr r3, 8003b30 <_ZN10LoRa_class20set_signal_bandwidthEy+0x128>)
 8003a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a98:	4620      	mov	r0, r4
 8003a9a:	4629      	mov	r1, r5
 8003a9c:	f7fc ff90 	bl	80009c0 <__aeabi_dcmple>
 8003aa0:	bb40      	cbnz	r0, 8003af4 <_ZN10LoRa_class20set_signal_bandwidthEy+0xec>
    else if (sbw <= 250E3)   bw = 8;
 8003aa2:	a325      	add	r3, pc, #148	; (adr r3, 8003b38 <_ZN10LoRa_class20set_signal_bandwidthEy+0x130>)
 8003aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	4629      	mov	r1, r5
 8003aac:	f7fc ff88 	bl	80009c0 <__aeabi_dcmple>
 8003ab0:	2800      	cmp	r0, #0
    else                     bw = 9;
 8003ab2:	bf14      	ite	ne
 8003ab4:	2208      	movne	r2, #8
 8003ab6:	2209      	moveq	r2, #9
 8003ab8:	e000      	b.n	8003abc <_ZN10LoRa_class20set_signal_bandwidthEy+0xb4>
    if (sbw <= 7.8E3)        bw = 0;
 8003aba:	2200      	movs	r2, #0
    return field_set(Bw, bw);
 8003abc:	4c20      	ldr	r4, [pc, #128]	; (8003b40 <_ZN10LoRa_class20set_signal_bandwidthEy+0x138>)
 8003abe:	2301      	movs	r3, #1
 8003ac0:	9305      	str	r3, [sp, #20]
 8003ac2:	9204      	str	r2, [sp, #16]
 8003ac4:	f104 030c 	add.w	r3, r4, #12
 8003ac8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003aca:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003ace:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003ad2:	4630      	mov	r0, r6
 8003ad4:	f7ff fdcb 	bl	800366e <_ZN10LoRa_class9field_setE13Address_fieldmb>
}
 8003ad8:	b006      	add	sp, #24
 8003ada:	bd70      	pop	{r4, r5, r6, pc}
    else if (sbw <= 10.4E3)  bw = 1;
 8003adc:	2201      	movs	r2, #1
 8003ade:	e7ed      	b.n	8003abc <_ZN10LoRa_class20set_signal_bandwidthEy+0xb4>
    else if (sbw <= 15.6E3)  bw = 2;
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	e7eb      	b.n	8003abc <_ZN10LoRa_class20set_signal_bandwidthEy+0xb4>
    else if (sbw <= 20.8E3)  bw = 3;
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	e7e9      	b.n	8003abc <_ZN10LoRa_class20set_signal_bandwidthEy+0xb4>
    else if (sbw <= 31.25E3) bw = 4;
 8003ae8:	2204      	movs	r2, #4
 8003aea:	e7e7      	b.n	8003abc <_ZN10LoRa_class20set_signal_bandwidthEy+0xb4>
    else if (sbw <= 41.7E3)  bw = 5;
 8003aec:	2205      	movs	r2, #5
 8003aee:	e7e5      	b.n	8003abc <_ZN10LoRa_class20set_signal_bandwidthEy+0xb4>
    else if (sbw <= 62.5E3)  bw = 6;
 8003af0:	2206      	movs	r2, #6
 8003af2:	e7e3      	b.n	8003abc <_ZN10LoRa_class20set_signal_bandwidthEy+0xb4>
    else if (sbw <= 125E3)   bw = 7;
 8003af4:	2207      	movs	r2, #7
 8003af6:	e7e1      	b.n	8003abc <_ZN10LoRa_class20set_signal_bandwidthEy+0xb4>
 8003af8:	00000000 	.word	0x00000000
 8003afc:	40be7800 	.word	0x40be7800
 8003b00:	00000000 	.word	0x00000000
 8003b04:	40c45000 	.word	0x40c45000
 8003b08:	00000000 	.word	0x00000000
 8003b0c:	40ce7800 	.word	0x40ce7800
 8003b10:	00000000 	.word	0x00000000
 8003b14:	40d45000 	.word	0x40d45000
 8003b18:	00000000 	.word	0x00000000
 8003b1c:	40de8480 	.word	0x40de8480
 8003b20:	00000000 	.word	0x00000000
 8003b24:	40e45c80 	.word	0x40e45c80
 8003b28:	00000000 	.word	0x00000000
 8003b2c:	40ee8480 	.word	0x40ee8480
 8003b30:	00000000 	.word	0x00000000
 8003b34:	40fe8480 	.word	0x40fe8480
 8003b38:	00000000 	.word	0x00000000
 8003b3c:	410e8480 	.word	0x410e8480
 8003b40:	20001b54 	.word	0x20001b54

08003b44 <_ZN10LoRa_class10crc_enableEv>:
uint8_t LoRa_class::set_sync_word(uint8_t SW) {
    return field_set(SyncWord, SW);
}

// Включение CRC на LoRa-модуле
uint8_t LoRa_class::crc_enable() {
 8003b44:	b530      	push	{r4, r5, lr}
 8003b46:	b087      	sub	sp, #28
 8003b48:	4605      	mov	r5, r0
    return field_set(RxPayloadCrcOn, 1);
 8003b4a:	4c08      	ldr	r4, [pc, #32]	; (8003b6c <_ZN10LoRa_class10crc_enableEv+0x28>)
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	9305      	str	r3, [sp, #20]
 8003b50:	9304      	str	r3, [sp, #16]
 8003b52:	f104 030c 	add.w	r3, r4, #12
 8003b56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b58:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003b5c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003b60:	4628      	mov	r0, r5
 8003b62:	f7ff fd84 	bl	800366e <_ZN10LoRa_class9field_setE13Address_fieldmb>
}
 8003b66:	b007      	add	sp, #28
 8003b68:	bd30      	pop	{r4, r5, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20001e9c 	.word	0x20001e9c

08003b70 <_ZN10LoRa_class5beginEybhhyh>:
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8003b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b74:	b089      	sub	sp, #36	; 0x24
 8003b76:	4604      	mov	r4, r0
 8003b78:	4690      	mov	r8, r2
 8003b7a:	4699      	mov	r9, r3
    uint32_t result = 0;
 8003b7c:	2700      	movs	r7, #0
 8003b7e:	ae08      	add	r6, sp, #32
 8003b80:	f846 7d04 	str.w	r7, [r6, #-4]!
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 8003b84:	2201      	movs	r2, #1
 8003b86:	8881      	ldrh	r1, [r0, #4]
 8003b88:	6880      	ldr	r0, [r0, #8]
 8003b8a:	f004 fa77 	bl	800807c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_RESET);
 8003b8e:	463a      	mov	r2, r7
 8003b90:	88a1      	ldrh	r1, [r4, #4]
 8003b92:	68a0      	ldr	r0, [r4, #8]
 8003b94:	f004 fa72 	bl	800807c <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8003b98:	2014      	movs	r0, #20
 8003b9a:	f003 ffad 	bl	8007af8 <HAL_Delay>
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	88a1      	ldrh	r1, [r4, #4]
 8003ba2:	68a0      	ldr	r0, [r4, #8]
 8003ba4:	f004 fa6a 	bl	800807c <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8003ba8:	2032      	movs	r0, #50	; 0x32
 8003baa:	f003 ffa5 	bl	8007af8 <HAL_Delay>
    amt = field_get(Version, &result);
 8003bae:	4d63      	ldr	r5, [pc, #396]	; (8003d3c <_ZN10LoRa_class5beginEybhhyh+0x1cc>)
 8003bb0:	9705      	str	r7, [sp, #20]
 8003bb2:	9604      	str	r6, [sp, #16]
 8003bb4:	f105 030c 	add.w	r3, r5, #12
 8003bb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bba:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003bbe:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	f7ff fd91 	bl	80036ea <_ZN10LoRa_class9field_getE13Address_fieldPmb>
    if ((result != 0x12) || (amt != 1)) return 2;
 8003bc8:	9b07      	ldr	r3, [sp, #28]
 8003bca:	2b12      	cmp	r3, #18
 8003bcc:	f040 80aa 	bne.w	8003d24 <_ZN10LoRa_class5beginEybhhyh+0x1b4>
 8003bd0:	2801      	cmp	r0, #1
 8003bd2:	d001      	beq.n	8003bd8 <_ZN10LoRa_class5beginEybhhyh+0x68>
 8003bd4:	2002      	movs	r0, #2
 8003bd6:	e0a6      	b.n	8003d26 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(mode_sleep() != 1) return 3;
 8003bd8:	4620      	mov	r0, r4
 8003bda:	f7ff fddb 	bl	8003794 <_ZN10LoRa_class10mode_sleepEv>
 8003bde:	2801      	cmp	r0, #1
 8003be0:	d001      	beq.n	8003be6 <_ZN10LoRa_class5beginEybhhyh+0x76>
 8003be2:	2003      	movs	r0, #3
 8003be4:	e09f      	b.n	8003d26 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(set_frequency(frequency) != 3) return 4;
 8003be6:	4642      	mov	r2, r8
 8003be8:	464b      	mov	r3, r9
 8003bea:	4620      	mov	r0, r4
 8003bec:	f7ff fe9e 	bl	800392c <_ZN10LoRa_class13set_frequencyEy>
 8003bf0:	2803      	cmp	r0, #3
 8003bf2:	d001      	beq.n	8003bf8 <_ZN10LoRa_class5beginEybhhyh+0x88>
 8003bf4:	2004      	movs	r0, #4
 8003bf6:	e096      	b.n	8003d26 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(field_set(FifoRxBaseAddr, 0x00) != 1) return 5;
 8003bf8:	4d51      	ldr	r5, [pc, #324]	; (8003d40 <_ZN10LoRa_class5beginEybhhyh+0x1d0>)
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	9305      	str	r3, [sp, #20]
 8003bfe:	9704      	str	r7, [sp, #16]
 8003c00:	f105 030c 	add.w	r3, r5, #12
 8003c04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c06:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003c0a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f7ff fd2d 	bl	800366e <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8003c14:	2801      	cmp	r0, #1
 8003c16:	d001      	beq.n	8003c1c <_ZN10LoRa_class5beginEybhhyh+0xac>
 8003c18:	2005      	movs	r0, #5
 8003c1a:	e084      	b.n	8003d26 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(field_set(FifoTxBaseAddr, _FifoTxBaseAddr) != 1) return 6;
 8003c1c:	4d49      	ldr	r5, [pc, #292]	; (8003d44 <_ZN10LoRa_class5beginEybhhyh+0x1d4>)
 8003c1e:	2301      	movs	r3, #1
 8003c20:	9305      	str	r3, [sp, #20]
 8003c22:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003c26:	9304      	str	r3, [sp, #16]
 8003c28:	f105 030c 	add.w	r3, r5, #12
 8003c2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c2e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003c32:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003c36:	4620      	mov	r0, r4
 8003c38:	f7ff fd19 	bl	800366e <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8003c3c:	2801      	cmp	r0, #1
 8003c3e:	d001      	beq.n	8003c44 <_ZN10LoRa_class5beginEybhhyh+0xd4>
 8003c40:	2006      	movs	r0, #6
 8003c42:	e070      	b.n	8003d26 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(field_set(LnaBoostHf, 0x03) != 1) return 7;
 8003c44:	4d40      	ldr	r5, [pc, #256]	; (8003d48 <_ZN10LoRa_class5beginEybhhyh+0x1d8>)
 8003c46:	2301      	movs	r3, #1
 8003c48:	9305      	str	r3, [sp, #20]
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	9304      	str	r3, [sp, #16]
 8003c4e:	f105 030c 	add.w	r3, r5, #12
 8003c52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c54:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003c58:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	f7ff fd06 	bl	800366e <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8003c62:	2801      	cmp	r0, #1
 8003c64:	d001      	beq.n	8003c6a <_ZN10LoRa_class5beginEybhhyh+0xfa>
 8003c66:	2007      	movs	r0, #7
 8003c68:	e05d      	b.n	8003d26 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(field_set(LowDataRateOptimize, 0) != 1) return 8;
 8003c6a:	4d38      	ldr	r5, [pc, #224]	; (8003d4c <_ZN10LoRa_class5beginEybhhyh+0x1dc>)
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	9305      	str	r3, [sp, #20]
 8003c70:	9704      	str	r7, [sp, #16]
 8003c72:	f105 030c 	add.w	r3, r5, #12
 8003c76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c78:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003c7c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003c80:	4620      	mov	r0, r4
 8003c82:	f7ff fcf4 	bl	800366e <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8003c86:	2801      	cmp	r0, #1
 8003c88:	d001      	beq.n	8003c8e <_ZN10LoRa_class5beginEybhhyh+0x11e>
 8003c8a:	2008      	movs	r0, #8
 8003c8c:	e04b      	b.n	8003d26 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(field_set(AgcAutoOn, 1) != 1) return 9;
 8003c8e:	4d30      	ldr	r5, [pc, #192]	; (8003d50 <_ZN10LoRa_class5beginEybhhyh+0x1e0>)
 8003c90:	2301      	movs	r3, #1
 8003c92:	9305      	str	r3, [sp, #20]
 8003c94:	9304      	str	r3, [sp, #16]
 8003c96:	f105 030c 	add.w	r3, r5, #12
 8003c9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c9c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003ca0:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	f7ff fce2 	bl	800366e <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8003caa:	2801      	cmp	r0, #1
 8003cac:	d001      	beq.n	8003cb2 <_ZN10LoRa_class5beginEybhhyh+0x142>
 8003cae:	2009      	movs	r0, #9
 8003cb0:	e039      	b.n	8003d26 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(set_TX_power(signal_power, paboost) != 2) return 10;
 8003cb2:	2307      	movs	r3, #7
 8003cb4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8003cb8:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	f7ff fdc9 	bl	8003854 <_ZN10LoRa_class12set_TX_powerEhbh>
 8003cc2:	2802      	cmp	r0, #2
 8003cc4:	d132      	bne.n	8003d2c <_ZN10LoRa_class5beginEybhhyh+0x1bc>
    if(set_spreading_factor(SF) != 3) return 11;
 8003cc6:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f7ff fe50 	bl	8003970 <_ZN10LoRa_class20set_spreading_factorEh>
 8003cd0:	2803      	cmp	r0, #3
 8003cd2:	d001      	beq.n	8003cd8 <_ZN10LoRa_class5beginEybhhyh+0x168>
 8003cd4:	200b      	movs	r0, #11
 8003cd6:	e026      	b.n	8003d26 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(set_signal_bandwidth(SBW) != 1) return 12;
 8003cd8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8003cdc:	4620      	mov	r0, r4
 8003cde:	f7ff fe93 	bl	8003a08 <_ZN10LoRa_class20set_signal_bandwidthEy>
 8003ce2:	2801      	cmp	r0, #1
 8003ce4:	d124      	bne.n	8003d30 <_ZN10LoRa_class5beginEybhhyh+0x1c0>
    if(field_set(SyncWord, sync_word) != 1) return 13;
 8003ce6:	4d1b      	ldr	r5, [pc, #108]	; (8003d54 <_ZN10LoRa_class5beginEybhhyh+0x1e4>)
 8003ce8:	2301      	movs	r3, #1
 8003cea:	9305      	str	r3, [sp, #20]
 8003cec:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8003cf0:	9304      	str	r3, [sp, #16]
 8003cf2:	f105 030c 	add.w	r3, r5, #12
 8003cf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cf8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003cfc:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003d00:	4620      	mov	r0, r4
 8003d02:	f7ff fcb4 	bl	800366e <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8003d06:	2801      	cmp	r0, #1
 8003d08:	d114      	bne.n	8003d34 <_ZN10LoRa_class5beginEybhhyh+0x1c4>
    if(crc_enable() != 1) return 14;
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	f7ff ff1a 	bl	8003b44 <_ZN10LoRa_class10crc_enableEv>
 8003d10:	2801      	cmp	r0, #1
 8003d12:	d111      	bne.n	8003d38 <_ZN10LoRa_class5beginEybhhyh+0x1c8>
    if(mode_STDBY() != 1) return 15;
 8003d14:	4620      	mov	r0, r4
 8003d16:	f7ff fd42 	bl	800379e <_ZN10LoRa_class10mode_STDBYEv>
    return 0;
 8003d1a:	2801      	cmp	r0, #1
 8003d1c:	bf14      	ite	ne
 8003d1e:	200f      	movne	r0, #15
 8003d20:	4638      	moveq	r0, r7
 8003d22:	e000      	b.n	8003d26 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if ((result != 0x12) || (amt != 1)) return 2;
 8003d24:	2002      	movs	r0, #2
}
 8003d26:	b009      	add	sp, #36	; 0x24
 8003d28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(set_TX_power(signal_power, paboost) != 2) return 10;
 8003d2c:	200a      	movs	r0, #10
 8003d2e:	e7fa      	b.n	8003d26 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(set_signal_bandwidth(SBW) != 1) return 12;
 8003d30:	200c      	movs	r0, #12
 8003d32:	e7f8      	b.n	8003d26 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(field_set(SyncWord, sync_word) != 1) return 13;
 8003d34:	200d      	movs	r0, #13
 8003d36:	e7f6      	b.n	8003d26 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(crc_enable() != 1) return 14;
 8003d38:	200e      	movs	r0, #14
 8003d3a:	e7f4      	b.n	8003d26 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
 8003d3c:	20001f44 	.word	0x20001f44
 8003d40:	20001c6c 	.word	0x20001c6c
 8003d44:	20001cc0 	.word	0x20001cc0
 8003d48:	20001cf8 	.word	0x20001cf8
 8003d4c:	20001d30 	.word	0x20001d30
 8003d50:	20001b38 	.word	0x20001b38
 8003d54:	20001ef0 	.word	0x20001ef0

08003d58 <_ZN10LoRa_class11packet_rssiEv>:
    // delete[] data;
    return send_packet;
}

// RSSI последнего принятого пакета
uint8_t LoRa_class::packet_rssi() {
 8003d58:	b530      	push	{r4, r5, lr}
 8003d5a:	b089      	sub	sp, #36	; 0x24
 8003d5c:	4605      	mov	r5, r0
    uint32_t rssi = 0;
 8003d5e:	ab08      	add	r3, sp, #32
 8003d60:	2200      	movs	r2, #0
 8003d62:	f843 2d04 	str.w	r2, [r3, #-4]!
    field_get(PacketRssi, &rssi, true);
 8003d66:	4c14      	ldr	r4, [pc, #80]	; (8003db8 <_ZN10LoRa_class11packet_rssiEv+0x60>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	9205      	str	r2, [sp, #20]
 8003d6c:	9304      	str	r3, [sp, #16]
 8003d6e:	f104 030c 	add.w	r3, r4, #12
 8003d72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d74:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003d78:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	f7ff fcb4 	bl	80036ea <_ZN10LoRa_class9field_getE13Address_fieldPmb>
    if (_frequency < 868E6)
 8003d82:	e9d5 010c 	ldrd	r0, r1, [r5, #48]	; 0x30
 8003d86:	f7fc fb69 	bl	800045c <__aeabi_ul2d>
 8003d8a:	a309      	add	r3, pc, #36	; (adr r3, 8003db0 <_ZN10LoRa_class11packet_rssiEv+0x58>)
 8003d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d90:	f7fc fe0c 	bl	80009ac <__aeabi_dcmplt>
 8003d94:	b930      	cbnz	r0, 8003da4 <_ZN10LoRa_class11packet_rssiEv+0x4c>
        rssi -= 164;
    else
        rssi -= 157;
 8003d96:	9b07      	ldr	r3, [sp, #28]
 8003d98:	3b9d      	subs	r3, #157	; 0x9d
 8003d9a:	9307      	str	r3, [sp, #28]
    return rssi;
}
 8003d9c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8003da0:	b009      	add	sp, #36	; 0x24
 8003da2:	bd30      	pop	{r4, r5, pc}
        rssi -= 164;
 8003da4:	9b07      	ldr	r3, [sp, #28]
 8003da6:	3ba4      	subs	r3, #164	; 0xa4
 8003da8:	9307      	str	r3, [sp, #28]
 8003daa:	e7f7      	b.n	8003d9c <_ZN10LoRa_class11packet_rssiEv+0x44>
 8003dac:	f3af 8000 	nop.w
 8003db0:	80000000 	.word	0x80000000
 8003db4:	41c9de50 	.word	0x41c9de50
 8003db8:	20001df4 	.word	0x20001df4

08003dbc <_ZN10LoRa_class16read_packet_dataEbbb>:
class LoRa_packet LoRa_class::read_packet_data(bool crc_err, bool f_rssi, bool f_snr) {
 8003dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003dc0:	b08b      	sub	sp, #44	; 0x2c
 8003dc2:	4680      	mov	r8, r0
 8003dc4:	4689      	mov	r9, r1
 8003dc6:	4615      	mov	r5, r2
    if (f_rssi)
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d153      	bne.n	8003e74 <_ZN10LoRa_class16read_packet_dataEbbb+0xb8>
        rssi = 0;
 8003dcc:	2600      	movs	r6, #0
    field_get(FifoRxBytesNb, &length, true);
 8003dce:	4c2c      	ldr	r4, [pc, #176]	; (8003e80 <_ZN10LoRa_class16read_packet_dataEbbb+0xc4>)
 8003dd0:	2701      	movs	r7, #1
 8003dd2:	9705      	str	r7, [sp, #20]
 8003dd4:	ab09      	add	r3, sp, #36	; 0x24
 8003dd6:	9304      	str	r3, [sp, #16]
 8003dd8:	f104 030c 	add.w	r3, r4, #12
 8003ddc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dde:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003de2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003de6:	4648      	mov	r0, r9
 8003de8:	f7ff fc7f 	bl	80036ea <_ZN10LoRa_class9field_getE13Address_fieldPmb>
    field_get(FifoRxCurrentAddr, &adr, true);
 8003dec:	4c25      	ldr	r4, [pc, #148]	; (8003e84 <_ZN10LoRa_class16read_packet_dataEbbb+0xc8>)
 8003dee:	9705      	str	r7, [sp, #20]
 8003df0:	ab08      	add	r3, sp, #32
 8003df2:	9304      	str	r3, [sp, #16]
 8003df4:	f104 030c 	add.w	r3, r4, #12
 8003df8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dfa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003dfe:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003e02:	4648      	mov	r0, r9
 8003e04:	f7ff fc71 	bl	80036ea <_ZN10LoRa_class9field_getE13Address_fieldPmb>
    field_set(FifoAddrPtr, adr);
 8003e08:	4c1f      	ldr	r4, [pc, #124]	; (8003e88 <_ZN10LoRa_class16read_packet_dataEbbb+0xcc>)
 8003e0a:	9705      	str	r7, [sp, #20]
 8003e0c:	9b08      	ldr	r3, [sp, #32]
 8003e0e:	9304      	str	r3, [sp, #16]
 8003e10:	f104 030c 	add.w	r3, r4, #12
 8003e14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e16:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003e1a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003e1e:	4648      	mov	r0, r9
 8003e20:	f7ff fc25 	bl	800366e <_ZN10LoRa_class9field_setE13Address_fieldmb>
    class LoRa_packet send_packet(nullptr, 0, crc_err, rssi);
 8003e24:	9600      	str	r6, [sp, #0]
 8003e26:	462b      	mov	r3, r5
 8003e28:	2200      	movs	r2, #0
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	4640      	mov	r0, r8
 8003e2e:	f000 fafd 	bl	800442c <_ZN11LoRa_packetC1EPKhhbh>
    uint32_t data32 = 0;
 8003e32:	2300      	movs	r3, #0
 8003e34:	9307      	str	r3, [sp, #28]
    for(unsigned int i = 0; i < length; ++i) {
 8003e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e38:	b1c3      	cbz	r3, 8003e6c <_ZN10LoRa_class16read_packet_dataEbbb+0xb0>
 8003e3a:	2600      	movs	r6, #0
        field_get(Fifo, &data32, true);
 8003e3c:	4d13      	ldr	r5, [pc, #76]	; (8003e8c <_ZN10LoRa_class16read_packet_dataEbbb+0xd0>)
 8003e3e:	f105 040c 	add.w	r4, r5, #12
 8003e42:	9705      	str	r7, [sp, #20]
 8003e44:	ab07      	add	r3, sp, #28
 8003e46:	9304      	str	r3, [sp, #16]
 8003e48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003e4c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003e50:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003e54:	4648      	mov	r0, r9
 8003e56:	f7ff fc48 	bl	80036ea <_ZN10LoRa_class9field_getE13Address_fieldPmb>
        send_packet.add_packet_data(data32);
 8003e5a:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8003e5e:	4640      	mov	r0, r8
 8003e60:	f000 facc 	bl	80043fc <_ZN11LoRa_packet15add_packet_dataEh>
    for(unsigned int i = 0; i < length; ++i) {
 8003e64:	3601      	adds	r6, #1
 8003e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e68:	42b3      	cmp	r3, r6
 8003e6a:	d8ea      	bhi.n	8003e42 <_ZN10LoRa_class16read_packet_dataEbbb+0x86>
}
 8003e6c:	4640      	mov	r0, r8
 8003e6e:	b00b      	add	sp, #44	; 0x2c
 8003e70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rssi = packet_rssi();
 8003e74:	4608      	mov	r0, r1
 8003e76:	f7ff ff6f 	bl	8003d58 <_ZN10LoRa_class11packet_rssiEv>
 8003e7a:	4606      	mov	r6, r0
 8003e7c:	e7a7      	b.n	8003dce <_ZN10LoRa_class16read_packet_dataEbbb+0x12>
 8003e7e:	bf00      	nop
 8003e80:	20001c88 	.word	0x20001c88
 8003e84:	20001ca4 	.word	0x20001ca4
 8003e88:	20001c50 	.word	0x20001c50
 8003e8c:	20001c34 	.word	0x20001c34

08003e90 <_ZN10LoRa_class15receiver_packetEhmbb>:
class LoRa_packet LoRa_class::receiver_packet(uint8_t count, ulong wait, bool rssi, bool snr) {
 8003e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e94:	b0bb      	sub	sp, #236	; 0xec
 8003e96:	9007      	str	r0, [sp, #28]
 8003e98:	460c      	mov	r4, r1
 8003e9a:	4616      	mov	r6, r2
 8003e9c:	461d      	mov	r5, r3
    class LoRa_packet send_packet;
 8003e9e:	f000 fa9f 	bl	80043e0 <_ZN11LoRa_packetC1Ev>
    Address_field fields[3] = {RxTimeout, RxDone, PayloadCrcError};
 8003ea2:	af23      	add	r7, sp, #140	; 0x8c
 8003ea4:	f8df c268 	ldr.w	ip, [pc, #616]	; 8004110 <_ZN10LoRa_class15receiver_packetEhmbb+0x280>
 8003ea8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003eac:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003eae:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003eb2:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8003eb6:	f8df 9254 	ldr.w	r9, [pc, #596]	; 800410c <_ZN10LoRa_class15receiver_packetEhmbb+0x27c>
 8003eba:	af2a      	add	r7, sp, #168	; 0xa8
 8003ebc:	46cc      	mov	ip, r9
 8003ebe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003ec2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003ec4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003ec8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8003ecc:	f8df e244 	ldr.w	lr, [pc, #580]	; 8004114 <_ZN10LoRa_class15receiver_packetEhmbb+0x284>
 8003ed0:	f10d 08c4 	add.w	r8, sp, #196	; 0xc4
 8003ed4:	4677      	mov	r7, lr
 8003ed6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003ed8:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8003edc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003ee0:	e888 0007 	stmia.w	r8, {r0, r1, r2}
    Address_field flags[3] = {RxDone, ValidHeader, PayloadCrcError};
 8003ee4:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8003ee8:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8003eec:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8003ef0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003ef4:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8003ef8:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 8003efc:	f8df 8218 	ldr.w	r8, [pc, #536]	; 8004118 <_ZN10LoRa_class15receiver_packetEhmbb+0x288>
 8003f00:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8003f04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003f08:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003f0c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8003f10:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 8003f14:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003f18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003f1c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003f20:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    if(count <= 1) {
 8003f24:	2e01      	cmp	r6, #1
 8003f26:	d909      	bls.n	8003f3c <_ZN10LoRa_class15receiver_packetEhmbb+0xac>
        for(int i = 0; i < count; ++i) {
 8003f28:	4632      	mov	r2, r6
 8003f2a:	b11e      	cbz	r6, 8003f34 <_ZN10LoRa_class15receiver_packetEhmbb+0xa4>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	3301      	adds	r3, #1
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d1fc      	bne.n	8003f2e <_ZN10LoRa_class15receiver_packetEhmbb+0x9e>
}
 8003f34:	9807      	ldr	r0, [sp, #28]
 8003f36:	b03b      	add	sp, #236	; 0xec
 8003f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(count == 1)
 8003f3c:	d00f      	beq.n	8003f5e <_ZN10LoRa_class15receiver_packetEhmbb+0xce>
        uint32_t values[3] = {0, 0, 0};
 8003f3e:	2300      	movs	r3, #0
 8003f40:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f42:	930c      	str	r3, [sp, #48]	; 0x30
 8003f44:	930d      	str	r3, [sp, #52]	; 0x34
        if(wait == 0)
 8003f46:	b97d      	cbnz	r5, 8003f68 <_ZN10LoRa_class15receiver_packetEhmbb+0xd8>
            time = 0;
 8003f48:	f04f 0900 	mov.w	r9, #0
        for(start_time = time, read_time = time; (wait == 0) || (HAL_GetTick() - time < wait);) {
 8003f4c:	f8cd 9020 	str.w	r9, [sp, #32]
        bool signal = false;
 8003f50:	f04f 0b00 	mov.w	fp, #0
                    _reg_field.clear_flags(RxTimeout);
 8003f54:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8004110 <_ZN10LoRa_class15receiver_packetEhmbb+0x280>
 8003f58:	f108 070c 	add.w	r7, r8, #12
 8003f5c:	e0c7      	b.n	80040ee <_ZN10LoRa_class15receiver_packetEhmbb+0x25e>
            mode_RX_single();
 8003f5e:	2101      	movs	r1, #1
 8003f60:	4620      	mov	r0, r4
 8003f62:	f7ff fc43 	bl	80037ec <_ZN10LoRa_class14mode_RX_singleEb>
 8003f66:	e7ea      	b.n	8003f3e <_ZN10LoRa_class15receiver_packetEhmbb+0xae>
            time = HAL_GetTick();
 8003f68:	f003 fdc0 	bl	8007aec <HAL_GetTick>
 8003f6c:	4681      	mov	r9, r0
 8003f6e:	e7ed      	b.n	8003f4c <_ZN10LoRa_class15receiver_packetEhmbb+0xbc>
        for(start_time = time, read_time = time; (wait == 0) || (HAL_GetTick() - time < wait);) {
 8003f70:	f003 fdbc 	bl	8007aec <HAL_GetTick>
 8003f74:	eba0 0009 	sub.w	r0, r0, r9
 8003f78:	42a8      	cmp	r0, r5
 8003f7a:	d25b      	bcs.n	8004034 <_ZN10LoRa_class15receiver_packetEhmbb+0x1a4>
            if((wait == 0) || (HAL_GetTick() - read_time > 10U)) {
 8003f7c:	f003 fdb6 	bl	8007aec <HAL_GetTick>
 8003f80:	eba0 0009 	sub.w	r0, r0, r9
 8003f84:	280a      	cmp	r0, #10
 8003f86:	f200 80b5 	bhi.w	80040f4 <_ZN10LoRa_class15receiver_packetEhmbb+0x264>
 8003f8a:	e0b0      	b.n	80040ee <_ZN10LoRa_class15receiver_packetEhmbb+0x25e>
                	pin_done = HAL_GPIO_ReadPin(_dio0_port, _dio0_pin);
 8003f8c:	69a0      	ldr	r0, [r4, #24]
 8003f8e:	f004 f86f 	bl	8008070 <HAL_GPIO_ReadPin>
 8003f92:	4682      	mov	sl, r0
                	pin_timeout = HAL_GPIO_ReadPin(_dio1_port, _dio1_pin);
 8003f94:	8ba1      	ldrh	r1, [r4, #28]
 8003f96:	6a20      	ldr	r0, [r4, #32]
 8003f98:	f004 f86a 	bl	8008070 <HAL_GPIO_ReadPin>
 8003f9c:	9009      	str	r0, [sp, #36]	; 0x24
                    if (_dio3_pin != 0) {
 8003f9e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8003fa0:	bb11      	cbnz	r1, 8003fe8 <_ZN10LoRa_class15receiver_packetEhmbb+0x158>
                        pin_crc_err = GPIO_PIN_RESET;
 8003fa2:	2000      	movs	r0, #0
                    if ((pin_done == GPIO_PIN_SET) || (pin_timeout == GPIO_PIN_SET) || (pin_crc_err == GPIO_PIN_SET)) {
 8003fa4:	f1ba 0f01 	cmp.w	sl, #1
 8003fa8:	d022      	beq.n	8003ff0 <_ZN10LoRa_class15receiver_packetEhmbb+0x160>
 8003faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d022      	beq.n	8003ff6 <_ZN10LoRa_class15receiver_packetEhmbb+0x166>
                        signal = true;
 8003fb0:	2801      	cmp	r0, #1
 8003fb2:	bf08      	it	eq
 8003fb4:	f04f 0b01 	moveq.w	fp, #1
                if (((count == 0) && (wait == 0)) || (_dio0_pin == 0) || (_dio1_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 8003fb8:	b916      	cbnz	r6, 8003fc0 <_ZN10LoRa_class15receiver_packetEhmbb+0x130>
 8003fba:	2d00      	cmp	r5, #0
 8003fbc:	f000 808b 	beq.w	80040d6 <_ZN10LoRa_class15receiver_packetEhmbb+0x246>
 8003fc0:	8aa3      	ldrh	r3, [r4, #20]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 8087 	beq.w	80040d6 <_ZN10LoRa_class15receiver_packetEhmbb+0x246>
 8003fc8:	8ba3      	ldrh	r3, [r4, #28]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 8083 	beq.w	80040d6 <_ZN10LoRa_class15receiver_packetEhmbb+0x246>
 8003fd0:	f003 fd8c 	bl	8007aec <HAL_GetTick>
 8003fd4:	9b08      	ldr	r3, [sp, #32]
 8003fd6:	1ac0      	subs	r0, r0, r3
 8003fd8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8003fdc:	d87b      	bhi.n	80040d6 <_ZN10LoRa_class15receiver_packetEhmbb+0x246>
 8003fde:	f1bb 0f00 	cmp.w	fp, #0
 8003fe2:	f000 8082 	beq.w	80040ea <_ZN10LoRa_class15receiver_packetEhmbb+0x25a>
 8003fe6:	e076      	b.n	80040d6 <_ZN10LoRa_class15receiver_packetEhmbb+0x246>
                    	pin_crc_err = HAL_GPIO_ReadPin(_dio3_port, _dio3_pin);
 8003fe8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003fea:	f004 f841 	bl	8008070 <HAL_GPIO_ReadPin>
 8003fee:	e7d9      	b.n	8003fa4 <_ZN10LoRa_class15receiver_packetEhmbb+0x114>
                        signal = true;
 8003ff0:	f04f 0b01 	mov.w	fp, #1
 8003ff4:	e7e0      	b.n	8003fb8 <_ZN10LoRa_class15receiver_packetEhmbb+0x128>
 8003ff6:	f04f 0b01 	mov.w	fp, #1
 8003ffa:	e7dd      	b.n	8003fb8 <_ZN10LoRa_class15receiver_packetEhmbb+0x128>
                        rx_timeout = values[0];
 8003ffc:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
                        crc_err = values[2];
 8004000:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
                if(rx_done != 0) {
 8004004:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8004008:	bb4b      	cbnz	r3, 800405e <_ZN10LoRa_class15receiver_packetEhmbb+0x1ce>
                if(rx_timeout != 0) {
 800400a:	2a00      	cmp	r2, #0
 800400c:	d06d      	beq.n	80040ea <_ZN10LoRa_class15receiver_packetEhmbb+0x25a>
                    _reg_field.clear_flags(RxTimeout);
 800400e:	f04f 0a00 	mov.w	sl, #0
 8004012:	f8cd a010 	str.w	sl, [sp, #16]
 8004016:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800401a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800401e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8004022:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8004026:	f000 fd97 	bl	8004b58 <_ZN13LoRa_register11clear_flagsE13Address_fieldb>
                    mode_RX_single(false);
 800402a:	4651      	mov	r1, sl
 800402c:	4620      	mov	r0, r4
 800402e:	f7ff fbdd 	bl	80037ec <_ZN10LoRa_class14mode_RX_singleEb>
                    if(wait != 0)
 8004032:	b97d      	cbnz	r5, 8004054 <_ZN10LoRa_class15receiver_packetEhmbb+0x1c4>
            field_get(fields, values, 3, true);
 8004034:	2301      	movs	r3, #1
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	2303      	movs	r3, #3
 800403a:	aa0b      	add	r2, sp, #44	; 0x2c
 800403c:	a923      	add	r1, sp, #140	; 0x8c
 800403e:	4620      	mov	r0, r4
 8004040:	f7ff fb6e 	bl	8003720 <_ZN10LoRa_class9field_getEP13Address_fieldPmhb>
            _reg_field.clear_flags(flags, 3);
 8004044:	2300      	movs	r3, #0
 8004046:	2203      	movs	r2, #3
 8004048:	a90e      	add	r1, sp, #56	; 0x38
 800404a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800404e:	f000 fd1b 	bl	8004a88 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb>
 8004052:	e036      	b.n	80040c2 <_ZN10LoRa_class15receiver_packetEhmbb+0x232>
                        start_time = HAL_GetTick();
 8004054:	f003 fd4a 	bl	8007aec <HAL_GetTick>
 8004058:	9008      	str	r0, [sp, #32]
                    signal = false;
 800405a:	46d3      	mov	fp, sl
 800405c:	e047      	b.n	80040ee <_ZN10LoRa_class15receiver_packetEhmbb+0x25e>
            _reg_field.clear_flags(RxDone);
 800405e:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 8004062:	4f2a      	ldr	r7, [pc, #168]	; (800410c <_ZN10LoRa_class15receiver_packetEhmbb+0x27c>)
 8004064:	f04f 0800 	mov.w	r8, #0
 8004068:	f8cd 8010 	str.w	r8, [sp, #16]
 800406c:	f107 030c 	add.w	r3, r7, #12
 8004070:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004072:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8004076:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800407a:	4630      	mov	r0, r6
 800407c:	f000 fd6c 	bl	8004b58 <_ZN13LoRa_register11clear_flagsE13Address_fieldb>
            _reg_field.clear_flags(RxTimeout);
 8004080:	4f23      	ldr	r7, [pc, #140]	; (8004110 <_ZN10LoRa_class15receiver_packetEhmbb+0x280>)
 8004082:	f8cd 8010 	str.w	r8, [sp, #16]
 8004086:	f107 030c 	add.w	r3, r7, #12
 800408a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800408c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8004090:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8004094:	4630      	mov	r0, r6
 8004096:	f000 fd5f 	bl	8004b58 <_ZN13LoRa_register11clear_flagsE13Address_fieldb>
            send_packet = read_packet_data(crc_err, rssi, snr);
 800409a:	f89d 3114 	ldrb.w	r3, [sp, #276]	; 0x114
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	f89d 3110 	ldrb.w	r3, [sp, #272]	; 0x110
 80040a4:	ebba 0208 	subs.w	r2, sl, r8
 80040a8:	bf18      	it	ne
 80040aa:	2201      	movne	r2, #1
 80040ac:	4621      	mov	r1, r4
 80040ae:	a838      	add	r0, sp, #224	; 0xe0
 80040b0:	f7ff fe84 	bl	8003dbc <_ZN10LoRa_class16read_packet_dataEbbb>
 80040b4:	a938      	add	r1, sp, #224	; 0xe0
 80040b6:	9807      	ldr	r0, [sp, #28]
 80040b8:	f000 fa0e 	bl	80044d8 <_ZN11LoRa_packetaSEOS_>
 80040bc:	a838      	add	r0, sp, #224	; 0xe0
 80040be:	f000 f998 	bl	80043f2 <_ZN11LoRa_packetD1Ev>
        if(wait != 0)
 80040c2:	2d00      	cmp	r5, #0
 80040c4:	f43f af36 	beq.w	8003f34 <_ZN10LoRa_class15receiver_packetEhmbb+0xa4>
            mode_sleep();
 80040c8:	4620      	mov	r0, r4
 80040ca:	f7ff fb63 	bl	8003794 <_ZN10LoRa_class10mode_sleepEv>
 80040ce:	e731      	b.n	8003f34 <_ZN10LoRa_class15receiver_packetEhmbb+0xa4>
                if (((count == 0) && (wait == 0)) || (_dio0_pin == 0) || (_dio1_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 80040d0:	2e00      	cmp	r6, #0
 80040d2:	f43f af72 	beq.w	8003fba <_ZN10LoRa_class15receiver_packetEhmbb+0x12a>
                    amt = field_get(fields, values, 3, true);
 80040d6:	2301      	movs	r3, #1
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	2303      	movs	r3, #3
 80040dc:	aa0b      	add	r2, sp, #44	; 0x2c
 80040de:	a923      	add	r1, sp, #140	; 0x8c
 80040e0:	4620      	mov	r0, r4
 80040e2:	f7ff fb1d 	bl	8003720 <_ZN10LoRa_class9field_getEP13Address_fieldPmhb>
                    if(amt == 3) {
 80040e6:	2803      	cmp	r0, #3
 80040e8:	d088      	beq.n	8003ffc <_ZN10LoRa_class15receiver_packetEhmbb+0x16c>
                if(wait == 0) {
 80040ea:	2d00      	cmp	r5, #0
 80040ec:	d0a2      	beq.n	8004034 <_ZN10LoRa_class15receiver_packetEhmbb+0x1a4>
        for(start_time = time, read_time = time; (wait == 0) || (HAL_GetTick() - time < wait);) {
 80040ee:	2d00      	cmp	r5, #0
 80040f0:	f47f af3e 	bne.w	8003f70 <_ZN10LoRa_class15receiver_packetEhmbb+0xe0>
            	if ((_dio0_pin != 0) && (_dio1_pin != 0)) {
 80040f4:	8aa1      	ldrh	r1, [r4, #20]
 80040f6:	2900      	cmp	r1, #0
 80040f8:	d0ea      	beq.n	80040d0 <_ZN10LoRa_class15receiver_packetEhmbb+0x240>
 80040fa:	8ba3      	ldrh	r3, [r4, #28]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f47f af45 	bne.w	8003f8c <_ZN10LoRa_class15receiver_packetEhmbb+0xfc>
                if (((count == 0) && (wait == 0)) || (_dio0_pin == 0) || (_dio1_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 8004102:	2e00      	cmp	r6, #0
 8004104:	d1e7      	bne.n	80040d6 <_ZN10LoRa_class15receiver_packetEhmbb+0x246>
 8004106:	2d00      	cmp	r5, #0
 8004108:	d0e5      	beq.n	80040d6 <_ZN10LoRa_class15receiver_packetEhmbb+0x246>
 800410a:	e75d      	b.n	8003fc8 <_ZN10LoRa_class15receiver_packetEhmbb+0x138>
 800410c:	20001e80 	.word	0x20001e80
 8004110:	20001eb8 	.word	0x20001eb8
 8004114:	20001e2c 	.word	0x20001e2c
 8004118:	20001f28 	.word	0x20001f28

0800411c <_ZN10LoRa_class12packet_beginEv>:
    if (packet_end(wait))
        return true;
    return false;
}
// Объявление пакета
bool LoRa_class::packet_begin() {
 800411c:	b570      	push	{r4, r5, r6, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	4605      	mov	r5, r0
    mode_STDBY();
 8004122:	f7ff fb3c 	bl	800379e <_ZN10LoRa_class10mode_STDBYEv>
    field_set(FifoAddrPtr, _FifoTxBaseAddr);
 8004126:	4c0b      	ldr	r4, [pc, #44]	; (8004154 <_ZN10LoRa_class12packet_beginEv+0x38>)
 8004128:	2601      	movs	r6, #1
 800412a:	9605      	str	r6, [sp, #20]
 800412c:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8004130:	9304      	str	r3, [sp, #16]
 8004132:	f104 030c 	add.w	r3, r4, #12
 8004136:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004138:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800413c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004140:	4628      	mov	r0, r5
 8004142:	f7ff fa94 	bl	800366e <_ZN10LoRa_class9field_setE13Address_fieldmb>
    _packet_length = 0;
 8004146:	2300      	movs	r3, #0
 8004148:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    return true;
}
 800414c:	4630      	mov	r0, r6
 800414e:	b006      	add	sp, #24
 8004150:	bd70      	pop	{r4, r5, r6, pc}
 8004152:	bf00      	nop
 8004154:	20001c50 	.word	0x20001c50

08004158 <_ZN10LoRa_class12packet_writeEPhh>:
// Отправка данных в пакет buffer, size=None? (len)
bool LoRa_class::packet_write(uint8_t* packet, uint8_t len) {
 8004158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800415c:	b087      	sub	sp, #28
    if (len + _packet_length > 255)
 800415e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004162:	189c      	adds	r4, r3, r2
 8004164:	2cff      	cmp	r4, #255	; 0xff
 8004166:	dc2f      	bgt.n	80041c8 <_ZN10LoRa_class12packet_writeEPhh+0x70>
 8004168:	4607      	mov	r7, r0
        return true;
    _packet_length += len;
 800416a:	f887 4039 	strb.w	r4, [r7, #57]	; 0x39
    for(int i = 0; i < len; ++i)
 800416e:	b1ba      	cbz	r2, 80041a0 <_ZN10LoRa_class12packet_writeEPhh+0x48>
 8004170:	460e      	mov	r6, r1
 8004172:	eb01 0802 	add.w	r8, r1, r2
        field_set(Fifo, packet[i]);
 8004176:	4d15      	ldr	r5, [pc, #84]	; (80041cc <_ZN10LoRa_class12packet_writeEPhh+0x74>)
 8004178:	f04f 0901 	mov.w	r9, #1
 800417c:	f105 040c 	add.w	r4, r5, #12
 8004180:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004184:	f8cd 9014 	str.w	r9, [sp, #20]
 8004188:	9304      	str	r3, [sp, #16]
 800418a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800418e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8004192:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8004196:	4638      	mov	r0, r7
 8004198:	f7ff fa69 	bl	800366e <_ZN10LoRa_class9field_setE13Address_fieldmb>
    for(int i = 0; i < len; ++i)
 800419c:	4546      	cmp	r6, r8
 800419e:	d1ef      	bne.n	8004180 <_ZN10LoRa_class12packet_writeEPhh+0x28>
    field_set(PayloadLength, _packet_length);
 80041a0:	4c0b      	ldr	r4, [pc, #44]	; (80041d0 <_ZN10LoRa_class12packet_writeEPhh+0x78>)
 80041a2:	2301      	movs	r3, #1
 80041a4:	9305      	str	r3, [sp, #20]
 80041a6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80041aa:	9304      	str	r3, [sp, #16]
 80041ac:	f104 030c 	add.w	r3, r4, #12
 80041b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041b2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80041b6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80041ba:	4638      	mov	r0, r7
 80041bc:	f7ff fa57 	bl	800366e <_ZN10LoRa_class9field_setE13Address_fieldmb>
    return false;
 80041c0:	2000      	movs	r0, #0
}
 80041c2:	b007      	add	sp, #28
 80041c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
 80041c8:	2001      	movs	r0, #1
 80041ca:	e7fa      	b.n	80041c2 <_ZN10LoRa_class12packet_writeEPhh+0x6a>
 80041cc:	20001c34 	.word	0x20001c34
 80041d0:	20001e48 	.word	0x20001e48

080041d4 <_ZN10LoRa_class10packet_endEmb>:
    field_set(PayloadLength, _packet_length);
    return false;
}

// Отправка пакета
bool LoRa_class::packet_end(uint32_t wait, bool sleep) {
 80041d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d8:	b089      	sub	sp, #36	; 0x24
 80041da:	4606      	mov	r6, r0
 80041dc:	460d      	mov	r5, r1
 80041de:	4692      	mov	sl, r2
    mode_TX();
 80041e0:	2101      	movs	r1, #1
 80041e2:	f7ff fae1 	bl	80037a8 <_ZN10LoRa_class7mode_TXEb>
    bool result = false;
    if(wait > 0) {
 80041e6:	b91d      	cbnz	r5, 80041f0 <_ZN10LoRa_class10packet_endEmb+0x1c>
        if(sleep && (tx_done != 0)) {
            mode_sleep();
        }
    }
    return result;
}
 80041e8:	2000      	movs	r0, #0
 80041ea:	b009      	add	sp, #36	; 0x24
 80041ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t tx_done = 0;
 80041f0:	2700      	movs	r7, #0
 80041f2:	9707      	str	r7, [sp, #28]
        for(time = HAL_GetTick(), start_time = time, read_time = time; HAL_GetTick() - time < wait;) {
 80041f4:	f003 fc7a 	bl	8007aec <HAL_GetTick>
 80041f8:	4604      	mov	r4, r0
                    field_get(TxDone, &tx_done, true);
 80041fa:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8004280 <_ZN10LoRa_class10packet_endEmb+0xac>
 80041fe:	f04f 0b01 	mov.w	fp, #1
 8004202:	f108 090c 	add.w	r9, r8, #12
        for(time = HAL_GetTick(), start_time = time, read_time = time; HAL_GetTick() - time < wait;) {
 8004206:	f003 fc71 	bl	8007aec <HAL_GetTick>
 800420a:	1b00      	subs	r0, r0, r4
 800420c:	42a8      	cmp	r0, r5
 800420e:	d22c      	bcs.n	800426a <_ZN10LoRa_class10packet_endEmb+0x96>
            if(HAL_GetTick() - read_time > 10) {
 8004210:	f003 fc6c 	bl	8007aec <HAL_GetTick>
 8004214:	1b00      	subs	r0, r0, r4
 8004216:	280a      	cmp	r0, #10
 8004218:	d9f5      	bls.n	8004206 <_ZN10LoRa_class10packet_endEmb+0x32>
                if (_dio0_pin != 0) {
 800421a:	8ab1      	ldrh	r1, [r6, #20]
 800421c:	b999      	cbnz	r1, 8004246 <_ZN10LoRa_class10packet_endEmb+0x72>
                    field_get(TxDone, &tx_done, true);
 800421e:	f8cd b014 	str.w	fp, [sp, #20]
 8004222:	ab07      	add	r3, sp, #28
 8004224:	9304      	str	r3, [sp, #16]
 8004226:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 800422a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800422e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8004232:	4630      	mov	r0, r6
 8004234:	f7ff fa59 	bl	80036ea <_ZN10LoRa_class9field_getE13Address_fieldPmb>
                if(tx_done != 0) {
 8004238:	9b07      	ldr	r3, [sp, #28]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0e3      	beq.n	8004206 <_ZN10LoRa_class10packet_endEmb+0x32>
        if(sleep && (tx_done != 0)) {
 800423e:	f1ba 0f00 	cmp.w	sl, #0
 8004242:	d118      	bne.n	8004276 <_ZN10LoRa_class10packet_endEmb+0xa2>
 8004244:	e7d0      	b.n	80041e8 <_ZN10LoRa_class10packet_endEmb+0x14>
                	pin_done = HAL_GPIO_ReadPin(_dio0_port, _dio0_pin);
 8004246:	69b0      	ldr	r0, [r6, #24]
 8004248:	f003 ff12 	bl	8008070 <HAL_GPIO_ReadPin>
                        signal = true;
 800424c:	2801      	cmp	r0, #1
 800424e:	bf08      	it	eq
 8004250:	2701      	moveq	r7, #1
                if ((_dio0_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 8004252:	8ab3      	ldrh	r3, [r6, #20]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0e2      	beq.n	800421e <_ZN10LoRa_class10packet_endEmb+0x4a>
 8004258:	f003 fc48 	bl	8007aec <HAL_GetTick>
 800425c:	1b00      	subs	r0, r0, r4
 800425e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8004262:	d8dc      	bhi.n	800421e <_ZN10LoRa_class10packet_endEmb+0x4a>
 8004264:	2f00      	cmp	r7, #0
 8004266:	d0e7      	beq.n	8004238 <_ZN10LoRa_class10packet_endEmb+0x64>
 8004268:	e7d9      	b.n	800421e <_ZN10LoRa_class10packet_endEmb+0x4a>
        if(sleep && (tx_done != 0)) {
 800426a:	f1ba 0f00 	cmp.w	sl, #0
 800426e:	d0bb      	beq.n	80041e8 <_ZN10LoRa_class10packet_endEmb+0x14>
 8004270:	9b07      	ldr	r3, [sp, #28]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0b8      	beq.n	80041e8 <_ZN10LoRa_class10packet_endEmb+0x14>
            mode_sleep();
 8004276:	4630      	mov	r0, r6
 8004278:	f7ff fa8c 	bl	8003794 <_ZN10LoRa_class10mode_sleepEv>
    return result;
 800427c:	e7b4      	b.n	80041e8 <_ZN10LoRa_class10packet_endEmb+0x14>
 800427e:	bf00      	nop
 8004280:	20001f0c 	.word	0x20001f0c

08004284 <_ZN10LoRa_class13sender_packetEPhhm>:
bool LoRa_class::sender_packet(uint8_t* packet, uint8_t len, uint32_t wait) {
 8004284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004286:	4604      	mov	r4, r0
 8004288:	460d      	mov	r5, r1
 800428a:	4616      	mov	r6, r2
 800428c:	461f      	mov	r7, r3
    packet_begin();
 800428e:	f7ff ff45 	bl	800411c <_ZN10LoRa_class12packet_beginEv>
    if (packet_write(packet, len))
 8004292:	4632      	mov	r2, r6
 8004294:	4629      	mov	r1, r5
 8004296:	4620      	mov	r0, r4
 8004298:	f7ff ff5e 	bl	8004158 <_ZN10LoRa_class12packet_writeEPhh>
 800429c:	4603      	mov	r3, r0
 800429e:	b108      	cbz	r0, 80042a4 <_ZN10LoRa_class13sender_packetEPhhm+0x20>
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (packet_end(wait))
 80042a4:	2200      	movs	r2, #0
 80042a6:	4639      	mov	r1, r7
 80042a8:	4620      	mov	r0, r4
 80042aa:	f7ff ff93 	bl	80041d4 <_ZN10LoRa_class10packet_endEmb>
 80042ae:	4603      	mov	r3, r0
 80042b0:	e7f6      	b.n	80042a0 <_ZN10LoRa_class13sender_packetEPhhm+0x1c>
	...

080042b4 <_GLOBAL__sub_I_LoRa>:
}
 80042b4:	b508      	push	{r3, lr}
class LoRa_class LoRa;
 80042b6:	4802      	ldr	r0, [pc, #8]	; (80042c0 <_GLOBAL__sub_I_LoRa+0xc>)
 80042b8:	f7ff f9ce 	bl	8003658 <_ZN10LoRa_classC1Ev>
}
 80042bc:	bd08      	pop	{r3, pc}
 80042be:	bf00      	nop
 80042c0:	20000360 	.word	0x20000360

080042c4 <_GLOBAL__sub_D_LoRa>:
 80042c4:	b508      	push	{r3, lr}
class LoRa_class LoRa;
 80042c6:	4802      	ldr	r0, [pc, #8]	; (80042d0 <_GLOBAL__sub_D_LoRa+0xc>)
 80042c8:	f7ff f992 	bl	80035f0 <_ZN10LoRa_classD1Ev>
}
 80042cc:	bd08      	pop	{r3, pc}
 80042ce:	bf00      	nop
 80042d0:	20000360 	.word	0x20000360

080042d4 <_ZN16LoRa_packet_data8add_dataEh>:
LoRa_packet_data lora_packet_data[SIZE_LORA_PACKET_BUFFER];
#endif


bool LoRa_packet_data::add_data(uint8_t data_byte) {
    if(len >= SIZE_LORA_PACKET_MAX_LEN)
 80042d4:	7843      	ldrb	r3, [r0, #1]
 80042d6:	2b31      	cmp	r3, #49	; 0x31
 80042d8:	d805      	bhi.n	80042e6 <_ZN16LoRa_packet_data8add_dataEh+0x12>
        return true;
    data[len++] = data_byte;
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	7042      	strb	r2, [r0, #1]
 80042de:	4418      	add	r0, r3
 80042e0:	7081      	strb	r1, [r0, #2]
    return false;
 80042e2:	2000      	movs	r0, #0
 80042e4:	4770      	bx	lr
        return true;
 80042e6:	2001      	movs	r0, #1
}
 80042e8:	4770      	bx	lr

080042ea <_ZN16LoRa_packet_data8add_dataEPKhh>:
bool LoRa_packet_data::add_data(const uint8_t* data_byte, uint8_t amt_byte) {
 80042ea:	b470      	push	{r4, r5, r6}
    if((len + amt_byte) > SIZE_LORA_PACKET_MAX_LEN)
 80042ec:	7846      	ldrb	r6, [r0, #1]
 80042ee:	18b3      	adds	r3, r6, r2
 80042f0:	2b32      	cmp	r3, #50	; 0x32
 80042f2:	d80f      	bhi.n	8004314 <_ZN16LoRa_packet_data8add_dataEPKhh+0x2a>
        return true;
    for(size_t i = 0; i < amt_byte; ++i)
 80042f4:	b14a      	cbz	r2, 800430a <_ZN16LoRa_packet_data8add_dataEPKhh+0x20>
 80042f6:	460b      	mov	r3, r1
 80042f8:	1c74      	adds	r4, r6, #1
 80042fa:	4404      	add	r4, r0
 80042fc:	4411      	add	r1, r2
        data[i+len] = data_byte[i];
 80042fe:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004302:	f804 5f01 	strb.w	r5, [r4, #1]!
    for(size_t i = 0; i < amt_byte; ++i)
 8004306:	428b      	cmp	r3, r1
 8004308:	d1f9      	bne.n	80042fe <_ZN16LoRa_packet_data8add_dataEPKhh+0x14>
    len += amt_byte;
 800430a:	4416      	add	r6, r2
 800430c:	7046      	strb	r6, [r0, #1]
    return false;
 800430e:	2000      	movs	r0, #0
}
 8004310:	bc70      	pop	{r4, r5, r6}
 8004312:	4770      	bx	lr
        return true;
 8004314:	2001      	movs	r0, #1
 8004316:	e7fb      	b.n	8004310 <_ZN16LoRa_packet_data8add_dataEPKhh+0x26>

08004318 <_ZN16LoRa_packet_data8set_dataEPKhh>:

bool LoRa_packet_data::set_data(const uint8_t* set_data, uint8_t set_len) {
    if(set_len > SIZE_LORA_PACKET_MAX_LEN)
 8004318:	2a32      	cmp	r2, #50	; 0x32
 800431a:	d812      	bhi.n	8004342 <_ZN16LoRa_packet_data8set_dataEPKhh+0x2a>
        return true;
    if((set_data != nullptr) && (set_len != 0)){
 800431c:	b169      	cbz	r1, 800433a <_ZN16LoRa_packet_data8set_dataEPKhh+0x22>
 800431e:	b162      	cbz	r2, 800433a <_ZN16LoRa_packet_data8set_dataEPKhh+0x22>
        len = set_len;
 8004320:	7042      	strb	r2, [r0, #1]
        for(int i = 0; i < set_len; ++i)
 8004322:	b182      	cbz	r2, 8004346 <_ZN16LoRa_packet_data8set_dataEPKhh+0x2e>
 8004324:	460b      	mov	r3, r1
 8004326:	3001      	adds	r0, #1
 8004328:	4411      	add	r1, r2
            data[i] = set_data[i];
 800432a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800432e:	f800 2f01 	strb.w	r2, [r0, #1]!
        for(int i = 0; i < set_len; ++i)
 8004332:	428b      	cmp	r3, r1
 8004334:	d1f9      	bne.n	800432a <_ZN16LoRa_packet_data8set_dataEPKhh+0x12>
    }
    else
        len = 0;
    return false;
 8004336:	2000      	movs	r0, #0
}
 8004338:	4770      	bx	lr
        len = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	7043      	strb	r3, [r0, #1]
    return false;
 800433e:	4618      	mov	r0, r3
 8004340:	4770      	bx	lr
        return true;
 8004342:	2001      	movs	r0, #1
 8004344:	4770      	bx	lr
    return false;
 8004346:	2000      	movs	r0, #0
 8004348:	4770      	bx	lr
	...

0800434c <_ZN11LoRa_packet11search_dataEv>:
}
void LoRa_packet_data::set_data(class LoRa_packet_data&& lora_packet) {
    *this = std::move(lora_packet);
}
bool LoRa_packet_data::free() const {
    return free_object_;
 800434c:	4b1e      	ldr	r3, [pc, #120]	; (80043c8 <_ZN11LoRa_packet11search_dataEv+0x7c>)
      typename iterator_traits<_RandomAccessIterator>::difference_type
	__trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
	{
	  if (__pred(__first))
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	bb8b      	cbnz	r3, 80043b6 <_ZN11LoRa_packet11search_dataEv+0x6a>
 8004352:	4b1d      	ldr	r3, [pc, #116]	; (80043c8 <_ZN11LoRa_packet11search_dataEv+0x7c>)
	    return __first;
	  ++__first;

	  if (__pred(__first))
 8004354:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004358:	bb83      	cbnz	r3, 80043bc <_ZN11LoRa_packet11search_dataEv+0x70>
 800435a:	4b1b      	ldr	r3, [pc, #108]	; (80043c8 <_ZN11LoRa_packet11search_dataEv+0x7c>)
	    return __first;
	  ++__first;

	  if (__pred(__first))
 800435c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004360:	bb73      	cbnz	r3, 80043c0 <_ZN11LoRa_packet11search_dataEv+0x74>
 8004362:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <_ZN11LoRa_packet11search_dataEv+0x7c>)
	    return __first;
	  ++__first;

	  if (__pred(__first))
 8004364:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8004368:	bb63      	cbnz	r3, 80043c4 <_ZN11LoRa_packet11search_dataEv+0x78>
	    return __first;
	  ++__first;
 800436a:	4b18      	ldr	r3, [pc, #96]	; (80043cc <_ZN11LoRa_packet11search_dataEv+0x80>)
      for (; __trip_count > 0; --__trip_count)
 800436c:	f503 6177 	add.w	r1, r3, #3952	; 0xf70
	  if (__pred(__first))
 8004370:	781a      	ldrb	r2, [r3, #0]
 8004372:	b962      	cbnz	r2, 800438e <_ZN11LoRa_packet11search_dataEv+0x42>
	  if (__pred(__first))
 8004374:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8004378:	b99a      	cbnz	r2, 80043a2 <_ZN11LoRa_packet11search_dataEv+0x56>
	  if (__pred(__first))
 800437a:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800437e:	b992      	cbnz	r2, 80043a6 <_ZN11LoRa_packet11search_dataEv+0x5a>
	  if (__pred(__first))
 8004380:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8004384:	b98a      	cbnz	r2, 80043aa <_ZN11LoRa_packet11search_dataEv+0x5e>
 8004386:	33d0      	adds	r3, #208	; 0xd0
      for (; __trip_count > 0; --__trip_count)
 8004388:	428b      	cmp	r3, r1
 800438a:	d1f1      	bne.n	8004370 <_ZN11LoRa_packet11search_dataEv+0x24>
	  if (__pred(__first))
	    return __first;
	  ++__first;
	case 0:
	default:
	  return __last;
 800438c:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <_ZN11LoRa_packet11search_dataEv+0x84>)


// ----- LoRa_packet -----
bool LoRa_packet::search_data() {
#if defined( USE_STANDARD_ARRAY )
    packet_data = std::find_if(lora_packet_data.begin(), lora_packet_data.end(),
 800438e:	6003      	str	r3, [r0, #0]
                        [](const LoRa_packet_data &data){return data.free();} );
    if(packet_data == lora_packet_data.end()) {
 8004390:	4a0f      	ldr	r2, [pc, #60]	; (80043d0 <_ZN11LoRa_packet11search_dataEv+0x84>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00b      	beq.n	80043ae <_ZN11LoRa_packet11search_dataEv+0x62>
#if defined( ESP32 )
        Serial.println("!lora_packet_data memory error!");
#endif
        return true;
    }
    packet_data->free_object_ = false;
 8004396:	2200      	movs	r2, #0
 8004398:	701a      	strb	r2, [r3, #0]
    packet_data->len = 0;
 800439a:	6803      	ldr	r3, [r0, #0]
 800439c:	705a      	strb	r2, [r3, #1]
    return false;
 800439e:	4610      	mov	r0, r2
        }
    }
    packet_data = nullptr;
    return true;
#endif
}
 80043a0:	4770      	bx	lr
	  ++__first;
 80043a2:	3334      	adds	r3, #52	; 0x34
 80043a4:	e7f3      	b.n	800438e <_ZN11LoRa_packet11search_dataEv+0x42>
	  ++__first;
 80043a6:	3368      	adds	r3, #104	; 0x68
 80043a8:	e7f1      	b.n	800438e <_ZN11LoRa_packet11search_dataEv+0x42>
	  ++__first;
 80043aa:	339c      	adds	r3, #156	; 0x9c
 80043ac:	e7ef      	b.n	800438e <_ZN11LoRa_packet11search_dataEv+0x42>
        packet_data = nullptr;
 80043ae:	2300      	movs	r3, #0
 80043b0:	6003      	str	r3, [r0, #0]
        return true;
 80043b2:	2001      	movs	r0, #1
 80043b4:	4770      	bx	lr
	  if (__pred(__first))
 80043b6:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <_ZN11LoRa_packet11search_dataEv+0x7c>)
    packet_data = std::find_if(lora_packet_data.begin(), lora_packet_data.end(),
 80043b8:	6003      	str	r3, [r0, #0]
 80043ba:	e7ec      	b.n	8004396 <_ZN11LoRa_packet11search_dataEv+0x4a>
	  ++__first;
 80043bc:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <_ZN11LoRa_packet11search_dataEv+0x88>)
 80043be:	e7fb      	b.n	80043b8 <_ZN11LoRa_packet11search_dataEv+0x6c>
	  ++__first;
 80043c0:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <_ZN11LoRa_packet11search_dataEv+0x8c>)
 80043c2:	e7f9      	b.n	80043b8 <_ZN11LoRa_packet11search_dataEv+0x6c>
	  ++__first;
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <_ZN11LoRa_packet11search_dataEv+0x90>)
 80043c6:	e7f7      	b.n	80043b8 <_ZN11LoRa_packet11search_dataEv+0x6c>
 80043c8:	200006b0 	.word	0x200006b0
 80043cc:	20000780 	.word	0x20000780
 80043d0:	200016f0 	.word	0x200016f0
 80043d4:	200006e4 	.word	0x200006e4
 80043d8:	20000718 	.word	0x20000718
 80043dc:	2000074c 	.word	0x2000074c

080043e0 <_ZN11LoRa_packetC1Ev>:


LoRa_packet::LoRa_packet() {
 80043e0:	b510      	push	{r4, lr}
 80043e2:	4604      	mov	r4, r0
 80043e4:	2300      	movs	r3, #0
 80043e6:	7103      	strb	r3, [r0, #4]
 80043e8:	7143      	strb	r3, [r0, #5]
    search_data();
 80043ea:	f7ff ffaf 	bl	800434c <_ZN11LoRa_packet11search_dataEv>
}
 80043ee:	4620      	mov	r0, r4
 80043f0:	bd10      	pop	{r4, pc}

080043f2 <_ZN11LoRa_packetD1Ev>:
    packet_data = nullptr;
    *this = std::move(right);
}

LoRa_packet::~LoRa_packet() {
    if(packet_data != nullptr)
 80043f2:	6803      	ldr	r3, [r0, #0]
 80043f4:	b10b      	cbz	r3, 80043fa <_ZN11LoRa_packetD1Ev+0x8>
        packet_data->free_object_ = true;
 80043f6:	2201      	movs	r2, #1
 80043f8:	701a      	strb	r2, [r3, #0]
}
 80043fa:	4770      	bx	lr

080043fc <_ZN11LoRa_packet15add_packet_dataEh>:

bool LoRa_packet::add_packet_data(uint8_t data) {
 80043fc:	b508      	push	{r3, lr}
    return packet_data->add_data(data);
 80043fe:	6800      	ldr	r0, [r0, #0]
 8004400:	f7ff ff68 	bl	80042d4 <_ZN16LoRa_packet_data8add_dataEh>
}
 8004404:	bd08      	pop	{r3, pc}

08004406 <_ZN11LoRa_packet15add_packet_dataEPKhh>:
bool LoRa_packet::add_packet_data(const  uint8_t* data, uint8_t len) {
 8004406:	b508      	push	{r3, lr}
    return packet_data->add_data(data, len);
 8004408:	6800      	ldr	r0, [r0, #0]
 800440a:	f7ff ff6e 	bl	80042ea <_ZN16LoRa_packet_data8add_dataEPKhh>
}
 800440e:	bd08      	pop	{r3, pc}

08004410 <_ZN11LoRa_packet10set_packetEPKhhbh>:
bool LoRa_packet::set_packet(const uint8_t* data, uint8_t len, bool crc_error, uint8_t rssi) {
 8004410:	b538      	push	{r3, r4, r5, lr}
 8004412:	4604      	mov	r4, r0
 8004414:	461d      	mov	r5, r3
    if(packet_data->set_data(data, len))
 8004416:	6800      	ldr	r0, [r0, #0]
 8004418:	f7ff ff7e 	bl	8004318 <_ZN16LoRa_packet_data8set_dataEPKhh>
 800441c:	4603      	mov	r3, r0
 800441e:	b918      	cbnz	r0, 8004428 <_ZN11LoRa_packet10set_packetEPKhhbh+0x18>
        return true;
    crc_error_ = crc_error;
 8004420:	7165      	strb	r5, [r4, #5]
    rssi_ = rssi;
 8004422:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8004426:	7122      	strb	r2, [r4, #4]
    return false;
}
 8004428:	4618      	mov	r0, r3
 800442a:	bd38      	pop	{r3, r4, r5, pc}

0800442c <_ZN11LoRa_packetC1EPKhhbh>:
LoRa_packet::LoRa_packet(const uint8_t* data, uint8_t len, bool crc_error, uint8_t rssi) {
 800442c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800442e:	b083      	sub	sp, #12
 8004430:	4604      	mov	r4, r0
 8004432:	460d      	mov	r5, r1
 8004434:	4616      	mov	r6, r2
 8004436:	461f      	mov	r7, r3
 8004438:	2300      	movs	r3, #0
 800443a:	7103      	strb	r3, [r0, #4]
 800443c:	7143      	strb	r3, [r0, #5]
    search_data();
 800443e:	f7ff ff85 	bl	800434c <_ZN11LoRa_packet11search_dataEv>
    set_packet(data, len, crc_error, rssi);
 8004442:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	463b      	mov	r3, r7
 800444a:	4632      	mov	r2, r6
 800444c:	4629      	mov	r1, r5
 800444e:	4620      	mov	r0, r4
 8004450:	f7ff ffde 	bl	8004410 <_ZN11LoRa_packet10set_packetEPKhhbh>
}
 8004454:	4620      	mov	r0, r4
 8004456:	b003      	add	sp, #12
 8004458:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800445a <_ZN11LoRa_packet12clear_packetEv>:
    crc_error_ = crc_error;
    rssi_ = rssi;
    return false;
}

void LoRa_packet::clear_packet() {
 800445a:	b510      	push	{r4, lr}
 800445c:	4604      	mov	r4, r0
    if(packet_data == nullptr)
 800445e:	6803      	ldr	r3, [r0, #0]
 8004460:	b12b      	cbz	r3, 800446e <_ZN11LoRa_packet12clear_packetEv+0x14>
        search_data();
    else
        packet_data->len = 0;
 8004462:	2200      	movs	r2, #0
 8004464:	705a      	strb	r2, [r3, #1]
    rssi_ = 0;
 8004466:	2300      	movs	r3, #0
 8004468:	7123      	strb	r3, [r4, #4]
    crc_error_  = false;
 800446a:	7163      	strb	r3, [r4, #5]
}
 800446c:	bd10      	pop	{r4, pc}
        search_data();
 800446e:	f7ff ff6d 	bl	800434c <_ZN11LoRa_packet11search_dataEv>
 8004472:	e7f8      	b.n	8004466 <_ZN11LoRa_packet12clear_packetEv+0xc>

08004474 <_ZNK11LoRa_packet7get_lenEv>:
}
uint8_t LoRa_packet::get_data(int num) const {
    return packet_data->data[num];
}
uint8_t LoRa_packet::get_len() const {
    if(packet_data == nullptr)
 8004474:	6803      	ldr	r3, [r0, #0]
 8004476:	b10b      	cbz	r3, 800447c <_ZNK11LoRa_packet7get_lenEv+0x8>
        return 0;
    return packet_data->len;
 8004478:	7858      	ldrb	r0, [r3, #1]
 800447a:	4770      	bx	lr
        return 0;
 800447c:	2000      	movs	r0, #0
}
 800447e:	4770      	bx	lr

08004480 <_ZNK11LoRa_packet13get_crc_errorEv>:
bool LoRa_packet::get_crc_error() const {
    return crc_error_;
}
 8004480:	7940      	ldrb	r0, [r0, #5]
 8004482:	4770      	bx	lr

08004484 <_ZN11LoRa_packetixEi>:
 8004484:	6800      	ldr	r0, [r0, #0]
 8004486:	3002      	adds	r0, #2
uint8_t LoRa_packet::get_rssi() const {
    return rssi_;
}
uint8_t& LoRa_packet::operator[] (const int index) {
    return packet_data->data[index];
}
 8004488:	4408      	add	r0, r1
 800448a:	4770      	bx	lr

0800448c <_ZNK11LoRa_packetixEi>:
 800448c:	6800      	ldr	r0, [r0, #0]
 800448e:	3002      	adds	r0, #2
const uint8_t& LoRa_packet::operator[](const int index) const {
    return packet_data->data[index];
}
 8004490:	4408      	add	r0, r1
 8004492:	4770      	bx	lr

08004494 <_ZN11LoRa_packetaSERKS_>:
class LoRa_packet& LoRa_packet::operator=(const class LoRa_packet& right) {
 8004494:	b538      	push	{r3, r4, r5, lr}
 8004496:	4604      	mov	r4, r0
    // Проверка на самоприсваивание
    if (this == &right)
 8004498:	4288      	cmp	r0, r1
 800449a:	d018      	beq.n	80044ce <_ZN11LoRa_packetaSERKS_+0x3a>
 800449c:	460d      	mov	r5, r1
        return *this;
    // Проверка на пустой объект
    if(packet_data == nullptr)
 800449e:	6803      	ldr	r3, [r0, #0]
 80044a0:	b1bb      	cbz	r3, 80044d2 <_ZN11LoRa_packetaSERKS_+0x3e>
        search_data();
    // Перенос значений
    packet_data->len = right.packet_data->len;
 80044a2:	6823      	ldr	r3, [r4, #0]
 80044a4:	682a      	ldr	r2, [r5, #0]
 80044a6:	7852      	ldrb	r2, [r2, #1]
 80044a8:	705a      	strb	r2, [r3, #1]
    crc_error_ = right.crc_error_;
 80044aa:	796b      	ldrb	r3, [r5, #5]
 80044ac:	7163      	strb	r3, [r4, #5]
    rssi_ = right.rssi_;
 80044ae:	792b      	ldrb	r3, [r5, #4]
 80044b0:	7123      	strb	r3, [r4, #4]
    for(int i = 0; i < packet_data->len; ++i)
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	785a      	ldrb	r2, [r3, #1]
 80044b6:	b152      	cbz	r2, 80044ce <_ZN11LoRa_packetaSERKS_+0x3a>
 80044b8:	2200      	movs	r2, #0
        packet_data->data[i] = right.packet_data->data[i];
 80044ba:	6829      	ldr	r1, [r5, #0]
 80044bc:	4411      	add	r1, r2
 80044be:	7889      	ldrb	r1, [r1, #2]
 80044c0:	4413      	add	r3, r2
 80044c2:	7099      	strb	r1, [r3, #2]
    for(int i = 0; i < packet_data->len; ++i)
 80044c4:	3201      	adds	r2, #1
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	7859      	ldrb	r1, [r3, #1]
 80044ca:	4291      	cmp	r1, r2
 80044cc:	dcf5      	bgt.n	80044ba <_ZN11LoRa_packetaSERKS_+0x26>
    return *this;
}
 80044ce:	4620      	mov	r0, r4
 80044d0:	bd38      	pop	{r3, r4, r5, pc}
        search_data();
 80044d2:	f7ff ff3b 	bl	800434c <_ZN11LoRa_packet11search_dataEv>
 80044d6:	e7e4      	b.n	80044a2 <_ZN11LoRa_packetaSERKS_+0xe>

080044d8 <_ZN11LoRa_packetaSEOS_>:

class LoRa_packet& LoRa_packet::operator=(class LoRa_packet&& right) {
    // Проверка на самоприсваивание
    if (this == &right)
 80044d8:	4288      	cmp	r0, r1
 80044da:	d00b      	beq.n	80044f4 <_ZN11LoRa_packetaSEOS_+0x1c>
        return *this;
    // Перенос значений
    if(packet_data != nullptr) {
 80044dc:	6803      	ldr	r3, [r0, #0]
 80044de:	b10b      	cbz	r3, 80044e4 <_ZN11LoRa_packetaSEOS_+0xc>
        packet_data->free_object_=true;
 80044e0:	2201      	movs	r2, #1
 80044e2:	701a      	strb	r2, [r3, #0]
    }
    packet_data = right.packet_data;
 80044e4:	680b      	ldr	r3, [r1, #0]
 80044e6:	6003      	str	r3, [r0, #0]
    crc_error_ = right.crc_error_;
 80044e8:	794b      	ldrb	r3, [r1, #5]
 80044ea:	7143      	strb	r3, [r0, #5]
    rssi_ = right.rssi_;
 80044ec:	790b      	ldrb	r3, [r1, #4]
 80044ee:	7103      	strb	r3, [r0, #4]
    right.packet_data = nullptr;
 80044f0:	2300      	movs	r3, #0
 80044f2:	600b      	str	r3, [r1, #0]
    return *this;
}
 80044f4:	4770      	bx	lr

080044f6 <_ZN11LoRa_packetC1EOS_>:
LoRa_packet::LoRa_packet(LoRa_packet&& right) {
 80044f6:	b510      	push	{r4, lr}
 80044f8:	4604      	mov	r4, r0
 80044fa:	2300      	movs	r3, #0
 80044fc:	7103      	strb	r3, [r0, #4]
 80044fe:	7143      	strb	r3, [r0, #5]
    packet_data = nullptr;
 8004500:	6003      	str	r3, [r0, #0]
    *this = std::move(right);
 8004502:	f7ff ffe9 	bl	80044d8 <_ZN11LoRa_packetaSEOS_>
}
 8004506:	4620      	mov	r0, r4
 8004508:	bd10      	pop	{r4, pc}
	...

0800450c <_GLOBAL__sub_I_lora_packet_data>:
}
 800450c:	4b06      	ldr	r3, [pc, #24]	; (8004528 <_GLOBAL__sub_I_lora_packet_data+0x1c>)
 800450e:	f503 5082 	add.w	r0, r3, #4160	; 0x1040
    std::array<uint8_t, SIZE_LORA_PACKET_MAX_LEN> data;
#else
    uint8_t data[SIZE_LORA_PACKET_MAX_LEN]; // Байты
#endif

    LoRa_packet_data() = default;
 8004512:	2101      	movs	r1, #1
 8004514:	2200      	movs	r2, #0
 8004516:	f803 1c34 	strb.w	r1, [r3, #-52]
 800451a:	f803 2c33 	strb.w	r2, [r3, #-51]
 800451e:	3334      	adds	r3, #52	; 0x34
    struct array
 8004520:	4283      	cmp	r3, r0
 8004522:	d1f8      	bne.n	8004516 <_GLOBAL__sub_I_lora_packet_data+0xa>
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	200006e4 	.word	0x200006e4

0800452c <_ZN13LoRa_registerD1Ev>:
    init(spi, nss_port, nss_pin);
}
#endif

LoRa_register::~LoRa_register() {
}
 800452c:	4770      	bx	lr

0800452e <_ZN13LoRa_register4initEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
    pinMode(_nss, OUTPUT);
    digitalWrite(_nss, HIGH);
}
#else
void LoRa_register::init(SPI_HandleTypeDef* spi, GPIO_TypeDef* nss_port, uint16_t nss_pin) {
    _spi = spi;
 800452e:	6001      	str	r1, [r0, #0]
    _nss_port = nss_port;
 8004530:	6082      	str	r2, [r0, #8]
	_nss_pin = nss_pin;
 8004532:	8083      	strh	r3, [r0, #4]
}
 8004534:	4770      	bx	lr

08004536 <_ZN13LoRa_register5clearEv>:
#endif



void LoRa_register::clear() {
 8004536:	b410      	push	{r4}
 8004538:	f100 030b 	add.w	r3, r0, #11
 800453c:	f100 027b 	add.w	r2, r0, #123	; 0x7b
 8004540:	4614      	mov	r4, r2
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
        _registers_data[i] = 0;
 8004542:	2100      	movs	r1, #0
 8004544:	f803 1f01 	strb.w	r1, [r3, #1]!
        _registers_state[i] = false;
 8004548:	f802 1f01 	strb.w	r1, [r2, #1]!
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 800454c:	42a3      	cmp	r3, r4
 800454e:	d1f9      	bne.n	8004544 <_ZN13LoRa_register5clearEv+0xe>
    }
    _send = false;
 8004550:	2300      	movs	r3, #0
 8004552:	f880 30ec 	strb.w	r3, [r0, #236]	; 0xec
}
 8004556:	bc10      	pop	{r4}
 8004558:	4770      	bx	lr
	...

0800455c <_ZN13LoRa_registerC1Ev>:
LoRa_register::LoRa_register() {
 800455c:	b570      	push	{r4, r5, r6, lr}
 800455e:	4604      	mov	r4, r0
 8004560:	f100 05f0 	add.w	r5, r0, #240	; 0xf0
 8004564:	4e26      	ldr	r6, [pc, #152]	; (8004600 <_ZN13LoRa_registerC1Ev+0xa4>)
 8004566:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800456a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800456e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004572:	f504 7586 	add.w	r5, r4, #268	; 0x10c
 8004576:	4e23      	ldr	r6, [pc, #140]	; (8004604 <_ZN13LoRa_registerC1Ev+0xa8>)
 8004578:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800457a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800457c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004580:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004584:	f504 7594 	add.w	r5, r4, #296	; 0x128
 8004588:	4e1f      	ldr	r6, [pc, #124]	; (8004608 <_ZN13LoRa_registerC1Ev+0xac>)
 800458a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800458c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800458e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004592:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004596:	f504 75a2 	add.w	r5, r4, #324	; 0x144
 800459a:	4e1c      	ldr	r6, [pc, #112]	; (800460c <_ZN13LoRa_registerC1Ev+0xb0>)
 800459c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800459e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045a0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80045a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80045a8:	f504 75b0 	add.w	r5, r4, #352	; 0x160
 80045ac:	4e18      	ldr	r6, [pc, #96]	; (8004610 <_ZN13LoRa_registerC1Ev+0xb4>)
 80045ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80045b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045b2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80045b6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80045ba:	f504 75be 	add.w	r5, r4, #380	; 0x17c
 80045be:	4e15      	ldr	r6, [pc, #84]	; (8004614 <_ZN13LoRa_registerC1Ev+0xb8>)
 80045c0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80045c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045c4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80045c8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80045cc:	f504 75cc 	add.w	r5, r4, #408	; 0x198
 80045d0:	4e11      	ldr	r6, [pc, #68]	; (8004618 <_ZN13LoRa_registerC1Ev+0xbc>)
 80045d2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80045d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045d6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80045da:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80045de:	f504 75da 	add.w	r5, r4, #436	; 0x1b4
 80045e2:	4e0e      	ldr	r6, [pc, #56]	; (800461c <_ZN13LoRa_registerC1Ev+0xc0>)
 80045e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80045e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045e8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80045ec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    _send = false;
 80045f0:	2300      	movs	r3, #0
 80045f2:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    clear();
 80045f6:	4620      	mov	r0, r4
 80045f8:	f7ff ff9d 	bl	8004536 <_ZN13LoRa_register5clearEv>
}
 80045fc:	4620      	mov	r0, r4
 80045fe:	bd70      	pop	{r4, r5, r6, pc}
 8004600:	20001eb8 	.word	0x20001eb8
 8004604:	20001e80 	.word	0x20001e80
 8004608:	20001e2c 	.word	0x20001e2c
 800460c:	20001f28 	.word	0x20001f28
 8004610:	20001f0c 	.word	0x20001f0c
 8004614:	20001b8c 	.word	0x20001b8c
 8004618:	20001c18 	.word	0x20001c18
 800461c:	20001b70 	.word	0x20001b70

08004620 <_ZN13LoRa_register15field_registersEP13Address_fieldh>:
        result_field_registers_data[result_field_registers_len++] = ((uint8_t)(field.get_registers()[i].address() & 0xFF));
    }
    return result_field_registers_len;
}
uint8_t LoRa_register::field_registers(Address_field* fields, uint8_t amt_fields) {
    result_field_registers_len = 0;
 8004620:	2300      	movs	r3, #0
 8004622:	f880 3220 	strb.w	r3, [r0, #544]	; 0x220
    bool reg_add[LORA_DATA_SIZE];
    uint8_t adr;
    if((fields == nullptr) || (amt_fields == 0))
 8004626:	2900      	cmp	r1, #0
 8004628:	d044      	beq.n	80046b4 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x94>
uint8_t LoRa_register::field_registers(Address_field* fields, uint8_t amt_fields) {
 800462a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800462e:	b09d      	sub	sp, #116	; 0x74
 8004630:	4689      	mov	r9, r1
    if((fields == nullptr) || (amt_fields == 0))
 8004632:	2a00      	cmp	r2, #0
 8004634:	d040      	beq.n	80046b8 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x98>
 8004636:	f10d 33ff 	add.w	r3, sp, #4294967295	; 0xffffffff
 800463a:	f10d 046f 	add.w	r4, sp, #111	; 0x6f
        return result_field_registers_len;
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
        reg_add[i] = false;
 800463e:	2100      	movs	r1, #0
 8004640:	f803 1f01 	strb.w	r1, [r3, #1]!
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8004644:	42a3      	cmp	r3, r4
 8004646:	d1fb      	bne.n	8004640 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x20>
 8004648:	4606      	mov	r6, r0
    }
    for(int i = 0; i < amt_fields; ++i) {
 800464a:	b372      	cbz	r2, 80046aa <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x8a>
 800464c:	464f      	mov	r7, r9
 800464e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8004652:	eb09 0982 	add.w	r9, r9, r2, lsl #2
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
            if(reg_add[adr] == false) {
                result_field_registers_data[result_field_registers_len++] = adr;
                reg_add[adr] = true;
 8004656:	f04f 0801 	mov.w	r8, #1
 800465a:	e023      	b.n	80046a4 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x84>
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 800465c:	3401      	adds	r4, #1
 800465e:	4628      	mov	r0, r5
 8004660:	f7fe ff6e 	bl	8003540 <_ZNK13Address_field13get_reg_countEv>
 8004664:	42a0      	cmp	r0, r4
 8004666:	dd1a      	ble.n	800469e <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x7e>
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 8004668:	4628      	mov	r0, r5
 800466a:	f7fe ff67 	bl	800353c <_ZNK13Address_field13get_registersEv>
 800466e:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8004672:	f7fe fd12 	bl	800309a <_ZNK8Register7addressEv>
 8004676:	b2c0      	uxtb	r0, r0
            if(reg_add[adr] == false) {
 8004678:	ab1c      	add	r3, sp, #112	; 0x70
 800467a:	4403      	add	r3, r0
 800467c:	f813 3c70 	ldrb.w	r3, [r3, #-112]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1eb      	bne.n	800465c <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x3c>
                result_field_registers_data[result_field_registers_len++] = adr;
 8004684:	f896 3220 	ldrb.w	r3, [r6, #544]	; 0x220
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	f886 2220 	strb.w	r2, [r6, #544]	; 0x220
 800468e:	4433      	add	r3, r6
 8004690:	f883 01d0 	strb.w	r0, [r3, #464]	; 0x1d0
                reg_add[adr] = true;
 8004694:	ab1c      	add	r3, sp, #112	; 0x70
 8004696:	4418      	add	r0, r3
 8004698:	f800 8c70 	strb.w	r8, [r0, #-112]
 800469c:	e7de      	b.n	800465c <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x3c>
 800469e:	371c      	adds	r7, #28
    for(int i = 0; i < amt_fields; ++i) {
 80046a0:	454f      	cmp	r7, r9
 80046a2:	d002      	beq.n	80046aa <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x8a>
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 80046a4:	463d      	mov	r5, r7
 80046a6:	2400      	movs	r4, #0
 80046a8:	e7d9      	b.n	800465e <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x3e>
            }
        }
    }
    return result_field_registers_len;
 80046aa:	f896 0220 	ldrb.w	r0, [r6, #544]	; 0x220
}
 80046ae:	b01d      	add	sp, #116	; 0x74
 80046b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return result_field_registers_len;
 80046b4:	2000      	movs	r0, #0
}
 80046b6:	4770      	bx	lr
        return result_field_registers_len;
 80046b8:	4610      	mov	r0, r2
 80046ba:	e7f8      	b.n	80046ae <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x8e>

080046bc <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>:
        }
    }
    return result_check_missing_register_len;
}
uint8_t LoRa_register::check_missing_register(Address_field* fields, uint8_t amt_fields) {
    result_check_missing_register_len = 0;
 80046bc:	2300      	movs	r3, #0
 80046be:	f880 3271 	strb.w	r3, [r0, #625]	; 0x271
    if((fields == nullptr) || (amt_fields == 0))
 80046c2:	b331      	cbz	r1, 8004712 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x56>
 80046c4:	b90a      	cbnz	r2, 80046ca <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0xe>
        return result_check_missing_register_len;
 80046c6:	4610      	mov	r0, r2
        if(_registers_state[result_field_registers_data[i]] == false) {
            result_check_missing_register_data[result_check_missing_register_len++] = result_field_registers_data[i];
        }
    }
    return result_check_missing_register_len;
}
 80046c8:	4770      	bx	lr
uint8_t LoRa_register::check_missing_register(Address_field* fields, uint8_t amt_fields) {
 80046ca:	b510      	push	{r4, lr}
 80046cc:	4604      	mov	r4, r0
    field_registers(fields, amt_fields);
 80046ce:	f7ff ffa7 	bl	8004620 <_ZN13LoRa_register15field_registersEP13Address_fieldh>
    for(int i = result_field_registers_len - 1; i >= 0; --i) {
 80046d2:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d418      	bmi.n	800470c <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x50>
 80046da:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80046de:	4423      	add	r3, r4
 80046e0:	f504 71e8 	add.w	r1, r4, #464	; 0x1d0
 80046e4:	e001      	b.n	80046ea <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x2e>
 80046e6:	428b      	cmp	r3, r1
 80046e8:	d010      	beq.n	800470c <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x50>
        if(_registers_state[result_field_registers_data[i]] == false) {
 80046ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80046ee:	4422      	add	r2, r4
 80046f0:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
 80046f4:	2a00      	cmp	r2, #0
 80046f6:	d1f6      	bne.n	80046e6 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x2a>
            result_check_missing_register_data[result_check_missing_register_len++] = result_field_registers_data[i];
 80046f8:	f894 2271 	ldrb.w	r2, [r4, #625]	; 0x271
 80046fc:	1c50      	adds	r0, r2, #1
 80046fe:	f884 0271 	strb.w	r0, [r4, #625]	; 0x271
 8004702:	7818      	ldrb	r0, [r3, #0]
 8004704:	4422      	add	r2, r4
 8004706:	f882 0221 	strb.w	r0, [r2, #545]	; 0x221
 800470a:	e7ec      	b.n	80046e6 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x2a>
    return result_check_missing_register_len;
 800470c:	f894 0271 	ldrb.w	r0, [r4, #625]	; 0x271
}
 8004710:	bd10      	pop	{r4, pc}
        return result_check_missing_register_len;
 8004712:	2000      	movs	r0, #0
 8004714:	4770      	bx	lr

08004716 <_ZN13LoRa_register10check_readEP13Address_fieldh>:
            if(field.get_registers()[i].mask() != 0xFF)
                return true;
    }
    return false;
}
bool LoRa_register::check_read(Address_field* fields, uint8_t amt_fields) {
 8004716:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800471a:	b09d      	sub	sp, #116	; 0x74
 800471c:	4606      	mov	r6, r0
 800471e:	f10d 35ff 	add.w	r5, sp, #4294967295	; 0xffffffff
 8004722:	f10d 046f 	add.w	r4, sp, #111	; 0x6f
 8004726:	462b      	mov	r3, r5
    bool check_reg_read = false;
    uint8_t reg_bit[LORA_DATA_SIZE];
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
        reg_bit[i] = 0;
 8004728:	2000      	movs	r0, #0
 800472a:	f803 0f01 	strb.w	r0, [r3, #1]!
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 800472e:	42a3      	cmp	r3, r4
 8004730:	d1fb      	bne.n	800472a <_ZN13LoRa_register10check_readEP13Address_fieldh+0x14>
    }
    // Достаём из полей значения битов регистров
    uint8_t adr;
    for(int i = 0; i < amt_fields; ++i) {
 8004732:	b34a      	cbz	r2, 8004788 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x72>
 8004734:	4689      	mov	r9, r1
 8004736:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800473a:	eb01 0a82 	add.w	sl, r1, r2, lsl #2
 800473e:	e003      	b.n	8004748 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x32>
 8004740:	f109 091c 	add.w	r9, r9, #28
 8004744:	45d1      	cmp	r9, sl
 8004746:	d01f      	beq.n	8004788 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x72>
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8004748:	46c8      	mov	r8, r9
 800474a:	2700      	movs	r7, #0
 800474c:	4640      	mov	r0, r8
 800474e:	f7fe fef7 	bl	8003540 <_ZNK13Address_field13get_reg_countEv>
 8004752:	42b8      	cmp	r0, r7
 8004754:	ddf4      	ble.n	8004740 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x2a>
            adr = fields[i].get_registers()[j].address();
 8004756:	4640      	mov	r0, r8
 8004758:	f7fe fef0 	bl	800353c <_ZNK13Address_field13get_registersEv>
 800475c:	ea4f 0bc7 	mov.w	fp, r7, lsl #3
 8004760:	4458      	add	r0, fp
 8004762:	f7fe fc9a 	bl	800309a <_ZNK8Register7addressEv>
 8004766:	4604      	mov	r4, r0
            reg_bit[adr] |= fields[i].get_registers()[j].mask();
 8004768:	4640      	mov	r0, r8
 800476a:	f7fe fee7 	bl	800353c <_ZNK13Address_field13get_registersEv>
 800476e:	4458      	add	r0, fp
 8004770:	f7fe fc95 	bl	800309e <_ZNK8Register4maskEv>
 8004774:	b2e3      	uxtb	r3, r4
 8004776:	aa1c      	add	r2, sp, #112	; 0x70
 8004778:	4413      	add	r3, r2
 800477a:	f813 2c70 	ldrb.w	r2, [r3, #-112]
 800477e:	4310      	orrs	r0, r2
 8004780:	f803 0c70 	strb.w	r0, [r3, #-112]
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8004784:	3701      	adds	r7, #1
 8004786:	e7e1      	b.n	800474c <_ZN13LoRa_register10check_readEP13Address_fieldh+0x36>
        }
    }

    reg_read_len = 0;
 8004788:	2000      	movs	r0, #0
 800478a:	f886 02c2 	strb.w	r0, [r6, #706]	; 0x2c2
    reg_not_read_len = 0;
 800478e:	f886 0313 	strb.w	r0, [r6, #787]	; 0x313

    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8004792:	4603      	mov	r3, r0
                reg_not_read[reg_not_read_len++] = i;
            }
            else {
                // Если хоть один бит не занят, то без считывания его можно будет затереть => считывать необходимо
                reg_read[reg_read_len++] = i;
                check_reg_read = true;
 8004794:	2401      	movs	r4, #1
 8004796:	e00a      	b.n	80047ae <_ZN13LoRa_register10check_readEP13Address_fieldh+0x98>
                reg_not_read[reg_not_read_len++] = i;
 8004798:	f896 2313 	ldrb.w	r2, [r6, #787]	; 0x313
 800479c:	1c51      	adds	r1, r2, #1
 800479e:	f886 1313 	strb.w	r1, [r6, #787]	; 0x313
 80047a2:	4432      	add	r2, r6
 80047a4:	f882 32c3 	strb.w	r3, [r2, #707]	; 0x2c3
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 80047a8:	3301      	adds	r3, #1
 80047aa:	2b70      	cmp	r3, #112	; 0x70
 80047ac:	d014      	beq.n	80047d8 <_ZN13LoRa_register10check_readEP13Address_fieldh+0xc2>
        if (reg_bit[i] != 0x00) {
 80047ae:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80047b2:	2a00      	cmp	r2, #0
 80047b4:	d0f8      	beq.n	80047a8 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x92>
            if ((reg_bit[i] == 0xFF) || (_registers_state[i] == true)) {
 80047b6:	2aff      	cmp	r2, #255	; 0xff
 80047b8:	d0ee      	beq.n	8004798 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x82>
 80047ba:	18f2      	adds	r2, r6, r3
 80047bc:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
 80047c0:	2a00      	cmp	r2, #0
 80047c2:	d1e9      	bne.n	8004798 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x82>
                reg_read[reg_read_len++] = i;
 80047c4:	f896 22c2 	ldrb.w	r2, [r6, #706]	; 0x2c2
 80047c8:	1c51      	adds	r1, r2, #1
 80047ca:	f886 12c2 	strb.w	r1, [r6, #706]	; 0x2c2
 80047ce:	4432      	add	r2, r6
 80047d0:	f882 3272 	strb.w	r3, [r2, #626]	; 0x272
                check_reg_read = true;
 80047d4:	4620      	mov	r0, r4
 80047d6:	e7e7      	b.n	80047a8 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x92>
            }
        }
    }
    return check_reg_read; // Наличие хоть одного регистра, который нужно будет считать

}
 80047d8:	b01d      	add	sp, #116	; 0x74
 80047da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080047de <_ZN13LoRa_register16_single_transferEhh>:
    return _single_transfer(address & 0x7f, 0x00);
}
void LoRa_register::_write_register(uint8_t address, uint8_t value) {
    _single_transfer(address | 0x80, value);
}
uint8_t LoRa_register::_single_transfer(uint8_t address, uint8_t value) {
 80047de:	b510      	push	{r4, lr}
 80047e0:	b086      	sub	sp, #24
 80047e2:	4604      	mov	r4, r0
 80047e4:	f88d 100f 	strb.w	r1, [sp, #15]
 80047e8:	f88d 200e 	strb.w	r2, [sp, #14]
    _spi->endTransaction();
    // Прекращение NSS сигнала
    digitalWrite(_nss, HIGH);
#else
    // Подача NSS сигнала
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 80047ec:	2200      	movs	r2, #0
 80047ee:	8881      	ldrh	r1, [r0, #4]
 80047f0:	6880      	ldr	r0, [r0, #8]
 80047f2:	f003 fc43 	bl	800807c <HAL_GPIO_WritePin>
    // Отправка бита действия и 7 бит адреса
    HAL_SPI_TransmitReceive(_spi, &address, &response, 1, 1000);
 80047f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	2301      	movs	r3, #1
 80047fe:	f10d 0217 	add.w	r2, sp, #23
 8004802:	f10d 010f 	add.w	r1, sp, #15
 8004806:	6820      	ldr	r0, [r4, #0]
 8004808:	f005 fce3 	bl	800a1d2 <HAL_SPI_TransmitReceive>
 800480c:	2332      	movs	r3, #50	; 0x32
    for(int i = 0; i < 50; i++) __NOP();
 800480e:	bf00      	nop
 8004810:	3b01      	subs	r3, #1
 8004812:	d1fc      	bne.n	800480e <_ZN13LoRa_register16_single_transferEhh+0x30>
    // Отправка/приём байта значения
    HAL_SPI_TransmitReceive(_spi, &value, &response, 1, 1000);
 8004814:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	2301      	movs	r3, #1
 800481c:	f10d 0217 	add.w	r2, sp, #23
 8004820:	f10d 010e 	add.w	r1, sp, #14
 8004824:	6820      	ldr	r0, [r4, #0]
 8004826:	f005 fcd4 	bl	800a1d2 <HAL_SPI_TransmitReceive>
 800482a:	2314      	movs	r3, #20
    for(int i = 0; i < 20; i++) __NOP();
 800482c:	bf00      	nop
 800482e:	3b01      	subs	r3, #1
 8004830:	d1fc      	bne.n	800482c <_ZN13LoRa_register16_single_transferEhh+0x4e>
    // Прекращение NSS сигнала
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_SET);
 8004832:	2201      	movs	r2, #1
 8004834:	88a1      	ldrh	r1, [r4, #4]
 8004836:	68a0      	ldr	r0, [r4, #8]
 8004838:	f003 fc20 	bl	800807c <HAL_GPIO_WritePin>
#endif
    return response;
}
 800483c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8004840:	b006      	add	sp, #24
 8004842:	bd10      	pop	{r4, pc}

08004844 <_ZN13LoRa_register14_read_registerEh>:
uint8_t LoRa_register::_read_register(uint8_t address) {
 8004844:	b508      	push	{r3, lr}
    return _single_transfer(address & 0x7f, 0x00);
 8004846:	2200      	movs	r2, #0
 8004848:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800484c:	f7ff ffc7 	bl	80047de <_ZN13LoRa_register16_single_transferEhh>
}
 8004850:	bd08      	pop	{r3, pc}

08004852 <_ZN13LoRa_register13register_readEP13Address_fieldhb>:
uint8_t LoRa_register::register_read(Address_field* fields, uint8_t amt_fields, bool update) {
 8004852:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004856:	4606      	mov	r6, r0
 8004858:	460c      	mov	r4, r1
 800485a:	4615      	mov	r5, r2
 800485c:	461f      	mov	r7, r3
    if (_send)
 800485e:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
 8004862:	b9fb      	cbnz	r3, 80048a4 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x52>
    if (update) {
 8004864:	b30f      	cbz	r7, 80048aa <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x58>
        field_registers(fields, amt_fields);
 8004866:	462a      	mov	r2, r5
 8004868:	4621      	mov	r1, r4
 800486a:	4630      	mov	r0, r6
 800486c:	f7ff fed8 	bl	8004620 <_ZN13LoRa_register15field_registersEP13Address_fieldh>
        registers = &result_field_registers_data;
 8004870:	f506 77e8 	add.w	r7, r6, #464	; 0x1d0
        len = result_field_registers_len;
 8004874:	f896 9220 	ldrb.w	r9, [r6, #544]	; 0x220
    for(int i = 0; i < amt_read; ++i) {
 8004878:	f1b9 0f00 	cmp.w	r9, #0
 800487c:	d00f      	beq.n	800489e <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x4c>
 800487e:	463d      	mov	r5, r7
 8004880:	444f      	add	r7, r9
        _registers_state[adr] = true;
 8004882:	f04f 0801 	mov.w	r8, #1
        adr = (*registers)[i];
 8004886:	f815 4b01 	ldrb.w	r4, [r5], #1
        _registers_data[adr] = _read_register(adr);
 800488a:	4621      	mov	r1, r4
 800488c:	4630      	mov	r0, r6
 800488e:	f7ff ffd9 	bl	8004844 <_ZN13LoRa_register14_read_registerEh>
 8004892:	4434      	add	r4, r6
 8004894:	7320      	strb	r0, [r4, #12]
        _registers_state[adr] = true;
 8004896:	f884 807c 	strb.w	r8, [r4, #124]	; 0x7c
    for(int i = 0; i < amt_read; ++i) {
 800489a:	42bd      	cmp	r5, r7
 800489c:	d1f3      	bne.n	8004886 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x34>
}
 800489e:	4648      	mov	r0, r9
 80048a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        clear();
 80048a4:	f7ff fe47 	bl	8004536 <_ZN13LoRa_register5clearEv>
 80048a8:	e7dc      	b.n	8004864 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x12>
        check_missing_register(fields, amt_fields);
 80048aa:	462a      	mov	r2, r5
 80048ac:	4621      	mov	r1, r4
 80048ae:	4630      	mov	r0, r6
 80048b0:	f7ff ff04 	bl	80046bc <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
        registers = &result_check_missing_register_data;
 80048b4:	f206 2721 	addw	r7, r6, #545	; 0x221
        len = result_check_missing_register_len;
 80048b8:	f896 9271 	ldrb.w	r9, [r6, #625]	; 0x271
 80048bc:	e7dc      	b.n	8004878 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x26>

080048be <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb>:
uint8_t LoRa_register::get_field_value(Address_field* fields, uint32_t* values, uint8_t amt, bool read) {
 80048be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048c2:	4606      	mov	r6, r0
 80048c4:	460f      	mov	r7, r1
 80048c6:	4615      	mov	r5, r2
 80048c8:	4699      	mov	r9, r3
 80048ca:	f89d 4020 	ldrb.w	r4, [sp, #32]
    check_missing_register(fields, amt);
 80048ce:	461a      	mov	r2, r3
 80048d0:	f7ff fef4 	bl	80046bc <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
    if((result_check_missing_register_len != 0) || read) {
 80048d4:	f896 3271 	ldrb.w	r3, [r6, #625]	; 0x271
 80048d8:	b903      	cbnz	r3, 80048dc <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x1e>
 80048da:	b12c      	cbz	r4, 80048e8 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x2a>
        register_read(fields, amt, read);
 80048dc:	4623      	mov	r3, r4
 80048de:	464a      	mov	r2, r9
 80048e0:	4639      	mov	r1, r7
 80048e2:	4630      	mov	r0, r6
 80048e4:	f7ff ffb5 	bl	8004852 <_ZN13LoRa_register13register_readEP13Address_fieldhb>
    for(int i = 0; i < amt; ++i)
 80048e8:	f1b9 0f00 	cmp.w	r9, #0
 80048ec:	d012      	beq.n	8004914 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x56>
 80048ee:	463c      	mov	r4, r7
 80048f0:	3d04      	subs	r5, #4
 80048f2:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 80048f6:	eb07 0783 	add.w	r7, r7, r3, lsl #2
        values[i] = fields[i].get_value(_registers_data, LORA_DATA_SIZE);
 80048fa:	360c      	adds	r6, #12
 80048fc:	f04f 0870 	mov.w	r8, #112	; 0x70
 8004900:	4642      	mov	r2, r8
 8004902:	4631      	mov	r1, r6
 8004904:	4620      	mov	r0, r4
 8004906:	f7fe fc4c 	bl	80031a2 <_ZNK13Address_field9get_valueEPKhi>
 800490a:	f845 0f04 	str.w	r0, [r5, #4]!
 800490e:	341c      	adds	r4, #28
    for(int i = 0; i < amt; ++i)
 8004910:	42bc      	cmp	r4, r7
 8004912:	d1f5      	bne.n	8004900 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x42>
}
 8004914:	4648      	mov	r0, r9
 8004916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800491a <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>:
uint8_t LoRa_register::get_field_value(Address_field field, uint32_t* value, bool read) {
 800491a:	b084      	sub	sp, #16
 800491c:	b510      	push	{r4, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	ac05      	add	r4, sp, #20
 8004922:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return get_field_value(&field, value, 1, read);
 8004926:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	2301      	movs	r3, #1
 800492e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004930:	4621      	mov	r1, r4
 8004932:	f7ff ffc4 	bl	80048be <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb>
}
 8004936:	b002      	add	sp, #8
 8004938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800493c:	b004      	add	sp, #16
 800493e:	4770      	bx	lr

08004940 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>:
uint8_t LoRa_register::set_field_value(Address_field* fields, uint32_t* values, uint8_t amt) {
 8004940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004944:	4680      	mov	r8, r0
 8004946:	460e      	mov	r6, r1
 8004948:	4617      	mov	r7, r2
 800494a:	461c      	mov	r4, r3
    check_missing_register(fields, amt);
 800494c:	461a      	mov	r2, r3
 800494e:	f7ff feb5 	bl	80046bc <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
    if(result_check_missing_register_len > 0) {
 8004952:	f898 3271 	ldrb.w	r3, [r8, #625]	; 0x271
 8004956:	b9cb      	cbnz	r3, 800498c <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x4c>
    for(int i = 0; i < amt; ++i) {
 8004958:	46a1      	mov	r9, r4
 800495a:	b39c      	cbz	r4, 80049c4 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x84>
 800495c:	3f04      	subs	r7, #4
 800495e:	2500      	movs	r5, #0
        result = fields[i].set_value(values[i], _registers_data, LORA_DATA_SIZE);
 8004960:	f108 080c 	add.w	r8, r8, #12
 8004964:	f04f 0a70 	mov.w	sl, #112	; 0x70
 8004968:	b2ec      	uxtb	r4, r5
 800496a:	4653      	mov	r3, sl
 800496c:	4642      	mov	r2, r8
 800496e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8004972:	4630      	mov	r0, r6
 8004974:	f7fe fc4f 	bl	8003216 <_ZNK13Address_field9set_valueEmPhi>
        if(result)
 8004978:	b928      	cbnz	r0, 8004986 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x46>
 800497a:	3401      	adds	r4, #1
 800497c:	b2e4      	uxtb	r4, r4
    for(int i = 0; i < amt; ++i) {
 800497e:	3501      	adds	r5, #1
 8004980:	361c      	adds	r6, #28
 8004982:	454d      	cmp	r5, r9
 8004984:	d1f0      	bne.n	8004968 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x28>
}
 8004986:	4620      	mov	r0, r4
 8004988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        read_fields = check_read(fields, amt);
 800498c:	4622      	mov	r2, r4
 800498e:	4631      	mov	r1, r6
 8004990:	4640      	mov	r0, r8
 8004992:	f7ff fec0 	bl	8004716 <_ZN13LoRa_register10check_readEP13Address_fieldh>
        for(int i = 0; i < reg_not_read_len; ++i) {
 8004996:	f898 1313 	ldrb.w	r1, [r8, #787]	; 0x313
 800499a:	b151      	cbz	r1, 80049b2 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x72>
 800499c:	f208 22c2 	addw	r2, r8, #706	; 0x2c2
 80049a0:	4411      	add	r1, r2
            _registers_state[reg_not_read[i]] = true;
 80049a2:	2501      	movs	r5, #1
 80049a4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80049a8:	4443      	add	r3, r8
 80049aa:	f883 507c 	strb.w	r5, [r3, #124]	; 0x7c
        for(int i = 0; i < reg_not_read_len; ++i) {
 80049ae:	428a      	cmp	r2, r1
 80049b0:	d1f8      	bne.n	80049a4 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x64>
        if(read_fields) {
 80049b2:	2800      	cmp	r0, #0
 80049b4:	d0d0      	beq.n	8004958 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x18>
            register_read(fields, amt, false);
 80049b6:	2300      	movs	r3, #0
 80049b8:	4622      	mov	r2, r4
 80049ba:	4631      	mov	r1, r6
 80049bc:	4640      	mov	r0, r8
 80049be:	f7ff ff48 	bl	8004852 <_ZN13LoRa_register13register_readEP13Address_fieldhb>
 80049c2:	e7c9      	b.n	8004958 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x18>
    for(int i = 0; i < amt; ++i) {
 80049c4:	2400      	movs	r4, #0
 80049c6:	e7de      	b.n	8004986 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x46>

080049c8 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>:
uint8_t LoRa_register::set_field_value(Address_field field, uint32_t value) {
 80049c8:	b084      	sub	sp, #16
 80049ca:	b510      	push	{r4, lr}
 80049cc:	ac03      	add	r4, sp, #12
 80049ce:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return set_field_value(&field, &value, 1);
 80049d2:	2301      	movs	r3, #1
 80049d4:	aa0a      	add	r2, sp, #40	; 0x28
 80049d6:	4621      	mov	r1, r4
 80049d8:	f7ff ffb2 	bl	8004940 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
}
 80049dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049e0:	b004      	add	sp, #16
 80049e2:	4770      	bx	lr

080049e4 <_ZN13LoRa_register15_write_registerEhh>:
void LoRa_register::_write_register(uint8_t address, uint8_t value) {
 80049e4:	b508      	push	{r3, lr}
    _single_transfer(address | 0x80, value);
 80049e6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80049ea:	f7ff fef8 	bl	80047de <_ZN13LoRa_register16_single_transferEhh>
}
 80049ee:	bd08      	pop	{r3, pc}

080049f0 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>:
uint8_t LoRa_register::register_write(Address_field* fields, uint8_t amt_fields, bool fl_clear, bool error_clear) {
 80049f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049f4:	4605      	mov	r5, r0
 80049f6:	460e      	mov	r6, r1
 80049f8:	4690      	mov	r8, r2
 80049fa:	461f      	mov	r7, r3
 80049fc:	f89d 4018 	ldrb.w	r4, [sp, #24]
    if(check_missing_register(fields, amt_fields) != 0) {
 8004a00:	f7ff fe5c 	bl	80046bc <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
 8004a04:	b140      	cbz	r0, 8004a18 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x28>
        if(error_clear)
 8004a06:	b914      	cbnz	r4, 8004a0e <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x1e>
        return 0;
 8004a08:	2000      	movs	r0, #0
}
 8004a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            clear();
 8004a0e:	4628      	mov	r0, r5
 8004a10:	f7ff fd91 	bl	8004536 <_ZN13LoRa_register5clearEv>
        return 0;
 8004a14:	2000      	movs	r0, #0
 8004a16:	e7f8      	b.n	8004a0a <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x1a>
    field_registers(fields, amt_fields);
 8004a18:	4642      	mov	r2, r8
 8004a1a:	4631      	mov	r1, r6
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	f7ff fdff 	bl	8004620 <_ZN13LoRa_register15field_registersEP13Address_fieldh>
    for(int i = 0; i < result_field_registers_len; ++i) {
 8004a22:	f895 3220 	ldrb.w	r3, [r5, #544]	; 0x220
 8004a26:	b183      	cbz	r3, 8004a4a <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x5a>
 8004a28:	f205 14cf 	addw	r4, r5, #463	; 0x1cf
 8004a2c:	1c66      	adds	r6, r4, #1
        _write_register(result_field_registers_data[i], _registers_data[result_field_registers_data[i]]);
 8004a2e:	7861      	ldrb	r1, [r4, #1]
 8004a30:	186b      	adds	r3, r5, r1
 8004a32:	7b1a      	ldrb	r2, [r3, #12]
 8004a34:	4628      	mov	r0, r5
 8004a36:	f7ff ffd5 	bl	80049e4 <_ZN13LoRa_register15_write_registerEhh>
 8004a3a:	f5a4 74e7 	sub.w	r4, r4, #462	; 0x1ce
 8004a3e:	1b63      	subs	r3, r4, r5
 8004a40:	4634      	mov	r4, r6
    for(int i = 0; i < result_field_registers_len; ++i) {
 8004a42:	f895 2220 	ldrb.w	r2, [r5, #544]	; 0x220
 8004a46:	429a      	cmp	r2, r3
 8004a48:	dcf0      	bgt.n	8004a2c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x3c>
    _send = true;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
    if (fl_clear) {
 8004a50:	b917      	cbnz	r7, 8004a58 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x68>
    return result_field_registers_len;
 8004a52:	f895 0220 	ldrb.w	r0, [r5, #544]	; 0x220
 8004a56:	e7d8      	b.n	8004a0a <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x1a>
        clear();
 8004a58:	4628      	mov	r0, r5
 8004a5a:	f7ff fd6c 	bl	8004536 <_ZN13LoRa_register5clearEv>
 8004a5e:	e7f8      	b.n	8004a52 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x62>

08004a60 <_ZN13LoRa_register14register_writeE13Address_fieldbb>:
uint8_t LoRa_register::register_write(Address_field field, bool fl_clear, bool error_clear) {
 8004a60:	b084      	sub	sp, #16
 8004a62:	b510      	push	{r4, lr}
 8004a64:	b082      	sub	sp, #8
 8004a66:	ac05      	add	r4, sp, #20
 8004a68:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return register_write(&field, 1, fl_clear, error_clear);
 8004a6c:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8004a76:	2201      	movs	r2, #1
 8004a78:	4621      	mov	r1, r4
 8004a7a:	f7ff ffb9 	bl	80049f0 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
}
 8004a7e:	b002      	add	sp, #8
 8004a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a84:	b004      	add	sp, #16
 8004a86:	4770      	bx	lr

08004a88 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb>:
uint8_t LoRa_register::clear_flags(Address_field* flags, uint8_t amt_flags, bool back_value) {
 8004a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a8c:	b085      	sub	sp, #20
    if(_registers_state[REG_IRQ_FLAGS] == false) {
 8004a8e:	4c2f      	ldr	r4, [pc, #188]	; (8004b4c <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0xc4>)
 8004a90:	f894 b000 	ldrb.w	fp, [r4]
 8004a94:	eb00 040b 	add.w	r4, r0, fp
 8004a98:	f894 407c 	ldrb.w	r4, [r4, #124]	; 0x7c
 8004a9c:	b18c      	cbz	r4, 8004ac2 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x3a>
 8004a9e:	9303      	str	r3, [sp, #12]
 8004aa0:	9201      	str	r2, [sp, #4]
 8004aa2:	9102      	str	r1, [sp, #8]
 8004aa4:	4681      	mov	r9, r0
    for(int i = 0; i < amt_flags; ++i) {
 8004aa6:	4692      	mov	sl, r2
 8004aa8:	2a00      	cmp	r2, #0
 8004aaa:	d049      	beq.n	8004b40 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0xb8>
 8004aac:	460f      	mov	r7, r1
 8004aae:	f04f 0800 	mov.w	r8, #0
 8004ab2:	f500 76e8 	add.w	r6, r0, #464	; 0x1d0
 8004ab6:	e00b      	b.n	8004ad0 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x48>
        _registers_data[REG_IRQ_FLAGS] = data;
 8004ab8:	44d9      	add	r9, fp
 8004aba:	f889 400c 	strb.w	r4, [r9, #12]
    return amt_flags;
 8004abe:	4628      	mov	r0, r5
 8004ac0:	e013      	b.n	8004aea <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x62>
        return 0; // флаги не считаны
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	e011      	b.n	8004aea <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x62>
    for(int i = 0; i < amt_flags; ++i) {
 8004ac6:	f108 0801 	add.w	r8, r8, #1
 8004aca:	371c      	adds	r7, #28
 8004acc:	45d0      	cmp	r8, sl
 8004ace:	d00f      	beq.n	8004af0 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x68>
            if(flags[i] == _flags[j]) {
 8004ad0:	463d      	mov	r5, r7
 8004ad2:	f109 04f0 	add.w	r4, r9, #240	; 0xf0
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	4628      	mov	r0, r5
 8004ada:	f7fe fd33 	bl	8003544 <_ZeqRK13Address_fieldS1_>
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	d1f1      	bne.n	8004ac6 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x3e>
 8004ae2:	341c      	adds	r4, #28
        for(int j = 0; j < AMT_FLAGS; ++j) {
 8004ae4:	42b4      	cmp	r4, r6
 8004ae6:	d1f6      	bne.n	8004ad6 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x4e>
            return 0; // хоть одно поле не флаг
 8004ae8:	2000      	movs	r0, #0
}
 8004aea:	b005      	add	sp, #20
 8004aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t data = _registers_data[REG_IRQ_FLAGS];
 8004af0:	eb09 030b 	add.w	r3, r9, fp
 8004af4:	7b1c      	ldrb	r4, [r3, #12]
    _registers_data[REG_IRQ_FLAGS] = 0;
 8004af6:	2200      	movs	r2, #0
 8004af8:	731a      	strb	r2, [r3, #12]
 8004afa:	4b15      	ldr	r3, [pc, #84]	; (8004b50 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0xc8>)
 8004afc:	9a01      	ldr	r2, [sp, #4]
 8004afe:	eb03 0182 	add.w	r1, r3, r2, lsl #2
        _values_clear_flags_[i] = 1;
 8004b02:	2201      	movs	r2, #1
 8004b04:	f843 2f04 	str.w	r2, [r3, #4]!
    for(int i = 0; i < amt_flags; ++i)
 8004b08:	4299      	cmp	r1, r3
 8004b0a:	d1fb      	bne.n	8004b04 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x7c>
    set_field_value(flags, _values_clear_flags_, amt_flags);
 8004b0c:	9d01      	ldr	r5, [sp, #4]
 8004b0e:	462b      	mov	r3, r5
 8004b10:	4a10      	ldr	r2, [pc, #64]	; (8004b54 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0xcc>)
 8004b12:	9902      	ldr	r1, [sp, #8]
 8004b14:	4648      	mov	r0, r9
 8004b16:	f7ff ff13 	bl	8004940 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
    _write_register(REG_IRQ_FLAGS, _registers_data[REG_IRQ_FLAGS]);
 8004b1a:	eb09 030b 	add.w	r3, r9, fp
 8004b1e:	7b1a      	ldrb	r2, [r3, #12]
 8004b20:	4659      	mov	r1, fp
 8004b22:	4648      	mov	r0, r9
 8004b24:	f7ff ff5e 	bl	80049e4 <_ZN13LoRa_register15_write_registerEhh>
    if(back_value) {
 8004b28:	9b03      	ldr	r3, [sp, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1c4      	bne.n	8004ab8 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x30>
        _registers_data[REG_IRQ_FLAGS] = data | ~_registers_data[REG_IRQ_FLAGS];
 8004b2e:	44d9      	add	r9, fp
 8004b30:	f899 300c 	ldrb.w	r3, [r9, #12]
 8004b34:	ea64 0403 	orn	r4, r4, r3
 8004b38:	f889 400c 	strb.w	r4, [r9, #12]
    return amt_flags;
 8004b3c:	9801      	ldr	r0, [sp, #4]
 8004b3e:	e7d4      	b.n	8004aea <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x62>
    uint8_t data = _registers_data[REG_IRQ_FLAGS];
 8004b40:	eb00 030b 	add.w	r3, r0, fp
 8004b44:	7b1c      	ldrb	r4, [r3, #12]
    _registers_data[REG_IRQ_FLAGS] = 0;
 8004b46:	2200      	movs	r2, #0
 8004b48:	731a      	strb	r2, [r3, #12]
 8004b4a:	e7df      	b.n	8004b0c <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x84>
 8004b4c:	0800bb54 	.word	0x0800bb54
 8004b50:	200016ec 	.word	0x200016ec
 8004b54:	200016f0 	.word	0x200016f0

08004b58 <_ZN13LoRa_register11clear_flagsE13Address_fieldb>:
uint8_t LoRa_register::clear_flags(Address_field flag, bool back_value) {
 8004b58:	b084      	sub	sp, #16
 8004b5a:	b510      	push	{r4, lr}
 8004b5c:	ac03      	add	r4, sp, #12
 8004b5e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return clear_flags(&flag, 1, back_value);
 8004b62:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8004b66:	2201      	movs	r2, #1
 8004b68:	4621      	mov	r1, r4
 8004b6a:	f7ff ff8d 	bl	8004a88 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb>
}
 8004b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b72:	b004      	add	sp, #16
 8004b74:	4770      	bx	lr
	...

08004b78 <_GLOBAL__sub_I_REG_FIFO>:
    // Dio2Mapping, Dio3Mapping, Dio4Mapping, Dio5Mapping,
    Version,
    // FastHopOn, TcxoInputOn,
    PaDac
    // FormerTemp, BitRateFrac, AgcReferenceLevel, AgcStep1, AgcStep2, AgcStep3, AgcStep4, AgcStep5, PllBandwidth
};
 8004b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b7c:	b087      	sub	sp, #28
reg_fifo[1] = {Register(REG_FIFO, 8, 0)},
 8004b7e:	4dc8      	ldr	r5, [pc, #800]	; (8004ea0 <_GLOBAL__sub_I_REG_FIFO+0x328>)
 8004b80:	2300      	movs	r3, #0
 8004b82:	2208      	movs	r2, #8
 8004b84:	4619      	mov	r1, r3
 8004b86:	4628      	mov	r0, r5
 8004b88:	f7fe fa64 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_long_range_mode[1] = {Register(REG_OP_MODE, 1, 7)},
 8004b8c:	f8df a3d0 	ldr.w	sl, [pc, #976]	; 8004f60 <_GLOBAL__sub_I_REG_FIFO+0x3e8>
 8004b90:	2307      	movs	r3, #7
 8004b92:	2201      	movs	r2, #1
 8004b94:	4611      	mov	r1, r2
 8004b96:	4650      	mov	r0, sl
 8004b98:	f7fe fa5c 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_low_frequency_mode_on[1] = {Register(REG_OP_MODE, 1, 3)},
 8004b9c:	f8df 93c4 	ldr.w	r9, [pc, #964]	; 8004f64 <_GLOBAL__sub_I_REG_FIFO+0x3ec>
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	4648      	mov	r0, r9
 8004ba8:	f7fe fa54 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_mode[1] = {Register(REG_OP_MODE, 3, 0)},
 8004bac:	2300      	movs	r3, #0
 8004bae:	2203      	movs	r2, #3
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	48bc      	ldr	r0, [pc, #752]	; (8004ea4 <_GLOBAL__sub_I_REG_FIFO+0x32c>)
 8004bb4:	f7fe fa4e 	bl	8003054 <_ZN8RegisterC1Ethh>
              Register(REG_FRF_MSB, 8, 0)},
 8004bb8:	f8df 83ac 	ldr.w	r8, [pc, #940]	; 8004f68 <_GLOBAL__sub_I_REG_FIFO+0x3f0>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	2208      	movs	r2, #8
 8004bc0:	4611      	mov	r1, r2
 8004bc2:	4640      	mov	r0, r8
 8004bc4:	f7fe fa46 	bl	8003054 <_ZN8RegisterC1Ethh>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	2208      	movs	r2, #8
 8004bcc:	2107      	movs	r1, #7
 8004bce:	eb08 0002 	add.w	r0, r8, r2
 8004bd2:	f7fe fa3f 	bl	8003054 <_ZN8RegisterC1Ethh>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2208      	movs	r2, #8
 8004bda:	2106      	movs	r1, #6
 8004bdc:	f108 0010 	add.w	r0, r8, #16
 8004be0:	f7fe fa38 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_pa_select[1] = {Register(REG_PA_CONFIG, 1, 7)},
 8004be4:	2307      	movs	r3, #7
 8004be6:	2201      	movs	r2, #1
 8004be8:	2109      	movs	r1, #9
 8004bea:	48af      	ldr	r0, [pc, #700]	; (8004ea8 <_GLOBAL__sub_I_REG_FIFO+0x330>)
 8004bec:	f7fe fa32 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_max_power[1] = {Register(REG_PA_CONFIG, 3, 4)},
 8004bf0:	2304      	movs	r3, #4
 8004bf2:	2203      	movs	r2, #3
 8004bf4:	2109      	movs	r1, #9
 8004bf6:	48ad      	ldr	r0, [pc, #692]	; (8004eac <_GLOBAL__sub_I_REG_FIFO+0x334>)
 8004bf8:	f7fe fa2c 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_output_power[1] = {Register(REG_PA_CONFIG, 4, 0)},
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	2204      	movs	r2, #4
 8004c00:	2109      	movs	r1, #9
 8004c02:	48ab      	ldr	r0, [pc, #684]	; (8004eb0 <_GLOBAL__sub_I_REG_FIFO+0x338>)
 8004c04:	f7fe fa26 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_lna_boost_hf[1] = {Register(REG_LNA, 2, 0)},
 8004c08:	2300      	movs	r3, #0
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	210c      	movs	r1, #12
 8004c0e:	48a9      	ldr	r0, [pc, #676]	; (8004eb4 <_GLOBAL__sub_I_REG_FIFO+0x33c>)
 8004c10:	f7fe fa20 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_fifo_addr_ptr[1] = {Register(REG_FIFO_ADDR_PTR, 8, 0)},
 8004c14:	2300      	movs	r3, #0
 8004c16:	2208      	movs	r2, #8
 8004c18:	210d      	movs	r1, #13
 8004c1a:	48a7      	ldr	r0, [pc, #668]	; (8004eb8 <_GLOBAL__sub_I_REG_FIFO+0x340>)
 8004c1c:	f7fe fa1a 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_fifo_tx_base_addr[1] = {Register(REG_FIFO_TX_BASE_ADDR, 8, 0)},
 8004c20:	2300      	movs	r3, #0
 8004c22:	2208      	movs	r2, #8
 8004c24:	210e      	movs	r1, #14
 8004c26:	48a5      	ldr	r0, [pc, #660]	; (8004ebc <_GLOBAL__sub_I_REG_FIFO+0x344>)
 8004c28:	f7fe fa14 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_fifo_rx_base_addr[1] = {Register(REG_FIFO_RX_BASE_ADDR, 8, 0)},
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	2208      	movs	r2, #8
 8004c30:	210f      	movs	r1, #15
 8004c32:	48a3      	ldr	r0, [pc, #652]	; (8004ec0 <_GLOBAL__sub_I_REG_FIFO+0x348>)
 8004c34:	f7fe fa0e 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_fifo_rx_current_addr[1] = {Register(REG_FIFO_RX_CURRENT_ADDR, 8, 0)},
 8004c38:	2300      	movs	r3, #0
 8004c3a:	2208      	movs	r2, #8
 8004c3c:	2110      	movs	r1, #16
 8004c3e:	48a1      	ldr	r0, [pc, #644]	; (8004ec4 <_GLOBAL__sub_I_REG_FIFO+0x34c>)
 8004c40:	f7fe fa08 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_rx_timeout[1] = {Register(REG_IRQ_FLAGS, 1, 7)},
 8004c44:	2307      	movs	r3, #7
 8004c46:	2201      	movs	r2, #1
 8004c48:	2112      	movs	r1, #18
 8004c4a:	489f      	ldr	r0, [pc, #636]	; (8004ec8 <_GLOBAL__sub_I_REG_FIFO+0x350>)
 8004c4c:	f7fe fa02 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_rx_done[1] = {Register(REG_IRQ_FLAGS, 1, 6)},
 8004c50:	2306      	movs	r3, #6
 8004c52:	2201      	movs	r2, #1
 8004c54:	2112      	movs	r1, #18
 8004c56:	489d      	ldr	r0, [pc, #628]	; (8004ecc <_GLOBAL__sub_I_REG_FIFO+0x354>)
 8004c58:	f7fe f9fc 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_payload_crc_error[1] = {Register(REG_IRQ_FLAGS, 1, 5)},
 8004c5c:	2305      	movs	r3, #5
 8004c5e:	2201      	movs	r2, #1
 8004c60:	2112      	movs	r1, #18
 8004c62:	489b      	ldr	r0, [pc, #620]	; (8004ed0 <_GLOBAL__sub_I_REG_FIFO+0x358>)
 8004c64:	f7fe f9f6 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_valid_header[1] = {Register(REG_IRQ_FLAGS, 1, 4)},
 8004c68:	2304      	movs	r3, #4
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	2112      	movs	r1, #18
 8004c6e:	4899      	ldr	r0, [pc, #612]	; (8004ed4 <_GLOBAL__sub_I_REG_FIFO+0x35c>)
 8004c70:	f7fe f9f0 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_tx_done[1] = {Register(REG_IRQ_FLAGS, 1, 3)},
 8004c74:	2303      	movs	r3, #3
 8004c76:	2201      	movs	r2, #1
 8004c78:	2112      	movs	r1, #18
 8004c7a:	4897      	ldr	r0, [pc, #604]	; (8004ed8 <_GLOBAL__sub_I_REG_FIFO+0x360>)
 8004c7c:	f7fe f9ea 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_cad_done[1] = {Register(REG_IRQ_FLAGS, 1, 2)},
 8004c80:	2302      	movs	r3, #2
 8004c82:	2201      	movs	r2, #1
 8004c84:	2112      	movs	r1, #18
 8004c86:	4895      	ldr	r0, [pc, #596]	; (8004edc <_GLOBAL__sub_I_REG_FIFO+0x364>)
 8004c88:	f7fe f9e4 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_fhss_change_channel[1] = {Register(REG_IRQ_FLAGS, 1, 1)},
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	461a      	mov	r2, r3
 8004c90:	2112      	movs	r1, #18
 8004c92:	4893      	ldr	r0, [pc, #588]	; (8004ee0 <_GLOBAL__sub_I_REG_FIFO+0x368>)
 8004c94:	f7fe f9de 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_cad_detected[1] = {Register(REG_IRQ_FLAGS, 1, 0)},
 8004c98:	2300      	movs	r3, #0
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	2112      	movs	r1, #18
 8004c9e:	4891      	ldr	r0, [pc, #580]	; (8004ee4 <_GLOBAL__sub_I_REG_FIFO+0x36c>)
 8004ca0:	f7fe f9d8 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_fifo_rx_bytes_nb[1] = {Register(REG_RX_NB_BYTES, 8, 0)},
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	2208      	movs	r2, #8
 8004ca8:	2113      	movs	r1, #19
 8004caa:	488f      	ldr	r0, [pc, #572]	; (8004ee8 <_GLOBAL__sub_I_REG_FIFO+0x370>)
 8004cac:	f7fe f9d2 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_packet_snr[1] = {Register(REG_PKT_SNR_VALUE, 8, 0)},
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	2208      	movs	r2, #8
 8004cb4:	2119      	movs	r1, #25
 8004cb6:	488d      	ldr	r0, [pc, #564]	; (8004eec <_GLOBAL__sub_I_REG_FIFO+0x374>)
 8004cb8:	f7fe f9cc 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_packet_rssi[1] = {Register(REG_PKT_RSSI_VALUE, 8, 0)},
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	2208      	movs	r2, #8
 8004cc0:	211a      	movs	r1, #26
 8004cc2:	488b      	ldr	r0, [pc, #556]	; (8004ef0 <_GLOBAL__sub_I_REG_FIFO+0x378>)
 8004cc4:	f7fe f9c6 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_bw[1] = {Register(REG_MODEM_CONFIG_1, 4, 4)},
 8004cc8:	2304      	movs	r3, #4
 8004cca:	461a      	mov	r2, r3
 8004ccc:	211d      	movs	r1, #29
 8004cce:	4889      	ldr	r0, [pc, #548]	; (8004ef4 <_GLOBAL__sub_I_REG_FIFO+0x37c>)
 8004cd0:	f7fe f9c0 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_spreading_factor[1] = {Register(REG_MODEM_CONFIG_2, 4, 4)},
 8004cd4:	2304      	movs	r3, #4
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	211e      	movs	r1, #30
 8004cda:	4887      	ldr	r0, [pc, #540]	; (8004ef8 <_GLOBAL__sub_I_REG_FIFO+0x380>)
 8004cdc:	f7fe f9ba 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_rx_payload_crc_on[1] = {Register(REG_MODEM_CONFIG_2, 1, 2)},
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	211e      	movs	r1, #30
 8004ce6:	4885      	ldr	r0, [pc, #532]	; (8004efc <_GLOBAL__sub_I_REG_FIFO+0x384>)
 8004ce8:	f7fe f9b4 	bl	8003054 <_ZN8RegisterC1Ethh>
                          Register(REG_PREAMBLE_MSB, 8, 0)},
 8004cec:	2300      	movs	r3, #0
 8004cee:	2208      	movs	r2, #8
 8004cf0:	2121      	movs	r1, #33	; 0x21
 8004cf2:	4883      	ldr	r0, [pc, #524]	; (8004f00 <_GLOBAL__sub_I_REG_FIFO+0x388>)
 8004cf4:	f7fe f9ae 	bl	8003054 <_ZN8RegisterC1Ethh>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	2208      	movs	r2, #8
 8004cfc:	2120      	movs	r1, #32
 8004cfe:	4880      	ldr	r0, [pc, #512]	; (8004f00 <_GLOBAL__sub_I_REG_FIFO+0x388>)
 8004d00:	4410      	add	r0, r2
 8004d02:	f7fe f9a7 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_payload_length[1] = {Register(REG_PAYLOAD_LENGTH, 8, 0)},
 8004d06:	2300      	movs	r3, #0
 8004d08:	2208      	movs	r2, #8
 8004d0a:	2122      	movs	r1, #34	; 0x22
 8004d0c:	487d      	ldr	r0, [pc, #500]	; (8004f04 <_GLOBAL__sub_I_REG_FIFO+0x38c>)
 8004d0e:	f7fe f9a1 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_low_data_rate_optimize[1] = {Register(REG_MODEM_CONFIG_3, 1, 3)},
 8004d12:	2303      	movs	r3, #3
 8004d14:	2201      	movs	r2, #1
 8004d16:	2126      	movs	r1, #38	; 0x26
 8004d18:	487b      	ldr	r0, [pc, #492]	; (8004f08 <_GLOBAL__sub_I_REG_FIFO+0x390>)
 8004d1a:	f7fe f99b 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_agc_auto_on[1] = {Register(REG_MODEM_CONFIG_3, 1, 2)},
 8004d1e:	2302      	movs	r3, #2
 8004d20:	2201      	movs	r2, #1
 8004d22:	2126      	movs	r1, #38	; 0x26
 8004d24:	4879      	ldr	r0, [pc, #484]	; (8004f0c <_GLOBAL__sub_I_REG_FIFO+0x394>)
 8004d26:	f7fe f995 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_detection_optimize[1] = {Register(REG_DETECTION_OPTIMIZE, 3, 0)},
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	2203      	movs	r2, #3
 8004d2e:	2131      	movs	r1, #49	; 0x31
 8004d30:	4877      	ldr	r0, [pc, #476]	; (8004f10 <_GLOBAL__sub_I_REG_FIFO+0x398>)
 8004d32:	f7fe f98f 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_detection_threshold[1] = {Register(REG_DETECTION_THRESHOLD, 8, 0)},
 8004d36:	2300      	movs	r3, #0
 8004d38:	2208      	movs	r2, #8
 8004d3a:	2137      	movs	r1, #55	; 0x37
 8004d3c:	4875      	ldr	r0, [pc, #468]	; (8004f14 <_GLOBAL__sub_I_REG_FIFO+0x39c>)
 8004d3e:	f7fe f989 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_sync_word[1] = {Register(REG_SYNC_WORD, 8, 0)},  // , reserved_value=[0x34])
 8004d42:	2300      	movs	r3, #0
 8004d44:	2208      	movs	r2, #8
 8004d46:	2139      	movs	r1, #57	; 0x39
 8004d48:	4873      	ldr	r0, [pc, #460]	; (8004f18 <_GLOBAL__sub_I_REG_FIFO+0x3a0>)
 8004d4a:	f7fe f983 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_dio0_mapping[1] = {Register(REG_DIO_MAPPING_1, 2, 6)},
 8004d4e:	2306      	movs	r3, #6
 8004d50:	2202      	movs	r2, #2
 8004d52:	2140      	movs	r1, #64	; 0x40
 8004d54:	4871      	ldr	r0, [pc, #452]	; (8004f1c <_GLOBAL__sub_I_REG_FIFO+0x3a4>)
 8004d56:	f7fe f97d 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_dio1_mapping[1] = {Register(REG_DIO_MAPPING_1, 2, 4)},
 8004d5a:	2304      	movs	r3, #4
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	2140      	movs	r1, #64	; 0x40
 8004d60:	486f      	ldr	r0, [pc, #444]	; (8004f20 <_GLOBAL__sub_I_REG_FIFO+0x3a8>)
 8004d62:	f7fe f977 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_map_preamble_detect[1] = {Register(REG_DIO_MAPPING_2, 1, 0)},
 8004d66:	2300      	movs	r3, #0
 8004d68:	2201      	movs	r2, #1
 8004d6a:	2141      	movs	r1, #65	; 0x41
 8004d6c:	486d      	ldr	r0, [pc, #436]	; (8004f24 <_GLOBAL__sub_I_REG_FIFO+0x3ac>)
 8004d6e:	f7fe f971 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_version[1] = {Register(REG_VERSION, 8, 0)},
 8004d72:	2300      	movs	r3, #0
 8004d74:	2208      	movs	r2, #8
 8004d76:	2142      	movs	r1, #66	; 0x42
 8004d78:	486b      	ldr	r0, [pc, #428]	; (8004f28 <_GLOBAL__sub_I_REG_FIFO+0x3b0>)
 8004d7a:	f7fe f96b 	bl	8003054 <_ZN8RegisterC1Ethh>
reg_pa_dac[1] = {Register(REG_PA_DAC, 3, 0)}//,
 8004d7e:	2300      	movs	r3, #0
 8004d80:	2203      	movs	r2, #3
 8004d82:	214d      	movs	r1, #77	; 0x4d
 8004d84:	4869      	ldr	r0, [pc, #420]	; (8004f2c <_GLOBAL__sub_I_REG_FIFO+0x3b4>)
 8004d86:	f7fe f965 	bl	8003054 <_ZN8RegisterC1Ethh>
Fifo(reg_fifo, 1, false, 'w', 0x00, 0xFF),
 8004d8a:	2400      	movs	r4, #0
 8004d8c:	9404      	str	r4, [sp, #16]
 8004d8e:	9403      	str	r4, [sp, #12]
 8004d90:	27ff      	movs	r7, #255	; 0xff
 8004d92:	9702      	str	r7, [sp, #8]
 8004d94:	9401      	str	r4, [sp, #4]
 8004d96:	2677      	movs	r6, #119	; 0x77
 8004d98:	9600      	str	r6, [sp, #0]
 8004d9a:	4623      	mov	r3, r4
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	4629      	mov	r1, r5
 8004da0:	4863      	ldr	r0, [pc, #396]	; (8004f30 <_GLOBAL__sub_I_REG_FIFO+0x3b8>)
 8004da2:	f7fe f9eb 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
LongRangeMode(reg_long_range_mode, 1, false, 'w', 0x00, 0x01),
 8004da6:	9404      	str	r4, [sp, #16]
 8004da8:	9403      	str	r4, [sp, #12]
 8004daa:	2501      	movs	r5, #1
 8004dac:	9502      	str	r5, [sp, #8]
 8004dae:	9401      	str	r4, [sp, #4]
 8004db0:	9600      	str	r6, [sp, #0]
 8004db2:	4623      	mov	r3, r4
 8004db4:	462a      	mov	r2, r5
 8004db6:	4651      	mov	r1, sl
 8004db8:	485e      	ldr	r0, [pc, #376]	; (8004f34 <_GLOBAL__sub_I_REG_FIFO+0x3bc>)
 8004dba:	f7fe f9df 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
LowFrequencyModeOn(reg_low_frequency_mode_on, 1, false, 'w', 0x00, 0x01),
 8004dbe:	9404      	str	r4, [sp, #16]
 8004dc0:	9403      	str	r4, [sp, #12]
 8004dc2:	9502      	str	r5, [sp, #8]
 8004dc4:	9401      	str	r4, [sp, #4]
 8004dc6:	9600      	str	r6, [sp, #0]
 8004dc8:	4623      	mov	r3, r4
 8004dca:	462a      	mov	r2, r5
 8004dcc:	4649      	mov	r1, r9
 8004dce:	485a      	ldr	r0, [pc, #360]	; (8004f38 <_GLOBAL__sub_I_REG_FIFO+0x3c0>)
 8004dd0:	f7fe f9d4 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Mode(reg_mode, 1, false, 'w', 0x00, 0x07),
 8004dd4:	9404      	str	r4, [sp, #16]
 8004dd6:	9403      	str	r4, [sp, #12]
 8004dd8:	f04f 0b07 	mov.w	fp, #7
 8004ddc:	f8cd b008 	str.w	fp, [sp, #8]
 8004de0:	9401      	str	r4, [sp, #4]
 8004de2:	9600      	str	r6, [sp, #0]
 8004de4:	4623      	mov	r3, r4
 8004de6:	462a      	mov	r2, r5
 8004de8:	492e      	ldr	r1, [pc, #184]	; (8004ea4 <_GLOBAL__sub_I_REG_FIFO+0x32c>)
 8004dea:	4854      	ldr	r0, [pc, #336]	; (8004f3c <_GLOBAL__sub_I_REG_FIFO+0x3c4>)
 8004dec:	f7fe f9c6 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Frf(reg_frf, 3, false, 'w', 0x000000, 0xFFFFFF),
 8004df0:	9404      	str	r4, [sp, #16]
 8004df2:	9403      	str	r4, [sp, #12]
 8004df4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8004df8:	9302      	str	r3, [sp, #8]
 8004dfa:	9401      	str	r4, [sp, #4]
 8004dfc:	9600      	str	r6, [sp, #0]
 8004dfe:	4623      	mov	r3, r4
 8004e00:	2203      	movs	r2, #3
 8004e02:	4641      	mov	r1, r8
 8004e04:	484e      	ldr	r0, [pc, #312]	; (8004f40 <_GLOBAL__sub_I_REG_FIFO+0x3c8>)
 8004e06:	f7fe f9b9 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PaSelect(reg_pa_select, 1, false, 'w', 0x00, 0x01),
 8004e0a:	9404      	str	r4, [sp, #16]
 8004e0c:	9403      	str	r4, [sp, #12]
 8004e0e:	9502      	str	r5, [sp, #8]
 8004e10:	9401      	str	r4, [sp, #4]
 8004e12:	9600      	str	r6, [sp, #0]
 8004e14:	4623      	mov	r3, r4
 8004e16:	462a      	mov	r2, r5
 8004e18:	4923      	ldr	r1, [pc, #140]	; (8004ea8 <_GLOBAL__sub_I_REG_FIFO+0x330>)
 8004e1a:	484a      	ldr	r0, [pc, #296]	; (8004f44 <_GLOBAL__sub_I_REG_FIFO+0x3cc>)
 8004e1c:	f7fe f9ae 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
MaxPower(reg_max_power, 1, false, 'w', 0x00, 0x07),
 8004e20:	9404      	str	r4, [sp, #16]
 8004e22:	9403      	str	r4, [sp, #12]
 8004e24:	f8cd b008 	str.w	fp, [sp, #8]
 8004e28:	9401      	str	r4, [sp, #4]
 8004e2a:	9600      	str	r6, [sp, #0]
 8004e2c:	4623      	mov	r3, r4
 8004e2e:	462a      	mov	r2, r5
 8004e30:	491e      	ldr	r1, [pc, #120]	; (8004eac <_GLOBAL__sub_I_REG_FIFO+0x334>)
 8004e32:	4845      	ldr	r0, [pc, #276]	; (8004f48 <_GLOBAL__sub_I_REG_FIFO+0x3d0>)
 8004e34:	f7fe f9a2 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
OutputPower(reg_output_power, 1, false, 'w', 0x00, 0x0F),
 8004e38:	9404      	str	r4, [sp, #16]
 8004e3a:	9403      	str	r4, [sp, #12]
 8004e3c:	230f      	movs	r3, #15
 8004e3e:	9302      	str	r3, [sp, #8]
 8004e40:	9401      	str	r4, [sp, #4]
 8004e42:	9600      	str	r6, [sp, #0]
 8004e44:	4623      	mov	r3, r4
 8004e46:	462a      	mov	r2, r5
 8004e48:	4919      	ldr	r1, [pc, #100]	; (8004eb0 <_GLOBAL__sub_I_REG_FIFO+0x338>)
 8004e4a:	4840      	ldr	r0, [pc, #256]	; (8004f4c <_GLOBAL__sub_I_REG_FIFO+0x3d4>)
 8004e4c:	f7fe f996 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
LnaBoostHf(reg_lna_boost_hf, 1, false, 'w', 0x00, 0x03, reserv_lna_boost_hf, 2),
 8004e50:	2302      	movs	r3, #2
 8004e52:	9304      	str	r3, [sp, #16]
 8004e54:	4b3e      	ldr	r3, [pc, #248]	; (8004f50 <_GLOBAL__sub_I_REG_FIFO+0x3d8>)
 8004e56:	9303      	str	r3, [sp, #12]
 8004e58:	f04f 0a03 	mov.w	sl, #3
 8004e5c:	f8cd a008 	str.w	sl, [sp, #8]
 8004e60:	9401      	str	r4, [sp, #4]
 8004e62:	9600      	str	r6, [sp, #0]
 8004e64:	4623      	mov	r3, r4
 8004e66:	462a      	mov	r2, r5
 8004e68:	4912      	ldr	r1, [pc, #72]	; (8004eb4 <_GLOBAL__sub_I_REG_FIFO+0x33c>)
 8004e6a:	483a      	ldr	r0, [pc, #232]	; (8004f54 <_GLOBAL__sub_I_REG_FIFO+0x3dc>)
 8004e6c:	f7fe f986 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FifoAddrPtr(reg_fifo_addr_ptr, 1, false, 'w', 0x00, 0xFF),
 8004e70:	9404      	str	r4, [sp, #16]
 8004e72:	9403      	str	r4, [sp, #12]
 8004e74:	9702      	str	r7, [sp, #8]
 8004e76:	9401      	str	r4, [sp, #4]
 8004e78:	9600      	str	r6, [sp, #0]
 8004e7a:	4623      	mov	r3, r4
 8004e7c:	462a      	mov	r2, r5
 8004e7e:	490e      	ldr	r1, [pc, #56]	; (8004eb8 <_GLOBAL__sub_I_REG_FIFO+0x340>)
 8004e80:	4835      	ldr	r0, [pc, #212]	; (8004f58 <_GLOBAL__sub_I_REG_FIFO+0x3e0>)
 8004e82:	f7fe f97b 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FifoTxBaseAddr(reg_fifo_tx_base_addr, 1, false, 'w', 0x00, 0xFF),
 8004e86:	9404      	str	r4, [sp, #16]
 8004e88:	9403      	str	r4, [sp, #12]
 8004e8a:	9702      	str	r7, [sp, #8]
 8004e8c:	9401      	str	r4, [sp, #4]
 8004e8e:	9600      	str	r6, [sp, #0]
 8004e90:	4623      	mov	r3, r4
 8004e92:	462a      	mov	r2, r5
 8004e94:	4909      	ldr	r1, [pc, #36]	; (8004ebc <_GLOBAL__sub_I_REG_FIFO+0x344>)
 8004e96:	4831      	ldr	r0, [pc, #196]	; (8004f5c <_GLOBAL__sub_I_REG_FIFO+0x3e4>)
 8004e98:	f7fe f970 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 8004e9c:	e066      	b.n	8004f6c <_GLOBAL__sub_I_REG_FIFO+0x3f4>
 8004e9e:	bf00      	nop
 8004ea0:	200020bc 	.word	0x200020bc
 8004ea4:	200020c4 	.word	0x200020c4
 8004ea8:	20001f90 	.word	0x20001f90
 8004eac:	20001f88 	.word	0x20001f88
 8004eb0:	20001fe0 	.word	0x20001fe0
 8004eb4:	20001fd8 	.word	0x20001fd8
 8004eb8:	2000200c 	.word	0x2000200c
 8004ebc:	2000204c 	.word	0x2000204c
 8004ec0:	20002044 	.word	0x20002044
 8004ec4:	20002084 	.word	0x20002084
 8004ec8:	20001fa8 	.word	0x20001fa8
 8004ecc:	20001f68 	.word	0x20001f68
 8004ed0:	20002054 	.word	0x20002054
 8004ed4:	20001fe8 	.word	0x20001fe8
 8004ed8:	20001f70 	.word	0x20001f70
 8004edc:	20001f80 	.word	0x20001f80
 8004ee0:	20002074 	.word	0x20002074
 8004ee4:	20001fc0 	.word	0x20001fc0
 8004ee8:	20002034 	.word	0x20002034
 8004eec:	20001fa0 	.word	0x20001fa0
 8004ef0:	20001fb8 	.word	0x20001fb8
 8004ef4:	2000209c 	.word	0x2000209c
 8004ef8:	2000203c 	.word	0x2000203c
 8004efc:	2000205c 	.word	0x2000205c
 8004f00:	20002024 	.word	0x20002024
 8004f04:	20002014 	.word	0x20002014
 8004f08:	20002094 	.word	0x20002094
 8004f0c:	20001fb0 	.word	0x20001fb0
 8004f10:	20002064 	.word	0x20002064
 8004f14:	2000206c 	.word	0x2000206c
 8004f18:	20001f98 	.word	0x20001f98
 8004f1c:	20001fc8 	.word	0x20001fc8
 8004f20:	20001fd0 	.word	0x20001fd0
 8004f24:	2000207c 	.word	0x2000207c
 8004f28:	20001f78 	.word	0x20001f78
 8004f2c:	20001f60 	.word	0x20001f60
 8004f30:	20001c34 	.word	0x20001c34
 8004f34:	20001d14 	.word	0x20001d14
 8004f38:	20001d4c 	.word	0x20001d4c
 8004f3c:	20001d84 	.word	0x20001d84
 8004f40:	20001cdc 	.word	0x20001cdc
 8004f44:	20001dd8 	.word	0x20001dd8
 8004f48:	20001d68 	.word	0x20001d68
 8004f4c:	20001da0 	.word	0x20001da0
 8004f50:	0800bb60 	.word	0x0800bb60
 8004f54:	20001cf8 	.word	0x20001cf8
 8004f58:	20001c50 	.word	0x20001c50
 8004f5c:	20001cc0 	.word	0x20001cc0
 8004f60:	2000201c 	.word	0x2000201c
 8004f64:	2000208c 	.word	0x2000208c
 8004f68:	200020a4 	.word	0x200020a4
FifoRxBaseAddr(reg_fifo_rx_base_addr, 1, false, 'w', 0x00, 0xFF),
 8004f6c:	9404      	str	r4, [sp, #16]
 8004f6e:	9403      	str	r4, [sp, #12]
 8004f70:	9702      	str	r7, [sp, #8]
 8004f72:	9401      	str	r4, [sp, #4]
 8004f74:	9600      	str	r6, [sp, #0]
 8004f76:	4623      	mov	r3, r4
 8004f78:	462a      	mov	r2, r5
 8004f7a:	49a7      	ldr	r1, [pc, #668]	; (8005218 <_GLOBAL__sub_I_REG_FIFO+0x6a0>)
 8004f7c:	48a7      	ldr	r0, [pc, #668]	; (800521c <_GLOBAL__sub_I_REG_FIFO+0x6a4>)
 8004f7e:	f7fe f8fd 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FifoRxCurrentAddr(reg_fifo_rx_current_addr, 1, false, 'r', 0x00, 0xFF),
 8004f82:	9404      	str	r4, [sp, #16]
 8004f84:	9403      	str	r4, [sp, #12]
 8004f86:	9702      	str	r7, [sp, #8]
 8004f88:	9401      	str	r4, [sp, #4]
 8004f8a:	f04f 0972 	mov.w	r9, #114	; 0x72
 8004f8e:	f8cd 9000 	str.w	r9, [sp]
 8004f92:	4623      	mov	r3, r4
 8004f94:	462a      	mov	r2, r5
 8004f96:	49a2      	ldr	r1, [pc, #648]	; (8005220 <_GLOBAL__sub_I_REG_FIFO+0x6a8>)
 8004f98:	48a2      	ldr	r0, [pc, #648]	; (8005224 <_GLOBAL__sub_I_REG_FIFO+0x6ac>)
 8004f9a:	f7fe f8ef 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
RxTimeout(reg_rx_timeout, 1, false, 'c', 0x00, 0x01),
 8004f9e:	9404      	str	r4, [sp, #16]
 8004fa0:	9403      	str	r4, [sp, #12]
 8004fa2:	9502      	str	r5, [sp, #8]
 8004fa4:	9401      	str	r4, [sp, #4]
 8004fa6:	f04f 0863 	mov.w	r8, #99	; 0x63
 8004faa:	f8cd 8000 	str.w	r8, [sp]
 8004fae:	4623      	mov	r3, r4
 8004fb0:	462a      	mov	r2, r5
 8004fb2:	499d      	ldr	r1, [pc, #628]	; (8005228 <_GLOBAL__sub_I_REG_FIFO+0x6b0>)
 8004fb4:	489d      	ldr	r0, [pc, #628]	; (800522c <_GLOBAL__sub_I_REG_FIFO+0x6b4>)
 8004fb6:	f7fe f8e1 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
RxDone(reg_rx_done, 1, false, 'c', 0x00, 0x01),
 8004fba:	9404      	str	r4, [sp, #16]
 8004fbc:	9403      	str	r4, [sp, #12]
 8004fbe:	9502      	str	r5, [sp, #8]
 8004fc0:	9401      	str	r4, [sp, #4]
 8004fc2:	f8cd 8000 	str.w	r8, [sp]
 8004fc6:	4623      	mov	r3, r4
 8004fc8:	462a      	mov	r2, r5
 8004fca:	4999      	ldr	r1, [pc, #612]	; (8005230 <_GLOBAL__sub_I_REG_FIFO+0x6b8>)
 8004fcc:	4899      	ldr	r0, [pc, #612]	; (8005234 <_GLOBAL__sub_I_REG_FIFO+0x6bc>)
 8004fce:	f7fe f8d5 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PayloadCrcError(reg_payload_crc_error, 1, false, 'c', 0x00, 0x01),
 8004fd2:	9404      	str	r4, [sp, #16]
 8004fd4:	9403      	str	r4, [sp, #12]
 8004fd6:	9502      	str	r5, [sp, #8]
 8004fd8:	9401      	str	r4, [sp, #4]
 8004fda:	f8cd 8000 	str.w	r8, [sp]
 8004fde:	4623      	mov	r3, r4
 8004fe0:	462a      	mov	r2, r5
 8004fe2:	4995      	ldr	r1, [pc, #596]	; (8005238 <_GLOBAL__sub_I_REG_FIFO+0x6c0>)
 8004fe4:	4895      	ldr	r0, [pc, #596]	; (800523c <_GLOBAL__sub_I_REG_FIFO+0x6c4>)
 8004fe6:	f7fe f8c9 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
ValidHeader(reg_valid_header, 1, false, 'c', 0x00, 0x01),
 8004fea:	9404      	str	r4, [sp, #16]
 8004fec:	9403      	str	r4, [sp, #12]
 8004fee:	9502      	str	r5, [sp, #8]
 8004ff0:	9401      	str	r4, [sp, #4]
 8004ff2:	f8cd 8000 	str.w	r8, [sp]
 8004ff6:	4623      	mov	r3, r4
 8004ff8:	462a      	mov	r2, r5
 8004ffa:	4991      	ldr	r1, [pc, #580]	; (8005240 <_GLOBAL__sub_I_REG_FIFO+0x6c8>)
 8004ffc:	4891      	ldr	r0, [pc, #580]	; (8005244 <_GLOBAL__sub_I_REG_FIFO+0x6cc>)
 8004ffe:	f7fe f8bd 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
TxDone(reg_tx_done, 1, false, 'c', 0x00, 0x01),
 8005002:	9404      	str	r4, [sp, #16]
 8005004:	9403      	str	r4, [sp, #12]
 8005006:	9502      	str	r5, [sp, #8]
 8005008:	9401      	str	r4, [sp, #4]
 800500a:	f8cd 8000 	str.w	r8, [sp]
 800500e:	4623      	mov	r3, r4
 8005010:	462a      	mov	r2, r5
 8005012:	498d      	ldr	r1, [pc, #564]	; (8005248 <_GLOBAL__sub_I_REG_FIFO+0x6d0>)
 8005014:	488d      	ldr	r0, [pc, #564]	; (800524c <_GLOBAL__sub_I_REG_FIFO+0x6d4>)
 8005016:	f7fe f8b1 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
CadDone(reg_cad_done, 1, false, 'c', 0x00, 0x01),
 800501a:	9404      	str	r4, [sp, #16]
 800501c:	9403      	str	r4, [sp, #12]
 800501e:	9502      	str	r5, [sp, #8]
 8005020:	9401      	str	r4, [sp, #4]
 8005022:	f8cd 8000 	str.w	r8, [sp]
 8005026:	4623      	mov	r3, r4
 8005028:	462a      	mov	r2, r5
 800502a:	4989      	ldr	r1, [pc, #548]	; (8005250 <_GLOBAL__sub_I_REG_FIFO+0x6d8>)
 800502c:	4889      	ldr	r0, [pc, #548]	; (8005254 <_GLOBAL__sub_I_REG_FIFO+0x6dc>)
 800502e:	f7fe f8a5 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FhssChangeChannel(reg_fhss_change_channel, 1, false, 'c', 0x00, 0x01),
 8005032:	9404      	str	r4, [sp, #16]
 8005034:	9403      	str	r4, [sp, #12]
 8005036:	9502      	str	r5, [sp, #8]
 8005038:	9401      	str	r4, [sp, #4]
 800503a:	f8cd 8000 	str.w	r8, [sp]
 800503e:	4623      	mov	r3, r4
 8005040:	462a      	mov	r2, r5
 8005042:	4985      	ldr	r1, [pc, #532]	; (8005258 <_GLOBAL__sub_I_REG_FIFO+0x6e0>)
 8005044:	4885      	ldr	r0, [pc, #532]	; (800525c <_GLOBAL__sub_I_REG_FIFO+0x6e4>)
 8005046:	f7fe f899 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
CadDetected(reg_cad_detected, 1, false, 'c', 0x00, 0x01),
 800504a:	9404      	str	r4, [sp, #16]
 800504c:	9403      	str	r4, [sp, #12]
 800504e:	9502      	str	r5, [sp, #8]
 8005050:	9401      	str	r4, [sp, #4]
 8005052:	f8cd 8000 	str.w	r8, [sp]
 8005056:	4623      	mov	r3, r4
 8005058:	462a      	mov	r2, r5
 800505a:	4981      	ldr	r1, [pc, #516]	; (8005260 <_GLOBAL__sub_I_REG_FIFO+0x6e8>)
 800505c:	4881      	ldr	r0, [pc, #516]	; (8005264 <_GLOBAL__sub_I_REG_FIFO+0x6ec>)
 800505e:	f7fe f88d 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FifoRxBytesNb(reg_fifo_rx_bytes_nb, 1, false, 'r', 0x00, 0xFF),
 8005062:	9404      	str	r4, [sp, #16]
 8005064:	9403      	str	r4, [sp, #12]
 8005066:	9702      	str	r7, [sp, #8]
 8005068:	9401      	str	r4, [sp, #4]
 800506a:	f8cd 9000 	str.w	r9, [sp]
 800506e:	4623      	mov	r3, r4
 8005070:	462a      	mov	r2, r5
 8005072:	497d      	ldr	r1, [pc, #500]	; (8005268 <_GLOBAL__sub_I_REG_FIFO+0x6f0>)
 8005074:	487d      	ldr	r0, [pc, #500]	; (800526c <_GLOBAL__sub_I_REG_FIFO+0x6f4>)
 8005076:	f7fe f881 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PacketSnr(reg_packet_snr, 1, false, 'r', 0x00, 0xFF),
 800507a:	9404      	str	r4, [sp, #16]
 800507c:	9403      	str	r4, [sp, #12]
 800507e:	9702      	str	r7, [sp, #8]
 8005080:	9401      	str	r4, [sp, #4]
 8005082:	f8cd 9000 	str.w	r9, [sp]
 8005086:	4623      	mov	r3, r4
 8005088:	462a      	mov	r2, r5
 800508a:	4979      	ldr	r1, [pc, #484]	; (8005270 <_GLOBAL__sub_I_REG_FIFO+0x6f8>)
 800508c:	4879      	ldr	r0, [pc, #484]	; (8005274 <_GLOBAL__sub_I_REG_FIFO+0x6fc>)
 800508e:	f7fe f875 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PacketRssi(reg_packet_rssi, 1, false, 'r', 0x00, 0xFF),
 8005092:	9404      	str	r4, [sp, #16]
 8005094:	9403      	str	r4, [sp, #12]
 8005096:	9702      	str	r7, [sp, #8]
 8005098:	9401      	str	r4, [sp, #4]
 800509a:	f8cd 9000 	str.w	r9, [sp]
 800509e:	4623      	mov	r3, r4
 80050a0:	462a      	mov	r2, r5
 80050a2:	4975      	ldr	r1, [pc, #468]	; (8005278 <_GLOBAL__sub_I_REG_FIFO+0x700>)
 80050a4:	4875      	ldr	r0, [pc, #468]	; (800527c <_GLOBAL__sub_I_REG_FIFO+0x704>)
 80050a6:	f7fe f869 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Bw(reg_bw, 1, false, 'w', 0x00, 0x09),
 80050aa:	9404      	str	r4, [sp, #16]
 80050ac:	9403      	str	r4, [sp, #12]
 80050ae:	2309      	movs	r3, #9
 80050b0:	9302      	str	r3, [sp, #8]
 80050b2:	9401      	str	r4, [sp, #4]
 80050b4:	9600      	str	r6, [sp, #0]
 80050b6:	4623      	mov	r3, r4
 80050b8:	462a      	mov	r2, r5
 80050ba:	4971      	ldr	r1, [pc, #452]	; (8005280 <_GLOBAL__sub_I_REG_FIFO+0x708>)
 80050bc:	4871      	ldr	r0, [pc, #452]	; (8005284 <_GLOBAL__sub_I_REG_FIFO+0x70c>)
 80050be:	f7fe f85d 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
SpreadingFactor(reg_spreading_factor, 1, false, 'w', 0x06, 0x0C),
 80050c2:	9404      	str	r4, [sp, #16]
 80050c4:	9403      	str	r4, [sp, #12]
 80050c6:	f04f 080c 	mov.w	r8, #12
 80050ca:	f8cd 8008 	str.w	r8, [sp, #8]
 80050ce:	2306      	movs	r3, #6
 80050d0:	9301      	str	r3, [sp, #4]
 80050d2:	9600      	str	r6, [sp, #0]
 80050d4:	4623      	mov	r3, r4
 80050d6:	462a      	mov	r2, r5
 80050d8:	496b      	ldr	r1, [pc, #428]	; (8005288 <_GLOBAL__sub_I_REG_FIFO+0x710>)
 80050da:	486c      	ldr	r0, [pc, #432]	; (800528c <_GLOBAL__sub_I_REG_FIFO+0x714>)
 80050dc:	f7fe f84e 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
RxPayloadCrcOn(reg_rx_payload_crc_on, 1, false, 'w', 0x00, 0x01),
 80050e0:	9404      	str	r4, [sp, #16]
 80050e2:	9403      	str	r4, [sp, #12]
 80050e4:	9502      	str	r5, [sp, #8]
 80050e6:	9401      	str	r4, [sp, #4]
 80050e8:	9600      	str	r6, [sp, #0]
 80050ea:	4623      	mov	r3, r4
 80050ec:	462a      	mov	r2, r5
 80050ee:	4968      	ldr	r1, [pc, #416]	; (8005290 <_GLOBAL__sub_I_REG_FIFO+0x718>)
 80050f0:	4868      	ldr	r0, [pc, #416]	; (8005294 <_GLOBAL__sub_I_REG_FIFO+0x71c>)
 80050f2:	f7fe f843 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PreambleLength(reg_preamble_length, 2, false, 'w', 0x0000, 0xFFFF),
 80050f6:	9404      	str	r4, [sp, #16]
 80050f8:	9403      	str	r4, [sp, #12]
 80050fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050fe:	9302      	str	r3, [sp, #8]
 8005100:	9401      	str	r4, [sp, #4]
 8005102:	9600      	str	r6, [sp, #0]
 8005104:	4623      	mov	r3, r4
 8005106:	2202      	movs	r2, #2
 8005108:	4963      	ldr	r1, [pc, #396]	; (8005298 <_GLOBAL__sub_I_REG_FIFO+0x720>)
 800510a:	4864      	ldr	r0, [pc, #400]	; (800529c <_GLOBAL__sub_I_REG_FIFO+0x724>)
 800510c:	f7fe f836 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PayloadLength(reg_payload_length, 1, false, 'w', 0x01, 0xFF),
 8005110:	9404      	str	r4, [sp, #16]
 8005112:	9403      	str	r4, [sp, #12]
 8005114:	9702      	str	r7, [sp, #8]
 8005116:	9501      	str	r5, [sp, #4]
 8005118:	9600      	str	r6, [sp, #0]
 800511a:	4623      	mov	r3, r4
 800511c:	462a      	mov	r2, r5
 800511e:	4960      	ldr	r1, [pc, #384]	; (80052a0 <_GLOBAL__sub_I_REG_FIFO+0x728>)
 8005120:	4860      	ldr	r0, [pc, #384]	; (80052a4 <_GLOBAL__sub_I_REG_FIFO+0x72c>)
 8005122:	f7fe f82b 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
LowDataRateOptimize(reg_low_data_rate_optimize, 1, false, 'w', 0x00, 0x01),
 8005126:	9404      	str	r4, [sp, #16]
 8005128:	9403      	str	r4, [sp, #12]
 800512a:	9502      	str	r5, [sp, #8]
 800512c:	9401      	str	r4, [sp, #4]
 800512e:	9600      	str	r6, [sp, #0]
 8005130:	4623      	mov	r3, r4
 8005132:	462a      	mov	r2, r5
 8005134:	495c      	ldr	r1, [pc, #368]	; (80052a8 <_GLOBAL__sub_I_REG_FIFO+0x730>)
 8005136:	485d      	ldr	r0, [pc, #372]	; (80052ac <_GLOBAL__sub_I_REG_FIFO+0x734>)
 8005138:	f7fe f820 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
AgcAutoOn(reg_agc_auto_on, 1, false, 'w', 0x00, 0x01),
 800513c:	9404      	str	r4, [sp, #16]
 800513e:	9403      	str	r4, [sp, #12]
 8005140:	9502      	str	r5, [sp, #8]
 8005142:	9401      	str	r4, [sp, #4]
 8005144:	9600      	str	r6, [sp, #0]
 8005146:	4623      	mov	r3, r4
 8005148:	462a      	mov	r2, r5
 800514a:	4959      	ldr	r1, [pc, #356]	; (80052b0 <_GLOBAL__sub_I_REG_FIFO+0x738>)
 800514c:	4859      	ldr	r0, [pc, #356]	; (80052b4 <_GLOBAL__sub_I_REG_FIFO+0x73c>)
 800514e:	f7fe f815 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
DetectionOptimize(reg_detection_optimize, 1, false, 'w', 0x03, 0x05, reserv_detection_optimize, 1),
 8005152:	9504      	str	r5, [sp, #16]
 8005154:	4b58      	ldr	r3, [pc, #352]	; (80052b8 <_GLOBAL__sub_I_REG_FIFO+0x740>)
 8005156:	9303      	str	r3, [sp, #12]
 8005158:	2305      	movs	r3, #5
 800515a:	9302      	str	r3, [sp, #8]
 800515c:	f8cd a004 	str.w	sl, [sp, #4]
 8005160:	9600      	str	r6, [sp, #0]
 8005162:	4623      	mov	r3, r4
 8005164:	462a      	mov	r2, r5
 8005166:	4955      	ldr	r1, [pc, #340]	; (80052bc <_GLOBAL__sub_I_REG_FIFO+0x744>)
 8005168:	4855      	ldr	r0, [pc, #340]	; (80052c0 <_GLOBAL__sub_I_REG_FIFO+0x748>)
 800516a:	f7fe f807 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
DetectionThreshold(reg_detection_threshold, 1, false, 'w', 0x0A, 0x0C, reserv_detection_threshold, 1),
 800516e:	9504      	str	r5, [sp, #16]
 8005170:	4b54      	ldr	r3, [pc, #336]	; (80052c4 <_GLOBAL__sub_I_REG_FIFO+0x74c>)
 8005172:	9303      	str	r3, [sp, #12]
 8005174:	f8cd 8008 	str.w	r8, [sp, #8]
 8005178:	230a      	movs	r3, #10
 800517a:	9301      	str	r3, [sp, #4]
 800517c:	9600      	str	r6, [sp, #0]
 800517e:	4623      	mov	r3, r4
 8005180:	462a      	mov	r2, r5
 8005182:	4951      	ldr	r1, [pc, #324]	; (80052c8 <_GLOBAL__sub_I_REG_FIFO+0x750>)
 8005184:	4851      	ldr	r0, [pc, #324]	; (80052cc <_GLOBAL__sub_I_REG_FIFO+0x754>)
 8005186:	f7fd fff9 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
SyncWord(reg_sync_word, 1, false, 'w', 0x00, 0xFF),  // , reserv_sync_word, 1),
 800518a:	9404      	str	r4, [sp, #16]
 800518c:	9403      	str	r4, [sp, #12]
 800518e:	9702      	str	r7, [sp, #8]
 8005190:	9401      	str	r4, [sp, #4]
 8005192:	9600      	str	r6, [sp, #0]
 8005194:	4623      	mov	r3, r4
 8005196:	462a      	mov	r2, r5
 8005198:	494d      	ldr	r1, [pc, #308]	; (80052d0 <_GLOBAL__sub_I_REG_FIFO+0x758>)
 800519a:	484e      	ldr	r0, [pc, #312]	; (80052d4 <_GLOBAL__sub_I_REG_FIFO+0x75c>)
 800519c:	f7fd ffee 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Dio0Mapping(reg_dio0_mapping, 1, false, 'w', 0x00, 0x03),
 80051a0:	9404      	str	r4, [sp, #16]
 80051a2:	9403      	str	r4, [sp, #12]
 80051a4:	f8cd a008 	str.w	sl, [sp, #8]
 80051a8:	9401      	str	r4, [sp, #4]
 80051aa:	9600      	str	r6, [sp, #0]
 80051ac:	4623      	mov	r3, r4
 80051ae:	462a      	mov	r2, r5
 80051b0:	4949      	ldr	r1, [pc, #292]	; (80052d8 <_GLOBAL__sub_I_REG_FIFO+0x760>)
 80051b2:	484a      	ldr	r0, [pc, #296]	; (80052dc <_GLOBAL__sub_I_REG_FIFO+0x764>)
 80051b4:	f7fd ffe2 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Dio1Mapping(reg_dio1_mapping, 1, false, 'w', 0x00, 0x03),
 80051b8:	9404      	str	r4, [sp, #16]
 80051ba:	9403      	str	r4, [sp, #12]
 80051bc:	f8cd a008 	str.w	sl, [sp, #8]
 80051c0:	9401      	str	r4, [sp, #4]
 80051c2:	9600      	str	r6, [sp, #0]
 80051c4:	4623      	mov	r3, r4
 80051c6:	462a      	mov	r2, r5
 80051c8:	4945      	ldr	r1, [pc, #276]	; (80052e0 <_GLOBAL__sub_I_REG_FIFO+0x768>)
 80051ca:	4846      	ldr	r0, [pc, #280]	; (80052e4 <_GLOBAL__sub_I_REG_FIFO+0x76c>)
 80051cc:	f7fd ffd6 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
MapPreambleDetect(reg_map_preamble_detect, 1, false, 'w', 0x00, 0x01),
 80051d0:	9404      	str	r4, [sp, #16]
 80051d2:	9403      	str	r4, [sp, #12]
 80051d4:	9502      	str	r5, [sp, #8]
 80051d6:	9401      	str	r4, [sp, #4]
 80051d8:	9600      	str	r6, [sp, #0]
 80051da:	4623      	mov	r3, r4
 80051dc:	462a      	mov	r2, r5
 80051de:	4942      	ldr	r1, [pc, #264]	; (80052e8 <_GLOBAL__sub_I_REG_FIFO+0x770>)
 80051e0:	4842      	ldr	r0, [pc, #264]	; (80052ec <_GLOBAL__sub_I_REG_FIFO+0x774>)
 80051e2:	f7fd ffcb 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Version(reg_version, 1, false, 'r', 0x00, 0xFF),
 80051e6:	9404      	str	r4, [sp, #16]
 80051e8:	9403      	str	r4, [sp, #12]
 80051ea:	9702      	str	r7, [sp, #8]
 80051ec:	9401      	str	r4, [sp, #4]
 80051ee:	f8cd 9000 	str.w	r9, [sp]
 80051f2:	4623      	mov	r3, r4
 80051f4:	462a      	mov	r2, r5
 80051f6:	493e      	ldr	r1, [pc, #248]	; (80052f0 <_GLOBAL__sub_I_REG_FIFO+0x778>)
 80051f8:	483e      	ldr	r0, [pc, #248]	; (80052f4 <_GLOBAL__sub_I_REG_FIFO+0x77c>)
 80051fa:	f7fd ffbf 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PaDac(reg_pa_dac, 1, false, 'w', 0x04, 0x07, reserv_pa_dac, 2) //,
 80051fe:	2302      	movs	r3, #2
 8005200:	9304      	str	r3, [sp, #16]
 8005202:	4b3d      	ldr	r3, [pc, #244]	; (80052f8 <_GLOBAL__sub_I_REG_FIFO+0x780>)
 8005204:	9303      	str	r3, [sp, #12]
 8005206:	f8cd b008 	str.w	fp, [sp, #8]
 800520a:	2304      	movs	r3, #4
 800520c:	9301      	str	r3, [sp, #4]
 800520e:	9600      	str	r6, [sp, #0]
 8005210:	4623      	mov	r3, r4
 8005212:	462a      	mov	r2, r5
 8005214:	e072      	b.n	80052fc <_GLOBAL__sub_I_REG_FIFO+0x784>
 8005216:	bf00      	nop
 8005218:	20002044 	.word	0x20002044
 800521c:	20001c6c 	.word	0x20001c6c
 8005220:	20002084 	.word	0x20002084
 8005224:	20001ca4 	.word	0x20001ca4
 8005228:	20001fa8 	.word	0x20001fa8
 800522c:	20001eb8 	.word	0x20001eb8
 8005230:	20001f68 	.word	0x20001f68
 8005234:	20001e80 	.word	0x20001e80
 8005238:	20002054 	.word	0x20002054
 800523c:	20001e2c 	.word	0x20001e2c
 8005240:	20001fe8 	.word	0x20001fe8
 8005244:	20001f28 	.word	0x20001f28
 8005248:	20001f70 	.word	0x20001f70
 800524c:	20001f0c 	.word	0x20001f0c
 8005250:	20001f80 	.word	0x20001f80
 8005254:	20001b8c 	.word	0x20001b8c
 8005258:	20002074 	.word	0x20002074
 800525c:	20001c18 	.word	0x20001c18
 8005260:	20001fc0 	.word	0x20001fc0
 8005264:	20001b70 	.word	0x20001b70
 8005268:	20002034 	.word	0x20002034
 800526c:	20001c88 	.word	0x20001c88
 8005270:	20001fa0 	.word	0x20001fa0
 8005274:	20001e10 	.word	0x20001e10
 8005278:	20001fb8 	.word	0x20001fb8
 800527c:	20001df4 	.word	0x20001df4
 8005280:	2000209c 	.word	0x2000209c
 8005284:	20001b54 	.word	0x20001b54
 8005288:	2000203c 	.word	0x2000203c
 800528c:	20001ed4 	.word	0x20001ed4
 8005290:	2000205c 	.word	0x2000205c
 8005294:	20001e9c 	.word	0x20001e9c
 8005298:	20002024 	.word	0x20002024
 800529c:	20001e64 	.word	0x20001e64
 80052a0:	20002014 	.word	0x20002014
 80052a4:	20001e48 	.word	0x20001e48
 80052a8:	20002094 	.word	0x20002094
 80052ac:	20001d30 	.word	0x20001d30
 80052b0:	20001fb0 	.word	0x20001fb0
 80052b4:	20001b38 	.word	0x20001b38
 80052b8:	0800bb68 	.word	0x0800bb68
 80052bc:	20002064 	.word	0x20002064
 80052c0:	20001ba8 	.word	0x20001ba8
 80052c4:	0800bb6c 	.word	0x0800bb6c
 80052c8:	2000206c 	.word	0x2000206c
 80052cc:	20001bc4 	.word	0x20001bc4
 80052d0:	20001f98 	.word	0x20001f98
 80052d4:	20001ef0 	.word	0x20001ef0
 80052d8:	20001fc8 	.word	0x20001fc8
 80052dc:	20001be0 	.word	0x20001be0
 80052e0:	20001fd0 	.word	0x20001fd0
 80052e4:	20001bfc 	.word	0x20001bfc
 80052e8:	2000207c 	.word	0x2000207c
 80052ec:	20001ff0 	.word	0x20001ff0
 80052f0:	20001f78 	.word	0x20001f78
 80052f4:	20001f44 	.word	0x20001f44
 80052f8:	0800bb58 	.word	0x0800bb58
 80052fc:	49af      	ldr	r1, [pc, #700]	; (80055bc <_GLOBAL__sub_I_REG_FIFO+0xa44>)
 80052fe:	48b0      	ldr	r0, [pc, #704]	; (80055c0 <_GLOBAL__sub_I_REG_FIFO+0xa48>)
 8005300:	f7fd ff3c 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
};
 8005304:	4caf      	ldr	r4, [pc, #700]	; (80055c4 <_GLOBAL__sub_I_REG_FIFO+0xa4c>)
 8005306:	4626      	mov	r6, r4
 8005308:	4daf      	ldr	r5, [pc, #700]	; (80055c8 <_GLOBAL__sub_I_REG_FIFO+0xa50>)
 800530a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800530c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800530e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005312:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8005316:	f104 061c 	add.w	r6, r4, #28
 800531a:	4dac      	ldr	r5, [pc, #688]	; (80055cc <_GLOBAL__sub_I_REG_FIFO+0xa54>)
 800531c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800531e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005320:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005324:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8005328:	f104 0638 	add.w	r6, r4, #56	; 0x38
 800532c:	4da8      	ldr	r5, [pc, #672]	; (80055d0 <_GLOBAL__sub_I_REG_FIFO+0xa58>)
 800532e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005330:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005332:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005336:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800533a:	f104 0554 	add.w	r5, r4, #84	; 0x54
 800533e:	4ea5      	ldr	r6, [pc, #660]	; (80055d4 <_GLOBAL__sub_I_REG_FIFO+0xa5c>)
 8005340:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005342:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005344:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005348:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800534c:	f104 0670 	add.w	r6, r4, #112	; 0x70
 8005350:	4da1      	ldr	r5, [pc, #644]	; (80055d8 <_GLOBAL__sub_I_REG_FIFO+0xa60>)
 8005352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005354:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005356:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800535a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800535e:	f104 068c 	add.w	r6, r4, #140	; 0x8c
 8005362:	4d9e      	ldr	r5, [pc, #632]	; (80055dc <_GLOBAL__sub_I_REG_FIFO+0xa64>)
 8005364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005366:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005368:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800536c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8005370:	f104 06a8 	add.w	r6, r4, #168	; 0xa8
 8005374:	4d9a      	ldr	r5, [pc, #616]	; (80055e0 <_GLOBAL__sub_I_REG_FIFO+0xa68>)
 8005376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005378:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800537a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800537e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8005382:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
 8005386:	4d97      	ldr	r5, [pc, #604]	; (80055e4 <_GLOBAL__sub_I_REG_FIFO+0xa6c>)
 8005388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800538a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800538c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005390:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8005394:	f104 06e0 	add.w	r6, r4, #224	; 0xe0
 8005398:	4d93      	ldr	r5, [pc, #588]	; (80055e8 <_GLOBAL__sub_I_REG_FIFO+0xa70>)
 800539a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800539c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800539e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80053a2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80053a6:	f104 06fc 	add.w	r6, r4, #252	; 0xfc
 80053aa:	4d90      	ldr	r5, [pc, #576]	; (80055ec <_GLOBAL__sub_I_REG_FIFO+0xa74>)
 80053ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053ae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80053b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80053b4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80053b8:	f504 748c 	add.w	r4, r4, #280	; 0x118
 80053bc:	4d8c      	ldr	r5, [pc, #560]	; (80055f0 <_GLOBAL__sub_I_REG_FIFO+0xa78>)
 80053be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80053c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80053ca:	f5a4 7494 	sub.w	r4, r4, #296	; 0x128
 80053ce:	f504 759a 	add.w	r5, r4, #308	; 0x134
 80053d2:	4e88      	ldr	r6, [pc, #544]	; (80055f4 <_GLOBAL__sub_I_REG_FIFO+0xa7c>)
 80053d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80053d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053d8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80053dc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80053e0:	f504 75a8 	add.w	r5, r4, #336	; 0x150
 80053e4:	4e84      	ldr	r6, [pc, #528]	; (80055f8 <_GLOBAL__sub_I_REG_FIFO+0xa80>)
 80053e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80053e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053ea:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80053ee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80053f2:	f504 75b6 	add.w	r5, r4, #364	; 0x16c
 80053f6:	4e81      	ldr	r6, [pc, #516]	; (80055fc <_GLOBAL__sub_I_REG_FIFO+0xa84>)
 80053f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80053fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053fc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005400:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005404:	f504 75c4 	add.w	r5, r4, #392	; 0x188
 8005408:	4e7d      	ldr	r6, [pc, #500]	; (8005600 <_GLOBAL__sub_I_REG_FIFO+0xa88>)
 800540a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800540c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800540e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005412:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005416:	f504 75d2 	add.w	r5, r4, #420	; 0x1a4
 800541a:	4e7a      	ldr	r6, [pc, #488]	; (8005604 <_GLOBAL__sub_I_REG_FIFO+0xa8c>)
 800541c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800541e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005420:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005424:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005428:	f504 75e0 	add.w	r5, r4, #448	; 0x1c0
 800542c:	4e76      	ldr	r6, [pc, #472]	; (8005608 <_GLOBAL__sub_I_REG_FIFO+0xa90>)
 800542e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005430:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005432:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005436:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800543a:	f504 75ee 	add.w	r5, r4, #476	; 0x1dc
 800543e:	4e73      	ldr	r6, [pc, #460]	; (800560c <_GLOBAL__sub_I_REG_FIFO+0xa94>)
 8005440:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005444:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005448:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800544c:	f504 75fc 	add.w	r5, r4, #504	; 0x1f8
 8005450:	4e6f      	ldr	r6, [pc, #444]	; (8005610 <_GLOBAL__sub_I_REG_FIFO+0xa98>)
 8005452:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005456:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800545a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800545e:	f504 7505 	add.w	r5, r4, #532	; 0x214
 8005462:	4e6c      	ldr	r6, [pc, #432]	; (8005614 <_GLOBAL__sub_I_REG_FIFO+0xa9c>)
 8005464:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005466:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005468:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800546c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005470:	f504 750c 	add.w	r5, r4, #560	; 0x230
 8005474:	4e68      	ldr	r6, [pc, #416]	; (8005618 <_GLOBAL__sub_I_REG_FIFO+0xaa0>)
 8005476:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800547a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800547e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005482:	f504 7513 	add.w	r5, r4, #588	; 0x24c
 8005486:	4e65      	ldr	r6, [pc, #404]	; (800561c <_GLOBAL__sub_I_REG_FIFO+0xaa4>)
 8005488:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800548a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800548c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005490:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005494:	f504 751a 	add.w	r5, r4, #616	; 0x268
 8005498:	4e61      	ldr	r6, [pc, #388]	; (8005620 <_GLOBAL__sub_I_REG_FIFO+0xaa8>)
 800549a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800549c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800549e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80054a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80054a6:	f504 7521 	add.w	r5, r4, #644	; 0x284
 80054aa:	4e5e      	ldr	r6, [pc, #376]	; (8005624 <_GLOBAL__sub_I_REG_FIFO+0xaac>)
 80054ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80054ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054b0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80054b4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80054b8:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 80054bc:	4e5a      	ldr	r6, [pc, #360]	; (8005628 <_GLOBAL__sub_I_REG_FIFO+0xab0>)
 80054be:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80054c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054c2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80054c6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80054ca:	f504 752f 	add.w	r5, r4, #700	; 0x2bc
 80054ce:	4e57      	ldr	r6, [pc, #348]	; (800562c <_GLOBAL__sub_I_REG_FIFO+0xab4>)
 80054d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80054d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054d4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80054d8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80054dc:	f504 7536 	add.w	r5, r4, #728	; 0x2d8
 80054e0:	4e53      	ldr	r6, [pc, #332]	; (8005630 <_GLOBAL__sub_I_REG_FIFO+0xab8>)
 80054e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80054e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054e6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80054ea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80054ee:	f504 753d 	add.w	r5, r4, #756	; 0x2f4
 80054f2:	4e50      	ldr	r6, [pc, #320]	; (8005634 <_GLOBAL__sub_I_REG_FIFO+0xabc>)
 80054f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80054f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054f8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80054fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005500:	f504 7544 	add.w	r5, r4, #784	; 0x310
 8005504:	4e4c      	ldr	r6, [pc, #304]	; (8005638 <_GLOBAL__sub_I_REG_FIFO+0xac0>)
 8005506:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005508:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800550a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800550e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005512:	f504 754b 	add.w	r5, r4, #812	; 0x32c
 8005516:	4e49      	ldr	r6, [pc, #292]	; (800563c <_GLOBAL__sub_I_REG_FIFO+0xac4>)
 8005518:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800551a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800551c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005520:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005524:	f504 7552 	add.w	r5, r4, #840	; 0x348
 8005528:	4e45      	ldr	r6, [pc, #276]	; (8005640 <_GLOBAL__sub_I_REG_FIFO+0xac8>)
 800552a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800552c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800552e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005532:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005536:	f504 7559 	add.w	r5, r4, #868	; 0x364
 800553a:	4e42      	ldr	r6, [pc, #264]	; (8005644 <_GLOBAL__sub_I_REG_FIFO+0xacc>)
 800553c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800553e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005540:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005544:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005548:	f504 7560 	add.w	r5, r4, #896	; 0x380
 800554c:	4e3e      	ldr	r6, [pc, #248]	; (8005648 <_GLOBAL__sub_I_REG_FIFO+0xad0>)
 800554e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005552:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005556:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800555a:	f504 7567 	add.w	r5, r4, #924	; 0x39c
 800555e:	4e3b      	ldr	r6, [pc, #236]	; (800564c <_GLOBAL__sub_I_REG_FIFO+0xad4>)
 8005560:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005564:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005568:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800556c:	f504 756e 	add.w	r5, r4, #952	; 0x3b8
 8005570:	4e37      	ldr	r6, [pc, #220]	; (8005650 <_GLOBAL__sub_I_REG_FIFO+0xad8>)
 8005572:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005574:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005576:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800557a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800557e:	f504 7575 	add.w	r5, r4, #980	; 0x3d4
 8005582:	4e34      	ldr	r6, [pc, #208]	; (8005654 <_GLOBAL__sub_I_REG_FIFO+0xadc>)
 8005584:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005586:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005588:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800558c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005590:	f504 757c 	add.w	r5, r4, #1008	; 0x3f0
 8005594:	4e30      	ldr	r6, [pc, #192]	; (8005658 <_GLOBAL__sub_I_REG_FIFO+0xae0>)
 8005596:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800559a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800559e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80055a2:	f204 440c 	addw	r4, r4, #1036	; 0x40c
 80055a6:	4d06      	ldr	r5, [pc, #24]	; (80055c0 <_GLOBAL__sub_I_REG_FIFO+0xa48>)
 80055a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80055b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80055b4:	b007      	add	sp, #28
 80055b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ba:	bf00      	nop
 80055bc:	20001f60 	.word	0x20001f60
 80055c0:	20001dbc 	.word	0x20001dbc
 80055c4:	20001710 	.word	0x20001710
 80055c8:	20001c34 	.word	0x20001c34
 80055cc:	20001d14 	.word	0x20001d14
 80055d0:	20001d4c 	.word	0x20001d4c
 80055d4:	20001d84 	.word	0x20001d84
 80055d8:	20001cdc 	.word	0x20001cdc
 80055dc:	20001dd8 	.word	0x20001dd8
 80055e0:	20001d68 	.word	0x20001d68
 80055e4:	20001da0 	.word	0x20001da0
 80055e8:	20001cf8 	.word	0x20001cf8
 80055ec:	20001c50 	.word	0x20001c50
 80055f0:	20001cc0 	.word	0x20001cc0
 80055f4:	20001c6c 	.word	0x20001c6c
 80055f8:	20001ca4 	.word	0x20001ca4
 80055fc:	20001eb8 	.word	0x20001eb8
 8005600:	20001e80 	.word	0x20001e80
 8005604:	20001e2c 	.word	0x20001e2c
 8005608:	20001f28 	.word	0x20001f28
 800560c:	20001f0c 	.word	0x20001f0c
 8005610:	20001b8c 	.word	0x20001b8c
 8005614:	20001c18 	.word	0x20001c18
 8005618:	20001b70 	.word	0x20001b70
 800561c:	20001c88 	.word	0x20001c88
 8005620:	20001e10 	.word	0x20001e10
 8005624:	20001df4 	.word	0x20001df4
 8005628:	20001b54 	.word	0x20001b54
 800562c:	20001ed4 	.word	0x20001ed4
 8005630:	20001e9c 	.word	0x20001e9c
 8005634:	20001e64 	.word	0x20001e64
 8005638:	20001e48 	.word	0x20001e48
 800563c:	20001d30 	.word	0x20001d30
 8005640:	20001b38 	.word	0x20001b38
 8005644:	20001ba8 	.word	0x20001ba8
 8005648:	20001bc4 	.word	0x20001bc4
 800564c:	20001ef0 	.word	0x20001ef0
 8005650:	20001be0 	.word	0x20001be0
 8005654:	20001bfc 	.word	0x20001bfc
 8005658:	20001f44 	.word	0x20001f44

0800565c <_ZN15Packet_analyzer11set_settingEh>:
    // return field_header_[num_number]->set_value(num, &(packet[0]));
}

bool Packet_analyzer::set_setting(uint8_t setting) {
    return false; // настройки индивидуальны, у общего класса их нет
}
 800565c:	2000      	movs	r0, #0
 800565e:	4770      	bx	lr

08005660 <_ZN17Packet_Connection11set_settingEh>:
// ----- ----- ----- ----- ----- Packet_Connection ----- ----- ----- ----- -----
//   ----- ----- ----- ----- -----  ----- -----  ----- ----- ----- ----- -----

bool Packet_Connection::set_setting(uint8_t setting) {
    return false; // не зависит от настроек
}
 8005660:	2000      	movs	r0, #0
 8005662:	4770      	bx	lr

08005664 <_ZN13Packet_Sensor11set_settingEh>:
// ----- ----- ----- ----- -----  Packet_Sensor  ----- ----- ----- ----- -----
//   ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----

bool Packet_Sensor::set_setting(uint8_t setting) {
    // if по типам
    setting_ = setting;
 8005664:	7401      	strb	r1, [r0, #16]
    return false;
}
 8005666:	2000      	movs	r0, #0
 8005668:	4770      	bx	lr

0800566a <_ZN13Packet_Device11set_settingEh>:
//   ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----


bool Packet_Device::set_setting(uint8_t setting) {
    // if по типам
    setting_ = setting;
 800566a:	7401      	strb	r1, [r0, #16]
    return false;
}
 800566c:	2000      	movs	r0, #0
 800566e:	4770      	bx	lr

08005670 <_ZN13Packet_System11set_settingEh>:


bool Packet_System::set_setting(uint8_t setting) {
    // if по типам
    return true; // не реализованы
}
 8005670:	2001      	movs	r0, #1
 8005672:	4770      	bx	lr

08005674 <_ZN12LoRa_addressC1EPKhh>:
LoRa_address::LoRa_address(const uint8_t* bytes, const uint8_t len) {
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	4604      	mov	r4, r0
 8005678:	460d      	mov	r5, r1
 800567a:	4616      	mov	r6, r2
 800567c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005680:	8003      	strh	r3, [r0, #0]
 8005682:	8043      	strh	r3, [r0, #2]
	group = field_dest_adr_group.get_value(bytes, len);
 8005684:	4805      	ldr	r0, [pc, #20]	; (800569c <_ZN12LoRa_addressC1EPKhh+0x28>)
 8005686:	f7fd fd8c 	bl	80031a2 <_ZNK13Address_field9get_valueEPKhi>
 800568a:	8020      	strh	r0, [r4, #0]
	branch = field_dest_adr_branch.get_value(bytes, len);
 800568c:	4632      	mov	r2, r6
 800568e:	4629      	mov	r1, r5
 8005690:	4803      	ldr	r0, [pc, #12]	; (80056a0 <_ZN12LoRa_addressC1EPKhh+0x2c>)
 8005692:	f7fd fd86 	bl	80031a2 <_ZNK13Address_field9get_valueEPKhi>
 8005696:	8060      	strh	r0, [r4, #2]
}
 8005698:	4620      	mov	r0, r4
 800569a:	bd70      	pop	{r4, r5, r6, pc}
 800569c:	200021b4 	.word	0x200021b4
 80056a0:	200021ec 	.word	0x200021ec

080056a4 <_ZN12LoRa_addressC1Ett>:
LoRa_address::LoRa_address(const uint16_t group, const uint16_t branch):group(group),branch(branch){}
 80056a4:	8001      	strh	r1, [r0, #0]
 80056a6:	8042      	strh	r2, [r0, #2]
 80056a8:	4770      	bx	lr

080056aa <_ZN12LoRa_addressC1Em>:
LoRa_address::LoRa_address(const uint32_t adr):group((uint16_t)(adr >> 16)),branch((uint16_t)(adr)){}
 80056aa:	0c0a      	lsrs	r2, r1, #16
 80056ac:	8002      	strh	r2, [r0, #0]
 80056ae:	8041      	strh	r1, [r0, #2]
 80056b0:	4770      	bx	lr

080056b2 <_ZN12LoRa_address6globalEv>:
    return ((group == LORA_GLOBAL_ADR_GROUP) && (branch == LORA_GLOBAL_ADR_BRANCH));
 80056b2:	8802      	ldrh	r2, [r0, #0]
 80056b4:	f240 13ff 	movw	r3, #511	; 0x1ff
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d001      	beq.n	80056c0 <_ZN12LoRa_address6globalEv+0xe>
 80056bc:	2000      	movs	r0, #0
}
 80056be:	4770      	bx	lr
    return ((group == LORA_GLOBAL_ADR_GROUP) && (branch == LORA_GLOBAL_ADR_BRANCH));
 80056c0:	8840      	ldrh	r0, [r0, #2]
 80056c2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80056c6:	4298      	cmp	r0, r3
 80056c8:	bf14      	ite	ne
 80056ca:	2000      	movne	r0, #0
 80056cc:	2001      	moveq	r0, #1
 80056ce:	4770      	bx	lr

080056d0 <_ZneRK12LoRa_addressS1_>:
    return ((left.group != right.group) || (left.branch != right.branch));
 80056d0:	8802      	ldrh	r2, [r0, #0]
 80056d2:	880b      	ldrh	r3, [r1, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d001      	beq.n	80056dc <_ZneRK12LoRa_addressS1_+0xc>
 80056d8:	2001      	movs	r0, #1
}
 80056da:	4770      	bx	lr
    return ((left.group != right.group) || (left.branch != right.branch));
 80056dc:	8840      	ldrh	r0, [r0, #2]
 80056de:	884b      	ldrh	r3, [r1, #2]
 80056e0:	1ac0      	subs	r0, r0, r3
 80056e2:	bf18      	it	ne
 80056e4:	2001      	movne	r0, #1
 80056e6:	4770      	bx	lr

080056e8 <_ZN15Packet_analyzerC1Ev>:
Packet_analyzer::Packet_analyzer() {
 80056e8:	4a05      	ldr	r2, [pc, #20]	; (8005700 <_ZN15Packet_analyzerC1Ev+0x18>)
 80056ea:	6002      	str	r2, [r0, #0]
 80056ec:	2200      	movs	r2, #0
 80056ee:	6142      	str	r2, [r0, #20]
 80056f0:	6182      	str	r2, [r0, #24]
    field_packet_ = nullptr;
 80056f2:	6082      	str	r2, [r0, #8]
    amt_field_packet_ = 0;
 80056f4:	81c2      	strh	r2, [r0, #14]
    field_header_ = field_packet_header;
 80056f6:	4a03      	ldr	r2, [pc, #12]	; (8005704 <_ZN15Packet_analyzerC1Ev+0x1c>)
 80056f8:	6042      	str	r2, [r0, #4]
    amt_field_header_ = count_field_packet_header;
 80056fa:	2206      	movs	r2, #6
 80056fc:	8182      	strh	r2, [r0, #12]
}
 80056fe:	4770      	bx	lr
 8005700:	0800bbc4 	.word	0x0800bbc4
 8005704:	20000004 	.word	0x20000004

08005708 <_ZN15Packet_analyzer18get_dest_adr_groupERK11LoRa_packet>:
uint16_t Packet_analyzer::get_dest_adr_group(const LoRa_packet& packet) {
 8005708:	b508      	push	{r3, lr}
    return field_header_[num_dest_adr_group]->get_value(packet);
 800570a:	6843      	ldr	r3, [r0, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	6818      	ldr	r0, [r3, #0]
 8005710:	f7fd fdfa 	bl	8003308 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 8005714:	b280      	uxth	r0, r0
 8005716:	bd08      	pop	{r3, pc}

08005718 <_ZN15Packet_analyzer19get_dest_adr_branchERK11LoRa_packet>:
uint16_t Packet_analyzer::get_dest_adr_branch(const LoRa_packet& packet) {
 8005718:	b508      	push	{r3, lr}
    return field_header_[num_dest_adr_branch]->get_value(packet);
 800571a:	6843      	ldr	r3, [r0, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	6858      	ldr	r0, [r3, #4]
 8005720:	f7fd fdf2 	bl	8003308 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 8005724:	b280      	uxth	r0, r0
 8005726:	bd08      	pop	{r3, pc}

08005728 <_ZN15Packet_analyzer12get_dest_adrERK11LoRa_packet>:
LoRa_address Packet_analyzer::get_dest_adr(const LoRa_packet& packet) {
 8005728:	b570      	push	{r4, r5, r6, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	4605      	mov	r5, r0
 800572e:	460e      	mov	r6, r1
    return {get_dest_adr_group(packet), get_dest_adr_branch(packet)};
 8005730:	f7ff ffea 	bl	8005708 <_ZN15Packet_analyzer18get_dest_adr_groupERK11LoRa_packet>
 8005734:	4604      	mov	r4, r0
 8005736:	4631      	mov	r1, r6
 8005738:	4628      	mov	r0, r5
 800573a:	f7ff ffed 	bl	8005718 <_ZN15Packet_analyzer19get_dest_adr_branchERK11LoRa_packet>
 800573e:	2300      	movs	r3, #0
 8005740:	f364 030f 	bfi	r3, r4, #0, #16
 8005744:	b280      	uxth	r0, r0
 8005746:	f360 431f 	bfi	r3, r0, #16, #16
}
 800574a:	4618      	mov	r0, r3
 800574c:	b002      	add	sp, #8
 800574e:	bd70      	pop	{r4, r5, r6, pc}

08005750 <_ZN15Packet_analyzer18get_sour_adr_groupERK11LoRa_packet>:
uint16_t Packet_analyzer::get_sour_adr_group(const LoRa_packet& packet) {
 8005750:	b508      	push	{r3, lr}
    return field_header_[num_sour_adr_group]->get_value(packet);
 8005752:	6843      	ldr	r3, [r0, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	6898      	ldr	r0, [r3, #8]
 8005758:	f7fd fdd6 	bl	8003308 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 800575c:	b280      	uxth	r0, r0
 800575e:	bd08      	pop	{r3, pc}

08005760 <_ZN15Packet_analyzer19get_sour_adr_branchERK11LoRa_packet>:
uint16_t Packet_analyzer::get_sour_adr_branch(const LoRa_packet& packet) {
 8005760:	b508      	push	{r3, lr}
    return field_header_[num_sour_adr_branch]->get_value(packet);
 8005762:	6843      	ldr	r3, [r0, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	68d8      	ldr	r0, [r3, #12]
 8005768:	f7fd fdce 	bl	8003308 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 800576c:	b280      	uxth	r0, r0
 800576e:	bd08      	pop	{r3, pc}

08005770 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>:
LoRa_address Packet_analyzer::get_sour_adr(const LoRa_packet& packet) {
 8005770:	b570      	push	{r4, r5, r6, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	4605      	mov	r5, r0
 8005776:	460e      	mov	r6, r1
    return {get_sour_adr_group(packet), get_sour_adr_branch(packet)};
 8005778:	f7ff ffea 	bl	8005750 <_ZN15Packet_analyzer18get_sour_adr_groupERK11LoRa_packet>
 800577c:	4604      	mov	r4, r0
 800577e:	4631      	mov	r1, r6
 8005780:	4628      	mov	r0, r5
 8005782:	f7ff ffed 	bl	8005760 <_ZN15Packet_analyzer19get_sour_adr_branchERK11LoRa_packet>
 8005786:	2300      	movs	r3, #0
 8005788:	f364 030f 	bfi	r3, r4, #0, #16
 800578c:	b280      	uxth	r0, r0
 800578e:	f360 431f 	bfi	r3, r0, #16, #16
}
 8005792:	4618      	mov	r0, r3
 8005794:	b002      	add	sp, #8
 8005796:	bd70      	pop	{r4, r5, r6, pc}

08005798 <_ZN15Packet_analyzer15get_packet_typeERK11LoRa_packet>:
Packet_Type Packet_analyzer::get_packet_type(const LoRa_packet& packet) {
 8005798:	b508      	push	{r3, lr}
    return (Packet_Type)field_header_[num_type]->get_value(packet);
 800579a:	6843      	ldr	r3, [r0, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	6918      	ldr	r0, [r3, #16]
 80057a0:	f7fd fdb2 	bl	8003308 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 80057a4:	bd08      	pop	{r3, pc}

080057a6 <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>:
uint16_t Packet_analyzer::get_packet_number(const LoRa_packet& packet) {
 80057a6:	b508      	push	{r3, lr}
    return field_header_[num_number]->get_value(packet);
 80057a8:	6843      	ldr	r3, [r0, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	6958      	ldr	r0, [r3, #20]
 80057ae:	f7fd fdab 	bl	8003308 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 80057b2:	b280      	uxth	r0, r0
 80057b4:	bd08      	pop	{r3, pc}

080057b6 <_ZN15Packet_analyzer18set_dest_adr_groupER11LoRa_packett>:
bool Packet_analyzer::set_dest_adr_group(LoRa_packet& packet, uint16_t adr) {
 80057b6:	b510      	push	{r4, lr}
 80057b8:	4614      	mov	r4, r2
    return field_header_[num_dest_adr_group]->set_value(adr, packet);
 80057ba:	6840      	ldr	r0, [r0, #4]
 80057bc:	2300      	movs	r3, #0
 80057be:	460a      	mov	r2, r1
 80057c0:	4621      	mov	r1, r4
 80057c2:	6800      	ldr	r0, [r0, #0]
 80057c4:	f7fd fe02 	bl	80033cc <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
}
 80057c8:	bd10      	pop	{r4, pc}

080057ca <_ZN15Packet_analyzer19set_dest_adr_branchER11LoRa_packett>:
bool Packet_analyzer::set_dest_adr_branch(LoRa_packet& packet, uint16_t adr) {
 80057ca:	b510      	push	{r4, lr}
 80057cc:	4614      	mov	r4, r2
    return field_header_[num_dest_adr_branch]->set_value(adr, packet);
 80057ce:	6840      	ldr	r0, [r0, #4]
 80057d0:	2300      	movs	r3, #0
 80057d2:	460a      	mov	r2, r1
 80057d4:	4621      	mov	r1, r4
 80057d6:	6840      	ldr	r0, [r0, #4]
 80057d8:	f7fd fdf8 	bl	80033cc <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
}
 80057dc:	bd10      	pop	{r4, pc}

080057de <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address>:
bool Packet_analyzer::set_dest_adr(LoRa_packet& packet, LoRa_address adr) {
 80057de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057e0:	b083      	sub	sp, #12
 80057e2:	4604      	mov	r4, r0
 80057e4:	460d      	mov	r5, r1
 80057e6:	9201      	str	r2, [sp, #4]
    uint16_t buffer = get_dest_adr_group(packet);
 80057e8:	f7ff ff8e 	bl	8005708 <_ZN15Packet_analyzer18get_dest_adr_groupERK11LoRa_packet>
 80057ec:	4607      	mov	r7, r0
    if(set_dest_adr_group(packet, adr.group))
 80057ee:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80057f2:	4629      	mov	r1, r5
 80057f4:	4620      	mov	r0, r4
 80057f6:	f7ff ffde 	bl	80057b6 <_ZN15Packet_analyzer18set_dest_adr_groupER11LoRa_packett>
 80057fa:	4606      	mov	r6, r0
 80057fc:	b110      	cbz	r0, 8005804 <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address+0x26>
}
 80057fe:	4630      	mov	r0, r6
 8005800:	b003      	add	sp, #12
 8005802:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(set_dest_adr_branch(packet, adr.branch)) {
 8005804:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005808:	4629      	mov	r1, r5
 800580a:	4620      	mov	r0, r4
 800580c:	f7ff ffdd 	bl	80057ca <_ZN15Packet_analyzer19set_dest_adr_branchER11LoRa_packett>
 8005810:	4606      	mov	r6, r0
 8005812:	2800      	cmp	r0, #0
 8005814:	d0f3      	beq.n	80057fe <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address+0x20>
        set_dest_adr_group(packet, buffer);
 8005816:	463a      	mov	r2, r7
 8005818:	4629      	mov	r1, r5
 800581a:	4620      	mov	r0, r4
 800581c:	f7ff ffcb 	bl	80057b6 <_ZN15Packet_analyzer18set_dest_adr_groupER11LoRa_packett>
        return true;
 8005820:	e7ed      	b.n	80057fe <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address+0x20>

08005822 <_ZN15Packet_analyzer18set_sour_adr_groupER11LoRa_packett>:
bool Packet_analyzer::set_sour_adr_group(LoRa_packet& packet, uint16_t adr) {
 8005822:	b510      	push	{r4, lr}
 8005824:	4614      	mov	r4, r2
    return field_header_[num_sour_adr_group]->set_value(adr, packet);
 8005826:	6840      	ldr	r0, [r0, #4]
 8005828:	2300      	movs	r3, #0
 800582a:	460a      	mov	r2, r1
 800582c:	4621      	mov	r1, r4
 800582e:	6880      	ldr	r0, [r0, #8]
 8005830:	f7fd fdcc 	bl	80033cc <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
}
 8005834:	bd10      	pop	{r4, pc}

08005836 <_ZN15Packet_analyzer19set_sour_adr_branchER11LoRa_packett>:
bool Packet_analyzer::set_sour_adr_branch(LoRa_packet& packet, uint16_t adr) {
 8005836:	b510      	push	{r4, lr}
 8005838:	4614      	mov	r4, r2
    return field_header_[num_sour_adr_branch]->set_value(adr, packet);
 800583a:	6840      	ldr	r0, [r0, #4]
 800583c:	2300      	movs	r3, #0
 800583e:	460a      	mov	r2, r1
 8005840:	4621      	mov	r1, r4
 8005842:	68c0      	ldr	r0, [r0, #12]
 8005844:	f7fd fdc2 	bl	80033cc <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
}
 8005848:	bd10      	pop	{r4, pc}

0800584a <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address>:
bool Packet_analyzer::set_sour_adr(LoRa_packet& packet, LoRa_address adr) {
 800584a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800584c:	b083      	sub	sp, #12
 800584e:	4604      	mov	r4, r0
 8005850:	460d      	mov	r5, r1
 8005852:	9201      	str	r2, [sp, #4]
    uint16_t buffer = get_sour_adr_group(packet);
 8005854:	f7ff ff7c 	bl	8005750 <_ZN15Packet_analyzer18get_sour_adr_groupERK11LoRa_packet>
 8005858:	4607      	mov	r7, r0
    if(set_sour_adr_group(packet, adr.group))
 800585a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800585e:	4629      	mov	r1, r5
 8005860:	4620      	mov	r0, r4
 8005862:	f7ff ffde 	bl	8005822 <_ZN15Packet_analyzer18set_sour_adr_groupER11LoRa_packett>
 8005866:	4606      	mov	r6, r0
 8005868:	b110      	cbz	r0, 8005870 <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address+0x26>
}
 800586a:	4630      	mov	r0, r6
 800586c:	b003      	add	sp, #12
 800586e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(set_sour_adr_branch(packet, adr.branch)) {
 8005870:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005874:	4629      	mov	r1, r5
 8005876:	4620      	mov	r0, r4
 8005878:	f7ff ffdd 	bl	8005836 <_ZN15Packet_analyzer19set_sour_adr_branchER11LoRa_packett>
 800587c:	4606      	mov	r6, r0
 800587e:	2800      	cmp	r0, #0
 8005880:	d0f3      	beq.n	800586a <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address+0x20>
        set_sour_adr_group(packet, buffer);
 8005882:	463a      	mov	r2, r7
 8005884:	4629      	mov	r1, r5
 8005886:	4620      	mov	r0, r4
 8005888:	f7ff ffcb 	bl	8005822 <_ZN15Packet_analyzer18set_sour_adr_groupER11LoRa_packett>
        return true;
 800588c:	e7ed      	b.n	800586a <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address+0x20>

0800588e <_ZN15Packet_analyzer15set_packet_typeER11LoRa_packet11Packet_Type>:
bool Packet_analyzer::set_packet_type(LoRa_packet& packet, Packet_Type pac_type) {
 800588e:	b510      	push	{r4, lr}
 8005890:	4614      	mov	r4, r2
    return  field_header_[num_type]->set_value((uint32_t)pac_type, packet);
 8005892:	6840      	ldr	r0, [r0, #4]
 8005894:	2300      	movs	r3, #0
 8005896:	460a      	mov	r2, r1
 8005898:	4621      	mov	r1, r4
 800589a:	6900      	ldr	r0, [r0, #16]
 800589c:	f7fd fd96 	bl	80033cc <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
}
 80058a0:	bd10      	pop	{r4, pc}

080058a2 <_ZN15Packet_analyzer17set_packet_numberER11LoRa_packett>:
bool Packet_analyzer::set_packet_number(LoRa_packet& packet, uint16_t num) {
 80058a2:	b510      	push	{r4, lr}
 80058a4:	4614      	mov	r4, r2
    return field_header_[num_number]->set_value(num, packet);
 80058a6:	6840      	ldr	r0, [r0, #4]
 80058a8:	2300      	movs	r3, #0
 80058aa:	460a      	mov	r2, r1
 80058ac:	4621      	mov	r1, r4
 80058ae:	6940      	ldr	r0, [r0, #20]
 80058b0:	f7fd fd8c 	bl	80033cc <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
}
 80058b4:	bd10      	pop	{r4, pc}
	...

080058b8 <_ZN17Packet_Connection11set_commandER11LoRa_packeth>:
    if (!(com < CONNECT_COMMAND_DATA))
 80058b8:	2a0c      	cmp	r2, #12
 80058ba:	d901      	bls.n	80058c0 <_ZN17Packet_Connection11set_commandER11LoRa_packeth+0x8>
        return 1;
 80058bc:	2001      	movs	r0, #1
}
 80058be:	4770      	bx	lr
uint8_t Packet_Connection::set_command(LoRa_packet& packet, uint8_t com) {
 80058c0:	b538      	push	{r3, r4, r5, lr}
 80058c2:	4614      	mov	r4, r2
 80058c4:	460a      	mov	r2, r1
 80058c6:	4605      	mov	r5, r0
    command_ = com;
 80058c8:	7704      	strb	r4, [r0, #28]
    last_filled_byte = PACKET_HEADER_SIZE; // Команда всегда находится сразу после шапки
 80058ca:	2309      	movs	r3, #9
 80058cc:	6143      	str	r3, [r0, #20]
    error = field_byte.set_value(command_, packet, last_filled_byte);
 80058ce:	4621      	mov	r1, r4
 80058d0:	4804      	ldr	r0, [pc, #16]	; (80058e4 <_ZN17Packet_Connection11set_commandER11LoRa_packeth+0x2c>)
 80058d2:	f7fd fd7b 	bl	80033cc <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
    if (error)
 80058d6:	b918      	cbnz	r0, 80058e0 <_ZN17Packet_Connection11set_commandER11LoRa_packeth+0x28>
    ++last_filled_byte;
 80058d8:	696b      	ldr	r3, [r5, #20]
 80058da:	3301      	adds	r3, #1
 80058dc:	616b      	str	r3, [r5, #20]
}
 80058de:	bd38      	pop	{r3, r4, r5, pc}
        return 2;
 80058e0:	2002      	movs	r0, #2
 80058e2:	e7fc      	b.n	80058de <_ZN17Packet_Connection11set_commandER11LoRa_packeth+0x26>
 80058e4:	200020cc 	.word	0x200020cc

080058e8 <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh>:
uint8_t Packet_Connection::get_command(const LoRa_packet& packet, uint8_t *com) {
 80058e8:	b538      	push	{r3, r4, r5, lr}
    last_read_byte = PACKET_HEADER_SIZE; // Команда всегда находится сразу после шапки
 80058ea:	2309      	movs	r3, #9
 80058ec:	6183      	str	r3, [r0, #24]
    if(com == nullptr)
 80058ee:	b19a      	cbz	r2, 8005918 <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh+0x30>
 80058f0:	4615      	mov	r5, r2
 80058f2:	4604      	mov	r4, r0
    command_ = field_byte.get_value(packet, last_read_byte);
 80058f4:	461a      	mov	r2, r3
 80058f6:	4809      	ldr	r0, [pc, #36]	; (800591c <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh+0x34>)
 80058f8:	f7fd fd06 	bl	8003308 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 80058fc:	b2c0      	uxtb	r0, r0
 80058fe:	7720      	strb	r0, [r4, #28]
    ++last_read_byte;
 8005900:	69a3      	ldr	r3, [r4, #24]
 8005902:	3301      	adds	r3, #1
 8005904:	61a3      	str	r3, [r4, #24]
    if (!(command_ < CONNECT_COMMAND_DATA)) {
 8005906:	280c      	cmp	r0, #12
 8005908:	d802      	bhi.n	8005910 <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh+0x28>
    *com = command_;
 800590a:	7028      	strb	r0, [r5, #0]
    return 0;
 800590c:	2000      	movs	r0, #0
 800590e:	e004      	b.n	800591a <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh+0x32>
        command_ = 0xFF;
 8005910:	23ff      	movs	r3, #255	; 0xff
 8005912:	7723      	strb	r3, [r4, #28]
        return 2;
 8005914:	2002      	movs	r0, #2
 8005916:	e000      	b.n	800591a <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh+0x32>
        return 1;
 8005918:	2001      	movs	r0, #1
}
 800591a:	bd38      	pop	{r3, r4, r5, pc}
 800591c:	200020cc 	.word	0x200020cc

08005920 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>:
    size_data = 0;
 8005920:	2000      	movs	r0, #0
 8005922:	7018      	strb	r0, [r3, #0]
    if (!(*com < CONNECT_COMMAND_DATA)) {
 8005924:	7809      	ldrb	r1, [r1, #0]
 8005926:	290c      	cmp	r1, #12
 8005928:	d825      	bhi.n	8005976 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x56>
    if (connect_com_data[*com] != 0xFF) {
 800592a:	4817      	ldr	r0, [pc, #92]	; (8005988 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x68>)
 800592c:	5c40      	ldrb	r0, [r0, r1]
 800592e:	28ff      	cmp	r0, #255	; 0xff
 8005930:	d002      	beq.n	8005938 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x18>
        size_data = connect_com_data[*com];
 8005932:	7018      	strb	r0, [r3, #0]
    return 0;
 8005934:	2000      	movs	r0, #0
 8005936:	4770      	bx	lr
        if(len == nullptr)
 8005938:	b1fa      	cbz	r2, 800597a <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x5a>
        switch (*com)
 800593a:	3901      	subs	r1, #1
 800593c:	290b      	cmp	r1, #11
 800593e:	d81e      	bhi.n	800597e <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x5e>
 8005940:	e8df f001 	tbb	[pc, r1]
 8005944:	1d1d1d08 	.word	0x1d1d1d08
 8005948:	1d1d101d 	.word	0x1d1d101d
 800594c:	151d0606 	.word	0x151d0606
    return 0;
 8005950:	2000      	movs	r0, #0
 8005952:	4770      	bx	lr
            if ((*len != 1) && (*len != 2))
 8005954:	7811      	ldrb	r1, [r2, #0]
 8005956:	1e4a      	subs	r2, r1, #1
 8005958:	b2d2      	uxtb	r2, r2
 800595a:	2a01      	cmp	r2, #1
 800595c:	d811      	bhi.n	8005982 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x62>
            size_data = *len;
 800595e:	7019      	strb	r1, [r3, #0]
    return 0;
 8005960:	2000      	movs	r0, #0
            break;
 8005962:	4770      	bx	lr
            size_data = *len * 2;
 8005964:	7812      	ldrb	r2, [r2, #0]
 8005966:	0052      	lsls	r2, r2, #1
 8005968:	701a      	strb	r2, [r3, #0]
    return 0;
 800596a:	2000      	movs	r0, #0
            break;
 800596c:	4770      	bx	lr
            size_data = *len;
 800596e:	7812      	ldrb	r2, [r2, #0]
 8005970:	701a      	strb	r2, [r3, #0]
    return 0;
 8005972:	2000      	movs	r0, #0
            break;
 8005974:	4770      	bx	lr
        return 1;
 8005976:	2001      	movs	r0, #1
 8005978:	4770      	bx	lr
            return 2;
 800597a:	2002      	movs	r0, #2
 800597c:	4770      	bx	lr
            return 4;
 800597e:	2004      	movs	r0, #4
 8005980:	4770      	bx	lr
                return 3;
 8005982:	2003      	movs	r0, #3
}
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	0800bb78 	.word	0x0800bb78

0800598c <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh>:
uint8_t Packet_Connection::set_data(LoRa_packet& packet, uint8_t *data, uint8_t len) {
 800598c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005990:	b085      	sub	sp, #20
 8005992:	4604      	mov	r4, r0
 8005994:	460e      	mov	r6, r1
 8005996:	4615      	mov	r5, r2
 8005998:	f88d 3007 	strb.w	r3, [sp, #7]
    error = get_size_by_data(&command_, &len, len_data);
 800599c:	f10d 030f 	add.w	r3, sp, #15
 80059a0:	f10d 0207 	add.w	r2, sp, #7
 80059a4:	f100 011c 	add.w	r1, r0, #28
 80059a8:	f7ff ffba 	bl	8005920 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
    if(error)
 80059ac:	4681      	mov	r9, r0
 80059ae:	2800      	cmp	r0, #0
 80059b0:	d150      	bne.n	8005a54 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xc8>
    if (connect_com_data[command_] == 0xFF) {
 80059b2:	7f23      	ldrb	r3, [r4, #28]
 80059b4:	4a29      	ldr	r2, [pc, #164]	; (8005a5c <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xd0>)
 80059b6:	5cd2      	ldrb	r2, [r2, r3]
 80059b8:	2aff      	cmp	r2, #255	; 0xff
 80059ba:	d018      	beq.n	80059ee <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0x62>
    for (int i = 0; i < len_data; ++i) {
 80059bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d047      	beq.n	8005a54 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xc8>
 80059c4:	46a8      	mov	r8, r5
        error = field_byte.set_value(data[i], packet, last_filled_byte);
 80059c6:	4f26      	ldr	r7, [pc, #152]	; (8005a60 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xd4>)
 80059c8:	7d23      	ldrb	r3, [r4, #20]
 80059ca:	4632      	mov	r2, r6
 80059cc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80059d0:	4638      	mov	r0, r7
 80059d2:	f7fd fcfb 	bl	80033cc <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
        ++last_filled_byte;
 80059d6:	6963      	ldr	r3, [r4, #20]
 80059d8:	3301      	adds	r3, #1
 80059da:	6163      	str	r3, [r4, #20]
        if (error)
 80059dc:	2800      	cmp	r0, #0
 80059de:	d137      	bne.n	8005a50 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xc4>
    for (int i = 0; i < len_data; ++i) {
 80059e0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80059e4:	eba5 0308 	sub.w	r3, r5, r8
 80059e8:	429a      	cmp	r2, r3
 80059ea:	dced      	bgt.n	80059c8 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0x3c>
 80059ec:	e032      	b.n	8005a54 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xc8>
        switch (command_) {
 80059ee:	3b01      	subs	r3, #1
 80059f0:	2b0b      	cmp	r3, #11
 80059f2:	d82a      	bhi.n	8005a4a <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xbe>
 80059f4:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0x70>)
 80059f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fa:	bf00      	nop
 80059fc:	080059bd 	.word	0x080059bd
 8005a00:	08005a4b 	.word	0x08005a4b
 8005a04:	08005a4b 	.word	0x08005a4b
 8005a08:	08005a4b 	.word	0x08005a4b
 8005a0c:	08005a4b 	.word	0x08005a4b
 8005a10:	08005a2d 	.word	0x08005a2d
 8005a14:	08005a4b 	.word	0x08005a4b
 8005a18:	08005a4b 	.word	0x08005a4b
 8005a1c:	080059bd 	.word	0x080059bd
 8005a20:	080059bd 	.word	0x080059bd
 8005a24:	08005a4b 	.word	0x08005a4b
 8005a28:	08005a2d 	.word	0x08005a2d
            error = field_byte.set_value(len, packet, last_filled_byte);
 8005a2c:	7d23      	ldrb	r3, [r4, #20]
 8005a2e:	4632      	mov	r2, r6
 8005a30:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005a34:	480a      	ldr	r0, [pc, #40]	; (8005a60 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xd4>)
 8005a36:	f7fd fcc9 	bl	80033cc <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            ++last_filled_byte;
 8005a3a:	6963      	ldr	r3, [r4, #20]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	6163      	str	r3, [r4, #20]
            if (error)
 8005a40:	2800      	cmp	r0, #0
 8005a42:	d0bb      	beq.n	80059bc <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0x30>
                return 4;
 8005a44:	f04f 0904 	mov.w	r9, #4
 8005a48:	e004      	b.n	8005a54 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xc8>
            return 6;
 8005a4a:	f04f 0906 	mov.w	r9, #6
 8005a4e:	e001      	b.n	8005a54 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xc8>
            return 8;
 8005a50:	f04f 0908 	mov.w	r9, #8
}
 8005a54:	4648      	mov	r0, r9
 8005a56:	b005      	add	sp, #20
 8005a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a5c:	0800bb78 	.word	0x0800bb78
 8005a60:	200020cc 	.word	0x200020cc

08005a64 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>:
uint8_t Packet_Connection::set_packet_data(LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 8005a64:	b570      	push	{r4, r5, r6, lr}
 8005a66:	4604      	mov	r4, r0
 8005a68:	460d      	mov	r5, r1
 8005a6a:	461e      	mov	r6, r3
    error = set_command(packet, *com);
 8005a6c:	7812      	ldrb	r2, [r2, #0]
 8005a6e:	f7ff ff23 	bl	80058b8 <_ZN17Packet_Connection11set_commandER11LoRa_packeth>
    if(error)
 8005a72:	4603      	mov	r3, r0
 8005a74:	b108      	cbz	r0, 8005a7a <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_+0x16>
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	bd70      	pop	{r4, r5, r6, pc}
    error = set_data(packet, data, *len);
 8005a7a:	9b04      	ldr	r3, [sp, #16]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	4632      	mov	r2, r6
 8005a80:	4629      	mov	r1, r5
 8005a82:	4620      	mov	r0, r4
 8005a84:	f7ff ff82 	bl	800598c <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh>
 8005a88:	4603      	mov	r3, r0
    return error;
 8005a8a:	e7f4      	b.n	8005a76 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_+0x12>

08005a8c <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_>:
uint8_t Packet_Connection::get_data(const LoRa_packet& packet, uint8_t *data, uint8_t *len) {
 8005a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a90:	b083      	sub	sp, #12
    if(len == nullptr)
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d071      	beq.n	8005b7a <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xee>
 8005a96:	4698      	mov	r8, r3
 8005a98:	4617      	mov	r7, r2
 8005a9a:	460e      	mov	r6, r1
 8005a9c:	4604      	mov	r4, r0
    error = get_size_by_data(&command_, nullptr, len_data);
 8005a9e:	f100 091c 	add.w	r9, r0, #28
 8005aa2:	f10d 0307 	add.w	r3, sp, #7
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	4649      	mov	r1, r9
 8005aaa:	f7ff ff39 	bl	8005920 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
 8005aae:	4605      	mov	r5, r0
    if(error == 2) {
 8005ab0:	2802      	cmp	r0, #2
 8005ab2:	d022      	beq.n	8005afa <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x6e>
    else if(error == 3) {
 8005ab4:	2803      	cmp	r0, #3
 8005ab6:	d047      	beq.n	8005b48 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xbc>
        *len = len_data;
 8005ab8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005abc:	f888 3000 	strb.w	r3, [r8]
    if(error)
 8005ac0:	2d00      	cmp	r5, #0
 8005ac2:	d15b      	bne.n	8005b7c <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xf0>
    if(len_data > 0) {
 8005ac4:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8005ac8:	2d00      	cmp	r5, #0
 8005aca:	d057      	beq.n	8005b7c <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xf0>
        if(data == nullptr)
 8005acc:	2f00      	cmp	r7, #0
 8005ace:	d059      	beq.n	8005b84 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xf8>
 8005ad0:	1e7d      	subs	r5, r7, #1
        for (int i = 0; i < len_data; ++i) {
 8005ad2:	2700      	movs	r7, #0
            data[i] = field_byte.get_value(packet, last_read_byte);
 8005ad4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8005b88 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xfc>
 8005ad8:	7e22      	ldrb	r2, [r4, #24]
 8005ada:	4631      	mov	r1, r6
 8005adc:	4640      	mov	r0, r8
 8005ade:	f7fd fc13 	bl	8003308 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005ae2:	f805 0f01 	strb.w	r0, [r5, #1]!
            ++last_read_byte;
 8005ae6:	69a3      	ldr	r3, [r4, #24]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	61a3      	str	r3, [r4, #24]
        for (int i = 0; i < len_data; ++i) {
 8005aec:	3701      	adds	r7, #1
 8005aee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005af2:	42bb      	cmp	r3, r7
 8005af4:	dcf0      	bgt.n	8005ad8 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x4c>
    return 0;
 8005af6:	2500      	movs	r5, #0
 8005af8:	e040      	b.n	8005b7c <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xf0>
        if(command_ == 0x01) {
 8005afa:	7f23      	ldrb	r3, [r4, #28]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d01a      	beq.n	8005b36 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xaa>
            *len = field_byte.get_value(packet, last_read_byte);
 8005b00:	7e22      	ldrb	r2, [r4, #24]
 8005b02:	4631      	mov	r1, r6
 8005b04:	4820      	ldr	r0, [pc, #128]	; (8005b88 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xfc>)
 8005b06:	f7fd fbff 	bl	8003308 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005b0a:	f888 0000 	strb.w	r0, [r8]
            ++last_read_byte;
 8005b0e:	69a3      	ldr	r3, [r4, #24]
 8005b10:	3301      	adds	r3, #1
 8005b12:	61a3      	str	r3, [r4, #24]
            error = get_size_by_data(&command_, len, len_data);
 8005b14:	f10d 0307 	add.w	r3, sp, #7
 8005b18:	4642      	mov	r2, r8
 8005b1a:	4649      	mov	r1, r9
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f7ff feff 	bl	8005920 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
 8005b22:	4605      	mov	r5, r0
            if (command_ == 0x06) {
 8005b24:	7f23      	ldrb	r3, [r4, #28]
 8005b26:	2b06      	cmp	r3, #6
                *len = len_data/2;
 8005b28:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005b2c:	bf08      	it	eq
 8005b2e:	085b      	lsreq	r3, r3, #1
                *len = len_data;
 8005b30:	f888 3000 	strb.w	r3, [r8]
 8005b34:	e7c4      	b.n	8005ac0 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x34>
            error = get_size_by_data(&command_, len, len_data);
 8005b36:	f10d 0307 	add.w	r3, sp, #7
 8005b3a:	4642      	mov	r2, r8
 8005b3c:	4649      	mov	r1, r9
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f7ff feee 	bl	8005920 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
 8005b44:	4605      	mov	r5, r0
 8005b46:	e7bb      	b.n	8005ac0 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x34>
        if (((packet.get_len() - last_read_byte) == 1) || ((packet.get_len() - last_read_byte) == 2)) {
 8005b48:	4630      	mov	r0, r6
 8005b4a:	f7fe fc93 	bl	8004474 <_ZNK11LoRa_packet7get_lenEv>
 8005b4e:	69a3      	ldr	r3, [r4, #24]
 8005b50:	1ac0      	subs	r0, r0, r3
 8005b52:	2801      	cmp	r0, #1
 8005b54:	d006      	beq.n	8005b64 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xd8>
 8005b56:	4630      	mov	r0, r6
 8005b58:	f7fe fc8c 	bl	8004474 <_ZNK11LoRa_packet7get_lenEv>
 8005b5c:	69a3      	ldr	r3, [r4, #24]
 8005b5e:	1ac0      	subs	r0, r0, r3
 8005b60:	2802      	cmp	r0, #2
 8005b62:	d10b      	bne.n	8005b7c <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xf0>
            len_data = packet.get_len() - last_read_byte;
 8005b64:	4630      	mov	r0, r6
 8005b66:	f7fe fc85 	bl	8004474 <_ZNK11LoRa_packet7get_lenEv>
 8005b6a:	69a3      	ldr	r3, [r4, #24]
 8005b6c:	1ac0      	subs	r0, r0, r3
 8005b6e:	b2c0      	uxtb	r0, r0
 8005b70:	f88d 0007 	strb.w	r0, [sp, #7]
            *len = len_data;
 8005b74:	f888 0000 	strb.w	r0, [r8]
 8005b78:	e7a4      	b.n	8005ac4 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x38>
        return 1;
 8005b7a:	2501      	movs	r5, #1
}
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	b003      	add	sp, #12
 8005b80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return 6;
 8005b84:	2506      	movs	r5, #6
 8005b86:	e7f9      	b.n	8005b7c <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xf0>
 8005b88:	200020cc 	.word	0x200020cc

08005b8c <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>:
uint8_t Packet_Connection::get_packet_data(const LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 8005b8c:	b570      	push	{r4, r5, r6, lr}
 8005b8e:	4604      	mov	r4, r0
 8005b90:	460d      	mov	r5, r1
 8005b92:	461e      	mov	r6, r3
    error = get_command(packet, com);
 8005b94:	f7ff fea8 	bl	80058e8 <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh>
    if(error)
 8005b98:	4603      	mov	r3, r0
 8005b9a:	b108      	cbz	r0, 8005ba0 <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_+0x14>
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	bd70      	pop	{r4, r5, r6, pc}
    error = get_data(packet, data, len);
 8005ba0:	9b04      	ldr	r3, [sp, #16]
 8005ba2:	4632      	mov	r2, r6
 8005ba4:	4629      	mov	r1, r5
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f7ff ff70 	bl	8005a8c <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_>
 8005bac:	4603      	mov	r3, r0
    return error;
 8005bae:	e7f5      	b.n	8005b9c <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_+0x10>

08005bb0 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh>:
uint8_t Packet_Connection::get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data) {
 8005bb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	4689      	mov	r9, r1
 8005bba:	4617      	mov	r7, r2
    error = get_command(packet, &command_);
 8005bbc:	f100 051c 	add.w	r5, r0, #28
 8005bc0:	462a      	mov	r2, r5
 8005bc2:	f7ff fe91 	bl	80058e8 <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh>
    if(error)
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	b118      	cbz	r0, 8005bd2 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x22>
}
 8005bca:	4630      	mov	r0, r6
 8005bcc:	b003      	add	sp, #12
 8005bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    error = get_size_by_data(&command_, nullptr, size_data);
 8005bd2:	463b      	mov	r3, r7
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	4620      	mov	r0, r4
 8005bda:	f7ff fea1 	bl	8005920 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
 8005bde:	4680      	mov	r8, r0
    if(error == 2) {
 8005be0:	2802      	cmp	r0, #2
 8005be2:	d004      	beq.n	8005bee <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x3e>
    if(error == 3) {
 8005be4:	f1b8 0f03 	cmp.w	r8, #3
 8005be8:	d012      	beq.n	8005c10 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x60>
 8005bea:	4646      	mov	r6, r8
 8005bec:	e7ed      	b.n	8005bca <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x1a>
        uint8_t len = field_byte.get_value(packet, last_read_byte);
 8005bee:	7e22      	ldrb	r2, [r4, #24]
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	4813      	ldr	r0, [pc, #76]	; (8005c40 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x90>)
 8005bf4:	f7fd fb88 	bl	8003308 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005bf8:	aa02      	add	r2, sp, #8
 8005bfa:	f802 0d01 	strb.w	r0, [r2, #-1]!
        error = get_size_by_data(&command_, &len, size_data);
 8005bfe:	463b      	mov	r3, r7
 8005c00:	4629      	mov	r1, r5
 8005c02:	4620      	mov	r0, r4
 8005c04:	f7ff fe8c 	bl	8005920 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
 8005c08:	4680      	mov	r8, r0
        last_read_byte = PACKET_HEADER_SIZE + 1;
 8005c0a:	230a      	movs	r3, #10
 8005c0c:	61a3      	str	r3, [r4, #24]
 8005c0e:	e7e9      	b.n	8005be4 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x34>
        if (((packet.get_len() - last_read_byte) == 1) || ((packet.get_len() - last_read_byte) == 2)) {
 8005c10:	4648      	mov	r0, r9
 8005c12:	f7fe fc2f 	bl	8004474 <_ZNK11LoRa_packet7get_lenEv>
 8005c16:	69a3      	ldr	r3, [r4, #24]
 8005c18:	1ac0      	subs	r0, r0, r3
 8005c1a:	2801      	cmp	r0, #1
 8005c1c:	d008      	beq.n	8005c30 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x80>
 8005c1e:	4648      	mov	r0, r9
 8005c20:	f7fe fc28 	bl	8004474 <_ZNK11LoRa_packet7get_lenEv>
 8005c24:	69a3      	ldr	r3, [r4, #24]
 8005c26:	1ac0      	subs	r0, r0, r3
 8005c28:	2802      	cmp	r0, #2
 8005c2a:	d001      	beq.n	8005c30 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x80>
 8005c2c:	4646      	mov	r6, r8
 8005c2e:	e7cc      	b.n	8005bca <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x1a>
            size_data = packet.get_len() - last_read_byte;
 8005c30:	4648      	mov	r0, r9
 8005c32:	f7fe fc1f 	bl	8004474 <_ZNK11LoRa_packet7get_lenEv>
 8005c36:	69a3      	ldr	r3, [r4, #24]
 8005c38:	1ac0      	subs	r0, r0, r3
 8005c3a:	7038      	strb	r0, [r7, #0]
 8005c3c:	e7c5      	b.n	8005bca <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x1a>
 8005c3e:	bf00      	nop
 8005c40:	200020cc 	.word	0x200020cc

08005c44 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm>:
uint8_t Packet_Sensor::set_packet_data(LoRa_packet& packet, uint8_t* amt, uint8_t* param, uint8_t* id, uint32_t* data) {
 8005c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	9101      	str	r1, [sp, #4]
 8005c4e:	4615      	mov	r5, r2
 8005c50:	461e      	mov	r6, r3
    last_filled_byte = PACKET_HEADER_SIZE;
 8005c52:	2309      	movs	r3, #9
 8005c54:	6143      	str	r3, [r0, #20]
    if (field_bit[0].get_value(&setting_) != 0) {
 8005c56:	f100 0710 	add.w	r7, r0, #16
 8005c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c5e:	4639      	mov	r1, r7
 8005c60:	4844      	ldr	r0, [pc, #272]	; (8005d74 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x130>)
 8005c62:	f7fd fa9e 	bl	80031a2 <_ZNK13Address_field9get_valueEPKhi>
 8005c66:	b960      	cbnz	r0, 8005c82 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x3e>
    for (int i = 0; i < count; ++i) {
 8005c68:	f04f 0b01 	mov.w	fp, #1
        if (!(param[i] < SENSOR_PARAM_DATA)) {
 8005c6c:	7833      	ldrb	r3, [r6, #0]
 8005c6e:	2b0c      	cmp	r3, #12
 8005c70:	d816      	bhi.n	8005ca0 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x5c>
    for (int i = 0; i < count; ++i) {
 8005c72:	2500      	movs	r5, #0
        if (field_bit[1].get_value(&setting_) != 1) {
 8005c74:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8005d74 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x130>
 8005c78:	f108 091c 	add.w	r9, r8, #28
        switch (sensor_param_data[param_]) {
 8005c7c:	f8df a104 	ldr.w	sl, [pc, #260]	; 8005d84 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x140>
 8005c80:	e03f      	b.n	8005d02 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xbe>
        field_byte.set_value(*amt, packet, last_filled_byte);
 8005c82:	7d23      	ldrb	r3, [r4, #20]
 8005c84:	9a01      	ldr	r2, [sp, #4]
 8005c86:	7829      	ldrb	r1, [r5, #0]
 8005c88:	483b      	ldr	r0, [pc, #236]	; (8005d78 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x134>)
 8005c8a:	f7fd fb9f 	bl	80033cc <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
        count = *amt;
 8005c8e:	782a      	ldrb	r2, [r5, #0]
        ++last_filled_byte;
 8005c90:	6963      	ldr	r3, [r4, #20]
 8005c92:	3301      	adds	r3, #1
 8005c94:	6163      	str	r3, [r4, #20]
    for (int i = 0; i < count; ++i) {
 8005c96:	4693      	mov	fp, r2
 8005c98:	2a00      	cmp	r2, #0
 8005c9a:	d1e7      	bne.n	8005c6c <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x28>
    return 0;
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	e04c      	b.n	8005d3a <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xf6>
            param_ = 0xFF;
 8005ca0:	23ff      	movs	r3, #255	; 0xff
 8005ca2:	7723      	strb	r3, [r4, #28]
            return 2;
 8005ca4:	2002      	movs	r0, #2
 8005ca6:	e048      	b.n	8005d3a <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xf6>
            error = field_byte.set_value(param_, packet, last_filled_byte);
 8005ca8:	7d23      	ldrb	r3, [r4, #20]
 8005caa:	9a01      	ldr	r2, [sp, #4]
 8005cac:	7f21      	ldrb	r1, [r4, #28]
 8005cae:	4832      	ldr	r0, [pc, #200]	; (8005d78 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x134>)
 8005cb0:	f7fd fb8c 	bl	80033cc <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            ++last_filled_byte;
 8005cb4:	6963      	ldr	r3, [r4, #20]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	6163      	str	r3, [r4, #20]
        if (error)
 8005cba:	b358      	cbz	r0, 8005d14 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xd0>
            return 3;
 8005cbc:	2003      	movs	r0, #3
 8005cbe:	e03c      	b.n	8005d3a <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xf6>
            error = field_byte.set_value(id[i], packet, last_filled_byte);
 8005cc0:	7d23      	ldrb	r3, [r4, #20]
 8005cc2:	9a01      	ldr	r2, [sp, #4]
 8005cc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005cc6:	5d49      	ldrb	r1, [r1, r5]
 8005cc8:	482b      	ldr	r0, [pc, #172]	; (8005d78 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x134>)
 8005cca:	f7fd fb7f 	bl	80033cc <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            ++last_filled_byte;
 8005cce:	6963      	ldr	r3, [r4, #20]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	6163      	str	r3, [r4, #20]
        if (error)
 8005cd4:	b338      	cbz	r0, 8005d26 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xe2>
            return 4;
 8005cd6:	2004      	movs	r0, #4
 8005cd8:	e02f      	b.n	8005d3a <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xf6>
            error = field_byte.set_value(*(data + i), packet, last_filled_byte);
 8005cda:	7d23      	ldrb	r3, [r4, #20]
 8005cdc:	9a01      	ldr	r2, [sp, #4]
 8005cde:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ce0:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8005ce4:	4824      	ldr	r0, [pc, #144]	; (8005d78 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x134>)
 8005ce6:	f7fd fb71 	bl	80033cc <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            last_filled_byte += 1;
 8005cea:	6963      	ldr	r3, [r4, #20]
 8005cec:	3301      	adds	r3, #1
 8005cee:	6163      	str	r3, [r4, #20]
        if (error)
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	d13d      	bne.n	8005d70 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x12c>
    for (int i = 0; i < count; ++i) {
 8005cf4:	3501      	adds	r5, #1
 8005cf6:	455d      	cmp	r5, fp
 8005cf8:	da1f      	bge.n	8005d3a <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xf6>
        if (!(param[i] < SENSOR_PARAM_DATA)) {
 8005cfa:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8005cfe:	2b0c      	cmp	r3, #12
 8005d00:	d8ce      	bhi.n	8005ca0 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x5c>
        param_ = param[i];
 8005d02:	7723      	strb	r3, [r4, #28]
        if (field_bit[1].get_value(&setting_) != 1) {
 8005d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d08:	4639      	mov	r1, r7
 8005d0a:	4648      	mov	r0, r9
 8005d0c:	f7fd fa49 	bl	80031a2 <_ZNK13Address_field9get_valueEPKhi>
 8005d10:	2801      	cmp	r0, #1
 8005d12:	d1c9      	bne.n	8005ca8 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x64>
        if (field_bit[2].get_value(&setting_) != 0) {
 8005d14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d18:	4639      	mov	r1, r7
 8005d1a:	f108 0038 	add.w	r0, r8, #56	; 0x38
 8005d1e:	f7fd fa40 	bl	80031a2 <_ZNK13Address_field9get_valueEPKhi>
 8005d22:	2800      	cmp	r0, #0
 8005d24:	d1cc      	bne.n	8005cc0 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x7c>
        switch (sensor_param_data[param_]) {
 8005d26:	7f23      	ldrb	r3, [r4, #28]
 8005d28:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d007      	beq.n	8005d40 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xfc>
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d011      	beq.n	8005d58 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x114>
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d0d0      	beq.n	8005cda <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x96>
            return 5;
 8005d38:	2005      	movs	r0, #5
}
 8005d3a:	b003      	add	sp, #12
 8005d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            error = field_PWM.set_value(*(data + i), packet, last_filled_byte);
 8005d40:	7d23      	ldrb	r3, [r4, #20]
 8005d42:	9a01      	ldr	r2, [sp, #4]
 8005d44:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d46:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8005d4a:	480c      	ldr	r0, [pc, #48]	; (8005d7c <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x138>)
 8005d4c:	f7fd fb3e 	bl	80033cc <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            last_filled_byte += 2;
 8005d50:	6963      	ldr	r3, [r4, #20]
 8005d52:	3302      	adds	r3, #2
 8005d54:	6163      	str	r3, [r4, #20]
            break;
 8005d56:	e7cb      	b.n	8005cf0 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xac>
            error = field_float.set_value(*(data + i), packet, last_filled_byte);
 8005d58:	7d23      	ldrb	r3, [r4, #20]
 8005d5a:	9a01      	ldr	r2, [sp, #4]
 8005d5c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d5e:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8005d62:	4807      	ldr	r0, [pc, #28]	; (8005d80 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x13c>)
 8005d64:	f7fd fb32 	bl	80033cc <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            last_filled_byte += 4;
 8005d68:	6963      	ldr	r3, [r4, #20]
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	6163      	str	r3, [r4, #20]
            break;
 8005d6e:	e7bf      	b.n	8005cf0 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xac>
            return 6;
 8005d70:	2006      	movs	r0, #6
 8005d72:	e7e2      	b.n	8005d3a <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xf6>
 8005d74:	20002298 	.word	0x20002298
 8005d78:	200020cc 	.word	0x200020cc
 8005d7c:	2000227c 	.word	0x2000227c
 8005d80:	20002104 	.word	0x20002104
 8005d84:	0800bb88 	.word	0x0800bb88

08005d88 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_>:



uint8_t Packet_System::set_packet_data(LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 8005d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	4688      	mov	r8, r1
 8005d90:	461f      	mov	r7, r3
    bool error = false;
    last_filled_byte = PACKET_HEADER_SIZE;
 8005d92:	2309      	movs	r3, #9
 8005d94:	6143      	str	r3, [r0, #20]


    // комманда
    if (!(*com < SYSTEM_COMMAND_DATA)) {
 8005d96:	7811      	ldrb	r1, [r2, #0]
 8005d98:	2906      	cmp	r1, #6
 8005d9a:	d824      	bhi.n	8005de6 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x5e>
        command_ = 0xFF;
        return 2;
    }
    command_ = *com;
 8005d9c:	7701      	strb	r1, [r0, #28]
    error = field_byte.set_value(command_, packet, last_filled_byte);
 8005d9e:	2309      	movs	r3, #9
 8005da0:	4642      	mov	r2, r8
 8005da2:	482f      	ldr	r0, [pc, #188]	; (8005e60 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xd8>)
 8005da4:	f7fd fb12 	bl	80033cc <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
    ++last_filled_byte;
 8005da8:	6963      	ldr	r3, [r4, #20]
 8005daa:	3301      	adds	r3, #1
 8005dac:	6163      	str	r3, [r4, #20]
    if (error)
 8005dae:	2800      	cmp	r0, #0
 8005db0:	d148      	bne.n	8005e44 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xbc>
        return 3;

    // данные
    int _len;
    if (system_com_data[command_] != 0xFF) {
 8005db2:	7f23      	ldrb	r3, [r4, #28]
 8005db4:	4a2b      	ldr	r2, [pc, #172]	; (8005e64 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xdc>)
 8005db6:	5cd6      	ldrb	r6, [r2, r3]
 8005db8:	2eff      	cmp	r6, #255	; 0xff
 8005dba:	d019      	beq.n	8005df0 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x68>
        default:
            return 7;
        }
    }

    for (int i = 0; i < _len; ++i) {
 8005dbc:	2e00      	cmp	r6, #0
 8005dbe:	d04b      	beq.n	8005e58 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xd0>
 8005dc0:	1e7d      	subs	r5, r7, #1
 8005dc2:	443e      	add	r6, r7
 8005dc4:	3e01      	subs	r6, #1
        error = field_byte.set_value(data[i], packet, last_filled_byte);
 8005dc6:	4f26      	ldr	r7, [pc, #152]	; (8005e60 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xd8>)
 8005dc8:	7d23      	ldrb	r3, [r4, #20]
 8005dca:	4642      	mov	r2, r8
 8005dcc:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005dd0:	4638      	mov	r0, r7
 8005dd2:	f7fd fafb 	bl	80033cc <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
        ++last_filled_byte;
 8005dd6:	6962      	ldr	r2, [r4, #20]
 8005dd8:	3201      	adds	r2, #1
 8005dda:	6162      	str	r2, [r4, #20]
        if (error)
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d13d      	bne.n	8005e5c <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xd4>
    for (int i = 0; i < _len; ++i) {
 8005de0:	42b5      	cmp	r5, r6
 8005de2:	d1f1      	bne.n	8005dc8 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x40>
 8005de4:	e002      	b.n	8005dec <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x64>
        command_ = 0xFF;
 8005de6:	23ff      	movs	r3, #255	; 0xff
 8005de8:	7703      	strb	r3, [r0, #28]
        return 2;
 8005dea:	2002      	movs	r0, #2
            return 8;
    }

    return 0;
}
 8005dec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        switch (command_)
 8005df0:	bb53      	cbnz	r3, 8005e48 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xc0>
 8005df2:	1e7d      	subs	r5, r7, #1
 8005df4:	f107 090b 	add.w	r9, r7, #11
                error = field_byte.set_value(data[i], packet, last_filled_byte);
 8005df8:	4e19      	ldr	r6, [pc, #100]	; (8005e60 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xd8>)
 8005dfa:	7d23      	ldrb	r3, [r4, #20]
 8005dfc:	4642      	mov	r2, r8
 8005dfe:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005e02:	4630      	mov	r0, r6
 8005e04:	f7fd fae2 	bl	80033cc <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
                ++last_filled_byte;
 8005e08:	6963      	ldr	r3, [r4, #20]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	6163      	str	r3, [r4, #20]
                if (error)
 8005e0e:	b9e8      	cbnz	r0, 8005e4c <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xc4>
            for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i) {
 8005e10:	454d      	cmp	r5, r9
 8005e12:	d1f2      	bne.n	8005dfa <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x72>
            _len = *len;
 8005e14:	9a08      	ldr	r2, [sp, #32]
 8005e16:	7816      	ldrb	r6, [r2, #0]
            error = field_byte.set_value(_len, packet, last_filled_byte);
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	4642      	mov	r2, r8
 8005e1c:	4631      	mov	r1, r6
 8005e1e:	4810      	ldr	r0, [pc, #64]	; (8005e60 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xd8>)
 8005e20:	f7fd fad4 	bl	80033cc <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            ++last_filled_byte;
 8005e24:	6963      	ldr	r3, [r4, #20]
 8005e26:	3301      	adds	r3, #1
 8005e28:	6163      	str	r3, [r4, #20]
            if (error)
 8005e2a:	b988      	cbnz	r0, 8005e50 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xc8>
            error = field_byte.set_value(data[0], packet, last_filled_byte);
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	4642      	mov	r2, r8
 8005e30:	7b79      	ldrb	r1, [r7, #13]
 8005e32:	480b      	ldr	r0, [pc, #44]	; (8005e60 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xd8>)
 8005e34:	f7fd faca 	bl	80033cc <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            ++last_filled_byte;
 8005e38:	6963      	ldr	r3, [r4, #20]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	6163      	str	r3, [r4, #20]
            if (error)
 8005e3e:	b948      	cbnz	r0, 8005e54 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xcc>
            data = data + 1;
 8005e40:	370e      	adds	r7, #14
            break;
 8005e42:	e7bb      	b.n	8005dbc <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x34>
        return 3;
 8005e44:	2003      	movs	r0, #3
 8005e46:	e7d1      	b.n	8005dec <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x64>
            return 7;
 8005e48:	2007      	movs	r0, #7
 8005e4a:	e7cf      	b.n	8005dec <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x64>
                    return 4;
 8005e4c:	2004      	movs	r0, #4
 8005e4e:	e7cd      	b.n	8005dec <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x64>
                return 5;
 8005e50:	2005      	movs	r0, #5
 8005e52:	e7cb      	b.n	8005dec <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x64>
                return 6;
 8005e54:	2006      	movs	r0, #6
 8005e56:	e7c9      	b.n	8005dec <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x64>
    return 0;
 8005e58:	2000      	movs	r0, #0
 8005e5a:	e7c7      	b.n	8005dec <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x64>
            return 8;
 8005e5c:	2008      	movs	r0, #8
 8005e5e:	e7c5      	b.n	8005dec <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x64>
 8005e60:	200020cc 	.word	0x200020cc
 8005e64:	0800bb70 	.word	0x0800bb70

08005e68 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_>:

uint8_t Packet_System::get_packet_data(const LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 8005e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e6c:	4604      	mov	r4, r0
 8005e6e:	460f      	mov	r7, r1
 8005e70:	4615      	mov	r5, r2
 8005e72:	461e      	mov	r6, r3
    last_read_byte = PACKET_HEADER_SIZE;
 8005e74:	2209      	movs	r2, #9
 8005e76:	6182      	str	r2, [r0, #24]

    // комманда
    command_ = field_byte.get_value(packet, last_read_byte);
 8005e78:	482e      	ldr	r0, [pc, #184]	; (8005f34 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xcc>)
 8005e7a:	f7fd fa45 	bl	8003308 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005e7e:	b2c0      	uxtb	r0, r0
 8005e80:	7720      	strb	r0, [r4, #28]
    ++last_read_byte;
 8005e82:	69a3      	ldr	r3, [r4, #24]
 8005e84:	3301      	adds	r3, #1
 8005e86:	61a3      	str	r3, [r4, #24]
    if (!(command_ < SYSTEM_COMMAND_DATA)) {
 8005e88:	2806      	cmp	r0, #6
 8005e8a:	d81f      	bhi.n	8005ecc <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x64>
        command_ = 0xFF;
        return 2;
    }
    *com = command_;
 8005e8c:	7028      	strb	r0, [r5, #0]


    // данные
    int _len;
    if (system_com_data[command_] != 0xFF) {
 8005e8e:	7f22      	ldrb	r2, [r4, #28]
 8005e90:	4b29      	ldr	r3, [pc, #164]	; (8005f38 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xd0>)
 8005e92:	5c9b      	ldrb	r3, [r3, r2]
 8005e94:	2bff      	cmp	r3, #255	; 0xff
 8005e96:	d01d      	beq.n	8005ed4 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x6c>
        _len = system_com_data[command_];
 8005e98:	4698      	mov	r8, r3
        *len = _len;
 8005e9a:	9a08      	ldr	r2, [sp, #32]
 8005e9c:	7013      	strb	r3, [r2, #0]
        default:
            return 4;
        }
    }

    for (int i = 0; i < _len; ++i) {
 8005e9e:	f1b8 0f00 	cmp.w	r8, #0
 8005ea2:	d045      	beq.n	8005f30 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xc8>
 8005ea4:	1e75      	subs	r5, r6, #1
 8005ea6:	4446      	add	r6, r8
 8005ea8:	3e01      	subs	r6, #1
        data[i] = field_byte.get_value(packet, last_read_byte);
 8005eaa:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8005f34 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xcc>
 8005eae:	7e22      	ldrb	r2, [r4, #24]
 8005eb0:	4639      	mov	r1, r7
 8005eb2:	4640      	mov	r0, r8
 8005eb4:	f7fd fa28 	bl	8003308 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005eb8:	f805 0f01 	strb.w	r0, [r5, #1]!
        ++last_read_byte;
 8005ebc:	69a2      	ldr	r2, [r4, #24]
 8005ebe:	3201      	adds	r2, #1
 8005ec0:	61a2      	str	r2, [r4, #24]
    for (int i = 0; i < _len; ++i) {
 8005ec2:	42b5      	cmp	r5, r6
 8005ec4:	d1f3      	bne.n	8005eae <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x46>
    }
    return 0;
 8005ec6:	2000      	movs	r0, #0
}
 8005ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        command_ = 0xFF;
 8005ecc:	23ff      	movs	r3, #255	; 0xff
 8005ece:	7723      	strb	r3, [r4, #28]
        return 2;
 8005ed0:	2002      	movs	r0, #2
 8005ed2:	e7f9      	b.n	8005ec8 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x60>
        switch (command_)
 8005ed4:	bb52      	cbnz	r2, 8005f2c <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xc4>
 8005ed6:	1e75      	subs	r5, r6, #1
 8005ed8:	f106 090b 	add.w	r9, r6, #11
                data[i] = field_byte.get_value(packet, last_read_byte);
 8005edc:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8005f34 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xcc>
 8005ee0:	7e22      	ldrb	r2, [r4, #24]
 8005ee2:	4639      	mov	r1, r7
 8005ee4:	4640      	mov	r0, r8
 8005ee6:	f7fd fa0f 	bl	8003308 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005eea:	f805 0f01 	strb.w	r0, [r5, #1]!
                ++last_read_byte;
 8005eee:	69a2      	ldr	r2, [r4, #24]
 8005ef0:	3201      	adds	r2, #1
 8005ef2:	61a2      	str	r2, [r4, #24]
            for (int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i) {
 8005ef4:	454d      	cmp	r5, r9
 8005ef6:	d1f3      	bne.n	8005ee0 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x78>
            data[0] = field_byte.get_value(packet, last_read_byte);
 8005ef8:	4d0e      	ldr	r5, [pc, #56]	; (8005f34 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xcc>)
 8005efa:	b2d2      	uxtb	r2, r2
 8005efc:	4639      	mov	r1, r7
 8005efe:	4628      	mov	r0, r5
 8005f00:	f7fd fa02 	bl	8003308 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005f04:	7330      	strb	r0, [r6, #12]
            ++last_read_byte;
 8005f06:	69a3      	ldr	r3, [r4, #24]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	61a3      	str	r3, [r4, #24]
            *len = _len = data[0];
 8005f0c:	f896 800c 	ldrb.w	r8, [r6, #12]
 8005f10:	9b08      	ldr	r3, [sp, #32]
 8005f12:	f883 8000 	strb.w	r8, [r3]
            data[0] = field_byte.get_value(packet, last_read_byte);
 8005f16:	7e22      	ldrb	r2, [r4, #24]
 8005f18:	4639      	mov	r1, r7
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	f7fd f9f4 	bl	8003308 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005f20:	7370      	strb	r0, [r6, #13]
            ++last_read_byte;
 8005f22:	69a3      	ldr	r3, [r4, #24]
 8005f24:	3301      	adds	r3, #1
 8005f26:	61a3      	str	r3, [r4, #24]
            data = data + 1;
 8005f28:	360e      	adds	r6, #14
            break;
 8005f2a:	e7b8      	b.n	8005e9e <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x36>
            return 4;
 8005f2c:	2004      	movs	r0, #4
 8005f2e:	e7cb      	b.n	8005ec8 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x60>
    return 0;
 8005f30:	2000      	movs	r0, #0
 8005f32:	e7c9      	b.n	8005ec8 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x60>
 8005f34:	200020cc 	.word	0x200020cc
 8005f38:	0800bb70 	.word	0x0800bb70

08005f3c <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh>:
    }
    size_data += _len;
    last_read_byte += _len;
    return 0;
}
uint8_t Packet_System::get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data) {
 8005f3c:	b570      	push	{r4, r5, r6, lr}
 8005f3e:	4604      	mov	r4, r0
 8005f40:	460e      	mov	r6, r1
 8005f42:	4615      	mov	r5, r2
    last_read_byte = PACKET_HEADER_SIZE;
 8005f44:	2209      	movs	r2, #9
 8005f46:	6182      	str	r2, [r0, #24]
    // комманда
    command_ = field_byte.get_value(packet, last_read_byte);
 8005f48:	4819      	ldr	r0, [pc, #100]	; (8005fb0 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x74>)
 8005f4a:	f7fd f9dd 	bl	8003308 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005f4e:	b2c3      	uxtb	r3, r0
 8005f50:	7723      	strb	r3, [r4, #28]
    ++last_read_byte;
 8005f52:	69a2      	ldr	r2, [r4, #24]
 8005f54:	1c51      	adds	r1, r2, #1
 8005f56:	61a1      	str	r1, [r4, #24]
    if (!(command_ < SYSTEM_COMMAND_DATA)) {
 8005f58:	2b06      	cmp	r3, #6
 8005f5a:	d80b      	bhi.n	8005f74 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x38>
        command_ = 0xFF;
        return 2;
    }
    // данные
    if (system_com_data[command_] != 0xFF) {
 8005f5c:	b2c0      	uxtb	r0, r0
 8005f5e:	4915      	ldr	r1, [pc, #84]	; (8005fb4 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x78>)
 8005f60:	5c09      	ldrb	r1, [r1, r0]
 8005f62:	29ff      	cmp	r1, #255	; 0xff
 8005f64:	d00a      	beq.n	8005f7c <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x40>
        size_data = system_com_data[command_];
 8005f66:	7029      	strb	r1, [r5, #0]
            break;
        default:
            return 4;
        }
    }
    last_read_byte += size_data;
 8005f68:	782a      	ldrb	r2, [r5, #0]
 8005f6a:	69a3      	ldr	r3, [r4, #24]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	61a3      	str	r3, [r4, #24]
    return 0;
 8005f70:	2000      	movs	r0, #0
}
 8005f72:	bd70      	pop	{r4, r5, r6, pc}
        command_ = 0xFF;
 8005f74:	23ff      	movs	r3, #255	; 0xff
 8005f76:	7723      	strb	r3, [r4, #28]
        return 2;
 8005f78:	2002      	movs	r0, #2
 8005f7a:	e7fa      	b.n	8005f72 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x36>
        switch (command_)
 8005f7c:	b9ab      	cbnz	r3, 8005faa <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x6e>
            last_read_byte += AMT_BYTES_SYSTEM_ID; // смещение на ID
 8005f7e:	320d      	adds	r2, #13
 8005f80:	61a2      	str	r2, [r4, #24]
            size_data = AMT_BYTES_SYSTEM_ID; // смещение на ID
 8005f82:	230c      	movs	r3, #12
 8005f84:	702b      	strb	r3, [r5, #0]
            size_data += field_byte.get_value(packet, last_read_byte);
 8005f86:	7e22      	ldrb	r2, [r4, #24]
 8005f88:	4631      	mov	r1, r6
 8005f8a:	4809      	ldr	r0, [pc, #36]	; (8005fb0 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x74>)
 8005f8c:	f7fd f9bc 	bl	8003308 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005f90:	782b      	ldrb	r3, [r5, #0]
 8005f92:	4418      	add	r0, r3
 8005f94:	7028      	strb	r0, [r5, #0]
            last_read_byte += 2; // смещение на length и type
 8005f96:	69a3      	ldr	r3, [r4, #24]
 8005f98:	3302      	adds	r3, #2
 8005f9a:	61a3      	str	r3, [r4, #24]
            size_data += 2; // смещение на length и type
 8005f9c:	782b      	ldrb	r3, [r5, #0]
 8005f9e:	3302      	adds	r3, #2
 8005fa0:	702b      	strb	r3, [r5, #0]
            ++last_read_byte;
 8005fa2:	69a3      	ldr	r3, [r4, #24]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	61a3      	str	r3, [r4, #24]
            break;
 8005fa8:	e7de      	b.n	8005f68 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x2c>
            return 4;
 8005faa:	2004      	movs	r0, #4
 8005fac:	e7e1      	b.n	8005f72 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x36>
 8005fae:	bf00      	nop
 8005fb0:	200020cc 	.word	0x200020cc
 8005fb4:	0800bb70 	.word	0x0800bb70

08005fb8 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH>:
}
 8005fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fbc:	b087      	sub	sp, #28
const uint16_t LORA_ADDRESS_BRANCH = 24 - LORA_ADDRESS_GROUP;

const Register Hendler[11] = {Register(0, 8, 0), Register(1, 1, 7), Register(1, 7, 0), Register(2, 8, 0),
                              Register(3, 8, 0), Register(4, 1, 7), Register(4, 7, 0), Register(5, 8, 0),
                              Register(6, 8, 0),
                              Register(7, 8, 0), Register(8, 8, 0)};
 8005fbe:	4ed2      	ldr	r6, [pc, #840]	; (8006308 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x350>)
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	2208      	movs	r2, #8
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	f7fd f844 	bl	8003054 <_ZN8RegisterC1Ethh>
 8005fcc:	2307      	movs	r3, #7
 8005fce:	2201      	movs	r2, #1
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	f106 0008 	add.w	r0, r6, #8
 8005fd6:	f7fd f83d 	bl	8003054 <_ZN8RegisterC1Ethh>
 8005fda:	f106 0b10 	add.w	fp, r6, #16
 8005fde:	2300      	movs	r3, #0
 8005fe0:	2207      	movs	r2, #7
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	4658      	mov	r0, fp
 8005fe6:	f7fd f835 	bl	8003054 <_ZN8RegisterC1Ethh>
 8005fea:	2300      	movs	r3, #0
 8005fec:	2208      	movs	r2, #8
 8005fee:	2102      	movs	r1, #2
 8005ff0:	f106 0018 	add.w	r0, r6, #24
 8005ff4:	f7fd f82e 	bl	8003054 <_ZN8RegisterC1Ethh>
 8005ff8:	f106 0a20 	add.w	sl, r6, #32
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	2208      	movs	r2, #8
 8006000:	2103      	movs	r1, #3
 8006002:	4650      	mov	r0, sl
 8006004:	f7fd f826 	bl	8003054 <_ZN8RegisterC1Ethh>
 8006008:	2307      	movs	r3, #7
 800600a:	2201      	movs	r2, #1
 800600c:	2104      	movs	r1, #4
 800600e:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8006012:	f7fd f81f 	bl	8003054 <_ZN8RegisterC1Ethh>
 8006016:	2300      	movs	r3, #0
 8006018:	2207      	movs	r2, #7
 800601a:	2104      	movs	r1, #4
 800601c:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8006020:	f7fd f818 	bl	8003054 <_ZN8RegisterC1Ethh>
 8006024:	2300      	movs	r3, #0
 8006026:	2208      	movs	r2, #8
 8006028:	2105      	movs	r1, #5
 800602a:	f106 0038 	add.w	r0, r6, #56	; 0x38
 800602e:	f7fd f811 	bl	8003054 <_ZN8RegisterC1Ethh>
 8006032:	f106 0840 	add.w	r8, r6, #64	; 0x40
 8006036:	2300      	movs	r3, #0
 8006038:	2208      	movs	r2, #8
 800603a:	2106      	movs	r1, #6
 800603c:	4640      	mov	r0, r8
 800603e:	f7fd f809 	bl	8003054 <_ZN8RegisterC1Ethh>
 8006042:	f106 0748 	add.w	r7, r6, #72	; 0x48
 8006046:	2300      	movs	r3, #0
 8006048:	2208      	movs	r2, #8
 800604a:	2107      	movs	r1, #7
 800604c:	4638      	mov	r0, r7
 800604e:	f7fd f801 	bl	8003054 <_ZN8RegisterC1Ethh>
 8006052:	2300      	movs	r3, #0
 8006054:	2208      	movs	r2, #8
 8006056:	4611      	mov	r1, r2
 8006058:	f106 0050 	add.w	r0, r6, #80	; 0x50
 800605c:	f7fc fffa 	bl	8003054 <_ZN8RegisterC1Ethh>

const Address_field field_dest_adr_group(&Hendler[0], 2, true),  // Destination Address group (адресс группы устройства назначения)
 8006060:	2400      	movs	r4, #0
 8006062:	9404      	str	r4, [sp, #16]
 8006064:	9403      	str	r4, [sp, #12]
 8006066:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800606a:	9502      	str	r5, [sp, #8]
 800606c:	9401      	str	r4, [sp, #4]
 800606e:	f04f 0977 	mov.w	r9, #119	; 0x77
 8006072:	f8cd 9000 	str.w	r9, [sp]
 8006076:	2301      	movs	r3, #1
 8006078:	2202      	movs	r2, #2
 800607a:	4631      	mov	r1, r6
 800607c:	48a3      	ldr	r0, [pc, #652]	; (800630c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x354>)
 800607e:	f7fd f87d 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_dest_adr_branch(&Hendler[2], 2, true), // Destination Address branch (адресс ветви устройства назначения)
 8006082:	9404      	str	r4, [sp, #16]
 8006084:	9403      	str	r4, [sp, #12]
 8006086:	9502      	str	r5, [sp, #8]
 8006088:	9401      	str	r4, [sp, #4]
 800608a:	f8cd 9000 	str.w	r9, [sp]
 800608e:	2301      	movs	r3, #1
 8006090:	2202      	movs	r2, #2
 8006092:	4659      	mov	r1, fp
 8006094:	489e      	ldr	r0, [pc, #632]	; (8006310 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x358>)
 8006096:	f7fd f871 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_sour_adr_group(&Hendler[4], 2, true),  // Source Address group (адресс группы отправляющего устройства)
 800609a:	9404      	str	r4, [sp, #16]
 800609c:	9403      	str	r4, [sp, #12]
 800609e:	9502      	str	r5, [sp, #8]
 80060a0:	9401      	str	r4, [sp, #4]
 80060a2:	f8cd 9000 	str.w	r9, [sp]
 80060a6:	2301      	movs	r3, #1
 80060a8:	2202      	movs	r2, #2
 80060aa:	4651      	mov	r1, sl
 80060ac:	4899      	ldr	r0, [pc, #612]	; (8006314 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x35c>)
 80060ae:	f7fd f865 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_sour_adr_branch(&Hendler[6], 2, true), // Source Address branch (адресс ветви отправляющего устройства)
 80060b2:	9404      	str	r4, [sp, #16]
 80060b4:	9403      	str	r4, [sp, #12]
 80060b6:	9502      	str	r5, [sp, #8]
 80060b8:	9401      	str	r4, [sp, #4]
 80060ba:	f8cd 9000 	str.w	r9, [sp]
 80060be:	2301      	movs	r3, #1
 80060c0:	2202      	movs	r2, #2
 80060c2:	f106 0130 	add.w	r1, r6, #48	; 0x30
 80060c6:	4894      	ldr	r0, [pc, #592]	; (8006318 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x360>)
 80060c8:	f7fd f858 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_type(&Hendler[8], 1, true),   // Packet Type (тип пакетп)
 80060cc:	9404      	str	r4, [sp, #16]
 80060ce:	9403      	str	r4, [sp, #12]
 80060d0:	9502      	str	r5, [sp, #8]
 80060d2:	9401      	str	r4, [sp, #4]
 80060d4:	f8cd 9000 	str.w	r9, [sp]
 80060d8:	2301      	movs	r3, #1
 80060da:	461a      	mov	r2, r3
 80060dc:	4641      	mov	r1, r8
 80060de:	488f      	ldr	r0, [pc, #572]	; (800631c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x364>)
 80060e0:	f7fd f84c 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_number(&Hendler[9], 2, true); // Packet Number (номер пакета)
 80060e4:	9404      	str	r4, [sp, #16]
 80060e6:	9403      	str	r4, [sp, #12]
 80060e8:	9502      	str	r5, [sp, #8]
 80060ea:	9401      	str	r4, [sp, #4]
 80060ec:	f8cd 9000 	str.w	r9, [sp]
 80060f0:	2301      	movs	r3, #1
 80060f2:	2202      	movs	r2, #2
 80060f4:	4639      	mov	r1, r7
 80060f6:	488a      	ldr	r0, [pc, #552]	; (8006320 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x368>)
 80060f8:	f7fd f840 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                                               &field_sour_adr_group, &field_sour_adr_branch,
                                               &field_type, &field_number};


// Типы данных
const Register register_PWM[2]   = {Register(0, 4, 0), Register(1, 8, 0)},
 80060fc:	f8df 824c 	ldr.w	r8, [pc, #588]	; 800634c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x394>
 8006100:	4623      	mov	r3, r4
 8006102:	2204      	movs	r2, #4
 8006104:	4621      	mov	r1, r4
 8006106:	4640      	mov	r0, r8
 8006108:	f7fc ffa4 	bl	8003054 <_ZN8RegisterC1Ethh>
 800610c:	4623      	mov	r3, r4
 800610e:	2208      	movs	r2, #8
 8006110:	2101      	movs	r1, #1
 8006112:	eb08 0002 	add.w	r0, r8, r2
 8006116:	f7fc ff9d 	bl	8003054 <_ZN8RegisterC1Ethh>
               register_byte[1]  = {Register(0, 8, 0)},
 800611a:	4623      	mov	r3, r4
 800611c:	2208      	movs	r2, #8
 800611e:	4621      	mov	r1, r4
 8006120:	4880      	ldr	r0, [pc, #512]	; (8006324 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x36c>)
 8006122:	f7fc ff97 	bl	8003054 <_ZN8RegisterC1Ethh>
               register_float[4] = {Register(0, 8, 0), Register(1, 8, 0), Register(2, 8, 0), Register(3, 8, 0)},
 8006126:	4f80      	ldr	r7, [pc, #512]	; (8006328 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x370>)
 8006128:	4623      	mov	r3, r4
 800612a:	2208      	movs	r2, #8
 800612c:	4621      	mov	r1, r4
 800612e:	4638      	mov	r0, r7
 8006130:	f7fc ff90 	bl	8003054 <_ZN8RegisterC1Ethh>
 8006134:	4623      	mov	r3, r4
 8006136:	2208      	movs	r2, #8
 8006138:	2101      	movs	r1, #1
 800613a:	18b8      	adds	r0, r7, r2
 800613c:	f7fc ff8a 	bl	8003054 <_ZN8RegisterC1Ethh>
 8006140:	4623      	mov	r3, r4
 8006142:	2208      	movs	r2, #8
 8006144:	2102      	movs	r1, #2
 8006146:	f107 0010 	add.w	r0, r7, #16
 800614a:	f7fc ff83 	bl	8003054 <_ZN8RegisterC1Ethh>
 800614e:	4623      	mov	r3, r4
 8006150:	2208      	movs	r2, #8
 8006152:	2103      	movs	r1, #3
 8006154:	f107 0018 	add.w	r0, r7, #24
 8006158:	f7fc ff7c 	bl	8003054 <_ZN8RegisterC1Ethh>
               register_bit[8]   = {Register(0, 1, 0), Register(0, 1, 1), Register(0, 1, 2), Register(0, 1, 3),
                                    Register(0, 1, 4), Register(0, 1, 5), Register(0, 1, 6), Register(0, 1, 7)};
 800615c:	4e73      	ldr	r6, [pc, #460]	; (800632c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x374>)
 800615e:	4623      	mov	r3, r4
 8006160:	2201      	movs	r2, #1
 8006162:	4621      	mov	r1, r4
 8006164:	4630      	mov	r0, r6
 8006166:	f7fc ff75 	bl	8003054 <_ZN8RegisterC1Ethh>
 800616a:	2301      	movs	r3, #1
 800616c:	461a      	mov	r2, r3
 800616e:	4621      	mov	r1, r4
 8006170:	f106 0008 	add.w	r0, r6, #8
 8006174:	f7fc ff6e 	bl	8003054 <_ZN8RegisterC1Ethh>
 8006178:	2302      	movs	r3, #2
 800617a:	2201      	movs	r2, #1
 800617c:	4621      	mov	r1, r4
 800617e:	f106 0010 	add.w	r0, r6, #16
 8006182:	f7fc ff67 	bl	8003054 <_ZN8RegisterC1Ethh>
 8006186:	2303      	movs	r3, #3
 8006188:	2201      	movs	r2, #1
 800618a:	4621      	mov	r1, r4
 800618c:	f106 0018 	add.w	r0, r6, #24
 8006190:	f7fc ff60 	bl	8003054 <_ZN8RegisterC1Ethh>
 8006194:	2304      	movs	r3, #4
 8006196:	2201      	movs	r2, #1
 8006198:	4621      	mov	r1, r4
 800619a:	f106 0020 	add.w	r0, r6, #32
 800619e:	f7fc ff59 	bl	8003054 <_ZN8RegisterC1Ethh>
 80061a2:	f106 0b28 	add.w	fp, r6, #40	; 0x28
 80061a6:	2305      	movs	r3, #5
 80061a8:	2201      	movs	r2, #1
 80061aa:	4621      	mov	r1, r4
 80061ac:	4658      	mov	r0, fp
 80061ae:	f7fc ff51 	bl	8003054 <_ZN8RegisterC1Ethh>
 80061b2:	f106 0a30 	add.w	sl, r6, #48	; 0x30
 80061b6:	2306      	movs	r3, #6
 80061b8:	2201      	movs	r2, #1
 80061ba:	4621      	mov	r1, r4
 80061bc:	4650      	mov	r0, sl
 80061be:	f7fc ff49 	bl	8003054 <_ZN8RegisterC1Ethh>
 80061c2:	2307      	movs	r3, #7
 80061c4:	2201      	movs	r2, #1
 80061c6:	4621      	mov	r1, r4
 80061c8:	f106 0038 	add.w	r0, r6, #56	; 0x38
 80061cc:	f7fc ff42 	bl	8003054 <_ZN8RegisterC1Ethh>

const Address_field field_PWM(&register_PWM[0], 2, true),
 80061d0:	9404      	str	r4, [sp, #16]
 80061d2:	9403      	str	r4, [sp, #12]
 80061d4:	9502      	str	r5, [sp, #8]
 80061d6:	9401      	str	r4, [sp, #4]
 80061d8:	f8cd 9000 	str.w	r9, [sp]
 80061dc:	2301      	movs	r3, #1
 80061de:	2202      	movs	r2, #2
 80061e0:	4641      	mov	r1, r8
 80061e2:	4853      	ldr	r0, [pc, #332]	; (8006330 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x378>)
 80061e4:	f7fc ffca 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_byte(&register_byte[0]),
 80061e8:	9404      	str	r4, [sp, #16]
 80061ea:	9403      	str	r4, [sp, #12]
 80061ec:	9502      	str	r5, [sp, #8]
 80061ee:	9401      	str	r4, [sp, #4]
 80061f0:	f8cd 9000 	str.w	r9, [sp]
 80061f4:	4623      	mov	r3, r4
 80061f6:	2201      	movs	r2, #1
 80061f8:	494a      	ldr	r1, [pc, #296]	; (8006324 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x36c>)
 80061fa:	484e      	ldr	r0, [pc, #312]	; (8006334 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x37c>)
 80061fc:	f7fc ffbe 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_float(&register_float[0], 4, false),
 8006200:	9404      	str	r4, [sp, #16]
 8006202:	9403      	str	r4, [sp, #12]
 8006204:	9502      	str	r5, [sp, #8]
 8006206:	9401      	str	r4, [sp, #4]
 8006208:	f8cd 9000 	str.w	r9, [sp]
 800620c:	4623      	mov	r3, r4
 800620e:	2204      	movs	r2, #4
 8006210:	4639      	mov	r1, r7
 8006212:	4849      	ldr	r0, [pc, #292]	; (8006338 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x380>)
 8006214:	f7fc ffb2 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_bit[8] = {Address_field(&register_bit[0]), Address_field(&register_bit[1]),
                                    Address_field(&register_bit[2]), Address_field(&register_bit[3]),
                                    Address_field(&register_bit[4]), Address_field(&register_bit[5]),
                                    Address_field(&register_bit[6]), Address_field(&register_bit[7])};
 8006218:	4f48      	ldr	r7, [pc, #288]	; (800633c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x384>)
 800621a:	9404      	str	r4, [sp, #16]
 800621c:	9403      	str	r4, [sp, #12]
 800621e:	9502      	str	r5, [sp, #8]
 8006220:	9401      	str	r4, [sp, #4]
 8006222:	f8cd 9000 	str.w	r9, [sp]
 8006226:	4623      	mov	r3, r4
 8006228:	2201      	movs	r2, #1
 800622a:	4631      	mov	r1, r6
 800622c:	4638      	mov	r0, r7
 800622e:	f7fc ffa5 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 8006232:	9404      	str	r4, [sp, #16]
 8006234:	9403      	str	r4, [sp, #12]
 8006236:	9502      	str	r5, [sp, #8]
 8006238:	9401      	str	r4, [sp, #4]
 800623a:	f8cd 9000 	str.w	r9, [sp]
 800623e:	4623      	mov	r3, r4
 8006240:	2201      	movs	r2, #1
 8006242:	f106 0108 	add.w	r1, r6, #8
 8006246:	f107 001c 	add.w	r0, r7, #28
 800624a:	f7fc ff97 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 800624e:	9404      	str	r4, [sp, #16]
 8006250:	9403      	str	r4, [sp, #12]
 8006252:	9502      	str	r5, [sp, #8]
 8006254:	9401      	str	r4, [sp, #4]
 8006256:	f8cd 9000 	str.w	r9, [sp]
 800625a:	4623      	mov	r3, r4
 800625c:	2201      	movs	r2, #1
 800625e:	f106 0110 	add.w	r1, r6, #16
 8006262:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8006266:	f7fc ff89 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 800626a:	9404      	str	r4, [sp, #16]
 800626c:	9403      	str	r4, [sp, #12]
 800626e:	9502      	str	r5, [sp, #8]
 8006270:	9401      	str	r4, [sp, #4]
 8006272:	f8cd 9000 	str.w	r9, [sp]
 8006276:	4623      	mov	r3, r4
 8006278:	2201      	movs	r2, #1
 800627a:	f106 0118 	add.w	r1, r6, #24
 800627e:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8006282:	f7fc ff7b 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 8006286:	9404      	str	r4, [sp, #16]
 8006288:	9403      	str	r4, [sp, #12]
 800628a:	9502      	str	r5, [sp, #8]
 800628c:	9401      	str	r4, [sp, #4]
 800628e:	f8cd 9000 	str.w	r9, [sp]
 8006292:	4623      	mov	r3, r4
 8006294:	2201      	movs	r2, #1
 8006296:	f106 0120 	add.w	r1, r6, #32
 800629a:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800629e:	f7fc ff6d 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 80062a2:	9404      	str	r4, [sp, #16]
 80062a4:	9403      	str	r4, [sp, #12]
 80062a6:	9502      	str	r5, [sp, #8]
 80062a8:	9401      	str	r4, [sp, #4]
 80062aa:	f8cd 9000 	str.w	r9, [sp]
 80062ae:	4623      	mov	r3, r4
 80062b0:	2201      	movs	r2, #1
 80062b2:	4659      	mov	r1, fp
 80062b4:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 80062b8:	f7fc ff60 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 80062bc:	9404      	str	r4, [sp, #16]
 80062be:	9403      	str	r4, [sp, #12]
 80062c0:	9502      	str	r5, [sp, #8]
 80062c2:	9401      	str	r4, [sp, #4]
 80062c4:	f8cd 9000 	str.w	r9, [sp]
 80062c8:	4623      	mov	r3, r4
 80062ca:	2201      	movs	r2, #1
 80062cc:	4651      	mov	r1, sl
 80062ce:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 80062d2:	f7fc ff53 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 80062d6:	9404      	str	r4, [sp, #16]
 80062d8:	9403      	str	r4, [sp, #12]
 80062da:	9502      	str	r5, [sp, #8]
 80062dc:	9401      	str	r4, [sp, #4]
 80062de:	f8cd 9000 	str.w	r9, [sp]
 80062e2:	4623      	mov	r3, r4
 80062e4:	2201      	movs	r2, #1
 80062e6:	f106 0138 	add.w	r1, r6, #56	; 0x38
 80062ea:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 80062ee:	f7fc ff45 	bl	800317c <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Packet_analyzer packet_analyzer;
 80062f2:	4813      	ldr	r0, [pc, #76]	; (8006340 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x388>)
 80062f4:	f7ff f9f8 	bl	80056e8 <_ZN15Packet_analyzerC1Ev>
    virtual bool set_setting(uint8_t setting=0);
    uint8_t get_setting();
};


class Packet_Connection: public Packet_analyzer {
 80062f8:	4d12      	ldr	r5, [pc, #72]	; (8006344 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x38c>)
 80062fa:	4628      	mov	r0, r5
 80062fc:	f7ff f9f4 	bl	80056e8 <_ZN15Packet_analyzerC1Ev>
 8006300:	4b11      	ldr	r3, [pc, #68]	; (8006348 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x390>)
 8006302:	602b      	str	r3, [r5, #0]
 8006304:	772c      	strb	r4, [r5, #28]
 8006306:	e023      	b.n	8006350 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x398>
 8006308:	20002224 	.word	0x20002224
 800630c:	200021b4 	.word	0x200021b4
 8006310:	200021ec 	.word	0x200021ec
 8006314:	200021d0 	.word	0x200021d0
 8006318:	20002208 	.word	0x20002208
 800631c:	200020e8 	.word	0x200020e8
 8006320:	20002120 	.word	0x20002120
 8006324:	2000218c 	.word	0x2000218c
 8006328:	20002194 	.word	0x20002194
 800632c:	2000214c 	.word	0x2000214c
 8006330:	2000227c 	.word	0x2000227c
 8006334:	200020cc 	.word	0x200020cc
 8006338:	20002104 	.word	0x20002104
 800633c:	20002298 	.word	0x20002298
 8006340:	20002378 	.word	0x20002378
 8006344:	20002394 	.word	0x20002394
 8006348:	0800bbd0 	.word	0x0800bbd0
 800634c:	2000213c 	.word	0x2000213c
    uint8_t get_size_by_data(const uint8_t *com, const uint8_t *len, uint8_t &size_data);
    // Узнать объём поля данных по содержимому пакета
    uint8_t get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data);
};

class Packet_Sensor: public Packet_analyzer {
 8006350:	4c0a      	ldr	r4, [pc, #40]	; (800637c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3c4>)
 8006352:	4620      	mov	r0, r4
 8006354:	f7ff f9c8 	bl	80056e8 <_ZN15Packet_analyzerC1Ev>
 8006358:	4b09      	ldr	r3, [pc, #36]	; (8006380 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3c8>)
 800635a:	6023      	str	r3, [r4, #0]
    uint8_t get_size_by_data(const uint8_t *amt, const uint8_t *param, uint8_t &size_data);
    // узнать объём поля данных по содержимому пакета
    uint8_t get_size_by_packet(const LoRa_packet& packet, uint8_t *amt, uint8_t *param, uint8_t &size_data);
};

class Packet_Device: public Packet_analyzer {
 800635c:	4c09      	ldr	r4, [pc, #36]	; (8006384 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3cc>)
 800635e:	4620      	mov	r0, r4
 8006360:	f7ff f9c2 	bl	80056e8 <_ZN15Packet_analyzerC1Ev>
 8006364:	4b08      	ldr	r3, [pc, #32]	; (8006388 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3d0>)
 8006366:	6023      	str	r3, [r4, #0]
    uint8_t get_size_by_data(const uint8_t *obj, const uint8_t *com, uint8_t &size_data);
    // узнать объём поля данных по содержимому пакета
    uint8_t get_size_by_packet(const LoRa_packet& packet, uint8_t *obj, uint8_t &size_data);
};

class Packet_System: public Packet_analyzer {
 8006368:	4c08      	ldr	r4, [pc, #32]	; (800638c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3d4>)
 800636a:	4620      	mov	r0, r4
 800636c:	f7ff f9bc 	bl	80056e8 <_ZN15Packet_analyzerC1Ev>
 8006370:	4b07      	ldr	r3, [pc, #28]	; (8006390 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3d8>)
 8006372:	6023      	str	r3, [r4, #0]
}
 8006374:	b007      	add	sp, #28
 8006376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800637a:	bf00      	nop
 800637c:	200023d4 	.word	0x200023d4
 8006380:	0800bbac 	.word	0x0800bbac
 8006384:	200023b4 	.word	0x200023b4
 8006388:	0800bba0 	.word	0x0800bba0
 800638c:	200023f4 	.word	0x200023f4
 8006390:	0800bbb8 	.word	0x0800bbb8

08006394 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8006394:	b148      	cbz	r0, 80063aa <null_ptr_check+0x16>
 8006396:	6842      	ldr	r2, [r0, #4]
 8006398:	b152      	cbz	r2, 80063b0 <null_ptr_check+0x1c>
 800639a:	6882      	ldr	r2, [r0, #8]
 800639c:	b15a      	cbz	r2, 80063b6 <null_ptr_check+0x22>
 800639e:	68c0      	ldr	r0, [r0, #12]
 80063a0:	fab0 f080 	clz	r0, r0
 80063a4:	0940      	lsrs	r0, r0, #5
 80063a6:	4240      	negs	r0, r0
 80063a8:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 80063aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063ae:	4770      	bx	lr
 80063b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063b4:	4770      	bx	lr
 80063b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		/* Device structure is fine */
		rslt = BME280_OK;
	}

	return rslt;
}
 80063ba:	4770      	bx	lr

080063bc <bme280_get_regs>:
{
 80063bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c0:	4605      	mov	r5, r0
 80063c2:	4688      	mov	r8, r1
 80063c4:	4617      	mov	r7, r2
 80063c6:	461c      	mov	r4, r3
	rslt = null_ptr_check(dev);
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7ff ffe3 	bl	8006394 <null_ptr_check>
	if (rslt == BME280_OK) {
 80063ce:	4603      	mov	r3, r0
 80063d0:	b970      	cbnz	r0, 80063f0 <bme280_get_regs+0x34>
		if (dev->intf != BME280_I2C_INTF)
 80063d2:	78a3      	ldrb	r3, [r4, #2]
 80063d4:	2b01      	cmp	r3, #1
			reg_addr = reg_addr | 0x80;
 80063d6:	bf18      	it	ne
 80063d8:	f045 0580 	orrne.w	r5, r5, #128	; 0x80
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80063dc:	6866      	ldr	r6, [r4, #4]
 80063de:	463b      	mov	r3, r7
 80063e0:	4642      	mov	r2, r8
 80063e2:	4629      	mov	r1, r5
 80063e4:	7860      	ldrb	r0, [r4, #1]
 80063e6:	47b0      	blx	r6
		if (rslt != BME280_OK)
 80063e8:	1e03      	subs	r3, r0, #0
			rslt = BME280_E_COMM_FAIL;
 80063ea:	bf18      	it	ne
 80063ec:	f06f 0303 	mvnne.w	r3, #3
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080063f6 <bme280_set_regs>:
{
 80063f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	4607      	mov	r7, r0
 80063fe:	460d      	mov	r5, r1
 8006400:	4690      	mov	r8, r2
 8006402:	461e      	mov	r6, r3
 8006404:	4614      	mov	r4, r2
 8006406:	2a0a      	cmp	r2, #10
 8006408:	bf28      	it	cs
 800640a:	240a      	movcs	r4, #10
	rslt = null_ptr_check(dev);
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff ffc1 	bl	8006394 <null_ptr_check>
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8006412:	2800      	cmp	r0, #0
 8006414:	d139      	bne.n	800648a <bme280_set_regs+0x94>
 8006416:	2f00      	cmp	r7, #0
 8006418:	d03a      	beq.n	8006490 <bme280_set_regs+0x9a>
 800641a:	2d00      	cmp	r5, #0
 800641c:	d03b      	beq.n	8006496 <bme280_set_regs+0xa0>
		if (len != 0) {
 800641e:	f1b8 0f00 	cmp.w	r8, #0
 8006422:	d03b      	beq.n	800649c <bme280_set_regs+0xa6>
			temp_buff[0] = reg_data[0];
 8006424:	782b      	ldrb	r3, [r5, #0]
 8006426:	f88d 3004 	strb.w	r3, [sp, #4]
			if (dev->intf != BME280_I2C_INTF) {
 800642a:	78b3      	ldrb	r3, [r6, #2]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d00a      	beq.n	8006446 <bme280_set_regs+0x50>
 8006430:	1e7b      	subs	r3, r7, #1
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8006432:	2200      	movs	r2, #0
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8006434:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8006438:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800643c:	7019      	strb	r1, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800643e:	3201      	adds	r2, #1
 8006440:	b2d2      	uxtb	r2, r2
 8006442:	42a2      	cmp	r2, r4
 8006444:	d3f6      	bcc.n	8006434 <bme280_set_regs+0x3e>
			if (len > 1) {
 8006446:	f1b8 0f01 	cmp.w	r8, #1
 800644a:	d80c      	bhi.n	8006466 <bme280_set_regs+0x70>
				temp_len = len;
 800644c:	b2a3      	uxth	r3, r4
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 800644e:	68b4      	ldr	r4, [r6, #8]
 8006450:	aa01      	add	r2, sp, #4
 8006452:	7839      	ldrb	r1, [r7, #0]
 8006454:	7870      	ldrb	r0, [r6, #1]
 8006456:	47a0      	blx	r4
			if (rslt != BME280_OK)
 8006458:	2800      	cmp	r0, #0
				rslt = BME280_E_COMM_FAIL;
 800645a:	bf18      	it	ne
 800645c:	f06f 0003 	mvnne.w	r0, #3
}
 8006460:	b006      	add	sp, #24
 8006462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006466:	4639      	mov	r1, r7
 8006468:	aa01      	add	r2, sp, #4
			if (len > 1) {
 800646a:	2301      	movs	r3, #1
		temp_buff[(index * 2) - 1] = reg_addr[index];
 800646c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006470:	7050      	strb	r0, [r2, #1]
		temp_buff[index * 2] = reg_data[index];
 8006472:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8006476:	f802 0f02 	strb.w	r0, [r2, #2]!
 800647a:	3301      	adds	r3, #1
	for (index = 1; index < len; index++) {
 800647c:	b2d8      	uxtb	r0, r3
 800647e:	4284      	cmp	r4, r0
 8006480:	d8f4      	bhi.n	800646c <bme280_set_regs+0x76>
				temp_len = ((len * 2) - 1);
 8006482:	0064      	lsls	r4, r4, #1
 8006484:	3c01      	subs	r4, #1
 8006486:	b2a3      	uxth	r3, r4
 8006488:	e7e1      	b.n	800644e <bme280_set_regs+0x58>
		rslt = BME280_E_NULL_PTR;
 800648a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800648e:	e7e7      	b.n	8006460 <bme280_set_regs+0x6a>
 8006490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006494:	e7e4      	b.n	8006460 <bme280_set_regs+0x6a>
 8006496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800649a:	e7e1      	b.n	8006460 <bme280_set_regs+0x6a>
			rslt = BME280_E_INVALID_LEN;
 800649c:	f06f 0002 	mvn.w	r0, #2
 80064a0:	e7de      	b.n	8006460 <bme280_set_regs+0x6a>

080064a2 <set_osr_settings>:
{
 80064a2:	b570      	push	{r4, r5, r6, lr}
 80064a4:	b082      	sub	sp, #8
 80064a6:	4604      	mov	r4, r0
 80064a8:	460e      	mov	r6, r1
 80064aa:	4615      	mov	r5, r2
	if (desired_settings & BME280_OSR_HUM_SEL)
 80064ac:	f010 0f04 	tst.w	r0, #4
 80064b0:	d106      	bne.n	80064c0 <set_osr_settings+0x1e>
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80064b2:	2301      	movs	r3, #1
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80064b4:	f014 0f03 	tst.w	r4, #3
 80064b8:	d12a      	bne.n	8006510 <set_osr_settings+0x6e>
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	b002      	add	sp, #8
 80064be:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80064c0:	23f2      	movs	r3, #242	; 0xf2
 80064c2:	f88d 3007 	strb.w	r3, [sp, #7]
	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80064c6:	788b      	ldrb	r3, [r1, #2]
 80064c8:	f003 0307 	and.w	r3, r3, #7
 80064cc:	a902      	add	r1, sp, #8
 80064ce:	f801 3d03 	strb.w	r3, [r1, #-3]!
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80064d2:	4613      	mov	r3, r2
 80064d4:	2201      	movs	r2, #1
 80064d6:	f10d 0007 	add.w	r0, sp, #7
 80064da:	f7ff ff8c 	bl	80063f6 <bme280_set_regs>
	if (rslt == BME280_OK) {
 80064de:	4603      	mov	r3, r0
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d1e7      	bne.n	80064b4 <set_osr_settings+0x12>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 80064e4:	20f4      	movs	r0, #244	; 0xf4
 80064e6:	f88d 0007 	strb.w	r0, [sp, #7]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80064ea:	462b      	mov	r3, r5
 80064ec:	2201      	movs	r2, #1
 80064ee:	f10d 0106 	add.w	r1, sp, #6
 80064f2:	f7ff ff63 	bl	80063bc <bme280_get_regs>
		if (rslt == BME280_OK)
 80064f6:	4603      	mov	r3, r0
 80064f8:	2800      	cmp	r0, #0
 80064fa:	d1db      	bne.n	80064b4 <set_osr_settings+0x12>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80064fc:	462b      	mov	r3, r5
 80064fe:	2201      	movs	r2, #1
 8006500:	f10d 0106 	add.w	r1, sp, #6
 8006504:	f10d 0007 	add.w	r0, sp, #7
 8006508:	f7ff ff75 	bl	80063f6 <bme280_set_regs>
 800650c:	4603      	mov	r3, r0
 800650e:	e7d1      	b.n	80064b4 <set_osr_settings+0x12>
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8006510:	20f4      	movs	r0, #244	; 0xf4
 8006512:	f88d 0006 	strb.w	r0, [sp, #6]
	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8006516:	462b      	mov	r3, r5
 8006518:	2201      	movs	r2, #1
 800651a:	f10d 0107 	add.w	r1, sp, #7
 800651e:	f7ff ff4d 	bl	80063bc <bme280_get_regs>
	if (rslt == BME280_OK) {
 8006522:	4603      	mov	r3, r0
 8006524:	2800      	cmp	r0, #0
 8006526:	d1c8      	bne.n	80064ba <set_osr_settings+0x18>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8006528:	f014 0f01 	tst.w	r4, #1
 800652c:	d10c      	bne.n	8006548 <set_osr_settings+0xa6>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 800652e:	f014 0f02 	tst.w	r4, #2
 8006532:	d115      	bne.n	8006560 <set_osr_settings+0xbe>
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8006534:	462b      	mov	r3, r5
 8006536:	2201      	movs	r2, #1
 8006538:	f10d 0107 	add.w	r1, sp, #7
 800653c:	f10d 0006 	add.w	r0, sp, #6
 8006540:	f7ff ff59 	bl	80063f6 <bme280_set_regs>
 8006544:	4603      	mov	r3, r0
 8006546:	e7b8      	b.n	80064ba <set_osr_settings+0x18>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8006548:	7833      	ldrb	r3, [r6, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	f003 031c 	and.w	r3, r3, #28
 8006550:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8006554:	f022 021c 	bic.w	r2, r2, #28
 8006558:	4313      	orrs	r3, r2
 800655a:	f88d 3007 	strb.w	r3, [sp, #7]
 800655e:	e7e6      	b.n	800652e <set_osr_settings+0x8c>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8006560:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006564:	f003 031f 	and.w	r3, r3, #31
 8006568:	7872      	ldrb	r2, [r6, #1]
 800656a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800656e:	f88d 3007 	strb.w	r3, [sp, #7]
 8006572:	e7df      	b.n	8006534 <set_osr_settings+0x92>

08006574 <set_filter_standby_settings>:
{
 8006574:	b570      	push	{r4, r5, r6, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	4605      	mov	r5, r0
 800657a:	460e      	mov	r6, r1
 800657c:	4614      	mov	r4, r2
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 800657e:	20f5      	movs	r0, #245	; 0xf5
 8006580:	f88d 0007 	strb.w	r0, [sp, #7]
	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8006584:	4613      	mov	r3, r2
 8006586:	2201      	movs	r2, #1
 8006588:	f10d 0106 	add.w	r1, sp, #6
 800658c:	f7ff ff16 	bl	80063bc <bme280_get_regs>
	if (rslt == BME280_OK) {
 8006590:	4603      	mov	r3, r0
 8006592:	b970      	cbnz	r0, 80065b2 <set_filter_standby_settings+0x3e>
		if (desired_settings & BME280_FILTER_SEL)
 8006594:	f015 0f08 	tst.w	r5, #8
 8006598:	d10e      	bne.n	80065b8 <set_filter_standby_settings+0x44>
		if (desired_settings & BME280_STANDBY_SEL)
 800659a:	f015 0f10 	tst.w	r5, #16
 800659e:	d117      	bne.n	80065d0 <set_filter_standby_settings+0x5c>
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80065a0:	4623      	mov	r3, r4
 80065a2:	2201      	movs	r2, #1
 80065a4:	f10d 0106 	add.w	r1, sp, #6
 80065a8:	f10d 0007 	add.w	r0, sp, #7
 80065ac:	f7ff ff23 	bl	80063f6 <bme280_set_regs>
 80065b0:	4603      	mov	r3, r0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	b002      	add	sp, #8
 80065b6:	bd70      	pop	{r4, r5, r6, pc}
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80065b8:	78f3      	ldrb	r3, [r6, #3]
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	f003 031c 	and.w	r3, r3, #28
 80065c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80065c4:	f022 021c 	bic.w	r2, r2, #28
 80065c8:	4313      	orrs	r3, r2
 80065ca:	f88d 3006 	strb.w	r3, [sp, #6]
 80065ce:	e7e4      	b.n	800659a <set_filter_standby_settings+0x26>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80065d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80065d4:	f003 031f 	and.w	r3, r3, #31
 80065d8:	7932      	ldrb	r2, [r6, #4]
 80065da:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80065de:	f88d 3006 	strb.w	r3, [sp, #6]
 80065e2:	e7dd      	b.n	80065a0 <set_filter_standby_settings+0x2c>

080065e4 <bme280_get_sensor_mode>:
{
 80065e4:	b538      	push	{r3, r4, r5, lr}
 80065e6:	4605      	mov	r5, r0
 80065e8:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 80065ea:	4608      	mov	r0, r1
 80065ec:	f7ff fed2 	bl	8006394 <null_ptr_check>
	if (rslt == BME280_OK) {
 80065f0:	4603      	mov	r3, r0
 80065f2:	b108      	cbz	r0, 80065f8 <bme280_get_sensor_mode+0x14>
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	bd38      	pop	{r3, r4, r5, pc}
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 80065f8:	4623      	mov	r3, r4
 80065fa:	2201      	movs	r2, #1
 80065fc:	4629      	mov	r1, r5
 80065fe:	20f4      	movs	r0, #244	; 0xf4
 8006600:	f7ff fedc 	bl	80063bc <bme280_get_regs>
 8006604:	4603      	mov	r3, r0
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8006606:	782a      	ldrb	r2, [r5, #0]
 8006608:	f002 0203 	and.w	r2, r2, #3
 800660c:	702a      	strb	r2, [r5, #0]
 800660e:	e7f1      	b.n	80065f4 <bme280_get_sensor_mode+0x10>

08006610 <bme280_soft_reset>:
{
 8006610:	b530      	push	{r4, r5, lr}
 8006612:	b083      	sub	sp, #12
 8006614:	4605      	mov	r5, r0
	uint8_t reg_addr = BME280_RESET_ADDR;
 8006616:	23e0      	movs	r3, #224	; 0xe0
 8006618:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t soft_rst_cmd = 0xB6;
 800661c:	23b6      	movs	r3, #182	; 0xb6
 800661e:	f88d 3006 	strb.w	r3, [sp, #6]
	rslt = null_ptr_check(dev);
 8006622:	f7ff feb7 	bl	8006394 <null_ptr_check>
	if (rslt == BME280_OK) {
 8006626:	4604      	mov	r4, r0
 8006628:	b110      	cbz	r0, 8006630 <bme280_soft_reset+0x20>
}
 800662a:	4620      	mov	r0, r4
 800662c:	b003      	add	sp, #12
 800662e:	bd30      	pop	{r4, r5, pc}
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8006630:	462b      	mov	r3, r5
 8006632:	2201      	movs	r2, #1
 8006634:	f10d 0106 	add.w	r1, sp, #6
 8006638:	f10d 0007 	add.w	r0, sp, #7
 800663c:	f7ff fedb 	bl	80063f6 <bme280_set_regs>
 8006640:	4604      	mov	r4, r0
		dev->delay_ms(2);
 8006642:	68eb      	ldr	r3, [r5, #12]
 8006644:	2002      	movs	r0, #2
 8006646:	4798      	blx	r3
 8006648:	e7ef      	b.n	800662a <bme280_soft_reset+0x1a>

0800664a <bme280_init>:
{
 800664a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800664c:	b089      	sub	sp, #36	; 0x24
 800664e:	4605      	mov	r5, r0
	uint8_t chip_id = 0;
 8006650:	2300      	movs	r3, #0
 8006652:	f88d 301f 	strb.w	r3, [sp, #31]
	rslt = null_ptr_check(dev);
 8006656:	f7ff fe9d 	bl	8006394 <null_ptr_check>
	if (rslt ==  BME280_OK) {
 800665a:	4603      	mov	r3, r0
 800665c:	b998      	cbnz	r0, 8006686 <bme280_init+0x3c>
 800665e:	2405      	movs	r4, #5
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8006660:	2601      	movs	r6, #1
 8006662:	27d0      	movs	r7, #208	; 0xd0
 8006664:	462b      	mov	r3, r5
 8006666:	4632      	mov	r2, r6
 8006668:	f10d 011f 	add.w	r1, sp, #31
 800666c:	4638      	mov	r0, r7
 800666e:	f7ff fea5 	bl	80063bc <bme280_get_regs>
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8006672:	b158      	cbz	r0, 800668c <bme280_init+0x42>
			dev->delay_ms(1);
 8006674:	68eb      	ldr	r3, [r5, #12]
 8006676:	4630      	mov	r0, r6
 8006678:	4798      	blx	r3
 800667a:	1e63      	subs	r3, r4, #1
		while (try_count) {
 800667c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8006680:	d1f0      	bne.n	8006664 <bme280_init+0x1a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8006682:	f06f 0301 	mvn.w	r3, #1
}
 8006686:	4618      	mov	r0, r3
 8006688:	b009      	add	sp, #36	; 0x24
 800668a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 800668c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8006690:	2b60      	cmp	r3, #96	; 0x60
 8006692:	d1ef      	bne.n	8006674 <bme280_init+0x2a>
				dev->chip_id = chip_id;
 8006694:	702b      	strb	r3, [r5, #0]
				rslt = bme280_soft_reset(dev);
 8006696:	4628      	mov	r0, r5
 8006698:	f7ff ffba 	bl	8006610 <bme280_soft_reset>
				if (rslt == BME280_OK) {
 800669c:	4603      	mov	r3, r0
 800669e:	b120      	cbz	r0, 80066aa <bme280_init+0x60>
			rslt = BME280_E_DEV_NOT_FOUND;
 80066a0:	2c00      	cmp	r4, #0
 80066a2:	bf08      	it	eq
 80066a4:	f06f 0301 	mvneq.w	r3, #1
 80066a8:	e7ed      	b.n	8006686 <bme280_init+0x3c>
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 80066aa:	2300      	movs	r3, #0
 80066ac:	9301      	str	r3, [sp, #4]
 80066ae:	9302      	str	r3, [sp, #8]
 80066b0:	9303      	str	r3, [sp, #12]
 80066b2:	9304      	str	r3, [sp, #16]
 80066b4:	9305      	str	r3, [sp, #20]
 80066b6:	9306      	str	r3, [sp, #24]
 80066b8:	f8ad 301c 	strh.w	r3, [sp, #28]
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 80066bc:	462b      	mov	r3, r5
 80066be:	221a      	movs	r2, #26
 80066c0:	a901      	add	r1, sp, #4
 80066c2:	2088      	movs	r0, #136	; 0x88
 80066c4:	f7ff fe7a 	bl	80063bc <bme280_get_regs>
	if (rslt == BME280_OK) {
 80066c8:	4603      	mov	r3, r0
 80066ca:	2800      	cmp	r0, #0
 80066cc:	d1e8      	bne.n	80066a0 <bme280_init+0x56>
	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80066ce:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80066d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80066d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80066da:	822b      	strh	r3, [r5, #16]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80066dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80066e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80066e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80066e8:	826b      	strh	r3, [r5, #18]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80066ea:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80066ee:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80066f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80066f6:	82ab      	strh	r3, [r5, #20]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80066f8:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80066fc:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8006700:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006704:	82eb      	strh	r3, [r5, #22]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8006706:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800670a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800670e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006712:	832b      	strh	r3, [r5, #24]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8006714:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8006718:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800671c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006720:	836b      	strh	r3, [r5, #26]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8006722:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8006726:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800672a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800672e:	83ab      	strh	r3, [r5, #28]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8006730:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8006734:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8006738:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800673c:	83eb      	strh	r3, [r5, #30]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800673e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8006742:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8006746:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800674a:	842b      	strh	r3, [r5, #32]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800674c:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8006750:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006754:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006758:	846b      	strh	r3, [r5, #34]	; 0x22
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 800675a:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800675e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006762:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006766:	84ab      	strh	r3, [r5, #36]	; 0x24
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8006768:	f89d 201b 	ldrb.w	r2, [sp, #27]
 800676c:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8006770:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006774:	84eb      	strh	r3, [r5, #38]	; 0x26
	calib_data->dig_H1 = reg_data[25];
 8006776:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800677a:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800677e:	462b      	mov	r3, r5
 8006780:	2207      	movs	r2, #7
 8006782:	a901      	add	r1, sp, #4
 8006784:	20e1      	movs	r0, #225	; 0xe1
 8006786:	f7ff fe19 	bl	80063bc <bme280_get_regs>
		if (rslt == BME280_OK) {
 800678a:	4603      	mov	r3, r0
 800678c:	2800      	cmp	r0, #0
 800678e:	d187      	bne.n	80066a0 <bme280_init+0x56>
	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8006790:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8006794:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006798:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800679c:	856a      	strh	r2, [r5, #42]	; 0x2a
	calib_data->dig_H3 = reg_data[2];
 800679e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80067a2:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80067a6:	f89d 2008 	ldrb.w	r2, [sp, #8]
	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80067aa:	f99d 0007 	ldrsb.w	r0, [sp, #7]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80067ae:	f002 010f 	and.w	r1, r2, #15
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80067b2:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80067b6:	85e9      	strh	r1, [r5, #46]	; 0x2e
	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80067b8:	f99d 1009 	ldrsb.w	r1, [sp, #9]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80067bc:	0912      	lsrs	r2, r2, #4
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 80067be:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80067c2:	862a      	strh	r2, [r5, #48]	; 0x30
	calib_data->dig_H6 = (int8_t)reg_data[6];
 80067c4:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80067c8:	f885 2032 	strb.w	r2, [r5, #50]	; 0x32
 80067cc:	e768      	b.n	80066a0 <bme280_init+0x56>

080067ce <put_device_to_sleep>:
{
 80067ce:	b510      	push	{r4, lr}
 80067d0:	b084      	sub	sp, #16
 80067d2:	4604      	mov	r4, r0
	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80067d4:	4603      	mov	r3, r0
 80067d6:	2204      	movs	r2, #4
 80067d8:	a903      	add	r1, sp, #12
 80067da:	20f2      	movs	r0, #242	; 0xf2
 80067dc:	f7ff fdee 	bl	80063bc <bme280_get_regs>
	if (rslt == BME280_OK) {
 80067e0:	4603      	mov	r3, r0
 80067e2:	b110      	cbz	r0, 80067ea <put_device_to_sleep+0x1c>
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	b004      	add	sp, #16
 80067e8:	bd10      	pop	{r4, pc}
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80067ea:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80067ee:	f003 0307 	and.w	r3, r3, #7
 80067f2:	f88d 3006 	strb.w	r3, [sp, #6]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80067f6:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80067fa:	f3c3 0282 	ubfx	r2, r3, #2, #3
 80067fe:	f88d 2004 	strb.w	r2, [sp, #4]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8006802:	095b      	lsrs	r3, r3, #5
 8006804:	f88d 3005 	strb.w	r3, [sp, #5]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8006808:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800680c:	f3c3 0282 	ubfx	r2, r3, #2, #3
 8006810:	f88d 2007 	strb.w	r2, [sp, #7]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8006814:	095b      	lsrs	r3, r3, #5
 8006816:	f88d 3008 	strb.w	r3, [sp, #8]
		rslt = bme280_soft_reset(dev);
 800681a:	4620      	mov	r0, r4
 800681c:	f7ff fef8 	bl	8006610 <bme280_soft_reset>
		if (rslt == BME280_OK)
 8006820:	4603      	mov	r3, r0
 8006822:	2800      	cmp	r0, #0
 8006824:	d1de      	bne.n	80067e4 <put_device_to_sleep+0x16>
	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8006826:	4622      	mov	r2, r4
 8006828:	a901      	add	r1, sp, #4
 800682a:	201f      	movs	r0, #31
 800682c:	f7ff fe39 	bl	80064a2 <set_osr_settings>
	if (rslt == BME280_OK)
 8006830:	4603      	mov	r3, r0
 8006832:	2800      	cmp	r0, #0
 8006834:	d1d6      	bne.n	80067e4 <put_device_to_sleep+0x16>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8006836:	4622      	mov	r2, r4
 8006838:	a901      	add	r1, sp, #4
 800683a:	201f      	movs	r0, #31
 800683c:	f7ff fe9a 	bl	8006574 <set_filter_standby_settings>
 8006840:	4603      	mov	r3, r0
 8006842:	e7cf      	b.n	80067e4 <put_device_to_sleep+0x16>

08006844 <bme280_set_sensor_settings>:
{
 8006844:	b570      	push	{r4, r5, r6, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	4606      	mov	r6, r0
 800684a:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 800684c:	4608      	mov	r0, r1
 800684e:	f7ff fda1 	bl	8006394 <null_ptr_check>
	if (rslt == BME280_OK) {
 8006852:	4605      	mov	r5, r0
 8006854:	b110      	cbz	r0, 800685c <bme280_set_sensor_settings+0x18>
}
 8006856:	4628      	mov	r0, r5
 8006858:	b002      	add	sp, #8
 800685a:	bd70      	pop	{r4, r5, r6, pc}
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 800685c:	4621      	mov	r1, r4
 800685e:	f10d 0007 	add.w	r0, sp, #7
 8006862:	f7ff febf 	bl	80065e4 <bme280_get_sensor_mode>
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8006866:	4605      	mov	r5, r0
 8006868:	2800      	cmp	r0, #0
 800686a:	d1f4      	bne.n	8006856 <bme280_set_sensor_settings+0x12>
 800686c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006870:	b96b      	cbnz	r3, 800688e <bme280_set_sensor_settings+0x4a>
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8006872:	f016 0f07 	tst.w	r6, #7
 8006876:	d111      	bne.n	800689c <bme280_set_sensor_settings+0x58>
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8006878:	f016 0f18 	tst.w	r6, #24
 800687c:	d0eb      	beq.n	8006856 <bme280_set_sensor_settings+0x12>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 800687e:	4622      	mov	r2, r4
 8006880:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8006884:	4630      	mov	r0, r6
 8006886:	f7ff fe75 	bl	8006574 <set_filter_standby_settings>
 800688a:	4605      	mov	r5, r0
 800688c:	e7e3      	b.n	8006856 <bme280_set_sensor_settings+0x12>
			rslt = put_device_to_sleep(dev);
 800688e:	4620      	mov	r0, r4
 8006890:	f7ff ff9d 	bl	80067ce <put_device_to_sleep>
		if (rslt == BME280_OK) {
 8006894:	2800      	cmp	r0, #0
 8006896:	d0ec      	beq.n	8006872 <bme280_set_sensor_settings+0x2e>
			rslt = put_device_to_sleep(dev);
 8006898:	4605      	mov	r5, r0
 800689a:	e7dc      	b.n	8006856 <bme280_set_sensor_settings+0x12>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 800689c:	4622      	mov	r2, r4
 800689e:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80068a2:	4630      	mov	r0, r6
 80068a4:	f7ff fdfd 	bl	80064a2 <set_osr_settings>
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80068a8:	2800      	cmp	r0, #0
 80068aa:	d0e5      	beq.n	8006878 <bme280_set_sensor_settings+0x34>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 80068ac:	4605      	mov	r5, r0
 80068ae:	e7d2      	b.n	8006856 <bme280_set_sensor_settings+0x12>

080068b0 <bme280_set_sensor_mode>:
{
 80068b0:	b530      	push	{r4, r5, lr}
 80068b2:	b083      	sub	sp, #12
 80068b4:	4605      	mov	r5, r0
 80068b6:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 80068b8:	4608      	mov	r0, r1
 80068ba:	f7ff fd6b 	bl	8006394 <null_ptr_check>
	if (rslt == BME280_OK) {
 80068be:	4603      	mov	r3, r0
 80068c0:	b110      	cbz	r0, 80068c8 <bme280_set_sensor_mode+0x18>
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	b003      	add	sp, #12
 80068c6:	bd30      	pop	{r4, r5, pc}
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80068c8:	4621      	mov	r1, r4
 80068ca:	f10d 0007 	add.w	r0, sp, #7
 80068ce:	f7ff fe89 	bl	80065e4 <bme280_get_sensor_mode>
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80068d2:	4603      	mov	r3, r0
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d1f4      	bne.n	80068c2 <bme280_set_sensor_mode+0x12>
 80068d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80068dc:	b9eb      	cbnz	r3, 800691a <bme280_set_sensor_mode+0x6a>
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80068de:	20f4      	movs	r0, #244	; 0xf4
 80068e0:	f88d 0005 	strb.w	r0, [sp, #5]
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80068e4:	4623      	mov	r3, r4
 80068e6:	2201      	movs	r2, #1
 80068e8:	f10d 0106 	add.w	r1, sp, #6
 80068ec:	f7ff fd66 	bl	80063bc <bme280_get_regs>
	if (rslt == BME280_OK) {
 80068f0:	4603      	mov	r3, r0
 80068f2:	2800      	cmp	r0, #0
 80068f4:	d1e5      	bne.n	80068c2 <bme280_set_sensor_mode+0x12>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80068f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80068fa:	f023 0303 	bic.w	r3, r3, #3
 80068fe:	f005 0503 	and.w	r5, r5, #3
 8006902:	431d      	orrs	r5, r3
 8006904:	a902      	add	r1, sp, #8
 8006906:	f801 5d02 	strb.w	r5, [r1, #-2]!
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800690a:	4623      	mov	r3, r4
 800690c:	2201      	movs	r2, #1
 800690e:	f10d 0005 	add.w	r0, sp, #5
 8006912:	f7ff fd70 	bl	80063f6 <bme280_set_regs>
 8006916:	4603      	mov	r3, r0
 8006918:	e7d3      	b.n	80068c2 <bme280_set_sensor_mode+0x12>
			rslt = put_device_to_sleep(dev);
 800691a:	4620      	mov	r0, r4
 800691c:	f7ff ff57 	bl	80067ce <put_device_to_sleep>
		if (rslt == BME280_OK)
 8006920:	4603      	mov	r3, r0
 8006922:	2800      	cmp	r0, #0
 8006924:	d1cd      	bne.n	80068c2 <bme280_set_sensor_mode+0x12>
 8006926:	e7da      	b.n	80068de <bme280_set_sensor_mode+0x2e>

08006928 <bme280_parse_sensor_data>:
	data_msb = (uint32_t)reg_data[0] << 12;
 8006928:	7802      	ldrb	r2, [r0, #0]
	data_lsb = (uint32_t)reg_data[1] << 4;
 800692a:	7843      	ldrb	r3, [r0, #1]
 800692c:	011b      	lsls	r3, r3, #4
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800692e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8006932:	7882      	ldrb	r2, [r0, #2]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8006934:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8006938:	600b      	str	r3, [r1, #0]
	data_msb = (uint32_t)reg_data[3] << 12;
 800693a:	78c2      	ldrb	r2, [r0, #3]
	data_lsb = (uint32_t)reg_data[4] << 4;
 800693c:	7903      	ldrb	r3, [r0, #4]
 800693e:	011b      	lsls	r3, r3, #4
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8006940:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8006944:	7942      	ldrb	r2, [r0, #5]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8006946:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 800694a:	604b      	str	r3, [r1, #4]
	data_lsb = (uint32_t)reg_data[6] << 8;
 800694c:	7982      	ldrb	r2, [r0, #6]
	data_msb = (uint32_t)reg_data[7];
 800694e:	79c3      	ldrb	r3, [r0, #7]
	uncomp_data->humidity = data_msb | data_lsb;
 8006950:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006954:	608b      	str	r3, [r1, #8]
}
 8006956:	4770      	bx	lr

08006958 <bme280_compensate_data>:
	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8006958:	2900      	cmp	r1, #0
 800695a:	f000 8232 	beq.w	8006dc2 <bme280_compensate_data+0x46a>
{
 800695e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006962:	b087      	sub	sp, #28
 8006964:	460c      	mov	r4, r1
	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8006966:	2a00      	cmp	r2, #0
 8006968:	f000 822e 	beq.w	8006dc8 <bme280_compensate_data+0x470>
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 822e 	beq.w	8006dce <bme280_compensate_data+0x476>
		comp_data->temperature = 0;
 8006972:	2100      	movs	r1, #0
 8006974:	6051      	str	r1, [r2, #4]
		comp_data->pressure = 0;
 8006976:	6011      	str	r1, [r2, #0]
		comp_data->humidity = 0;
 8006978:	6091      	str	r1, [r2, #8]
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 800697a:	f010 0f07 	tst.w	r0, #7
 800697e:	f040 81bd 	bne.w	8006cfc <bme280_compensate_data+0x3a4>
 8006982:	9403      	str	r4, [sp, #12]
 8006984:	461c      	mov	r4, r3
 8006986:	9202      	str	r2, [sp, #8]
 8006988:	4605      	mov	r5, r0
		if (sensor_comp & BME280_PRESS) {
 800698a:	f010 0f01 	tst.w	r0, #1
 800698e:	f000 8146 	beq.w	8006c1e <bme280_compensate_data+0x2c6>
	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8006992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006994:	17d3      	asrs	r3, r2, #31
 8006996:	f5b2 36fa 	subs.w	r6, r2, #128000	; 0x1f400
 800699a:	f143 37ff 	adc.w	r7, r3, #4294967295	; 0xffffffff
 800699e:	e9cd 6704 	strd	r6, r7, [sp, #16]
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 80069a2:	fb06 f107 	mul.w	r1, r6, r7
 80069a6:	fba6 2306 	umull	r2, r3, r6, r6
 80069aa:	e9cd 2300 	strd	r2, r3, [sp]
 80069ae:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80069b2:	9301      	str	r3, [sp, #4]
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 80069b4:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 80069b8:	17c1      	asrs	r1, r0, #31
 80069ba:	fb00 fc07 	mul.w	ip, r0, r7
 80069be:	fb06 cc01 	mla	ip, r6, r1, ip
 80069c2:	fba0 0106 	umull	r0, r1, r0, r6
 80069c6:	4461      	add	r1, ip
 80069c8:	030f      	lsls	r7, r1, #12
 80069ca:	ea47 5710 	orr.w	r7, r7, r0, lsr #20
 80069ce:	0306      	lsls	r6, r0, #12
 80069d0:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 80069d4:	17c1      	asrs	r1, r0, #31
 80069d6:	e9dd 8900 	ldrd	r8, r9, [sp]
 80069da:	fb00 fc09 	mul.w	ip, r0, r9
 80069de:	fb08 cc01 	mla	ip, r8, r1, ip
 80069e2:	fba0 0108 	umull	r0, r1, r0, r8
 80069e6:	4461      	add	r1, ip
 80069e8:	4682      	mov	sl, r0
 80069ea:	468b      	mov	fp, r1
 80069ec:	2800      	cmp	r0, #0
 80069ee:	f171 0300 	sbcs.w	r3, r1, #0
 80069f2:	f2c0 81b9 	blt.w	8006d68 <bme280_compensate_data+0x410>
 80069f6:	ea4f 201a 	mov.w	r0, sl, lsr #8
 80069fa:	ea40 600b 	orr.w	r0, r0, fp, lsl #24
 80069fe:	ea4f 212b 	mov.w	r1, fp, asr #8
 8006a02:	eb16 0800 	adds.w	r8, r6, r0
 8006a06:	eb47 0901 	adc.w	r9, r7, r1
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8006a0a:	f118 0a00 	adds.w	sl, r8, #0
 8006a0e:	f549 4b00 	adc.w	fp, r9, #32768	; 0x8000
 8006a12:	f8b4 8006 	ldrh.w	r8, [r4, #6]
 8006a16:	fbaa 0108 	umull	r0, r1, sl, r8
 8006a1a:	fb08 110b 	mla	r1, r8, fp, r1
 8006a1e:	468b      	mov	fp, r1
 8006a20:	2800      	cmp	r0, #0
 8006a22:	f171 0300 	sbcs.w	r3, r1, #0
 8006a26:	f2c0 81a4 	blt.w	8006d72 <bme280_compensate_data+0x41a>
 8006a2a:	ea4f 086b 	mov.w	r8, fp, asr #1
 8006a2e:	ea4f 79eb 	mov.w	r9, fp, asr #31
	if (var1 != 0) {
 8006a32:	ea58 0309 	orrs.w	r3, r8, r9
 8006a36:	f000 81c2 	beq.w	8006dbe <bme280_compensate_data+0x466>
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8006a3a:	f9b4 a010 	ldrsh.w	sl, [r4, #16]
 8006a3e:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8006a42:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006a46:	fb0a f702 	mul.w	r7, sl, r2
 8006a4a:	fb01 710b 	mla	r1, r1, fp, r7
 8006a4e:	9b00      	ldr	r3, [sp, #0]
 8006a50:	fbaa 2303 	umull	r2, r3, sl, r3
 8006a54:	e9cd 2300 	strd	r2, r3, [sp]
 8006a58:	440b      	add	r3, r1
 8006a5a:	9301      	str	r3, [sp, #4]
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8006a5c:	f9b4 600e 	ldrsh.w	r6, [r4, #14]
 8006a60:	17f7      	asrs	r7, r6, #31
 8006a62:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006a66:	465b      	mov	r3, fp
 8006a68:	fb06 f303 	mul.w	r3, r6, r3
 8006a6c:	fb0a 3107 	mla	r1, sl, r7, r3
 8006a70:	fba6 230a 	umull	r2, r3, r6, sl
 8006a74:	440b      	add	r3, r1
 8006a76:	045f      	lsls	r7, r3, #17
 8006a78:	ea47 37d2 	orr.w	r7, r7, r2, lsr #15
 8006a7c:	0456      	lsls	r6, r2, #17
 8006a7e:	e9dd ab00 	ldrd	sl, fp, [sp]
 8006a82:	eb1a 0a06 	adds.w	sl, sl, r6
 8006a86:	eb4b 0b07 	adc.w	fp, fp, r7
		var4 = 1048576 - uncomp_data->pressure;
 8006a8a:	9b03      	ldr	r3, [sp, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8006a92:	f04f 0c00 	mov.w	ip, #0
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8006a96:	0859      	lsrs	r1, r3, #1
 8006a98:	07d8      	lsls	r0, r3, #31
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8006a9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a9e:	00d3      	lsls	r3, r2, #3
 8006aa0:	eb1c 060a 	adds.w	r6, ip, sl
 8006aa4:	eb43 070b 	adc.w	r7, r3, fp
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8006aa8:	1b80      	subs	r0, r0, r6
 8006aaa:	eb61 0107 	sbc.w	r1, r1, r7
 8006aae:	4682      	mov	sl, r0
 8006ab0:	468b      	mov	fp, r1
 8006ab2:	1800      	adds	r0, r0, r0
 8006ab4:	4149      	adcs	r1, r1
 8006ab6:	eb10 060a 	adds.w	r6, r0, sl
 8006aba:	eb41 070b 	adc.w	r7, r1, fp
 8006abe:	01bb      	lsls	r3, r7, #6
 8006ac0:	ea43 6396 	orr.w	r3, r3, r6, lsr #26
 8006ac4:	01b2      	lsls	r2, r6, #6
 8006ac6:	18b0      	adds	r0, r6, r2
 8006ac8:	eb47 0103 	adc.w	r1, r7, r3
 8006acc:	008b      	lsls	r3, r1, #2
 8006ace:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ad2:	0082      	lsls	r2, r0, #2
 8006ad4:	eb12 060a 	adds.w	r6, r2, sl
 8006ad8:	eb43 070b 	adc.w	r7, r3, fp
 8006adc:	00bb      	lsls	r3, r7, #2
 8006ade:	ea43 7396 	orr.w	r3, r3, r6, lsr #30
 8006ae2:	00b2      	lsls	r2, r6, #2
 8006ae4:	4616      	mov	r6, r2
 8006ae6:	461f      	mov	r7, r3
 8006ae8:	4642      	mov	r2, r8
 8006aea:	464b      	mov	r3, r9
 8006aec:	eb16 000a 	adds.w	r0, r6, sl
 8006af0:	eb47 010b 	adc.w	r1, r7, fp
 8006af4:	f7fa f85e 	bl	8000bb4 <__aeabi_ldivmod>
 8006af8:	4682      	mov	sl, r0
 8006afa:	468b      	mov	fp, r1
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8006afc:	4601      	mov	r1, r0
 8006afe:	465a      	mov	r2, fp
 8006b00:	f1ba 0f00 	cmp.w	sl, #0
 8006b04:	f17b 0300 	sbcs.w	r3, fp, #0
 8006b08:	f2c0 8138 	blt.w	8006d7c <bme280_compensate_data+0x424>
 8006b0c:	ea4f 3c51 	mov.w	ip, r1, lsr #13
 8006b10:	ea4c 4cc2 	orr.w	ip, ip, r2, lsl #19
 8006b14:	1356      	asrs	r6, r2, #13
 8006b16:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8006b1a:	17d3      	asrs	r3, r2, #31
 8006b1c:	fb02 f706 	mul.w	r7, r2, r6
 8006b20:	fb0c 7703 	mla	r7, ip, r3, r7
 8006b24:	fba2 230c 	umull	r2, r3, r2, ip
 8006b28:	443b      	add	r3, r7
 8006b2a:	fb02 f606 	mul.w	r6, r2, r6
 8006b2e:	fb0c 6603 	mla	r6, ip, r3, r6
 8006b32:	fba2 230c 	umull	r2, r3, r2, ip
 8006b36:	4433      	add	r3, r6
 8006b38:	4690      	mov	r8, r2
 8006b3a:	4699      	mov	r9, r3
 8006b3c:	2a00      	cmp	r2, #0
 8006b3e:	f173 0100 	sbcs.w	r1, r3, #0
 8006b42:	f2c0 8123 	blt.w	8006d8c <bme280_compensate_data+0x434>
 8006b46:	ea4f 6258 	mov.w	r2, r8, lsr #25
 8006b4a:	ea42 12c9 	orr.w	r2, r2, r9, lsl #7
 8006b4e:	ea4f 6369 	mov.w	r3, r9, asr #25
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8006b52:	eb12 080a 	adds.w	r8, r2, sl
 8006b56:	eb43 090b 	adc.w	r9, r3, fp
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8006b5a:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8006b5e:	17f7      	asrs	r7, r6, #31
 8006b60:	fb06 f10b 	mul.w	r1, r6, fp
 8006b64:	fb0a 1307 	mla	r3, sl, r7, r1
 8006b68:	fba6 010a 	umull	r0, r1, r6, sl
 8006b6c:	4419      	add	r1, r3
 8006b6e:	4682      	mov	sl, r0
 8006b70:	468b      	mov	fp, r1
 8006b72:	2800      	cmp	r0, #0
 8006b74:	f171 0300 	sbcs.w	r3, r1, #0
 8006b78:	f2c0 8110 	blt.w	8006d9c <bme280_compensate_data+0x444>
 8006b7c:	ea4f 40da 	mov.w	r0, sl, lsr #19
 8006b80:	ea40 304b 	orr.w	r0, r0, fp, lsl #13
 8006b84:	ea4f 41eb 	mov.w	r1, fp, asr #19
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8006b88:	eb10 0208 	adds.w	r2, r0, r8
 8006b8c:	eb41 0309 	adc.w	r3, r1, r9
 8006b90:	4610      	mov	r0, r2
 8006b92:	4619      	mov	r1, r3
 8006b94:	2a00      	cmp	r2, #0
 8006b96:	f173 0600 	sbcs.w	r6, r3, #0
 8006b9a:	f2c0 8106 	blt.w	8006daa <bme280_compensate_data+0x452>
 8006b9e:	0a03      	lsrs	r3, r0, #8
 8006ba0:	ea43 6601 	orr.w	r6, r3, r1, lsl #24
 8006ba4:	120f      	asrs	r7, r1, #8
 8006ba6:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
 8006baa:	17c1      	asrs	r1, r0, #31
 8006bac:	010b      	lsls	r3, r1, #4
 8006bae:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8006bb2:	0102      	lsls	r2, r0, #4
 8006bb4:	eb12 0806 	adds.w	r8, r2, r6
 8006bb8:	eb43 0907 	adc.w	r9, r3, r7
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 8006bbc:	ea4f 71d9 	mov.w	r1, r9, lsr #31
 8006bc0:	eb18 0201 	adds.w	r2, r8, r1
 8006bc4:	f149 0300 	adc.w	r3, r9, #0
 8006bc8:	ea5f 0963 	movs.w	r9, r3, asr #1
 8006bcc:	ea4f 0832 	mov.w	r8, r2, rrx
 8006bd0:	eb18 0008 	adds.w	r0, r8, r8
 8006bd4:	eb49 0109 	adc.w	r1, r9, r9
 8006bd8:	eb10 0208 	adds.w	r2, r0, r8
 8006bdc:	eb41 0309 	adc.w	r3, r1, r9
 8006be0:	015f      	lsls	r7, r3, #5
 8006be2:	ea47 67d2 	orr.w	r7, r7, r2, lsr #27
 8006be6:	0156      	lsls	r6, r2, #5
 8006be8:	1990      	adds	r0, r2, r6
 8006bea:	eb43 0107 	adc.w	r1, r3, r7
 8006bee:	eb18 0200 	adds.w	r2, r8, r0
 8006bf2:	eb49 0301 	adc.w	r3, r9, r1
 8006bf6:	4610      	mov	r0, r2
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	2a00      	cmp	r2, #0
 8006bfc:	f173 0600 	sbcs.w	r6, r3, #0
 8006c00:	f2c0 80d8 	blt.w	8006db4 <bme280_compensate_data+0x45c>
 8006c04:	09c3      	lsrs	r3, r0, #7
 8006c06:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8006c0a:	4a73      	ldr	r2, [pc, #460]	; (8006dd8 <bme280_compensate_data+0x480>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	bf28      	it	cs
 8006c10:	4613      	movcs	r3, r2
 8006c12:	4a72      	ldr	r2, [pc, #456]	; (8006ddc <bme280_compensate_data+0x484>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	bf38      	it	cc
 8006c18:	4613      	movcc	r3, r2
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8006c1a:	9a02      	ldr	r2, [sp, #8]
 8006c1c:	6013      	str	r3, [r2, #0]
		if (sensor_comp & BME280_HUM) {
 8006c1e:	f015 0f04 	tst.w	r5, #4
 8006c22:	f000 80d7 	beq.w	8006dd4 <bme280_compensate_data+0x47c>
	var1 = calib_data->t_fine - ((int32_t)76800);
 8006c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c28:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 8006c2c:	9a03      	ldr	r2, [sp, #12]
 8006c2e:	6891      	ldr	r1, [r2, #8]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8006c30:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 8006c34:	0512      	lsls	r2, r2, #20
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8006c36:	ebc2 3181 	rsb	r1, r2, r1, lsl #14
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 8006c3a:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8006c3e:	fb03 1212 	mls	r2, r3, r2, r1
 8006c42:	f512 4280 	adds.w	r2, r2, #16384	; 0x4000
 8006c46:	bf44      	itt	mi
 8006c48:	f502 42ff 	addmi.w	r2, r2, #32640	; 0x7f80
 8006c4c:	327f      	addmi	r2, #127	; 0x7f
 8006c4e:	13d2      	asrs	r2, r2, #15
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8006c50:	7f21      	ldrb	r1, [r4, #28]
 8006c52:	fb03 f101 	mul.w	r1, r3, r1
 8006c56:	2900      	cmp	r1, #0
 8006c58:	bfb8      	it	lt
 8006c5a:	f201 71ff 	addwlt	r1, r1, #2047	; 0x7ff
 8006c5e:	12c9      	asrs	r1, r1, #11
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8006c60:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8006c64:	f994 0022 	ldrsb.w	r0, [r4, #34]	; 0x22
 8006c68:	fb03 f300 	mul.w	r3, r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	bfb8      	it	lt
 8006c70:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8006c74:	129b      	asrs	r3, r3, #10
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8006c76:	fb03 f301 	mul.w	r3, r3, r1
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	bfb8      	it	lt
 8006c7e:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8006c82:	129b      	asrs	r3, r3, #10
 8006c84:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8006c88:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
 8006c8c:	fb01 f303 	mul.w	r3, r1, r3
 8006c90:	f513 5300 	adds.w	r3, r3, #8192	; 0x2000
 8006c94:	bf44      	itt	mi
 8006c96:	f503 537f 	addmi.w	r3, r3, #16320	; 0x3fc0
 8006c9a:	333f      	addmi	r3, #63	; 0x3f
 8006c9c:	139b      	asrs	r3, r3, #14
	var3 = var5 * var2;
 8006c9e:	fb02 f303 	mul.w	r3, r2, r3
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	bfbc      	itt	lt
 8006ca8:	f503 42ff 	addlt.w	r2, r3, #32640	; 0x7f80
 8006cac:	327f      	addlt	r2, #127	; 0x7f
 8006cae:	13d2      	asrs	r2, r2, #15
 8006cb0:	fb02 f202 	mul.w	r2, r2, r2
 8006cb4:	2a00      	cmp	r2, #0
 8006cb6:	bfb8      	it	lt
 8006cb8:	327f      	addlt	r2, #127	; 0x7f
 8006cba:	11d2      	asrs	r2, r2, #7
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8006cbc:	7e21      	ldrb	r1, [r4, #24]
 8006cbe:	fb01 f202 	mul.w	r2, r1, r2
 8006cc2:	2a00      	cmp	r2, #0
 8006cc4:	bfb8      	it	lt
 8006cc6:	320f      	addlt	r2, #15
 8006cc8:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	var5 = (var5 < 0 ? 0 : var5);
 8006ccc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8006cd0:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8006cd4:	bfa8      	it	ge
 8006cd6:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
	humidity = (uint32_t)(var5 / 4096);
 8006cda:	461a      	mov	r2, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	bfb8      	it	lt
 8006ce0:	f603 72ff 	addwlt	r2, r3, #4095	; 0xfff
 8006ce4:	1312      	asrs	r2, r2, #12
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8006ce6:	f5b2 3fc8 	cmp.w	r2, #102400	; 0x19000
 8006cea:	bf28      	it	cs
 8006cec:	f44f 32c8 	movcs.w	r2, #102400	; 0x19000
 8006cf0:	9b02      	ldr	r3, [sp, #8]
 8006cf2:	609a      	str	r2, [r3, #8]
	int8_t rslt = BME280_OK;
 8006cf4:	2000      	movs	r0, #0
}
 8006cf6:	b007      	add	sp, #28
 8006cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 8006cfc:	6867      	ldr	r7, [r4, #4]
 8006cfe:	8819      	ldrh	r1, [r3, #0]
 8006d00:	004e      	lsls	r6, r1, #1
 8006d02:	ebc6 05d7 	rsb	r5, r6, r7, lsr #3
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8006d06:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8006d0a:	fb06 f605 	mul.w	r6, r6, r5
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8006d0e:	ebc1 1117 	rsb	r1, r1, r7, lsr #4
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8006d12:	fb01 f101 	mul.w	r1, r1, r1
 8006d16:	2900      	cmp	r1, #0
 8006d18:	bfb8      	it	lt
 8006d1a:	f601 71ff 	addwlt	r1, r1, #4095	; 0xfff
 8006d1e:	1309      	asrs	r1, r1, #12
 8006d20:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8006d24:	fb05 f501 	mul.w	r5, r5, r1
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8006d28:	4631      	mov	r1, r6
 8006d2a:	2e00      	cmp	r6, #0
 8006d2c:	bfb8      	it	lt
 8006d2e:	f206 71ff 	addwlt	r1, r6, #2047	; 0x7ff
 8006d32:	12c9      	asrs	r1, r1, #11
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8006d34:	462e      	mov	r6, r5
 8006d36:	2d00      	cmp	r5, #0
 8006d38:	bfbc      	itt	lt
 8006d3a:	f505 567f 	addlt.w	r6, r5, #16320	; 0x3fc0
 8006d3e:	363f      	addlt	r6, #63	; 0x3f
	calib_data->t_fine = var1 + var2;
 8006d40:	eb01 31a6 	add.w	r1, r1, r6, asr #14
 8006d44:	6259      	str	r1, [r3, #36]	; 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8006d46:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006d4a:	3180      	adds	r1, #128	; 0x80
 8006d4c:	bf48      	it	mi
 8006d4e:	31ff      	addmi	r1, #255	; 0xff
 8006d50:	1209      	asrs	r1, r1, #8
 8006d52:	f242 1534 	movw	r5, #8500	; 0x2134
 8006d56:	42a9      	cmp	r1, r5
 8006d58:	bfa8      	it	ge
 8006d5a:	4629      	movge	r1, r5
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8006d5c:	4d20      	ldr	r5, [pc, #128]	; (8006de0 <bme280_compensate_data+0x488>)
 8006d5e:	42a9      	cmp	r1, r5
 8006d60:	bfb8      	it	lt
 8006d62:	4629      	movlt	r1, r5
 8006d64:	6051      	str	r1, [r2, #4]
 8006d66:	e60c      	b.n	8006982 <bme280_compensate_data+0x2a>
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8006d68:	f110 0aff 	adds.w	sl, r0, #255	; 0xff
 8006d6c:	f141 0b00 	adc.w	fp, r1, #0
 8006d70:	e641      	b.n	80069f6 <bme280_compensate_data+0x9e>
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8006d72:	f110 3aff 	adds.w	sl, r0, #4294967295	; 0xffffffff
 8006d76:	f141 0b01 	adc.w	fp, r1, #1
 8006d7a:	e656      	b.n	8006a2a <bme280_compensate_data+0xd2>
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8006d7c:	f641 76ff 	movw	r6, #8191	; 0x1fff
 8006d80:	2700      	movs	r7, #0
 8006d82:	eb16 010a 	adds.w	r1, r6, sl
 8006d86:	eb47 020b 	adc.w	r2, r7, fp
 8006d8a:	e6bf      	b.n	8006b0c <bme280_compensate_data+0x1b4>
 8006d8c:	f06f 467e 	mvn.w	r6, #4261412864	; 0xfe000000
 8006d90:	2700      	movs	r7, #0
 8006d92:	eb16 0802 	adds.w	r8, r6, r2
 8006d96:	eb47 0903 	adc.w	r9, r7, r3
 8006d9a:	e6d4      	b.n	8006b46 <bme280_compensate_data+0x1ee>
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8006d9c:	4e11      	ldr	r6, [pc, #68]	; (8006de4 <bme280_compensate_data+0x48c>)
 8006d9e:	2700      	movs	r7, #0
 8006da0:	eb16 0a00 	adds.w	sl, r6, r0
 8006da4:	eb47 0b01 	adc.w	fp, r7, r1
 8006da8:	e6e8      	b.n	8006b7c <bme280_compensate_data+0x224>
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8006daa:	f112 00ff 	adds.w	r0, r2, #255	; 0xff
 8006dae:	f143 0100 	adc.w	r1, r3, #0
 8006db2:	e6f4      	b.n	8006b9e <bme280_compensate_data+0x246>
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 8006db4:	f112 007f 	adds.w	r0, r2, #127	; 0x7f
 8006db8:	f143 0100 	adc.w	r1, r3, #0
 8006dbc:	e722      	b.n	8006c04 <bme280_compensate_data+0x2ac>
		pressure = pressure_min;
 8006dbe:	4b07      	ldr	r3, [pc, #28]	; (8006ddc <bme280_compensate_data+0x484>)
 8006dc0:	e72b      	b.n	8006c1a <bme280_compensate_data+0x2c2>
		rslt = BME280_E_NULL_PTR;
 8006dc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006dc6:	4770      	bx	lr
		rslt = BME280_E_NULL_PTR;
 8006dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dcc:	e793      	b.n	8006cf6 <bme280_compensate_data+0x39e>
 8006dce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dd2:	e790      	b.n	8006cf6 <bme280_compensate_data+0x39e>
	int8_t rslt = BME280_OK;
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	e78e      	b.n	8006cf6 <bme280_compensate_data+0x39e>
 8006dd8:	00a7d8c0 	.word	0x00a7d8c0
 8006ddc:	002dc6c0 	.word	0x002dc6c0
 8006de0:	fffff060 	.word	0xfffff060
 8006de4:	0007ffff 	.word	0x0007ffff

08006de8 <bme280_get_sensor_data>:
{
 8006de8:	b570      	push	{r4, r5, r6, lr}
 8006dea:	b086      	sub	sp, #24
 8006dec:	4606      	mov	r6, r0
 8006dee:	460d      	mov	r5, r1
 8006df0:	4614      	mov	r4, r2
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8006df2:	2300      	movs	r3, #0
 8006df4:	9304      	str	r3, [sp, #16]
 8006df6:	9305      	str	r3, [sp, #20]
	struct bme280_uncomp_data uncomp_data = {0};
 8006df8:	9301      	str	r3, [sp, #4]
 8006dfa:	9302      	str	r3, [sp, #8]
 8006dfc:	9303      	str	r3, [sp, #12]
	rslt = null_ptr_check(dev);
 8006dfe:	4610      	mov	r0, r2
 8006e00:	f7ff fac8 	bl	8006394 <null_ptr_check>
	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8006e04:	b9c0      	cbnz	r0, 8006e38 <bme280_get_sensor_data+0x50>
 8006e06:	b1d5      	cbz	r5, 8006e3e <bme280_get_sensor_data+0x56>
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8006e08:	4623      	mov	r3, r4
 8006e0a:	2208      	movs	r2, #8
 8006e0c:	a904      	add	r1, sp, #16
 8006e0e:	20f7      	movs	r0, #247	; 0xf7
 8006e10:	f7ff fad4 	bl	80063bc <bme280_get_regs>
		if (rslt == BME280_OK) {
 8006e14:	4603      	mov	r3, r0
 8006e16:	b110      	cbz	r0, 8006e1e <bme280_get_sensor_data+0x36>
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	b006      	add	sp, #24
 8006e1c:	bd70      	pop	{r4, r5, r6, pc}
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8006e1e:	a901      	add	r1, sp, #4
 8006e20:	a804      	add	r0, sp, #16
 8006e22:	f7ff fd81 	bl	8006928 <bme280_parse_sensor_data>
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8006e26:	f104 0310 	add.w	r3, r4, #16
 8006e2a:	462a      	mov	r2, r5
 8006e2c:	a901      	add	r1, sp, #4
 8006e2e:	4630      	mov	r0, r6
 8006e30:	f7ff fd92 	bl	8006958 <bme280_compensate_data>
 8006e34:	4603      	mov	r3, r0
 8006e36:	e7ef      	b.n	8006e18 <bme280_get_sensor_data+0x30>
		rslt = BME280_E_NULL_PTR;
 8006e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e3c:	e7ec      	b.n	8006e18 <bme280_get_sensor_data+0x30>
 8006e3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e42:	e7e9      	b.n	8006e18 <bme280_get_sensor_data+0x30>
 8006e44:	0000      	movs	r0, r0
	...

08006e48 <TSL2561_getLux>:
// ms: integration time in ms, from setTiming() or from manual integration
// CH0, CH1: results from getData()
// lux will be set to resulting lux calculation
// returns true (1) if calculation was successful
// RETURNS false (0) AND lux = 0.0 IF EITHER SENSOR WAS SATURATED (0XFFFF)
bool TSL2561_getLux(unsigned char gain, unsigned int ms, unsigned int CH0, unsigned int CH1, double *lux) {
 8006e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e4c:	b082      	sub	sp, #8
	double ratio, d0, d1;
	// Determine if either sensor saturated (0xFFFF)
	// If so, abandon ship (calculation will not be accurate)
	if ((CH0 == 0xFFFF) || (CH1 == 0xFFFF)) {
 8006e4e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8006e52:	42a2      	cmp	r2, r4
 8006e54:	d06a      	beq.n	8006f2c <TSL2561_getLux+0xe4>
 8006e56:	42a3      	cmp	r3, r4
 8006e58:	d068      	beq.n	8006f2c <TSL2561_getLux+0xe4>
 8006e5a:	461c      	mov	r4, r3
 8006e5c:	4688      	mov	r8, r1
 8006e5e:	4682      	mov	sl, r0
		*lux = 0.0;
		return false;
	}
	// Convert from unsigned integer to floating point
	d0 = CH0; d1 = CH1;
 8006e60:	4610      	mov	r0, r2
 8006e62:	f7f9 fab7 	bl	80003d4 <__aeabi_ui2d>
 8006e66:	4606      	mov	r6, r0
 8006e68:	460f      	mov	r7, r1
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f7f9 fab2 	bl	80003d4 <__aeabi_ui2d>
 8006e70:	e9cd 0100 	strd	r0, r1, [sp]
	// We will need the ratio for subsequent calculations
	ratio = d1 / d0;
 8006e74:	4632      	mov	r2, r6
 8006e76:	463b      	mov	r3, r7
 8006e78:	f7f9 fc50 	bl	800071c <__aeabi_ddiv>
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	460d      	mov	r5, r1
	// Normalize for integration time
	d0 *= (402.0/ms);
 8006e80:	4640      	mov	r0, r8
 8006e82:	f7f9 faa7 	bl	80003d4 <__aeabi_ui2d>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	a169      	add	r1, pc, #420	; (adr r1, 8007030 <TSL2561_getLux+0x1e8>)
 8006e8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e90:	f7f9 fc44 	bl	800071c <__aeabi_ddiv>
 8006e94:	4680      	mov	r8, r0
 8006e96:	4689      	mov	r9, r1
 8006e98:	4632      	mov	r2, r6
 8006e9a:	463b      	mov	r3, r7
 8006e9c:	f7f9 fb14 	bl	80004c8 <__aeabi_dmul>
 8006ea0:	4606      	mov	r6, r0
 8006ea2:	460f      	mov	r7, r1
	d1 *= (402.0/ms);
 8006ea4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ea8:	4640      	mov	r0, r8
 8006eaa:	4649      	mov	r1, r9
 8006eac:	f7f9 fb0c 	bl	80004c8 <__aeabi_dmul>
 8006eb0:	4680      	mov	r8, r0
 8006eb2:	4689      	mov	r9, r1
	// Normalize for gain
	if (!gain) {
 8006eb4:	f1ba 0f00 	cmp.w	sl, #0
 8006eb8:	d10f      	bne.n	8006eda <TSL2561_getLux+0x92>
		d0 *= 16;
 8006eba:	2200      	movs	r2, #0
 8006ebc:	4b76      	ldr	r3, [pc, #472]	; (8007098 <TSL2561_getLux+0x250>)
 8006ebe:	4630      	mov	r0, r6
 8006ec0:	4639      	mov	r1, r7
 8006ec2:	f7f9 fb01 	bl	80004c8 <__aeabi_dmul>
 8006ec6:	4606      	mov	r6, r0
 8006ec8:	460f      	mov	r7, r1
		d1 *= 16;
 8006eca:	2200      	movs	r2, #0
 8006ecc:	4b72      	ldr	r3, [pc, #456]	; (8007098 <TSL2561_getLux+0x250>)
 8006ece:	4640      	mov	r0, r8
 8006ed0:	4649      	mov	r1, r9
 8006ed2:	f7f9 faf9 	bl	80004c8 <__aeabi_dmul>
 8006ed6:	4680      	mov	r8, r0
 8006ed8:	4689      	mov	r9, r1
	}

	// Determine lux per datasheet equations:
	if (ratio < 0.5) {
 8006eda:	2200      	movs	r2, #0
 8006edc:	4b6f      	ldr	r3, [pc, #444]	; (800709c <TSL2561_getLux+0x254>)
 8006ede:	4620      	mov	r0, r4
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	f7f9 fd63 	bl	80009ac <__aeabi_dcmplt>
 8006ee6:	bb50      	cbnz	r0, 8006f3e <TSL2561_getLux+0xf6>
		*lux = 0.0304 * d0 - 0.062 * d0 * pow(ratio,1.4);
		return true;
	}
	if (ratio < 0.61) {
 8006ee8:	a353      	add	r3, pc, #332	; (adr r3, 8007038 <TSL2561_getLux+0x1f0>)
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	4620      	mov	r0, r4
 8006ef0:	4629      	mov	r1, r5
 8006ef2:	f7f9 fd5b 	bl	80009ac <__aeabi_dcmplt>
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	d149      	bne.n	8006f8e <TSL2561_getLux+0x146>
		*lux = 0.0224 * d0 - 0.031 * d1;
		return true;
	}
	if (ratio < 0.80) {
 8006efa:	a351      	add	r3, pc, #324	; (adr r3, 8007040 <TSL2561_getLux+0x1f8>)
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	4620      	mov	r0, r4
 8006f02:	4629      	mov	r1, r5
 8006f04:	f7f9 fd52 	bl	80009ac <__aeabi_dcmplt>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	d15b      	bne.n	8006fc4 <TSL2561_getLux+0x17c>
		*lux = 0.0128 * d0 - 0.0153 * d1;
		return true;
	}
	if (ratio < 1.30) {
 8006f0c:	a34e      	add	r3, pc, #312	; (adr r3, 8007048 <TSL2561_getLux+0x200>)
 8006f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f12:	4620      	mov	r0, r4
 8006f14:	4629      	mov	r1, r5
 8006f16:	f7f9 fd49 	bl	80009ac <__aeabi_dcmplt>
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	d16d      	bne.n	8006ffa <TSL2561_getLux+0x1b2>
		*lux = 0.00146 * d0 - 0.00112 * d1;
		return true;
	}
	// if (ratio > 1.30)
	*lux = 0.0;
 8006f1e:	2200      	movs	r2, #0
 8006f20:	2300      	movs	r3, #0
 8006f22:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f24:	e9c1 2300 	strd	r2, r3, [r1]
	return true;
 8006f28:	2001      	movs	r0, #1
 8006f2a:	e005      	b.n	8006f38 <TSL2561_getLux+0xf0>
		*lux = 0.0;
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2300      	movs	r3, #0
 8006f30:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f32:	e9c1 2300 	strd	r2, r3, [r1]
		return false;
 8006f36:	2000      	movs	r0, #0
}
 8006f38:	b002      	add	sp, #8
 8006f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		*lux = 0.0304 * d0 - 0.062 * d0 * pow(ratio,1.4);
 8006f3e:	a344      	add	r3, pc, #272	; (adr r3, 8007050 <TSL2561_getLux+0x208>)
 8006f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f44:	4620      	mov	r0, r4
 8006f46:	4629      	mov	r1, r5
 8006f48:	f003 fc60 	bl	800a80c <pow>
 8006f4c:	4680      	mov	r8, r0
 8006f4e:	4689      	mov	r9, r1
 8006f50:	a341      	add	r3, pc, #260	; (adr r3, 8007058 <TSL2561_getLux+0x210>)
 8006f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f56:	4630      	mov	r0, r6
 8006f58:	4639      	mov	r1, r7
 8006f5a:	f7f9 fab5 	bl	80004c8 <__aeabi_dmul>
 8006f5e:	4604      	mov	r4, r0
 8006f60:	460d      	mov	r5, r1
 8006f62:	a33f      	add	r3, pc, #252	; (adr r3, 8007060 <TSL2561_getLux+0x218>)
 8006f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f68:	4630      	mov	r0, r6
 8006f6a:	4639      	mov	r1, r7
 8006f6c:	f7f9 faac 	bl	80004c8 <__aeabi_dmul>
 8006f70:	4642      	mov	r2, r8
 8006f72:	464b      	mov	r3, r9
 8006f74:	f7f9 faa8 	bl	80004c8 <__aeabi_dmul>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	4629      	mov	r1, r5
 8006f80:	f7f9 f8ea 	bl	8000158 <__aeabi_dsub>
 8006f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f86:	e9c3 0100 	strd	r0, r1, [r3]
		return true;
 8006f8a:	2001      	movs	r0, #1
 8006f8c:	e7d4      	b.n	8006f38 <TSL2561_getLux+0xf0>
		*lux = 0.0224 * d0 - 0.031 * d1;
 8006f8e:	a336      	add	r3, pc, #216	; (adr r3, 8007068 <TSL2561_getLux+0x220>)
 8006f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f94:	4630      	mov	r0, r6
 8006f96:	4639      	mov	r1, r7
 8006f98:	f7f9 fa96 	bl	80004c8 <__aeabi_dmul>
 8006f9c:	4604      	mov	r4, r0
 8006f9e:	460d      	mov	r5, r1
 8006fa0:	a333      	add	r3, pc, #204	; (adr r3, 8007070 <TSL2561_getLux+0x228>)
 8006fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa6:	4640      	mov	r0, r8
 8006fa8:	4649      	mov	r1, r9
 8006faa:	f7f9 fa8d 	bl	80004c8 <__aeabi_dmul>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	f7f9 f8cf 	bl	8000158 <__aeabi_dsub>
 8006fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fbc:	e9c3 0100 	strd	r0, r1, [r3]
		return true;
 8006fc0:	2001      	movs	r0, #1
 8006fc2:	e7b9      	b.n	8006f38 <TSL2561_getLux+0xf0>
		*lux = 0.0128 * d0 - 0.0153 * d1;
 8006fc4:	a32c      	add	r3, pc, #176	; (adr r3, 8007078 <TSL2561_getLux+0x230>)
 8006fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fca:	4630      	mov	r0, r6
 8006fcc:	4639      	mov	r1, r7
 8006fce:	f7f9 fa7b 	bl	80004c8 <__aeabi_dmul>
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	460d      	mov	r5, r1
 8006fd6:	a32a      	add	r3, pc, #168	; (adr r3, 8007080 <TSL2561_getLux+0x238>)
 8006fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fdc:	4640      	mov	r0, r8
 8006fde:	4649      	mov	r1, r9
 8006fe0:	f7f9 fa72 	bl	80004c8 <__aeabi_dmul>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4620      	mov	r0, r4
 8006fea:	4629      	mov	r1, r5
 8006fec:	f7f9 f8b4 	bl	8000158 <__aeabi_dsub>
 8006ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ff2:	e9c3 0100 	strd	r0, r1, [r3]
		return true;
 8006ff6:	2001      	movs	r0, #1
 8006ff8:	e79e      	b.n	8006f38 <TSL2561_getLux+0xf0>
		*lux = 0.00146 * d0 - 0.00112 * d1;
 8006ffa:	a323      	add	r3, pc, #140	; (adr r3, 8007088 <TSL2561_getLux+0x240>)
 8006ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007000:	4630      	mov	r0, r6
 8007002:	4639      	mov	r1, r7
 8007004:	f7f9 fa60 	bl	80004c8 <__aeabi_dmul>
 8007008:	4604      	mov	r4, r0
 800700a:	460d      	mov	r5, r1
 800700c:	a320      	add	r3, pc, #128	; (adr r3, 8007090 <TSL2561_getLux+0x248>)
 800700e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007012:	4640      	mov	r0, r8
 8007014:	4649      	mov	r1, r9
 8007016:	f7f9 fa57 	bl	80004c8 <__aeabi_dmul>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4620      	mov	r0, r4
 8007020:	4629      	mov	r1, r5
 8007022:	f7f9 f899 	bl	8000158 <__aeabi_dsub>
 8007026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007028:	e9c3 0100 	strd	r0, r1, [r3]
		return true;
 800702c:	2001      	movs	r0, #1
 800702e:	e783      	b.n	8006f38 <TSL2561_getLux+0xf0>
 8007030:	00000000 	.word	0x00000000
 8007034:	40792000 	.word	0x40792000
 8007038:	b851eb85 	.word	0xb851eb85
 800703c:	3fe3851e 	.word	0x3fe3851e
 8007040:	9999999a 	.word	0x9999999a
 8007044:	3fe99999 	.word	0x3fe99999
 8007048:	cccccccd 	.word	0xcccccccd
 800704c:	3ff4cccc 	.word	0x3ff4cccc
 8007050:	66666666 	.word	0x66666666
 8007054:	3ff66666 	.word	0x3ff66666
 8007058:	77318fc5 	.word	0x77318fc5
 800705c:	3f9f212d 	.word	0x3f9f212d
 8007060:	c8b43958 	.word	0xc8b43958
 8007064:	3fafbe76 	.word	0x3fafbe76
 8007068:	8db8bac7 	.word	0x8db8bac7
 800706c:	3f96f006 	.word	0x3f96f006
 8007070:	c8b43958 	.word	0xc8b43958
 8007074:	3f9fbe76 	.word	0x3f9fbe76
 8007078:	eb1c432d 	.word	0xeb1c432d
 800707c:	3f8a36e2 	.word	0x3f8a36e2
 8007080:	3d07c84b 	.word	0x3d07c84b
 8007084:	3f8f559b 	.word	0x3f8f559b
 8007088:	102363b2 	.word	0x102363b2
 800708c:	3f57ebaf 	.word	0x3f57ebaf
 8007090:	d7c6fbd2 	.word	0xd7c6fbd2
 8007094:	3f52599e 	.word	0x3f52599e
 8007098:	40300000 	.word	0x40300000
 800709c:	3fe00000 	.word	0x3fe00000

080070a0 <TSL2561_WriteByte>:
		return true;
	}
	return false;
}

bool TSL2561_WriteByte(uint8_t regAdr, uint8_t value) {
 80070a0:	b500      	push	{lr}
 80070a2:	b085      	sub	sp, #20
	uint8_t data[2] = {0, 0};
	data[0] = ((regAdr & 0x0F) | TSL2561_CMD);
 80070a4:	f000 000f 	and.w	r0, r0, #15
 80070a8:	f060 007f 	orn	r0, r0, #127	; 0x7f
 80070ac:	f88d 000c 	strb.w	r0, [sp, #12]
	data[1] = value;
 80070b0:	f88d 100d 	strb.w	r1, [sp, #13]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, data, 2, 1000) == HAL_OK) {
 80070b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	2302      	movs	r3, #2
 80070bc:	aa03      	add	r2, sp, #12
 80070be:	2172      	movs	r1, #114	; 0x72
 80070c0:	4804      	ldr	r0, [pc, #16]	; (80070d4 <TSL2561_WriteByte+0x34>)
 80070c2:	f001 f9cd 	bl	8008460 <HAL_I2C_Master_Transmit>
		return true;
	}
	else {
		return false;
	}
}
 80070c6:	fab0 f080 	clz	r0, r0
 80070ca:	0940      	lsrs	r0, r0, #5
 80070cc:	b005      	add	sp, #20
 80070ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80070d2:	bf00      	nop
 80070d4:	20002440 	.word	0x20002440

080070d8 <TSL2561_setPowerUp>:
bool TSL2561_setPowerUp(void) {
 80070d8:	b508      	push	{r3, lr}
	return(TSL2561_WriteByte(TSL2561_REG_CONTROL,0x03));
 80070da:	2103      	movs	r1, #3
 80070dc:	2000      	movs	r0, #0
 80070de:	f7ff ffdf 	bl	80070a0 <TSL2561_WriteByte>
}
 80070e2:	bd08      	pop	{r3, pc}

080070e4 <TSL2561_ReadByte>:

bool TSL2561_ReadByte(uint8_t regAdr, uint8_t *value) {
 80070e4:	b510      	push	{r4, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	460c      	mov	r4, r1
	uint8_t data = ((regAdr & 0x0F) | TSL2561_CMD);
 80070ea:	f000 000f 	and.w	r0, r0, #15
 80070ee:	f060 007f 	orn	r0, r0, #127	; 0x7f
 80070f2:	aa04      	add	r2, sp, #16
 80070f4:	f802 0d01 	strb.w	r0, [r2, #-1]!
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK) {
 80070f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	2301      	movs	r3, #1
 8007100:	2172      	movs	r1, #114	; 0x72
 8007102:	480a      	ldr	r0, [pc, #40]	; (800712c <TSL2561_ReadByte+0x48>)
 8007104:	f001 f9ac 	bl	8008460 <HAL_I2C_Master_Transmit>
 8007108:	b110      	cbz	r0, 8007110 <TSL2561_ReadByte+0x2c>
		else {
			return false;
		}
	}
	else {
		return false;
 800710a:	2000      	movs	r0, #0
	}
}
 800710c:	b004      	add	sp, #16
 800710e:	bd10      	pop	{r4, pc}
		if(HAL_I2C_Master_Receive(&hi2c1, (uint16_t) TSL2561_ADDR, value, 1, 1000) == HAL_OK) {
 8007110:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	2301      	movs	r3, #1
 8007118:	4622      	mov	r2, r4
 800711a:	2172      	movs	r1, #114	; 0x72
 800711c:	4803      	ldr	r0, [pc, #12]	; (800712c <TSL2561_ReadByte+0x48>)
 800711e:	f001 faa1 	bl	8008664 <HAL_I2C_Master_Receive>
 8007122:	fab0 f080 	clz	r0, r0
 8007126:	0940      	lsrs	r0, r0, #5
 8007128:	e7f0      	b.n	800710c <TSL2561_ReadByte+0x28>
 800712a:	bf00      	nop
 800712c:	20002440 	.word	0x20002440

08007130 <TSL2561_setTiming>:
bool TSL2561_setTiming(bool gain, uint8_t time) {
 8007130:	b530      	push	{r4, r5, lr}
 8007132:	b083      	sub	sp, #12
 8007134:	4605      	mov	r5, r0
 8007136:	460c      	mov	r4, r1
	if (TSL2561_ReadByte(TSL2561_REG_TIMING, &timing)) {
 8007138:	f10d 0107 	add.w	r1, sp, #7
 800713c:	2001      	movs	r0, #1
 800713e:	f7ff ffd1 	bl	80070e4 <TSL2561_ReadByte>
 8007142:	4603      	mov	r3, r0
 8007144:	b198      	cbz	r0, 800716e <TSL2561_setTiming+0x3e>
		if (gain)
 8007146:	b1ad      	cbz	r5, 8007174 <TSL2561_setTiming+0x44>
			timing |= 0x10;
 8007148:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800714c:	f043 0310 	orr.w	r3, r3, #16
 8007150:	f88d 3007 	strb.w	r3, [sp, #7]
		timing &= ~0x03;
 8007154:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8007158:	f021 0103 	bic.w	r1, r1, #3
		timing |= (time & 0x03);
 800715c:	f004 0403 	and.w	r4, r4, #3
 8007160:	4321      	orrs	r1, r4
 8007162:	f88d 1007 	strb.w	r1, [sp, #7]
		if (TSL2561_WriteByte(TSL2561_REG_TIMING, timing))
 8007166:	2001      	movs	r0, #1
 8007168:	f7ff ff9a 	bl	80070a0 <TSL2561_WriteByte>
 800716c:	4603      	mov	r3, r0
}
 800716e:	4618      	mov	r0, r3
 8007170:	b003      	add	sp, #12
 8007172:	bd30      	pop	{r4, r5, pc}
			timing &= ~0x10;
 8007174:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007178:	f023 0310 	bic.w	r3, r3, #16
 800717c:	f88d 3007 	strb.w	r3, [sp, #7]
 8007180:	e7e8      	b.n	8007154 <TSL2561_setTiming+0x24>

08007182 <TSL2561_setTiming_ms>:
bool TSL2561_setTiming_ms(bool gain, uint8_t time, unsigned int *ms) {
 8007182:	b508      	push	{r3, lr}
	switch (time) {
 8007184:	2901      	cmp	r1, #1
 8007186:	d00a      	beq.n	800719e <TSL2561_setTiming_ms+0x1c>
 8007188:	b121      	cbz	r1, 8007194 <TSL2561_setTiming_ms+0x12>
 800718a:	2902      	cmp	r1, #2
 800718c:	d00a      	beq.n	80071a4 <TSL2561_setTiming_ms+0x22>
		default: *ms = 0;
 800718e:	2300      	movs	r3, #0
 8007190:	6013      	str	r3, [r2, #0]
 8007192:	e001      	b.n	8007198 <TSL2561_setTiming_ms+0x16>
		case 0:  *ms = 14; break;
 8007194:	230e      	movs	r3, #14
 8007196:	6013      	str	r3, [r2, #0]
	return(TSL2561_setTiming(gain, time));
 8007198:	f7ff ffca 	bl	8007130 <TSL2561_setTiming>
}
 800719c:	bd08      	pop	{r3, pc}
		case 1:  *ms = 101; break;
 800719e:	2365      	movs	r3, #101	; 0x65
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	e7f9      	b.n	8007198 <TSL2561_setTiming_ms+0x16>
		case 2:  *ms = 402; break;
 80071a4:	f44f 73c9 	mov.w	r3, #402	; 0x192
 80071a8:	6013      	str	r3, [r2, #0]
 80071aa:	e7f5      	b.n	8007198 <TSL2561_setTiming_ms+0x16>

080071ac <TSL2561_readUInt>:
// Reads an unsigned integer (16 bits) from a TSL2561 address (low byte first)
// Address: TSL2561 address (0 to 15), low byte first
// Value will be set to stored unsigned integer
// Returns true (1) if successful, false (0) if there was an I2C error
// (Also see getError() above)
bool TSL2561_readUInt(uint8_t address, unsigned int *value) {
 80071ac:	b510      	push	{r4, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	460c      	mov	r4, r1
	char high, low;
	// Set up command byte for read
	uint8_t data = ((address & 0x0F) | TSL2561_CMD);
 80071b2:	f000 000f 	and.w	r0, r0, #15
 80071b6:	f060 007f 	orn	r0, r0, #127	; 0x7f
 80071ba:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t tmpValue[2] = {0, 0};
 80071be:	2300      	movs	r3, #0
 80071c0:	f88d 300c 	strb.w	r3, [sp, #12]
 80071c4:	f88d 300d 	strb.w	r3, [sp, #13]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK) {
 80071c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	2301      	movs	r3, #1
 80071d0:	f10d 020f 	add.w	r2, sp, #15
 80071d4:	2172      	movs	r1, #114	; 0x72
 80071d6:	480e      	ldr	r0, [pc, #56]	; (8007210 <TSL2561_readUInt+0x64>)
 80071d8:	f001 f942 	bl	8008460 <HAL_I2C_Master_Transmit>
 80071dc:	b110      	cbz	r0, 80071e4 <TSL2561_readUInt+0x38>
		else {
			return false;
		}
	}
	else {
		return false;
 80071de:	2000      	movs	r0, #0
	}
}
 80071e0:	b004      	add	sp, #16
 80071e2:	bd10      	pop	{r4, pc}
		if(HAL_I2C_Master_Receive(&hi2c1, (uint16_t) TSL2561_ADDR, tmpValue, 2, 1000) == HAL_OK) {
 80071e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	2302      	movs	r3, #2
 80071ec:	aa03      	add	r2, sp, #12
 80071ee:	2172      	movs	r1, #114	; 0x72
 80071f0:	4807      	ldr	r0, [pc, #28]	; (8007210 <TSL2561_readUInt+0x64>)
 80071f2:	f001 fa37 	bl	8008664 <HAL_I2C_Master_Receive>
 80071f6:	b940      	cbnz	r0, 800720a <TSL2561_readUInt+0x5e>
			*value = high << 8 |  low;
 80071f8:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80071fc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8007200:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007204:	6023      	str	r3, [r4, #0]
			return true;
 8007206:	2001      	movs	r0, #1
 8007208:	e7ea      	b.n	80071e0 <TSL2561_readUInt+0x34>
			return false;
 800720a:	2000      	movs	r0, #0
 800720c:	e7e8      	b.n	80071e0 <TSL2561_readUInt+0x34>
 800720e:	bf00      	nop
 8007210:	20002440 	.word	0x20002440

08007214 <TSL2561_getData>:
bool TSL2561_getData(unsigned int *data0, unsigned int *data1) {
 8007214:	b510      	push	{r4, lr}
 8007216:	460c      	mov	r4, r1
	return TSL2561_readUInt(TSL2561_REG_DATA_0, data0) && TSL2561_readUInt(TSL2561_REG_DATA_1, data1);
 8007218:	4601      	mov	r1, r0
 800721a:	200c      	movs	r0, #12
 800721c:	f7ff ffc6 	bl	80071ac <TSL2561_readUInt>
 8007220:	b918      	cbnz	r0, 800722a <TSL2561_getData+0x16>
 8007222:	2000      	movs	r0, #0
}
 8007224:	f000 0001 	and.w	r0, r0, #1
 8007228:	bd10      	pop	{r4, pc}
	return TSL2561_readUInt(TSL2561_REG_DATA_0, data0) && TSL2561_readUInt(TSL2561_REG_DATA_1, data1);
 800722a:	4621      	mov	r1, r4
 800722c:	200e      	movs	r0, #14
 800722e:	f7ff ffbd 	bl	80071ac <TSL2561_readUInt>
 8007232:	e7f7      	b.n	8007224 <TSL2561_getData+0x10>

08007234 <user_i2c_read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8007234:	b570      	push	{r4, r5, r6, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	4604      	mov	r4, r0
 800723a:	4615      	mov	r5, r2
 800723c:	461e      	mov	r6, r3
 800723e:	aa04      	add	r2, sp, #16
 8007240:	f802 1d01 	strb.w	r1, [r2, #-1]!
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8007244:	230a      	movs	r3, #10
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	2301      	movs	r3, #1
 800724a:	fa00 f103 	lsl.w	r1, r0, r3
 800724e:	480b      	ldr	r0, [pc, #44]	; (800727c <user_i2c_read+0x48>)
 8007250:	f001 f906 	bl	8008460 <HAL_I2C_Master_Transmit>
 8007254:	b978      	cbnz	r0, 8007276 <user_i2c_read+0x42>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8007256:	0061      	lsls	r1, r4, #1
 8007258:	230a      	movs	r3, #10
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	4633      	mov	r3, r6
 800725e:	462a      	mov	r2, r5
 8007260:	f041 0101 	orr.w	r1, r1, #1
 8007264:	4805      	ldr	r0, [pc, #20]	; (800727c <user_i2c_read+0x48>)
 8007266:	f001 f9fd 	bl	8008664 <HAL_I2C_Master_Receive>
 800726a:	3000      	adds	r0, #0
 800726c:	bf18      	it	ne
 800726e:	2001      	movne	r0, #1
 8007270:	4240      	negs	r0, r0

  return 0;
}
 8007272:	b004      	add	sp, #16
 8007274:	bd70      	pop	{r4, r5, r6, pc}
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8007276:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800727a:	e7fa      	b.n	8007272 <user_i2c_read+0x3e>
 800727c:	20002440 	.word	0x20002440

08007280 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 8007280:	b508      	push	{r3, lr}
  HAL_Delay(period);
 8007282:	f000 fc39 	bl	8007af8 <HAL_Delay>
}
 8007286:	bd08      	pop	{r3, pc}

08007288 <user_i2c_write>:

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8007288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800728c:	b083      	sub	sp, #12
 800728e:	4607      	mov	r7, r0
 8007290:	4689      	mov	r9, r1
 8007292:	4690      	mov	r8, r2
 8007294:	461e      	mov	r6, r3
  int8_t *buf;
  buf = malloc(len +1);
 8007296:	1c5d      	adds	r5, r3, #1
 8007298:	4628      	mov	r0, r5
 800729a:	f004 fb11 	bl	800b8c0 <malloc>
 800729e:	4604      	mov	r4, r0
  buf[0] = reg_addr;
 80072a0:	f800 9b01 	strb.w	r9, [r0], #1
  memcpy(buf +1, data, len);
 80072a4:	4632      	mov	r2, r6
 80072a6:	4641      	mov	r1, r8
 80072a8:	f004 fb29 	bl	800b8fe <memcpy>
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 80072ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	b2ab      	uxth	r3, r5
 80072b4:	4622      	mov	r2, r4
 80072b6:	0079      	lsls	r1, r7, #1
 80072b8:	4806      	ldr	r0, [pc, #24]	; (80072d4 <user_i2c_write+0x4c>)
 80072ba:	f001 f8d1 	bl	8008460 <HAL_I2C_Master_Transmit>
 80072be:	b930      	cbnz	r0, 80072ce <user_i2c_write+0x46>
  free(buf);
 80072c0:	4620      	mov	r0, r4
 80072c2:	f004 fb05 	bl	800b8d0 <free>
  return 0;
 80072c6:	2000      	movs	r0, #0
}
 80072c8:	b003      	add	sp, #12
 80072ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 80072ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072d2:	e7f9      	b.n	80072c8 <user_i2c_write+0x40>
 80072d4:	20002440 	.word	0x20002440

080072d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80072d8:	b500      	push	{lr}
 80072da:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80072dc:	2224      	movs	r2, #36	; 0x24
 80072de:	2100      	movs	r1, #0
 80072e0:	a807      	add	r0, sp, #28
 80072e2:	f004 fb17 	bl	800b914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80072e6:	2300      	movs	r3, #0
 80072e8:	9301      	str	r3, [sp, #4]
 80072ea:	9302      	str	r3, [sp, #8]
 80072ec:	9303      	str	r3, [sp, #12]
 80072ee:	9304      	str	r3, [sp, #16]
 80072f0:	9305      	str	r3, [sp, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80072f2:	2302      	movs	r3, #2
 80072f4:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80072f6:	2301      	movs	r3, #1
 80072f8:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80072fa:	2310      	movs	r3, #16
 80072fc:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80072fe:	a806      	add	r0, sp, #24
 8007300:	f002 fb74 	bl	80099ec <HAL_RCC_OscConfig>
 8007304:	b968      	cbnz	r0, 8007322 <SystemClock_Config+0x4a>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007306:	230f      	movs	r3, #15
 8007308:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800730a:	2100      	movs	r1, #0
 800730c:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800730e:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007310:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007312:	9105      	str	r1, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007314:	a801      	add	r0, sp, #4
 8007316:	f002 fdb9 	bl	8009e8c <HAL_RCC_ClockConfig>
 800731a:	b920      	cbnz	r0, 8007326 <SystemClock_Config+0x4e>
  {
    Error_Handler();
  }
}
 800731c:	b011      	add	sp, #68	; 0x44
 800731e:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007322:	b672      	cpsid	i
 8007324:	e7fe      	b.n	8007324 <SystemClock_Config+0x4c>
 8007326:	b672      	cpsid	i
 8007328:	e7fe      	b.n	8007328 <SystemClock_Config+0x50>
 800732a:	0000      	movs	r0, r0
 800732c:	0000      	movs	r0, r0
	...

08007330 <main>:
{
 8007330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007334:	b090      	sub	sp, #64	; 0x40
  HAL_Init();
 8007336:	f000 fbbb 	bl	8007ab0 <HAL_Init>
  SystemClock_Config();
 800733a:	f7ff ffcd 	bl	80072d8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800733e:	2400      	movs	r4, #0
 8007340:	940c      	str	r4, [sp, #48]	; 0x30
 8007342:	940d      	str	r4, [sp, #52]	; 0x34
 8007344:	940e      	str	r4, [sp, #56]	; 0x38
 8007346:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007348:	4b85      	ldr	r3, [pc, #532]	; (8007560 <main+0x230>)
 800734a:	699a      	ldr	r2, [r3, #24]
 800734c:	f042 0220 	orr.w	r2, r2, #32
 8007350:	619a      	str	r2, [r3, #24]
 8007352:	699a      	ldr	r2, [r3, #24]
 8007354:	f002 0220 	and.w	r2, r2, #32
 8007358:	9207      	str	r2, [sp, #28]
 800735a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800735c:	699a      	ldr	r2, [r3, #24]
 800735e:	f042 0204 	orr.w	r2, r2, #4
 8007362:	619a      	str	r2, [r3, #24]
 8007364:	699a      	ldr	r2, [r3, #24]
 8007366:	f002 0204 	and.w	r2, r2, #4
 800736a:	9208      	str	r2, [sp, #32]
 800736c:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800736e:	699a      	ldr	r2, [r3, #24]
 8007370:	f042 0208 	orr.w	r2, r2, #8
 8007374:	619a      	str	r2, [r3, #24]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	f003 0308 	and.w	r3, r3, #8
 800737c:	9309      	str	r3, [sp, #36]	; 0x24
 800737e:	9b09      	ldr	r3, [sp, #36]	; 0x24

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin, GPIO_PIN_RESET);
 8007380:	f8df 8228 	ldr.w	r8, [pc, #552]	; 80075ac <main+0x27c>
 8007384:	4622      	mov	r2, r4
 8007386:	f641 4110 	movw	r1, #7184	; 0x1c10
 800738a:	4640      	mov	r0, r8
 800738c:	f000 fe76 	bl	800807c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LORA_RESET_Pin|CO2_WAKE_UP_Pin, GPIO_PIN_RESET);
 8007390:	4d74      	ldr	r5, [pc, #464]	; (8007564 <main+0x234>)
 8007392:	4622      	mov	r2, r4
 8007394:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8007398:	4628      	mov	r0, r5
 800739a:	f000 fe6f 	bl	800807c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LORA_NSS_Pin LED1_PIN_Pin LED3_PIN_Pin LED2_PIN_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin;
 800739e:	f641 4310 	movw	r3, #7184	; 0x1c10
 80073a2:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80073a4:	2701      	movs	r7, #1
 80073a6:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073a8:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073aa:	2602      	movs	r6, #2
 80073ac:	960f      	str	r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073ae:	a90c      	add	r1, sp, #48	; 0x30
 80073b0:	4640      	mov	r0, r8
 80073b2:	f000 fd67 	bl	8007e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_DIO1_Pin LORA_DIO0_Pin */
  GPIO_InitStruct.Pin = LORA_DIO1_Pin|LORA_DIO0_Pin;
 80073b6:	f240 4304 	movw	r3, #1028	; 0x404
 80073ba:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80073bc:	4b6a      	ldr	r3, [pc, #424]	; (8007568 <main+0x238>)
 80073be:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80073c0:	960e      	str	r6, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073c2:	a90c      	add	r1, sp, #48	; 0x30
 80073c4:	4628      	mov	r0, r5
 80073c6:	f000 fd5d 	bl	8007e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RESET_Pin CO2_WAKE_UP_Pin */
  GPIO_InitStruct.Pin = LORA_RESET_Pin|CO2_WAKE_UP_Pin;
 80073ca:	f44f 6301 	mov.w	r3, #2064	; 0x810
 80073ce:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80073d0:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073d2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073d4:	960f      	str	r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073d6:	a90c      	add	r1, sp, #48	; 0x30
 80073d8:	4628      	mov	r0, r5
 80073da:	f000 fd53 	bl	8007e84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80073de:	4622      	mov	r2, r4
 80073e0:	4621      	mov	r1, r4
 80073e2:	2008      	movs	r0, #8
 80073e4:	f000 fbae 	bl	8007b44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80073e8:	2008      	movs	r0, #8
 80073ea:	f000 fbdd 	bl	8007ba8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80073ee:	4622      	mov	r2, r4
 80073f0:	4621      	mov	r1, r4
 80073f2:	2028      	movs	r0, #40	; 0x28
 80073f4:	f000 fba6 	bl	8007b44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80073f8:	2028      	movs	r0, #40	; 0x28
 80073fa:	f000 fbd5 	bl	8007ba8 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 80073fe:	485b      	ldr	r0, [pc, #364]	; (800756c <main+0x23c>)
 8007400:	4b5b      	ldr	r3, [pc, #364]	; (8007570 <main+0x240>)
 8007402:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007404:	4b5b      	ldr	r3, [pc, #364]	; (8007574 <main+0x244>)
 8007406:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007408:	6084      	str	r4, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800740a:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800740c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007410:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007412:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007414:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007416:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007418:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800741a:	f000 ff63 	bl	80082e4 <HAL_I2C_Init>
 800741e:	2800      	cmp	r0, #0
 8007420:	f040 808f 	bne.w	8007542 <main+0x212>
  hspi1.Instance = SPI1;
 8007424:	4854      	ldr	r0, [pc, #336]	; (8007578 <main+0x248>)
 8007426:	4b55      	ldr	r3, [pc, #340]	; (800757c <main+0x24c>)
 8007428:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800742a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800742e:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007430:	2300      	movs	r3, #0
 8007432:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007434:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007436:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007438:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800743a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800743e:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8007440:	2220      	movs	r2, #32
 8007442:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007444:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007446:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007448:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800744a:	230a      	movs	r3, #10
 800744c:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800744e:	f002 fe65 	bl	800a11c <HAL_SPI_Init>
 8007452:	2800      	cmp	r0, #0
 8007454:	d177      	bne.n	8007546 <main+0x216>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007456:	2300      	movs	r3, #0
 8007458:	930c      	str	r3, [sp, #48]	; 0x30
 800745a:	930d      	str	r3, [sp, #52]	; 0x34
 800745c:	930e      	str	r3, [sp, #56]	; 0x38
 800745e:	930f      	str	r3, [sp, #60]	; 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007460:	930a      	str	r3, [sp, #40]	; 0x28
 8007462:	930b      	str	r3, [sp, #44]	; 0x2c
  htim2.Instance = TIM2;
 8007464:	4846      	ldr	r0, [pc, #280]	; (8007580 <main+0x250>)
 8007466:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800746a:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 72;
 800746c:	2248      	movs	r2, #72	; 0x48
 800746e:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007470:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8007472:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007476:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007478:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800747a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800747c:	f003 f896 	bl	800a5ac <HAL_TIM_Base_Init>
 8007480:	2800      	cmp	r0, #0
 8007482:	d162      	bne.n	800754a <main+0x21a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007484:	a910      	add	r1, sp, #64	; 0x40
 8007486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800748a:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800748e:	483c      	ldr	r0, [pc, #240]	; (8007580 <main+0x250>)
 8007490:	f003 f8c2 	bl	800a618 <HAL_TIM_ConfigClockSource>
 8007494:	2800      	cmp	r0, #0
 8007496:	d15a      	bne.n	800754e <main+0x21e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007498:	2300      	movs	r3, #0
 800749a:	930a      	str	r3, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800749c:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800749e:	a90a      	add	r1, sp, #40	; 0x28
 80074a0:	4837      	ldr	r0, [pc, #220]	; (8007580 <main+0x250>)
 80074a2:	f003 f95d 	bl	800a760 <HAL_TIMEx_MasterConfigSynchronization>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d153      	bne.n	8007552 <main+0x222>
  Init_lora_module(&hspi1);
 80074aa:	4833      	ldr	r0, [pc, #204]	; (8007578 <main+0x248>)
 80074ac:	f7fb fd0e 	bl	8002ecc <Init_lora_module>
  result = Begin_lora_module(BAND, true, 14, 8, 250E3, 0x4A);
 80074b0:	234a      	movs	r3, #74	; 0x4a
 80074b2:	9304      	str	r3, [sp, #16]
 80074b4:	4a33      	ldr	r2, [pc, #204]	; (8007584 <main+0x254>)
 80074b6:	2300      	movs	r3, #0
 80074b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80074bc:	2308      	movs	r3, #8
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	230e      	movs	r3, #14
 80074c2:	2201      	movs	r2, #1
 80074c4:	a124      	add	r1, pc, #144	; (adr r1, 8007558 <main+0x228>)
 80074c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074ca:	f7fb fd07 	bl	8002edc <Begin_lora_module>
 80074ce:	4b2e      	ldr	r3, [pc, #184]	; (8007588 <main+0x258>)
 80074d0:	7018      	strb	r0, [r3, #0]
  if(result == 0) {
 80074d2:	2800      	cmp	r0, #0
 80074d4:	d06e      	beq.n	80075b4 <main+0x284>
  TSL2561_setTiming_ms (gain, time, & ms);
 80074d6:	4a2d      	ldr	r2, [pc, #180]	; (800758c <main+0x25c>)
 80074d8:	2102      	movs	r1, #2
 80074da:	4b2d      	ldr	r3, [pc, #180]	; (8007590 <main+0x260>)
 80074dc:	7818      	ldrb	r0, [r3, #0]
 80074de:	f7ff fe50 	bl	8007182 <TSL2561_setTiming_ms>
  TSL2561_setPowerUp ();
 80074e2:	f7ff fdf9 	bl	80070d8 <TSL2561_setPowerUp>
  rslt = bme280_init(&dev);
 80074e6:	4c2b      	ldr	r4, [pc, #172]	; (8007594 <main+0x264>)
 80074e8:	4620      	mov	r0, r4
 80074ea:	f7ff f8ae 	bl	800664a <bme280_init>
 80074ee:	4d2a      	ldr	r5, [pc, #168]	; (8007598 <main+0x268>)
 80074f0:	7028      	strb	r0, [r5, #0]
  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 80074f2:	2301      	movs	r3, #1
 80074f4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 80074f8:	2305      	movs	r3, #5
 80074fa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 80074fe:	2302      	movs	r3, #2
 8007500:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  dev.settings.filter = BME280_FILTER_COEFF_16;
 8007504:	2304      	movs	r3, #4
 8007506:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 800750a:	4621      	mov	r1, r4
 800750c:	200f      	movs	r0, #15
 800750e:	f7ff f999 	bl	8006844 <bme280_set_sensor_settings>
 8007512:	7028      	strb	r0, [r5, #0]
  rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8007514:	4621      	mov	r1, r4
 8007516:	2003      	movs	r0, #3
 8007518:	f7ff f9ca 	bl	80068b0 <bme280_set_sensor_mode>
 800751c:	7028      	strb	r0, [r5, #0]
  read_id_from_flash(&id);
 800751e:	481f      	ldr	r0, [pc, #124]	; (800759c <main+0x26c>)
 8007520:	f7f9 fd62 	bl	8000fe8 <read_id_from_flash>
  if (*rdata == 0x00000000) {
 8007524:	4b1e      	ldr	r3, [pc, #120]	; (80075a0 <main+0x270>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 80c7 	beq.w	80076bc <main+0x38c>
		TSL2561_getLux(gain, ms, data0, data1, &lux);
 800752e:	f8df a05c 	ldr.w	sl, [pc, #92]	; 800758c <main+0x25c>
		sensors_data.lux = lux;
 8007532:	4c1c      	ldr	r4, [pc, #112]	; (80075a4 <main+0x274>)
		sensors_data.temperature = comp_data.temperature / 100.0;      /* C  */
 8007534:	f04f 0800 	mov.w	r8, #0
 8007538:	f8df 9074 	ldr.w	r9, [pc, #116]	; 80075b0 <main+0x280>
		sensors_data.humidity = comp_data.humidity / 1024.0;           /* %   */
 800753c:	2600      	movs	r6, #0
 800753e:	4f1a      	ldr	r7, [pc, #104]	; (80075a8 <main+0x278>)
 8007540:	e0d6      	b.n	80076f0 <main+0x3c0>
 8007542:	b672      	cpsid	i
 8007544:	e7fe      	b.n	8007544 <main+0x214>
 8007546:	b672      	cpsid	i
 8007548:	e7fe      	b.n	8007548 <main+0x218>
 800754a:	b672      	cpsid	i
 800754c:	e7fe      	b.n	800754c <main+0x21c>
 800754e:	b672      	cpsid	i
 8007550:	e7fe      	b.n	8007550 <main+0x220>
 8007552:	b672      	cpsid	i
 8007554:	e7fe      	b.n	8007554 <main+0x224>
 8007556:	bf00      	nop
 8007558:	19d2ded0 	.word	0x19d2ded0
 800755c:	00000000 	.word	0x00000000
 8007560:	40021000 	.word	0x40021000
 8007564:	40010c00 	.word	0x40010c00
 8007568:	10110000 	.word	0x10110000
 800756c:	20002440 	.word	0x20002440
 8007570:	40005400 	.word	0x40005400
 8007574:	00061a80 	.word	0x00061a80
 8007578:	200024b0 	.word	0x200024b0
 800757c:	40013000 	.word	0x40013000
 8007580:	20002508 	.word	0x20002508
 8007584:	0003d090 	.word	0x0003d090
 8007588:	200024aa 	.word	0x200024aa
 800758c:	20002420 	.word	0x20002420
 8007590:	2000241c 	.word	0x2000241c
 8007594:	2000001c 	.word	0x2000001c
 8007598:	2000243c 	.word	0x2000243c
 800759c:	200024a4 	.word	0x200024a4
 80075a0:	20002424 	.word	0x20002424
 80075a4:	20002554 	.word	0x20002554
 80075a8:	3f500000 	.word	0x3f500000
 80075ac:	40010800 	.word	0x40010800
 80075b0:	40590000 	.word	0x40590000
	  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 80075b4:	4c70      	ldr	r4, [pc, #448]	; (8007778 <main+0x448>)
 80075b6:	2201      	movs	r2, #1
 80075b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80075bc:	4620      	mov	r0, r4
 80075be:	f000 fd5d 	bl	800807c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_SET);
 80075c2:	2201      	movs	r2, #1
 80075c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80075c8:	4620      	mov	r0, r4
 80075ca:	f000 fd57 	bl	800807c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_SET);
 80075ce:	2201      	movs	r2, #1
 80075d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80075d4:	4620      	mov	r0, r4
 80075d6:	f000 fd51 	bl	800807c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80075da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80075de:	f000 fa8b 	bl	8007af8 <HAL_Delay>
	  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_RESET);
 80075e2:	2200      	movs	r2, #0
 80075e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80075e8:	4620      	mov	r0, r4
 80075ea:	f000 fd47 	bl	800807c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_RESET);
 80075ee:	2200      	movs	r2, #0
 80075f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80075f4:	4620      	mov	r0, r4
 80075f6:	f000 fd41 	bl	800807c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_RESET);
 80075fa:	2200      	movs	r2, #0
 80075fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007600:	4620      	mov	r0, r4
 8007602:	f000 fd3b 	bl	800807c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8007606:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800760a:	f000 fa75 	bl	8007af8 <HAL_Delay>
	  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 800760e:	2201      	movs	r2, #1
 8007610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007614:	4620      	mov	r0, r4
 8007616:	f000 fd31 	bl	800807c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_SET);
 800761a:	2201      	movs	r2, #1
 800761c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007620:	4620      	mov	r0, r4
 8007622:	f000 fd2b 	bl	800807c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_SET);
 8007626:	2201      	movs	r2, #1
 8007628:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800762c:	4620      	mov	r0, r4
 800762e:	f000 fd25 	bl	800807c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8007632:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007636:	f000 fa5f 	bl	8007af8 <HAL_Delay>
	  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_RESET);
 800763a:	2200      	movs	r2, #0
 800763c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007640:	4620      	mov	r0, r4
 8007642:	f000 fd1b 	bl	800807c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_RESET);
 8007646:	2200      	movs	r2, #0
 8007648:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800764c:	4620      	mov	r0, r4
 800764e:	f000 fd15 	bl	800807c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_RESET);
 8007652:	2200      	movs	r2, #0
 8007654:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007658:	4620      	mov	r0, r4
 800765a:	f000 fd0f 	bl	800807c <HAL_GPIO_WritePin>
	  while(result != 0) {
 800765e:	4b47      	ldr	r3, [pc, #284]	; (800777c <main+0x44c>)
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	f43f af37 	beq.w	80074d6 <main+0x1a6>
		  result = Begin_lora_module(BAND, true, 14, 8, 250E3, 0x4A);
 8007668:	f20f 09f4 	addw	r9, pc, #244	; 0xf4
 800766c:	e9d9 8900 	ldrd	r8, r9, [r9]
 8007670:	4e43      	ldr	r6, [pc, #268]	; (8007780 <main+0x450>)
 8007672:	2700      	movs	r7, #0
 8007674:	234a      	movs	r3, #74	; 0x4a
 8007676:	9304      	str	r3, [sp, #16]
 8007678:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800767c:	2308      	movs	r3, #8
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	230e      	movs	r3, #14
 8007682:	2201      	movs	r2, #1
 8007684:	4640      	mov	r0, r8
 8007686:	4649      	mov	r1, r9
 8007688:	f7fb fc28 	bl	8002edc <Begin_lora_module>
 800768c:	4d3b      	ldr	r5, [pc, #236]	; (800777c <main+0x44c>)
 800768e:	7028      	strb	r0, [r5, #0]
			  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 8007690:	2201      	movs	r2, #1
 8007692:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007696:	4620      	mov	r0, r4
 8007698:	f000 fcf0 	bl	800807c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_RESET);
 800769c:	2200      	movs	r2, #0
 800769e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80076a2:	4620      	mov	r0, r4
 80076a4:	f000 fcea 	bl	800807c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_RESET);
 80076a8:	2200      	movs	r2, #0
 80076aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80076ae:	4620      	mov	r0, r4
 80076b0:	f000 fce4 	bl	800807c <HAL_GPIO_WritePin>
	  while(result != 0) {
 80076b4:	782b      	ldrb	r3, [r5, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1dc      	bne.n	8007674 <main+0x344>
 80076ba:	e70c      	b.n	80074d6 <main+0x1a6>
	  Send_registration_packet();
 80076bc:	f7fb fc48 	bl	8002f50 <Send_registration_packet>
 80076c0:	e735      	b.n	800752e <main+0x1fe>
		TSL2561_getLux(gain, ms, data0, data1, &lux);
 80076c2:	4b30      	ldr	r3, [pc, #192]	; (8007784 <main+0x454>)
 80076c4:	7818      	ldrb	r0, [r3, #0]
 80076c6:	ab0c      	add	r3, sp, #48	; 0x30
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076cc:	9a06      	ldr	r2, [sp, #24]
 80076ce:	f8da 1000 	ldr.w	r1, [sl]
 80076d2:	f7ff fbb9 	bl	8006e48 <TSL2561_getLux>
		sensors_data.lux = lux;
 80076d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80076da:	f7f9 f9a5 	bl	8000a28 <__aeabi_d2f>
 80076de:	6020      	str	r0, [r4, #0]
 80076e0:	e00c      	b.n	80076fc <main+0x3cc>
	HAL_Delay(5000);
 80076e2:	f241 3088 	movw	r0, #5000	; 0x1388
 80076e6:	f000 fa07 	bl	8007af8 <HAL_Delay>
	Main_cpp(&sensors_data);
 80076ea:	4620      	mov	r0, r4
 80076ec:	f7fb fc1c 	bl	8002f28 <Main_cpp>
	if (TSL2561_getData(&data0, &data1))
 80076f0:	a90a      	add	r1, sp, #40	; 0x28
 80076f2:	a806      	add	r0, sp, #24
 80076f4:	f7ff fd8e 	bl	8007214 <TSL2561_getData>
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d1e2      	bne.n	80076c2 <main+0x392>
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 80076fc:	4a22      	ldr	r2, [pc, #136]	; (8007788 <main+0x458>)
 80076fe:	4923      	ldr	r1, [pc, #140]	; (800778c <main+0x45c>)
 8007700:	2007      	movs	r0, #7
 8007702:	f7ff fb71 	bl	8006de8 <bme280_get_sensor_data>
 8007706:	4b22      	ldr	r3, [pc, #136]	; (8007790 <main+0x460>)
 8007708:	7018      	strb	r0, [r3, #0]
	if(rslt == BME280_OK)
 800770a:	2800      	cmp	r0, #0
 800770c:	d1e9      	bne.n	80076e2 <main+0x3b2>
		sensors_data.temperature = comp_data.temperature / 100.0;      /* C  */
 800770e:	4d1f      	ldr	r5, [pc, #124]	; (800778c <main+0x45c>)
 8007710:	6868      	ldr	r0, [r5, #4]
 8007712:	f7f8 fe6f 	bl	80003f4 <__aeabi_i2d>
 8007716:	4642      	mov	r2, r8
 8007718:	464b      	mov	r3, r9
 800771a:	f7f8 ffff 	bl	800071c <__aeabi_ddiv>
 800771e:	f7f9 f983 	bl	8000a28 <__aeabi_d2f>
 8007722:	6060      	str	r0, [r4, #4]
		sensors_data.humidity = comp_data.humidity / 1024.0;           /* %   */
 8007724:	68a8      	ldr	r0, [r5, #8]
 8007726:	f7f8 fe55 	bl	80003d4 <__aeabi_ui2d>
 800772a:	4632      	mov	r2, r6
 800772c:	463b      	mov	r3, r7
 800772e:	f7f8 fecb 	bl	80004c8 <__aeabi_dmul>
 8007732:	f7f9 f979 	bl	8000a28 <__aeabi_d2f>
 8007736:	60a0      	str	r0, [r4, #8]
		sensors_data.pressure = comp_data.pressure / 10000.0 / 1.333;  /* hPa or mmhg */
 8007738:	6828      	ldr	r0, [r5, #0]
 800773a:	f7f8 fe4b 	bl	80003d4 <__aeabi_ui2d>
 800773e:	a30a      	add	r3, pc, #40	; (adr r3, 8007768 <main+0x438>)
 8007740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007744:	f7f8 ffea 	bl	800071c <__aeabi_ddiv>
 8007748:	a309      	add	r3, pc, #36	; (adr r3, 8007770 <main+0x440>)
 800774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774e:	f7f8 ffe5 	bl	800071c <__aeabi_ddiv>
 8007752:	f7f9 f969 	bl	8000a28 <__aeabi_d2f>
 8007756:	60e0      	str	r0, [r4, #12]
 8007758:	e7c3      	b.n	80076e2 <main+0x3b2>
 800775a:	bf00      	nop
 800775c:	f3af 8000 	nop.w
 8007760:	19d2ded0 	.word	0x19d2ded0
	...
 800776c:	40c38800 	.word	0x40c38800
 8007770:	ced91687 	.word	0xced91687
 8007774:	3ff553f7 	.word	0x3ff553f7
 8007778:	40010800 	.word	0x40010800
 800777c:	200024aa 	.word	0x200024aa
 8007780:	0003d090 	.word	0x0003d090
 8007784:	2000241c 	.word	0x2000241c
 8007788:	2000001c 	.word	0x2000001c
 800778c:	20002494 	.word	0x20002494
 8007790:	2000243c 	.word	0x2000243c

08007794 <HAL_GPIO_EXTI_Callback>:

}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007794:	b508      	push	{r3, lr}
  if(GPIO_Pin== GPIO_PIN_2) {
 8007796:	2804      	cmp	r0, #4
 8007798:	d004      	beq.n	80077a4 <HAL_GPIO_EXTI_Callback+0x10>
    exti2++;
    Contact_group_control_module();
  } else if(GPIO_Pin== GPIO_PIN_10){
 800779a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800779e:	d008      	beq.n	80077b2 <HAL_GPIO_EXTI_Callback+0x1e>
    exti5_10++;
    Contact_group_control_module();
  } else{
    __NOP();
 80077a0:	bf00      	nop
  }
}
 80077a2:	bd08      	pop	{r3, pc}
    exti2++;
 80077a4:	4a06      	ldr	r2, [pc, #24]	; (80077c0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80077a6:	8813      	ldrh	r3, [r2, #0]
 80077a8:	3301      	adds	r3, #1
 80077aa:	8013      	strh	r3, [r2, #0]
    Contact_group_control_module();
 80077ac:	f7fb fbde 	bl	8002f6c <Contact_group_control_module>
 80077b0:	e7f7      	b.n	80077a2 <HAL_GPIO_EXTI_Callback+0xe>
    exti5_10++;
 80077b2:	4a04      	ldr	r2, [pc, #16]	; (80077c4 <HAL_GPIO_EXTI_Callback+0x30>)
 80077b4:	8813      	ldrh	r3, [r2, #0]
 80077b6:	3301      	adds	r3, #1
 80077b8:	8013      	strh	r3, [r2, #0]
    Contact_group_control_module();
 80077ba:	f7fb fbd7 	bl	8002f6c <Contact_group_control_module>
 80077be:	e7f0      	b.n	80077a2 <HAL_GPIO_EXTI_Callback+0xe>
 80077c0:	200024ac 	.word	0x200024ac
 80077c4:	2000256e 	.word	0x2000256e

080077c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80077c8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80077ca:	4b0e      	ldr	r3, [pc, #56]	; (8007804 <HAL_MspInit+0x3c>)
 80077cc:	699a      	ldr	r2, [r3, #24]
 80077ce:	f042 0201 	orr.w	r2, r2, #1
 80077d2:	619a      	str	r2, [r3, #24]
 80077d4:	699a      	ldr	r2, [r3, #24]
 80077d6:	f002 0201 	and.w	r2, r2, #1
 80077da:	9200      	str	r2, [sp, #0]
 80077dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80077de:	69da      	ldr	r2, [r3, #28]
 80077e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80077e4:	61da      	str	r2, [r3, #28]
 80077e6:	69db      	ldr	r3, [r3, #28]
 80077e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077ec:	9301      	str	r3, [sp, #4]
 80077ee:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80077f0:	4a05      	ldr	r2, [pc, #20]	; (8007808 <HAL_MspInit+0x40>)
 80077f2:	6853      	ldr	r3, [r2, #4]
 80077f4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80077f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80077fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80077fe:	b002      	add	sp, #8
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	40021000 	.word	0x40021000
 8007808:	40010000 	.word	0x40010000

0800780c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800780c:	b510      	push	{r4, lr}
 800780e:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007810:	2300      	movs	r3, #0
 8007812:	9302      	str	r3, [sp, #8]
 8007814:	9303      	str	r3, [sp, #12]
 8007816:	9304      	str	r3, [sp, #16]
 8007818:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 800781a:	6802      	ldr	r2, [r0, #0]
 800781c:	4b1d      	ldr	r3, [pc, #116]	; (8007894 <HAL_I2C_MspInit+0x88>)
 800781e:	429a      	cmp	r2, r3
 8007820:	d001      	beq.n	8007826 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007822:	b006      	add	sp, #24
 8007824:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007826:	4c1c      	ldr	r4, [pc, #112]	; (8007898 <HAL_I2C_MspInit+0x8c>)
 8007828:	69a3      	ldr	r3, [r4, #24]
 800782a:	f043 0308 	orr.w	r3, r3, #8
 800782e:	61a3      	str	r3, [r4, #24]
 8007830:	69a3      	ldr	r3, [r4, #24]
 8007832:	f003 0308 	and.w	r3, r3, #8
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800783a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800783e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007840:	2312      	movs	r3, #18
 8007842:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007844:	2303      	movs	r3, #3
 8007846:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007848:	a902      	add	r1, sp, #8
 800784a:	4814      	ldr	r0, [pc, #80]	; (800789c <HAL_I2C_MspInit+0x90>)
 800784c:	f000 fb1a 	bl	8007e84 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8007850:	4a13      	ldr	r2, [pc, #76]	; (80078a0 <HAL_I2C_MspInit+0x94>)
 8007852:	6853      	ldr	r3, [r2, #4]
 8007854:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8007858:	f043 0302 	orr.w	r3, r3, #2
 800785c:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 800785e:	69e3      	ldr	r3, [r4, #28]
 8007860:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007864:	61e3      	str	r3, [r4, #28]
 8007866:	69e3      	ldr	r3, [r4, #28]
 8007868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800786c:	9301      	str	r3, [sp, #4]
 800786e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8007870:	2200      	movs	r2, #0
 8007872:	4611      	mov	r1, r2
 8007874:	201f      	movs	r0, #31
 8007876:	f000 f965 	bl	8007b44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800787a:	201f      	movs	r0, #31
 800787c:	f000 f994 	bl	8007ba8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8007880:	2200      	movs	r2, #0
 8007882:	4611      	mov	r1, r2
 8007884:	2020      	movs	r0, #32
 8007886:	f000 f95d 	bl	8007b44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800788a:	2020      	movs	r0, #32
 800788c:	f000 f98c 	bl	8007ba8 <HAL_NVIC_EnableIRQ>
}
 8007890:	e7c7      	b.n	8007822 <HAL_I2C_MspInit+0x16>
 8007892:	bf00      	nop
 8007894:	40005400 	.word	0x40005400
 8007898:	40021000 	.word	0x40021000
 800789c:	40010c00 	.word	0x40010c00
 80078a0:	40010000 	.word	0x40010000

080078a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80078a4:	b530      	push	{r4, r5, lr}
 80078a6:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078a8:	2300      	movs	r3, #0
 80078aa:	9302      	str	r3, [sp, #8]
 80078ac:	9303      	str	r3, [sp, #12]
 80078ae:	9304      	str	r3, [sp, #16]
 80078b0:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI1)
 80078b2:	6802      	ldr	r2, [r0, #0]
 80078b4:	4b1a      	ldr	r3, [pc, #104]	; (8007920 <HAL_SPI_MspInit+0x7c>)
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d001      	beq.n	80078be <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80078ba:	b007      	add	sp, #28
 80078bc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80078be:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80078c2:	699a      	ldr	r2, [r3, #24]
 80078c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078c8:	619a      	str	r2, [r3, #24]
 80078ca:	699a      	ldr	r2, [r3, #24]
 80078cc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80078d0:	9200      	str	r2, [sp, #0]
 80078d2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078d4:	699a      	ldr	r2, [r3, #24]
 80078d6:	f042 0204 	orr.w	r2, r2, #4
 80078da:	619a      	str	r2, [r3, #24]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	f003 0304 	and.w	r3, r3, #4
 80078e2:	9301      	str	r3, [sp, #4]
 80078e4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80078e6:	23a0      	movs	r3, #160	; 0xa0
 80078e8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078ea:	2302      	movs	r3, #2
 80078ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80078ee:	2303      	movs	r3, #3
 80078f0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078f2:	4d0c      	ldr	r5, [pc, #48]	; (8007924 <HAL_SPI_MspInit+0x80>)
 80078f4:	a902      	add	r1, sp, #8
 80078f6:	4628      	mov	r0, r5
 80078f8:	f000 fac4 	bl	8007e84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80078fc:	2340      	movs	r3, #64	; 0x40
 80078fe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007900:	2400      	movs	r4, #0
 8007902:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007904:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007906:	a902      	add	r1, sp, #8
 8007908:	4628      	mov	r0, r5
 800790a:	f000 fabb 	bl	8007e84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800790e:	4622      	mov	r2, r4
 8007910:	4621      	mov	r1, r4
 8007912:	2023      	movs	r0, #35	; 0x23
 8007914:	f000 f916 	bl	8007b44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8007918:	2023      	movs	r0, #35	; 0x23
 800791a:	f000 f945 	bl	8007ba8 <HAL_NVIC_EnableIRQ>
}
 800791e:	e7cc      	b.n	80078ba <HAL_SPI_MspInit+0x16>
 8007920:	40013000 	.word	0x40013000
 8007924:	40010800 	.word	0x40010800

08007928 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8007928:	6803      	ldr	r3, [r0, #0]
 800792a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800792e:	d000      	beq.n	8007932 <HAL_TIM_Base_MspInit+0xa>
 8007930:	4770      	bx	lr
{
 8007932:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007934:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8007938:	69da      	ldr	r2, [r3, #28]
 800793a:	f042 0201 	orr.w	r2, r2, #1
 800793e:	61da      	str	r2, [r3, #28]
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	f003 0301 	and.w	r3, r3, #1
 8007946:	9301      	str	r3, [sp, #4]
 8007948:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800794a:	b002      	add	sp, #8
 800794c:	4770      	bx	lr

0800794e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800794e:	e7fe      	b.n	800794e <NMI_Handler>

08007950 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007950:	e7fe      	b.n	8007950 <HardFault_Handler>

08007952 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007952:	e7fe      	b.n	8007952 <MemManage_Handler>

08007954 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007954:	e7fe      	b.n	8007954 <BusFault_Handler>

08007956 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007956:	e7fe      	b.n	8007956 <UsageFault_Handler>

08007958 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007958:	4770      	bx	lr

0800795a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800795a:	4770      	bx	lr

0800795c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800795c:	4770      	bx	lr

0800795e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800795e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007960:	f000 f8b8 	bl	8007ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007964:	bd08      	pop	{r3, pc}

08007966 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007966:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8007968:	2004      	movs	r0, #4
 800796a:	f000 fb8d 	bl	8008088 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800796e:	bd08      	pop	{r3, pc}

08007970 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8007970:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8007972:	4802      	ldr	r0, [pc, #8]	; (800797c <I2C1_EV_IRQHandler+0xc>)
 8007974:	f001 fa24 	bl	8008dc0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8007978:	bd08      	pop	{r3, pc}
 800797a:	bf00      	nop
 800797c:	20002440 	.word	0x20002440

08007980 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8007980:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8007982:	4802      	ldr	r0, [pc, #8]	; (800798c <I2C1_ER_IRQHandler+0xc>)
 8007984:	f001 ff58 	bl	8009838 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8007988:	bd08      	pop	{r3, pc}
 800798a:	bf00      	nop
 800798c:	20002440 	.word	0x20002440

08007990 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8007990:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8007992:	4802      	ldr	r0, [pc, #8]	; (800799c <SPI1_IRQHandler+0xc>)
 8007994:	f002 fd3a 	bl	800a40c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8007998:	bd08      	pop	{r3, pc}
 800799a:	bf00      	nop
 800799c:	200024b0 	.word	0x200024b0

080079a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80079a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80079a2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80079a6:	f000 fb6f 	bl	8008088 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80079aa:	bd08      	pop	{r3, pc}

080079ac <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80079ac:	2001      	movs	r0, #1
 80079ae:	4770      	bx	lr

080079b0 <_kill>:

int _kill(int pid, int sig)
{
 80079b0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80079b2:	f003 ff5b 	bl	800b86c <__errno>
 80079b6:	2316      	movs	r3, #22
 80079b8:	6003      	str	r3, [r0, #0]
	return -1;
}
 80079ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079be:	bd08      	pop	{r3, pc}

080079c0 <_exit>:

void _exit (int status)
{
 80079c0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80079c2:	f003 ff53 	bl	800b86c <__errno>
 80079c6:	2316      	movs	r3, #22
 80079c8:	6003      	str	r3, [r0, #0]
 80079ca:	e7fe      	b.n	80079ca <_exit+0xa>

080079cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80079cc:	b508      	push	{r3, lr}
 80079ce:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80079d0:	4a0c      	ldr	r2, [pc, #48]	; (8007a04 <_sbrk+0x38>)
 80079d2:	6812      	ldr	r2, [r2, #0]
 80079d4:	b152      	cbz	r2, 80079ec <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80079d6:	4a0b      	ldr	r2, [pc, #44]	; (8007a04 <_sbrk+0x38>)
 80079d8:	6810      	ldr	r0, [r2, #0]
 80079da:	4403      	add	r3, r0
 80079dc:	4a0a      	ldr	r2, [pc, #40]	; (8007a08 <_sbrk+0x3c>)
 80079de:	490b      	ldr	r1, [pc, #44]	; (8007a0c <_sbrk+0x40>)
 80079e0:	1a52      	subs	r2, r2, r1
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d806      	bhi.n	80079f4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80079e6:	4a07      	ldr	r2, [pc, #28]	; (8007a04 <_sbrk+0x38>)
 80079e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80079ea:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80079ec:	4a05      	ldr	r2, [pc, #20]	; (8007a04 <_sbrk+0x38>)
 80079ee:	4908      	ldr	r1, [pc, #32]	; (8007a10 <_sbrk+0x44>)
 80079f0:	6011      	str	r1, [r2, #0]
 80079f2:	e7f0      	b.n	80079d6 <_sbrk+0xa>
    errno = ENOMEM;
 80079f4:	f003 ff3a 	bl	800b86c <__errno>
 80079f8:	230c      	movs	r3, #12
 80079fa:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80079fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a00:	e7f3      	b.n	80079ea <_sbrk+0x1e>
 8007a02:	bf00      	nop
 8007a04:	2000242c 	.word	0x2000242c
 8007a08:	20005000 	.word	0x20005000
 8007a0c:	00000400 	.word	0x00000400
 8007a10:	200025a0 	.word	0x200025a0

08007a14 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007a14:	4770      	bx	lr
	...

08007a18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8007a18:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8007a1a:	e003      	b.n	8007a24 <LoopCopyDataInit>

08007a1c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007a1c:	4b0b      	ldr	r3, [pc, #44]	; (8007a4c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8007a1e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8007a20:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8007a22:	3104      	adds	r1, #4

08007a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007a24:	480a      	ldr	r0, [pc, #40]	; (8007a50 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8007a26:	4b0b      	ldr	r3, [pc, #44]	; (8007a54 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8007a28:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8007a2a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007a2c:	d3f6      	bcc.n	8007a1c <CopyDataInit>
  ldr r2, =_sbss
 8007a2e:	4a0a      	ldr	r2, [pc, #40]	; (8007a58 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8007a30:	e002      	b.n	8007a38 <LoopFillZerobss>

08007a32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8007a32:	2300      	movs	r3, #0
  str r3, [r2], #4
 8007a34:	f842 3b04 	str.w	r3, [r2], #4

08007a38 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8007a38:	4b08      	ldr	r3, [pc, #32]	; (8007a5c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8007a3a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007a3c:	d3f9      	bcc.n	8007a32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007a3e:	f7ff ffe9 	bl	8007a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007a42:	f003 ff19 	bl	800b878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007a46:	f7ff fc73 	bl	8007330 <main>
  bx lr
 8007a4a:	4770      	bx	lr
  ldr r3, =_sidata
 8007a4c:	0800bc64 	.word	0x0800bc64
  ldr r0, =_sdata
 8007a50:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8007a54:	200000d0 	.word	0x200000d0
  ldr r2, =_sbss
 8007a58:	200000d0 	.word	0x200000d0
  ldr r3, = _ebss
 8007a5c:	2000259c 	.word	0x2000259c

08007a60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007a60:	e7fe      	b.n	8007a60 <ADC1_2_IRQHandler>
	...

08007a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007a64:	b510      	push	{r4, lr}
 8007a66:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007a68:	4b0e      	ldr	r3, [pc, #56]	; (8007aa4 <HAL_InitTick+0x40>)
 8007a6a:	7818      	ldrb	r0, [r3, #0]
 8007a6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a70:	fbb3 f3f0 	udiv	r3, r3, r0
 8007a74:	4a0c      	ldr	r2, [pc, #48]	; (8007aa8 <HAL_InitTick+0x44>)
 8007a76:	6810      	ldr	r0, [r2, #0]
 8007a78:	fbb0 f0f3 	udiv	r0, r0, r3
 8007a7c:	f000 f8a2 	bl	8007bc4 <HAL_SYSTICK_Config>
 8007a80:	b968      	cbnz	r0, 8007a9e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007a82:	2c0f      	cmp	r4, #15
 8007a84:	d901      	bls.n	8007a8a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8007a86:	2001      	movs	r0, #1
 8007a88:	e00a      	b.n	8007aa0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	4621      	mov	r1, r4
 8007a8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a92:	f000 f857 	bl	8007b44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007a96:	4b05      	ldr	r3, [pc, #20]	; (8007aac <HAL_InitTick+0x48>)
 8007a98:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	e000      	b.n	8007aa0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8007a9e:	2001      	movs	r0, #1
}
 8007aa0:	bd10      	pop	{r4, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20000060 	.word	0x20000060
 8007aa8:	2000005c 	.word	0x2000005c
 8007aac:	20000064 	.word	0x20000064

08007ab0 <HAL_Init>:
{
 8007ab0:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007ab2:	4a07      	ldr	r2, [pc, #28]	; (8007ad0 <HAL_Init+0x20>)
 8007ab4:	6813      	ldr	r3, [r2, #0]
 8007ab6:	f043 0310 	orr.w	r3, r3, #16
 8007aba:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007abc:	2003      	movs	r0, #3
 8007abe:	f000 f82f 	bl	8007b20 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	f7ff ffce 	bl	8007a64 <HAL_InitTick>
  HAL_MspInit();
 8007ac8:	f7ff fe7e 	bl	80077c8 <HAL_MspInit>
}
 8007acc:	2000      	movs	r0, #0
 8007ace:	bd08      	pop	{r3, pc}
 8007ad0:	40022000 	.word	0x40022000

08007ad4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007ad4:	4a03      	ldr	r2, [pc, #12]	; (8007ae4 <HAL_IncTick+0x10>)
 8007ad6:	6811      	ldr	r1, [r2, #0]
 8007ad8:	4b03      	ldr	r3, [pc, #12]	; (8007ae8 <HAL_IncTick+0x14>)
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	440b      	add	r3, r1
 8007ade:	6013      	str	r3, [r2, #0]
}
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	20002570 	.word	0x20002570
 8007ae8:	20000060 	.word	0x20000060

08007aec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007aec:	4b01      	ldr	r3, [pc, #4]	; (8007af4 <HAL_GetTick+0x8>)
 8007aee:	6818      	ldr	r0, [r3, #0]
}
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	20002570 	.word	0x20002570

08007af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007afc:	f7ff fff6 	bl	8007aec <HAL_GetTick>
 8007b00:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007b02:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007b06:	d002      	beq.n	8007b0e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8007b08:	4b04      	ldr	r3, [pc, #16]	; (8007b1c <HAL_Delay+0x24>)
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007b0e:	f7ff ffed 	bl	8007aec <HAL_GetTick>
 8007b12:	1b40      	subs	r0, r0, r5
 8007b14:	42a0      	cmp	r0, r4
 8007b16:	d3fa      	bcc.n	8007b0e <HAL_Delay+0x16>
  {
  }
}
 8007b18:	bd38      	pop	{r3, r4, r5, pc}
 8007b1a:	bf00      	nop
 8007b1c:	20000060 	.word	0x20000060

08007b20 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b20:	4a07      	ldr	r2, [pc, #28]	; (8007b40 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8007b22:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b24:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007b28:	041b      	lsls	r3, r3, #16
 8007b2a:	0c1b      	lsrs	r3, r3, #16
 8007b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007b34:	0200      	lsls	r0, r0, #8
 8007b36:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8007b3a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8007b3c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007b3e:	4770      	bx	lr
 8007b40:	e000ed00 	.word	0xe000ed00

08007b44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007b44:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b46:	4b16      	ldr	r3, [pc, #88]	; (8007ba0 <HAL_NVIC_SetPriority+0x5c>)
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b4e:	f1c3 0407 	rsb	r4, r3, #7
 8007b52:	2c04      	cmp	r4, #4
 8007b54:	bf28      	it	cs
 8007b56:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b58:	1d1d      	adds	r5, r3, #4
 8007b5a:	2d06      	cmp	r5, #6
 8007b5c:	bf8c      	ite	hi
 8007b5e:	3b03      	subhi	r3, #3
 8007b60:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b62:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007b66:	fa05 f404 	lsl.w	r4, r5, r4
 8007b6a:	ea21 0104 	bic.w	r1, r1, r4
 8007b6e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b70:	fa05 f303 	lsl.w	r3, r5, r3
 8007b74:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b78:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	db09      	blt.n	8007b92 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b7e:	0109      	lsls	r1, r1, #4
 8007b80:	b2c9      	uxtb	r1, r1
 8007b82:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8007b86:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8007b8a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007b8e:	bc30      	pop	{r4, r5}
 8007b90:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b92:	f000 000f 	and.w	r0, r0, #15
 8007b96:	0109      	lsls	r1, r1, #4
 8007b98:	b2c9      	uxtb	r1, r1
 8007b9a:	4b02      	ldr	r3, [pc, #8]	; (8007ba4 <HAL_NVIC_SetPriority+0x60>)
 8007b9c:	5419      	strb	r1, [r3, r0]
 8007b9e:	e7f6      	b.n	8007b8e <HAL_NVIC_SetPriority+0x4a>
 8007ba0:	e000ed00 	.word	0xe000ed00
 8007ba4:	e000ed14 	.word	0xe000ed14

08007ba8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	db08      	blt.n	8007bbe <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007bac:	0942      	lsrs	r2, r0, #5
 8007bae:	f000 001f 	and.w	r0, r0, #31
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	fa03 f000 	lsl.w	r0, r3, r0
 8007bb8:	4b01      	ldr	r3, [pc, #4]	; (8007bc0 <HAL_NVIC_EnableIRQ+0x18>)
 8007bba:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007bbe:	4770      	bx	lr
 8007bc0:	e000e100 	.word	0xe000e100

08007bc4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007bc4:	3801      	subs	r0, #1
 8007bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007bca:	d20a      	bcs.n	8007be2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007bcc:	4b06      	ldr	r3, [pc, #24]	; (8007be8 <HAL_SYSTICK_Config+0x24>)
 8007bce:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bd0:	4a06      	ldr	r2, [pc, #24]	; (8007bec <HAL_SYSTICK_Config+0x28>)
 8007bd2:	21f0      	movs	r1, #240	; 0xf0
 8007bd4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007bd8:	2000      	movs	r0, #0
 8007bda:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007bdc:	2207      	movs	r2, #7
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8007be2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	e000e010 	.word	0xe000e010
 8007bec:	e000ed00 	.word	0xe000ed00

08007bf0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007bf0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007bf2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d003      	beq.n	8007c02 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007bfa:	2304      	movs	r3, #4
 8007bfc:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8007bfe:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8007c00:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c02:	6802      	ldr	r2, [r0, #0]
 8007c04:	6813      	ldr	r3, [r2, #0]
 8007c06:	f023 030e 	bic.w	r3, r3, #14
 8007c0a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8007c0c:	6802      	ldr	r2, [r0, #0]
 8007c0e:	6813      	ldr	r3, [r2, #0]
 8007c10:	f023 0301 	bic.w	r3, r3, #1
 8007c14:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007c16:	6803      	ldr	r3, [r0, #0]
 8007c18:	4a18      	ldr	r2, [pc, #96]	; (8007c7c <HAL_DMA_Abort_IT+0x8c>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d013      	beq.n	8007c46 <HAL_DMA_Abort_IT+0x56>
 8007c1e:	3214      	adds	r2, #20
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d01e      	beq.n	8007c62 <HAL_DMA_Abort_IT+0x72>
 8007c24:	3214      	adds	r2, #20
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d01d      	beq.n	8007c66 <HAL_DMA_Abort_IT+0x76>
 8007c2a:	3214      	adds	r2, #20
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d01d      	beq.n	8007c6c <HAL_DMA_Abort_IT+0x7c>
 8007c30:	3214      	adds	r2, #20
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d01d      	beq.n	8007c72 <HAL_DMA_Abort_IT+0x82>
 8007c36:	3214      	adds	r2, #20
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	bf0c      	ite	eq
 8007c3c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8007c40:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8007c44:	e000      	b.n	8007c48 <HAL_DMA_Abort_IT+0x58>
 8007c46:	2301      	movs	r3, #1
 8007c48:	4a0d      	ldr	r2, [pc, #52]	; (8007c80 <HAL_DMA_Abort_IT+0x90>)
 8007c4a:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8007c52:	2300      	movs	r3, #0
 8007c54:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8007c58:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007c5a:	b16b      	cbz	r3, 8007c78 <HAL_DMA_Abort_IT+0x88>
      hdma->XferAbortCallback(hdma);
 8007c5c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8007c5e:	2000      	movs	r0, #0
 8007c60:	e7ce      	b.n	8007c00 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007c62:	2310      	movs	r3, #16
 8007c64:	e7f0      	b.n	8007c48 <HAL_DMA_Abort_IT+0x58>
 8007c66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c6a:	e7ed      	b.n	8007c48 <HAL_DMA_Abort_IT+0x58>
 8007c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c70:	e7ea      	b.n	8007c48 <HAL_DMA_Abort_IT+0x58>
 8007c72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c76:	e7e7      	b.n	8007c48 <HAL_DMA_Abort_IT+0x58>
  HAL_StatusTypeDef status = HAL_OK;
 8007c78:	2000      	movs	r0, #0
 8007c7a:	e7c1      	b.n	8007c00 <HAL_DMA_Abort_IT+0x10>
 8007c7c:	40020008 	.word	0x40020008
 8007c80:	40020000 	.word	0x40020000

08007c84 <HAL_DMA_GetState>:
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
}
 8007c84:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 8007c88:	4770      	bx	lr
	...

08007c8c <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8007c8c:	4b15      	ldr	r3, [pc, #84]	; (8007ce4 <FLASH_SetErrorCode+0x58>)
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	f013 0f10 	tst.w	r3, #16
 8007c94:	d023      	beq.n	8007cde <FLASH_SetErrorCode+0x52>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007c96:	4a14      	ldr	r2, [pc, #80]	; (8007ce8 <FLASH_SetErrorCode+0x5c>)
 8007c98:	69d3      	ldr	r3, [r2, #28]
 8007c9a:	f043 0302 	orr.w	r3, r3, #2
 8007c9e:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8007ca0:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007ca2:	4a10      	ldr	r2, [pc, #64]	; (8007ce4 <FLASH_SetErrorCode+0x58>)
 8007ca4:	68d2      	ldr	r2, [r2, #12]
 8007ca6:	f012 0f04 	tst.w	r2, #4
 8007caa:	d006      	beq.n	8007cba <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8007cac:	490e      	ldr	r1, [pc, #56]	; (8007ce8 <FLASH_SetErrorCode+0x5c>)
 8007cae:	69ca      	ldr	r2, [r1, #28]
 8007cb0:	f042 0201 	orr.w	r2, r2, #1
 8007cb4:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8007cb6:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8007cba:	4a0a      	ldr	r2, [pc, #40]	; (8007ce4 <FLASH_SetErrorCode+0x58>)
 8007cbc:	69d2      	ldr	r2, [r2, #28]
 8007cbe:	f012 0f01 	tst.w	r2, #1
 8007cc2:	d009      	beq.n	8007cd8 <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8007cc4:	4908      	ldr	r1, [pc, #32]	; (8007ce8 <FLASH_SetErrorCode+0x5c>)
 8007cc6:	69ca      	ldr	r2, [r1, #28]
 8007cc8:	f042 0204 	orr.w	r2, r2, #4
 8007ccc:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8007cce:	4905      	ldr	r1, [pc, #20]	; (8007ce4 <FLASH_SetErrorCode+0x58>)
 8007cd0:	69ca      	ldr	r2, [r1, #28]
 8007cd2:	f022 0201 	bic.w	r2, r2, #1
 8007cd6:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8007cd8:	4a02      	ldr	r2, [pc, #8]	; (8007ce4 <FLASH_SetErrorCode+0x58>)
 8007cda:	60d3      	str	r3, [r2, #12]
}  
 8007cdc:	4770      	bx	lr
  uint32_t flags = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	e7df      	b.n	8007ca2 <FLASH_SetErrorCode+0x16>
 8007ce2:	bf00      	nop
 8007ce4:	40022000 	.word	0x40022000
 8007ce8:	20002578 	.word	0x20002578

08007cec <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007cec:	4b08      	ldr	r3, [pc, #32]	; (8007d10 <HAL_FLASH_Unlock+0x24>)
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007cf4:	d009      	beq.n	8007d0a <HAL_FLASH_Unlock+0x1e>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007cf6:	4b06      	ldr	r3, [pc, #24]	; (8007d10 <HAL_FLASH_Unlock+0x24>)
 8007cf8:	4a06      	ldr	r2, [pc, #24]	; (8007d14 <HAL_FLASH_Unlock+0x28>)
 8007cfa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007cfc:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8007d00:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007d02:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8007d04:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8007d08:	4770      	bx	lr
 8007d0a:	2000      	movs	r0, #0
}
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	40022000 	.word	0x40022000
 8007d14:	45670123 	.word	0x45670123

08007d18 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007d18:	4a03      	ldr	r2, [pc, #12]	; (8007d28 <HAL_FLASH_Lock+0x10>)
 8007d1a:	6913      	ldr	r3, [r2, #16]
 8007d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d20:	6113      	str	r3, [r2, #16]
}
 8007d22:	2000      	movs	r0, #0
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	40022000 	.word	0x40022000

08007d2c <FLASH_WaitForLastOperation>:
{
 8007d2c:	b570      	push	{r4, r5, r6, lr}
 8007d2e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007d30:	f7ff fedc 	bl	8007aec <HAL_GetTick>
 8007d34:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007d36:	4d17      	ldr	r5, [pc, #92]	; (8007d94 <FLASH_WaitForLastOperation+0x68>)
 8007d38:	68eb      	ldr	r3, [r5, #12]
 8007d3a:	f013 0f01 	tst.w	r3, #1
 8007d3e:	d00a      	beq.n	8007d56 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8007d40:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007d44:	d0f8      	beq.n	8007d38 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007d46:	b30c      	cbz	r4, 8007d8c <FLASH_WaitForLastOperation+0x60>
 8007d48:	f7ff fed0 	bl	8007aec <HAL_GetTick>
 8007d4c:	1b80      	subs	r0, r0, r6
 8007d4e:	42a0      	cmp	r0, r4
 8007d50:	d9f2      	bls.n	8007d38 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8007d52:	2003      	movs	r0, #3
 8007d54:	e019      	b.n	8007d8a <FLASH_WaitForLastOperation+0x5e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007d56:	4b0f      	ldr	r3, [pc, #60]	; (8007d94 <FLASH_WaitForLastOperation+0x68>)
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	f013 0f20 	tst.w	r3, #32
 8007d5e:	d002      	beq.n	8007d66 <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007d60:	4b0c      	ldr	r3, [pc, #48]	; (8007d94 <FLASH_WaitForLastOperation+0x68>)
 8007d62:	2220      	movs	r2, #32
 8007d64:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007d66:	4b0b      	ldr	r3, [pc, #44]	; (8007d94 <FLASH_WaitForLastOperation+0x68>)
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	f013 0f10 	tst.w	r3, #16
 8007d6e:	d109      	bne.n	8007d84 <FLASH_WaitForLastOperation+0x58>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007d70:	4b08      	ldr	r3, [pc, #32]	; (8007d94 <FLASH_WaitForLastOperation+0x68>)
 8007d72:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007d74:	f013 0f01 	tst.w	r3, #1
 8007d78:	d104      	bne.n	8007d84 <FLASH_WaitForLastOperation+0x58>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007d7a:	4b06      	ldr	r3, [pc, #24]	; (8007d94 <FLASH_WaitForLastOperation+0x68>)
 8007d7c:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007d7e:	f013 0f04 	tst.w	r3, #4
 8007d82:	d005      	beq.n	8007d90 <FLASH_WaitForLastOperation+0x64>
    FLASH_SetErrorCode();
 8007d84:	f7ff ff82 	bl	8007c8c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007d88:	2001      	movs	r0, #1
}
 8007d8a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 8007d8c:	2003      	movs	r0, #3
 8007d8e:	e7fc      	b.n	8007d8a <FLASH_WaitForLastOperation+0x5e>
  return HAL_OK;
 8007d90:	2000      	movs	r0, #0
 8007d92:	e7fa      	b.n	8007d8a <FLASH_WaitForLastOperation+0x5e>
 8007d94:	40022000 	.word	0x40022000

08007d98 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007d98:	4b06      	ldr	r3, [pc, #24]	; (8007db4 <FLASH_PageErase+0x1c>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007d9e:	4b06      	ldr	r3, [pc, #24]	; (8007db8 <FLASH_PageErase+0x20>)
 8007da0:	691a      	ldr	r2, [r3, #16]
 8007da2:	f042 0202 	orr.w	r2, r2, #2
 8007da6:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8007da8:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007daa:	691a      	ldr	r2, [r3, #16]
 8007dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007db0:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8007db2:	4770      	bx	lr
 8007db4:	20002578 	.word	0x20002578
 8007db8:	40022000 	.word	0x40022000

08007dbc <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8007dbc:	4b2f      	ldr	r3, [pc, #188]	; (8007e7c <HAL_FLASHEx_Erase+0xc0>)
 8007dbe:	7e1b      	ldrb	r3, [r3, #24]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d058      	beq.n	8007e76 <HAL_FLASHEx_Erase+0xba>
{
 8007dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc8:	460f      	mov	r7, r1
 8007dca:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8007dcc:	4b2b      	ldr	r3, [pc, #172]	; (8007e7c <HAL_FLASHEx_Erase+0xc0>)
 8007dce:	2201      	movs	r2, #1
 8007dd0:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007dd2:	6803      	ldr	r3, [r0, #0]
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d026      	beq.n	8007e26 <HAL_FLASHEx_Erase+0x6a>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007dd8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007ddc:	f7ff ffa6 	bl	8007d2c <FLASH_WaitForLastOperation>
 8007de0:	2800      	cmp	r0, #0
 8007de2:	d13f      	bne.n	8007e64 <HAL_FLASHEx_Erase+0xa8>
        *PageError = 0xFFFFFFFFU;
 8007de4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007de8:	603b      	str	r3, [r7, #0]
        for(address = pEraseInit->PageAddress;
 8007dea:	68ac      	ldr	r4, [r5, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8007dec:	68eb      	ldr	r3, [r5, #12]
 8007dee:	eb04 2383 	add.w	r3, r4, r3, lsl #10
        for(address = pEraseInit->PageAddress;
 8007df2:	429c      	cmp	r4, r3
 8007df4:	d23d      	bcs.n	8007e72 <HAL_FLASHEx_Erase+0xb6>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007df6:	f24c 3850 	movw	r8, #50000	; 0xc350
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007dfa:	4e21      	ldr	r6, [pc, #132]	; (8007e80 <HAL_FLASHEx_Erase+0xc4>)
          FLASH_PageErase(address);
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	f7ff ffcb 	bl	8007d98 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007e02:	4640      	mov	r0, r8
 8007e04:	f7ff ff92 	bl	8007d2c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007e08:	6933      	ldr	r3, [r6, #16]
 8007e0a:	f023 0302 	bic.w	r3, r3, #2
 8007e0e:	6133      	str	r3, [r6, #16]
          if (status != HAL_OK)
 8007e10:	4602      	mov	r2, r0
 8007e12:	bb28      	cbnz	r0, 8007e60 <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 8007e14:	f504 6480 	add.w	r4, r4, #1024	; 0x400
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8007e18:	68e9      	ldr	r1, [r5, #12]
 8007e1a:	68ab      	ldr	r3, [r5, #8]
 8007e1c:	eb03 2381 	add.w	r3, r3, r1, lsl #10
        for(address = pEraseInit->PageAddress;
 8007e20:	42a3      	cmp	r3, r4
 8007e22:	d8eb      	bhi.n	8007dfc <HAL_FLASHEx_Erase+0x40>
 8007e24:	e01f      	b.n	8007e66 <HAL_FLASHEx_Erase+0xaa>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007e26:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007e2a:	f7ff ff7f 	bl	8007d2c <FLASH_WaitForLastOperation>
 8007e2e:	b108      	cbz	r0, 8007e34 <HAL_FLASHEx_Erase+0x78>
  HAL_StatusTypeDef status = HAL_ERROR;
 8007e30:	2201      	movs	r2, #1
 8007e32:	e018      	b.n	8007e66 <HAL_FLASHEx_Erase+0xaa>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007e34:	4b11      	ldr	r3, [pc, #68]	; (8007e7c <HAL_FLASHEx_Erase+0xc0>)
 8007e36:	2200      	movs	r2, #0
 8007e38:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8007e3a:	4c11      	ldr	r4, [pc, #68]	; (8007e80 <HAL_FLASHEx_Erase+0xc4>)
 8007e3c:	6923      	ldr	r3, [r4, #16]
 8007e3e:	f043 0304 	orr.w	r3, r3, #4
 8007e42:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007e44:	6923      	ldr	r3, [r4, #16]
 8007e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e4a:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007e4c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007e50:	f7ff ff6c 	bl	8007d2c <FLASH_WaitForLastOperation>
 8007e54:	4602      	mov	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8007e56:	6923      	ldr	r3, [r4, #16]
 8007e58:	f023 0304 	bic.w	r3, r3, #4
 8007e5c:	6123      	str	r3, [r4, #16]
 8007e5e:	e002      	b.n	8007e66 <HAL_FLASHEx_Erase+0xaa>
            *PageError = address;
 8007e60:	603c      	str	r4, [r7, #0]
            break;
 8007e62:	e000      	b.n	8007e66 <HAL_FLASHEx_Erase+0xaa>
  HAL_StatusTypeDef status = HAL_ERROR;
 8007e64:	2201      	movs	r2, #1
  __HAL_UNLOCK(&pFlash);
 8007e66:	4b05      	ldr	r3, [pc, #20]	; (8007e7c <HAL_FLASHEx_Erase+0xc0>)
 8007e68:	2100      	movs	r1, #0
 8007e6a:	7619      	strb	r1, [r3, #24]
}
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_ERROR;
 8007e72:	2201      	movs	r2, #1
 8007e74:	e7f7      	b.n	8007e66 <HAL_FLASHEx_Erase+0xaa>
  __HAL_LOCK(&pFlash);
 8007e76:	2202      	movs	r2, #2
}
 8007e78:	4610      	mov	r0, r2
 8007e7a:	4770      	bx	lr
 8007e7c:	20002578 	.word	0x20002578
 8007e80:	40022000 	.word	0x40022000

08007e84 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007e84:	680b      	ldr	r3, [r1, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f000 80e0 	beq.w	800804c <HAL_GPIO_Init+0x1c8>
{
 8007e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e90:	b083      	sub	sp, #12
  uint32_t config = 0x00u;
 8007e92:	2500      	movs	r5, #0
  uint32_t position = 0x00u;
 8007e94:	462a      	mov	r2, r5
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007e96:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 800805c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007e9a:	4c6d      	ldr	r4, [pc, #436]	; (8008050 <HAL_GPIO_Init+0x1cc>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007e9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008060 <HAL_GPIO_Init+0x1dc>
      switch (GPIO_Init->Mode)
 8007ea0:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 8008064 <HAL_GPIO_Init+0x1e0>
 8007ea4:	e0a2      	b.n	8007fec <HAL_GPIO_Init+0x168>
 8007ea6:	f1b9 0f00 	cmp.w	r9, #0
 8007eaa:	d01b      	beq.n	8007ee4 <HAL_GPIO_Init+0x60>
 8007eac:	f1b9 0f01 	cmp.w	r9, #1
 8007eb0:	d123      	bne.n	8007efa <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007eb2:	68cd      	ldr	r5, [r1, #12]
          break;
 8007eb4:	e021      	b.n	8007efa <HAL_GPIO_Init+0x76>
      switch (GPIO_Init->Mode)
 8007eb6:	45f1      	cmp	r9, lr
 8007eb8:	d014      	beq.n	8007ee4 <HAL_GPIO_Init+0x60>
 8007eba:	d90b      	bls.n	8007ed4 <HAL_GPIO_Init+0x50>
 8007ebc:	4f65      	ldr	r7, [pc, #404]	; (8008054 <HAL_GPIO_Init+0x1d0>)
 8007ebe:	45b9      	cmp	r9, r7
 8007ec0:	d010      	beq.n	8007ee4 <HAL_GPIO_Init+0x60>
 8007ec2:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8007ec6:	45b9      	cmp	r9, r7
 8007ec8:	d00c      	beq.n	8007ee4 <HAL_GPIO_Init+0x60>
 8007eca:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8008068 <HAL_GPIO_Init+0x1e4>
 8007ece:	45d1      	cmp	r9, sl
 8007ed0:	d113      	bne.n	8007efa <HAL_GPIO_Init+0x76>
 8007ed2:	e007      	b.n	8007ee4 <HAL_GPIO_Init+0x60>
 8007ed4:	f8df a194 	ldr.w	sl, [pc, #404]	; 800806c <HAL_GPIO_Init+0x1e8>
 8007ed8:	45d1      	cmp	r9, sl
 8007eda:	d003      	beq.n	8007ee4 <HAL_GPIO_Init+0x60>
 8007edc:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
 8007ee0:	45d1      	cmp	r9, sl
 8007ee2:	d10a      	bne.n	8007efa <HAL_GPIO_Init+0x76>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007ee4:	688d      	ldr	r5, [r1, #8]
 8007ee6:	2d00      	cmp	r5, #0
 8007ee8:	f000 80a2 	beq.w	8008030 <HAL_GPIO_Init+0x1ac>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007eec:	2d01      	cmp	r5, #1
            GPIOx->BSRR = ioposition;
 8007eee:	bf0c      	ite	eq
 8007ef0:	6106      	streq	r6, [r0, #16]
            GPIOx->BRR = ioposition;
 8007ef2:	6146      	strne	r6, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007ef4:	2508      	movs	r5, #8
 8007ef6:	e000      	b.n	8007efa <HAL_GPIO_Init+0x76>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007ef8:	2500      	movs	r5, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007efa:	2bff      	cmp	r3, #255	; 0xff
 8007efc:	bf99      	ittee	ls
 8007efe:	4682      	movls	sl, r0
 8007f00:	6806      	ldrls	r6, [r0, #0]
 8007f02:	f100 0a04 	addhi.w	sl, r0, #4
 8007f06:	6846      	ldrhi	r6, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007f08:	2bff      	cmp	r3, #255	; 0xff
 8007f0a:	bf91      	iteee	ls
 8007f0c:	ea4f 0982 	movls.w	r9, r2, lsl #2
 8007f10:	f102 4980 	addhi.w	r9, r2, #1073741824	; 0x40000000
 8007f14:	f1a9 0908 	subhi.w	r9, r9, #8
 8007f18:	ea4f 0989 	movhi.w	r9, r9, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007f1c:	f04f 0b0f 	mov.w	fp, #15
 8007f20:	fa0b fb09 	lsl.w	fp, fp, r9
 8007f24:	ea26 060b 	bic.w	r6, r6, fp
 8007f28:	fa05 f909 	lsl.w	r9, r5, r9
 8007f2c:	ea46 0609 	orr.w	r6, r6, r9
 8007f30:	f8ca 6000 	str.w	r6, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007f34:	684e      	ldr	r6, [r1, #4]
 8007f36:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 8007f3a:	d052      	beq.n	8007fe2 <HAL_GPIO_Init+0x15e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007f3c:	4f46      	ldr	r7, [pc, #280]	; (8008058 <HAL_GPIO_Init+0x1d4>)
 8007f3e:	69be      	ldr	r6, [r7, #24]
 8007f40:	f046 0601 	orr.w	r6, r6, #1
 8007f44:	61be      	str	r6, [r7, #24]
 8007f46:	69be      	ldr	r6, [r7, #24]
 8007f48:	f006 0601 	and.w	r6, r6, #1
 8007f4c:	9601      	str	r6, [sp, #4]
 8007f4e:	9e01      	ldr	r6, [sp, #4]
 8007f50:	f022 0603 	bic.w	r6, r2, #3
 8007f54:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8007f58:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2u];
 8007f5c:	f8d6 a008 	ldr.w	sl, [r6, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007f60:	f002 0903 	and.w	r9, r2, #3
 8007f64:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8007f68:	f04f 090f 	mov.w	r9, #15
 8007f6c:	fa09 f90b 	lsl.w	r9, r9, fp
 8007f70:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007f74:	4560      	cmp	r0, ip
 8007f76:	d05d      	beq.n	8008034 <HAL_GPIO_Init+0x1b0>
 8007f78:	4540      	cmp	r0, r8
 8007f7a:	d05e      	beq.n	800803a <HAL_GPIO_Init+0x1b6>
 8007f7c:	f5a7 3780 	sub.w	r7, r7, #65536	; 0x10000
 8007f80:	42b8      	cmp	r0, r7
 8007f82:	d05d      	beq.n	8008040 <HAL_GPIO_Init+0x1bc>
 8007f84:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8007f88:	42b8      	cmp	r0, r7
 8007f8a:	bf0c      	ite	eq
 8007f8c:	f04f 0903 	moveq.w	r9, #3
 8007f90:	f04f 0904 	movne.w	r9, #4
 8007f94:	fa09 f90b 	lsl.w	r9, r9, fp
 8007f98:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8007f9c:	f8c6 9008 	str.w	r9, [r6, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007fa0:	684e      	ldr	r6, [r1, #4]
 8007fa2:	f416 3f80 	tst.w	r6, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8007fa6:	6826      	ldr	r6, [r4, #0]
 8007fa8:	bf14      	ite	ne
 8007faa:	431e      	orrne	r6, r3
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007fac:	439e      	biceq	r6, r3
 8007fae:	6026      	str	r6, [r4, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007fb0:	684e      	ldr	r6, [r1, #4]
 8007fb2:	f416 3f00 	tst.w	r6, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8007fb6:	6866      	ldr	r6, [r4, #4]
 8007fb8:	bf14      	ite	ne
 8007fba:	431e      	orrne	r6, r3
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007fbc:	439e      	biceq	r6, r3
 8007fbe:	6066      	str	r6, [r4, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007fc0:	684e      	ldr	r6, [r1, #4]
 8007fc2:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8007fc6:	68a6      	ldr	r6, [r4, #8]
 8007fc8:	bf14      	ite	ne
 8007fca:	431e      	orrne	r6, r3
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007fcc:	439e      	biceq	r6, r3
 8007fce:	60a6      	str	r6, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007fd0:	684e      	ldr	r6, [r1, #4]
 8007fd2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8007fd6:	68e6      	ldr	r6, [r4, #12]
 8007fd8:	bf14      	ite	ne
 8007fda:	4333      	orrne	r3, r6
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007fdc:	ea26 0303 	biceq.w	r3, r6, r3
 8007fe0:	60e3      	str	r3, [r4, #12]
        }
      }
    }

	position++;
 8007fe2:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007fe4:	680b      	ldr	r3, [r1, #0]
 8007fe6:	fa33 f602 	lsrs.w	r6, r3, r2
 8007fea:	d02c      	beq.n	8008046 <HAL_GPIO_Init+0x1c2>
    ioposition = (0x01uL << position);
 8007fec:	2601      	movs	r6, #1
 8007fee:	4096      	lsls	r6, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007ff0:	4033      	ands	r3, r6
    if (iocurrent == ioposition)
 8007ff2:	429e      	cmp	r6, r3
 8007ff4:	d1f5      	bne.n	8007fe2 <HAL_GPIO_Init+0x15e>
      switch (GPIO_Init->Mode)
 8007ff6:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8007ffa:	f1b9 0f12 	cmp.w	r9, #18
 8007ffe:	d014      	beq.n	800802a <HAL_GPIO_Init+0x1a6>
 8008000:	f63f af59 	bhi.w	8007eb6 <HAL_GPIO_Init+0x32>
 8008004:	f1b9 0f02 	cmp.w	r9, #2
 8008008:	d00c      	beq.n	8008024 <HAL_GPIO_Init+0x1a0>
 800800a:	f67f af4c 	bls.w	8007ea6 <HAL_GPIO_Init+0x22>
 800800e:	f1b9 0f03 	cmp.w	r9, #3
 8008012:	f43f af71 	beq.w	8007ef8 <HAL_GPIO_Init+0x74>
 8008016:	f1b9 0f11 	cmp.w	r9, #17
 800801a:	f47f af6e 	bne.w	8007efa <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800801e:	68cd      	ldr	r5, [r1, #12]
 8008020:	3504      	adds	r5, #4
          break;
 8008022:	e76a      	b.n	8007efa <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008024:	68cd      	ldr	r5, [r1, #12]
 8008026:	3508      	adds	r5, #8
          break;
 8008028:	e767      	b.n	8007efa <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800802a:	68cd      	ldr	r5, [r1, #12]
 800802c:	350c      	adds	r5, #12
          break;
 800802e:	e764      	b.n	8007efa <HAL_GPIO_Init+0x76>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008030:	2504      	movs	r5, #4
 8008032:	e762      	b.n	8007efa <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008034:	f04f 0900 	mov.w	r9, #0
 8008038:	e7ac      	b.n	8007f94 <HAL_GPIO_Init+0x110>
 800803a:	f04f 0901 	mov.w	r9, #1
 800803e:	e7a9      	b.n	8007f94 <HAL_GPIO_Init+0x110>
 8008040:	f04f 0902 	mov.w	r9, #2
 8008044:	e7a6      	b.n	8007f94 <HAL_GPIO_Init+0x110>
  }
}
 8008046:	b003      	add	sp, #12
 8008048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	40010400 	.word	0x40010400
 8008054:	10310000 	.word	0x10310000
 8008058:	40021000 	.word	0x40021000
 800805c:	40010800 	.word	0x40010800
 8008060:	40010c00 	.word	0x40010c00
 8008064:	10210000 	.word	0x10210000
 8008068:	10220000 	.word	0x10220000
 800806c:	10110000 	.word	0x10110000

08008070 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008070:	6883      	ldr	r3, [r0, #8]
 8008072:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8008074:	bf14      	ite	ne
 8008076:	2001      	movne	r0, #1
 8008078:	2000      	moveq	r0, #0
 800807a:	4770      	bx	lr

0800807c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800807c:	b912      	cbnz	r2, 8008084 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800807e:	0409      	lsls	r1, r1, #16
 8008080:	6101      	str	r1, [r0, #16]
  }
}
 8008082:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8008084:	6101      	str	r1, [r0, #16]
 8008086:	4770      	bx	lr

08008088 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008088:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800808a:	4b05      	ldr	r3, [pc, #20]	; (80080a0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	4203      	tst	r3, r0
 8008090:	d100      	bne.n	8008094 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8008092:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008094:	4b02      	ldr	r3, [pc, #8]	; (80080a0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8008096:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008098:	f7ff fb7c 	bl	8007794 <HAL_GPIO_EXTI_Callback>
}
 800809c:	e7f9      	b.n	8008092 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800809e:	bf00      	nop
 80080a0:	40010400 	.word	0x40010400

080080a4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80080a4:	6803      	ldr	r3, [r0, #0]
 80080a6:	695a      	ldr	r2, [r3, #20]
 80080a8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80080ac:	d011      	beq.n	80080d2 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80080b2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80080b4:	2300      	movs	r3, #0
 80080b6:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80080b8:	2220      	movs	r2, #32
 80080ba:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080be:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80080c2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80080c4:	f042 0204 	orr.w	r2, r2, #4
 80080c8:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080ca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 80080ce:	2001      	movs	r0, #1
 80080d0:	4770      	bx	lr
  }
  return HAL_OK;
 80080d2:	2000      	movs	r0, #0
}
 80080d4:	4770      	bx	lr

080080d6 <I2C_WaitOnFlagUntilTimeout>:
{
 80080d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080da:	4606      	mov	r6, r0
 80080dc:	4690      	mov	r8, r2
 80080de:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080e0:	f3c1 4707 	ubfx	r7, r1, #16, #8
 80080e4:	b28c      	uxth	r4, r1
 80080e6:	2f01      	cmp	r7, #1
 80080e8:	6833      	ldr	r3, [r6, #0]
 80080ea:	bf0c      	ite	eq
 80080ec:	695b      	ldreq	r3, [r3, #20]
 80080ee:	699b      	ldrne	r3, [r3, #24]
 80080f0:	ea34 0303 	bics.w	r3, r4, r3
 80080f4:	bf0c      	ite	eq
 80080f6:	2301      	moveq	r3, #1
 80080f8:	2300      	movne	r3, #0
 80080fa:	4598      	cmp	r8, r3
 80080fc:	d119      	bne.n	8008132 <I2C_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80080fe:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008102:	d0f0      	beq.n	80080e6 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008104:	f7ff fcf2 	bl	8007aec <HAL_GetTick>
 8008108:	9b06      	ldr	r3, [sp, #24]
 800810a:	1ac0      	subs	r0, r0, r3
 800810c:	42a8      	cmp	r0, r5
 800810e:	d801      	bhi.n	8008114 <I2C_WaitOnFlagUntilTimeout+0x3e>
 8008110:	2d00      	cmp	r5, #0
 8008112:	d1e8      	bne.n	80080e6 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008114:	2300      	movs	r3, #0
 8008116:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008118:	2220      	movs	r2, #32
 800811a:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800811e:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008122:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8008124:	f042 0220 	orr.w	r2, r2, #32
 8008128:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800812a:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 800812e:	2001      	movs	r0, #1
 8008130:	e000      	b.n	8008134 <I2C_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8008132:	2000      	movs	r0, #0
}
 8008134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008138 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8008138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800813c:	4604      	mov	r4, r0
 800813e:	4617      	mov	r7, r2
 8008140:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008142:	f3c1 4607 	ubfx	r6, r1, #16, #8
 8008146:	b28d      	uxth	r5, r1
 8008148:	2e01      	cmp	r6, #1
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	bf0c      	ite	eq
 800814e:	695b      	ldreq	r3, [r3, #20]
 8008150:	699b      	ldrne	r3, [r3, #24]
 8008152:	ea35 0303 	bics.w	r3, r5, r3
 8008156:	bf14      	ite	ne
 8008158:	2301      	movne	r3, #1
 800815a:	2300      	moveq	r3, #0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d035      	beq.n	80081cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008160:	6823      	ldr	r3, [r4, #0]
 8008162:	695a      	ldr	r2, [r3, #20]
 8008164:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8008168:	d119      	bne.n	800819e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 800816a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800816e:	d0eb      	beq.n	8008148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008170:	f7ff fcbc 	bl	8007aec <HAL_GetTick>
 8008174:	eba0 0008 	sub.w	r0, r0, r8
 8008178:	42b8      	cmp	r0, r7
 800817a:	d801      	bhi.n	8008180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
 800817c:	2f00      	cmp	r7, #0
 800817e:	d1e3      	bne.n	8008148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008180:	2300      	movs	r3, #0
 8008182:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008184:	2220      	movs	r2, #32
 8008186:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800818a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800818e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008190:	f042 0220 	orr.w	r2, r2, #32
 8008194:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008196:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800819a:	2001      	movs	r0, #1
 800819c:	e017      	b.n	80081ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x96>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081a4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80081ac:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80081ae:	2300      	movs	r3, #0
 80081b0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80081b2:	2220      	movs	r2, #32
 80081b4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80081bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80081be:	f042 0204 	orr.w	r2, r2, #4
 80081c2:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80081c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 80081c8:	2001      	movs	r0, #1
 80081ca:	e000      	b.n	80081ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x96>
  return HAL_OK;
 80081cc:	2000      	movs	r0, #0
}
 80081ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080081d2 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80081d2:	b570      	push	{r4, r5, r6, lr}
 80081d4:	4604      	mov	r4, r0
 80081d6:	460d      	mov	r5, r1
 80081d8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	695b      	ldr	r3, [r3, #20]
 80081de:	f013 0f80 	tst.w	r3, #128	; 0x80
 80081e2:	d11c      	bne.n	800821e <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80081e4:	4620      	mov	r0, r4
 80081e6:	f7ff ff5d 	bl	80080a4 <I2C_IsAcknowledgeFailed>
 80081ea:	b9d0      	cbnz	r0, 8008222 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80081ec:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80081f0:	d0f3      	beq.n	80081da <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081f2:	f7ff fc7b 	bl	8007aec <HAL_GetTick>
 80081f6:	1b80      	subs	r0, r0, r6
 80081f8:	42a8      	cmp	r0, r5
 80081fa:	d801      	bhi.n	8008200 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80081fc:	2d00      	cmp	r5, #0
 80081fe:	d1ec      	bne.n	80081da <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008200:	2300      	movs	r3, #0
 8008202:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008204:	2220      	movs	r2, #32
 8008206:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800820a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800820e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008210:	f042 0220 	orr.w	r2, r2, #32
 8008214:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008216:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800821a:	2001      	movs	r0, #1
 800821c:	e000      	b.n	8008220 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 800821e:	2000      	movs	r0, #0
}
 8008220:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8008222:	2001      	movs	r0, #1
 8008224:	e7fc      	b.n	8008220 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08008226 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8008226:	b570      	push	{r4, r5, r6, lr}
 8008228:	4604      	mov	r4, r0
 800822a:	460d      	mov	r5, r1
 800822c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	f013 0f04 	tst.w	r3, #4
 8008236:	d11c      	bne.n	8008272 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008238:	4620      	mov	r0, r4
 800823a:	f7ff ff33 	bl	80080a4 <I2C_IsAcknowledgeFailed>
 800823e:	b9d0      	cbnz	r0, 8008276 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8008240:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008244:	d0f3      	beq.n	800822e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008246:	f7ff fc51 	bl	8007aec <HAL_GetTick>
 800824a:	1b80      	subs	r0, r0, r6
 800824c:	42a8      	cmp	r0, r5
 800824e:	d801      	bhi.n	8008254 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8008250:	2d00      	cmp	r5, #0
 8008252:	d1ec      	bne.n	800822e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008254:	2300      	movs	r3, #0
 8008256:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008258:	2220      	movs	r2, #32
 800825a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800825e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008262:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008264:	f042 0220 	orr.w	r2, r2, #32
 8008268:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800826a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800826e:	2001      	movs	r0, #1
 8008270:	e000      	b.n	8008274 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8008272:	2000      	movs	r0, #0
}
 8008274:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8008276:	2001      	movs	r0, #1
 8008278:	e7fc      	b.n	8008274 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

0800827a <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800827a:	b570      	push	{r4, r5, r6, lr}
 800827c:	4605      	mov	r5, r0
 800827e:	460c      	mov	r4, r1
 8008280:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008282:	682b      	ldr	r3, [r5, #0]
 8008284:	695a      	ldr	r2, [r3, #20]
 8008286:	f012 0f40 	tst.w	r2, #64	; 0x40
 800828a:	d129      	bne.n	80082e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800828c:	695a      	ldr	r2, [r3, #20]
 800828e:	f012 0f10 	tst.w	r2, #16
 8008292:	d115      	bne.n	80082c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008294:	f7ff fc2a 	bl	8007aec <HAL_GetTick>
 8008298:	1b80      	subs	r0, r0, r6
 800829a:	42a0      	cmp	r0, r4
 800829c:	d801      	bhi.n	80082a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 800829e:	2c00      	cmp	r4, #0
 80082a0:	d1ef      	bne.n	8008282 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80082a2:	2300      	movs	r3, #0
 80082a4:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082a6:	2220      	movs	r2, #32
 80082a8:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082ac:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082b0:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80082b2:	f042 0220 	orr.w	r2, r2, #32
 80082b6:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80082b8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80082bc:	2001      	movs	r0, #1
}
 80082be:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082c0:	f06f 0210 	mvn.w	r2, #16
 80082c4:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80082c6:	2300      	movs	r3, #0
 80082c8:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082ca:	2220      	movs	r2, #32
 80082cc:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082d0:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80082d4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80082d6:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80082d8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80082dc:	2001      	movs	r0, #1
 80082de:	e7ee      	b.n	80082be <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 80082e0:	2000      	movs	r0, #0
 80082e2:	e7ec      	b.n	80082be <I2C_WaitOnRXNEFlagUntilTimeout+0x44>

080082e4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80082e4:	2800      	cmp	r0, #0
 80082e6:	f000 80ac 	beq.w	8008442 <HAL_I2C_Init+0x15e>
{
 80082ea:	b570      	push	{r4, r5, r6, lr}
 80082ec:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80082ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d076      	beq.n	80083e4 <HAL_I2C_Init+0x100>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80082f6:	2324      	movs	r3, #36	; 0x24
 80082f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80082fc:	6822      	ldr	r2, [r4, #0]
 80082fe:	6813      	ldr	r3, [r2, #0]
 8008300:	f023 0301 	bic.w	r3, r3, #1
 8008304:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008306:	6822      	ldr	r2, [r4, #0]
 8008308:	6813      	ldr	r3, [r2, #0]
 800830a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800830e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008310:	6822      	ldr	r2, [r4, #0]
 8008312:	6813      	ldr	r3, [r2, #0]
 8008314:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008318:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800831a:	f001 fe6f 	bl	8009ffc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800831e:	6862      	ldr	r2, [r4, #4]
 8008320:	4b4a      	ldr	r3, [pc, #296]	; (800844c <HAL_I2C_Init+0x168>)
 8008322:	429a      	cmp	r2, r3
 8008324:	bf94      	ite	ls
 8008326:	4b4a      	ldrls	r3, [pc, #296]	; (8008450 <HAL_I2C_Init+0x16c>)
 8008328:	4b4a      	ldrhi	r3, [pc, #296]	; (8008454 <HAL_I2C_Init+0x170>)
 800832a:	4298      	cmp	r0, r3
 800832c:	bf8c      	ite	hi
 800832e:	2300      	movhi	r3, #0
 8008330:	2301      	movls	r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	f040 8087 	bne.w	8008446 <HAL_I2C_Init+0x162>
  freqrange = I2C_FREQRANGE(pclk1);
 8008338:	4b47      	ldr	r3, [pc, #284]	; (8008458 <HAL_I2C_Init+0x174>)
 800833a:	fba3 2300 	umull	r2, r3, r3, r0
 800833e:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008340:	6821      	ldr	r1, [r4, #0]
 8008342:	684a      	ldr	r2, [r1, #4]
 8008344:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8008348:	431a      	orrs	r2, r3
 800834a:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800834c:	6825      	ldr	r5, [r4, #0]
 800834e:	6a2a      	ldr	r2, [r5, #32]
 8008350:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8008354:	6866      	ldr	r6, [r4, #4]
 8008356:	493d      	ldr	r1, [pc, #244]	; (800844c <HAL_I2C_Init+0x168>)
 8008358:	428e      	cmp	r6, r1
 800835a:	d848      	bhi.n	80083ee <HAL_I2C_Init+0x10a>
 800835c:	3301      	adds	r3, #1
 800835e:	4313      	orrs	r3, r2
 8008360:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008362:	6825      	ldr	r5, [r4, #0]
 8008364:	69e9      	ldr	r1, [r5, #28]
 8008366:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800836a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800836e:	6862      	ldr	r2, [r4, #4]
 8008370:	4b36      	ldr	r3, [pc, #216]	; (800844c <HAL_I2C_Init+0x168>)
 8008372:	429a      	cmp	r2, r3
 8008374:	d845      	bhi.n	8008402 <HAL_I2C_Init+0x11e>
 8008376:	3801      	subs	r0, #1
 8008378:	0053      	lsls	r3, r2, #1
 800837a:	fbb0 f3f3 	udiv	r3, r0, r3
 800837e:	3301      	adds	r3, #1
 8008380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008384:	2b04      	cmp	r3, #4
 8008386:	bf38      	it	cc
 8008388:	2304      	movcc	r3, #4
 800838a:	430b      	orrs	r3, r1
 800838c:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800838e:	6821      	ldr	r1, [r4, #0]
 8008390:	680a      	ldr	r2, [r1, #0]
 8008392:	69e3      	ldr	r3, [r4, #28]
 8008394:	6a20      	ldr	r0, [r4, #32]
 8008396:	4303      	orrs	r3, r0
 8008398:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800839c:	4313      	orrs	r3, r2
 800839e:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80083a0:	6821      	ldr	r1, [r4, #0]
 80083a2:	688a      	ldr	r2, [r1, #8]
 80083a4:	6923      	ldr	r3, [r4, #16]
 80083a6:	68e0      	ldr	r0, [r4, #12]
 80083a8:	4303      	orrs	r3, r0
 80083aa:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 80083ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80083b2:	4313      	orrs	r3, r2
 80083b4:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80083b6:	6821      	ldr	r1, [r4, #0]
 80083b8:	68ca      	ldr	r2, [r1, #12]
 80083ba:	6963      	ldr	r3, [r4, #20]
 80083bc:	69a0      	ldr	r0, [r4, #24]
 80083be:	4303      	orrs	r3, r0
 80083c0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80083c4:	4313      	orrs	r3, r2
 80083c6:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80083c8:	6822      	ldr	r2, [r4, #0]
 80083ca:	6813      	ldr	r3, [r2, #0]
 80083cc:	f043 0301 	orr.w	r3, r3, #1
 80083d0:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083d2:	2000      	movs	r0, #0
 80083d4:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80083d6:	2320      	movs	r3, #32
 80083d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80083dc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083de:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80083e2:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80083e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80083e8:	f7ff fa10 	bl	800780c <HAL_I2C_MspInit>
 80083ec:	e783      	b.n	80082f6 <HAL_I2C_Init+0x12>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80083ee:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80083f2:	fb01 f303 	mul.w	r3, r1, r3
 80083f6:	4919      	ldr	r1, [pc, #100]	; (800845c <HAL_I2C_Init+0x178>)
 80083f8:	fba1 1303 	umull	r1, r3, r1, r3
 80083fc:	099b      	lsrs	r3, r3, #6
 80083fe:	3301      	adds	r3, #1
 8008400:	e7ad      	b.n	800835e <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008402:	68a3      	ldr	r3, [r4, #8]
 8008404:	b953      	cbnz	r3, 800841c <HAL_I2C_Init+0x138>
 8008406:	3801      	subs	r0, #1
 8008408:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800840c:	fbb0 f2f2 	udiv	r2, r0, r2
 8008410:	3201      	adds	r2, #1
 8008412:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8008416:	b97a      	cbnz	r2, 8008438 <HAL_I2C_Init+0x154>
 8008418:	2301      	movs	r3, #1
 800841a:	e7b6      	b.n	800838a <HAL_I2C_Init+0xa6>
 800841c:	3801      	subs	r0, #1
 800841e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008422:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008426:	fbb0 f2f2 	udiv	r2, r0, r2
 800842a:	3201      	adds	r2, #1
 800842c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8008430:	b12a      	cbz	r2, 800843e <HAL_I2C_Init+0x15a>
 8008432:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8008436:	e7a8      	b.n	800838a <HAL_I2C_Init+0xa6>
 8008438:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 800843c:	e7a5      	b.n	800838a <HAL_I2C_Init+0xa6>
 800843e:	2301      	movs	r3, #1
 8008440:	e7a3      	b.n	800838a <HAL_I2C_Init+0xa6>
    return HAL_ERROR;
 8008442:	2001      	movs	r0, #1
}
 8008444:	4770      	bx	lr
    return HAL_ERROR;
 8008446:	2001      	movs	r0, #1
 8008448:	e7cb      	b.n	80083e2 <HAL_I2C_Init+0xfe>
 800844a:	bf00      	nop
 800844c:	000186a0 	.word	0x000186a0
 8008450:	001e847f 	.word	0x001e847f
 8008454:	003d08ff 	.word	0x003d08ff
 8008458:	431bde83 	.word	0x431bde83
 800845c:	10624dd3 	.word	0x10624dd3

08008460 <HAL_I2C_Master_Transmit>:
{
 8008460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008464:	b084      	sub	sp, #16
 8008466:	4604      	mov	r4, r0
 8008468:	460e      	mov	r6, r1
 800846a:	4690      	mov	r8, r2
 800846c:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800846e:	f7ff fb3d 	bl	8007aec <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008472:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b20      	cmp	r3, #32
 800847a:	d004      	beq.n	8008486 <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 800847c:	2602      	movs	r6, #2
}
 800847e:	4630      	mov	r0, r6
 8008480:	b004      	add	sp, #16
 8008482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008486:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008488:	9000      	str	r0, [sp, #0]
 800848a:	2319      	movs	r3, #25
 800848c:	2201      	movs	r2, #1
 800848e:	4971      	ldr	r1, [pc, #452]	; (8008654 <HAL_I2C_Master_Transmit+0x1f4>)
 8008490:	4620      	mov	r0, r4
 8008492:	f7ff fe20 	bl	80080d6 <I2C_WaitOnFlagUntilTimeout>
 8008496:	2800      	cmp	r0, #0
 8008498:	f040 80d5 	bne.w	8008646 <HAL_I2C_Master_Transmit+0x1e6>
    __HAL_LOCK(hi2c);
 800849c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	f000 80d2 	beq.w	800864a <HAL_I2C_Master_Transmit+0x1ea>
 80084a6:	2301      	movs	r3, #1
 80084a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80084ac:	6823      	ldr	r3, [r4, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	f012 0f01 	tst.w	r2, #1
 80084b4:	d103      	bne.n	80084be <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	f042 0201 	orr.w	r2, r2, #1
 80084bc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80084be:	6822      	ldr	r2, [r4, #0]
 80084c0:	6813      	ldr	r3, [r2, #0]
 80084c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084c6:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80084c8:	2321      	movs	r3, #33	; 0x21
 80084ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80084ce:	2310      	movs	r3, #16
 80084d0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80084d4:	2300      	movs	r3, #0
 80084d6:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80084d8:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80084dc:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80084de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80084e0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80084e2:	4b5d      	ldr	r3, [pc, #372]	; (8008658 <HAL_I2C_Master_Transmit+0x1f8>)
 80084e4:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80084e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80084e8:	2b08      	cmp	r3, #8
 80084ea:	d00d      	beq.n	8008508 <HAL_I2C_Master_Transmit+0xa8>
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d00b      	beq.n	8008508 <HAL_I2C_Master_Transmit+0xa8>
 80084f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80084f4:	d008      	beq.n	8008508 <HAL_I2C_Master_Transmit+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80084f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80084f8:	2b12      	cmp	r3, #18
 80084fa:	d10a      	bne.n	8008512 <HAL_I2C_Master_Transmit+0xb2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084fc:	6822      	ldr	r2, [r4, #0]
 80084fe:	6813      	ldr	r3, [r2, #0]
 8008500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008504:	6013      	str	r3, [r2, #0]
 8008506:	e004      	b.n	8008512 <HAL_I2C_Master_Transmit+0xb2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008508:	6822      	ldr	r2, [r4, #0]
 800850a:	6813      	ldr	r3, [r2, #0]
 800850c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008510:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008512:	9500      	str	r5, [sp, #0]
 8008514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008516:	2200      	movs	r2, #0
 8008518:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800851c:	4620      	mov	r0, r4
 800851e:	f7ff fdda 	bl	80080d6 <I2C_WaitOnFlagUntilTimeout>
 8008522:	b148      	cbz	r0, 8008538 <HAL_I2C_Master_Transmit+0xd8>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008524:	6823      	ldr	r3, [r4, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f413 7f80 	tst.w	r3, #256	; 0x100
 800852c:	d002      	beq.n	8008534 <HAL_I2C_Master_Transmit+0xd4>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800852e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008532:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8008534:	2601      	movs	r6, #1
 8008536:	e7a2      	b.n	800847e <HAL_I2C_Master_Transmit+0x1e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008538:	6923      	ldr	r3, [r4, #16]
 800853a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800853e:	d115      	bne.n	800856c <HAL_I2C_Master_Transmit+0x10c>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008540:	6823      	ldr	r3, [r4, #0]
 8008542:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8008546:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008548:	462b      	mov	r3, r5
 800854a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800854c:	4943      	ldr	r1, [pc, #268]	; (800865c <HAL_I2C_Master_Transmit+0x1fc>)
 800854e:	4620      	mov	r0, r4
 8008550:	f7ff fdf2 	bl	8008138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008554:	4606      	mov	r6, r0
 8008556:	2800      	cmp	r0, #0
 8008558:	d179      	bne.n	800864e <HAL_I2C_Master_Transmit+0x1ee>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800855a:	2300      	movs	r3, #0
 800855c:	9303      	str	r3, [sp, #12]
 800855e:	6823      	ldr	r3, [r4, #0]
 8008560:	695a      	ldr	r2, [r3, #20]
 8008562:	9203      	str	r2, [sp, #12]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	9303      	str	r3, [sp, #12]
 8008568:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 800856a:	e025      	b.n	80085b8 <HAL_I2C_Master_Transmit+0x158>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800856c:	6822      	ldr	r2, [r4, #0]
 800856e:	11f3      	asrs	r3, r6, #7
 8008570:	f003 0306 	and.w	r3, r3, #6
 8008574:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8008578:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800857a:	462b      	mov	r3, r5
 800857c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800857e:	4938      	ldr	r1, [pc, #224]	; (8008660 <HAL_I2C_Master_Transmit+0x200>)
 8008580:	4620      	mov	r0, r4
 8008582:	f7ff fdd9 	bl	8008138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008586:	2800      	cmp	r0, #0
 8008588:	d1d4      	bne.n	8008534 <HAL_I2C_Master_Transmit+0xd4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800858a:	6823      	ldr	r3, [r4, #0]
 800858c:	b2f6      	uxtb	r6, r6
 800858e:	611e      	str	r6, [r3, #16]
 8008590:	e7da      	b.n	8008548 <HAL_I2C_Master_Transmit+0xe8>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008592:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008594:	2b04      	cmp	r3, #4
 8008596:	d001      	beq.n	800859c <HAL_I2C_Master_Transmit+0x13c>
        return HAL_ERROR;
 8008598:	2601      	movs	r6, #1
 800859a:	e770      	b.n	800847e <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800859c:	6822      	ldr	r2, [r4, #0]
 800859e:	6813      	ldr	r3, [r2, #0]
 80085a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80085a4:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80085a6:	2601      	movs	r6, #1
 80085a8:	e769      	b.n	800847e <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085aa:	462a      	mov	r2, r5
 80085ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80085ae:	4620      	mov	r0, r4
 80085b0:	f7ff fe39 	bl	8008226 <I2C_WaitOnBTFFlagUntilTimeout>
 80085b4:	2800      	cmp	r0, #0
 80085b6:	d12c      	bne.n	8008612 <HAL_I2C_Master_Transmit+0x1b2>
    while (hi2c->XferSize > 0U)
 80085b8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d035      	beq.n	800862a <HAL_I2C_Master_Transmit+0x1ca>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085be:	462a      	mov	r2, r5
 80085c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80085c2:	4620      	mov	r0, r4
 80085c4:	f7ff fe05 	bl	80081d2 <I2C_WaitOnTXEFlagUntilTimeout>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d1e2      	bne.n	8008592 <HAL_I2C_Master_Transmit+0x132>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80085cc:	6823      	ldr	r3, [r4, #0]
 80085ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80085d0:	7812      	ldrb	r2, [r2, #0]
 80085d2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80085d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80085d6:	1c4b      	adds	r3, r1, #1
 80085d8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80085da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80085dc:	3b01      	subs	r3, #1
 80085de:	b29b      	uxth	r3, r3
 80085e0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80085e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80085e4:	3b01      	subs	r3, #1
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80085ea:	6822      	ldr	r2, [r4, #0]
 80085ec:	6950      	ldr	r0, [r2, #20]
 80085ee:	f010 0f04 	tst.w	r0, #4
 80085f2:	d0da      	beq.n	80085aa <HAL_I2C_Master_Transmit+0x14a>
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d0d8      	beq.n	80085aa <HAL_I2C_Master_Transmit+0x14a>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80085f8:	784b      	ldrb	r3, [r1, #1]
 80085fa:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 80085fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085fe:	3301      	adds	r3, #1
 8008600:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8008602:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008604:	3b01      	subs	r3, #1
 8008606:	b29b      	uxth	r3, r3
 8008608:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800860a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800860c:	3b01      	subs	r3, #1
 800860e:	8523      	strh	r3, [r4, #40]	; 0x28
 8008610:	e7cb      	b.n	80085aa <HAL_I2C_Master_Transmit+0x14a>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008612:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008614:	2b04      	cmp	r3, #4
 8008616:	d001      	beq.n	800861c <HAL_I2C_Master_Transmit+0x1bc>
        return HAL_ERROR;
 8008618:	2601      	movs	r6, #1
 800861a:	e730      	b.n	800847e <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800861c:	6822      	ldr	r2, [r4, #0]
 800861e:	6813      	ldr	r3, [r2, #0]
 8008620:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008624:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8008626:	2601      	movs	r6, #1
 8008628:	e729      	b.n	800847e <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800862a:	6822      	ldr	r2, [r4, #0]
 800862c:	6813      	ldr	r3, [r2, #0]
 800862e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008632:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008634:	2320      	movs	r3, #32
 8008636:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800863a:	2300      	movs	r3, #0
 800863c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8008640:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8008644:	e71b      	b.n	800847e <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 8008646:	2602      	movs	r6, #2
 8008648:	e719      	b.n	800847e <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 800864a:	2602      	movs	r6, #2
 800864c:	e717      	b.n	800847e <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 800864e:	2601      	movs	r6, #1
 8008650:	e715      	b.n	800847e <HAL_I2C_Master_Transmit+0x1e>
 8008652:	bf00      	nop
 8008654:	00100002 	.word	0x00100002
 8008658:	ffff0000 	.word	0xffff0000
 800865c:	00010002 	.word	0x00010002
 8008660:	00010008 	.word	0x00010008

08008664 <HAL_I2C_Master_Receive>:
{
 8008664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008668:	b089      	sub	sp, #36	; 0x24
 800866a:	4604      	mov	r4, r0
 800866c:	460e      	mov	r6, r1
 800866e:	4690      	mov	r8, r2
 8008670:	461f      	mov	r7, r3
  __IO uint32_t count = 0U;
 8008672:	2300      	movs	r3, #0
 8008674:	9307      	str	r3, [sp, #28]
  uint32_t tickstart = HAL_GetTick();
 8008676:	f7ff fa39 	bl	8007aec <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800867a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2b20      	cmp	r3, #32
 8008682:	d004      	beq.n	800868e <HAL_I2C_Master_Receive+0x2a>
    return HAL_BUSY;
 8008684:	2602      	movs	r6, #2
}
 8008686:	4630      	mov	r0, r6
 8008688:	b009      	add	sp, #36	; 0x24
 800868a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800868e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008690:	9000      	str	r0, [sp, #0]
 8008692:	2319      	movs	r3, #25
 8008694:	2201      	movs	r2, #1
 8008696:	4999      	ldr	r1, [pc, #612]	; (80088fc <HAL_I2C_Master_Receive+0x298>)
 8008698:	4620      	mov	r0, r4
 800869a:	f7ff fd1c 	bl	80080d6 <I2C_WaitOnFlagUntilTimeout>
 800869e:	2800      	cmp	r0, #0
 80086a0:	f040 81e6 	bne.w	8008a70 <HAL_I2C_Master_Receive+0x40c>
    __HAL_LOCK(hi2c);
 80086a4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	f000 81e3 	beq.w	8008a74 <HAL_I2C_Master_Receive+0x410>
 80086ae:	2301      	movs	r3, #1
 80086b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80086b4:	6823      	ldr	r3, [r4, #0]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	f012 0f01 	tst.w	r2, #1
 80086bc:	d103      	bne.n	80086c6 <HAL_I2C_Master_Receive+0x62>
      __HAL_I2C_ENABLE(hi2c);
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	f042 0201 	orr.w	r2, r2, #1
 80086c4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086c6:	6822      	ldr	r2, [r4, #0]
 80086c8:	6813      	ldr	r3, [r2, #0]
 80086ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086ce:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80086d0:	2322      	movs	r3, #34	; 0x22
 80086d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80086d6:	2310      	movs	r3, #16
 80086d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80086dc:	2300      	movs	r3, #0
 80086de:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80086e0:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80086e4:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80086e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80086e8:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086ea:	4b85      	ldr	r3, [pc, #532]	; (8008900 <HAL_I2C_Master_Receive+0x29c>)
 80086ec:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80086ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086f0:	6821      	ldr	r1, [r4, #0]
 80086f2:	680b      	ldr	r3, [r1, #0]
 80086f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80086f8:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80086fa:	2a08      	cmp	r2, #8
 80086fc:	d00d      	beq.n	800871a <HAL_I2C_Master_Receive+0xb6>
 80086fe:	2a01      	cmp	r2, #1
 8008700:	d00b      	beq.n	800871a <HAL_I2C_Master_Receive+0xb6>
 8008702:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8008706:	d008      	beq.n	800871a <HAL_I2C_Master_Receive+0xb6>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008708:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800870a:	2b11      	cmp	r3, #17
 800870c:	d10a      	bne.n	8008724 <HAL_I2C_Master_Receive+0xc0>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800870e:	6822      	ldr	r2, [r4, #0]
 8008710:	6813      	ldr	r3, [r2, #0]
 8008712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008716:	6013      	str	r3, [r2, #0]
 8008718:	e004      	b.n	8008724 <HAL_I2C_Master_Receive+0xc0>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800871a:	6822      	ldr	r2, [r4, #0]
 800871c:	6813      	ldr	r3, [r2, #0]
 800871e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008722:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008724:	9500      	str	r5, [sp, #0]
 8008726:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008728:	2200      	movs	r2, #0
 800872a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800872e:	4620      	mov	r0, r4
 8008730:	f7ff fcd1 	bl	80080d6 <I2C_WaitOnFlagUntilTimeout>
 8008734:	b148      	cbz	r0, 800874a <HAL_I2C_Master_Receive+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008736:	6823      	ldr	r3, [r4, #0]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800873e:	d002      	beq.n	8008746 <HAL_I2C_Master_Receive+0xe2>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008740:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008744:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8008746:	2601      	movs	r6, #1
 8008748:	e79d      	b.n	8008686 <HAL_I2C_Master_Receive+0x22>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800874a:	6923      	ldr	r3, [r4, #16]
 800874c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008750:	d15d      	bne.n	800880e <HAL_I2C_Master_Receive+0x1aa>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008752:	6823      	ldr	r3, [r4, #0]
 8008754:	f046 0601 	orr.w	r6, r6, #1
 8008758:	b2f6      	uxtb	r6, r6
 800875a:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800875c:	462b      	mov	r3, r5
 800875e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008760:	4968      	ldr	r1, [pc, #416]	; (8008904 <HAL_I2C_Master_Receive+0x2a0>)
 8008762:	4620      	mov	r0, r4
 8008764:	f7ff fce8 	bl	8008138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008768:	4606      	mov	r6, r0
 800876a:	2800      	cmp	r0, #0
 800876c:	f040 8184 	bne.w	8008a78 <HAL_I2C_Master_Receive+0x414>
    if (hi2c->XferSize == 0U)
 8008770:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008772:	2b00      	cmp	r3, #0
 8008774:	f040 8088 	bne.w	8008888 <HAL_I2C_Master_Receive+0x224>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008778:	9302      	str	r3, [sp, #8]
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	695a      	ldr	r2, [r3, #20]
 800877e:	9202      	str	r2, [sp, #8]
 8008780:	699a      	ldr	r2, [r3, #24]
 8008782:	9202      	str	r2, [sp, #8]
 8008784:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800878c:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800878e:	4f5e      	ldr	r7, [pc, #376]	; (8008908 <HAL_I2C_Master_Receive+0x2a4>)
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008790:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008910 <HAL_I2C_Master_Receive+0x2ac>
 8008794:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8008914 <HAL_I2C_Master_Receive+0x2b0>
    while (hi2c->XferSize > 0U)
 8008798:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800879a:	2b00      	cmp	r3, #0
 800879c:	f000 815f 	beq.w	8008a5e <HAL_I2C_Master_Receive+0x3fa>
      if (hi2c->XferSize <= 3U)
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	f200 8134 	bhi.w	8008a0e <HAL_I2C_Master_Receive+0x3aa>
        if (hi2c->XferSize == 1U)
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	f000 80b6 	beq.w	8008918 <HAL_I2C_Master_Receive+0x2b4>
        else if (hi2c->XferSize == 2U)
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	f040 80ca 	bne.w	8008946 <HAL_I2C_Master_Receive+0x2e2>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80087b2:	9500      	str	r5, [sp, #0]
 80087b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087b6:	2200      	movs	r2, #0
 80087b8:	4639      	mov	r1, r7
 80087ba:	4620      	mov	r0, r4
 80087bc:	f7ff fc8b 	bl	80080d6 <I2C_WaitOnFlagUntilTimeout>
 80087c0:	2800      	cmp	r0, #0
 80087c2:	f040 815d 	bne.w	8008a80 <HAL_I2C_Master_Receive+0x41c>
 80087c6:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087c8:	6822      	ldr	r2, [r4, #0]
 80087ca:	6813      	ldr	r3, [r2, #0]
 80087cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80087d0:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	691a      	ldr	r2, [r3, #16]
 80087d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087d8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80087da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087dc:	3301      	adds	r3, #1
 80087de:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80087e0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80087e2:	3b01      	subs	r3, #1
 80087e4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80087e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80087e8:	3b01      	subs	r3, #1
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80087ee:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087f0:	6823      	ldr	r3, [r4, #0]
 80087f2:	691a      	ldr	r2, [r3, #16]
 80087f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087f6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80087f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087fa:	3301      	adds	r3, #1
 80087fc:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80087fe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008800:	3b01      	subs	r3, #1
 8008802:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008804:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008806:	3b01      	subs	r3, #1
 8008808:	b29b      	uxth	r3, r3
 800880a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800880c:	e7c4      	b.n	8008798 <HAL_I2C_Master_Receive+0x134>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800880e:	11f7      	asrs	r7, r6, #7
 8008810:	f007 0706 	and.w	r7, r7, #6
 8008814:	6823      	ldr	r3, [r4, #0]
 8008816:	f047 02f0 	orr.w	r2, r7, #240	; 0xf0
 800881a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800881c:	462b      	mov	r3, r5
 800881e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008820:	493a      	ldr	r1, [pc, #232]	; (800890c <HAL_I2C_Master_Receive+0x2a8>)
 8008822:	4620      	mov	r0, r4
 8008824:	f7ff fc88 	bl	8008138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008828:	2800      	cmp	r0, #0
 800882a:	d18c      	bne.n	8008746 <HAL_I2C_Master_Receive+0xe2>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	b2f6      	uxtb	r6, r6
 8008830:	611e      	str	r6, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008832:	462b      	mov	r3, r5
 8008834:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008836:	4933      	ldr	r1, [pc, #204]	; (8008904 <HAL_I2C_Master_Receive+0x2a0>)
 8008838:	4620      	mov	r0, r4
 800883a:	f7ff fc7d 	bl	8008138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800883e:	2800      	cmp	r0, #0
 8008840:	d181      	bne.n	8008746 <HAL_I2C_Master_Receive+0xe2>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008842:	2200      	movs	r2, #0
 8008844:	9206      	str	r2, [sp, #24]
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	6959      	ldr	r1, [r3, #20]
 800884a:	9106      	str	r1, [sp, #24]
 800884c:	6999      	ldr	r1, [r3, #24]
 800884e:	9106      	str	r1, [sp, #24]
 8008850:	9906      	ldr	r1, [sp, #24]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008852:	6819      	ldr	r1, [r3, #0]
 8008854:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008858:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800885a:	9500      	str	r5, [sp, #0]
 800885c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800885e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008862:	4620      	mov	r0, r4
 8008864:	f7ff fc37 	bl	80080d6 <I2C_WaitOnFlagUntilTimeout>
 8008868:	b148      	cbz	r0, 800887e <HAL_I2C_Master_Receive+0x21a>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800886a:	6823      	ldr	r3, [r4, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008872:	f43f af68 	beq.w	8008746 <HAL_I2C_Master_Receive+0xe2>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008876:	f44f 7300 	mov.w	r3, #512	; 0x200
 800887a:	6423      	str	r3, [r4, #64]	; 0x40
 800887c:	e763      	b.n	8008746 <HAL_I2C_Master_Receive+0xe2>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	f047 07f1 	orr.w	r7, r7, #241	; 0xf1
 8008884:	611f      	str	r7, [r3, #16]
 8008886:	e769      	b.n	800875c <HAL_I2C_Master_Receive+0xf8>
    else if (hi2c->XferSize == 1U)
 8008888:	2b01      	cmp	r3, #1
 800888a:	d00f      	beq.n	80088ac <HAL_I2C_Master_Receive+0x248>
    else if (hi2c->XferSize == 2U)
 800888c:	2b02      	cmp	r3, #2
 800888e:	d021      	beq.n	80088d4 <HAL_I2C_Master_Receive+0x270>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008890:	6822      	ldr	r2, [r4, #0]
 8008892:	6813      	ldr	r3, [r2, #0]
 8008894:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008898:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800889a:	2300      	movs	r3, #0
 800889c:	9305      	str	r3, [sp, #20]
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	695a      	ldr	r2, [r3, #20]
 80088a2:	9205      	str	r2, [sp, #20]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	9305      	str	r3, [sp, #20]
 80088a8:	9b05      	ldr	r3, [sp, #20]
 80088aa:	e770      	b.n	800878e <HAL_I2C_Master_Receive+0x12a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088ac:	6822      	ldr	r2, [r4, #0]
 80088ae:	6813      	ldr	r3, [r2, #0]
 80088b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088b4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80088b6:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088b8:	2300      	movs	r3, #0
 80088ba:	9303      	str	r3, [sp, #12]
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	695a      	ldr	r2, [r3, #20]
 80088c0:	9203      	str	r2, [sp, #12]
 80088c2:	699a      	ldr	r2, [r3, #24]
 80088c4:	9203      	str	r2, [sp, #12]
 80088c6:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80088d0:	b662      	cpsie	i
 80088d2:	e75c      	b.n	800878e <HAL_I2C_Master_Receive+0x12a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80088d4:	6822      	ldr	r2, [r4, #0]
 80088d6:	6813      	ldr	r3, [r2, #0]
 80088d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80088dc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80088de:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088e0:	2300      	movs	r3, #0
 80088e2:	9304      	str	r3, [sp, #16]
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	695a      	ldr	r2, [r3, #20]
 80088e8:	9204      	str	r2, [sp, #16]
 80088ea:	699a      	ldr	r2, [r3, #24]
 80088ec:	9204      	str	r2, [sp, #16]
 80088ee:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80088f8:	b662      	cpsie	i
 80088fa:	e748      	b.n	800878e <HAL_I2C_Master_Receive+0x12a>
 80088fc:	00100002 	.word	0x00100002
 8008900:	ffff0000 	.word	0xffff0000
 8008904:	00010002 	.word	0x00010002
 8008908:	00010004 	.word	0x00010004
 800890c:	00010008 	.word	0x00010008
 8008910:	2000005c 	.word	0x2000005c
 8008914:	14f8b589 	.word	0x14f8b589
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008918:	462a      	mov	r2, r5
 800891a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800891c:	4620      	mov	r0, r4
 800891e:	f7ff fcac 	bl	800827a <I2C_WaitOnRXNEFlagUntilTimeout>
 8008922:	2800      	cmp	r0, #0
 8008924:	f040 80aa 	bne.w	8008a7c <HAL_I2C_Master_Receive+0x418>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	691a      	ldr	r2, [r3, #16]
 800892c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800892e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008932:	3301      	adds	r3, #1
 8008934:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008936:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008938:	3b01      	subs	r3, #1
 800893a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800893c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800893e:	3b01      	subs	r3, #1
 8008940:	b29b      	uxth	r3, r3
 8008942:	8563      	strh	r3, [r4, #42]	; 0x2a
 8008944:	e728      	b.n	8008798 <HAL_I2C_Master_Receive+0x134>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008946:	9500      	str	r5, [sp, #0]
 8008948:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800894a:	2200      	movs	r2, #0
 800894c:	4639      	mov	r1, r7
 800894e:	4620      	mov	r0, r4
 8008950:	f7ff fbc1 	bl	80080d6 <I2C_WaitOnFlagUntilTimeout>
 8008954:	2800      	cmp	r0, #0
 8008956:	f040 8095 	bne.w	8008a84 <HAL_I2C_Master_Receive+0x420>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800895a:	6822      	ldr	r2, [r4, #0]
 800895c:	6813      	ldr	r3, [r2, #0]
 800895e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008962:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008964:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	691a      	ldr	r2, [r3, #16]
 800896a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800896c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800896e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008970:	3301      	adds	r3, #1
 8008972:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008974:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008976:	3b01      	subs	r3, #1
 8008978:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800897a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800897c:	3b01      	subs	r3, #1
 800897e:	b29b      	uxth	r3, r3
 8008980:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008982:	f8d9 3000 	ldr.w	r3, [r9]
 8008986:	08db      	lsrs	r3, r3, #3
 8008988:	fba8 2303 	umull	r2, r3, r8, r3
 800898c:	0a1b      	lsrs	r3, r3, #8
 800898e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008992:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008996:	9307      	str	r3, [sp, #28]
            count--;
 8008998:	9b07      	ldr	r3, [sp, #28]
 800899a:	3b01      	subs	r3, #1
 800899c:	9307      	str	r3, [sp, #28]
            if (count == 0U)
 800899e:	9b07      	ldr	r3, [sp, #28]
 80089a0:	b333      	cbz	r3, 80089f0 <HAL_I2C_Master_Receive+0x38c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	695a      	ldr	r2, [r3, #20]
 80089a6:	f012 0f04 	tst.w	r2, #4
 80089aa:	d0f5      	beq.n	8008998 <HAL_I2C_Master_Receive+0x334>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089b2:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089b4:	6823      	ldr	r3, [r4, #0]
 80089b6:	691a      	ldr	r2, [r3, #16]
 80089b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089ba:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80089bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089be:	3301      	adds	r3, #1
 80089c0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80089c2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80089c4:	3b01      	subs	r3, #1
 80089c6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80089c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80089ca:	3b01      	subs	r3, #1
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80089d0:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089d2:	6823      	ldr	r3, [r4, #0]
 80089d4:	691a      	ldr	r2, [r3, #16]
 80089d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089d8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80089da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089dc:	3301      	adds	r3, #1
 80089de:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80089e0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80089e2:	3b01      	subs	r3, #1
 80089e4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80089e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80089e8:	3b01      	subs	r3, #1
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	8563      	strh	r3, [r4, #42]	; 0x2a
 80089ee:	e6d3      	b.n	8008798 <HAL_I2C_Master_Receive+0x134>
              hi2c->PreviousState       = I2C_STATE_NONE;
 80089f0:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80089f2:	2220      	movs	r2, #32
 80089f4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089f8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80089fe:	f042 0220 	orr.w	r2, r2, #32
 8008a02:	6422      	str	r2, [r4, #64]	; 0x40
 8008a04:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8008a06:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8008a0a:	2601      	movs	r6, #1
 8008a0c:	e63b      	b.n	8008686 <HAL_I2C_Master_Receive+0x22>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a0e:	462a      	mov	r2, r5
 8008a10:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008a12:	4620      	mov	r0, r4
 8008a14:	f7ff fc31 	bl	800827a <I2C_WaitOnRXNEFlagUntilTimeout>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	d135      	bne.n	8008a88 <HAL_I2C_Master_Receive+0x424>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a1c:	6823      	ldr	r3, [r4, #0]
 8008a1e:	691a      	ldr	r2, [r3, #16]
 8008a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a22:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008a24:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008a26:	1c53      	adds	r3, r2, #1
 8008a28:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8008a2a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8008a30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008a32:	3b01      	subs	r3, #1
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008a38:	6823      	ldr	r3, [r4, #0]
 8008a3a:	6959      	ldr	r1, [r3, #20]
 8008a3c:	f011 0f04 	tst.w	r1, #4
 8008a40:	f43f aeaa 	beq.w	8008798 <HAL_I2C_Master_Receive+0x134>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8008a48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008a4e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008a50:	3b01      	subs	r3, #1
 8008a52:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008a54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008a56:	3b01      	subs	r3, #1
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	8563      	strh	r3, [r4, #42]	; 0x2a
 8008a5c:	e69c      	b.n	8008798 <HAL_I2C_Master_Receive+0x134>
    hi2c->State = HAL_I2C_STATE_READY;
 8008a5e:	2320      	movs	r3, #32
 8008a60:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a64:	2300      	movs	r3, #0
 8008a66:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8008a6a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8008a6e:	e60a      	b.n	8008686 <HAL_I2C_Master_Receive+0x22>
      return HAL_BUSY;
 8008a70:	2602      	movs	r6, #2
 8008a72:	e608      	b.n	8008686 <HAL_I2C_Master_Receive+0x22>
    __HAL_LOCK(hi2c);
 8008a74:	2602      	movs	r6, #2
 8008a76:	e606      	b.n	8008686 <HAL_I2C_Master_Receive+0x22>
      return HAL_ERROR;
 8008a78:	2601      	movs	r6, #1
 8008a7a:	e604      	b.n	8008686 <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 8008a7c:	2601      	movs	r6, #1
 8008a7e:	e602      	b.n	8008686 <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 8008a80:	2601      	movs	r6, #1
 8008a82:	e600      	b.n	8008686 <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 8008a84:	2601      	movs	r6, #1
 8008a86:	e5fe      	b.n	8008686 <HAL_I2C_Master_Receive+0x22>
          return HAL_ERROR;
 8008a88:	2601      	movs	r6, #1
 8008a8a:	e5fc      	b.n	8008686 <HAL_I2C_Master_Receive+0x22>

08008a8c <HAL_I2C_MasterTxCpltCallback>:
}
 8008a8c:	4770      	bx	lr

08008a8e <HAL_I2C_MasterRxCpltCallback>:
}
 8008a8e:	4770      	bx	lr

08008a90 <HAL_I2C_SlaveTxCpltCallback>:
}
 8008a90:	4770      	bx	lr

08008a92 <HAL_I2C_SlaveRxCpltCallback>:
}
 8008a92:	4770      	bx	lr

08008a94 <HAL_I2C_AddrCallback>:
}
 8008a94:	4770      	bx	lr

08008a96 <HAL_I2C_ListenCpltCallback>:
}
 8008a96:	4770      	bx	lr

08008a98 <HAL_I2C_MemTxCpltCallback>:
}
 8008a98:	4770      	bx	lr

08008a9a <I2C_MemoryTransmit_TXE_BTF>:
{
 8008a9a:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008a9c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 8008aa0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008aa2:	b99a      	cbnz	r2, 8008acc <I2C_MemoryTransmit_TXE_BTF+0x32>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008aa4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d008      	beq.n	8008abc <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008aaa:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8008aac:	6802      	ldr	r2, [r0, #0]
 8008aae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8008ab2:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 8008ab4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	6503      	str	r3, [r0, #80]	; 0x50
}
 8008aba:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008abc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8008abe:	6802      	ldr	r2, [r0, #0]
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8008ac4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008ac6:	3302      	adds	r3, #2
 8008ac8:	6503      	str	r3, [r0, #80]	; 0x50
 8008aca:	e7f6      	b.n	8008aba <I2C_MemoryTransmit_TXE_BTF+0x20>
 8008acc:	b2db      	uxtb	r3, r3
  else if (hi2c->EventCount == 1U)
 8008ace:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008ad0:	2a01      	cmp	r2, #1
 8008ad2:	d00b      	beq.n	8008aec <I2C_MemoryTransmit_TXE_BTF+0x52>
  else if (hi2c->EventCount == 2U)
 8008ad4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008ad6:	2a02      	cmp	r2, #2
 8008ad8:	d1ef      	bne.n	8008aba <I2C_MemoryTransmit_TXE_BTF+0x20>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008ada:	2b22      	cmp	r3, #34	; 0x22
 8008adc:	d00e      	beq.n	8008afc <I2C_MemoryTransmit_TXE_BTF+0x62>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008ade:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8008ae0:	b292      	uxth	r2, r2
 8008ae2:	b1ea      	cbz	r2, 8008b20 <I2C_MemoryTransmit_TXE_BTF+0x86>
 8008ae4:	2b21      	cmp	r3, #33	; 0x21
 8008ae6:	d00f      	beq.n	8008b08 <I2C_MemoryTransmit_TXE_BTF+0x6e>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008ae8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8008aea:	e7e6      	b.n	8008aba <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008aec:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8008aee:	6802      	ldr	r2, [r0, #0]
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 8008af4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008af6:	3301      	adds	r3, #1
 8008af8:	6503      	str	r3, [r0, #80]	; 0x50
 8008afa:	e7de      	b.n	8008aba <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008afc:	6802      	ldr	r2, [r0, #0]
 8008afe:	6813      	ldr	r3, [r2, #0]
 8008b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b04:	6013      	str	r3, [r2, #0]
 8008b06:	e7d8      	b.n	8008aba <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b08:	6803      	ldr	r3, [r0, #0]
 8008b0a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008b0c:	7812      	ldrb	r2, [r2, #0]
 8008b0e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008b10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008b12:	3301      	adds	r3, #1
 8008b14:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8008b16:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	8543      	strh	r3, [r0, #42]	; 0x2a
 8008b1e:	e7cc      	b.n	8008aba <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008b20:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8008b22:	b292      	uxth	r2, r2
 8008b24:	2a00      	cmp	r2, #0
 8008b26:	d1c8      	bne.n	8008aba <I2C_MemoryTransmit_TXE_BTF+0x20>
 8008b28:	2b21      	cmp	r3, #33	; 0x21
 8008b2a:	d1c6      	bne.n	8008aba <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008b2c:	6802      	ldr	r2, [r0, #0]
 8008b2e:	6853      	ldr	r3, [r2, #4]
 8008b30:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008b34:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b36:	6802      	ldr	r2, [r0, #0]
 8008b38:	6813      	ldr	r3, [r2, #0]
 8008b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b3e:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008b40:	2300      	movs	r3, #0
 8008b42:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008b44:	2220      	movs	r2, #32
 8008b46:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b4a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008b4e:	f7ff ffa3 	bl	8008a98 <HAL_I2C_MemTxCpltCallback>
}
 8008b52:	e7b2      	b.n	8008aba <I2C_MemoryTransmit_TXE_BTF+0x20>

08008b54 <HAL_I2C_MemRxCpltCallback>:
}
 8008b54:	4770      	bx	lr

08008b56 <HAL_I2C_ErrorCallback>:
}
 8008b56:	4770      	bx	lr

08008b58 <HAL_I2C_AbortCpltCallback>:
}
 8008b58:	4770      	bx	lr
	...

08008b5c <I2C_DMAAbort>:
{
 8008b5c:	b500      	push	{lr}
 8008b5e:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8008b60:	2300      	movs	r3, #0
 8008b62:	9301      	str	r3, [sp, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008b64:	6a40      	ldr	r0, [r0, #36]	; 0x24
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008b66:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8008b6a:	b2d2      	uxtb	r2, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008b6c:	4b32      	ldr	r3, [pc, #200]	; (8008c38 <I2C_DMAAbort+0xdc>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	08db      	lsrs	r3, r3, #3
 8008b72:	4932      	ldr	r1, [pc, #200]	; (8008c3c <I2C_DMAAbort+0xe0>)
 8008b74:	fba1 1303 	umull	r1, r3, r1, r3
 8008b78:	0a1b      	lsrs	r3, r3, #8
 8008b7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008b7e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008b82:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8008b84:	9b01      	ldr	r3, [sp, #4]
 8008b86:	b143      	cbz	r3, 8008b9a <I2C_DMAAbort+0x3e>
    count--;
 8008b88:	9b01      	ldr	r3, [sp, #4]
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008b8e:	6803      	ldr	r3, [r0, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008b96:	d1f5      	bne.n	8008b84 <I2C_DMAAbort+0x28>
 8008b98:	e003      	b.n	8008ba2 <I2C_DMAAbort+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b9a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008b9c:	f043 0320 	orr.w	r3, r3, #32
 8008ba0:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 8008ba2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008ba4:	b10b      	cbz	r3, 8008baa <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	6299      	str	r1, [r3, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8008baa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008bac:	b10b      	cbz	r3, 8008bb2 <I2C_DMAAbort+0x56>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008bae:	2100      	movs	r1, #0
 8008bb0:	6299      	str	r1, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bb2:	6801      	ldr	r1, [r0, #0]
 8008bb4:	680b      	ldr	r3, [r1, #0]
 8008bb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bba:	600b      	str	r3, [r1, #0]
  hi2c->XferCount = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8008bc0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008bc2:	b10b      	cbz	r3, 8008bc8 <I2C_DMAAbort+0x6c>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	6359      	str	r1, [r3, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 8008bc8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008bca:	b10b      	cbz	r3, 8008bd0 <I2C_DMAAbort+0x74>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008bcc:	2100      	movs	r1, #0
 8008bce:	6359      	str	r1, [r3, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 8008bd0:	6801      	ldr	r1, [r0, #0]
 8008bd2:	680b      	ldr	r3, [r1, #0]
 8008bd4:	f023 0301 	bic.w	r3, r3, #1
 8008bd8:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008bda:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	2b60      	cmp	r3, #96	; 0x60
 8008be2:	d00e      	beq.n	8008c02 <I2C_DMAAbort+0xa6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008be4:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8008be8:	2a28      	cmp	r2, #40	; 0x28
 8008bea:	d014      	beq.n	8008c16 <I2C_DMAAbort+0xba>
      hi2c->State = HAL_I2C_STATE_READY;
 8008bec:	2320      	movs	r3, #32
 8008bee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008bf8:	f7ff ffad 	bl	8008b56 <HAL_I2C_ErrorCallback>
}
 8008bfc:	b003      	add	sp, #12
 8008bfe:	f85d fb04 	ldr.w	pc, [sp], #4
    hi2c->State         = HAL_I2C_STATE_READY;
 8008c02:	2320      	movs	r3, #32
 8008c04:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008c0e:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8008c10:	f7ff ffa2 	bl	8008b58 <HAL_I2C_AbortCpltCallback>
 8008c14:	e7f2      	b.n	8008bfc <I2C_DMAAbort+0xa0>
      __HAL_I2C_ENABLE(hi2c);
 8008c16:	6802      	ldr	r2, [r0, #0]
 8008c18:	6813      	ldr	r3, [r2, #0]
 8008c1a:	f043 0301 	orr.w	r3, r3, #1
 8008c1e:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c20:	6802      	ldr	r2, [r0, #0]
 8008c22:	6813      	ldr	r3, [r2, #0]
 8008c24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008c28:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008c2e:	2328      	movs	r3, #40	; 0x28
 8008c30:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8008c34:	e7e0      	b.n	8008bf8 <I2C_DMAAbort+0x9c>
 8008c36:	bf00      	nop
 8008c38:	2000005c 	.word	0x2000005c
 8008c3c:	14f8b589 	.word	0x14f8b589

08008c40 <I2C_ITError>:
{
 8008c40:	b510      	push	{r4, lr}
 8008c42:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008c44:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8008c48:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008c4a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8008c4e:	b2db      	uxtb	r3, r3
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008c50:	2b10      	cmp	r3, #16
 8008c52:	d035      	beq.n	8008cc0 <I2C_ITError+0x80>
 8008c54:	2b40      	cmp	r3, #64	; 0x40
 8008c56:	d033      	beq.n	8008cc0 <I2C_ITError+0x80>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008c58:	f002 0328 	and.w	r3, r2, #40	; 0x28
 8008c5c:	2b28      	cmp	r3, #40	; 0x28
 8008c5e:	d03c      	beq.n	8008cda <I2C_ITError+0x9a>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008c60:	6823      	ldr	r3, [r4, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8008c68:	d107      	bne.n	8008c7a <I2C_ITError+0x3a>
 8008c6a:	2a60      	cmp	r2, #96	; 0x60
 8008c6c:	d005      	beq.n	8008c7a <I2C_ITError+0x3a>
      hi2c->State = HAL_I2C_STATE_READY;
 8008c6e:	2320      	movs	r3, #32
 8008c70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c74:	2300      	movs	r3, #0
 8008c76:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	685a      	ldr	r2, [r3, #4]
 8008c82:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008c86:	d04c      	beq.n	8008d22 <I2C_ITError+0xe2>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008c88:	685a      	ldr	r2, [r3, #4]
 8008c8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c8e:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008c90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c92:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8008c96:	2a01      	cmp	r2, #1
 8008c98:	d025      	beq.n	8008ce6 <I2C_ITError+0xa6>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008c9a:	4a47      	ldr	r2, [pc, #284]	; (8008db8 <I2C_ITError+0x178>)
 8008c9c:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008c9e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008ca0:	f7fe ffa6 	bl	8007bf0 <HAL_DMA_Abort_IT>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d04e      	beq.n	8008d46 <I2C_ITError+0x106>
        __HAL_I2C_DISABLE(hi2c);
 8008ca8:	6822      	ldr	r2, [r4, #0]
 8008caa:	6813      	ldr	r3, [r2, #0]
 8008cac:	f023 0301 	bic.w	r3, r3, #1
 8008cb0:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8008cb2:	2320      	movs	r3, #32
 8008cb4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008cb8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008cba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008cbc:	4798      	blx	r3
 8008cbe:	e042      	b.n	8008d46 <I2C_ITError+0x106>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008cc0:	2a22      	cmp	r2, #34	; 0x22
 8008cc2:	d1c9      	bne.n	8008c58 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008cc4:	6822      	ldr	r2, [r4, #0]
 8008cc6:	6813      	ldr	r3, [r2, #0]
 8008cc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ccc:	6013      	str	r3, [r2, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8008cd6:	d0ca      	beq.n	8008c6e <I2C_ITError+0x2e>
 8008cd8:	e7cf      	b.n	8008c7a <I2C_ITError+0x3a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008cde:	2328      	movs	r3, #40	; 0x28
 8008ce0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8008ce4:	e7cb      	b.n	8008c7e <I2C_ITError+0x3e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008ce6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008ce8:	4a33      	ldr	r2, [pc, #204]	; (8008db8 <I2C_ITError+0x178>)
 8008cea:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008cec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008cee:	f7fe ff7f 	bl	8007bf0 <HAL_DMA_Abort_IT>
 8008cf2:	b340      	cbz	r0, 8008d46 <I2C_ITError+0x106>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	695a      	ldr	r2, [r3, #20]
 8008cf8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008cfc:	d005      	beq.n	8008d0a <I2C_ITError+0xca>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cfe:	691a      	ldr	r2, [r3, #16]
 8008d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d02:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008d04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d06:	3301      	adds	r3, #1
 8008d08:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8008d0a:	6822      	ldr	r2, [r4, #0]
 8008d0c:	6813      	ldr	r3, [r2, #0]
 8008d0e:	f023 0301 	bic.w	r3, r3, #1
 8008d12:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8008d14:	2320      	movs	r3, #32
 8008d16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008d1a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008d1c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008d1e:	4798      	blx	r3
 8008d20:	e011      	b.n	8008d46 <I2C_ITError+0x106>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008d22:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8008d26:	b2d2      	uxtb	r2, r2
 8008d28:	2a60      	cmp	r2, #96	; 0x60
 8008d2a:	d01f      	beq.n	8008d6c <I2C_ITError+0x12c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008d2c:	695a      	ldr	r2, [r3, #20]
 8008d2e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008d32:	d005      	beq.n	8008d40 <I2C_ITError+0x100>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d34:	691a      	ldr	r2, [r3, #16]
 8008d36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d38:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8008d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8008d40:	4620      	mov	r0, r4
 8008d42:	f7ff ff08 	bl	8008b56 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 8008d46:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008d48:	f013 0f0f 	tst.w	r3, #15
 8008d4c:	d004      	beq.n	8008d58 <I2C_ITError+0x118>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008d4e:	6822      	ldr	r2, [r4, #0]
 8008d50:	6853      	ldr	r3, [r2, #4]
 8008d52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008d56:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8008d58:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008d5c:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008d5e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008d60:	f012 0f04 	tst.w	r2, #4
 8008d64:	d001      	beq.n	8008d6a <I2C_ITError+0x12a>
 8008d66:	2b28      	cmp	r3, #40	; 0x28
 8008d68:	d018      	beq.n	8008d9c <I2C_ITError+0x15c>
}
 8008d6a:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8008d6c:	2220      	movs	r2, #32
 8008d6e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d72:	2200      	movs	r2, #0
 8008d74:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008d76:	695a      	ldr	r2, [r3, #20]
 8008d78:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008d7c:	d005      	beq.n	8008d8a <I2C_ITError+0x14a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d7e:	691a      	ldr	r2, [r3, #16]
 8008d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d82:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8008d84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d86:	3301      	adds	r3, #1
 8008d88:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8008d8a:	6822      	ldr	r2, [r4, #0]
 8008d8c:	6813      	ldr	r3, [r2, #0]
 8008d8e:	f023 0301 	bic.w	r3, r3, #1
 8008d92:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8008d94:	4620      	mov	r0, r4
 8008d96:	f7ff fedf 	bl	8008b58 <HAL_I2C_AbortCpltCallback>
 8008d9a:	e7d4      	b.n	8008d46 <I2C_ITError+0x106>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008d9c:	4b07      	ldr	r3, [pc, #28]	; (8008dbc <I2C_ITError+0x17c>)
 8008d9e:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008da0:	2300      	movs	r3, #0
 8008da2:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008da4:	2220      	movs	r2, #32
 8008da6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008daa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8008dae:	4620      	mov	r0, r4
 8008db0:	f7ff fe71 	bl	8008a96 <HAL_I2C_ListenCpltCallback>
}
 8008db4:	e7d9      	b.n	8008d6a <I2C_ITError+0x12a>
 8008db6:	bf00      	nop
 8008db8:	08008b5d 	.word	0x08008b5d
 8008dbc:	ffff0000 	.word	0xffff0000

08008dc0 <HAL_I2C_EV_IRQHandler>:
{
 8008dc0:	b570      	push	{r4, r5, r6, lr}
 8008dc2:	b08e      	sub	sp, #56	; 0x38
 8008dc4:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008dc6:	6802      	ldr	r2, [r0, #0]
 8008dc8:	6850      	ldr	r0, [r2, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008dca:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008dcc:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8008dd0:	b2db      	uxtb	r3, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008dd2:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008dd6:	2b10      	cmp	r3, #16
 8008dd8:	d022      	beq.n	8008e20 <HAL_I2C_EV_IRQHandler+0x60>
 8008dda:	b2c9      	uxtb	r1, r1
 8008ddc:	2b40      	cmp	r3, #64	; 0x40
 8008dde:	d01f      	beq.n	8008e20 <HAL_I2C_EV_IRQHandler+0x60>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008de0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f000 83a7 	beq.w	8009536 <HAL_I2C_EV_IRQHandler+0x776>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008de8:	6953      	ldr	r3, [r2, #20]
  uint32_t sr2itflags               = 0U;
 8008dea:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008dec:	f013 0f02 	tst.w	r3, #2
 8008df0:	f000 83b8 	beq.w	8009564 <HAL_I2C_EV_IRQHandler+0x7a4>
 8008df4:	f410 7f00 	tst.w	r0, #512	; 0x200
 8008df8:	f000 83ba 	beq.w	8009570 <HAL_I2C_EV_IRQHandler+0x7b0>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008dfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dfe:	b103      	cbz	r3, 8008e02 <HAL_I2C_EV_IRQHandler+0x42>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008e00:	6995      	ldr	r5, [r2, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e02:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008e06:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008e0a:	2b28      	cmp	r3, #40	; 0x28
 8008e0c:	f000 8396 	beq.w	800953c <HAL_I2C_EV_IRQHandler+0x77c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008e10:	f06f 0302 	mvn.w	r3, #2
 8008e14:	6153      	str	r3, [r2, #20]
    __HAL_UNLOCK(hi2c);
 8008e16:	2300      	movs	r3, #0
 8008e18:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008e1c:	b00e      	add	sp, #56	; 0x38
 8008e1e:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008e20:	6996      	ldr	r6, [r2, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008e22:	6951      	ldr	r1, [r2, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008e24:	f011 0f01 	tst.w	r1, #1
 8008e28:	d11d      	bne.n	8008e66 <HAL_I2C_EV_IRQHandler+0xa6>
 8008e2a:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 8008e2e:	d0f5      	beq.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
 8008e30:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8008e34:	d0f2      	beq.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e36:	f011 0f08 	tst.w	r1, #8
 8008e3a:	d01b      	beq.n	8008e74 <HAL_I2C_EV_IRQHandler+0xb4>
 8008e3c:	f410 7f00 	tst.w	r0, #512	; 0x200
 8008e40:	f000 8184 	beq.w	800914c <HAL_I2C_EV_IRQHandler+0x38c>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008e44:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	6113      	str	r3, [r2, #16]
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8008e4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f000 8084 	beq.w	8008f5a <HAL_I2C_EV_IRQHandler+0x19a>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8008e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 8085 	beq.w	8008f64 <HAL_I2C_EV_IRQHandler+0x1a4>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008e5a:	6822      	ldr	r2, [r4, #0]
 8008e5c:	6853      	ldr	r3, [r2, #4]
 8008e5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008e62:	6053      	str	r3, [r2, #4]
 8008e64:	e7da      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e66:	f410 7f00 	tst.w	r0, #512	; 0x200
 8008e6a:	d11d      	bne.n	8008ea8 <HAL_I2C_EV_IRQHandler+0xe8>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e6c:	f011 0f08 	tst.w	r1, #8
 8008e70:	f040 816c 	bne.w	800914c <HAL_I2C_EV_IRQHandler+0x38c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e74:	f011 0f02 	tst.w	r1, #2
 8008e78:	f000 8168 	beq.w	800914c <HAL_I2C_EV_IRQHandler+0x38c>
 8008e7c:	f410 7f00 	tst.w	r0, #512	; 0x200
 8008e80:	f000 8164 	beq.w	800914c <HAL_I2C_EV_IRQHandler+0x38c>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008e84:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8008e88:	b2d9      	uxtb	r1, r3
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008e8a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008e8c:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008e8e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	2b22      	cmp	r3, #34	; 0x22
 8008e96:	d06b      	beq.n	8008f70 <HAL_I2C_EV_IRQHandler+0x1b0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e98:	2300      	movs	r3, #0
 8008e9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e9c:	6953      	ldr	r3, [r2, #20]
 8008e9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ea0:	6993      	ldr	r3, [r2, #24]
 8008ea2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ea6:	e7b9      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008ea8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008eaa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008eae:	d01d      	beq.n	8008eec <HAL_I2C_EV_IRQHandler+0x12c>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008eb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008eb2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008eb6:	bf04      	itt	eq
 8008eb8:	2308      	moveq	r3, #8
 8008eba:	62e3      	streq	r3, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008ebc:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	2b40      	cmp	r3, #64	; 0x40
 8008ec4:	d015      	beq.n	8008ef2 <HAL_I2C_EV_IRQHandler+0x132>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008ec6:	6923      	ldr	r3, [r4, #16]
 8008ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ecc:	d01e      	beq.n	8008f0c <HAL_I2C_EV_IRQHandler+0x14c>
      if (hi2c->EventCount == 0U)
 8008ece:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d039      	beq.n	8008f48 <HAL_I2C_EV_IRQHandler+0x188>
      else if (hi2c->EventCount == 1U)
 8008ed4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d1a0      	bne.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008eda:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008edc:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8008ee0:	f003 0306 	and.w	r3, r3, #6
 8008ee4:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 8008ee8:	6113      	str	r3, [r2, #16]
 8008eea:	e797      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008eec:	2301      	movs	r3, #1
 8008eee:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ef0:	e7e4      	b.n	8008ebc <HAL_I2C_EV_IRQHandler+0xfc>
    if (hi2c->EventCount == 0U)
 8008ef2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008ef4:	b923      	cbnz	r3, 8008f00 <HAL_I2C_EV_IRQHandler+0x140>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008ef6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008ef8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008efc:	6113      	str	r3, [r2, #16]
 8008efe:	e78d      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008f00:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008f02:	f043 0301 	orr.w	r3, r3, #1
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	6113      	str	r3, [r2, #16]
 8008f0a:	e787      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008f0c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b21      	cmp	r3, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008f14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008f16:	bf0e      	itee	eq
 8008f18:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008f1c:	f043 0301 	orrne.w	r3, r3, #1
 8008f20:	b2db      	uxtbne	r3, r3
 8008f22:	6113      	str	r3, [r2, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008f24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f26:	b13b      	cbz	r3, 8008f38 <HAL_I2C_EV_IRQHandler+0x178>
 8008f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2a:	b12b      	cbz	r3, 8008f38 <HAL_I2C_EV_IRQHandler+0x178>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008f2c:	6822      	ldr	r2, [r4, #0]
 8008f2e:	6853      	ldr	r3, [r2, #4]
 8008f30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008f34:	6053      	str	r3, [r2, #4]
 8008f36:	e771      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008f38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f43f af6e 	beq.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
 8008f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1f2      	bne.n	8008f2c <HAL_I2C_EV_IRQHandler+0x16c>
 8008f46:	e769      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008f48:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008f4a:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8008f4e:	f003 0306 	and.w	r3, r3, #6
 8008f52:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8008f56:	6113      	str	r3, [r2, #16]
 8008f58:	e760      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8008f5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008f5c:	2a00      	cmp	r2, #0
 8008f5e:	f47f af78 	bne.w	8008e52 <HAL_I2C_EV_IRQHandler+0x92>
 8008f62:	e75b      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8008f64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f47f af76 	bne.w	8008e5a <HAL_I2C_EV_IRQHandler+0x9a>
 8008f6e:	e755      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008f70:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008f72:	b90b      	cbnz	r3, 8008f78 <HAL_I2C_EV_IRQHandler+0x1b8>
 8008f74:	2940      	cmp	r1, #64	; 0x40
 8008f76:	d015      	beq.n	8008fa4 <HAL_I2C_EV_IRQHandler+0x1e4>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008f78:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008f7a:	b91b      	cbnz	r3, 8008f84 <HAL_I2C_EV_IRQHandler+0x1c4>
 8008f7c:	6923      	ldr	r3, [r4, #16]
 8008f7e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008f82:	d016      	beq.n	8008fb2 <HAL_I2C_EV_IRQHandler+0x1f2>
      if (hi2c->XferCount == 0U)
 8008f84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	bb13      	cbnz	r3, 8008fd0 <HAL_I2C_EV_IRQHandler+0x210>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f8a:	9303      	str	r3, [sp, #12]
 8008f8c:	6953      	ldr	r3, [r2, #20]
 8008f8e:	9303      	str	r3, [sp, #12]
 8008f90:	6993      	ldr	r3, [r2, #24]
 8008f92:	9303      	str	r3, [sp, #12]
 8008f94:	9b03      	ldr	r3, [sp, #12]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f96:	6813      	ldr	r3, [r2, #0]
 8008f98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f9c:	6013      	str	r3, [r2, #0]
      hi2c->EventCount = 0U;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	6523      	str	r3, [r4, #80]	; 0x50
 8008fa2:	e73b      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fa4:	9301      	str	r3, [sp, #4]
 8008fa6:	6953      	ldr	r3, [r2, #20]
 8008fa8:	9301      	str	r3, [sp, #4]
 8008faa:	6993      	ldr	r3, [r2, #24]
 8008fac:	9301      	str	r3, [sp, #4]
 8008fae:	9b01      	ldr	r3, [sp, #4]
 8008fb0:	e734      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	9302      	str	r3, [sp, #8]
 8008fb6:	6953      	ldr	r3, [r2, #20]
 8008fb8:	9302      	str	r3, [sp, #8]
 8008fba:	6993      	ldr	r3, [r2, #24]
 8008fbc:	9302      	str	r3, [sp, #8]
 8008fbe:	9b02      	ldr	r3, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008fc0:	6813      	ldr	r3, [r2, #0]
 8008fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fc6:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 8008fc8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008fca:	3301      	adds	r3, #1
 8008fcc:	6523      	str	r3, [r4, #80]	; 0x50
 8008fce:	e725      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
      else if (hi2c->XferCount == 1U)
 8008fd0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d025      	beq.n	8009024 <HAL_I2C_EV_IRQHandler+0x264>
      else if (hi2c->XferCount == 2U)
 8008fd8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d079      	beq.n	80090d4 <HAL_I2C_EV_IRQHandler+0x314>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fe0:	6813      	ldr	r3, [r2, #0]
 8008fe2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008fe6:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008fe8:	6823      	ldr	r3, [r4, #0]
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008ff0:	d00f      	beq.n	8009012 <HAL_I2C_EV_IRQHandler+0x252>
 8008ff2:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8008ff6:	d008      	beq.n	800900a <HAL_I2C_EV_IRQHandler+0x24a>
 8008ff8:	3801      	subs	r0, #1
 8008ffa:	281f      	cmp	r0, #31
 8008ffc:	d809      	bhi.n	8009012 <HAL_I2C_EV_IRQHandler+0x252>
 8008ffe:	4a98      	ldr	r2, [pc, #608]	; (8009260 <HAL_I2C_EV_IRQHandler+0x4a0>)
 8009000:	fa22 f000 	lsr.w	r0, r2, r0
 8009004:	f010 0f01 	tst.w	r0, #1
 8009008:	d003      	beq.n	8009012 <HAL_I2C_EV_IRQHandler+0x252>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009010:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009012:	2300      	movs	r3, #0
 8009014:	930a      	str	r3, [sp, #40]	; 0x28
 8009016:	6823      	ldr	r3, [r4, #0]
 8009018:	695a      	ldr	r2, [r3, #20]
 800901a:	920a      	str	r2, [sp, #40]	; 0x28
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	930a      	str	r3, [sp, #40]	; 0x28
 8009020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009022:	e7bc      	b.n	8008f9e <HAL_I2C_EV_IRQHandler+0x1de>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009024:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8009028:	d01a      	beq.n	8009060 <HAL_I2C_EV_IRQHandler+0x2a0>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800902a:	2808      	cmp	r0, #8
 800902c:	d041      	beq.n	80090b2 <HAL_I2C_EV_IRQHandler+0x2f2>
 800902e:	2820      	cmp	r0, #32
 8009030:	d03f      	beq.n	80090b2 <HAL_I2C_EV_IRQHandler+0x2f2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8009032:	2d12      	cmp	r5, #18
 8009034:	d036      	beq.n	80090a4 <HAL_I2C_EV_IRQHandler+0x2e4>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009036:	2810      	cmp	r0, #16
 8009038:	d836      	bhi.n	80090a8 <HAL_I2C_EV_IRQHandler+0x2e8>
 800903a:	4b8a      	ldr	r3, [pc, #552]	; (8009264 <HAL_I2C_EV_IRQHandler+0x4a4>)
 800903c:	fa23 f000 	lsr.w	r0, r3, r0
 8009040:	f010 0f01 	tst.w	r0, #1
 8009044:	d030      	beq.n	80090a8 <HAL_I2C_EV_IRQHandler+0x2e8>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009046:	6813      	ldr	r3, [r2, #0]
 8009048:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800904c:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800904e:	2300      	movs	r3, #0
 8009050:	9306      	str	r3, [sp, #24]
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	695a      	ldr	r2, [r3, #20]
 8009056:	9206      	str	r2, [sp, #24]
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	9306      	str	r3, [sp, #24]
 800905c:	9b06      	ldr	r3, [sp, #24]
 800905e:	e79e      	b.n	8008f9e <HAL_I2C_EV_IRQHandler+0x1de>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009060:	6813      	ldr	r3, [r2, #0]
 8009062:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009066:	6013      	str	r3, [r2, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009068:	6823      	ldr	r3, [r4, #0]
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8009070:	d00c      	beq.n	800908c <HAL_I2C_EV_IRQHandler+0x2cc>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009078:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800907a:	2300      	movs	r3, #0
 800907c:	9304      	str	r3, [sp, #16]
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	695a      	ldr	r2, [r3, #20]
 8009082:	9204      	str	r2, [sp, #16]
 8009084:	699b      	ldr	r3, [r3, #24]
 8009086:	9304      	str	r3, [sp, #16]
 8009088:	9b04      	ldr	r3, [sp, #16]
 800908a:	e788      	b.n	8008f9e <HAL_I2C_EV_IRQHandler+0x1de>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800908c:	2200      	movs	r2, #0
 800908e:	9205      	str	r2, [sp, #20]
 8009090:	695a      	ldr	r2, [r3, #20]
 8009092:	9205      	str	r2, [sp, #20]
 8009094:	699a      	ldr	r2, [r3, #24]
 8009096:	9205      	str	r2, [sp, #20]
 8009098:	9a05      	ldr	r2, [sp, #20]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090a0:	601a      	str	r2, [r3, #0]
 80090a2:	e77c      	b.n	8008f9e <HAL_I2C_EV_IRQHandler+0x1de>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80090a4:	2801      	cmp	r0, #1
 80090a6:	d104      	bne.n	80090b2 <HAL_I2C_EV_IRQHandler+0x2f2>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090a8:	6813      	ldr	r3, [r2, #0]
 80090aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090ae:	6013      	str	r3, [r2, #0]
 80090b0:	e7cd      	b.n	800904e <HAL_I2C_EV_IRQHandler+0x28e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090b2:	6813      	ldr	r3, [r2, #0]
 80090b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090b8:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090ba:	2300      	movs	r3, #0
 80090bc:	9307      	str	r3, [sp, #28]
 80090be:	6823      	ldr	r3, [r4, #0]
 80090c0:	695a      	ldr	r2, [r3, #20]
 80090c2:	9207      	str	r2, [sp, #28]
 80090c4:	699a      	ldr	r2, [r3, #24]
 80090c6:	9207      	str	r2, [sp, #28]
 80090c8:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090d0:	601a      	str	r2, [r3, #0]
 80090d2:	e764      	b.n	8008f9e <HAL_I2C_EV_IRQHandler+0x1de>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80090d4:	2810      	cmp	r0, #16
 80090d6:	d828      	bhi.n	800912a <HAL_I2C_EV_IRQHandler+0x36a>
 80090d8:	4b62      	ldr	r3, [pc, #392]	; (8009264 <HAL_I2C_EV_IRQHandler+0x4a4>)
 80090da:	40c3      	lsrs	r3, r0
 80090dc:	f013 0f01 	tst.w	r3, #1
 80090e0:	d023      	beq.n	800912a <HAL_I2C_EV_IRQHandler+0x36a>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090e2:	6813      	ldr	r3, [r2, #0]
 80090e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80090e8:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090ea:	2300      	movs	r3, #0
 80090ec:	9309      	str	r3, [sp, #36]	; 0x24
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	695a      	ldr	r2, [r3, #20]
 80090f2:	9209      	str	r2, [sp, #36]	; 0x24
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	9309      	str	r3, [sp, #36]	; 0x24
 80090f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80090fa:	6823      	ldr	r3, [r4, #0]
 80090fc:	685a      	ldr	r2, [r3, #4]
 80090fe:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8009102:	f43f af4c 	beq.w	8008f9e <HAL_I2C_EV_IRQHandler+0x1de>
 8009106:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800910a:	d009      	beq.n	8009120 <HAL_I2C_EV_IRQHandler+0x360>
 800910c:	3801      	subs	r0, #1
 800910e:	281f      	cmp	r0, #31
 8009110:	f63f af45 	bhi.w	8008f9e <HAL_I2C_EV_IRQHandler+0x1de>
 8009114:	4a52      	ldr	r2, [pc, #328]	; (8009260 <HAL_I2C_EV_IRQHandler+0x4a0>)
 8009116:	40c2      	lsrs	r2, r0
 8009118:	f012 0f01 	tst.w	r2, #1
 800911c:	f43f af3f 	beq.w	8008f9e <HAL_I2C_EV_IRQHandler+0x1de>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009120:	685a      	ldr	r2, [r3, #4]
 8009122:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009126:	605a      	str	r2, [r3, #4]
 8009128:	e739      	b.n	8008f9e <HAL_I2C_EV_IRQHandler+0x1de>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800912a:	6813      	ldr	r3, [r2, #0]
 800912c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009130:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009132:	2300      	movs	r3, #0
 8009134:	9308      	str	r3, [sp, #32]
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	695a      	ldr	r2, [r3, #20]
 800913a:	9208      	str	r2, [sp, #32]
 800913c:	699a      	ldr	r2, [r3, #24]
 800913e:	9208      	str	r2, [sp, #32]
 8009140:	9a08      	ldr	r2, [sp, #32]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009148:	601a      	str	r2, [r3, #0]
 800914a:	e7d6      	b.n	80090fa <HAL_I2C_EV_IRQHandler+0x33a>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800914c:	f016 0f04 	tst.w	r6, #4
 8009150:	f000 80ca 	beq.w	80092e8 <HAL_I2C_EV_IRQHandler+0x528>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8009154:	6855      	ldr	r5, [r2, #4]
 8009156:	f415 6f00 	tst.w	r5, #2048	; 0x800
 800915a:	f47f ae5f 	bne.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800915e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009162:	d06e      	beq.n	8009242 <HAL_I2C_EV_IRQHandler+0x482>
 8009164:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8009168:	d06b      	beq.n	8009242 <HAL_I2C_EV_IRQHandler+0x482>
 800916a:	f011 0f04 	tst.w	r1, #4
 800916e:	d16c      	bne.n	800924a <HAL_I2C_EV_IRQHandler+0x48a>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009170:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8009174:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009176:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 800917a:	b2c9      	uxtb	r1, r1
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800917c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800917e:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8009180:	2800      	cmp	r0, #0
 8009182:	d140      	bne.n	8009206 <HAL_I2C_EV_IRQHandler+0x446>
 8009184:	2b21      	cmp	r3, #33	; 0x21
 8009186:	d006      	beq.n	8009196 <HAL_I2C_EV_IRQHandler+0x3d6>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8009188:	2940      	cmp	r1, #64	; 0x40
 800918a:	f47f ae47 	bne.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800918e:	2b22      	cmp	r3, #34	; 0x22
 8009190:	f47f ae44 	bne.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
 8009194:	e039      	b.n	800920a <HAL_I2C_EV_IRQHandler+0x44a>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009196:	2d08      	cmp	r5, #8
 8009198:	d014      	beq.n	80091c4 <HAL_I2C_EV_IRQHandler+0x404>
 800919a:	2d20      	cmp	r5, #32
 800919c:	d012      	beq.n	80091c4 <HAL_I2C_EV_IRQHandler+0x404>
 800919e:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 80091a2:	d00f      	beq.n	80091c4 <HAL_I2C_EV_IRQHandler+0x404>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80091a4:	6853      	ldr	r3, [r2, #4]
 80091a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80091aa:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80091ac:	2311      	movs	r3, #17
 80091ae:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80091b0:	2300      	movs	r3, #0
 80091b2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80091b6:	2320      	movs	r3, #32
 80091b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80091bc:	4620      	mov	r0, r4
 80091be:	f7ff fc65 	bl	8008a8c <HAL_I2C_MasterTxCpltCallback>
 80091c2:	e62b      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80091c4:	6853      	ldr	r3, [r2, #4]
 80091c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80091ca:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091cc:	6822      	ldr	r2, [r4, #0]
 80091ce:	6813      	ldr	r3, [r2, #0]
 80091d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80091d4:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80091d6:	2300      	movs	r3, #0
 80091d8:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80091da:	2320      	movs	r3, #32
 80091dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80091e0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	2b40      	cmp	r3, #64	; 0x40
 80091e8:	d006      	beq.n	80091f8 <HAL_I2C_EV_IRQHandler+0x438>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80091ea:	2300      	movs	r3, #0
 80091ec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80091f0:	4620      	mov	r0, r4
 80091f2:	f7ff fc4b 	bl	8008a8c <HAL_I2C_MasterTxCpltCallback>
 80091f6:	e611      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80091f8:	2300      	movs	r3, #0
 80091fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 80091fe:	4620      	mov	r0, r4
 8009200:	f7ff fc4a 	bl	8008a98 <HAL_I2C_MemTxCpltCallback>
 8009204:	e60a      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8009206:	2b21      	cmp	r3, #33	; 0x21
 8009208:	d1be      	bne.n	8009188 <HAL_I2C_EV_IRQHandler+0x3c8>
    if (hi2c->XferCount == 0U)
 800920a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800920c:	b29b      	uxth	r3, r3
 800920e:	b17b      	cbz	r3, 8009230 <HAL_I2C_EV_IRQHandler+0x470>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009210:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2b40      	cmp	r3, #64	; 0x40
 8009218:	d00f      	beq.n	800923a <HAL_I2C_EV_IRQHandler+0x47a>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800921a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8009220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009222:	3301      	adds	r3, #1
 8009224:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8009226:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009228:	3b01      	subs	r3, #1
 800922a:	b29b      	uxth	r3, r3
 800922c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800922e:	e5f5      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009230:	6853      	ldr	r3, [r2, #4]
 8009232:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009236:	6053      	str	r3, [r2, #4]
 8009238:	e5f0      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800923a:	4620      	mov	r0, r4
 800923c:	f7ff fc2d 	bl	8008a9a <I2C_MemoryTransmit_TXE_BTF>
 8009240:	e5ec      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009242:	f011 0f04 	tst.w	r1, #4
 8009246:	f43f ade9 	beq.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
 800924a:	f410 7f00 	tst.w	r0, #512	; 0x200
 800924e:	f43f ade5 	beq.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8009252:	2b10      	cmp	r3, #16
 8009254:	d008      	beq.n	8009268 <HAL_I2C_EV_IRQHandler+0x4a8>
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8009256:	4620      	mov	r0, r4
 8009258:	f7ff fc1f 	bl	8008a9a <I2C_MemoryTransmit_TXE_BTF>
 800925c:	e5de      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
 800925e:	bf00      	nop
 8009260:	80008081 	.word	0x80008081
 8009264:	00010014 	.word	0x00010014
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009268:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800926a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800926e:	b2db      	uxtb	r3, r3
 8009270:	2b21      	cmp	r3, #33	; 0x21
 8009272:	f47f add3 	bne.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
    if (hi2c->XferCount != 0U)
 8009276:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009278:	b29b      	uxth	r3, r3
 800927a:	b9d3      	cbnz	r3, 80092b2 <HAL_I2C_EV_IRQHandler+0x4f2>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800927c:	2908      	cmp	r1, #8
 800927e:	d004      	beq.n	800928a <HAL_I2C_EV_IRQHandler+0x4ca>
 8009280:	2920      	cmp	r1, #32
 8009282:	d002      	beq.n	800928a <HAL_I2C_EV_IRQHandler+0x4ca>
 8009284:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8009288:	d11e      	bne.n	80092c8 <HAL_I2C_EV_IRQHandler+0x508>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800928a:	6853      	ldr	r3, [r2, #4]
 800928c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009290:	6053      	str	r3, [r2, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009292:	6822      	ldr	r2, [r4, #0]
 8009294:	6813      	ldr	r3, [r2, #0]
 8009296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800929a:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800929c:	2300      	movs	r3, #0
 800929e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80092a0:	2220      	movs	r2, #32
 80092a2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80092a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80092aa:	4620      	mov	r0, r4
 80092ac:	f7ff fbee 	bl	8008a8c <HAL_I2C_MasterTxCpltCallback>
 80092b0:	e5b4      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80092b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	6113      	str	r3, [r2, #16]
      hi2c->pBuffPtr++;
 80092b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092ba:	3301      	adds	r3, #1
 80092bc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80092be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80092c0:	3b01      	subs	r3, #1
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80092c6:	e5a9      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80092c8:	6853      	ldr	r3, [r2, #4]
 80092ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80092ce:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80092d0:	2311      	movs	r3, #17
 80092d2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80092d4:	2300      	movs	r3, #0
 80092d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80092da:	2320      	movs	r3, #32
 80092dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80092e0:	4620      	mov	r0, r4
 80092e2:	f7ff fbd3 	bl	8008a8c <HAL_I2C_MasterTxCpltCallback>
 80092e6:	e599      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80092e8:	6853      	ldr	r3, [r2, #4]
 80092ea:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80092ee:	f47f ad95 	bne.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80092f2:	f011 0f40 	tst.w	r1, #64	; 0x40
 80092f6:	f000 808c 	beq.w	8009412 <HAL_I2C_EV_IRQHandler+0x652>
 80092fa:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80092fe:	f000 8088 	beq.w	8009412 <HAL_I2C_EV_IRQHandler+0x652>
 8009302:	f011 0f04 	tst.w	r1, #4
 8009306:	f040 8088 	bne.w	800941a <HAL_I2C_EV_IRQHandler+0x65a>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800930a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800930e:	b2db      	uxtb	r3, r3
 8009310:	2b22      	cmp	r3, #34	; 0x22
 8009312:	f47f ad83 	bne.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
    tmp = hi2c->XferCount;
 8009316:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009318:	b29b      	uxth	r3, r3
    if (tmp > 3U)
 800931a:	2b03      	cmp	r3, #3
 800931c:	d914      	bls.n	8009348 <HAL_I2C_EV_IRQHandler+0x588>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800931e:	6912      	ldr	r2, [r2, #16]
 8009320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009322:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009324:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009326:	3301      	adds	r3, #1
 8009328:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800932a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800932c:	3b01      	subs	r3, #1
 800932e:	b29b      	uxth	r3, r3
 8009330:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8009332:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009334:	b29b      	uxth	r3, r3
 8009336:	2b03      	cmp	r3, #3
 8009338:	f47f ad70 	bne.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800933c:	6822      	ldr	r2, [r4, #0]
 800933e:	6853      	ldr	r3, [r2, #4]
 8009340:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009344:	6053      	str	r3, [r2, #4]
 8009346:	e569      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8009348:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800934a:	2902      	cmp	r1, #2
 800934c:	f43f ad66 	beq.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
 8009350:	2b01      	cmp	r3, #1
 8009352:	f63f ad63 	bhi.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
  __IO uint32_t count = 0U;
 8009356:	2300      	movs	r3, #0
 8009358:	930c      	str	r3, [sp, #48]	; 0x30
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800935a:	4ba2      	ldr	r3, [pc, #648]	; (80095e4 <HAL_I2C_EV_IRQHandler+0x824>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8009362:	fbb3 f3f1 	udiv	r3, r3, r1
 8009366:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800936a:	930c      	str	r3, [sp, #48]	; 0x30
    count--;
 800936c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800936e:	3b01      	subs	r3, #1
 8009370:	930c      	str	r3, [sp, #48]	; 0x30
    if (count == 0U)
 8009372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009374:	b343      	cbz	r3, 80093c8 <HAL_I2C_EV_IRQHandler+0x608>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009376:	6813      	ldr	r3, [r2, #0]
 8009378:	f413 7f00 	tst.w	r3, #512	; 0x200
 800937c:	d1f6      	bne.n	800936c <HAL_I2C_EV_IRQHandler+0x5ac>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800937e:	6813      	ldr	r3, [r2, #0]
 8009380:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009384:	6013      	str	r3, [r2, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009386:	6822      	ldr	r2, [r4, #0]
 8009388:	6853      	ldr	r3, [r2, #4]
 800938a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800938e:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009390:	6823      	ldr	r3, [r4, #0]
 8009392:	691a      	ldr	r2, [r3, #16]
 8009394:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009396:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8009398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800939a:	3301      	adds	r3, #1
 800939c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800939e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80093a0:	3b01      	subs	r3, #1
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80093a6:	2320      	movs	r3, #32
 80093a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80093ac:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b40      	cmp	r3, #64	; 0x40
 80093b4:	d025      	beq.n	8009402 <HAL_I2C_EV_IRQHandler+0x642>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80093b6:	2300      	movs	r3, #0
 80093b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80093bc:	2312      	movs	r3, #18
 80093be:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80093c0:	4620      	mov	r0, r4
 80093c2:	f7ff fb64 	bl	8008a8e <HAL_I2C_MasterRxCpltCallback>
 80093c6:	e529      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093ca:	f043 0320 	orr.w	r3, r3, #32
 80093ce:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80093d0:	6853      	ldr	r3, [r2, #4]
 80093d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80093d6:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	691a      	ldr	r2, [r3, #16]
 80093dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093de:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80093e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093e2:	3301      	adds	r3, #1
 80093e4:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80093e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80093e8:	3b01      	subs	r3, #1
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80093ee:	2320      	movs	r3, #32
 80093f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80093f4:	2300      	movs	r3, #0
 80093f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80093fa:	4620      	mov	r0, r4
 80093fc:	f7ff fbab 	bl	8008b56 <HAL_I2C_ErrorCallback>
 8009400:	e50c      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009402:	2300      	movs	r3, #0
 8009404:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8009408:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800940a:	4620      	mov	r0, r4
 800940c:	f7ff fba2 	bl	8008b54 <HAL_I2C_MemRxCpltCallback>
 8009410:	e504      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009412:	f011 0f04 	tst.w	r1, #4
 8009416:	f43f ad01 	beq.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
 800941a:	f410 7f00 	tst.w	r0, #512	; 0x200
 800941e:	f43f acfd 	beq.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009422:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8009424:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009426:	b29b      	uxth	r3, r3
 8009428:	2b04      	cmp	r3, #4
 800942a:	d012      	beq.n	8009452 <HAL_I2C_EV_IRQHandler+0x692>
  else if (hi2c->XferCount == 3U)
 800942c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800942e:	b29b      	uxth	r3, r3
 8009430:	2b03      	cmp	r3, #3
 8009432:	d01e      	beq.n	8009472 <HAL_I2C_EV_IRQHandler+0x6b2>
  else if (hi2c->XferCount == 2U)
 8009434:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009436:	b29b      	uxth	r3, r3
 8009438:	2b02      	cmp	r3, #2
 800943a:	d033      	beq.n	80094a4 <HAL_I2C_EV_IRQHandler+0x6e4>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800943c:	6912      	ldr	r2, [r2, #16]
 800943e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009440:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009444:	3301      	adds	r3, #1
 8009446:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8009448:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800944a:	3b01      	subs	r3, #1
 800944c:	b29b      	uxth	r3, r3
 800944e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8009450:	e4e4      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009452:	6853      	ldr	r3, [r2, #4]
 8009454:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009458:	6053      	str	r3, [r2, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800945a:	6823      	ldr	r3, [r4, #0]
 800945c:	691a      	ldr	r2, [r3, #16]
 800945e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009460:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009464:	3301      	adds	r3, #1
 8009466:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8009468:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800946a:	3b01      	subs	r3, #1
 800946c:	b29b      	uxth	r3, r3
 800946e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8009470:	e4d4      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009472:	6853      	ldr	r3, [r2, #4]
 8009474:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009478:	6053      	str	r3, [r2, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800947a:	2904      	cmp	r1, #4
 800947c:	d006      	beq.n	800948c <HAL_I2C_EV_IRQHandler+0x6cc>
 800947e:	2902      	cmp	r1, #2
 8009480:	d004      	beq.n	800948c <HAL_I2C_EV_IRQHandler+0x6cc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009482:	6822      	ldr	r2, [r4, #0]
 8009484:	6813      	ldr	r3, [r2, #0]
 8009486:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800948a:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800948c:	6823      	ldr	r3, [r4, #0]
 800948e:	691a      	ldr	r2, [r3, #16]
 8009490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009492:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009494:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009496:	3301      	adds	r3, #1
 8009498:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800949a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800949c:	3b01      	subs	r3, #1
 800949e:	b29b      	uxth	r3, r3
 80094a0:	8563      	strh	r3, [r4, #42]	; 0x2a
 80094a2:	e4bb      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80094a4:	2901      	cmp	r1, #1
 80094a6:	d00a      	beq.n	80094be <HAL_I2C_EV_IRQHandler+0x6fe>
 80094a8:	2910      	cmp	r1, #16
 80094aa:	d008      	beq.n	80094be <HAL_I2C_EV_IRQHandler+0x6fe>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80094ac:	2904      	cmp	r1, #4
 80094ae:	d035      	beq.n	800951c <HAL_I2C_EV_IRQHandler+0x75c>
 80094b0:	2902      	cmp	r1, #2
 80094b2:	d033      	beq.n	800951c <HAL_I2C_EV_IRQHandler+0x75c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094b4:	6813      	ldr	r3, [r2, #0]
 80094b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80094ba:	6013      	str	r3, [r2, #0]
 80094bc:	e003      	b.n	80094c6 <HAL_I2C_EV_IRQHandler+0x706>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094be:	6813      	ldr	r3, [r2, #0]
 80094c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094c4:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	691a      	ldr	r2, [r3, #16]
 80094ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80094ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80094d0:	1c53      	adds	r3, r2, #1
 80094d2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80094d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80094d6:	3b01      	subs	r3, #1
 80094d8:	b29b      	uxth	r3, r3
 80094da:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094dc:	6823      	ldr	r3, [r4, #0]
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 80094e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094e4:	3301      	adds	r3, #1
 80094e6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80094e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80094ea:	3b01      	subs	r3, #1
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80094f0:	6822      	ldr	r2, [r4, #0]
 80094f2:	6853      	ldr	r3, [r2, #4]
 80094f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094f8:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80094fa:	2320      	movs	r3, #32
 80094fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009500:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b40      	cmp	r3, #64	; 0x40
 8009508:	d00d      	beq.n	8009526 <HAL_I2C_EV_IRQHandler+0x766>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800950a:	2300      	movs	r3, #0
 800950c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009510:	2312      	movs	r3, #18
 8009512:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009514:	4620      	mov	r0, r4
 8009516:	f7ff faba 	bl	8008a8e <HAL_I2C_MasterRxCpltCallback>
 800951a:	e47f      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800951c:	6813      	ldr	r3, [r2, #0]
 800951e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009522:	6013      	str	r3, [r2, #0]
 8009524:	e7cf      	b.n	80094c6 <HAL_I2C_EV_IRQHandler+0x706>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009526:	2300      	movs	r3, #0
 8009528:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800952c:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800952e:	4620      	mov	r0, r4
 8009530:	f7ff fb10 	bl	8008b54 <HAL_I2C_MemRxCpltCallback>
 8009534:	e472      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009536:	6995      	ldr	r5, [r2, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009538:	6953      	ldr	r3, [r2, #20]
 800953a:	e457      	b.n	8008dec <HAL_I2C_EV_IRQHandler+0x2c>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800953c:	6853      	ldr	r3, [r2, #4]
 800953e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009542:	6053      	str	r3, [r2, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009544:	f085 0104 	eor.w	r1, r5, #4
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009548:	f3c1 0180 	ubfx	r1, r1, #2, #1
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800954c:	f015 0f80 	tst.w	r5, #128	; 0x80
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009550:	bf0c      	ite	eq
 8009552:	89a2      	ldrheq	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009554:	8b22      	ldrhne	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8009556:	2300      	movs	r3, #0
 8009558:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800955c:	4620      	mov	r0, r4
 800955e:	f7ff fa99 	bl	8008a94 <HAL_I2C_AddrCallback>
 8009562:	e45b      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009564:	f013 0f10 	tst.w	r3, #16
 8009568:	d002      	beq.n	8009570 <HAL_I2C_EV_IRQHandler+0x7b0>
 800956a:	f410 7f00 	tst.w	r0, #512	; 0x200
 800956e:	d13b      	bne.n	80095e8 <HAL_I2C_EV_IRQHandler+0x828>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009570:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 8009574:	2921      	cmp	r1, #33	; 0x21
 8009576:	f000 80f6 	beq.w	8009766 <HAL_I2C_EV_IRQHandler+0x9a6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800957a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800957e:	f000 813d 	beq.w	80097fc <HAL_I2C_EV_IRQHandler+0xa3c>
 8009582:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8009586:	f000 8139 	beq.w	80097fc <HAL_I2C_EV_IRQHandler+0xa3c>
 800958a:	f013 0f04 	tst.w	r3, #4
 800958e:	f040 8139 	bne.w	8009804 <HAL_I2C_EV_IRQHandler+0xa44>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009592:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8009596:	b2d9      	uxtb	r1, r3
  if (hi2c->XferCount != 0U)
 8009598:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800959a:	b29b      	uxth	r3, r3
 800959c:	2b00      	cmp	r3, #0
 800959e:	f43f ac3d 	beq.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095a2:	6912      	ldr	r2, [r2, #16]
 80095a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80095a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095aa:	3301      	adds	r3, #1
 80095ac:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80095ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80095b0:	3b01      	subs	r3, #1
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80095b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f47f ac2e 	bne.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
 80095c0:	292a      	cmp	r1, #42	; 0x2a
 80095c2:	f47f ac2b 	bne.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80095c6:	6822      	ldr	r2, [r4, #0]
 80095c8:	6853      	ldr	r3, [r2, #4]
 80095ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095ce:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80095d0:	2322      	movs	r3, #34	; 0x22
 80095d2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80095d4:	2328      	movs	r3, #40	; 0x28
 80095d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80095da:	4620      	mov	r0, r4
 80095dc:	f7ff fa59 	bl	8008a92 <HAL_I2C_SlaveRxCpltCallback>
 80095e0:	e41c      	b.n	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
 80095e2:	bf00      	nop
 80095e4:	2000005c 	.word	0x2000005c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80095e8:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
 80095ec:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80095ee:	6853      	ldr	r3, [r2, #4]
 80095f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80095f4:	6053      	str	r3, [r2, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80095f6:	2300      	movs	r3, #0
 80095f8:	930d      	str	r3, [sp, #52]	; 0x34
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	695a      	ldr	r2, [r3, #20]
 80095fe:	920d      	str	r2, [sp, #52]	; 0x34
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	f042 0201 	orr.w	r2, r2, #1
 8009606:	601a      	str	r2, [r3, #0]
 8009608:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800960a:	6822      	ldr	r2, [r4, #0]
 800960c:	6813      	ldr	r3, [r2, #0]
 800960e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009612:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009614:	6823      	ldr	r3, [r4, #0]
 8009616:	685a      	ldr	r2, [r3, #4]
 8009618:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800961c:	d038      	beq.n	8009690 <HAL_I2C_EV_IRQHandler+0x8d0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800961e:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8009622:	2a22      	cmp	r2, #34	; 0x22
 8009624:	d01f      	beq.n	8009666 <HAL_I2C_EV_IRQHandler+0x8a6>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009626:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009628:	6812      	ldr	r2, [r2, #0]
 800962a:	6852      	ldr	r2, [r2, #4]
 800962c:	b292      	uxth	r2, r2
 800962e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8009630:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009632:	b292      	uxth	r2, r2
 8009634:	b11a      	cbz	r2, 800963e <HAL_I2C_EV_IRQHandler+0x87e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009636:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009638:	f042 0204 	orr.w	r2, r2, #4
 800963c:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009644:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009646:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009648:	f7fe fb1c 	bl	8007c84 <HAL_DMA_GetState>
 800964c:	2801      	cmp	r0, #1
 800964e:	d01f      	beq.n	8009690 <HAL_I2C_EV_IRQHandler+0x8d0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009650:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009652:	4a77      	ldr	r2, [pc, #476]	; (8009830 <HAL_I2C_EV_IRQHandler+0xa70>)
 8009654:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009656:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009658:	f7fe faca 	bl	8007bf0 <HAL_DMA_Abort_IT>
 800965c:	b1c0      	cbz	r0, 8009690 <HAL_I2C_EV_IRQHandler+0x8d0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800965e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009660:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009662:	4798      	blx	r3
 8009664:	e014      	b.n	8009690 <HAL_I2C_EV_IRQHandler+0x8d0>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009666:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009668:	6812      	ldr	r2, [r2, #0]
 800966a:	6852      	ldr	r2, [r2, #4]
 800966c:	b292      	uxth	r2, r2
 800966e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8009670:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009672:	b292      	uxth	r2, r2
 8009674:	b11a      	cbz	r2, 800967e <HAL_I2C_EV_IRQHandler+0x8be>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009676:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009678:	f042 0204 	orr.w	r2, r2, #4
 800967c:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800967e:	685a      	ldr	r2, [r3, #4]
 8009680:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009684:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009686:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009688:	f7fe fafc 	bl	8007c84 <HAL_DMA_GetState>
 800968c:	2801      	cmp	r0, #1
 800968e:	d142      	bne.n	8009716 <HAL_I2C_EV_IRQHandler+0x956>
  if (hi2c->XferCount != 0U)
 8009690:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009692:	b29b      	uxth	r3, r3
 8009694:	b323      	cbz	r3, 80096e0 <HAL_I2C_EV_IRQHandler+0x920>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	695a      	ldr	r2, [r3, #20]
 800969a:	f012 0f04 	tst.w	r2, #4
 800969e:	d009      	beq.n	80096b4 <HAL_I2C_EV_IRQHandler+0x8f4>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096a0:	691a      	ldr	r2, [r3, #16]
 80096a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096a4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80096a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096a8:	3301      	adds	r3, #1
 80096aa:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80096ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80096ae:	3b01      	subs	r3, #1
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80096b4:	6823      	ldr	r3, [r4, #0]
 80096b6:	695a      	ldr	r2, [r3, #20]
 80096b8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80096bc:	d009      	beq.n	80096d2 <HAL_I2C_EV_IRQHandler+0x912>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096be:	691a      	ldr	r2, [r3, #16]
 80096c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096c2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80096c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096c6:	3301      	adds	r3, #1
 80096c8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80096ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80096cc:	3b01      	subs	r3, #1
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 80096d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	b11b      	cbz	r3, 80096e0 <HAL_I2C_EV_IRQHandler+0x920>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80096d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096da:	f043 0304 	orr.w	r3, r3, #4
 80096de:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80096e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096e2:	bb23      	cbnz	r3, 800972e <HAL_I2C_EV_IRQHandler+0x96e>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80096e4:	2d2a      	cmp	r5, #42	; 0x2a
 80096e6:	d027      	beq.n	8009738 <HAL_I2C_EV_IRQHandler+0x978>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80096e8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	2b28      	cmp	r3, #40	; 0x28
 80096f0:	d02b      	beq.n	800974a <HAL_I2C_EV_IRQHandler+0x98a>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80096f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80096f4:	2b22      	cmp	r3, #34	; 0x22
 80096f6:	d002      	beq.n	80096fe <HAL_I2C_EV_IRQHandler+0x93e>
 80096f8:	2d22      	cmp	r5, #34	; 0x22
 80096fa:	f47f ab8f 	bne.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
        hi2c->PreviousState = I2C_STATE_NONE;
 80096fe:	2300      	movs	r3, #0
 8009700:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009702:	2220      	movs	r2, #32
 8009704:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009708:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800970c:	4620      	mov	r0, r4
 800970e:	f7ff f9c0 	bl	8008a92 <HAL_I2C_SlaveRxCpltCallback>
 8009712:	f7ff bb83 	b.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009716:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009718:	4a45      	ldr	r2, [pc, #276]	; (8009830 <HAL_I2C_EV_IRQHandler+0xa70>)
 800971a:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800971c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800971e:	f7fe fa67 	bl	8007bf0 <HAL_DMA_Abort_IT>
 8009722:	2800      	cmp	r0, #0
 8009724:	d0b4      	beq.n	8009690 <HAL_I2C_EV_IRQHandler+0x8d0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009726:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009728:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800972a:	4798      	blx	r3
 800972c:	e7b0      	b.n	8009690 <HAL_I2C_EV_IRQHandler+0x8d0>
    I2C_ITError(hi2c);
 800972e:	4620      	mov	r0, r4
 8009730:	f7ff fa86 	bl	8008c40 <I2C_ITError>
 8009734:	f7ff bb72 	b.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009738:	2300      	movs	r3, #0
 800973a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800973c:	2328      	movs	r3, #40	; 0x28
 800973e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009742:	4620      	mov	r0, r4
 8009744:	f7ff f9a5 	bl	8008a92 <HAL_I2C_SlaveRxCpltCallback>
 8009748:	e7ce      	b.n	80096e8 <HAL_I2C_EV_IRQHandler+0x928>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800974a:	4b3a      	ldr	r3, [pc, #232]	; (8009834 <HAL_I2C_EV_IRQHandler+0xa74>)
 800974c:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800974e:	2300      	movs	r3, #0
 8009750:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009752:	2220      	movs	r2, #32
 8009754:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009758:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800975c:	4620      	mov	r0, r4
 800975e:	f7ff f99a 	bl	8008a96 <HAL_I2C_ListenCpltCallback>
 8009762:	f7ff bb5b 	b.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009766:	f013 0f80 	tst.w	r3, #128	; 0x80
 800976a:	d02e      	beq.n	80097ca <HAL_I2C_EV_IRQHandler+0xa0a>
 800976c:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8009770:	d02b      	beq.n	80097ca <HAL_I2C_EV_IRQHandler+0xa0a>
 8009772:	f013 0f04 	tst.w	r3, #4
 8009776:	d12c      	bne.n	80097d2 <HAL_I2C_EV_IRQHandler+0xa12>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009778:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800977c:	b2d9      	uxtb	r1, r3
  if (hi2c->XferCount != 0U)
 800977e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009780:	b29b      	uxth	r3, r3
 8009782:	2b00      	cmp	r3, #0
 8009784:	f43f ab4a 	beq.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009788:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	6113      	str	r3, [r2, #16]
    hi2c->pBuffPtr++;
 800978e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009790:	3301      	adds	r3, #1
 8009792:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8009794:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009796:	3b01      	subs	r3, #1
 8009798:	b29b      	uxth	r3, r3
 800979a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800979c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800979e:	b29b      	uxth	r3, r3
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f47f ab3b 	bne.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
 80097a6:	2929      	cmp	r1, #41	; 0x29
 80097a8:	f47f ab38 	bne.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80097ac:	6822      	ldr	r2, [r4, #0]
 80097ae:	6853      	ldr	r3, [r2, #4]
 80097b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097b4:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80097b6:	2321      	movs	r3, #33	; 0x21
 80097b8:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80097ba:	2328      	movs	r3, #40	; 0x28
 80097bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80097c0:	4620      	mov	r0, r4
 80097c2:	f7ff f965 	bl	8008a90 <HAL_I2C_SlaveTxCpltCallback>
 80097c6:	f7ff bb29 	b.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80097ca:	f013 0f04 	tst.w	r3, #4
 80097ce:	f43f ab25 	beq.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
 80097d2:	f410 7f00 	tst.w	r0, #512	; 0x200
 80097d6:	f43f ab21 	beq.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
  if (hi2c->XferCount != 0U)
 80097da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80097dc:	b29b      	uxth	r3, r3
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f43f ab1c 	beq.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	6113      	str	r3, [r2, #16]
    hi2c->pBuffPtr++;
 80097ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097ec:	3301      	adds	r3, #1
 80097ee:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80097f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80097f2:	3b01      	subs	r3, #1
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	8563      	strh	r3, [r4, #42]	; 0x2a
 80097f8:	f7ff bb10 	b.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80097fc:	f013 0f04 	tst.w	r3, #4
 8009800:	f43f ab0c 	beq.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
 8009804:	f410 7f00 	tst.w	r0, #512	; 0x200
 8009808:	f43f ab08 	beq.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
  if (hi2c->XferCount != 0U)
 800980c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800980e:	b29b      	uxth	r3, r3
 8009810:	2b00      	cmp	r3, #0
 8009812:	f43f ab03 	beq.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009816:	6912      	ldr	r2, [r2, #16]
 8009818:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800981a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800981c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800981e:	3301      	adds	r3, #1
 8009820:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8009822:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009824:	3b01      	subs	r3, #1
 8009826:	b29b      	uxth	r3, r3
 8009828:	8563      	strh	r3, [r4, #42]	; 0x2a
 800982a:	f7ff baf7 	b.w	8008e1c <HAL_I2C_EV_IRQHandler+0x5c>
 800982e:	bf00      	nop
 8009830:	08008b5d 	.word	0x08008b5d
 8009834:	ffff0000 	.word	0xffff0000

08009838 <HAL_I2C_ER_IRQHandler>:
{
 8009838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800983a:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800983c:	6803      	ldr	r3, [r0, #0]
 800983e:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8009840:	6859      	ldr	r1, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009842:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8009846:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009848:	f415 7f80 	tst.w	r5, #256	; 0x100
 800984c:	d012      	beq.n	8009874 <HAL_I2C_ER_IRQHandler+0x3c>
 800984e:	f411 7f80 	tst.w	r1, #256	; 0x100
 8009852:	d00f      	beq.n	8009874 <HAL_I2C_ER_IRQHandler+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009854:	f46f 7080 	mvn.w	r0, #256	; 0x100
 8009858:	6158      	str	r0, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800985a:	6820      	ldr	r0, [r4, #0]
 800985c:	6803      	ldr	r3, [r0, #0]
 800985e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009862:	6003      	str	r3, [r0, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009864:	f415 7f00 	tst.w	r5, #512	; 0x200
 8009868:	d11f      	bne.n	80098aa <HAL_I2C_ER_IRQHandler+0x72>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800986a:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800986e:	d146      	bne.n	80098fe <HAL_I2C_ER_IRQHandler+0xc6>
    error |= HAL_I2C_ERROR_BERR;
 8009870:	2601      	movs	r6, #1
 8009872:	e0a2      	b.n	80099ba <HAL_I2C_ER_IRQHandler+0x182>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009874:	f415 7f00 	tst.w	r5, #512	; 0x200
 8009878:	d019      	beq.n	80098ae <HAL_I2C_ER_IRQHandler+0x76>
 800987a:	f411 7f80 	tst.w	r1, #256	; 0x100
 800987e:	d105      	bne.n	800988c <HAL_I2C_ER_IRQHandler+0x54>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009880:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8009884:	f040 80ae 	bne.w	80099e4 <HAL_I2C_ER_IRQHandler+0x1ac>
 8009888:	2600      	movs	r6, #0
 800988a:	e096      	b.n	80099ba <HAL_I2C_ER_IRQHandler+0x182>
 800988c:	2600      	movs	r6, #0
    error |= HAL_I2C_ERROR_ARLO;
 800988e:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009892:	6823      	ldr	r3, [r4, #0]
 8009894:	f46f 7000 	mvn.w	r0, #512	; 0x200
 8009898:	6158      	str	r0, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800989a:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800989e:	d113      	bne.n	80098c8 <HAL_I2C_ER_IRQHandler+0x90>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80098a0:	f415 6f00 	tst.w	r5, #2048	; 0x800
 80098a4:	f040 808d 	bne.w	80099c2 <HAL_I2C_ER_IRQHandler+0x18a>
 80098a8:	e095      	b.n	80099d6 <HAL_I2C_ER_IRQHandler+0x19e>
    error |= HAL_I2C_ERROR_BERR;
 80098aa:	2601      	movs	r6, #1
 80098ac:	e7ef      	b.n	800988e <HAL_I2C_ER_IRQHandler+0x56>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80098ae:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80098b2:	f000 8081 	beq.w	80099b8 <HAL_I2C_ER_IRQHandler+0x180>
 80098b6:	f411 7f80 	tst.w	r1, #256	; 0x100
 80098ba:	d104      	bne.n	80098c6 <HAL_I2C_ER_IRQHandler+0x8e>
 80098bc:	2600      	movs	r6, #0
  if (error != HAL_I2C_ERROR_NONE)
 80098be:	2e00      	cmp	r6, #0
 80098c0:	f040 8089 	bne.w	80099d6 <HAL_I2C_ER_IRQHandler+0x19e>
}
 80098c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098c6:	2600      	movs	r6, #0
    tmp2 = hi2c->XferCount;
 80098c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80098ca:	b29b      	uxth	r3, r3
    tmp3 = hi2c->State;
 80098cc:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80098d0:	b2c0      	uxtb	r0, r0
    tmp4 = hi2c->PreviousState;
 80098d2:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80098d4:	2a20      	cmp	r2, #32
 80098d6:	d014      	beq.n	8009902 <HAL_I2C_ER_IRQHandler+0xca>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098d8:	6823      	ldr	r3, [r4, #0]
 80098da:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80098de:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 80098e0:	f046 0604 	orr.w	r6, r6, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80098e4:	2a10      	cmp	r2, #16
 80098e6:	d001      	beq.n	80098ec <HAL_I2C_ER_IRQHandler+0xb4>
 80098e8:	2a40      	cmp	r2, #64	; 0x40
 80098ea:	d104      	bne.n	80098f6 <HAL_I2C_ER_IRQHandler+0xbe>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098ec:	6822      	ldr	r2, [r4, #0]
 80098ee:	6813      	ldr	r3, [r2, #0]
 80098f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80098f4:	6013      	str	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80098f6:	f415 6f00 	tst.w	r5, #2048	; 0x800
 80098fa:	d166      	bne.n	80099ca <HAL_I2C_ER_IRQHandler+0x192>
 80098fc:	e06b      	b.n	80099d6 <HAL_I2C_ER_IRQHandler+0x19e>
    error |= HAL_I2C_ERROR_BERR;
 80098fe:	2601      	movs	r6, #1
 8009900:	e7e2      	b.n	80098c8 <HAL_I2C_ER_IRQHandler+0x90>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8009902:	b92b      	cbnz	r3, 8009910 <HAL_I2C_ER_IRQHandler+0xd8>
 8009904:	f000 03f7 	and.w	r3, r0, #247	; 0xf7
 8009908:	2b21      	cmp	r3, #33	; 0x21
 800990a:	d00a      	beq.n	8009922 <HAL_I2C_ER_IRQHandler+0xea>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800990c:	2828      	cmp	r0, #40	; 0x28
 800990e:	d006      	beq.n	800991e <HAL_I2C_ER_IRQHandler+0xe6>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009910:	6823      	ldr	r3, [r4, #0]
 8009912:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009916:	615a      	str	r2, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8009918:	f046 0604 	orr.w	r6, r6, #4
 800991c:	e7c0      	b.n	80098a0 <HAL_I2C_ER_IRQHandler+0x68>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800991e:	2f21      	cmp	r7, #33	; 0x21
 8009920:	d1f6      	bne.n	8009910 <HAL_I2C_ER_IRQHandler+0xd8>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009922:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8009926:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009928:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800992a:	2a08      	cmp	r2, #8
 800992c:	d001      	beq.n	8009932 <HAL_I2C_ER_IRQHandler+0xfa>
 800992e:	2a20      	cmp	r2, #32
 8009930:	d101      	bne.n	8009936 <HAL_I2C_ER_IRQHandler+0xfe>
 8009932:	2b28      	cmp	r3, #40	; 0x28
 8009934:	d009      	beq.n	800994a <HAL_I2C_ER_IRQHandler+0x112>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009936:	2b21      	cmp	r3, #33	; 0x21
 8009938:	d022      	beq.n	8009980 <HAL_I2C_ER_IRQHandler+0x148>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800993a:	6823      	ldr	r3, [r4, #0]
 800993c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009940:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009942:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8009946:	d0ba      	beq.n	80098be <HAL_I2C_ER_IRQHandler+0x86>
 8009948:	e03f      	b.n	80099ca <HAL_I2C_ER_IRQHandler+0x192>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800994a:	4b27      	ldr	r3, [pc, #156]	; (80099e8 <HAL_I2C_ER_IRQHandler+0x1b0>)
 800994c:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800994e:	6822      	ldr	r2, [r4, #0]
 8009950:	6853      	ldr	r3, [r2, #4]
 8009952:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009956:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009958:	6823      	ldr	r3, [r4, #0]
 800995a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800995e:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009960:	6822      	ldr	r2, [r4, #0]
 8009962:	6813      	ldr	r3, [r2, #0]
 8009964:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009968:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800996a:	2300      	movs	r3, #0
 800996c:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800996e:	2220      	movs	r2, #32
 8009970:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009974:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8009978:	4620      	mov	r0, r4
 800997a:	f7ff f88c 	bl	8008a96 <HAL_I2C_ListenCpltCallback>
 800997e:	e7e0      	b.n	8009942 <HAL_I2C_ER_IRQHandler+0x10a>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009980:	4b19      	ldr	r3, [pc, #100]	; (80099e8 <HAL_I2C_ER_IRQHandler+0x1b0>)
 8009982:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009984:	2321      	movs	r3, #33	; 0x21
 8009986:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009988:	2320      	movs	r3, #32
 800998a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800998e:	2300      	movs	r3, #0
 8009990:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009994:	6822      	ldr	r2, [r4, #0]
 8009996:	6853      	ldr	r3, [r2, #4]
 8009998:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800999c:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800999e:	6823      	ldr	r3, [r4, #0]
 80099a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80099a4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099a6:	6822      	ldr	r2, [r4, #0]
 80099a8:	6813      	ldr	r3, [r2, #0]
 80099aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099ae:	6013      	str	r3, [r2, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80099b0:	4620      	mov	r0, r4
 80099b2:	f7ff f86d 	bl	8008a90 <HAL_I2C_SlaveTxCpltCallback>
 80099b6:	e7c4      	b.n	8009942 <HAL_I2C_ER_IRQHandler+0x10a>
 80099b8:	2600      	movs	r6, #0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80099ba:	f415 6f00 	tst.w	r5, #2048	; 0x800
 80099be:	f43f af7e 	beq.w	80098be <HAL_I2C_ER_IRQHandler+0x86>
 80099c2:	f411 7f80 	tst.w	r1, #256	; 0x100
 80099c6:	f43f af7a 	beq.w	80098be <HAL_I2C_ER_IRQHandler+0x86>
    error |= HAL_I2C_ERROR_OVR;
 80099ca:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80099d4:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 80099d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099d8:	431e      	orrs	r6, r3
 80099da:	6426      	str	r6, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 80099dc:	4620      	mov	r0, r4
 80099de:	f7ff f92f 	bl	8008c40 <I2C_ITError>
}
 80099e2:	e76f      	b.n	80098c4 <HAL_I2C_ER_IRQHandler+0x8c>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80099e4:	2600      	movs	r6, #0
 80099e6:	e76a      	b.n	80098be <HAL_I2C_ER_IRQHandler+0x86>
 80099e8:	ffff0000 	.word	0xffff0000

080099ec <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80099ec:	2800      	cmp	r0, #0
 80099ee:	f000 8206 	beq.w	8009dfe <HAL_RCC_OscConfig+0x412>
{
 80099f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80099fa:	6803      	ldr	r3, [r0, #0]
 80099fc:	f013 0f01 	tst.w	r3, #1
 8009a00:	d02c      	beq.n	8009a5c <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009a02:	4bab      	ldr	r3, [pc, #684]	; (8009cb0 <HAL_RCC_OscConfig+0x2c4>)
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	f003 030c 	and.w	r3, r3, #12
 8009a0a:	2b04      	cmp	r3, #4
 8009a0c:	d01d      	beq.n	8009a4a <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009a0e:	4ba8      	ldr	r3, [pc, #672]	; (8009cb0 <HAL_RCC_OscConfig+0x2c4>)
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	f003 030c 	and.w	r3, r3, #12
 8009a16:	2b08      	cmp	r3, #8
 8009a18:	d012      	beq.n	8009a40 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a1a:	6863      	ldr	r3, [r4, #4]
 8009a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a20:	d041      	beq.n	8009aa6 <HAL_RCC_OscConfig+0xba>
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d155      	bne.n	8009ad2 <HAL_RCC_OscConfig+0xe6>
 8009a26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009a2a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009a34:	601a      	str	r2, [r3, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	e037      	b.n	8009ab0 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009a40:	4b9b      	ldr	r3, [pc, #620]	; (8009cb0 <HAL_RCC_OscConfig+0x2c4>)
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009a48:	d0e7      	beq.n	8009a1a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a4a:	4b99      	ldr	r3, [pc, #612]	; (8009cb0 <HAL_RCC_OscConfig+0x2c4>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009a52:	d003      	beq.n	8009a5c <HAL_RCC_OscConfig+0x70>
 8009a54:	6863      	ldr	r3, [r4, #4]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	f000 81d3 	beq.w	8009e02 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a5c:	6823      	ldr	r3, [r4, #0]
 8009a5e:	f013 0f02 	tst.w	r3, #2
 8009a62:	d076      	beq.n	8009b52 <HAL_RCC_OscConfig+0x166>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009a64:	4b92      	ldr	r3, [pc, #584]	; (8009cb0 <HAL_RCC_OscConfig+0x2c4>)
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	f013 0f0c 	tst.w	r3, #12
 8009a6c:	d05f      	beq.n	8009b2e <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009a6e:	4b90      	ldr	r3, [pc, #576]	; (8009cb0 <HAL_RCC_OscConfig+0x2c4>)
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	f003 030c 	and.w	r3, r3, #12
 8009a76:	2b08      	cmp	r3, #8
 8009a78:	d054      	beq.n	8009b24 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009a7a:	6923      	ldr	r3, [r4, #16]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f000 808a 	beq.w	8009b96 <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009a82:	4b8c      	ldr	r3, [pc, #560]	; (8009cb4 <HAL_RCC_OscConfig+0x2c8>)
 8009a84:	2201      	movs	r2, #1
 8009a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a88:	f7fe f830 	bl	8007aec <HAL_GetTick>
 8009a8c:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a8e:	4d88      	ldr	r5, [pc, #544]	; (8009cb0 <HAL_RCC_OscConfig+0x2c4>)
 8009a90:	682b      	ldr	r3, [r5, #0]
 8009a92:	f013 0f02 	tst.w	r3, #2
 8009a96:	d175      	bne.n	8009b84 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a98:	f7fe f828 	bl	8007aec <HAL_GetTick>
 8009a9c:	1b80      	subs	r0, r0, r6
 8009a9e:	2802      	cmp	r0, #2
 8009aa0:	d9f6      	bls.n	8009a90 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8009aa2:	2003      	movs	r0, #3
 8009aa4:	e1b0      	b.n	8009e08 <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009aa6:	4a82      	ldr	r2, [pc, #520]	; (8009cb0 <HAL_RCC_OscConfig+0x2c4>)
 8009aa8:	6813      	ldr	r3, [r2, #0]
 8009aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009aae:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009ab0:	6863      	ldr	r3, [r4, #4]
 8009ab2:	b343      	cbz	r3, 8009b06 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8009ab4:	f7fe f81a 	bl	8007aec <HAL_GetTick>
 8009ab8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009aba:	4d7d      	ldr	r5, [pc, #500]	; (8009cb0 <HAL_RCC_OscConfig+0x2c4>)
 8009abc:	682b      	ldr	r3, [r5, #0]
 8009abe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009ac2:	d1cb      	bne.n	8009a5c <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ac4:	f7fe f812 	bl	8007aec <HAL_GetTick>
 8009ac8:	1b80      	subs	r0, r0, r6
 8009aca:	2864      	cmp	r0, #100	; 0x64
 8009acc:	d9f6      	bls.n	8009abc <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8009ace:	2003      	movs	r0, #3
 8009ad0:	e19a      	b.n	8009e08 <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ad2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ad6:	d009      	beq.n	8009aec <HAL_RCC_OscConfig+0x100>
 8009ad8:	4b75      	ldr	r3, [pc, #468]	; (8009cb0 <HAL_RCC_OscConfig+0x2c4>)
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009ae0:	601a      	str	r2, [r3, #0]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009ae8:	601a      	str	r2, [r3, #0]
 8009aea:	e7e1      	b.n	8009ab0 <HAL_RCC_OscConfig+0xc4>
 8009aec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009af0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8009afa:	601a      	str	r2, [r3, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009b02:	601a      	str	r2, [r3, #0]
 8009b04:	e7d4      	b.n	8009ab0 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8009b06:	f7fd fff1 	bl	8007aec <HAL_GetTick>
 8009b0a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b0c:	4d68      	ldr	r5, [pc, #416]	; (8009cb0 <HAL_RCC_OscConfig+0x2c4>)
 8009b0e:	682b      	ldr	r3, [r5, #0]
 8009b10:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009b14:	d0a2      	beq.n	8009a5c <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b16:	f7fd ffe9 	bl	8007aec <HAL_GetTick>
 8009b1a:	1b80      	subs	r0, r0, r6
 8009b1c:	2864      	cmp	r0, #100	; 0x64
 8009b1e:	d9f6      	bls.n	8009b0e <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8009b20:	2003      	movs	r0, #3
 8009b22:	e171      	b.n	8009e08 <HAL_RCC_OscConfig+0x41c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009b24:	4b62      	ldr	r3, [pc, #392]	; (8009cb0 <HAL_RCC_OscConfig+0x2c4>)
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009b2c:	d1a5      	bne.n	8009a7a <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b2e:	4b60      	ldr	r3, [pc, #384]	; (8009cb0 <HAL_RCC_OscConfig+0x2c4>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f013 0f02 	tst.w	r3, #2
 8009b36:	d004      	beq.n	8009b42 <HAL_RCC_OscConfig+0x156>
 8009b38:	6923      	ldr	r3, [r4, #16]
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d001      	beq.n	8009b42 <HAL_RCC_OscConfig+0x156>
        return HAL_ERROR;
 8009b3e:	2001      	movs	r0, #1
 8009b40:	e162      	b.n	8009e08 <HAL_RCC_OscConfig+0x41c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b42:	4a5b      	ldr	r2, [pc, #364]	; (8009cb0 <HAL_RCC_OscConfig+0x2c4>)
 8009b44:	6813      	ldr	r3, [r2, #0]
 8009b46:	6961      	ldr	r1, [r4, #20]
 8009b48:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009b4c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009b50:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b52:	6823      	ldr	r3, [r4, #0]
 8009b54:	f013 0f08 	tst.w	r3, #8
 8009b58:	d03c      	beq.n	8009bd4 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009b5a:	69a3      	ldr	r3, [r4, #24]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d065      	beq.n	8009c2c <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b60:	4b55      	ldr	r3, [pc, #340]	; (8009cb8 <HAL_RCC_OscConfig+0x2cc>)
 8009b62:	2201      	movs	r2, #1
 8009b64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b66:	f7fd ffc1 	bl	8007aec <HAL_GetTick>
 8009b6a:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b6c:	4d50      	ldr	r5, [pc, #320]	; (8009cb0 <HAL_RCC_OscConfig+0x2c4>)
 8009b6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b70:	f013 0f02 	tst.w	r3, #2
 8009b74:	d121      	bne.n	8009bba <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b76:	f7fd ffb9 	bl	8007aec <HAL_GetTick>
 8009b7a:	1b80      	subs	r0, r0, r6
 8009b7c:	2802      	cmp	r0, #2
 8009b7e:	d9f6      	bls.n	8009b6e <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8009b80:	2003      	movs	r0, #3
 8009b82:	e141      	b.n	8009e08 <HAL_RCC_OscConfig+0x41c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b84:	4a4a      	ldr	r2, [pc, #296]	; (8009cb0 <HAL_RCC_OscConfig+0x2c4>)
 8009b86:	6813      	ldr	r3, [r2, #0]
 8009b88:	6961      	ldr	r1, [r4, #20]
 8009b8a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009b8e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009b92:	6013      	str	r3, [r2, #0]
 8009b94:	e7dd      	b.n	8009b52 <HAL_RCC_OscConfig+0x166>
        __HAL_RCC_HSI_DISABLE();
 8009b96:	4b47      	ldr	r3, [pc, #284]	; (8009cb4 <HAL_RCC_OscConfig+0x2c8>)
 8009b98:	2200      	movs	r2, #0
 8009b9a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009b9c:	f7fd ffa6 	bl	8007aec <HAL_GetTick>
 8009ba0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ba2:	4d43      	ldr	r5, [pc, #268]	; (8009cb0 <HAL_RCC_OscConfig+0x2c4>)
 8009ba4:	682b      	ldr	r3, [r5, #0]
 8009ba6:	f013 0f02 	tst.w	r3, #2
 8009baa:	d0d2      	beq.n	8009b52 <HAL_RCC_OscConfig+0x166>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009bac:	f7fd ff9e 	bl	8007aec <HAL_GetTick>
 8009bb0:	1b80      	subs	r0, r0, r6
 8009bb2:	2802      	cmp	r0, #2
 8009bb4:	d9f6      	bls.n	8009ba4 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8009bb6:	2003      	movs	r0, #3
 8009bb8:	e126      	b.n	8009e08 <HAL_RCC_OscConfig+0x41c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009bba:	4b40      	ldr	r3, [pc, #256]	; (8009cbc <HAL_RCC_OscConfig+0x2d0>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a40      	ldr	r2, [pc, #256]	; (8009cc0 <HAL_RCC_OscConfig+0x2d4>)
 8009bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8009bc4:	0a5b      	lsrs	r3, r3, #9
 8009bc6:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8009bc8:	bf00      	nop
  }
  while (Delay --);
 8009bca:	9b01      	ldr	r3, [sp, #4]
 8009bcc:	1e5a      	subs	r2, r3, #1
 8009bce:	9201      	str	r2, [sp, #4]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1f9      	bne.n	8009bc8 <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009bd4:	6823      	ldr	r3, [r4, #0]
 8009bd6:	f013 0f04 	tst.w	r3, #4
 8009bda:	f000 809e 	beq.w	8009d1a <HAL_RCC_OscConfig+0x32e>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009bde:	4b34      	ldr	r3, [pc, #208]	; (8009cb0 <HAL_RCC_OscConfig+0x2c4>)
 8009be0:	69db      	ldr	r3, [r3, #28]
 8009be2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8009be6:	d133      	bne.n	8009c50 <HAL_RCC_OscConfig+0x264>
      __HAL_RCC_PWR_CLK_ENABLE();
 8009be8:	4b31      	ldr	r3, [pc, #196]	; (8009cb0 <HAL_RCC_OscConfig+0x2c4>)
 8009bea:	69da      	ldr	r2, [r3, #28]
 8009bec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009bf0:	61da      	str	r2, [r3, #28]
 8009bf2:	69db      	ldr	r3, [r3, #28]
 8009bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8009bfc:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bfe:	4b31      	ldr	r3, [pc, #196]	; (8009cc4 <HAL_RCC_OscConfig+0x2d8>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009c06:	d025      	beq.n	8009c54 <HAL_RCC_OscConfig+0x268>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c08:	68e3      	ldr	r3, [r4, #12]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d036      	beq.n	8009c7c <HAL_RCC_OscConfig+0x290>
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d15a      	bne.n	8009cc8 <HAL_RCC_OscConfig+0x2dc>
 8009c12:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009c16:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8009c1a:	6a1a      	ldr	r2, [r3, #32]
 8009c1c:	f022 0201 	bic.w	r2, r2, #1
 8009c20:	621a      	str	r2, [r3, #32]
 8009c22:	6a1a      	ldr	r2, [r3, #32]
 8009c24:	f022 0204 	bic.w	r2, r2, #4
 8009c28:	621a      	str	r2, [r3, #32]
 8009c2a:	e02c      	b.n	8009c86 <HAL_RCC_OscConfig+0x29a>
      __HAL_RCC_LSI_DISABLE();
 8009c2c:	4b22      	ldr	r3, [pc, #136]	; (8009cb8 <HAL_RCC_OscConfig+0x2cc>)
 8009c2e:	2200      	movs	r2, #0
 8009c30:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8009c32:	f7fd ff5b 	bl	8007aec <HAL_GetTick>
 8009c36:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c38:	4d1d      	ldr	r5, [pc, #116]	; (8009cb0 <HAL_RCC_OscConfig+0x2c4>)
 8009c3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c3c:	f013 0f02 	tst.w	r3, #2
 8009c40:	d0c8      	beq.n	8009bd4 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c42:	f7fd ff53 	bl	8007aec <HAL_GetTick>
 8009c46:	1b80      	subs	r0, r0, r6
 8009c48:	2802      	cmp	r0, #2
 8009c4a:	d9f6      	bls.n	8009c3a <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 8009c4c:	2003      	movs	r0, #3
 8009c4e:	e0db      	b.n	8009e08 <HAL_RCC_OscConfig+0x41c>
    FlagStatus       pwrclkchanged = RESET;
 8009c50:	2500      	movs	r5, #0
 8009c52:	e7d4      	b.n	8009bfe <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009c54:	4a1b      	ldr	r2, [pc, #108]	; (8009cc4 <HAL_RCC_OscConfig+0x2d8>)
 8009c56:	6813      	ldr	r3, [r2, #0]
 8009c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c5c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8009c5e:	f7fd ff45 	bl	8007aec <HAL_GetTick>
 8009c62:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c64:	4e17      	ldr	r6, [pc, #92]	; (8009cc4 <HAL_RCC_OscConfig+0x2d8>)
 8009c66:	6833      	ldr	r3, [r6, #0]
 8009c68:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009c6c:	d1cc      	bne.n	8009c08 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c6e:	f7fd ff3d 	bl	8007aec <HAL_GetTick>
 8009c72:	1bc0      	subs	r0, r0, r7
 8009c74:	2864      	cmp	r0, #100	; 0x64
 8009c76:	d9f6      	bls.n	8009c66 <HAL_RCC_OscConfig+0x27a>
          return HAL_TIMEOUT;
 8009c78:	2003      	movs	r0, #3
 8009c7a:	e0c5      	b.n	8009e08 <HAL_RCC_OscConfig+0x41c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c7c:	4a0c      	ldr	r2, [pc, #48]	; (8009cb0 <HAL_RCC_OscConfig+0x2c4>)
 8009c7e:	6a13      	ldr	r3, [r2, #32]
 8009c80:	f043 0301 	orr.w	r3, r3, #1
 8009c84:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009c86:	68e3      	ldr	r3, [r4, #12]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d033      	beq.n	8009cf4 <HAL_RCC_OscConfig+0x308>
      tickstart = HAL_GetTick();
 8009c8c:	f7fd ff2e 	bl	8007aec <HAL_GetTick>
 8009c90:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c92:	4e07      	ldr	r6, [pc, #28]	; (8009cb0 <HAL_RCC_OscConfig+0x2c4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c94:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c98:	6a33      	ldr	r3, [r6, #32]
 8009c9a:	f013 0f02 	tst.w	r3, #2
 8009c9e:	d13b      	bne.n	8009d18 <HAL_RCC_OscConfig+0x32c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ca0:	f7fd ff24 	bl	8007aec <HAL_GetTick>
 8009ca4:	eba0 0008 	sub.w	r0, r0, r8
 8009ca8:	42b8      	cmp	r0, r7
 8009caa:	d9f5      	bls.n	8009c98 <HAL_RCC_OscConfig+0x2ac>
          return HAL_TIMEOUT;
 8009cac:	2003      	movs	r0, #3
 8009cae:	e0ab      	b.n	8009e08 <HAL_RCC_OscConfig+0x41c>
 8009cb0:	40021000 	.word	0x40021000
 8009cb4:	42420000 	.word	0x42420000
 8009cb8:	42420480 	.word	0x42420480
 8009cbc:	2000005c 	.word	0x2000005c
 8009cc0:	10624dd3 	.word	0x10624dd3
 8009cc4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009cc8:	2b05      	cmp	r3, #5
 8009cca:	d009      	beq.n	8009ce0 <HAL_RCC_OscConfig+0x2f4>
 8009ccc:	4b51      	ldr	r3, [pc, #324]	; (8009e14 <HAL_RCC_OscConfig+0x428>)
 8009cce:	6a1a      	ldr	r2, [r3, #32]
 8009cd0:	f022 0201 	bic.w	r2, r2, #1
 8009cd4:	621a      	str	r2, [r3, #32]
 8009cd6:	6a1a      	ldr	r2, [r3, #32]
 8009cd8:	f022 0204 	bic.w	r2, r2, #4
 8009cdc:	621a      	str	r2, [r3, #32]
 8009cde:	e7d2      	b.n	8009c86 <HAL_RCC_OscConfig+0x29a>
 8009ce0:	4b4c      	ldr	r3, [pc, #304]	; (8009e14 <HAL_RCC_OscConfig+0x428>)
 8009ce2:	6a1a      	ldr	r2, [r3, #32]
 8009ce4:	f042 0204 	orr.w	r2, r2, #4
 8009ce8:	621a      	str	r2, [r3, #32]
 8009cea:	6a1a      	ldr	r2, [r3, #32]
 8009cec:	f042 0201 	orr.w	r2, r2, #1
 8009cf0:	621a      	str	r2, [r3, #32]
 8009cf2:	e7c8      	b.n	8009c86 <HAL_RCC_OscConfig+0x29a>
      tickstart = HAL_GetTick();
 8009cf4:	f7fd fefa 	bl	8007aec <HAL_GetTick>
 8009cf8:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009cfa:	4e46      	ldr	r6, [pc, #280]	; (8009e14 <HAL_RCC_OscConfig+0x428>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cfc:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d00:	6a33      	ldr	r3, [r6, #32]
 8009d02:	f013 0f02 	tst.w	r3, #2
 8009d06:	d007      	beq.n	8009d18 <HAL_RCC_OscConfig+0x32c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d08:	f7fd fef0 	bl	8007aec <HAL_GetTick>
 8009d0c:	eba0 0008 	sub.w	r0, r0, r8
 8009d10:	42b8      	cmp	r0, r7
 8009d12:	d9f5      	bls.n	8009d00 <HAL_RCC_OscConfig+0x314>
          return HAL_TIMEOUT;
 8009d14:	2003      	movs	r0, #3
 8009d16:	e077      	b.n	8009e08 <HAL_RCC_OscConfig+0x41c>
    if (pwrclkchanged == SET)
 8009d18:	b9e5      	cbnz	r5, 8009d54 <HAL_RCC_OscConfig+0x368>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d1a:	69e3      	ldr	r3, [r4, #28]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d072      	beq.n	8009e06 <HAL_RCC_OscConfig+0x41a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009d20:	4a3c      	ldr	r2, [pc, #240]	; (8009e14 <HAL_RCC_OscConfig+0x428>)
 8009d22:	6852      	ldr	r2, [r2, #4]
 8009d24:	f002 020c 	and.w	r2, r2, #12
 8009d28:	2a08      	cmp	r2, #8
 8009d2a:	d056      	beq.n	8009dda <HAL_RCC_OscConfig+0x3ee>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d017      	beq.n	8009d60 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_PLL_DISABLE();
 8009d30:	4b39      	ldr	r3, [pc, #228]	; (8009e18 <HAL_RCC_OscConfig+0x42c>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009d36:	f7fd fed9 	bl	8007aec <HAL_GetTick>
 8009d3a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009d3c:	4c35      	ldr	r4, [pc, #212]	; (8009e14 <HAL_RCC_OscConfig+0x428>)
 8009d3e:	6823      	ldr	r3, [r4, #0]
 8009d40:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009d44:	d047      	beq.n	8009dd6 <HAL_RCC_OscConfig+0x3ea>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d46:	f7fd fed1 	bl	8007aec <HAL_GetTick>
 8009d4a:	1b40      	subs	r0, r0, r5
 8009d4c:	2802      	cmp	r0, #2
 8009d4e:	d9f6      	bls.n	8009d3e <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 8009d50:	2003      	movs	r0, #3
 8009d52:	e059      	b.n	8009e08 <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d54:	4a2f      	ldr	r2, [pc, #188]	; (8009e14 <HAL_RCC_OscConfig+0x428>)
 8009d56:	69d3      	ldr	r3, [r2, #28]
 8009d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d5c:	61d3      	str	r3, [r2, #28]
 8009d5e:	e7dc      	b.n	8009d1a <HAL_RCC_OscConfig+0x32e>
        __HAL_RCC_PLL_DISABLE();
 8009d60:	4b2d      	ldr	r3, [pc, #180]	; (8009e18 <HAL_RCC_OscConfig+0x42c>)
 8009d62:	2200      	movs	r2, #0
 8009d64:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009d66:	f7fd fec1 	bl	8007aec <HAL_GetTick>
 8009d6a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009d6c:	4d29      	ldr	r5, [pc, #164]	; (8009e14 <HAL_RCC_OscConfig+0x428>)
 8009d6e:	682b      	ldr	r3, [r5, #0]
 8009d70:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009d74:	d006      	beq.n	8009d84 <HAL_RCC_OscConfig+0x398>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d76:	f7fd feb9 	bl	8007aec <HAL_GetTick>
 8009d7a:	1b80      	subs	r0, r0, r6
 8009d7c:	2802      	cmp	r0, #2
 8009d7e:	d9f6      	bls.n	8009d6e <HAL_RCC_OscConfig+0x382>
            return HAL_TIMEOUT;
 8009d80:	2003      	movs	r0, #3
 8009d82:	e041      	b.n	8009e08 <HAL_RCC_OscConfig+0x41c>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009d84:	6a23      	ldr	r3, [r4, #32]
 8009d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d8a:	d01a      	beq.n	8009dc2 <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d8c:	4921      	ldr	r1, [pc, #132]	; (8009e14 <HAL_RCC_OscConfig+0x428>)
 8009d8e:	684a      	ldr	r2, [r1, #4]
 8009d90:	6a23      	ldr	r3, [r4, #32]
 8009d92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009d94:	4303      	orrs	r3, r0
 8009d96:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8009d9e:	4b1e      	ldr	r3, [pc, #120]	; (8009e18 <HAL_RCC_OscConfig+0x42c>)
 8009da0:	2201      	movs	r2, #1
 8009da2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009da4:	f7fd fea2 	bl	8007aec <HAL_GetTick>
 8009da8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009daa:	4c1a      	ldr	r4, [pc, #104]	; (8009e14 <HAL_RCC_OscConfig+0x428>)
 8009dac:	6823      	ldr	r3, [r4, #0]
 8009dae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009db2:	d10e      	bne.n	8009dd2 <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009db4:	f7fd fe9a 	bl	8007aec <HAL_GetTick>
 8009db8:	1b40      	subs	r0, r0, r5
 8009dba:	2802      	cmp	r0, #2
 8009dbc:	d9f6      	bls.n	8009dac <HAL_RCC_OscConfig+0x3c0>
            return HAL_TIMEOUT;
 8009dbe:	2003      	movs	r0, #3
 8009dc0:	e022      	b.n	8009e08 <HAL_RCC_OscConfig+0x41c>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009dc2:	4a14      	ldr	r2, [pc, #80]	; (8009e14 <HAL_RCC_OscConfig+0x428>)
 8009dc4:	6853      	ldr	r3, [r2, #4]
 8009dc6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009dca:	68a1      	ldr	r1, [r4, #8]
 8009dcc:	430b      	orrs	r3, r1
 8009dce:	6053      	str	r3, [r2, #4]
 8009dd0:	e7dc      	b.n	8009d8c <HAL_RCC_OscConfig+0x3a0>
  return HAL_OK;
 8009dd2:	2000      	movs	r0, #0
 8009dd4:	e018      	b.n	8009e08 <HAL_RCC_OscConfig+0x41c>
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	e016      	b.n	8009e08 <HAL_RCC_OscConfig+0x41c>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d017      	beq.n	8009e0e <HAL_RCC_OscConfig+0x422>
        pll_config = RCC->CFGR;
 8009dde:	4b0d      	ldr	r3, [pc, #52]	; (8009e14 <HAL_RCC_OscConfig+0x428>)
 8009de0:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009de2:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8009de6:	6a22      	ldr	r2, [r4, #32]
 8009de8:	4291      	cmp	r1, r2
 8009dea:	d001      	beq.n	8009df0 <HAL_RCC_OscConfig+0x404>
          return HAL_ERROR;
 8009dec:	2001      	movs	r0, #1
 8009dee:	e00b      	b.n	8009e08 <HAL_RCC_OscConfig+0x41c>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009df0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009df4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    return HAL_ERROR;
 8009df6:	1a18      	subs	r0, r3, r0
 8009df8:	bf18      	it	ne
 8009dfa:	2001      	movne	r0, #1
 8009dfc:	e004      	b.n	8009e08 <HAL_RCC_OscConfig+0x41c>
 8009dfe:	2001      	movs	r0, #1
}
 8009e00:	4770      	bx	lr
        return HAL_ERROR;
 8009e02:	2001      	movs	r0, #1
 8009e04:	e000      	b.n	8009e08 <HAL_RCC_OscConfig+0x41c>
  return HAL_OK;
 8009e06:	2000      	movs	r0, #0
}
 8009e08:	b002      	add	sp, #8
 8009e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8009e0e:	2001      	movs	r0, #1
 8009e10:	e7fa      	b.n	8009e08 <HAL_RCC_OscConfig+0x41c>
 8009e12:	bf00      	nop
 8009e14:	40021000 	.word	0x40021000
 8009e18:	42420060 	.word	0x42420060

08009e1c <HAL_RCC_GetSysClockFreq>:
{
 8009e1c:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8009e1e:	4b17      	ldr	r3, [pc, #92]	; (8009e7c <HAL_RCC_GetSysClockFreq+0x60>)
 8009e20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e22:	f10d 0c18 	add.w	ip, sp, #24
 8009e26:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	f88d 3004 	strb.w	r3, [sp, #4]
 8009e30:	2302      	movs	r3, #2
 8009e32:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8009e36:	4b12      	ldr	r3, [pc, #72]	; (8009e80 <HAL_RCC_GetSysClockFreq+0x64>)
 8009e38:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8009e3a:	f003 020c 	and.w	r2, r3, #12
 8009e3e:	2a08      	cmp	r2, #8
 8009e40:	d119      	bne.n	8009e76 <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009e42:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8009e46:	4462      	add	r2, ip
 8009e48:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009e4c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009e50:	d104      	bne.n	8009e5c <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009e52:	480c      	ldr	r0, [pc, #48]	; (8009e84 <HAL_RCC_GetSysClockFreq+0x68>)
 8009e54:	fb00 f002 	mul.w	r0, r0, r2
}
 8009e58:	b006      	add	sp, #24
 8009e5a:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009e5c:	4b08      	ldr	r3, [pc, #32]	; (8009e80 <HAL_RCC_GetSysClockFreq+0x64>)
 8009e5e:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009e60:	4809      	ldr	r0, [pc, #36]	; (8009e88 <HAL_RCC_GetSysClockFreq+0x6c>)
 8009e62:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009e66:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8009e6a:	4463      	add	r3, ip
 8009e6c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009e70:	fbb0 f0f3 	udiv	r0, r0, r3
 8009e74:	e7f0      	b.n	8009e58 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8009e76:	4804      	ldr	r0, [pc, #16]	; (8009e88 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8009e78:	e7ee      	b.n	8009e58 <HAL_RCC_GetSysClockFreq+0x3c>
 8009e7a:	bf00      	nop
 8009e7c:	0800bb38 	.word	0x0800bb38
 8009e80:	40021000 	.word	0x40021000
 8009e84:	003d0900 	.word	0x003d0900
 8009e88:	007a1200 	.word	0x007a1200

08009e8c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	f000 80a6 	beq.w	8009fde <HAL_RCC_ClockConfig+0x152>
{
 8009e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e96:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009e98:	4b53      	ldr	r3, [pc, #332]	; (8009fe8 <HAL_RCC_ClockConfig+0x15c>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f003 0307 	and.w	r3, r3, #7
 8009ea0:	428b      	cmp	r3, r1
 8009ea2:	d20d      	bcs.n	8009ec0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ea4:	4a50      	ldr	r2, [pc, #320]	; (8009fe8 <HAL_RCC_ClockConfig+0x15c>)
 8009ea6:	6813      	ldr	r3, [r2, #0]
 8009ea8:	f023 0307 	bic.w	r3, r3, #7
 8009eac:	430b      	orrs	r3, r1
 8009eae:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009eb0:	6813      	ldr	r3, [r2, #0]
 8009eb2:	f003 0307 	and.w	r3, r3, #7
 8009eb6:	428b      	cmp	r3, r1
 8009eb8:	d002      	beq.n	8009ec0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8009eba:	2001      	movs	r0, #1
}
 8009ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	f013 0f02 	tst.w	r3, #2
 8009ec6:	d017      	beq.n	8009ef8 <HAL_RCC_ClockConfig+0x6c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ec8:	f013 0f04 	tst.w	r3, #4
 8009ecc:	d004      	beq.n	8009ed8 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009ece:	4a47      	ldr	r2, [pc, #284]	; (8009fec <HAL_RCC_ClockConfig+0x160>)
 8009ed0:	6853      	ldr	r3, [r2, #4]
 8009ed2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009ed6:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ed8:	6823      	ldr	r3, [r4, #0]
 8009eda:	f013 0f08 	tst.w	r3, #8
 8009ede:	d004      	beq.n	8009eea <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009ee0:	4a42      	ldr	r2, [pc, #264]	; (8009fec <HAL_RCC_ClockConfig+0x160>)
 8009ee2:	6853      	ldr	r3, [r2, #4]
 8009ee4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8009ee8:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009eea:	4a40      	ldr	r2, [pc, #256]	; (8009fec <HAL_RCC_ClockConfig+0x160>)
 8009eec:	6853      	ldr	r3, [r2, #4]
 8009eee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ef2:	68a0      	ldr	r0, [r4, #8]
 8009ef4:	4303      	orrs	r3, r0
 8009ef6:	6053      	str	r3, [r2, #4]
 8009ef8:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	f013 0f01 	tst.w	r3, #1
 8009f00:	d032      	beq.n	8009f68 <HAL_RCC_ClockConfig+0xdc>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f02:	6862      	ldr	r2, [r4, #4]
 8009f04:	2a01      	cmp	r2, #1
 8009f06:	d021      	beq.n	8009f4c <HAL_RCC_ClockConfig+0xc0>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009f08:	2a02      	cmp	r2, #2
 8009f0a:	d026      	beq.n	8009f5a <HAL_RCC_ClockConfig+0xce>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f0c:	4b37      	ldr	r3, [pc, #220]	; (8009fec <HAL_RCC_ClockConfig+0x160>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f013 0f02 	tst.w	r3, #2
 8009f14:	d065      	beq.n	8009fe2 <HAL_RCC_ClockConfig+0x156>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009f16:	4935      	ldr	r1, [pc, #212]	; (8009fec <HAL_RCC_ClockConfig+0x160>)
 8009f18:	684b      	ldr	r3, [r1, #4]
 8009f1a:	f023 0303 	bic.w	r3, r3, #3
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8009f22:	f7fd fde3 	bl	8007aec <HAL_GetTick>
 8009f26:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f28:	4e30      	ldr	r6, [pc, #192]	; (8009fec <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f2a:	f241 3788 	movw	r7, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f2e:	6873      	ldr	r3, [r6, #4]
 8009f30:	f003 030c 	and.w	r3, r3, #12
 8009f34:	6862      	ldr	r2, [r4, #4]
 8009f36:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8009f3a:	d015      	beq.n	8009f68 <HAL_RCC_ClockConfig+0xdc>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f3c:	f7fd fdd6 	bl	8007aec <HAL_GetTick>
 8009f40:	eba0 0008 	sub.w	r0, r0, r8
 8009f44:	42b8      	cmp	r0, r7
 8009f46:	d9f2      	bls.n	8009f2e <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8009f48:	2003      	movs	r0, #3
 8009f4a:	e7b7      	b.n	8009ebc <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f4c:	4b27      	ldr	r3, [pc, #156]	; (8009fec <HAL_RCC_ClockConfig+0x160>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009f54:	d1df      	bne.n	8009f16 <HAL_RCC_ClockConfig+0x8a>
        return HAL_ERROR;
 8009f56:	2001      	movs	r0, #1
 8009f58:	e7b0      	b.n	8009ebc <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f5a:	4b24      	ldr	r3, [pc, #144]	; (8009fec <HAL_RCC_ClockConfig+0x160>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009f62:	d1d8      	bne.n	8009f16 <HAL_RCC_ClockConfig+0x8a>
        return HAL_ERROR;
 8009f64:	2001      	movs	r0, #1
 8009f66:	e7a9      	b.n	8009ebc <HAL_RCC_ClockConfig+0x30>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009f68:	4b1f      	ldr	r3, [pc, #124]	; (8009fe8 <HAL_RCC_ClockConfig+0x15c>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f003 0307 	and.w	r3, r3, #7
 8009f70:	42ab      	cmp	r3, r5
 8009f72:	d90c      	bls.n	8009f8e <HAL_RCC_ClockConfig+0x102>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f74:	4a1c      	ldr	r2, [pc, #112]	; (8009fe8 <HAL_RCC_ClockConfig+0x15c>)
 8009f76:	6813      	ldr	r3, [r2, #0]
 8009f78:	f023 0307 	bic.w	r3, r3, #7
 8009f7c:	432b      	orrs	r3, r5
 8009f7e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f80:	6813      	ldr	r3, [r2, #0]
 8009f82:	f003 0307 	and.w	r3, r3, #7
 8009f86:	42ab      	cmp	r3, r5
 8009f88:	d001      	beq.n	8009f8e <HAL_RCC_ClockConfig+0x102>
    return HAL_ERROR;
 8009f8a:	2001      	movs	r0, #1
 8009f8c:	e796      	b.n	8009ebc <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f8e:	6823      	ldr	r3, [r4, #0]
 8009f90:	f013 0f04 	tst.w	r3, #4
 8009f94:	d006      	beq.n	8009fa4 <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009f96:	4a15      	ldr	r2, [pc, #84]	; (8009fec <HAL_RCC_ClockConfig+0x160>)
 8009f98:	6853      	ldr	r3, [r2, #4]
 8009f9a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009f9e:	68e1      	ldr	r1, [r4, #12]
 8009fa0:	430b      	orrs	r3, r1
 8009fa2:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fa4:	6823      	ldr	r3, [r4, #0]
 8009fa6:	f013 0f08 	tst.w	r3, #8
 8009faa:	d007      	beq.n	8009fbc <HAL_RCC_ClockConfig+0x130>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009fac:	4a0f      	ldr	r2, [pc, #60]	; (8009fec <HAL_RCC_ClockConfig+0x160>)
 8009fae:	6853      	ldr	r3, [r2, #4]
 8009fb0:	6921      	ldr	r1, [r4, #16]
 8009fb2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8009fb6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009fba:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009fbc:	f7ff ff2e 	bl	8009e1c <HAL_RCC_GetSysClockFreq>
 8009fc0:	4b0a      	ldr	r3, [pc, #40]	; (8009fec <HAL_RCC_ClockConfig+0x160>)
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009fc8:	4a09      	ldr	r2, [pc, #36]	; (8009ff0 <HAL_RCC_ClockConfig+0x164>)
 8009fca:	5cd3      	ldrb	r3, [r2, r3]
 8009fcc:	40d8      	lsrs	r0, r3
 8009fce:	4b09      	ldr	r3, [pc, #36]	; (8009ff4 <HAL_RCC_ClockConfig+0x168>)
 8009fd0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8009fd2:	4b09      	ldr	r3, [pc, #36]	; (8009ff8 <HAL_RCC_ClockConfig+0x16c>)
 8009fd4:	6818      	ldr	r0, [r3, #0]
 8009fd6:	f7fd fd45 	bl	8007a64 <HAL_InitTick>
  return HAL_OK;
 8009fda:	2000      	movs	r0, #0
 8009fdc:	e76e      	b.n	8009ebc <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8009fde:	2001      	movs	r0, #1
}
 8009fe0:	4770      	bx	lr
        return HAL_ERROR;
 8009fe2:	2001      	movs	r0, #1
 8009fe4:	e76a      	b.n	8009ebc <HAL_RCC_ClockConfig+0x30>
 8009fe6:	bf00      	nop
 8009fe8:	40022000 	.word	0x40022000
 8009fec:	40021000 	.word	0x40021000
 8009ff0:	0800bbd4 	.word	0x0800bbd4
 8009ff4:	2000005c 	.word	0x2000005c
 8009ff8:	20000064 	.word	0x20000064

08009ffc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009ffc:	4b04      	ldr	r3, [pc, #16]	; (800a010 <HAL_RCC_GetPCLK1Freq+0x14>)
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800a004:	4a03      	ldr	r2, [pc, #12]	; (800a014 <HAL_RCC_GetPCLK1Freq+0x18>)
 800a006:	5cd3      	ldrb	r3, [r2, r3]
 800a008:	4a03      	ldr	r2, [pc, #12]	; (800a018 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800a00a:	6810      	ldr	r0, [r2, #0]
}
 800a00c:	40d8      	lsrs	r0, r3
 800a00e:	4770      	bx	lr
 800a010:	40021000 	.word	0x40021000
 800a014:	0800bbe4 	.word	0x0800bbe4
 800a018:	2000005c 	.word	0x2000005c

0800a01c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a01c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a020:	b083      	sub	sp, #12
 800a022:	4680      	mov	r8, r0
 800a024:	460e      	mov	r6, r1
 800a026:	4615      	mov	r5, r2
 800a028:	461c      	mov	r4, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a02a:	f7fd fd5f 	bl	8007aec <HAL_GetTick>
 800a02e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a030:	4427      	add	r7, r4
 800a032:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 800a034:	f7fd fd5a 	bl	8007aec <HAL_GetTick>
 800a038:	4681      	mov	r9, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a03a:	4b2d      	ldr	r3, [pc, #180]	; (800a0f0 <SPI_WaitFlagStateUntilTimeout+0xd4>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800a042:	fb07 f303 	mul.w	r3, r7, r3
 800a046:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a048:	f8d8 2000 	ldr.w	r2, [r8]
 800a04c:	6893      	ldr	r3, [r2, #8]
 800a04e:	ea36 0303 	bics.w	r3, r6, r3
 800a052:	bf0c      	ite	eq
 800a054:	2301      	moveq	r3, #1
 800a056:	2300      	movne	r3, #0
 800a058:	42ab      	cmp	r3, r5
 800a05a:	d045      	beq.n	800a0e8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a05c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800a060:	d0f4      	beq.n	800a04c <SPI_WaitFlagStateUntilTimeout+0x30>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a062:	f7fd fd43 	bl	8007aec <HAL_GetTick>
 800a066:	eba0 0009 	sub.w	r0, r0, r9
 800a06a:	42b8      	cmp	r0, r7
 800a06c:	d208      	bcs.n	800a080 <SPI_WaitFlagStateUntilTimeout+0x64>
 800a06e:	b13f      	cbz	r7, 800a080 <SPI_WaitFlagStateUntilTimeout+0x64>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a070:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 800a072:	2b00      	cmp	r3, #0
 800a074:	bf08      	it	eq
 800a076:	2700      	moveq	r7, #0
      }
      count--;
 800a078:	9b01      	ldr	r3, [sp, #4]
 800a07a:	3b01      	subs	r3, #1
 800a07c:	9301      	str	r3, [sp, #4]
 800a07e:	e7e3      	b.n	800a048 <SPI_WaitFlagStateUntilTimeout+0x2c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a080:	f8d8 2000 	ldr.w	r2, [r8]
 800a084:	6853      	ldr	r3, [r2, #4]
 800a086:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800a08a:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a08c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a090:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a094:	d00c      	beq.n	800a0b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a096:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800a09a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a09e:	d016      	beq.n	800a0ce <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	f888 3051 	strb.w	r3, [r8, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	f888 3050 	strb.w	r3, [r8, #80]	; 0x50
        return HAL_TIMEOUT;
 800a0ac:	2003      	movs	r0, #3
 800a0ae:	e01c      	b.n	800a0ea <SPI_WaitFlagStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0b0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0b8:	d002      	beq.n	800a0c0 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a0ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0be:	d1ea      	bne.n	800a096 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 800a0c0:	f8d8 2000 	ldr.w	r2, [r8]
 800a0c4:	6813      	ldr	r3, [r2, #0]
 800a0c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0ca:	6013      	str	r3, [r2, #0]
 800a0cc:	e7e3      	b.n	800a096 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 800a0ce:	f8d8 2000 	ldr.w	r2, [r8]
 800a0d2:	6813      	ldr	r3, [r2, #0]
 800a0d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0d8:	6013      	str	r3, [r2, #0]
 800a0da:	f8d8 2000 	ldr.w	r2, [r8]
 800a0de:	6813      	ldr	r3, [r2, #0]
 800a0e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a0e4:	6013      	str	r3, [r2, #0]
 800a0e6:	e7db      	b.n	800a0a0 <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 800a0e8:	2000      	movs	r0, #0
}
 800a0ea:	b003      	add	sp, #12
 800a0ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0f0:	2000005c 	.word	0x2000005c

0800a0f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a0f4:	b510      	push	{r4, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a0fa:	9200      	str	r2, [sp, #0]
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	2200      	movs	r2, #0
 800a100:	2180      	movs	r1, #128	; 0x80
 800a102:	f7ff ff8b 	bl	800a01c <SPI_WaitFlagStateUntilTimeout>
 800a106:	4603      	mov	r3, r0
 800a108:	b910      	cbnz	r0, 800a110 <SPI_EndRxTxTransaction+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	b002      	add	sp, #8
 800a10e:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a110:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a112:	f043 0320 	orr.w	r3, r3, #32
 800a116:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 800a118:	2303      	movs	r3, #3
 800a11a:	e7f6      	b.n	800a10a <SPI_EndRxTxTransaction+0x16>

0800a11c <HAL_SPI_Init>:
  if (hspi == NULL)
 800a11c:	2800      	cmp	r0, #0
 800a11e:	d056      	beq.n	800a1ce <HAL_SPI_Init+0xb2>
{
 800a120:	b510      	push	{r4, lr}
 800a122:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a124:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a126:	b933      	cbnz	r3, 800a136 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a128:	6843      	ldr	r3, [r0, #4]
 800a12a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a12e:	d005      	beq.n	800a13c <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a130:	2300      	movs	r3, #0
 800a132:	61c3      	str	r3, [r0, #28]
 800a134:	e002      	b.n	800a13c <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a136:	2300      	movs	r3, #0
 800a138:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a13a:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a13c:	2300      	movs	r3, #0
 800a13e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800a140:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800a144:	2b00      	cmp	r3, #0
 800a146:	d03c      	beq.n	800a1c2 <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 800a148:	2302      	movs	r3, #2
 800a14a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800a14e:	6822      	ldr	r2, [r4, #0]
 800a150:	6813      	ldr	r3, [r2, #0]
 800a152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a156:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a158:	6822      	ldr	r2, [r4, #0]
 800a15a:	6863      	ldr	r3, [r4, #4]
 800a15c:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800a160:	68a1      	ldr	r1, [r4, #8]
 800a162:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800a166:	430b      	orrs	r3, r1
 800a168:	68e1      	ldr	r1, [r4, #12]
 800a16a:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 800a16e:	430b      	orrs	r3, r1
 800a170:	6921      	ldr	r1, [r4, #16]
 800a172:	f001 0102 	and.w	r1, r1, #2
 800a176:	430b      	orrs	r3, r1
 800a178:	6961      	ldr	r1, [r4, #20]
 800a17a:	f001 0101 	and.w	r1, r1, #1
 800a17e:	430b      	orrs	r3, r1
 800a180:	69a1      	ldr	r1, [r4, #24]
 800a182:	f401 7100 	and.w	r1, r1, #512	; 0x200
 800a186:	430b      	orrs	r3, r1
 800a188:	69e1      	ldr	r1, [r4, #28]
 800a18a:	f001 0138 	and.w	r1, r1, #56	; 0x38
 800a18e:	430b      	orrs	r3, r1
 800a190:	6a21      	ldr	r1, [r4, #32]
 800a192:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800a196:	430b      	orrs	r3, r1
 800a198:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a19a:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800a19e:	430b      	orrs	r3, r1
 800a1a0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800a1a2:	6822      	ldr	r2, [r4, #0]
 800a1a4:	8b63      	ldrh	r3, [r4, #26]
 800a1a6:	f003 0304 	and.w	r3, r3, #4
 800a1aa:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a1ac:	6822      	ldr	r2, [r4, #0]
 800a1ae:	69d3      	ldr	r3, [r2, #28]
 800a1b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1b4:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800a1c0:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800a1c2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f7fd fb6c 	bl	80078a4 <HAL_SPI_MspInit>
 800a1cc:	e7bc      	b.n	800a148 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 800a1ce:	2001      	movs	r0, #1
}
 800a1d0:	4770      	bx	lr

0800a1d2 <HAL_SPI_TransmitReceive>:
{
 800a1d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 800a1dc:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 800a1e0:	2c01      	cmp	r4, #1
 800a1e2:	f000 810f 	beq.w	800a404 <HAL_SPI_TransmitReceive+0x232>
 800a1e6:	461d      	mov	r5, r3
 800a1e8:	4617      	mov	r7, r2
 800a1ea:	460e      	mov	r6, r1
 800a1ec:	4604      	mov	r4, r0
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800a1f4:	f7fd fc7a 	bl	8007aec <HAL_GetTick>
 800a1f8:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 800a1fa:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800a1fe:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a200:	2801      	cmp	r0, #1
 800a202:	d016      	beq.n	800a232 <HAL_SPI_TransmitReceive+0x60>
 800a204:	6863      	ldr	r3, [r4, #4]
 800a206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a20a:	d00a      	beq.n	800a222 <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_BUSY;
 800a20c:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 800a20e:	2201      	movs	r2, #1
 800a210:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a214:	2200      	movs	r2, #0
 800a216:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	b003      	add	sp, #12
 800a21e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a222:	68a3      	ldr	r3, [r4, #8]
 800a224:	2b00      	cmp	r3, #0
 800a226:	f040 80e1 	bne.w	800a3ec <HAL_SPI_TransmitReceive+0x21a>
 800a22a:	2804      	cmp	r0, #4
 800a22c:	d001      	beq.n	800a232 <HAL_SPI_TransmitReceive+0x60>
    errorcode = HAL_BUSY;
 800a22e:	2302      	movs	r3, #2
 800a230:	e7ed      	b.n	800a20e <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a232:	2e00      	cmp	r6, #0
 800a234:	f000 80dc 	beq.w	800a3f0 <HAL_SPI_TransmitReceive+0x21e>
 800a238:	2f00      	cmp	r7, #0
 800a23a:	f000 80db 	beq.w	800a3f4 <HAL_SPI_TransmitReceive+0x222>
 800a23e:	2d00      	cmp	r5, #0
 800a240:	f000 80da 	beq.w	800a3f8 <HAL_SPI_TransmitReceive+0x226>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a244:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a24c:	bf1c      	itt	ne
 800a24e:	2305      	movne	r3, #5
 800a250:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a254:	2300      	movs	r3, #0
 800a256:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a258:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a25a:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a25c:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a25e:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a260:	86e5      	strh	r5, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a262:	86a5      	strh	r5, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 800a264:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a266:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a268:	6823      	ldr	r3, [r4, #0]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a270:	d103      	bne.n	800a27a <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a278:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a27a:	68e3      	ldr	r3, [r4, #12]
 800a27c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a280:	d012      	beq.n	800a2a8 <HAL_SPI_TransmitReceive+0xd6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a282:	6863      	ldr	r3, [r4, #4]
 800a284:	b10b      	cbz	r3, 800a28a <HAL_SPI_TransmitReceive+0xb8>
 800a286:	2d01      	cmp	r5, #1
 800a288:	d10a      	bne.n	800a2a0 <HAL_SPI_TransmitReceive+0xce>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a28a:	6823      	ldr	r3, [r4, #0]
 800a28c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a28e:	7812      	ldrb	r2, [r2, #0]
 800a290:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a292:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a294:	3301      	adds	r3, #1
 800a296:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800a298:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a29a:	3b01      	subs	r3, #1
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800a2a0:	2501      	movs	r5, #1
        txallowed = 0U;
 800a2a2:	2700      	movs	r7, #0
        txallowed = 1U;
 800a2a4:	462e      	mov	r6, r5
 800a2a6:	e068      	b.n	800a37a <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a2a8:	6863      	ldr	r3, [r4, #4]
 800a2aa:	b10b      	cbz	r3, 800a2b0 <HAL_SPI_TransmitReceive+0xde>
 800a2ac:	2d01      	cmp	r5, #1
 800a2ae:	d10a      	bne.n	800a2c6 <HAL_SPI_TransmitReceive+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2b0:	6823      	ldr	r3, [r4, #0]
 800a2b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a2b4:	8812      	ldrh	r2, [r2, #0]
 800a2b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a2ba:	3302      	adds	r3, #2
 800a2bc:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800a2be:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800a2c6:	2501      	movs	r5, #1
        txallowed = 0U;
 800a2c8:	2700      	movs	r7, #0
        txallowed = 1U;
 800a2ca:	462e      	mov	r6, r5
 800a2cc:	e01b      	b.n	800a306 <HAL_SPI_TransmitReceive+0x134>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a2ce:	6823      	ldr	r3, [r4, #0]
 800a2d0:	689a      	ldr	r2, [r3, #8]
 800a2d2:	f012 0f01 	tst.w	r2, #1
 800a2d6:	d00d      	beq.n	800a2f4 <HAL_SPI_TransmitReceive+0x122>
 800a2d8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a2da:	b292      	uxth	r2, r2
 800a2dc:	b152      	cbz	r2, 800a2f4 <HAL_SPI_TransmitReceive+0x122>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a2de:	68da      	ldr	r2, [r3, #12]
 800a2e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a2e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a2e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a2e6:	3302      	adds	r3, #2
 800a2e8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800a2ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800a2f2:	4635      	mov	r5, r6
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a2f4:	f7fd fbfa 	bl	8007aec <HAL_GetTick>
 800a2f8:	eba0 0009 	sub.w	r0, r0, r9
 800a2fc:	4540      	cmp	r0, r8
 800a2fe:	d302      	bcc.n	800a306 <HAL_SPI_TransmitReceive+0x134>
 800a300:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800a304:	d17a      	bne.n	800a3fc <HAL_SPI_TransmitReceive+0x22a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a306:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a308:	b29b      	uxth	r3, r3
 800a30a:	b91b      	cbnz	r3, 800a314 <HAL_SPI_TransmitReceive+0x142>
 800a30c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a30e:	b29b      	uxth	r3, r3
 800a310:	2b00      	cmp	r3, #0
 800a312:	d054      	beq.n	800a3be <HAL_SPI_TransmitReceive+0x1ec>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a314:	6823      	ldr	r3, [r4, #0]
 800a316:	689a      	ldr	r2, [r3, #8]
 800a318:	f012 0f02 	tst.w	r2, #2
 800a31c:	d0d7      	beq.n	800a2ce <HAL_SPI_TransmitReceive+0xfc>
 800a31e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800a320:	b292      	uxth	r2, r2
 800a322:	2a00      	cmp	r2, #0
 800a324:	d0d3      	beq.n	800a2ce <HAL_SPI_TransmitReceive+0xfc>
 800a326:	2d00      	cmp	r5, #0
 800a328:	d0d1      	beq.n	800a2ce <HAL_SPI_TransmitReceive+0xfc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a32a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a32c:	8812      	ldrh	r2, [r2, #0]
 800a32e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a330:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a332:	3302      	adds	r3, #2
 800a334:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800a336:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a338:	3b01      	subs	r3, #1
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800a33e:	463d      	mov	r5, r7
 800a340:	e7c5      	b.n	800a2ce <HAL_SPI_TransmitReceive+0xfc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a342:	6823      	ldr	r3, [r4, #0]
 800a344:	689a      	ldr	r2, [r3, #8]
 800a346:	f012 0f01 	tst.w	r2, #1
 800a34a:	d00d      	beq.n	800a368 <HAL_SPI_TransmitReceive+0x196>
 800a34c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a34e:	b292      	uxth	r2, r2
 800a350:	b152      	cbz	r2, 800a368 <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a352:	68da      	ldr	r2, [r3, #12]
 800a354:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a356:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a358:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a35a:	3301      	adds	r3, #1
 800a35c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800a35e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a360:	3b01      	subs	r3, #1
 800a362:	b29b      	uxth	r3, r3
 800a364:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800a366:	4635      	mov	r5, r6
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a368:	f7fd fbc0 	bl	8007aec <HAL_GetTick>
 800a36c:	eba0 0009 	sub.w	r0, r0, r9
 800a370:	4540      	cmp	r0, r8
 800a372:	d31f      	bcc.n	800a3b4 <HAL_SPI_TransmitReceive+0x1e2>
 800a374:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800a378:	d142      	bne.n	800a400 <HAL_SPI_TransmitReceive+0x22e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a37a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	b913      	cbnz	r3, 800a386 <HAL_SPI_TransmitReceive+0x1b4>
 800a380:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a382:	b29b      	uxth	r3, r3
 800a384:	b1db      	cbz	r3, 800a3be <HAL_SPI_TransmitReceive+0x1ec>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a386:	6823      	ldr	r3, [r4, #0]
 800a388:	689a      	ldr	r2, [r3, #8]
 800a38a:	f012 0f02 	tst.w	r2, #2
 800a38e:	d0d8      	beq.n	800a342 <HAL_SPI_TransmitReceive+0x170>
 800a390:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800a392:	b292      	uxth	r2, r2
 800a394:	2a00      	cmp	r2, #0
 800a396:	d0d4      	beq.n	800a342 <HAL_SPI_TransmitReceive+0x170>
 800a398:	2d01      	cmp	r5, #1
 800a39a:	d1d2      	bne.n	800a342 <HAL_SPI_TransmitReceive+0x170>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a39c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a39e:	7812      	ldrb	r2, [r2, #0]
 800a3a0:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800a3a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800a3a8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800a3b0:	463d      	mov	r5, r7
 800a3b2:	e7c6      	b.n	800a342 <HAL_SPI_TransmitReceive+0x170>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a3b4:	f1b8 0f00 	cmp.w	r8, #0
 800a3b8:	d1df      	bne.n	800a37a <HAL_SPI_TransmitReceive+0x1a8>
        errorcode = HAL_TIMEOUT;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	e727      	b.n	800a20e <HAL_SPI_TransmitReceive+0x3c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a3be:	464a      	mov	r2, r9
 800a3c0:	4641      	mov	r1, r8
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f7ff fe96 	bl	800a0f4 <SPI_EndRxTxTransaction>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	b118      	cbz	r0, 800a3d4 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a3cc:	2320      	movs	r3, #32
 800a3ce:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a3d0:	2301      	movs	r3, #1
    goto error;
 800a3d2:	e71c      	b.n	800a20e <HAL_SPI_TransmitReceive+0x3c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a3d4:	68a2      	ldr	r2, [r4, #8]
 800a3d6:	2a00      	cmp	r2, #0
 800a3d8:	f47f af19 	bne.w	800a20e <HAL_SPI_TransmitReceive+0x3c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a3dc:	9201      	str	r2, [sp, #4]
 800a3de:	6822      	ldr	r2, [r4, #0]
 800a3e0:	68d1      	ldr	r1, [r2, #12]
 800a3e2:	9101      	str	r1, [sp, #4]
 800a3e4:	6892      	ldr	r2, [r2, #8]
 800a3e6:	9201      	str	r2, [sp, #4]
 800a3e8:	9a01      	ldr	r2, [sp, #4]
 800a3ea:	e710      	b.n	800a20e <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_BUSY;
 800a3ec:	2302      	movs	r3, #2
 800a3ee:	e70e      	b.n	800a20e <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_ERROR;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e70c      	b.n	800a20e <HAL_SPI_TransmitReceive+0x3c>
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e70a      	b.n	800a20e <HAL_SPI_TransmitReceive+0x3c>
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e708      	b.n	800a20e <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	e706      	b.n	800a20e <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 800a400:	2303      	movs	r3, #3
 800a402:	e704      	b.n	800a20e <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 800a404:	2302      	movs	r3, #2
 800a406:	e708      	b.n	800a21a <HAL_SPI_TransmitReceive+0x48>

0800a408 <HAL_SPI_ErrorCallback>:
}
 800a408:	4770      	bx	lr
	...

0800a40c <HAL_SPI_IRQHandler>:
{
 800a40c:	b530      	push	{r4, r5, lr}
 800a40e:	b085      	sub	sp, #20
 800a410:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800a412:	6801      	ldr	r1, [r0, #0]
 800a414:	6848      	ldr	r0, [r1, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800a416:	688a      	ldr	r2, [r1, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a418:	0993      	lsrs	r3, r2, #6
 800a41a:	f013 0501 	ands.w	r5, r3, #1
 800a41e:	d109      	bne.n	800a434 <HAL_SPI_IRQHandler+0x28>
 800a420:	f012 0f01 	tst.w	r2, #1
 800a424:	d006      	beq.n	800a434 <HAL_SPI_IRQHandler+0x28>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a426:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a42a:	d003      	beq.n	800a434 <HAL_SPI_IRQHandler+0x28>
    hspi->RxISR(hspi);
 800a42c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a42e:	4620      	mov	r0, r4
 800a430:	4798      	blx	r3
    return;
 800a432:	e008      	b.n	800a446 <HAL_SPI_IRQHandler+0x3a>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a434:	f012 0f02 	tst.w	r2, #2
 800a438:	d007      	beq.n	800a44a <HAL_SPI_IRQHandler+0x3e>
 800a43a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a43e:	d004      	beq.n	800a44a <HAL_SPI_IRQHandler+0x3e>
    hspi->TxISR(hspi);
 800a440:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a442:	4620      	mov	r0, r4
 800a444:	4798      	blx	r3
}
 800a446:	b005      	add	sp, #20
 800a448:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800a44a:	0952      	lsrs	r2, r2, #5
 800a44c:	4313      	orrs	r3, r2
 800a44e:	f013 0f01 	tst.w	r3, #1
 800a452:	d0f8      	beq.n	800a446 <HAL_SPI_IRQHandler+0x3a>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a454:	f010 0f20 	tst.w	r0, #32
 800a458:	d0f5      	beq.n	800a446 <HAL_SPI_IRQHandler+0x3a>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a45a:	b17d      	cbz	r5, 800a47c <HAL_SPI_IRQHandler+0x70>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a45c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800a460:	b2db      	uxtb	r3, r3
 800a462:	2b03      	cmp	r3, #3
 800a464:	d048      	beq.n	800a4f8 <HAL_SPI_IRQHandler+0xec>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a466:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a468:	f043 0304 	orr.w	r3, r3, #4
 800a46c:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a46e:	2300      	movs	r3, #0
 800a470:	9301      	str	r3, [sp, #4]
 800a472:	68cb      	ldr	r3, [r1, #12]
 800a474:	9301      	str	r3, [sp, #4]
 800a476:	688b      	ldr	r3, [r1, #8]
 800a478:	9301      	str	r3, [sp, #4]
 800a47a:	9b01      	ldr	r3, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a47c:	f012 0f01 	tst.w	r2, #1
 800a480:	d00c      	beq.n	800a49c <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a482:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a484:	f043 0301 	orr.w	r3, r3, #1
 800a488:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a48a:	2300      	movs	r3, #0
 800a48c:	9303      	str	r3, [sp, #12]
 800a48e:	688b      	ldr	r3, [r1, #8]
 800a490:	9303      	str	r3, [sp, #12]
 800a492:	680b      	ldr	r3, [r1, #0]
 800a494:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a498:	600b      	str	r3, [r1, #0]
 800a49a:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a49c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d0d1      	beq.n	800a446 <HAL_SPI_IRQHandler+0x3a>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a4a2:	6822      	ldr	r2, [r4, #0]
 800a4a4:	6853      	ldr	r3, [r2, #4]
 800a4a6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800a4aa:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a4b2:	f010 0f03 	tst.w	r0, #3
 800a4b6:	d027      	beq.n	800a508 <HAL_SPI_IRQHandler+0xfc>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a4b8:	6822      	ldr	r2, [r4, #0]
 800a4ba:	6853      	ldr	r3, [r2, #4]
 800a4bc:	f023 0303 	bic.w	r3, r3, #3
 800a4c0:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800a4c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a4c4:	b14b      	cbz	r3, 800a4da <HAL_SPI_IRQHandler+0xce>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a4c6:	4a12      	ldr	r2, [pc, #72]	; (800a510 <HAL_SPI_IRQHandler+0x104>)
 800a4c8:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a4ca:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a4cc:	f7fd fb90 	bl	8007bf0 <HAL_DMA_Abort_IT>
 800a4d0:	b118      	cbz	r0, 800a4da <HAL_SPI_IRQHandler+0xce>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a4d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a4d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4d8:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a4da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d0b2      	beq.n	800a446 <HAL_SPI_IRQHandler+0x3a>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a4e0:	4a0b      	ldr	r2, [pc, #44]	; (800a510 <HAL_SPI_IRQHandler+0x104>)
 800a4e2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a4e4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a4e6:	f7fd fb83 	bl	8007bf0 <HAL_DMA_Abort_IT>
 800a4ea:	2800      	cmp	r0, #0
 800a4ec:	d0ab      	beq.n	800a446 <HAL_SPI_IRQHandler+0x3a>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a4ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a4f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4f4:	6563      	str	r3, [r4, #84]	; 0x54
 800a4f6:	e7a6      	b.n	800a446 <HAL_SPI_IRQHandler+0x3a>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	9302      	str	r3, [sp, #8]
 800a4fc:	68cb      	ldr	r3, [r1, #12]
 800a4fe:	9302      	str	r3, [sp, #8]
 800a500:	688b      	ldr	r3, [r1, #8]
 800a502:	9302      	str	r3, [sp, #8]
 800a504:	9b02      	ldr	r3, [sp, #8]
        return;
 800a506:	e79e      	b.n	800a446 <HAL_SPI_IRQHandler+0x3a>
        HAL_SPI_ErrorCallback(hspi);
 800a508:	4620      	mov	r0, r4
 800a50a:	f7ff ff7d 	bl	800a408 <HAL_SPI_ErrorCallback>
 800a50e:	e79a      	b.n	800a446 <HAL_SPI_IRQHandler+0x3a>
 800a510:	0800a515 	.word	0x0800a515

0800a514 <SPI_DMAAbortOnError>:
{
 800a514:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a516:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 800a518:	2300      	movs	r3, #0
 800a51a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a51c:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 800a51e:	f7ff ff73 	bl	800a408 <HAL_SPI_ErrorCallback>
}
 800a522:	bd08      	pop	{r3, pc}

0800a524 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a524:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a526:	4a20      	ldr	r2, [pc, #128]	; (800a5a8 <TIM_Base_SetConfig+0x84>)
 800a528:	4290      	cmp	r0, r2
 800a52a:	d014      	beq.n	800a556 <TIM_Base_SetConfig+0x32>
 800a52c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a530:	d02a      	beq.n	800a588 <TIM_Base_SetConfig+0x64>
 800a532:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a536:	4290      	cmp	r0, r2
 800a538:	d02b      	beq.n	800a592 <TIM_Base_SetConfig+0x6e>
 800a53a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a53e:	4290      	cmp	r0, r2
 800a540:	d02c      	beq.n	800a59c <TIM_Base_SetConfig+0x78>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a546:	694a      	ldr	r2, [r1, #20]
 800a548:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800a54a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a54c:	688b      	ldr	r3, [r1, #8]
 800a54e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a550:	680b      	ldr	r3, [r1, #0]
 800a552:	6283      	str	r3, [r0, #40]	; 0x28
 800a554:	e015      	b.n	800a582 <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a55a:	684a      	ldr	r2, [r1, #4]
 800a55c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800a55e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a562:	68ca      	ldr	r2, [r1, #12]
 800a564:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a56a:	694a      	ldr	r2, [r1, #20]
 800a56c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800a56e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a570:	688b      	ldr	r3, [r1, #8]
 800a572:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a574:	680b      	ldr	r3, [r1, #0]
 800a576:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a578:	4b0b      	ldr	r3, [pc, #44]	; (800a5a8 <TIM_Base_SetConfig+0x84>)
 800a57a:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a57c:	bf04      	itt	eq
 800a57e:	690a      	ldreq	r2, [r1, #16]
 800a580:	631a      	streq	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a582:	2301      	movs	r3, #1
 800a584:	6143      	str	r3, [r0, #20]
}
 800a586:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a58c:	684a      	ldr	r2, [r1, #4]
 800a58e:	4313      	orrs	r3, r2
 800a590:	e7e5      	b.n	800a55e <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a596:	684a      	ldr	r2, [r1, #4]
 800a598:	4313      	orrs	r3, r2
 800a59a:	e7e0      	b.n	800a55e <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a59c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a5a0:	684a      	ldr	r2, [r1, #4]
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	e7db      	b.n	800a55e <TIM_Base_SetConfig+0x3a>
 800a5a6:	bf00      	nop
 800a5a8:	40012c00 	.word	0x40012c00

0800a5ac <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800a5ac:	b338      	cbz	r0, 800a5fe <HAL_TIM_Base_Init+0x52>
{
 800a5ae:	b510      	push	{r4, lr}
 800a5b0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800a5b2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a5b6:	b1eb      	cbz	r3, 800a5f4 <HAL_TIM_Base_Init+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 800a5b8:	2302      	movs	r3, #2
 800a5ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5be:	1d21      	adds	r1, r4, #4
 800a5c0:	6820      	ldr	r0, [r4, #0]
 800a5c2:	f7ff ffaf 	bl	800a524 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5cc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800a5d0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800a5d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800a5d8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a5e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800a5ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800a5f0:	2000      	movs	r0, #0
}
 800a5f2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800a5f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800a5f8:	f7fd f996 	bl	8007928 <HAL_TIM_Base_MspInit>
 800a5fc:	e7dc      	b.n	800a5b8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800a5fe:	2001      	movs	r0, #1
}
 800a600:	4770      	bx	lr

0800a602 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a602:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a604:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a606:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a60a:	430a      	orrs	r2, r1
 800a60c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800a610:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a612:	6083      	str	r3, [r0, #8]
}
 800a614:	bc10      	pop	{r4}
 800a616:	4770      	bx	lr

0800a618 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800a618:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	f000 809d 	beq.w	800a75c <HAL_TIM_ConfigClockSource+0x144>
{
 800a622:	b570      	push	{r4, r5, r6, lr}
 800a624:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800a626:	2301      	movs	r3, #1
 800a628:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800a62c:	2302      	movs	r3, #2
 800a62e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800a632:	6802      	ldr	r2, [r0, #0]
 800a634:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a63a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800a63e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800a640:	680b      	ldr	r3, [r1, #0]
 800a642:	2b40      	cmp	r3, #64	; 0x40
 800a644:	d070      	beq.n	800a728 <HAL_TIM_ConfigClockSource+0x110>
 800a646:	d913      	bls.n	800a670 <HAL_TIM_ConfigClockSource+0x58>
 800a648:	2b60      	cmp	r3, #96	; 0x60
 800a64a:	d052      	beq.n	800a6f2 <HAL_TIM_ConfigClockSource+0xda>
 800a64c:	d923      	bls.n	800a696 <HAL_TIM_ConfigClockSource+0x7e>
 800a64e:	2b70      	cmp	r3, #112	; 0x70
 800a650:	d03d      	beq.n	800a6ce <HAL_TIM_ConfigClockSource+0xb6>
 800a652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a656:	d145      	bne.n	800a6e4 <HAL_TIM_ConfigClockSource+0xcc>
      TIM_ETR_SetConfig(htim->Instance,
 800a658:	68cb      	ldr	r3, [r1, #12]
 800a65a:	684a      	ldr	r2, [r1, #4]
 800a65c:	6889      	ldr	r1, [r1, #8]
 800a65e:	6800      	ldr	r0, [r0, #0]
 800a660:	f7ff ffcf 	bl	800a602 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a664:	6822      	ldr	r2, [r4, #0]
 800a666:	6893      	ldr	r3, [r2, #8]
 800a668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a66c:	6093      	str	r3, [r2, #8]
      break;
 800a66e:	e039      	b.n	800a6e4 <HAL_TIM_ConfigClockSource+0xcc>
  switch (sClockSourceConfig->ClockSource)
 800a670:	2b10      	cmp	r3, #16
 800a672:	d007      	beq.n	800a684 <HAL_TIM_ConfigClockSource+0x6c>
 800a674:	d904      	bls.n	800a680 <HAL_TIM_ConfigClockSource+0x68>
 800a676:	2b20      	cmp	r3, #32
 800a678:	d004      	beq.n	800a684 <HAL_TIM_ConfigClockSource+0x6c>
 800a67a:	2b30      	cmp	r3, #48	; 0x30
 800a67c:	d002      	beq.n	800a684 <HAL_TIM_ConfigClockSource+0x6c>
 800a67e:	e031      	b.n	800a6e4 <HAL_TIM_ConfigClockSource+0xcc>
 800a680:	2b00      	cmp	r3, #0
 800a682:	d12f      	bne.n	800a6e4 <HAL_TIM_ConfigClockSource+0xcc>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a684:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800a686:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a688:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a68c:	f043 0307 	orr.w	r3, r3, #7
 800a690:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 800a692:	608b      	str	r3, [r1, #8]
 800a694:	e026      	b.n	800a6e4 <HAL_TIM_ConfigClockSource+0xcc>
  switch (sClockSourceConfig->ClockSource)
 800a696:	2b50      	cmp	r3, #80	; 0x50
 800a698:	d124      	bne.n	800a6e4 <HAL_TIM_ConfigClockSource+0xcc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a69a:	6803      	ldr	r3, [r0, #0]
 800a69c:	6848      	ldr	r0, [r1, #4]
 800a69e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800a6a0:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6a2:	6a1d      	ldr	r5, [r3, #32]
 800a6a4:	f025 0501 	bic.w	r5, r5, #1
 800a6a8:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6aa:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a6ac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a6b0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6b4:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800a6b8:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800a6ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6bc:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a6be:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800a6c0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a6c6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800a6ca:	6093      	str	r3, [r2, #8]
 800a6cc:	e00a      	b.n	800a6e4 <HAL_TIM_ConfigClockSource+0xcc>
      TIM_ETR_SetConfig(htim->Instance,
 800a6ce:	68cb      	ldr	r3, [r1, #12]
 800a6d0:	684a      	ldr	r2, [r1, #4]
 800a6d2:	6889      	ldr	r1, [r1, #8]
 800a6d4:	6800      	ldr	r0, [r0, #0]
 800a6d6:	f7ff ff94 	bl	800a602 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a6da:	6822      	ldr	r2, [r4, #0]
 800a6dc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a6de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800a6e2:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a6ea:	2000      	movs	r0, #0
 800a6ec:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800a6f0:	bd70      	pop	{r4, r5, r6, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6f2:	6803      	ldr	r3, [r0, #0]
 800a6f4:	684d      	ldr	r5, [r1, #4]
 800a6f6:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6f8:	6a18      	ldr	r0, [r3, #32]
 800a6fa:	f020 0010 	bic.w	r0, r0, #16
 800a6fe:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a700:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800a702:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a704:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a708:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a70c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800a710:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800a714:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800a716:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a718:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800a71a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a71c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a720:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800a724:	6093      	str	r3, [r2, #8]
 800a726:	e7dd      	b.n	800a6e4 <HAL_TIM_ConfigClockSource+0xcc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a728:	6803      	ldr	r3, [r0, #0]
 800a72a:	6848      	ldr	r0, [r1, #4]
 800a72c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800a72e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a730:	6a1d      	ldr	r5, [r3, #32]
 800a732:	f025 0501 	bic.w	r5, r5, #1
 800a736:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a738:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a73a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a73e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a742:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800a746:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800a748:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a74a:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a74c:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800a74e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a754:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800a758:	6093      	str	r3, [r2, #8]
 800a75a:	e7c3      	b.n	800a6e4 <HAL_TIM_ConfigClockSource+0xcc>
  __HAL_LOCK(htim);
 800a75c:	2002      	movs	r0, #2
}
 800a75e:	4770      	bx	lr

0800a760 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a760:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a764:	2b01      	cmp	r3, #1
 800a766:	d02b      	beq.n	800a7c0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 800a768:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800a76a:	2301      	movs	r3, #1
 800a76c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a770:	2302      	movs	r3, #2
 800a772:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a776:	6804      	ldr	r4, [r0, #0]
 800a778:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a77a:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a77c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a780:	680d      	ldr	r5, [r1, #0]
 800a782:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a784:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a786:	6803      	ldr	r3, [r0, #0]
 800a788:	4c0e      	ldr	r4, [pc, #56]	; (800a7c4 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 800a78a:	42a3      	cmp	r3, r4
 800a78c:	d00a      	beq.n	800a7a4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800a78e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a792:	d007      	beq.n	800a7a4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800a794:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 800a798:	42a3      	cmp	r3, r4
 800a79a:	d003      	beq.n	800a7a4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800a79c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a7a0:	42a3      	cmp	r3, r4
 800a7a2:	d104      	bne.n	800a7ae <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a7a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a7a8:	6849      	ldr	r1, [r1, #4]
 800a7aa:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a7ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800a7ba:	4618      	mov	r0, r3
}
 800a7bc:	bc30      	pop	{r4, r5}
 800a7be:	4770      	bx	lr
  __HAL_LOCK(htim);
 800a7c0:	2002      	movs	r0, #2
}
 800a7c2:	4770      	bx	lr
 800a7c4:	40012c00 	.word	0x40012c00

0800a7c8 <_ZdaPv>:
 800a7c8:	f000 b81e 	b.w	800a808 <_ZdlPv>

0800a7cc <_Znaj>:
 800a7cc:	f000 b802 	b.w	800a7d4 <_Znwj>

0800a7d0 <_ZdlPvj>:
 800a7d0:	f000 b81a 	b.w	800a808 <_ZdlPv>

0800a7d4 <_Znwj>:
 800a7d4:	b510      	push	{r4, lr}
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	bf14      	ite	ne
 800a7da:	4604      	movne	r4, r0
 800a7dc:	2401      	moveq	r4, #1
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f001 f86e 	bl	800b8c0 <malloc>
 800a7e4:	b930      	cbnz	r0, 800a7f4 <_Znwj+0x20>
 800a7e6:	f000 f807 	bl	800a7f8 <_ZSt15get_new_handlerv>
 800a7ea:	b908      	cbnz	r0, 800a7f0 <_Znwj+0x1c>
 800a7ec:	f001 f837 	bl	800b85e <abort>
 800a7f0:	4780      	blx	r0
 800a7f2:	e7f4      	b.n	800a7de <_Znwj+0xa>
 800a7f4:	bd10      	pop	{r4, pc}
	...

0800a7f8 <_ZSt15get_new_handlerv>:
 800a7f8:	4b02      	ldr	r3, [pc, #8]	; (800a804 <_ZSt15get_new_handlerv+0xc>)
 800a7fa:	6818      	ldr	r0, [r3, #0]
 800a7fc:	f3bf 8f5b 	dmb	ish
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	20002430 	.word	0x20002430

0800a808 <_ZdlPv>:
 800a808:	f001 b862 	b.w	800b8d0 <free>

0800a80c <pow>:
 800a80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a810:	b08f      	sub	sp, #60	; 0x3c
 800a812:	461d      	mov	r5, r3
 800a814:	4680      	mov	r8, r0
 800a816:	4689      	mov	r9, r1
 800a818:	4614      	mov	r4, r2
 800a81a:	f000 f955 	bl	800aac8 <__ieee754_pow>
 800a81e:	4fa1      	ldr	r7, [pc, #644]	; (800aaa4 <pow+0x298>)
 800a820:	e9cd 0100 	strd	r0, r1, [sp]
 800a824:	f997 3000 	ldrsb.w	r3, [r7]
 800a828:	463e      	mov	r6, r7
 800a82a:	9302      	str	r3, [sp, #8]
 800a82c:	3301      	adds	r3, #1
 800a82e:	d05f      	beq.n	800a8f0 <pow+0xe4>
 800a830:	4622      	mov	r2, r4
 800a832:	462b      	mov	r3, r5
 800a834:	4620      	mov	r0, r4
 800a836:	4629      	mov	r1, r5
 800a838:	f7f6 f8e0 	bl	80009fc <__aeabi_dcmpun>
 800a83c:	4682      	mov	sl, r0
 800a83e:	2800      	cmp	r0, #0
 800a840:	d156      	bne.n	800a8f0 <pow+0xe4>
 800a842:	4642      	mov	r2, r8
 800a844:	464b      	mov	r3, r9
 800a846:	4640      	mov	r0, r8
 800a848:	4649      	mov	r1, r9
 800a84a:	f7f6 f8d7 	bl	80009fc <__aeabi_dcmpun>
 800a84e:	9003      	str	r0, [sp, #12]
 800a850:	b1e8      	cbz	r0, 800a88e <pow+0x82>
 800a852:	2200      	movs	r2, #0
 800a854:	2300      	movs	r3, #0
 800a856:	4620      	mov	r0, r4
 800a858:	4629      	mov	r1, r5
 800a85a:	f7f6 f89d 	bl	8000998 <__aeabi_dcmpeq>
 800a85e:	2800      	cmp	r0, #0
 800a860:	d046      	beq.n	800a8f0 <pow+0xe4>
 800a862:	2301      	movs	r3, #1
 800a864:	2200      	movs	r2, #0
 800a866:	9304      	str	r3, [sp, #16]
 800a868:	4b8f      	ldr	r3, [pc, #572]	; (800aaa8 <pow+0x29c>)
 800a86a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800a86e:	9305      	str	r3, [sp, #20]
 800a870:	4b8e      	ldr	r3, [pc, #568]	; (800aaac <pow+0x2a0>)
 800a872:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a876:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a87a:	9b02      	ldr	r3, [sp, #8]
 800a87c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a880:	2b02      	cmp	r3, #2
 800a882:	d031      	beq.n	800a8e8 <pow+0xdc>
 800a884:	a804      	add	r0, sp, #16
 800a886:	f000 fedf 	bl	800b648 <matherr>
 800a88a:	bb38      	cbnz	r0, 800a8dc <pow+0xd0>
 800a88c:	e058      	b.n	800a940 <pow+0x134>
 800a88e:	f04f 0a00 	mov.w	sl, #0
 800a892:	f04f 0b00 	mov.w	fp, #0
 800a896:	4652      	mov	r2, sl
 800a898:	465b      	mov	r3, fp
 800a89a:	4640      	mov	r0, r8
 800a89c:	4649      	mov	r1, r9
 800a89e:	f7f6 f87b 	bl	8000998 <__aeabi_dcmpeq>
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	d051      	beq.n	800a94a <pow+0x13e>
 800a8a6:	4652      	mov	r2, sl
 800a8a8:	465b      	mov	r3, fp
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	4629      	mov	r1, r5
 800a8ae:	f7f6 f873 	bl	8000998 <__aeabi_dcmpeq>
 800a8b2:	4606      	mov	r6, r0
 800a8b4:	b308      	cbz	r0, 800a8fa <pow+0xee>
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	9304      	str	r3, [sp, #16]
 800a8ba:	4b7b      	ldr	r3, [pc, #492]	; (800aaa8 <pow+0x29c>)
 800a8bc:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a8c0:	9305      	str	r3, [sp, #20]
 800a8c2:	9b03      	ldr	r3, [sp, #12]
 800a8c4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a8c8:	930c      	str	r3, [sp, #48]	; 0x30
 800a8ca:	9b02      	ldr	r3, [sp, #8]
 800a8cc:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d0d7      	beq.n	800a884 <pow+0x78>
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	4b75      	ldr	r3, [pc, #468]	; (800aaac <pow+0x2a0>)
 800a8d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a8dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8de:	b11b      	cbz	r3, 800a8e8 <pow+0xdc>
 800a8e0:	f000 ffc4 	bl	800b86c <__errno>
 800a8e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8e6:	6003      	str	r3, [r0, #0]
 800a8e8:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800a8ec:	e9cd 3400 	strd	r3, r4, [sp]
 800a8f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8f4:	b00f      	add	sp, #60	; 0x3c
 800a8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	4629      	mov	r1, r5
 800a8fe:	f000 fe9d 	bl	800b63c <finite>
 800a902:	2800      	cmp	r0, #0
 800a904:	d0f4      	beq.n	800a8f0 <pow+0xe4>
 800a906:	4652      	mov	r2, sl
 800a908:	465b      	mov	r3, fp
 800a90a:	4620      	mov	r0, r4
 800a90c:	4629      	mov	r1, r5
 800a90e:	f7f6 f84d 	bl	80009ac <__aeabi_dcmplt>
 800a912:	2800      	cmp	r0, #0
 800a914:	d0ec      	beq.n	800a8f0 <pow+0xe4>
 800a916:	2301      	movs	r3, #1
 800a918:	9304      	str	r3, [sp, #16]
 800a91a:	4b63      	ldr	r3, [pc, #396]	; (800aaa8 <pow+0x29c>)
 800a91c:	960c      	str	r6, [sp, #48]	; 0x30
 800a91e:	9305      	str	r3, [sp, #20]
 800a920:	f997 3000 	ldrsb.w	r3, [r7]
 800a924:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a928:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a92c:	b913      	cbnz	r3, 800a934 <pow+0x128>
 800a92e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a932:	e7a7      	b.n	800a884 <pow+0x78>
 800a934:	2000      	movs	r0, #0
 800a936:	495e      	ldr	r1, [pc, #376]	; (800aab0 <pow+0x2a4>)
 800a938:	2b02      	cmp	r3, #2
 800a93a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a93e:	d1a1      	bne.n	800a884 <pow+0x78>
 800a940:	f000 ff94 	bl	800b86c <__errno>
 800a944:	2321      	movs	r3, #33	; 0x21
 800a946:	6003      	str	r3, [r0, #0]
 800a948:	e7c8      	b.n	800a8dc <pow+0xd0>
 800a94a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a94e:	f000 fe75 	bl	800b63c <finite>
 800a952:	9002      	str	r0, [sp, #8]
 800a954:	2800      	cmp	r0, #0
 800a956:	d177      	bne.n	800aa48 <pow+0x23c>
 800a958:	4640      	mov	r0, r8
 800a95a:	4649      	mov	r1, r9
 800a95c:	f000 fe6e 	bl	800b63c <finite>
 800a960:	2800      	cmp	r0, #0
 800a962:	d071      	beq.n	800aa48 <pow+0x23c>
 800a964:	4620      	mov	r0, r4
 800a966:	4629      	mov	r1, r5
 800a968:	f000 fe68 	bl	800b63c <finite>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	d06b      	beq.n	800aa48 <pow+0x23c>
 800a970:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a974:	4619      	mov	r1, r3
 800a976:	4610      	mov	r0, r2
 800a978:	f7f6 f840 	bl	80009fc <__aeabi_dcmpun>
 800a97c:	f997 7000 	ldrsb.w	r7, [r7]
 800a980:	4b49      	ldr	r3, [pc, #292]	; (800aaa8 <pow+0x29c>)
 800a982:	b1a0      	cbz	r0, 800a9ae <pow+0x1a2>
 800a984:	2201      	movs	r2, #1
 800a986:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a98a:	9b02      	ldr	r3, [sp, #8]
 800a98c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a990:	930c      	str	r3, [sp, #48]	; 0x30
 800a992:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a996:	2f00      	cmp	r7, #0
 800a998:	d0c9      	beq.n	800a92e <pow+0x122>
 800a99a:	4652      	mov	r2, sl
 800a99c:	465b      	mov	r3, fp
 800a99e:	4650      	mov	r0, sl
 800a9a0:	4659      	mov	r1, fp
 800a9a2:	f7f5 febb 	bl	800071c <__aeabi_ddiv>
 800a9a6:	2f02      	cmp	r7, #2
 800a9a8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a9ac:	e7c7      	b.n	800a93e <pow+0x132>
 800a9ae:	2203      	movs	r2, #3
 800a9b0:	900c      	str	r0, [sp, #48]	; 0x30
 800a9b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	4629      	mov	r1, r5
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	4b3d      	ldr	r3, [pc, #244]	; (800aab4 <pow+0x2a8>)
 800a9be:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a9c2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a9c6:	f7f5 fd7f 	bl	80004c8 <__aeabi_dmul>
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	460d      	mov	r5, r1
 800a9ce:	bb17      	cbnz	r7, 800aa16 <pow+0x20a>
 800a9d0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a9d4:	4b38      	ldr	r3, [pc, #224]	; (800aab8 <pow+0x2ac>)
 800a9d6:	4640      	mov	r0, r8
 800a9d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a9dc:	4649      	mov	r1, r9
 800a9de:	4652      	mov	r2, sl
 800a9e0:	465b      	mov	r3, fp
 800a9e2:	f7f5 ffe3 	bl	80009ac <__aeabi_dcmplt>
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	d054      	beq.n	800aa94 <pow+0x288>
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	4629      	mov	r1, r5
 800a9ee:	f000 fe33 	bl	800b658 <rint>
 800a9f2:	4622      	mov	r2, r4
 800a9f4:	462b      	mov	r3, r5
 800a9f6:	f7f5 ffcf 	bl	8000998 <__aeabi_dcmpeq>
 800a9fa:	b920      	cbnz	r0, 800aa06 <pow+0x1fa>
 800a9fc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800aa00:	4b2e      	ldr	r3, [pc, #184]	; (800aabc <pow+0x2b0>)
 800aa02:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800aa06:	f996 3000 	ldrsb.w	r3, [r6]
 800aa0a:	2b02      	cmp	r3, #2
 800aa0c:	d142      	bne.n	800aa94 <pow+0x288>
 800aa0e:	f000 ff2d 	bl	800b86c <__errno>
 800aa12:	2322      	movs	r3, #34	; 0x22
 800aa14:	e797      	b.n	800a946 <pow+0x13a>
 800aa16:	2200      	movs	r2, #0
 800aa18:	4b29      	ldr	r3, [pc, #164]	; (800aac0 <pow+0x2b4>)
 800aa1a:	4640      	mov	r0, r8
 800aa1c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800aa20:	4649      	mov	r1, r9
 800aa22:	4652      	mov	r2, sl
 800aa24:	465b      	mov	r3, fp
 800aa26:	f7f5 ffc1 	bl	80009ac <__aeabi_dcmplt>
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	d0eb      	beq.n	800aa06 <pow+0x1fa>
 800aa2e:	4620      	mov	r0, r4
 800aa30:	4629      	mov	r1, r5
 800aa32:	f000 fe11 	bl	800b658 <rint>
 800aa36:	4622      	mov	r2, r4
 800aa38:	462b      	mov	r3, r5
 800aa3a:	f7f5 ffad 	bl	8000998 <__aeabi_dcmpeq>
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	d1e1      	bne.n	800aa06 <pow+0x1fa>
 800aa42:	2200      	movs	r2, #0
 800aa44:	4b1a      	ldr	r3, [pc, #104]	; (800aab0 <pow+0x2a4>)
 800aa46:	e7dc      	b.n	800aa02 <pow+0x1f6>
 800aa48:	2200      	movs	r2, #0
 800aa4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa4e:	2300      	movs	r3, #0
 800aa50:	f7f5 ffa2 	bl	8000998 <__aeabi_dcmpeq>
 800aa54:	2800      	cmp	r0, #0
 800aa56:	f43f af4b 	beq.w	800a8f0 <pow+0xe4>
 800aa5a:	4640      	mov	r0, r8
 800aa5c:	4649      	mov	r1, r9
 800aa5e:	f000 fded 	bl	800b63c <finite>
 800aa62:	2800      	cmp	r0, #0
 800aa64:	f43f af44 	beq.w	800a8f0 <pow+0xe4>
 800aa68:	4620      	mov	r0, r4
 800aa6a:	4629      	mov	r1, r5
 800aa6c:	f000 fde6 	bl	800b63c <finite>
 800aa70:	2800      	cmp	r0, #0
 800aa72:	f43f af3d 	beq.w	800a8f0 <pow+0xe4>
 800aa76:	2304      	movs	r3, #4
 800aa78:	9304      	str	r3, [sp, #16]
 800aa7a:	4b0b      	ldr	r3, [pc, #44]	; (800aaa8 <pow+0x29c>)
 800aa7c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800aa80:	9305      	str	r3, [sp, #20]
 800aa82:	2300      	movs	r3, #0
 800aa84:	2400      	movs	r4, #0
 800aa86:	930c      	str	r3, [sp, #48]	; 0x30
 800aa88:	2300      	movs	r3, #0
 800aa8a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800aa8e:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800aa92:	e7b8      	b.n	800aa06 <pow+0x1fa>
 800aa94:	a804      	add	r0, sp, #16
 800aa96:	f000 fdd7 	bl	800b648 <matherr>
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	f47f af1e 	bne.w	800a8dc <pow+0xd0>
 800aaa0:	e7b5      	b.n	800aa0e <pow+0x202>
 800aaa2:	bf00      	nop
 800aaa4:	20000068 	.word	0x20000068
 800aaa8:	0800bbec 	.word	0x0800bbec
 800aaac:	3ff00000 	.word	0x3ff00000
 800aab0:	fff00000 	.word	0xfff00000
 800aab4:	3fe00000 	.word	0x3fe00000
 800aab8:	47efffff 	.word	0x47efffff
 800aabc:	c7efffff 	.word	0xc7efffff
 800aac0:	7ff00000 	.word	0x7ff00000
 800aac4:	00000000 	.word	0x00000000

0800aac8 <__ieee754_pow>:
 800aac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aacc:	b091      	sub	sp, #68	; 0x44
 800aace:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aad2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800aad6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800aada:	ea55 0302 	orrs.w	r3, r5, r2
 800aade:	4607      	mov	r7, r0
 800aae0:	4688      	mov	r8, r1
 800aae2:	f000 84b7 	beq.w	800b454 <__ieee754_pow+0x98c>
 800aae6:	4b80      	ldr	r3, [pc, #512]	; (800ace8 <__ieee754_pow+0x220>)
 800aae8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800aaec:	429c      	cmp	r4, r3
 800aaee:	4689      	mov	r9, r1
 800aaf0:	4682      	mov	sl, r0
 800aaf2:	dc09      	bgt.n	800ab08 <__ieee754_pow+0x40>
 800aaf4:	d103      	bne.n	800aafe <__ieee754_pow+0x36>
 800aaf6:	b938      	cbnz	r0, 800ab08 <__ieee754_pow+0x40>
 800aaf8:	42a5      	cmp	r5, r4
 800aafa:	dc0d      	bgt.n	800ab18 <__ieee754_pow+0x50>
 800aafc:	e001      	b.n	800ab02 <__ieee754_pow+0x3a>
 800aafe:	429d      	cmp	r5, r3
 800ab00:	dc02      	bgt.n	800ab08 <__ieee754_pow+0x40>
 800ab02:	429d      	cmp	r5, r3
 800ab04:	d10e      	bne.n	800ab24 <__ieee754_pow+0x5c>
 800ab06:	b16a      	cbz	r2, 800ab24 <__ieee754_pow+0x5c>
 800ab08:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ab0c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ab10:	ea54 030a 	orrs.w	r3, r4, sl
 800ab14:	f000 849e 	beq.w	800b454 <__ieee754_pow+0x98c>
 800ab18:	4874      	ldr	r0, [pc, #464]	; (800acec <__ieee754_pow+0x224>)
 800ab1a:	b011      	add	sp, #68	; 0x44
 800ab1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab20:	f000 bd94 	b.w	800b64c <nan>
 800ab24:	f1b9 0f00 	cmp.w	r9, #0
 800ab28:	da53      	bge.n	800abd2 <__ieee754_pow+0x10a>
 800ab2a:	4b71      	ldr	r3, [pc, #452]	; (800acf0 <__ieee754_pow+0x228>)
 800ab2c:	429d      	cmp	r5, r3
 800ab2e:	dc4e      	bgt.n	800abce <__ieee754_pow+0x106>
 800ab30:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ab34:	429d      	cmp	r5, r3
 800ab36:	dd4c      	ble.n	800abd2 <__ieee754_pow+0x10a>
 800ab38:	152b      	asrs	r3, r5, #20
 800ab3a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ab3e:	2b14      	cmp	r3, #20
 800ab40:	dd28      	ble.n	800ab94 <__ieee754_pow+0xcc>
 800ab42:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ab46:	fa22 f103 	lsr.w	r1, r2, r3
 800ab4a:	fa01 f303 	lsl.w	r3, r1, r3
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d13f      	bne.n	800abd2 <__ieee754_pow+0x10a>
 800ab52:	f001 0101 	and.w	r1, r1, #1
 800ab56:	f1c1 0302 	rsb	r3, r1, #2
 800ab5a:	9300      	str	r3, [sp, #0]
 800ab5c:	2a00      	cmp	r2, #0
 800ab5e:	d15c      	bne.n	800ac1a <__ieee754_pow+0x152>
 800ab60:	4b61      	ldr	r3, [pc, #388]	; (800ace8 <__ieee754_pow+0x220>)
 800ab62:	429d      	cmp	r5, r3
 800ab64:	d126      	bne.n	800abb4 <__ieee754_pow+0xec>
 800ab66:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ab6a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ab6e:	ea53 030a 	orrs.w	r3, r3, sl
 800ab72:	f000 846f 	beq.w	800b454 <__ieee754_pow+0x98c>
 800ab76:	4b5f      	ldr	r3, [pc, #380]	; (800acf4 <__ieee754_pow+0x22c>)
 800ab78:	429c      	cmp	r4, r3
 800ab7a:	dd2c      	ble.n	800abd6 <__ieee754_pow+0x10e>
 800ab7c:	2e00      	cmp	r6, #0
 800ab7e:	f280 846f 	bge.w	800b460 <__ieee754_pow+0x998>
 800ab82:	f04f 0b00 	mov.w	fp, #0
 800ab86:	f04f 0c00 	mov.w	ip, #0
 800ab8a:	4658      	mov	r0, fp
 800ab8c:	4661      	mov	r1, ip
 800ab8e:	b011      	add	sp, #68	; 0x44
 800ab90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab94:	2a00      	cmp	r2, #0
 800ab96:	d13e      	bne.n	800ac16 <__ieee754_pow+0x14e>
 800ab98:	f1c3 0314 	rsb	r3, r3, #20
 800ab9c:	fa45 f103 	asr.w	r1, r5, r3
 800aba0:	fa01 f303 	lsl.w	r3, r1, r3
 800aba4:	42ab      	cmp	r3, r5
 800aba6:	f040 8463 	bne.w	800b470 <__ieee754_pow+0x9a8>
 800abaa:	f001 0101 	and.w	r1, r1, #1
 800abae:	f1c1 0302 	rsb	r3, r1, #2
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	4b50      	ldr	r3, [pc, #320]	; (800acf8 <__ieee754_pow+0x230>)
 800abb6:	429d      	cmp	r5, r3
 800abb8:	d114      	bne.n	800abe4 <__ieee754_pow+0x11c>
 800abba:	2e00      	cmp	r6, #0
 800abbc:	f280 8454 	bge.w	800b468 <__ieee754_pow+0x9a0>
 800abc0:	463a      	mov	r2, r7
 800abc2:	4643      	mov	r3, r8
 800abc4:	2000      	movs	r0, #0
 800abc6:	494c      	ldr	r1, [pc, #304]	; (800acf8 <__ieee754_pow+0x230>)
 800abc8:	f7f5 fda8 	bl	800071c <__aeabi_ddiv>
 800abcc:	e013      	b.n	800abf6 <__ieee754_pow+0x12e>
 800abce:	2302      	movs	r3, #2
 800abd0:	e7c3      	b.n	800ab5a <__ieee754_pow+0x92>
 800abd2:	2300      	movs	r3, #0
 800abd4:	e7c1      	b.n	800ab5a <__ieee754_pow+0x92>
 800abd6:	2e00      	cmp	r6, #0
 800abd8:	dad3      	bge.n	800ab82 <__ieee754_pow+0xba>
 800abda:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800abde:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800abe2:	e7d2      	b.n	800ab8a <__ieee754_pow+0xc2>
 800abe4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800abe8:	d108      	bne.n	800abfc <__ieee754_pow+0x134>
 800abea:	463a      	mov	r2, r7
 800abec:	4643      	mov	r3, r8
 800abee:	4638      	mov	r0, r7
 800abf0:	4641      	mov	r1, r8
 800abf2:	f7f5 fc69 	bl	80004c8 <__aeabi_dmul>
 800abf6:	4683      	mov	fp, r0
 800abf8:	468c      	mov	ip, r1
 800abfa:	e7c6      	b.n	800ab8a <__ieee754_pow+0xc2>
 800abfc:	4b3f      	ldr	r3, [pc, #252]	; (800acfc <__ieee754_pow+0x234>)
 800abfe:	429e      	cmp	r6, r3
 800ac00:	d10b      	bne.n	800ac1a <__ieee754_pow+0x152>
 800ac02:	f1b9 0f00 	cmp.w	r9, #0
 800ac06:	db08      	blt.n	800ac1a <__ieee754_pow+0x152>
 800ac08:	4638      	mov	r0, r7
 800ac0a:	4641      	mov	r1, r8
 800ac0c:	b011      	add	sp, #68	; 0x44
 800ac0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac12:	f000 bc63 	b.w	800b4dc <__ieee754_sqrt>
 800ac16:	2300      	movs	r3, #0
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	4638      	mov	r0, r7
 800ac1c:	4641      	mov	r1, r8
 800ac1e:	f000 fd09 	bl	800b634 <fabs>
 800ac22:	4683      	mov	fp, r0
 800ac24:	468c      	mov	ip, r1
 800ac26:	f1ba 0f00 	cmp.w	sl, #0
 800ac2a:	d12b      	bne.n	800ac84 <__ieee754_pow+0x1bc>
 800ac2c:	b124      	cbz	r4, 800ac38 <__ieee754_pow+0x170>
 800ac2e:	4b32      	ldr	r3, [pc, #200]	; (800acf8 <__ieee754_pow+0x230>)
 800ac30:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d125      	bne.n	800ac84 <__ieee754_pow+0x1bc>
 800ac38:	2e00      	cmp	r6, #0
 800ac3a:	da07      	bge.n	800ac4c <__ieee754_pow+0x184>
 800ac3c:	465a      	mov	r2, fp
 800ac3e:	4663      	mov	r3, ip
 800ac40:	2000      	movs	r0, #0
 800ac42:	492d      	ldr	r1, [pc, #180]	; (800acf8 <__ieee754_pow+0x230>)
 800ac44:	f7f5 fd6a 	bl	800071c <__aeabi_ddiv>
 800ac48:	4683      	mov	fp, r0
 800ac4a:	468c      	mov	ip, r1
 800ac4c:	f1b9 0f00 	cmp.w	r9, #0
 800ac50:	da9b      	bge.n	800ab8a <__ieee754_pow+0xc2>
 800ac52:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ac56:	9b00      	ldr	r3, [sp, #0]
 800ac58:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ac5c:	4323      	orrs	r3, r4
 800ac5e:	d108      	bne.n	800ac72 <__ieee754_pow+0x1aa>
 800ac60:	465a      	mov	r2, fp
 800ac62:	4663      	mov	r3, ip
 800ac64:	4658      	mov	r0, fp
 800ac66:	4661      	mov	r1, ip
 800ac68:	f7f5 fa76 	bl	8000158 <__aeabi_dsub>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	460b      	mov	r3, r1
 800ac70:	e7aa      	b.n	800abc8 <__ieee754_pow+0x100>
 800ac72:	9b00      	ldr	r3, [sp, #0]
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d188      	bne.n	800ab8a <__ieee754_pow+0xc2>
 800ac78:	4658      	mov	r0, fp
 800ac7a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800ac7e:	4683      	mov	fp, r0
 800ac80:	469c      	mov	ip, r3
 800ac82:	e782      	b.n	800ab8a <__ieee754_pow+0xc2>
 800ac84:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 800ac88:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800ac8c:	930d      	str	r3, [sp, #52]	; 0x34
 800ac8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac90:	9b00      	ldr	r3, [sp, #0]
 800ac92:	4313      	orrs	r3, r2
 800ac94:	d104      	bne.n	800aca0 <__ieee754_pow+0x1d8>
 800ac96:	463a      	mov	r2, r7
 800ac98:	4643      	mov	r3, r8
 800ac9a:	4638      	mov	r0, r7
 800ac9c:	4641      	mov	r1, r8
 800ac9e:	e7e3      	b.n	800ac68 <__ieee754_pow+0x1a0>
 800aca0:	4b17      	ldr	r3, [pc, #92]	; (800ad00 <__ieee754_pow+0x238>)
 800aca2:	429d      	cmp	r5, r3
 800aca4:	f340 80fe 	ble.w	800aea4 <__ieee754_pow+0x3dc>
 800aca8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800acac:	429d      	cmp	r5, r3
 800acae:	dd0b      	ble.n	800acc8 <__ieee754_pow+0x200>
 800acb0:	4b10      	ldr	r3, [pc, #64]	; (800acf4 <__ieee754_pow+0x22c>)
 800acb2:	429c      	cmp	r4, r3
 800acb4:	dc0e      	bgt.n	800acd4 <__ieee754_pow+0x20c>
 800acb6:	2e00      	cmp	r6, #0
 800acb8:	f6bf af63 	bge.w	800ab82 <__ieee754_pow+0xba>
 800acbc:	a308      	add	r3, pc, #32	; (adr r3, 800ace0 <__ieee754_pow+0x218>)
 800acbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc2:	4610      	mov	r0, r2
 800acc4:	4619      	mov	r1, r3
 800acc6:	e794      	b.n	800abf2 <__ieee754_pow+0x12a>
 800acc8:	4b0e      	ldr	r3, [pc, #56]	; (800ad04 <__ieee754_pow+0x23c>)
 800acca:	429c      	cmp	r4, r3
 800accc:	ddf3      	ble.n	800acb6 <__ieee754_pow+0x1ee>
 800acce:	4b0a      	ldr	r3, [pc, #40]	; (800acf8 <__ieee754_pow+0x230>)
 800acd0:	429c      	cmp	r4, r3
 800acd2:	dd19      	ble.n	800ad08 <__ieee754_pow+0x240>
 800acd4:	2e00      	cmp	r6, #0
 800acd6:	dcf1      	bgt.n	800acbc <__ieee754_pow+0x1f4>
 800acd8:	e753      	b.n	800ab82 <__ieee754_pow+0xba>
 800acda:	bf00      	nop
 800acdc:	f3af 8000 	nop.w
 800ace0:	8800759c 	.word	0x8800759c
 800ace4:	7e37e43c 	.word	0x7e37e43c
 800ace8:	7ff00000 	.word	0x7ff00000
 800acec:	0800bbef 	.word	0x0800bbef
 800acf0:	433fffff 	.word	0x433fffff
 800acf4:	3fefffff 	.word	0x3fefffff
 800acf8:	3ff00000 	.word	0x3ff00000
 800acfc:	3fe00000 	.word	0x3fe00000
 800ad00:	41e00000 	.word	0x41e00000
 800ad04:	3feffffe 	.word	0x3feffffe
 800ad08:	4661      	mov	r1, ip
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	4b60      	ldr	r3, [pc, #384]	; (800ae90 <__ieee754_pow+0x3c8>)
 800ad0e:	4658      	mov	r0, fp
 800ad10:	f7f5 fa22 	bl	8000158 <__aeabi_dsub>
 800ad14:	a354      	add	r3, pc, #336	; (adr r3, 800ae68 <__ieee754_pow+0x3a0>)
 800ad16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	460d      	mov	r5, r1
 800ad1e:	f7f5 fbd3 	bl	80004c8 <__aeabi_dmul>
 800ad22:	a353      	add	r3, pc, #332	; (adr r3, 800ae70 <__ieee754_pow+0x3a8>)
 800ad24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad28:	4606      	mov	r6, r0
 800ad2a:	460f      	mov	r7, r1
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	4629      	mov	r1, r5
 800ad30:	f7f5 fbca 	bl	80004c8 <__aeabi_dmul>
 800ad34:	2200      	movs	r2, #0
 800ad36:	4682      	mov	sl, r0
 800ad38:	468b      	mov	fp, r1
 800ad3a:	4b56      	ldr	r3, [pc, #344]	; (800ae94 <__ieee754_pow+0x3cc>)
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	4629      	mov	r1, r5
 800ad40:	f7f5 fbc2 	bl	80004c8 <__aeabi_dmul>
 800ad44:	4602      	mov	r2, r0
 800ad46:	460b      	mov	r3, r1
 800ad48:	a14b      	add	r1, pc, #300	; (adr r1, 800ae78 <__ieee754_pow+0x3b0>)
 800ad4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad4e:	f7f5 fa03 	bl	8000158 <__aeabi_dsub>
 800ad52:	4622      	mov	r2, r4
 800ad54:	462b      	mov	r3, r5
 800ad56:	f7f5 fbb7 	bl	80004c8 <__aeabi_dmul>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	2000      	movs	r0, #0
 800ad60:	494d      	ldr	r1, [pc, #308]	; (800ae98 <__ieee754_pow+0x3d0>)
 800ad62:	f7f5 f9f9 	bl	8000158 <__aeabi_dsub>
 800ad66:	4622      	mov	r2, r4
 800ad68:	462b      	mov	r3, r5
 800ad6a:	4680      	mov	r8, r0
 800ad6c:	4689      	mov	r9, r1
 800ad6e:	4620      	mov	r0, r4
 800ad70:	4629      	mov	r1, r5
 800ad72:	f7f5 fba9 	bl	80004c8 <__aeabi_dmul>
 800ad76:	4602      	mov	r2, r0
 800ad78:	460b      	mov	r3, r1
 800ad7a:	4640      	mov	r0, r8
 800ad7c:	4649      	mov	r1, r9
 800ad7e:	f7f5 fba3 	bl	80004c8 <__aeabi_dmul>
 800ad82:	a33f      	add	r3, pc, #252	; (adr r3, 800ae80 <__ieee754_pow+0x3b8>)
 800ad84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad88:	f7f5 fb9e 	bl	80004c8 <__aeabi_dmul>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	460b      	mov	r3, r1
 800ad90:	4650      	mov	r0, sl
 800ad92:	4659      	mov	r1, fp
 800ad94:	f7f5 f9e0 	bl	8000158 <__aeabi_dsub>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	4604      	mov	r4, r0
 800ad9e:	460d      	mov	r5, r1
 800ada0:	4630      	mov	r0, r6
 800ada2:	4639      	mov	r1, r7
 800ada4:	f7f5 f9da 	bl	800015c <__adddf3>
 800ada8:	2000      	movs	r0, #0
 800adaa:	468b      	mov	fp, r1
 800adac:	4682      	mov	sl, r0
 800adae:	4632      	mov	r2, r6
 800adb0:	463b      	mov	r3, r7
 800adb2:	f7f5 f9d1 	bl	8000158 <__aeabi_dsub>
 800adb6:	4602      	mov	r2, r0
 800adb8:	460b      	mov	r3, r1
 800adba:	4620      	mov	r0, r4
 800adbc:	4629      	mov	r1, r5
 800adbe:	f7f5 f9cb 	bl	8000158 <__aeabi_dsub>
 800adc2:	9b00      	ldr	r3, [sp, #0]
 800adc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adc6:	3b01      	subs	r3, #1
 800adc8:	4313      	orrs	r3, r2
 800adca:	f04f 0300 	mov.w	r3, #0
 800adce:	bf0c      	ite	eq
 800add0:	4c32      	ldreq	r4, [pc, #200]	; (800ae9c <__ieee754_pow+0x3d4>)
 800add2:	4c2f      	ldrne	r4, [pc, #188]	; (800ae90 <__ieee754_pow+0x3c8>)
 800add4:	4606      	mov	r6, r0
 800add6:	e9cd 3400 	strd	r3, r4, [sp]
 800adda:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800adde:	2400      	movs	r4, #0
 800ade0:	460f      	mov	r7, r1
 800ade2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ade6:	4622      	mov	r2, r4
 800ade8:	462b      	mov	r3, r5
 800adea:	f7f5 f9b5 	bl	8000158 <__aeabi_dsub>
 800adee:	4652      	mov	r2, sl
 800adf0:	465b      	mov	r3, fp
 800adf2:	f7f5 fb69 	bl	80004c8 <__aeabi_dmul>
 800adf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800adfa:	4680      	mov	r8, r0
 800adfc:	4689      	mov	r9, r1
 800adfe:	4630      	mov	r0, r6
 800ae00:	4639      	mov	r1, r7
 800ae02:	f7f5 fb61 	bl	80004c8 <__aeabi_dmul>
 800ae06:	4602      	mov	r2, r0
 800ae08:	460b      	mov	r3, r1
 800ae0a:	4640      	mov	r0, r8
 800ae0c:	4649      	mov	r1, r9
 800ae0e:	f7f5 f9a5 	bl	800015c <__adddf3>
 800ae12:	4622      	mov	r2, r4
 800ae14:	462b      	mov	r3, r5
 800ae16:	4680      	mov	r8, r0
 800ae18:	4689      	mov	r9, r1
 800ae1a:	4650      	mov	r0, sl
 800ae1c:	4659      	mov	r1, fp
 800ae1e:	f7f5 fb53 	bl	80004c8 <__aeabi_dmul>
 800ae22:	4604      	mov	r4, r0
 800ae24:	460d      	mov	r5, r1
 800ae26:	460b      	mov	r3, r1
 800ae28:	4602      	mov	r2, r0
 800ae2a:	4649      	mov	r1, r9
 800ae2c:	4640      	mov	r0, r8
 800ae2e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ae32:	f7f5 f993 	bl	800015c <__adddf3>
 800ae36:	4b1a      	ldr	r3, [pc, #104]	; (800aea0 <__ieee754_pow+0x3d8>)
 800ae38:	4682      	mov	sl, r0
 800ae3a:	4299      	cmp	r1, r3
 800ae3c:	460f      	mov	r7, r1
 800ae3e:	460e      	mov	r6, r1
 800ae40:	f340 82e1 	ble.w	800b406 <__ieee754_pow+0x93e>
 800ae44:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ae48:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ae4c:	4303      	orrs	r3, r0
 800ae4e:	f000 81db 	beq.w	800b208 <__ieee754_pow+0x740>
 800ae52:	a30d      	add	r3, pc, #52	; (adr r3, 800ae88 <__ieee754_pow+0x3c0>)
 800ae54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae58:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae5c:	f7f5 fb34 	bl	80004c8 <__aeabi_dmul>
 800ae60:	a309      	add	r3, pc, #36	; (adr r3, 800ae88 <__ieee754_pow+0x3c0>)
 800ae62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae66:	e6c4      	b.n	800abf2 <__ieee754_pow+0x12a>
 800ae68:	60000000 	.word	0x60000000
 800ae6c:	3ff71547 	.word	0x3ff71547
 800ae70:	f85ddf44 	.word	0xf85ddf44
 800ae74:	3e54ae0b 	.word	0x3e54ae0b
 800ae78:	55555555 	.word	0x55555555
 800ae7c:	3fd55555 	.word	0x3fd55555
 800ae80:	652b82fe 	.word	0x652b82fe
 800ae84:	3ff71547 	.word	0x3ff71547
 800ae88:	8800759c 	.word	0x8800759c
 800ae8c:	7e37e43c 	.word	0x7e37e43c
 800ae90:	3ff00000 	.word	0x3ff00000
 800ae94:	3fd00000 	.word	0x3fd00000
 800ae98:	3fe00000 	.word	0x3fe00000
 800ae9c:	bff00000 	.word	0xbff00000
 800aea0:	408fffff 	.word	0x408fffff
 800aea4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800aea8:	f04f 0200 	mov.w	r2, #0
 800aeac:	da08      	bge.n	800aec0 <__ieee754_pow+0x3f8>
 800aeae:	4658      	mov	r0, fp
 800aeb0:	4bcd      	ldr	r3, [pc, #820]	; (800b1e8 <__ieee754_pow+0x720>)
 800aeb2:	4661      	mov	r1, ip
 800aeb4:	f7f5 fb08 	bl	80004c8 <__aeabi_dmul>
 800aeb8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800aebc:	4683      	mov	fp, r0
 800aebe:	460c      	mov	r4, r1
 800aec0:	1523      	asrs	r3, r4, #20
 800aec2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aec6:	4413      	add	r3, r2
 800aec8:	930c      	str	r3, [sp, #48]	; 0x30
 800aeca:	4bc8      	ldr	r3, [pc, #800]	; (800b1ec <__ieee754_pow+0x724>)
 800aecc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800aed0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800aed4:	429c      	cmp	r4, r3
 800aed6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aeda:	dd08      	ble.n	800aeee <__ieee754_pow+0x426>
 800aedc:	4bc4      	ldr	r3, [pc, #784]	; (800b1f0 <__ieee754_pow+0x728>)
 800aede:	429c      	cmp	r4, r3
 800aee0:	f340 815b 	ble.w	800b19a <__ieee754_pow+0x6d2>
 800aee4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aee6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800aeea:	3301      	adds	r3, #1
 800aeec:	930c      	str	r3, [sp, #48]	; 0x30
 800aeee:	f04f 0800 	mov.w	r8, #0
 800aef2:	4658      	mov	r0, fp
 800aef4:	4629      	mov	r1, r5
 800aef6:	4bbf      	ldr	r3, [pc, #764]	; (800b1f4 <__ieee754_pow+0x72c>)
 800aef8:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800aefc:	444b      	add	r3, r9
 800aefe:	e9d3 3400 	ldrd	r3, r4, [r3]
 800af02:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800af06:	461a      	mov	r2, r3
 800af08:	4623      	mov	r3, r4
 800af0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800af0e:	f7f5 f923 	bl	8000158 <__aeabi_dsub>
 800af12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800af16:	4606      	mov	r6, r0
 800af18:	460f      	mov	r7, r1
 800af1a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800af1e:	f7f5 f91d 	bl	800015c <__adddf3>
 800af22:	4602      	mov	r2, r0
 800af24:	460b      	mov	r3, r1
 800af26:	2000      	movs	r0, #0
 800af28:	49b3      	ldr	r1, [pc, #716]	; (800b1f8 <__ieee754_pow+0x730>)
 800af2a:	f7f5 fbf7 	bl	800071c <__aeabi_ddiv>
 800af2e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800af32:	4602      	mov	r2, r0
 800af34:	460b      	mov	r3, r1
 800af36:	4630      	mov	r0, r6
 800af38:	4639      	mov	r1, r7
 800af3a:	f7f5 fac5 	bl	80004c8 <__aeabi_dmul>
 800af3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800af42:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800af46:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800af4a:	2300      	movs	r3, #0
 800af4c:	2200      	movs	r2, #0
 800af4e:	106d      	asrs	r5, r5, #1
 800af50:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800af54:	9304      	str	r3, [sp, #16]
 800af56:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800af5a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800af5e:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800af62:	4650      	mov	r0, sl
 800af64:	4659      	mov	r1, fp
 800af66:	4614      	mov	r4, r2
 800af68:	461d      	mov	r5, r3
 800af6a:	f7f5 faad 	bl	80004c8 <__aeabi_dmul>
 800af6e:	4602      	mov	r2, r0
 800af70:	460b      	mov	r3, r1
 800af72:	4630      	mov	r0, r6
 800af74:	4639      	mov	r1, r7
 800af76:	f7f5 f8ef 	bl	8000158 <__aeabi_dsub>
 800af7a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800af7e:	4606      	mov	r6, r0
 800af80:	460f      	mov	r7, r1
 800af82:	4620      	mov	r0, r4
 800af84:	4629      	mov	r1, r5
 800af86:	f7f5 f8e7 	bl	8000158 <__aeabi_dsub>
 800af8a:	4602      	mov	r2, r0
 800af8c:	460b      	mov	r3, r1
 800af8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af92:	f7f5 f8e1 	bl	8000158 <__aeabi_dsub>
 800af96:	4652      	mov	r2, sl
 800af98:	465b      	mov	r3, fp
 800af9a:	f7f5 fa95 	bl	80004c8 <__aeabi_dmul>
 800af9e:	4602      	mov	r2, r0
 800afa0:	460b      	mov	r3, r1
 800afa2:	4630      	mov	r0, r6
 800afa4:	4639      	mov	r1, r7
 800afa6:	f7f5 f8d7 	bl	8000158 <__aeabi_dsub>
 800afaa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800afae:	f7f5 fa8b 	bl	80004c8 <__aeabi_dmul>
 800afb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800afb6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800afba:	4610      	mov	r0, r2
 800afbc:	4619      	mov	r1, r3
 800afbe:	f7f5 fa83 	bl	80004c8 <__aeabi_dmul>
 800afc2:	a377      	add	r3, pc, #476	; (adr r3, 800b1a0 <__ieee754_pow+0x6d8>)
 800afc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc8:	4604      	mov	r4, r0
 800afca:	460d      	mov	r5, r1
 800afcc:	f7f5 fa7c 	bl	80004c8 <__aeabi_dmul>
 800afd0:	a375      	add	r3, pc, #468	; (adr r3, 800b1a8 <__ieee754_pow+0x6e0>)
 800afd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd6:	f7f5 f8c1 	bl	800015c <__adddf3>
 800afda:	4622      	mov	r2, r4
 800afdc:	462b      	mov	r3, r5
 800afde:	f7f5 fa73 	bl	80004c8 <__aeabi_dmul>
 800afe2:	a373      	add	r3, pc, #460	; (adr r3, 800b1b0 <__ieee754_pow+0x6e8>)
 800afe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe8:	f7f5 f8b8 	bl	800015c <__adddf3>
 800afec:	4622      	mov	r2, r4
 800afee:	462b      	mov	r3, r5
 800aff0:	f7f5 fa6a 	bl	80004c8 <__aeabi_dmul>
 800aff4:	a370      	add	r3, pc, #448	; (adr r3, 800b1b8 <__ieee754_pow+0x6f0>)
 800aff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affa:	f7f5 f8af 	bl	800015c <__adddf3>
 800affe:	4622      	mov	r2, r4
 800b000:	462b      	mov	r3, r5
 800b002:	f7f5 fa61 	bl	80004c8 <__aeabi_dmul>
 800b006:	a36e      	add	r3, pc, #440	; (adr r3, 800b1c0 <__ieee754_pow+0x6f8>)
 800b008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00c:	f7f5 f8a6 	bl	800015c <__adddf3>
 800b010:	4622      	mov	r2, r4
 800b012:	462b      	mov	r3, r5
 800b014:	f7f5 fa58 	bl	80004c8 <__aeabi_dmul>
 800b018:	a36b      	add	r3, pc, #428	; (adr r3, 800b1c8 <__ieee754_pow+0x700>)
 800b01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01e:	f7f5 f89d 	bl	800015c <__adddf3>
 800b022:	4622      	mov	r2, r4
 800b024:	4606      	mov	r6, r0
 800b026:	460f      	mov	r7, r1
 800b028:	462b      	mov	r3, r5
 800b02a:	4620      	mov	r0, r4
 800b02c:	4629      	mov	r1, r5
 800b02e:	f7f5 fa4b 	bl	80004c8 <__aeabi_dmul>
 800b032:	4602      	mov	r2, r0
 800b034:	460b      	mov	r3, r1
 800b036:	4630      	mov	r0, r6
 800b038:	4639      	mov	r1, r7
 800b03a:	f7f5 fa45 	bl	80004c8 <__aeabi_dmul>
 800b03e:	4604      	mov	r4, r0
 800b040:	460d      	mov	r5, r1
 800b042:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b046:	4652      	mov	r2, sl
 800b048:	465b      	mov	r3, fp
 800b04a:	f7f5 f887 	bl	800015c <__adddf3>
 800b04e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b052:	f7f5 fa39 	bl	80004c8 <__aeabi_dmul>
 800b056:	4622      	mov	r2, r4
 800b058:	462b      	mov	r3, r5
 800b05a:	f7f5 f87f 	bl	800015c <__adddf3>
 800b05e:	4652      	mov	r2, sl
 800b060:	4606      	mov	r6, r0
 800b062:	460f      	mov	r7, r1
 800b064:	465b      	mov	r3, fp
 800b066:	4650      	mov	r0, sl
 800b068:	4659      	mov	r1, fp
 800b06a:	f7f5 fa2d 	bl	80004c8 <__aeabi_dmul>
 800b06e:	2200      	movs	r2, #0
 800b070:	4b62      	ldr	r3, [pc, #392]	; (800b1fc <__ieee754_pow+0x734>)
 800b072:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b076:	f7f5 f871 	bl	800015c <__adddf3>
 800b07a:	4632      	mov	r2, r6
 800b07c:	463b      	mov	r3, r7
 800b07e:	f7f5 f86d 	bl	800015c <__adddf3>
 800b082:	9804      	ldr	r0, [sp, #16]
 800b084:	460d      	mov	r5, r1
 800b086:	4604      	mov	r4, r0
 800b088:	4602      	mov	r2, r0
 800b08a:	460b      	mov	r3, r1
 800b08c:	4650      	mov	r0, sl
 800b08e:	4659      	mov	r1, fp
 800b090:	f7f5 fa1a 	bl	80004c8 <__aeabi_dmul>
 800b094:	2200      	movs	r2, #0
 800b096:	4682      	mov	sl, r0
 800b098:	468b      	mov	fp, r1
 800b09a:	4b58      	ldr	r3, [pc, #352]	; (800b1fc <__ieee754_pow+0x734>)
 800b09c:	4620      	mov	r0, r4
 800b09e:	4629      	mov	r1, r5
 800b0a0:	f7f5 f85a 	bl	8000158 <__aeabi_dsub>
 800b0a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b0a8:	f7f5 f856 	bl	8000158 <__aeabi_dsub>
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	4630      	mov	r0, r6
 800b0b2:	4639      	mov	r1, r7
 800b0b4:	f7f5 f850 	bl	8000158 <__aeabi_dsub>
 800b0b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b0bc:	f7f5 fa04 	bl	80004c8 <__aeabi_dmul>
 800b0c0:	4622      	mov	r2, r4
 800b0c2:	4606      	mov	r6, r0
 800b0c4:	460f      	mov	r7, r1
 800b0c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b0ca:	462b      	mov	r3, r5
 800b0cc:	f7f5 f9fc 	bl	80004c8 <__aeabi_dmul>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	4639      	mov	r1, r7
 800b0d8:	f7f5 f840 	bl	800015c <__adddf3>
 800b0dc:	4606      	mov	r6, r0
 800b0de:	460f      	mov	r7, r1
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	4650      	mov	r0, sl
 800b0e6:	4659      	mov	r1, fp
 800b0e8:	f7f5 f838 	bl	800015c <__adddf3>
 800b0ec:	a338      	add	r3, pc, #224	; (adr r3, 800b1d0 <__ieee754_pow+0x708>)
 800b0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f2:	9804      	ldr	r0, [sp, #16]
 800b0f4:	460d      	mov	r5, r1
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	f7f5 f9e6 	bl	80004c8 <__aeabi_dmul>
 800b0fc:	4652      	mov	r2, sl
 800b0fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b102:	465b      	mov	r3, fp
 800b104:	4620      	mov	r0, r4
 800b106:	4629      	mov	r1, r5
 800b108:	f7f5 f826 	bl	8000158 <__aeabi_dsub>
 800b10c:	4602      	mov	r2, r0
 800b10e:	460b      	mov	r3, r1
 800b110:	4630      	mov	r0, r6
 800b112:	4639      	mov	r1, r7
 800b114:	f7f5 f820 	bl	8000158 <__aeabi_dsub>
 800b118:	a32f      	add	r3, pc, #188	; (adr r3, 800b1d8 <__ieee754_pow+0x710>)
 800b11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11e:	f7f5 f9d3 	bl	80004c8 <__aeabi_dmul>
 800b122:	a32f      	add	r3, pc, #188	; (adr r3, 800b1e0 <__ieee754_pow+0x718>)
 800b124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b128:	4606      	mov	r6, r0
 800b12a:	460f      	mov	r7, r1
 800b12c:	4620      	mov	r0, r4
 800b12e:	4629      	mov	r1, r5
 800b130:	f7f5 f9ca 	bl	80004c8 <__aeabi_dmul>
 800b134:	4602      	mov	r2, r0
 800b136:	460b      	mov	r3, r1
 800b138:	4630      	mov	r0, r6
 800b13a:	4639      	mov	r1, r7
 800b13c:	f7f5 f80e 	bl	800015c <__adddf3>
 800b140:	4b2f      	ldr	r3, [pc, #188]	; (800b200 <__ieee754_pow+0x738>)
 800b142:	444b      	add	r3, r9
 800b144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b148:	f7f5 f808 	bl	800015c <__adddf3>
 800b14c:	4604      	mov	r4, r0
 800b14e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b150:	460d      	mov	r5, r1
 800b152:	f7f5 f94f 	bl	80003f4 <__aeabi_i2d>
 800b156:	4606      	mov	r6, r0
 800b158:	460f      	mov	r7, r1
 800b15a:	4b2a      	ldr	r3, [pc, #168]	; (800b204 <__ieee754_pow+0x73c>)
 800b15c:	4622      	mov	r2, r4
 800b15e:	444b      	add	r3, r9
 800b160:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b164:	462b      	mov	r3, r5
 800b166:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b16a:	f7f4 fff7 	bl	800015c <__adddf3>
 800b16e:	4642      	mov	r2, r8
 800b170:	464b      	mov	r3, r9
 800b172:	f7f4 fff3 	bl	800015c <__adddf3>
 800b176:	4632      	mov	r2, r6
 800b178:	463b      	mov	r3, r7
 800b17a:	f7f4 ffef 	bl	800015c <__adddf3>
 800b17e:	9804      	ldr	r0, [sp, #16]
 800b180:	4632      	mov	r2, r6
 800b182:	463b      	mov	r3, r7
 800b184:	4682      	mov	sl, r0
 800b186:	468b      	mov	fp, r1
 800b188:	f7f4 ffe6 	bl	8000158 <__aeabi_dsub>
 800b18c:	4642      	mov	r2, r8
 800b18e:	464b      	mov	r3, r9
 800b190:	f7f4 ffe2 	bl	8000158 <__aeabi_dsub>
 800b194:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b198:	e60b      	b.n	800adb2 <__ieee754_pow+0x2ea>
 800b19a:	f04f 0801 	mov.w	r8, #1
 800b19e:	e6a8      	b.n	800aef2 <__ieee754_pow+0x42a>
 800b1a0:	4a454eef 	.word	0x4a454eef
 800b1a4:	3fca7e28 	.word	0x3fca7e28
 800b1a8:	93c9db65 	.word	0x93c9db65
 800b1ac:	3fcd864a 	.word	0x3fcd864a
 800b1b0:	a91d4101 	.word	0xa91d4101
 800b1b4:	3fd17460 	.word	0x3fd17460
 800b1b8:	518f264d 	.word	0x518f264d
 800b1bc:	3fd55555 	.word	0x3fd55555
 800b1c0:	db6fabff 	.word	0xdb6fabff
 800b1c4:	3fdb6db6 	.word	0x3fdb6db6
 800b1c8:	33333303 	.word	0x33333303
 800b1cc:	3fe33333 	.word	0x3fe33333
 800b1d0:	e0000000 	.word	0xe0000000
 800b1d4:	3feec709 	.word	0x3feec709
 800b1d8:	dc3a03fd 	.word	0xdc3a03fd
 800b1dc:	3feec709 	.word	0x3feec709
 800b1e0:	145b01f5 	.word	0x145b01f5
 800b1e4:	be3e2fe0 	.word	0xbe3e2fe0
 800b1e8:	43400000 	.word	0x43400000
 800b1ec:	0003988e 	.word	0x0003988e
 800b1f0:	000bb679 	.word	0x000bb679
 800b1f4:	0800bbf0 	.word	0x0800bbf0
 800b1f8:	3ff00000 	.word	0x3ff00000
 800b1fc:	40080000 	.word	0x40080000
 800b200:	0800bc10 	.word	0x0800bc10
 800b204:	0800bc00 	.word	0x0800bc00
 800b208:	a39b      	add	r3, pc, #620	; (adr r3, 800b478 <__ieee754_pow+0x9b0>)
 800b20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20e:	4640      	mov	r0, r8
 800b210:	4649      	mov	r1, r9
 800b212:	f7f4 ffa3 	bl	800015c <__adddf3>
 800b216:	4622      	mov	r2, r4
 800b218:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b21c:	462b      	mov	r3, r5
 800b21e:	4650      	mov	r0, sl
 800b220:	4639      	mov	r1, r7
 800b222:	f7f4 ff99 	bl	8000158 <__aeabi_dsub>
 800b226:	4602      	mov	r2, r0
 800b228:	460b      	mov	r3, r1
 800b22a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b22e:	f7f5 fbdb 	bl	80009e8 <__aeabi_dcmpgt>
 800b232:	2800      	cmp	r0, #0
 800b234:	f47f ae0d 	bne.w	800ae52 <__ieee754_pow+0x38a>
 800b238:	4aa3      	ldr	r2, [pc, #652]	; (800b4c8 <__ieee754_pow+0xa00>)
 800b23a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800b23e:	4293      	cmp	r3, r2
 800b240:	f340 8103 	ble.w	800b44a <__ieee754_pow+0x982>
 800b244:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b248:	2000      	movs	r0, #0
 800b24a:	151b      	asrs	r3, r3, #20
 800b24c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b250:	fa4a f303 	asr.w	r3, sl, r3
 800b254:	4433      	add	r3, r6
 800b256:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b25a:	4f9c      	ldr	r7, [pc, #624]	; (800b4cc <__ieee754_pow+0xa04>)
 800b25c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b260:	4117      	asrs	r7, r2
 800b262:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b266:	ea23 0107 	bic.w	r1, r3, r7
 800b26a:	f1c2 0214 	rsb	r2, r2, #20
 800b26e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b272:	fa4a fa02 	asr.w	sl, sl, r2
 800b276:	2e00      	cmp	r6, #0
 800b278:	4602      	mov	r2, r0
 800b27a:	460b      	mov	r3, r1
 800b27c:	4620      	mov	r0, r4
 800b27e:	4629      	mov	r1, r5
 800b280:	bfb8      	it	lt
 800b282:	f1ca 0a00 	rsblt	sl, sl, #0
 800b286:	f7f4 ff67 	bl	8000158 <__aeabi_dsub>
 800b28a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b28e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b292:	4642      	mov	r2, r8
 800b294:	464b      	mov	r3, r9
 800b296:	f7f4 ff61 	bl	800015c <__adddf3>
 800b29a:	a379      	add	r3, pc, #484	; (adr r3, 800b480 <__ieee754_pow+0x9b8>)
 800b29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a0:	2000      	movs	r0, #0
 800b2a2:	460d      	mov	r5, r1
 800b2a4:	4604      	mov	r4, r0
 800b2a6:	f7f5 f90f 	bl	80004c8 <__aeabi_dmul>
 800b2aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2ae:	4606      	mov	r6, r0
 800b2b0:	460f      	mov	r7, r1
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	4629      	mov	r1, r5
 800b2b6:	f7f4 ff4f 	bl	8000158 <__aeabi_dsub>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	460b      	mov	r3, r1
 800b2be:	4640      	mov	r0, r8
 800b2c0:	4649      	mov	r1, r9
 800b2c2:	f7f4 ff49 	bl	8000158 <__aeabi_dsub>
 800b2c6:	a370      	add	r3, pc, #448	; (adr r3, 800b488 <__ieee754_pow+0x9c0>)
 800b2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2cc:	f7f5 f8fc 	bl	80004c8 <__aeabi_dmul>
 800b2d0:	a36f      	add	r3, pc, #444	; (adr r3, 800b490 <__ieee754_pow+0x9c8>)
 800b2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d6:	4680      	mov	r8, r0
 800b2d8:	4689      	mov	r9, r1
 800b2da:	4620      	mov	r0, r4
 800b2dc:	4629      	mov	r1, r5
 800b2de:	f7f5 f8f3 	bl	80004c8 <__aeabi_dmul>
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	4640      	mov	r0, r8
 800b2e8:	4649      	mov	r1, r9
 800b2ea:	f7f4 ff37 	bl	800015c <__adddf3>
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	460d      	mov	r5, r1
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	4630      	mov	r0, r6
 800b2f8:	4639      	mov	r1, r7
 800b2fa:	f7f4 ff2f 	bl	800015c <__adddf3>
 800b2fe:	4632      	mov	r2, r6
 800b300:	463b      	mov	r3, r7
 800b302:	4680      	mov	r8, r0
 800b304:	4689      	mov	r9, r1
 800b306:	f7f4 ff27 	bl	8000158 <__aeabi_dsub>
 800b30a:	4602      	mov	r2, r0
 800b30c:	460b      	mov	r3, r1
 800b30e:	4620      	mov	r0, r4
 800b310:	4629      	mov	r1, r5
 800b312:	f7f4 ff21 	bl	8000158 <__aeabi_dsub>
 800b316:	4642      	mov	r2, r8
 800b318:	4606      	mov	r6, r0
 800b31a:	460f      	mov	r7, r1
 800b31c:	464b      	mov	r3, r9
 800b31e:	4640      	mov	r0, r8
 800b320:	4649      	mov	r1, r9
 800b322:	f7f5 f8d1 	bl	80004c8 <__aeabi_dmul>
 800b326:	a35c      	add	r3, pc, #368	; (adr r3, 800b498 <__ieee754_pow+0x9d0>)
 800b328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32c:	4604      	mov	r4, r0
 800b32e:	460d      	mov	r5, r1
 800b330:	f7f5 f8ca 	bl	80004c8 <__aeabi_dmul>
 800b334:	a35a      	add	r3, pc, #360	; (adr r3, 800b4a0 <__ieee754_pow+0x9d8>)
 800b336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33a:	f7f4 ff0d 	bl	8000158 <__aeabi_dsub>
 800b33e:	4622      	mov	r2, r4
 800b340:	462b      	mov	r3, r5
 800b342:	f7f5 f8c1 	bl	80004c8 <__aeabi_dmul>
 800b346:	a358      	add	r3, pc, #352	; (adr r3, 800b4a8 <__ieee754_pow+0x9e0>)
 800b348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34c:	f7f4 ff06 	bl	800015c <__adddf3>
 800b350:	4622      	mov	r2, r4
 800b352:	462b      	mov	r3, r5
 800b354:	f7f5 f8b8 	bl	80004c8 <__aeabi_dmul>
 800b358:	a355      	add	r3, pc, #340	; (adr r3, 800b4b0 <__ieee754_pow+0x9e8>)
 800b35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35e:	f7f4 fefb 	bl	8000158 <__aeabi_dsub>
 800b362:	4622      	mov	r2, r4
 800b364:	462b      	mov	r3, r5
 800b366:	f7f5 f8af 	bl	80004c8 <__aeabi_dmul>
 800b36a:	a353      	add	r3, pc, #332	; (adr r3, 800b4b8 <__ieee754_pow+0x9f0>)
 800b36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b370:	f7f4 fef4 	bl	800015c <__adddf3>
 800b374:	4622      	mov	r2, r4
 800b376:	462b      	mov	r3, r5
 800b378:	f7f5 f8a6 	bl	80004c8 <__aeabi_dmul>
 800b37c:	4602      	mov	r2, r0
 800b37e:	460b      	mov	r3, r1
 800b380:	4640      	mov	r0, r8
 800b382:	4649      	mov	r1, r9
 800b384:	f7f4 fee8 	bl	8000158 <__aeabi_dsub>
 800b388:	4604      	mov	r4, r0
 800b38a:	460d      	mov	r5, r1
 800b38c:	4602      	mov	r2, r0
 800b38e:	460b      	mov	r3, r1
 800b390:	4640      	mov	r0, r8
 800b392:	4649      	mov	r1, r9
 800b394:	f7f5 f898 	bl	80004c8 <__aeabi_dmul>
 800b398:	2200      	movs	r2, #0
 800b39a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b39e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	4629      	mov	r1, r5
 800b3a6:	f7f4 fed7 	bl	8000158 <__aeabi_dsub>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3b2:	f7f5 f9b3 	bl	800071c <__aeabi_ddiv>
 800b3b6:	4632      	mov	r2, r6
 800b3b8:	4604      	mov	r4, r0
 800b3ba:	460d      	mov	r5, r1
 800b3bc:	463b      	mov	r3, r7
 800b3be:	4640      	mov	r0, r8
 800b3c0:	4649      	mov	r1, r9
 800b3c2:	f7f5 f881 	bl	80004c8 <__aeabi_dmul>
 800b3c6:	4632      	mov	r2, r6
 800b3c8:	463b      	mov	r3, r7
 800b3ca:	f7f4 fec7 	bl	800015c <__adddf3>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	4629      	mov	r1, r5
 800b3d6:	f7f4 febf 	bl	8000158 <__aeabi_dsub>
 800b3da:	4642      	mov	r2, r8
 800b3dc:	464b      	mov	r3, r9
 800b3de:	f7f4 febb 	bl	8000158 <__aeabi_dsub>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	2000      	movs	r0, #0
 800b3e8:	4939      	ldr	r1, [pc, #228]	; (800b4d0 <__ieee754_pow+0xa08>)
 800b3ea:	f7f4 feb5 	bl	8000158 <__aeabi_dsub>
 800b3ee:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b3f2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b3f6:	da2b      	bge.n	800b450 <__ieee754_pow+0x988>
 800b3f8:	4652      	mov	r2, sl
 800b3fa:	f000 f9b9 	bl	800b770 <scalbn>
 800b3fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b402:	f7ff bbf6 	b.w	800abf2 <__ieee754_pow+0x12a>
 800b406:	4b33      	ldr	r3, [pc, #204]	; (800b4d4 <__ieee754_pow+0xa0c>)
 800b408:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b40c:	429f      	cmp	r7, r3
 800b40e:	f77f af13 	ble.w	800b238 <__ieee754_pow+0x770>
 800b412:	4b31      	ldr	r3, [pc, #196]	; (800b4d8 <__ieee754_pow+0xa10>)
 800b414:	440b      	add	r3, r1
 800b416:	4303      	orrs	r3, r0
 800b418:	d00b      	beq.n	800b432 <__ieee754_pow+0x96a>
 800b41a:	a329      	add	r3, pc, #164	; (adr r3, 800b4c0 <__ieee754_pow+0x9f8>)
 800b41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b420:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b424:	f7f5 f850 	bl	80004c8 <__aeabi_dmul>
 800b428:	a325      	add	r3, pc, #148	; (adr r3, 800b4c0 <__ieee754_pow+0x9f8>)
 800b42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42e:	f7ff bbe0 	b.w	800abf2 <__ieee754_pow+0x12a>
 800b432:	4622      	mov	r2, r4
 800b434:	462b      	mov	r3, r5
 800b436:	f7f4 fe8f 	bl	8000158 <__aeabi_dsub>
 800b43a:	4642      	mov	r2, r8
 800b43c:	464b      	mov	r3, r9
 800b43e:	f7f5 fac9 	bl	80009d4 <__aeabi_dcmpge>
 800b442:	2800      	cmp	r0, #0
 800b444:	f43f aef8 	beq.w	800b238 <__ieee754_pow+0x770>
 800b448:	e7e7      	b.n	800b41a <__ieee754_pow+0x952>
 800b44a:	f04f 0a00 	mov.w	sl, #0
 800b44e:	e71e      	b.n	800b28e <__ieee754_pow+0x7c6>
 800b450:	4621      	mov	r1, r4
 800b452:	e7d4      	b.n	800b3fe <__ieee754_pow+0x936>
 800b454:	f04f 0b00 	mov.w	fp, #0
 800b458:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b4d0 <__ieee754_pow+0xa08>
 800b45c:	f7ff bb95 	b.w	800ab8a <__ieee754_pow+0xc2>
 800b460:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800b464:	f7ff bb91 	b.w	800ab8a <__ieee754_pow+0xc2>
 800b468:	4638      	mov	r0, r7
 800b46a:	4641      	mov	r1, r8
 800b46c:	f7ff bbc3 	b.w	800abf6 <__ieee754_pow+0x12e>
 800b470:	9200      	str	r2, [sp, #0]
 800b472:	f7ff bb9f 	b.w	800abb4 <__ieee754_pow+0xec>
 800b476:	bf00      	nop
 800b478:	652b82fe 	.word	0x652b82fe
 800b47c:	3c971547 	.word	0x3c971547
 800b480:	00000000 	.word	0x00000000
 800b484:	3fe62e43 	.word	0x3fe62e43
 800b488:	fefa39ef 	.word	0xfefa39ef
 800b48c:	3fe62e42 	.word	0x3fe62e42
 800b490:	0ca86c39 	.word	0x0ca86c39
 800b494:	be205c61 	.word	0xbe205c61
 800b498:	72bea4d0 	.word	0x72bea4d0
 800b49c:	3e663769 	.word	0x3e663769
 800b4a0:	c5d26bf1 	.word	0xc5d26bf1
 800b4a4:	3ebbbd41 	.word	0x3ebbbd41
 800b4a8:	af25de2c 	.word	0xaf25de2c
 800b4ac:	3f11566a 	.word	0x3f11566a
 800b4b0:	16bebd93 	.word	0x16bebd93
 800b4b4:	3f66c16c 	.word	0x3f66c16c
 800b4b8:	5555553e 	.word	0x5555553e
 800b4bc:	3fc55555 	.word	0x3fc55555
 800b4c0:	c2f8f359 	.word	0xc2f8f359
 800b4c4:	01a56e1f 	.word	0x01a56e1f
 800b4c8:	3fe00000 	.word	0x3fe00000
 800b4cc:	000fffff 	.word	0x000fffff
 800b4d0:	3ff00000 	.word	0x3ff00000
 800b4d4:	4090cbff 	.word	0x4090cbff
 800b4d8:	3f6f3400 	.word	0x3f6f3400

0800b4dc <__ieee754_sqrt>:
 800b4dc:	4b54      	ldr	r3, [pc, #336]	; (800b630 <__ieee754_sqrt+0x154>)
 800b4de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4e2:	438b      	bics	r3, r1
 800b4e4:	4606      	mov	r6, r0
 800b4e6:	460d      	mov	r5, r1
 800b4e8:	460a      	mov	r2, r1
 800b4ea:	460c      	mov	r4, r1
 800b4ec:	d10f      	bne.n	800b50e <__ieee754_sqrt+0x32>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	f7f4 ffe9 	bl	80004c8 <__aeabi_dmul>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	4630      	mov	r0, r6
 800b4fc:	4629      	mov	r1, r5
 800b4fe:	f7f4 fe2d 	bl	800015c <__adddf3>
 800b502:	4606      	mov	r6, r0
 800b504:	460d      	mov	r5, r1
 800b506:	4630      	mov	r0, r6
 800b508:	4629      	mov	r1, r5
 800b50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b50e:	2900      	cmp	r1, #0
 800b510:	4607      	mov	r7, r0
 800b512:	4603      	mov	r3, r0
 800b514:	dc0e      	bgt.n	800b534 <__ieee754_sqrt+0x58>
 800b516:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b51a:	ea5c 0707 	orrs.w	r7, ip, r7
 800b51e:	d0f2      	beq.n	800b506 <__ieee754_sqrt+0x2a>
 800b520:	b141      	cbz	r1, 800b534 <__ieee754_sqrt+0x58>
 800b522:	4602      	mov	r2, r0
 800b524:	460b      	mov	r3, r1
 800b526:	f7f4 fe17 	bl	8000158 <__aeabi_dsub>
 800b52a:	4602      	mov	r2, r0
 800b52c:	460b      	mov	r3, r1
 800b52e:	f7f5 f8f5 	bl	800071c <__aeabi_ddiv>
 800b532:	e7e6      	b.n	800b502 <__ieee754_sqrt+0x26>
 800b534:	1512      	asrs	r2, r2, #20
 800b536:	d074      	beq.n	800b622 <__ieee754_sqrt+0x146>
 800b538:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b53c:	07d5      	lsls	r5, r2, #31
 800b53e:	f04f 0500 	mov.w	r5, #0
 800b542:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b546:	bf48      	it	mi
 800b548:	0fd9      	lsrmi	r1, r3, #31
 800b54a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800b54e:	bf44      	itt	mi
 800b550:	005b      	lslmi	r3, r3, #1
 800b552:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800b556:	1051      	asrs	r1, r2, #1
 800b558:	0fda      	lsrs	r2, r3, #31
 800b55a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800b55e:	4628      	mov	r0, r5
 800b560:	2216      	movs	r2, #22
 800b562:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800b566:	005b      	lsls	r3, r3, #1
 800b568:	1987      	adds	r7, r0, r6
 800b56a:	42a7      	cmp	r7, r4
 800b56c:	bfde      	ittt	le
 800b56e:	19b8      	addle	r0, r7, r6
 800b570:	1be4      	suble	r4, r4, r7
 800b572:	19ad      	addle	r5, r5, r6
 800b574:	0fdf      	lsrs	r7, r3, #31
 800b576:	3a01      	subs	r2, #1
 800b578:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800b57c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b580:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b584:	d1f0      	bne.n	800b568 <__ieee754_sqrt+0x8c>
 800b586:	f04f 0c20 	mov.w	ip, #32
 800b58a:	4696      	mov	lr, r2
 800b58c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b590:	4284      	cmp	r4, r0
 800b592:	eb06 070e 	add.w	r7, r6, lr
 800b596:	dc02      	bgt.n	800b59e <__ieee754_sqrt+0xc2>
 800b598:	d112      	bne.n	800b5c0 <__ieee754_sqrt+0xe4>
 800b59a:	429f      	cmp	r7, r3
 800b59c:	d810      	bhi.n	800b5c0 <__ieee754_sqrt+0xe4>
 800b59e:	2f00      	cmp	r7, #0
 800b5a0:	eb07 0e06 	add.w	lr, r7, r6
 800b5a4:	da42      	bge.n	800b62c <__ieee754_sqrt+0x150>
 800b5a6:	f1be 0f00 	cmp.w	lr, #0
 800b5aa:	db3f      	blt.n	800b62c <__ieee754_sqrt+0x150>
 800b5ac:	f100 0801 	add.w	r8, r0, #1
 800b5b0:	1a24      	subs	r4, r4, r0
 800b5b2:	4640      	mov	r0, r8
 800b5b4:	429f      	cmp	r7, r3
 800b5b6:	bf88      	it	hi
 800b5b8:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 800b5bc:	1bdb      	subs	r3, r3, r7
 800b5be:	4432      	add	r2, r6
 800b5c0:	0064      	lsls	r4, r4, #1
 800b5c2:	f1bc 0c01 	subs.w	ip, ip, #1
 800b5c6:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800b5ca:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b5ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b5d2:	d1dd      	bne.n	800b590 <__ieee754_sqrt+0xb4>
 800b5d4:	4323      	orrs	r3, r4
 800b5d6:	d006      	beq.n	800b5e6 <__ieee754_sqrt+0x10a>
 800b5d8:	1c54      	adds	r4, r2, #1
 800b5da:	bf0b      	itete	eq
 800b5dc:	4662      	moveq	r2, ip
 800b5de:	3201      	addne	r2, #1
 800b5e0:	3501      	addeq	r5, #1
 800b5e2:	f022 0201 	bicne.w	r2, r2, #1
 800b5e6:	106b      	asrs	r3, r5, #1
 800b5e8:	0852      	lsrs	r2, r2, #1
 800b5ea:	07e8      	lsls	r0, r5, #31
 800b5ec:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b5f0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b5f4:	bf48      	it	mi
 800b5f6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b5fa:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800b5fe:	4616      	mov	r6, r2
 800b600:	e781      	b.n	800b506 <__ieee754_sqrt+0x2a>
 800b602:	0adc      	lsrs	r4, r3, #11
 800b604:	3915      	subs	r1, #21
 800b606:	055b      	lsls	r3, r3, #21
 800b608:	2c00      	cmp	r4, #0
 800b60a:	d0fa      	beq.n	800b602 <__ieee754_sqrt+0x126>
 800b60c:	02e6      	lsls	r6, r4, #11
 800b60e:	d50a      	bpl.n	800b626 <__ieee754_sqrt+0x14a>
 800b610:	f1c2 0020 	rsb	r0, r2, #32
 800b614:	fa23 f000 	lsr.w	r0, r3, r0
 800b618:	1e55      	subs	r5, r2, #1
 800b61a:	4093      	lsls	r3, r2
 800b61c:	4304      	orrs	r4, r0
 800b61e:	1b4a      	subs	r2, r1, r5
 800b620:	e78a      	b.n	800b538 <__ieee754_sqrt+0x5c>
 800b622:	4611      	mov	r1, r2
 800b624:	e7f0      	b.n	800b608 <__ieee754_sqrt+0x12c>
 800b626:	0064      	lsls	r4, r4, #1
 800b628:	3201      	adds	r2, #1
 800b62a:	e7ef      	b.n	800b60c <__ieee754_sqrt+0x130>
 800b62c:	4680      	mov	r8, r0
 800b62e:	e7bf      	b.n	800b5b0 <__ieee754_sqrt+0xd4>
 800b630:	7ff00000 	.word	0x7ff00000

0800b634 <fabs>:
 800b634:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b638:	4619      	mov	r1, r3
 800b63a:	4770      	bx	lr

0800b63c <finite>:
 800b63c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800b640:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800b644:	0fc0      	lsrs	r0, r0, #31
 800b646:	4770      	bx	lr

0800b648 <matherr>:
 800b648:	2000      	movs	r0, #0
 800b64a:	4770      	bx	lr

0800b64c <nan>:
 800b64c:	2000      	movs	r0, #0
 800b64e:	4901      	ldr	r1, [pc, #4]	; (800b654 <nan+0x8>)
 800b650:	4770      	bx	lr
 800b652:	bf00      	nop
 800b654:	7ff80000 	.word	0x7ff80000

0800b658 <rint>:
 800b658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b65a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b65e:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800b662:	f1bc 0f13 	cmp.w	ip, #19
 800b666:	4604      	mov	r4, r0
 800b668:	460d      	mov	r5, r1
 800b66a:	460b      	mov	r3, r1
 800b66c:	4606      	mov	r6, r0
 800b66e:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800b672:	dc5a      	bgt.n	800b72a <rint+0xd2>
 800b674:	f1bc 0f00 	cmp.w	ip, #0
 800b678:	da2b      	bge.n	800b6d2 <rint+0x7a>
 800b67a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b67e:	4302      	orrs	r2, r0
 800b680:	d023      	beq.n	800b6ca <rint+0x72>
 800b682:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800b686:	4302      	orrs	r2, r0
 800b688:	4256      	negs	r6, r2
 800b68a:	4316      	orrs	r6, r2
 800b68c:	0c4b      	lsrs	r3, r1, #17
 800b68e:	0b36      	lsrs	r6, r6, #12
 800b690:	4934      	ldr	r1, [pc, #208]	; (800b764 <rint+0x10c>)
 800b692:	045b      	lsls	r3, r3, #17
 800b694:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 800b698:	ea46 0503 	orr.w	r5, r6, r3
 800b69c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	462b      	mov	r3, r5
 800b6a4:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	4629      	mov	r1, r5
 800b6ac:	f7f4 fd56 	bl	800015c <__adddf3>
 800b6b0:	e9cd 0100 	strd	r0, r1, [sp]
 800b6b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6b8:	462b      	mov	r3, r5
 800b6ba:	4622      	mov	r2, r4
 800b6bc:	f7f4 fd4c 	bl	8000158 <__aeabi_dsub>
 800b6c0:	4604      	mov	r4, r0
 800b6c2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b6c6:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	4629      	mov	r1, r5
 800b6ce:	b003      	add	sp, #12
 800b6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6d2:	4a25      	ldr	r2, [pc, #148]	; (800b768 <rint+0x110>)
 800b6d4:	fa42 f20c 	asr.w	r2, r2, ip
 800b6d8:	4011      	ands	r1, r2
 800b6da:	4301      	orrs	r1, r0
 800b6dc:	d0f5      	beq.n	800b6ca <rint+0x72>
 800b6de:	0852      	lsrs	r2, r2, #1
 800b6e0:	ea05 0102 	and.w	r1, r5, r2
 800b6e4:	ea50 0601 	orrs.w	r6, r0, r1
 800b6e8:	d00c      	beq.n	800b704 <rint+0xac>
 800b6ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b6ee:	f1bc 0f13 	cmp.w	ip, #19
 800b6f2:	bf0c      	ite	eq
 800b6f4:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800b6f8:	2600      	movne	r6, #0
 800b6fa:	ea25 0202 	bic.w	r2, r5, r2
 800b6fe:	fa43 f30c 	asr.w	r3, r3, ip
 800b702:	4313      	orrs	r3, r2
 800b704:	4917      	ldr	r1, [pc, #92]	; (800b764 <rint+0x10c>)
 800b706:	4632      	mov	r2, r6
 800b708:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800b70c:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b710:	4620      	mov	r0, r4
 800b712:	4629      	mov	r1, r5
 800b714:	f7f4 fd22 	bl	800015c <__adddf3>
 800b718:	e9cd 0100 	strd	r0, r1, [sp]
 800b71c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b720:	4622      	mov	r2, r4
 800b722:	462b      	mov	r3, r5
 800b724:	f7f4 fd18 	bl	8000158 <__aeabi_dsub>
 800b728:	e008      	b.n	800b73c <rint+0xe4>
 800b72a:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800b72e:	dd08      	ble.n	800b742 <rint+0xea>
 800b730:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800b734:	d1c9      	bne.n	800b6ca <rint+0x72>
 800b736:	4602      	mov	r2, r0
 800b738:	f7f4 fd10 	bl	800015c <__adddf3>
 800b73c:	4604      	mov	r4, r0
 800b73e:	460d      	mov	r5, r1
 800b740:	e7c3      	b.n	800b6ca <rint+0x72>
 800b742:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800b746:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b74a:	40ca      	lsrs	r2, r1
 800b74c:	4210      	tst	r0, r2
 800b74e:	d0bc      	beq.n	800b6ca <rint+0x72>
 800b750:	0852      	lsrs	r2, r2, #1
 800b752:	4210      	tst	r0, r2
 800b754:	bf1f      	itttt	ne
 800b756:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800b75a:	ea20 0202 	bicne.w	r2, r0, r2
 800b75e:	410e      	asrne	r6, r1
 800b760:	4316      	orrne	r6, r2
 800b762:	e7cf      	b.n	800b704 <rint+0xac>
 800b764:	0800bc20 	.word	0x0800bc20
 800b768:	000fffff 	.word	0x000fffff
 800b76c:	00000000 	.word	0x00000000

0800b770 <scalbn>:
 800b770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b772:	4616      	mov	r6, r2
 800b774:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b778:	4604      	mov	r4, r0
 800b77a:	460d      	mov	r5, r1
 800b77c:	460b      	mov	r3, r1
 800b77e:	b982      	cbnz	r2, 800b7a2 <scalbn+0x32>
 800b780:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b784:	4303      	orrs	r3, r0
 800b786:	d034      	beq.n	800b7f2 <scalbn+0x82>
 800b788:	4b2d      	ldr	r3, [pc, #180]	; (800b840 <scalbn+0xd0>)
 800b78a:	2200      	movs	r2, #0
 800b78c:	f7f4 fe9c 	bl	80004c8 <__aeabi_dmul>
 800b790:	4b2c      	ldr	r3, [pc, #176]	; (800b844 <scalbn+0xd4>)
 800b792:	4604      	mov	r4, r0
 800b794:	429e      	cmp	r6, r3
 800b796:	460d      	mov	r5, r1
 800b798:	da0d      	bge.n	800b7b6 <scalbn+0x46>
 800b79a:	a325      	add	r3, pc, #148	; (adr r3, 800b830 <scalbn+0xc0>)
 800b79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a0:	e01c      	b.n	800b7dc <scalbn+0x6c>
 800b7a2:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800b7a6:	42ba      	cmp	r2, r7
 800b7a8:	d109      	bne.n	800b7be <scalbn+0x4e>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	f7f4 fcd6 	bl	800015c <__adddf3>
 800b7b0:	4604      	mov	r4, r0
 800b7b2:	460d      	mov	r5, r1
 800b7b4:	e01d      	b.n	800b7f2 <scalbn+0x82>
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b7bc:	3a36      	subs	r2, #54	; 0x36
 800b7be:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b7c2:	4432      	add	r2, r6
 800b7c4:	428a      	cmp	r2, r1
 800b7c6:	dd0c      	ble.n	800b7e2 <scalbn+0x72>
 800b7c8:	4622      	mov	r2, r4
 800b7ca:	462b      	mov	r3, r5
 800b7cc:	a11a      	add	r1, pc, #104	; (adr r1, 800b838 <scalbn+0xc8>)
 800b7ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7d2:	f000 f83b 	bl	800b84c <copysign>
 800b7d6:	a318      	add	r3, pc, #96	; (adr r3, 800b838 <scalbn+0xc8>)
 800b7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7dc:	f7f4 fe74 	bl	80004c8 <__aeabi_dmul>
 800b7e0:	e7e6      	b.n	800b7b0 <scalbn+0x40>
 800b7e2:	2a00      	cmp	r2, #0
 800b7e4:	dd08      	ble.n	800b7f8 <scalbn+0x88>
 800b7e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b7ea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b7ee:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	4629      	mov	r1, r5
 800b7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7f8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b7fc:	da0b      	bge.n	800b816 <scalbn+0xa6>
 800b7fe:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b802:	429e      	cmp	r6, r3
 800b804:	4622      	mov	r2, r4
 800b806:	462b      	mov	r3, r5
 800b808:	dce0      	bgt.n	800b7cc <scalbn+0x5c>
 800b80a:	a109      	add	r1, pc, #36	; (adr r1, 800b830 <scalbn+0xc0>)
 800b80c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b810:	f000 f81c 	bl	800b84c <copysign>
 800b814:	e7c1      	b.n	800b79a <scalbn+0x2a>
 800b816:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b81a:	3236      	adds	r2, #54	; 0x36
 800b81c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b820:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b824:	4620      	mov	r0, r4
 800b826:	4629      	mov	r1, r5
 800b828:	2200      	movs	r2, #0
 800b82a:	4b07      	ldr	r3, [pc, #28]	; (800b848 <scalbn+0xd8>)
 800b82c:	e7d6      	b.n	800b7dc <scalbn+0x6c>
 800b82e:	bf00      	nop
 800b830:	c2f8f359 	.word	0xc2f8f359
 800b834:	01a56e1f 	.word	0x01a56e1f
 800b838:	8800759c 	.word	0x8800759c
 800b83c:	7e37e43c 	.word	0x7e37e43c
 800b840:	43500000 	.word	0x43500000
 800b844:	ffff3cb0 	.word	0xffff3cb0
 800b848:	3c900000 	.word	0x3c900000

0800b84c <copysign>:
 800b84c:	b530      	push	{r4, r5, lr}
 800b84e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b852:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b856:	ea42 0503 	orr.w	r5, r2, r3
 800b85a:	4629      	mov	r1, r5
 800b85c:	bd30      	pop	{r4, r5, pc}

0800b85e <abort>:
 800b85e:	b508      	push	{r3, lr}
 800b860:	2006      	movs	r0, #6
 800b862:	f000 f93d 	bl	800bae0 <raise>
 800b866:	2001      	movs	r0, #1
 800b868:	f7fc f8aa 	bl	80079c0 <_exit>

0800b86c <__errno>:
 800b86c:	4b01      	ldr	r3, [pc, #4]	; (800b874 <__errno+0x8>)
 800b86e:	6818      	ldr	r0, [r3, #0]
 800b870:	4770      	bx	lr
 800b872:	bf00      	nop
 800b874:	2000006c 	.word	0x2000006c

0800b878 <__libc_init_array>:
 800b878:	b570      	push	{r4, r5, r6, lr}
 800b87a:	2500      	movs	r5, #0
 800b87c:	4e0c      	ldr	r6, [pc, #48]	; (800b8b0 <__libc_init_array+0x38>)
 800b87e:	4c0d      	ldr	r4, [pc, #52]	; (800b8b4 <__libc_init_array+0x3c>)
 800b880:	1ba4      	subs	r4, r4, r6
 800b882:	10a4      	asrs	r4, r4, #2
 800b884:	42a5      	cmp	r5, r4
 800b886:	d109      	bne.n	800b89c <__libc_init_array+0x24>
 800b888:	f000 f948 	bl	800bb1c <_init>
 800b88c:	2500      	movs	r5, #0
 800b88e:	4e0a      	ldr	r6, [pc, #40]	; (800b8b8 <__libc_init_array+0x40>)
 800b890:	4c0a      	ldr	r4, [pc, #40]	; (800b8bc <__libc_init_array+0x44>)
 800b892:	1ba4      	subs	r4, r4, r6
 800b894:	10a4      	asrs	r4, r4, #2
 800b896:	42a5      	cmp	r5, r4
 800b898:	d105      	bne.n	800b8a6 <__libc_init_array+0x2e>
 800b89a:	bd70      	pop	{r4, r5, r6, pc}
 800b89c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b8a0:	4798      	blx	r3
 800b8a2:	3501      	adds	r5, #1
 800b8a4:	e7ee      	b.n	800b884 <__libc_init_array+0xc>
 800b8a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b8aa:	4798      	blx	r3
 800b8ac:	3501      	adds	r5, #1
 800b8ae:	e7f2      	b.n	800b896 <__libc_init_array+0x1e>
 800b8b0:	0800bc38 	.word	0x0800bc38
 800b8b4:	0800bc38 	.word	0x0800bc38
 800b8b8:	0800bc38 	.word	0x0800bc38
 800b8bc:	0800bc54 	.word	0x0800bc54

0800b8c0 <malloc>:
 800b8c0:	4b02      	ldr	r3, [pc, #8]	; (800b8cc <malloc+0xc>)
 800b8c2:	4601      	mov	r1, r0
 800b8c4:	6818      	ldr	r0, [r3, #0]
 800b8c6:	f000 b879 	b.w	800b9bc <_malloc_r>
 800b8ca:	bf00      	nop
 800b8cc:	2000006c 	.word	0x2000006c

0800b8d0 <free>:
 800b8d0:	4b02      	ldr	r3, [pc, #8]	; (800b8dc <free+0xc>)
 800b8d2:	4601      	mov	r1, r0
 800b8d4:	6818      	ldr	r0, [r3, #0]
 800b8d6:	f000 b825 	b.w	800b924 <_free_r>
 800b8da:	bf00      	nop
 800b8dc:	2000006c 	.word	0x2000006c

0800b8e0 <memcmp>:
 800b8e0:	b530      	push	{r4, r5, lr}
 800b8e2:	2400      	movs	r4, #0
 800b8e4:	42a2      	cmp	r2, r4
 800b8e6:	d101      	bne.n	800b8ec <memcmp+0xc>
 800b8e8:	2000      	movs	r0, #0
 800b8ea:	e007      	b.n	800b8fc <memcmp+0x1c>
 800b8ec:	5d03      	ldrb	r3, [r0, r4]
 800b8ee:	3401      	adds	r4, #1
 800b8f0:	190d      	adds	r5, r1, r4
 800b8f2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800b8f6:	42ab      	cmp	r3, r5
 800b8f8:	d0f4      	beq.n	800b8e4 <memcmp+0x4>
 800b8fa:	1b58      	subs	r0, r3, r5
 800b8fc:	bd30      	pop	{r4, r5, pc}

0800b8fe <memcpy>:
 800b8fe:	b510      	push	{r4, lr}
 800b900:	1e43      	subs	r3, r0, #1
 800b902:	440a      	add	r2, r1
 800b904:	4291      	cmp	r1, r2
 800b906:	d100      	bne.n	800b90a <memcpy+0xc>
 800b908:	bd10      	pop	{r4, pc}
 800b90a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b90e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b912:	e7f7      	b.n	800b904 <memcpy+0x6>

0800b914 <memset>:
 800b914:	4603      	mov	r3, r0
 800b916:	4402      	add	r2, r0
 800b918:	4293      	cmp	r3, r2
 800b91a:	d100      	bne.n	800b91e <memset+0xa>
 800b91c:	4770      	bx	lr
 800b91e:	f803 1b01 	strb.w	r1, [r3], #1
 800b922:	e7f9      	b.n	800b918 <memset+0x4>

0800b924 <_free_r>:
 800b924:	b538      	push	{r3, r4, r5, lr}
 800b926:	4605      	mov	r5, r0
 800b928:	2900      	cmp	r1, #0
 800b92a:	d043      	beq.n	800b9b4 <_free_r+0x90>
 800b92c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b930:	1f0c      	subs	r4, r1, #4
 800b932:	2b00      	cmp	r3, #0
 800b934:	bfb8      	it	lt
 800b936:	18e4      	addlt	r4, r4, r3
 800b938:	f000 f8ee 	bl	800bb18 <__malloc_lock>
 800b93c:	4a1e      	ldr	r2, [pc, #120]	; (800b9b8 <_free_r+0x94>)
 800b93e:	6813      	ldr	r3, [r2, #0]
 800b940:	4610      	mov	r0, r2
 800b942:	b933      	cbnz	r3, 800b952 <_free_r+0x2e>
 800b944:	6063      	str	r3, [r4, #4]
 800b946:	6014      	str	r4, [r2, #0]
 800b948:	4628      	mov	r0, r5
 800b94a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b94e:	f000 b8e4 	b.w	800bb1a <__malloc_unlock>
 800b952:	42a3      	cmp	r3, r4
 800b954:	d90b      	bls.n	800b96e <_free_r+0x4a>
 800b956:	6821      	ldr	r1, [r4, #0]
 800b958:	1862      	adds	r2, r4, r1
 800b95a:	4293      	cmp	r3, r2
 800b95c:	bf01      	itttt	eq
 800b95e:	681a      	ldreq	r2, [r3, #0]
 800b960:	685b      	ldreq	r3, [r3, #4]
 800b962:	1852      	addeq	r2, r2, r1
 800b964:	6022      	streq	r2, [r4, #0]
 800b966:	6063      	str	r3, [r4, #4]
 800b968:	6004      	str	r4, [r0, #0]
 800b96a:	e7ed      	b.n	800b948 <_free_r+0x24>
 800b96c:	4613      	mov	r3, r2
 800b96e:	685a      	ldr	r2, [r3, #4]
 800b970:	b10a      	cbz	r2, 800b976 <_free_r+0x52>
 800b972:	42a2      	cmp	r2, r4
 800b974:	d9fa      	bls.n	800b96c <_free_r+0x48>
 800b976:	6819      	ldr	r1, [r3, #0]
 800b978:	1858      	adds	r0, r3, r1
 800b97a:	42a0      	cmp	r0, r4
 800b97c:	d10b      	bne.n	800b996 <_free_r+0x72>
 800b97e:	6820      	ldr	r0, [r4, #0]
 800b980:	4401      	add	r1, r0
 800b982:	1858      	adds	r0, r3, r1
 800b984:	4282      	cmp	r2, r0
 800b986:	6019      	str	r1, [r3, #0]
 800b988:	d1de      	bne.n	800b948 <_free_r+0x24>
 800b98a:	6810      	ldr	r0, [r2, #0]
 800b98c:	6852      	ldr	r2, [r2, #4]
 800b98e:	4401      	add	r1, r0
 800b990:	6019      	str	r1, [r3, #0]
 800b992:	605a      	str	r2, [r3, #4]
 800b994:	e7d8      	b.n	800b948 <_free_r+0x24>
 800b996:	d902      	bls.n	800b99e <_free_r+0x7a>
 800b998:	230c      	movs	r3, #12
 800b99a:	602b      	str	r3, [r5, #0]
 800b99c:	e7d4      	b.n	800b948 <_free_r+0x24>
 800b99e:	6820      	ldr	r0, [r4, #0]
 800b9a0:	1821      	adds	r1, r4, r0
 800b9a2:	428a      	cmp	r2, r1
 800b9a4:	bf01      	itttt	eq
 800b9a6:	6811      	ldreq	r1, [r2, #0]
 800b9a8:	6852      	ldreq	r2, [r2, #4]
 800b9aa:	1809      	addeq	r1, r1, r0
 800b9ac:	6021      	streq	r1, [r4, #0]
 800b9ae:	6062      	str	r2, [r4, #4]
 800b9b0:	605c      	str	r4, [r3, #4]
 800b9b2:	e7c9      	b.n	800b948 <_free_r+0x24>
 800b9b4:	bd38      	pop	{r3, r4, r5, pc}
 800b9b6:	bf00      	nop
 800b9b8:	20002434 	.word	0x20002434

0800b9bc <_malloc_r>:
 800b9bc:	b570      	push	{r4, r5, r6, lr}
 800b9be:	1ccd      	adds	r5, r1, #3
 800b9c0:	f025 0503 	bic.w	r5, r5, #3
 800b9c4:	3508      	adds	r5, #8
 800b9c6:	2d0c      	cmp	r5, #12
 800b9c8:	bf38      	it	cc
 800b9ca:	250c      	movcc	r5, #12
 800b9cc:	2d00      	cmp	r5, #0
 800b9ce:	4606      	mov	r6, r0
 800b9d0:	db01      	blt.n	800b9d6 <_malloc_r+0x1a>
 800b9d2:	42a9      	cmp	r1, r5
 800b9d4:	d903      	bls.n	800b9de <_malloc_r+0x22>
 800b9d6:	230c      	movs	r3, #12
 800b9d8:	6033      	str	r3, [r6, #0]
 800b9da:	2000      	movs	r0, #0
 800b9dc:	bd70      	pop	{r4, r5, r6, pc}
 800b9de:	f000 f89b 	bl	800bb18 <__malloc_lock>
 800b9e2:	4a21      	ldr	r2, [pc, #132]	; (800ba68 <_malloc_r+0xac>)
 800b9e4:	6814      	ldr	r4, [r2, #0]
 800b9e6:	4621      	mov	r1, r4
 800b9e8:	b991      	cbnz	r1, 800ba10 <_malloc_r+0x54>
 800b9ea:	4c20      	ldr	r4, [pc, #128]	; (800ba6c <_malloc_r+0xb0>)
 800b9ec:	6823      	ldr	r3, [r4, #0]
 800b9ee:	b91b      	cbnz	r3, 800b9f8 <_malloc_r+0x3c>
 800b9f0:	4630      	mov	r0, r6
 800b9f2:	f000 f83d 	bl	800ba70 <_sbrk_r>
 800b9f6:	6020      	str	r0, [r4, #0]
 800b9f8:	4629      	mov	r1, r5
 800b9fa:	4630      	mov	r0, r6
 800b9fc:	f000 f838 	bl	800ba70 <_sbrk_r>
 800ba00:	1c43      	adds	r3, r0, #1
 800ba02:	d124      	bne.n	800ba4e <_malloc_r+0x92>
 800ba04:	230c      	movs	r3, #12
 800ba06:	4630      	mov	r0, r6
 800ba08:	6033      	str	r3, [r6, #0]
 800ba0a:	f000 f886 	bl	800bb1a <__malloc_unlock>
 800ba0e:	e7e4      	b.n	800b9da <_malloc_r+0x1e>
 800ba10:	680b      	ldr	r3, [r1, #0]
 800ba12:	1b5b      	subs	r3, r3, r5
 800ba14:	d418      	bmi.n	800ba48 <_malloc_r+0x8c>
 800ba16:	2b0b      	cmp	r3, #11
 800ba18:	d90f      	bls.n	800ba3a <_malloc_r+0x7e>
 800ba1a:	600b      	str	r3, [r1, #0]
 800ba1c:	18cc      	adds	r4, r1, r3
 800ba1e:	50cd      	str	r5, [r1, r3]
 800ba20:	4630      	mov	r0, r6
 800ba22:	f000 f87a 	bl	800bb1a <__malloc_unlock>
 800ba26:	f104 000b 	add.w	r0, r4, #11
 800ba2a:	1d23      	adds	r3, r4, #4
 800ba2c:	f020 0007 	bic.w	r0, r0, #7
 800ba30:	1ac3      	subs	r3, r0, r3
 800ba32:	d0d3      	beq.n	800b9dc <_malloc_r+0x20>
 800ba34:	425a      	negs	r2, r3
 800ba36:	50e2      	str	r2, [r4, r3]
 800ba38:	e7d0      	b.n	800b9dc <_malloc_r+0x20>
 800ba3a:	684b      	ldr	r3, [r1, #4]
 800ba3c:	428c      	cmp	r4, r1
 800ba3e:	bf16      	itet	ne
 800ba40:	6063      	strne	r3, [r4, #4]
 800ba42:	6013      	streq	r3, [r2, #0]
 800ba44:	460c      	movne	r4, r1
 800ba46:	e7eb      	b.n	800ba20 <_malloc_r+0x64>
 800ba48:	460c      	mov	r4, r1
 800ba4a:	6849      	ldr	r1, [r1, #4]
 800ba4c:	e7cc      	b.n	800b9e8 <_malloc_r+0x2c>
 800ba4e:	1cc4      	adds	r4, r0, #3
 800ba50:	f024 0403 	bic.w	r4, r4, #3
 800ba54:	42a0      	cmp	r0, r4
 800ba56:	d005      	beq.n	800ba64 <_malloc_r+0xa8>
 800ba58:	1a21      	subs	r1, r4, r0
 800ba5a:	4630      	mov	r0, r6
 800ba5c:	f000 f808 	bl	800ba70 <_sbrk_r>
 800ba60:	3001      	adds	r0, #1
 800ba62:	d0cf      	beq.n	800ba04 <_malloc_r+0x48>
 800ba64:	6025      	str	r5, [r4, #0]
 800ba66:	e7db      	b.n	800ba20 <_malloc_r+0x64>
 800ba68:	20002434 	.word	0x20002434
 800ba6c:	20002438 	.word	0x20002438

0800ba70 <_sbrk_r>:
 800ba70:	b538      	push	{r3, r4, r5, lr}
 800ba72:	2300      	movs	r3, #0
 800ba74:	4c05      	ldr	r4, [pc, #20]	; (800ba8c <_sbrk_r+0x1c>)
 800ba76:	4605      	mov	r5, r0
 800ba78:	4608      	mov	r0, r1
 800ba7a:	6023      	str	r3, [r4, #0]
 800ba7c:	f7fb ffa6 	bl	80079cc <_sbrk>
 800ba80:	1c43      	adds	r3, r0, #1
 800ba82:	d102      	bne.n	800ba8a <_sbrk_r+0x1a>
 800ba84:	6823      	ldr	r3, [r4, #0]
 800ba86:	b103      	cbz	r3, 800ba8a <_sbrk_r+0x1a>
 800ba88:	602b      	str	r3, [r5, #0]
 800ba8a:	bd38      	pop	{r3, r4, r5, pc}
 800ba8c:	20002598 	.word	0x20002598

0800ba90 <_raise_r>:
 800ba90:	291f      	cmp	r1, #31
 800ba92:	b538      	push	{r3, r4, r5, lr}
 800ba94:	4604      	mov	r4, r0
 800ba96:	460d      	mov	r5, r1
 800ba98:	d904      	bls.n	800baa4 <_raise_r+0x14>
 800ba9a:	2316      	movs	r3, #22
 800ba9c:	6003      	str	r3, [r0, #0]
 800ba9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800baa2:	bd38      	pop	{r3, r4, r5, pc}
 800baa4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800baa6:	b112      	cbz	r2, 800baae <_raise_r+0x1e>
 800baa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800baac:	b94b      	cbnz	r3, 800bac2 <_raise_r+0x32>
 800baae:	4620      	mov	r0, r4
 800bab0:	f000 f830 	bl	800bb14 <_getpid_r>
 800bab4:	462a      	mov	r2, r5
 800bab6:	4601      	mov	r1, r0
 800bab8:	4620      	mov	r0, r4
 800baba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800babe:	f000 b817 	b.w	800baf0 <_kill_r>
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	d00a      	beq.n	800badc <_raise_r+0x4c>
 800bac6:	1c59      	adds	r1, r3, #1
 800bac8:	d103      	bne.n	800bad2 <_raise_r+0x42>
 800baca:	2316      	movs	r3, #22
 800bacc:	6003      	str	r3, [r0, #0]
 800bace:	2001      	movs	r0, #1
 800bad0:	e7e7      	b.n	800baa2 <_raise_r+0x12>
 800bad2:	2400      	movs	r4, #0
 800bad4:	4628      	mov	r0, r5
 800bad6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bada:	4798      	blx	r3
 800badc:	2000      	movs	r0, #0
 800bade:	e7e0      	b.n	800baa2 <_raise_r+0x12>

0800bae0 <raise>:
 800bae0:	4b02      	ldr	r3, [pc, #8]	; (800baec <raise+0xc>)
 800bae2:	4601      	mov	r1, r0
 800bae4:	6818      	ldr	r0, [r3, #0]
 800bae6:	f7ff bfd3 	b.w	800ba90 <_raise_r>
 800baea:	bf00      	nop
 800baec:	2000006c 	.word	0x2000006c

0800baf0 <_kill_r>:
 800baf0:	b538      	push	{r3, r4, r5, lr}
 800baf2:	2300      	movs	r3, #0
 800baf4:	4c06      	ldr	r4, [pc, #24]	; (800bb10 <_kill_r+0x20>)
 800baf6:	4605      	mov	r5, r0
 800baf8:	4608      	mov	r0, r1
 800bafa:	4611      	mov	r1, r2
 800bafc:	6023      	str	r3, [r4, #0]
 800bafe:	f7fb ff57 	bl	80079b0 <_kill>
 800bb02:	1c43      	adds	r3, r0, #1
 800bb04:	d102      	bne.n	800bb0c <_kill_r+0x1c>
 800bb06:	6823      	ldr	r3, [r4, #0]
 800bb08:	b103      	cbz	r3, 800bb0c <_kill_r+0x1c>
 800bb0a:	602b      	str	r3, [r5, #0]
 800bb0c:	bd38      	pop	{r3, r4, r5, pc}
 800bb0e:	bf00      	nop
 800bb10:	20002598 	.word	0x20002598

0800bb14 <_getpid_r>:
 800bb14:	f7fb bf4a 	b.w	80079ac <_getpid>

0800bb18 <__malloc_lock>:
 800bb18:	4770      	bx	lr

0800bb1a <__malloc_unlock>:
 800bb1a:	4770      	bx	lr

0800bb1c <_init>:
 800bb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb1e:	bf00      	nop
 800bb20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb22:	bc08      	pop	{r3}
 800bb24:	469e      	mov	lr, r3
 800bb26:	4770      	bx	lr

0800bb28 <_fini>:
 800bb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb2a:	bf00      	nop
 800bb2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb2e:	bc08      	pop	{r3}
 800bb30:	469e      	mov	lr, r3
 800bb32:	4770      	bx	lr
