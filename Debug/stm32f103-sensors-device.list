
stm32f103-sensors-device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf20  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800d030  0800d030  0001d030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d158  0800d158  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  0800d158  0800d158  0001d158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d160  0800d160  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800d160  0800d160  0001d160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800d170  0800d170  0001d170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800d178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003da4  20000100  0800d278  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20003ea4  0800d278  00023ea4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   000553b9  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c90  00000000  00000000  000754e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000374a9  00000000  00000000  0007d172  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001b68  00000000  00000000  000b4620  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00006db8  00000000  00000000  000b6188  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000092d2  00000000  00000000  000bcf40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001ebbe  00000000  00000000  000c6212  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000a6f5a  00000000  00000000  000e4dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0018bd2a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e88  00000000  00000000  0018bda8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000100 	.word	0x20000100
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d018 	.word	0x0800d018

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000104 	.word	0x20000104
 800014c:	0800d018 	.word	0x0800d018

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_fmul>:
 8000b08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b10:	bf1e      	ittt	ne
 8000b12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b16:	ea92 0f0c 	teqne	r2, ip
 8000b1a:	ea93 0f0c 	teqne	r3, ip
 8000b1e:	d06f      	beq.n	8000c00 <__aeabi_fmul+0xf8>
 8000b20:	441a      	add	r2, r3
 8000b22:	ea80 0c01 	eor.w	ip, r0, r1
 8000b26:	0240      	lsls	r0, r0, #9
 8000b28:	bf18      	it	ne
 8000b2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b2e:	d01e      	beq.n	8000b6e <__aeabi_fmul+0x66>
 8000b30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b48:	bf3e      	ittt	cc
 8000b4a:	0049      	lslcc	r1, r1, #1
 8000b4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b50:	005b      	lslcc	r3, r3, #1
 8000b52:	ea40 0001 	orr.w	r0, r0, r1
 8000b56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b5a:	2afd      	cmp	r2, #253	; 0xfd
 8000b5c:	d81d      	bhi.n	8000b9a <__aeabi_fmul+0x92>
 8000b5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b66:	bf08      	it	eq
 8000b68:	f020 0001 	biceq.w	r0, r0, #1
 8000b6c:	4770      	bx	lr
 8000b6e:	f090 0f00 	teq	r0, #0
 8000b72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b76:	bf08      	it	eq
 8000b78:	0249      	lsleq	r1, r1, #9
 8000b7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b82:	3a7f      	subs	r2, #127	; 0x7f
 8000b84:	bfc2      	ittt	gt
 8000b86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b8e:	4770      	bxgt	lr
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	3a01      	subs	r2, #1
 8000b9a:	dc5d      	bgt.n	8000c58 <__aeabi_fmul+0x150>
 8000b9c:	f112 0f19 	cmn.w	r2, #25
 8000ba0:	bfdc      	itt	le
 8000ba2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bxle	lr
 8000ba8:	f1c2 0200 	rsb	r2, r2, #0
 8000bac:	0041      	lsls	r1, r0, #1
 8000bae:	fa21 f102 	lsr.w	r1, r1, r2
 8000bb2:	f1c2 0220 	rsb	r2, r2, #32
 8000bb6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bbe:	f140 0000 	adc.w	r0, r0, #0
 8000bc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000bc6:	bf08      	it	eq
 8000bc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bcc:	4770      	bx	lr
 8000bce:	f092 0f00 	teq	r2, #0
 8000bd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000bd6:	bf02      	ittt	eq
 8000bd8:	0040      	lsleq	r0, r0, #1
 8000bda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bde:	3a01      	subeq	r2, #1
 8000be0:	d0f9      	beq.n	8000bd6 <__aeabi_fmul+0xce>
 8000be2:	ea40 000c 	orr.w	r0, r0, ip
 8000be6:	f093 0f00 	teq	r3, #0
 8000bea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bee:	bf02      	ittt	eq
 8000bf0:	0049      	lsleq	r1, r1, #1
 8000bf2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000bf6:	3b01      	subeq	r3, #1
 8000bf8:	d0f9      	beq.n	8000bee <__aeabi_fmul+0xe6>
 8000bfa:	ea41 010c 	orr.w	r1, r1, ip
 8000bfe:	e78f      	b.n	8000b20 <__aeabi_fmul+0x18>
 8000c00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c04:	ea92 0f0c 	teq	r2, ip
 8000c08:	bf18      	it	ne
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d00a      	beq.n	8000c26 <__aeabi_fmul+0x11e>
 8000c10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c14:	bf18      	it	ne
 8000c16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c1a:	d1d8      	bne.n	8000bce <__aeabi_fmul+0xc6>
 8000c1c:	ea80 0001 	eor.w	r0, r0, r1
 8000c20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c24:	4770      	bx	lr
 8000c26:	f090 0f00 	teq	r0, #0
 8000c2a:	bf17      	itett	ne
 8000c2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c30:	4608      	moveq	r0, r1
 8000c32:	f091 0f00 	teqne	r1, #0
 8000c36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c3a:	d014      	beq.n	8000c66 <__aeabi_fmul+0x15e>
 8000c3c:	ea92 0f0c 	teq	r2, ip
 8000c40:	d101      	bne.n	8000c46 <__aeabi_fmul+0x13e>
 8000c42:	0242      	lsls	r2, r0, #9
 8000c44:	d10f      	bne.n	8000c66 <__aeabi_fmul+0x15e>
 8000c46:	ea93 0f0c 	teq	r3, ip
 8000c4a:	d103      	bne.n	8000c54 <__aeabi_fmul+0x14c>
 8000c4c:	024b      	lsls	r3, r1, #9
 8000c4e:	bf18      	it	ne
 8000c50:	4608      	movne	r0, r1
 8000c52:	d108      	bne.n	8000c66 <__aeabi_fmul+0x15e>
 8000c54:	ea80 0001 	eor.w	r0, r0, r1
 8000c58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000c6e:	4770      	bx	lr

08000c70 <__aeabi_fdiv>:
 8000c70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c78:	bf1e      	ittt	ne
 8000c7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c7e:	ea92 0f0c 	teqne	r2, ip
 8000c82:	ea93 0f0c 	teqne	r3, ip
 8000c86:	d069      	beq.n	8000d5c <__aeabi_fdiv+0xec>
 8000c88:	eba2 0203 	sub.w	r2, r2, r3
 8000c8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000c90:	0249      	lsls	r1, r1, #9
 8000c92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c96:	d037      	beq.n	8000d08 <__aeabi_fdiv+0x98>
 8000c98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ca0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ca4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	bf38      	it	cc
 8000cac:	005b      	lslcc	r3, r3, #1
 8000cae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	bf24      	itt	cs
 8000cba:	1a5b      	subcs	r3, r3, r1
 8000cbc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000cc0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000cc4:	bf24      	itt	cs
 8000cc6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000cca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000cd2:	bf24      	itt	cs
 8000cd4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000cd8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cdc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ce0:	bf24      	itt	cs
 8000ce2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ce6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000cea:	011b      	lsls	r3, r3, #4
 8000cec:	bf18      	it	ne
 8000cee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000cf2:	d1e0      	bne.n	8000cb6 <__aeabi_fdiv+0x46>
 8000cf4:	2afd      	cmp	r2, #253	; 0xfd
 8000cf6:	f63f af50 	bhi.w	8000b9a <__aeabi_fmul+0x92>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d00:	bf08      	it	eq
 8000d02:	f020 0001 	biceq.w	r0, r0, #1
 8000d06:	4770      	bx	lr
 8000d08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d10:	327f      	adds	r2, #127	; 0x7f
 8000d12:	bfc2      	ittt	gt
 8000d14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d1c:	4770      	bxgt	lr
 8000d1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d22:	f04f 0300 	mov.w	r3, #0
 8000d26:	3a01      	subs	r2, #1
 8000d28:	e737      	b.n	8000b9a <__aeabi_fmul+0x92>
 8000d2a:	f092 0f00 	teq	r2, #0
 8000d2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d32:	bf02      	ittt	eq
 8000d34:	0040      	lsleq	r0, r0, #1
 8000d36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d3a:	3a01      	subeq	r2, #1
 8000d3c:	d0f9      	beq.n	8000d32 <__aeabi_fdiv+0xc2>
 8000d3e:	ea40 000c 	orr.w	r0, r0, ip
 8000d42:	f093 0f00 	teq	r3, #0
 8000d46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d4a:	bf02      	ittt	eq
 8000d4c:	0049      	lsleq	r1, r1, #1
 8000d4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d52:	3b01      	subeq	r3, #1
 8000d54:	d0f9      	beq.n	8000d4a <__aeabi_fdiv+0xda>
 8000d56:	ea41 010c 	orr.w	r1, r1, ip
 8000d5a:	e795      	b.n	8000c88 <__aeabi_fdiv+0x18>
 8000d5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d60:	ea92 0f0c 	teq	r2, ip
 8000d64:	d108      	bne.n	8000d78 <__aeabi_fdiv+0x108>
 8000d66:	0242      	lsls	r2, r0, #9
 8000d68:	f47f af7d 	bne.w	8000c66 <__aeabi_fmul+0x15e>
 8000d6c:	ea93 0f0c 	teq	r3, ip
 8000d70:	f47f af70 	bne.w	8000c54 <__aeabi_fmul+0x14c>
 8000d74:	4608      	mov	r0, r1
 8000d76:	e776      	b.n	8000c66 <__aeabi_fmul+0x15e>
 8000d78:	ea93 0f0c 	teq	r3, ip
 8000d7c:	d104      	bne.n	8000d88 <__aeabi_fdiv+0x118>
 8000d7e:	024b      	lsls	r3, r1, #9
 8000d80:	f43f af4c 	beq.w	8000c1c <__aeabi_fmul+0x114>
 8000d84:	4608      	mov	r0, r1
 8000d86:	e76e      	b.n	8000c66 <__aeabi_fmul+0x15e>
 8000d88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d8c:	bf18      	it	ne
 8000d8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d92:	d1ca      	bne.n	8000d2a <__aeabi_fdiv+0xba>
 8000d94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000d98:	f47f af5c 	bne.w	8000c54 <__aeabi_fmul+0x14c>
 8000d9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000da0:	f47f af3c 	bne.w	8000c1c <__aeabi_fmul+0x114>
 8000da4:	e75f      	b.n	8000c66 <__aeabi_fmul+0x15e>
 8000da6:	bf00      	nop

08000da8 <__aeabi_ldivmod>:
 8000da8:	b97b      	cbnz	r3, 8000dca <__aeabi_ldivmod+0x22>
 8000daa:	b972      	cbnz	r2, 8000dca <__aeabi_ldivmod+0x22>
 8000dac:	2900      	cmp	r1, #0
 8000dae:	bfbe      	ittt	lt
 8000db0:	2000      	movlt	r0, #0
 8000db2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000db6:	e006      	blt.n	8000dc6 <__aeabi_ldivmod+0x1e>
 8000db8:	bf08      	it	eq
 8000dba:	2800      	cmpeq	r0, #0
 8000dbc:	bf1c      	itt	ne
 8000dbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000dc2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000dc6:	f000 b9bf 	b.w	8001148 <__aeabi_idiv0>
 8000dca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	db09      	blt.n	8000dea <__aeabi_ldivmod+0x42>
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db1a      	blt.n	8000e10 <__aeabi_ldivmod+0x68>
 8000dda:	f000 f84d 	bl	8000e78 <__udivmoddi4>
 8000dde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000de6:	b004      	add	sp, #16
 8000de8:	4770      	bx	lr
 8000dea:	4240      	negs	r0, r0
 8000dec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db1b      	blt.n	8000e2c <__aeabi_ldivmod+0x84>
 8000df4:	f000 f840 	bl	8000e78 <__udivmoddi4>
 8000df8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e00:	b004      	add	sp, #16
 8000e02:	4240      	negs	r0, r0
 8000e04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e08:	4252      	negs	r2, r2
 8000e0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e0e:	4770      	bx	lr
 8000e10:	4252      	negs	r2, r2
 8000e12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e16:	f000 f82f 	bl	8000e78 <__udivmoddi4>
 8000e1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e22:	b004      	add	sp, #16
 8000e24:	4240      	negs	r0, r0
 8000e26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e2a:	4770      	bx	lr
 8000e2c:	4252      	negs	r2, r2
 8000e2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e32:	f000 f821 	bl	8000e78 <__udivmoddi4>
 8000e36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e3e:	b004      	add	sp, #16
 8000e40:	4252      	negs	r2, r2
 8000e42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e46:	4770      	bx	lr

08000e48 <__aeabi_uldivmod>:
 8000e48:	b953      	cbnz	r3, 8000e60 <__aeabi_uldivmod+0x18>
 8000e4a:	b94a      	cbnz	r2, 8000e60 <__aeabi_uldivmod+0x18>
 8000e4c:	2900      	cmp	r1, #0
 8000e4e:	bf08      	it	eq
 8000e50:	2800      	cmpeq	r0, #0
 8000e52:	bf1c      	itt	ne
 8000e54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000e58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000e5c:	f000 b974 	b.w	8001148 <__aeabi_idiv0>
 8000e60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e68:	f000 f806 	bl	8000e78 <__udivmoddi4>
 8000e6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e74:	b004      	add	sp, #16
 8000e76:	4770      	bx	lr

08000e78 <__udivmoddi4>:
 8000e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	4604      	mov	r4, r0
 8000e80:	9e08      	ldr	r6, [sp, #32]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d14b      	bne.n	8000f1e <__udivmoddi4+0xa6>
 8000e86:	428a      	cmp	r2, r1
 8000e88:	4615      	mov	r5, r2
 8000e8a:	d967      	bls.n	8000f5c <__udivmoddi4+0xe4>
 8000e8c:	fab2 f282 	clz	r2, r2
 8000e90:	b14a      	cbz	r2, 8000ea6 <__udivmoddi4+0x2e>
 8000e92:	f1c2 0720 	rsb	r7, r2, #32
 8000e96:	fa01 f302 	lsl.w	r3, r1, r2
 8000e9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000e9e:	4095      	lsls	r5, r2
 8000ea0:	ea47 0c03 	orr.w	ip, r7, r3
 8000ea4:	4094      	lsls	r4, r2
 8000ea6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eaa:	fbbc f7fe 	udiv	r7, ip, lr
 8000eae:	fa1f f885 	uxth.w	r8, r5
 8000eb2:	fb0e c317 	mls	r3, lr, r7, ip
 8000eb6:	fb07 f908 	mul.w	r9, r7, r8
 8000eba:	0c21      	lsrs	r1, r4, #16
 8000ebc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ec0:	4599      	cmp	r9, r3
 8000ec2:	d909      	bls.n	8000ed8 <__udivmoddi4+0x60>
 8000ec4:	18eb      	adds	r3, r5, r3
 8000ec6:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000eca:	f080 811c 	bcs.w	8001106 <__udivmoddi4+0x28e>
 8000ece:	4599      	cmp	r9, r3
 8000ed0:	f240 8119 	bls.w	8001106 <__udivmoddi4+0x28e>
 8000ed4:	3f02      	subs	r7, #2
 8000ed6:	442b      	add	r3, r5
 8000ed8:	eba3 0309 	sub.w	r3, r3, r9
 8000edc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ee4:	fb00 f108 	mul.w	r1, r0, r8
 8000ee8:	b2a4      	uxth	r4, r4
 8000eea:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000eee:	42a1      	cmp	r1, r4
 8000ef0:	d909      	bls.n	8000f06 <__udivmoddi4+0x8e>
 8000ef2:	192c      	adds	r4, r5, r4
 8000ef4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ef8:	f080 8107 	bcs.w	800110a <__udivmoddi4+0x292>
 8000efc:	42a1      	cmp	r1, r4
 8000efe:	f240 8104 	bls.w	800110a <__udivmoddi4+0x292>
 8000f02:	3802      	subs	r0, #2
 8000f04:	442c      	add	r4, r5
 8000f06:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000f0a:	2700      	movs	r7, #0
 8000f0c:	1a64      	subs	r4, r4, r1
 8000f0e:	b11e      	cbz	r6, 8000f18 <__udivmoddi4+0xa0>
 8000f10:	2300      	movs	r3, #0
 8000f12:	40d4      	lsrs	r4, r2
 8000f14:	e9c6 4300 	strd	r4, r3, [r6]
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d909      	bls.n	8000f36 <__udivmoddi4+0xbe>
 8000f22:	2e00      	cmp	r6, #0
 8000f24:	f000 80ec 	beq.w	8001100 <__udivmoddi4+0x288>
 8000f28:	2700      	movs	r7, #0
 8000f2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000f2e:	4638      	mov	r0, r7
 8000f30:	4639      	mov	r1, r7
 8000f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f36:	fab3 f783 	clz	r7, r3
 8000f3a:	2f00      	cmp	r7, #0
 8000f3c:	d148      	bne.n	8000fd0 <__udivmoddi4+0x158>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d302      	bcc.n	8000f48 <__udivmoddi4+0xd0>
 8000f42:	4282      	cmp	r2, r0
 8000f44:	f200 80fb 	bhi.w	800113e <__udivmoddi4+0x2c6>
 8000f48:	1a84      	subs	r4, r0, r2
 8000f4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000f4e:	2001      	movs	r0, #1
 8000f50:	469c      	mov	ip, r3
 8000f52:	2e00      	cmp	r6, #0
 8000f54:	d0e0      	beq.n	8000f18 <__udivmoddi4+0xa0>
 8000f56:	e9c6 4c00 	strd	r4, ip, [r6]
 8000f5a:	e7dd      	b.n	8000f18 <__udivmoddi4+0xa0>
 8000f5c:	b902      	cbnz	r2, 8000f60 <__udivmoddi4+0xe8>
 8000f5e:	deff      	udf	#255	; 0xff
 8000f60:	fab2 f282 	clz	r2, r2
 8000f64:	2a00      	cmp	r2, #0
 8000f66:	f040 808f 	bne.w	8001088 <__udivmoddi4+0x210>
 8000f6a:	2701      	movs	r7, #1
 8000f6c:	1b49      	subs	r1, r1, r5
 8000f6e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000f72:	fa1f f985 	uxth.w	r9, r5
 8000f76:	fbb1 fef8 	udiv	lr, r1, r8
 8000f7a:	fb08 111e 	mls	r1, r8, lr, r1
 8000f7e:	fb09 f00e 	mul.w	r0, r9, lr
 8000f82:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000f86:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000f8a:	4298      	cmp	r0, r3
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x126>
 8000f8e:	18eb      	adds	r3, r5, r3
 8000f90:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000f94:	d202      	bcs.n	8000f9c <__udivmoddi4+0x124>
 8000f96:	4298      	cmp	r0, r3
 8000f98:	f200 80cd 	bhi.w	8001136 <__udivmoddi4+0x2be>
 8000f9c:	468e      	mov	lr, r1
 8000f9e:	1a1b      	subs	r3, r3, r0
 8000fa0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fa4:	fb08 3310 	mls	r3, r8, r0, r3
 8000fa8:	fb09 f900 	mul.w	r9, r9, r0
 8000fac:	b2a4      	uxth	r4, r4
 8000fae:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb2:	45a1      	cmp	r9, r4
 8000fb4:	d907      	bls.n	8000fc6 <__udivmoddi4+0x14e>
 8000fb6:	192c      	adds	r4, r5, r4
 8000fb8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000fbc:	d202      	bcs.n	8000fc4 <__udivmoddi4+0x14c>
 8000fbe:	45a1      	cmp	r9, r4
 8000fc0:	f200 80b6 	bhi.w	8001130 <__udivmoddi4+0x2b8>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	eba4 0409 	sub.w	r4, r4, r9
 8000fca:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000fce:	e79e      	b.n	8000f0e <__udivmoddi4+0x96>
 8000fd0:	f1c7 0520 	rsb	r5, r7, #32
 8000fd4:	40bb      	lsls	r3, r7
 8000fd6:	fa22 fc05 	lsr.w	ip, r2, r5
 8000fda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000fde:	fa21 f405 	lsr.w	r4, r1, r5
 8000fe2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000fe6:	fbb4 f9fe 	udiv	r9, r4, lr
 8000fea:	fa1f f88c 	uxth.w	r8, ip
 8000fee:	fb0e 4419 	mls	r4, lr, r9, r4
 8000ff2:	fa20 f305 	lsr.w	r3, r0, r5
 8000ff6:	40b9      	lsls	r1, r7
 8000ff8:	fb09 fa08 	mul.w	sl, r9, r8
 8000ffc:	4319      	orrs	r1, r3
 8000ffe:	0c0b      	lsrs	r3, r1, #16
 8001000:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001004:	45a2      	cmp	sl, r4
 8001006:	fa02 f207 	lsl.w	r2, r2, r7
 800100a:	fa00 f307 	lsl.w	r3, r0, r7
 800100e:	d90b      	bls.n	8001028 <__udivmoddi4+0x1b0>
 8001010:	eb1c 0404 	adds.w	r4, ip, r4
 8001014:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001018:	f080 8088 	bcs.w	800112c <__udivmoddi4+0x2b4>
 800101c:	45a2      	cmp	sl, r4
 800101e:	f240 8085 	bls.w	800112c <__udivmoddi4+0x2b4>
 8001022:	f1a9 0902 	sub.w	r9, r9, #2
 8001026:	4464      	add	r4, ip
 8001028:	eba4 040a 	sub.w	r4, r4, sl
 800102c:	fbb4 f0fe 	udiv	r0, r4, lr
 8001030:	fb0e 4410 	mls	r4, lr, r0, r4
 8001034:	fb00 fa08 	mul.w	sl, r0, r8
 8001038:	b289      	uxth	r1, r1
 800103a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800103e:	45a2      	cmp	sl, r4
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x1dc>
 8001042:	eb1c 0404 	adds.w	r4, ip, r4
 8001046:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800104a:	d26b      	bcs.n	8001124 <__udivmoddi4+0x2ac>
 800104c:	45a2      	cmp	sl, r4
 800104e:	d969      	bls.n	8001124 <__udivmoddi4+0x2ac>
 8001050:	3802      	subs	r0, #2
 8001052:	4464      	add	r4, ip
 8001054:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001058:	fba0 8902 	umull	r8, r9, r0, r2
 800105c:	eba4 040a 	sub.w	r4, r4, sl
 8001060:	454c      	cmp	r4, r9
 8001062:	4641      	mov	r1, r8
 8001064:	46ce      	mov	lr, r9
 8001066:	d354      	bcc.n	8001112 <__udivmoddi4+0x29a>
 8001068:	d051      	beq.n	800110e <__udivmoddi4+0x296>
 800106a:	2e00      	cmp	r6, #0
 800106c:	d069      	beq.n	8001142 <__udivmoddi4+0x2ca>
 800106e:	1a5a      	subs	r2, r3, r1
 8001070:	eb64 040e 	sbc.w	r4, r4, lr
 8001074:	fa04 f505 	lsl.w	r5, r4, r5
 8001078:	fa22 f307 	lsr.w	r3, r2, r7
 800107c:	40fc      	lsrs	r4, r7
 800107e:	431d      	orrs	r5, r3
 8001080:	e9c6 5400 	strd	r5, r4, [r6]
 8001084:	2700      	movs	r7, #0
 8001086:	e747      	b.n	8000f18 <__udivmoddi4+0xa0>
 8001088:	4095      	lsls	r5, r2
 800108a:	f1c2 0320 	rsb	r3, r2, #32
 800108e:	fa21 f003 	lsr.w	r0, r1, r3
 8001092:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8001096:	fbb0 f7f8 	udiv	r7, r0, r8
 800109a:	fa1f f985 	uxth.w	r9, r5
 800109e:	fb08 0017 	mls	r0, r8, r7, r0
 80010a2:	fa24 f303 	lsr.w	r3, r4, r3
 80010a6:	4091      	lsls	r1, r2
 80010a8:	fb07 fc09 	mul.w	ip, r7, r9
 80010ac:	430b      	orrs	r3, r1
 80010ae:	0c19      	lsrs	r1, r3, #16
 80010b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010b4:	458c      	cmp	ip, r1
 80010b6:	fa04 f402 	lsl.w	r4, r4, r2
 80010ba:	d907      	bls.n	80010cc <__udivmoddi4+0x254>
 80010bc:	1869      	adds	r1, r5, r1
 80010be:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80010c2:	d231      	bcs.n	8001128 <__udivmoddi4+0x2b0>
 80010c4:	458c      	cmp	ip, r1
 80010c6:	d92f      	bls.n	8001128 <__udivmoddi4+0x2b0>
 80010c8:	3f02      	subs	r7, #2
 80010ca:	4429      	add	r1, r5
 80010cc:	eba1 010c 	sub.w	r1, r1, ip
 80010d0:	fbb1 f0f8 	udiv	r0, r1, r8
 80010d4:	fb08 1c10 	mls	ip, r8, r0, r1
 80010d8:	fb00 fe09 	mul.w	lr, r0, r9
 80010dc:	b299      	uxth	r1, r3
 80010de:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80010e2:	458e      	cmp	lr, r1
 80010e4:	d907      	bls.n	80010f6 <__udivmoddi4+0x27e>
 80010e6:	1869      	adds	r1, r5, r1
 80010e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80010ec:	d218      	bcs.n	8001120 <__udivmoddi4+0x2a8>
 80010ee:	458e      	cmp	lr, r1
 80010f0:	d916      	bls.n	8001120 <__udivmoddi4+0x2a8>
 80010f2:	3802      	subs	r0, #2
 80010f4:	4429      	add	r1, r5
 80010f6:	eba1 010e 	sub.w	r1, r1, lr
 80010fa:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80010fe:	e73a      	b.n	8000f76 <__udivmoddi4+0xfe>
 8001100:	4637      	mov	r7, r6
 8001102:	4630      	mov	r0, r6
 8001104:	e708      	b.n	8000f18 <__udivmoddi4+0xa0>
 8001106:	460f      	mov	r7, r1
 8001108:	e6e6      	b.n	8000ed8 <__udivmoddi4+0x60>
 800110a:	4618      	mov	r0, r3
 800110c:	e6fb      	b.n	8000f06 <__udivmoddi4+0x8e>
 800110e:	4543      	cmp	r3, r8
 8001110:	d2ab      	bcs.n	800106a <__udivmoddi4+0x1f2>
 8001112:	ebb8 0102 	subs.w	r1, r8, r2
 8001116:	eb69 020c 	sbc.w	r2, r9, ip
 800111a:	3801      	subs	r0, #1
 800111c:	4696      	mov	lr, r2
 800111e:	e7a4      	b.n	800106a <__udivmoddi4+0x1f2>
 8001120:	4618      	mov	r0, r3
 8001122:	e7e8      	b.n	80010f6 <__udivmoddi4+0x27e>
 8001124:	4608      	mov	r0, r1
 8001126:	e795      	b.n	8001054 <__udivmoddi4+0x1dc>
 8001128:	4607      	mov	r7, r0
 800112a:	e7cf      	b.n	80010cc <__udivmoddi4+0x254>
 800112c:	4681      	mov	r9, r0
 800112e:	e77b      	b.n	8001028 <__udivmoddi4+0x1b0>
 8001130:	3802      	subs	r0, #2
 8001132:	442c      	add	r4, r5
 8001134:	e747      	b.n	8000fc6 <__udivmoddi4+0x14e>
 8001136:	f1ae 0e02 	sub.w	lr, lr, #2
 800113a:	442b      	add	r3, r5
 800113c:	e72f      	b.n	8000f9e <__udivmoddi4+0x126>
 800113e:	4638      	mov	r0, r7
 8001140:	e707      	b.n	8000f52 <__udivmoddi4+0xda>
 8001142:	4637      	mov	r7, r6
 8001144:	e6e8      	b.n	8000f18 <__udivmoddi4+0xa0>
 8001146:	bf00      	nop

08001148 <__aeabi_idiv0>:
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <_ZN8RegisterC1Ethh>:
    if (value > max_value)
        return max_value;
    return value;
}

Register::Register(uint16_t address, uint8_t bit_count, uint8_t bit_bias) {
 800114c:	b430      	push	{r4, r5}
    if (value < min_value)
 800114e:	b9fa      	cbnz	r2, 8001190 <_ZN8RegisterC1Ethh+0x44>
 8001150:	2b07      	cmp	r3, #7
 8001152:	bf28      	it	cs
 8001154:	2307      	movcs	r3, #7
    uint32_t mask = 0x00;
    for (uint8_t i = 0; i < bit_in_reg; ++i) {
        if (i < bit_count)
            mask = (mask << 1) + 1;
        else
            if (i < (bit_count + bit_bias))
 8001156:	2b00      	cmp	r3, #0
 8001158:	bf14      	ite	ne
 800115a:	2202      	movne	r2, #2
 800115c:	2201      	moveq	r2, #1
            mask = (mask << 1) + 1;
 800115e:	2501      	movs	r5, #1
            if (i < (bit_count + bit_bias))
 8001160:	18ec      	adds	r4, r5, r3
 8001162:	2c02      	cmp	r4, #2
 8001164:	dd00      	ble.n	8001168 <_ZN8RegisterC1Ethh+0x1c>
                mask <<= 1;
 8001166:	0052      	lsls	r2, r2, #1
            if (i < (bit_count + bit_bias))
 8001168:	2c03      	cmp	r4, #3
 800116a:	dd00      	ble.n	800116e <_ZN8RegisterC1Ethh+0x22>
                mask <<= 1;
 800116c:	0052      	lsls	r2, r2, #1
            if (i < (bit_count + bit_bias))
 800116e:	2c04      	cmp	r4, #4
 8001170:	dd00      	ble.n	8001174 <_ZN8RegisterC1Ethh+0x28>
                mask <<= 1;
 8001172:	0052      	lsls	r2, r2, #1
            if (i < (bit_count + bit_bias))
 8001174:	2c05      	cmp	r4, #5
 8001176:	dd00      	ble.n	800117a <_ZN8RegisterC1Ethh+0x2e>
                mask <<= 1;
 8001178:	0052      	lsls	r2, r2, #1
            if (i < (bit_count + bit_bias))
 800117a:	2c06      	cmp	r4, #6
 800117c:	dc25      	bgt.n	80011ca <_ZN8RegisterC1Ethh+0x7e>
 800117e:	2c07      	cmp	r4, #7
                mask <<= 1;
 8001180:	bfc8      	it	gt
 8001182:	0052      	lslgt	r2, r2, #1
    }
    _address = address;
    _bit_count = bit_count;
 8001184:	7085      	strb	r5, [r0, #2]
    _address = address;
 8001186:	8001      	strh	r1, [r0, #0]
    _bit_bias = bit_bias;
 8001188:	70c3      	strb	r3, [r0, #3]
    _mask = mask;
 800118a:	6042      	str	r2, [r0, #4]
}
 800118c:	bc30      	pop	{r4, r5}
 800118e:	4770      	bx	lr
 8001190:	2a08      	cmp	r2, #8
 8001192:	4615      	mov	r5, r2
 8001194:	bf28      	it	cs
 8001196:	2508      	movcs	r5, #8
 8001198:	f1c5 0408 	rsb	r4, r5, #8
 800119c:	b2e4      	uxtb	r4, r4
 800119e:	42a3      	cmp	r3, r4
 80011a0:	bf28      	it	cs
 80011a2:	4623      	movcs	r3, r4
        if (i < bit_count)
 80011a4:	2a01      	cmp	r2, #1
 80011a6:	d0d6      	beq.n	8001156 <_ZN8RegisterC1Ethh+0xa>
 80011a8:	2a02      	cmp	r2, #2
 80011aa:	d91c      	bls.n	80011e6 <_ZN8RegisterC1Ethh+0x9a>
 80011ac:	2a03      	cmp	r2, #3
 80011ae:	d917      	bls.n	80011e0 <_ZN8RegisterC1Ethh+0x94>
 80011b0:	2a04      	cmp	r2, #4
 80011b2:	d912      	bls.n	80011da <_ZN8RegisterC1Ethh+0x8e>
 80011b4:	2a05      	cmp	r2, #5
 80011b6:	d90d      	bls.n	80011d4 <_ZN8RegisterC1Ethh+0x88>
 80011b8:	2a06      	cmp	r2, #6
 80011ba:	d908      	bls.n	80011ce <_ZN8RegisterC1Ethh+0x82>
 80011bc:	2a07      	cmp	r2, #7
            mask = (mask << 1) + 1;
 80011be:	bf88      	it	hi
 80011c0:	22ff      	movhi	r2, #255	; 0xff
        if (i < bit_count)
 80011c2:	d8df      	bhi.n	8001184 <_ZN8RegisterC1Ethh+0x38>
            mask = (mask << 1) + 1;
 80011c4:	227f      	movs	r2, #127	; 0x7f
 80011c6:	18ec      	adds	r4, r5, r3
 80011c8:	e7d9      	b.n	800117e <_ZN8RegisterC1Ethh+0x32>
                mask <<= 1;
 80011ca:	0052      	lsls	r2, r2, #1
 80011cc:	e7d7      	b.n	800117e <_ZN8RegisterC1Ethh+0x32>
            mask = (mask << 1) + 1;
 80011ce:	223f      	movs	r2, #63	; 0x3f
 80011d0:	18ec      	adds	r4, r5, r3
 80011d2:	e7d2      	b.n	800117a <_ZN8RegisterC1Ethh+0x2e>
 80011d4:	221f      	movs	r2, #31
 80011d6:	18ec      	adds	r4, r5, r3
 80011d8:	e7cc      	b.n	8001174 <_ZN8RegisterC1Ethh+0x28>
 80011da:	220f      	movs	r2, #15
 80011dc:	18ec      	adds	r4, r5, r3
 80011de:	e7c6      	b.n	800116e <_ZN8RegisterC1Ethh+0x22>
 80011e0:	2207      	movs	r2, #7
 80011e2:	18ec      	adds	r4, r5, r3
 80011e4:	e7c0      	b.n	8001168 <_ZN8RegisterC1Ethh+0x1c>
 80011e6:	2203      	movs	r2, #3
 80011e8:	e7ba      	b.n	8001160 <_ZN8RegisterC1Ethh+0x14>
 80011ea:	bf00      	nop

080011ec <_ZN8Register7addressEv>:

uint16_t Register::address() {
    return _address;
}
 80011ec:	8800      	ldrh	r0, [r0, #0]
 80011ee:	4770      	bx	lr

080011f0 <_ZN8Register4maskEv>:
uint8_t Register::bit_bias() {
    return _bit_bias;
}
uint32_t Register::mask() {
    return _mask;
}
 80011f0:	6840      	ldr	r0, [r0, #4]
 80011f2:	4770      	bx	lr

080011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>:
    return !(left == right);
}



Address_field::Address_field(Register *registers, uint8_t reg_count, bool reg_revers, char mode, uint32_t min_value,
 80011f4:	b4f0      	push	{r4, r5, r6, r7}
 80011f6:	f89d 7010 	ldrb.w	r7, [sp, #16]
 80011fa:	e9dd 6505 	ldrd	r6, r5, [sp, #20]
    init_address_field(registers, reg_count, reg_revers, mode, min_value, max_value, reserved_value, reserv_count);
}

bool Address_field::init_address_field(Register *registers, uint8_t reg_count, bool reg_revers, char mode, uint32_t min_value,
                                       uint32_t max_value, uint32_t *reserved_value, uint32_t reserv_count) {
    if ((mode != 'r') && (mode != 'w') && (mode != 'c'))
 80011fe:	f1a7 0463 	sub.w	r4, r7, #99	; 0x63
 8001202:	fa5f fc84 	uxtb.w	ip, r4
 8001206:	f1bc 0f14 	cmp.w	ip, #20
 800120a:	d831      	bhi.n	8001270 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm+0x7c>
 800120c:	4c1d      	ldr	r4, [pc, #116]	; (8001284 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm+0x90>)
 800120e:	fa24 f40c 	lsr.w	r4, r4, ip
 8001212:	43e4      	mvns	r4, r4
 8001214:	f014 0401 	ands.w	r4, r4, #1
 8001218:	d12a      	bne.n	8001270 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm+0x7c>
    uint8_t bit_count = 0;
    uint32_t value = 0;
    _mode = mode;
    _registers = registers;
    _reg_count = reg_count;
    _reg_revers = reg_revers;
 800121a:	7143      	strb	r3, [r0, #5]
    _reserved_value = reserved_value;
 800121c:	9b07      	ldr	r3, [sp, #28]
    _mode = mode;
 800121e:	7607      	strb	r7, [r0, #24]
    _reserved_value = reserved_value;
 8001220:	6103      	str	r3, [r0, #16]
    _reserv_count = reserv_count;
 8001222:	9b08      	ldr	r3, [sp, #32]
    _registers = registers;
 8001224:	6001      	str	r1, [r0, #0]
    _reg_count = reg_count;
 8001226:	7102      	strb	r2, [r0, #4]
    _reserv_count = reserv_count;
 8001228:	6143      	str	r3, [r0, #20]
    _max_address = 0;
 800122a:	80c4      	strh	r4, [r0, #6]
    for (int i = 0; i < _reg_count; ++i) {
 800122c:	b33a      	cbz	r2, 800127e <_ZN13Address_fieldC1EP8RegisterhbcmmPmm+0x8a>
    uint8_t bit_count = 0;
 800122e:	4623      	mov	r3, r4
 8001230:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    return _address;
 8001234:	880f      	ldrh	r7, [r1, #0]
        bit_count += _registers[i].bit_count();
 8001236:	f891 c002 	ldrb.w	ip, [r1, #2]
        if (_max_address < _registers[i].address())
 800123a:	42a7      	cmp	r7, r4
 800123c:	f101 0108 	add.w	r1, r1, #8
        bit_count += _registers[i].bit_count();
 8001240:	4463      	add	r3, ip
            _max_address = _registers[i].address();
 8001242:	bf84      	itt	hi
 8001244:	463c      	movhi	r4, r7
 8001246:	80c7      	strhhi	r7, [r0, #6]
    for (int i = 0; i < _reg_count; ++i) {
 8001248:	4291      	cmp	r1, r2
        bit_count += _registers[i].bit_count();
 800124a:	b2db      	uxtb	r3, r3
    for (int i = 0; i < _reg_count; ++i) {
 800124c:	d1f2      	bne.n	8001234 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm+0x40>
    }
    for (int i = 0; i < bit_count; ++i)
 800124e:	b1b3      	cbz	r3, 800127e <_ZN13Address_fieldC1EP8RegisterhbcmmPmm+0x8a>
    uint32_t value = 0;
 8001250:	2200      	movs	r2, #0
    for (int i = 0; i < bit_count; ++i)
 8001252:	4611      	mov	r1, r2
 8001254:	3101      	adds	r1, #1
        value = (value << 1) + 1;
 8001256:	0052      	lsls	r2, r2, #1
    for (int i = 0; i < bit_count; ++i)
 8001258:	4299      	cmp	r1, r3
        value = (value << 1) + 1;
 800125a:	f102 0201 	add.w	r2, r2, #1
    for (int i = 0; i < bit_count; ++i)
 800125e:	d1f9      	bne.n	8001254 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm+0x60>
 8001260:	4296      	cmp	r6, r2
 8001262:	4633      	mov	r3, r6
 8001264:	bf28      	it	cs
 8001266:	4613      	movcs	r3, r2
    if (value < min_value)
 8001268:	42ae      	cmp	r6, r5
    _min_value = value_range(min_value, 0, value);
 800126a:	6083      	str	r3, [r0, #8]
    if (value < min_value)
 800126c:	d902      	bls.n	8001274 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm+0x80>
    _max_value = value_range(max_value, min_value, value);
 800126e:	60c6      	str	r6, [r0, #12]
}
 8001270:	bcf0      	pop	{r4, r5, r6, r7}
 8001272:	4770      	bx	lr
 8001274:	4295      	cmp	r5, r2
 8001276:	bf28      	it	cs
 8001278:	4615      	movcs	r5, r2
 800127a:	462e      	mov	r6, r5
 800127c:	e7f7      	b.n	800126e <_ZN13Address_fieldC1EP8RegisterhbcmmPmm+0x7a>
    for (int i = 0; i < bit_count; ++i)
 800127e:	2300      	movs	r3, #0
    uint32_t value = 0;
 8001280:	461a      	mov	r2, r3
 8001282:	e7f1      	b.n	8001268 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm+0x74>
 8001284:	00108001 	.word	0x00108001

08001288 <_ZN13Address_field9get_valueEPhi>:
    return false;
}

uint32_t Address_field::get_value(uint8_t *register_value, int register_count) {
    if (register_count < (_max_address + 1))
 8001288:	88c3      	ldrh	r3, [r0, #6]
uint32_t Address_field::get_value(uint8_t *register_value, int register_count) {
 800128a:	b4f0      	push	{r4, r5, r6, r7}
    if (register_count < (_max_address + 1))
 800128c:	4293      	cmp	r3, r2
 800128e:	da2f      	bge.n	80012f0 <_ZN13Address_field9get_valueEPhi+0x68>
        return -1;
    uint32_t value = 0;
    if(_reg_revers) {
 8001290:	7945      	ldrb	r5, [r0, #5]
 8001292:	7903      	ldrb	r3, [r0, #4]
 8001294:	b1a5      	cbz	r5, 80012c0 <_ZN13Address_field9get_valueEPhi+0x38>
        for (int i = 0; i < _reg_count; ++i) {
 8001296:	b383      	cbz	r3, 80012fa <_ZN13Address_field9get_valueEPhi+0x72>
    uint32_t value = 0;
 8001298:	2500      	movs	r5, #0
 800129a:	6802      	ldr	r2, [r0, #0]
 800129c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
            value <<= _registers[i].bit_count();
            value |= (register_value[_registers[i].address()] & _registers[i].mask()) >> _registers[i].bit_bias();
 80012a0:	8810      	ldrh	r0, [r2, #0]
 80012a2:	6857      	ldr	r7, [r2, #4]
 80012a4:	5c0c      	ldrb	r4, [r1, r0]
 80012a6:	78d6      	ldrb	r6, [r2, #3]
            value <<= _registers[i].bit_count();
 80012a8:	7890      	ldrb	r0, [r2, #2]
            value |= (register_value[_registers[i].address()] & _registers[i].mask()) >> _registers[i].bit_bias();
 80012aa:	403c      	ands	r4, r7
 80012ac:	3208      	adds	r2, #8
 80012ae:	40f4      	lsrs	r4, r6
            value <<= _registers[i].bit_count();
 80012b0:	4085      	lsls	r5, r0
        for (int i = 0; i < _reg_count; ++i) {
 80012b2:	4293      	cmp	r3, r2
            value |= (register_value[_registers[i].address()] & _registers[i].mask()) >> _registers[i].bit_bias();
 80012b4:	ea45 0504 	orr.w	r5, r5, r4
        for (int i = 0; i < _reg_count; ++i) {
 80012b8:	d1f2      	bne.n	80012a0 <_ZN13Address_field9get_valueEPhi+0x18>
            value <<= _registers[i].bit_count();
            value |= (register_value[_registers[i].address()] & _registers[i].mask()) >> _registers[i].bit_bias();
        }
    }
    return value;
}
 80012ba:	4628      	mov	r0, r5
 80012bc:	bcf0      	pop	{r4, r5, r6, r7}
 80012be:	4770      	bx	lr
        for (int i = (_reg_count - 1); i >= 0; --i) {
 80012c0:	b1db      	cbz	r3, 80012fa <_ZN13Address_field9get_valueEPhi+0x72>
            value <<= _registers[i].bit_count();
 80012c2:	6807      	ldr	r7, [r0, #0]
 80012c4:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
            value |= (register_value[_registers[i].address()] & _registers[i].mask()) >> _registers[i].bit_bias();
 80012c8:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80012cc:	f853 6c04 	ldr.w	r6, [r3, #-4]
 80012d0:	5c8a      	ldrb	r2, [r1, r2]
 80012d2:	f813 4c05 	ldrb.w	r4, [r3, #-5]
            value <<= _registers[i].bit_count();
 80012d6:	f813 0c06 	ldrb.w	r0, [r3, #-6]
            value |= (register_value[_registers[i].address()] & _registers[i].mask()) >> _registers[i].bit_bias();
 80012da:	4032      	ands	r2, r6
 80012dc:	3b08      	subs	r3, #8
 80012de:	40e2      	lsrs	r2, r4
            value <<= _registers[i].bit_count();
 80012e0:	4085      	lsls	r5, r0
        for (int i = (_reg_count - 1); i >= 0; --i) {
 80012e2:	429f      	cmp	r7, r3
            value |= (register_value[_registers[i].address()] & _registers[i].mask()) >> _registers[i].bit_bias();
 80012e4:	ea45 0502 	orr.w	r5, r5, r2
        for (int i = (_reg_count - 1); i >= 0; --i) {
 80012e8:	d1ee      	bne.n	80012c8 <_ZN13Address_field9get_valueEPhi+0x40>
}
 80012ea:	4628      	mov	r0, r5
 80012ec:	bcf0      	pop	{r4, r5, r6, r7}
 80012ee:	4770      	bx	lr
        return -1;
 80012f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
 80012f4:	4628      	mov	r0, r5
 80012f6:	bcf0      	pop	{r4, r5, r6, r7}
 80012f8:	4770      	bx	lr
    uint32_t value = 0;
 80012fa:	461d      	mov	r5, r3
}
 80012fc:	4628      	mov	r0, r5
 80012fe:	bcf0      	pop	{r4, r5, r6, r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop

08001304 <_ZN13Address_field9set_valueEmPhi>:
bool Address_field::set_value(uint32_t value, uint8_t *register_value, int register_count) {
 8001304:	b4f0      	push	{r4, r5, r6, r7}
    if ((register_count < (_max_address + 1)) || (_mode == 'r') ||
 8001306:	88c4      	ldrh	r4, [r0, #6]
 8001308:	429c      	cmp	r4, r3
 800130a:	da3d      	bge.n	8001388 <_ZN13Address_field9set_valueEmPhi+0x84>
 800130c:	7e03      	ldrb	r3, [r0, #24]
 800130e:	2b72      	cmp	r3, #114	; 0x72
 8001310:	d03a      	beq.n	8001388 <_ZN13Address_field9set_valueEmPhi+0x84>
 8001312:	6883      	ldr	r3, [r0, #8]
 8001314:	428b      	cmp	r3, r1
 8001316:	d837      	bhi.n	8001388 <_ZN13Address_field9set_valueEmPhi+0x84>
                (value < _min_value) || (value > _max_value))
 8001318:	68c3      	ldr	r3, [r0, #12]
 800131a:	428b      	cmp	r3, r1
 800131c:	d334      	bcc.n	8001388 <_ZN13Address_field9set_valueEmPhi+0x84>
        return true;
    for (int i = 0; i < (int)_reserv_count; ++i)
 800131e:	6946      	ldr	r6, [r0, #20]
 8001320:	2e00      	cmp	r6, #0
 8001322:	dd0c      	ble.n	800133e <_ZN13Address_field9set_valueEmPhi+0x3a>
        if (value == _reserved_value[i])
 8001324:	6904      	ldr	r4, [r0, #16]
 8001326:	6823      	ldr	r3, [r4, #0]
 8001328:	4299      	cmp	r1, r3
 800132a:	d02d      	beq.n	8001388 <_ZN13Address_field9set_valueEmPhi+0x84>
    for (int i = 0; i < (int)_reserv_count; ++i)
 800132c:	2300      	movs	r3, #0
 800132e:	e003      	b.n	8001338 <_ZN13Address_field9set_valueEmPhi+0x34>
        if (value == _reserved_value[i])
 8001330:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8001334:	428d      	cmp	r5, r1
 8001336:	d027      	beq.n	8001388 <_ZN13Address_field9set_valueEmPhi+0x84>
    for (int i = 0; i < (int)_reserv_count; ++i)
 8001338:	3301      	adds	r3, #1
 800133a:	42b3      	cmp	r3, r6
 800133c:	d1f8      	bne.n	8001330 <_ZN13Address_field9set_valueEmPhi+0x2c>
            return true;
    if(_reg_revers) {
 800133e:	7944      	ldrb	r4, [r0, #5]
 8001340:	7903      	ldrb	r3, [r0, #4]
 8001342:	b324      	cbz	r4, 800138e <_ZN13Address_field9set_valueEmPhi+0x8a>
        for (int i = (_reg_count - 1); i >= 0; --i) {
 8001344:	1e5d      	subs	r5, r3, #1
 8001346:	b1eb      	cbz	r3, 8001384 <_ZN13Address_field9set_valueEmPhi+0x80>
 8001348:	6803      	ldr	r3, [r0, #0]
 800134a:	00ec      	lsls	r4, r5, #3
            register_value[_registers[i].address()] &= ~_registers[i].mask();
 800134c:	5b1e      	ldrh	r6, [r3, r4]
 800134e:	4423      	add	r3, r4
 8001350:	685f      	ldr	r7, [r3, #4]
 8001352:	5d93      	ldrb	r3, [r2, r6]
        for (int i = (_reg_count - 1); i >= 0; --i) {
 8001354:	3d01      	subs	r5, #1
            register_value[_registers[i].address()] &= ~_registers[i].mask();
 8001356:	ea23 0307 	bic.w	r3, r3, r7
 800135a:	5593      	strb	r3, [r2, r6]
            register_value[_registers[i].address()] |= (value & (_registers[i].mask() >> _registers[i].bit_bias())) << _registers[i].bit_bias();
 800135c:	6806      	ldr	r6, [r0, #0]
 800135e:	1933      	adds	r3, r6, r4
 8001360:	78df      	ldrb	r7, [r3, #3]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	5b36      	ldrh	r6, [r6, r4]
 8001366:	40fb      	lsrs	r3, r7
 8001368:	f812 c006 	ldrb.w	ip, [r2, r6]
 800136c:	400b      	ands	r3, r1
 800136e:	40bb      	lsls	r3, r7
 8001370:	ea43 030c 	orr.w	r3, r3, ip
 8001374:	5593      	strb	r3, [r2, r6]
            value >>= _registers[i].bit_count();
 8001376:	6803      	ldr	r3, [r0, #0]
    return _bit_count;
 8001378:	191e      	adds	r6, r3, r4
            value >>= _registers[i].bit_count();
 800137a:	78b6      	ldrb	r6, [r6, #2]
 800137c:	3c08      	subs	r4, #8
 800137e:	40f1      	lsrs	r1, r6
        for (int i = (_reg_count - 1); i >= 0; --i) {
 8001380:	1c6e      	adds	r6, r5, #1
 8001382:	d1e3      	bne.n	800134c <_ZN13Address_field9set_valueEmPhi+0x48>
            register_value[_registers[i].address()] &= ~_registers[i].mask();
            register_value[_registers[i].address()] |= (value & (_registers[i].mask() >> _registers[i].bit_bias())) << _registers[i].bit_bias();
            value >>= _registers[i].bit_count();
        }
    }
    return false;
 8001384:	2000      	movs	r0, #0
 8001386:	e000      	b.n	800138a <_ZN13Address_field9set_valueEmPhi+0x86>
        return true;
 8001388:	2001      	movs	r0, #1
}
 800138a:	bcf0      	pop	{r4, r5, r6, r7}
 800138c:	4770      	bx	lr
        for (int i = 0; i < _reg_count; ++i) {
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f8      	beq.n	8001384 <_ZN13Address_field9set_valueEmPhi+0x80>
 8001392:	6803      	ldr	r3, [r0, #0]
            register_value[_registers[i].address()] &= ~_registers[i].mask();
 8001394:	f833 6034 	ldrh.w	r6, [r3, r4, lsl #3]
 8001398:	00e5      	lsls	r5, r4, #3
 800139a:	442b      	add	r3, r5
 800139c:	685f      	ldr	r7, [r3, #4]
 800139e:	5d93      	ldrb	r3, [r2, r6]
 80013a0:	ea23 0307 	bic.w	r3, r3, r7
 80013a4:	5593      	strb	r3, [r2, r6]
            register_value[_registers[i].address()] |= (value & (_registers[i].mask() >> _registers[i].bit_bias())) << _registers[i].bit_bias();
 80013a6:	6806      	ldr	r6, [r0, #0]
 80013a8:	1973      	adds	r3, r6, r5
 80013aa:	78df      	ldrb	r7, [r3, #3]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f836 6034 	ldrh.w	r6, [r6, r4, lsl #3]
 80013b2:	40fb      	lsrs	r3, r7
 80013b4:	f812 c006 	ldrb.w	ip, [r2, r6]
 80013b8:	400b      	ands	r3, r1
 80013ba:	40bb      	lsls	r3, r7
 80013bc:	ea43 030c 	orr.w	r3, r3, ip
 80013c0:	5593      	strb	r3, [r2, r6]
            value >>= _registers[i].bit_count();
 80013c2:	6803      	ldr	r3, [r0, #0]
        for (int i = 0; i < _reg_count; ++i) {
 80013c4:	7906      	ldrb	r6, [r0, #4]
    return _bit_count;
 80013c6:	441d      	add	r5, r3
            value >>= _registers[i].bit_count();
 80013c8:	78ad      	ldrb	r5, [r5, #2]
        for (int i = 0; i < _reg_count; ++i) {
 80013ca:	3401      	adds	r4, #1
 80013cc:	42a6      	cmp	r6, r4
            value >>= _registers[i].bit_count();
 80013ce:	fa21 f105 	lsr.w	r1, r1, r5
        for (int i = 0; i < _reg_count; ++i) {
 80013d2:	dcdf      	bgt.n	8001394 <_ZN13Address_field9set_valueEmPhi+0x90>
 80013d4:	e7d6      	b.n	8001384 <_ZN13Address_field9set_valueEmPhi+0x80>
 80013d6:	bf00      	nop

080013d8 <_ZN13Address_field13get_registersEv>:

Register *Address_field::get_registers() {
    return _registers;
}
 80013d8:	6800      	ldr	r0, [r0, #0]
 80013da:	4770      	bx	lr

080013dc <_ZN13Address_field13get_reg_countEv>:
uint8_t Address_field::get_reg_count() {
    return _reg_count;
}
 80013dc:	7900      	ldrb	r0, [r0, #4]
 80013de:	4770      	bx	lr

080013e0 <_ZeqRK13Address_fieldS1_>:
char Address_field::get_mode() {
    return _mode;
}

bool operator==(const Address_field& left, const Address_field& right) {
    if(left._reg_count != right._reg_count)
 80013e0:	7902      	ldrb	r2, [r0, #4]
 80013e2:	790b      	ldrb	r3, [r1, #4]
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d001      	beq.n	80013ec <_ZeqRK13Address_fieldS1_+0xc>
        return false;
 80013e8:	2000      	movs	r0, #0
    for(int i = 0; i < (int)left._reserv_count; ++i) {
        if(left._reserved_value[i] != right._reserved_value[i])
            return false;
    }
    return true;
}
 80013ea:	4770      	bx	lr
bool operator==(const Address_field& left, const Address_field& right) {
 80013ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(left._max_address != right._max_address)
 80013f0:	88ca      	ldrh	r2, [r1, #6]
 80013f2:	88c4      	ldrh	r4, [r0, #6]
 80013f4:	4294      	cmp	r4, r2
 80013f6:	d002      	beq.n	80013fe <_ZeqRK13Address_fieldS1_+0x1e>
        return false;
 80013f8:	2000      	movs	r0, #0
}
 80013fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(left._min_value != right._min_value)
 80013fe:	6884      	ldr	r4, [r0, #8]
 8001400:	688a      	ldr	r2, [r1, #8]
 8001402:	4294      	cmp	r4, r2
 8001404:	d1f8      	bne.n	80013f8 <_ZeqRK13Address_fieldS1_+0x18>
    if(left._max_value != right._max_value)
 8001406:	68c4      	ldr	r4, [r0, #12]
 8001408:	68ca      	ldr	r2, [r1, #12]
 800140a:	4294      	cmp	r4, r2
 800140c:	d1f4      	bne.n	80013f8 <_ZeqRK13Address_fieldS1_+0x18>
    if(left._reserv_count != right._reserv_count)
 800140e:	f8d0 c014 	ldr.w	ip, [r0, #20]
 8001412:	694a      	ldr	r2, [r1, #20]
 8001414:	4594      	cmp	ip, r2
 8001416:	d1ef      	bne.n	80013f8 <_ZeqRK13Address_fieldS1_+0x18>
    if(left._mode != right._mode)
 8001418:	7e04      	ldrb	r4, [r0, #24]
 800141a:	7e0a      	ldrb	r2, [r1, #24]
 800141c:	4294      	cmp	r4, r2
 800141e:	d1eb      	bne.n	80013f8 <_ZeqRK13Address_fieldS1_+0x18>
    for(int i = 0; i < left._reg_count; ++i) {
 8001420:	b34b      	cbz	r3, 8001476 <_ZeqRK13Address_fieldS1_+0x96>
        if(left._registers[i] != right._registers[i])
 8001422:	6804      	ldr	r4, [r0, #0]
 8001424:	680a      	ldr	r2, [r1, #0]
    if(left._address != right._address)
 8001426:	8826      	ldrh	r6, [r4, #0]
 8001428:	8815      	ldrh	r5, [r2, #0]
 800142a:	42ae      	cmp	r6, r5
 800142c:	d1e4      	bne.n	80013f8 <_ZeqRK13Address_fieldS1_+0x18>
    if(left._bit_count != right._bit_count)
 800142e:	78a6      	ldrb	r6, [r4, #2]
 8001430:	7895      	ldrb	r5, [r2, #2]
 8001432:	42ae      	cmp	r6, r5
 8001434:	d1e0      	bne.n	80013f8 <_ZeqRK13Address_fieldS1_+0x18>
    if(left._bit_bias != right._bit_bias)
 8001436:	78e6      	ldrb	r6, [r4, #3]
 8001438:	78d5      	ldrb	r5, [r2, #3]
 800143a:	42ae      	cmp	r6, r5
 800143c:	d1dc      	bne.n	80013f8 <_ZeqRK13Address_fieldS1_+0x18>
    for(int i = 0; i < left._reg_count; ++i) {
 800143e:	2500      	movs	r5, #0
 8001440:	e010      	b.n	8001464 <_ZeqRK13Address_fieldS1_+0x84>
    if(left._address != right._address)
 8001442:	8927      	ldrh	r7, [r4, #8]
 8001444:	8916      	ldrh	r6, [r2, #8]
 8001446:	42b7      	cmp	r7, r6
 8001448:	d1d6      	bne.n	80013f8 <_ZeqRK13Address_fieldS1_+0x18>
    if(left._bit_count != right._bit_count)
 800144a:	7aa7      	ldrb	r7, [r4, #10]
 800144c:	7a96      	ldrb	r6, [r2, #10]
 800144e:	3408      	adds	r4, #8
 8001450:	42b7      	cmp	r7, r6
 8001452:	f102 0208 	add.w	r2, r2, #8
 8001456:	d1cf      	bne.n	80013f8 <_ZeqRK13Address_fieldS1_+0x18>
    if(left._bit_bias != right._bit_bias)
 8001458:	f89e 700b 	ldrb.w	r7, [lr, #11]
 800145c:	f898 600b 	ldrb.w	r6, [r8, #11]
 8001460:	42b7      	cmp	r7, r6
 8001462:	d1c9      	bne.n	80013f8 <_ZeqRK13Address_fieldS1_+0x18>
    if(left._mask != right._mask)
 8001464:	6867      	ldr	r7, [r4, #4]
 8001466:	6856      	ldr	r6, [r2, #4]
 8001468:	46a6      	mov	lr, r4
 800146a:	42b7      	cmp	r7, r6
 800146c:	4690      	mov	r8, r2
 800146e:	d1c3      	bne.n	80013f8 <_ZeqRK13Address_fieldS1_+0x18>
    for(int i = 0; i < left._reg_count; ++i) {
 8001470:	3501      	adds	r5, #1
 8001472:	429d      	cmp	r5, r3
 8001474:	d1e5      	bne.n	8001442 <_ZeqRK13Address_fieldS1_+0x62>
    for(int i = 0; i < (int)left._reserv_count; ++i) {
 8001476:	f1bc 0f00 	cmp.w	ip, #0
 800147a:	dd11      	ble.n	80014a0 <_ZeqRK13Address_fieldS1_+0xc0>
        if(left._reserved_value[i] != right._reserved_value[i])
 800147c:	6903      	ldr	r3, [r0, #16]
 800147e:	690a      	ldr	r2, [r1, #16]
 8001480:	6819      	ldr	r1, [r3, #0]
 8001482:	6810      	ldr	r0, [r2, #0]
 8001484:	4288      	cmp	r0, r1
 8001486:	d1b7      	bne.n	80013f8 <_ZeqRK13Address_fieldS1_+0x18>
 8001488:	4619      	mov	r1, r3
    for(int i = 0; i < (int)left._reserv_count; ++i) {
 800148a:	2300      	movs	r3, #0
 800148c:	e005      	b.n	800149a <_ZeqRK13Address_fieldS1_+0xba>
        if(left._reserved_value[i] != right._reserved_value[i])
 800148e:	f851 4f04 	ldr.w	r4, [r1, #4]!
 8001492:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8001496:	4284      	cmp	r4, r0
 8001498:	d1ae      	bne.n	80013f8 <_ZeqRK13Address_fieldS1_+0x18>
    for(int i = 0; i < (int)left._reserv_count; ++i) {
 800149a:	3301      	adds	r3, #1
 800149c:	4563      	cmp	r3, ip
 800149e:	d1f6      	bne.n	800148e <_ZeqRK13Address_fieldS1_+0xae>
    return true;
 80014a0:	2001      	movs	r0, #1
 80014a2:	e7aa      	b.n	80013fa <_ZeqRK13Address_fieldS1_+0x1a>

080014a4 <_ZN10LoRa_class9field_setE13Address_fieldmb.constprop.22>:
	_FifoTxBaseAddr = 0;
	_packet_length = 0;
	_reg_field.init(spi, _nss_port, _nss_pin);
}

uint8_t LoRa_class::field_set(Address_field field, uint32_t value, bool write) {
 80014a4:	b084      	sub	sp, #16
 80014a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a8:	b087      	sub	sp, #28
 80014aa:	ac0d      	add	r4, sp, #52	; 0x34
    uint8_t result;
    result = _reg_field.set_field_value(field, value);
 80014ac:	ad10      	add	r5, sp, #64	; 0x40
uint8_t LoRa_class::field_set(Address_field field, uint32_t value, bool write) {
 80014ae:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    result = _reg_field.set_field_value(field, value);
 80014b2:	f100 063c 	add.w	r6, r0, #60	; 0x3c
 80014b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014ba:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
uint8_t LoRa_class::field_set(Address_field field, uint32_t value, bool write) {
 80014be:	9f14      	ldr	r7, [sp, #80]	; 0x50
    result = _reg_field.set_field_value(field, value);
 80014c0:	4630      	mov	r0, r6
 80014c2:	9704      	str	r7, [sp, #16]
 80014c4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80014c8:	f002 f8fa 	bl	80036c0 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
    if(write) {
        result = _reg_field.register_write(field, true, true);
 80014cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014d0:	2501      	movs	r5, #1
 80014d2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80014d6:	4630      	mov	r0, r6
 80014d8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80014dc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80014e0:	f001 fe94 	bl	800320c <_ZN13LoRa_register14register_writeE13Address_fieldbb>
    }
    return result;
}
 80014e4:	b007      	add	sp, #28
 80014e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80014ea:	b004      	add	sp, #16
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop

080014f0 <_ZN10LoRa_class10packet_endEmb.part.2>:
    field_set(PayloadLength, _packet_length);
    return false;
}

// Отправка пакета
bool LoRa_class::packet_end(uint32_t wait, bool sleep) {
 80014f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mode_TX();
    bool result = false;
    if(wait > 0) {
        uint32_t tx_done = 0;
 80014f4:	2600      	movs	r6, #0
bool LoRa_class::packet_end(uint32_t wait, bool sleep) {
 80014f6:	b0a7      	sub	sp, #156	; 0x9c
        uint32_t tx_done = 0;
 80014f8:	f10d 0898 	add.w	r8, sp, #152	; 0x98
bool LoRa_class::packet_end(uint32_t wait, bool sleep) {
 80014fc:	4607      	mov	r7, r0
 80014fe:	460d      	mov	r5, r1
 8001500:	4691      	mov	r9, r2
        uint32_t tx_done = 0;
 8001502:	f848 6d80 	str.w	r6, [r8, #-128]!
        bool signal = false;
        uint32_t time, start_time, read_time;
        int pin_done;
        tx_done = 0;
        for(time = HAL_GetTick(), start_time = time, read_time = time; HAL_GetTick() - time < wait;) {
 8001506:	f005 fdeb 	bl	80070e0 <HAL_GetTick>
    return _reg_field.get_field_value(field, value, read);
 800150a:	f04f 0b01 	mov.w	fp, #1
        for(time = HAL_GetTick(), start_time = time, read_time = time; HAL_GetTick() - time < wait;) {
 800150e:	4604      	mov	r4, r0
    return _reg_field.get_field_value(field, value, read);
 8001510:	f107 0a3c 	add.w	sl, r7, #60	; 0x3c
 8001514:	e004      	b.n	8001520 <_ZN10LoRa_class10packet_endEmb.part.2+0x30>
            // Считывание каждые 10 мс.
            if(HAL_GetTick() - read_time > 10) {
 8001516:	f005 fde3 	bl	80070e0 <HAL_GetTick>
 800151a:	1b00      	subs	r0, r0, r4
 800151c:	280a      	cmp	r0, #10
 800151e:	d80c      	bhi.n	800153a <_ZN10LoRa_class10packet_endEmb.part.2+0x4a>
        for(time = HAL_GetTick(), start_time = time, read_time = time; HAL_GetTick() - time < wait;) {
 8001520:	f005 fdde 	bl	80070e0 <HAL_GetTick>
 8001524:	1b00      	subs	r0, r0, r4
 8001526:	42a8      	cmp	r0, r5
 8001528:	d3f5      	bcc.n	8001516 <_ZN10LoRa_class10packet_endEmb.part.2+0x26>
                if(tx_done != 0) {
                    break;
                }
            }
        }
        if(sleep && (tx_done != 0)) {
 800152a:	f1b9 0f00 	cmp.w	r9, #0
 800152e:	d001      	beq.n	8001534 <_ZN10LoRa_class10packet_endEmb.part.2+0x44>
 8001530:	9b06      	ldr	r3, [sp, #24]
 8001532:	bb23      	cbnz	r3, 800157e <_ZN10LoRa_class10packet_endEmb.part.2+0x8e>
            mode_sleep();
        }
    }
    return result;
}
 8001534:	b027      	add	sp, #156	; 0x9c
 8001536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (_dio0_pin != 0) {
 800153a:	8ab9      	ldrh	r1, [r7, #20]
 800153c:	2900      	cmp	r1, #0
 800153e:	d150      	bne.n	80015e2 <_ZN10LoRa_class10packet_endEmb.part.2+0xf2>
 8001540:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 8001614 <_ZN10LoRa_class10packet_endEmb.part.2+0x124>
 8001544:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8001548:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800154c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001550:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001554:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    return _reg_field.get_field_value(field, value, read);
 8001558:	e9cd 8b04 	strd	r8, fp, [sp, #16]
 800155c:	ab0d      	add	r3, sp, #52	; 0x34
 800155e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001560:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001564:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8001568:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
 800156c:	4650      	mov	r0, sl
 800156e:	f002 f931 	bl	80037d4 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>
                if(tx_done != 0) {
 8001572:	9b06      	ldr	r3, [sp, #24]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0d3      	beq.n	8001520 <_ZN10LoRa_class10packet_endEmb.part.2+0x30>
        if(sleep && (tx_done != 0)) {
 8001578:	f1b9 0f00 	cmp.w	r9, #0
 800157c:	d0da      	beq.n	8001534 <_ZN10LoRa_class10packet_endEmb.part.2+0x44>
    uint32_t values[3] = {1, 0, mode};
 800157e:	f04f 0c00 	mov.w	ip, #0
 8001582:	f04f 0801 	mov.w	r8, #1
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8001586:	4c20      	ldr	r4, [pc, #128]	; (8001608 <_ZN10LoRa_class10packet_endEmb.part.2+0x118>)
 8001588:	ad11      	add	r5, sp, #68	; 0x44
 800158a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800158c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800158e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001592:	4c1e      	ldr	r4, [pc, #120]	; (800160c <_ZN10LoRa_class10packet_endEmb.part.2+0x11c>)
 8001594:	ae18      	add	r6, sp, #96	; 0x60
 8001596:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800159a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800159c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800159e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80015a2:	4d1b      	ldr	r5, [pc, #108]	; (8001610 <_ZN10LoRa_class10packet_endEmb.part.2+0x120>)
 80015a4:	ac1f      	add	r4, sp, #124	; 0x7c
 80015a6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80015aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 80015b2:	373c      	adds	r7, #60	; 0x3c
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 80015b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 80015b8:	2303      	movs	r3, #3
 80015ba:	a911      	add	r1, sp, #68	; 0x44
 80015bc:	aa07      	add	r2, sp, #28
 80015be:	4638      	mov	r0, r7
    uint32_t values[3] = {1, 0, mode};
 80015c0:	e9cd cc08 	strd	ip, ip, [sp, #32]
 80015c4:	f8cd 801c 	str.w	r8, [sp, #28]
    result = _reg_field.set_field_value(fields, values, amt);
 80015c8:	f001 fbae 	bl	8002d28 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
        result = _reg_field.register_write(fields, amt, true, true);
 80015cc:	f8cd 8000 	str.w	r8, [sp]
 80015d0:	4643      	mov	r3, r8
 80015d2:	a911      	add	r1, sp, #68	; 0x44
 80015d4:	4638      	mov	r0, r7
 80015d6:	2203      	movs	r2, #3
 80015d8:	f001 fca0 	bl	8002f1c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
}
 80015dc:	b027      	add	sp, #156	; 0x9c
 80015de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                	pin_done = HAL_GPIO_ReadPin(_dio0_port, _dio0_pin);
 80015e2:	69b8      	ldr	r0, [r7, #24]
 80015e4:	f005 ff34 	bl	8007450 <HAL_GPIO_ReadPin>
                if ((_dio0_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 80015e8:	8abb      	ldrh	r3, [r7, #20]
                        signal = true;
 80015ea:	2801      	cmp	r0, #1
 80015ec:	bf08      	it	eq
 80015ee:	2601      	moveq	r6, #1
                if ((_dio0_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0a5      	beq.n	8001540 <_ZN10LoRa_class10packet_endEmb.part.2+0x50>
 80015f4:	f005 fd74 	bl	80070e0 <HAL_GetTick>
 80015f8:	1b00      	subs	r0, r0, r4
 80015fa:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80015fe:	d89f      	bhi.n	8001540 <_ZN10LoRa_class10packet_endEmb.part.2+0x50>
 8001600:	2e00      	cmp	r6, #0
 8001602:	d0b6      	beq.n	8001572 <_ZN10LoRa_class10packet_endEmb.part.2+0x82>
 8001604:	e79c      	b.n	8001540 <_ZN10LoRa_class10packet_endEmb.part.2+0x50>
 8001606:	bf00      	nop
 8001608:	20001178 	.word	0x20001178
 800160c:	200011b0 	.word	0x200011b0
 8001610:	20001204 	.word	0x20001204
 8001614:	20001568 	.word	0x20001568

08001618 <_ZN10LoRa_classC1Ev>:
LoRa_class::LoRa_class(/* args */) {
 8001618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800161a:	4604      	mov	r4, r0
 800161c:	f100 053c 	add.w	r5, r0, #60	; 0x3c
 8001620:	4628      	mov	r0, r5
 8001622:	f001 f8a7 	bl	8002774 <_ZN13LoRa_registerC1Ev>
 8001626:	f504 7003 	add.w	r0, r4, #524	; 0x20c
 800162a:	f000 ffd7 	bl	80025dc <_ZN11LoRa_packetC1Ev>
	_dio1_pin = LORA_DIO1_Pin;
 800162e:	2204      	movs	r2, #4
	_dio3_pin = 0;
 8001630:	2100      	movs	r1, #0
	_reset_pin = LORA_RESET_Pin;
 8001632:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	_dio0_pin = LORA_DIO0_Pin;
 8001636:	f44f 6c80 	mov.w	ip, #1024	; 0x400
	_nss_pin = LORA_NSS_Pin;
 800163a:	2310      	movs	r3, #16
	_frequency = 0;
 800163c:	2600      	movs	r6, #0
 800163e:	2700      	movs	r7, #0
	_reg_field.init(spi, _nss_port, _nss_pin);
 8001640:	4628      	mov	r0, r5
	_dio1_pin = LORA_DIO1_Pin;
 8001642:	83a2      	strh	r2, [r4, #28]
	_reset_port = LORA_RESET_GPIO_Port;
 8001644:	4d0b      	ldr	r5, [pc, #44]	; (8001674 <_ZN10LoRa_classC1Ev+0x5c>)
	_nss_port = LORA_NSS_GPIO_Port;
 8001646:	4a0c      	ldr	r2, [pc, #48]	; (8001678 <_ZN10LoRa_classC1Ev+0x60>)
	_reset_pin = LORA_RESET_Pin;
 8001648:	f8a4 e004 	strh.w	lr, [r4, #4]
	_dio0_pin = LORA_DIO0_Pin;
 800164c:	f8a4 c014 	strh.w	ip, [r4, #20]
	_frequency = 0;
 8001650:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
	_reset_port = LORA_RESET_GPIO_Port;
 8001654:	60a5      	str	r5, [r4, #8]
	_dio0_port = LORA_DIO0_GPIO_Port;
 8001656:	61a5      	str	r5, [r4, #24]
	_dio1_port = LORA_DIO1_GPIO_Port;
 8001658:	6225      	str	r5, [r4, #32]
	_nss_pin = LORA_NSS_Pin;
 800165a:	81a3      	strh	r3, [r4, #12]
	_nss_port = LORA_NSS_GPIO_Port;
 800165c:	6122      	str	r2, [r4, #16]
	_dio3_pin = 0;
 800165e:	84a1      	strh	r1, [r4, #36]	; 0x24
	_dio3_port = 0;
 8001660:	62a1      	str	r1, [r4, #40]	; 0x28
	_spi = spi;
 8001662:	6021      	str	r1, [r4, #0]
	_FifoTxBaseAddr = 0;
 8001664:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	_packet_length = 0;
 8001668:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	_reg_field.init(spi, _nss_port, _nss_pin);
 800166c:	f001 f8f4 	bl	8002858 <_ZN13LoRa_register4initEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
}
 8001670:	4620      	mov	r0, r4
 8001672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001674:	40010c00 	.word	0x40010c00
 8001678:	40010800 	.word	0x40010800

0800167c <_ZN10LoRa_classD1Ev>:
LoRa_class::~LoRa_class() {
 800167c:	b510      	push	{r4, lr}
 800167e:	4604      	mov	r4, r0
    if(_spi != nullptr)
 8001680:	6800      	ldr	r0, [r0, #0]
 8001682:	b110      	cbz	r0, 800168a <_ZN10LoRa_classD1Ev+0xe>
        delete _spi;
 8001684:	2158      	movs	r1, #88	; 0x58
 8001686:	f00a fb15 	bl	800bcb4 <_ZdlPvj>
LoRa_class::~LoRa_class() {
 800168a:	f504 7003 	add.w	r0, r4, #524	; 0x20c
 800168e:	f000 ffd7 	bl	8002640 <_ZN11LoRa_packetD1Ev>
 8001692:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8001696:	f001 f8dd 	bl	8002854 <_ZN13LoRa_registerD1Ev>
}
 800169a:	4620      	mov	r0, r4
 800169c:	bd10      	pop	{r4, pc}
 800169e:	bf00      	nop

080016a0 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef>:
void LoRa_class::init(SPI_HandleTypeDef *spi) {
 80016a0:	b4f0      	push	{r4, r5, r6, r7}
	_dio1_pin = LORA_DIO1_Pin;
 80016a2:	2204      	movs	r2, #4
	_dio0_pin = LORA_DIO0_Pin;
 80016a4:	f44f 6580 	mov.w	r5, #1024	; 0x400
	_frequency = 0;
 80016a8:	2600      	movs	r6, #0
 80016aa:	2700      	movs	r7, #0
	_dio3_pin = 0;
 80016ac:	2400      	movs	r4, #0
	_reset_pin = LORA_RESET_Pin;
 80016ae:	f44f 6c00 	mov.w	ip, #2048	; 0x800
	_nss_pin = LORA_NSS_Pin;
 80016b2:	2310      	movs	r3, #16
	_dio0_pin = LORA_DIO0_Pin;
 80016b4:	8285      	strh	r5, [r0, #20]
	_dio1_pin = LORA_DIO1_Pin;
 80016b6:	8382      	strh	r2, [r0, #28]
	_reset_port = LORA_RESET_GPIO_Port;
 80016b8:	4d0a      	ldr	r5, [pc, #40]	; (80016e4 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef+0x44>)
	_frequency = 0;
 80016ba:	e9c0 670c 	strd	r6, r7, [r0, #48]	; 0x30
	_nss_port = LORA_NSS_GPIO_Port;
 80016be:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef+0x48>)
	_spi = spi;
 80016c0:	6001      	str	r1, [r0, #0]
	_reset_pin = LORA_RESET_Pin;
 80016c2:	f8a0 c004 	strh.w	ip, [r0, #4]
	_reset_port = LORA_RESET_GPIO_Port;
 80016c6:	6085      	str	r5, [r0, #8]
	_dio0_port = LORA_DIO0_GPIO_Port;
 80016c8:	6185      	str	r5, [r0, #24]
	_dio1_port = LORA_DIO1_GPIO_Port;
 80016ca:	6205      	str	r5, [r0, #32]
	_nss_pin = LORA_NSS_Pin;
 80016cc:	8183      	strh	r3, [r0, #12]
	_nss_port = LORA_NSS_GPIO_Port;
 80016ce:	6102      	str	r2, [r0, #16]
	_dio3_pin = 0;
 80016d0:	8484      	strh	r4, [r0, #36]	; 0x24
	_dio3_port = 0;
 80016d2:	6284      	str	r4, [r0, #40]	; 0x28
	_FifoTxBaseAddr = 0;
 80016d4:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
	_packet_length = 0;
 80016d8:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
}
 80016dc:	bcf0      	pop	{r4, r5, r6, r7}
	_reg_field.init(spi, _nss_port, _nss_pin);
 80016de:	303c      	adds	r0, #60	; 0x3c
 80016e0:	f001 b8ba 	b.w	8002858 <_ZN13LoRa_register4initEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 80016e4:	40010c00 	.word	0x40010c00
 80016e8:	40010800 	.word	0x40010800

080016ec <_ZN10LoRa_class8set_modeEh>:
uint8_t LoRa_class::set_mode(uint8_t mode) {
 80016ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016f0:	4680      	mov	r8, r0
 80016f2:	468e      	mov	lr, r1
    uint32_t values[3] = {1, 0, mode};
 80016f4:	f04f 0c00 	mov.w	ip, #0
 80016f8:	2701      	movs	r7, #1
uint8_t LoRa_class::set_mode(uint8_t mode) {
 80016fa:	b09a      	sub	sp, #104	; 0x68
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 80016fc:	4c16      	ldr	r4, [pc, #88]	; (8001758 <_ZN10LoRa_class8set_modeEh+0x6c>)
 80016fe:	ad05      	add	r5, sp, #20
 8001700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001704:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001708:	4c14      	ldr	r4, [pc, #80]	; (800175c <_ZN10LoRa_class8set_modeEh+0x70>)
 800170a:	ae0c      	add	r6, sp, #48	; 0x30
 800170c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001710:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001712:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001714:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001718:	4d11      	ldr	r5, [pc, #68]	; (8001760 <_ZN10LoRa_class8set_modeEh+0x74>)
 800171a:	ac13      	add	r4, sp, #76	; 0x4c
 800171c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8001720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001724:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 8001728:	f108 083c 	add.w	r8, r8, #60	; 0x3c
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 800172c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 8001730:	2303      	movs	r3, #3
 8001732:	a905      	add	r1, sp, #20
 8001734:	aa02      	add	r2, sp, #8
 8001736:	4640      	mov	r0, r8
    uint32_t values[3] = {1, 0, mode};
 8001738:	e9cd ce03 	strd	ip, lr, [sp, #12]
 800173c:	9702      	str	r7, [sp, #8]
    result = _reg_field.set_field_value(fields, values, amt);
 800173e:	f001 faf3 	bl	8002d28 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
        result = _reg_field.register_write(fields, amt, true, true);
 8001742:	4640      	mov	r0, r8
 8001744:	9700      	str	r7, [sp, #0]
 8001746:	463b      	mov	r3, r7
 8001748:	a905      	add	r1, sp, #20
 800174a:	2203      	movs	r2, #3
 800174c:	f001 fbe6 	bl	8002f1c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
}
 8001750:	b01a      	add	sp, #104	; 0x68
 8001752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001756:	bf00      	nop
 8001758:	20001178 	.word	0x20001178
 800175c:	200011b0 	.word	0x200011b0
 8001760:	20001204 	.word	0x20001204

08001764 <_ZN10LoRa_class14mode_RX_singleEb>:
uint8_t LoRa_class::mode_RX_single(bool set_dio) {
 8001764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (set_dio & ((_dio0_pin != 0) || (_dio1_pin != 0))) {
 8001768:	8a83      	ldrh	r3, [r0, #20]
uint8_t LoRa_class::mode_RX_single(bool set_dio) {
 800176a:	b0ac      	sub	sp, #176	; 0xb0
 800176c:	f100 073c 	add.w	r7, r0, #60	; 0x3c
    if (set_dio & ((_dio0_pin != 0) || (_dio1_pin != 0))) {
 8001770:	b90b      	cbnz	r3, 8001776 <_ZN10LoRa_class14mode_RX_singleEb+0x12>
 8001772:	8b83      	ldrh	r3, [r0, #28]
 8001774:	b10b      	cbz	r3, 800177a <_ZN10LoRa_class14mode_RX_singleEb+0x16>
 8001776:	2900      	cmp	r1, #0
 8001778:	d134      	bne.n	80017e4 <_ZN10LoRa_class14mode_RX_singleEb+0x80>
    uint32_t values[3] = {1, 0, mode};
 800177a:	f04f 0e00 	mov.w	lr, #0
 800177e:	f04f 0801 	mov.w	r8, #1
 8001782:	f04f 0c06 	mov.w	ip, #6
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8001786:	4c32      	ldr	r4, [pc, #200]	; (8001850 <_ZN10LoRa_class14mode_RX_singleEb+0xec>)
 8001788:	ad17      	add	r5, sp, #92	; 0x5c
 800178a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800178c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800178e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001792:	4c30      	ldr	r4, [pc, #192]	; (8001854 <_ZN10LoRa_class14mode_RX_singleEb+0xf0>)
 8001794:	ae1e      	add	r6, sp, #120	; 0x78
 8001796:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800179a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800179c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800179e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80017a2:	4d2d      	ldr	r5, [pc, #180]	; (8001858 <_ZN10LoRa_class14mode_RX_singleEb+0xf4>)
 80017a4:	ac25      	add	r4, sp, #148	; 0x94
 80017a6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80017aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 80017b2:	2303      	movs	r3, #3
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 80017b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 80017b8:	a917      	add	r1, sp, #92	; 0x5c
 80017ba:	aa06      	add	r2, sp, #24
 80017bc:	4638      	mov	r0, r7
    uint32_t values[3] = {1, 0, mode};
 80017be:	f8cd e01c 	str.w	lr, [sp, #28]
 80017c2:	f8cd c020 	str.w	ip, [sp, #32]
 80017c6:	f8cd 8018 	str.w	r8, [sp, #24]
    result = _reg_field.set_field_value(fields, values, amt);
 80017ca:	f001 faad 	bl	8002d28 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
        result = _reg_field.register_write(fields, amt, true, true);
 80017ce:	f8cd 8000 	str.w	r8, [sp]
 80017d2:	4643      	mov	r3, r8
 80017d4:	a917      	add	r1, sp, #92	; 0x5c
 80017d6:	4638      	mov	r0, r7
 80017d8:	2203      	movs	r2, #3
 80017da:	f001 fb9f 	bl	8002f1c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
}
 80017de:	b02c      	add	sp, #176	; 0xb0
 80017e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = _reg_field.set_field_value(field, value);
 80017e4:	2600      	movs	r6, #0
 80017e6:	4d1d      	ldr	r5, [pc, #116]	; (800185c <_ZN10LoRa_class14mode_RX_singleEb+0xf8>)
 80017e8:	ac09      	add	r4, sp, #36	; 0x24
 80017ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80017f6:	ab0c      	add	r3, sp, #48	; 0x30
 80017f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017fa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80017fe:	ac09      	add	r4, sp, #36	; 0x24
 8001800:	9604      	str	r6, [sp, #16]
 8001802:	4d17      	ldr	r5, [pc, #92]	; (8001860 <_ZN10LoRa_class14mode_RX_singleEb+0xfc>)
 8001804:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001808:	4638      	mov	r0, r7
 800180a:	ac10      	add	r4, sp, #64	; 0x40
 800180c:	f001 ff58 	bl	80036c0 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
 8001810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001814:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001818:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800181c:	ac13      	add	r4, sp, #76	; 0x4c
 800181e:	9604      	str	r6, [sp, #16]
 8001820:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001824:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001828:	ad10      	add	r5, sp, #64	; 0x40
 800182a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800182e:	4638      	mov	r0, r7
 8001830:	f001 ff46 	bl	80036c0 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
        result = _reg_field.register_write(field, true, true);
 8001834:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001838:	2401      	movs	r4, #1
 800183a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800183e:	4638      	mov	r0, r7
 8001840:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001844:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001848:	f001 fce0 	bl	800320c <_ZN13LoRa_register14register_writeE13Address_fieldbb>
 800184c:	e795      	b.n	800177a <_ZN10LoRa_class14mode_RX_singleEb+0x16>
 800184e:	bf00      	nop
 8001850:	20001178 	.word	0x20001178
 8001854:	200011b0 	.word	0x200011b0
 8001858:	20001204 	.word	0x20001204
 800185c:	20000ea0 	.word	0x20000ea0
 8001860:	20000ebc 	.word	0x20000ebc

08001864 <_ZN10LoRa_class12set_TX_powerEhbh>:
uint8_t LoRa_class::set_TX_power(uint8_t power, bool paboost, uint8_t max_power) {
 8001864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001868:	469e      	mov	lr, r3
 800186a:	b0a2      	sub	sp, #136	; 0x88
    Address_field fields[4] = {PaDac, PaSelect, MaxPower, OutputPower};
 800186c:	4c34      	ldr	r4, [pc, #208]	; (8001940 <_ZN10LoRa_class12set_TX_powerEhbh+0xdc>)
 800186e:	ae06      	add	r6, sp, #24
uint8_t LoRa_class::set_TX_power(uint8_t power, bool paboost, uint8_t max_power) {
 8001870:	4684      	mov	ip, r0
 8001872:	4688      	mov	r8, r1
 8001874:	4617      	mov	r7, r2
    Address_field fields[4] = {PaDac, PaSelect, MaxPower, OutputPower};
 8001876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001878:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800187a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800187e:	4c31      	ldr	r4, [pc, #196]	; (8001944 <_ZN10LoRa_class12set_TX_powerEhbh+0xe0>)
 8001880:	ad0d      	add	r5, sp, #52	; 0x34
 8001882:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8001886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800188a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800188e:	4c2e      	ldr	r4, [pc, #184]	; (8001948 <_ZN10LoRa_class12set_TX_powerEhbh+0xe4>)
 8001890:	ae14      	add	r6, sp, #80	; 0x50
 8001892:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001896:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001898:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800189a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800189e:	4d2b      	ldr	r5, [pc, #172]	; (800194c <_ZN10LoRa_class12set_TX_powerEhbh+0xe8>)
 80018a0:	ac1b      	add	r4, sp, #108	; 0x6c
 80018a2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80018a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if (max_power < 0x01)
 80018b2:	f1be 0f00 	cmp.w	lr, #0
 80018b6:	d016      	beq.n	80018e6 <_ZN10LoRa_class12set_TX_powerEhbh+0x82>
 80018b8:	4675      	mov	r5, lr
 80018ba:	2d07      	cmp	r5, #7
 80018bc:	bf28      	it	cs
 80018be:	2507      	movcs	r5, #7
    _reg_field.register_read(fields, 4);
 80018c0:	f10c 043c 	add.w	r4, ip, #60	; 0x3c
 80018c4:	4620      	mov	r0, r4
 80018c6:	2301      	movs	r3, #1
 80018c8:	2204      	movs	r2, #4
 80018ca:	a906      	add	r1, sp, #24
 80018cc:	f001 f9b4 	bl	8002c38 <_ZN13LoRa_register13register_readEP13Address_fieldhb>
    if (paboost) {
 80018d0:	b15f      	cbz	r7, 80018ea <_ZN10LoRa_class12set_TX_powerEhbh+0x86>
        if (power > 17)
 80018d2:	f1b8 0f11 	cmp.w	r8, #17
 80018d6:	d829      	bhi.n	800192c <_ZN10LoRa_class12set_TX_powerEhbh+0xc8>
    if (power < min_power_value)
 80018d8:	f1b8 0f01 	cmp.w	r8, #1
 80018dc:	d82b      	bhi.n	8001936 <_ZN10LoRa_class12set_TX_powerEhbh+0xd2>
 80018de:	2600      	movs	r6, #0
 80018e0:	2701      	movs	r7, #1
        pa_dac = RF_PADAC_20DBM_OFF;
 80018e2:	2204      	movs	r2, #4
 80018e4:	e00e      	b.n	8001904 <_ZN10LoRa_class12set_TX_powerEhbh+0xa0>
 80018e6:	2501      	movs	r5, #1
 80018e8:	e7ea      	b.n	80018c0 <_ZN10LoRa_class12set_TX_powerEhbh+0x5c>
 80018ea:	220e      	movs	r2, #14
 80018ec:	2301      	movs	r3, #1
 80018ee:	4611      	mov	r1, r2
    if (power > max_power_value)
 80018f0:	4588      	cmp	r8, r1
 80018f2:	bfcc      	ite	gt
 80018f4:	189b      	addgt	r3, r3, r2
 80018f6:	4443      	addle	r3, r8
 80018f8:	b2db      	uxtb	r3, r3
        pa_dac = RF_PADAC_20DBM_OFF;
 80018fa:	2b11      	cmp	r3, #17
 80018fc:	461e      	mov	r6, r3
 80018fe:	bf8c      	ite	hi
 8001900:	2207      	movhi	r2, #7
 8001902:	2204      	movls	r2, #4
    uint32_t values[4] = {pa_dac, pa_select, max_power, power};
 8001904:	9202      	str	r2, [sp, #8]
    result = _reg_field.set_field_value(fields, values, amt);
 8001906:	a906      	add	r1, sp, #24
 8001908:	aa02      	add	r2, sp, #8
 800190a:	2304      	movs	r3, #4
 800190c:	4620      	mov	r0, r4
    uint32_t values[4] = {pa_dac, pa_select, max_power, power};
 800190e:	9703      	str	r7, [sp, #12]
 8001910:	9504      	str	r5, [sp, #16]
 8001912:	9605      	str	r6, [sp, #20]
    result = _reg_field.set_field_value(fields, values, amt);
 8001914:	f001 fa08 	bl	8002d28 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
        result = _reg_field.register_write(fields, amt, true, true);
 8001918:	2301      	movs	r3, #1
 800191a:	a906      	add	r1, sp, #24
 800191c:	4620      	mov	r0, r4
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	2204      	movs	r2, #4
 8001922:	f001 fafb 	bl	8002f1c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
}
 8001926:	b022      	add	sp, #136	; 0x88
 8001928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800192c:	2214      	movs	r2, #20
 800192e:	23fb      	movs	r3, #251	; 0xfb
 8001930:	4611      	mov	r1, r2
 8001932:	2701      	movs	r7, #1
 8001934:	e7dc      	b.n	80018f0 <_ZN10LoRa_class12set_TX_powerEhbh+0x8c>
    if (power < min_power_value)
 8001936:	2214      	movs	r2, #20
 8001938:	23fe      	movs	r3, #254	; 0xfe
 800193a:	4611      	mov	r1, r2
 800193c:	2701      	movs	r7, #1
 800193e:	e7d7      	b.n	80018f0 <_ZN10LoRa_class12set_TX_powerEhbh+0x8c>
 8001940:	20001290 	.word	0x20001290
 8001944:	200012c8 	.word	0x200012c8
 8001948:	200011e8 	.word	0x200011e8
 800194c:	20001274 	.word	0x20001274

08001950 <_ZN10LoRa_class20set_spreading_factorEh>:
uint8_t LoRa_class::set_spreading_factor(uint8_t SF) {
 8001950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (SF < 6)
 8001954:	2905      	cmp	r1, #5
uint8_t LoRa_class::set_spreading_factor(uint8_t SF) {
 8001956:	b09a      	sub	sp, #104	; 0x68
 8001958:	4680      	mov	r8, r0
    if (SF < 6)
 800195a:	d93f      	bls.n	80019dc <_ZN10LoRa_class20set_spreading_factorEh+0x8c>
    else if (SF > 12)
 800195c:	290c      	cmp	r1, #12
 800195e:	d837      	bhi.n	80019d0 <_ZN10LoRa_class20set_spreading_factorEh+0x80>
        detection_threshold = DT_SF6;
 8001960:	2906      	cmp	r1, #6
 8001962:	460f      	mov	r7, r1
 8001964:	bf15      	itete	ne
 8001966:	f04f 0c0a 	movne.w	ip, #10
 800196a:	f04f 0c0c 	moveq.w	ip, #12
 800196e:	f04f 0e03 	movne.w	lr, #3
 8001972:	f04f 0e05 	moveq.w	lr, #5
    Address_field fields[3] = {DetectionOptimize, DetectionThreshold, SpreadingFactor};
 8001976:	4c1c      	ldr	r4, [pc, #112]	; (80019e8 <_ZN10LoRa_class20set_spreading_factorEh+0x98>)
 8001978:	ad05      	add	r5, sp, #20
 800197a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800197c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800197e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001982:	4c1a      	ldr	r4, [pc, #104]	; (80019ec <_ZN10LoRa_class20set_spreading_factorEh+0x9c>)
 8001984:	ae0c      	add	r6, sp, #48	; 0x30
 8001986:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800198a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800198c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800198e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001992:	4d17      	ldr	r5, [pc, #92]	; (80019f0 <_ZN10LoRa_class20set_spreading_factorEh+0xa0>)
 8001994:	ac13      	add	r4, sp, #76	; 0x4c
 8001996:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800199a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800199c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800199e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 80019a2:	f108 083c 	add.w	r8, r8, #60	; 0x3c
    Address_field fields[3] = {DetectionOptimize, DetectionThreshold, SpreadingFactor};
 80019a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 80019aa:	2303      	movs	r3, #3
 80019ac:	a905      	add	r1, sp, #20
 80019ae:	aa02      	add	r2, sp, #8
 80019b0:	4640      	mov	r0, r8
    uint32_t values[3] = {detection_optimize, detection_threshold, SF};
 80019b2:	e9cd ec02 	strd	lr, ip, [sp, #8]
 80019b6:	9704      	str	r7, [sp, #16]
    result = _reg_field.set_field_value(fields, values, amt);
 80019b8:	f001 f9b6 	bl	8002d28 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
        result = _reg_field.register_write(fields, amt, true, true);
 80019bc:	2301      	movs	r3, #1
 80019be:	a905      	add	r1, sp, #20
 80019c0:	4640      	mov	r0, r8
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	2203      	movs	r2, #3
 80019c6:	f001 faa9 	bl	8002f1c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
}
 80019ca:	b01a      	add	sp, #104	; 0x68
 80019cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019d0:	270c      	movs	r7, #12
        detection_threshold = DT_SF7_12;
 80019d2:	f04f 0c0a 	mov.w	ip, #10
        detection_optimize = DO_SF7_12;
 80019d6:	f04f 0e03 	mov.w	lr, #3
 80019da:	e7cc      	b.n	8001976 <_ZN10LoRa_class20set_spreading_factorEh+0x26>
 80019dc:	2706      	movs	r7, #6
        detection_threshold = DT_SF6;
 80019de:	f04f 0c0c 	mov.w	ip, #12
        detection_optimize = DO_SF6;
 80019e2:	f04f 0e05 	mov.w	lr, #5
 80019e6:	e7c6      	b.n	8001976 <_ZN10LoRa_class20set_spreading_factorEh+0x26>
 80019e8:	20000e68 	.word	0x20000e68
 80019ec:	20000e84 	.word	0x20000e84
 80019f0:	200014dc 	.word	0x200014dc
 80019f4:	00000000 	.word	0x00000000

080019f8 <_ZN10LoRa_class20set_signal_bandwidthEy>:
uint8_t LoRa_class::set_signal_bandwidth(uint64_t sbw) {
 80019f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (sbw <= 7.8E3)        bw = 0;
 80019fa:	4619      	mov	r1, r3
uint8_t LoRa_class::set_signal_bandwidth(uint64_t sbw) {
 80019fc:	b08f      	sub	sp, #60	; 0x3c
 80019fe:	4606      	mov	r6, r0
    if (sbw <= 7.8E3)        bw = 0;
 8001a00:	4610      	mov	r0, r2
 8001a02:	f7fe fd2b 	bl	800045c <__aeabi_ul2d>
 8001a06:	a344      	add	r3, pc, #272	; (adr r3, 8001b18 <_ZN10LoRa_class20set_signal_bandwidthEy+0x120>)
 8001a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0c:	4604      	mov	r4, r0
 8001a0e:	460d      	mov	r5, r1
 8001a10:	f7fe ffd6 	bl	80009c0 <__aeabi_dcmple>
 8001a14:	2800      	cmp	r0, #0
 8001a16:	d16e      	bne.n	8001af6 <_ZN10LoRa_class20set_signal_bandwidthEy+0xfe>
    else if (sbw <= 10.4E3)  bw = 1;
 8001a18:	a341      	add	r3, pc, #260	; (adr r3, 8001b20 <_ZN10LoRa_class20set_signal_bandwidthEy+0x128>)
 8001a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1e:	4620      	mov	r0, r4
 8001a20:	4629      	mov	r1, r5
 8001a22:	f7fe ffcd 	bl	80009c0 <__aeabi_dcmple>
 8001a26:	2800      	cmp	r0, #0
 8001a28:	d141      	bne.n	8001aae <_ZN10LoRa_class20set_signal_bandwidthEy+0xb6>
    else if (sbw <= 15.6E3)  bw = 2;
 8001a2a:	a33f      	add	r3, pc, #252	; (adr r3, 8001b28 <_ZN10LoRa_class20set_signal_bandwidthEy+0x130>)
 8001a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a30:	4620      	mov	r0, r4
 8001a32:	4629      	mov	r1, r5
 8001a34:	f7fe ffc4 	bl	80009c0 <__aeabi_dcmple>
 8001a38:	2800      	cmp	r0, #0
 8001a3a:	d15e      	bne.n	8001afa <_ZN10LoRa_class20set_signal_bandwidthEy+0x102>
    else if (sbw <= 20.8E3)  bw = 3;
 8001a3c:	a33c      	add	r3, pc, #240	; (adr r3, 8001b30 <_ZN10LoRa_class20set_signal_bandwidthEy+0x138>)
 8001a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a42:	4620      	mov	r0, r4
 8001a44:	4629      	mov	r1, r5
 8001a46:	f7fe ffbb 	bl	80009c0 <__aeabi_dcmple>
 8001a4a:	2800      	cmp	r0, #0
 8001a4c:	d157      	bne.n	8001afe <_ZN10LoRa_class20set_signal_bandwidthEy+0x106>
    else if (sbw <= 31.25E3) bw = 4;
 8001a4e:	a33a      	add	r3, pc, #232	; (adr r3, 8001b38 <_ZN10LoRa_class20set_signal_bandwidthEy+0x140>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	4620      	mov	r0, r4
 8001a56:	4629      	mov	r1, r5
 8001a58:	f7fe ffb2 	bl	80009c0 <__aeabi_dcmple>
 8001a5c:	2800      	cmp	r0, #0
 8001a5e:	d150      	bne.n	8001b02 <_ZN10LoRa_class20set_signal_bandwidthEy+0x10a>
    else if (sbw <= 41.7E3)  bw = 5;
 8001a60:	a337      	add	r3, pc, #220	; (adr r3, 8001b40 <_ZN10LoRa_class20set_signal_bandwidthEy+0x148>)
 8001a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a66:	4620      	mov	r0, r4
 8001a68:	4629      	mov	r1, r5
 8001a6a:	f7fe ffa9 	bl	80009c0 <__aeabi_dcmple>
 8001a6e:	2800      	cmp	r0, #0
 8001a70:	d149      	bne.n	8001b06 <_ZN10LoRa_class20set_signal_bandwidthEy+0x10e>
    else if (sbw <= 62.5E3)  bw = 6;
 8001a72:	a335      	add	r3, pc, #212	; (adr r3, 8001b48 <_ZN10LoRa_class20set_signal_bandwidthEy+0x150>)
 8001a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a78:	4620      	mov	r0, r4
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	f7fe ffa0 	bl	80009c0 <__aeabi_dcmple>
 8001a80:	2800      	cmp	r0, #0
 8001a82:	d142      	bne.n	8001b0a <_ZN10LoRa_class20set_signal_bandwidthEy+0x112>
    else if (sbw <= 125E3)   bw = 7;
 8001a84:	a332      	add	r3, pc, #200	; (adr r3, 8001b50 <_ZN10LoRa_class20set_signal_bandwidthEy+0x158>)
 8001a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	4629      	mov	r1, r5
 8001a8e:	f7fe ff97 	bl	80009c0 <__aeabi_dcmple>
 8001a92:	2800      	cmp	r0, #0
 8001a94:	d13b      	bne.n	8001b0e <_ZN10LoRa_class20set_signal_bandwidthEy+0x116>
    else if (sbw <= 250E3)   bw = 8;
 8001a96:	a330      	add	r3, pc, #192	; (adr r3, 8001b58 <_ZN10LoRa_class20set_signal_bandwidthEy+0x160>)
 8001a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	f7fe ff8e 	bl	80009c0 <__aeabi_dcmple>
 8001aa4:	2800      	cmp	r0, #0
 8001aa6:	bf14      	ite	ne
 8001aa8:	2708      	movne	r7, #8
 8001aaa:	2709      	moveq	r7, #9
 8001aac:	e000      	b.n	8001ab0 <_ZN10LoRa_class20set_signal_bandwidthEy+0xb8>
 8001aae:	2701      	movs	r7, #1
 8001ab0:	4d2b      	ldr	r5, [pc, #172]	; (8001b60 <_ZN10LoRa_class20set_signal_bandwidthEy+0x168>)
 8001ab2:	ac07      	add	r4, sp, #28
 8001ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001abc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result = _reg_field.set_field_value(field, value);
 8001ac0:	ac0a      	add	r4, sp, #40	; 0x28
 8001ac2:	9704      	str	r7, [sp, #16]
 8001ac4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ac8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001acc:	363c      	adds	r6, #60	; 0x3c
 8001ace:	ad07      	add	r5, sp, #28
 8001ad0:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001ad4:	4630      	mov	r0, r6
 8001ad6:	f001 fdf3 	bl	80036c0 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
        result = _reg_field.register_write(field, true, true);
 8001ada:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ade:	2401      	movs	r4, #1
 8001ae0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001ae4:	4630      	mov	r0, r6
 8001ae6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001aea:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001aee:	f001 fb8d 	bl	800320c <_ZN13LoRa_register14register_writeE13Address_fieldbb>
}
 8001af2:	b00f      	add	sp, #60	; 0x3c
 8001af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af6:	2700      	movs	r7, #0
 8001af8:	e7da      	b.n	8001ab0 <_ZN10LoRa_class20set_signal_bandwidthEy+0xb8>
 8001afa:	2702      	movs	r7, #2
 8001afc:	e7d8      	b.n	8001ab0 <_ZN10LoRa_class20set_signal_bandwidthEy+0xb8>
 8001afe:	2703      	movs	r7, #3
 8001b00:	e7d6      	b.n	8001ab0 <_ZN10LoRa_class20set_signal_bandwidthEy+0xb8>
 8001b02:	2704      	movs	r7, #4
 8001b04:	e7d4      	b.n	8001ab0 <_ZN10LoRa_class20set_signal_bandwidthEy+0xb8>
 8001b06:	2705      	movs	r7, #5
 8001b08:	e7d2      	b.n	8001ab0 <_ZN10LoRa_class20set_signal_bandwidthEy+0xb8>
 8001b0a:	2706      	movs	r7, #6
 8001b0c:	e7d0      	b.n	8001ab0 <_ZN10LoRa_class20set_signal_bandwidthEy+0xb8>
 8001b0e:	2707      	movs	r7, #7
 8001b10:	e7ce      	b.n	8001ab0 <_ZN10LoRa_class20set_signal_bandwidthEy+0xb8>
 8001b12:	bf00      	nop
 8001b14:	f3af 8000 	nop.w
 8001b18:	00000000 	.word	0x00000000
 8001b1c:	40be7800 	.word	0x40be7800
 8001b20:	00000000 	.word	0x00000000
 8001b24:	40c45000 	.word	0x40c45000
 8001b28:	00000000 	.word	0x00000000
 8001b2c:	40ce7800 	.word	0x40ce7800
 8001b30:	00000000 	.word	0x00000000
 8001b34:	40d45000 	.word	0x40d45000
 8001b38:	00000000 	.word	0x00000000
 8001b3c:	40de8480 	.word	0x40de8480
 8001b40:	00000000 	.word	0x00000000
 8001b44:	40e45c80 	.word	0x40e45c80
 8001b48:	00000000 	.word	0x00000000
 8001b4c:	40ee8480 	.word	0x40ee8480
 8001b50:	00000000 	.word	0x00000000
 8001b54:	40fe8480 	.word	0x40fe8480
 8001b58:	00000000 	.word	0x00000000
 8001b5c:	410e8480 	.word	0x410e8480
 8001b60:	20000da4 	.word	0x20000da4

08001b64 <_ZN10LoRa_class5beginEybhhyh>:
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8001b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b68:	4604      	mov	r4, r0
    uint32_t result = 0;
 8001b6a:	2500      	movs	r5, #0
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8001b6c:	b0bd      	sub	sp, #244	; 0xf4
 8001b6e:	4699      	mov	r9, r3
 8001b70:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 8001b74:	8881      	ldrh	r1, [r0, #4]
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8001b76:	9307      	str	r3, [sp, #28]
 8001b78:	f89d 3120 	ldrb.w	r3, [sp, #288]	; 0x120
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 8001b7c:	6880      	ldr	r0, [r0, #8]
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8001b7e:	9308      	str	r3, [sp, #32]
 8001b80:	f89d 3130 	ldrb.w	r3, [sp, #304]	; 0x130
 8001b84:	4690      	mov	r8, r2
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 8001b86:	2201      	movs	r2, #1
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8001b88:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t result = 0;
 8001b8a:	950a      	str	r5, [sp, #40]	; 0x28
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8001b8c:	f89d a118 	ldrb.w	sl, [sp, #280]	; 0x118
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 8001b90:	f005 fc64 	bl	800745c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_RESET);
 8001b94:	462a      	mov	r2, r5
 8001b96:	88a1      	ldrh	r1, [r4, #4]
 8001b98:	68a0      	ldr	r0, [r4, #8]
 8001b9a:	f005 fc5f 	bl	800745c <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8001b9e:	2014      	movs	r0, #20
 8001ba0:	f005 faa4 	bl	80070ec <HAL_Delay>
 8001ba4:	4fbd      	ldr	r7, [pc, #756]	; (8001e9c <_ZN10LoRa_class5beginEybhhyh+0x338>)
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 8001ba6:	88a1      	ldrh	r1, [r4, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	68a0      	ldr	r0, [r4, #8]
 8001bac:	f005 fc56 	bl	800745c <HAL_GPIO_WritePin>
 8001bb0:	ae0b      	add	r6, sp, #44	; 0x2c
    HAL_Delay(50);
 8001bb2:	2032      	movs	r0, #50	; 0x32
 8001bb4:	f005 fa9a 	bl	80070ec <HAL_Delay>
 8001bb8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001bba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001bbc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8001bc0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    return _reg_field.get_field_value(field, value, read);
 8001bc4:	ab0e      	add	r3, sp, #56	; 0x38
 8001bc6:	9505      	str	r5, [sp, #20]
 8001bc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bca:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001bce:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8001bd2:	f8cd c010 	str.w	ip, [sp, #16]
 8001bd6:	af0b      	add	r7, sp, #44	; 0x2c
 8001bd8:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 8001bdc:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001be0:	4630      	mov	r0, r6
 8001be2:	f001 fdf7 	bl	80037d4 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>
    if ((result != 0x12) || (amt != 1)) return 2;
 8001be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001be8:	2b12      	cmp	r3, #18
 8001bea:	d102      	bne.n	8001bf2 <_ZN10LoRa_class5beginEybhhyh+0x8e>
 8001bec:	2801      	cmp	r0, #1
 8001bee:	4607      	mov	r7, r0
 8001bf0:	d003      	beq.n	8001bfa <_ZN10LoRa_class5beginEybhhyh+0x96>
 8001bf2:	2002      	movs	r0, #2
}
 8001bf4:	b03d      	add	sp, #244	; 0xf4
 8001bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8001bfa:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 8001eb4 <_ZN10LoRa_class5beginEybhhyh+0x350>
 8001bfe:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 8001c02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001c06:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001c0a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8001c0e:	f8df c2a8 	ldr.w	ip, [pc, #680]	; 8001eb8 <_ZN10LoRa_class5beginEybhhyh+0x354>
 8001c12:	f10d 0bb8 	add.w	fp, sp, #184	; 0xb8
 8001c16:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8001c1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001c1e:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 8001c22:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8001c26:	f8df e294 	ldr.w	lr, [pc, #660]	; 8001ebc <_ZN10LoRa_class5beginEybhhyh+0x358>
 8001c2a:	f10d 0cd4 	add.w	ip, sp, #212	; 0xd4
 8001c2e:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8001c32:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001c36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001c3a:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 8001c3e:	f10d 0b9c 	add.w	fp, sp, #156	; 0x9c
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8001c42:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 8001c46:	2303      	movs	r3, #3
 8001c48:	aa20      	add	r2, sp, #128	; 0x80
 8001c4a:	4659      	mov	r1, fp
 8001c4c:	4630      	mov	r0, r6
    uint32_t values[3] = {1, 0, mode};
 8001c4e:	e9cd 7520 	strd	r7, r5, [sp, #128]	; 0x80
 8001c52:	9522      	str	r5, [sp, #136]	; 0x88
    result = _reg_field.set_field_value(fields, values, amt);
 8001c54:	f001 f868 	bl	8002d28 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
        result = _reg_field.register_write(fields, amt, true, true);
 8001c58:	9700      	str	r7, [sp, #0]
 8001c5a:	463b      	mov	r3, r7
 8001c5c:	4659      	mov	r1, fp
 8001c5e:	2203      	movs	r2, #3
 8001c60:	4630      	mov	r0, r6
 8001c62:	f001 f95b 	bl	8002f1c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
    if(mode_sleep() != 1) return 3;
 8001c66:	2801      	cmp	r0, #1
        result = _reg_field.register_write(fields, amt, true, true);
 8001c68:	4607      	mov	r7, r0
    if(mode_sleep() != 1) return 3;
 8001c6a:	d003      	beq.n	8001c74 <_ZN10LoRa_class5beginEybhhyh+0x110>
 8001c6c:	2003      	movs	r0, #3
}
 8001c6e:	b03d      	add	sp, #244	; 0xf4
 8001c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c74:	f8df e248 	ldr.w	lr, [pc, #584]	; 8001ec0 <_ZN10LoRa_class5beginEybhhyh+0x35c>
 8001c78:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
 8001c7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001c80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    _frequency = frequency;
 8001c84:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
 8001c88:	ea4f 43c9 	mov.w	r3, r9, lsl #19
 8001c8c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
    _frequency = frequency;
 8001c90:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8001c94:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
 8001c98:	ea43 3158 	orr.w	r1, r3, r8, lsr #13
 8001c9c:	ea4f 40c8 	mov.w	r0, r8, lsl #19
 8001ca0:	4a7f      	ldr	r2, [pc, #508]	; (8001ea0 <_ZN10LoRa_class5beginEybhhyh+0x33c>)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f7ff f8d0 	bl	8000e48 <__aeabi_uldivmod>
    result = _reg_field.set_field_value(field, value);
 8001ca8:	f10d 0854 	add.w	r8, sp, #84	; 0x54
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
 8001cac:	9004      	str	r0, [sp, #16]
    result = _reg_field.set_field_value(field, value);
 8001cae:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8001cb2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001cb6:	f10d 0948 	add.w	r9, sp, #72	; 0x48
 8001cba:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 8001cbe:	4630      	mov	r0, r6
 8001cc0:	f001 fcfe 	bl	80036c0 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
        result = _reg_field.register_write(field, true, true);
 8001cc4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8001cc8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001ccc:	e9cd 7704 	strd	r7, r7, [sp, #16]
 8001cd0:	4630      	mov	r0, r6
 8001cd2:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 8001cd6:	f001 fa99 	bl	800320c <_ZN13LoRa_register14register_writeE13Address_fieldbb>
    if(set_frequency(frequency) != 3) return 4;
 8001cda:	2803      	cmp	r0, #3
        result = _reg_field.register_write(field, true, true);
 8001cdc:	4681      	mov	r9, r0
    if(set_frequency(frequency) != 3) return 4;
 8001cde:	d001      	beq.n	8001ce4 <_ZN10LoRa_class5beginEybhhyh+0x180>
 8001ce0:	2004      	movs	r0, #4
 8001ce2:	e787      	b.n	8001bf4 <_ZN10LoRa_class5beginEybhhyh+0x90>
 8001ce4:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 8001ec4 <_ZN10LoRa_class5beginEybhhyh+0x360>
 8001ce8:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8001cec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001cf0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001cf4:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001cf8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    result = _reg_field.set_field_value(field, value);
 8001cfc:	f10d 0870 	add.w	r8, sp, #112	; 0x70
 8001d00:	9504      	str	r5, [sp, #16]
 8001d02:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8001d06:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001d0a:	ab19      	add	r3, sp, #100	; 0x64
 8001d0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d0e:	4630      	mov	r0, r6
 8001d10:	f001 fcd6 	bl	80036c0 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
        result = _reg_field.register_write(field, true, true);
 8001d14:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8001d18:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001d1c:	e9cd 7704 	strd	r7, r7, [sp, #16]
 8001d20:	ab19      	add	r3, sp, #100	; 0x64
 8001d22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d24:	4630      	mov	r0, r6
 8001d26:	f001 fa71 	bl	800320c <_ZN13LoRa_register14register_writeE13Address_fieldbb>
    if(field_set(FifoRxBaseAddr, 0x00) != 1) return 5;
 8001d2a:	2801      	cmp	r0, #1
        result = _reg_field.register_write(field, true, true);
 8001d2c:	4680      	mov	r8, r0
    if(field_set(FifoRxBaseAddr, 0x00) != 1) return 5;
 8001d2e:	d001      	beq.n	8001d34 <_ZN10LoRa_class5beginEybhhyh+0x1d0>
 8001d30:	2005      	movs	r0, #5
 8001d32:	e75f      	b.n	8001bf4 <_ZN10LoRa_class5beginEybhhyh+0x90>
 8001d34:	f8df c190 	ldr.w	ip, [pc, #400]	; 8001ec8 <_ZN10LoRa_class5beginEybhhyh+0x364>
 8001d38:	af20      	add	r7, sp, #128	; 0x80
 8001d3a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001d3e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001d40:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8001d44:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    result = _reg_field.set_field_value(field, value);
 8001d48:	af23      	add	r7, sp, #140	; 0x8c
 8001d4a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    if(field_set(FifoTxBaseAddr, _FifoTxBaseAddr) != 1) return 6;
 8001d4e:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
    result = _reg_field.set_field_value(field, value);
 8001d52:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001d56:	f8cd e010 	str.w	lr, [sp, #16]
 8001d5a:	ab20      	add	r3, sp, #128	; 0x80
 8001d5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d5e:	4630      	mov	r0, r6
 8001d60:	f001 fcae 	bl	80036c0 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
        result = _reg_field.register_write(field, true, true);
 8001d64:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8001d68:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001d6c:	e9cd 8804 	strd	r8, r8, [sp, #16]
 8001d70:	ab20      	add	r3, sp, #128	; 0x80
 8001d72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d74:	4630      	mov	r0, r6
 8001d76:	f001 fa49 	bl	800320c <_ZN13LoRa_register14register_writeE13Address_fieldbb>
    if(field_set(FifoTxBaseAddr, _FifoTxBaseAddr) != 1) return 6;
 8001d7a:	2801      	cmp	r0, #1
        result = _reg_field.register_write(field, true, true);
 8001d7c:	4680      	mov	r8, r0
    if(field_set(FifoTxBaseAddr, _FifoTxBaseAddr) != 1) return 6;
 8001d7e:	d001      	beq.n	8001d84 <_ZN10LoRa_class5beginEybhhyh+0x220>
 8001d80:	2006      	movs	r0, #6
 8001d82:	e737      	b.n	8001bf4 <_ZN10LoRa_class5beginEybhhyh+0x90>
 8001d84:	46dc      	mov	ip, fp
 8001d86:	f8df e144 	ldr.w	lr, [pc, #324]	; 8001ecc <_ZN10LoRa_class5beginEybhhyh+0x368>
    result = _reg_field.set_field_value(field, value);
 8001d8a:	af2a      	add	r7, sp, #168	; 0xa8
 8001d8c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001d90:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001d94:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001d98:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8001d9c:	f8cd 9010 	str.w	r9, [sp, #16]
 8001da0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8001da4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001da8:	4630      	mov	r0, r6
 8001daa:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 8001dae:	f001 fc87 	bl	80036c0 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
        result = _reg_field.register_write(field, true, true);
 8001db2:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8001db6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001dba:	e9cd 8804 	strd	r8, r8, [sp, #16]
 8001dbe:	4630      	mov	r0, r6
 8001dc0:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 8001dc4:	f001 fa22 	bl	800320c <_ZN13LoRa_register14register_writeE13Address_fieldbb>
    if(field_set(LnaBoostHf, 0x03) != 1) return 7;
 8001dc8:	2801      	cmp	r0, #1
 8001dca:	d001      	beq.n	8001dd0 <_ZN10LoRa_class5beginEybhhyh+0x26c>
 8001dcc:	2007      	movs	r0, #7
 8001dce:	e711      	b.n	8001bf4 <_ZN10LoRa_class5beginEybhhyh+0x90>
    if(field_set(LowDataRateOptimize, 0) != 1) return 8;
 8001dd0:	4e34      	ldr	r6, [pc, #208]	; (8001ea4 <_ZN10LoRa_class5beginEybhhyh+0x340>)
 8001dd2:	9504      	str	r5, [sp, #16]
 8001dd4:	f106 030c 	add.w	r3, r6, #12
 8001dd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dda:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001dde:	4620      	mov	r0, r4
 8001de0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001de4:	f7ff fb5e 	bl	80014a4 <_ZN10LoRa_class9field_setE13Address_fieldmb.constprop.22>
 8001de8:	2801      	cmp	r0, #1
 8001dea:	d001      	beq.n	8001df0 <_ZN10LoRa_class5beginEybhhyh+0x28c>
 8001dec:	2008      	movs	r0, #8
 8001dee:	e701      	b.n	8001bf4 <_ZN10LoRa_class5beginEybhhyh+0x90>
    if(field_set(AgcAutoOn, 1) != 1) return 9;
 8001df0:	4d2d      	ldr	r5, [pc, #180]	; (8001ea8 <_ZN10LoRa_class5beginEybhhyh+0x344>)
 8001df2:	9004      	str	r0, [sp, #16]
 8001df4:	f105 030c 	add.w	r3, r5, #12
 8001df8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dfa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001dfe:	4620      	mov	r0, r4
 8001e00:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001e04:	f7ff fb4e 	bl	80014a4 <_ZN10LoRa_class9field_setE13Address_fieldmb.constprop.22>
 8001e08:	2801      	cmp	r0, #1
 8001e0a:	d001      	beq.n	8001e10 <_ZN10LoRa_class5beginEybhhyh+0x2ac>
 8001e0c:	2009      	movs	r0, #9
 8001e0e:	e6f1      	b.n	8001bf4 <_ZN10LoRa_class5beginEybhhyh+0x90>
    if(set_TX_power(signal_power, paboost) != 2) return 10;
 8001e10:	4652      	mov	r2, sl
 8001e12:	9907      	ldr	r1, [sp, #28]
 8001e14:	2307      	movs	r3, #7
 8001e16:	4620      	mov	r0, r4
 8001e18:	f7ff fd24 	bl	8001864 <_ZN10LoRa_class12set_TX_powerEhbh>
 8001e1c:	2802      	cmp	r0, #2
 8001e1e:	d001      	beq.n	8001e24 <_ZN10LoRa_class5beginEybhhyh+0x2c0>
 8001e20:	200a      	movs	r0, #10
 8001e22:	e6e7      	b.n	8001bf4 <_ZN10LoRa_class5beginEybhhyh+0x90>
    if(set_spreading_factor(SF) != 3) return 11;
 8001e24:	9908      	ldr	r1, [sp, #32]
 8001e26:	4620      	mov	r0, r4
 8001e28:	f7ff fd92 	bl	8001950 <_ZN10LoRa_class20set_spreading_factorEh>
 8001e2c:	2803      	cmp	r0, #3
 8001e2e:	d001      	beq.n	8001e34 <_ZN10LoRa_class5beginEybhhyh+0x2d0>
 8001e30:	200b      	movs	r0, #11
 8001e32:	e6df      	b.n	8001bf4 <_ZN10LoRa_class5beginEybhhyh+0x90>
    if(set_signal_bandwidth(SBW) != 1) return 12;
 8001e34:	ab4a      	add	r3, sp, #296	; 0x128
 8001e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	f7ff fddc 	bl	80019f8 <_ZN10LoRa_class20set_signal_bandwidthEy>
 8001e40:	2801      	cmp	r0, #1
 8001e42:	d001      	beq.n	8001e48 <_ZN10LoRa_class5beginEybhhyh+0x2e4>
 8001e44:	200c      	movs	r0, #12
 8001e46:	e6d5      	b.n	8001bf4 <_ZN10LoRa_class5beginEybhhyh+0x90>
    if(field_set(SyncWord, sync_word) != 1) return 13;
 8001e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e4a:	4d18      	ldr	r5, [pc, #96]	; (8001eac <_ZN10LoRa_class5beginEybhhyh+0x348>)
 8001e4c:	9304      	str	r3, [sp, #16]
 8001e4e:	f105 030c 	add.w	r3, r5, #12
 8001e52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e54:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001e58:	4620      	mov	r0, r4
 8001e5a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001e5e:	f7ff fb21 	bl	80014a4 <_ZN10LoRa_class9field_setE13Address_fieldmb.constprop.22>
 8001e62:	2801      	cmp	r0, #1
 8001e64:	d001      	beq.n	8001e6a <_ZN10LoRa_class5beginEybhhyh+0x306>
 8001e66:	200d      	movs	r0, #13
 8001e68:	e6c4      	b.n	8001bf4 <_ZN10LoRa_class5beginEybhhyh+0x90>
    return field_set(RxPayloadCrcOn, 1);
 8001e6a:	4d11      	ldr	r5, [pc, #68]	; (8001eb0 <_ZN10LoRa_class5beginEybhhyh+0x34c>)
 8001e6c:	9004      	str	r0, [sp, #16]
 8001e6e:	f105 030c 	add.w	r3, r5, #12
 8001e72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e74:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001e78:	4620      	mov	r0, r4
 8001e7a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001e7e:	f7ff fb11 	bl	80014a4 <_ZN10LoRa_class9field_setE13Address_fieldmb.constprop.22>
    if(crc_enable() != 1) return 14;
 8001e82:	2801      	cmp	r0, #1
    return field_set(RxPayloadCrcOn, 1);
 8001e84:	4601      	mov	r1, r0
    if(crc_enable() != 1) return 14;
 8001e86:	d001      	beq.n	8001e8c <_ZN10LoRa_class5beginEybhhyh+0x328>
 8001e88:	200e      	movs	r0, #14
 8001e8a:	e6b3      	b.n	8001bf4 <_ZN10LoRa_class5beginEybhhyh+0x90>
    return set_mode(MODE_STDBY);
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	f7ff fc2d 	bl	80016ec <_ZN10LoRa_class8set_modeEh>
    return 0;
 8001e92:	2801      	cmp	r0, #1
 8001e94:	bf14      	ite	ne
 8001e96:	200f      	movne	r0, #15
 8001e98:	2000      	moveq	r0, #0
 8001e9a:	e6ab      	b.n	8001bf4 <_ZN10LoRa_class5beginEybhhyh+0x90>
 8001e9c:	20001610 	.word	0x20001610
 8001ea0:	01e84800 	.word	0x01e84800
 8001ea4:	20001194 	.word	0x20001194
 8001ea8:	20000cc4 	.word	0x20000cc4
 8001eac:	20001514 	.word	0x20001514
 8001eb0:	20001488 	.word	0x20001488
 8001eb4:	20001178 	.word	0x20001178
 8001eb8:	200011b0 	.word	0x200011b0
 8001ebc:	20001204 	.word	0x20001204
 8001ec0:	200010d0 	.word	0x200010d0
 8001ec4:	20000ff0 	.word	0x20000ff0
 8001ec8:	20001060 	.word	0x20001060
 8001ecc:	20001124 	.word	0x20001124

08001ed0 <_ZN10LoRa_class16read_packet_dataEbbb>:
class LoRa_packet LoRa_class::read_packet_data(bool crc_err, bool f_rssi, bool f_snr) {
 8001ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ed4:	b0b9      	sub	sp, #228	; 0xe4
 8001ed6:	e9cd 0206 	strd	r0, r2, [sp, #24]
 8001eda:	f101 093c 	add.w	r9, r1, #60	; 0x3c
 8001ede:	f89d 6108 	ldrb.w	r6, [sp, #264]	; 0x108
    if (f_rssi)
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f040 8090 	bne.w	8002008 <_ZN10LoRa_class16read_packet_dataEbbb+0x138>
        rssi = 0;
 8001ee8:	9308      	str	r3, [sp, #32]
 8001eea:	ad31      	add	r5, sp, #196	; 0xc4
    if (f_snr)
 8001eec:	2e00      	cmp	r6, #0
 8001eee:	f040 80b9 	bne.w	8002064 <_ZN10LoRa_class16read_packet_dataEbbb+0x194>
        snr = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	9309      	str	r3, [sp, #36]	; 0x24
    return _reg_field.get_field_value(field, value, read);
 8001ef6:	2701      	movs	r7, #1
 8001ef8:	4e6d      	ldr	r6, [pc, #436]	; (80020b0 <_ZN10LoRa_class16read_packet_dataEbbb+0x1e0>)
 8001efa:	ac15      	add	r4, sp, #84	; 0x54
 8001efc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f00:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001f04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f08:	ab18      	add	r3, sp, #96	; 0x60
 8001f0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f0c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001f10:	ac15      	add	r4, sp, #84	; 0x54
 8001f12:	ae0b      	add	r6, sp, #44	; 0x2c
 8001f14:	9705      	str	r7, [sp, #20]
 8001f16:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001f1a:	9604      	str	r6, [sp, #16]
 8001f1c:	4e65      	ldr	r6, [pc, #404]	; (80020b4 <_ZN10LoRa_class16read_packet_dataEbbb+0x1e4>)
 8001f1e:	4648      	mov	r0, r9
 8001f20:	ac0e      	add	r4, sp, #56	; 0x38
 8001f22:	f001 fc57 	bl	80037d4 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>
 8001f26:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f2a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001f2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f32:	ab11      	add	r3, sp, #68	; 0x44
 8001f34:	9705      	str	r7, [sp, #20]
 8001f36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f38:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001f3c:	ae0c      	add	r6, sp, #48	; 0x30
 8001f3e:	9604      	str	r6, [sp, #16]
 8001f40:	ac0e      	add	r4, sp, #56	; 0x38
 8001f42:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001f46:	462c      	mov	r4, r5
 8001f48:	4e5b      	ldr	r6, [pc, #364]	; (80020b8 <_ZN10LoRa_class16read_packet_dataEbbb+0x1e8>)
 8001f4a:	4648      	mov	r0, r9
 8001f4c:	f001 fc42 	bl	80037d4 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>
 8001f50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f54:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001f58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result = _reg_field.set_field_value(field, value);
 8001f5c:	ac34      	add	r4, sp, #208	; 0xd0
 8001f5e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f62:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001f66:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8001f68:	4648      	mov	r0, r9
 8001f6a:	9604      	str	r6, [sp, #16]
 8001f6c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001f70:	f001 fba6 	bl	80036c0 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
        result = _reg_field.register_write(field, true, true);
 8001f74:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f78:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001f7c:	e9cd 7704 	strd	r7, r7, [sp, #16]
 8001f80:	4648      	mov	r0, r9
 8001f82:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001f86:	f001 f941 	bl	800320c <_ZN13LoRa_register14register_writeE13Address_fieldbb>
    uint32_t data32 = 0;
 8001f8a:	2600      	movs	r6, #0
    data = new uint8_t[length];
 8001f8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001f8e:	f009 fe8f 	bl	800bcb0 <_Znaj>
    for(int i = 0; i < (int)length; ++i) {
 8001f92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    data = new uint8_t[length];
 8001f94:	4683      	mov	fp, r0
    for(int i = 0; i < (int)length; ++i) {
 8001f96:	42b2      	cmp	r2, r6
    uint32_t data32 = 0;
 8001f98:	960d      	str	r6, [sp, #52]	; 0x34
    for(int i = 0; i < (int)length; ++i) {
 8001f9a:	dd23      	ble.n	8001fe4 <_ZN10LoRa_class16read_packet_dataEbbb+0x114>
 8001f9c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8001fa0:	ad1c      	add	r5, sp, #112	; 0x70
 8001fa2:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 8001fa6:	ac1f      	add	r4, sp, #124	; 0x7c
 8001fa8:	46ac      	mov	ip, r5
 8001faa:	f8df e118 	ldr.w	lr, [pc, #280]	; 80020c4 <_ZN10LoRa_class16read_packet_dataEbbb+0x1f4>
    return _reg_field.get_field_value(field, value, read);
 8001fae:	9705      	str	r7, [sp, #20]
 8001fb0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001fb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001fb8:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001fbc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8001fc0:	f8cd a010 	str.w	sl, [sp, #16]
 8001fc4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001fc8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001fcc:	4648      	mov	r0, r9
 8001fce:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001fd2:	f001 fbff 	bl	80037d4 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>
    for(int i = 0; i < (int)length; ++i) {
 8001fd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        data[i] = data32 & 0xFF;
 8001fd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    for(int i = 0; i < (int)length; ++i) {
 8001fda:	3601      	adds	r6, #1
 8001fdc:	42b2      	cmp	r2, r6
        data[i] = data32 & 0xFF;
 8001fde:	f808 3f01 	strb.w	r3, [r8, #1]!
    for(int i = 0; i < (int)length; ++i) {
 8001fe2:	dce1      	bgt.n	8001fa8 <_ZN10LoRa_class16read_packet_dataEbbb+0xd8>
    class LoRa_packet send_packet(data, length, crc_err, rssi, snr);
 8001fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fe6:	9c06      	ldr	r4, [sp, #24]
 8001fe8:	9301      	str	r3, [sp, #4]
 8001fea:	9b08      	ldr	r3, [sp, #32]
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	4659      	mov	r1, fp
 8001ff2:	9b07      	ldr	r3, [sp, #28]
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f000 faf9 	bl	80025ec <_ZN11LoRa_packetC1EPhhbhf>
    delete[] data;
 8001ffa:	4658      	mov	r0, fp
 8001ffc:	f009 fe56 	bl	800bcac <_ZdaPv>
}
 8002000:	4620      	mov	r0, r4
 8002002:	b039      	add	sp, #228	; 0xe4
 8002004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return _reg_field.get_field_value(field, value, read);
 8002008:	f04f 0e01 	mov.w	lr, #1
    uint32_t rssi = 0;
 800200c:	f04f 0c00 	mov.w	ip, #0
 8002010:	460f      	mov	r7, r1
 8002012:	4d2a      	ldr	r5, [pc, #168]	; (80020bc <_ZN10LoRa_class16read_packet_dataEbbb+0x1ec>)
 8002014:	ac23      	add	r4, sp, #140	; 0x8c
 8002016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002018:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800201a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800201e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return _reg_field.get_field_value(field, value, read);
 8002022:	ab26      	add	r3, sp, #152	; 0x98
 8002024:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002026:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800202a:	f8cd e014 	str.w	lr, [sp, #20]
 800202e:	ac23      	add	r4, sp, #140	; 0x8c
 8002030:	ad31      	add	r5, sp, #196	; 0xc4
 8002032:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
    uint32_t rssi = 0;
 8002036:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
    return _reg_field.get_field_value(field, value, read);
 800203a:	9504      	str	r5, [sp, #16]
 800203c:	4648      	mov	r0, r9
 800203e:	f001 fbc9 	bl	80037d4 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>
    if (_frequency < 868E6)
 8002042:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002046:	f7fe fa09 	bl	800045c <__aeabi_ul2d>
 800204a:	a317      	add	r3, pc, #92	; (adr r3, 80020a8 <_ZN10LoRa_class16read_packet_dataEbbb+0x1d8>)
 800204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002050:	f7fe fcac 	bl	80009ac <__aeabi_dcmplt>
        rssi -= 164;
 8002054:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    if (_frequency < 868E6)
 8002056:	bb18      	cbnz	r0, 80020a0 <_ZN10LoRa_class16read_packet_dataEbbb+0x1d0>
        rssi -= 157;
 8002058:	3b9d      	subs	r3, #157	; 0x9d
    return rssi;
 800205a:	b2db      	uxtb	r3, r3
 800205c:	9308      	str	r3, [sp, #32]
    if (f_snr)
 800205e:	2e00      	cmp	r6, #0
 8002060:	f43f af47 	beq.w	8001ef2 <_ZN10LoRa_class16read_packet_dataEbbb+0x22>
 8002064:	4e16      	ldr	r6, [pc, #88]	; (80020c0 <_ZN10LoRa_class16read_packet_dataEbbb+0x1f0>)
    return _reg_field.get_field_value(field, value, read);
 8002066:	2701      	movs	r7, #1
 8002068:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800206a:	ac2a      	add	r4, sp, #168	; 0xa8
 800206c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800206e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    float snr = 0;
 8002072:	2600      	movs	r6, #0
 8002074:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return _reg_field.get_field_value(field, value, read);
 8002078:	ab2d      	add	r3, sp, #180	; 0xb4
 800207a:	9504      	str	r5, [sp, #16]
 800207c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800207e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8002082:	9705      	str	r7, [sp, #20]
 8002084:	ac2a      	add	r4, sp, #168	; 0xa8
 8002086:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800208a:	4648      	mov	r0, r9
    float snr = 0;
 800208c:	9631      	str	r6, [sp, #196]	; 0xc4
    return _reg_field.get_field_value(field, value, read);
 800208e:	f001 fba1 	bl	80037d4 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>
    return (snr * 0.25);
 8002092:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8002096:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8002098:	f7fe fd36 	bl	8000b08 <__aeabi_fmul>
 800209c:	9009      	str	r0, [sp, #36]	; 0x24
 800209e:	e72a      	b.n	8001ef6 <_ZN10LoRa_class16read_packet_dataEbbb+0x26>
        rssi -= 164;
 80020a0:	3ba4      	subs	r3, #164	; 0xa4
 80020a2:	e7da      	b.n	800205a <_ZN10LoRa_class16read_packet_dataEbbb+0x18a>
 80020a4:	f3af 8000 	nop.w
 80020a8:	80000000 	.word	0x80000000
 80020ac:	41c9de50 	.word	0x41c9de50
 80020b0:	20001028 	.word	0x20001028
 80020b4:	20001044 	.word	0x20001044
 80020b8:	20000fd4 	.word	0x20000fd4
 80020bc:	200012e4 	.word	0x200012e4
 80020c0:	20001300 	.word	0x20001300
 80020c4:	20000fb8 	.word	0x20000fb8

080020c8 <_ZN10LoRa_class15receiver_packetEhmbb>:
class LoRa_packet LoRa_class::receiver_packet(uint8_t count, uint32_t wait, bool rssi, bool snr) {
 80020c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    class LoRa_packet send_packet(nullptr, 0, 0, 0);
 80020cc:	2400      	movs	r4, #0
 80020ce:	f04f 0800 	mov.w	r8, #0
class LoRa_packet LoRa_class::receiver_packet(uint8_t count, uint32_t wait, bool rssi, bool snr) {
 80020d2:	b0d1      	sub	sp, #324	; 0x144
    class LoRa_packet send_packet(nullptr, 0, 0, 0);
 80020d4:	9401      	str	r4, [sp, #4]
class LoRa_packet LoRa_class::receiver_packet(uint8_t count, uint32_t wait, bool rssi, bool snr) {
 80020d6:	f89d 4168 	ldrb.w	r4, [sp, #360]	; 0x168
    Address_field fields[3] = {RxTimeout, RxDone, PayloadCrcError};
 80020da:	4da5      	ldr	r5, [pc, #660]	; (8002370 <_ZN10LoRa_class15receiver_packetEhmbb+0x2a8>)
class LoRa_packet LoRa_class::receiver_packet(uint8_t count, uint32_t wait, bool rssi, bool snr) {
 80020dc:	9408      	str	r4, [sp, #32]
 80020de:	f89d 416c 	ldrb.w	r4, [sp, #364]	; 0x16c
 80020e2:	9207      	str	r2, [sp, #28]
 80020e4:	9409      	str	r4, [sp, #36]	; 0x24
    class LoRa_packet send_packet(nullptr, 0, 0, 0);
 80020e6:	4642      	mov	r2, r8
class LoRa_packet LoRa_class::receiver_packet(uint8_t count, uint32_t wait, bool rssi, bool snr) {
 80020e8:	4689      	mov	r9, r1
 80020ea:	469a      	mov	sl, r3
    class LoRa_packet send_packet(nullptr, 0, 0, 0);
 80020ec:	4641      	mov	r1, r8
 80020ee:	4643      	mov	r3, r8
 80020f0:	f8cd 8000 	str.w	r8, [sp]
    Address_field fields[3] = {RxTimeout, RxDone, PayloadCrcError};
 80020f4:	ac11      	add	r4, sp, #68	; 0x44
class LoRa_packet LoRa_class::receiver_packet(uint8_t count, uint32_t wait, bool rssi, bool snr) {
 80020f6:	4683      	mov	fp, r0
    class LoRa_packet send_packet(nullptr, 0, 0, 0);
 80020f8:	f000 fa78 	bl	80025ec <_ZN11LoRa_packetC1EPhhbhf>
    Address_field fields[3] = {RxTimeout, RxDone, PayloadCrcError};
 80020fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002100:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002104:	4d9b      	ldr	r5, [pc, #620]	; (8002374 <_ZN10LoRa_class15receiver_packetEhmbb+0x2ac>)
 8002106:	f10d 0c60 	add.w	ip, sp, #96	; 0x60
 800210a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800210e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002110:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002114:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002118:	4c97      	ldr	r4, [pc, #604]	; (8002378 <_ZN10LoRa_class15receiver_packetEhmbb+0x2b0>)
 800211a:	af1f      	add	r7, sp, #124	; 0x7c
 800211c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8002120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002122:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002124:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    Address_field flags[3] = {RxDone, ValidHeader, PayloadCrcError};
 8002128:	f1a5 0e10 	sub.w	lr, r5, #16
 800212c:	ae26      	add	r6, sp, #152	; 0x98
    Address_field fields[3] = {RxTimeout, RxDone, PayloadCrcError};
 800212e:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    Address_field flags[3] = {RxDone, ValidHeader, PayloadCrcError};
 8002132:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002136:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002138:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800213c:	4d8f      	ldr	r5, [pc, #572]	; (800237c <_ZN10LoRa_class15receiver_packetEhmbb+0x2b4>)
 800213e:	af2d      	add	r7, sp, #180	; 0xb4
 8002140:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8002144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002146:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002148:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800214c:	f1a4 0610 	sub.w	r6, r4, #16
 8002150:	ad34      	add	r5, sp, #208	; 0xd0
 8002152:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8002156:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800215a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    if(count == 1) {
 800215e:	9b07      	ldr	r3, [sp, #28]
    Address_field flags[3] = {RxDone, ValidHeader, PayloadCrcError};
 8002160:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if(count == 1) {
 8002164:	2b01      	cmp	r3, #1
 8002166:	d003      	beq.n	8002170 <_ZN10LoRa_class15receiver_packetEhmbb+0xa8>
}
 8002168:	4658      	mov	r0, fp
 800216a:	b051      	add	sp, #324	; 0x144
 800216c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mode_RX_single();
 8002170:	4619      	mov	r1, r3
 8002172:	4648      	mov	r0, r9
 8002174:	f7ff faf6 	bl	8001764 <_ZN10LoRa_class14mode_RX_singleEb>
        uint32_t values[3] = {0, 0, 0};
 8002178:	e9cd 880b 	strd	r8, r8, [sp, #44]	; 0x2c
 800217c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
        for(time = HAL_GetTick(), start_time = time, read_time = time; (HAL_GetTick() - time < wait)||(no_wait);) {
 8002180:	f004 ffae 	bl	80070e0 <HAL_GetTick>
 8002184:	4605      	mov	r5, r0
 8002186:	f004 ffab 	bl	80070e0 <HAL_GetTick>
 800218a:	1b40      	subs	r0, r0, r5
 800218c:	4550      	cmp	r0, sl
 800218e:	f109 043c 	add.w	r4, r9, #60	; 0x3c
 8002192:	d370      	bcc.n	8002276 <_ZN10LoRa_class15receiver_packetEhmbb+0x1ae>
 8002194:	f1ba 0f00 	cmp.w	sl, #0
 8002198:	d11a      	bne.n	80021d0 <_ZN10LoRa_class15receiver_packetEhmbb+0x108>
            if((HAL_GetTick() - read_time > 10U) || (no_wait)) {
 800219a:	f004 ffa1 	bl	80070e0 <HAL_GetTick>
        for(time = HAL_GetTick(), start_time = time, read_time = time; (HAL_GetTick() - time < wait)||(no_wait);) {
 800219e:	462f      	mov	r7, r5
        bool signal = false;
 80021a0:	46d0      	mov	r8, sl
                if ((_dio0_pin != 0) && (_dio1_pin != 0)) {
 80021a2:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 80021a6:	b121      	cbz	r1, 80021b2 <_ZN10LoRa_class15receiver_packetEhmbb+0xea>
 80021a8:	f8b9 301c 	ldrh.w	r3, [r9, #28]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f040 808f 	bne.w	80022d0 <_ZN10LoRa_class15receiver_packetEhmbb+0x208>
    return _reg_field.get_field_value(fields, values, amt, read);
 80021b2:	2201      	movs	r2, #1
 80021b4:	2303      	movs	r3, #3
 80021b6:	9200      	str	r2, [sp, #0]
 80021b8:	a911      	add	r1, sp, #68	; 0x44
 80021ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80021bc:	4620      	mov	r0, r4
 80021be:	f000 ff41 	bl	8003044 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb>
                    if(amt == 3) {
 80021c2:	2803      	cmp	r0, #3
 80021c4:	d05e      	beq.n	8002284 <_ZN10LoRa_class15receiver_packetEhmbb+0x1bc>
        for(time = HAL_GetTick(), start_time = time, read_time = time; (HAL_GetTick() - time < wait)||(no_wait);) {
 80021c6:	f004 ff8b 	bl	80070e0 <HAL_GetTick>
 80021ca:	1b40      	subs	r0, r0, r5
 80021cc:	4582      	cmp	sl, r0
 80021ce:	d853      	bhi.n	8002278 <_ZN10LoRa_class15receiver_packetEhmbb+0x1b0>
    return _reg_field.get_field_value(fields, values, amt, read);
 80021d0:	2301      	movs	r3, #1
 80021d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80021d4:	a911      	add	r1, sp, #68	; 0x44
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	4620      	mov	r0, r4
 80021da:	2303      	movs	r3, #3
 80021dc:	f000 ff32 	bl	8003044 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb>
            _reg_field.clear_flags(flags, 3);
 80021e0:	a926      	add	r1, sp, #152	; 0x98
 80021e2:	2300      	movs	r3, #0
 80021e4:	2203      	movs	r2, #3
 80021e6:	4620      	mov	r0, r4
 80021e8:	f000 fe02 	bl	8002df0 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb>
            send_packet = LoRa_packet(nullptr, 0);
 80021ec:	2300      	movs	r3, #0
 80021ee:	2000      	movs	r0, #0
 80021f0:	ad3b      	add	r5, sp, #236	; 0xec
 80021f2:	9001      	str	r0, [sp, #4]
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	4619      	mov	r1, r3
 80021fa:	4628      	mov	r0, r5
 80021fc:	f000 f9f6 	bl	80025ec <_ZN11LoRa_packetC1EPhhbhf>
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8002200:	462f      	mov	r7, r5
            send_packet = LoRa_packet(nullptr, 0);
 8002202:	4629      	mov	r1, r5
 8002204:	4658      	mov	r0, fp
 8002206:	f000 fa23 	bl	8002650 <_ZN11LoRa_packetaSERKS_>
 800220a:	4628      	mov	r0, r5
 800220c:	f000 fa18 	bl	8002640 <_ZN11LoRa_packetD1Ev>
    uint32_t values[3] = {1, 0, mode};
 8002210:	f04f 0801 	mov.w	r8, #1
 8002214:	f04f 0e00 	mov.w	lr, #0
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8002218:	4e59      	ldr	r6, [pc, #356]	; (8002380 <_ZN10LoRa_class15receiver_packetEhmbb+0x2b8>)
 800221a:	f50d 7c84 	add.w	ip, sp, #264	; 0x108
 800221e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002220:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002222:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8002226:	4e57      	ldr	r6, [pc, #348]	; (8002384 <_ZN10LoRa_class15receiver_packetEhmbb+0x2bc>)
 8002228:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800222c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800222e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002232:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8002236:	4f54      	ldr	r7, [pc, #336]	; (8002388 <_ZN10LoRa_class15receiver_packetEhmbb+0x2c0>)
 8002238:	ae49      	add	r6, sp, #292	; 0x124
 800223a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800223e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002240:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002242:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 8002246:	2303      	movs	r3, #3
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8002248:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 800224c:	aa0e      	add	r2, sp, #56	; 0x38
 800224e:	4629      	mov	r1, r5
 8002250:	4620      	mov	r0, r4
    uint32_t values[3] = {1, 0, mode};
 8002252:	e9cd ee0f 	strd	lr, lr, [sp, #60]	; 0x3c
 8002256:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    result = _reg_field.set_field_value(fields, values, amt);
 800225a:	f000 fd65 	bl	8002d28 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
        result = _reg_field.register_write(fields, amt, true, true);
 800225e:	f8cd 8000 	str.w	r8, [sp]
 8002262:	4643      	mov	r3, r8
 8002264:	4629      	mov	r1, r5
 8002266:	4620      	mov	r0, r4
 8002268:	2203      	movs	r2, #3
 800226a:	f000 fe57 	bl	8002f1c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
}
 800226e:	4658      	mov	r0, fp
 8002270:	b051      	add	sp, #324	; 0x144
 8002272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(time = HAL_GetTick(), start_time = time, read_time = time; (HAL_GetTick() - time < wait)||(no_wait);) {
 8002276:	462f      	mov	r7, r5
            if((HAL_GetTick() - read_time > 10U) || (no_wait)) {
 8002278:	f004 ff32 	bl	80070e0 <HAL_GetTick>
 800227c:	1b40      	subs	r0, r0, r5
 800227e:	280a      	cmp	r0, #10
 8002280:	d9a1      	bls.n	80021c6 <_ZN10LoRa_class15receiver_packetEhmbb+0xfe>
 8002282:	e78e      	b.n	80021a2 <_ZN10LoRa_class15receiver_packetEhmbb+0xda>
                if(rx_done != 0) {
 8002284:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
                        rx_timeout = values[0];
 8002288:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
                if(rx_done != 0) {
 800228c:	2e00      	cmp	r6, #0
 800228e:	d156      	bne.n	800233e <_ZN10LoRa_class15receiver_packetEhmbb+0x276>
                if(rx_timeout != 0) {
 8002290:	2b00      	cmp	r3, #0
 8002292:	d098      	beq.n	80021c6 <_ZN10LoRa_class15receiver_packetEhmbb+0xfe>
                    _reg_field.clear_flags(RxTimeout);
 8002294:	4b3d      	ldr	r3, [pc, #244]	; (800238c <_ZN10LoRa_class15receiver_packetEhmbb+0x2c4>)
 8002296:	9604      	str	r6, [sp, #16]
 8002298:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800229a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800229e:	4b34      	ldr	r3, [pc, #208]	; (8002370 <_ZN10LoRa_class15receiver_packetEhmbb+0x2a8>)
 80022a0:	4620      	mov	r0, r4
 80022a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022a4:	f001 fa1a 	bl	80036dc <_ZN13LoRa_register11clear_flagsE13Address_fieldb>
                    mode_RX_single(false);
 80022a8:	4631      	mov	r1, r6
 80022aa:	4648      	mov	r0, r9
 80022ac:	f7ff fa5a 	bl	8001764 <_ZN10LoRa_class14mode_RX_singleEb>
                    start_time = HAL_GetTick();
 80022b0:	f004 ff16 	bl	80070e0 <HAL_GetTick>
 80022b4:	4607      	mov	r7, r0
        for(time = HAL_GetTick(), start_time = time, read_time = time; (HAL_GetTick() - time < wait)||(no_wait);) {
 80022b6:	f004 ff13 	bl	80070e0 <HAL_GetTick>
 80022ba:	1b40      	subs	r0, r0, r5
 80022bc:	4582      	cmp	sl, r0
                    signal = false;
 80022be:	46b0      	mov	r8, r6
        for(time = HAL_GetTick(), start_time = time, read_time = time; (HAL_GetTick() - time < wait)||(no_wait);) {
 80022c0:	d986      	bls.n	80021d0 <_ZN10LoRa_class15receiver_packetEhmbb+0x108>
            if((HAL_GetTick() - read_time > 10U) || (no_wait)) {
 80022c2:	f004 ff0d 	bl	80070e0 <HAL_GetTick>
 80022c6:	1b40      	subs	r0, r0, r5
 80022c8:	280a      	cmp	r0, #10
 80022ca:	f67f af7c 	bls.w	80021c6 <_ZN10LoRa_class15receiver_packetEhmbb+0xfe>
 80022ce:	e768      	b.n	80021a2 <_ZN10LoRa_class15receiver_packetEhmbb+0xda>
                	pin_done = HAL_GPIO_ReadPin(_dio0_port, _dio0_pin);
 80022d0:	f8d9 0018 	ldr.w	r0, [r9, #24]
 80022d4:	f005 f8bc 	bl	8007450 <HAL_GPIO_ReadPin>
                	pin_timeout = HAL_GPIO_ReadPin(_dio1_port, _dio1_pin);
 80022d8:	f8b9 101c 	ldrh.w	r1, [r9, #28]
                	pin_done = HAL_GPIO_ReadPin(_dio0_port, _dio0_pin);
 80022dc:	4606      	mov	r6, r0
                	pin_timeout = HAL_GPIO_ReadPin(_dio1_port, _dio1_pin);
 80022de:	f8d9 0020 	ldr.w	r0, [r9, #32]
 80022e2:	f005 f8b5 	bl	8007450 <HAL_GPIO_ReadPin>
                    if (_dio3_pin != 0) {
 80022e6:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
 80022ea:	b9c9      	cbnz	r1, 8002320 <_ZN10LoRa_class15receiver_packetEhmbb+0x258>
                    if ((pin_done == GPIO_PIN_SET) || (pin_timeout == GPIO_PIN_SET) || (pin_crc_err == GPIO_PIN_SET)) {
 80022ec:	2e01      	cmp	r6, #1
 80022ee:	d023      	beq.n	8002338 <_ZN10LoRa_class15receiver_packetEhmbb+0x270>
 80022f0:	2801      	cmp	r0, #1
 80022f2:	d021      	beq.n	8002338 <_ZN10LoRa_class15receiver_packetEhmbb+0x270>
                if ((_dio0_pin == 0) || (_dio1_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 80022f4:	f8b9 3014 	ldrh.w	r3, [r9, #20]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f43f af5a 	beq.w	80021b2 <_ZN10LoRa_class15receiver_packetEhmbb+0xea>
 80022fe:	f8b9 301c 	ldrh.w	r3, [r9, #28]
 8002302:	2b00      	cmp	r3, #0
 8002304:	f43f af55 	beq.w	80021b2 <_ZN10LoRa_class15receiver_packetEhmbb+0xea>
 8002308:	f004 feea 	bl	80070e0 <HAL_GetTick>
 800230c:	1bc0      	subs	r0, r0, r7
 800230e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8002312:	f63f af4e 	bhi.w	80021b2 <_ZN10LoRa_class15receiver_packetEhmbb+0xea>
 8002316:	f1b8 0f00 	cmp.w	r8, #0
 800231a:	f43f af54 	beq.w	80021c6 <_ZN10LoRa_class15receiver_packetEhmbb+0xfe>
 800231e:	e748      	b.n	80021b2 <_ZN10LoRa_class15receiver_packetEhmbb+0xea>
 8002320:	9007      	str	r0, [sp, #28]
                    	pin_crc_err = HAL_GPIO_ReadPin(_dio3_port, _dio3_pin);
 8002322:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
 8002326:	f005 f893 	bl	8007450 <HAL_GPIO_ReadPin>
                    if ((pin_done == GPIO_PIN_SET) || (pin_timeout == GPIO_PIN_SET) || (pin_crc_err == GPIO_PIN_SET)) {
 800232a:	2e01      	cmp	r6, #1
 800232c:	d004      	beq.n	8002338 <_ZN10LoRa_class15receiver_packetEhmbb+0x270>
 800232e:	9b07      	ldr	r3, [sp, #28]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d001      	beq.n	8002338 <_ZN10LoRa_class15receiver_packetEhmbb+0x270>
 8002334:	2801      	cmp	r0, #1
 8002336:	d1dd      	bne.n	80022f4 <_ZN10LoRa_class15receiver_packetEhmbb+0x22c>
                        signal = true;
 8002338:	f04f 0801 	mov.w	r8, #1
 800233c:	e7da      	b.n	80022f4 <_ZN10LoRa_class15receiver_packetEhmbb+0x22c>
            _reg_field.clear_flags(RxDone);
 800233e:	2500      	movs	r5, #0
 8002340:	4b13      	ldr	r3, [pc, #76]	; (8002390 <_ZN10LoRa_class15receiver_packetEhmbb+0x2c8>)
                        crc_err = values[2];
 8002342:	9e0d      	ldr	r6, [sp, #52]	; 0x34
            _reg_field.clear_flags(RxDone);
 8002344:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002346:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800234a:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <_ZN10LoRa_class15receiver_packetEhmbb+0x2ac>)
 800234c:	9504      	str	r5, [sp, #16]
 800234e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002350:	4620      	mov	r0, r4
 8002352:	f001 f9c3 	bl	80036dc <_ZN13LoRa_register11clear_flagsE13Address_fieldb>
            send_packet = read_packet_data(crc_err, rssi, snr);
 8002356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002358:	b2f2      	uxtb	r2, r6
 800235a:	ad3b      	add	r5, sp, #236	; 0xec
 800235c:	3200      	adds	r2, #0
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	bf18      	it	ne
 8002362:	2201      	movne	r2, #1
 8002364:	9b08      	ldr	r3, [sp, #32]
 8002366:	4649      	mov	r1, r9
 8002368:	4628      	mov	r0, r5
 800236a:	f7ff fdb1 	bl	8001ed0 <_ZN10LoRa_class16read_packet_dataEbbb>
 800236e:	e747      	b.n	8002200 <_ZN10LoRa_class15receiver_packetEhmbb+0x138>
 8002370:	200014a4 	.word	0x200014a4
 8002374:	20001450 	.word	0x20001450
 8002378:	2000131c 	.word	0x2000131c
 800237c:	200015a0 	.word	0x200015a0
 8002380:	20001178 	.word	0x20001178
 8002384:	200011b0 	.word	0x200011b0
 8002388:	20001204 	.word	0x20001204
 800238c:	200014b0 	.word	0x200014b0
 8002390:	2000145c 	.word	0x2000145c

08002394 <_ZN10LoRa_class13sender_packetEPhhm>:
bool LoRa_class::sender_packet(uint8_t* packet, uint8_t len, uint32_t wait) {
 8002394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002398:	4683      	mov	fp, r0
    uint32_t values[3] = {1, 0, mode};
 800239a:	2701      	movs	r7, #1
 800239c:	f04f 0c00 	mov.w	ip, #0
bool LoRa_class::sender_packet(uint8_t* packet, uint8_t len, uint32_t wait) {
 80023a0:	b0bd      	sub	sp, #244	; 0xf4
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 80023a2:	4e81      	ldr	r6, [pc, #516]	; (80025a8 <_ZN10LoRa_class13sender_packetEPhhm+0x214>)
 80023a4:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
bool LoRa_class::sender_packet(uint8_t* packet, uint8_t len, uint32_t wait) {
 80023a8:	4615      	mov	r5, r2
 80023aa:	9307      	str	r3, [sp, #28]
 80023ac:	4689      	mov	r9, r1
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 80023ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80023b0:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80023b4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80023b8:	4e7c      	ldr	r6, [pc, #496]	; (80025ac <_ZN10LoRa_class13sender_packetEPhhm+0x218>)
 80023ba:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 80023be:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 80023c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80023c4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80023c8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80023cc:	4e78      	ldr	r6, [pc, #480]	; (80025b0 <_ZN10LoRa_class13sender_packetEPhhm+0x21c>)
 80023ce:	ac35      	add	r4, sp, #212	; 0xd4
 80023d0:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 80023d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80023d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023d8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 80023dc:	f10b 083c 	add.w	r8, fp, #60	; 0x3c
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 80023e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 80023e4:	2303      	movs	r3, #3
 80023e6:	aa20      	add	r2, sp, #128	; 0x80
 80023e8:	a927      	add	r1, sp, #156	; 0x9c
 80023ea:	4640      	mov	r0, r8
 80023ec:	4e71      	ldr	r6, [pc, #452]	; (80025b4 <_ZN10LoRa_class13sender_packetEPhhm+0x220>)
    uint32_t values[3] = {1, 0, mode};
 80023ee:	e9cd 7c20 	strd	r7, ip, [sp, #128]	; 0x80
 80023f2:	9722      	str	r7, [sp, #136]	; 0x88
 80023f4:	ac0b      	add	r4, sp, #44	; 0x2c
    result = _reg_field.set_field_value(fields, values, amt);
 80023f6:	f000 fc97 	bl	8002d28 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
        result = _reg_field.register_write(fields, amt, true, true);
 80023fa:	463b      	mov	r3, r7
 80023fc:	a927      	add	r1, sp, #156	; 0x9c
 80023fe:	2203      	movs	r2, #3
 8002400:	9700      	str	r7, [sp, #0]
 8002402:	4640      	mov	r0, r8
 8002404:	f000 fd8a 	bl	8002f1c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
 8002408:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800240a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800240c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8002410:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result = _reg_field.set_field_value(field, value);
 8002414:	ac0e      	add	r4, sp, #56	; 0x38
 8002416:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    field_set(FifoAddrPtr, _FifoTxBaseAddr);
 800241a:	f89b c038 	ldrb.w	ip, [fp, #56]	; 0x38
    result = _reg_field.set_field_value(field, value);
 800241e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8002422:	f8cd c010 	str.w	ip, [sp, #16]
 8002426:	ae0b      	add	r6, sp, #44	; 0x2c
 8002428:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800242c:	4640      	mov	r0, r8
 800242e:	f001 f947 	bl	80036c0 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
        result = _reg_field.register_write(field, true, true);
 8002432:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002436:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800243a:	e9cd 7704 	strd	r7, r7, [sp, #16]
 800243e:	4640      	mov	r0, r8
 8002440:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002444:	f000 fee2 	bl	800320c <_ZN13LoRa_register14register_writeE13Address_fieldbb>
    _packet_length += len;
 8002448:	f88b 5039 	strb.w	r5, [fp, #57]	; 0x39
    for(int i = 0; i < len; ++i)
 800244c:	b34d      	cbz	r5, 80024a2 <_ZN10LoRa_class13sender_packetEPhhm+0x10e>
 800244e:	eb09 0a05 	add.w	sl, r9, r5
 8002452:	ae12      	add	r6, sp, #72	; 0x48
 8002454:	ad15      	add	r5, sp, #84	; 0x54
 8002456:	4634      	mov	r4, r6
 8002458:	f8df c164 	ldr.w	ip, [pc, #356]	; 80025c0 <_ZN10LoRa_class13sender_packetEPhhm+0x22c>
        field_set(Fifo, packet[i]);
 800245c:	f819 eb01 	ldrb.w	lr, [r9], #1
 8002460:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002464:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002466:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800246a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800246e:	f8cd e010 	str.w	lr, [sp, #16]
    result = _reg_field.set_field_value(field, value);
 8002472:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002476:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800247a:	4640      	mov	r0, r8
 800247c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002480:	f001 f91e 	bl	80036c0 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
        result = _reg_field.register_write(field, true, true);
 8002484:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002488:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800248c:	e9cd 7704 	strd	r7, r7, [sp, #16]
 8002490:	4640      	mov	r0, r8
 8002492:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002496:	f000 feb9 	bl	800320c <_ZN13LoRa_register14register_writeE13Address_fieldbb>
    for(int i = 0; i < len; ++i)
 800249a:	45ca      	cmp	sl, r9
 800249c:	d1db      	bne.n	8002456 <_ZN10LoRa_class13sender_packetEPhhm+0xc2>
 800249e:	f89b 5039 	ldrb.w	r5, [fp, #57]	; 0x39
        result = _reg_field.register_write(field, true, true);
 80024a2:	2701      	movs	r7, #1
 80024a4:	4e44      	ldr	r6, [pc, #272]	; (80025b8 <_ZN10LoRa_class13sender_packetEPhhm+0x224>)
 80024a6:	ac19      	add	r4, sp, #100	; 0x64
 80024a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80024aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ac:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80024b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    field_set(PayloadLength, _packet_length);
 80024b4:	9504      	str	r5, [sp, #16]
    result = _reg_field.set_field_value(field, value);
 80024b6:	ac1c      	add	r4, sp, #112	; 0x70
 80024b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024bc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80024c0:	ae19      	add	r6, sp, #100	; 0x64
 80024c2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80024c6:	4640      	mov	r0, r8
 80024c8:	f001 f8fa 	bl	80036c0 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
        result = _reg_field.register_write(field, true, true);
 80024cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024d0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80024d4:	9705      	str	r7, [sp, #20]
 80024d6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80024da:	4640      	mov	r0, r8
 80024dc:	9704      	str	r7, [sp, #16]
 80024de:	f000 fe95 	bl	800320c <_ZN13LoRa_register14register_writeE13Address_fieldbb>
    if (set_dio & (_dio0_pin != 0))
 80024e2:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d13e      	bne.n	8002568 <_ZN10LoRa_class13sender_packetEPhhm+0x1d4>
    uint32_t values[3] = {1, 0, mode};
 80024ea:	2603      	movs	r6, #3
 80024ec:	2701      	movs	r7, #1
 80024ee:	f04f 0900 	mov.w	r9, #0
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 80024f2:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80025a8 <_ZN10LoRa_class13sender_packetEPhhm+0x214>
 80024f6:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 80024fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80024fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002502:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002506:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 80025ac <_ZN10LoRa_class13sender_packetEPhhm+0x218>
 800250a:	ad2e      	add	r5, sp, #184	; 0xb8
 800250c:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8002510:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002514:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002516:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800251a:	f8df c094 	ldr.w	ip, [pc, #148]	; 80025b0 <_ZN10LoRa_class13sender_packetEPhhm+0x21c>
 800251e:	ac35      	add	r4, sp, #212	; 0xd4
 8002520:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002524:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800252a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 800252e:	4633      	mov	r3, r6
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8002530:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 8002534:	aa08      	add	r2, sp, #32
 8002536:	a927      	add	r1, sp, #156	; 0x9c
 8002538:	4640      	mov	r0, r8
    uint32_t values[3] = {1, 0, mode};
 800253a:	e9cd 9609 	strd	r9, r6, [sp, #36]	; 0x24
 800253e:	9708      	str	r7, [sp, #32]
    result = _reg_field.set_field_value(fields, values, amt);
 8002540:	f000 fbf2 	bl	8002d28 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
        result = _reg_field.register_write(fields, amt, true, true);
 8002544:	463b      	mov	r3, r7
 8002546:	9700      	str	r7, [sp, #0]
 8002548:	4632      	mov	r2, r6
 800254a:	a927      	add	r1, sp, #156	; 0x9c
 800254c:	4640      	mov	r0, r8
 800254e:	f000 fce5 	bl	8002f1c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
    if(wait > 0) {
 8002552:	9b07      	ldr	r3, [sp, #28]
 8002554:	b123      	cbz	r3, 8002560 <_ZN10LoRa_class13sender_packetEPhhm+0x1cc>
 8002556:	464a      	mov	r2, r9
 8002558:	4619      	mov	r1, r3
 800255a:	4658      	mov	r0, fp
 800255c:	f7fe ffc8 	bl	80014f0 <_ZN10LoRa_class10packet_endEmb.part.2>
}
 8002560:	2000      	movs	r0, #0
 8002562:	b03d      	add	sp, #244	; 0xf4
 8002564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002568:	4d14      	ldr	r5, [pc, #80]	; (80025bc <_ZN10LoRa_class13sender_packetEPhhm+0x228>)
    result = _reg_field.set_field_value(field, value);
 800256a:	9704      	str	r7, [sp, #16]
 800256c:	ac20      	add	r4, sp, #128	; 0x80
 800256e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002572:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002576:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800257a:	ac23      	add	r4, sp, #140	; 0x8c
 800257c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002580:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8002584:	ab20      	add	r3, sp, #128	; 0x80
 8002586:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002588:	4640      	mov	r0, r8
 800258a:	f001 f899 	bl	80036c0 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
        result = _reg_field.register_write(field, true, true);
 800258e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002592:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8002596:	e9cd 7704 	strd	r7, r7, [sp, #16]
 800259a:	ab20      	add	r3, sp, #128	; 0x80
 800259c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800259e:	4640      	mov	r0, r8
 80025a0:	f000 fe34 	bl	800320c <_ZN13LoRa_register14register_writeE13Address_fieldbb>
 80025a4:	e7a1      	b.n	80024ea <_ZN10LoRa_class13sender_packetEPhhm+0x156>
 80025a6:	bf00      	nop
 80025a8:	20001178 	.word	0x20001178
 80025ac:	200011b0 	.word	0x200011b0
 80025b0:	20001204 	.word	0x20001204
 80025b4:	20000fd4 	.word	0x20000fd4
 80025b8:	20001354 	.word	0x20001354
 80025bc:	20000ea0 	.word	0x20000ea0
 80025c0:	20000fb8 	.word	0x20000fb8

080025c4 <_GLOBAL__sub_I_LoRa>:
class LoRa_class LoRa;
 80025c4:	4801      	ldr	r0, [pc, #4]	; (80025cc <_GLOBAL__sub_I_LoRa+0x8>)
 80025c6:	f7ff b827 	b.w	8001618 <_ZN10LoRa_classC1Ev>
 80025ca:	bf00      	nop
 80025cc:	20000120 	.word	0x20000120

080025d0 <_GLOBAL__sub_D_LoRa>:
 80025d0:	4801      	ldr	r0, [pc, #4]	; (80025d8 <_GLOBAL__sub_D_LoRa+0x8>)
 80025d2:	f7ff b853 	b.w	800167c <_ZN10LoRa_classD1Ev>
 80025d6:	bf00      	nop
 80025d8:	20000120 	.word	0x20000120

080025dc <_ZN11LoRa_packetC1Ev>:
#include "LoRa_packet.h"

LoRa_packet::LoRa_packet() {}
 80025dc:	2200      	movs	r2, #0
 80025de:	2100      	movs	r1, #0
 80025e0:	6002      	str	r2, [r0, #0]
 80025e2:	6081      	str	r1, [r0, #8]
 80025e4:	8082      	strh	r2, [r0, #4]
 80025e6:	7302      	strb	r2, [r0, #12]
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop

080025ec <_ZN11LoRa_packetC1EPhhbhf>:

LoRa_packet::LoRa_packet(uint8_t* data, uint8_t len, bool crc_error, uint8_t rssi, float snr) {
 80025ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ee:	4604      	mov	r4, r0
 80025f0:	2500      	movs	r5, #0
 80025f2:	2000      	movs	r0, #0
 80025f4:	b085      	sub	sp, #20
 80025f6:	60a0      	str	r0, [r4, #8]
 80025f8:	6025      	str	r5, [r4, #0]
 80025fa:	80a5      	strh	r5, [r4, #4]
 80025fc:	7325      	strb	r5, [r4, #12]
 80025fe:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
    if(_data != nullptr) {
        delete[] _data;
        _data = nullptr;
        _len = 0;
    }
    if((data != nullptr) && (len != 0)){
 8002602:	b101      	cbz	r1, 8002606 <_ZN11LoRa_packetC1EPhhbhf+0x1a>
 8002604:	b932      	cbnz	r2, 8002614 <_ZN11LoRa_packetC1EPhhbhf+0x28>
}
 8002606:	4620      	mov	r0, r4
        _len = len;
        _data = new uint8_t[_len];
        for(int i = 0; i < len; ++i)
            _data[i] = data[i];
    }
    _crc_error = crc_error;
 8002608:	7323      	strb	r3, [r4, #12]
    _rssi = rssi;
    _snr = snr;
 800260a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    _rssi = rssi;
 800260c:	7166      	strb	r6, [r4, #5]
    _snr = snr;
 800260e:	60a3      	str	r3, [r4, #8]
}
 8002610:	b005      	add	sp, #20
 8002612:	bdf0      	pop	{r4, r5, r6, r7, pc}
        _len = len;
 8002614:	7122      	strb	r2, [r4, #4]
        _data = new uint8_t[_len];
 8002616:	4610      	mov	r0, r2
 8002618:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800261c:	9201      	str	r2, [sp, #4]
 800261e:	f009 fb47 	bl	800bcb0 <_Znaj>
 8002622:	9902      	ldr	r1, [sp, #8]
 8002624:	6020      	str	r0, [r4, #0]
 8002626:	3901      	subs	r1, #1
 8002628:	9b03      	ldr	r3, [sp, #12]
 800262a:	9a01      	ldr	r2, [sp, #4]
 800262c:	e000      	b.n	8002630 <_ZN11LoRa_packetC1EPhhbhf+0x44>
 800262e:	6820      	ldr	r0, [r4, #0]
            _data[i] = data[i];
 8002630:	f811 7f01 	ldrb.w	r7, [r1, #1]!
 8002634:	5547      	strb	r7, [r0, r5]
        for(int i = 0; i < len; ++i)
 8002636:	3501      	adds	r5, #1
 8002638:	4295      	cmp	r5, r2
 800263a:	d1f8      	bne.n	800262e <_ZN11LoRa_packetC1EPhhbhf+0x42>
 800263c:	e7e3      	b.n	8002606 <_ZN11LoRa_packetC1EPhhbhf+0x1a>
 800263e:	bf00      	nop

08002640 <_ZN11LoRa_packetD1Ev>:
LoRa_packet::~LoRa_packet() {
 8002640:	b510      	push	{r4, lr}
 8002642:	4604      	mov	r4, r0
    if(_data != nullptr) {
 8002644:	6800      	ldr	r0, [r0, #0]
 8002646:	b108      	cbz	r0, 800264c <_ZN11LoRa_packetD1Ev+0xc>
        delete[] _data;
 8002648:	f009 fb30 	bl	800bcac <_ZdaPv>
}
 800264c:	4620      	mov	r0, r4
 800264e:	bd10      	pop	{r4, pc}

08002650 <_ZN11LoRa_packetaSERKS_>:
uint8_t& LoRa_packet::operator[] (const int index) {
    return _data[index];
}
class LoRa_packet& LoRa_packet::operator=(const class LoRa_packet& right) {
    // Проверка на самоприсваивание
    if (this == &right)
 8002650:	4288      	cmp	r0, r1
class LoRa_packet& LoRa_packet::operator=(const class LoRa_packet& right) {
 8002652:	b538      	push	{r3, r4, r5, lr}
 8002654:	4604      	mov	r4, r0
    if (this == &right)
 8002656:	d01d      	beq.n	8002694 <_ZN11LoRa_packetaSERKS_+0x44>
        return *this;
    // Перенос значений
    _len = right._len;
 8002658:	7908      	ldrb	r0, [r1, #4]
    _crc_error = right._crc_error;
    _rssi = right._rssi;
    _snr = right._snr;
    if(_data != nullptr)
 800265a:	6823      	ldr	r3, [r4, #0]
    _len = right._len;
 800265c:	7120      	strb	r0, [r4, #4]
    _crc_error = right._crc_error;
 800265e:	7b0a      	ldrb	r2, [r1, #12]
 8002660:	460d      	mov	r5, r1
 8002662:	7322      	strb	r2, [r4, #12]
    _rssi = right._rssi;
 8002664:	794a      	ldrb	r2, [r1, #5]
 8002666:	7162      	strb	r2, [r4, #5]
    _snr = right._snr;
 8002668:	688a      	ldr	r2, [r1, #8]
 800266a:	60a2      	str	r2, [r4, #8]
    if(_data != nullptr)
 800266c:	b11b      	cbz	r3, 8002676 <_ZN11LoRa_packetaSERKS_+0x26>
    	delete[] _data;
 800266e:	4618      	mov	r0, r3
 8002670:	f009 fb1c 	bl	800bcac <_ZdaPv>
 8002674:	7920      	ldrb	r0, [r4, #4]
    _data = new uint8_t[_len];
 8002676:	f009 fb1b 	bl	800bcb0 <_Znaj>
    for(int i = 0; i < _len; ++i)
 800267a:	7923      	ldrb	r3, [r4, #4]
    _data = new uint8_t[_len];
 800267c:	6020      	str	r0, [r4, #0]
    for(int i = 0; i < _len; ++i)
 800267e:	b14b      	cbz	r3, 8002694 <_ZN11LoRa_packetaSERKS_+0x44>
 8002680:	2300      	movs	r3, #0
 8002682:	e000      	b.n	8002686 <_ZN11LoRa_packetaSERKS_+0x36>
 8002684:	6820      	ldr	r0, [r4, #0]
        _data[i] = right._data[i];
 8002686:	682a      	ldr	r2, [r5, #0]
 8002688:	5cd2      	ldrb	r2, [r2, r3]
 800268a:	54c2      	strb	r2, [r0, r3]
    for(int i = 0; i < _len; ++i)
 800268c:	7922      	ldrb	r2, [r4, #4]
 800268e:	3301      	adds	r3, #1
 8002690:	429a      	cmp	r2, r3
 8002692:	dcf7      	bgt.n	8002684 <_ZN11LoRa_packetaSERKS_+0x34>
    return *this;
}
 8002694:	4620      	mov	r0, r4
 8002696:	bd38      	pop	{r3, r4, r5, pc}

08002698 <_ZN11LoRa_packet10get_strustEv>:

lora_packet LoRa_packet::get_strust(){
 8002698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800269c:	460d      	mov	r5, r1
 800269e:	4604      	mov	r4, r0
	lora_packet packet;
	packet._len = _len;
	packet._crc_error = _crc_error;
	packet._rssi = _rssi;
	packet._snr = _snr;
	packet._num = 0;
 80026a0:	2200      	movs	r2, #0
	packet._len = _len;
 80026a2:	790b      	ldrb	r3, [r1, #4]
	packet._crc_error = _crc_error;
 80026a4:	7b09      	ldrb	r1, [r1, #12]
	packet._rssi = _rssi;
 80026a6:	7968      	ldrb	r0, [r5, #5]
	packet._crc_error = _crc_error;
 80026a8:	7321      	strb	r1, [r4, #12]
	packet._snr = _snr;
 80026aa:	68a9      	ldr	r1, [r5, #8]
	packet._rssi = _rssi;
 80026ac:	7160      	strb	r0, [r4, #5]
	packet._data = new uint8_t[_len];
 80026ae:	4618      	mov	r0, r3
	packet._snr = _snr;
 80026b0:	60a1      	str	r1, [r4, #8]
	packet._num = 0;
 80026b2:	71a2      	strb	r2, [r4, #6]
	packet._len = _len;
 80026b4:	7123      	strb	r3, [r4, #4]
	packet._data = new uint8_t[_len];
 80026b6:	f009 fafb 	bl	800bcb0 <_Znaj>
    for(int i = 0; i < _len; ++i)
 80026ba:	792f      	ldrb	r7, [r5, #4]
	packet._data = new uint8_t[_len];
 80026bc:	6020      	str	r0, [r4, #0]
    for(int i = 0; i < _len; ++i)
 80026be:	2f00      	cmp	r7, #0
 80026c0:	d047      	beq.n	8002752 <_ZN11LoRa_packet10get_strustEv+0xba>
    	packet._data[i] = _data[i];
 80026c2:	6829      	ldr	r1, [r5, #0]
 80026c4:	1d03      	adds	r3, r0, #4
 80026c6:	1d0a      	adds	r2, r1, #4
 80026c8:	4290      	cmp	r0, r2
 80026ca:	bf38      	it	cc
 80026cc:	4299      	cmpcc	r1, r3
 80026ce:	d345      	bcc.n	800275c <_ZN11LoRa_packet10get_strustEv+0xc4>
 80026d0:	2f0b      	cmp	r7, #11
 80026d2:	d943      	bls.n	800275c <_ZN11LoRa_packet10get_strustEv+0xc4>
 80026d4:	424b      	negs	r3, r1
 80026d6:	f013 0303 	ands.w	r3, r3, #3
 80026da:	d03d      	beq.n	8002758 <_ZN11LoRa_packet10get_strustEv+0xc0>
 80026dc:	780a      	ldrb	r2, [r1, #0]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	7002      	strb	r2, [r0, #0]
 80026e2:	d039      	beq.n	8002758 <_ZN11LoRa_packet10get_strustEv+0xc0>
 80026e4:	784a      	ldrb	r2, [r1, #1]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	7042      	strb	r2, [r0, #1]
 80026ea:	d035      	beq.n	8002758 <_ZN11LoRa_packet10get_strustEv+0xc0>
    for(int i = 0; i < _len; ++i)
 80026ec:	f04f 0803 	mov.w	r8, #3
    	packet._data[i] = _data[i];
 80026f0:	788a      	ldrb	r2, [r1, #2]
 80026f2:	7082      	strb	r2, [r0, #2]
    for(int i = 0; i < _len; ++i)
 80026f4:	2200      	movs	r2, #0
 80026f6:	eba7 0e03 	sub.w	lr, r7, r3
 80026fa:	18cd      	adds	r5, r1, r3
 80026fc:	ea4f 0c9e 	mov.w	ip, lr, lsr #2
 8002700:	4403      	add	r3, r0
    	packet._data[i] = _data[i];
 8002702:	f855 6b04 	ldr.w	r6, [r5], #4
 8002706:	3201      	adds	r2, #1
 8002708:	4594      	cmp	ip, r2
 800270a:	f843 6b04 	str.w	r6, [r3], #4
 800270e:	d8f8      	bhi.n	8002702 <_ZN11LoRa_packet10get_strustEv+0x6a>
 8002710:	f02e 0203 	bic.w	r2, lr, #3
 8002714:	4596      	cmp	lr, r2
 8002716:	eb02 0308 	add.w	r3, r2, r8
 800271a:	d01a      	beq.n	8002752 <_ZN11LoRa_packet10get_strustEv+0xba>
 800271c:	5ccd      	ldrb	r5, [r1, r3]
    for(int i = 0; i < _len; ++i)
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	42ba      	cmp	r2, r7
    	packet._data[i] = _data[i];
 8002722:	54c5      	strb	r5, [r0, r3]
    for(int i = 0; i < _len; ++i)
 8002724:	da15      	bge.n	8002752 <_ZN11LoRa_packet10get_strustEv+0xba>
    	packet._data[i] = _data[i];
 8002726:	5c8e      	ldrb	r6, [r1, r2]
    for(int i = 0; i < _len; ++i)
 8002728:	1c9d      	adds	r5, r3, #2
 800272a:	42af      	cmp	r7, r5
    	packet._data[i] = _data[i];
 800272c:	5486      	strb	r6, [r0, r2]
    for(int i = 0; i < _len; ++i)
 800272e:	dd10      	ble.n	8002752 <_ZN11LoRa_packet10get_strustEv+0xba>
    	packet._data[i] = _data[i];
 8002730:	5d4e      	ldrb	r6, [r1, r5]
    for(int i = 0; i < _len; ++i)
 8002732:	1cda      	adds	r2, r3, #3
 8002734:	4297      	cmp	r7, r2
    	packet._data[i] = _data[i];
 8002736:	5546      	strb	r6, [r0, r5]
    for(int i = 0; i < _len; ++i)
 8002738:	dd0b      	ble.n	8002752 <_ZN11LoRa_packet10get_strustEv+0xba>
    	packet._data[i] = _data[i];
 800273a:	5c8e      	ldrb	r6, [r1, r2]
    for(int i = 0; i < _len; ++i)
 800273c:	1d1d      	adds	r5, r3, #4
 800273e:	42af      	cmp	r7, r5
    	packet._data[i] = _data[i];
 8002740:	5486      	strb	r6, [r0, r2]
    for(int i = 0; i < _len; ++i)
 8002742:	dd06      	ble.n	8002752 <_ZN11LoRa_packet10get_strustEv+0xba>
    	packet._data[i] = _data[i];
 8002744:	5d4a      	ldrb	r2, [r1, r5]
    for(int i = 0; i < _len; ++i)
 8002746:	3305      	adds	r3, #5
 8002748:	429f      	cmp	r7, r3
    	packet._data[i] = _data[i];
 800274a:	5542      	strb	r2, [r0, r5]
    for(int i = 0; i < _len; ++i)
 800274c:	dd01      	ble.n	8002752 <_ZN11LoRa_packet10get_strustEv+0xba>
    	packet._data[i] = _data[i];
 800274e:	5cca      	ldrb	r2, [r1, r3]
 8002750:	54c2      	strb	r2, [r0, r3]
    return packet;
}
 8002752:	4620      	mov	r0, r4
 8002754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for(int i = 0; i < _len; ++i)
 8002758:	4698      	mov	r8, r3
 800275a:	e7cb      	b.n	80026f4 <_ZN11LoRa_packet10get_strustEv+0x5c>
 800275c:	3801      	subs	r0, #1
 800275e:	440f      	add	r7, r1
    	packet._data[i] = _data[i];
 8002760:	f811 3b01 	ldrb.w	r3, [r1], #1
    for(int i = 0; i < _len; ++i)
 8002764:	42b9      	cmp	r1, r7
    	packet._data[i] = _data[i];
 8002766:	f800 3f01 	strb.w	r3, [r0, #1]!
    for(int i = 0; i < _len; ++i)
 800276a:	d1f9      	bne.n	8002760 <_ZN11LoRa_packet10get_strustEv+0xc8>
}
 800276c:	4620      	mov	r0, r4
 800276e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002772:	bf00      	nop

08002774 <_ZN13LoRa_registerC1Ev>:
#include "LoRa_register.h"


LoRa_register::LoRa_register() {
 8002774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002778:	4604      	mov	r4, r0
 800277a:	4d2e      	ldr	r5, [pc, #184]	; (8002834 <_ZN13LoRa_registerC1Ev+0xc0>)
 800277c:	f100 07f0 	add.w	r7, r0, #240	; 0xf0
 8002780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002782:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002784:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002788:	4d2b      	ldr	r5, [pc, #172]	; (8002838 <_ZN13LoRa_registerC1Ev+0xc4>)
 800278a:	f504 7686 	add.w	r6, r4, #268	; 0x10c
 800278e:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8002792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002794:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002796:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    _send = false;
 800279a:	f04f 0800 	mov.w	r8, #0
 800279e:	f04f 0970 	mov.w	r9, #112	; 0x70
LoRa_register::LoRa_register() {
 80027a2:	4d26      	ldr	r5, [pc, #152]	; (800283c <_ZN13LoRa_registerC1Ev+0xc8>)
 80027a4:	f504 7794 	add.w	r7, r4, #296	; 0x128
 80027a8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80027ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ae:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80027b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027b4:	4d22      	ldr	r5, [pc, #136]	; (8002840 <_ZN13LoRa_registerC1Ev+0xcc>)
 80027b6:	f504 76a2 	add.w	r6, r4, #324	; 0x144
 80027ba:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80027be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80027c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027c6:	4d1f      	ldr	r5, [pc, #124]	; (8002844 <_ZN13LoRa_registerC1Ev+0xd0>)
 80027c8:	f504 77b0 	add.w	r7, r4, #352	; 0x160
 80027cc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80027d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027d2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80027d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027d8:	4d1b      	ldr	r5, [pc, #108]	; (8002848 <_ZN13LoRa_registerC1Ev+0xd4>)
 80027da:	f504 76be 	add.w	r6, r4, #380	; 0x17c
 80027de:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80027e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80027e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027ea:	4d18      	ldr	r5, [pc, #96]	; (800284c <_ZN13LoRa_registerC1Ev+0xd8>)
 80027ec:	f504 77cc 	add.w	r7, r4, #408	; 0x198
 80027f0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80027f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027f6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80027f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027fc:	4e14      	ldr	r6, [pc, #80]	; (8002850 <_ZN13LoRa_registerC1Ev+0xdc>)
 80027fe:	f504 75da 	add.w	r5, r4, #436	; 0x1b4
 8002802:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8002806:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800280a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800280e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002812:	4641      	mov	r1, r8
 8002814:	464a      	mov	r2, r9
    _send = false;
 8002816:	f884 80ec 	strb.w	r8, [r4, #236]	; 0xec
 800281a:	f104 000c 	add.w	r0, r4, #12
 800281e:	f00a faf7 	bl	800ce10 <memset>
 8002822:	464a      	mov	r2, r9
 8002824:	4641      	mov	r1, r8
 8002826:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 800282a:	f00a faf1 	bl	800ce10 <memset>
    clear();
}
 800282e:	4620      	mov	r0, r4
 8002830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002834:	200014a4 	.word	0x200014a4
 8002838:	20001450 	.word	0x20001450
 800283c:	2000131c 	.word	0x2000131c
 8002840:	200015a0 	.word	0x200015a0
 8002844:	20001568 	.word	0x20001568
 8002848:	20000df8 	.word	0x20000df8
 800284c:	20000f64 	.word	0x20000f64
 8002850:	20000dc0 	.word	0x20000dc0

08002854 <_ZN13LoRa_registerD1Ev>:
    _send = false;
    clear();
    init(spi, nss_port, nss_pin);
}
LoRa_register::~LoRa_register() {
}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop

08002858 <_ZN13LoRa_register4initEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:

void LoRa_register::init(SPI_HandleTypeDef* spi, GPIO_TypeDef* nss_port, uint16_t nss_pin) {
    _spi = spi;
 8002858:	6001      	str	r1, [r0, #0]
    _nss_port = nss_port;
 800285a:	6082      	str	r2, [r0, #8]
	_nss_pin = nss_pin;
 800285c:	8083      	strh	r3, [r0, #4]
}
 800285e:	4770      	bx	lr

08002860 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8002860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002864:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
 8002868:	429c      	cmp	r4, r3
      vector<_Tp, _Alloc>::
 800286a:	b083      	sub	sp, #12
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800286c:	d008      	beq.n	8002880 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x20>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800286e:	b114      	cbz	r4, 8002876 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x16>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8002870:	780b      	ldrb	r3, [r1, #0]
 8002872:	7023      	strb	r3, [r4, #0]
 8002874:	6844      	ldr	r4, [r0, #4]
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8002876:	3401      	adds	r4, #1
 8002878:	6044      	str	r4, [r0, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 800287a:	b003      	add	sp, #12
 800287c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002880:	6803      	ldr	r3, [r0, #0]
 8002882:	9101      	str	r1, [sp, #4]
 8002884:	1ae6      	subs	r6, r4, r3

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 8002886:	1c73      	adds	r3, r6, #1
 8002888:	4605      	mov	r5, r0
 800288a:	d039      	beq.n	8002900 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0xa0>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800288c:	b34e      	cbz	r6, 80028e2 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x82>
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
 800288e:	ea4f 0846 	mov.w	r8, r6, lsl #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002892:	4546      	cmp	r6, r8
 8002894:	bf88      	it	hi
 8002896:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800289a:	4640      	mov	r0, r8
 800289c:	f009 fa0c 	bl	800bcb8 <_Znwj>
 80028a0:	e9d5 a200 	ldrd	sl, r2, [r5]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80028a4:	42f0      	cmn	r0, r6
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80028a6:	4681      	mov	r9, r0
 80028a8:	4480      	add	r8, r0
 80028aa:	eba4 070a 	sub.w	r7, r4, sl
 80028ae:	eba2 0b04 	sub.w	fp, r2, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80028b2:	d002      	beq.n	80028ba <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x5a>
 80028b4:	9b01      	ldr	r3, [sp, #4]
 80028b6:	781a      	ldrb	r2, [r3, #0]
 80028b8:	5582      	strb	r2, [r0, r6]
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 80028ba:	b9df      	cbnz	r7, 80028f4 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x94>
	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
	     __new_start, _M_get_Tp_allocator());

	  ++__new_finish;
 80028bc:	3701      	adds	r7, #1
 80028be:	444f      	add	r7, r9
 80028c0:	f1bb 0f00 	cmp.w	fp, #0
 80028c4:	d110      	bne.n	80028e8 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x88>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
	  return __result + _Num;
 80028c6:	445f      	add	r7, fp
	if (__p)
 80028c8:	f1ba 0f00 	cmp.w	sl, #0
 80028cc:	d002      	beq.n	80028d4 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x74>
	::operator delete(__p);
 80028ce:	4650      	mov	r0, sl
 80028d0:	f009 fa0c 	bl	800bcec <_ZdlPv>
		    _M_get_Tp_allocator());
      _M_deallocate(this->_M_impl._M_start,
		    this->_M_impl._M_end_of_storage
		    - this->_M_impl._M_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
 80028d4:	e9c5 9700 	strd	r9, r7, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80028d8:	f8c5 8008 	str.w	r8, [r5, #8]
      }
 80028dc:	b003      	add	sp, #12
 80028de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const size_type __len = size() + std::max(size(), __n);
 80028e2:	f04f 0801 	mov.w	r8, #1
 80028e6:	e7d8      	b.n	800289a <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x3a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80028e8:	4621      	mov	r1, r4
 80028ea:	465a      	mov	r2, fp
 80028ec:	4638      	mov	r0, r7
 80028ee:	f00a fa6b 	bl	800cdc8 <memcpy>
 80028f2:	e7e8      	b.n	80028c6 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x66>
 80028f4:	463a      	mov	r2, r7
 80028f6:	4651      	mov	r1, sl
 80028f8:	4648      	mov	r0, r9
 80028fa:	f00a fa70 	bl	800cdde <memmove>
 80028fe:	e7dd      	b.n	80028bc <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x5c>
	  __throw_length_error(__N(__s));
 8002900:	4801      	ldr	r0, [pc, #4]	; (8002908 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0xa8>)
 8002902:	f009 f9f5 	bl	800bcf0 <_ZSt20__throw_length_errorPKc>
 8002906:	bf00      	nop
 8002908:	0800d040 	.word	0x0800d040

0800290c <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_>:
            if(field.get_registers()[i].mask() != 0xFF)
                return true;
    }
    return false;
}
bool LoRa_register::check_read(Address_field* fields, uint8_t amt_fields, std::vector<uint8_t>* reg_read, std::vector<uint8_t>* reg_not_read) {
 800290c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002910:	4614      	mov	r4, r2
 8002912:	b0a5      	sub	sp, #148	; 0x94
 8002914:	af08      	add	r7, sp, #32
 8002916:	4682      	mov	sl, r0
 8002918:	460d      	mov	r5, r1
 800291a:	4638      	mov	r0, r7
 800291c:	2270      	movs	r2, #112	; 0x70
 800291e:	2100      	movs	r1, #0
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
 8002924:	f00a fa74 	bl	800ce10 <memset>
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
        reg_bit[i] = 0;
    }
    // Достаём из полей значения битов регистров
    uint8_t adr;
    for(int i = 0; i < amt_fields; ++i) {
 8002928:	b33c      	cbz	r4, 800297a <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x6e>
 800292a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800292e:	eb05 0884 	add.w	r8, r5, r4, lsl #2
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8002932:	f04f 0900 	mov.w	r9, #0
 8002936:	e018      	b.n	800296a <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x5e>
            adr = fields[i].get_registers()[j].address();
 8002938:	4628      	mov	r0, r5
 800293a:	f7fe fd4d 	bl	80013d8 <_ZN13Address_field13get_registersEv>
 800293e:	ea4f 0bc9 	mov.w	fp, r9, lsl #3
 8002942:	4458      	add	r0, fp
 8002944:	f7fe fc52 	bl	80011ec <_ZN8Register7addressEv>
 8002948:	4604      	mov	r4, r0
            reg_bit[adr] |= fields[i].get_registers()[j].mask();
 800294a:	4628      	mov	r0, r5
 800294c:	f7fe fd44 	bl	80013d8 <_ZN13Address_field13get_registersEv>
 8002950:	4458      	add	r0, fp
 8002952:	f7fe fc4d 	bl	80011f0 <_ZN8Register4maskEv>
 8002956:	aa24      	add	r2, sp, #144	; 0x90
 8002958:	b2e3      	uxtb	r3, r4
 800295a:	4413      	add	r3, r2
 800295c:	f813 2c70 	ldrb.w	r2, [r3, #-112]
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8002960:	f109 0901 	add.w	r9, r9, #1
            reg_bit[adr] |= fields[i].get_registers()[j].mask();
 8002964:	4310      	orrs	r0, r2
 8002966:	f803 0c70 	strb.w	r0, [r3, #-112]
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 800296a:	4628      	mov	r0, r5
 800296c:	f7fe fd36 	bl	80013dc <_ZN13Address_field13get_reg_countEv>
 8002970:	4548      	cmp	r0, r9
 8002972:	dce1      	bgt.n	8002938 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x2c>
 8002974:	351c      	adds	r5, #28
    for(int i = 0; i < amt_fields; ++i) {
 8002976:	45a8      	cmp	r8, r5
 8002978:	d1db      	bne.n	8002932 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x26>
        }
    }

    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 800297a:	2400      	movs	r4, #0
      { emplace_back(std::move(__x)); }
 800297c:	f8dd 9004 	ldr.w	r9, [sp, #4]
    bool check_reg_read = false;
 8002980:	46a3      	mov	fp, r4
 8002982:	e013      	b.n	80029ac <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0xa0>
        if (reg_bit[i] != 0x00) {
            if ((reg_bit[i] == 0xFF) || (_registers_state[i] == true)) {
 8002984:	eb0a 0304 	add.w	r3, sl, r4
 8002988:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800298c:	b99b      	cbnz	r3, 80029b6 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0xaa>
                if(reg_not_read != nullptr)
                    reg_not_read->push_back(i);
            }
            else {
                // Если хоть один бит не занят, то без считывания его можно будет затереть => считывать необходимо
                if(reg_read != nullptr)
 800298e:	f1b9 0f00 	cmp.w	r9, #0
 8002992:	d023      	beq.n	80029dc <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0xd0>
 8002994:	f10d 011f 	add.w	r1, sp, #31
 8002998:	4648      	mov	r0, r9
                    reg_read->push_back(i);
 800299a:	f88d 401f 	strb.w	r4, [sp, #31]
                check_reg_read = true;
 800299e:	f04f 0b01 	mov.w	fp, #1
 80029a2:	f7ff ff5d 	bl	8002860 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 80029a6:	3401      	adds	r4, #1
 80029a8:	2c70      	cmp	r4, #112	; 0x70
 80029aa:	d013      	beq.n	80029d4 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0xc8>
        if (reg_bit[i] != 0x00) {
 80029ac:	5d3b      	ldrb	r3, [r7, r4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f9      	beq.n	80029a6 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x9a>
            if ((reg_bit[i] == 0xFF) || (_registers_state[i] == true)) {
 80029b2:	2bff      	cmp	r3, #255	; 0xff
 80029b4:	d1e6      	bne.n	8002984 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x78>
                if(reg_not_read != nullptr)
 80029b6:	2e00      	cmp	r6, #0
 80029b8:	d0f5      	beq.n	80029a6 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x9a>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80029ba:	e9d6 5301 	ldrd	r5, r3, [r6, #4]
 80029be:	429d      	cmp	r5, r3
                    reg_not_read->push_back(i);
 80029c0:	b2e2      	uxtb	r2, r4
 80029c2:	d00e      	beq.n	80029e2 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0xd6>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80029c4:	b10d      	cbz	r5, 80029ca <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0xbe>
 80029c6:	702a      	strb	r2, [r5, #0]
 80029c8:	6875      	ldr	r5, [r6, #4]
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 80029ca:	3401      	adds	r4, #1
	    ++this->_M_impl._M_finish;
 80029cc:	3501      	adds	r5, #1
 80029ce:	2c70      	cmp	r4, #112	; 0x70
 80029d0:	6075      	str	r5, [r6, #4]
 80029d2:	d1eb      	bne.n	80029ac <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0xa0>
            }
        }
    }
    return check_reg_read; // Наличие хоть одного регистра, который нужно будет считать

}
 80029d4:	4658      	mov	r0, fp
 80029d6:	b025      	add	sp, #148	; 0x94
 80029d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                check_reg_read = true;
 80029dc:	f04f 0b01 	mov.w	fp, #1
 80029e0:	e7e1      	b.n	80029a6 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x9a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80029e2:	6831      	ldr	r1, [r6, #0]
 80029e4:	1a69      	subs	r1, r5, r1
	if (max_size() - size() < __n)
 80029e6:	1c4b      	adds	r3, r1, #1
 80029e8:	d044      	beq.n	8002a74 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x168>
      if (__a < __b)
 80029ea:	2900      	cmp	r1, #0
 80029ec:	d030      	beq.n	8002a50 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x144>
	const size_type __len = size() + std::max(size(), __n);
 80029ee:	ea4f 0841 	mov.w	r8, r1, lsl #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80029f2:	4541      	cmp	r1, r8
 80029f4:	bf88      	it	hi
 80029f6:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80029fa:	4640      	mov	r0, r8
 80029fc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8002a00:	f009 f95a 	bl	800bcb8 <_Znwj>
 8002a04:	4603      	mov	r3, r0
 8002a06:	eb03 0108 	add.w	r1, r3, r8
 8002a0a:	6832      	ldr	r2, [r6, #0]
 8002a0c:	6870      	ldr	r0, [r6, #4]
 8002a0e:	9103      	str	r1, [sp, #12]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002a10:	9904      	ldr	r1, [sp, #16]
 8002a12:	9202      	str	r2, [sp, #8]
 8002a14:	42cb      	cmn	r3, r1
 8002a16:	eba5 0802 	sub.w	r8, r5, r2
 8002a1a:	eba0 0205 	sub.w	r2, r0, r5
 8002a1e:	9201      	str	r2, [sp, #4]
 8002a20:	bf1c      	itt	ne
 8002a22:	9a05      	ldrne	r2, [sp, #20]
 8002a24:	545a      	strbne	r2, [r3, r1]
	  if (_Num)
 8002a26:	f1b8 0f00 	cmp.w	r8, #0
 8002a2a:	d11c      	bne.n	8002a66 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x15a>
 8002a2c:	9a01      	ldr	r2, [sp, #4]
	  ++__new_finish;
 8002a2e:	f108 0801 	add.w	r8, r8, #1
 8002a32:	4498      	add	r8, r3
 8002a34:	b97a      	cbnz	r2, 8002a56 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x14a>
	if (__p)
 8002a36:	9802      	ldr	r0, [sp, #8]
	  return __result + _Num;
 8002a38:	4442      	add	r2, r8
 8002a3a:	4615      	mov	r5, r2
 8002a3c:	b118      	cbz	r0, 8002a46 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x13a>
 8002a3e:	9301      	str	r3, [sp, #4]
	::operator delete(__p);
 8002a40:	f009 f954 	bl	800bcec <_ZdlPv>
 8002a44:	9b01      	ldr	r3, [sp, #4]
      this->_M_impl._M_finish = __new_finish;
 8002a46:	e9c6 3500 	strd	r3, r5, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002a4a:	9b03      	ldr	r3, [sp, #12]
 8002a4c:	60b3      	str	r3, [r6, #8]
 8002a4e:	e7aa      	b.n	80029a6 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x9a>
	const size_type __len = size() + std::max(size(), __n);
 8002a50:	f04f 0801 	mov.w	r8, #1
 8002a54:	e7d1      	b.n	80029fa <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0xee>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002a56:	4629      	mov	r1, r5
 8002a58:	4640      	mov	r0, r8
 8002a5a:	9304      	str	r3, [sp, #16]
 8002a5c:	f00a f9b4 	bl	800cdc8 <memcpy>
 8002a60:	9b04      	ldr	r3, [sp, #16]
 8002a62:	9a01      	ldr	r2, [sp, #4]
 8002a64:	e7e7      	b.n	8002a36 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x12a>
 8002a66:	4618      	mov	r0, r3
 8002a68:	4642      	mov	r2, r8
 8002a6a:	9902      	ldr	r1, [sp, #8]
 8002a6c:	f00a f9b7 	bl	800cdde <memmove>
 8002a70:	4603      	mov	r3, r0
 8002a72:	e7db      	b.n	8002a2c <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x120>
	  __throw_length_error(__N(__s));
 8002a74:	4801      	ldr	r0, [pc, #4]	; (8002a7c <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x170>)
 8002a76:	f009 f93b 	bl	800bcf0 <_ZSt20__throw_length_errorPKc>
 8002a7a:	bf00      	nop
 8002a7c:	0800d040 	.word	0x0800d040

08002a80 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8002a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a84:	4605      	mov	r5, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002a86:	6800      	ldr	r0, [r0, #0]
 8002a88:	686b      	ldr	r3, [r5, #4]
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	1a1b      	subs	r3, r3, r0
	if (max_size() - size() < __n)
 8002a8e:	1c5c      	adds	r4, r3, #1
 8002a90:	d03c      	beq.n	8002b0c <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x8c>
 8002a92:	4688      	mov	r8, r1
 8002a94:	eba1 0b00 	sub.w	fp, r1, r0
      if (__a < __b)
 8002a98:	b353      	cbz	r3, 8002af0 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x70>
	const size_type __len = size() + std::max(size(), __n);
 8002a9a:	005e      	lsls	r6, r3, #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002a9c:	42b3      	cmp	r3, r6
 8002a9e:	bf88      	it	hi
 8002aa0:	f04f 36ff 	movhi.w	r6, #4294967295	; 0xffffffff
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002aa4:	4630      	mov	r0, r6
 8002aa6:	9201      	str	r2, [sp, #4]
 8002aa8:	f009 f906 	bl	800bcb8 <_Znwj>
 8002aac:	f8d5 9000 	ldr.w	r9, [r5]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002ab0:	eb10 0f0b 	cmn.w	r0, fp
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002ab4:	4607      	mov	r7, r0
 8002ab6:	4406      	add	r6, r0
 8002ab8:	eba8 0409 	sub.w	r4, r8, r9
 8002abc:	f8d5 a004 	ldr.w	sl, [r5, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002ac0:	d003      	beq.n	8002aca <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x4a>
 8002ac2:	9a01      	ldr	r2, [sp, #4]
 8002ac4:	7813      	ldrb	r3, [r2, #0]
 8002ac6:	f800 300b 	strb.w	r3, [r0, fp]
	  if (_Num)
 8002aca:	b9cc      	cbnz	r4, 8002b00 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x80>
	  ++__new_finish;
 8002acc:	3401      	adds	r4, #1
 8002ace:	ebba 0a08 	subs.w	sl, sl, r8
 8002ad2:	443c      	add	r4, r7
 8002ad4:	d10e      	bne.n	8002af4 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x74>
	  return __result + _Num;
 8002ad6:	4454      	add	r4, sl
	if (__p)
 8002ad8:	f1b9 0f00 	cmp.w	r9, #0
 8002adc:	d002      	beq.n	8002ae4 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x64>
	::operator delete(__p);
 8002ade:	4648      	mov	r0, r9
 8002ae0:	f009 f904 	bl	800bcec <_ZdlPv>
      this->_M_impl._M_finish = __new_finish;
 8002ae4:	e9c5 7400 	strd	r7, r4, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002ae8:	60ae      	str	r6, [r5, #8]
    }
 8002aea:	b003      	add	sp, #12
 8002aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const size_type __len = size() + std::max(size(), __n);
 8002af0:	2601      	movs	r6, #1
 8002af2:	e7d7      	b.n	8002aa4 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x24>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002af4:	4641      	mov	r1, r8
 8002af6:	4652      	mov	r2, sl
 8002af8:	4620      	mov	r0, r4
 8002afa:	f00a f965 	bl	800cdc8 <memcpy>
 8002afe:	e7ea      	b.n	8002ad6 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x56>
 8002b00:	4622      	mov	r2, r4
 8002b02:	4649      	mov	r1, r9
 8002b04:	4638      	mov	r0, r7
 8002b06:	f00a f96a 	bl	800cdde <memmove>
 8002b0a:	e7df      	b.n	8002acc <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x4c>
	  __throw_length_error(__N(__s));
 8002b0c:	4801      	ldr	r0, [pc, #4]	; (8002b14 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x94>)
 8002b0e:	f009 f8ef 	bl	800bcf0 <_ZSt20__throw_length_errorPKc>
 8002b12:	bf00      	nop
 8002b14:	0800d040 	.word	0x0800d040

08002b18 <_ZN13LoRa_register15field_registersEP13Address_fieldh>:
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8002b18:	2100      	movs	r1, #0
std::vector<uint8_t> LoRa_register::field_registers(Address_field* fields, uint8_t amt_fields) {
 8002b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b1e:	4606      	mov	r6, r0
 8002b20:	b09e      	sub	sp, #120	; 0x78
 8002b22:	e9c0 1100 	strd	r1, r1, [r0]
 8002b26:	6081      	str	r1, [r0, #8]
    if((fields == nullptr) || (amt_fields == 0))
 8002b28:	2a00      	cmp	r2, #0
 8002b2a:	d038      	beq.n	8002b9e <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x86>
 8002b2c:	461f      	mov	r7, r3
 8002b2e:	b3b3      	cbz	r3, 8002b9e <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x86>
 8002b30:	4615      	mov	r5, r2
 8002b32:	a802      	add	r0, sp, #8
 8002b34:	2270      	movs	r2, #112	; 0x70
                reg_add[adr] = true;
 8002b36:	f04f 0801 	mov.w	r8, #1
 8002b3a:	f00a f969 	bl	800ce10 <memset>
 8002b3e:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 8002b42:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8002b46:	2400      	movs	r4, #0
 8002b48:	e000      	b.n	8002b4c <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x34>
 8002b4a:	3401      	adds	r4, #1
 8002b4c:	4628      	mov	r0, r5
 8002b4e:	f7fe fc45 	bl	80013dc <_ZN13Address_field13get_reg_countEv>
 8002b52:	42a0      	cmp	r0, r4
 8002b54:	dd20      	ble.n	8002b98 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x80>
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 8002b56:	4628      	mov	r0, r5
 8002b58:	f7fe fc3e 	bl	80013d8 <_ZN13Address_field13get_registersEv>
 8002b5c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002b60:	f7fe fb44 	bl	80011ec <_ZN8Register7addressEv>
            if(reg_add[adr] == false) {
 8002b64:	aa1e      	add	r2, sp, #120	; 0x78
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 8002b66:	b2c0      	uxtb	r0, r0
            if(reg_add[adr] == false) {
 8002b68:	4402      	add	r2, r0
 8002b6a:	f812 2c70 	ldrb.w	r2, [r2, #-112]
 8002b6e:	4603      	mov	r3, r0
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 8002b70:	f88d 0007 	strb.w	r0, [sp, #7]
            if(reg_add[adr] == false) {
 8002b74:	2a00      	cmp	r2, #0
 8002b76:	d1e8      	bne.n	8002b4a <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x32>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002b78:	e9d6 1201 	ldrd	r1, r2, [r6, #4]
 8002b7c:	4291      	cmp	r1, r2
 8002b7e:	d012      	beq.n	8002ba6 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x8e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002b80:	b119      	cbz	r1, 8002b8a <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x72>
 8002b82:	7008      	strb	r0, [r1, #0]
 8002b84:	6871      	ldr	r1, [r6, #4]
 8002b86:	f89d 3007 	ldrb.w	r3, [sp, #7]
	    ++this->_M_impl._M_finish;
 8002b8a:	3101      	adds	r1, #1
 8002b8c:	6071      	str	r1, [r6, #4]
                reg_add[adr] = true;
 8002b8e:	aa1e      	add	r2, sp, #120	; 0x78
 8002b90:	4413      	add	r3, r2
 8002b92:	f803 8c70 	strb.w	r8, [r3, #-112]
 8002b96:	e7d8      	b.n	8002b4a <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x32>
 8002b98:	351c      	adds	r5, #28
    for(int i = 0; i < amt_fields; ++i) {
 8002b9a:	42af      	cmp	r7, r5
 8002b9c:	d1d3      	bne.n	8002b46 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x2e>
}
 8002b9e:	4630      	mov	r0, r6
 8002ba0:	b01e      	add	sp, #120	; 0x78
 8002ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  _M_realloc_insert(end(), __x);
 8002ba6:	f10d 0207 	add.w	r2, sp, #7
 8002baa:	4630      	mov	r0, r6
 8002bac:	f7ff ff68 	bl	8002a80 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
 8002bb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002bb4:	e7eb      	b.n	8002b8e <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x76>
 8002bb6:	bf00      	nop

08002bb8 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>:
std::vector<uint8_t> LoRa_register::check_missing_register(Address_field* fields, uint8_t amt_fields) {
 8002bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8002bba:	2700      	movs	r7, #0
 8002bbc:	b085      	sub	sp, #20
 8002bbe:	4605      	mov	r5, r0
 8002bc0:	e9c0 7700 	strd	r7, r7, [r0]
 8002bc4:	6087      	str	r7, [r0, #8]
    if((fields == nullptr) || (amt_fields == 0))
 8002bc6:	b102      	cbz	r2, 8002bca <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x12>
 8002bc8:	b913      	cbnz	r3, 8002bd0 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x18>
}
 8002bca:	4628      	mov	r0, r5
 8002bcc:	b005      	add	sp, #20
 8002bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    registers = field_registers(fields, amt_fields);
 8002bd0:	a801      	add	r0, sp, #4
 8002bd2:	460e      	mov	r6, r1
 8002bd4:	f7ff ffa0 	bl	8002b18 <_ZN13LoRa_register15field_registersEP13Address_fieldh>
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8002bd8:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
 8002bdc:	9a03      	ldr	r2, [sp, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002bde:	6828      	ldr	r0, [r5, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002be0:	9701      	str	r7, [sp, #4]
      __a = _GLIBCXX_MOVE(__b);
 8002be2:	602b      	str	r3, [r5, #0]
 8002be4:	606c      	str	r4, [r5, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8002be6:	9702      	str	r7, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8002be8:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8002bea:	9703      	str	r7, [sp, #12]
	if (__p)
 8002bec:	b138      	cbz	r0, 8002bfe <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x46>
	::operator delete(__p);
 8002bee:	f009 f87d 	bl	800bcec <_ZdlPv>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002bf2:	9801      	ldr	r0, [sp, #4]
	if (__p)
 8002bf4:	b108      	cbz	r0, 8002bfa <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x42>
 8002bf6:	f009 f879 	bl	800bcec <_ZdlPv>
 8002bfa:	e9d5 3400 	ldrd	r3, r4, [r5]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002bfe:	1ae4      	subs	r4, r4, r3
    for(int i = registers.size() - 1; i >= 0; --i) {
 8002c00:	3c01      	subs	r4, #1
 8002c02:	d503      	bpl.n	8002c0c <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x54>
 8002c04:	e7e1      	b.n	8002bca <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x12>
 8002c06:	1c63      	adds	r3, r4, #1
 8002c08:	d0df      	beq.n	8002bca <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x12>
 8002c0a:	682b      	ldr	r3, [r5, #0]
        if(_registers_state[registers[i]] != false) {
 8002c0c:	5d1a      	ldrb	r2, [r3, r4]
	return *(this->_M_impl._M_start + __n);
 8002c0e:	1918      	adds	r0, r3, r4
 8002c10:	18b3      	adds	r3, r6, r2
 8002c12:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    for(int i = registers.size() - 1; i >= 0; --i) {
 8002c16:	3c01      	subs	r4, #1
        if(_registers_state[registers[i]] != false) {
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f4      	beq.n	8002c06 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x4e>
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
 8002c1c:	686b      	ldr	r3, [r5, #4]
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current + __n); }
 8002c1e:	1c41      	adds	r1, r0, #1
      if (__position + 1 != end())
 8002c20:	4299      	cmp	r1, r3
 8002c22:	d001      	beq.n	8002c28 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x70>
	  if (_Num)
 8002c24:	1a5a      	subs	r2, r3, r1
 8002c26:	d102      	bne.n	8002c2e <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x76>
      --this->_M_impl._M_finish;
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	606b      	str	r3, [r5, #4]
 8002c2c:	e7eb      	b.n	8002c06 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x4e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002c2e:	f00a f8d6 	bl	800cdde <memmove>
 8002c32:	686b      	ldr	r3, [r5, #4]
 8002c34:	e7f8      	b.n	8002c28 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x70>
 8002c36:	bf00      	nop

08002c38 <_ZN13LoRa_register13register_readEP13Address_fieldhb>:

// считывает регистры относящиеся к полю(ям)
uint8_t LoRa_register::register_read(Address_field field, bool update) {
    return register_read(&field, 1, update);
}
uint8_t LoRa_register::register_read(Address_field* fields, uint8_t amt_fields, bool update) {
 8002c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c3c:	4604      	mov	r4, r0
    if (_send)
 8002c3e:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
uint8_t LoRa_register::register_read(Address_field* fields, uint8_t amt_fields, bool update) {
 8002c42:	b089      	sub	sp, #36	; 0x24
 8002c44:	460e      	mov	r6, r1
 8002c46:	4690      	mov	r8, r2
 8002c48:	461d      	mov	r5, r3
    if (_send)
 8002c4a:	b170      	cbz	r0, 8002c6a <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x32>
 8002c4c:	2270      	movs	r2, #112	; 0x70
 8002c4e:	2100      	movs	r1, #0
 8002c50:	f104 000c 	add.w	r0, r4, #12
 8002c54:	f00a f8dc 	bl	800ce10 <memset>
 8002c58:	2270      	movs	r2, #112	; 0x70
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8002c60:	f00a f8d6 	bl	800ce10 <memset>
    _send = false;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    	clear();
    std::vector<uint8_t> registers;
    if (update) {
        registers = field_registers(fields, amt_fields);
 8002c6a:	af05      	add	r7, sp, #20
 8002c6c:	4643      	mov	r3, r8
 8002c6e:	4632      	mov	r2, r6
 8002c70:	4638      	mov	r0, r7
 8002c72:	4621      	mov	r1, r4
    if (update) {
 8002c74:	2d00      	cmp	r5, #0
 8002c76:	d050      	beq.n	8002d1a <_ZN13LoRa_register13register_readEP13Address_fieldhb+0xe2>
        registers = field_registers(fields, amt_fields);
 8002c78:	f7ff ff4e 	bl	8002b18 <_ZN13LoRa_register15field_registersEP13Address_fieldh>
      __a = _GLIBCXX_MOVE(__b);
 8002c7c:	9b05      	ldr	r3, [sp, #20]
 8002c7e:	9302      	str	r3, [sp, #8]
 8002c80:	9b06      	ldr	r3, [sp, #24]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002c82:	9a02      	ldr	r2, [sp, #8]
 8002c84:	1a9b      	subs	r3, r3, r2
    else {
        registers = check_missing_register(fields, amt_fields);
    }
    uint8_t adr;
    uint8_t amt_read = registers.size();
    for(int i = 0; i < amt_read; ++i) {
 8002c86:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8002c8a:	9303      	str	r3, [sp, #12]
 8002c8c:	d03c      	beq.n	8002d08 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0xd0>
 8002c8e:	f04f 0b00 	mov.w	fp, #0
uint8_t LoRa_register::_single_transfer(uint8_t address, uint8_t value) {
    uint8_t response;
    // Подача NSS сигнала
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
    // Отправка бита действия и 7 бит адреса
    HAL_SPI_TransmitReceive(_spi, &address, &response, 1, 1000);
 8002c92:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8002c96:	f04f 0a01 	mov.w	sl, #1
 8002c9a:	1e56      	subs	r6, r2, #1
 8002c9c:	eb06 0903 	add.w	r9, r6, r3
        adr = registers[i];
 8002ca0:	f816 5f01 	ldrb.w	r5, [r6, #1]!
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 8002ca4:	2200      	movs	r2, #0
    return _single_transfer(address & 0x7f, 0x00);
 8002ca6:	f005 037f 	and.w	r3, r5, #127	; 0x7f
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 8002caa:	88a1      	ldrh	r1, [r4, #4]
 8002cac:	68a0      	ldr	r0, [r4, #8]
 8002cae:	f88d 3012 	strb.w	r3, [sp, #18]
 8002cb2:	f88d b013 	strb.w	fp, [sp, #19]
 8002cb6:	f004 fbd1 	bl	800745c <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(_spi, &address, &response, 1, 1000);
 8002cba:	6820      	ldr	r0, [r4, #0]
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	f8cd 8000 	str.w	r8, [sp]
 8002cc2:	463a      	mov	r2, r7
 8002cc4:	f10d 0112 	add.w	r1, sp, #18
 8002cc8:	f006 fc56 	bl	8009578 <HAL_SPI_TransmitReceive>
 8002ccc:	2332      	movs	r3, #50	; 0x32
    for(int i = 0; i < 50; i++) __NOP();
 8002cce:	bf00      	nop
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	d1fc      	bne.n	8002cce <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x96>
    // Отправка/приём байта значения
    HAL_SPI_TransmitReceive(_spi, &value, &response, 1, 1000);
 8002cd4:	6820      	ldr	r0, [r4, #0]
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	f8cd 8000 	str.w	r8, [sp]
 8002cdc:	463a      	mov	r2, r7
 8002cde:	f10d 0113 	add.w	r1, sp, #19
 8002ce2:	f006 fc49 	bl	8009578 <HAL_SPI_TransmitReceive>
 8002ce6:	2314      	movs	r3, #20
    for(int i = 0; i < 20; i++) __NOP();
 8002ce8:	bf00      	nop
 8002cea:	3b01      	subs	r3, #1
 8002cec:	d1fc      	bne.n	8002ce8 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0xb0>
//    if(address == 66) {	extern uint8_t begin_data; begin_data = response; }
    // Прекращение NSS сигнала
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_SET);
 8002cee:	2201      	movs	r2, #1
 8002cf0:	88a1      	ldrh	r1, [r4, #4]
 8002cf2:	68a0      	ldr	r0, [r4, #8]
 8002cf4:	f004 fbb2 	bl	800745c <HAL_GPIO_WritePin>
    return response;
 8002cf8:	f89d 3014 	ldrb.w	r3, [sp, #20]
        _registers_data[adr] = _read_register(adr);
 8002cfc:	4425      	add	r5, r4
    for(int i = 0; i < amt_read; ++i) {
 8002cfe:	45b1      	cmp	r9, r6
        _registers_state[adr] = true;
 8002d00:	f885 a07c 	strb.w	sl, [r5, #124]	; 0x7c
        _registers_data[adr] = _read_register(adr);
 8002d04:	732b      	strb	r3, [r5, #12]
    for(int i = 0; i < amt_read; ++i) {
 8002d06:	d1cb      	bne.n	8002ca0 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x68>
	if (__p)
 8002d08:	9b02      	ldr	r3, [sp, #8]
 8002d0a:	b113      	cbz	r3, 8002d12 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0xda>
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f008 ffed 	bl	800bcec <_ZdlPv>
}
 8002d12:	9803      	ldr	r0, [sp, #12]
 8002d14:	b009      	add	sp, #36	; 0x24
 8002d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        registers = check_missing_register(fields, amt_fields);
 8002d1a:	f7ff ff4d 	bl	8002bb8 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
 8002d1e:	9b05      	ldr	r3, [sp, #20]
 8002d20:	9302      	str	r3, [sp, #8]
 8002d22:	9b06      	ldr	r3, [sp, #24]
 8002d24:	e7ad      	b.n	8002c82 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x4a>
 8002d26:	bf00      	nop

08002d28 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>:
uint8_t LoRa_register::set_field_value(Address_field* fields, uint32_t* values, uint8_t amt) {
 8002d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d2c:	460d      	mov	r5, r1
 8002d2e:	b08d      	sub	sp, #52	; 0x34
    std::vector<uint8_t> missing_register = check_missing_register(fields, amt);
 8002d30:	4601      	mov	r1, r0
uint8_t LoRa_register::set_field_value(Address_field* fields, uint32_t* values, uint8_t amt) {
 8002d32:	4680      	mov	r8, r0
 8002d34:	4617      	mov	r7, r2
    std::vector<uint8_t> missing_register = check_missing_register(fields, amt);
 8002d36:	a803      	add	r0, sp, #12
 8002d38:	462a      	mov	r2, r5
uint8_t LoRa_register::set_field_value(Address_field* fields, uint32_t* values, uint8_t amt) {
 8002d3a:	4699      	mov	r9, r3
    std::vector<uint8_t> missing_register = check_missing_register(fields, amt);
 8002d3c:	f7ff ff3c 	bl	8002bb8 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
    if(missing_register.size() > 0) {
 8002d40:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d11f      	bne.n	8002d88 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x60>
    for(int i = 0; i < amt; ++i) {
 8002d48:	f1b9 0f00 	cmp.w	r9, #0
 8002d4c:	d04d      	beq.n	8002dea <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0xc2>
 8002d4e:	2400      	movs	r4, #0
 8002d50:	f108 080c 	add.w	r8, r8, #12
 8002d54:	3f04      	subs	r7, #4
 8002d56:	e002      	b.n	8002d5e <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x36>
 8002d58:	454c      	cmp	r4, r9
 8002d5a:	b2de      	uxtb	r6, r3
 8002d5c:	d00c      	beq.n	8002d78 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x50>
        result = fields[i].set_value(values[i], _registers_data, LORA_DATA_SIZE);
 8002d5e:	2370      	movs	r3, #112	; 0x70
 8002d60:	4628      	mov	r0, r5
 8002d62:	4642      	mov	r2, r8
 8002d64:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8002d68:	f7fe facc 	bl	8001304 <_ZN13Address_field9set_valueEmPhi>
 8002d6c:	b2e6      	uxtb	r6, r4
 8002d6e:	1c73      	adds	r3, r6, #1
    for(int i = 0; i < amt; ++i) {
 8002d70:	3401      	adds	r4, #1
 8002d72:	351c      	adds	r5, #28
        if(result)
 8002d74:	2800      	cmp	r0, #0
 8002d76:	d0ef      	beq.n	8002d58 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x30>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002d78:	9803      	ldr	r0, [sp, #12]
	if (__p)
 8002d7a:	b108      	cbz	r0, 8002d80 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x58>
 8002d7c:	f008 ffb6 	bl	800bcec <_ZdlPv>
}
 8002d80:	4630      	mov	r0, r6
 8002d82:	b00d      	add	sp, #52	; 0x34
 8002d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8002d88:	2400      	movs	r4, #0
        read_fields = check_read(fields, amt, &reg_read, &reg_not_read);
 8002d8a:	ab09      	add	r3, sp, #36	; 0x24
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	4629      	mov	r1, r5
 8002d90:	ab06      	add	r3, sp, #24
 8002d92:	464a      	mov	r2, r9
 8002d94:	4640      	mov	r0, r8
 8002d96:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002d9a:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8002d9e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8002da2:	f7ff fdb3 	bl	800290c <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002da6:	e9dd 6109 	ldrd	r6, r1, [sp, #36]	; 0x24
 8002daa:	1b89      	subs	r1, r1, r6
        for(int i = 0; i < (int)reg_not_read.size(); ++i) {
 8002dac:	42a1      	cmp	r1, r4
 8002dae:	dd09      	ble.n	8002dc4 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x9c>
            _registers_state[reg_not_read[i]] = true;
 8002db0:	2401      	movs	r4, #1
 8002db2:	1e72      	subs	r2, r6, #1
 8002db4:	4411      	add	r1, r2
 8002db6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8002dba:	4443      	add	r3, r8
        for(int i = 0; i < (int)reg_not_read.size(); ++i) {
 8002dbc:	4291      	cmp	r1, r2
            _registers_state[reg_not_read[i]] = true;
 8002dbe:	f883 407c 	strb.w	r4, [r3, #124]	; 0x7c
        for(int i = 0; i < (int)reg_not_read.size(); ++i) {
 8002dc2:	d1f8      	bne.n	8002db6 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x8e>
        if(read_fields) {
 8002dc4:	b948      	cbnz	r0, 8002dda <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0xb2>
	if (__p)
 8002dc6:	b116      	cbz	r6, 8002dce <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0xa6>
 8002dc8:	4630      	mov	r0, r6
 8002dca:	f008 ff8f 	bl	800bcec <_ZdlPv>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002dce:	9806      	ldr	r0, [sp, #24]
	if (__p)
 8002dd0:	2800      	cmp	r0, #0
 8002dd2:	d0b9      	beq.n	8002d48 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x20>
 8002dd4:	f008 ff8a 	bl	800bcec <_ZdlPv>
 8002dd8:	e7b6      	b.n	8002d48 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x20>
            register_read(fields, amt, false);
 8002dda:	2300      	movs	r3, #0
 8002ddc:	464a      	mov	r2, r9
 8002dde:	4629      	mov	r1, r5
 8002de0:	4640      	mov	r0, r8
 8002de2:	f7ff ff29 	bl	8002c38 <_ZN13LoRa_register13register_readEP13Address_fieldhb>
 8002de6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002de8:	e7ed      	b.n	8002dc6 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x9e>
    for(int i = 0; i < amt; ++i) {
 8002dea:	464e      	mov	r6, r9
 8002dec:	e7c4      	b.n	8002d78 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x50>
 8002dee:	bf00      	nop

08002df0 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb>:
uint8_t LoRa_register::clear_flags(Address_field* flags, uint8_t amt_flags, bool back_value) {
 8002df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(_registers_state[REG_IRQ_FLAGS] == false) {
 8002df4:	4c48      	ldr	r4, [pc, #288]	; (8002f18 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x128>)
uint8_t LoRa_register::clear_flags(Address_field* flags, uint8_t amt_flags, bool back_value) {
 8002df6:	b089      	sub	sp, #36	; 0x24
    if(_registers_state[REG_IRQ_FLAGS] == false) {
 8002df8:	7824      	ldrb	r4, [r4, #0]
 8002dfa:	eb00 0a04 	add.w	sl, r0, r4
 8002dfe:	9403      	str	r4, [sp, #12]
 8002e00:	f89a 407c 	ldrb.w	r4, [sl, #124]	; 0x7c
 8002e04:	b1ac      	cbz	r4, 8002e32 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x42>
 8002e06:	9305      	str	r3, [sp, #20]
 8002e08:	4616      	mov	r6, r2
 8002e0a:	9104      	str	r1, [sp, #16]
 8002e0c:	4680      	mov	r8, r0
    for(int i = 0; i < amt_flags; ++i) {
 8002e0e:	2a00      	cmp	r2, #0
 8002e10:	d078      	beq.n	8002f04 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x114>
 8002e12:	460c      	mov	r4, r1
 8002e14:	2700      	movs	r7, #0
 8002e16:	f100 09f0 	add.w	r9, r0, #240	; 0xf0
 8002e1a:	f500 75e8 	add.w	r5, r0, #464	; 0x1d0
 8002e1e:	46cb      	mov	fp, r9
            if(flags[i] == _flags[j]) {
 8002e20:	4659      	mov	r1, fp
 8002e22:	4620      	mov	r0, r4
 8002e24:	f7fe fadc 	bl	80013e0 <_ZeqRK13Address_fieldS1_>
 8002e28:	f10b 0b1c 	add.w	fp, fp, #28
 8002e2c:	b928      	cbnz	r0, 8002e3a <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x4a>
        for(int j = 0; j < AMT_FLAGS; ++j) {
 8002e2e:	455d      	cmp	r5, fp
 8002e30:	d1f6      	bne.n	8002e20 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x30>
        return 0; // флаги не считаны
 8002e32:	2000      	movs	r0, #0
}
 8002e34:	b009      	add	sp, #36	; 0x24
 8002e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(int i = 0; i < amt_flags; ++i) {
 8002e3a:	3701      	adds	r7, #1
 8002e3c:	42b7      	cmp	r7, r6
 8002e3e:	f104 041c 	add.w	r4, r4, #28
 8002e42:	d1ec      	bne.n	8002e1e <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x2e>
    _registers_data[REG_IRQ_FLAGS] = 0;
 8002e44:	2300      	movs	r3, #0
    uint32_t* values = new uint32_t[amt_flags];
 8002e46:	00b1      	lsls	r1, r6, #2
    uint8_t data = _registers_data[REG_IRQ_FLAGS];
 8002e48:	f89a 400c 	ldrb.w	r4, [sl, #12]
    uint32_t* values = new uint32_t[amt_flags];
 8002e4c:	4608      	mov	r0, r1
    _registers_data[REG_IRQ_FLAGS] = 0;
 8002e4e:	f88a 300c 	strb.w	r3, [sl, #12]
    uint32_t* values = new uint32_t[amt_flags];
 8002e52:	460d      	mov	r5, r1
 8002e54:	f008 ff2c 	bl	800bcb0 <_Znaj>
        values[i] = 1;
 8002e58:	2701      	movs	r7, #1
    uint32_t* values = new uint32_t[amt_flags];
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	1941      	adds	r1, r0, r5
        values[i] = 1;
 8002e60:	f843 7b04 	str.w	r7, [r3], #4
    for(int i = 0; i < amt_flags; ++i)
 8002e64:	4299      	cmp	r1, r3
 8002e66:	d1fb      	bne.n	8002e60 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x70>
    set_field_value(flags, values, amt_flags);
 8002e68:	9904      	ldr	r1, [sp, #16]
 8002e6a:	4633      	mov	r3, r6
 8002e6c:	4640      	mov	r0, r8
 8002e6e:	f7ff ff5b 	bl	8002d28 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
    _single_transfer(address | 0x80, value);
 8002e72:	9a03      	ldr	r2, [sp, #12]
    _write_register(REG_IRQ_FLAGS, _registers_data[REG_IRQ_FLAGS]);
 8002e74:	f89a 300c 	ldrb.w	r3, [sl, #12]
    _single_transfer(address | 0x80, value);
 8002e78:	f062 0b7f 	orn	fp, r2, #127	; 0x7f
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 8002e7c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8002e86:	f88d 301e 	strb.w	r3, [sp, #30]
 8002e8a:	f88d b01d 	strb.w	fp, [sp, #29]
 8002e8e:	f004 fae5 	bl	800745c <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(_spi, &address, &response, 1, 1000);
 8002e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e96:	f8d8 0000 	ldr.w	r0, [r8]
 8002e9a:	f10d 021f 	add.w	r2, sp, #31
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	f10d 011d 	add.w	r1, sp, #29
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	f006 fb67 	bl	8009578 <HAL_SPI_TransmitReceive>
 8002eaa:	2332      	movs	r3, #50	; 0x32
    for(int i = 0; i < 50; i++) __NOP();
 8002eac:	bf00      	nop
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	d1fc      	bne.n	8002eac <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0xbc>
    HAL_SPI_TransmitReceive(_spi, &value, &response, 1, 1000);
 8002eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eb6:	f8d8 0000 	ldr.w	r0, [r8]
 8002eba:	f10d 021f 	add.w	r2, sp, #31
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	f10d 011e 	add.w	r1, sp, #30
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	f006 fb57 	bl	8009578 <HAL_SPI_TransmitReceive>
 8002eca:	2314      	movs	r3, #20
    for(int i = 0; i < 20; i++) __NOP();
 8002ecc:	bf00      	nop
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	d1fc      	bne.n	8002ecc <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0xdc>
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_SET);
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8002ed8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8002edc:	f004 fabe 	bl	800745c <HAL_GPIO_WritePin>
    if(back_value) {
 8002ee0:	9b05      	ldr	r3, [sp, #20]
 8002ee2:	b94b      	cbnz	r3, 8002ef8 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x108>
    return amt_flags;
 8002ee4:	4630      	mov	r0, r6
        _registers_data[REG_IRQ_FLAGS] = data | ~_registers_data[REG_IRQ_FLAGS];
 8002ee6:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8002eea:	ea64 0403 	orn	r4, r4, r3
 8002eee:	f88a 400c 	strb.w	r4, [sl, #12]
}
 8002ef2:	b009      	add	sp, #36	; 0x24
 8002ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return amt_flags;
 8002ef8:	4630      	mov	r0, r6
        _registers_data[REG_IRQ_FLAGS] = data;
 8002efa:	f88a 400c 	strb.w	r4, [sl, #12]
}
 8002efe:	b009      	add	sp, #36	; 0x24
 8002f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t data = _registers_data[REG_IRQ_FLAGS];
 8002f04:	f89a 400c 	ldrb.w	r4, [sl, #12]
    uint32_t* values = new uint32_t[amt_flags];
 8002f08:	4610      	mov	r0, r2
    _registers_data[REG_IRQ_FLAGS] = 0;
 8002f0a:	f88a 200c 	strb.w	r2, [sl, #12]
    uint32_t* values = new uint32_t[amt_flags];
 8002f0e:	f008 fecf 	bl	800bcb0 <_Znaj>
 8002f12:	4602      	mov	r2, r0
 8002f14:	e7a8      	b.n	8002e68 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x78>
 8002f16:	bf00      	nop
 8002f18:	0800d05a 	.word	0x0800d05a

08002f1c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>:
uint8_t LoRa_register::register_write(Address_field* fields, uint8_t amt_fields, bool fl_clear, bool error_clear) {
 8002f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f20:	4690      	mov	r8, r2
 8002f22:	b08b      	sub	sp, #44	; 0x2c
    std::vector<uint8_t> write_adr = check_missing_register(fields, amt_fields);
 8002f24:	460a      	mov	r2, r1
uint8_t LoRa_register::register_write(Address_field* fields, uint8_t amt_fields, bool fl_clear, bool error_clear) {
 8002f26:	4604      	mov	r4, r0
 8002f28:	460f      	mov	r7, r1
 8002f2a:	4699      	mov	r9, r3
    std::vector<uint8_t> write_adr = check_missing_register(fields, amt_fields);
 8002f2c:	4601      	mov	r1, r0
 8002f2e:	4643      	mov	r3, r8
 8002f30:	a804      	add	r0, sp, #16
uint8_t LoRa_register::register_write(Address_field* fields, uint8_t amt_fields, bool fl_clear, bool error_clear) {
 8002f32:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
    std::vector<uint8_t> write_adr = check_missing_register(fields, amt_fields);
 8002f36:	f7ff fe3f 	bl	8002bb8 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
    if(write_adr.size() != 0) {
 8002f3a:	e9dd 6304 	ldrd	r6, r3, [sp, #16]
 8002f3e:	429e      	cmp	r6, r3
 8002f40:	d018      	beq.n	8002f74 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x58>
        if(error_clear)
 8002f42:	b93d      	cbnz	r5, 8002f54 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x38>
 8002f44:	b116      	cbz	r6, 8002f4c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x30>
 8002f46:	4630      	mov	r0, r6
 8002f48:	f008 fed0 	bl	800bcec <_ZdlPv>
}
 8002f4c:	4628      	mov	r0, r5
 8002f4e:	b00b      	add	sp, #44	; 0x2c
 8002f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    _send = false;
 8002f54:	2500      	movs	r5, #0
 8002f56:	2270      	movs	r2, #112	; 0x70
 8002f58:	2100      	movs	r1, #0
 8002f5a:	f104 000c 	add.w	r0, r4, #12
 8002f5e:	f009 ff57 	bl	800ce10 <memset>
 8002f62:	2270      	movs	r2, #112	; 0x70
 8002f64:	2100      	movs	r1, #0
 8002f66:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8002f6a:	f009 ff51 	bl	800ce10 <memset>
 8002f6e:	f884 50ec 	strb.w	r5, [r4, #236]	; 0xec
 8002f72:	e7e7      	b.n	8002f44 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x28>
    write_adr = field_registers(fields, amt_fields);
 8002f74:	4643      	mov	r3, r8
 8002f76:	463a      	mov	r2, r7
 8002f78:	a807      	add	r0, sp, #28
 8002f7a:	4621      	mov	r1, r4
 8002f7c:	f7ff fdcc 	bl	8002b18 <_ZN13LoRa_register15field_registersEP13Address_fieldh>
 8002f80:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
 8002f84:	2200      	movs	r2, #0
      __a = _GLIBCXX_MOVE(__b);
 8002f86:	9e07      	ldr	r6, [sp, #28]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002f88:	9804      	ldr	r0, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8002f8a:	9207      	str	r2, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 8002f8c:	9604      	str	r6, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8002f8e:	9208      	str	r2, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 8002f90:	9305      	str	r3, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 8002f92:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 8002f94:	9106      	str	r1, [sp, #24]
 8002f96:	b138      	cbz	r0, 8002fa8 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x8c>
 8002f98:	f008 fea8 	bl	800bcec <_ZdlPv>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002f9c:	9807      	ldr	r0, [sp, #28]
	if (__p)
 8002f9e:	b108      	cbz	r0, 8002fa4 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x88>
 8002fa0:	f008 fea4 	bl	800bcec <_ZdlPv>
 8002fa4:	e9dd 6304 	ldrd	r6, r3, [sp, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002fa8:	1b9b      	subs	r3, r3, r6
    for(int i = 0; i < amt_write; ++i) {
 8002faa:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
 8002fae:	d033      	beq.n	8003018 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0xfc>
 8002fb0:	2700      	movs	r7, #0
    HAL_SPI_TransmitReceive(_spi, &address, &response, 1, 1000);
 8002fb2:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
        _write_register(write_adr[i], _registers_data[write_adr[i]]);
 8002fb6:	5df3      	ldrb	r3, [r6, r7]
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 8002fb8:	2200      	movs	r2, #0
        _write_register(write_adr[i], _registers_data[write_adr[i]]);
 8002fba:	18e1      	adds	r1, r4, r3
 8002fbc:	7b0e      	ldrb	r6, [r1, #12]
    _single_transfer(address | 0x80, value);
 8002fbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 8002fc2:	88a1      	ldrh	r1, [r4, #4]
 8002fc4:	68a0      	ldr	r0, [r4, #8]
 8002fc6:	f88d 300e 	strb.w	r3, [sp, #14]
 8002fca:	f88d 600f 	strb.w	r6, [sp, #15]
 8002fce:	f004 fa45 	bl	800745c <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(_spi, &address, &response, 1, 1000);
 8002fd2:	6820      	ldr	r0, [r4, #0]
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	f8cd 8000 	str.w	r8, [sp]
 8002fda:	aa07      	add	r2, sp, #28
 8002fdc:	f10d 010e 	add.w	r1, sp, #14
 8002fe0:	f006 faca 	bl	8009578 <HAL_SPI_TransmitReceive>
 8002fe4:	2332      	movs	r3, #50	; 0x32
    for(int i = 0; i < 50; i++) __NOP();
 8002fe6:	bf00      	nop
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	d1fc      	bne.n	8002fe6 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0xca>
    HAL_SPI_TransmitReceive(_spi, &value, &response, 1, 1000);
 8002fec:	6820      	ldr	r0, [r4, #0]
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f8cd 8000 	str.w	r8, [sp]
 8002ff4:	aa07      	add	r2, sp, #28
 8002ff6:	f10d 010f 	add.w	r1, sp, #15
 8002ffa:	f006 fabd 	bl	8009578 <HAL_SPI_TransmitReceive>
 8002ffe:	2314      	movs	r3, #20
    for(int i = 0; i < 20; i++) __NOP();
 8003000:	bf00      	nop
 8003002:	3b01      	subs	r3, #1
 8003004:	d1fc      	bne.n	8003000 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0xe4>
    for(int i = 0; i < amt_write; ++i) {
 8003006:	3701      	adds	r7, #1
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_SET);
 8003008:	2201      	movs	r2, #1
 800300a:	88a1      	ldrh	r1, [r4, #4]
 800300c:	68a0      	ldr	r0, [r4, #8]
 800300e:	f004 fa25 	bl	800745c <HAL_GPIO_WritePin>
    for(int i = 0; i < amt_write; ++i) {
 8003012:	42af      	cmp	r7, r5
 8003014:	9e04      	ldr	r6, [sp, #16]
 8003016:	d1ce      	bne.n	8002fb6 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x9a>
    _send = true;
 8003018:	2301      	movs	r3, #1
 800301a:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    if (fl_clear) {
 800301e:	f1b9 0f00 	cmp.w	r9, #0
 8003022:	d08f      	beq.n	8002f44 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x28>
 8003024:	2270      	movs	r2, #112	; 0x70
 8003026:	2100      	movs	r1, #0
 8003028:	f104 000c 	add.w	r0, r4, #12
 800302c:	f009 fef0 	bl	800ce10 <memset>
 8003030:	2270      	movs	r2, #112	; 0x70
 8003032:	2100      	movs	r1, #0
 8003034:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8003038:	f009 feea 	bl	800ce10 <memset>
    _send = false;
 800303c:	2300      	movs	r3, #0
 800303e:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 8003042:	e77f      	b.n	8002f44 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x28>

08003044 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb>:
uint8_t LoRa_register::get_field_value(Address_field* fields, uint32_t* values, uint8_t amt, bool read) {
 8003044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003048:	b085      	sub	sp, #20
 800304a:	4615      	mov	r5, r2
 800304c:	4606      	mov	r6, r0
 800304e:	4698      	mov	r8, r3
 8003050:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
    if((fields == nullptr) || (amt_fields == 0))
 8003054:	460c      	mov	r4, r1
 8003056:	2900      	cmp	r1, #0
 8003058:	d056      	beq.n	8003108 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0xc4>
 800305a:	b953      	cbnz	r3, 8003072 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x2e>
    if((check.size() != 0) || read) {
 800305c:	f1ba 0f00 	cmp.w	sl, #0
 8003060:	d003      	beq.n	800306a <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x26>
        register_read(fields, amt, read);
 8003062:	2301      	movs	r3, #1
 8003064:	4642      	mov	r2, r8
 8003066:	f7ff fde7 	bl	8002c38 <_ZN13LoRa_register13register_readEP13Address_fieldhb>
}
 800306a:	4640      	mov	r0, r8
 800306c:	b005      	add	sp, #20
 800306e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    registers = field_registers(fields, amt_fields);
 8003072:	460a      	mov	r2, r1
 8003074:	4601      	mov	r1, r0
 8003076:	a801      	add	r0, sp, #4
 8003078:	f7ff fd4e 	bl	8002b18 <_ZN13LoRa_register15field_registersEP13Address_fieldh>
 800307c:	e9dd 9b01 	ldrd	r9, fp, [sp, #4]
 8003080:	ebab 0009 	sub.w	r0, fp, r9
    for(int i = registers.size() - 1; i >= 0; --i) {
 8003084:	3801      	subs	r0, #1
 8003086:	d41a      	bmi.n	80030be <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x7a>
 8003088:	4448      	add	r0, r9
 800308a:	e004      	b.n	8003096 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x52>
 800308c:	eba7 0309 	sub.w	r3, r7, r9
 8003090:	2b00      	cmp	r3, #0
 8003092:	4638      	mov	r0, r7
 8003094:	db13      	blt.n	80030be <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x7a>
        if(_registers_state[registers[i]] != false) {
 8003096:	7803      	ldrb	r3, [r0, #0]
 8003098:	1e47      	subs	r7, r0, #1
 800309a:	4433      	add	r3, r6
 800309c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f3      	beq.n	800308c <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x48>
 80030a4:	1c41      	adds	r1, r0, #1
      if (__position + 1 != end())
 80030a6:	458b      	cmp	fp, r1
 80030a8:	d002      	beq.n	80030b0 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x6c>
	  if (_Num)
 80030aa:	ebbb 0201 	subs.w	r2, fp, r1
 80030ae:	d130      	bne.n	8003112 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0xce>
    for(int i = registers.size() - 1; i >= 0; --i) {
 80030b0:	eba7 0309 	sub.w	r3, r7, r9
 80030b4:	2b00      	cmp	r3, #0
      --this->_M_impl._M_finish;
 80030b6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80030ba:	4638      	mov	r0, r7
 80030bc:	daeb      	bge.n	8003096 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x52>
    if((check.size() != 0) || read) {
 80030be:	45d9      	cmp	r9, fp
 80030c0:	d023      	beq.n	800310a <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0xc6>
        register_read(fields, amt, read);
 80030c2:	4653      	mov	r3, sl
 80030c4:	4642      	mov	r2, r8
 80030c6:	4621      	mov	r1, r4
 80030c8:	4630      	mov	r0, r6
 80030ca:	f7ff fdb5 	bl	8002c38 <_ZN13LoRa_register13register_readEP13Address_fieldhb>
    for(int i = 0; i < amt; ++i)
 80030ce:	f1b8 0f00 	cmp.w	r8, #0
 80030d2:	d00f      	beq.n	80030f4 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0xb0>
 80030d4:	ebc8 07c8 	rsb	r7, r8, r8, lsl #3
 80030d8:	360c      	adds	r6, #12
 80030da:	3d04      	subs	r5, #4
 80030dc:	eb04 0787 	add.w	r7, r4, r7, lsl #2
        values[i] = fields[i].get_value(_registers_data, LORA_DATA_SIZE);
 80030e0:	4620      	mov	r0, r4
 80030e2:	2270      	movs	r2, #112	; 0x70
 80030e4:	4631      	mov	r1, r6
 80030e6:	f7fe f8cf 	bl	8001288 <_ZN13Address_field9get_valueEPhi>
 80030ea:	341c      	adds	r4, #28
    for(int i = 0; i < amt; ++i)
 80030ec:	42a7      	cmp	r7, r4
        values[i] = fields[i].get_value(_registers_data, LORA_DATA_SIZE);
 80030ee:	f845 0f04 	str.w	r0, [r5, #4]!
    for(int i = 0; i < amt; ++i)
 80030f2:	d1f5      	bne.n	80030e0 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x9c>
	if (__p)
 80030f4:	f1b9 0f00 	cmp.w	r9, #0
 80030f8:	d0b7      	beq.n	800306a <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x26>
 80030fa:	4648      	mov	r0, r9
 80030fc:	f008 fdf6 	bl	800bcec <_ZdlPv>
}
 8003100:	4640      	mov	r0, r8
 8003102:	b005      	add	sp, #20
 8003104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((fields == nullptr) || (amt_fields == 0))
 8003108:	4689      	mov	r9, r1
    if((check.size() != 0) || read) {
 800310a:	f1ba 0f00 	cmp.w	sl, #0
 800310e:	d0de      	beq.n	80030ce <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x8a>
 8003110:	e7d7      	b.n	80030c2 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x7e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003112:	f009 fe64 	bl	800cdde <memmove>
 8003116:	e7cb      	b.n	80030b0 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x6c>

08003118 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51>:
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8003118:	2300      	movs	r3, #0
std::vector<uint8_t> LoRa_register::check_missing_register(Address_field* fields, uint8_t amt_fields) {
 800311a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800311e:	4605      	mov	r5, r0
 8003120:	b0a0      	sub	sp, #128	; 0x80
 8003122:	e9c0 3300 	strd	r3, r3, [r0]
 8003126:	6083      	str	r3, [r0, #8]
    if((fields == nullptr) || (amt_fields == 0))
 8003128:	b3a2      	cbz	r2, 8003194 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0x7c>
 800312a:	460e      	mov	r6, r1
 800312c:	4617      	mov	r7, r2
 800312e:	4619      	mov	r1, r3
 8003130:	2270      	movs	r2, #112	; 0x70
 8003132:	a804      	add	r0, sp, #16
 8003134:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8003138:	9303      	str	r3, [sp, #12]
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 800313a:	461c      	mov	r4, r3
                reg_add[adr] = true;
 800313c:	f04f 0801 	mov.w	r8, #1
 8003140:	f009 fe66 	bl	800ce10 <memset>
 8003144:	e000      	b.n	8003148 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0x30>
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8003146:	3401      	adds	r4, #1
 8003148:	4638      	mov	r0, r7
 800314a:	f7fe f947 	bl	80013dc <_ZN13Address_field13get_reg_countEv>
 800314e:	4284      	cmp	r4, r0
 8003150:	da24      	bge.n	800319c <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0x84>
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 8003152:	4638      	mov	r0, r7
 8003154:	f7fe f940 	bl	80013d8 <_ZN13Address_field13get_registersEv>
 8003158:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800315c:	f7fe f846 	bl	80011ec <_ZN8Register7addressEv>
            if(reg_add[adr] == false) {
 8003160:	aa20      	add	r2, sp, #128	; 0x80
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 8003162:	b2c0      	uxtb	r0, r0
            if(reg_add[adr] == false) {
 8003164:	4402      	add	r2, r0
 8003166:	f812 2c70 	ldrb.w	r2, [r2, #-112]
 800316a:	4603      	mov	r3, r0
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 800316c:	f88d 0003 	strb.w	r0, [sp, #3]
            if(reg_add[adr] == false) {
 8003170:	2a00      	cmp	r2, #0
 8003172:	d1e8      	bne.n	8003146 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0x2e>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8003174:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8003178:	4291      	cmp	r1, r2
 800317a:	d03f      	beq.n	80031fc <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0xe4>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800317c:	b119      	cbz	r1, 8003186 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0x6e>
 800317e:	7008      	strb	r0, [r1, #0]
 8003180:	9902      	ldr	r1, [sp, #8]
 8003182:	f89d 3003 	ldrb.w	r3, [sp, #3]
	    ++this->_M_impl._M_finish;
 8003186:	3101      	adds	r1, #1
 8003188:	9102      	str	r1, [sp, #8]
                reg_add[adr] = true;
 800318a:	aa20      	add	r2, sp, #128	; 0x80
 800318c:	4413      	add	r3, r2
 800318e:	f803 8c70 	strb.w	r8, [r3, #-112]
 8003192:	e7d8      	b.n	8003146 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0x2e>
}
 8003194:	4628      	mov	r0, r5
 8003196:	b020      	add	sp, #128	; 0x80
 8003198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __b = _GLIBCXX_MOVE(__tmp);
 800319c:	2100      	movs	r1, #0
      __a = _GLIBCXX_MOVE(__b);
 800319e:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 80031a2:	9a01      	ldr	r2, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80031a4:	6828      	ldr	r0, [r5, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80031a6:	9101      	str	r1, [sp, #4]
      __a = _GLIBCXX_MOVE(__b);
 80031a8:	602a      	str	r2, [r5, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80031aa:	9102      	str	r1, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80031ac:	606b      	str	r3, [r5, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80031ae:	9103      	str	r1, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80031b0:	60ac      	str	r4, [r5, #8]
	if (__p)
 80031b2:	b138      	cbz	r0, 80031c4 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0xac>
	::operator delete(__p);
 80031b4:	f008 fd9a 	bl	800bcec <_ZdlPv>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80031b8:	9801      	ldr	r0, [sp, #4]
	if (__p)
 80031ba:	b108      	cbz	r0, 80031c0 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0xa8>
 80031bc:	f008 fd96 	bl	800bcec <_ZdlPv>
 80031c0:	e9d5 2300 	ldrd	r2, r3, [r5]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80031c4:	1a9b      	subs	r3, r3, r2
    for(int i = registers.size() - 1; i >= 0; --i) {
 80031c6:	1e5c      	subs	r4, r3, #1
 80031c8:	d503      	bpl.n	80031d2 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0xba>
 80031ca:	e7e3      	b.n	8003194 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0x7c>
 80031cc:	1c63      	adds	r3, r4, #1
 80031ce:	d0e1      	beq.n	8003194 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0x7c>
 80031d0:	682a      	ldr	r2, [r5, #0]
        if(_registers_state[registers[i]] != false) {
 80031d2:	5d13      	ldrb	r3, [r2, r4]
	return *(this->_M_impl._M_start + __n);
 80031d4:	1910      	adds	r0, r2, r4
 80031d6:	4433      	add	r3, r6
 80031d8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    for(int i = registers.size() - 1; i >= 0; --i) {
 80031dc:	3c01      	subs	r4, #1
        if(_registers_state[registers[i]] != false) {
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0f4      	beq.n	80031cc <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0xb4>
      : _M_current(__i) { }
 80031e2:	686b      	ldr	r3, [r5, #4]
      { return __normal_iterator(_M_current + __n); }
 80031e4:	1c41      	adds	r1, r0, #1
      if (__position + 1 != end())
 80031e6:	4299      	cmp	r1, r3
 80031e8:	d001      	beq.n	80031ee <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0xd6>
	  if (_Num)
 80031ea:	1a5a      	subs	r2, r3, r1
 80031ec:	d102      	bne.n	80031f4 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0xdc>
      --this->_M_impl._M_finish;
 80031ee:	3b01      	subs	r3, #1
 80031f0:	606b      	str	r3, [r5, #4]
 80031f2:	e7eb      	b.n	80031cc <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0xb4>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80031f4:	f009 fdf3 	bl	800cdde <memmove>
 80031f8:	686b      	ldr	r3, [r5, #4]
 80031fa:	e7f8      	b.n	80031ee <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0xd6>
	  _M_realloc_insert(end(), __x);
 80031fc:	f10d 0203 	add.w	r2, sp, #3
 8003200:	a801      	add	r0, sp, #4
 8003202:	f7ff fc3d 	bl	8002a80 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
 8003206:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800320a:	e7be      	b.n	800318a <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0x72>

0800320c <_ZN13LoRa_register14register_writeE13Address_fieldbb>:
uint8_t LoRa_register::register_write(Address_field field, bool fl_clear, bool error_clear) {
 800320c:	b084      	sub	sp, #16
 800320e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003212:	4604      	mov	r4, r0
 8003214:	b0a6      	sub	sp, #152	; 0x98
 8003216:	ad2d      	add	r5, sp, #180	; 0xb4
 8003218:	e885 000e 	stmia.w	r5, {r1, r2, r3}
    std::vector<uint8_t> write_adr = check_missing_register(fields, amt_fields);
 800321c:	a804      	add	r0, sp, #16
 800321e:	462a      	mov	r2, r5
 8003220:	4621      	mov	r1, r4
uint8_t LoRa_register::register_write(Address_field field, bool fl_clear, bool error_clear) {
 8003222:	f89d 70d0 	ldrb.w	r7, [sp, #208]	; 0xd0
 8003226:	f89d 80d4 	ldrb.w	r8, [sp, #212]	; 0xd4
    std::vector<uint8_t> write_adr = check_missing_register(fields, amt_fields);
 800322a:	f7ff ff75 	bl	8003118 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51>
    if(write_adr.size() != 0) {
 800322e:	e9dd 6304 	ldrd	r6, r3, [sp, #16]
 8003232:	42b3      	cmp	r3, r6
 8003234:	d01d      	beq.n	8003272 <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x66>
        if(error_clear)
 8003236:	f1b8 0f00 	cmp.w	r8, #0
 800323a:	d018      	beq.n	800326e <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x62>
    _send = false;
 800323c:	2500      	movs	r5, #0
 800323e:	2270      	movs	r2, #112	; 0x70
 8003240:	2100      	movs	r1, #0
 8003242:	f104 000c 	add.w	r0, r4, #12
 8003246:	f009 fde3 	bl	800ce10 <memset>
 800324a:	2270      	movs	r2, #112	; 0x70
 800324c:	2100      	movs	r1, #0
 800324e:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8003252:	f009 fddd 	bl	800ce10 <memset>
 8003256:	f884 50ec 	strb.w	r5, [r4, #236]	; 0xec
	if (__p)
 800325a:	b116      	cbz	r6, 8003262 <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x56>
 800325c:	4630      	mov	r0, r6
 800325e:	f008 fd45 	bl	800bcec <_ZdlPv>
}
 8003262:	4628      	mov	r0, r5
 8003264:	b026      	add	sp, #152	; 0x98
 8003266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800326a:	b004      	add	sp, #16
 800326c:	4770      	bx	lr
        return 0;
 800326e:	4645      	mov	r5, r8
 8003270:	e7f3      	b.n	800325a <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x4e>
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8003272:	2100      	movs	r1, #0
 8003274:	a80a      	add	r0, sp, #40	; 0x28
 8003276:	2270      	movs	r2, #112	; 0x70
 8003278:	e9cd 1107 	strd	r1, r1, [sp, #28]
 800327c:	9109      	str	r1, [sp, #36]	; 0x24
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 800327e:	460e      	mov	r6, r1
                reg_add[adr] = true;
 8003280:	f04f 0801 	mov.w	r8, #1
 8003284:	f009 fdc4 	bl	800ce10 <memset>
 8003288:	e000      	b.n	800328c <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x80>
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 800328a:	3601      	adds	r6, #1
 800328c:	4628      	mov	r0, r5
 800328e:	f7fe f8a5 	bl	80013dc <_ZN13Address_field13get_reg_countEv>
 8003292:	4286      	cmp	r6, r0
 8003294:	da20      	bge.n	80032d8 <_ZN13LoRa_register14register_writeE13Address_fieldbb+0xcc>
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 8003296:	4628      	mov	r0, r5
 8003298:	f7fe f89e 	bl	80013d8 <_ZN13Address_field13get_registersEv>
 800329c:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 80032a0:	f7fd ffa4 	bl	80011ec <_ZN8Register7addressEv>
            if(reg_add[adr] == false) {
 80032a4:	aa26      	add	r2, sp, #152	; 0x98
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 80032a6:	b2c0      	uxtb	r0, r0
            if(reg_add[adr] == false) {
 80032a8:	4402      	add	r2, r0
 80032aa:	f812 2c70 	ldrb.w	r2, [r2, #-112]
 80032ae:	4603      	mov	r3, r0
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 80032b0:	f88d 000f 	strb.w	r0, [sp, #15]
            if(reg_add[adr] == false) {
 80032b4:	2a00      	cmp	r2, #0
 80032b6:	d1e8      	bne.n	800328a <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x7e>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80032b8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80032bc:	4291      	cmp	r1, r2
 80032be:	d06f      	beq.n	80033a0 <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x194>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80032c0:	b119      	cbz	r1, 80032ca <_ZN13LoRa_register14register_writeE13Address_fieldbb+0xbe>
 80032c2:	7008      	strb	r0, [r1, #0]
 80032c4:	9908      	ldr	r1, [sp, #32]
 80032c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
	    ++this->_M_impl._M_finish;
 80032ca:	3101      	adds	r1, #1
 80032cc:	9108      	str	r1, [sp, #32]
                reg_add[adr] = true;
 80032ce:	aa26      	add	r2, sp, #152	; 0x98
 80032d0:	4413      	add	r3, r2
 80032d2:	f803 8c70 	strb.w	r8, [r3, #-112]
 80032d6:	e7d8      	b.n	800328a <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x7e>
      __b = _GLIBCXX_MOVE(__tmp);
 80032d8:	2100      	movs	r1, #0
      __a = _GLIBCXX_MOVE(__b);
 80032da:	e9dd 2508 	ldrd	r2, r5, [sp, #32]
 80032de:	9b07      	ldr	r3, [sp, #28]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80032e0:	9804      	ldr	r0, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80032e2:	9107      	str	r1, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80032e4:	9304      	str	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80032e6:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 80032e8:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 80032ea:	9109      	str	r1, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 80032ec:	9506      	str	r5, [sp, #24]
	if (__p)
 80032ee:	b138      	cbz	r0, 8003300 <_ZN13LoRa_register14register_writeE13Address_fieldbb+0xf4>
	::operator delete(__p);
 80032f0:	f008 fcfc 	bl	800bcec <_ZdlPv>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80032f4:	9807      	ldr	r0, [sp, #28]
	if (__p)
 80032f6:	b108      	cbz	r0, 80032fc <_ZN13LoRa_register14register_writeE13Address_fieldbb+0xf0>
 80032f8:	f008 fcf8 	bl	800bcec <_ZdlPv>
 80032fc:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003300:	1ad2      	subs	r2, r2, r3
    for(int i = 0; i < amt_write; ++i) {
 8003302:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 8003306:	d034      	beq.n	8003372 <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x166>
 8003308:	2600      	movs	r6, #0
    HAL_SPI_TransmitReceive(_spi, &address, &response, 1, 1000);
 800330a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
        _write_register(write_adr[i], _registers_data[write_adr[i]]);
 800330e:	5d9b      	ldrb	r3, [r3, r6]
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 8003310:	2200      	movs	r2, #0
        _write_register(write_adr[i], _registers_data[write_adr[i]]);
 8003312:	18e1      	adds	r1, r4, r3
 8003314:	f891 c00c 	ldrb.w	ip, [r1, #12]
    _single_transfer(address | 0x80, value);
 8003318:	f063 037f 	orn	r3, r3, #127	; 0x7f
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 800331c:	88a1      	ldrh	r1, [r4, #4]
 800331e:	68a0      	ldr	r0, [r4, #8]
 8003320:	f88d c01c 	strb.w	ip, [sp, #28]
 8003324:	f88d 300f 	strb.w	r3, [sp, #15]
 8003328:	f004 f898 	bl	800745c <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(_spi, &address, &response, 1, 1000);
 800332c:	6820      	ldr	r0, [r4, #0]
 800332e:	2301      	movs	r3, #1
 8003330:	f8cd 8000 	str.w	r8, [sp]
 8003334:	aa0a      	add	r2, sp, #40	; 0x28
 8003336:	f10d 010f 	add.w	r1, sp, #15
 800333a:	f006 f91d 	bl	8009578 <HAL_SPI_TransmitReceive>
 800333e:	2332      	movs	r3, #50	; 0x32
    for(int i = 0; i < 50; i++) __NOP();
 8003340:	bf00      	nop
 8003342:	3b01      	subs	r3, #1
 8003344:	d1fc      	bne.n	8003340 <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x134>
    HAL_SPI_TransmitReceive(_spi, &value, &response, 1, 1000);
 8003346:	6820      	ldr	r0, [r4, #0]
 8003348:	2301      	movs	r3, #1
 800334a:	f8cd 8000 	str.w	r8, [sp]
 800334e:	aa0a      	add	r2, sp, #40	; 0x28
 8003350:	a907      	add	r1, sp, #28
 8003352:	f006 f911 	bl	8009578 <HAL_SPI_TransmitReceive>
 8003356:	2314      	movs	r3, #20
    for(int i = 0; i < 20; i++) __NOP();
 8003358:	bf00      	nop
 800335a:	3b01      	subs	r3, #1
 800335c:	d1fc      	bne.n	8003358 <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x14c>
    for(int i = 0; i < amt_write; ++i) {
 800335e:	3601      	adds	r6, #1
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_SET);
 8003360:	2201      	movs	r2, #1
 8003362:	88a1      	ldrh	r1, [r4, #4]
 8003364:	68a0      	ldr	r0, [r4, #8]
 8003366:	f004 f879 	bl	800745c <HAL_GPIO_WritePin>
    for(int i = 0; i < amt_write; ++i) {
 800336a:	42ae      	cmp	r6, r5
 800336c:	d001      	beq.n	8003372 <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x166>
 800336e:	9b04      	ldr	r3, [sp, #16]
 8003370:	e7cd      	b.n	800330e <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x102>
    _send = true;
 8003372:	2301      	movs	r3, #1
 8003374:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    if (fl_clear) {
 8003378:	b187      	cbz	r7, 800339c <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x190>
 800337a:	2270      	movs	r2, #112	; 0x70
 800337c:	2100      	movs	r1, #0
 800337e:	f104 000c 	add.w	r0, r4, #12
 8003382:	f009 fd45 	bl	800ce10 <memset>
 8003386:	2270      	movs	r2, #112	; 0x70
 8003388:	2100      	movs	r1, #0
 800338a:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 800338e:	f009 fd3f 	bl	800ce10 <memset>
    _send = false;
 8003392:	2300      	movs	r3, #0
 8003394:	9e04      	ldr	r6, [sp, #16]
 8003396:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 800339a:	e75e      	b.n	800325a <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x4e>
 800339c:	9e04      	ldr	r6, [sp, #16]
 800339e:	e75c      	b.n	800325a <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x4e>
	  _M_realloc_insert(end(), __x);
 80033a0:	f10d 020f 	add.w	r2, sp, #15
 80033a4:	a807      	add	r0, sp, #28
 80033a6:	f7ff fb6b 	bl	8002a80 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
 80033aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80033ae:	e78e      	b.n	80032ce <_ZN13LoRa_register14register_writeE13Address_fieldbb+0xc2>

080033b0 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49>:
uint8_t LoRa_register::register_read(Address_field* fields, uint8_t amt_fields, bool update) {
 80033b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (_send)
 80033b4:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
uint8_t LoRa_register::register_read(Address_field* fields, uint8_t amt_fields, bool update) {
 80033b8:	b0a5      	sub	sp, #148	; 0x94
 80033ba:	4604      	mov	r4, r0
 80033bc:	460e      	mov	r6, r1
 80033be:	4615      	mov	r5, r2
    if (_send)
 80033c0:	b16b      	cbz	r3, 80033de <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x2e>
 80033c2:	2270      	movs	r2, #112	; 0x70
 80033c4:	2100      	movs	r1, #0
 80033c6:	300c      	adds	r0, #12
 80033c8:	f009 fd22 	bl	800ce10 <memset>
 80033cc:	2270      	movs	r2, #112	; 0x70
 80033ce:	2100      	movs	r1, #0
 80033d0:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 80033d4:	f009 fd1c 	bl	800ce10 <memset>
    _send = false;
 80033d8:	2300      	movs	r3, #0
 80033da:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    if (update) {
 80033de:	2d00      	cmp	r5, #0
 80033e0:	d036      	beq.n	8003450 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0xa0>
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80033e2:	2500      	movs	r5, #0
 80033e4:	e9cd 5505 	strd	r5, r5, [sp, #20]
 80033e8:	9507      	str	r5, [sp, #28]
    if((fields == nullptr) || (amt_fields == 0))
 80033ea:	2e00      	cmp	r6, #0
 80033ec:	f000 808f 	beq.w	800350e <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x15e>
 80033f0:	af08      	add	r7, sp, #32
 80033f2:	4638      	mov	r0, r7
 80033f4:	2270      	movs	r2, #112	; 0x70
 80033f6:	4629      	mov	r1, r5
 80033f8:	f009 fd0a 	bl	800ce10 <memset>
                reg_add[adr] = true;
 80033fc:	f04f 0801 	mov.w	r8, #1
 8003400:	e000      	b.n	8003404 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x54>
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8003402:	3501      	adds	r5, #1
 8003404:	4630      	mov	r0, r6
 8003406:	f7fd ffe9 	bl	80013dc <_ZN13Address_field13get_reg_countEv>
 800340a:	4285      	cmp	r5, r0
 800340c:	da77      	bge.n	80034fe <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x14e>
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 800340e:	4630      	mov	r0, r6
 8003410:	f7fd ffe2 	bl	80013d8 <_ZN13Address_field13get_registersEv>
 8003414:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 8003418:	f7fd fee8 	bl	80011ec <_ZN8Register7addressEv>
            if(reg_add[adr] == false) {
 800341c:	aa24      	add	r2, sp, #144	; 0x90
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 800341e:	b2c0      	uxtb	r0, r0
            if(reg_add[adr] == false) {
 8003420:	4402      	add	r2, r0
 8003422:	f812 2c70 	ldrb.w	r2, [r2, #-112]
 8003426:	4603      	mov	r3, r0
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 8003428:	f88d 0013 	strb.w	r0, [sp, #19]
            if(reg_add[adr] == false) {
 800342c:	2a00      	cmp	r2, #0
 800342e:	d1e8      	bne.n	8003402 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x52>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8003430:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8003434:	4291      	cmp	r1, r2
 8003436:	d06f      	beq.n	8003518 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x168>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003438:	b119      	cbz	r1, 8003442 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x92>
 800343a:	7008      	strb	r0, [r1, #0]
 800343c:	9906      	ldr	r1, [sp, #24]
 800343e:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    ++this->_M_impl._M_finish;
 8003442:	3101      	adds	r1, #1
 8003444:	9106      	str	r1, [sp, #24]
                reg_add[adr] = true;
 8003446:	aa24      	add	r2, sp, #144	; 0x90
 8003448:	4413      	add	r3, r2
 800344a:	f803 8c70 	strb.w	r8, [r3, #-112]
 800344e:	e7d8      	b.n	8003402 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x52>
        registers = check_missing_register(fields, amt_fields);
 8003450:	af08      	add	r7, sp, #32
 8003452:	4632      	mov	r2, r6
 8003454:	4638      	mov	r0, r7
 8003456:	4621      	mov	r1, r4
 8003458:	f7ff fe5e 	bl	8003118 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51>
 800345c:	9b08      	ldr	r3, [sp, #32]
 800345e:	461a      	mov	r2, r3
 8003460:	9303      	str	r3, [sp, #12]
 8003462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	b2db      	uxtb	r3, r3
 8003468:	9302      	str	r3, [sp, #8]
    for(int i = 0; i < amt_read; ++i) {
 800346a:	2b00      	cmp	r3, #0
 800346c:	d03e      	beq.n	80034ec <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x13c>
 800346e:	f04f 0b00 	mov.w	fp, #0
    HAL_SPI_TransmitReceive(_spi, &address, &response, 1, 1000);
 8003472:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8003476:	f04f 0a01 	mov.w	sl, #1
 800347a:	9a03      	ldr	r2, [sp, #12]
 800347c:	eb02 0903 	add.w	r9, r2, r3
 8003480:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003484:	1e56      	subs	r6, r2, #1
        adr = registers[i];
 8003486:	f816 5f01 	ldrb.w	r5, [r6, #1]!
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 800348a:	2200      	movs	r2, #0
    return _single_transfer(address & 0x7f, 0x00);
 800348c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 8003490:	88a1      	ldrh	r1, [r4, #4]
 8003492:	68a0      	ldr	r0, [r4, #8]
 8003494:	f88d 3013 	strb.w	r3, [sp, #19]
 8003498:	f88d b014 	strb.w	fp, [sp, #20]
 800349c:	f003 ffde 	bl	800745c <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(_spi, &address, &response, 1, 1000);
 80034a0:	6820      	ldr	r0, [r4, #0]
 80034a2:	2301      	movs	r3, #1
 80034a4:	f8cd 8000 	str.w	r8, [sp]
 80034a8:	463a      	mov	r2, r7
 80034aa:	f10d 0113 	add.w	r1, sp, #19
 80034ae:	f006 f863 	bl	8009578 <HAL_SPI_TransmitReceive>
 80034b2:	2332      	movs	r3, #50	; 0x32
    for(int i = 0; i < 50; i++) __NOP();
 80034b4:	bf00      	nop
 80034b6:	3b01      	subs	r3, #1
 80034b8:	d1fc      	bne.n	80034b4 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x104>
    HAL_SPI_TransmitReceive(_spi, &value, &response, 1, 1000);
 80034ba:	6820      	ldr	r0, [r4, #0]
 80034bc:	2301      	movs	r3, #1
 80034be:	f8cd 8000 	str.w	r8, [sp]
 80034c2:	463a      	mov	r2, r7
 80034c4:	a905      	add	r1, sp, #20
 80034c6:	f006 f857 	bl	8009578 <HAL_SPI_TransmitReceive>
 80034ca:	2314      	movs	r3, #20
    for(int i = 0; i < 20; i++) __NOP();
 80034cc:	bf00      	nop
 80034ce:	3b01      	subs	r3, #1
 80034d0:	d1fc      	bne.n	80034cc <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x11c>
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_SET);
 80034d2:	2201      	movs	r2, #1
 80034d4:	88a1      	ldrh	r1, [r4, #4]
 80034d6:	68a0      	ldr	r0, [r4, #8]
 80034d8:	f003 ffc0 	bl	800745c <HAL_GPIO_WritePin>
    return response;
 80034dc:	f89d 3020 	ldrb.w	r3, [sp, #32]
        _registers_data[adr] = _read_register(adr);
 80034e0:	4425      	add	r5, r4
    for(int i = 0; i < amt_read; ++i) {
 80034e2:	45b1      	cmp	r9, r6
        _registers_state[adr] = true;
 80034e4:	f885 a07c 	strb.w	sl, [r5, #124]	; 0x7c
        _registers_data[adr] = _read_register(adr);
 80034e8:	732b      	strb	r3, [r5, #12]
    for(int i = 0; i < amt_read; ++i) {
 80034ea:	d1cc      	bne.n	8003486 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0xd6>
	if (__p)
 80034ec:	9b03      	ldr	r3, [sp, #12]
 80034ee:	b113      	cbz	r3, 80034f6 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x146>
	::operator delete(__p);
 80034f0:	4618      	mov	r0, r3
 80034f2:	f008 fbfb 	bl	800bcec <_ZdlPv>
}
 80034f6:	9802      	ldr	r0, [sp, #8]
 80034f8:	b025      	add	sp, #148	; 0x94
 80034fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034fe:	9b05      	ldr	r3, [sp, #20]
 8003500:	461a      	mov	r2, r3
 8003502:	9303      	str	r3, [sp, #12]
 8003504:	9b06      	ldr	r3, [sp, #24]
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	b2db      	uxtb	r3, r3
 800350a:	9302      	str	r3, [sp, #8]
 800350c:	e7ad      	b.n	800346a <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0xba>
        registers = field_registers(fields, amt_fields);
 800350e:	9602      	str	r6, [sp, #8]
}
 8003510:	9802      	ldr	r0, [sp, #8]
 8003512:	b025      	add	sp, #148	; 0x94
 8003514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  _M_realloc_insert(end(), __x);
 8003518:	f10d 0213 	add.w	r2, sp, #19
 800351c:	a805      	add	r0, sp, #20
 800351e:	f7ff faaf 	bl	8002a80 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
 8003522:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003526:	e78e      	b.n	8003446 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x96>

08003528 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47>:
uint8_t LoRa_register::set_field_value(Address_field* fields, uint32_t* values, uint8_t amt) {
 8003528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800352c:	468b      	mov	fp, r1
 800352e:	b0a9      	sub	sp, #164	; 0xa4
 8003530:	9202      	str	r2, [sp, #8]
    std::vector<uint8_t> missing_register = check_missing_register(fields, amt);
 8003532:	4601      	mov	r1, r0
 8003534:	465a      	mov	r2, fp
uint8_t LoRa_register::set_field_value(Address_field* fields, uint32_t* values, uint8_t amt) {
 8003536:	4682      	mov	sl, r0
    std::vector<uint8_t> missing_register = check_missing_register(fields, amt);
 8003538:	a806      	add	r0, sp, #24
 800353a:	f7ff fded 	bl	8003118 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51>
    if(missing_register.size() > 0) {
 800353e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8003542:	429a      	cmp	r2, r3
 8003544:	d113      	bne.n	800356e <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x46>
        result = fields[i].set_value(values[i], _registers_data, LORA_DATA_SIZE);
 8003546:	9b02      	ldr	r3, [sp, #8]
 8003548:	f10a 020c 	add.w	r2, sl, #12
 800354c:	6819      	ldr	r1, [r3, #0]
 800354e:	4658      	mov	r0, fp
 8003550:	2370      	movs	r3, #112	; 0x70
 8003552:	f7fd fed7 	bl	8001304 <_ZN13Address_field9set_valueEmPhi>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003556:	9b06      	ldr	r3, [sp, #24]
        if(result)
 8003558:	f080 0001 	eor.w	r0, r0, #1
        ++amt_set_value;
 800355c:	b2c4      	uxtb	r4, r0
	if (__p)
 800355e:	b113      	cbz	r3, 8003566 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x3e>
 8003560:	4618      	mov	r0, r3
 8003562:	f008 fbc3 	bl	800bcec <_ZdlPv>
}
 8003566:	4620      	mov	r0, r4
 8003568:	b029      	add	sp, #164	; 0xa4
 800356a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800356e:	2100      	movs	r1, #0
 8003570:	2270      	movs	r2, #112	; 0x70
 8003572:	a80c      	add	r0, sp, #48	; 0x30
 8003574:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
 8003578:	910b      	str	r1, [sp, #44]	; 0x2c
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 800357a:	460d      	mov	r5, r1
 800357c:	f009 fc48 	bl	800ce10 <memset>
 8003580:	e016      	b.n	80035b0 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x88>
            adr = fields[i].get_registers()[j].address();
 8003582:	4658      	mov	r0, fp
 8003584:	f7fd ff28 	bl	80013d8 <_ZN13Address_field13get_registersEv>
 8003588:	00ee      	lsls	r6, r5, #3
 800358a:	4430      	add	r0, r6
 800358c:	f7fd fe2e 	bl	80011ec <_ZN8Register7addressEv>
 8003590:	4604      	mov	r4, r0
            reg_bit[adr] |= fields[i].get_registers()[j].mask();
 8003592:	4658      	mov	r0, fp
 8003594:	f7fd ff20 	bl	80013d8 <_ZN13Address_field13get_registersEv>
 8003598:	4430      	add	r0, r6
 800359a:	f7fd fe29 	bl	80011f0 <_ZN8Register4maskEv>
 800359e:	aa28      	add	r2, sp, #160	; 0xa0
 80035a0:	b2e3      	uxtb	r3, r4
 80035a2:	4413      	add	r3, r2
 80035a4:	f813 2c70 	ldrb.w	r2, [r3, #-112]
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 80035a8:	3501      	adds	r5, #1
            reg_bit[adr] |= fields[i].get_registers()[j].mask();
 80035aa:	4310      	orrs	r0, r2
 80035ac:	f803 0c70 	strb.w	r0, [r3, #-112]
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 80035b0:	4658      	mov	r0, fp
 80035b2:	f7fd ff13 	bl	80013dc <_ZN13Address_field13get_reg_countEv>
 80035b6:	4285      	cmp	r5, r0
 80035b8:	dbe3      	blt.n	8003582 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x5a>
 80035ba:	f04f 0900 	mov.w	r9, #0
 80035be:	464e      	mov	r6, r9
      { emplace_back(std::move(__x)); }
 80035c0:	f8cd b00c 	str.w	fp, [sp, #12]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80035c4:	464f      	mov	r7, r9
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 80035c6:	464c      	mov	r4, r9
 80035c8:	f10d 052f 	add.w	r5, sp, #47	; 0x2f
      { emplace_back(std::move(__x)); }
 80035cc:	46b3      	mov	fp, r6
 80035ce:	e010      	b.n	80035f2 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0xca>
            if ((reg_bit[i] == 0xFF) || (_registers_state[i] == true)) {
 80035d0:	eb0a 0304 	add.w	r3, sl, r4
 80035d4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80035d8:	b99b      	cbnz	r3, 8003602 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0xda>
 80035da:	f10d 0117 	add.w	r1, sp, #23
 80035de:	a809      	add	r0, sp, #36	; 0x24
                    reg_read->push_back(i);
 80035e0:	f88d 2017 	strb.w	r2, [sp, #23]
                check_reg_read = true;
 80035e4:	f04f 0b01 	mov.w	fp, #1
 80035e8:	f7ff f93a 	bl	8002860 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 80035ec:	3401      	adds	r4, #1
 80035ee:	2c70      	cmp	r4, #112	; 0x70
 80035f0:	d010      	beq.n	8003614 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0xec>
        if (reg_bit[i] != 0x00) {
 80035f2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80035f6:	46b8      	mov	r8, r7
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0f7      	beq.n	80035ec <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0xc4>
            if ((reg_bit[i] == 0xFF) || (_registers_state[i] == true)) {
 80035fc:	2bff      	cmp	r3, #255	; 0xff
 80035fe:	b2e2      	uxtb	r2, r4
 8003600:	d1e6      	bne.n	80035d0 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0xa8>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8003602:	45b1      	cmp	r9, r6
 8003604:	d023      	beq.n	800364e <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x126>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003606:	b106      	cbz	r6, 800360a <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0xe2>
 8003608:	7032      	strb	r2, [r6, #0]
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 800360a:	3401      	adds	r4, #1
 800360c:	2c70      	cmp	r4, #112	; 0x70
	    ++this->_M_impl._M_finish;
 800360e:	f106 0601 	add.w	r6, r6, #1
 8003612:	d1ee      	bne.n	80035f2 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0xca>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003614:	eba6 0308 	sub.w	r3, r6, r8
        for(int i = 0; i < (int)reg_not_read.size(); ++i) {
 8003618:	2b00      	cmp	r3, #0
 800361a:	465c      	mov	r4, fp
 800361c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8003620:	dd09      	ble.n	8003636 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x10e>
            _registers_state[reg_not_read[i]] = true;
 8003622:	2001      	movs	r0, #1
 8003624:	1e79      	subs	r1, r7, #1
 8003626:	440b      	add	r3, r1
 8003628:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800362c:	4452      	add	r2, sl
        for(int i = 0; i < (int)reg_not_read.size(); ++i) {
 800362e:	4299      	cmp	r1, r3
            _registers_state[reg_not_read[i]] = true;
 8003630:	f882 007c 	strb.w	r0, [r2, #124]	; 0x7c
        for(int i = 0; i < (int)reg_not_read.size(); ++i) {
 8003634:	d1f8      	bne.n	8003628 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x100>
        if(read_fields) {
 8003636:	bbbc      	cbnz	r4, 80036a8 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x180>
	if (__p)
 8003638:	b117      	cbz	r7, 8003640 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x118>
	::operator delete(__p);
 800363a:	4638      	mov	r0, r7
 800363c:	f008 fb56 	bl	800bcec <_ZdlPv>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003640:	9809      	ldr	r0, [sp, #36]	; 0x24
	if (__p)
 8003642:	2800      	cmp	r0, #0
 8003644:	f43f af7f 	beq.w	8003546 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x1e>
 8003648:	f008 fb50 	bl	800bcec <_ZdlPv>
 800364c:	e77b      	b.n	8003546 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x1e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800364e:	eba9 0607 	sub.w	r6, r9, r7
	if (max_size() - size() < __n)
 8003652:	1c73      	adds	r3, r6, #1
 8003654:	d02e      	beq.n	80036b4 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x18c>
      if (__a < __b)
 8003656:	b326      	cbz	r6, 80036a2 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x17a>
	const size_type __len = size() + std::max(size(), __n);
 8003658:	ea4f 0946 	mov.w	r9, r6, lsl #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800365c:	454e      	cmp	r6, r9
 800365e:	bf88      	it	hi
 8003660:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003664:	4648      	mov	r0, r9
 8003666:	9201      	str	r2, [sp, #4]
 8003668:	f008 fb26 	bl	800bcb8 <_Znwj>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800366c:	42f0      	cmn	r0, r6
 800366e:	bf18      	it	ne
 8003670:	9a01      	ldrne	r2, [sp, #4]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003672:	4603      	mov	r3, r0
 8003674:	4481      	add	r9, r0
 8003676:	4680      	mov	r8, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003678:	bf18      	it	ne
 800367a:	5582      	strbne	r2, [r0, r6]
	  if (_Num)
 800367c:	b91e      	cbnz	r6, 8003686 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x15e>
	  ++__new_finish;
 800367e:	1c46      	adds	r6, r0, #1
	if (__p)
 8003680:	b947      	cbnz	r7, 8003694 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x16c>
                check_reg_read = true;
 8003682:	461f      	mov	r7, r3
 8003684:	e7b2      	b.n	80035ec <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0xc4>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003686:	4632      	mov	r2, r6
 8003688:	4639      	mov	r1, r7
 800368a:	f009 fba8 	bl	800cdde <memmove>
 800368e:	4603      	mov	r3, r0
 8003690:	3601      	adds	r6, #1
 8003692:	4406      	add	r6, r0
	::operator delete(__p);
 8003694:	4638      	mov	r0, r7
 8003696:	9301      	str	r3, [sp, #4]
 8003698:	f008 fb28 	bl	800bcec <_ZdlPv>
 800369c:	9b01      	ldr	r3, [sp, #4]
 800369e:	461f      	mov	r7, r3
 80036a0:	e7a4      	b.n	80035ec <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0xc4>
	const size_type __len = size() + std::max(size(), __n);
 80036a2:	f04f 0901 	mov.w	r9, #1
 80036a6:	e7dd      	b.n	8003664 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x13c>
            register_read(fields, amt, false);
 80036a8:	2200      	movs	r2, #0
 80036aa:	4659      	mov	r1, fp
 80036ac:	4650      	mov	r0, sl
 80036ae:	f7ff fe7f 	bl	80033b0 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49>
 80036b2:	e7c1      	b.n	8003638 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x110>
	  __throw_length_error(__N(__s));
 80036b4:	4801      	ldr	r0, [pc, #4]	; (80036bc <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x194>)
 80036b6:	f008 fb1b 	bl	800bcf0 <_ZSt20__throw_length_errorPKc>
 80036ba:	bf00      	nop
 80036bc:	0800d040 	.word	0x0800d040

080036c0 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>:
uint8_t LoRa_register::set_field_value(Address_field field, uint32_t value) {
 80036c0:	b084      	sub	sp, #16
 80036c2:	b510      	push	{r4, lr}
 80036c4:	ac03      	add	r4, sp, #12
 80036c6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return set_field_value(&field, &value, 1);
 80036ca:	4621      	mov	r1, r4
 80036cc:	aa0a      	add	r2, sp, #40	; 0x28
 80036ce:	f7ff ff2b 	bl	8003528 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47>
}
 80036d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036d6:	b004      	add	sp, #16
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop

080036dc <_ZN13LoRa_register11clear_flagsE13Address_fieldb>:
uint8_t LoRa_register::clear_flags(Address_field flag, bool back_value) {
 80036dc:	b084      	sub	sp, #16
 80036de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(_registers_state[REG_IRQ_FLAGS] == false) {
 80036e2:	4c3b      	ldr	r4, [pc, #236]	; (80037d0 <_ZN13LoRa_register11clear_flagsE13Address_fieldb+0xf4>)
uint8_t LoRa_register::clear_flags(Address_field flag, bool back_value) {
 80036e4:	b085      	sub	sp, #20
    if(_registers_state[REG_IRQ_FLAGS] == false) {
 80036e6:	f894 8000 	ldrb.w	r8, [r4]
uint8_t LoRa_register::clear_flags(Address_field flag, bool back_value) {
 80036ea:	ad0f      	add	r5, sp, #60	; 0x3c
    if(_registers_state[REG_IRQ_FLAGS] == false) {
 80036ec:	eb00 0708 	add.w	r7, r0, r8
uint8_t LoRa_register::clear_flags(Address_field flag, bool back_value) {
 80036f0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
    if(_registers_state[REG_IRQ_FLAGS] == false) {
 80036f4:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
uint8_t LoRa_register::clear_flags(Address_field flag, bool back_value) {
 80036f8:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
    if(_registers_state[REG_IRQ_FLAGS] == false) {
 80036fc:	b163      	cbz	r3, 8003718 <_ZN13LoRa_register11clear_flagsE13Address_fieldb+0x3c>
 80036fe:	4606      	mov	r6, r0
 8003700:	f100 04f0 	add.w	r4, r0, #240	; 0xf0
 8003704:	f500 7ae8 	add.w	sl, r0, #464	; 0x1d0
            if(flags[i] == _flags[j]) {
 8003708:	4621      	mov	r1, r4
 800370a:	4628      	mov	r0, r5
 800370c:	f7fd fe68 	bl	80013e0 <_ZeqRK13Address_fieldS1_>
 8003710:	341c      	adds	r4, #28
 8003712:	b938      	cbnz	r0, 8003724 <_ZN13LoRa_register11clear_flagsE13Address_fieldb+0x48>
        for(int j = 0; j < AMT_FLAGS; ++j) {
 8003714:	4554      	cmp	r4, sl
 8003716:	d1f7      	bne.n	8003708 <_ZN13LoRa_register11clear_flagsE13Address_fieldb+0x2c>
        return 0; // флаги не считаны
 8003718:	2000      	movs	r0, #0
}
 800371a:	b005      	add	sp, #20
 800371c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003720:	b004      	add	sp, #16
 8003722:	4770      	bx	lr
    _registers_data[REG_IRQ_FLAGS] = 0;
 8003724:	f04f 0b00 	mov.w	fp, #0
    uint8_t data = _registers_data[REG_IRQ_FLAGS];
 8003728:	7b3c      	ldrb	r4, [r7, #12]
    uint32_t* values = new uint32_t[amt_flags];
 800372a:	2004      	movs	r0, #4
    _registers_data[REG_IRQ_FLAGS] = 0;
 800372c:	f887 b00c 	strb.w	fp, [r7, #12]
    uint32_t* values = new uint32_t[amt_flags];
 8003730:	f008 fabe 	bl	800bcb0 <_Znaj>
        values[i] = 1;
 8003734:	f04f 0a01 	mov.w	sl, #1
    uint32_t* values = new uint32_t[amt_flags];
 8003738:	4603      	mov	r3, r0
    set_field_value(flags, values, amt_flags);
 800373a:	4602      	mov	r2, r0
 800373c:	4629      	mov	r1, r5
        values[i] = 1;
 800373e:	f8c3 a000 	str.w	sl, [r3]
    set_field_value(flags, values, amt_flags);
 8003742:	4630      	mov	r0, r6
 8003744:	f7ff fef0 	bl	8003528 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47>
    _write_register(REG_IRQ_FLAGS, _registers_data[REG_IRQ_FLAGS]);
 8003748:	7b3b      	ldrb	r3, [r7, #12]
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 800374a:	465a      	mov	r2, fp
 800374c:	88b1      	ldrh	r1, [r6, #4]
 800374e:	68b0      	ldr	r0, [r6, #8]
    _single_transfer(address | 0x80, value);
 8003750:	f068 087f 	orn	r8, r8, #127	; 0x7f
 8003754:	f88d 300e 	strb.w	r3, [sp, #14]
 8003758:	f88d 800d 	strb.w	r8, [sp, #13]
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 800375c:	f003 fe7e 	bl	800745c <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(_spi, &address, &response, 1, 1000);
 8003760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003764:	6830      	ldr	r0, [r6, #0]
 8003766:	4653      	mov	r3, sl
 8003768:	9200      	str	r2, [sp, #0]
 800376a:	f10d 010d 	add.w	r1, sp, #13
 800376e:	f10d 020f 	add.w	r2, sp, #15
 8003772:	f005 ff01 	bl	8009578 <HAL_SPI_TransmitReceive>
 8003776:	2332      	movs	r3, #50	; 0x32
    for(int i = 0; i < 50; i++) __NOP();
 8003778:	bf00      	nop
 800377a:	3b01      	subs	r3, #1
 800377c:	d1fc      	bne.n	8003778 <_ZN13LoRa_register11clear_flagsE13Address_fieldb+0x9c>
    HAL_SPI_TransmitReceive(_spi, &value, &response, 1, 1000);
 800377e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003782:	6830      	ldr	r0, [r6, #0]
 8003784:	f10d 020f 	add.w	r2, sp, #15
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	f10d 010e 	add.w	r1, sp, #14
 800378e:	2301      	movs	r3, #1
 8003790:	f005 fef2 	bl	8009578 <HAL_SPI_TransmitReceive>
 8003794:	2314      	movs	r3, #20
    for(int i = 0; i < 20; i++) __NOP();
 8003796:	bf00      	nop
 8003798:	3b01      	subs	r3, #1
 800379a:	d1fc      	bne.n	8003796 <_ZN13LoRa_register11clear_flagsE13Address_fieldb+0xba>
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_SET);
 800379c:	2201      	movs	r2, #1
 800379e:	88b1      	ldrh	r1, [r6, #4]
 80037a0:	68b0      	ldr	r0, [r6, #8]
 80037a2:	f003 fe5b 	bl	800745c <HAL_GPIO_WritePin>
    if(back_value) {
 80037a6:	f1b9 0f00 	cmp.w	r9, #0
 80037aa:	d109      	bne.n	80037c0 <_ZN13LoRa_register11clear_flagsE13Address_fieldb+0xe4>
    return amt_flags;
 80037ac:	2001      	movs	r0, #1
        _registers_data[REG_IRQ_FLAGS] = data | ~_registers_data[REG_IRQ_FLAGS];
 80037ae:	7b3b      	ldrb	r3, [r7, #12]
 80037b0:	ea64 0403 	orn	r4, r4, r3
 80037b4:	733c      	strb	r4, [r7, #12]
}
 80037b6:	b005      	add	sp, #20
 80037b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037bc:	b004      	add	sp, #16
 80037be:	4770      	bx	lr
    return amt_flags;
 80037c0:	2001      	movs	r0, #1
        _registers_data[REG_IRQ_FLAGS] = data;
 80037c2:	733c      	strb	r4, [r7, #12]
}
 80037c4:	b005      	add	sp, #20
 80037c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ca:	b004      	add	sp, #16
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	0800d05a 	.word	0x0800d05a

080037d4 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>:
uint8_t LoRa_register::get_field_value(Address_field field, uint32_t* value, bool read) {
 80037d4:	b084      	sub	sp, #16
 80037d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80037da:	2400      	movs	r4, #0
 80037dc:	b0a1      	sub	sp, #132	; 0x84
 80037de:	ae29      	add	r6, sp, #164	; 0xa4
 80037e0:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 80037e4:	4607      	mov	r7, r0
 80037e6:	4621      	mov	r1, r4
 80037e8:	a804      	add	r0, sp, #16
 80037ea:	2270      	movs	r2, #112	; 0x70
 80037ec:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80037f0:	9403      	str	r4, [sp, #12]
 80037f2:	f89d 80c4 	ldrb.w	r8, [sp, #196]	; 0xc4
                reg_add[adr] = true;
 80037f6:	f04f 0901 	mov.w	r9, #1
 80037fa:	f009 fb09 	bl	800ce10 <memset>
 80037fe:	e000      	b.n	8003802 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0x2e>
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8003800:	3401      	adds	r4, #1
 8003802:	4630      	mov	r0, r6
 8003804:	f7fd fdea 	bl	80013dc <_ZN13Address_field13get_reg_countEv>
 8003808:	4284      	cmp	r4, r0
 800380a:	da20      	bge.n	800384e <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0x7a>
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 800380c:	4630      	mov	r0, r6
 800380e:	f7fd fde3 	bl	80013d8 <_ZN13Address_field13get_registersEv>
 8003812:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003816:	f7fd fce9 	bl	80011ec <_ZN8Register7addressEv>
            if(reg_add[adr] == false) {
 800381a:	aa20      	add	r2, sp, #128	; 0x80
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 800381c:	b2c0      	uxtb	r0, r0
            if(reg_add[adr] == false) {
 800381e:	4402      	add	r2, r0
 8003820:	f812 2c70 	ldrb.w	r2, [r2, #-112]
 8003824:	4603      	mov	r3, r0
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 8003826:	f88d 0003 	strb.w	r0, [sp, #3]
            if(reg_add[adr] == false) {
 800382a:	2a00      	cmp	r2, #0
 800382c:	d1e8      	bne.n	8003800 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0x2c>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800382e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8003832:	4291      	cmp	r1, r2
 8003834:	d04a      	beq.n	80038cc <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0xf8>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003836:	b119      	cbz	r1, 8003840 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0x6c>
 8003838:	7008      	strb	r0, [r1, #0]
 800383a:	9902      	ldr	r1, [sp, #8]
 800383c:	f89d 3003 	ldrb.w	r3, [sp, #3]
	    ++this->_M_impl._M_finish;
 8003840:	3101      	adds	r1, #1
 8003842:	9102      	str	r1, [sp, #8]
                reg_add[adr] = true;
 8003844:	aa20      	add	r2, sp, #128	; 0x80
 8003846:	4413      	add	r3, r2
 8003848:	f803 9c70 	strb.w	r9, [r3, #-112]
 800384c:	e7d8      	b.n	8003800 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0x2c>
 800384e:	e9dd 5901 	ldrd	r5, r9, [sp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003852:	eba9 0305 	sub.w	r3, r9, r5
    for(int i = registers.size() - 1; i >= 0; --i) {
 8003856:	3b01      	subs	r3, #1
 8003858:	d418      	bmi.n	800388c <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0xb8>
 800385a:	18e8      	adds	r0, r5, r3
 800385c:	e003      	b.n	8003866 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0x92>
 800385e:	1b63      	subs	r3, r4, r5
 8003860:	2b00      	cmp	r3, #0
 8003862:	4620      	mov	r0, r4
 8003864:	db12      	blt.n	800388c <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0xb8>
        if(_registers_state[registers[i]] != false) {
 8003866:	7803      	ldrb	r3, [r0, #0]
 8003868:	1e44      	subs	r4, r0, #1
 800386a:	443b      	add	r3, r7
 800386c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0f4      	beq.n	800385e <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0x8a>
 8003874:	1c41      	adds	r1, r0, #1
      if (__position + 1 != end())
 8003876:	4589      	cmp	r9, r1
 8003878:	d002      	beq.n	8003880 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0xac>
	  if (_Num)
 800387a:	ebb9 0201 	subs.w	r2, r9, r1
 800387e:	d122      	bne.n	80038c6 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0xf2>
    for(int i = registers.size() - 1; i >= 0; --i) {
 8003880:	1b63      	subs	r3, r4, r5
 8003882:	2b00      	cmp	r3, #0
      --this->_M_impl._M_finish;
 8003884:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003888:	4620      	mov	r0, r4
 800388a:	daec      	bge.n	8003866 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0x92>
    if((check.size() != 0) || read) {
 800388c:	454d      	cmp	r5, r9
 800388e:	d114      	bne.n	80038ba <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0xe6>
 8003890:	f1b8 0f00 	cmp.w	r8, #0
 8003894:	d111      	bne.n	80038ba <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0xe6>
        values[i] = fields[i].get_value(_registers_data, LORA_DATA_SIZE);
 8003896:	f107 010c 	add.w	r1, r7, #12
 800389a:	4630      	mov	r0, r6
 800389c:	2270      	movs	r2, #112	; 0x70
 800389e:	f7fd fcf3 	bl	8001288 <_ZN13Address_field9get_valueEPhi>
 80038a2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80038a4:	6018      	str	r0, [r3, #0]
	if (__p)
 80038a6:	b115      	cbz	r5, 80038ae <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0xda>
	::operator delete(__p);
 80038a8:	4628      	mov	r0, r5
 80038aa:	f008 fa1f 	bl	800bcec <_ZdlPv>
}
 80038ae:	2001      	movs	r0, #1
 80038b0:	b021      	add	sp, #132	; 0x84
 80038b2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038b6:	b004      	add	sp, #16
 80038b8:	4770      	bx	lr
        register_read(fields, amt, read);
 80038ba:	4642      	mov	r2, r8
 80038bc:	4631      	mov	r1, r6
 80038be:	4638      	mov	r0, r7
 80038c0:	f7ff fd76 	bl	80033b0 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49>
 80038c4:	e7e7      	b.n	8003896 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0xc2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80038c6:	f009 fa8a 	bl	800cdde <memmove>
 80038ca:	e7d9      	b.n	8003880 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0xac>
	  _M_realloc_insert(end(), __x);
 80038cc:	f10d 0203 	add.w	r2, sp, #3
 80038d0:	a801      	add	r0, sp, #4
 80038d2:	f7ff f8d5 	bl	8002a80 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
 80038d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80038da:	e7b3      	b.n	8003844 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0x70>

080038dc <_GLOBAL__sub_I_REG_FIFO>:
// ----- ----- ----- Регистры ----- ----- -----
//   ----- ----- ----- - - - - - - ----- ----- -----
Register
// --- --- --- Регистр очереди --- --- ---
// - REG_FIFO -
reg_fifo[1] = {Register(REG_FIFO, 8, 0)},
 80038dc:	2300      	movs	r3, #0
    FifoRxByteAddrPtr, LowDataRateOptimize, AgcAutoOn, PpmCorrection, FreqError,
    RssiWideband, DetectionOptimize, InvertIQ, DetectionThreshold, SyncWord,
    Dio0Mapping, Dio1Mapping, Dio2Mapping, Dio3Mapping, Dio4Mapping, Dio5Mapping,
    Version, FastHopOn, TcxoInputOn, PaDac, FormerTemp, BitRateFrac, AgcReferenceLevel,
    AgcStep1, AgcStep2, AgcStep3, AgcStep4, AgcStep5, PllBandwidth
};
 80038de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
reg_fifo[1] = {Register(REG_FIFO, 8, 0)},
 80038e2:	f8df b494 	ldr.w	fp, [pc, #1172]	; 8003d78 <_GLOBAL__sub_I_REG_FIFO+0x49c>
};
 80038e6:	b087      	sub	sp, #28
reg_fifo[1] = {Register(REG_FIFO, 8, 0)},
 80038e8:	4619      	mov	r1, r3
 80038ea:	4658      	mov	r0, fp
 80038ec:	2208      	movs	r2, #8
 80038ee:	f7fd fc2d 	bl	800114c <_ZN8RegisterC1Ethh>
reg_long_range_mode[1] = {Register(REG_OP_MODE, 1, 7)},
 80038f2:	2201      	movs	r2, #1
 80038f4:	f8df 9484 	ldr.w	r9, [pc, #1156]	; 8003d7c <_GLOBAL__sub_I_REG_FIFO+0x4a0>
 80038f8:	4611      	mov	r1, r2
 80038fa:	4648      	mov	r0, r9
 80038fc:	2307      	movs	r3, #7
 80038fe:	f7fd fc25 	bl	800114c <_ZN8RegisterC1Ethh>
reg_access_shared_reg[1] = {Register(REG_OP_MODE, 1, 6)},
 8003902:	2201      	movs	r2, #1
 8003904:	2306      	movs	r3, #6
 8003906:	4611      	mov	r1, r2
 8003908:	48dd      	ldr	r0, [pc, #884]	; (8003c80 <_GLOBAL__sub_I_REG_FIFO+0x3a4>)
 800390a:	f7fd fc1f 	bl	800114c <_ZN8RegisterC1Ethh>
reg_low_frequency_mode_on[1] = {Register(REG_OP_MODE, 1, 3)},
 800390e:	2201      	movs	r2, #1
 8003910:	2303      	movs	r3, #3
 8003912:	4611      	mov	r1, r2
 8003914:	48db      	ldr	r0, [pc, #876]	; (8003c84 <_GLOBAL__sub_I_REG_FIFO+0x3a8>)
 8003916:	f7fd fc19 	bl	800114c <_ZN8RegisterC1Ethh>
reg_mode[1] = {Register(REG_OP_MODE, 3, 0)},
 800391a:	2300      	movs	r3, #0
 800391c:	2203      	movs	r2, #3
 800391e:	2101      	movs	r1, #1
 8003920:	48d9      	ldr	r0, [pc, #868]	; (8003c88 <_GLOBAL__sub_I_REG_FIFO+0x3ac>)
 8003922:	f7fd fc13 	bl	800114c <_ZN8RegisterC1Ethh>
              Register(REG_FRF_MSB, 8, 0)},
 8003926:	2208      	movs	r2, #8
 8003928:	4fd8      	ldr	r7, [pc, #864]	; (8003c8c <_GLOBAL__sub_I_REG_FIFO+0x3b0>)
 800392a:	4611      	mov	r1, r2
 800392c:	4638      	mov	r0, r7
 800392e:	2300      	movs	r3, #0
 8003930:	f7fd fc0c 	bl	800114c <_ZN8RegisterC1Ethh>
 8003934:	f107 0008 	add.w	r0, r7, #8
 8003938:	2300      	movs	r3, #0
 800393a:	2208      	movs	r2, #8
 800393c:	2107      	movs	r1, #7
 800393e:	f7fd fc05 	bl	800114c <_ZN8RegisterC1Ethh>
 8003942:	f107 0010 	add.w	r0, r7, #16
 8003946:	2300      	movs	r3, #0
 8003948:	2208      	movs	r2, #8
 800394a:	2106      	movs	r1, #6
 800394c:	f7fd fbfe 	bl	800114c <_ZN8RegisterC1Ethh>
reg_pa_select[1] = {Register(REG_PA_CONFIG, 1, 7)},
 8003950:	2307      	movs	r3, #7
 8003952:	2201      	movs	r2, #1
 8003954:	2109      	movs	r1, #9
 8003956:	48ce      	ldr	r0, [pc, #824]	; (8003c90 <_GLOBAL__sub_I_REG_FIFO+0x3b4>)
 8003958:	f7fd fbf8 	bl	800114c <_ZN8RegisterC1Ethh>
reg_max_power[1] = {Register(REG_PA_CONFIG, 3, 4)},
 800395c:	2304      	movs	r3, #4
 800395e:	2203      	movs	r2, #3
 8003960:	2109      	movs	r1, #9
 8003962:	48cc      	ldr	r0, [pc, #816]	; (8003c94 <_GLOBAL__sub_I_REG_FIFO+0x3b8>)
 8003964:	f7fd fbf2 	bl	800114c <_ZN8RegisterC1Ethh>
reg_output_power[1] = {Register(REG_PA_CONFIG, 4, 0)},
 8003968:	2300      	movs	r3, #0
 800396a:	2204      	movs	r2, #4
 800396c:	2109      	movs	r1, #9
 800396e:	48ca      	ldr	r0, [pc, #808]	; (8003c98 <_GLOBAL__sub_I_REG_FIFO+0x3bc>)
 8003970:	f7fd fbec 	bl	800114c <_ZN8RegisterC1Ethh>
reg_pa_ramp[1] = {Register(REG_PA_RAMP, 4, 0)},
 8003974:	2300      	movs	r3, #0
 8003976:	2204      	movs	r2, #4
 8003978:	210a      	movs	r1, #10
 800397a:	48c8      	ldr	r0, [pc, #800]	; (8003c9c <_GLOBAL__sub_I_REG_FIFO+0x3c0>)
 800397c:	f7fd fbe6 	bl	800114c <_ZN8RegisterC1Ethh>
reg_ocp_on[1] = {Register(REG_LR_OCP, 1, 5)},
 8003980:	2305      	movs	r3, #5
 8003982:	2201      	movs	r2, #1
 8003984:	210b      	movs	r1, #11
 8003986:	48c6      	ldr	r0, [pc, #792]	; (8003ca0 <_GLOBAL__sub_I_REG_FIFO+0x3c4>)
 8003988:	f7fd fbe0 	bl	800114c <_ZN8RegisterC1Ethh>
reg_lna_boost_lf[1] = {Register(REG_LNA, 2, 3)},
 800398c:	f8df 83f0 	ldr.w	r8, [pc, #1008]	; 8003d80 <_GLOBAL__sub_I_REG_FIFO+0x4a4>
reg_ocp_trim[1] = {Register(REG_LR_OCP, 5, 0)},
 8003990:	2300      	movs	r3, #0
 8003992:	2205      	movs	r2, #5
 8003994:	210b      	movs	r1, #11
 8003996:	48c3      	ldr	r0, [pc, #780]	; (8003ca4 <_GLOBAL__sub_I_REG_FIFO+0x3c8>)
 8003998:	f7fd fbd8 	bl	800114c <_ZN8RegisterC1Ethh>
reg_lna_gain[1] = {Register(REG_LNA, 3, 5)},
 800399c:	2305      	movs	r3, #5
 800399e:	2203      	movs	r2, #3
 80039a0:	210c      	movs	r1, #12
 80039a2:	48c1      	ldr	r0, [pc, #772]	; (8003ca8 <_GLOBAL__sub_I_REG_FIFO+0x3cc>)
 80039a4:	f7fd fbd2 	bl	800114c <_ZN8RegisterC1Ethh>
reg_lna_boost_lf[1] = {Register(REG_LNA, 2, 3)},
 80039a8:	4640      	mov	r0, r8
 80039aa:	2303      	movs	r3, #3
 80039ac:	2202      	movs	r2, #2
 80039ae:	210c      	movs	r1, #12
 80039b0:	f7fd fbcc 	bl	800114c <_ZN8RegisterC1Ethh>
reg_lna_boost_hf[1] = {Register(REG_LNA, 2, 0)},
 80039b4:	2300      	movs	r3, #0
 80039b6:	2202      	movs	r2, #2
 80039b8:	210c      	movs	r1, #12
 80039ba:	48bc      	ldr	r0, [pc, #752]	; (8003cac <_GLOBAL__sub_I_REG_FIFO+0x3d0>)
 80039bc:	f7fd fbc6 	bl	800114c <_ZN8RegisterC1Ethh>
reg_fifo_addr_ptr[1] = {Register(REG_FIFO_ADDR_PTR, 8, 0)},
 80039c0:	2300      	movs	r3, #0
 80039c2:	2208      	movs	r2, #8
 80039c4:	210d      	movs	r1, #13
 80039c6:	48ba      	ldr	r0, [pc, #744]	; (8003cb0 <_GLOBAL__sub_I_REG_FIFO+0x3d4>)
 80039c8:	f7fd fbc0 	bl	800114c <_ZN8RegisterC1Ethh>
reg_fifo_tx_base_addr[1] = {Register(REG_FIFO_TX_BASE_ADDR, 8, 0)},
 80039cc:	2300      	movs	r3, #0
 80039ce:	2208      	movs	r2, #8
 80039d0:	210e      	movs	r1, #14
 80039d2:	48b8      	ldr	r0, [pc, #736]	; (8003cb4 <_GLOBAL__sub_I_REG_FIFO+0x3d8>)
 80039d4:	f7fd fbba 	bl	800114c <_ZN8RegisterC1Ethh>
reg_fifo_rx_base_addr[1] = {Register(REG_FIFO_RX_BASE_ADDR, 8, 0)},
 80039d8:	2300      	movs	r3, #0
 80039da:	2208      	movs	r2, #8
 80039dc:	210f      	movs	r1, #15
 80039de:	48b6      	ldr	r0, [pc, #728]	; (8003cb8 <_GLOBAL__sub_I_REG_FIFO+0x3dc>)
 80039e0:	f7fd fbb4 	bl	800114c <_ZN8RegisterC1Ethh>
reg_fifo_rx_current_addr[1] = {Register(REG_FIFO_RX_CURRENT_ADDR, 8, 0)},
 80039e4:	2300      	movs	r3, #0
 80039e6:	2208      	movs	r2, #8
 80039e8:	2110      	movs	r1, #16
 80039ea:	48b4      	ldr	r0, [pc, #720]	; (8003cbc <_GLOBAL__sub_I_REG_FIFO+0x3e0>)
 80039ec:	f7fd fbae 	bl	800114c <_ZN8RegisterC1Ethh>
reg_rx_timeout_mask[1] = {Register(REG_IRQ_FLAGS_MASK, 1, 7)},
 80039f0:	2307      	movs	r3, #7
 80039f2:	2201      	movs	r2, #1
 80039f4:	2111      	movs	r1, #17
 80039f6:	48b2      	ldr	r0, [pc, #712]	; (8003cc0 <_GLOBAL__sub_I_REG_FIFO+0x3e4>)
 80039f8:	f7fd fba8 	bl	800114c <_ZN8RegisterC1Ethh>
reg_rx_done_mask[1] = {Register(REG_IRQ_FLAGS_MASK, 1, 6)},
 80039fc:	2306      	movs	r3, #6
 80039fe:	2201      	movs	r2, #1
 8003a00:	2111      	movs	r1, #17
 8003a02:	48b0      	ldr	r0, [pc, #704]	; (8003cc4 <_GLOBAL__sub_I_REG_FIFO+0x3e8>)
 8003a04:	f7fd fba2 	bl	800114c <_ZN8RegisterC1Ethh>
reg_payload_crc_error_mask[1] = {Register(REG_IRQ_FLAGS_MASK, 1, 5)},
 8003a08:	2305      	movs	r3, #5
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	2111      	movs	r1, #17
 8003a0e:	48ae      	ldr	r0, [pc, #696]	; (8003cc8 <_GLOBAL__sub_I_REG_FIFO+0x3ec>)
 8003a10:	f7fd fb9c 	bl	800114c <_ZN8RegisterC1Ethh>
reg_valid_header_mask[1] = {Register(REG_IRQ_FLAGS_MASK, 1, 4)},
 8003a14:	2304      	movs	r3, #4
 8003a16:	2201      	movs	r2, #1
 8003a18:	2111      	movs	r1, #17
 8003a1a:	48ac      	ldr	r0, [pc, #688]	; (8003ccc <_GLOBAL__sub_I_REG_FIFO+0x3f0>)
 8003a1c:	f7fd fb96 	bl	800114c <_ZN8RegisterC1Ethh>
reg_tx_done_mask[1] = {Register(REG_IRQ_FLAGS_MASK, 1, 3)},
 8003a20:	2303      	movs	r3, #3
 8003a22:	2201      	movs	r2, #1
 8003a24:	2111      	movs	r1, #17
 8003a26:	48aa      	ldr	r0, [pc, #680]	; (8003cd0 <_GLOBAL__sub_I_REG_FIFO+0x3f4>)
 8003a28:	f7fd fb90 	bl	800114c <_ZN8RegisterC1Ethh>
reg_cad_done_mask[1] = {Register(REG_IRQ_FLAGS_MASK, 1, 2)},
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	2201      	movs	r2, #1
 8003a30:	2111      	movs	r1, #17
 8003a32:	48a8      	ldr	r0, [pc, #672]	; (8003cd4 <_GLOBAL__sub_I_REG_FIFO+0x3f8>)
 8003a34:	f7fd fb8a 	bl	800114c <_ZN8RegisterC1Ethh>
reg_fhss_change_channel_mask[1] = {Register(REG_IRQ_FLAGS_MASK, 1, 1)},
 8003a38:	2301      	movs	r3, #1
 8003a3a:	2111      	movs	r1, #17
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	48a6      	ldr	r0, [pc, #664]	; (8003cd8 <_GLOBAL__sub_I_REG_FIFO+0x3fc>)
 8003a40:	f7fd fb84 	bl	800114c <_ZN8RegisterC1Ethh>
reg_cad_detected_mask[1] = {Register(REG_IRQ_FLAGS_MASK, 1, 0)},
 8003a44:	2300      	movs	r3, #0
 8003a46:	2201      	movs	r2, #1
 8003a48:	2111      	movs	r1, #17
 8003a4a:	48a4      	ldr	r0, [pc, #656]	; (8003cdc <_GLOBAL__sub_I_REG_FIFO+0x400>)
 8003a4c:	f7fd fb7e 	bl	800114c <_ZN8RegisterC1Ethh>
reg_rx_timeout[1] = {Register(REG_IRQ_FLAGS, 1, 7)},
 8003a50:	2307      	movs	r3, #7
 8003a52:	2201      	movs	r2, #1
 8003a54:	2112      	movs	r1, #18
 8003a56:	48a2      	ldr	r0, [pc, #648]	; (8003ce0 <_GLOBAL__sub_I_REG_FIFO+0x404>)
 8003a58:	f7fd fb78 	bl	800114c <_ZN8RegisterC1Ethh>
reg_rx_done[1] = {Register(REG_IRQ_FLAGS, 1, 6)},
 8003a5c:	2306      	movs	r3, #6
 8003a5e:	2201      	movs	r2, #1
 8003a60:	2112      	movs	r1, #18
 8003a62:	48a0      	ldr	r0, [pc, #640]	; (8003ce4 <_GLOBAL__sub_I_REG_FIFO+0x408>)
 8003a64:	f7fd fb72 	bl	800114c <_ZN8RegisterC1Ethh>
reg_payload_crc_error[1] = {Register(REG_IRQ_FLAGS, 1, 5)},
 8003a68:	2305      	movs	r3, #5
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	2112      	movs	r1, #18
 8003a6e:	489e      	ldr	r0, [pc, #632]	; (8003ce8 <_GLOBAL__sub_I_REG_FIFO+0x40c>)
 8003a70:	f7fd fb6c 	bl	800114c <_ZN8RegisterC1Ethh>
reg_valid_header[1] = {Register(REG_IRQ_FLAGS, 1, 4)},
 8003a74:	2304      	movs	r3, #4
 8003a76:	2201      	movs	r2, #1
 8003a78:	2112      	movs	r1, #18
 8003a7a:	489c      	ldr	r0, [pc, #624]	; (8003cec <_GLOBAL__sub_I_REG_FIFO+0x410>)
 8003a7c:	f7fd fb66 	bl	800114c <_ZN8RegisterC1Ethh>
reg_tx_done[1] = {Register(REG_IRQ_FLAGS, 1, 3)},
 8003a80:	2303      	movs	r3, #3
 8003a82:	2201      	movs	r2, #1
 8003a84:	2112      	movs	r1, #18
 8003a86:	489a      	ldr	r0, [pc, #616]	; (8003cf0 <_GLOBAL__sub_I_REG_FIFO+0x414>)
 8003a88:	f7fd fb60 	bl	800114c <_ZN8RegisterC1Ethh>
reg_cad_done[1] = {Register(REG_IRQ_FLAGS, 1, 2)},
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	2201      	movs	r2, #1
 8003a90:	2112      	movs	r1, #18
 8003a92:	4898      	ldr	r0, [pc, #608]	; (8003cf4 <_GLOBAL__sub_I_REG_FIFO+0x418>)
 8003a94:	f7fd fb5a 	bl	800114c <_ZN8RegisterC1Ethh>
reg_fhss_change_channel[1] = {Register(REG_IRQ_FLAGS, 1, 1)},
 8003a98:	2301      	movs	r3, #1
 8003a9a:	2112      	movs	r1, #18
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4896      	ldr	r0, [pc, #600]	; (8003cf8 <_GLOBAL__sub_I_REG_FIFO+0x41c>)
 8003aa0:	f7fd fb54 	bl	800114c <_ZN8RegisterC1Ethh>
reg_cad_detected[1] = {Register(REG_IRQ_FLAGS, 1, 0)},
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	2112      	movs	r1, #18
 8003aaa:	4894      	ldr	r0, [pc, #592]	; (8003cfc <_GLOBAL__sub_I_REG_FIFO+0x420>)
 8003aac:	f7fd fb4e 	bl	800114c <_ZN8RegisterC1Ethh>
reg_fifo_rx_bytes_nb[1] = {Register(REG_RX_NB_BYTES, 8, 0)},
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	2208      	movs	r2, #8
 8003ab4:	2113      	movs	r1, #19
 8003ab6:	4892      	ldr	r0, [pc, #584]	; (8003d00 <_GLOBAL__sub_I_REG_FIFO+0x424>)
 8003ab8:	f7fd fb48 	bl	800114c <_ZN8RegisterC1Ethh>
                           Register(REG_RX_HEADER_CNT_VALUE_MSB, 8, 0)},
 8003abc:	2300      	movs	r3, #0
 8003abe:	2208      	movs	r2, #8
 8003ac0:	2115      	movs	r1, #21
 8003ac2:	4890      	ldr	r0, [pc, #576]	; (8003d04 <_GLOBAL__sub_I_REG_FIFO+0x428>)
 8003ac4:	f7fd fb42 	bl	800114c <_ZN8RegisterC1Ethh>
 8003ac8:	4b8e      	ldr	r3, [pc, #568]	; (8003d04 <_GLOBAL__sub_I_REG_FIFO+0x428>)
                           Register(REG_RX_PACKET_CNT_VALUE_MSB, 8, 0)},
 8003aca:	4c8f      	ldr	r4, [pc, #572]	; (8003d08 <_GLOBAL__sub_I_REG_FIFO+0x42c>)
                           Register(REG_RX_HEADER_CNT_VALUE_MSB, 8, 0)},
 8003acc:	f103 0008 	add.w	r0, r3, #8
 8003ad0:	2208      	movs	r2, #8
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	2114      	movs	r1, #20
 8003ad6:	f7fd fb39 	bl	800114c <_ZN8RegisterC1Ethh>
                           Register(REG_RX_PACKET_CNT_VALUE_MSB, 8, 0)},
 8003ada:	4620      	mov	r0, r4
 8003adc:	2300      	movs	r3, #0
 8003ade:	2208      	movs	r2, #8
 8003ae0:	2117      	movs	r1, #23
 8003ae2:	f7fd fb33 	bl	800114c <_ZN8RegisterC1Ethh>
 8003ae6:	f104 0008 	add.w	r0, r4, #8
 8003aea:	2300      	movs	r3, #0
 8003aec:	2208      	movs	r2, #8
 8003aee:	2116      	movs	r1, #22
 8003af0:	f7fd fb2c 	bl	800114c <_ZN8RegisterC1Ethh>
reg_rx_coding_rate[1] = {Register(REG_MODEM_STAT, 3, 5)},
 8003af4:	2305      	movs	r3, #5
 8003af6:	2203      	movs	r2, #3
 8003af8:	2118      	movs	r1, #24
 8003afa:	4884      	ldr	r0, [pc, #528]	; (8003d0c <_GLOBAL__sub_I_REG_FIFO+0x430>)
 8003afc:	f7fd fb26 	bl	800114c <_ZN8RegisterC1Ethh>
reg_modem_status[1] = {Register(REG_MODEM_STAT, 5, 0)},
 8003b00:	2300      	movs	r3, #0
 8003b02:	2205      	movs	r2, #5
 8003b04:	2118      	movs	r1, #24
 8003b06:	4882      	ldr	r0, [pc, #520]	; (8003d10 <_GLOBAL__sub_I_REG_FIFO+0x434>)
 8003b08:	f7fd fb20 	bl	800114c <_ZN8RegisterC1Ethh>
reg_packet_snr[1] = {Register(REG_PKT_SNR_VALUE, 8, 0)},
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	2208      	movs	r2, #8
 8003b10:	2119      	movs	r1, #25
 8003b12:	4880      	ldr	r0, [pc, #512]	; (8003d14 <_GLOBAL__sub_I_REG_FIFO+0x438>)
 8003b14:	f7fd fb1a 	bl	800114c <_ZN8RegisterC1Ethh>
reg_packet_rssi[1] = {Register(REG_PKT_RSSI_VALUE, 8, 0)},
 8003b18:	2300      	movs	r3, #0
 8003b1a:	2208      	movs	r2, #8
 8003b1c:	211a      	movs	r1, #26
 8003b1e:	487e      	ldr	r0, [pc, #504]	; (8003d18 <_GLOBAL__sub_I_REG_FIFO+0x43c>)
 8003b20:	f7fd fb14 	bl	800114c <_ZN8RegisterC1Ethh>
reg_rssi[1] = {Register(REG_RSSI_VALUE, 8, 0)},
 8003b24:	2300      	movs	r3, #0
 8003b26:	2208      	movs	r2, #8
 8003b28:	211b      	movs	r1, #27
 8003b2a:	487c      	ldr	r0, [pc, #496]	; (8003d1c <_GLOBAL__sub_I_REG_FIFO+0x440>)
 8003b2c:	f7fd fb0e 	bl	800114c <_ZN8RegisterC1Ethh>
reg_pll_timeout[1] = {Register(REG_HOP_CHANNEL, 1, 7)},
 8003b30:	2307      	movs	r3, #7
 8003b32:	2201      	movs	r2, #1
 8003b34:	211c      	movs	r1, #28
 8003b36:	487a      	ldr	r0, [pc, #488]	; (8003d20 <_GLOBAL__sub_I_REG_FIFO+0x444>)
 8003b38:	f7fd fb08 	bl	800114c <_ZN8RegisterC1Ethh>
reg_crc_on_payload[1] = {Register(REG_HOP_CHANNEL, 1, 6)},
 8003b3c:	2306      	movs	r3, #6
 8003b3e:	2201      	movs	r2, #1
 8003b40:	211c      	movs	r1, #28
 8003b42:	4878      	ldr	r0, [pc, #480]	; (8003d24 <_GLOBAL__sub_I_REG_FIFO+0x448>)
 8003b44:	f7fd fb02 	bl	800114c <_ZN8RegisterC1Ethh>
reg_fhss_present_channel[1] = {Register(REG_HOP_CHANNEL, 6, 0)},
 8003b48:	2300      	movs	r3, #0
 8003b4a:	2206      	movs	r2, #6
 8003b4c:	211c      	movs	r1, #28
 8003b4e:	4876      	ldr	r0, [pc, #472]	; (8003d28 <_GLOBAL__sub_I_REG_FIFO+0x44c>)
 8003b50:	f7fd fafc 	bl	800114c <_ZN8RegisterC1Ethh>
reg_bw[1] = {Register(REG_MODEM_CONFIG_1, 4, 4)},
 8003b54:	2304      	movs	r3, #4
 8003b56:	211d      	movs	r1, #29
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4874      	ldr	r0, [pc, #464]	; (8003d2c <_GLOBAL__sub_I_REG_FIFO+0x450>)
 8003b5c:	f7fd faf6 	bl	800114c <_ZN8RegisterC1Ethh>
reg_coding_rate[1] = {Register(REG_MODEM_CONFIG_1, 3, 1)},
 8003b60:	2301      	movs	r3, #1
 8003b62:	2203      	movs	r2, #3
 8003b64:	211d      	movs	r1, #29
 8003b66:	4872      	ldr	r0, [pc, #456]	; (8003d30 <_GLOBAL__sub_I_REG_FIFO+0x454>)
 8003b68:	f7fd faf0 	bl	800114c <_ZN8RegisterC1Ethh>
reg_implicit_header_mode_on[1] = {Register(REG_MODEM_CONFIG_1, 1, 0)},
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	2201      	movs	r2, #1
 8003b70:	211d      	movs	r1, #29
 8003b72:	4870      	ldr	r0, [pc, #448]	; (8003d34 <_GLOBAL__sub_I_REG_FIFO+0x458>)
 8003b74:	f7fd faea 	bl	800114c <_ZN8RegisterC1Ethh>
reg_spreading_factor[1] = {Register(REG_MODEM_CONFIG_2, 4, 4)},
 8003b78:	2304      	movs	r3, #4
 8003b7a:	211e      	movs	r1, #30
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	486e      	ldr	r0, [pc, #440]	; (8003d38 <_GLOBAL__sub_I_REG_FIFO+0x45c>)
 8003b80:	f7fd fae4 	bl	800114c <_ZN8RegisterC1Ethh>
                       Register(REG_MODEM_CONFIG_2, 2, 0)},
 8003b84:	4d6d      	ldr	r5, [pc, #436]	; (8003d3c <_GLOBAL__sub_I_REG_FIFO+0x460>)
reg_tx_continuous_mode[1] = {Register(REG_MODEM_CONFIG_2, 1, 3)},
 8003b86:	2303      	movs	r3, #3
 8003b88:	2201      	movs	r2, #1
 8003b8a:	211e      	movs	r1, #30
 8003b8c:	486c      	ldr	r0, [pc, #432]	; (8003d40 <_GLOBAL__sub_I_REG_FIFO+0x464>)
 8003b8e:	f7fd fadd 	bl	800114c <_ZN8RegisterC1Ethh>
reg_rx_payload_crc_on[1] = {Register(REG_MODEM_CONFIG_2, 1, 2)},
 8003b92:	2302      	movs	r3, #2
 8003b94:	2201      	movs	r2, #1
 8003b96:	211e      	movs	r1, #30
 8003b98:	486a      	ldr	r0, [pc, #424]	; (8003d44 <_GLOBAL__sub_I_REG_FIFO+0x468>)
 8003b9a:	f7fd fad7 	bl	800114c <_ZN8RegisterC1Ethh>
                          Register(REG_PREAMBLE_MSB, 8, 0)},
 8003b9e:	4c6a      	ldr	r4, [pc, #424]	; (8003d48 <_GLOBAL__sub_I_REG_FIFO+0x46c>)
                       Register(REG_MODEM_CONFIG_2, 2, 0)},
 8003ba0:	4628      	mov	r0, r5
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	2208      	movs	r2, #8
 8003ba6:	211f      	movs	r1, #31
 8003ba8:	f7fd fad0 	bl	800114c <_ZN8RegisterC1Ethh>
 8003bac:	f105 0008 	add.w	r0, r5, #8
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	211e      	movs	r1, #30
 8003bb6:	f7fd fac9 	bl	800114c <_ZN8RegisterC1Ethh>
                          Register(REG_PREAMBLE_MSB, 8, 0)},
 8003bba:	4620      	mov	r0, r4
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	2208      	movs	r2, #8
 8003bc0:	2121      	movs	r1, #33	; 0x21
 8003bc2:	f7fd fac3 	bl	800114c <_ZN8RegisterC1Ethh>
 8003bc6:	f104 0008 	add.w	r0, r4, #8
 8003bca:	2300      	movs	r3, #0
 8003bcc:	2208      	movs	r2, #8
 8003bce:	2120      	movs	r1, #32
 8003bd0:	f7fd fabc 	bl	800114c <_ZN8RegisterC1Ethh>
reg_payload_length[1] = {Register(REG_PAYLOAD_LENGTH, 8, 0)},
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	2208      	movs	r2, #8
 8003bd8:	2122      	movs	r1, #34	; 0x22
 8003bda:	485c      	ldr	r0, [pc, #368]	; (8003d4c <_GLOBAL__sub_I_REG_FIFO+0x470>)
 8003bdc:	f7fd fab6 	bl	800114c <_ZN8RegisterC1Ethh>
reg_payload_max_length[1] = {Register(REG_MAX_PAYLOAD_LENGTH, 8, 0)},
 8003be0:	2300      	movs	r3, #0
 8003be2:	2208      	movs	r2, #8
 8003be4:	2123      	movs	r1, #35	; 0x23
 8003be6:	485a      	ldr	r0, [pc, #360]	; (8003d50 <_GLOBAL__sub_I_REG_FIFO+0x474>)
 8003be8:	f7fd fab0 	bl	800114c <_ZN8RegisterC1Ethh>
reg_freq_hopping_period[1] = {Register(REG_HOP_PERIOD, 8, 0)},
 8003bec:	2300      	movs	r3, #0
 8003bee:	2208      	movs	r2, #8
 8003bf0:	2124      	movs	r1, #36	; 0x24
 8003bf2:	4858      	ldr	r0, [pc, #352]	; (8003d54 <_GLOBAL__sub_I_REG_FIFO+0x478>)
 8003bf4:	f7fd faaa 	bl	800114c <_ZN8RegisterC1Ethh>
reg_fifo_rx_byte_addr_ptr[1] = {Register(REG_FIFI_RX_BYTE_ADDR, 8, 0)},
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	2208      	movs	r2, #8
 8003bfc:	2125      	movs	r1, #37	; 0x25
 8003bfe:	4856      	ldr	r0, [pc, #344]	; (8003d58 <_GLOBAL__sub_I_REG_FIFO+0x47c>)
 8003c00:	f7fd faa4 	bl	800114c <_ZN8RegisterC1Ethh>
reg_low_data_rate_optimize[1] = {Register(REG_MODEM_CONFIG_3, 1, 3)},
 8003c04:	2303      	movs	r3, #3
 8003c06:	2201      	movs	r2, #1
 8003c08:	2126      	movs	r1, #38	; 0x26
 8003c0a:	4854      	ldr	r0, [pc, #336]	; (8003d5c <_GLOBAL__sub_I_REG_FIFO+0x480>)
 8003c0c:	f7fd fa9e 	bl	800114c <_ZN8RegisterC1Ethh>
                     Register(REG_FEI_MSB, 4, 0)},
 8003c10:	4c53      	ldr	r4, [pc, #332]	; (8003d60 <_GLOBAL__sub_I_REG_FIFO+0x484>)
reg_agc_auto_on[1] = {Register(REG_MODEM_CONFIG_3, 1, 2)},
 8003c12:	2302      	movs	r3, #2
 8003c14:	2201      	movs	r2, #1
 8003c16:	2126      	movs	r1, #38	; 0x26
 8003c18:	4852      	ldr	r0, [pc, #328]	; (8003d64 <_GLOBAL__sub_I_REG_FIFO+0x488>)
 8003c1a:	f7fd fa97 	bl	800114c <_ZN8RegisterC1Ethh>
reg_ppm_correction[1] = {Register(REG_PPM_CORRECTION, 8, 0)},
 8003c1e:	2300      	movs	r3, #0
 8003c20:	2208      	movs	r2, #8
 8003c22:	2127      	movs	r1, #39	; 0x27
 8003c24:	4850      	ldr	r0, [pc, #320]	; (8003d68 <_GLOBAL__sub_I_REG_FIFO+0x48c>)
 8003c26:	f7fd fa91 	bl	800114c <_ZN8RegisterC1Ethh>
                     Register(REG_FEI_MSB, 4, 0)},
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	2208      	movs	r2, #8
 8003c30:	212a      	movs	r1, #42	; 0x2a
 8003c32:	f7fd fa8b 	bl	800114c <_ZN8RegisterC1Ethh>
 8003c36:	f104 0008 	add.w	r0, r4, #8
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	2208      	movs	r2, #8
 8003c3e:	2129      	movs	r1, #41	; 0x29
 8003c40:	f7fd fa84 	bl	800114c <_ZN8RegisterC1Ethh>
 8003c44:	f104 0010 	add.w	r0, r4, #16
 8003c48:	2300      	movs	r3, #0
 8003c4a:	2204      	movs	r2, #4
 8003c4c:	2128      	movs	r1, #40	; 0x28
 8003c4e:	f7fd fa7d 	bl	800114c <_ZN8RegisterC1Ethh>
reg_rssi_wideband[1] = {Register(REG_RSSI_WIDEBAND, 8, 0)},
 8003c52:	2300      	movs	r3, #0
 8003c54:	2208      	movs	r2, #8
 8003c56:	212c      	movs	r1, #44	; 0x2c
 8003c58:	4844      	ldr	r0, [pc, #272]	; (8003d6c <_GLOBAL__sub_I_REG_FIFO+0x490>)
 8003c5a:	f7fd fa77 	bl	800114c <_ZN8RegisterC1Ethh>
reg_detection_optimize[1] = {Register(REG_DETECTION_OPTIMIZE, 3, 0)},
 8003c5e:	2300      	movs	r3, #0
 8003c60:	2203      	movs	r2, #3
 8003c62:	2131      	movs	r1, #49	; 0x31
 8003c64:	4842      	ldr	r0, [pc, #264]	; (8003d70 <_GLOBAL__sub_I_REG_FIFO+0x494>)
 8003c66:	f7fd fa71 	bl	800114c <_ZN8RegisterC1Ethh>
reg_invert_iq[1] = {Register(REG_INVERT_IQ, 1, 6)},
 8003c6a:	2306      	movs	r3, #6
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	2133      	movs	r1, #51	; 0x33
 8003c70:	4840      	ldr	r0, [pc, #256]	; (8003d74 <_GLOBAL__sub_I_REG_FIFO+0x498>)
 8003c72:	f7fd fa6b 	bl	800114c <_ZN8RegisterC1Ethh>
reg_detection_threshold[1] = {Register(REG_DETECTION_THRESHOLD, 8, 0)},
 8003c76:	2300      	movs	r3, #0
 8003c78:	2208      	movs	r2, #8
 8003c7a:	2137      	movs	r1, #55	; 0x37
 8003c7c:	e082      	b.n	8003d84 <_GLOBAL__sub_I_REG_FIFO+0x4a8>
 8003c7e:	bf00      	nop
 8003c80:	2000162c 	.word	0x2000162c
 8003c84:	200017bc 	.word	0x200017bc
 8003c88:	200017d4 	.word	0x200017d4
 8003c8c:	2000176c 	.word	0x2000176c
 8003c90:	2000180c 	.word	0x2000180c
 8003c94:	200017cc 	.word	0x200017cc
 8003c98:	200017f4 	.word	0x200017f4
 8003c9c:	20001804 	.word	0x20001804
 8003ca0:	200017e4 	.word	0x200017e4
 8003ca4:	200017ec 	.word	0x200017ec
 8003ca8:	200017a4 	.word	0x200017a4
 8003cac:	20001794 	.word	0x20001794
 8003cb0:	20001714 	.word	0x20001714
 8003cb4:	2000173c 	.word	0x2000173c
 8003cb8:	2000171c 	.word	0x2000171c
 8003cbc:	20001734 	.word	0x20001734
 8003cc0:	200018a4 	.word	0x200018a4
 8003cc4:	2000188c 	.word	0x2000188c
 8003cc8:	2000182c 	.word	0x2000182c
 8003ccc:	20001904 	.word	0x20001904
 8003cd0:	200018e4 	.word	0x200018e4
 8003cd4:	20001694 	.word	0x20001694
 8003cd8:	200016fc 	.word	0x200016fc
 8003cdc:	20001684 	.word	0x20001684
 8003ce0:	2000189c 	.word	0x2000189c
 8003ce4:	20001884 	.word	0x20001884
 8003ce8:	20001824 	.word	0x20001824
 8003cec:	200018ec 	.word	0x200018ec
 8003cf0:	200018dc 	.word	0x200018dc
 8003cf4:	2000168c 	.word	0x2000168c
 8003cf8:	200016f4 	.word	0x200016f4
 8003cfc:	2000167c 	.word	0x2000167c
 8003d00:	2000172c 	.word	0x2000172c
 8003d04:	200018f4 	.word	0x200018f4
 8003d08:	2000190c 	.word	0x2000190c
 8003d0c:	2000187c 	.word	0x2000187c
 8003d10:	200017dc 	.word	0x200017dc
 8003d14:	2000181c 	.word	0x2000181c
 8003d18:	20001814 	.word	0x20001814
 8003d1c:	2000186c 	.word	0x2000186c
 8003d20:	2000184c 	.word	0x2000184c
 8003d24:	200016a4 	.word	0x200016a4
 8003d28:	20001704 	.word	0x20001704
 8003d2c:	20001674 	.word	0x20001674
 8003d30:	2000169c 	.word	0x2000169c
 8003d34:	20001784 	.word	0x20001784
 8003d38:	200018ac 	.word	0x200018ac
 8003d3c:	200018b4 	.word	0x200018b4
 8003d40:	200018d4 	.word	0x200018d4
 8003d44:	20001894 	.word	0x20001894
 8003d48:	2000185c 	.word	0x2000185c
 8003d4c:	20001834 	.word	0x20001834
 8003d50:	2000183c 	.word	0x2000183c
 8003d54:	20001764 	.word	0x20001764
 8003d58:	20001724 	.word	0x20001724
 8003d5c:	200017b4 	.word	0x200017b4
 8003d60:	2000174c 	.word	0x2000174c
 8003d64:	20001634 	.word	0x20001634
 8003d68:	20001854 	.word	0x20001854
 8003d6c:	20001874 	.word	0x20001874
 8003d70:	200016ac 	.word	0x200016ac
 8003d74:	2000178c 	.word	0x2000178c
 8003d78:	2000170c 	.word	0x2000170c
 8003d7c:	200017ac 	.word	0x200017ac
 8003d80:	2000179c 	.word	0x2000179c
 8003d84:	48cd      	ldr	r0, [pc, #820]	; (80040bc <_GLOBAL__sub_I_REG_FIFO+0x7e0>)
 8003d86:	f7fd f9e1 	bl	800114c <_ZN8RegisterC1Ethh>
reg_sync_word[1] = {Register(REG_SYNC_WORD, 8, 0)},  // , reserved_value=[0x34])
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	2139      	movs	r1, #57	; 0x39
 8003d90:	48cb      	ldr	r0, [pc, #812]	; (80040c0 <_GLOBAL__sub_I_REG_FIFO+0x7e4>)
 8003d92:	f7fd f9db 	bl	800114c <_ZN8RegisterC1Ethh>
reg_dio0_mapping[1] = {Register(REG_DIO_MAPPING_1, 2, 6)},
 8003d96:	2306      	movs	r3, #6
 8003d98:	2202      	movs	r2, #2
 8003d9a:	2140      	movs	r1, #64	; 0x40
 8003d9c:	48c9      	ldr	r0, [pc, #804]	; (80040c4 <_GLOBAL__sub_I_REG_FIFO+0x7e8>)
 8003d9e:	f7fd f9d5 	bl	800114c <_ZN8RegisterC1Ethh>
reg_dio1_mapping[1] = {Register(REG_DIO_MAPPING_1, 2, 4)},
 8003da2:	2304      	movs	r3, #4
 8003da4:	2202      	movs	r2, #2
 8003da6:	2140      	movs	r1, #64	; 0x40
 8003da8:	48c7      	ldr	r0, [pc, #796]	; (80040c8 <_GLOBAL__sub_I_REG_FIFO+0x7ec>)
 8003daa:	f7fd f9cf 	bl	800114c <_ZN8RegisterC1Ethh>
reg_dio2_mapping[1] = {Register(REG_DIO_MAPPING_1, 2, 2)},
 8003dae:	2302      	movs	r3, #2
 8003db0:	2140      	movs	r1, #64	; 0x40
 8003db2:	461a      	mov	r2, r3
 8003db4:	48c5      	ldr	r0, [pc, #788]	; (80040cc <_GLOBAL__sub_I_REG_FIFO+0x7f0>)
 8003db6:	f7fd f9c9 	bl	800114c <_ZN8RegisterC1Ethh>
reg_dio3_mapping[1] = {Register(REG_DIO_MAPPING_1, 2, 0)},
 8003dba:	2300      	movs	r3, #0
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	2140      	movs	r1, #64	; 0x40
 8003dc0:	48c3      	ldr	r0, [pc, #780]	; (80040d0 <_GLOBAL__sub_I_REG_FIFO+0x7f4>)
 8003dc2:	f7fd f9c3 	bl	800114c <_ZN8RegisterC1Ethh>
reg_dio4_mapping[1] = {Register(REG_DIO_MAPPING_2, 2, 6)},
 8003dc6:	2306      	movs	r3, #6
 8003dc8:	2202      	movs	r2, #2
 8003dca:	2141      	movs	r1, #65	; 0x41
 8003dcc:	48c1      	ldr	r0, [pc, #772]	; (80040d4 <_GLOBAL__sub_I_REG_FIFO+0x7f8>)
 8003dce:	f7fd f9bd 	bl	800114c <_ZN8RegisterC1Ethh>
reg_dio5_mapping[1] = {Register(REG_DIO_MAPPING_2, 2, 4)},
 8003dd2:	2304      	movs	r3, #4
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	2141      	movs	r1, #65	; 0x41
 8003dd8:	48bf      	ldr	r0, [pc, #764]	; (80040d8 <_GLOBAL__sub_I_REG_FIFO+0x7fc>)
 8003dda:	f7fd f9b7 	bl	800114c <_ZN8RegisterC1Ethh>
reg_map_preamble_detect[1] = {Register(REG_DIO_MAPPING_2, 1, 0)},
 8003dde:	2300      	movs	r3, #0
 8003de0:	2201      	movs	r2, #1
 8003de2:	2141      	movs	r1, #65	; 0x41
 8003de4:	48bd      	ldr	r0, [pc, #756]	; (80040dc <_GLOBAL__sub_I_REG_FIFO+0x800>)
 8003de6:	f7fd f9b1 	bl	800114c <_ZN8RegisterC1Ethh>
reg_version[1] = {Register(REG_VERSION, 8, 0)},
 8003dea:	2300      	movs	r3, #0
 8003dec:	2208      	movs	r2, #8
 8003dee:	2142      	movs	r1, #66	; 0x42
 8003df0:	48bb      	ldr	r0, [pc, #748]	; (80040e0 <_GLOBAL__sub_I_REG_FIFO+0x804>)
 8003df2:	f7fd f9ab 	bl	800114c <_ZN8RegisterC1Ethh>
reg_fast_hop_on[1] = {Register(REG_PLL_HOP, 1, 7)},
 8003df6:	2307      	movs	r3, #7
 8003df8:	2201      	movs	r2, #1
 8003dfa:	2144      	movs	r1, #68	; 0x44
 8003dfc:	48b9      	ldr	r0, [pc, #740]	; (80040e4 <_GLOBAL__sub_I_REG_FIFO+0x808>)
 8003dfe:	f7fd f9a5 	bl	800114c <_ZN8RegisterC1Ethh>
reg_tcxo_input_on[1] = {Register(REG_TCXO, 1, 4)},
 8003e02:	2304      	movs	r3, #4
 8003e04:	2201      	movs	r2, #1
 8003e06:	214b      	movs	r1, #75	; 0x4b
 8003e08:	48b7      	ldr	r0, [pc, #732]	; (80040e8 <_GLOBAL__sub_I_REG_FIFO+0x80c>)
 8003e0a:	f7fd f99f 	bl	800114c <_ZN8RegisterC1Ethh>
reg_pa_dac[1] = {Register(REG_PA_DAC, 3, 0)},
 8003e0e:	2300      	movs	r3, #0
 8003e10:	2203      	movs	r2, #3
 8003e12:	214d      	movs	r1, #77	; 0x4d
 8003e14:	48b5      	ldr	r0, [pc, #724]	; (80040ec <_GLOBAL__sub_I_REG_FIFO+0x810>)
 8003e16:	f7fd f999 	bl	800114c <_ZN8RegisterC1Ethh>
reg_former_temp[1] = {Register(REG_FORMER_TEMP, 8, 0)},
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	2208      	movs	r2, #8
 8003e1e:	215b      	movs	r1, #91	; 0x5b
 8003e20:	48b3      	ldr	r0, [pc, #716]	; (80040f0 <_GLOBAL__sub_I_REG_FIFO+0x814>)
 8003e22:	f7fd f993 	bl	800114c <_ZN8RegisterC1Ethh>
reg_bit_rate_frac[1] = {Register(REG_BITRATE_FRAC, 4, 0)},
 8003e26:	2300      	movs	r3, #0
 8003e28:	2204      	movs	r2, #4
 8003e2a:	215d      	movs	r1, #93	; 0x5d
 8003e2c:	48b1      	ldr	r0, [pc, #708]	; (80040f4 <_GLOBAL__sub_I_REG_FIFO+0x818>)
 8003e2e:	f7fd f98d 	bl	800114c <_ZN8RegisterC1Ethh>
reg_agc_reference_level[1] = {Register(REG_AGC_REF, 6, 0)},
 8003e32:	2300      	movs	r3, #0
 8003e34:	2206      	movs	r2, #6
 8003e36:	2161      	movs	r1, #97	; 0x61
 8003e38:	48af      	ldr	r0, [pc, #700]	; (80040f8 <_GLOBAL__sub_I_REG_FIFO+0x81c>)
 8003e3a:	f7fd f987 	bl	800114c <_ZN8RegisterC1Ethh>
reg_agc_step1[1] = {Register(REG_AGC_THRESH_1, 5, 0)},
 8003e3e:	2300      	movs	r3, #0
 8003e40:	2205      	movs	r2, #5
 8003e42:	2162      	movs	r1, #98	; 0x62
 8003e44:	48ad      	ldr	r0, [pc, #692]	; (80040fc <_GLOBAL__sub_I_REG_FIFO+0x820>)
 8003e46:	f7fd f981 	bl	800114c <_ZN8RegisterC1Ethh>
reg_agc_step2[1] = {Register(REG_AGC_THRESH_2, 4, 4)},
 8003e4a:	2304      	movs	r3, #4
 8003e4c:	2163      	movs	r1, #99	; 0x63
 8003e4e:	461a      	mov	r2, r3
 8003e50:	48ab      	ldr	r0, [pc, #684]	; (8004100 <_GLOBAL__sub_I_REG_FIFO+0x824>)
 8003e52:	f7fd f97b 	bl	800114c <_ZN8RegisterC1Ethh>
reg_agc_step3[1] = {Register(REG_AGC_THRESH_2, 4, 0)},
 8003e56:	2300      	movs	r3, #0
 8003e58:	2204      	movs	r2, #4
 8003e5a:	2163      	movs	r1, #99	; 0x63
 8003e5c:	48a9      	ldr	r0, [pc, #676]	; (8004104 <_GLOBAL__sub_I_REG_FIFO+0x828>)
 8003e5e:	f7fd f975 	bl	800114c <_ZN8RegisterC1Ethh>
reg_agc_step4[1] = {Register(REG_AGC_THRESH_3, 4, 4)},
 8003e62:	2304      	movs	r3, #4
Fifo(reg_fifo, 1, false, 'w', 0x00, 0xFF),
 8003e64:	2400      	movs	r4, #0
LongRangeMode(reg_long_range_mode, 1, false, 'w', 0x00, 0x01),
 8003e66:	2501      	movs	r5, #1
Fifo(reg_fifo, 1, false, 'w', 0x00, 0xFF),
 8003e68:	2677      	movs	r6, #119	; 0x77
 8003e6a:	f04f 0aff 	mov.w	sl, #255	; 0xff
reg_agc_step4[1] = {Register(REG_AGC_THRESH_3, 4, 4)},
 8003e6e:	461a      	mov	r2, r3
 8003e70:	2164      	movs	r1, #100	; 0x64
 8003e72:	48a5      	ldr	r0, [pc, #660]	; (8004108 <_GLOBAL__sub_I_REG_FIFO+0x82c>)
 8003e74:	f7fd f96a 	bl	800114c <_ZN8RegisterC1Ethh>
reg_agc_step5[1] = {Register(REG_AGC_THRESH_3, 4, 0)},
 8003e78:	4623      	mov	r3, r4
 8003e7a:	2204      	movs	r2, #4
 8003e7c:	2164      	movs	r1, #100	; 0x64
 8003e7e:	48a3      	ldr	r0, [pc, #652]	; (800410c <_GLOBAL__sub_I_REG_FIFO+0x830>)
 8003e80:	f7fd f964 	bl	800114c <_ZN8RegisterC1Ethh>
reg_pll_bandwidth[1] = {Register(REG_PLL_HF, 2, 6)};
 8003e84:	2306      	movs	r3, #6
 8003e86:	2202      	movs	r2, #2
 8003e88:	2170      	movs	r1, #112	; 0x70
 8003e8a:	48a1      	ldr	r0, [pc, #644]	; (8004110 <_GLOBAL__sub_I_REG_FIFO+0x834>)
 8003e8c:	f7fd f95e 	bl	800114c <_ZN8RegisterC1Ethh>
Fifo(reg_fifo, 1, false, 'w', 0x00, 0xFF),
 8003e90:	4659      	mov	r1, fp
 8003e92:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003e96:	9401      	str	r4, [sp, #4]
 8003e98:	4623      	mov	r3, r4
 8003e9a:	f8cd a008 	str.w	sl, [sp, #8]
 8003e9e:	9600      	str	r6, [sp, #0]
 8003ea0:	462a      	mov	r2, r5
 8003ea2:	489c      	ldr	r0, [pc, #624]	; (8004114 <_GLOBAL__sub_I_REG_FIFO+0x838>)
 8003ea4:	f7fd f9a6 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
LongRangeMode(reg_long_range_mode, 1, false, 'w', 0x00, 0x01),
 8003ea8:	e9cd 6400 	strd	r6, r4, [sp]
 8003eac:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003eb0:	4649      	mov	r1, r9
 8003eb2:	4623      	mov	r3, r4
 8003eb4:	9502      	str	r5, [sp, #8]
 8003eb6:	462a      	mov	r2, r5
 8003eb8:	4897      	ldr	r0, [pc, #604]	; (8004118 <_GLOBAL__sub_I_REG_FIFO+0x83c>)
 8003eba:	f7fd f99b 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
AccessSharedReg(reg_access_shared_reg, 1, false, 'w', 0x00, 0x01),
 8003ebe:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003ec2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003ec6:	9600      	str	r6, [sp, #0]
 8003ec8:	4623      	mov	r3, r4
 8003eca:	462a      	mov	r2, r5
 8003ecc:	4993      	ldr	r1, [pc, #588]	; (800411c <_GLOBAL__sub_I_REG_FIFO+0x840>)
 8003ece:	4894      	ldr	r0, [pc, #592]	; (8004120 <_GLOBAL__sub_I_REG_FIFO+0x844>)
 8003ed0:	f7fd f990 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
LowFrequencyModeOn(reg_low_frequency_mode_on, 1, false, 'w', 0x00, 0x01),
 8003ed4:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003ed8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003edc:	9600      	str	r6, [sp, #0]
 8003ede:	4623      	mov	r3, r4
 8003ee0:	462a      	mov	r2, r5
 8003ee2:	4990      	ldr	r1, [pc, #576]	; (8004124 <_GLOBAL__sub_I_REG_FIFO+0x848>)
 8003ee4:	4890      	ldr	r0, [pc, #576]	; (8004128 <_GLOBAL__sub_I_REG_FIFO+0x84c>)
 8003ee6:	f7fd f985 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Mode(reg_mode, 1, false, 'w', 0x00, 0x07),
 8003eea:	2007      	movs	r0, #7
 8003eec:	e9cd 6400 	strd	r6, r4, [sp]
 8003ef0:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003ef4:	4623      	mov	r3, r4
 8003ef6:	462a      	mov	r2, r5
 8003ef8:	9002      	str	r0, [sp, #8]
 8003efa:	498c      	ldr	r1, [pc, #560]	; (800412c <_GLOBAL__sub_I_REG_FIFO+0x850>)
 8003efc:	488c      	ldr	r0, [pc, #560]	; (8004130 <_GLOBAL__sub_I_REG_FIFO+0x854>)
 8003efe:	f7fd f979 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Frf(reg_frf, 3, false, 'w', 0x000000, 0xFFFFFF),
 8003f02:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8003f06:	e9cd 6400 	strd	r6, r4, [sp]
 8003f0a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003f0e:	4639      	mov	r1, r7
 8003f10:	4623      	mov	r3, r4
 8003f12:	9202      	str	r2, [sp, #8]
 8003f14:	4887      	ldr	r0, [pc, #540]	; (8004134 <_GLOBAL__sub_I_REG_FIFO+0x858>)
 8003f16:	2203      	movs	r2, #3
 8003f18:	f7fd f96c 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PaSelect(reg_pa_select, 1, false, 'w', 0x00, 0x01),
 8003f1c:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003f20:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003f24:	9600      	str	r6, [sp, #0]
 8003f26:	4623      	mov	r3, r4
 8003f28:	462a      	mov	r2, r5
 8003f2a:	4983      	ldr	r1, [pc, #524]	; (8004138 <_GLOBAL__sub_I_REG_FIFO+0x85c>)
 8003f2c:	4883      	ldr	r0, [pc, #524]	; (800413c <_GLOBAL__sub_I_REG_FIFO+0x860>)
 8003f2e:	f7fd f961 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
MaxPower(reg_max_power, 1, false, 'w', 0x00, 0x07),
 8003f32:	2307      	movs	r3, #7
OutputPower(reg_output_power, 1, false, 'w', 0x00, 0x0F),
 8003f34:	f04f 090f 	mov.w	r9, #15
MaxPower(reg_max_power, 1, false, 'w', 0x00, 0x07),
 8003f38:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8003f3c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003f40:	9600      	str	r6, [sp, #0]
 8003f42:	4623      	mov	r3, r4
 8003f44:	462a      	mov	r2, r5
 8003f46:	497e      	ldr	r1, [pc, #504]	; (8004140 <_GLOBAL__sub_I_REG_FIFO+0x864>)
 8003f48:	487e      	ldr	r0, [pc, #504]	; (8004144 <_GLOBAL__sub_I_REG_FIFO+0x868>)
 8003f4a:	f7fd f953 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
OutputPower(reg_output_power, 1, false, 'w', 0x00, 0x0F),
 8003f4e:	e9cd 6400 	strd	r6, r4, [sp]
 8003f52:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003f56:	4623      	mov	r3, r4
 8003f58:	462a      	mov	r2, r5
 8003f5a:	f8cd 9008 	str.w	r9, [sp, #8]
 8003f5e:	497a      	ldr	r1, [pc, #488]	; (8004148 <_GLOBAL__sub_I_REG_FIFO+0x86c>)
 8003f60:	487a      	ldr	r0, [pc, #488]	; (800414c <_GLOBAL__sub_I_REG_FIFO+0x870>)
 8003f62:	f7fd f947 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PaRamp(reg_pa_ramp, 1, false, 'w', 0x00, 0x0F),
 8003f66:	e9cd 4901 	strd	r4, r9, [sp, #4]
 8003f6a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003f6e:	9600      	str	r6, [sp, #0]
 8003f70:	4623      	mov	r3, r4
 8003f72:	462a      	mov	r2, r5
 8003f74:	4976      	ldr	r1, [pc, #472]	; (8004150 <_GLOBAL__sub_I_REG_FIFO+0x874>)
 8003f76:	4877      	ldr	r0, [pc, #476]	; (8004154 <_GLOBAL__sub_I_REG_FIFO+0x878>)
 8003f78:	f7fd f93c 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
OcpOn(reg_ocp_on, 1, false, 'w', 0x00, 0x01),
 8003f7c:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003f80:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003f84:	9600      	str	r6, [sp, #0]
 8003f86:	4623      	mov	r3, r4
 8003f88:	462a      	mov	r2, r5
 8003f8a:	4973      	ldr	r1, [pc, #460]	; (8004158 <_GLOBAL__sub_I_REG_FIFO+0x87c>)
 8003f8c:	4873      	ldr	r0, [pc, #460]	; (800415c <_GLOBAL__sub_I_REG_FIFO+0x880>)
 8003f8e:	f7fd f931 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
OcpTrim(reg_ocp_trim, 1, false, 'w', 0x00, 0x1F),
 8003f92:	201f      	movs	r0, #31
 8003f94:	e9cd 6400 	strd	r6, r4, [sp]
 8003f98:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003f9c:	4623      	mov	r3, r4
 8003f9e:	462a      	mov	r2, r5
 8003fa0:	9002      	str	r0, [sp, #8]
 8003fa2:	496f      	ldr	r1, [pc, #444]	; (8004160 <_GLOBAL__sub_I_REG_FIFO+0x884>)
 8003fa4:	486f      	ldr	r0, [pc, #444]	; (8004164 <_GLOBAL__sub_I_REG_FIFO+0x888>)
 8003fa6:	f7fd f925 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
LnaGain(reg_lna_gain, 1, false, 'w', 0x01, 0x06),
 8003faa:	2006      	movs	r0, #6
 8003fac:	e9cd 6500 	strd	r6, r5, [sp]
 8003fb0:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003fb4:	4623      	mov	r3, r4
 8003fb6:	462a      	mov	r2, r5
 8003fb8:	9002      	str	r0, [sp, #8]
 8003fba:	496b      	ldr	r1, [pc, #428]	; (8004168 <_GLOBAL__sub_I_REG_FIFO+0x88c>)
 8003fbc:	486b      	ldr	r0, [pc, #428]	; (800416c <_GLOBAL__sub_I_REG_FIFO+0x890>)
 8003fbe:	f7fd f919 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
LnaBoostLf(reg_lna_boost_lf, 1, false, 'w', 0x00, 0x00),
 8003fc2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003fc6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003fca:	9600      	str	r6, [sp, #0]
 8003fcc:	4641      	mov	r1, r8
 8003fce:	4623      	mov	r3, r4
 8003fd0:	462a      	mov	r2, r5
 8003fd2:	4867      	ldr	r0, [pc, #412]	; (8004170 <_GLOBAL__sub_I_REG_FIFO+0x894>)
 8003fd4:	f7fd f90e 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
LnaBoostHf(reg_lna_boost_hf, 1, false, 'w', 0x00, 0x03, reserv_lna_boost_hf, 2),
 8003fd8:	f04f 0e02 	mov.w	lr, #2
 8003fdc:	f04f 0c03 	mov.w	ip, #3
FifoRxCurrentAddr(reg_fifo_rx_current_addr, 1, false, 'r', 0x00, 0xFF),
 8003fe0:	f04f 0b72 	mov.w	fp, #114	; 0x72
RxTimeout(reg_rx_timeout, 1, false, 'c', 0x00, 0x01),
 8003fe4:	f04f 0863 	mov.w	r8, #99	; 0x63
ValidHeaderCnt(reg_valid_header_cnt, 2, false, 'r', 0x0000, 0xFFFF),
 8003fe8:	f64f 77ff 	movw	r7, #65535	; 0xffff
LnaBoostHf(reg_lna_boost_hf, 1, false, 'w', 0x00, 0x03, reserv_lna_boost_hf, 2),
 8003fec:	4861      	ldr	r0, [pc, #388]	; (8004174 <_GLOBAL__sub_I_REG_FIFO+0x898>)
 8003fee:	f8cd e010 	str.w	lr, [sp, #16]
 8003ff2:	e9cd c002 	strd	ip, r0, [sp, #8]
 8003ff6:	e9cd 6400 	strd	r6, r4, [sp]
 8003ffa:	4623      	mov	r3, r4
 8003ffc:	462a      	mov	r2, r5
 8003ffe:	495e      	ldr	r1, [pc, #376]	; (8004178 <_GLOBAL__sub_I_REG_FIFO+0x89c>)
 8004000:	485e      	ldr	r0, [pc, #376]	; (800417c <_GLOBAL__sub_I_REG_FIFO+0x8a0>)
 8004002:	f7fd f8f7 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FifoAddrPtr(reg_fifo_addr_ptr, 1, false, 'w', 0x00, 0xFF),
 8004006:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800400a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800400e:	9600      	str	r6, [sp, #0]
 8004010:	4623      	mov	r3, r4
 8004012:	462a      	mov	r2, r5
 8004014:	495a      	ldr	r1, [pc, #360]	; (8004180 <_GLOBAL__sub_I_REG_FIFO+0x8a4>)
 8004016:	485b      	ldr	r0, [pc, #364]	; (8004184 <_GLOBAL__sub_I_REG_FIFO+0x8a8>)
 8004018:	f7fd f8ec 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FifoTxBaseAddr(reg_fifo_tx_base_addr, 1, false, 'w', 0x00, 0xFF),
 800401c:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8004020:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004024:	9600      	str	r6, [sp, #0]
 8004026:	4623      	mov	r3, r4
 8004028:	462a      	mov	r2, r5
 800402a:	4957      	ldr	r1, [pc, #348]	; (8004188 <_GLOBAL__sub_I_REG_FIFO+0x8ac>)
 800402c:	4857      	ldr	r0, [pc, #348]	; (800418c <_GLOBAL__sub_I_REG_FIFO+0x8b0>)
 800402e:	f7fd f8e1 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FifoRxBaseAddr(reg_fifo_rx_base_addr, 1, false, 'w', 0x00, 0xFF),
 8004032:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8004036:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800403a:	9600      	str	r6, [sp, #0]
 800403c:	4623      	mov	r3, r4
 800403e:	462a      	mov	r2, r5
 8004040:	4953      	ldr	r1, [pc, #332]	; (8004190 <_GLOBAL__sub_I_REG_FIFO+0x8b4>)
 8004042:	4854      	ldr	r0, [pc, #336]	; (8004194 <_GLOBAL__sub_I_REG_FIFO+0x8b8>)
 8004044:	f7fd f8d6 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FifoRxCurrentAddr(reg_fifo_rx_current_addr, 1, false, 'r', 0x00, 0xFF),
 8004048:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800404c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004050:	4623      	mov	r3, r4
 8004052:	462a      	mov	r2, r5
 8004054:	f8cd b000 	str.w	fp, [sp]
 8004058:	494f      	ldr	r1, [pc, #316]	; (8004198 <_GLOBAL__sub_I_REG_FIFO+0x8bc>)
 800405a:	4850      	ldr	r0, [pc, #320]	; (800419c <_GLOBAL__sub_I_REG_FIFO+0x8c0>)
 800405c:	f7fd f8ca 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
RxTimeoutMask(reg_rx_timeout_mask, 1, false, 'w', 0x00, 0x01),
 8004060:	9502      	str	r5, [sp, #8]
 8004062:	9404      	str	r4, [sp, #16]
 8004064:	9600      	str	r6, [sp, #0]
 8004066:	9403      	str	r4, [sp, #12]
 8004068:	9401      	str	r4, [sp, #4]
 800406a:	4623      	mov	r3, r4
 800406c:	462a      	mov	r2, r5
 800406e:	494c      	ldr	r1, [pc, #304]	; (80041a0 <_GLOBAL__sub_I_REG_FIFO+0x8c4>)
 8004070:	484c      	ldr	r0, [pc, #304]	; (80041a4 <_GLOBAL__sub_I_REG_FIFO+0x8c8>)
 8004072:	f7fd f8bf 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
RxDoneMask(reg_rx_done_mask, 1, false, 'w', 0x00, 0x01),
 8004076:	9502      	str	r5, [sp, #8]
 8004078:	9600      	str	r6, [sp, #0]
 800407a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800407e:	9401      	str	r4, [sp, #4]
 8004080:	4623      	mov	r3, r4
 8004082:	462a      	mov	r2, r5
 8004084:	4948      	ldr	r1, [pc, #288]	; (80041a8 <_GLOBAL__sub_I_REG_FIFO+0x8cc>)
 8004086:	4849      	ldr	r0, [pc, #292]	; (80041ac <_GLOBAL__sub_I_REG_FIFO+0x8d0>)
 8004088:	f7fd f8b4 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PayloadCrcErrorMask(reg_payload_crc_error_mask, 1, false, 'w', 0x00, 0x01),
 800408c:	9502      	str	r5, [sp, #8]
 800408e:	9600      	str	r6, [sp, #0]
 8004090:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004094:	9401      	str	r4, [sp, #4]
 8004096:	4623      	mov	r3, r4
 8004098:	462a      	mov	r2, r5
 800409a:	4945      	ldr	r1, [pc, #276]	; (80041b0 <_GLOBAL__sub_I_REG_FIFO+0x8d4>)
 800409c:	4845      	ldr	r0, [pc, #276]	; (80041b4 <_GLOBAL__sub_I_REG_FIFO+0x8d8>)
 800409e:	f7fd f8a9 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
ValidHeaderMask(reg_valid_header_mask, 1, false, 'w', 0x00, 0x01),
 80040a2:	9502      	str	r5, [sp, #8]
 80040a4:	9600      	str	r6, [sp, #0]
 80040a6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80040aa:	9401      	str	r4, [sp, #4]
 80040ac:	4623      	mov	r3, r4
 80040ae:	462a      	mov	r2, r5
 80040b0:	4941      	ldr	r1, [pc, #260]	; (80041b8 <_GLOBAL__sub_I_REG_FIFO+0x8dc>)
 80040b2:	4842      	ldr	r0, [pc, #264]	; (80041bc <_GLOBAL__sub_I_REG_FIFO+0x8e0>)
 80040b4:	f7fd f89e 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
TxDoneMask(reg_tx_done_mask, 1, false, 'w', 0x00, 0x01),
 80040b8:	9502      	str	r5, [sp, #8]
 80040ba:	e081      	b.n	80041c0 <_GLOBAL__sub_I_REG_FIFO+0x8e4>
 80040bc:	200016b4 	.word	0x200016b4
 80040c0:	200018c4 	.word	0x200018c4
 80040c4:	200016bc 	.word	0x200016bc
 80040c8:	200016c4 	.word	0x200016c4
 80040cc:	200016cc 	.word	0x200016cc
 80040d0:	200016d4 	.word	0x200016d4
 80040d4:	200016dc 	.word	0x200016dc
 80040d8:	200016e4 	.word	0x200016e4
 80040dc:	200017c4 	.word	0x200017c4
 80040e0:	2000191c 	.word	0x2000191c
 80040e4:	200016ec 	.word	0x200016ec
 80040e8:	200018cc 	.word	0x200018cc
 80040ec:	200017fc 	.word	0x200017fc
 80040f0:	20001744 	.word	0x20001744
 80040f4:	2000166c 	.word	0x2000166c
 80040f8:	2000163c 	.word	0x2000163c
 80040fc:	20001644 	.word	0x20001644
 8004100:	2000164c 	.word	0x2000164c
 8004104:	20001654 	.word	0x20001654
 8004108:	2000165c 	.word	0x2000165c
 800410c:	20001664 	.word	0x20001664
 8004110:	20001844 	.word	0x20001844
 8004114:	20000fb8 	.word	0x20000fb8
 8004118:	20001178 	.word	0x20001178
 800411c:	2000162c 	.word	0x2000162c
 8004120:	20000ca8 	.word	0x20000ca8
 8004124:	200017bc 	.word	0x200017bc
 8004128:	200011b0 	.word	0x200011b0
 800412c:	200017d4 	.word	0x200017d4
 8004130:	20001204 	.word	0x20001204
 8004134:	200010d0 	.word	0x200010d0
 8004138:	2000180c 	.word	0x2000180c
 800413c:	200012c8 	.word	0x200012c8
 8004140:	200017cc 	.word	0x200017cc
 8004144:	200011e8 	.word	0x200011e8
 8004148:	200017f4 	.word	0x200017f4
 800414c:	20001274 	.word	0x20001274
 8004150:	20001804 	.word	0x20001804
 8004154:	200012ac 	.word	0x200012ac
 8004158:	200017e4 	.word	0x200017e4
 800415c:	2000123c 	.word	0x2000123c
 8004160:	200017ec 	.word	0x200017ec
 8004164:	20001258 	.word	0x20001258
 8004168:	200017a4 	.word	0x200017a4
 800416c:	2000115c 	.word	0x2000115c
 8004170:	20001140 	.word	0x20001140
 8004174:	20000008 	.word	0x20000008
 8004178:	20001794 	.word	0x20001794
 800417c:	20001124 	.word	0x20001124
 8004180:	20001714 	.word	0x20001714
 8004184:	20000fd4 	.word	0x20000fd4
 8004188:	2000173c 	.word	0x2000173c
 800418c:	20001060 	.word	0x20001060
 8004190:	2000171c 	.word	0x2000171c
 8004194:	20000ff0 	.word	0x20000ff0
 8004198:	20001734 	.word	0x20001734
 800419c:	20001044 	.word	0x20001044
 80041a0:	200018a4 	.word	0x200018a4
 80041a4:	200014c0 	.word	0x200014c0
 80041a8:	2000188c 	.word	0x2000188c
 80041ac:	2000146c 	.word	0x2000146c
 80041b0:	2000182c 	.word	0x2000182c
 80041b4:	20001338 	.word	0x20001338
 80041b8:	20001904 	.word	0x20001904
 80041bc:	200015d8 	.word	0x200015d8
 80041c0:	9600      	str	r6, [sp, #0]
 80041c2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80041c6:	9401      	str	r4, [sp, #4]
 80041c8:	4623      	mov	r3, r4
 80041ca:	462a      	mov	r2, r5
 80041cc:	49c2      	ldr	r1, [pc, #776]	; (80044d8 <_GLOBAL__sub_I_REG_FIFO+0xbfc>)
 80041ce:	48c3      	ldr	r0, [pc, #780]	; (80044dc <_GLOBAL__sub_I_REG_FIFO+0xc00>)
 80041d0:	f7fd f810 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
CadDoneMask(reg_cad_done_mask, 1, false, 'w', 0x00, 0x01),
 80041d4:	9502      	str	r5, [sp, #8]
 80041d6:	9600      	str	r6, [sp, #0]
 80041d8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80041dc:	9401      	str	r4, [sp, #4]
 80041de:	4623      	mov	r3, r4
 80041e0:	462a      	mov	r2, r5
 80041e2:	49bf      	ldr	r1, [pc, #764]	; (80044e0 <_GLOBAL__sub_I_REG_FIFO+0xc04>)
 80041e4:	48bf      	ldr	r0, [pc, #764]	; (80044e4 <_GLOBAL__sub_I_REG_FIFO+0xc08>)
 80041e6:	f7fd f805 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FhssChangeChannelMask(reg_fhss_change_channel_mask, 1, false, 'w', 0x00, 0x01),
 80041ea:	9502      	str	r5, [sp, #8]
 80041ec:	9600      	str	r6, [sp, #0]
 80041ee:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80041f2:	9401      	str	r4, [sp, #4]
 80041f4:	4623      	mov	r3, r4
 80041f6:	462a      	mov	r2, r5
 80041f8:	49bb      	ldr	r1, [pc, #748]	; (80044e8 <_GLOBAL__sub_I_REG_FIFO+0xc0c>)
 80041fa:	48bc      	ldr	r0, [pc, #752]	; (80044ec <_GLOBAL__sub_I_REG_FIFO+0xc10>)
 80041fc:	f7fc fffa 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
CadDetectedMask(reg_cad_detected_mask, 1, false, 'w', 0x00, 0x01),
 8004200:	9502      	str	r5, [sp, #8]
 8004202:	9600      	str	r6, [sp, #0]
 8004204:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004208:	9401      	str	r4, [sp, #4]
 800420a:	4623      	mov	r3, r4
 800420c:	462a      	mov	r2, r5
 800420e:	49b8      	ldr	r1, [pc, #736]	; (80044f0 <_GLOBAL__sub_I_REG_FIFO+0xc14>)
 8004210:	48b8      	ldr	r0, [pc, #736]	; (80044f4 <_GLOBAL__sub_I_REG_FIFO+0xc18>)
 8004212:	f7fc ffef 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
RxTimeout(reg_rx_timeout, 1, false, 'c', 0x00, 0x01),
 8004216:	9502      	str	r5, [sp, #8]
 8004218:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800421c:	9401      	str	r4, [sp, #4]
 800421e:	4623      	mov	r3, r4
 8004220:	462a      	mov	r2, r5
 8004222:	f8cd 8000 	str.w	r8, [sp]
 8004226:	49b4      	ldr	r1, [pc, #720]	; (80044f8 <_GLOBAL__sub_I_REG_FIFO+0xc1c>)
 8004228:	48b4      	ldr	r0, [pc, #720]	; (80044fc <_GLOBAL__sub_I_REG_FIFO+0xc20>)
 800422a:	f7fc ffe3 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
RxDone(reg_rx_done, 1, false, 'c', 0x00, 0x01),
 800422e:	f8cd 8000 	str.w	r8, [sp]
 8004232:	9502      	str	r5, [sp, #8]
 8004234:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004238:	9401      	str	r4, [sp, #4]
 800423a:	4623      	mov	r3, r4
 800423c:	462a      	mov	r2, r5
 800423e:	49b0      	ldr	r1, [pc, #704]	; (8004500 <_GLOBAL__sub_I_REG_FIFO+0xc24>)
 8004240:	48b0      	ldr	r0, [pc, #704]	; (8004504 <_GLOBAL__sub_I_REG_FIFO+0xc28>)
 8004242:	f7fc ffd7 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PayloadCrcError(reg_payload_crc_error, 1, false, 'c', 0x00, 0x01),
 8004246:	f8cd 8000 	str.w	r8, [sp]
 800424a:	9502      	str	r5, [sp, #8]
 800424c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004250:	9401      	str	r4, [sp, #4]
 8004252:	4623      	mov	r3, r4
 8004254:	462a      	mov	r2, r5
 8004256:	49ac      	ldr	r1, [pc, #688]	; (8004508 <_GLOBAL__sub_I_REG_FIFO+0xc2c>)
 8004258:	48ac      	ldr	r0, [pc, #688]	; (800450c <_GLOBAL__sub_I_REG_FIFO+0xc30>)
 800425a:	f7fc ffcb 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
ValidHeader(reg_valid_header, 1, false, 'c', 0x00, 0x01),
 800425e:	f8cd 8000 	str.w	r8, [sp]
 8004262:	9502      	str	r5, [sp, #8]
 8004264:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004268:	9401      	str	r4, [sp, #4]
 800426a:	4623      	mov	r3, r4
 800426c:	462a      	mov	r2, r5
 800426e:	49a8      	ldr	r1, [pc, #672]	; (8004510 <_GLOBAL__sub_I_REG_FIFO+0xc34>)
 8004270:	48a8      	ldr	r0, [pc, #672]	; (8004514 <_GLOBAL__sub_I_REG_FIFO+0xc38>)
 8004272:	f7fc ffbf 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
TxDone(reg_tx_done, 1, false, 'c', 0x00, 0x01),
 8004276:	f8cd 8000 	str.w	r8, [sp]
 800427a:	9502      	str	r5, [sp, #8]
 800427c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004280:	9401      	str	r4, [sp, #4]
 8004282:	4623      	mov	r3, r4
 8004284:	462a      	mov	r2, r5
 8004286:	49a4      	ldr	r1, [pc, #656]	; (8004518 <_GLOBAL__sub_I_REG_FIFO+0xc3c>)
 8004288:	48a4      	ldr	r0, [pc, #656]	; (800451c <_GLOBAL__sub_I_REG_FIFO+0xc40>)
 800428a:	f7fc ffb3 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
CadDone(reg_cad_done, 1, false, 'c', 0x00, 0x01),
 800428e:	f8cd 8000 	str.w	r8, [sp]
 8004292:	9502      	str	r5, [sp, #8]
 8004294:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004298:	9401      	str	r4, [sp, #4]
 800429a:	4623      	mov	r3, r4
 800429c:	462a      	mov	r2, r5
 800429e:	49a0      	ldr	r1, [pc, #640]	; (8004520 <_GLOBAL__sub_I_REG_FIFO+0xc44>)
 80042a0:	48a0      	ldr	r0, [pc, #640]	; (8004524 <_GLOBAL__sub_I_REG_FIFO+0xc48>)
 80042a2:	f7fc ffa7 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FhssChangeChannel(reg_fhss_change_channel, 1, false, 'c', 0x00, 0x01),
 80042a6:	f8cd 8000 	str.w	r8, [sp]
 80042aa:	9502      	str	r5, [sp, #8]
 80042ac:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80042b0:	9401      	str	r4, [sp, #4]
 80042b2:	4623      	mov	r3, r4
 80042b4:	462a      	mov	r2, r5
 80042b6:	499c      	ldr	r1, [pc, #624]	; (8004528 <_GLOBAL__sub_I_REG_FIFO+0xc4c>)
 80042b8:	489c      	ldr	r0, [pc, #624]	; (800452c <_GLOBAL__sub_I_REG_FIFO+0xc50>)
 80042ba:	f7fc ff9b 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
CadDetected(reg_cad_detected, 1, false, 'c', 0x00, 0x01),
 80042be:	f8cd 8000 	str.w	r8, [sp]
 80042c2:	9502      	str	r5, [sp, #8]
 80042c4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80042c8:	9401      	str	r4, [sp, #4]
 80042ca:	4623      	mov	r3, r4
 80042cc:	462a      	mov	r2, r5
 80042ce:	4998      	ldr	r1, [pc, #608]	; (8004530 <_GLOBAL__sub_I_REG_FIFO+0xc54>)
 80042d0:	4898      	ldr	r0, [pc, #608]	; (8004534 <_GLOBAL__sub_I_REG_FIFO+0xc58>)
 80042d2:	f7fc ff8f 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FifoRxBytesNb(reg_fifo_rx_bytes_nb, 1, false, 'r', 0x00, 0xFF),
 80042d6:	f8cd b000 	str.w	fp, [sp]
 80042da:	f8cd a008 	str.w	sl, [sp, #8]
 80042de:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80042e2:	9401      	str	r4, [sp, #4]
 80042e4:	4623      	mov	r3, r4
 80042e6:	462a      	mov	r2, r5
 80042e8:	4993      	ldr	r1, [pc, #588]	; (8004538 <_GLOBAL__sub_I_REG_FIFO+0xc5c>)
 80042ea:	4894      	ldr	r0, [pc, #592]	; (800453c <_GLOBAL__sub_I_REG_FIFO+0xc60>)
 80042ec:	f7fc ff82 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
ValidHeaderCnt(reg_valid_header_cnt, 2, false, 'r', 0x0000, 0xFFFF),
 80042f0:	f8cd b000 	str.w	fp, [sp]
 80042f4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80042f8:	9401      	str	r4, [sp, #4]
 80042fa:	4623      	mov	r3, r4
 80042fc:	9702      	str	r7, [sp, #8]
 80042fe:	4990      	ldr	r1, [pc, #576]	; (8004540 <_GLOBAL__sub_I_REG_FIFO+0xc64>)
 8004300:	2202      	movs	r2, #2
 8004302:	4890      	ldr	r0, [pc, #576]	; (8004544 <_GLOBAL__sub_I_REG_FIFO+0xc68>)
 8004304:	f7fc ff76 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
ValidPacketCnt(reg_valid_packet_cnt, 2, false, 'c', 0x0000, 0xFFFF),
 8004308:	9702      	str	r7, [sp, #8]
 800430a:	f8cd 8000 	str.w	r8, [sp]
 800430e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004312:	9401      	str	r4, [sp, #4]
 8004314:	4623      	mov	r3, r4
 8004316:	2202      	movs	r2, #2
 8004318:	498b      	ldr	r1, [pc, #556]	; (8004548 <_GLOBAL__sub_I_REG_FIFO+0xc6c>)
 800431a:	488c      	ldr	r0, [pc, #560]	; (800454c <_GLOBAL__sub_I_REG_FIFO+0xc70>)
 800431c:	f7fc ff6a 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
RxCodingRate(reg_rx_coding_rate, 1, false, 'r', 0x00, 0x07),
 8004320:	2107      	movs	r1, #7
 8004322:	f8cd b000 	str.w	fp, [sp]
 8004326:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800432a:	9401      	str	r4, [sp, #4]
 800432c:	4623      	mov	r3, r4
 800432e:	462a      	mov	r2, r5
 8004330:	9102      	str	r1, [sp, #8]
 8004332:	4887      	ldr	r0, [pc, #540]	; (8004550 <_GLOBAL__sub_I_REG_FIFO+0xc74>)
 8004334:	4987      	ldr	r1, [pc, #540]	; (8004554 <_GLOBAL__sub_I_REG_FIFO+0xc78>)
 8004336:	f7fc ff5d 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
ModemStatus(reg_modem_status, 1, false, 'r', 0x00, 0x1F),
 800433a:	211f      	movs	r1, #31
 800433c:	f8cd b000 	str.w	fp, [sp]
 8004340:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004344:	9401      	str	r4, [sp, #4]
 8004346:	4623      	mov	r3, r4
 8004348:	462a      	mov	r2, r5
 800434a:	9102      	str	r1, [sp, #8]
 800434c:	4882      	ldr	r0, [pc, #520]	; (8004558 <_GLOBAL__sub_I_REG_FIFO+0xc7c>)
 800434e:	4983      	ldr	r1, [pc, #524]	; (800455c <_GLOBAL__sub_I_REG_FIFO+0xc80>)
 8004350:	f7fc ff50 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PacketSnr(reg_packet_snr, 1, false, 'r', 0x00, 0xFF),
 8004354:	f8cd a008 	str.w	sl, [sp, #8]
 8004358:	f8cd b000 	str.w	fp, [sp]
 800435c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004360:	9401      	str	r4, [sp, #4]
 8004362:	4623      	mov	r3, r4
 8004364:	462a      	mov	r2, r5
 8004366:	497e      	ldr	r1, [pc, #504]	; (8004560 <_GLOBAL__sub_I_REG_FIFO+0xc84>)
 8004368:	487e      	ldr	r0, [pc, #504]	; (8004564 <_GLOBAL__sub_I_REG_FIFO+0xc88>)
 800436a:	f7fc ff43 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PacketRssi(reg_packet_rssi, 1, false, 'r', 0x00, 0xFF),
 800436e:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8004372:	f8cd b000 	str.w	fp, [sp]
 8004376:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800437a:	4623      	mov	r3, r4
 800437c:	462a      	mov	r2, r5
 800437e:	497a      	ldr	r1, [pc, #488]	; (8004568 <_GLOBAL__sub_I_REG_FIFO+0xc8c>)
 8004380:	487a      	ldr	r0, [pc, #488]	; (800456c <_GLOBAL__sub_I_REG_FIFO+0xc90>)
 8004382:	f7fc ff37 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Rssi(reg_rssi, 1, false, 'r', 0x00, 0xFF),
 8004386:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800438a:	f8cd b000 	str.w	fp, [sp]
 800438e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004392:	4623      	mov	r3, r4
 8004394:	462a      	mov	r2, r5
 8004396:	4976      	ldr	r1, [pc, #472]	; (8004570 <_GLOBAL__sub_I_REG_FIFO+0xc94>)
 8004398:	4876      	ldr	r0, [pc, #472]	; (8004574 <_GLOBAL__sub_I_REG_FIFO+0xc98>)
 800439a:	f7fc ff2b 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PllTimeout(reg_pll_timeout, 1, false, 'r', 0x00, 0x01),
 800439e:	9502      	str	r5, [sp, #8]
 80043a0:	f8cd b000 	str.w	fp, [sp]
 80043a4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80043a8:	9401      	str	r4, [sp, #4]
 80043aa:	4623      	mov	r3, r4
 80043ac:	462a      	mov	r2, r5
 80043ae:	4972      	ldr	r1, [pc, #456]	; (8004578 <_GLOBAL__sub_I_REG_FIFO+0xc9c>)
 80043b0:	4872      	ldr	r0, [pc, #456]	; (800457c <_GLOBAL__sub_I_REG_FIFO+0xca0>)
 80043b2:	f7fc ff1f 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
CrcOnPayload(reg_crc_on_payload, 1, false, 'r', 0x00, 0x01),
 80043b6:	9502      	str	r5, [sp, #8]
 80043b8:	f8cd b000 	str.w	fp, [sp]
 80043bc:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80043c0:	9401      	str	r4, [sp, #4]
 80043c2:	4623      	mov	r3, r4
 80043c4:	462a      	mov	r2, r5
 80043c6:	496e      	ldr	r1, [pc, #440]	; (8004580 <_GLOBAL__sub_I_REG_FIFO+0xca4>)
 80043c8:	486e      	ldr	r0, [pc, #440]	; (8004584 <_GLOBAL__sub_I_REG_FIFO+0xca8>)
 80043ca:	f7fc ff13 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FhssPresentChannel(reg_fhss_present_channel, 1, false, 'r', 0x00, 0x3F),
 80043ce:	213f      	movs	r1, #63	; 0x3f
 80043d0:	f8cd b000 	str.w	fp, [sp]
 80043d4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80043d8:	9401      	str	r4, [sp, #4]
 80043da:	4623      	mov	r3, r4
 80043dc:	462a      	mov	r2, r5
 80043de:	9102      	str	r1, [sp, #8]
 80043e0:	4869      	ldr	r0, [pc, #420]	; (8004588 <_GLOBAL__sub_I_REG_FIFO+0xcac>)
 80043e2:	496a      	ldr	r1, [pc, #424]	; (800458c <_GLOBAL__sub_I_REG_FIFO+0xcb0>)
 80043e4:	f7fc ff06 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Bw(reg_bw, 1, false, 'w', 0x00, 0x09),
 80043e8:	2109      	movs	r1, #9
 80043ea:	9600      	str	r6, [sp, #0]
 80043ec:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80043f0:	9401      	str	r4, [sp, #4]
 80043f2:	4623      	mov	r3, r4
 80043f4:	462a      	mov	r2, r5
 80043f6:	9102      	str	r1, [sp, #8]
 80043f8:	4865      	ldr	r0, [pc, #404]	; (8004590 <_GLOBAL__sub_I_REG_FIFO+0xcb4>)
 80043fa:	4966      	ldr	r1, [pc, #408]	; (8004594 <_GLOBAL__sub_I_REG_FIFO+0xcb8>)
 80043fc:	f7fc fefa 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
CodingRate(reg_coding_rate, 1, false, 'w', 0x01, 0x04),
 8004400:	2104      	movs	r1, #4
 8004402:	e9cd 6500 	strd	r6, r5, [sp]
 8004406:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800440a:	4623      	mov	r3, r4
 800440c:	462a      	mov	r2, r5
 800440e:	9102      	str	r1, [sp, #8]
 8004410:	4861      	ldr	r0, [pc, #388]	; (8004598 <_GLOBAL__sub_I_REG_FIFO+0xcbc>)
 8004412:	4962      	ldr	r1, [pc, #392]	; (800459c <_GLOBAL__sub_I_REG_FIFO+0xcc0>)
 8004414:	f7fc feee 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
ImplicitHeaderModeOn(reg_implicit_header_mode_on, 1, false, 'w', 0x00, 0x01),
 8004418:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800441c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004420:	9600      	str	r6, [sp, #0]
 8004422:	4623      	mov	r3, r4
 8004424:	462a      	mov	r2, r5
 8004426:	495e      	ldr	r1, [pc, #376]	; (80045a0 <_GLOBAL__sub_I_REG_FIFO+0xcc4>)
 8004428:	485e      	ldr	r0, [pc, #376]	; (80045a4 <_GLOBAL__sub_I_REG_FIFO+0xcc8>)
 800442a:	f7fc fee3 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
SpreadingFactor(reg_spreading_factor, 1, false, 'w', 0x06, 0x0C),
 800442e:	f04f 080c 	mov.w	r8, #12
 8004432:	2106      	movs	r1, #6
 8004434:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004438:	e9cd 1801 	strd	r1, r8, [sp, #4]
 800443c:	9600      	str	r6, [sp, #0]
 800443e:	4623      	mov	r3, r4
 8004440:	462a      	mov	r2, r5
 8004442:	4959      	ldr	r1, [pc, #356]	; (80045a8 <_GLOBAL__sub_I_REG_FIFO+0xccc>)
 8004444:	4859      	ldr	r0, [pc, #356]	; (80045ac <_GLOBAL__sub_I_REG_FIFO+0xcd0>)
 8004446:	f7fc fed5 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
TxContinuousMode(reg_tx_continuous_mode, 1, false, 'w', 0x00, 0x01),
 800444a:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800444e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004452:	9600      	str	r6, [sp, #0]
 8004454:	4623      	mov	r3, r4
 8004456:	462a      	mov	r2, r5
 8004458:	4955      	ldr	r1, [pc, #340]	; (80045b0 <_GLOBAL__sub_I_REG_FIFO+0xcd4>)
 800445a:	4856      	ldr	r0, [pc, #344]	; (80045b4 <_GLOBAL__sub_I_REG_FIFO+0xcd8>)
 800445c:	f7fc feca 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
RxPayloadCrcOn(reg_rx_payload_crc_on, 1, false, 'w', 0x00, 0x01),
 8004460:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8004464:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004468:	9600      	str	r6, [sp, #0]
 800446a:	4623      	mov	r3, r4
 800446c:	462a      	mov	r2, r5
 800446e:	4952      	ldr	r1, [pc, #328]	; (80045b8 <_GLOBAL__sub_I_REG_FIFO+0xcdc>)
 8004470:	4852      	ldr	r0, [pc, #328]	; (80045bc <_GLOBAL__sub_I_REG_FIFO+0xce0>)
 8004472:	f7fc febf 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
SymbTimeout(reg_symb_timeout, 2, false, 'w', 0x0000, 0x03FF),
 8004476:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800447a:	e9cd 6400 	strd	r6, r4, [sp]
 800447e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004482:	4623      	mov	r3, r4
 8004484:	9202      	str	r2, [sp, #8]
 8004486:	494e      	ldr	r1, [pc, #312]	; (80045c0 <_GLOBAL__sub_I_REG_FIFO+0xce4>)
 8004488:	2202      	movs	r2, #2
 800448a:	484e      	ldr	r0, [pc, #312]	; (80045c4 <_GLOBAL__sub_I_REG_FIFO+0xce8>)
 800448c:	f7fc feb2 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PreambleLength(reg_preamble_length, 2, false, 'w', 0x0000, 0xFFFF),
 8004490:	e9cd 6400 	strd	r6, r4, [sp]
 8004494:	9702      	str	r7, [sp, #8]
 8004496:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800449a:	4623      	mov	r3, r4
 800449c:	2202      	movs	r2, #2
 800449e:	494a      	ldr	r1, [pc, #296]	; (80045c8 <_GLOBAL__sub_I_REG_FIFO+0xcec>)
 80044a0:	484a      	ldr	r0, [pc, #296]	; (80045cc <_GLOBAL__sub_I_REG_FIFO+0xcf0>)
 80044a2:	f7fc fea7 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PayloadLength(reg_payload_length, 1, false, 'w', 0x01, 0xFF),
 80044a6:	e9cd 5a01 	strd	r5, sl, [sp, #4]
 80044aa:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80044ae:	9600      	str	r6, [sp, #0]
 80044b0:	4623      	mov	r3, r4
 80044b2:	462a      	mov	r2, r5
 80044b4:	4946      	ldr	r1, [pc, #280]	; (80045d0 <_GLOBAL__sub_I_REG_FIFO+0xcf4>)
 80044b6:	4847      	ldr	r0, [pc, #284]	; (80045d4 <_GLOBAL__sub_I_REG_FIFO+0xcf8>)
 80044b8:	f7fc fe9c 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PayloadMaxLength(reg_payload_max_length, 1, false, 'w', 0x00, 0xFF),
 80044bc:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80044c0:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80044c4:	9600      	str	r6, [sp, #0]
 80044c6:	4623      	mov	r3, r4
 80044c8:	462a      	mov	r2, r5
 80044ca:	4943      	ldr	r1, [pc, #268]	; (80045d8 <_GLOBAL__sub_I_REG_FIFO+0xcfc>)
 80044cc:	4843      	ldr	r0, [pc, #268]	; (80045dc <_GLOBAL__sub_I_REG_FIFO+0xd00>)
 80044ce:	f7fc fe91 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FreqHoppingPeriod(reg_freq_hopping_period, 1, false, 'w', 0x00, 0xFF),
 80044d2:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80044d6:	e083      	b.n	80045e0 <_GLOBAL__sub_I_REG_FIFO+0xd04>
 80044d8:	200018e4 	.word	0x200018e4
 80044dc:	20001584 	.word	0x20001584
 80044e0:	20001694 	.word	0x20001694
 80044e4:	20000e14 	.word	0x20000e14
 80044e8:	200016fc 	.word	0x200016fc
 80044ec:	20000f80 	.word	0x20000f80
 80044f0:	20001684 	.word	0x20001684
 80044f4:	20000ddc 	.word	0x20000ddc
 80044f8:	2000189c 	.word	0x2000189c
 80044fc:	200014a4 	.word	0x200014a4
 8004500:	20001884 	.word	0x20001884
 8004504:	20001450 	.word	0x20001450
 8004508:	20001824 	.word	0x20001824
 800450c:	2000131c 	.word	0x2000131c
 8004510:	200018ec 	.word	0x200018ec
 8004514:	200015a0 	.word	0x200015a0
 8004518:	200018dc 	.word	0x200018dc
 800451c:	20001568 	.word	0x20001568
 8004520:	2000168c 	.word	0x2000168c
 8004524:	20000df8 	.word	0x20000df8
 8004528:	200016f4 	.word	0x200016f4
 800452c:	20000f64 	.word	0x20000f64
 8004530:	2000167c 	.word	0x2000167c
 8004534:	20000dc0 	.word	0x20000dc0
 8004538:	2000172c 	.word	0x2000172c
 800453c:	20001028 	.word	0x20001028
 8004540:	200018f4 	.word	0x200018f4
 8004544:	200015bc 	.word	0x200015bc
 8004548:	2000190c 	.word	0x2000190c
 800454c:	200015f4 	.word	0x200015f4
 8004550:	20001434 	.word	0x20001434
 8004554:	2000187c 	.word	0x2000187c
 8004558:	20001220 	.word	0x20001220
 800455c:	200017dc 	.word	0x200017dc
 8004560:	2000181c 	.word	0x2000181c
 8004564:	20001300 	.word	0x20001300
 8004568:	20001814 	.word	0x20001814
 800456c:	200012e4 	.word	0x200012e4
 8004570:	2000186c 	.word	0x2000186c
 8004574:	200013fc 	.word	0x200013fc
 8004578:	2000184c 	.word	0x2000184c
 800457c:	200013a8 	.word	0x200013a8
 8004580:	200016a4 	.word	0x200016a4
 8004584:	20000e4c 	.word	0x20000e4c
 8004588:	20000f9c 	.word	0x20000f9c
 800458c:	20001704 	.word	0x20001704
 8004590:	20000da4 	.word	0x20000da4
 8004594:	20001674 	.word	0x20001674
 8004598:	20000e30 	.word	0x20000e30
 800459c:	2000169c 	.word	0x2000169c
 80045a0:	20001784 	.word	0x20001784
 80045a4:	200010ec 	.word	0x200010ec
 80045a8:	200018ac 	.word	0x200018ac
 80045ac:	200014dc 	.word	0x200014dc
 80045b0:	200018d4 	.word	0x200018d4
 80045b4:	2000154c 	.word	0x2000154c
 80045b8:	20001894 	.word	0x20001894
 80045bc:	20001488 	.word	0x20001488
 80045c0:	200018b4 	.word	0x200018b4
 80045c4:	200014f8 	.word	0x200014f8
 80045c8:	2000185c 	.word	0x2000185c
 80045cc:	200013e0 	.word	0x200013e0
 80045d0:	20001834 	.word	0x20001834
 80045d4:	20001354 	.word	0x20001354
 80045d8:	2000183c 	.word	0x2000183c
 80045dc:	20001370 	.word	0x20001370
 80045e0:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80045e4:	9600      	str	r6, [sp, #0]
 80045e6:	4623      	mov	r3, r4
 80045e8:	462a      	mov	r2, r5
 80045ea:	49c6      	ldr	r1, [pc, #792]	; (8004904 <_GLOBAL__sub_I_REG_FIFO+0x1028>)
 80045ec:	48c6      	ldr	r0, [pc, #792]	; (8004908 <_GLOBAL__sub_I_REG_FIFO+0x102c>)
 80045ee:	f7fc fe01 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FifoRxByteAddrPtr(reg_fifo_rx_byte_addr_ptr, 1, false, 'r', 0x00, 0xFF),
 80045f2:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80045f6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80045fa:	f8cd b000 	str.w	fp, [sp]
 80045fe:	4623      	mov	r3, r4
 8004600:	462a      	mov	r2, r5
 8004602:	49c2      	ldr	r1, [pc, #776]	; (800490c <_GLOBAL__sub_I_REG_FIFO+0x1030>)
 8004604:	48c2      	ldr	r0, [pc, #776]	; (8004910 <_GLOBAL__sub_I_REG_FIFO+0x1034>)
 8004606:	f7fc fdf5 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
LowDataRateOptimize(reg_low_data_rate_optimize, 1, false, 'w', 0x00, 0x01),
 800460a:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800460e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004612:	9600      	str	r6, [sp, #0]
 8004614:	4623      	mov	r3, r4
 8004616:	462a      	mov	r2, r5
 8004618:	49be      	ldr	r1, [pc, #760]	; (8004914 <_GLOBAL__sub_I_REG_FIFO+0x1038>)
 800461a:	48bf      	ldr	r0, [pc, #764]	; (8004918 <_GLOBAL__sub_I_REG_FIFO+0x103c>)
 800461c:	f7fc fdea 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
AgcAutoOn(reg_agc_auto_on, 1, false, 'w', 0x00, 0x01),
 8004620:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8004624:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004628:	9600      	str	r6, [sp, #0]
 800462a:	4623      	mov	r3, r4
 800462c:	462a      	mov	r2, r5
 800462e:	49bb      	ldr	r1, [pc, #748]	; (800491c <_GLOBAL__sub_I_REG_FIFO+0x1040>)
 8004630:	48bb      	ldr	r0, [pc, #748]	; (8004920 <_GLOBAL__sub_I_REG_FIFO+0x1044>)
 8004632:	f7fc fddf 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PpmCorrection(reg_ppm_correction, 1, false, 'w', 0x00, 0xFF),
 8004636:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800463a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800463e:	9600      	str	r6, [sp, #0]
 8004640:	4623      	mov	r3, r4
 8004642:	462a      	mov	r2, r5
 8004644:	49b7      	ldr	r1, [pc, #732]	; (8004924 <_GLOBAL__sub_I_REG_FIFO+0x1048>)
 8004646:	48b8      	ldr	r0, [pc, #736]	; (8004928 <_GLOBAL__sub_I_REG_FIFO+0x104c>)
 8004648:	f7fc fdd4 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FreqError(reg_freq_error, 3, false, 'r', 0x000000, 0x0FFFFF),
 800464c:	4ab7      	ldr	r2, [pc, #732]	; (800492c <_GLOBAL__sub_I_REG_FIFO+0x1050>)
 800464e:	e9cd b400 	strd	fp, r4, [sp]
 8004652:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004656:	4623      	mov	r3, r4
 8004658:	9202      	str	r2, [sp, #8]
 800465a:	49b5      	ldr	r1, [pc, #724]	; (8004930 <_GLOBAL__sub_I_REG_FIFO+0x1054>)
 800465c:	2203      	movs	r2, #3
 800465e:	48b5      	ldr	r0, [pc, #724]	; (8004934 <_GLOBAL__sub_I_REG_FIFO+0x1058>)
 8004660:	f7fc fdc8 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
RssiWideband(reg_rssi_wideband, 1, false, 'r', 0x00, 0xFF),
 8004664:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8004668:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800466c:	f8cd b000 	str.w	fp, [sp]
 8004670:	4623      	mov	r3, r4
 8004672:	462a      	mov	r2, r5
 8004674:	49b0      	ldr	r1, [pc, #704]	; (8004938 <_GLOBAL__sub_I_REG_FIFO+0x105c>)
 8004676:	48b1      	ldr	r0, [pc, #708]	; (800493c <_GLOBAL__sub_I_REG_FIFO+0x1060>)
 8004678:	f7fc fdbc 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
DetectionOptimize(reg_detection_optimize, 1, false, 'w', 0x03, 0x05, reserv_detection_optimize, 1),
 800467c:	2703      	movs	r7, #3
 800467e:	2005      	movs	r0, #5
 8004680:	49af      	ldr	r1, [pc, #700]	; (8004940 <_GLOBAL__sub_I_REG_FIFO+0x1064>)
 8004682:	e9cd 7001 	strd	r7, r0, [sp, #4]
 8004686:	9504      	str	r5, [sp, #16]
 8004688:	9600      	str	r6, [sp, #0]
 800468a:	4623      	mov	r3, r4
 800468c:	462a      	mov	r2, r5
 800468e:	9103      	str	r1, [sp, #12]
 8004690:	48ac      	ldr	r0, [pc, #688]	; (8004944 <_GLOBAL__sub_I_REG_FIFO+0x1068>)
 8004692:	49ad      	ldr	r1, [pc, #692]	; (8004948 <_GLOBAL__sub_I_REG_FIFO+0x106c>)
 8004694:	f7fc fdae 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
InvertIQ(reg_invert_iq, 1, false, 'w', 0x00, 0x01),
 8004698:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800469c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80046a0:	9600      	str	r6, [sp, #0]
 80046a2:	4623      	mov	r3, r4
 80046a4:	462a      	mov	r2, r5
 80046a6:	49a9      	ldr	r1, [pc, #676]	; (800494c <_GLOBAL__sub_I_REG_FIFO+0x1070>)
 80046a8:	48a9      	ldr	r0, [pc, #676]	; (8004950 <_GLOBAL__sub_I_REG_FIFO+0x1074>)
 80046aa:	f7fc fda3 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
DetectionThreshold(reg_detection_threshold, 1, false, 'w', 0x0A, 0x0C, reserv_detection_threshold, 1),
 80046ae:	200a      	movs	r0, #10
 80046b0:	49a8      	ldr	r1, [pc, #672]	; (8004954 <_GLOBAL__sub_I_REG_FIFO+0x1078>)
 80046b2:	f8cd 8008 	str.w	r8, [sp, #8]
 80046b6:	9504      	str	r5, [sp, #16]
 80046b8:	9600      	str	r6, [sp, #0]
 80046ba:	4623      	mov	r3, r4
 80046bc:	462a      	mov	r2, r5
 80046be:	9001      	str	r0, [sp, #4]
 80046c0:	9103      	str	r1, [sp, #12]
 80046c2:	48a5      	ldr	r0, [pc, #660]	; (8004958 <_GLOBAL__sub_I_REG_FIFO+0x107c>)
 80046c4:	49a5      	ldr	r1, [pc, #660]	; (800495c <_GLOBAL__sub_I_REG_FIFO+0x1080>)
 80046c6:	f7fc fd95 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
SyncWord(reg_sync_word, 1, false, 'w', 0x00, 0xFF),  // , reserv_sync_word, 1),
 80046ca:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80046ce:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80046d2:	9600      	str	r6, [sp, #0]
 80046d4:	4623      	mov	r3, r4
 80046d6:	462a      	mov	r2, r5
 80046d8:	49a1      	ldr	r1, [pc, #644]	; (8004960 <_GLOBAL__sub_I_REG_FIFO+0x1084>)
 80046da:	48a2      	ldr	r0, [pc, #648]	; (8004964 <_GLOBAL__sub_I_REG_FIFO+0x1088>)
 80046dc:	f7fc fd8a 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Dio0Mapping(reg_dio0_mapping, 1, false, 'w', 0x00, 0x03),
 80046e0:	e9cd 6400 	strd	r6, r4, [sp]
 80046e4:	9702      	str	r7, [sp, #8]
 80046e6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80046ea:	4623      	mov	r3, r4
 80046ec:	462a      	mov	r2, r5
 80046ee:	499e      	ldr	r1, [pc, #632]	; (8004968 <_GLOBAL__sub_I_REG_FIFO+0x108c>)
 80046f0:	489e      	ldr	r0, [pc, #632]	; (800496c <_GLOBAL__sub_I_REG_FIFO+0x1090>)
 80046f2:	f7fc fd7f 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Dio1Mapping(reg_dio1_mapping, 1, false, 'w', 0x00, 0x03),
 80046f6:	e9cd 6400 	strd	r6, r4, [sp]
 80046fa:	9702      	str	r7, [sp, #8]
 80046fc:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004700:	4623      	mov	r3, r4
 8004702:	462a      	mov	r2, r5
 8004704:	499a      	ldr	r1, [pc, #616]	; (8004970 <_GLOBAL__sub_I_REG_FIFO+0x1094>)
 8004706:	489b      	ldr	r0, [pc, #620]	; (8004974 <_GLOBAL__sub_I_REG_FIFO+0x1098>)
 8004708:	f7fc fd74 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Dio2Mapping(reg_dio2_mapping, 1, false, 'w', 0x00, 0x03),
 800470c:	e9cd 6400 	strd	r6, r4, [sp]
 8004710:	9702      	str	r7, [sp, #8]
 8004712:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004716:	4623      	mov	r3, r4
 8004718:	462a      	mov	r2, r5
 800471a:	4997      	ldr	r1, [pc, #604]	; (8004978 <_GLOBAL__sub_I_REG_FIFO+0x109c>)
 800471c:	4897      	ldr	r0, [pc, #604]	; (800497c <_GLOBAL__sub_I_REG_FIFO+0x10a0>)
 800471e:	f7fc fd69 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Dio3Mapping(reg_dio3_mapping, 1, false, 'w', 0x00, 0x03),
 8004722:	e9cd 6400 	strd	r6, r4, [sp]
 8004726:	9702      	str	r7, [sp, #8]
 8004728:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800472c:	4623      	mov	r3, r4
 800472e:	462a      	mov	r2, r5
 8004730:	4993      	ldr	r1, [pc, #588]	; (8004980 <_GLOBAL__sub_I_REG_FIFO+0x10a4>)
 8004732:	4894      	ldr	r0, [pc, #592]	; (8004984 <_GLOBAL__sub_I_REG_FIFO+0x10a8>)
 8004734:	f7fc fd5e 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Dio4Mapping(reg_dio4_mapping, 1, false, 'w', 0x00, 0x03),
 8004738:	e9cd 6400 	strd	r6, r4, [sp]
 800473c:	9702      	str	r7, [sp, #8]
 800473e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004742:	4623      	mov	r3, r4
 8004744:	462a      	mov	r2, r5
 8004746:	4990      	ldr	r1, [pc, #576]	; (8004988 <_GLOBAL__sub_I_REG_FIFO+0x10ac>)
 8004748:	4890      	ldr	r0, [pc, #576]	; (800498c <_GLOBAL__sub_I_REG_FIFO+0x10b0>)
 800474a:	f7fc fd53 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Dio5Mapping(reg_dio5_mapping, 1, false, 'w', 0x00, 0x03),
 800474e:	e9cd 6400 	strd	r6, r4, [sp]
 8004752:	9702      	str	r7, [sp, #8]
 8004754:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004758:	4623      	mov	r3, r4
 800475a:	462a      	mov	r2, r5
 800475c:	498c      	ldr	r1, [pc, #560]	; (8004990 <_GLOBAL__sub_I_REG_FIFO+0x10b4>)
 800475e:	488d      	ldr	r0, [pc, #564]	; (8004994 <_GLOBAL__sub_I_REG_FIFO+0x10b8>)
 8004760:	f7fc fd48 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
MapPreambleDetect(reg_map_preamble_detect, 1, false, 'w', 0x00, 0x01),
 8004764:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8004768:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800476c:	9600      	str	r6, [sp, #0]
 800476e:	4623      	mov	r3, r4
 8004770:	462a      	mov	r2, r5
 8004772:	4989      	ldr	r1, [pc, #548]	; (8004998 <_GLOBAL__sub_I_REG_FIFO+0x10bc>)
 8004774:	4889      	ldr	r0, [pc, #548]	; (800499c <_GLOBAL__sub_I_REG_FIFO+0x10c0>)
 8004776:	f7fc fd3d 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Version(reg_version, 1, false, 'r', 0x00, 0xFF),
 800477a:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800477e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004782:	f8cd b000 	str.w	fp, [sp]
 8004786:	4623      	mov	r3, r4
 8004788:	462a      	mov	r2, r5
 800478a:	4985      	ldr	r1, [pc, #532]	; (80049a0 <_GLOBAL__sub_I_REG_FIFO+0x10c4>)
 800478c:	4885      	ldr	r0, [pc, #532]	; (80049a4 <_GLOBAL__sub_I_REG_FIFO+0x10c8>)
 800478e:	f7fc fd31 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FastHopOn(reg_fast_hop_on, 1, false, 'w', 0x00, 0x01),
 8004792:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8004796:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800479a:	9600      	str	r6, [sp, #0]
 800479c:	4623      	mov	r3, r4
 800479e:	462a      	mov	r2, r5
 80047a0:	4981      	ldr	r1, [pc, #516]	; (80049a8 <_GLOBAL__sub_I_REG_FIFO+0x10cc>)
 80047a2:	4882      	ldr	r0, [pc, #520]	; (80049ac <_GLOBAL__sub_I_REG_FIFO+0x10d0>)
 80047a4:	f7fc fd26 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
TcxoInputOn(reg_tcxo_input_on, 1, false, 'w', 0x00, 0x01),
 80047a8:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80047ac:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80047b0:	9600      	str	r6, [sp, #0]
 80047b2:	4623      	mov	r3, r4
 80047b4:	462a      	mov	r2, r5
 80047b6:	497e      	ldr	r1, [pc, #504]	; (80049b0 <_GLOBAL__sub_I_REG_FIFO+0x10d4>)
 80047b8:	487e      	ldr	r0, [pc, #504]	; (80049b4 <_GLOBAL__sub_I_REG_FIFO+0x10d8>)
 80047ba:	f7fc fd1b 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PaDac(reg_pa_dac, 1, false, 'w', 0x04, 0x07, reserv_pa_dac, 2),
 80047be:	2002      	movs	r0, #2
 80047c0:	2304      	movs	r3, #4
 80047c2:	2207      	movs	r2, #7
BitRateFrac(reg_bit_rate_frac, 1, false, 'w', 0x00, 0x0F),
 80047c4:	46c8      	mov	r8, r9
PaDac(reg_pa_dac, 1, false, 'w', 0x04, 0x07, reserv_pa_dac, 2),
 80047c6:	497c      	ldr	r1, [pc, #496]	; (80049b8 <_GLOBAL__sub_I_REG_FIFO+0x10dc>)
 80047c8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80047cc:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80047d0:	9600      	str	r6, [sp, #0]
 80047d2:	4623      	mov	r3, r4
 80047d4:	462a      	mov	r2, r5
 80047d6:	4979      	ldr	r1, [pc, #484]	; (80049bc <_GLOBAL__sub_I_REG_FIFO+0x10e0>)
 80047d8:	4879      	ldr	r0, [pc, #484]	; (80049c0 <_GLOBAL__sub_I_REG_FIFO+0x10e4>)
 80047da:	f7fc fd0b 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FormerTemp(reg_former_temp, 1, false, 'r', 0x00, 0xFF),
 80047de:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80047e2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80047e6:	f8cd b000 	str.w	fp, [sp]
 80047ea:	4623      	mov	r3, r4
 80047ec:	462a      	mov	r2, r5
 80047ee:	4975      	ldr	r1, [pc, #468]	; (80049c4 <_GLOBAL__sub_I_REG_FIFO+0x10e8>)
 80047f0:	4875      	ldr	r0, [pc, #468]	; (80049c8 <_GLOBAL__sub_I_REG_FIFO+0x10ec>)
 80047f2:	f7fc fcff 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
BitRateFrac(reg_bit_rate_frac, 1, false, 'w', 0x00, 0x0F),
 80047f6:	e9cd 6400 	strd	r6, r4, [sp]
 80047fa:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80047fe:	4623      	mov	r3, r4
 8004800:	462a      	mov	r2, r5
 8004802:	f8cd 8008 	str.w	r8, [sp, #8]
 8004806:	4971      	ldr	r1, [pc, #452]	; (80049cc <_GLOBAL__sub_I_REG_FIFO+0x10f0>)
 8004808:	4871      	ldr	r0, [pc, #452]	; (80049d0 <_GLOBAL__sub_I_REG_FIFO+0x10f4>)
 800480a:	f7fc fcf3 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
AgcReferenceLevel(reg_agc_reference_level, 1, false, 'w', 0x00, 0x3F),
 800480e:	233f      	movs	r3, #63	; 0x3f
 8004810:	e9cd 6400 	strd	r6, r4, [sp]
 8004814:	9302      	str	r3, [sp, #8]
 8004816:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800481a:	4623      	mov	r3, r4
 800481c:	462a      	mov	r2, r5
 800481e:	496d      	ldr	r1, [pc, #436]	; (80049d4 <_GLOBAL__sub_I_REG_FIFO+0x10f8>)
 8004820:	486d      	ldr	r0, [pc, #436]	; (80049d8 <_GLOBAL__sub_I_REG_FIFO+0x10fc>)
 8004822:	f7fc fce7 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
AgcStep1(reg_agc_step1, 1, false, 'w', 0x00, 0x1F),
 8004826:	231f      	movs	r3, #31
 8004828:	e9cd 6400 	strd	r6, r4, [sp]
 800482c:	9302      	str	r3, [sp, #8]
 800482e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004832:	4623      	mov	r3, r4
 8004834:	462a      	mov	r2, r5
 8004836:	4969      	ldr	r1, [pc, #420]	; (80049dc <_GLOBAL__sub_I_REG_FIFO+0x1100>)
 8004838:	4869      	ldr	r0, [pc, #420]	; (80049e0 <_GLOBAL__sub_I_REG_FIFO+0x1104>)
 800483a:	f7fc fcdb 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
AgcStep2(reg_agc_step2, 1, false, 'w', 0x00, 0x0F),
 800483e:	e9cd 6400 	strd	r6, r4, [sp]
 8004842:	f8cd 8008 	str.w	r8, [sp, #8]
 8004846:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800484a:	4623      	mov	r3, r4
 800484c:	462a      	mov	r2, r5
 800484e:	4965      	ldr	r1, [pc, #404]	; (80049e4 <_GLOBAL__sub_I_REG_FIFO+0x1108>)
 8004850:	4865      	ldr	r0, [pc, #404]	; (80049e8 <_GLOBAL__sub_I_REG_FIFO+0x110c>)
 8004852:	f7fc fccf 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
AgcStep3(reg_agc_step3, 1, false, 'w', 0x00, 0x0F),
 8004856:	e9cd 6400 	strd	r6, r4, [sp]
 800485a:	f8cd 8008 	str.w	r8, [sp, #8]
 800485e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004862:	4623      	mov	r3, r4
 8004864:	462a      	mov	r2, r5
 8004866:	4961      	ldr	r1, [pc, #388]	; (80049ec <_GLOBAL__sub_I_REG_FIFO+0x1110>)
 8004868:	4861      	ldr	r0, [pc, #388]	; (80049f0 <_GLOBAL__sub_I_REG_FIFO+0x1114>)
 800486a:	f7fc fcc3 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
AgcStep4(reg_agc_step4, 1, false, 'w', 0x00, 0x0F),
 800486e:	f8cd 8008 	str.w	r8, [sp, #8]
 8004872:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004876:	9401      	str	r4, [sp, #4]
 8004878:	4623      	mov	r3, r4
 800487a:	462a      	mov	r2, r5
 800487c:	9600      	str	r6, [sp, #0]
 800487e:	495d      	ldr	r1, [pc, #372]	; (80049f4 <_GLOBAL__sub_I_REG_FIFO+0x1118>)
 8004880:	485d      	ldr	r0, [pc, #372]	; (80049f8 <_GLOBAL__sub_I_REG_FIFO+0x111c>)
 8004882:	f7fc fcb7 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
AgcStep5(reg_agc_step5, 1, false, 'w', 0x00, 0x0F),
 8004886:	f8cd 8008 	str.w	r8, [sp, #8]
 800488a:	9600      	str	r6, [sp, #0]
 800488c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004890:	9401      	str	r4, [sp, #4]
 8004892:	4623      	mov	r3, r4
 8004894:	462a      	mov	r2, r5
 8004896:	4959      	ldr	r1, [pc, #356]	; (80049fc <_GLOBAL__sub_I_REG_FIFO+0x1120>)
 8004898:	4859      	ldr	r0, [pc, #356]	; (8004a00 <_GLOBAL__sub_I_REG_FIFO+0x1124>)
 800489a:	f7fc fcab 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PllBandwidth(reg_pll_bandwidth, 1, false, 'w', 0x00, 0x03);
 800489e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80048a2:	9401      	str	r4, [sp, #4]
 80048a4:	4623      	mov	r3, r4
};
 80048a6:	4c57      	ldr	r4, [pc, #348]	; (8004a04 <_GLOBAL__sub_I_REG_FIFO+0x1128>)
PllBandwidth(reg_pll_bandwidth, 1, false, 'w', 0x00, 0x03);
 80048a8:	9600      	str	r6, [sp, #0]
};
 80048aa:	4626      	mov	r6, r4
PllBandwidth(reg_pll_bandwidth, 1, false, 'w', 0x00, 0x03);
 80048ac:	462a      	mov	r2, r5
};
 80048ae:	4d56      	ldr	r5, [pc, #344]	; (8004a08 <_GLOBAL__sub_I_REG_FIFO+0x112c>)
PllBandwidth(reg_pll_bandwidth, 1, false, 'w', 0x00, 0x03);
 80048b0:	9702      	str	r7, [sp, #8]
 80048b2:	4956      	ldr	r1, [pc, #344]	; (8004a0c <_GLOBAL__sub_I_REG_FIFO+0x1130>)
 80048b4:	4856      	ldr	r0, [pc, #344]	; (8004a10 <_GLOBAL__sub_I_REG_FIFO+0x1134>)
 80048b6:	f7fc fc9d 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
};
 80048ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048bc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80048be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80048c2:	4d54      	ldr	r5, [pc, #336]	; (8004a14 <_GLOBAL__sub_I_REG_FIFO+0x1138>)
 80048c4:	f104 071c 	add.w	r7, r4, #28
 80048c8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80048cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048ce:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80048d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80048d4:	4d50      	ldr	r5, [pc, #320]	; (8004a18 <_GLOBAL__sub_I_REG_FIFO+0x113c>)
 80048d6:	f104 0638 	add.w	r6, r4, #56	; 0x38
 80048da:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80048de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80048e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80048e6:	4d4d      	ldr	r5, [pc, #308]	; (8004a1c <_GLOBAL__sub_I_REG_FIFO+0x1140>)
 80048e8:	f104 0754 	add.w	r7, r4, #84	; 0x54
 80048ec:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80048f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048f2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80048f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80048f8:	4d49      	ldr	r5, [pc, #292]	; (8004a20 <_GLOBAL__sub_I_REG_FIFO+0x1144>)
 80048fa:	f104 0670 	add.w	r6, r4, #112	; 0x70
 80048fe:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004902:	e08f      	b.n	8004a24 <_GLOBAL__sub_I_REG_FIFO+0x1148>
 8004904:	20001764 	.word	0x20001764
 8004908:	200010b4 	.word	0x200010b4
 800490c:	20001724 	.word	0x20001724
 8004910:	2000100c 	.word	0x2000100c
 8004914:	200017b4 	.word	0x200017b4
 8004918:	20001194 	.word	0x20001194
 800491c:	20001634 	.word	0x20001634
 8004920:	20000cc4 	.word	0x20000cc4
 8004924:	20001854 	.word	0x20001854
 8004928:	200013c4 	.word	0x200013c4
 800492c:	000fffff 	.word	0x000fffff
 8004930:	2000174c 	.word	0x2000174c
 8004934:	20001098 	.word	0x20001098
 8004938:	20001874 	.word	0x20001874
 800493c:	20001418 	.word	0x20001418
 8004940:	20000000 	.word	0x20000000
 8004944:	20000e68 	.word	0x20000e68
 8004948:	200016ac 	.word	0x200016ac
 800494c:	2000178c 	.word	0x2000178c
 8004950:	20001108 	.word	0x20001108
 8004954:	20000004 	.word	0x20000004
 8004958:	20000e84 	.word	0x20000e84
 800495c:	200016b4 	.word	0x200016b4
 8004960:	200018c4 	.word	0x200018c4
 8004964:	20001514 	.word	0x20001514
 8004968:	200016bc 	.word	0x200016bc
 800496c:	20000ea0 	.word	0x20000ea0
 8004970:	200016c4 	.word	0x200016c4
 8004974:	20000ebc 	.word	0x20000ebc
 8004978:	200016cc 	.word	0x200016cc
 800497c:	20000ed8 	.word	0x20000ed8
 8004980:	200016d4 	.word	0x200016d4
 8004984:	20000ef4 	.word	0x20000ef4
 8004988:	200016dc 	.word	0x200016dc
 800498c:	20000f10 	.word	0x20000f10
 8004990:	200016e4 	.word	0x200016e4
 8004994:	20000f2c 	.word	0x20000f2c
 8004998:	200017c4 	.word	0x200017c4
 800499c:	200011cc 	.word	0x200011cc
 80049a0:	2000191c 	.word	0x2000191c
 80049a4:	20001610 	.word	0x20001610
 80049a8:	200016ec 	.word	0x200016ec
 80049ac:	20000f48 	.word	0x20000f48
 80049b0:	200018cc 	.word	0x200018cc
 80049b4:	20001530 	.word	0x20001530
 80049b8:	20000010 	.word	0x20000010
 80049bc:	200017fc 	.word	0x200017fc
 80049c0:	20001290 	.word	0x20001290
 80049c4:	20001744 	.word	0x20001744
 80049c8:	2000107c 	.word	0x2000107c
 80049cc:	2000166c 	.word	0x2000166c
 80049d0:	20000d88 	.word	0x20000d88
 80049d4:	2000163c 	.word	0x2000163c
 80049d8:	20000ce0 	.word	0x20000ce0
 80049dc:	20001644 	.word	0x20001644
 80049e0:	20000cfc 	.word	0x20000cfc
 80049e4:	2000164c 	.word	0x2000164c
 80049e8:	20000d18 	.word	0x20000d18
 80049ec:	20001654 	.word	0x20001654
 80049f0:	20000d34 	.word	0x20000d34
 80049f4:	2000165c 	.word	0x2000165c
 80049f8:	20000d50 	.word	0x20000d50
 80049fc:	20001664 	.word	0x20001664
 8004a00:	20000d6c 	.word	0x20000d6c
 8004a04:	20000340 	.word	0x20000340
 8004a08:	20000fb8 	.word	0x20000fb8
 8004a0c:	20001844 	.word	0x20001844
 8004a10:	2000138c 	.word	0x2000138c
 8004a14:	20001178 	.word	0x20001178
 8004a18:	20000ca8 	.word	0x20000ca8
 8004a1c:	200011b0 	.word	0x200011b0
 8004a20:	20001204 	.word	0x20001204
 8004a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a26:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004a28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a2c:	4dcf      	ldr	r5, [pc, #828]	; (8004d6c <_GLOBAL__sub_I_REG_FIFO+0x1490>)
 8004a2e:	f104 078c 	add.w	r7, r4, #140	; 0x8c
 8004a32:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004a36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a38:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004a3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a3e:	4dcc      	ldr	r5, [pc, #816]	; (8004d70 <_GLOBAL__sub_I_REG_FIFO+0x1494>)
 8004a40:	f104 06a8 	add.w	r6, r4, #168	; 0xa8
 8004a44:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a4a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004a4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a50:	4dc8      	ldr	r5, [pc, #800]	; (8004d74 <_GLOBAL__sub_I_REG_FIFO+0x1498>)
 8004a52:	f104 07c4 	add.w	r7, r4, #196	; 0xc4
 8004a56:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a5c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004a5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a62:	4dc5      	ldr	r5, [pc, #788]	; (8004d78 <_GLOBAL__sub_I_REG_FIFO+0x149c>)
 8004a64:	f104 06e0 	add.w	r6, r4, #224	; 0xe0
 8004a68:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a6e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004a70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a74:	4dc1      	ldr	r5, [pc, #772]	; (8004d7c <_GLOBAL__sub_I_REG_FIFO+0x14a0>)
 8004a76:	f104 07fc 	add.w	r7, r4, #252	; 0xfc
 8004a7a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004a7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a80:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004a82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a86:	4dbe      	ldr	r5, [pc, #760]	; (8004d80 <_GLOBAL__sub_I_REG_FIFO+0x14a4>)
 8004a88:	f504 768c 	add.w	r6, r4, #280	; 0x118
 8004a8c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a92:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004a94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a98:	4dba      	ldr	r5, [pc, #744]	; (8004d84 <_GLOBAL__sub_I_REG_FIFO+0x14a8>)
 8004a9a:	f504 779a 	add.w	r7, r4, #308	; 0x134
 8004a9e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004aa4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004aa6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004aaa:	4db7      	ldr	r5, [pc, #732]	; (8004d88 <_GLOBAL__sub_I_REG_FIFO+0x14ac>)
 8004aac:	f504 76a8 	add.w	r6, r4, #336	; 0x150
 8004ab0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ab6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004ab8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004abc:	4db3      	ldr	r5, [pc, #716]	; (8004d8c <_GLOBAL__sub_I_REG_FIFO+0x14b0>)
 8004abe:	f504 77b6 	add.w	r7, r4, #364	; 0x16c
 8004ac2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004ac6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ac8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004aca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ace:	4db0      	ldr	r5, [pc, #704]	; (8004d90 <_GLOBAL__sub_I_REG_FIFO+0x14b4>)
 8004ad0:	f504 76c4 	add.w	r6, r4, #392	; 0x188
 8004ad4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ada:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004adc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ae0:	4dac      	ldr	r5, [pc, #688]	; (8004d94 <_GLOBAL__sub_I_REG_FIFO+0x14b8>)
 8004ae2:	f504 77d2 	add.w	r7, r4, #420	; 0x1a4
 8004ae6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004aea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004aec:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004aee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004af2:	4da9      	ldr	r5, [pc, #676]	; (8004d98 <_GLOBAL__sub_I_REG_FIFO+0x14bc>)
 8004af4:	f504 76e0 	add.w	r6, r4, #448	; 0x1c0
 8004af8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004afc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004afe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004b00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b04:	4da5      	ldr	r5, [pc, #660]	; (8004d9c <_GLOBAL__sub_I_REG_FIFO+0x14c0>)
 8004b06:	f504 77ee 	add.w	r7, r4, #476	; 0x1dc
 8004b0a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b10:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004b12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b16:	4da2      	ldr	r5, [pc, #648]	; (8004da0 <_GLOBAL__sub_I_REG_FIFO+0x14c4>)
 8004b18:	f504 76fc 	add.w	r6, r4, #504	; 0x1f8
 8004b1c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b22:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004b24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b28:	4d9e      	ldr	r5, [pc, #632]	; (8004da4 <_GLOBAL__sub_I_REG_FIFO+0x14c8>)
 8004b2a:	f504 7705 	add.w	r7, r4, #532	; 0x214
 8004b2e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004b32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b34:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004b36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b3a:	4d9b      	ldr	r5, [pc, #620]	; (8004da8 <_GLOBAL__sub_I_REG_FIFO+0x14cc>)
 8004b3c:	f504 760c 	add.w	r6, r4, #560	; 0x230
 8004b40:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b46:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004b48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b4c:	4d97      	ldr	r5, [pc, #604]	; (8004dac <_GLOBAL__sub_I_REG_FIFO+0x14d0>)
 8004b4e:	f504 7713 	add.w	r7, r4, #588	; 0x24c
 8004b52:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004b56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b58:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004b5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b5e:	4d94      	ldr	r5, [pc, #592]	; (8004db0 <_GLOBAL__sub_I_REG_FIFO+0x14d4>)
 8004b60:	f504 761a 	add.w	r6, r4, #616	; 0x268
 8004b64:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b6a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004b6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b70:	4d90      	ldr	r5, [pc, #576]	; (8004db4 <_GLOBAL__sub_I_REG_FIFO+0x14d8>)
 8004b72:	f504 7721 	add.w	r7, r4, #644	; 0x284
 8004b76:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b7c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004b7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b82:	4d8d      	ldr	r5, [pc, #564]	; (8004db8 <_GLOBAL__sub_I_REG_FIFO+0x14dc>)
 8004b84:	f504 7628 	add.w	r6, r4, #672	; 0x2a0
 8004b88:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b8e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004b90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b94:	4d89      	ldr	r5, [pc, #548]	; (8004dbc <_GLOBAL__sub_I_REG_FIFO+0x14e0>)
 8004b96:	f504 772f 	add.w	r7, r4, #700	; 0x2bc
 8004b9a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ba0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004ba2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ba6:	4d86      	ldr	r5, [pc, #536]	; (8004dc0 <_GLOBAL__sub_I_REG_FIFO+0x14e4>)
 8004ba8:	f504 7636 	add.w	r6, r4, #728	; 0x2d8
 8004bac:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bb2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004bb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004bb8:	4d82      	ldr	r5, [pc, #520]	; (8004dc4 <_GLOBAL__sub_I_REG_FIFO+0x14e8>)
 8004bba:	f504 773d 	add.w	r7, r4, #756	; 0x2f4
 8004bbe:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004bc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bc4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004bc6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004bca:	4d7f      	ldr	r5, [pc, #508]	; (8004dc8 <_GLOBAL__sub_I_REG_FIFO+0x14ec>)
 8004bcc:	f504 7644 	add.w	r6, r4, #784	; 0x310
 8004bd0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bd6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004bd8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004bdc:	4d7b      	ldr	r5, [pc, #492]	; (8004dcc <_GLOBAL__sub_I_REG_FIFO+0x14f0>)
 8004bde:	f504 774b 	add.w	r7, r4, #812	; 0x32c
 8004be2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004be6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004be8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004bea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004bee:	4d78      	ldr	r5, [pc, #480]	; (8004dd0 <_GLOBAL__sub_I_REG_FIFO+0x14f4>)
 8004bf0:	f504 7652 	add.w	r6, r4, #840	; 0x348
 8004bf4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004bf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bfa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004bfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c00:	4d74      	ldr	r5, [pc, #464]	; (8004dd4 <_GLOBAL__sub_I_REG_FIFO+0x14f8>)
 8004c02:	f504 7e59 	add.w	lr, r4, #868	; 0x364
 8004c06:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c0c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8004c10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c14:	4d70      	ldr	r5, [pc, #448]	; (8004dd8 <_GLOBAL__sub_I_REG_FIFO+0x14fc>)
 8004c16:	f504 7960 	add.w	r9, r4, #896	; 0x380
 8004c1a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8004c1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c20:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8004c24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c28:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 8004df4 <_GLOBAL__sub_I_REG_FIFO+0x1518>
 8004c2c:	f504 7867 	add.w	r8, r4, #924	; 0x39c
 8004c30:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8004c34:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004c38:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8004c3c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8004c40:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 8004df8 <_GLOBAL__sub_I_REG_FIFO+0x151c>
 8004c44:	f504 7b6e 	add.w	fp, r4, #952	; 0x3b8
 8004c48:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8004c4c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004c50:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 8004c54:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8004c58:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8004dfc <_GLOBAL__sub_I_REG_FIFO+0x1520>
 8004c5c:	f504 7a75 	add.w	sl, r4, #980	; 0x3d4
 8004c60:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8004c64:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004c68:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8004c6c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8004c70:	f8df c18c 	ldr.w	ip, [pc, #396]	; 8004e00 <_GLOBAL__sub_I_REG_FIFO+0x1524>
 8004c74:	f504 7b7c 	add.w	fp, r4, #1008	; 0x3f0
 8004c78:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8004c7c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004c80:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 8004c84:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8004c88:	4f54      	ldr	r7, [pc, #336]	; (8004ddc <_GLOBAL__sub_I_REG_FIFO+0x1500>)
 8004c8a:	f204 4a0c 	addw	sl, r4, #1036	; 0x40c
 8004c8e:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8004c92:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004c94:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8004c98:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004c9c:	4e50      	ldr	r6, [pc, #320]	; (8004de0 <_GLOBAL__sub_I_REG_FIFO+0x1504>)
 8004c9e:	f504 6b85 	add.w	fp, r4, #1064	; 0x428
 8004ca2:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8004ca6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004ca8:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 8004cac:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004cb0:	4d4c      	ldr	r5, [pc, #304]	; (8004de4 <_GLOBAL__sub_I_REG_FIFO+0x1508>)
 8004cb2:	f204 4a44 	addw	sl, r4, #1092	; 0x444
 8004cb6:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8004cba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cbc:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8004cc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004cc4:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8004e04 <_GLOBAL__sub_I_REG_FIFO+0x1528>
 8004cc8:	f504 6b8c 	add.w	fp, r4, #1120	; 0x460
 8004ccc:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8004cd0:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8004cd4:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 8004cd8:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8004cdc:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8004e08 <_GLOBAL__sub_I_REG_FIFO+0x152c>
 8004ce0:	f204 497c 	addw	r9, r4, #1148	; 0x47c
 8004ce4:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8004ce8:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8004cec:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8004cf0:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8004cf4:	f8df e114 	ldr.w	lr, [pc, #276]	; 8004e0c <_GLOBAL__sub_I_REG_FIFO+0x1530>
 8004cf8:	f504 6b93 	add.w	fp, r4, #1176	; 0x498
 8004cfc:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8004d00:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004d04:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 8004d08:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8004d0c:	f8df c100 	ldr.w	ip, [pc, #256]	; 8004e10 <_GLOBAL__sub_I_REG_FIFO+0x1534>
 8004d10:	f204 49b4 	addw	r9, r4, #1204	; 0x4b4
 8004d14:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8004d18:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004d1c:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8004d20:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8004d24:	4f30      	ldr	r7, [pc, #192]	; (8004de8 <_GLOBAL__sub_I_REG_FIFO+0x150c>)
 8004d26:	f504 6b9a 	add.w	fp, r4, #1232	; 0x4d0
 8004d2a:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8004d2e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004d30:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 8004d34:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004d38:	4e2c      	ldr	r6, [pc, #176]	; (8004dec <_GLOBAL__sub_I_REG_FIFO+0x1510>)
 8004d3a:	f204 49ec 	addw	r9, r4, #1260	; 0x4ec
 8004d3e:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8004d42:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004d44:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8004d48:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004d4c:	4d28      	ldr	r5, [pc, #160]	; (8004df0 <_GLOBAL__sub_I_REG_FIFO+0x1514>)
 8004d4e:	f504 6ba1 	add.w	fp, r4, #1288	; 0x508
 8004d52:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8004d56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d58:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 8004d5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004d60:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8004e14 <_GLOBAL__sub_I_REG_FIFO+0x1538>
 8004d64:	f204 5924 	addw	r9, r4, #1316	; 0x524
 8004d68:	e056      	b.n	8004e18 <_GLOBAL__sub_I_REG_FIFO+0x153c>
 8004d6a:	bf00      	nop
 8004d6c:	200010d0 	.word	0x200010d0
 8004d70:	200012c8 	.word	0x200012c8
 8004d74:	200011e8 	.word	0x200011e8
 8004d78:	20001274 	.word	0x20001274
 8004d7c:	200012ac 	.word	0x200012ac
 8004d80:	2000123c 	.word	0x2000123c
 8004d84:	20001258 	.word	0x20001258
 8004d88:	2000115c 	.word	0x2000115c
 8004d8c:	20001140 	.word	0x20001140
 8004d90:	20001124 	.word	0x20001124
 8004d94:	20000fd4 	.word	0x20000fd4
 8004d98:	20001060 	.word	0x20001060
 8004d9c:	20000ff0 	.word	0x20000ff0
 8004da0:	20001044 	.word	0x20001044
 8004da4:	200014c0 	.word	0x200014c0
 8004da8:	2000146c 	.word	0x2000146c
 8004dac:	20001338 	.word	0x20001338
 8004db0:	200015d8 	.word	0x200015d8
 8004db4:	20001584 	.word	0x20001584
 8004db8:	20000e14 	.word	0x20000e14
 8004dbc:	20000f80 	.word	0x20000f80
 8004dc0:	20000ddc 	.word	0x20000ddc
 8004dc4:	200014a4 	.word	0x200014a4
 8004dc8:	20001450 	.word	0x20001450
 8004dcc:	2000131c 	.word	0x2000131c
 8004dd0:	200015a0 	.word	0x200015a0
 8004dd4:	20001568 	.word	0x20001568
 8004dd8:	20000df8 	.word	0x20000df8
 8004ddc:	200015f4 	.word	0x200015f4
 8004de0:	20001434 	.word	0x20001434
 8004de4:	20001220 	.word	0x20001220
 8004de8:	20000e4c 	.word	0x20000e4c
 8004dec:	20000f9c 	.word	0x20000f9c
 8004df0:	20000da4 	.word	0x20000da4
 8004df4:	20000f64 	.word	0x20000f64
 8004df8:	20000dc0 	.word	0x20000dc0
 8004dfc:	20001028 	.word	0x20001028
 8004e00:	200015bc 	.word	0x200015bc
 8004e04:	20001300 	.word	0x20001300
 8004e08:	200012e4 	.word	0x200012e4
 8004e0c:	200013fc 	.word	0x200013fc
 8004e10:	200013a8 	.word	0x200013a8
 8004e14:	20000e30 	.word	0x20000e30
 8004e18:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8004e1c:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8004e20:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8004e24:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8004e28:	f8df 8360 	ldr.w	r8, [pc, #864]	; 800518c <_GLOBAL__sub_I_REG_FIFO+0x18b0>
 8004e2c:	f504 6aa8 	add.w	sl, r4, #1344	; 0x540
 8004e30:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8004e34:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8004e38:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8004e3c:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8004e40:	f8df e34c 	ldr.w	lr, [pc, #844]	; 8005190 <_GLOBAL__sub_I_REG_FIFO+0x18b4>
 8004e44:	f204 585c 	addw	r8, r4, #1372	; 0x55c
 8004e48:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8004e4c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004e50:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8004e54:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8004e58:	f8df c338 	ldr.w	ip, [pc, #824]	; 8005194 <_GLOBAL__sub_I_REG_FIFO+0x18b8>
 8004e5c:	f504 6eaf 	add.w	lr, r4, #1400	; 0x578
 8004e60:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8004e64:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004e68:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8004e6c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8004e70:	4fa7      	ldr	r7, [pc, #668]	; (8005110 <_GLOBAL__sub_I_REG_FIFO+0x1834>)
 8004e72:	f204 5c94 	addw	ip, r4, #1428	; 0x594
 8004e76:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8004e7a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004e7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004e80:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004e84:	4ea3      	ldr	r6, [pc, #652]	; (8005114 <_GLOBAL__sub_I_REG_FIFO+0x1838>)
 8004e86:	f504 67b6 	add.w	r7, r4, #1456	; 0x5b0
 8004e8a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8004e8e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004e90:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004e92:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004e96:	4da0      	ldr	r5, [pc, #640]	; (8005118 <_GLOBAL__sub_I_REG_FIFO+0x183c>)
 8004e98:	f204 56cc 	addw	r6, r4, #1484	; 0x5cc
 8004e9c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ea2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004ea4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ea8:	4d9c      	ldr	r5, [pc, #624]	; (800511c <_GLOBAL__sub_I_REG_FIFO+0x1840>)
 8004eaa:	f504 67bd 	add.w	r7, r4, #1512	; 0x5e8
 8004eae:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004eb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004eb4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004eb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004eba:	4d99      	ldr	r5, [pc, #612]	; (8005120 <_GLOBAL__sub_I_REG_FIFO+0x1844>)
 8004ebc:	f204 6604 	addw	r6, r4, #1540	; 0x604
 8004ec0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004ec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ec6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004ec8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ecc:	4d95      	ldr	r5, [pc, #596]	; (8005124 <_GLOBAL__sub_I_REG_FIFO+0x1848>)
 8004ece:	f504 67c4 	add.w	r7, r4, #1568	; 0x620
 8004ed2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004ed6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ed8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004eda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ede:	4d92      	ldr	r5, [pc, #584]	; (8005128 <_GLOBAL__sub_I_REG_FIFO+0x184c>)
 8004ee0:	f204 663c 	addw	r6, r4, #1596	; 0x63c
 8004ee4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004eea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004eec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ef0:	4d8e      	ldr	r5, [pc, #568]	; (800512c <_GLOBAL__sub_I_REG_FIFO+0x1850>)
 8004ef2:	f504 67cb 	add.w	r7, r4, #1624	; 0x658
 8004ef6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004efc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004efe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004f02:	4d8b      	ldr	r5, [pc, #556]	; (8005130 <_GLOBAL__sub_I_REG_FIFO+0x1854>)
 8004f04:	f204 6674 	addw	r6, r4, #1652	; 0x674
 8004f08:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004f0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f0e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004f10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004f14:	4d87      	ldr	r5, [pc, #540]	; (8005134 <_GLOBAL__sub_I_REG_FIFO+0x1858>)
 8004f16:	f504 67d2 	add.w	r7, r4, #1680	; 0x690
 8004f1a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004f1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f20:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004f22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004f26:	4d84      	ldr	r5, [pc, #528]	; (8005138 <_GLOBAL__sub_I_REG_FIFO+0x185c>)
 8004f28:	f204 66ac 	addw	r6, r4, #1708	; 0x6ac
 8004f2c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f32:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004f34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004f38:	4d80      	ldr	r5, [pc, #512]	; (800513c <_GLOBAL__sub_I_REG_FIFO+0x1860>)
 8004f3a:	f504 67d9 	add.w	r7, r4, #1736	; 0x6c8
 8004f3e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f44:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004f46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004f4a:	4d7d      	ldr	r5, [pc, #500]	; (8005140 <_GLOBAL__sub_I_REG_FIFO+0x1864>)
 8004f4c:	f204 66e4 	addw	r6, r4, #1764	; 0x6e4
 8004f50:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f56:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004f58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004f5c:	4d79      	ldr	r5, [pc, #484]	; (8005144 <_GLOBAL__sub_I_REG_FIFO+0x1868>)
 8004f5e:	f504 67e0 	add.w	r7, r4, #1792	; 0x700
 8004f62:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004f66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f68:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004f6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004f6e:	4d76      	ldr	r5, [pc, #472]	; (8005148 <_GLOBAL__sub_I_REG_FIFO+0x186c>)
 8004f70:	f204 761c 	addw	r6, r4, #1820	; 0x71c
 8004f74:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f7a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004f7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004f80:	4d72      	ldr	r5, [pc, #456]	; (800514c <_GLOBAL__sub_I_REG_FIFO+0x1870>)
 8004f82:	f504 67e7 	add.w	r7, r4, #1848	; 0x738
 8004f86:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004f8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f8c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004f8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004f92:	4d6f      	ldr	r5, [pc, #444]	; (8005150 <_GLOBAL__sub_I_REG_FIFO+0x1874>)
 8004f94:	f204 7654 	addw	r6, r4, #1876	; 0x754
 8004f98:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f9e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004fa0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004fa4:	4d6b      	ldr	r5, [pc, #428]	; (8005154 <_GLOBAL__sub_I_REG_FIFO+0x1878>)
 8004fa6:	f504 67ee 	add.w	r7, r4, #1904	; 0x770
 8004faa:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fb0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004fb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004fb6:	4d68      	ldr	r5, [pc, #416]	; (8005158 <_GLOBAL__sub_I_REG_FIFO+0x187c>)
 8004fb8:	f204 768c 	addw	r6, r4, #1932	; 0x78c
 8004fbc:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fc2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004fc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004fc8:	4d64      	ldr	r5, [pc, #400]	; (800515c <_GLOBAL__sub_I_REG_FIFO+0x1880>)
 8004fca:	f504 67f5 	add.w	r7, r4, #1960	; 0x7a8
 8004fce:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004fd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fd4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004fd6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004fda:	4d61      	ldr	r5, [pc, #388]	; (8005160 <_GLOBAL__sub_I_REG_FIFO+0x1884>)
 8004fdc:	f204 76c4 	addw	r6, r4, #1988	; 0x7c4
 8004fe0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fe6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004fe8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004fec:	4d5d      	ldr	r5, [pc, #372]	; (8005164 <_GLOBAL__sub_I_REG_FIFO+0x1888>)
 8004fee:	f504 67fc 	add.w	r7, r4, #2016	; 0x7e0
 8004ff2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ff8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004ffa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ffe:	4d5a      	ldr	r5, [pc, #360]	; (8005168 <_GLOBAL__sub_I_REG_FIFO+0x188c>)
 8005000:	f204 76fc 	addw	r6, r4, #2044	; 0x7fc
 8005004:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8005008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800500a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800500c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005010:	4d56      	ldr	r5, [pc, #344]	; (800516c <_GLOBAL__sub_I_REG_FIFO+0x1890>)
 8005012:	f604 0718 	addw	r7, r4, #2072	; 0x818
 8005016:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800501a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800501c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800501e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005022:	4d53      	ldr	r5, [pc, #332]	; (8005170 <_GLOBAL__sub_I_REG_FIFO+0x1894>)
 8005024:	f604 0634 	addw	r6, r4, #2100	; 0x834
 8005028:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800502c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800502e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005030:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005034:	4d4f      	ldr	r5, [pc, #316]	; (8005174 <_GLOBAL__sub_I_REG_FIFO+0x1898>)
 8005036:	f504 6705 	add.w	r7, r4, #2128	; 0x850
 800503a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800503e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005040:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005042:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005046:	4d4c      	ldr	r5, [pc, #304]	; (8005178 <_GLOBAL__sub_I_REG_FIFO+0x189c>)
 8005048:	f604 0c6c 	addw	ip, r4, #2156	; 0x86c
 800504c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8005050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005052:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005056:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800505a:	4d48      	ldr	r5, [pc, #288]	; (800517c <_GLOBAL__sub_I_REG_FIFO+0x18a0>)
 800505c:	f604 0e88 	addw	lr, r4, #2184	; 0x888
 8005060:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005066:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800506a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800506e:	f8df c128 	ldr.w	ip, [pc, #296]	; 8005198 <_GLOBAL__sub_I_REG_FIFO+0x18bc>
 8005072:	f604 08a4 	addw	r8, r4, #2212	; 0x8a4
 8005076:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 800507a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800507e:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8005082:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8005086:	f8df c114 	ldr.w	ip, [pc, #276]	; 800519c <_GLOBAL__sub_I_REG_FIFO+0x18c0>
 800508a:	f504 6e0c 	add.w	lr, r4, #2240	; 0x8c0
 800508e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8005092:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005096:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800509a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800509e:	f8df c100 	ldr.w	ip, [pc, #256]	; 80051a0 <_GLOBAL__sub_I_REG_FIFO+0x18c4>
 80050a2:	f604 08dc 	addw	r8, r4, #2268	; 0x8dc
 80050a6:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 80050aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80050ae:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80050b2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80050b6:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 80051a4 <_GLOBAL__sub_I_REG_FIFO+0x18c8>
 80050ba:	f604 0ef8 	addw	lr, r4, #2296	; 0x8f8
 80050be:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 80050c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80050c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80050ca:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80050ce:	4e2c      	ldr	r6, [pc, #176]	; (8005180 <_GLOBAL__sub_I_REG_FIFO+0x18a4>)
 80050d0:	f604 1c14 	addw	ip, r4, #2324	; 0x914
 80050d4:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 80050d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80050da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80050de:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80050e2:	4f28      	ldr	r7, [pc, #160]	; (8005184 <_GLOBAL__sub_I_REG_FIFO+0x18a8>)
 80050e4:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 80050e8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80050ec:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80050ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80050f0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80050f4:	4d24      	ldr	r5, [pc, #144]	; (8005188 <_GLOBAL__sub_I_REG_FIFO+0x18ac>)
 80050f6:	f604 144c 	addw	r4, r4, #2380	; 0x94c
 80050fa:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80050fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005100:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005102:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005106:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800510a:	b007      	add	sp, #28
 800510c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005110:	20001488 	.word	0x20001488
 8005114:	200014f8 	.word	0x200014f8
 8005118:	200013e0 	.word	0x200013e0
 800511c:	20001354 	.word	0x20001354
 8005120:	20001370 	.word	0x20001370
 8005124:	200010b4 	.word	0x200010b4
 8005128:	2000100c 	.word	0x2000100c
 800512c:	20001194 	.word	0x20001194
 8005130:	20000cc4 	.word	0x20000cc4
 8005134:	200013c4 	.word	0x200013c4
 8005138:	20001098 	.word	0x20001098
 800513c:	20001418 	.word	0x20001418
 8005140:	20000e68 	.word	0x20000e68
 8005144:	20001108 	.word	0x20001108
 8005148:	20000e84 	.word	0x20000e84
 800514c:	20001514 	.word	0x20001514
 8005150:	20000ea0 	.word	0x20000ea0
 8005154:	20000ebc 	.word	0x20000ebc
 8005158:	20000ed8 	.word	0x20000ed8
 800515c:	20000ef4 	.word	0x20000ef4
 8005160:	20000f10 	.word	0x20000f10
 8005164:	20000f2c 	.word	0x20000f2c
 8005168:	20001610 	.word	0x20001610
 800516c:	20000f48 	.word	0x20000f48
 8005170:	20001530 	.word	0x20001530
 8005174:	20001290 	.word	0x20001290
 8005178:	2000107c 	.word	0x2000107c
 800517c:	20000d88 	.word	0x20000d88
 8005180:	20000d50 	.word	0x20000d50
 8005184:	20000d6c 	.word	0x20000d6c
 8005188:	2000138c 	.word	0x2000138c
 800518c:	200010ec 	.word	0x200010ec
 8005190:	200014dc 	.word	0x200014dc
 8005194:	2000154c 	.word	0x2000154c
 8005198:	20000ce0 	.word	0x20000ce0
 800519c:	20000cfc 	.word	0x20000cfc
 80051a0:	20000d18 	.word	0x20000d18
 80051a4:	20000d34 	.word	0x20000d34

080051a8 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH>:
const uint16_t LORA_ADDRESS_BRANCH = 24 - LORA_ADDRESS_GROUP; 

Register Hendler[11] = {Register(0, 8, 0), Register(1, 1, 7), Register(1, 7, 0), Register(2, 8, 0),
                        Register(3, 8, 0), Register(4, 1, 7), Register(4, 7, 0), Register(5, 8, 0),
                        Register(6, 8, 0),
                        Register(7, 8, 0), Register(8, 8, 0)};
 80051a8:	2300      	movs	r3, #0
bool Packet_System::set_command(uint8_t com) {
    return true;
}
bool Packet_System::set_data(uint8_t *data, uint8_t len) {
    return true;
}
 80051aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ae:	4ec7      	ldr	r6, [pc, #796]	; (80054cc <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x324>)
 80051b0:	b087      	sub	sp, #28
 80051b2:	4619      	mov	r1, r3
 80051b4:	4630      	mov	r0, r6
 80051b6:	2208      	movs	r2, #8
 80051b8:	f7fb ffc8 	bl	800114c <_ZN8RegisterC1Ethh>
 80051bc:	2201      	movs	r2, #1
 80051be:	f106 0b10 	add.w	fp, r6, #16
 80051c2:	4611      	mov	r1, r2
 80051c4:	f106 0008 	add.w	r0, r6, #8
 80051c8:	2307      	movs	r3, #7
 80051ca:	f7fb ffbf 	bl	800114c <_ZN8RegisterC1Ethh>
 80051ce:	4658      	mov	r0, fp
 80051d0:	2300      	movs	r3, #0
 80051d2:	2207      	movs	r2, #7
 80051d4:	2101      	movs	r1, #1
 80051d6:	f7fb ffb9 	bl	800114c <_ZN8RegisterC1Ethh>
 80051da:	f106 0a20 	add.w	sl, r6, #32
 80051de:	f106 0018 	add.w	r0, r6, #24
 80051e2:	2300      	movs	r3, #0
 80051e4:	2208      	movs	r2, #8
 80051e6:	2102      	movs	r1, #2
 80051e8:	f7fb ffb0 	bl	800114c <_ZN8RegisterC1Ethh>
 80051ec:	4650      	mov	r0, sl
 80051ee:	2300      	movs	r3, #0
 80051f0:	2208      	movs	r2, #8
 80051f2:	2103      	movs	r1, #3
 80051f4:	f7fb ffaa 	bl	800114c <_ZN8RegisterC1Ethh>
 80051f8:	f106 0930 	add.w	r9, r6, #48	; 0x30
 80051fc:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8005200:	2307      	movs	r3, #7
 8005202:	2201      	movs	r2, #1
 8005204:	2104      	movs	r1, #4
 8005206:	f7fb ffa1 	bl	800114c <_ZN8RegisterC1Ethh>
 800520a:	4648      	mov	r0, r9
 800520c:	2300      	movs	r3, #0
 800520e:	2207      	movs	r2, #7
 8005210:	2104      	movs	r1, #4
 8005212:	f7fb ff9b 	bl	800114c <_ZN8RegisterC1Ethh>
 8005216:	f106 0840 	add.w	r8, r6, #64	; 0x40
 800521a:	f106 0038 	add.w	r0, r6, #56	; 0x38
 800521e:	2300      	movs	r3, #0
 8005220:	2208      	movs	r2, #8
 8005222:	2105      	movs	r1, #5
 8005224:	f7fb ff92 	bl	800114c <_ZN8RegisterC1Ethh>
 8005228:	4640      	mov	r0, r8
 800522a:	2300      	movs	r3, #0
 800522c:	2208      	movs	r2, #8
 800522e:	2106      	movs	r1, #6
 8005230:	f7fb ff8c 	bl	800114c <_ZN8RegisterC1Ethh>
 8005234:	f106 0048 	add.w	r0, r6, #72	; 0x48
 8005238:	2300      	movs	r3, #0
 800523a:	2208      	movs	r2, #8
 800523c:	2107      	movs	r1, #7

Address_field field_dest_adr_group(&Hendler[0], 2, true),  // Destination Address group (адресс группы устройства назначения)
 800523e:	2400      	movs	r4, #0
                        Register(7, 8, 0), Register(8, 8, 0)};
 8005240:	f7fb ff84 	bl	800114c <_ZN8RegisterC1Ethh>
 8005244:	2208      	movs	r2, #8
Address_field field_dest_adr_group(&Hendler[0], 2, true),  // Destination Address group (адресс группы устройства назначения)
 8005246:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800524a:	2577      	movs	r5, #119	; 0x77
                        Register(7, 8, 0), Register(8, 8, 0)};
 800524c:	4611      	mov	r1, r2
 800524e:	4623      	mov	r3, r4
 8005250:	f106 0050 	add.w	r0, r6, #80	; 0x50
 8005254:	f7fb ff7a 	bl	800114c <_ZN8RegisterC1Ethh>
Address_field field_dest_adr_group(&Hendler[0], 2, true),  // Destination Address group (адресс группы устройства назначения)
 8005258:	4631      	mov	r1, r6
 800525a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800525e:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8005262:	9500      	str	r5, [sp, #0]
 8005264:	2301      	movs	r3, #1
 8005266:	2202      	movs	r2, #2
 8005268:	4899      	ldr	r0, [pc, #612]	; (80054d0 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x328>)
 800526a:	f7fb ffc3 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
              field_dest_adr_branch(&Hendler[2], 2, true), // Destination Address branch (адресс ветви устройства назначения)
 800526e:	4659      	mov	r1, fp
 8005270:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005274:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8005278:	9500      	str	r5, [sp, #0]
 800527a:	2301      	movs	r3, #1
 800527c:	2202      	movs	r2, #2
 800527e:	4895      	ldr	r0, [pc, #596]	; (80054d4 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x32c>)
 8005280:	f7fb ffb8 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
              field_sour_adr_group(&Hendler[4], 2, true),  // Source Address group (адресс группы отправляющего устройства)
 8005284:	4651      	mov	r1, sl
 8005286:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800528a:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800528e:	9500      	str	r5, [sp, #0]
 8005290:	2301      	movs	r3, #1
 8005292:	2202      	movs	r2, #2
 8005294:	4890      	ldr	r0, [pc, #576]	; (80054d8 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x330>)
 8005296:	f7fb ffad 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
              field_sour_adr_branch(&Hendler[6], 2, true), // Source Address branch (адресс ветви отправляющего устройства)
 800529a:	4649      	mov	r1, r9
 800529c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80052a0:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80052a4:	9500      	str	r5, [sp, #0]
 80052a6:	2301      	movs	r3, #1
 80052a8:	2202      	movs	r2, #2
 80052aa:	488c      	ldr	r0, [pc, #560]	; (80054dc <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x334>)
 80052ac:	f7fb ffa2 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
              field_type(&Hendler[8], 1, true),   // Packet Type (тип пакетп)
 80052b0:	2301      	movs	r3, #1
 80052b2:	4641      	mov	r1, r8
 80052b4:	461a      	mov	r2, r3
                                             &field_sour_adr_group, &field_sour_adr_branch, 
                                             &field_type, &field_number};


// Типы данных
Register register_PWM[2]   = {Register(0, 4, 0), Register(1, 8, 0)},
 80052b6:	f8df 8244 	ldr.w	r8, [pc, #580]	; 80054fc <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x354>
              field_type(&Hendler[8], 1, true),   // Packet Type (тип пакетп)
 80052ba:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80052be:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80052c2:	9500      	str	r5, [sp, #0]
 80052c4:	4886      	ldr	r0, [pc, #536]	; (80054e0 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x338>)
 80052c6:	f7fb ff95 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
              field_number(&Hendler[9], 2, true); // Packet Number (номер пакета)
 80052ca:	f106 0148 	add.w	r1, r6, #72	; 0x48
 80052ce:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80052d2:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80052d6:	9500      	str	r5, [sp, #0]
 80052d8:	2301      	movs	r3, #1
 80052da:	2202      	movs	r2, #2
 80052dc:	4881      	ldr	r0, [pc, #516]	; (80054e4 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x33c>)
 80052de:	f7fb ff89 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Register register_PWM[2]   = {Register(0, 4, 0), Register(1, 8, 0)},
 80052e2:	4623      	mov	r3, r4
 80052e4:	4621      	mov	r1, r4
 80052e6:	4640      	mov	r0, r8
 80052e8:	2204      	movs	r2, #4
 80052ea:	f7fb ff2f 	bl	800114c <_ZN8RegisterC1Ethh>
         register_byte[1]  = {Register(0, 8, 0)},
         register_float[4] = {Register(0, 8, 0), Register(1, 8, 0), Register(2, 8, 0), Register(3, 8, 0)},
 80052ee:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8005500 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x358>
Register register_PWM[2]   = {Register(0, 4, 0), Register(1, 8, 0)},
 80052f2:	4623      	mov	r3, r4
 80052f4:	f108 0008 	add.w	r0, r8, #8
 80052f8:	2208      	movs	r2, #8
 80052fa:	2101      	movs	r1, #1
 80052fc:	f7fb ff26 	bl	800114c <_ZN8RegisterC1Ethh>
         register_byte[1]  = {Register(0, 8, 0)},
 8005300:	4623      	mov	r3, r4
 8005302:	4621      	mov	r1, r4
 8005304:	2208      	movs	r2, #8
 8005306:	4878      	ldr	r0, [pc, #480]	; (80054e8 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x340>)
 8005308:	f7fb ff20 	bl	800114c <_ZN8RegisterC1Ethh>
         register_float[4] = {Register(0, 8, 0), Register(1, 8, 0), Register(2, 8, 0), Register(3, 8, 0)},
 800530c:	4623      	mov	r3, r4
 800530e:	4621      	mov	r1, r4
 8005310:	4648      	mov	r0, r9
 8005312:	2208      	movs	r2, #8
 8005314:	f7fb ff1a 	bl	800114c <_ZN8RegisterC1Ethh>
 8005318:	4623      	mov	r3, r4
 800531a:	f109 0008 	add.w	r0, r9, #8
 800531e:	2208      	movs	r2, #8
 8005320:	2101      	movs	r1, #1
         register_bit[8]   = {Register(0, 1, 0), Register(0, 1, 1), Register(0, 1, 2), Register(0, 1, 3),
                              Register(0, 1, 4), Register(0, 1, 5), Register(0, 1, 6), Register(0, 1, 7)};
 8005322:	4e72      	ldr	r6, [pc, #456]	; (80054ec <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x344>)
         register_float[4] = {Register(0, 8, 0), Register(1, 8, 0), Register(2, 8, 0), Register(3, 8, 0)},
 8005324:	f7fb ff12 	bl	800114c <_ZN8RegisterC1Ethh>
 8005328:	4623      	mov	r3, r4
 800532a:	f109 0010 	add.w	r0, r9, #16
 800532e:	2208      	movs	r2, #8
 8005330:	2102      	movs	r1, #2
 8005332:	f7fb ff0b 	bl	800114c <_ZN8RegisterC1Ethh>
 8005336:	4623      	mov	r3, r4
 8005338:	f109 0018 	add.w	r0, r9, #24
 800533c:	2208      	movs	r2, #8
 800533e:	2103      	movs	r1, #3
 8005340:	f7fb ff04 	bl	800114c <_ZN8RegisterC1Ethh>
                              Register(0, 1, 4), Register(0, 1, 5), Register(0, 1, 6), Register(0, 1, 7)};
 8005344:	4623      	mov	r3, r4
 8005346:	4621      	mov	r1, r4
 8005348:	4630      	mov	r0, r6
 800534a:	2201      	movs	r2, #1
 800534c:	f7fb fefe 	bl	800114c <_ZN8RegisterC1Ethh>
 8005350:	2301      	movs	r3, #1
 8005352:	4621      	mov	r1, r4
 8005354:	461a      	mov	r2, r3
 8005356:	f106 0008 	add.w	r0, r6, #8
 800535a:	f7fb fef7 	bl	800114c <_ZN8RegisterC1Ethh>
 800535e:	4621      	mov	r1, r4
 8005360:	f106 0010 	add.w	r0, r6, #16
 8005364:	2302      	movs	r3, #2
 8005366:	2201      	movs	r2, #1
 8005368:	f7fb fef0 	bl	800114c <_ZN8RegisterC1Ethh>
 800536c:	4621      	mov	r1, r4
 800536e:	f106 0018 	add.w	r0, r6, #24
 8005372:	2303      	movs	r3, #3
 8005374:	2201      	movs	r2, #1
 8005376:	f7fb fee9 	bl	800114c <_ZN8RegisterC1Ethh>
 800537a:	f106 0a28 	add.w	sl, r6, #40	; 0x28
 800537e:	4621      	mov	r1, r4
 8005380:	f106 0020 	add.w	r0, r6, #32
 8005384:	2304      	movs	r3, #4
 8005386:	2201      	movs	r2, #1
 8005388:	f7fb fee0 	bl	800114c <_ZN8RegisterC1Ethh>
 800538c:	f106 0b30 	add.w	fp, r6, #48	; 0x30
 8005390:	4621      	mov	r1, r4
 8005392:	4650      	mov	r0, sl
 8005394:	2305      	movs	r3, #5
 8005396:	2201      	movs	r2, #1
 8005398:	f7fb fed8 	bl	800114c <_ZN8RegisterC1Ethh>
 800539c:	4621      	mov	r1, r4
 800539e:	4658      	mov	r0, fp
 80053a0:	2306      	movs	r3, #6
 80053a2:	2201      	movs	r2, #1
 80053a4:	f7fb fed2 	bl	800114c <_ZN8RegisterC1Ethh>
 80053a8:	4621      	mov	r1, r4
 80053aa:	f106 0038 	add.w	r0, r6, #56	; 0x38
 80053ae:	2307      	movs	r3, #7
 80053b0:	2201      	movs	r2, #1
 80053b2:	f7fb fecb 	bl	800114c <_ZN8RegisterC1Ethh>

Address_field field_PWM(&register_PWM[0], 2, true),
 80053b6:	4641      	mov	r1, r8
 80053b8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80053bc:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80053c0:	9500      	str	r5, [sp, #0]
 80053c2:	2301      	movs	r3, #1
 80053c4:	2202      	movs	r2, #2
 80053c6:	484a      	ldr	r0, [pc, #296]	; (80054f0 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x348>)
 80053c8:	f7fb ff14 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
              field_byte(&register_byte[0]),
              field_float(&register_float[0], 4, false),
              field_bit[8] = {Address_field(&register_bit[0]), Address_field(&register_bit[1]), 
                              Address_field(&register_bit[2]), Address_field(&register_bit[3]), 
                              Address_field(&register_bit[4]), Address_field(&register_bit[5]), 
                              Address_field(&register_bit[6]), Address_field(&register_bit[7])};
 80053cc:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8005504 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x35c>
              field_byte(&register_byte[0]),
 80053d0:	4623      	mov	r3, r4
 80053d2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80053d6:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80053da:	9500      	str	r5, [sp, #0]
 80053dc:	4942      	ldr	r1, [pc, #264]	; (80054e8 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x340>)
 80053de:	2201      	movs	r2, #1
 80053e0:	4844      	ldr	r0, [pc, #272]	; (80054f4 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x34c>)
 80053e2:	f7fb ff07 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
              field_float(&register_float[0], 4, false),
 80053e6:	4649      	mov	r1, r9
 80053e8:	4623      	mov	r3, r4
 80053ea:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80053ee:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80053f2:	9500      	str	r5, [sp, #0]
 80053f4:	2204      	movs	r2, #4
 80053f6:	4840      	ldr	r0, [pc, #256]	; (80054f8 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x350>)
 80053f8:	f7fb fefc 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
                              Address_field(&register_bit[6]), Address_field(&register_bit[7])};
 80053fc:	4631      	mov	r1, r6
 80053fe:	4623      	mov	r3, r4
 8005400:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005404:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8005408:	9500      	str	r5, [sp, #0]
 800540a:	4640      	mov	r0, r8
 800540c:	2201      	movs	r2, #1
 800540e:	f7fb fef1 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 8005412:	f106 0108 	add.w	r1, r6, #8
 8005416:	4623      	mov	r3, r4
 8005418:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800541c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8005420:	9500      	str	r5, [sp, #0]
 8005422:	f108 001c 	add.w	r0, r8, #28
 8005426:	2201      	movs	r2, #1
 8005428:	f7fb fee4 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 800542c:	f106 0110 	add.w	r1, r6, #16
 8005430:	4623      	mov	r3, r4
 8005432:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005436:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800543a:	9500      	str	r5, [sp, #0]
 800543c:	f108 0038 	add.w	r0, r8, #56	; 0x38
 8005440:	2201      	movs	r2, #1
 8005442:	f7fb fed7 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 8005446:	f106 0118 	add.w	r1, r6, #24
 800544a:	4623      	mov	r3, r4
 800544c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005450:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8005454:	9500      	str	r5, [sp, #0]
 8005456:	f108 0054 	add.w	r0, r8, #84	; 0x54
 800545a:	2201      	movs	r2, #1
 800545c:	f7fb feca 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 8005460:	f106 0120 	add.w	r1, r6, #32
 8005464:	4623      	mov	r3, r4
 8005466:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800546a:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800546e:	9500      	str	r5, [sp, #0]
 8005470:	f108 0070 	add.w	r0, r8, #112	; 0x70
 8005474:	2201      	movs	r2, #1
 8005476:	f7fb febd 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 800547a:	4651      	mov	r1, sl
 800547c:	4623      	mov	r3, r4
 800547e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005482:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8005486:	9500      	str	r5, [sp, #0]
 8005488:	f108 008c 	add.w	r0, r8, #140	; 0x8c
 800548c:	2201      	movs	r2, #1
 800548e:	f7fb feb1 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 8005492:	4659      	mov	r1, fp
 8005494:	4623      	mov	r3, r4
 8005496:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800549a:	9702      	str	r7, [sp, #8]
 800549c:	e9cd 5400 	strd	r5, r4, [sp]
 80054a0:	f108 00a8 	add.w	r0, r8, #168	; 0xa8
 80054a4:	2201      	movs	r2, #1
 80054a6:	f7fb fea5 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 80054aa:	f106 0138 	add.w	r1, r6, #56	; 0x38
 80054ae:	9500      	str	r5, [sp, #0]
 80054b0:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80054b4:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80054b8:	4623      	mov	r3, r4
 80054ba:	f108 00c4 	add.w	r0, r8, #196	; 0xc4
 80054be:	2201      	movs	r2, #1
 80054c0:	f7fb fe98 	bl	80011f4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 80054c4:	b007      	add	sp, #28
 80054c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ca:	bf00      	nop
 80054cc:	20001924 	.word	0x20001924
 80054d0:	20001ab0 	.word	0x20001ab0
 80054d4:	20001a94 	.word	0x20001a94
 80054d8:	20001b20 	.word	0x20001b20
 80054dc:	20001b04 	.word	0x20001b04
 80054e0:	20001b3c 	.word	0x20001b3c
 80054e4:	20001ae8 	.word	0x20001ae8
 80054e8:	20001ba8 	.word	0x20001ba8
 80054ec:	20001b68 	.word	0x20001b68
 80054f0:	2000197c 	.word	0x2000197c
 80054f4:	20001a78 	.word	0x20001a78
 80054f8:	20001acc 	.word	0x20001acc
 80054fc:	20001b58 	.word	0x20001b58
 8005500:	20001bb0 	.word	0x20001bb0
 8005504:	20001998 	.word	0x20001998

08005508 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8005508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800550c:	2a0a      	cmp	r2, #10
 800550e:	4617      	mov	r7, r2
 8005510:	b086      	sub	sp, #24
 8005512:	bf28      	it	cs
 8005514:	270a      	movcs	r7, #10
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 80b9 	beq.w	800568e <bme280_set_regs+0x186>
 800551c:	685c      	ldr	r4, [r3, #4]
 800551e:	2c00      	cmp	r4, #0
 8005520:	f000 80b5 	beq.w	800568e <bme280_set_regs+0x186>
 8005524:	689e      	ldr	r6, [r3, #8]
 8005526:	2e00      	cmp	r6, #0
 8005528:	f000 80b1 	beq.w	800568e <bme280_set_regs+0x186>
 800552c:	68dc      	ldr	r4, [r3, #12]
 800552e:	2c00      	cmp	r4, #0
 8005530:	f000 80ad 	beq.w	800568e <bme280_set_regs+0x186>
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8005534:	2800      	cmp	r0, #0
 8005536:	f000 80aa 	beq.w	800568e <bme280_set_regs+0x186>
 800553a:	2900      	cmp	r1, #0
 800553c:	f000 80a7 	beq.w	800568e <bme280_set_regs+0x186>
		if (len != 0) {
 8005540:	2a00      	cmp	r2, #0
 8005542:	f000 80a7 	beq.w	8005694 <bme280_set_regs+0x18c>
			if (dev->intf != BME280_I2C_INTF) {
 8005546:	789c      	ldrb	r4, [r3, #2]
			temp_buff[0] = reg_data[0];
 8005548:	780d      	ldrb	r5, [r1, #0]
			if (dev->intf != BME280_I2C_INTF) {
 800554a:	2c01      	cmp	r4, #1
			temp_buff[0] = reg_data[0];
 800554c:	f88d 5004 	strb.w	r5, [sp, #4]
			if (dev->intf != BME280_I2C_INTF) {
 8005550:	d06e      	beq.n	8005630 <bme280_set_regs+0x128>
 8005552:	4245      	negs	r5, r0
 8005554:	f005 0503 	and.w	r5, r5, #3
 8005558:	1e7c      	subs	r4, r7, #1
 800555a:	1cee      	adds	r6, r5, #3
 800555c:	b2e4      	uxtb	r4, r4
 800555e:	42b4      	cmp	r4, r6
 8005560:	fa5f f887 	uxtb.w	r8, r7
 8005564:	f0c0 8091 	bcc.w	800568a <bme280_set_regs+0x182>
 8005568:	2d00      	cmp	r5, #0
 800556a:	f000 8086 	beq.w	800567a <bme280_set_regs+0x172>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800556e:	7804      	ldrb	r4, [r0, #0]
 8005570:	2d01      	cmp	r5, #1
 8005572:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8005576:	7004      	strb	r4, [r0, #0]
 8005578:	f000 8085 	beq.w	8005686 <bme280_set_regs+0x17e>
 800557c:	7844      	ldrb	r4, [r0, #1]
 800557e:	2d03      	cmp	r5, #3
 8005580:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8005584:	7044      	strb	r4, [r0, #1]
 8005586:	d17b      	bne.n	8005680 <bme280_set_regs+0x178>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8005588:	46ae      	mov	lr, r5
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800558a:	7884      	ldrb	r4, [r0, #2]
 800558c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8005590:	7084      	strb	r4, [r0, #2]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8005592:	2600      	movs	r6, #0
 8005594:	eba8 0805 	sub.w	r8, r8, r5
 8005598:	fa5f f888 	uxtb.w	r8, r8
 800559c:	4405      	add	r5, r0
 800559e:	ea4f 0a98 	mov.w	sl, r8, lsr #2
 80055a2:	f1a5 0c04 	sub.w	ip, r5, #4
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80055a6:	f85c 4f04 	ldr.w	r4, [ip, #4]!
 80055aa:	3601      	adds	r6, #1
 80055ac:	fa5f f986 	uxtb.w	r9, r6
 80055b0:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 80055b4:	45ca      	cmp	sl, r9
 80055b6:	f845 4b04 	str.w	r4, [r5], #4
 80055ba:	d8f4      	bhi.n	80055a6 <bme280_set_regs+0x9e>
 80055bc:	f008 05fc 	and.w	r5, r8, #252	; 0xfc
 80055c0:	eb0e 0405 	add.w	r4, lr, r5
 80055c4:	45a8      	cmp	r8, r5
 80055c6:	b2e4      	uxtb	r4, r4
 80055c8:	d031      	beq.n	800562e <bme280_set_regs+0x126>
 80055ca:	5d06      	ldrb	r6, [r0, r4]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80055cc:	1c65      	adds	r5, r4, #1
 80055ce:	b2ed      	uxtb	r5, r5
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80055d0:	f006 067f 	and.w	r6, r6, #127	; 0x7f
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80055d4:	42bd      	cmp	r5, r7
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80055d6:	5506      	strb	r6, [r0, r4]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80055d8:	d229      	bcs.n	800562e <bme280_set_regs+0x126>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80055da:	f810 c005 	ldrb.w	ip, [r0, r5]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80055de:	1ca6      	adds	r6, r4, #2
 80055e0:	b2f6      	uxtb	r6, r6
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80055e2:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80055e6:	42b7      	cmp	r7, r6
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80055e8:	f800 c005 	strb.w	ip, [r0, r5]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80055ec:	d91f      	bls.n	800562e <bme280_set_regs+0x126>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80055ee:	f810 c006 	ldrb.w	ip, [r0, r6]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80055f2:	1ce5      	adds	r5, r4, #3
 80055f4:	b2ed      	uxtb	r5, r5
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80055f6:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80055fa:	42af      	cmp	r7, r5
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80055fc:	f800 c006 	strb.w	ip, [r0, r6]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8005600:	d915      	bls.n	800562e <bme280_set_regs+0x126>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8005602:	f810 c005 	ldrb.w	ip, [r0, r5]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8005606:	1d26      	adds	r6, r4, #4
 8005608:	b2f6      	uxtb	r6, r6
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800560a:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800560e:	42b7      	cmp	r7, r6
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8005610:	f800 c005 	strb.w	ip, [r0, r5]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8005614:	d90b      	bls.n	800562e <bme280_set_regs+0x126>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8005616:	5d85      	ldrb	r5, [r0, r6]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8005618:	3405      	adds	r4, #5
 800561a:	b2e4      	uxtb	r4, r4
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800561c:	f005 057f 	and.w	r5, r5, #127	; 0x7f
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8005620:	42a7      	cmp	r7, r4
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8005622:	5585      	strb	r5, [r0, r6]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8005624:	d903      	bls.n	800562e <bme280_set_regs+0x126>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8005626:	5d05      	ldrb	r5, [r0, r4]
 8005628:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 800562c:	5505      	strb	r5, [r0, r4]
 800562e:	689e      	ldr	r6, [r3, #8]
			if (len > 1) {
 8005630:	2a01      	cmp	r2, #1
 8005632:	d01f      	beq.n	8005674 <bme280_set_regs+0x16c>
 8005634:	aa01      	add	r2, sp, #4
 8005636:	4615      	mov	r5, r2
 8005638:	4684      	mov	ip, r0
 800563a:	2401      	movs	r4, #1
 800563c:	3401      	adds	r4, #1
		temp_buff[(index * 2) - 1] = reg_addr[index];
 800563e:	f81c 9f01 	ldrb.w	r9, [ip, #1]!
		temp_buff[index * 2] = reg_data[index];
 8005642:	f811 8f01 	ldrb.w	r8, [r1, #1]!
	for (index = 1; index < len; index++) {
 8005646:	fa5f fe84 	uxtb.w	lr, r4
 800564a:	4577      	cmp	r7, lr
		temp_buff[(index * 2) - 1] = reg_addr[index];
 800564c:	f885 9001 	strb.w	r9, [r5, #1]
		temp_buff[index * 2] = reg_data[index];
 8005650:	f805 8f02 	strb.w	r8, [r5, #2]!
	for (index = 1; index < len; index++) {
 8005654:	d8f2      	bhi.n	800563c <bme280_set_regs+0x134>
				temp_len = ((len * 2) - 1);
 8005656:	007f      	lsls	r7, r7, #1
 8005658:	3f01      	subs	r7, #1
 800565a:	b2bf      	uxth	r7, r7
 800565c:	461c      	mov	r4, r3
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 800565e:	7801      	ldrb	r1, [r0, #0]
 8005660:	463b      	mov	r3, r7
 8005662:	7860      	ldrb	r0, [r4, #1]
 8005664:	47b0      	blx	r6
				rslt = BME280_E_COMM_FAIL;
 8005666:	2800      	cmp	r0, #0
 8005668:	bf18      	it	ne
 800566a:	f06f 0003 	mvnne.w	r0, #3
}
 800566e:	b006      	add	sp, #24
 8005670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				temp_len = len;
 8005674:	4617      	mov	r7, r2
 8005676:	aa01      	add	r2, sp, #4
 8005678:	e7f0      	b.n	800565c <bme280_set_regs+0x154>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800567a:	f04f 0e00 	mov.w	lr, #0
 800567e:	e788      	b.n	8005592 <bme280_set_regs+0x8a>
 8005680:	f04f 0e02 	mov.w	lr, #2
 8005684:	e785      	b.n	8005592 <bme280_set_regs+0x8a>
 8005686:	46ae      	mov	lr, r5
 8005688:	e783      	b.n	8005592 <bme280_set_regs+0x8a>
 800568a:	2400      	movs	r4, #0
 800568c:	e79d      	b.n	80055ca <bme280_set_regs+0xc2>
		rslt = BME280_E_NULL_PTR;
 800568e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005692:	e7ec      	b.n	800566e <bme280_set_regs+0x166>
			rslt = BME280_E_INVALID_LEN;
 8005694:	f06f 0002 	mvn.w	r0, #2
 8005698:	e7e9      	b.n	800566e <bme280_set_regs+0x166>
 800569a:	bf00      	nop

0800569c <put_device_to_sleep>:
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 800569c:	2800      	cmp	r0, #0
 800569e:	f000 80ba 	beq.w	8005816 <put_device_to_sleep+0x17a>
{
 80056a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80056a6:	6845      	ldr	r5, [r0, #4]
{
 80056a8:	b089      	sub	sp, #36	; 0x24
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80056aa:	2d00      	cmp	r5, #0
 80056ac:	f000 808b 	beq.w	80057c6 <put_device_to_sleep+0x12a>
 80056b0:	6883      	ldr	r3, [r0, #8]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 8087 	beq.w	80057c6 <put_device_to_sleep+0x12a>
 80056b8:	68c3      	ldr	r3, [r0, #12]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 8083 	beq.w	80057c6 <put_device_to_sleep+0x12a>
 80056c0:	4604      	mov	r4, r0
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80056c2:	2304      	movs	r3, #4
 80056c4:	aa02      	add	r2, sp, #8
 80056c6:	21f2      	movs	r1, #242	; 0xf2
 80056c8:	7840      	ldrb	r0, [r0, #1]
 80056ca:	47a8      	blx	r5
		if (rslt != BME280_OK)
 80056cc:	2800      	cmp	r0, #0
 80056ce:	d17f      	bne.n	80057d0 <put_device_to_sleep+0x134>
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80056d0:	6863      	ldr	r3, [r4, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d077      	beq.n	80057c6 <put_device_to_sleep+0x12a>
 80056d6:	68a7      	ldr	r7, [r4, #8]
 80056d8:	2f00      	cmp	r7, #0
 80056da:	d074      	beq.n	80057c6 <put_device_to_sleep+0x12a>
 80056dc:	68e3      	ldr	r3, [r4, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d071      	beq.n	80057c6 <put_device_to_sleep+0x12a>
			temp_buff[0] = reg_data[0];
 80056e2:	22b6      	movs	r2, #182	; 0xb6
			if (dev->intf != BME280_I2C_INTF) {
 80056e4:	78a3      	ldrb	r3, [r4, #2]
			temp_buff[0] = reg_data[0];
 80056e6:	ad08      	add	r5, sp, #32
	uint8_t reg_addr = BME280_RESET_ADDR;
 80056e8:	2b01      	cmp	r3, #1
			temp_buff[0] = reg_data[0];
 80056ea:	f805 2d14 	strb.w	r2, [r5, #-20]!
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80056ee:	f04f 0301 	mov.w	r3, #1
 80056f2:	462a      	mov	r2, r5
 80056f4:	bf14      	ite	ne
 80056f6:	2160      	movne	r1, #96	; 0x60
 80056f8:	21e0      	moveq	r1, #224	; 0xe0
 80056fa:	7860      	ldrb	r0, [r4, #1]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80056fc:	f89d 6008 	ldrb.w	r6, [sp, #8]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8005700:	f89d 900a 	ldrb.w	r9, [sp, #10]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8005704:	f89d 800b 	ldrb.w	r8, [sp, #11]
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8005708:	47b8      	blx	r7
		dev->delay_ms(2);
 800570a:	68e3      	ldr	r3, [r4, #12]
			if (rslt != BME280_OK)
 800570c:	2800      	cmp	r0, #0
 800570e:	d17d      	bne.n	800580c <put_device_to_sleep+0x170>
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8005710:	27f2      	movs	r7, #242	; 0xf2
		dev->delay_ms(2);
 8005712:	2002      	movs	r0, #2
 8005714:	4798      	blx	r3
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8005716:	f006 0307 	and.w	r3, r6, #7
	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800571a:	a908      	add	r1, sp, #32
 800571c:	f801 3d1a 	strb.w	r3, [r1, #-26]!
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8005720:	2201      	movs	r2, #1
 8005722:	4623      	mov	r3, r4
 8005724:	4628      	mov	r0, r5
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8005726:	f88d 700c 	strb.w	r7, [sp, #12]
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800572a:	f7ff feed 	bl	8005508 <bme280_set_regs>
	if (rslt == BME280_OK) {
 800572e:	2800      	cmp	r0, #0
 8005730:	d051      	beq.n	80057d6 <put_device_to_sleep+0x13a>
 8005732:	6866      	ldr	r6, [r4, #4]
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8005734:	21f4      	movs	r1, #244	; 0xf4
 8005736:	f88d 1007 	strb.w	r1, [sp, #7]
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 800573a:	2e00      	cmp	r6, #0
 800573c:	d043      	beq.n	80057c6 <put_device_to_sleep+0x12a>
 800573e:	68a3      	ldr	r3, [r4, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d040      	beq.n	80057c6 <put_device_to_sleep+0x12a>
 8005744:	68e3      	ldr	r3, [r4, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d03d      	beq.n	80057c6 <put_device_to_sleep+0x12a>
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800574a:	2301      	movs	r3, #1
 800574c:	462a      	mov	r2, r5
 800574e:	7860      	ldrb	r0, [r4, #1]
 8005750:	47b0      	blx	r6
		if (rslt != BME280_OK)
 8005752:	2800      	cmp	r0, #0
 8005754:	d13c      	bne.n	80057d0 <put_device_to_sleep+0x134>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8005756:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800575a:	f009 021c 	and.w	r2, r9, #28
 800575e:	f003 0303 	and.w	r3, r3, #3
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8005762:	4313      	orrs	r3, r2
 8005764:	f009 09e0 	and.w	r9, r9, #224	; 0xe0
 8005768:	ea43 0909 	orr.w	r9, r3, r9
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800576c:	f10d 0007 	add.w	r0, sp, #7
 8005770:	4623      	mov	r3, r4
 8005772:	2201      	movs	r2, #1
 8005774:	4629      	mov	r1, r5
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8005776:	f88d 900c 	strb.w	r9, [sp, #12]
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800577a:	f7ff fec5 	bl	8005508 <bme280_set_regs>
	if (rslt == BME280_OK)
 800577e:	bb20      	cbnz	r0, 80057ca <put_device_to_sleep+0x12e>
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8005780:	21f5      	movs	r1, #245	; 0xf5
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8005782:	6866      	ldr	r6, [r4, #4]
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8005784:	f88d 1007 	strb.w	r1, [sp, #7]
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8005788:	b1ee      	cbz	r6, 80057c6 <put_device_to_sleep+0x12a>
 800578a:	68a3      	ldr	r3, [r4, #8]
 800578c:	b1db      	cbz	r3, 80057c6 <put_device_to_sleep+0x12a>
 800578e:	68e3      	ldr	r3, [r4, #12]
 8005790:	b1cb      	cbz	r3, 80057c6 <put_device_to_sleep+0x12a>
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8005792:	2301      	movs	r3, #1
 8005794:	462a      	mov	r2, r5
 8005796:	7860      	ldrb	r0, [r4, #1]
 8005798:	47b0      	blx	r6
		if (rslt != BME280_OK)
 800579a:	b9c8      	cbnz	r0, 80057d0 <put_device_to_sleep+0x134>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 800579c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80057a0:	f008 031c 	and.w	r3, r8, #28
 80057a4:	f002 0203 	and.w	r2, r2, #3
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80057a8:	431a      	orrs	r2, r3
 80057aa:	f008 08e0 	and.w	r8, r8, #224	; 0xe0
 80057ae:	ea42 0808 	orr.w	r8, r2, r8
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80057b2:	4623      	mov	r3, r4
 80057b4:	4629      	mov	r1, r5
 80057b6:	f10d 0007 	add.w	r0, sp, #7
 80057ba:	2201      	movs	r2, #1
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80057bc:	f88d 800c 	strb.w	r8, [sp, #12]
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80057c0:	f7ff fea2 	bl	8005508 <bme280_set_regs>
 80057c4:	e001      	b.n	80057ca <put_device_to_sleep+0x12e>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 80057c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80057ca:	b009      	add	sp, #36	; 0x24
 80057cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			rslt = BME280_E_COMM_FAIL;
 80057d0:	f06f 0003 	mvn.w	r0, #3
	return rslt;
 80057d4:	e7f9      	b.n	80057ca <put_device_to_sleep+0x12e>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 80057d6:	21f4      	movs	r1, #244	; 0xf4
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80057d8:	6866      	ldr	r6, [r4, #4]
		reg_addr = BME280_CTRL_MEAS_ADDR;
 80057da:	f88d 100c 	strb.w	r1, [sp, #12]
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80057de:	2e00      	cmp	r6, #0
 80057e0:	d0a8      	beq.n	8005734 <put_device_to_sleep+0x98>
 80057e2:	68a3      	ldr	r3, [r4, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0a5      	beq.n	8005734 <put_device_to_sleep+0x98>
 80057e8:	68e3      	ldr	r3, [r4, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d0a2      	beq.n	8005734 <put_device_to_sleep+0x98>
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80057ee:	f10d 0207 	add.w	r2, sp, #7
 80057f2:	2301      	movs	r3, #1
 80057f4:	7860      	ldrb	r0, [r4, #1]
 80057f6:	47b0      	blx	r6
		if (rslt != BME280_OK)
 80057f8:	2800      	cmp	r0, #0
 80057fa:	d19a      	bne.n	8005732 <put_device_to_sleep+0x96>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80057fc:	f10d 0107 	add.w	r1, sp, #7
 8005800:	4623      	mov	r3, r4
 8005802:	2201      	movs	r2, #1
 8005804:	4628      	mov	r0, r5
 8005806:	f7ff fe7f 	bl	8005508 <bme280_set_regs>
 800580a:	e792      	b.n	8005732 <put_device_to_sleep+0x96>
		dev->delay_ms(2);
 800580c:	2002      	movs	r0, #2
 800580e:	4798      	blx	r3
				rslt = BME280_E_COMM_FAIL;
 8005810:	f06f 0003 	mvn.w	r0, #3
 8005814:	e7d9      	b.n	80057ca <put_device_to_sleep+0x12e>
		rslt = BME280_E_NULL_PTR;
 8005816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800581a:	4770      	bx	lr

0800581c <bme280_init>:
	uint8_t chip_id = 0;
 800581c:	2300      	movs	r3, #0
{
 800581e:	b570      	push	{r4, r5, r6, lr}
 8005820:	b088      	sub	sp, #32
	uint8_t chip_id = 0;
 8005822:	f88d 3002 	strb.w	r3, [sp, #2]
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8005826:	2800      	cmp	r0, #0
 8005828:	f000 80ed 	beq.w	8005a06 <bme280_init+0x1ea>
 800582c:	6846      	ldr	r6, [r0, #4]
 800582e:	2e00      	cmp	r6, #0
 8005830:	f000 80e9 	beq.w	8005a06 <bme280_init+0x1ea>
 8005834:	6883      	ldr	r3, [r0, #8]
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 80e5 	beq.w	8005a06 <bme280_init+0x1ea>
 800583c:	68c3      	ldr	r3, [r0, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 80e1 	beq.w	8005a06 <bme280_init+0x1ea>
 8005844:	4604      	mov	r4, r0
 8005846:	2505      	movs	r5, #5
 8005848:	b176      	cbz	r6, 8005868 <bme280_init+0x4c>
 800584a:	68a2      	ldr	r2, [r4, #8]
 800584c:	b162      	cbz	r2, 8005868 <bme280_init+0x4c>
 800584e:	b15b      	cbz	r3, 8005868 <bme280_init+0x4c>
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8005850:	2301      	movs	r3, #1
 8005852:	f10d 0202 	add.w	r2, sp, #2
 8005856:	21d0      	movs	r1, #208	; 0xd0
 8005858:	7860      	ldrb	r0, [r4, #1]
 800585a:	47b0      	blx	r6
		if (rslt != BME280_OK)
 800585c:	b918      	cbnz	r0, 8005866 <bme280_init+0x4a>
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 800585e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8005862:	2b60      	cmp	r3, #96	; 0x60
 8005864:	d00e      	beq.n	8005884 <bme280_init+0x68>
 8005866:	68e3      	ldr	r3, [r4, #12]
			dev->delay_ms(1);
 8005868:	2001      	movs	r0, #1
 800586a:	4798      	blx	r3
 800586c:	1e6b      	subs	r3, r5, #1
		while (try_count) {
 800586e:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
 8005872:	d002      	beq.n	800587a <bme280_init+0x5e>
 8005874:	6866      	ldr	r6, [r4, #4]
 8005876:	68e3      	ldr	r3, [r4, #12]
 8005878:	e7e6      	b.n	8005848 <bme280_init+0x2c>
			rslt = BME280_E_DEV_NOT_FOUND;
 800587a:	f06f 0501 	mvn.w	r5, #1
}
 800587e:	4628      	mov	r0, r5
 8005880:	b008      	add	sp, #32
 8005882:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t reg_addr = BME280_RESET_ADDR;
 8005884:	20e0      	movs	r0, #224	; 0xe0
	uint8_t soft_rst_cmd = 0xB6;
 8005886:	21b6      	movs	r1, #182	; 0xb6
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8005888:	6862      	ldr	r2, [r4, #4]
				dev->chip_id = chip_id;
 800588a:	7023      	strb	r3, [r4, #0]
	uint8_t reg_addr = BME280_RESET_ADDR;
 800588c:	f88d 0003 	strb.w	r0, [sp, #3]
	uint8_t soft_rst_cmd = 0xB6;
 8005890:	f88d 1004 	strb.w	r1, [sp, #4]
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8005894:	2a00      	cmp	r2, #0
 8005896:	f000 80b6 	beq.w	8005a06 <bme280_init+0x1ea>
 800589a:	68a3      	ldr	r3, [r4, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 80b2 	beq.w	8005a06 <bme280_init+0x1ea>
 80058a2:	68e3      	ldr	r3, [r4, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 80ae 	beq.w	8005a06 <bme280_init+0x1ea>
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80058aa:	4623      	mov	r3, r4
 80058ac:	a901      	add	r1, sp, #4
 80058ae:	2201      	movs	r2, #1
 80058b0:	f10d 0003 	add.w	r0, sp, #3
 80058b4:	f7ff fe28 	bl	8005508 <bme280_set_regs>
 80058b8:	4606      	mov	r6, r0
		dev->delay_ms(2);
 80058ba:	68e3      	ldr	r3, [r4, #12]
 80058bc:	2002      	movs	r0, #2
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80058be:	4635      	mov	r5, r6
		dev->delay_ms(2);
 80058c0:	4798      	blx	r3
				if (rslt == BME280_OK) {
 80058c2:	2e00      	cmp	r6, #0
 80058c4:	d1db      	bne.n	800587e <bme280_init+0x62>
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80058c6:	6865      	ldr	r5, [r4, #4]
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 80058c8:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80058cc:	e9cd 6603 	strd	r6, r6, [sp, #12]
 80058d0:	e9cd 6605 	strd	r6, r6, [sp, #20]
 80058d4:	f8ad 601c 	strh.w	r6, [sp, #28]
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80058d8:	2d00      	cmp	r5, #0
 80058da:	f000 8094 	beq.w	8005a06 <bme280_init+0x1ea>
 80058de:	68a3      	ldr	r3, [r4, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 8090 	beq.w	8005a06 <bme280_init+0x1ea>
 80058e6:	68e3      	ldr	r3, [r4, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 808c 	beq.w	8005a06 <bme280_init+0x1ea>
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80058ee:	231a      	movs	r3, #26
 80058f0:	aa01      	add	r2, sp, #4
 80058f2:	2188      	movs	r1, #136	; 0x88
 80058f4:	7860      	ldrb	r0, [r4, #1]
 80058f6:	47a8      	blx	r5
		if (rslt != BME280_OK)
 80058f8:	2800      	cmp	r0, #0
 80058fa:	f040 8087 	bne.w	8005a0c <bme280_init+0x1f0>
	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80058fe:	f89d 0005 	ldrb.w	r0, [sp, #5]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8005902:	f89d 3007 	ldrb.w	r3, [sp, #7]
	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8005906:	f89d 1004 	ldrb.w	r1, [sp, #4]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800590a:	f89d 2006 	ldrb.w	r2, [sp, #6]
	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800590e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8005912:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8005916:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800591a:	f89d 3008 	ldrb.w	r3, [sp, #8]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 800591e:	f89d 500b 	ldrb.w	r5, [sp, #11]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8005922:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8005926:	f89d 000a 	ldrb.w	r0, [sp, #10]
	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800592a:	8221      	strh	r1, [r4, #16]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 800592c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8005930:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8005934:	f89d 500d 	ldrb.w	r5, [sp, #13]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8005938:	8262      	strh	r2, [r4, #18]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800593a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 800593e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8005942:	f89d 500f 	ldrb.w	r5, [sp, #15]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8005946:	82a3      	strh	r3, [r4, #20]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8005948:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 800594c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8005950:	f89d 5011 	ldrb.w	r5, [sp, #17]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8005954:	82e0      	strh	r0, [r4, #22]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8005956:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 800595a:	f89d 0012 	ldrb.w	r0, [sp, #18]
 800595e:	f89d 5013 	ldrb.w	r5, [sp, #19]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8005962:	8321      	strh	r1, [r4, #24]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8005964:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8005968:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800596c:	f89d 5015 	ldrb.w	r5, [sp, #21]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8005970:	8362      	strh	r2, [r4, #26]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8005972:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8005976:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800597a:	f89d 5017 	ldrb.w	r5, [sp, #23]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 800597e:	83a3      	strh	r3, [r4, #28]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8005980:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8005984:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005988:	f89d 5019 	ldrb.w	r5, [sp, #25]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800598c:	8421      	strh	r1, [r4, #32]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 800598e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8005992:	8462      	strh	r2, [r4, #34]	; 0x22
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8005994:	83e0      	strh	r0, [r4, #30]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8005996:	84a3      	strh	r3, [r4, #36]	; 0x24
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8005998:	f89d 101b 	ldrb.w	r1, [sp, #27]
 800599c:	f89d 301a 	ldrb.w	r3, [sp, #26]
	calib_data->dig_H1 = reg_data[25];
 80059a0:	f89d 201d 	ldrb.w	r2, [sp, #29]
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80059a4:	6865      	ldr	r5, [r4, #4]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 80059a6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80059aa:	84e3      	strh	r3, [r4, #38]	; 0x26
	calib_data->dig_H1 = reg_data[25];
 80059ac:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80059b0:	b34d      	cbz	r5, 8005a06 <bme280_init+0x1ea>
 80059b2:	68a3      	ldr	r3, [r4, #8]
 80059b4:	b33b      	cbz	r3, 8005a06 <bme280_init+0x1ea>
 80059b6:	68e3      	ldr	r3, [r4, #12]
 80059b8:	b32b      	cbz	r3, 8005a06 <bme280_init+0x1ea>
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80059ba:	aa01      	add	r2, sp, #4
 80059bc:	2307      	movs	r3, #7
 80059be:	21e1      	movs	r1, #225	; 0xe1
 80059c0:	7860      	ldrb	r0, [r4, #1]
 80059c2:	47a8      	blx	r5
		if (rslt != BME280_OK)
 80059c4:	4605      	mov	r5, r0
 80059c6:	bb08      	cbnz	r0, 8005a0c <bme280_init+0x1f0>
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80059c8:	f89d 3008 	ldrb.w	r3, [sp, #8]
	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80059cc:	f99d 0007 	ldrsb.w	r0, [sp, #7]
	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80059d0:	f99d 2009 	ldrsb.w	r2, [sp, #9]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80059d4:	f003 010f 	and.w	r1, r3, #15
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80059d8:	091b      	lsrs	r3, r3, #4
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80059da:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 80059de:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80059e2:	f89d 6005 	ldrb.w	r6, [sp, #5]
 80059e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80059ea:	85e1      	strh	r1, [r4, #46]	; 0x2e
	calib_data->dig_H3 = reg_data[2];
 80059ec:	f89d 0006 	ldrb.w	r0, [sp, #6]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 80059f0:	f89d 100a 	ldrb.w	r1, [sp, #10]
	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80059f4:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 80059f8:	8623      	strh	r3, [r4, #48]	; 0x30
	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80059fa:	8562      	strh	r2, [r4, #42]	; 0x2a
	calib_data->dig_H3 = reg_data[2];
 80059fc:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
	calib_data->dig_H6 = (int8_t)reg_data[6];
 8005a00:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
 8005a04:	e73b      	b.n	800587e <bme280_init+0x62>
		rslt = BME280_E_NULL_PTR;
 8005a06:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005a0a:	e738      	b.n	800587e <bme280_init+0x62>
			rslt = BME280_E_COMM_FAIL;
 8005a0c:	f06f 0503 	mvn.w	r5, #3
 8005a10:	e735      	b.n	800587e <bme280_init+0x62>
 8005a12:	bf00      	nop

08005a14 <bme280_set_sensor_settings>:
{
 8005a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a18:	b082      	sub	sp, #8
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8005a1a:	2900      	cmp	r1, #0
 8005a1c:	f000 80e5 	beq.w	8005bea <bme280_set_sensor_settings+0x1d6>
 8005a20:	684e      	ldr	r6, [r1, #4]
 8005a22:	2e00      	cmp	r6, #0
 8005a24:	f000 80e1 	beq.w	8005bea <bme280_set_sensor_settings+0x1d6>
 8005a28:	688b      	ldr	r3, [r1, #8]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 80dd 	beq.w	8005bea <bme280_set_sensor_settings+0x1d6>
 8005a30:	68cb      	ldr	r3, [r1, #12]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 80d9 	beq.w	8005bea <bme280_set_sensor_settings+0x1d6>
 8005a38:	460c      	mov	r4, r1
 8005a3a:	4605      	mov	r5, r0
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	aa01      	add	r2, sp, #4
 8005a40:	21f4      	movs	r1, #244	; 0xf4
 8005a42:	7860      	ldrb	r0, [r4, #1]
 8005a44:	47b0      	blx	r6
		if (rslt != BME280_OK)
 8005a46:	4606      	mov	r6, r0
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	f040 80d3 	bne.w	8005bf4 <bme280_set_sensor_settings+0x1e0>
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8005a4e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005a52:	f003 0303 	and.w	r3, r3, #3
 8005a56:	f88d 3004 	strb.w	r3, [sp, #4]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8005a5a:	b983      	cbnz	r3, 8005a7e <bme280_set_sensor_settings+0x6a>
	if (sub_settings & desired_settings) {
 8005a5c:	076a      	lsls	r2, r5, #29
 8005a5e:	d106      	bne.n	8005a6e <bme280_set_sensor_settings+0x5a>
 8005a60:	f015 0f18 	tst.w	r5, #24
 8005a64:	d115      	bne.n	8005a92 <bme280_set_sensor_settings+0x7e>
}
 8005a66:	4630      	mov	r0, r6
 8005a68:	b002      	add	sp, #8
 8005a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (desired_settings & BME280_OSR_HUM_SEL)
 8005a6e:	076b      	lsls	r3, r5, #29
 8005a70:	f005 0703 	and.w	r7, r5, #3
 8005a74:	d448      	bmi.n	8005b08 <bme280_set_sensor_settings+0xf4>
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8005a76:	2f00      	cmp	r7, #0
 8005a78:	d177      	bne.n	8005b6a <bme280_set_sensor_settings+0x156>
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8005a7a:	2601      	movs	r6, #1
 8005a7c:	e7f3      	b.n	8005a66 <bme280_set_sensor_settings+0x52>
			rslt = put_device_to_sleep(dev);
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f7ff fe0c 	bl	800569c <put_device_to_sleep>
		if (rslt == BME280_OK) {
 8005a84:	2800      	cmp	r0, #0
 8005a86:	d0e9      	beq.n	8005a5c <bme280_set_sensor_settings+0x48>
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8005a88:	4606      	mov	r6, r0
}
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	b002      	add	sp, #8
 8005a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8005a92:	21f5      	movs	r1, #245	; 0xf5
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8005a94:	6866      	ldr	r6, [r4, #4]
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8005a96:	f88d 1006 	strb.w	r1, [sp, #6]
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8005a9a:	2e00      	cmp	r6, #0
 8005a9c:	f000 80a5 	beq.w	8005bea <bme280_set_sensor_settings+0x1d6>
 8005aa0:	68a3      	ldr	r3, [r4, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 80a1 	beq.w	8005bea <bme280_set_sensor_settings+0x1d6>
 8005aa8:	68e3      	ldr	r3, [r4, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 809d 	beq.w	8005bea <bme280_set_sensor_settings+0x1d6>
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8005ab0:	f10d 0707 	add.w	r7, sp, #7
 8005ab4:	463a      	mov	r2, r7
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	7860      	ldrb	r0, [r4, #1]
 8005aba:	47b0      	blx	r6
		if (rslt != BME280_OK)
 8005abc:	2800      	cmp	r0, #0
 8005abe:	f040 8099 	bne.w	8005bf4 <bme280_set_sensor_settings+0x1e0>
		if (desired_settings & BME280_FILTER_SEL)
 8005ac2:	072a      	lsls	r2, r5, #28
 8005ac4:	d50b      	bpl.n	8005ade <bme280_set_sensor_settings+0xca>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8005ac6:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 8005aca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	f003 031c 	and.w	r3, r3, #28
 8005ad4:	f022 021c 	bic.w	r2, r2, #28
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	f88d 3007 	strb.w	r3, [sp, #7]
		if (desired_settings & BME280_STANDBY_SEL)
 8005ade:	06eb      	lsls	r3, r5, #27
 8005ae0:	d509      	bpl.n	8005af6 <bme280_set_sensor_settings+0xe2>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8005ae2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005ae6:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8005aea:	f003 031f 	and.w	r3, r3, #31
 8005aee:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8005af2:	f88d 3007 	strb.w	r3, [sp, #7]
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8005af6:	4623      	mov	r3, r4
 8005af8:	4639      	mov	r1, r7
 8005afa:	2201      	movs	r2, #1
 8005afc:	f10d 0006 	add.w	r0, sp, #6
 8005b00:	f7ff fd02 	bl	8005508 <bme280_set_regs>
 8005b04:	4606      	mov	r6, r0
 8005b06:	e7ae      	b.n	8005a66 <bme280_set_sensor_settings+0x52>
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8005b08:	f04f 0cf2 	mov.w	ip, #242	; 0xf2
		rslt = set_osr_humidity_settings(settings, dev);
 8005b0c:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8005b10:	a902      	add	r1, sp, #8
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	f801 3d03 	strb.w	r3, [r1, #-3]!
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8005b1a:	f10d 0007 	add.w	r0, sp, #7
 8005b1e:	4623      	mov	r3, r4
 8005b20:	2201      	movs	r2, #1
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8005b22:	f88d c007 	strb.w	ip, [sp, #7]
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8005b26:	f7ff fcef 	bl	8005508 <bme280_set_regs>
	if (rslt == BME280_OK) {
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	d14a      	bne.n	8005bc4 <bme280_set_sensor_settings+0x1b0>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8005b2e:	21f4      	movs	r1, #244	; 0xf4
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8005b30:	f8d4 8004 	ldr.w	r8, [r4, #4]
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8005b34:	f88d 1007 	strb.w	r1, [sp, #7]
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8005b38:	f1b8 0f00 	cmp.w	r8, #0
 8005b3c:	d053      	beq.n	8005be6 <bme280_set_sensor_settings+0x1d2>
 8005b3e:	68a3      	ldr	r3, [r4, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d050      	beq.n	8005be6 <bme280_set_sensor_settings+0x1d2>
 8005b44:	68e3      	ldr	r3, [r4, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d04d      	beq.n	8005be6 <bme280_set_sensor_settings+0x1d2>
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8005b4a:	f10d 0206 	add.w	r2, sp, #6
 8005b4e:	2301      	movs	r3, #1
 8005b50:	7860      	ldrb	r0, [r4, #1]
 8005b52:	47c0      	blx	r8
		if (rslt != BME280_OK)
 8005b54:	2800      	cmp	r0, #0
 8005b56:	d14b      	bne.n	8005bf0 <bme280_set_sensor_settings+0x1dc>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8005b58:	f10d 0106 	add.w	r1, sp, #6
 8005b5c:	f10d 0007 	add.w	r0, sp, #7
 8005b60:	4623      	mov	r3, r4
 8005b62:	2201      	movs	r2, #1
 8005b64:	f7ff fcd0 	bl	8005508 <bme280_set_regs>
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8005b68:	b33f      	cbz	r7, 8005bba <bme280_set_sensor_settings+0x1a6>
 8005b6a:	f8d4 8004 	ldr.w	r8, [r4, #4]
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8005b6e:	21f4      	movs	r1, #244	; 0xf4
 8005b70:	f88d 1006 	strb.w	r1, [sp, #6]
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8005b74:	f1b8 0f00 	cmp.w	r8, #0
 8005b78:	d037      	beq.n	8005bea <bme280_set_sensor_settings+0x1d6>
 8005b7a:	68a3      	ldr	r3, [r4, #8]
 8005b7c:	b3ab      	cbz	r3, 8005bea <bme280_set_sensor_settings+0x1d6>
 8005b7e:	68e3      	ldr	r3, [r4, #12]
 8005b80:	b39b      	cbz	r3, 8005bea <bme280_set_sensor_settings+0x1d6>
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8005b82:	f10d 0707 	add.w	r7, sp, #7
 8005b86:	463a      	mov	r2, r7
 8005b88:	2301      	movs	r3, #1
 8005b8a:	7860      	ldrb	r0, [r4, #1]
 8005b8c:	47c0      	blx	r8
		if (rslt != BME280_OK)
 8005b8e:	bb88      	cbnz	r0, 8005bf4 <bme280_set_sensor_settings+0x1e0>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8005b90:	07e8      	lsls	r0, r5, #31
 8005b92:	d41b      	bmi.n	8005bcc <bme280_set_sensor_settings+0x1b8>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 8005b94:	07a9      	lsls	r1, r5, #30
 8005b96:	d509      	bpl.n	8005bac <bme280_set_sensor_settings+0x198>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8005b98:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005b9c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8005ba0:	f003 031f 	and.w	r3, r3, #31
 8005ba4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8005ba8:	f88d 3007 	strb.w	r3, [sp, #7]
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8005bac:	4639      	mov	r1, r7
 8005bae:	4623      	mov	r3, r4
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f10d 0006 	add.w	r0, sp, #6
 8005bb6:	f7ff fca7 	bl	8005508 <bme280_set_regs>
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	f43f af50 	beq.w	8005a60 <bme280_set_sensor_settings+0x4c>
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8005bc0:	4606      	mov	r6, r0
 8005bc2:	e762      	b.n	8005a8a <bme280_set_sensor_settings+0x76>
 8005bc4:	2f00      	cmp	r7, #0
 8005bc6:	d1d0      	bne.n	8005b6a <bme280_set_sensor_settings+0x156>
 8005bc8:	4606      	mov	r6, r0
 8005bca:	e75e      	b.n	8005a8a <bme280_set_sensor_settings+0x76>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8005bcc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8005bd0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	f003 031c 	and.w	r3, r3, #28
 8005bda:	f022 021c 	bic.w	r2, r2, #28
 8005bde:	4313      	orrs	r3, r2
 8005be0:	f88d 3007 	strb.w	r3, [sp, #7]
 8005be4:	e7d6      	b.n	8005b94 <bme280_set_sensor_settings+0x180>
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8005be6:	2f00      	cmp	r7, #0
 8005be8:	d1c1      	bne.n	8005b6e <bme280_set_sensor_settings+0x15a>
		rslt = BME280_E_NULL_PTR;
 8005bea:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005bee:	e73a      	b.n	8005a66 <bme280_set_sensor_settings+0x52>
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8005bf0:	2f00      	cmp	r7, #0
 8005bf2:	d1ba      	bne.n	8005b6a <bme280_set_sensor_settings+0x156>
			rslt = BME280_E_COMM_FAIL;
 8005bf4:	f06f 0603 	mvn.w	r6, #3
 8005bf8:	e735      	b.n	8005a66 <bme280_set_sensor_settings+0x52>
 8005bfa:	bf00      	nop

08005bfc <bme280_set_sensor_mode>:
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8005bfc:	2900      	cmp	r1, #0
 8005bfe:	d04a      	beq.n	8005c96 <bme280_set_sensor_mode+0x9a>
{
 8005c00:	b570      	push	{r4, r5, r6, lr}
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8005c02:	684d      	ldr	r5, [r1, #4]
{
 8005c04:	b082      	sub	sp, #8
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8005c06:	2d00      	cmp	r5, #0
 8005c08:	d03f      	beq.n	8005c8a <bme280_set_sensor_mode+0x8e>
 8005c0a:	688b      	ldr	r3, [r1, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d03c      	beq.n	8005c8a <bme280_set_sensor_mode+0x8e>
 8005c10:	68cb      	ldr	r3, [r1, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d039      	beq.n	8005c8a <bme280_set_sensor_mode+0x8e>
 8005c16:	460c      	mov	r4, r1
 8005c18:	4606      	mov	r6, r0
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	f10d 0205 	add.w	r2, sp, #5
 8005c20:	21f4      	movs	r1, #244	; 0xf4
 8005c22:	7860      	ldrb	r0, [r4, #1]
 8005c24:	47a8      	blx	r5
		if (rslt != BME280_OK)
 8005c26:	bb98      	cbnz	r0, 8005c90 <bme280_set_sensor_mode+0x94>
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8005c28:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005c2c:	f003 0303 	and.w	r3, r3, #3
 8005c30:	f88d 3005 	strb.w	r3, [sp, #5]
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8005c34:	bb13      	cbnz	r3, 8005c7c <bme280_set_sensor_mode+0x80>
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8005c36:	21f4      	movs	r1, #244	; 0xf4
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8005c38:	6865      	ldr	r5, [r4, #4]
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8005c3a:	f88d 1006 	strb.w	r1, [sp, #6]
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8005c3e:	b325      	cbz	r5, 8005c8a <bme280_set_sensor_mode+0x8e>
 8005c40:	68a3      	ldr	r3, [r4, #8]
 8005c42:	b313      	cbz	r3, 8005c8a <bme280_set_sensor_mode+0x8e>
 8005c44:	68e3      	ldr	r3, [r4, #12]
 8005c46:	b303      	cbz	r3, 8005c8a <bme280_set_sensor_mode+0x8e>
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8005c48:	f10d 0207 	add.w	r2, sp, #7
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	7860      	ldrb	r0, [r4, #1]
 8005c50:	47a8      	blx	r5
		if (rslt != BME280_OK)
 8005c52:	b9e8      	cbnz	r0, 8005c90 <bme280_set_sensor_mode+0x94>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8005c54:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005c58:	f006 0003 	and.w	r0, r6, #3
 8005c5c:	f022 0203 	bic.w	r2, r2, #3
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8005c60:	4623      	mov	r3, r4
 8005c62:	f10d 0107 	add.w	r1, sp, #7
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8005c66:	ea42 0400 	orr.w	r4, r2, r0
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f10d 0006 	add.w	r0, sp, #6
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8005c70:	f88d 4007 	strb.w	r4, [sp, #7]
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8005c74:	f7ff fc48 	bl	8005508 <bme280_set_regs>
}
 8005c78:	b002      	add	sp, #8
 8005c7a:	bd70      	pop	{r4, r5, r6, pc}
			rslt = put_device_to_sleep(dev);
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	f7ff fd0d 	bl	800569c <put_device_to_sleep>
		if (rslt == BME280_OK)
 8005c82:	2800      	cmp	r0, #0
 8005c84:	d0d7      	beq.n	8005c36 <bme280_set_sensor_mode+0x3a>
}
 8005c86:	b002      	add	sp, #8
 8005c88:	bd70      	pop	{r4, r5, r6, pc}
		rslt = BME280_E_NULL_PTR;
 8005c8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c8e:	e7f3      	b.n	8005c78 <bme280_set_sensor_mode+0x7c>
			rslt = BME280_E_COMM_FAIL;
 8005c90:	f06f 0003 	mvn.w	r0, #3
 8005c94:	e7f0      	b.n	8005c78 <bme280_set_sensor_mode+0x7c>
		rslt = BME280_E_NULL_PTR;
 8005c96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8005c9a:	4770      	bx	lr

08005c9c <bme280_get_sensor_data>:
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8005c9c:	2300      	movs	r3, #0
{
 8005c9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca2:	b091      	sub	sp, #68	; 0x44
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8005ca4:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8005ca8:	2a00      	cmp	r2, #0
 8005caa:	f000 8247 	beq.w	800613c <bme280_get_sensor_data+0x4a0>
 8005cae:	6854      	ldr	r4, [r2, #4]
 8005cb0:	2c00      	cmp	r4, #0
 8005cb2:	f000 8243 	beq.w	800613c <bme280_get_sensor_data+0x4a0>
 8005cb6:	6893      	ldr	r3, [r2, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 823f 	beq.w	800613c <bme280_get_sensor_data+0x4a0>
 8005cbe:	68d3      	ldr	r3, [r2, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 823b 	beq.w	800613c <bme280_get_sensor_data+0x4a0>
	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8005cc6:	2900      	cmp	r1, #0
 8005cc8:	f000 8238 	beq.w	800613c <bme280_get_sensor_data+0x4a0>
 8005ccc:	4615      	mov	r5, r2
 8005cce:	468a      	mov	sl, r1
 8005cd0:	4683      	mov	fp, r0
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8005cd2:	aa0e      	add	r2, sp, #56	; 0x38
 8005cd4:	2308      	movs	r3, #8
 8005cd6:	21f7      	movs	r1, #247	; 0xf7
 8005cd8:	7868      	ldrb	r0, [r5, #1]
 8005cda:	47a0      	blx	r4
		if (rslt != BME280_OK)
 8005cdc:	4604      	mov	r4, r0
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	f040 822f 	bne.w	8006142 <bme280_get_sensor_data+0x4a6>
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8005ce4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		comp_data->pressure = 0;
 8005ce8:	e9ca 0000 	strd	r0, r0, [sl]
		comp_data->humidity = 0;
 8005cec:	f8ca 0008 	str.w	r0, [sl, #8]
 8005cf0:	f8bd 003e 	ldrh.w	r0, [sp, #62]	; 0x3e
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8005cf4:	f01b 0f07 	tst.w	fp, #7
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8005cf8:	9302      	str	r3, [sp, #8]
	data_msb = (uint32_t)reg_data[0] << 12;
 8005cfa:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
	data_lsb = (uint32_t)reg_data[1] << 4;
 8005cfe:	f89d c039 	ldrb.w	ip, [sp, #57]	; 0x39
	data_msb = (uint32_t)reg_data[3] << 12;
 8005d02:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
	data_lsb = (uint32_t)reg_data[4] << 4;
 8005d06:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8005d0a:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8005d0e:	9001      	str	r0, [sp, #4]
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8005d10:	f040 81db 	bne.w	80060ca <bme280_get_sensor_data+0x42e>
		if (sensor_comp & BME280_PRESS) {
 8005d14:	f01b 0f01 	tst.w	fp, #1
 8005d18:	f000 8173 	beq.w	8006002 <bme280_get_sensor_data+0x366>
	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8005d1c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8005d1e:	f9b5 001a 	ldrsh.w	r0, [r5, #26]
	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8005d22:	f5b2 36fa 	subs.w	r6, r2, #128000	; 0x1f400
 8005d26:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005d2a:	f143 37ff 	adc.w	r7, r3, #4294967295	; 0xffffffff
 8005d2e:	46b8      	mov	r8, r7
 8005d30:	4637      	mov	r7, r6
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8005d32:	fba7 2307 	umull	r2, r3, r7, r7
 8005d36:	e9cd 7806 	strd	r7, r8, [sp, #24]
 8005d3a:	fb06 f608 	mul.w	r6, r6, r8
 8005d3e:	4698      	mov	r8, r3
 8005d40:	4617      	mov	r7, r2
 8005d42:	eb08 0646 	add.w	r6, r8, r6, lsl #1
 8005d46:	e9cd 7804 	strd	r7, r8, [sp, #16]
 8005d4a:	9605      	str	r6, [sp, #20]
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8005d4c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005d50:	464e      	mov	r6, r9
 8005d52:	fb00 f606 	mul.w	r6, r0, r6
 8005d56:	17c1      	asrs	r1, r0, #31
 8005d58:	fb08 6601 	mla	r6, r8, r1, r6
 8005d5c:	fba0 0108 	umull	r0, r1, r0, r8
 8005d60:	f9b5 2018 	ldrsh.w	r2, [r5, #24]
 8005d64:	4431      	add	r1, r6
 8005d66:	9e07      	ldr	r6, [sp, #28]
 8005d68:	9f06      	ldr	r7, [sp, #24]
 8005d6a:	fb02 f606 	mul.w	r6, r2, r6
 8005d6e:	17d3      	asrs	r3, r2, #31
 8005d70:	fb07 6603 	mla	r6, r7, r3, r6
 8005d74:	fba2 2307 	umull	r2, r3, r2, r7
 8005d78:	4433      	add	r3, r6
 8005d7a:	031e      	lsls	r6, r3, #12
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	ea4f 3302 	mov.w	r3, r2, lsl #12
 8005d82:	ea46 5612 	orr.w	r6, r6, r2, lsr #20
 8005d86:	4698      	mov	r8, r3
 8005d88:	f171 0300 	sbcs.w	r3, r1, #0
 8005d8c:	46b1      	mov	r9, r6
 8005d8e:	da02      	bge.n	8005d96 <bme280_get_sensor_data+0xfa>
 8005d90:	30ff      	adds	r0, #255	; 0xff
 8005d92:	f141 0100 	adc.w	r1, r1, #0
 8005d96:	0a02      	lsrs	r2, r0, #8
 8005d98:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005d9c:	eb18 0002 	adds.w	r0, r8, r2
 8005da0:	ea4f 2321 	mov.w	r3, r1, asr #8
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8005da4:	8aee      	ldrh	r6, [r5, #22]
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8005da6:	eb49 0103 	adc.w	r1, r9, r3
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8005daa:	f110 0800 	adds.w	r8, r0, #0
 8005dae:	f541 4900 	adc.w	r9, r1, #32768	; 0x8000
 8005db2:	fba8 0106 	umull	r0, r1, r8, r6
 8005db6:	fb06 1109 	mla	r1, r6, r9, r1
 8005dba:	2800      	cmp	r0, #0
 8005dbc:	f171 0300 	sbcs.w	r3, r1, #0
 8005dc0:	da03      	bge.n	8005dca <bme280_get_sensor_data+0x12e>
 8005dc2:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8005dc6:	f141 0101 	adc.w	r1, r1, #1
 8005dca:	104b      	asrs	r3, r1, #1
 8005dcc:	9308      	str	r3, [sp, #32]
 8005dce:	17cb      	asrs	r3, r1, #31
 8005dd0:	9309      	str	r3, [sp, #36]	; 0x24
	if (var1 != 0) {
 8005dd2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f000 81ae 	beq.w	8006138 <bme280_get_sensor_data+0x49c>
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8005ddc:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8005de0:	2000      	movs	r0, #0
 8005de2:	2100      	movs	r1, #0
 8005de4:	f9b5 201e 	ldrsh.w	r2, [r5, #30]
 8005de8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8005dec:	f9b5 001c 	ldrsh.w	r0, [r5, #28]
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8005df0:	17d3      	asrs	r3, r2, #31
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8005df2:	00c1      	lsls	r1, r0, #3
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8005df4:	fb02 f009 	mul.w	r0, r2, r9
 8005df8:	fb08 0003 	mla	r0, r8, r3, r0
 8005dfc:	fba2 8908 	umull	r8, r9, r2, r8
 8005e00:	4481      	add	r9, r0
 8005e02:	ea4f 4349 	mov.w	r3, r9, lsl #17
 8005e06:	930b      	str	r3, [sp, #44]	; 0x2c
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8005e08:	910d      	str	r1, [sp, #52]	; 0x34
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8005e0a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	f9b5 6020 	ldrsh.w	r6, [r5, #32]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8005e14:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8005e18:	fb06 f303 	mul.w	r3, r6, r3
 8005e1c:	17f7      	asrs	r7, r6, #31
 8005e1e:	fb01 3307 	mla	r3, r1, r7, r3
 8005e22:	9904      	ldr	r1, [sp, #16]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8005e24:	ea4c 3e0e 	orr.w	lr, ip, lr, lsl #12
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8005e28:	fba6 6701 	umull	r6, r7, r6, r1
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8005e2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8005e2e:	441f      	add	r7, r3
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8005e30:	ea41 31d8 	orr.w	r1, r1, r8, lsr #15
 8005e34:	910b      	str	r1, [sp, #44]	; 0x2c
 8005e36:	ea4f 4148 	mov.w	r1, r8, lsl #17
 8005e3a:	910a      	str	r1, [sp, #40]	; 0x28
 8005e3c:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8005e40:	1989      	adds	r1, r1, r6
 8005e42:	460e      	mov	r6, r1
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8005e44:	f04f 0100 	mov.w	r1, #0
 8005e48:	910c      	str	r1, [sp, #48]	; 0x30
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8005e4a:	417a      	adcs	r2, r7
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8005e4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e50:	1980      	adds	r0, r0, r6
 8005e52:	4151      	adcs	r1, r2
 8005e54:	460f      	mov	r7, r1
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8005e56:	9902      	ldr	r1, [sp, #8]
 8005e58:	ea4e 1811 	orr.w	r8, lr, r1, lsr #4
		var4 = 1048576 - uncomp_data->pressure;
 8005e5c:	f5c8 1880 	rsb	r8, r8, #1048576	; 0x100000
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8005e60:	ea4f 72c8 	mov.w	r2, r8, lsl #31
 8005e64:	1a12      	subs	r2, r2, r0
 8005e66:	ea4f 0358 	mov.w	r3, r8, lsr #1
 8005e6a:	eb63 0307 	sbc.w	r3, r3, r7
 8005e6e:	4690      	mov	r8, r2
 8005e70:	4699      	mov	r9, r3
 8005e72:	1892      	adds	r2, r2, r2
 8005e74:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005e78:	415b      	adcs	r3, r3
 8005e7a:	eb18 0802 	adds.w	r8, r8, r2
 8005e7e:	eb49 0903 	adc.w	r9, r9, r3
 8005e82:	ea4f 1088 	mov.w	r0, r8, lsl #6
 8005e86:	ea4f 1189 	mov.w	r1, r9, lsl #6
 8005e8a:	eb10 0608 	adds.w	r6, r0, r8
 8005e8e:	ea41 6198 	orr.w	r1, r1, r8, lsr #26
 8005e92:	eb41 0709 	adc.w	r7, r1, r9
 8005e96:	00b2      	lsls	r2, r6, #2
 8005e98:	00bb      	lsls	r3, r7, #2
 8005e9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e9e:	ea43 7396 	orr.w	r3, r3, r6, lsr #30
 8005ea2:	eb10 0802 	adds.w	r8, r0, r2
 8005ea6:	eb41 0903 	adc.w	r9, r1, r3
 8005eaa:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8005eae:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8005eb2:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8005eb6:	4690      	mov	r8, r2
 8005eb8:	4699      	mov	r9, r3
 8005eba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ebe:	eb10 0008 	adds.w	r0, r0, r8
 8005ec2:	eb41 0109 	adc.w	r1, r1, r9
 8005ec6:	f7fa ff6f 	bl	8000da8 <__aeabi_ldivmod>
 8005eca:	460b      	mov	r3, r1
 8005ecc:	4602      	mov	r2, r0
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8005ece:	2800      	cmp	r0, #0
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8005ed0:	e9cd 2302 	strd	r2, r3, [sp, #8]
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8005ed4:	f173 0300 	sbcs.w	r3, r3, #0
 8005ed8:	da04      	bge.n	8005ee4 <bme280_get_sensor_data+0x248>
 8005eda:	f641 76ff 	movw	r6, #8191	; 0x1fff
 8005ede:	2700      	movs	r7, #0
 8005ee0:	1980      	adds	r0, r0, r6
 8005ee2:	4179      	adcs	r1, r7
 8005ee4:	f9b5 2026 	ldrsh.w	r2, [r5, #38]	; 0x26
 8005ee8:	ea4f 3e61 	mov.w	lr, r1, asr #13
 8005eec:	fb02 f80e 	mul.w	r8, r2, lr
 8005ef0:	ea4f 3c50 	mov.w	ip, r0, lsr #13
 8005ef4:	ea4c 4cc1 	orr.w	ip, ip, r1, lsl #19
 8005ef8:	17d3      	asrs	r3, r2, #31
 8005efa:	fb0c 8603 	mla	r6, ip, r3, r8
 8005efe:	fba2 230c 	umull	r2, r3, r2, ip
 8005f02:	fb02 fe0e 	mul.w	lr, r2, lr
 8005f06:	4433      	add	r3, r6
 8005f08:	fba2 670c 	umull	r6, r7, r2, ip
 8005f0c:	fb0c ec03 	mla	ip, ip, r3, lr
 8005f10:	4467      	add	r7, ip
 8005f12:	463b      	mov	r3, r7
 8005f14:	2e00      	cmp	r6, #0
 8005f16:	f173 0300 	sbcs.w	r3, r3, #0
 8005f1a:	46b0      	mov	r8, r6
 8005f1c:	46b9      	mov	r9, r7
 8005f1e:	da07      	bge.n	8005f30 <bme280_get_sensor_data+0x294>
 8005f20:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8005f24:	2300      	movs	r3, #0
 8005f26:	18b0      	adds	r0, r6, r2
 8005f28:	eb47 0103 	adc.w	r1, r7, r3
 8005f2c:	4680      	mov	r8, r0
 8005f2e:	4689      	mov	r9, r1
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8005f30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8005f34:	4641      	mov	r1, r8
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8005f36:	f9b5 2024 	ldrsh.w	r2, [r5, #36]	; 0x24
 8005f3a:	fb02 fc07 	mul.w	ip, r2, r7
 8005f3e:	17d3      	asrs	r3, r2, #31
 8005f40:	fb06 cc03 	mla	ip, r6, r3, ip
 8005f44:	fba2 2306 	umull	r2, r3, r2, r6
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8005f48:	0e4e      	lsrs	r6, r1, #25
 8005f4a:	4649      	mov	r1, r9
 8005f4c:	ea46 16c9 	orr.w	r6, r6, r9, lsl #7
 8005f50:	164f      	asrs	r7, r1, #25
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8005f52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f56:	1980      	adds	r0, r0, r6
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8005f58:	4463      	add	r3, ip
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8005f5a:	4179      	adcs	r1, r7
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8005f5c:	2a00      	cmp	r2, #0
 8005f5e:	f173 0600 	sbcs.w	r6, r3, #0
 8005f62:	da03      	bge.n	8005f6c <bme280_get_sensor_data+0x2d0>
 8005f64:	2700      	movs	r7, #0
 8005f66:	4e78      	ldr	r6, [pc, #480]	; (8006148 <bme280_get_sensor_data+0x4ac>)
 8005f68:	1992      	adds	r2, r2, r6
 8005f6a:	417b      	adcs	r3, r7
 8005f6c:	0cd6      	lsrs	r6, r2, #19
 8005f6e:	ea46 3643 	orr.w	r6, r6, r3, lsl #13
 8005f72:	14df      	asrs	r7, r3, #19
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8005f74:	eb10 0806 	adds.w	r8, r0, r6
 8005f78:	eb41 0907 	adc.w	r9, r1, r7
 8005f7c:	f1b8 0f00 	cmp.w	r8, #0
 8005f80:	f179 0300 	sbcs.w	r3, r9, #0
 8005f84:	da03      	bge.n	8005f8e <bme280_get_sensor_data+0x2f2>
 8005f86:	f118 08ff 	adds.w	r8, r8, #255	; 0xff
 8005f8a:	f149 0900 	adc.w	r9, r9, #0
 8005f8e:	2610      	movs	r6, #16
 8005f90:	ea4f 2718 	mov.w	r7, r8, lsr #8
 8005f94:	f9b5 0022 	ldrsh.w	r0, [r5, #34]	; 0x22
 8005f98:	ea47 6209 	orr.w	r2, r7, r9, lsl #24
 8005f9c:	ea4f 2329 	mov.w	r3, r9, asr #8
 8005fa0:	fbc0 2306 	smlal	r2, r3, r0, r6
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 8005fa4:	0fd9      	lsrs	r1, r3, #31
 8005fa6:	1852      	adds	r2, r2, r1
 8005fa8:	f143 0300 	adc.w	r3, r3, #0
 8005fac:	105b      	asrs	r3, r3, #1
 8005fae:	ea4f 0232 	mov.w	r2, r2, rrx
 8005fb2:	1890      	adds	r0, r2, r2
 8005fb4:	eb43 0103 	adc.w	r1, r3, r3
 8005fb8:	eb10 0802 	adds.w	r8, r0, r2
 8005fbc:	eb41 0903 	adc.w	r9, r1, r3
 8005fc0:	ea4f 1648 	mov.w	r6, r8, lsl #5
 8005fc4:	ea4f 1749 	mov.w	r7, r9, lsl #5
 8005fc8:	ea47 67d8 	orr.w	r7, r7, r8, lsr #27
 8005fcc:	eb18 0006 	adds.w	r0, r8, r6
 8005fd0:	eb49 0107 	adc.w	r1, r9, r7
 8005fd4:	1816      	adds	r6, r2, r0
 8005fd6:	eb43 0701 	adc.w	r7, r3, r1
 8005fda:	2e00      	cmp	r6, #0
 8005fdc:	f177 0300 	sbcs.w	r3, r7, #0
 8005fe0:	da02      	bge.n	8005fe8 <bme280_get_sensor_data+0x34c>
 8005fe2:	367f      	adds	r6, #127	; 0x7f
 8005fe4:	f147 0700 	adc.w	r7, r7, #0
 8005fe8:	09f2      	lsrs	r2, r6, #7
 8005fea:	4958      	ldr	r1, [pc, #352]	; (800614c <bme280_get_sensor_data+0x4b0>)
 8005fec:	ea42 6347 	orr.w	r3, r2, r7, lsl #25
 8005ff0:	428b      	cmp	r3, r1
 8005ff2:	bf28      	it	cs
 8005ff4:	460b      	movcs	r3, r1
 8005ff6:	4a56      	ldr	r2, [pc, #344]	; (8006150 <bme280_get_sensor_data+0x4b4>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	bf38      	it	cc
 8005ffc:	4613      	movcc	r3, r2
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8005ffe:	f8ca 3000 	str.w	r3, [sl]
		if (sensor_comp & BME280_HUM) {
 8006002:	f01b 0f04 	tst.w	fp, #4
 8006006:	d05c      	beq.n	80060c2 <bme280_get_sensor_data+0x426>
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 8006008:	9b01      	ldr	r3, [sp, #4]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 800600a:	f9b5 002e 	ldrsh.w	r0, [r5, #46]	; 0x2e
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 800600e:	ba59      	rev16	r1, r3
	var1 = calib_data->t_fine - ((int32_t)76800);
 8006010:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8006012:	0500      	lsls	r0, r0, #20
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 8006014:	f9b5 2030 	ldrsh.w	r2, [r5, #48]	; 0x30
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 8006018:	b289      	uxth	r1, r1
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 800601a:	ebc0 3181 	rsb	r1, r0, r1, lsl #14
	var1 = calib_data->t_fine - ((int32_t)76800);
 800601e:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8006022:	fb03 1212 	mls	r2, r3, r2, r1
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8006026:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 800602a:	f995 0032 	ldrsb.w	r0, [r5, #50]	; 0x32
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 800602e:	fb03 f101 	mul.w	r1, r3, r1
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8006032:	fb03 f300 	mul.w	r3, r3, r0
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8006036:	f512 4280 	adds.w	r2, r2, #16384	; 0x4000
 800603a:	bf44      	itt	mi
 800603c:	f502 42ff 	addmi.w	r2, r2, #32640	; 0x7f80
 8006040:	327f      	addmi	r2, #127	; 0x7f
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8006042:	2900      	cmp	r1, #0
 8006044:	bfb8      	it	lt
 8006046:	f201 71ff 	addwlt	r1, r1, #2047	; 0x7ff
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 800604a:	2b00      	cmp	r3, #0
 800604c:	bfb8      	it	lt
 800604e:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8006052:	12c9      	asrs	r1, r1, #11
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8006054:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8006058:	129b      	asrs	r3, r3, #10
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 800605a:	fb03 f301 	mul.w	r3, r3, r1
 800605e:	2b00      	cmp	r3, #0
 8006060:	bfb8      	it	lt
 8006062:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8006066:	f9b5 102a 	ldrsh.w	r1, [r5, #42]	; 0x2a
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 800606a:	129b      	asrs	r3, r3, #10
 800606c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8006070:	fb01 f303 	mul.w	r3, r1, r3
 8006074:	f513 5300 	adds.w	r3, r3, #8192	; 0x2000
 8006078:	bf44      	itt	mi
 800607a:	f503 537f 	addmi.w	r3, r3, #16320	; 0x3fc0
 800607e:	333f      	addmi	r3, #63	; 0x3f
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8006080:	13d2      	asrs	r2, r2, #15
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8006082:	139b      	asrs	r3, r3, #14
	var3 = var5 * var2;
 8006084:	fb02 f303 	mul.w	r3, r2, r3
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8006088:	461a      	mov	r2, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	bfbc      	itt	lt
 800608e:	f503 42ff 	addlt.w	r2, r3, #32640	; 0x7f80
 8006092:	327f      	addlt	r2, #127	; 0x7f
 8006094:	13d2      	asrs	r2, r2, #15
 8006096:	fb02 f202 	mul.w	r2, r2, r2
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 800609a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 800609e:	11d2      	asrs	r2, r2, #7
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 80060a0:	fb01 f202 	mul.w	r2, r1, r2
 80060a4:	2a00      	cmp	r2, #0
 80060a6:	bfb8      	it	lt
 80060a8:	320f      	addlt	r2, #15
 80060aa:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	var5 = (var5 < 0 ? 0 : var5);
 80060ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	var5 = (var5 > 419430400 ? 419430400 : var5);
 80060b2:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80060b6:	bfa8      	it	ge
 80060b8:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
	humidity = (uint32_t)(var5 / 4096);
 80060bc:	131b      	asrs	r3, r3, #12
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80060be:	f8ca 3008 	str.w	r3, [sl, #8]
}
 80060c2:	4620      	mov	r0, r4
 80060c4:	b011      	add	sp, #68	; 0x44
 80060c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	data_lsb = (uint32_t)reg_data[4] << 4;
 80060ca:	011b      	lsls	r3, r3, #4
	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 80060cc:	8a28      	ldrh	r0, [r5, #16]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80060ce:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80060d2:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 80060d6:	ebc0 1113 	rsb	r1, r0, r3, lsr #4
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 80060da:	fb01 f101 	mul.w	r1, r1, r1
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 80060de:	f9b5 2012 	ldrsh.w	r2, [r5, #18]
	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 80060e2:	0040      	lsls	r0, r0, #1
 80060e4:	ebc0 03d3 	rsb	r3, r0, r3, lsr #3
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 80060e8:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 80060ec:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 80060f0:	1309      	asrs	r1, r1, #12
 80060f2:	fb02 f201 	mul.w	r2, r2, r1
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	bfb8      	it	lt
 80060fa:	f203 73ff 	addwlt	r3, r3, #2047	; 0x7ff
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 80060fe:	2a00      	cmp	r2, #0
 8006100:	bfbc      	itt	lt
 8006102:	f502 527f 	addlt.w	r2, r2, #16320	; 0x3fc0
 8006106:	323f      	addlt	r2, #63	; 0x3f
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8006108:	12db      	asrs	r3, r3, #11
	calib_data->t_fine = var1 + var2;
 800610a:	eb03 33a2 	add.w	r3, r3, r2, asr #14
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 800610e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
	calib_data->t_fine = var1 + var2;
 8006112:	636b      	str	r3, [r5, #52]	; 0x34
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8006114:	f112 0380 	adds.w	r3, r2, #128	; 0x80
 8006118:	bf48      	it	mi
 800611a:	f202 137f 	addwmi	r3, r2, #383	; 0x17f
 800611e:	f242 1234 	movw	r2, #8500	; 0x2134
 8006122:	121b      	asrs	r3, r3, #8
 8006124:	4293      	cmp	r3, r2
 8006126:	bfa8      	it	ge
 8006128:	4613      	movge	r3, r2
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800612a:	4a0a      	ldr	r2, [pc, #40]	; (8006154 <bme280_get_sensor_data+0x4b8>)
 800612c:	4293      	cmp	r3, r2
 800612e:	bfb8      	it	lt
 8006130:	4613      	movlt	r3, r2
 8006132:	f8ca 3004 	str.w	r3, [sl, #4]
 8006136:	e5ed      	b.n	8005d14 <bme280_get_sensor_data+0x78>
		pressure = pressure_min;
 8006138:	4b05      	ldr	r3, [pc, #20]	; (8006150 <bme280_get_sensor_data+0x4b4>)
 800613a:	e760      	b.n	8005ffe <bme280_get_sensor_data+0x362>
		rslt = BME280_E_NULL_PTR;
 800613c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006140:	e7bf      	b.n	80060c2 <bme280_get_sensor_data+0x426>
			rslt = BME280_E_COMM_FAIL;
 8006142:	f06f 0403 	mvn.w	r4, #3
 8006146:	e7bc      	b.n	80060c2 <bme280_get_sensor_data+0x426>
 8006148:	0007ffff 	.word	0x0007ffff
 800614c:	00a7d8c0 	.word	0x00a7d8c0
 8006150:	002dc6c0 	.word	0x002dc6c0
 8006154:	fffff060 	.word	0xfffff060

08006158 <TSL2561_setPowerUp>:
	return false;
}

bool TSL2561_WriteByte(uint8_t regAdr, uint8_t value) {
	uint8_t data[2] = {0, 0};
	data[0] = ((regAdr & 0x0F) | TSL2561_CMD);
 8006158:	f44f 7160 	mov.w	r1, #896	; 0x380
	data[1] = value;
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, data, 2, 1000) == HAL_OK) {
 800615c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
bool TSL2561_setPowerUp(void) {
 8006160:	b500      	push	{lr}
 8006162:	b085      	sub	sp, #20
	data[0] = ((regAdr & 0x0F) | TSL2561_CMD);
 8006164:	aa04      	add	r2, sp, #16
 8006166:	f822 1d04 	strh.w	r1, [r2, #-4]!
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, data, 2, 1000) == HAL_OK) {
 800616a:	4806      	ldr	r0, [pc, #24]	; (8006184 <TSL2561_setPowerUp+0x2c>)
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	2152      	movs	r1, #82	; 0x52
 8006170:	2302      	movs	r3, #2
 8006172:	f001 fa4d 	bl	8007610 <HAL_I2C_Master_Transmit>
}
 8006176:	fab0 f080 	clz	r0, r0
 800617a:	0940      	lsrs	r0, r0, #5
 800617c:	b005      	add	sp, #20
 800617e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006182:	bf00      	nop
 8006184:	20003c94 	.word	0x20003c94

08006188 <TSL2561_setTiming_ms>:
bool TSL2561_setTiming_ms(bool gain, uint8_t time, unsigned int *ms) {
 8006188:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (time) {
 800618a:	2901      	cmp	r1, #1
bool TSL2561_setTiming_ms(bool gain, uint8_t time, unsigned int *ms) {
 800618c:	b085      	sub	sp, #20
 800618e:	460c      	mov	r4, r1
 8006190:	4607      	mov	r7, r0
	switch (time) {
 8006192:	d048      	beq.n	8006226 <TSL2561_setTiming_ms+0x9e>
 8006194:	d344      	bcc.n	8006220 <TSL2561_setTiming_ms+0x98>
 8006196:	2902      	cmp	r1, #2
 8006198:	d012      	beq.n	80061c0 <TSL2561_setTiming_ms+0x38>
		default: *ms = 0;
 800619a:	2300      	movs	r3, #0
 800619c:	6013      	str	r3, [r2, #0]
		return false;
	}
}

bool TSL2561_ReadByte(uint8_t regAdr, uint8_t *value) {
	uint8_t data = ((regAdr & 0x0F) | TSL2561_CMD);
 800619e:	2381      	movs	r3, #129	; 0x81
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK) {
 80061a0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	uint8_t data = ((regAdr & 0x0F) | TSL2561_CMD);
 80061a4:	ad04      	add	r5, sp, #16
 80061a6:	f805 3d04 	strb.w	r3, [r5, #-4]!
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK) {
 80061aa:	462a      	mov	r2, r5
 80061ac:	9600      	str	r6, [sp, #0]
 80061ae:	2301      	movs	r3, #1
 80061b0:	2152      	movs	r1, #82	; 0x52
 80061b2:	481e      	ldr	r0, [pc, #120]	; (800622c <TSL2561_setTiming_ms+0xa4>)
 80061b4:	f001 fa2c 	bl	8007610 <HAL_I2C_Master_Transmit>
 80061b8:	b130      	cbz	r0, 80061c8 <TSL2561_setTiming_ms+0x40>
	return false;
 80061ba:	2000      	movs	r0, #0
}
 80061bc:	b005      	add	sp, #20
 80061be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		case 2:  *ms = 402; break;
 80061c0:	f44f 73c9 	mov.w	r3, #402	; 0x192
 80061c4:	6013      	str	r3, [r2, #0]
 80061c6:	e7ea      	b.n	800619e <TSL2561_setTiming_ms+0x16>
		if(HAL_I2C_Master_Receive(&hi2c1, (uint16_t) TSL2561_ADDR, value, 1, 1000) == HAL_OK) {
 80061c8:	9600      	str	r6, [sp, #0]
 80061ca:	2301      	movs	r3, #1
 80061cc:	f10d 020b 	add.w	r2, sp, #11
 80061d0:	2152      	movs	r1, #82	; 0x52
 80061d2:	4816      	ldr	r0, [pc, #88]	; (800622c <TSL2561_setTiming_ms+0xa4>)
 80061d4:	f001 fb9e 	bl	8007914 <HAL_I2C_Master_Receive>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d1ee      	bne.n	80061ba <TSL2561_setTiming_ms+0x32>
 80061dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
		if (gain)
 80061e0:	b1df      	cbz	r7, 800621a <TSL2561_setTiming_ms+0x92>
			timing |= 0x10;
 80061e2:	f043 0310 	orr.w	r3, r3, #16
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, data, 2, 1000) == HAL_OK) {
 80061e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	data[0] = ((regAdr & 0x0F) | TSL2561_CMD);
 80061ea:	2681      	movs	r6, #129	; 0x81
		timing &= ~0x03;
 80061ec:	f023 0303 	bic.w	r3, r3, #3
		timing |= (time & 0x03);
 80061f0:	f004 0403 	and.w	r4, r4, #3
 80061f4:	431c      	orrs	r4, r3
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, data, 2, 1000) == HAL_OK) {
 80061f6:	9100      	str	r1, [sp, #0]
 80061f8:	462a      	mov	r2, r5
 80061fa:	2302      	movs	r3, #2
 80061fc:	2152      	movs	r1, #82	; 0x52
 80061fe:	480b      	ldr	r0, [pc, #44]	; (800622c <TSL2561_setTiming_ms+0xa4>)
		timing |= (time & 0x03);
 8006200:	f88d 400b 	strb.w	r4, [sp, #11]
	data[1] = value;
 8006204:	f88d 400d 	strb.w	r4, [sp, #13]
	data[0] = ((regAdr & 0x0F) | TSL2561_CMD);
 8006208:	f88d 600c 	strb.w	r6, [sp, #12]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, data, 2, 1000) == HAL_OK) {
 800620c:	f001 fa00 	bl	8007610 <HAL_I2C_Master_Transmit>
			return true;
 8006210:	fab0 f080 	clz	r0, r0
 8006214:	0940      	lsrs	r0, r0, #5
}
 8006216:	b005      	add	sp, #20
 8006218:	bdf0      	pop	{r4, r5, r6, r7, pc}
			timing &= ~0x10;
 800621a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800621e:	e7e2      	b.n	80061e6 <TSL2561_setTiming_ms+0x5e>
		case 0:  *ms = 14; break;
 8006220:	230e      	movs	r3, #14
 8006222:	6013      	str	r3, [r2, #0]
 8006224:	e7bb      	b.n	800619e <TSL2561_setTiming_ms+0x16>
		case 1:  *ms = 101; break;
 8006226:	2365      	movs	r3, #101	; 0x65
 8006228:	6013      	str	r3, [r2, #0]
 800622a:	e7b8      	b.n	800619e <TSL2561_setTiming_ms+0x16>
 800622c:	20003c94 	.word	0x20003c94

08006230 <TSL2561_getData>:
bool TSL2561_getData(unsigned int *data0, unsigned int *data1) {
 8006230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
bool TSL2561_readUInt(uint8_t address, unsigned int *value) {
	char high, low;
	// Set up command byte for read
	uint8_t data = ((address & 0x0F) | TSL2561_CMD);
	uint8_t tmpValue[2] = {0, 0};
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK) {
 8006234:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	uint8_t data = ((address & 0x0F) | TSL2561_CMD);
 8006238:	268c      	movs	r6, #140	; 0x8c
	uint8_t tmpValue[2] = {0, 0};
 800623a:	2500      	movs	r5, #0
bool TSL2561_getData(unsigned int *data0, unsigned int *data1) {
 800623c:	b084      	sub	sp, #16
 800623e:	4607      	mov	r7, r0
 8006240:	4688      	mov	r8, r1
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK) {
 8006242:	9400      	str	r4, [sp, #0]
 8006244:	f10d 020b 	add.w	r2, sp, #11
 8006248:	2301      	movs	r3, #1
 800624a:	2152      	movs	r1, #82	; 0x52
 800624c:	481b      	ldr	r0, [pc, #108]	; (80062bc <TSL2561_getData+0x8c>)
	uint8_t data = ((address & 0x0F) | TSL2561_CMD);
 800624e:	f88d 600b 	strb.w	r6, [sp, #11]
	uint8_t tmpValue[2] = {0, 0};
 8006252:	f8ad 500c 	strh.w	r5, [sp, #12]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK) {
 8006256:	f001 f9db 	bl	8007610 <HAL_I2C_Master_Transmit>
 800625a:	b118      	cbz	r0, 8006264 <TSL2561_getData+0x34>
 800625c:	2000      	movs	r0, #0
}
 800625e:	b004      	add	sp, #16
 8006260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(HAL_I2C_Master_Receive(&hi2c1, (uint16_t) TSL2561_ADDR, tmpValue, 2, 1000) == HAL_OK) {
 8006264:	9400      	str	r4, [sp, #0]
 8006266:	aa03      	add	r2, sp, #12
 8006268:	2302      	movs	r3, #2
 800626a:	2152      	movs	r1, #82	; 0x52
 800626c:	4813      	ldr	r0, [pc, #76]	; (80062bc <TSL2561_getData+0x8c>)
 800626e:	f001 fb51 	bl	8007914 <HAL_I2C_Master_Receive>
 8006272:	4605      	mov	r5, r0
 8006274:	2800      	cmp	r0, #0
 8006276:	d1f1      	bne.n	800625c <TSL2561_getData+0x2c>
	uint8_t data = ((address & 0x0F) | TSL2561_CMD);
 8006278:	208e      	movs	r0, #142	; 0x8e
			low = tmpValue[0];
			high = tmpValue[1];
			// Combine bytes into unsigned int
			*value = high << 8 |  low;
 800627a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK) {
 800627e:	9400      	str	r4, [sp, #0]
	uint8_t data = ((address & 0x0F) | TSL2561_CMD);
 8006280:	f88d 000b 	strb.w	r0, [sp, #11]
			*value = high << 8 |  low;
 8006284:	603b      	str	r3, [r7, #0]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK) {
 8006286:	f10d 020b 	add.w	r2, sp, #11
 800628a:	2301      	movs	r3, #1
 800628c:	2152      	movs	r1, #82	; 0x52
 800628e:	480b      	ldr	r0, [pc, #44]	; (80062bc <TSL2561_getData+0x8c>)
	uint8_t tmpValue[2] = {0, 0};
 8006290:	f8ad 500c 	strh.w	r5, [sp, #12]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK) {
 8006294:	f001 f9bc 	bl	8007610 <HAL_I2C_Master_Transmit>
 8006298:	2800      	cmp	r0, #0
 800629a:	d1df      	bne.n	800625c <TSL2561_getData+0x2c>
		if(HAL_I2C_Master_Receive(&hi2c1, (uint16_t) TSL2561_ADDR, tmpValue, 2, 1000) == HAL_OK) {
 800629c:	9400      	str	r4, [sp, #0]
 800629e:	aa03      	add	r2, sp, #12
 80062a0:	2302      	movs	r3, #2
 80062a2:	2152      	movs	r1, #82	; 0x52
 80062a4:	4805      	ldr	r0, [pc, #20]	; (80062bc <TSL2561_getData+0x8c>)
 80062a6:	f001 fb35 	bl	8007914 <HAL_I2C_Master_Receive>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d1d6      	bne.n	800625c <TSL2561_getData+0x2c>
			*value = high << 8 |  low;
 80062ae:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80062b2:	2001      	movs	r0, #1
 80062b4:	f8c8 3000 	str.w	r3, [r8]
 80062b8:	e7d1      	b.n	800625e <TSL2561_getData+0x2e>
 80062ba:	bf00      	nop
 80062bc:	20003c94 	.word	0x20003c94

080062c0 <TSL2561_getLux>:
bool TSL2561_getLux(unsigned char gain, unsigned int ms, unsigned int CH0, unsigned int CH1, double *lux) {
 80062c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((CH0 == 0xFFFF) || (CH1 == 0xFFFF)) {
 80062c4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80062c8:	42a2      	cmp	r2, r4
bool TSL2561_getLux(unsigned char gain, unsigned int ms, unsigned int CH0, unsigned int CH1, double *lux) {
 80062ca:	b083      	sub	sp, #12
	if ((CH0 == 0xFFFF) || (CH1 == 0xFFFF)) {
 80062cc:	d069      	beq.n	80063a2 <TSL2561_getLux+0xe2>
 80062ce:	42a3      	cmp	r3, r4
 80062d0:	d067      	beq.n	80063a2 <TSL2561_getLux+0xe2>
 80062d2:	9001      	str	r0, [sp, #4]
 80062d4:	4610      	mov	r0, r2
 80062d6:	461c      	mov	r4, r3
 80062d8:	4688      	mov	r8, r1
	d0 = CH0; d1 = CH1;
 80062da:	f7fa f87b 	bl	80003d4 <__aeabi_ui2d>
 80062de:	4606      	mov	r6, r0
 80062e0:	460f      	mov	r7, r1
 80062e2:	4620      	mov	r0, r4
 80062e4:	f7fa f876 	bl	80003d4 <__aeabi_ui2d>
	ratio = d1 / d0;
 80062e8:	4632      	mov	r2, r6
 80062ea:	463b      	mov	r3, r7
	d0 = CH0; d1 = CH1;
 80062ec:	4682      	mov	sl, r0
 80062ee:	468b      	mov	fp, r1
	ratio = d1 / d0;
 80062f0:	f7fa fa14 	bl	800071c <__aeabi_ddiv>
 80062f4:	4604      	mov	r4, r0
	d0 *= (402.0/ms);
 80062f6:	4640      	mov	r0, r8
	ratio = d1 / d0;
 80062f8:	460d      	mov	r5, r1
	d0 *= (402.0/ms);
 80062fa:	f7fa f86b 	bl	80003d4 <__aeabi_ui2d>
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	a157      	add	r1, pc, #348	; (adr r1, 8006460 <TSL2561_getLux+0x1a0>)
 8006304:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006308:	f7fa fa08 	bl	800071c <__aeabi_ddiv>
 800630c:	4632      	mov	r2, r6
 800630e:	463b      	mov	r3, r7
 8006310:	4680      	mov	r8, r0
 8006312:	4689      	mov	r9, r1
 8006314:	f7fa f8d8 	bl	80004c8 <__aeabi_dmul>
	d1 *= (402.0/ms);
 8006318:	465b      	mov	r3, fp
	d0 *= (402.0/ms);
 800631a:	4606      	mov	r6, r0
 800631c:	460f      	mov	r7, r1
	d1 *= (402.0/ms);
 800631e:	4640      	mov	r0, r8
 8006320:	4649      	mov	r1, r9
 8006322:	4652      	mov	r2, sl
 8006324:	f7fa f8d0 	bl	80004c8 <__aeabi_dmul>
	if (!gain) {
 8006328:	9b01      	ldr	r3, [sp, #4]
	d1 *= (402.0/ms);
 800632a:	4680      	mov	r8, r0
 800632c:	4689      	mov	r9, r1
	if (!gain) {
 800632e:	b97b      	cbnz	r3, 8006350 <TSL2561_getLux+0x90>
		d0 *= 16;
 8006330:	4630      	mov	r0, r6
 8006332:	4639      	mov	r1, r7
 8006334:	2200      	movs	r2, #0
 8006336:	4b64      	ldr	r3, [pc, #400]	; (80064c8 <TSL2561_getLux+0x208>)
 8006338:	f7fa f8c6 	bl	80004c8 <__aeabi_dmul>
		d1 *= 16;
 800633c:	2200      	movs	r2, #0
		d0 *= 16;
 800633e:	4606      	mov	r6, r0
 8006340:	460f      	mov	r7, r1
		d1 *= 16;
 8006342:	4640      	mov	r0, r8
 8006344:	4649      	mov	r1, r9
 8006346:	4b60      	ldr	r3, [pc, #384]	; (80064c8 <TSL2561_getLux+0x208>)
 8006348:	f7fa f8be 	bl	80004c8 <__aeabi_dmul>
 800634c:	4680      	mov	r8, r0
 800634e:	4689      	mov	r9, r1
	if (ratio < 0.5) {
 8006350:	2200      	movs	r2, #0
 8006352:	4b5e      	ldr	r3, [pc, #376]	; (80064cc <TSL2561_getLux+0x20c>)
 8006354:	4620      	mov	r0, r4
 8006356:	4629      	mov	r1, r5
 8006358:	f7fa fb28 	bl	80009ac <__aeabi_dcmplt>
 800635c:	2800      	cmp	r0, #0
 800635e:	d148      	bne.n	80063f2 <TSL2561_getLux+0x132>
	if (ratio < 0.61) {
 8006360:	a341      	add	r3, pc, #260	; (adr r3, 8006468 <TSL2561_getLux+0x1a8>)
 8006362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006366:	4620      	mov	r0, r4
 8006368:	4629      	mov	r1, r5
 800636a:	f7fa fb1f 	bl	80009ac <__aeabi_dcmplt>
 800636e:	bb10      	cbnz	r0, 80063b6 <TSL2561_getLux+0xf6>
	if (ratio < 0.80) {
 8006370:	a33f      	add	r3, pc, #252	; (adr r3, 8006470 <TSL2561_getLux+0x1b0>)
 8006372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006376:	4620      	mov	r0, r4
 8006378:	4629      	mov	r1, r5
 800637a:	f7fa fb17 	bl	80009ac <__aeabi_dcmplt>
 800637e:	2800      	cmp	r0, #0
 8006380:	d153      	bne.n	800642a <TSL2561_getLux+0x16a>
	if (ratio < 1.30) {
 8006382:	a33d      	add	r3, pc, #244	; (adr r3, 8006478 <TSL2561_getLux+0x1b8>)
 8006384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006388:	4620      	mov	r0, r4
 800638a:	4629      	mov	r1, r5
 800638c:	f7fa fb0e 	bl	80009ac <__aeabi_dcmplt>
 8006390:	2800      	cmp	r0, #0
 8006392:	d157      	bne.n	8006444 <TSL2561_getLux+0x184>
	*lux = 0.0;
 8006394:	2000      	movs	r0, #0
 8006396:	2100      	movs	r1, #0
 8006398:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	return true;
 800639a:	2301      	movs	r3, #1
	*lux = 0.0;
 800639c:	e9c2 0100 	strd	r0, r1, [r2]
	return true;
 80063a0:	e005      	b.n	80063ae <TSL2561_getLux+0xee>
		*lux = 0.0;
 80063a2:	2000      	movs	r0, #0
 80063a4:	2100      	movs	r1, #0
		return false;
 80063a6:	2300      	movs	r3, #0
		*lux = 0.0;
 80063a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063aa:	e9c2 0100 	strd	r0, r1, [r2]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	b003      	add	sp, #12
 80063b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*lux = 0.0224 * d0 - 0.031 * d1;
 80063b6:	a332      	add	r3, pc, #200	; (adr r3, 8006480 <TSL2561_getLux+0x1c0>)
 80063b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063bc:	4630      	mov	r0, r6
 80063be:	4639      	mov	r1, r7
 80063c0:	f7fa f882 	bl	80004c8 <__aeabi_dmul>
 80063c4:	a330      	add	r3, pc, #192	; (adr r3, 8006488 <TSL2561_getLux+0x1c8>)
 80063c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ca:	4604      	mov	r4, r0
 80063cc:	460d      	mov	r5, r1
 80063ce:	4640      	mov	r0, r8
 80063d0:	4649      	mov	r1, r9
 80063d2:	f7fa f879 	bl	80004c8 <__aeabi_dmul>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4620      	mov	r0, r4
 80063dc:	4629      	mov	r1, r5
 80063de:	f7f9 febb 	bl	8000158 <__aeabi_dsub>
		return true;
 80063e2:	2301      	movs	r3, #1
		*lux = 0.0224 * d0 - 0.031 * d1;
 80063e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063e6:	e9c2 0100 	strd	r0, r1, [r2]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	b003      	add	sp, #12
 80063ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*lux = 0.0304 * d0 - 0.062 * d0 * pow(ratio,1.4);
 80063f2:	a327      	add	r3, pc, #156	; (adr r3, 8006490 <TSL2561_getLux+0x1d0>)
 80063f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f8:	4620      	mov	r0, r4
 80063fa:	4629      	mov	r1, r5
 80063fc:	f005 fc7c 	bl	800bcf8 <pow>
 8006400:	a325      	add	r3, pc, #148	; (adr r3, 8006498 <TSL2561_getLux+0x1d8>)
 8006402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006406:	4680      	mov	r8, r0
 8006408:	4689      	mov	r9, r1
 800640a:	4630      	mov	r0, r6
 800640c:	4639      	mov	r1, r7
 800640e:	f7fa f85b 	bl	80004c8 <__aeabi_dmul>
 8006412:	a323      	add	r3, pc, #140	; (adr r3, 80064a0 <TSL2561_getLux+0x1e0>)
 8006414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006418:	4604      	mov	r4, r0
 800641a:	460d      	mov	r5, r1
 800641c:	4630      	mov	r0, r6
 800641e:	4639      	mov	r1, r7
 8006420:	f7fa f852 	bl	80004c8 <__aeabi_dmul>
 8006424:	4642      	mov	r2, r8
 8006426:	464b      	mov	r3, r9
 8006428:	e7d3      	b.n	80063d2 <TSL2561_getLux+0x112>
		*lux = 0.0128 * d0 - 0.0153 * d1;
 800642a:	a31f      	add	r3, pc, #124	; (adr r3, 80064a8 <TSL2561_getLux+0x1e8>)
 800642c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006430:	4630      	mov	r0, r6
 8006432:	4639      	mov	r1, r7
 8006434:	f7fa f848 	bl	80004c8 <__aeabi_dmul>
 8006438:	a31d      	add	r3, pc, #116	; (adr r3, 80064b0 <TSL2561_getLux+0x1f0>)
 800643a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643e:	4604      	mov	r4, r0
 8006440:	460d      	mov	r5, r1
 8006442:	e7c4      	b.n	80063ce <TSL2561_getLux+0x10e>
		*lux = 0.00146 * d0 - 0.00112 * d1;
 8006444:	a31c      	add	r3, pc, #112	; (adr r3, 80064b8 <TSL2561_getLux+0x1f8>)
 8006446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644a:	4630      	mov	r0, r6
 800644c:	4639      	mov	r1, r7
 800644e:	f7fa f83b 	bl	80004c8 <__aeabi_dmul>
 8006452:	a31b      	add	r3, pc, #108	; (adr r3, 80064c0 <TSL2561_getLux+0x200>)
 8006454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006458:	4604      	mov	r4, r0
 800645a:	460d      	mov	r5, r1
 800645c:	e7b7      	b.n	80063ce <TSL2561_getLux+0x10e>
 800645e:	bf00      	nop
 8006460:	00000000 	.word	0x00000000
 8006464:	40792000 	.word	0x40792000
 8006468:	b851eb85 	.word	0xb851eb85
 800646c:	3fe3851e 	.word	0x3fe3851e
 8006470:	9999999a 	.word	0x9999999a
 8006474:	3fe99999 	.word	0x3fe99999
 8006478:	cccccccd 	.word	0xcccccccd
 800647c:	3ff4cccc 	.word	0x3ff4cccc
 8006480:	8db8bac7 	.word	0x8db8bac7
 8006484:	3f96f006 	.word	0x3f96f006
 8006488:	c8b43958 	.word	0xc8b43958
 800648c:	3f9fbe76 	.word	0x3f9fbe76
 8006490:	66666666 	.word	0x66666666
 8006494:	3ff66666 	.word	0x3ff66666
 8006498:	77318fc5 	.word	0x77318fc5
 800649c:	3f9f212d 	.word	0x3f9f212d
 80064a0:	c8b43958 	.word	0xc8b43958
 80064a4:	3fafbe76 	.word	0x3fafbe76
 80064a8:	eb1c432d 	.word	0xeb1c432d
 80064ac:	3f8a36e2 	.word	0x3f8a36e2
 80064b0:	3d07c84b 	.word	0x3d07c84b
 80064b4:	3f8f559b 	.word	0x3f8f559b
 80064b8:	102363b2 	.word	0x102363b2
 80064bc:	3f57ebaf 	.word	0x3f57ebaf
 80064c0:	d7c6fbd2 	.word	0xd7c6fbd2
 80064c4:	3f52599e 	.word	0x3f52599e
 80064c8:	40300000 	.word	0x40300000
 80064cc:	3fe00000 	.word	0x3fe00000

080064d0 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
    HAL_TIM_Base_Start(&htim2);
 80064d0:	4801      	ldr	r0, [pc, #4]	; (80064d8 <configureTimerForRunTimeStats+0x8>)
 80064d2:	f003 baa1 	b.w	8009a18 <HAL_TIM_Base_Start>
 80064d6:	bf00      	nop
 80064d8:	20003d6c 	.word	0x20003d6c

080064dc <getRunTimeCounterValue>:
}

__weak unsigned long getRunTimeCounterValue(void)
{
 80064dc:	b410      	push	{r4}
    static unsigned long counter = 0;

    counter += __HAL_TIM_GET_COUNTER(&htim2);
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 80064de:	2400      	movs	r4, #0
    counter += __HAL_TIM_GET_COUNTER(&htim2);
 80064e0:	4a04      	ldr	r2, [pc, #16]	; (80064f4 <getRunTimeCounterValue+0x18>)
 80064e2:	4b05      	ldr	r3, [pc, #20]	; (80064f8 <getRunTimeCounterValue+0x1c>)
 80064e4:	6812      	ldr	r2, [r2, #0]
 80064e6:	6819      	ldr	r1, [r3, #0]
 80064e8:	6a50      	ldr	r0, [r2, #36]	; 0x24
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 80064ea:	6254      	str	r4, [r2, #36]	; 0x24
    counter += __HAL_TIM_GET_COUNTER(&htim2);
 80064ec:	4408      	add	r0, r1
 80064ee:	6018      	str	r0, [r3, #0]

    return counter;
}
 80064f0:	bc10      	pop	{r4}
 80064f2:	4770      	bx	lr
 80064f4:	20003d6c 	.word	0x20003d6c
 80064f8:	20001bd0 	.word	0x20001bd0

080064fc <user_i2c_read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80064fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8006500:	260a      	movs	r6, #10
{
 8006502:	b084      	sub	sp, #16
 8006504:	ac04      	add	r4, sp, #16
 8006506:	f804 1d01 	strb.w	r1, [r4, #-1]!
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 800650a:	0045      	lsls	r5, r0, #1
{
 800650c:	4617      	mov	r7, r2
 800650e:	4698      	mov	r8, r3
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8006510:	4622      	mov	r2, r4
 8006512:	4629      	mov	r1, r5
 8006514:	9600      	str	r6, [sp, #0]
 8006516:	2301      	movs	r3, #1
 8006518:	480a      	ldr	r0, [pc, #40]	; (8006544 <user_i2c_read+0x48>)
 800651a:	f001 f879 	bl	8007610 <HAL_I2C_Master_Transmit>
 800651e:	b970      	cbnz	r0, 800653e <user_i2c_read+0x42>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8006520:	9600      	str	r6, [sp, #0]
 8006522:	4643      	mov	r3, r8
 8006524:	463a      	mov	r2, r7
 8006526:	f045 0101 	orr.w	r1, r5, #1
 800652a:	4806      	ldr	r0, [pc, #24]	; (8006544 <user_i2c_read+0x48>)
 800652c:	f001 f9f2 	bl	8007914 <HAL_I2C_Master_Receive>
 8006530:	3000      	adds	r0, #0
 8006532:	bf18      	it	ne
 8006534:	2001      	movne	r0, #1
 8006536:	4240      	negs	r0, r0

  return 0;
}
 8006538:	b004      	add	sp, #16
 800653a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 800653e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006542:	e7f9      	b.n	8006538 <user_i2c_read+0x3c>
 8006544:	20003c94 	.word	0x20003c94

08006548 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
  HAL_Delay(period);
 8006548:	f000 bdd0 	b.w	80070ec <HAL_Delay>

0800654c <user_i2c_write>:
}

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800654c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int8_t *buf;
  buf = malloc(len +1);
 8006550:	1c5e      	adds	r6, r3, #1
{
 8006552:	b082      	sub	sp, #8
 8006554:	4604      	mov	r4, r0
  buf = malloc(len +1);
 8006556:	4630      	mov	r0, r6
{
 8006558:	461f      	mov	r7, r3
 800655a:	468a      	mov	sl, r1
 800655c:	4691      	mov	r9, r2
  buf = malloc(len +1);
 800655e:	f006 fc23 	bl	800cda8 <malloc>
  buf[0] = reg_addr;
  memcpy(buf +1, data, len);
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8006562:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  buf = malloc(len +1);
 8006566:	4605      	mov	r5, r0
  memcpy(buf +1, data, len);
 8006568:	463a      	mov	r2, r7
 800656a:	4649      	mov	r1, r9
  buf[0] = reg_addr;
 800656c:	f800 ab01 	strb.w	sl, [r0], #1
  memcpy(buf +1, data, len);
 8006570:	f006 fc2a 	bl	800cdc8 <memcpy>
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8006574:	b2b3      	uxth	r3, r6
 8006576:	0061      	lsls	r1, r4, #1
 8006578:	462a      	mov	r2, r5
 800657a:	f8cd 8000 	str.w	r8, [sp]
 800657e:	4807      	ldr	r0, [pc, #28]	; (800659c <user_i2c_write+0x50>)
 8006580:	f001 f846 	bl	8007610 <HAL_I2C_Master_Transmit>
 8006584:	b938      	cbnz	r0, 8006596 <user_i2c_write+0x4a>
 8006586:	4604      	mov	r4, r0
  free(buf);
 8006588:	4628      	mov	r0, r5
 800658a:	f006 fc15 	bl	800cdb8 <free>
  return 0;
 800658e:	4620      	mov	r0, r4
}
 8006590:	b002      	add	sp, #8
 8006592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8006596:	4640      	mov	r0, r8
 8006598:	e7fa      	b.n	8006590 <user_i2c_write+0x44>
 800659a:	bf00      	nop
 800659c:	20003c94 	.word	0x20003c94

080065a0 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 80065a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065a4:	b08a      	sub	sp, #40	; 0x28
  /* USER CODE BEGIN 5 */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = 1000;
  xLastWakeTime = xTaskGetTickCount();
 80065a6:	f004 fc31 	bl	800ae0c <xTaskGetTickCount>
 80065aa:	ad0a      	add	r5, sp, #40	; 0x28
 80065ac:	f8df a074 	ldr.w	sl, [pc, #116]	; 8006624 <StartTask01+0x84>
 80065b0:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8006628 <StartTask01+0x88>
 80065b4:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800662c <StartTask01+0x8c>
 80065b8:	4c18      	ldr	r4, [pc, #96]	; (800661c <StartTask01+0x7c>)
	if (TSL2561_getData(&data0, &data1))
	{
		double lux;
		TSL2561_getLux(gain, ms, data0, data1, &lux);
		sensors_data.lux = lux;
		lora_sensor_set_data(&illumination_sensor,(float)lux);
 80065ba:	4f19      	ldr	r7, [pc, #100]	; (8006620 <StartTask01+0x80>)
  xLastWakeTime = xTaskGetTickCount();
 80065bc:	f845 0d14 	str.w	r0, [r5, #-20]!
 80065c0:	ae08      	add	r6, sp, #32
 80065c2:	e002      	b.n	80065ca <StartTask01+0x2a>
	}
	cnt_task_1++;
 80065c4:	8823      	ldrh	r3, [r4, #0]
 80065c6:	3301      	adds	r3, #1
 80065c8:	8023      	strh	r3, [r4, #0]
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80065ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80065ce:	4628      	mov	r0, r5
 80065d0:	f004 fd4c 	bl	800b06c <vTaskDelayUntil>
	if (TSL2561_getData(&data0, &data1))
 80065d4:	a907      	add	r1, sp, #28
 80065d6:	a806      	add	r0, sp, #24
 80065d8:	f7ff fe2a 	bl	8006230 <TSL2561_getData>
 80065dc:	2800      	cmp	r0, #0
 80065de:	d0f1      	beq.n	80065c4 <StartTask01+0x24>
		TSL2561_getLux(gain, ms, data0, data1, &lux);
 80065e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065e4:	f8da 1000 	ldr.w	r1, [sl]
 80065e8:	f899 0000 	ldrb.w	r0, [r9]
 80065ec:	9600      	str	r6, [sp, #0]
 80065ee:	f7ff fe67 	bl	80062c0 <TSL2561_getLux>
		sensors_data.lux = lux;
 80065f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80065f6:	4619      	mov	r1, r3
 80065f8:	4610      	mov	r0, r2
 80065fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065fe:	f7fa fa13 	bl	8000a28 <__aeabi_d2uiz>
		lora_sensor_set_data(&illumination_sensor,(float)lux);
 8006602:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
		sensors_data.lux = lux;
 8006606:	f8a8 0000 	strh.w	r0, [r8]
		lora_sensor_set_data(&illumination_sensor,(float)lux);
 800660a:	4619      	mov	r1, r3
 800660c:	4610      	mov	r0, r2
 800660e:	f7fa fa2b 	bl	8000a68 <__aeabi_d2f>
 8006612:	4601      	mov	r1, r0
 8006614:	4638      	mov	r0, r7
 8006616:	f000 fcb9 	bl	8006f8c <lora_sensor_set_data>
 800661a:	e7d3      	b.n	80065c4 <StartTask01+0x24>
 800661c:	20003dfc 	.word	0x20003dfc
 8006620:	20003d00 	.word	0x20003d00
 8006624:	20001bd8 	.word	0x20001bd8
 8006628:	20001bd4 	.word	0x20001bd4
 800662c:	20003e00 	.word	0x20003e00

08006630 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8006630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006634:	4d26      	ldr	r5, [pc, #152]	; (80066d0 <StartTask02+0xa0>)
 8006636:	b082      	sub	sp, #8
  /* USER CODE BEGIN StartTask02 */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = 2000;
  xLastWakeTime = xTaskGetTickCount();
 8006638:	f004 fbe8 	bl	800ae0c <xTaskGetTickCount>
  for(;;)
  {
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
	//rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
	//dev.delay_ms(40);
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 800663c:	46aa      	mov	sl, r5
  xLastWakeTime = xTaskGetTickCount();
 800663e:	af02      	add	r7, sp, #8
 8006640:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80066e4 <StartTask02+0xb4>
 8006644:	4e23      	ldr	r6, [pc, #140]	; (80066d4 <StartTask02+0xa4>)
 8006646:	4c24      	ldr	r4, [pc, #144]	; (80066d8 <StartTask02+0xa8>)
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8006648:	f8df 809c 	ldr.w	r8, [pc, #156]	; 80066e8 <StartTask02+0xb8>
  xLastWakeTime = xTaskGetTickCount();
 800664c:	f847 0d04 	str.w	r0, [r7, #-4]!
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8006650:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006654:	4638      	mov	r0, r7
 8006656:	f004 fd09 	bl	800b06c <vTaskDelayUntil>
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 800665a:	4642      	mov	r2, r8
 800665c:	4651      	mov	r1, sl
 800665e:	2007      	movs	r0, #7
 8006660:	f7ff fb1c 	bl	8005c9c <bme280_get_sensor_data>
 8006664:	f889 0000 	strb.w	r0, [r9]
	if(rslt == BME280_OK)
 8006668:	bb18      	cbnz	r0, 80066b2 <StartTask02+0x82>
	{
		sensors_data.temperature = comp_data.temperature / 100.0;      /* C  */
 800666a:	6868      	ldr	r0, [r5, #4]
 800666c:	f7f9 fec2 	bl	80003f4 <__aeabi_i2d>
 8006670:	2200      	movs	r2, #0
 8006672:	4b1a      	ldr	r3, [pc, #104]	; (80066dc <StartTask02+0xac>)
 8006674:	f7fa f852 	bl	800071c <__aeabi_ddiv>
 8006678:	f7fa f9f6 	bl	8000a68 <__aeabi_d2f>
 800667c:	6070      	str	r0, [r6, #4]
		sensors_data.humidity = comp_data.humidity / 1024.0;           /* %   */
 800667e:	68a8      	ldr	r0, [r5, #8]
 8006680:	f7f9 fea8 	bl	80003d4 <__aeabi_ui2d>
 8006684:	2200      	movs	r2, #0
 8006686:	4b16      	ldr	r3, [pc, #88]	; (80066e0 <StartTask02+0xb0>)
 8006688:	f7f9 ff1e 	bl	80004c8 <__aeabi_dmul>
 800668c:	f7fa f9ec 	bl	8000a68 <__aeabi_d2f>
 8006690:	60b0      	str	r0, [r6, #8]
		sensors_data.pressure = comp_data.pressure / 10000.0 / 1.333;  /* hPa or mmhg */
 8006692:	6828      	ldr	r0, [r5, #0]
 8006694:	f7f9 fe9e 	bl	80003d4 <__aeabi_ui2d>
 8006698:	a309      	add	r3, pc, #36	; (adr r3, 80066c0 <StartTask02+0x90>)
 800669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669e:	f7fa f83d 	bl	800071c <__aeabi_ddiv>
 80066a2:	a309      	add	r3, pc, #36	; (adr r3, 80066c8 <StartTask02+0x98>)
 80066a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a8:	f7fa f838 	bl	800071c <__aeabi_ddiv>
 80066ac:	f7fa f9bc 	bl	8000a28 <__aeabi_d2uiz>
 80066b0:	81b0      	strh	r0, [r6, #12]
	}
	cnt_task_2++;
 80066b2:	8823      	ldrh	r3, [r4, #0]
 80066b4:	3301      	adds	r3, #1
 80066b6:	8023      	strh	r3, [r4, #0]
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80066b8:	e7ca      	b.n	8006650 <StartTask02+0x20>
 80066ba:	bf00      	nop
 80066bc:	f3af 8000 	nop.w
 80066c0:	00000000 	.word	0x00000000
 80066c4:	40c38800 	.word	0x40c38800
 80066c8:	ced91687 	.word	0xced91687
 80066cc:	3ff553f7 	.word	0x3ff553f7
 80066d0:	20003ce8 	.word	0x20003ce8
 80066d4:	20003e00 	.word	0x20003e00
 80066d8:	20003cf4 	.word	0x20003cf4
 80066dc:	40590000 	.word	0x40590000
 80066e0:	3f500000 	.word	0x3f500000
 80066e4:	20003c90 	.word	0x20003c90
 80066e8:	20000018 	.word	0x20000018

080066ec <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80066ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ee:	b083      	sub	sp, #12
  /* USER CODE BEGIN StartTask03 */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = 5500;
  xLastWakeTime = xTaskGetTickCount();
 80066f0:	f004 fb8c 	bl	800ae0c <xTaskGetTickCount>
 80066f4:	ae02      	add	r6, sp, #8
 80066f6:	4d0f      	ldr	r5, [pc, #60]	; (8006734 <StartTask03+0x48>)
  /* Infinite loop */
  for(;;)
  {
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
	//lora_module_introduce(&lora_module, &sensors_data);
	HAL_GPIO_TogglePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin);
 80066f8:	4f0f      	ldr	r7, [pc, #60]	; (8006738 <StartTask03+0x4c>)
	lora_module_send_packet_read_data(&lora_module);
	//
	HAL_GPIO_TogglePin(LORA_DIO0_GPIO_Port, LORA_DIO0_Pin);
 80066fa:	4c10      	ldr	r4, [pc, #64]	; (800673c <StartTask03+0x50>)
  xLastWakeTime = xTaskGetTickCount();
 80066fc:	f846 0d04 	str.w	r0, [r6, #-4]!
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8006700:	f241 517c 	movw	r1, #5500	; 0x157c
 8006704:	4630      	mov	r0, r6
 8006706:	f004 fcb1 	bl	800b06c <vTaskDelayUntil>
	HAL_GPIO_TogglePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin);
 800670a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800670e:	4638      	mov	r0, r7
 8006710:	f000 fea8 	bl	8007464 <HAL_GPIO_TogglePin>
	lora_module_send_packet_read_data(&lora_module);
 8006714:	480a      	ldr	r0, [pc, #40]	; (8006740 <StartTask03+0x54>)
 8006716:	f000 fbb7 	bl	8006e88 <lora_module_send_packet_read_data>
	HAL_GPIO_TogglePin(LORA_DIO0_GPIO_Port, LORA_DIO0_Pin);
 800671a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800671e:	4620      	mov	r0, r4
 8006720:	f000 fea0 	bl	8007464 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LORA_DIO1_GPIO_Port, LORA_DIO1_Pin);
 8006724:	2104      	movs	r1, #4
 8006726:	4620      	mov	r0, r4
 8006728:	f000 fe9c 	bl	8007464 <HAL_GPIO_TogglePin>
	cnt_task_3++;
 800672c:	882b      	ldrh	r3, [r5, #0]
 800672e:	3301      	adds	r3, #1
 8006730:	802b      	strh	r3, [r5, #0]
 8006732:	e7e5      	b.n	8006700 <StartTask03+0x14>
 8006734:	20003cfc 	.word	0x20003cfc
 8006738:	40010800 	.word	0x40010800
 800673c:	40010c00 	.word	0x40010c00
 8006740:	20000058 	.word	0x20000058

08006744 <SystemClock_Config>:
{
 8006744:	b510      	push	{r4, lr}
 8006746:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006748:	2224      	movs	r2, #36	; 0x24
 800674a:	2100      	movs	r1, #0
 800674c:	a807      	add	r0, sp, #28
 800674e:	f006 fb5f 	bl	800ce10 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006752:	2402      	movs	r4, #2
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006754:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006756:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006758:	2210      	movs	r2, #16
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800675a:	a806      	add	r0, sp, #24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800675c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8006760:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006764:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006768:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800676c:	f002 fb56 	bl	8008e1c <HAL_RCC_OscConfig>
 8006770:	b108      	cbz	r0, 8006776 <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006772:	b672      	cpsid	i
 8006774:	e7fe      	b.n	8006774 <SystemClock_Config+0x30>
 8006776:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006778:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800677a:	a801      	add	r0, sp, #4
 800677c:	4619      	mov	r1, r3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800677e:	e9cd 3302 	strd	r3, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006782:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006786:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006788:	f002 fd40 	bl	800920c <HAL_RCC_ClockConfig>
 800678c:	b108      	cbz	r0, 8006792 <SystemClock_Config+0x4e>
 800678e:	b672      	cpsid	i
 8006790:	e7fe      	b.n	8006790 <SystemClock_Config+0x4c>
}
 8006792:	b010      	add	sp, #64	; 0x40
 8006794:	bd10      	pop	{r4, pc}
 8006796:	bf00      	nop

08006798 <main>:
{
 8006798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800679c:	2400      	movs	r4, #0
{
 800679e:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 80067a0:	f000 fc80 	bl	80070a4 <HAL_Init>
  SystemClock_Config();
 80067a4:	f7ff ffce 	bl	8006744 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067a8:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 80067ac:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80067b0:	4bad      	ldr	r3, [pc, #692]	; (8006a68 <main+0x2d0>)
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin, GPIO_PIN_RESET);
 80067b2:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80067b4:	6999      	ldr	r1, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067b6:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80067b8:	f041 0120 	orr.w	r1, r1, #32
 80067bc:	6199      	str	r1, [r3, #24]
 80067be:	6998      	ldr	r0, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin, GPIO_PIN_RESET);
 80067c0:	f641 4110 	movw	r1, #7184	; 0x1c10
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80067c4:	f000 0020 	and.w	r0, r0, #32
 80067c8:	9007      	str	r0, [sp, #28]
 80067ca:	9807      	ldr	r0, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80067cc:	699d      	ldr	r5, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin, GPIO_PIN_RESET);
 80067ce:	48a7      	ldr	r0, [pc, #668]	; (8006a6c <main+0x2d4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80067d0:	f045 0504 	orr.w	r5, r5, #4
 80067d4:	619d      	str	r5, [r3, #24]
 80067d6:	699d      	ldr	r5, [r3, #24]
 80067d8:	f005 0504 	and.w	r5, r5, #4
 80067dc:	9508      	str	r5, [sp, #32]
 80067de:	9d08      	ldr	r5, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80067e0:	699d      	ldr	r5, [r3, #24]
 80067e2:	f045 0508 	orr.w	r5, r5, #8
 80067e6:	619d      	str	r5, [r3, #24]
 80067e8:	699b      	ldr	r3, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067ea:	2502      	movs	r5, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80067ec:	f003 0308 	and.w	r3, r3, #8
 80067f0:	9309      	str	r3, [sp, #36]	; 0x24
 80067f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin, GPIO_PIN_RESET);
 80067f4:	f000 fe32 	bl	800745c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LORA_RESET_Pin|CO2_WAKE_UP_Pin, GPIO_PIN_RESET);
 80067f8:	4622      	mov	r2, r4
 80067fa:	f44f 6101 	mov.w	r1, #2064	; 0x810
 80067fe:	489c      	ldr	r0, [pc, #624]	; (8006a70 <main+0x2d8>)
 8006800:	f000 fe2c 	bl	800745c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin;
 8006804:	f641 4310 	movw	r3, #7184	; 0x1c10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006808:	a90c      	add	r1, sp, #48	; 0x30
 800680a:	4898      	ldr	r0, [pc, #608]	; (8006a6c <main+0x2d4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800680c:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006810:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006812:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006814:	f000 fd22 	bl	800725c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LORA_DIO1_Pin|LORA_DIO0_Pin;
 8006818:	f240 4204 	movw	r2, #1028	; 0x404
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800681c:	4b95      	ldr	r3, [pc, #596]	; (8006a74 <main+0x2dc>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800681e:	a90c      	add	r1, sp, #48	; 0x30
 8006820:	4893      	ldr	r0, [pc, #588]	; (8006a70 <main+0x2d8>)
  GPIO_InitStruct.Pin = LORA_DIO1_Pin|LORA_DIO0_Pin;
 8006822:	920c      	str	r2, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006824:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006826:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006828:	f000 fd18 	bl	800725c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LORA_RESET_Pin|CO2_WAKE_UP_Pin;
 800682c:	f44f 6301 	mov.w	r3, #2064	; 0x810
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006830:	a90c      	add	r1, sp, #48	; 0x30
 8006832:	488f      	ldr	r0, [pc, #572]	; (8006a70 <main+0x2d8>)
  GPIO_InitStruct.Pin = LORA_RESET_Pin|CO2_WAKE_UP_Pin;
 8006834:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006836:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006838:	e9cd 640d 	strd	r6, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800683c:	f000 fd0e 	bl	800725c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8006840:	4622      	mov	r2, r4
 8006842:	2105      	movs	r1, #5
 8006844:	2008      	movs	r0, #8
 8006846:	f000 fc75 	bl	8007134 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800684a:	2008      	movs	r0, #8
 800684c:	f000 fca8 	bl	80071a0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8006850:	4622      	mov	r2, r4
 8006852:	2105      	movs	r1, #5
 8006854:	2028      	movs	r0, #40	; 0x28
 8006856:	f000 fc6d 	bl	8007134 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800685a:	2028      	movs	r0, #40	; 0x28
 800685c:	f000 fca0 	bl	80071a0 <HAL_NVIC_EnableIRQ>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006860:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Instance = I2C1;
 8006864:	4b84      	ldr	r3, [pc, #528]	; (8006a78 <main+0x2e0>)
 8006866:	4d85      	ldr	r5, [pc, #532]	; (8006a7c <main+0x2e4>)
  hi2c1.Init.ClockSpeed = 400000;
 8006868:	4985      	ldr	r1, [pc, #532]	; (8006a80 <main+0x2e8>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800686a:	4618      	mov	r0, r3
  hi2c1.Init.OwnAddress1 = 0;
 800686c:	e9c3 4402 	strd	r4, r4, [r3, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8006870:	e9c3 4405 	strd	r4, r4, [r3, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006874:	e9c3 4407 	strd	r4, r4, [r3, #28]
  hi2c1.Init.ClockSpeed = 400000;
 8006878:	e9c3 5100 	strd	r5, r1, [r3]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800687c:	611a      	str	r2, [r3, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800687e:	f000 fe07 	bl	8007490 <HAL_I2C_Init>
 8006882:	b108      	cbz	r0, 8006888 <main+0xf0>
 8006884:	b672      	cpsid	i
 8006886:	e7fe      	b.n	8006886 <main+0xee>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006888:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi1.Init.CRCPolynomial = 10;
 800688c:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800688e:	2220      	movs	r2, #32
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006890:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi1.Instance = SPI1;
 8006894:	4c7b      	ldr	r4, [pc, #492]	; (8006a84 <main+0x2ec>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006896:	e9c4 1001 	strd	r1, r0, [r4, #4]
  hspi1.Instance = SPI1;
 800689a:	497b      	ldr	r1, [pc, #492]	; (8006a88 <main+0x2f0>)
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800689c:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80068a0:	6160      	str	r0, [r4, #20]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80068a2:	e9c4 0008 	strd	r0, r0, [r4, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068a6:	62a0      	str	r0, [r4, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80068a8:	4620      	mov	r0, r4
  hspi1.Init.CRCPolynomial = 10;
 80068aa:	62e3      	str	r3, [r4, #44]	; 0x2c
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80068ac:	61a5      	str	r5, [r4, #24]
  hspi1.Instance = SPI1;
 80068ae:	6021      	str	r1, [r4, #0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80068b0:	61e2      	str	r2, [r4, #28]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80068b2:	f002 fe07 	bl	80094c4 <HAL_SPI_Init>
 80068b6:	4603      	mov	r3, r0
 80068b8:	b108      	cbz	r0, 80068be <main+0x126>
 80068ba:	b672      	cpsid	i
 80068bc:	e7fe      	b.n	80068bc <main+0x124>
  htim2.Instance = TIM2;
 80068be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 72;
 80068c2:	2148      	movs	r1, #72	; 0x48
  htim2.Init.Period = 65535;
 80068c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim2.Instance = TIM2;
 80068c8:	4d70      	ldr	r5, [pc, #448]	; (8006a8c <main+0x2f4>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80068ca:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  htim2.Instance = TIM2;
 80068ce:	6028      	str	r0, [r5, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80068d0:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80068d2:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068d6:	930a      	str	r3, [sp, #40]	; 0x28
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068d8:	60ab      	str	r3, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068da:	612b      	str	r3, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068dc:	61ab      	str	r3, [r5, #24]
  htim2.Init.Prescaler = 72;
 80068de:	6069      	str	r1, [r5, #4]
  htim2.Init.Period = 65535;
 80068e0:	60ea      	str	r2, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068e2:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80068e4:	f003 f838 	bl	8009958 <HAL_TIM_Base_Init>
 80068e8:	b108      	cbz	r0, 80068ee <main+0x156>
 80068ea:	b672      	cpsid	i
 80068ec:	e7fe      	b.n	80068ec <main+0x154>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80068ee:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80068f2:	a90c      	add	r1, sp, #48	; 0x30
 80068f4:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80068f6:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80068fa:	f003 f8e1 	bl	8009ac0 <HAL_TIM_ConfigClockSource>
 80068fe:	4603      	mov	r3, r0
 8006900:	b108      	cbz	r0, 8006906 <main+0x16e>
 8006902:	b672      	cpsid	i
 8006904:	e7fe      	b.n	8006904 <main+0x16c>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006906:	a90a      	add	r1, sp, #40	; 0x28
 8006908:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800690a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800690e:	f003 fa2f 	bl	8009d70 <HAL_TIMEx_MasterConfigSynchronization>
 8006912:	b108      	cbz	r0, 8006918 <main+0x180>
 8006914:	b672      	cpsid	i
 8006916:	e7fe      	b.n	8006916 <main+0x17e>
  LoRa_init(&hspi1);
 8006918:	4620      	mov	r0, r4
 800691a:	f000 fb53 	bl	8006fc4 <LoRa_init>
  result = LoRa_begin(BAND, true, 14, 8, 250E3, 0x4A);
 800691e:	a150      	add	r1, pc, #320	; (adr r1, 8006a60 <main+0x2c8>)
 8006920:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006924:	224a      	movs	r2, #74	; 0x4a
 8006926:	2500      	movs	r5, #0
 8006928:	2308      	movs	r3, #8
 800692a:	4c59      	ldr	r4, [pc, #356]	; (8006a90 <main+0x2f8>)
 800692c:	9204      	str	r2, [sp, #16]
 800692e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	4632      	mov	r2, r6
 8006936:	230e      	movs	r3, #14
 8006938:	f000 fb4a 	bl	8006fd0 <LoRa_begin>
 800693c:	4d55      	ldr	r5, [pc, #340]	; (8006a94 <main+0x2fc>)
 800693e:	4604      	mov	r4, r0
 8006940:	7028      	strb	r0, [r5, #0]
  if(result == 0) {
 8006942:	2800      	cmp	r0, #0
 8006944:	d038      	beq.n	80069b8 <main+0x220>
  lora_sensor_init(&illumination_sensor, 6 , 0);
 8006946:	2200      	movs	r2, #0
 8006948:	2106      	movs	r1, #6
 800694a:	4853      	ldr	r0, [pc, #332]	; (8006a98 <main+0x300>)
 800694c:	f000 fb14 	bl	8006f78 <lora_sensor_init>
  TSL2561_setTiming_ms (gain, time, & ms);
 8006950:	4b52      	ldr	r3, [pc, #328]	; (8006a9c <main+0x304>)
  rslt = bme280_init(&dev);
 8006952:	4c53      	ldr	r4, [pc, #332]	; (8006aa0 <main+0x308>)
  TSL2561_setTiming_ms (gain, time, & ms);
 8006954:	4a53      	ldr	r2, [pc, #332]	; (8006aa4 <main+0x30c>)
 8006956:	7818      	ldrb	r0, [r3, #0]
 8006958:	2102      	movs	r1, #2
 800695a:	f7ff fc15 	bl	8006188 <TSL2561_setTiming_ms>
  TSL2561_setPowerUp ();
 800695e:	f7ff fbfb 	bl	8006158 <TSL2561_setPowerUp>
  rslt = bme280_init(&dev);
 8006962:	4620      	mov	r0, r4
 8006964:	f7fe ff5a 	bl	800581c <bme280_init>
 8006968:	4d4f      	ldr	r5, [pc, #316]	; (8006aa8 <main+0x310>)
  dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 800696a:	4b50      	ldr	r3, [pc, #320]	; (8006aac <main+0x314>)
  rslt = bme280_init(&dev);
 800696c:	7028      	strb	r0, [r5, #0]
  dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 800696e:	63a3      	str	r3, [r4, #56]	; 0x38
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8006970:	4621      	mov	r1, r4
 8006972:	200f      	movs	r0, #15
 8006974:	f7ff f84e 	bl	8005a14 <bme280_set_sensor_settings>
  rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8006978:	4621      	mov	r1, r4
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 800697a:	7028      	strb	r0, [r5, #0]
  rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 800697c:	2003      	movs	r0, #3
 800697e:	f7ff f93d 	bl	8005bfc <bme280_set_sensor_mode>
 8006982:	7028      	strb	r0, [r5, #0]
  osKernelInitialize();
 8006984:	f003 fa2c 	bl	8009de0 <osKernelInitialize>
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 8006988:	4a49      	ldr	r2, [pc, #292]	; (8006ab0 <main+0x318>)
 800698a:	2100      	movs	r1, #0
 800698c:	4849      	ldr	r0, [pc, #292]	; (8006ab4 <main+0x31c>)
 800698e:	f003 fa63 	bl	8009e58 <osThreadNew>
 8006992:	4b49      	ldr	r3, [pc, #292]	; (8006ab8 <main+0x320>)
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8006994:	4a49      	ldr	r2, [pc, #292]	; (8006abc <main+0x324>)
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 8006996:	6018      	str	r0, [r3, #0]
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8006998:	2100      	movs	r1, #0
 800699a:	4849      	ldr	r0, [pc, #292]	; (8006ac0 <main+0x328>)
 800699c:	f003 fa5c 	bl	8009e58 <osThreadNew>
 80069a0:	4b48      	ldr	r3, [pc, #288]	; (8006ac4 <main+0x32c>)
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 80069a2:	4a49      	ldr	r2, [pc, #292]	; (8006ac8 <main+0x330>)
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 80069a4:	6018      	str	r0, [r3, #0]
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 80069a6:	2100      	movs	r1, #0
 80069a8:	4848      	ldr	r0, [pc, #288]	; (8006acc <main+0x334>)
 80069aa:	f003 fa55 	bl	8009e58 <osThreadNew>
 80069ae:	4b48      	ldr	r3, [pc, #288]	; (8006ad0 <main+0x338>)
 80069b0:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80069b2:	f003 fa2f 	bl	8009e14 <osKernelStart>
 80069b6:	e7fe      	b.n	80069b6 <main+0x21e>
	  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 80069b8:	4632      	mov	r2, r6
 80069ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80069be:	482b      	ldr	r0, [pc, #172]	; (8006a6c <main+0x2d4>)
 80069c0:	f000 fd4c 	bl	800745c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_SET);
 80069c4:	4632      	mov	r2, r6
 80069c6:	4641      	mov	r1, r8
 80069c8:	4828      	ldr	r0, [pc, #160]	; (8006a6c <main+0x2d4>)
 80069ca:	f000 fd47 	bl	800745c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_SET);
 80069ce:	4632      	mov	r2, r6
		  result = LoRa_begin(BAND, true, 14, 11, 125E3, 0x4A);
 80069d0:	a723      	add	r7, pc, #140	; (adr r7, 8006a60 <main+0x2c8>)
 80069d2:	e9d7 6700 	ldrd	r6, r7, [r7]
	  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_SET);
 80069d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80069da:	4824      	ldr	r0, [pc, #144]	; (8006a6c <main+0x2d4>)
 80069dc:	f000 fd3e 	bl	800745c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80069e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80069e4:	f000 fb82 	bl	80070ec <HAL_Delay>
	  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_RESET);
 80069e8:	4622      	mov	r2, r4
 80069ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80069ee:	481f      	ldr	r0, [pc, #124]	; (8006a6c <main+0x2d4>)
 80069f0:	f000 fd34 	bl	800745c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_RESET);
 80069f4:	4622      	mov	r2, r4
 80069f6:	4641      	mov	r1, r8
 80069f8:	481c      	ldr	r0, [pc, #112]	; (8006a6c <main+0x2d4>)
 80069fa:	f000 fd2f 	bl	800745c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_RESET);
 80069fe:	4622      	mov	r2, r4
 8006a00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a04:	4819      	ldr	r0, [pc, #100]	; (8006a6c <main+0x2d4>)
 8006a06:	f000 fd29 	bl	800745c <HAL_GPIO_WritePin>
		  result = LoRa_begin(BAND, true, 14, 11, 125E3, 0x4A);
 8006a0a:	f04f 0900 	mov.w	r9, #0
 8006a0e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8006ad4 <main+0x33c>
			  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 8006a12:	4c16      	ldr	r4, [pc, #88]	; (8006a6c <main+0x2d4>)
	  while(result != 0) {
 8006a14:	782b      	ldrb	r3, [r5, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d095      	beq.n	8006946 <main+0x1ae>
		  result = LoRa_begin(BAND, true, 14, 11, 125E3, 0x4A);
 8006a1a:	224a      	movs	r2, #74	; 0x4a
 8006a1c:	230b      	movs	r3, #11
 8006a1e:	9204      	str	r2, [sp, #16]
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	4639      	mov	r1, r7
 8006a24:	230e      	movs	r3, #14
 8006a26:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	f000 facf 	bl	8006fd0 <LoRa_begin>
			  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 8006a32:	2201      	movs	r2, #1
		  result = LoRa_begin(BAND, true, 14, 11, 125E3, 0x4A);
 8006a34:	7028      	strb	r0, [r5, #0]
			  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 8006a36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f000 fd0e 	bl	800745c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_RESET);
 8006a40:	4620      	mov	r0, r4
 8006a42:	2200      	movs	r2, #0
 8006a44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a48:	f000 fd08 	bl	800745c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_RESET);
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a52:	4620      	mov	r0, r4
 8006a54:	f000 fd02 	bl	800745c <HAL_GPIO_WritePin>
 8006a58:	e7dc      	b.n	8006a14 <main+0x27c>
 8006a5a:	bf00      	nop
 8006a5c:	f3af 8000 	nop.w
 8006a60:	19d2ded0 	.word	0x19d2ded0
 8006a64:	00000000 	.word	0x00000000
 8006a68:	40021000 	.word	0x40021000
 8006a6c:	40010800 	.word	0x40010800
 8006a70:	40010c00 	.word	0x40010c00
 8006a74:	10110000 	.word	0x10110000
 8006a78:	20003c94 	.word	0x20003c94
 8006a7c:	40005400 	.word	0x40005400
 8006a80:	00061a80 	.word	0x00061a80
 8006a84:	20003d14 	.word	0x20003d14
 8006a88:	40013000 	.word	0x40013000
 8006a8c:	20003d6c 	.word	0x20003d6c
 8006a90:	0003d090 	.word	0x0003d090
 8006a94:	20003d0c 	.word	0x20003d0c
 8006a98:	20003d00 	.word	0x20003d00
 8006a9c:	20001bd4 	.word	0x20001bd4
 8006aa0:	20000018 	.word	0x20000018
 8006aa4:	20001bd8 	.word	0x20001bd8
 8006aa8:	20003c90 	.word	0x20003c90
 8006aac:	04010205 	.word	0x04010205
 8006ab0:	0800d05c 	.word	0x0800d05c
 8006ab4:	080065a1 	.word	0x080065a1
 8006ab8:	20003cf8 	.word	0x20003cf8
 8006abc:	0800d080 	.word	0x0800d080
 8006ac0:	08006631 	.word	0x08006631
 8006ac4:	20003c8c 	.word	0x20003c8c
 8006ac8:	0800d0a4 	.word	0x0800d0a4
 8006acc:	080066ed 	.word	0x080066ed
 8006ad0:	20003d10 	.word	0x20003d10
 8006ad4:	0001e848 	.word	0x0001e848

08006ad8 <HAL_GPIO_EXTI_Callback>:
  if(GPIO_Pin== GPIO_PIN_2) {
 8006ad8:	2804      	cmp	r0, #4
 8006ada:	d004      	beq.n	8006ae6 <HAL_GPIO_EXTI_Callback+0xe>
  } else if(GPIO_Pin== GPIO_PIN_10){
 8006adc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006ae0:	d008      	beq.n	8006af4 <HAL_GPIO_EXTI_Callback+0x1c>
    __NOP();
 8006ae2:	bf00      	nop
}
 8006ae4:	4770      	bx	lr
    exti2++;
 8006ae6:	4a04      	ldr	r2, [pc, #16]	; (8006af8 <HAL_GPIO_EXTI_Callback+0x20>)
    exti5_10++;
 8006ae8:	8813      	ldrh	r3, [r2, #0]
    lora_module_recieve_packet(&lora_module);
 8006aea:	4804      	ldr	r0, [pc, #16]	; (8006afc <HAL_GPIO_EXTI_Callback+0x24>)
    exti5_10++;
 8006aec:	3301      	adds	r3, #1
 8006aee:	8013      	strh	r3, [r2, #0]
    lora_module_recieve_packet(&lora_module);
 8006af0:	f000 b9a2 	b.w	8006e38 <lora_module_recieve_packet>
    exti5_10++;
 8006af4:	4a02      	ldr	r2, [pc, #8]	; (8006b00 <HAL_GPIO_EXTI_Callback+0x28>)
 8006af6:	e7f7      	b.n	8006ae8 <HAL_GPIO_EXTI_Callback+0x10>
 8006af8:	20003d0e 	.word	0x20003d0e
 8006afc:	20000058 	.word	0x20000058
 8006b00:	20003e10 	.word	0x20003e10

08006b04 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8006b04:	6802      	ldr	r2, [r0, #0]
 8006b06:	4b03      	ldr	r3, [pc, #12]	; (8006b14 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d000      	beq.n	8006b0e <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006b0c:	4770      	bx	lr
    HAL_IncTick();
 8006b0e:	f000 badb 	b.w	80070c8 <HAL_IncTick>
 8006b12:	bf00      	nop
 8006b14:	40000800 	.word	0x40000800

08006b18 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006b18:	4b11      	ldr	r3, [pc, #68]	; (8006b60 <HAL_MspInit+0x48>)
{
 8006b1a:	b510      	push	{r4, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8006b1c:	6998      	ldr	r0, [r3, #24]
{
 8006b1e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8006b20:	f040 0001 	orr.w	r0, r0, #1
 8006b24:	6198      	str	r0, [r3, #24]
 8006b26:	699c      	ldr	r4, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006b28:	2200      	movs	r2, #0
  __HAL_RCC_AFIO_CLK_ENABLE();
 8006b2a:	f004 0401 	and.w	r4, r4, #1
 8006b2e:	9400      	str	r4, [sp, #0]
 8006b30:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b32:	69dc      	ldr	r4, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006b34:	210f      	movs	r1, #15
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b36:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8006b3a:	61dc      	str	r4, [r3, #28]
 8006b3c:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006b3e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b46:	9301      	str	r3, [sp, #4]
 8006b48:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006b4a:	f000 faf3 	bl	8007134 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006b4e:	4a05      	ldr	r2, [pc, #20]	; (8006b64 <HAL_MspInit+0x4c>)
 8006b50:	6853      	ldr	r3, [r2, #4]
 8006b52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006b56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006b5a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006b5c:	b002      	add	sp, #8
 8006b5e:	bd10      	pop	{r4, pc}
 8006b60:	40021000 	.word	0x40021000
 8006b64:	40010000 	.word	0x40010000

08006b68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006b68:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b6a:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 8006b6c:	6802      	ldr	r2, [r0, #0]
 8006b6e:	4b20      	ldr	r3, [pc, #128]	; (8006bf0 <HAL_I2C_MspInit+0x88>)
{
 8006b70:	b086      	sub	sp, #24
  if(hi2c->Instance==I2C1)
 8006b72:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b74:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006b78:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hi2c->Instance==I2C1)
 8006b7c:	d001      	beq.n	8006b82 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006b7e:	b006      	add	sp, #24
 8006b80:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006b82:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b86:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b88:	2612      	movs	r6, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b8a:	4d1a      	ldr	r5, [pc, #104]	; (8006bf4 <HAL_I2C_MspInit+0x8c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b8c:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b8e:	69ab      	ldr	r3, [r5, #24]
 8006b90:	f043 0308 	orr.w	r3, r3, #8
 8006b94:	61ab      	str	r3, [r5, #24]
 8006b96:	69ab      	ldr	r3, [r5, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006b98:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b9a:	f003 0308 	and.w	r3, r3, #8
 8006b9e:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ba0:	4815      	ldr	r0, [pc, #84]	; (8006bf8 <HAL_I2C_MspInit+0x90>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ba2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006ba4:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006ba6:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ba8:	f000 fb58 	bl	800725c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8006bac:	4813      	ldr	r0, [pc, #76]	; (8006bfc <HAL_I2C_MspInit+0x94>)
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8006bae:	4622      	mov	r2, r4
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8006bb0:	6843      	ldr	r3, [r0, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8006bb2:	2105      	movs	r1, #5
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8006bb4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8006bb8:	f043 0302 	orr.w	r3, r3, #2
 8006bbc:	6043      	str	r3, [r0, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006bbe:	69eb      	ldr	r3, [r5, #28]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8006bc0:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006bc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006bc6:	61eb      	str	r3, [r5, #28]
 8006bc8:	69eb      	ldr	r3, [r5, #28]
 8006bca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bce:	9301      	str	r3, [sp, #4]
 8006bd0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8006bd2:	f000 faaf 	bl	8007134 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006bd6:	201f      	movs	r0, #31
 8006bd8:	f000 fae2 	bl	80071a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8006bdc:	4622      	mov	r2, r4
 8006bde:	2105      	movs	r1, #5
 8006be0:	2020      	movs	r0, #32
 8006be2:	f000 faa7 	bl	8007134 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8006be6:	2020      	movs	r0, #32
 8006be8:	f000 fada 	bl	80071a0 <HAL_NVIC_EnableIRQ>
}
 8006bec:	b006      	add	sp, #24
 8006bee:	bd70      	pop	{r4, r5, r6, pc}
 8006bf0:	40005400 	.word	0x40005400
 8006bf4:	40021000 	.word	0x40021000
 8006bf8:	40010c00 	.word	0x40010c00
 8006bfc:	40010000 	.word	0x40010000

08006c00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006c00:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c02:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 8006c04:	6802      	ldr	r2, [r0, #0]
 8006c06:	4b1d      	ldr	r3, [pc, #116]	; (8006c7c <HAL_SPI_MspInit+0x7c>)
{
 8006c08:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 8006c0a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c0c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006c10:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hspi->Instance==SPI1)
 8006c14:	d001      	beq.n	8006c1a <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006c16:	b006      	add	sp, #24
 8006c18:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8006c1a:	21a0      	movs	r1, #160	; 0xa0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c1c:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006c1e:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006c20:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8006c24:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c26:	4816      	ldr	r0, [pc, #88]	; (8006c80 <HAL_SPI_MspInit+0x80>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006c28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c2c:	619a      	str	r2, [r3, #24]
 8006c2e:	699a      	ldr	r2, [r3, #24]
 8006c30:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006c34:	9200      	str	r2, [sp, #0]
 8006c36:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c38:	699a      	ldr	r2, [r3, #24]
 8006c3a:	f042 0204 	orr.w	r2, r2, #4
 8006c3e:	619a      	str	r2, [r3, #24]
 8006c40:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8006c42:	9102      	str	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c44:	f003 0304 	and.w	r3, r3, #4
 8006c48:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c4a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c4c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c4e:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006c50:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c52:	f000 fb03 	bl	800725c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006c56:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c58:	a902      	add	r1, sp, #8
 8006c5a:	4809      	ldr	r0, [pc, #36]	; (8006c80 <HAL_SPI_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006c5c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c5e:	e9cd 4403 	strd	r4, r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c62:	f000 fafb 	bl	800725c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8006c66:	4622      	mov	r2, r4
 8006c68:	2105      	movs	r1, #5
 8006c6a:	2023      	movs	r0, #35	; 0x23
 8006c6c:	f000 fa62 	bl	8007134 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8006c70:	2023      	movs	r0, #35	; 0x23
 8006c72:	f000 fa95 	bl	80071a0 <HAL_NVIC_EnableIRQ>
}
 8006c76:	b006      	add	sp, #24
 8006c78:	bd70      	pop	{r4, r5, r6, pc}
 8006c7a:	bf00      	nop
 8006c7c:	40013000 	.word	0x40013000
 8006c80:	40010800 	.word	0x40010800

08006c84 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8006c84:	6803      	ldr	r3, [r0, #0]
 8006c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c8a:	d000      	beq.n	8006c8e <HAL_TIM_Base_MspInit+0xa>
 8006c8c:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006c8e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8006c92:	69da      	ldr	r2, [r3, #28]
{
 8006c94:	b082      	sub	sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006c96:	f042 0201 	orr.w	r2, r2, #1
 8006c9a:	61da      	str	r2, [r3, #28]
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	9301      	str	r3, [sp, #4]
 8006ca4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006ca6:	b002      	add	sp, #8
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop

08006cac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006cac:	b510      	push	{r4, lr}
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8006cae:	4601      	mov	r1, r0
{
 8006cb0:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	201e      	movs	r0, #30
 8006cb6:	f000 fa3d 	bl	8007134 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006cba:	201e      	movs	r0, #30
 8006cbc:	f000 fa70 	bl	80071a0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8006cc0:	4b15      	ldr	r3, [pc, #84]	; (8006d18 <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006cc2:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM4_CLK_ENABLE();
 8006cc4:	69da      	ldr	r2, [r3, #28]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006cc6:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 8006cc8:	f042 0204 	orr.w	r2, r2, #4
 8006ccc:	61da      	str	r2, [r3, #28]
 8006cce:	69db      	ldr	r3, [r3, #28]
  uwTimclock = HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8006cd0:	4c12      	ldr	r4, [pc, #72]	; (8006d1c <HAL_InitTick+0x70>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 8006cd2:	f003 0304 	and.w	r3, r3, #4
 8006cd6:	9302      	str	r3, [sp, #8]
 8006cd8:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006cda:	f002 fb73 	bl	80093c4 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006cde:	f002 fb61 	bl	80093a4 <HAL_RCC_GetPCLK1Freq>
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8006ce2:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim4.Init.Prescaler = uwPrescalerValue;
  htim4.Init.ClockDivision = 0;
 8006ce6:	2200      	movs	r2, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006ce8:	4b0d      	ldr	r3, [pc, #52]	; (8006d20 <HAL_InitTick+0x74>)
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8006cea:	60e1      	str	r1, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006cec:	fba3 1300 	umull	r1, r3, r3, r0
  htim4.Instance = TIM4;
 8006cf0:	490c      	ldr	r1, [pc, #48]	; (8006d24 <HAL_InitTick+0x78>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006cf2:	0c9b      	lsrs	r3, r3, #18
 8006cf4:	3b01      	subs	r3, #1
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8006cf6:	4620      	mov	r0, r4
  htim4.Instance = TIM4;
 8006cf8:	e9c4 1300 	strd	r1, r3, [r4]
  htim4.Init.ClockDivision = 0;
 8006cfc:	6122      	str	r2, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006cfe:	60a2      	str	r2, [r4, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8006d00:	f002 fe2a 	bl	8009958 <HAL_TIM_Base_Init>
 8006d04:	b110      	cbz	r0, 8006d0c <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
  }

  /* Return function status */
  return HAL_ERROR;
 8006d06:	2001      	movs	r0, #1
}
 8006d08:	b008      	add	sp, #32
 8006d0a:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim4);
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f002 feab 	bl	8009a68 <HAL_TIM_Base_Start_IT>
}
 8006d12:	b008      	add	sp, #32
 8006d14:	bd10      	pop	{r4, pc}
 8006d16:	bf00      	nop
 8006d18:	40021000 	.word	0x40021000
 8006d1c:	20003e14 	.word	0x20003e14
 8006d20:	431bde83 	.word	0x431bde83
 8006d24:	40000800 	.word	0x40000800

08006d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d28:	e7fe      	b.n	8006d28 <NMI_Handler>
 8006d2a:	bf00      	nop

08006d2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d2c:	e7fe      	b.n	8006d2c <HardFault_Handler>
 8006d2e:	bf00      	nop

08006d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006d30:	e7fe      	b.n	8006d30 <MemManage_Handler>
 8006d32:	bf00      	nop

08006d34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006d34:	e7fe      	b.n	8006d34 <BusFault_Handler>
 8006d36:	bf00      	nop

08006d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006d38:	e7fe      	b.n	8006d38 <UsageFault_Handler>
 8006d3a:	bf00      	nop

08006d3c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop

08006d40 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8006d40:	2004      	movs	r0, #4
 8006d42:	f000 bb99 	b.w	8007478 <HAL_GPIO_EXTI_IRQHandler>
 8006d46:	bf00      	nop

08006d48 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006d48:	4801      	ldr	r0, [pc, #4]	; (8006d50 <TIM4_IRQHandler+0x8>)
 8006d4a:	f002 bf67 	b.w	8009c1c <HAL_TIM_IRQHandler>
 8006d4e:	bf00      	nop
 8006d50:	20003e14 	.word	0x20003e14

08006d54 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006d54:	4801      	ldr	r0, [pc, #4]	; (8006d5c <I2C1_EV_IRQHandler+0x8>)
 8006d56:	f001 b96f 	b.w	8008038 <HAL_I2C_EV_IRQHandler>
 8006d5a:	bf00      	nop
 8006d5c:	20003c94 	.word	0x20003c94

08006d60 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8006d60:	4801      	ldr	r0, [pc, #4]	; (8006d68 <I2C1_ER_IRQHandler+0x8>)
 8006d62:	f001 bedd 	b.w	8008b20 <HAL_I2C_ER_IRQHandler>
 8006d66:	bf00      	nop
 8006d68:	20003c94 	.word	0x20003c94

08006d6c <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8006d6c:	4801      	ldr	r0, [pc, #4]	; (8006d74 <SPI1_IRQHandler+0x8>)
 8006d6e:	f002 bd5f 	b.w	8009830 <HAL_SPI_IRQHandler>
 8006d72:	bf00      	nop
 8006d74:	20003d14 	.word	0x20003d14

08006d78 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8006d78:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006d7c:	f000 bb7c 	b.w	8007478 <HAL_GPIO_EXTI_IRQHandler>

08006d80 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8006d80:	2001      	movs	r0, #1
 8006d82:	4770      	bx	lr

08006d84 <_kill>:

int _kill(int pid, int sig)
{
 8006d84:	b508      	push	{r3, lr}
	errno = EINVAL;
 8006d86:	f005 ffe5 	bl	800cd54 <__errno>
 8006d8a:	2316      	movs	r3, #22
 8006d8c:	6003      	str	r3, [r0, #0]
	return -1;
}
 8006d8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d92:	bd08      	pop	{r3, pc}

08006d94 <_exit>:

void _exit (int status)
{
 8006d94:	b508      	push	{r3, lr}
	errno = EINVAL;
 8006d96:	f005 ffdd 	bl	800cd54 <__errno>
 8006d9a:	2316      	movs	r3, #22
 8006d9c:	6003      	str	r3, [r0, #0]
 8006d9e:	e7fe      	b.n	8006d9e <_exit+0xa>

08006da0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006da0:	490d      	ldr	r1, [pc, #52]	; (8006dd8 <_sbrk+0x38>)
{
 8006da2:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006da4:	4a0d      	ldr	r2, [pc, #52]	; (8006ddc <_sbrk+0x3c>)
 8006da6:	4c0e      	ldr	r4, [pc, #56]	; (8006de0 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8006da8:	680b      	ldr	r3, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006daa:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8006dac:	b12b      	cbz	r3, 8006dba <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006dae:	4418      	add	r0, r3
 8006db0:	4290      	cmp	r0, r2
 8006db2:	d808      	bhi.n	8006dc6 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8006db4:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8006dba:	4c0a      	ldr	r4, [pc, #40]	; (8006de4 <_sbrk+0x44>)
 8006dbc:	4623      	mov	r3, r4
  if (__sbrk_heap_end + incr > max_heap)
 8006dbe:	4418      	add	r0, r3
 8006dc0:	4290      	cmp	r0, r2
    __sbrk_heap_end = &_end;
 8006dc2:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8006dc4:	d9f6      	bls.n	8006db4 <_sbrk+0x14>
    errno = ENOMEM;
 8006dc6:	f005 ffc5 	bl	800cd54 <__errno>
 8006dca:	220c      	movs	r2, #12
    return (void *)-1;
 8006dcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    errno = ENOMEM;
 8006dd0:	6002      	str	r2, [r0, #0]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	bd10      	pop	{r4, pc}
 8006dd6:	bf00      	nop
 8006dd8:	20001bdc 	.word	0x20001bdc
 8006ddc:	20005000 	.word	0x20005000
 8006de0:	00000400 	.word	0x00000400
 8006de4:	20003ea8 	.word	0x20003ea8

08006de8 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop

08006dec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006dec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006dee:	e003      	b.n	8006df8 <LoopCopyDataInit>

08006df0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006df0:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006df2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006df4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006df6:	3104      	adds	r1, #4

08006df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006df8:	480a      	ldr	r0, [pc, #40]	; (8006e24 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006dfa:	4b0b      	ldr	r3, [pc, #44]	; (8006e28 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006dfc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006dfe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006e00:	d3f6      	bcc.n	8006df0 <CopyDataInit>
  ldr r2, =_sbss
 8006e02:	4a0a      	ldr	r2, [pc, #40]	; (8006e2c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006e04:	e002      	b.n	8006e0c <LoopFillZerobss>

08006e06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006e06:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006e08:	f842 3b04 	str.w	r3, [r2], #4

08006e0c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006e0c:	4b08      	ldr	r3, [pc, #32]	; (8006e30 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006e0e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006e10:	d3f9      	bcc.n	8006e06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006e12:	f7ff ffe9 	bl	8006de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006e16:	f005 ffa3 	bl	800cd60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006e1a:	f7ff fcbd 	bl	8006798 <main>
  bx lr
 8006e1e:	4770      	bx	lr
  ldr r3, =_sidata
 8006e20:	0800d178 	.word	0x0800d178
  ldr r0, =_sdata
 8006e24:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006e28:	20000100 	.word	0x20000100
  ldr r2, =_sbss
 8006e2c:	20000100 	.word	0x20000100
  ldr r3, = _ebss
 8006e30:	20003ea4 	.word	0x20003ea4

08006e34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006e34:	e7fe      	b.n	8006e34 <ADC1_2_IRQHandler>
	...

08006e38 <lora_module_recieve_packet>:
	LoRa_sender_packet(module->packet._data, module->packet._len, 0);
//	LoRa_sender_packet(module->packet._data, module->packet._len, 2000);
    ++(module->num_packet);
}
// ----------------------------------------------------------------------------------------------------------
bool lora_module_recieve_packet(struct LoRa_module* module) {
 8006e38:	b570      	push	{r4, r5, r6, lr}
	packet_delete(&(module->packet));
 8006e3a:	f100 0420 	add.w	r4, r0, #32
bool lora_module_recieve_packet(struct LoRa_module* module) {
 8006e3e:	b086      	sub	sp, #24
 8006e40:	4606      	mov	r6, r0
	packet_delete(&(module->packet));
 8006e42:	4620      	mov	r0, r4
 8006e44:	f000 f8fe 	bl	8007044 <packet_delete>
//	module->packet = LoRa_receiver_packet(1, 0, false, false);
	module->packet = LoRa_receiver_packet(1, 1000, false, false);
 8006e48:	2300      	movs	r3, #0
 8006e4a:	ad02      	add	r5, sp, #8
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e54:	2101      	movs	r1, #1
 8006e56:	f000 f8d3 	bl	8007000 <LoRa_receiver_packet>
 8006e5a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006e5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(module->packet._len != 0) {
 8006e62:	f896 0024 	ldrb.w	r0, [r6, #36]	; 0x24
 8006e66:	b128      	cbz	r0, 8006e74 <lora_module_recieve_packet+0x3c>
		if(module->led)
 8006e68:	7ab4      	ldrb	r4, [r6, #10]
 8006e6a:	b93c      	cbnz	r4, 8006e7c <lora_module_recieve_packet+0x44>
			lora_led_struct_set_IN(module->packet._len);
		return true;
 8006e6c:	2401      	movs	r4, #1
	}
	else
		return false;

}
 8006e6e:	4620      	mov	r0, r4
 8006e70:	b006      	add	sp, #24
 8006e72:	bd70      	pop	{r4, r5, r6, pc}
		return false;
 8006e74:	4604      	mov	r4, r0
}
 8006e76:	4620      	mov	r0, r4
 8006e78:	b006      	add	sp, #24
 8006e7a:	bd70      	pop	{r4, r5, r6, pc}
			lora_led_struct_set_IN(module->packet._len);
 8006e7c:	f000 f88a 	bl	8006f94 <lora_led_struct_set_IN>
}
 8006e80:	4620      	mov	r0, r4
 8006e82:	b006      	add	sp, #24
 8006e84:	bd70      	pop	{r4, r5, r6, pc}
 8006e86:	bf00      	nop

08006e88 <lora_module_send_packet_read_data>:
    // отправка пакета
    lora_module_send_packet(module);
}

void lora_module_send_packet_read_data(struct LoRa_module* module) {
    for(int i = 0; i < module->amt_sensors; ++i) {
 8006e88:	7d03      	ldrb	r3, [r0, #20]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d072      	beq.n	8006f74 <lora_module_send_packet_read_data+0xec>
void lora_module_send_packet_read_data(struct LoRa_module* module) {
 8006e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for(int i = 0; i < module->amt_sensors; ++i) {
 8006e92:	2700      	movs	r7, #0
 8006e94:	4604      	mov	r4, r0
 8006e96:	46b8      	mov	r8, r7
 8006e98:	f100 0520 	add.w	r5, r0, #32
		packet_set_len(&(module->packet), 14);
 8006e9c:	210e      	movs	r1, #14
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	f000 f8e0 	bl	8007064 <packet_set_len>
	    // отправка адреса управляющего модуля
	    for(int i = 0; i < 3; ++i) {
	    	packet_data_add(&(module->packet), module->esp_adr[i]);
 8006ea4:	78e1      	ldrb	r1, [r4, #3]
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	f000 f8f4 	bl	8007094 <packet_data_add>
 8006eac:	7921      	ldrb	r1, [r4, #4]
 8006eae:	4628      	mov	r0, r5
 8006eb0:	f000 f8f0 	bl	8007094 <packet_data_add>
 8006eb4:	7961      	ldrb	r1, [r4, #5]
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	f000 f8ec 	bl	8007094 <packet_data_add>
	    }
	    // отправка своего адреса
	    for(int i = 0; i < 3; ++i) {
	    	packet_data_add(&(module->packet), module->my_adr[i]);
 8006ebc:	7821      	ldrb	r1, [r4, #0]
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	f000 f8e8 	bl	8007094 <packet_data_add>
 8006ec4:	7861      	ldrb	r1, [r4, #1]
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	f000 f8e4 	bl	8007094 <packet_data_add>
 8006ecc:	78a1      	ldrb	r1, [r4, #2]
 8006ece:	4628      	mov	r0, r5
 8006ed0:	f000 f8e0 	bl	8007094 <packet_data_add>
	    }
	    // отправка типа пакета
		packet_data_add(&(module->packet), 0x01);
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	f000 f8dc 	bl	8007094 <packet_data_add>
	    // отправка номера пакета
		packet_data_add(&(module->packet), ((module->num_packet >> 8) & 0xFF));
 8006edc:	8921      	ldrh	r1, [r4, #8]
 8006ede:	4628      	mov	r0, r5
 8006ee0:	0a09      	lsrs	r1, r1, #8
 8006ee2:	f000 f8d7 	bl	8007094 <packet_data_add>
		packet_data_add(&(module->packet), ((module->num_packet) & 0xFF));
 8006ee6:	7a21      	ldrb	r1, [r4, #8]
 8006ee8:	4628      	mov	r0, r5
 8006eea:	f000 f8d3 	bl	8007094 <packet_data_add>
        // отправка типа устройства
		packet_data_add(&(module->packet), (uint8_t)(module->sensors[i].type));
 8006eee:	6923      	ldr	r3, [r4, #16]
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	5dd9      	ldrb	r1, [r3, r7]
 8006ef4:	f000 f8ce 	bl	8007094 <packet_data_add>
        // отправка данных
        uint32_t data = module->sensors[i].data;
 8006ef8:	6923      	ldr	r3, [r4, #16]
    	packet_data_add(&(module->packet), ((data >> 24) & 0xFF));
 8006efa:	4628      	mov	r0, r5
        uint32_t data = module->sensors[i].data;
 8006efc:	443b      	add	r3, r7
 8006efe:	685e      	ldr	r6, [r3, #4]
    	packet_data_add(&(module->packet), ((data >> 24) & 0xFF));
 8006f00:	0e31      	lsrs	r1, r6, #24
 8006f02:	f000 f8c7 	bl	8007094 <packet_data_add>
    	packet_data_add(&(module->packet), ((data >> 16) & 0xFF));
 8006f06:	f3c6 4107 	ubfx	r1, r6, #16, #8
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	f000 f8c2 	bl	8007094 <packet_data_add>
    	packet_data_add(&(module->packet), ((data >> 8) & 0xFF));
 8006f10:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8006f14:	4628      	mov	r0, r5
 8006f16:	f000 f8bd 	bl	8007094 <packet_data_add>
    	packet_data_add(&(module->packet), (data & 0xFF));
 8006f1a:	b2f1      	uxtb	r1, r6
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	f000 f8b9 	bl	8007094 <packet_data_add>
	if(module->led)
 8006f22:	7aa2      	ldrb	r2, [r4, #10]
 8006f24:	b982      	cbnz	r2, 8006f48 <lora_module_send_packet_read_data+0xc0>
	LoRa_sender_packet(module->packet._data, module->packet._len, 0);
 8006f26:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8006f2a:	6a20      	ldr	r0, [r4, #32]
 8006f2c:	f000 f882 	bl	8007034 <LoRa_sender_packet>
    ++(module->num_packet);
 8006f30:	8923      	ldrh	r3, [r4, #8]
    for(int i = 0; i < module->amt_sensors; ++i) {
 8006f32:	7d22      	ldrb	r2, [r4, #20]
 8006f34:	f108 0801 	add.w	r8, r8, #1
    ++(module->num_packet);
 8006f38:	3301      	adds	r3, #1
    for(int i = 0; i < module->amt_sensors; ++i) {
 8006f3a:	4542      	cmp	r2, r8
 8006f3c:	f107 070c 	add.w	r7, r7, #12
    ++(module->num_packet);
 8006f40:	8123      	strh	r3, [r4, #8]
    for(int i = 0; i < module->amt_sensors; ++i) {
 8006f42:	dcab      	bgt.n	8006e9c <lora_module_send_packet_read_data+0x14>
        // отправка пакета
        lora_module_send_packet(module);
    }
}
 8006f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		lora_led_struct_set_OUT(module->packet._len);
 8006f48:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8006f4c:	f000 f82e 	bl	8006fac <lora_led_struct_set_OUT>
	LoRa_sender_packet(module->packet._data, module->packet._len, 0);
 8006f50:	2200      	movs	r2, #0
 8006f52:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8006f56:	6a20      	ldr	r0, [r4, #32]
 8006f58:	f000 f86c 	bl	8007034 <LoRa_sender_packet>
    ++(module->num_packet);
 8006f5c:	8923      	ldrh	r3, [r4, #8]
    for(int i = 0; i < module->amt_sensors; ++i) {
 8006f5e:	7d22      	ldrb	r2, [r4, #20]
 8006f60:	f108 0801 	add.w	r8, r8, #1
    ++(module->num_packet);
 8006f64:	3301      	adds	r3, #1
    for(int i = 0; i < module->amt_sensors; ++i) {
 8006f66:	4590      	cmp	r8, r2
 8006f68:	f107 070c 	add.w	r7, r7, #12
    ++(module->num_packet);
 8006f6c:	8123      	strh	r3, [r4, #8]
    for(int i = 0; i < module->amt_sensors; ++i) {
 8006f6e:	db95      	blt.n	8006e9c <lora_module_send_packet_read_data+0x14>
}
 8006f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop

08006f78 <lora_sensor_init>:
//	enum Type_sensor_t type;
//	uint8_t id;
//	uint32_t data;
//};

void lora_sensor_init(LoRa_sensor* sensor, enum Type_sensor_t type, uint8_t id) {
 8006f78:	b410      	push	{r4}
	sensor->type = type;
	sensor->id = id;
	sensor->data = 0;
	sensor->idata = 0;
 8006f7a:	2300      	movs	r3, #0
	sensor->data = 0;
 8006f7c:	2400      	movs	r4, #0
	sensor->type = type;
 8006f7e:	7001      	strb	r1, [r0, #0]
	sensor->data = 0;
 8006f80:	6044      	str	r4, [r0, #4]
	sensor->id = id;
 8006f82:	7042      	strb	r2, [r0, #1]
	sensor->idata = 0;
 8006f84:	6083      	str	r3, [r0, #8]
}
 8006f86:	bc10      	pop	{r4}
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop

08006f8c <lora_sensor_set_data>:

void lora_sensor_set_data(LoRa_sensor* sensor, float value) {
 8006f8c:	ba0b      	rev	r3, r1
	sensor->idata = value;
 8006f8e:	6081      	str	r1, [r0, #8]
	uint32_t *data = (uint32_t*)(&value);
	*data = (((*data >> 24) & 0xFF)) | (((*data >> 16) & 0xFF) << 8 ) | (((*data >> 8) & 0xFF) << 16) | (((*data) & 0xFF) << 24 );
	sensor->data = *data;
 8006f90:	6043      	str	r3, [r0, #4]
}
 8006f92:	4770      	bx	lr

08006f94 <lora_led_struct_set_IN>:
		LoRa_led_struct.signal_time = signal_time;
	}
	return first_init;
}

void lora_led_struct_set_IN(uint8_t signalIN) {
 8006f94:	b510      	push	{r4, lr}
 8006f96:	4604      	mov	r4, r0
	LoRa_led_struct.ledIN.time = HAL_GetTick() - LoRa_led_struct.wait_time;
 8006f98:	f000 f8a2 	bl	80070e0 <HAL_GetTick>
 8006f9c:	4b02      	ldr	r3, [pc, #8]	; (8006fa8 <lora_led_struct_set_IN+0x14>)
 8006f9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	LoRa_led_struct.ledIN.amt_signal = signalIN;
 8006fa0:	721c      	strb	r4, [r3, #8]
	LoRa_led_struct.ledIN.time = HAL_GetTick() - LoRa_led_struct.wait_time;
 8006fa2:	1a80      	subs	r0, r0, r2
 8006fa4:	60d8      	str	r0, [r3, #12]
}
 8006fa6:	bd10      	pop	{r4, pc}
 8006fa8:	20003db4 	.word	0x20003db4

08006fac <lora_led_struct_set_OUT>:
void lora_led_struct_set_OUT(uint8_t signalOUT) {
 8006fac:	b510      	push	{r4, lr}
 8006fae:	4604      	mov	r4, r0
	LoRa_led_struct.ledOUT.time = HAL_GetTick() - LoRa_led_struct.wait_time;
 8006fb0:	f000 f896 	bl	80070e0 <HAL_GetTick>
 8006fb4:	4b02      	ldr	r3, [pc, #8]	; (8006fc0 <lora_led_struct_set_OUT+0x14>)
 8006fb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	LoRa_led_struct.ledOUT.amt_signal = signalOUT;
 8006fb8:	771c      	strb	r4, [r3, #28]
	LoRa_led_struct.ledOUT.time = HAL_GetTick() - LoRa_led_struct.wait_time;
 8006fba:	1a80      	subs	r0, r0, r2
 8006fbc:	6218      	str	r0, [r3, #32]
}
 8006fbe:	bd10      	pop	{r4, pc}
 8006fc0:	20003db4 	.word	0x20003db4

08006fc4 <LoRa_init>:
extern class LoRa_class LoRa;

extern "C" {

void LoRa_init(SPI_HandleTypeDef *spi) {
	return LoRa.init(spi);
 8006fc4:	4601      	mov	r1, r0
 8006fc6:	4801      	ldr	r0, [pc, #4]	; (8006fcc <LoRa_init+0x8>)
 8006fc8:	f7fa bb6a 	b.w	80016a0 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef>
 8006fcc:	20000120 	.word	0x20000120

08006fd0 <LoRa_begin>:
	return LoRa.field_get(field, value, read);
}
uint8_t LoRa_field_get(Address_field* fields, uint32_t* values, uint8_t amt, bool read) {
	return LoRa.field_get(fields, values, amt, read);
}
uint8_t LoRa_begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8006fd0:	b530      	push	{r4, r5, lr}
 8006fd2:	b089      	sub	sp, #36	; 0x24
 8006fd4:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8006fd8:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
	return LoRa.begin(frequency, paboost, signal_power, SF, SBW, sync_word);
 8006fdc:	e9cd 2300 	strd	r2, r3, [sp]
 8006fe0:	9502      	str	r5, [sp, #8]
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
uint8_t LoRa_begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8006fe6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
	return LoRa.begin(frequency, paboost, signal_power, SF, SBW, sync_word);
 8006fea:	9406      	str	r4, [sp, #24]
 8006fec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ff0:	4802      	ldr	r0, [pc, #8]	; (8006ffc <LoRa_begin+0x2c>)
 8006ff2:	f7fa fdb7 	bl	8001b64 <_ZN10LoRa_class5beginEybhhyh>
}
 8006ff6:	b009      	add	sp, #36	; 0x24
 8006ff8:	bd30      	pop	{r4, r5, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20000120 	.word	0x20000120

08007000 <LoRa_receiver_packet>:
	return LoRa.crc_enable();
}
uint8_t LoRa_crc_disable() {
	return LoRa.crc_disable();
}
struct lora_packet LoRa_receiver_packet(uint8_t count, uint32_t wait, bool rssi, bool snr) {
 8007000:	b530      	push	{r4, r5, lr}
 8007002:	4604      	mov	r4, r0
 8007004:	b087      	sub	sp, #28
 8007006:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
	return LoRa.receiver_packet(count, wait, rssi, snr).get_strust();
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	a802      	add	r0, sp, #8
 800700e:	4613      	mov	r3, r2
 8007010:	9501      	str	r5, [sp, #4]
 8007012:	460a      	mov	r2, r1
 8007014:	4906      	ldr	r1, [pc, #24]	; (8007030 <LoRa_receiver_packet+0x30>)
 8007016:	f7fb f857 	bl	80020c8 <_ZN10LoRa_class15receiver_packetEhmbb>
 800701a:	a902      	add	r1, sp, #8
 800701c:	4620      	mov	r0, r4
 800701e:	f7fb fb3b 	bl	8002698 <_ZN11LoRa_packet10get_strustEv>
 8007022:	a802      	add	r0, sp, #8
 8007024:	f7fb fb0c 	bl	8002640 <_ZN11LoRa_packetD1Ev>
}
 8007028:	4620      	mov	r0, r4
 800702a:	b007      	add	sp, #28
 800702c:	bd30      	pop	{r4, r5, pc}
 800702e:	bf00      	nop
 8007030:	20000120 	.word	0x20000120

08007034 <LoRa_sender_packet>:
}
float LoRa_packet_snr() {
	return LoRa.packet_snr();
}
bool LoRa_sender_packet(uint8_t* packet, uint8_t len, uint32_t wait) {
	return LoRa.sender_packet(packet, len, wait);
 8007034:	4613      	mov	r3, r2
 8007036:	460a      	mov	r2, r1
 8007038:	4601      	mov	r1, r0
 800703a:	4801      	ldr	r0, [pc, #4]	; (8007040 <LoRa_sender_packet+0xc>)
 800703c:	f7fb b9aa 	b.w	8002394 <_ZN10LoRa_class13sender_packetEPhhm>
 8007040:	20000120 	.word	0x20000120

08007044 <packet_delete>:
}
bool LoRa_packet_end(uint32_t wait, bool sleep) {
	return LoRa.packet_end(wait, sleep);
}

void packet_delete(struct lora_packet* packet) {
 8007044:	b510      	push	{r4, lr}
 8007046:	4604      	mov	r4, r0
	if(packet->_data != nullptr) {
 8007048:	6800      	ldr	r0, [r0, #0]
 800704a:	b120      	cbz	r0, 8007056 <packet_delete+0x12>
		delete[] packet->_data;
 800704c:	f004 fe2e 	bl	800bcac <_ZdaPv>
//		free(packet->_data);
		packet->_data = nullptr;
 8007050:	2300      	movs	r3, #0
 8007052:	6023      	str	r3, [r4, #0]
		packet->_len = 0;
 8007054:	7123      	strb	r3, [r4, #4]
	}
	packet->_rssi = 0;
 8007056:	2300      	movs	r3, #0
	packet->_snr = 0;
 8007058:	2200      	movs	r2, #0
	packet->_rssi = 0;
 800705a:	7163      	strb	r3, [r4, #5]
	packet->_num = 0;
 800705c:	71a3      	strb	r3, [r4, #6]
	packet->_crc_error = false;
 800705e:	7323      	strb	r3, [r4, #12]
	packet->_snr = 0;
 8007060:	60a2      	str	r2, [r4, #8]
}
 8007062:	bd10      	pop	{r4, pc}

08007064 <packet_set_len>:
	packet->_snr = 0;
	packet->_num = 0;
	packet->_crc_error = false;
}

void packet_set_len(struct lora_packet* packet, uint8_t len) {
 8007064:	b538      	push	{r3, r4, r5, lr}
 8007066:	4604      	mov	r4, r0
	if(packet->_data != nullptr) {
 8007068:	6800      	ldr	r0, [r0, #0]
void packet_set_len(struct lora_packet* packet, uint8_t len) {
 800706a:	460d      	mov	r5, r1
	if(packet->_data != nullptr) {
 800706c:	b118      	cbz	r0, 8007076 <packet_set_len+0x12>
		delete[] packet->_data;
 800706e:	f004 fe1d 	bl	800bcac <_ZdaPv>
		packet->_data = nullptr;
 8007072:	2300      	movs	r3, #0
 8007074:	6023      	str	r3, [r4, #0]
	packet->_rssi = 0;
 8007076:	2300      	movs	r3, #0
	packet->_snr = 0;
 8007078:	2200      	movs	r2, #0
	packet_delete(packet);
	packet->_len = len;
 800707a:	7125      	strb	r5, [r4, #4]
	packet->_rssi = 0;
 800707c:	7163      	strb	r3, [r4, #5]
	packet->_num = 0;
 800707e:	71a3      	strb	r3, [r4, #6]
	packet->_crc_error = false;
 8007080:	7323      	strb	r3, [r4, #12]
	packet->_snr = 0;
 8007082:	60a2      	str	r2, [r4, #8]
	if(len != 0) {
 8007084:	b905      	cbnz	r5, 8007088 <packet_set_len+0x24>
		packet->_data = new uint8_t[len];
	}
}
 8007086:	bd38      	pop	{r3, r4, r5, pc}
		packet->_data = new uint8_t[len];
 8007088:	4628      	mov	r0, r5
 800708a:	f004 fe11 	bl	800bcb0 <_Znaj>
 800708e:	6020      	str	r0, [r4, #0]
}
 8007090:	bd38      	pop	{r3, r4, r5, pc}
 8007092:	bf00      	nop

08007094 <packet_data_add>:
	for(int i = 0; i < len; ++i)
		packet->_data[i] = data[i];
}

void packet_data_add(struct lora_packet* packet, uint8_t data_byte) {
	packet->_data[packet->_num] = data_byte;
 8007094:	7983      	ldrb	r3, [r0, #6]
 8007096:	6802      	ldr	r2, [r0, #0]
 8007098:	54d1      	strb	r1, [r2, r3]
	++(packet->_num);
 800709a:	7983      	ldrb	r3, [r0, #6]
 800709c:	3301      	adds	r3, #1
 800709e:	7183      	strb	r3, [r0, #6]
}
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop

080070a4 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80070a4:	4a07      	ldr	r2, [pc, #28]	; (80070c4 <HAL_Init+0x20>)
{
 80070a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80070a8:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80070aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80070ac:	f043 0310 	orr.w	r3, r3, #16
 80070b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80070b2:	f000 f82d 	bl	8007110 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80070b6:	2000      	movs	r0, #0
 80070b8:	f7ff fdf8 	bl	8006cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80070bc:	f7ff fd2c 	bl	8006b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80070c0:	2000      	movs	r0, #0
 80070c2:	bd08      	pop	{r3, pc}
 80070c4:	40022000 	.word	0x40022000

080070c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80070c8:	4a03      	ldr	r2, [pc, #12]	; (80070d8 <HAL_IncTick+0x10>)
 80070ca:	4b04      	ldr	r3, [pc, #16]	; (80070dc <HAL_IncTick+0x14>)
 80070cc:	6811      	ldr	r1, [r2, #0]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	440b      	add	r3, r1
 80070d2:	6013      	str	r3, [r2, #0]
}
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	20003e5c 	.word	0x20003e5c
 80070dc:	2000008c 	.word	0x2000008c

080070e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80070e0:	4b01      	ldr	r3, [pc, #4]	; (80070e8 <HAL_GetTick+0x8>)
 80070e2:	6818      	ldr	r0, [r3, #0]
}
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	20003e5c 	.word	0x20003e5c

080070ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80070ec:	b538      	push	{r3, r4, r5, lr}
 80070ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80070f0:	f7ff fff6 	bl	80070e0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80070f4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80070f6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80070f8:	d002      	beq.n	8007100 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80070fa:	4b04      	ldr	r3, [pc, #16]	; (800710c <HAL_Delay+0x20>)
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007100:	f7ff ffee 	bl	80070e0 <HAL_GetTick>
 8007104:	1b40      	subs	r0, r0, r5
 8007106:	42a0      	cmp	r0, r4
 8007108:	d3fa      	bcc.n	8007100 <HAL_Delay+0x14>
  {
  }
}
 800710a:	bd38      	pop	{r3, r4, r5, pc}
 800710c:	2000008c 	.word	0x2000008c

08007110 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007110:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007114:	4a06      	ldr	r2, [pc, #24]	; (8007130 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007116:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007118:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800711a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800711e:	400b      	ands	r3, r1
 8007120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8007128:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800712a:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	e000ed00 	.word	0xe000ed00

08007134 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007134:	4b18      	ldr	r3, [pc, #96]	; (8007198 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007136:	b430      	push	{r4, r5}
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800713e:	f1c3 0507 	rsb	r5, r3, #7
 8007142:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007144:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007148:	bf28      	it	cs
 800714a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800714c:	2c06      	cmp	r4, #6
 800714e:	d919      	bls.n	8007184 <HAL_NVIC_SetPriority+0x50>
 8007150:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007154:	3b03      	subs	r3, #3
 8007156:	409c      	lsls	r4, r3
 8007158:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800715c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007160:	40aa      	lsls	r2, r5
 8007162:	ea21 0102 	bic.w	r1, r1, r2
 8007166:	fa01 f203 	lsl.w	r2, r1, r3
 800716a:	4322      	orrs	r2, r4
 800716c:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 800716e:	2800      	cmp	r0, #0
 8007170:	b2d2      	uxtb	r2, r2
 8007172:	db0a      	blt.n	800718a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007174:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8007178:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800717c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007180:	bc30      	pop	{r4, r5}
 8007182:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007184:	2400      	movs	r4, #0
 8007186:	4623      	mov	r3, r4
 8007188:	e7e8      	b.n	800715c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800718a:	4b04      	ldr	r3, [pc, #16]	; (800719c <HAL_NVIC_SetPriority+0x68>)
 800718c:	f000 000f 	and.w	r0, r0, #15
 8007190:	4403      	add	r3, r0
 8007192:	761a      	strb	r2, [r3, #24]
 8007194:	bc30      	pop	{r4, r5}
 8007196:	4770      	bx	lr
 8007198:	e000ed00 	.word	0xe000ed00
 800719c:	e000ecfc 	.word	0xe000ecfc

080071a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80071a0:	2800      	cmp	r0, #0
 80071a2:	db07      	blt.n	80071b4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071a4:	2301      	movs	r3, #1
 80071a6:	f000 011f 	and.w	r1, r0, #31
 80071aa:	4a03      	ldr	r2, [pc, #12]	; (80071b8 <HAL_NVIC_EnableIRQ+0x18>)
 80071ac:	408b      	lsls	r3, r1
 80071ae:	0940      	lsrs	r0, r0, #5
 80071b0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	e000e100 	.word	0xe000e100

080071bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80071bc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80071be:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d004      	beq.n	80071d0 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071c6:	2204      	movs	r2, #4
        
    status = HAL_ERROR;
 80071c8:	2401      	movs	r4, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071ca:	6382      	str	r2, [r0, #56]	; 0x38
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80071cc:	4620      	mov	r0, r4
 80071ce:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071d0:	6803      	ldr	r3, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80071d2:	491d      	ldr	r1, [pc, #116]	; (8007248 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071d4:	681a      	ldr	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80071d6:	428b      	cmp	r3, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071d8:	f022 020e 	bic.w	r2, r2, #14
 80071dc:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	f022 0201 	bic.w	r2, r2, #1
 80071e4:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80071e6:	d021      	beq.n	800722c <HAL_DMA_Abort_IT+0x70>
 80071e8:	4a18      	ldr	r2, [pc, #96]	; (800724c <HAL_DMA_Abort_IT+0x90>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d01c      	beq.n	8007228 <HAL_DMA_Abort_IT+0x6c>
 80071ee:	3214      	adds	r2, #20
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d01d      	beq.n	8007230 <HAL_DMA_Abort_IT+0x74>
 80071f4:	3214      	adds	r2, #20
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d01d      	beq.n	8007236 <HAL_DMA_Abort_IT+0x7a>
 80071fa:	3214      	adds	r2, #20
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d01d      	beq.n	800723c <HAL_DMA_Abort_IT+0x80>
 8007200:	3214      	adds	r2, #20
 8007202:	4293      	cmp	r3, r2
 8007204:	bf0c      	ite	eq
 8007206:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 800720a:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
    hdma->State = HAL_DMA_STATE_READY;
 800720e:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8007210:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007212:	4d0f      	ldr	r5, [pc, #60]	; (8007250 <HAL_DMA_Abort_IT+0x94>)
    if(hdma->XferAbortCallback != NULL)
 8007214:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007216:	606b      	str	r3, [r5, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8007218:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800721c:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8007220:	b17a      	cbz	r2, 8007242 <HAL_DMA_Abort_IT+0x86>
      hdma->XferAbortCallback(hdma);
 8007222:	4790      	blx	r2
}
 8007224:	4620      	mov	r0, r4
 8007226:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007228:	2310      	movs	r3, #16
 800722a:	e7f0      	b.n	800720e <HAL_DMA_Abort_IT+0x52>
 800722c:	2301      	movs	r3, #1
 800722e:	e7ee      	b.n	800720e <HAL_DMA_Abort_IT+0x52>
 8007230:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007234:	e7eb      	b.n	800720e <HAL_DMA_Abort_IT+0x52>
 8007236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800723a:	e7e8      	b.n	800720e <HAL_DMA_Abort_IT+0x52>
 800723c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007240:	e7e5      	b.n	800720e <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 8007242:	4614      	mov	r4, r2
 8007244:	e7c2      	b.n	80071cc <HAL_DMA_Abort_IT+0x10>
 8007246:	bf00      	nop
 8007248:	40020008 	.word	0x40020008
 800724c:	4002001c 	.word	0x4002001c
 8007250:	40020000 	.word	0x40020000

08007254 <HAL_DMA_GetState>:
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
}
 8007254:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop

0800725c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800725c:	680a      	ldr	r2, [r1, #0]
 800725e:	2a00      	cmp	r2, #0
 8007260:	f000 80db 	beq.w	800741a <HAL_GPIO_Init+0x1be>
{
 8007264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
 8007268:	f04f 0a00 	mov.w	sl, #0
{
 800726c:	b085      	sub	sp, #20
  uint32_t position = 0x00u;
 800726e:	4655      	mov	r5, sl
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007270:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 8007444 <HAL_GPIO_Init+0x1e8>
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007274:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 8007448 <HAL_GPIO_Init+0x1ec>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007278:	4f6d      	ldr	r7, [pc, #436]	; (8007430 <HAL_GPIO_Init+0x1d4>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800727a:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 800744c <HAL_GPIO_Init+0x1f0>
 800727e:	e003      	b.n	8007288 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8007280:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007282:	fa32 f305 	lsrs.w	r3, r2, r5
 8007286:	d078      	beq.n	800737a <HAL_GPIO_Init+0x11e>
    ioposition = (0x01uL << position);
 8007288:	2301      	movs	r3, #1
 800728a:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800728c:	ea02 0403 	and.w	r4, r2, r3
    if (iocurrent == ioposition)
 8007290:	42a3      	cmp	r3, r4
 8007292:	d1f5      	bne.n	8007280 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8007294:	684a      	ldr	r2, [r1, #4]
 8007296:	2a12      	cmp	r2, #18
 8007298:	f000 809e 	beq.w	80073d8 <HAL_GPIO_Init+0x17c>
 800729c:	f200 8087 	bhi.w	80073ae <HAL_GPIO_Init+0x152>
 80072a0:	2a02      	cmp	r2, #2
 80072a2:	f000 809d 	beq.w	80073e0 <HAL_GPIO_Init+0x184>
 80072a6:	d97c      	bls.n	80073a2 <HAL_GPIO_Init+0x146>
 80072a8:	2a03      	cmp	r2, #3
 80072aa:	d069      	beq.n	8007380 <HAL_GPIO_Init+0x124>
 80072ac:	2a11      	cmp	r2, #17
 80072ae:	d102      	bne.n	80072b6 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80072b0:	68cb      	ldr	r3, [r1, #12]
 80072b2:	f103 0a04 	add.w	sl, r3, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80072b6:	2cff      	cmp	r4, #255	; 0xff
 80072b8:	d866      	bhi.n	8007388 <HAL_GPIO_Init+0x12c>
 80072ba:	4681      	mov	r9, r0
 80072bc:	6803      	ldr	r3, [r0, #0]
 80072be:	00aa      	lsls	r2, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80072c0:	260f      	movs	r6, #15
 80072c2:	fa06 fb02 	lsl.w	fp, r6, r2
 80072c6:	ea23 030b 	bic.w	r3, r3, fp
 80072ca:	fa0a f202 	lsl.w	r2, sl, r2
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f8c9 3000 	str.w	r3, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80072d4:	684a      	ldr	r2, [r1, #4]
 80072d6:	00d3      	lsls	r3, r2, #3
 80072d8:	d561      	bpl.n	800739e <HAL_GPIO_Init+0x142>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80072da:	f8dc 9018 	ldr.w	r9, [ip, #24]
 80072de:	f025 0303 	bic.w	r3, r5, #3
 80072e2:	f049 0901 	orr.w	r9, r9, #1
 80072e6:	f8cc 9018 	str.w	r9, [ip, #24]
 80072ea:	f8dc 9018 	ldr.w	r9, [ip, #24]
 80072ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072f2:	f009 0901 	and.w	r9, r9, #1
 80072f6:	f8cd 900c 	str.w	r9, [sp, #12]
 80072fa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80072fe:	f005 0903 	and.w	r9, r5, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007302:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007306:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800730a:	f8d3 b008 	ldr.w	fp, [r3, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800730e:	fa06 f609 	lsl.w	r6, r6, r9
 8007312:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007316:	4570      	cmp	r0, lr
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007318:	9601      	str	r6, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800731a:	d011      	beq.n	8007340 <HAL_GPIO_Init+0xe4>
 800731c:	4540      	cmp	r0, r8
 800731e:	d063      	beq.n	80073e8 <HAL_GPIO_Init+0x18c>
 8007320:	4e44      	ldr	r6, [pc, #272]	; (8007434 <HAL_GPIO_Init+0x1d8>)
 8007322:	42b0      	cmp	r0, r6
 8007324:	d07a      	beq.n	800741c <HAL_GPIO_Init+0x1c0>
 8007326:	4e44      	ldr	r6, [pc, #272]	; (8007438 <HAL_GPIO_Init+0x1dc>)
 8007328:	42b0      	cmp	r0, r6
 800732a:	bf0c      	ite	eq
 800732c:	f04f 0b03 	moveq.w	fp, #3
 8007330:	f04f 0b04 	movne.w	fp, #4
 8007334:	9e01      	ldr	r6, [sp, #4]
 8007336:	fa0b f909 	lsl.w	r9, fp, r9
 800733a:	ea46 0609 	orr.w	r6, r6, r9
 800733e:	9601      	str	r6, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 8007340:	609e      	str	r6, [r3, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8007342:	683b      	ldr	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007344:	03d6      	lsls	r6, r2, #15
          SET_BIT(EXTI->IMR, iocurrent);
 8007346:	bf4c      	ite	mi
 8007348:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800734a:	43a3      	bicpl	r3, r4
 800734c:	603b      	str	r3, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800734e:	687b      	ldr	r3, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007350:	0396      	lsls	r6, r2, #14
          SET_BIT(EXTI->EMR, iocurrent);
 8007352:	bf4c      	ite	mi
 8007354:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007356:	43a3      	bicpl	r3, r4
 8007358:	607b      	str	r3, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800735a:	68bb      	ldr	r3, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800735c:	02d6      	lsls	r6, r2, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 800735e:	bf4c      	ite	mi
 8007360:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007362:	43a3      	bicpl	r3, r4
 8007364:	60bb      	str	r3, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007366:	0292      	lsls	r2, r2, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 8007368:	68fb      	ldr	r3, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800736a:	d515      	bpl.n	8007398 <HAL_GPIO_Init+0x13c>
          SET_BIT(EXTI->FTSR, iocurrent);
 800736c:	431c      	orrs	r4, r3
 800736e:	60fc      	str	r4, [r7, #12]
 8007370:	680a      	ldr	r2, [r1, #0]
	position++;
 8007372:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007374:	fa32 f305 	lsrs.w	r3, r2, r5
 8007378:	d186      	bne.n	8007288 <HAL_GPIO_Init+0x2c>
  }
}
 800737a:	b005      	add	sp, #20
 800737c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007380:	2cff      	cmp	r4, #255	; 0xff
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007382:	f04f 0a00 	mov.w	sl, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007386:	d998      	bls.n	80072ba <HAL_GPIO_Init+0x5e>
 8007388:	f105 4280 	add.w	r2, r5, #1073741824	; 0x40000000
 800738c:	3a08      	subs	r2, #8
 800738e:	6843      	ldr	r3, [r0, #4]
 8007390:	0092      	lsls	r2, r2, #2
 8007392:	f100 0904 	add.w	r9, r0, #4
 8007396:	e793      	b.n	80072c0 <HAL_GPIO_Init+0x64>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007398:	ea23 0404 	bic.w	r4, r3, r4
 800739c:	60fc      	str	r4, [r7, #12]
 800739e:	680a      	ldr	r2, [r1, #0]
 80073a0:	e76e      	b.n	8007280 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 80073a2:	b1a2      	cbz	r2, 80073ce <HAL_GPIO_Init+0x172>
 80073a4:	2a01      	cmp	r2, #1
 80073a6:	d186      	bne.n	80072b6 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80073a8:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 80073ac:	e783      	b.n	80072b6 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 80073ae:	4e23      	ldr	r6, [pc, #140]	; (800743c <HAL_GPIO_Init+0x1e0>)
 80073b0:	42b2      	cmp	r2, r6
 80073b2:	d00c      	beq.n	80073ce <HAL_GPIO_Init+0x172>
 80073b4:	d920      	bls.n	80073f8 <HAL_GPIO_Init+0x19c>
 80073b6:	4e22      	ldr	r6, [pc, #136]	; (8007440 <HAL_GPIO_Init+0x1e4>)
 80073b8:	42b2      	cmp	r2, r6
 80073ba:	d008      	beq.n	80073ce <HAL_GPIO_Init+0x172>
 80073bc:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80073c0:	42b2      	cmp	r2, r6
 80073c2:	d004      	beq.n	80073ce <HAL_GPIO_Init+0x172>
 80073c4:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 80073c8:	42b2      	cmp	r2, r6
 80073ca:	f47f af74 	bne.w	80072b6 <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80073ce:	688a      	ldr	r2, [r1, #8]
 80073d0:	b9e2      	cbnz	r2, 800740c <HAL_GPIO_Init+0x1b0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80073d2:	f04f 0a04 	mov.w	sl, #4
 80073d6:	e76e      	b.n	80072b6 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80073d8:	68cb      	ldr	r3, [r1, #12]
 80073da:	f103 0a0c 	add.w	sl, r3, #12
          break;
 80073de:	e76a      	b.n	80072b6 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80073e0:	68cb      	ldr	r3, [r1, #12]
 80073e2:	f103 0a08 	add.w	sl, r3, #8
          break;
 80073e6:	e766      	b.n	80072b6 <HAL_GPIO_Init+0x5a>
 80073e8:	f04f 0b01 	mov.w	fp, #1
 80073ec:	fa0b f909 	lsl.w	r9, fp, r9
 80073f0:	ea46 0609 	orr.w	r6, r6, r9
 80073f4:	9601      	str	r6, [sp, #4]
 80073f6:	e7a3      	b.n	8007340 <HAL_GPIO_Init+0xe4>
      switch (GPIO_Init->Mode)
 80073f8:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 80073fc:	42b2      	cmp	r2, r6
 80073fe:	d0e6      	beq.n	80073ce <HAL_GPIO_Init+0x172>
 8007400:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8007404:	42b2      	cmp	r2, r6
 8007406:	f47f af56 	bne.w	80072b6 <HAL_GPIO_Init+0x5a>
 800740a:	e7e0      	b.n	80073ce <HAL_GPIO_Init+0x172>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800740c:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800740e:	bf0c      	ite	eq
 8007410:	6103      	streq	r3, [r0, #16]
            GPIOx->BRR = ioposition;
 8007412:	6143      	strne	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007414:	f04f 0a08 	mov.w	sl, #8
 8007418:	e74d      	b.n	80072b6 <HAL_GPIO_Init+0x5a>
 800741a:	4770      	bx	lr
 800741c:	f04f 0b02 	mov.w	fp, #2
 8007420:	9e01      	ldr	r6, [sp, #4]
 8007422:	fa0b f909 	lsl.w	r9, fp, r9
 8007426:	ea46 0609 	orr.w	r6, r6, r9
 800742a:	9601      	str	r6, [sp, #4]
 800742c:	e788      	b.n	8007340 <HAL_GPIO_Init+0xe4>
 800742e:	bf00      	nop
 8007430:	40010400 	.word	0x40010400
 8007434:	40011000 	.word	0x40011000
 8007438:	40011400 	.word	0x40011400
 800743c:	10210000 	.word	0x10210000
 8007440:	10310000 	.word	0x10310000
 8007444:	40021000 	.word	0x40021000
 8007448:	40010800 	.word	0x40010800
 800744c:	40010c00 	.word	0x40010c00

08007450 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007450:	6883      	ldr	r3, [r0, #8]
 8007452:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007454:	bf14      	ite	ne
 8007456:	2001      	movne	r0, #1
 8007458:	2000      	moveq	r0, #0
 800745a:	4770      	bx	lr

0800745c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800745c:	b902      	cbnz	r2, 8007460 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800745e:	0409      	lsls	r1, r1, #16
 8007460:	6101      	str	r1, [r0, #16]
  }
}
 8007462:	4770      	bx	lr

08007464 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007464:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007466:	ea01 0203 	and.w	r2, r1, r3
 800746a:	ea21 0103 	bic.w	r1, r1, r3
 800746e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007472:	6101      	str	r1, [r0, #16]
}
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop

08007478 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007478:	4a04      	ldr	r2, [pc, #16]	; (800748c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800747a:	6951      	ldr	r1, [r2, #20]
 800747c:	4201      	tst	r1, r0
 800747e:	d100      	bne.n	8007482 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8007480:	4770      	bx	lr
{
 8007482:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007484:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007486:	f7ff fb27 	bl	8006ad8 <HAL_GPIO_EXTI_Callback>
  }
}
 800748a:	bd08      	pop	{r3, pc}
 800748c:	40010400 	.word	0x40010400

08007490 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007490:	2800      	cmp	r0, #0
 8007492:	f000 809f 	beq.w	80075d4 <HAL_I2C_Init+0x144>
{
 8007496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007498:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800749c:	4604      	mov	r4, r0
 800749e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 808f 	beq.w	80075c6 <HAL_I2C_Init+0x136>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074a8:	2224      	movs	r2, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80074aa:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80074ac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	f022 0201 	bic.w	r2, r2, #1
 80074b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80074c8:	f001 ff6c 	bl	80093a4 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80074cc:	6862      	ldr	r2, [r4, #4]
 80074ce:	4b4b      	ldr	r3, [pc, #300]	; (80075fc <HAL_I2C_Init+0x16c>)
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d84b      	bhi.n	800756c <HAL_I2C_Init+0xdc>
 80074d4:	4b4a      	ldr	r3, [pc, #296]	; (8007600 <HAL_I2C_Init+0x170>)
 80074d6:	4298      	cmp	r0, r3
 80074d8:	d97a      	bls.n	80075d0 <HAL_I2C_Init+0x140>
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80074da:	1e43      	subs	r3, r0, #1
 80074dc:	0052      	lsls	r2, r2, #1
 80074de:	fbb3 f2f2 	udiv	r2, r3, r2
  freqrange = I2C_FREQRANGE(pclk1);
 80074e2:	4948      	ldr	r1, [pc, #288]	; (8007604 <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80074e4:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80074e6:	fba1 1000 	umull	r1, r0, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80074ea:	6859      	ldr	r1, [r3, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80074ec:	0c80      	lsrs	r0, r0, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80074ee:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80074f2:	4301      	orrs	r1, r0
 80074f4:	6059      	str	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80074f6:	6a19      	ldr	r1, [r3, #32]
 80074f8:	3001      	adds	r0, #1
 80074fa:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80074fe:	4308      	orrs	r0, r1
 8007500:	6218      	str	r0, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007502:	1c50      	adds	r0, r2, #1
 8007504:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8007508:	2804      	cmp	r0, #4
 800750a:	bf38      	it	cc
 800750c:	2004      	movcc	r0, #4
 800750e:	69d9      	ldr	r1, [r3, #28]
 8007510:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8007514:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007518:	2500      	movs	r5, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800751a:	2620      	movs	r6, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800751c:	4308      	orrs	r0, r1
 800751e:	61d8      	str	r0, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007520:	6819      	ldr	r1, [r3, #0]
 8007522:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 8007526:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800752a:	4302      	orrs	r2, r0
 800752c:	430a      	orrs	r2, r1
 800752e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007530:	6899      	ldr	r1, [r3, #8]
 8007532:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 8007536:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800753a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800753e:	4302      	orrs	r2, r0
 8007540:	430a      	orrs	r2, r1
 8007542:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007544:	68d9      	ldr	r1, [r3, #12]
 8007546:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 800754a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800754e:	4302      	orrs	r2, r0
 8007550:	430a      	orrs	r2, r1
 8007552:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 8007554:	681a      	ldr	r2, [r3, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8007556:	4628      	mov	r0, r5
  __HAL_I2C_ENABLE(hi2c);
 8007558:	f042 0201 	orr.w	r2, r2, #1
 800755c:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800755e:	6425      	str	r5, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007560:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007564:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007566:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 800756a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800756c:	4b26      	ldr	r3, [pc, #152]	; (8007608 <HAL_I2C_Init+0x178>)
 800756e:	4298      	cmp	r0, r3
 8007570:	d92e      	bls.n	80075d0 <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007572:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8007576:	4d23      	ldr	r5, [pc, #140]	; (8007604 <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007578:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800757a:	fba5 6500 	umull	r6, r5, r5, r0
 800757e:	0cad      	lsrs	r5, r5, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007580:	fb01 f105 	mul.w	r1, r1, r5
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007584:	685e      	ldr	r6, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007586:	4f21      	ldr	r7, [pc, #132]	; (800760c <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007588:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800758c:	fba7 7101 	umull	r7, r1, r7, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007590:	4335      	orrs	r5, r6
 8007592:	605d      	str	r5, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007594:	6a1d      	ldr	r5, [r3, #32]
 8007596:	0989      	lsrs	r1, r1, #6
 8007598:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800759c:	3101      	adds	r1, #1
 800759e:	4329      	orrs	r1, r5
 80075a0:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80075a2:	69d9      	ldr	r1, [r3, #28]
 80075a4:	68a5      	ldr	r5, [r4, #8]
 80075a6:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80075aa:	3801      	subs	r0, #1
 80075ac:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80075b0:	b995      	cbnz	r5, 80075d8 <HAL_I2C_Init+0x148>
 80075b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80075b6:	fbb0 f0f2 	udiv	r0, r0, r2
 80075ba:	3001      	adds	r0, #1
 80075bc:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80075c0:	b9c0      	cbnz	r0, 80075f4 <HAL_I2C_Init+0x164>
 80075c2:	2001      	movs	r0, #1
 80075c4:	e7a8      	b.n	8007518 <HAL_I2C_Init+0x88>
    hi2c->Lock = HAL_UNLOCKED;
 80075c6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80075ca:	f7ff facd 	bl	8006b68 <HAL_I2C_MspInit>
 80075ce:	e76b      	b.n	80074a8 <HAL_I2C_Init+0x18>
    return HAL_ERROR;
 80075d0:	2001      	movs	r0, #1
}
 80075d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80075d4:	2001      	movs	r0, #1
}
 80075d6:	4770      	bx	lr
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80075d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80075dc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80075e0:	fbb0 f0f2 	udiv	r0, r0, r2
 80075e4:	3001      	adds	r0, #1
 80075e6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80075ea:	2800      	cmp	r0, #0
 80075ec:	d0e9      	beq.n	80075c2 <HAL_I2C_Init+0x132>
 80075ee:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80075f2:	e791      	b.n	8007518 <HAL_I2C_Init+0x88>
 80075f4:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80075f8:	e78e      	b.n	8007518 <HAL_I2C_Init+0x88>
 80075fa:	bf00      	nop
 80075fc:	000186a0 	.word	0x000186a0
 8007600:	001e847f 	.word	0x001e847f
 8007604:	431bde83 	.word	0x431bde83
 8007608:	003d08ff 	.word	0x003d08ff
 800760c:	10624dd3 	.word	0x10624dd3

08007610 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007614:	4604      	mov	r4, r0
 8007616:	b082      	sub	sp, #8
 8007618:	4699      	mov	r9, r3
 800761a:	460f      	mov	r7, r1
 800761c:	4690      	mov	r8, r2
 800761e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007620:	f7ff fd5e 	bl	80070e0 <HAL_GetTick>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007624:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8007628:	2b20      	cmp	r3, #32
 800762a:	d003      	beq.n	8007634 <HAL_I2C_Master_Transmit+0x24>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
    {
      return HAL_BUSY;
 800762c:	2002      	movs	r0, #2
  }
  else
  {
    return HAL_BUSY;
  }
}
 800762e:	b002      	add	sp, #8
 8007630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007634:	4606      	mov	r6, r0
 8007636:	e005      	b.n	8007644 <HAL_I2C_Master_Transmit+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007638:	f7ff fd52 	bl	80070e0 <HAL_GetTick>
 800763c:	1b80      	subs	r0, r0, r6
 800763e:	2819      	cmp	r0, #25
 8007640:	f200 80e3 	bhi.w	800780a <HAL_I2C_Master_Transmit+0x1fa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007644:	6823      	ldr	r3, [r4, #0]
 8007646:	699a      	ldr	r2, [r3, #24]
 8007648:	43d2      	mvns	r2, r2
 800764a:	f012 0a02 	ands.w	sl, r2, #2
 800764e:	d0f3      	beq.n	8007638 <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 8007650:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8007654:	2a01      	cmp	r2, #1
 8007656:	d0e9      	beq.n	800762c <HAL_I2C_Master_Transmit+0x1c>
 8007658:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800765a:	681a      	ldr	r2, [r3, #0]
    __HAL_LOCK(hi2c);
 800765c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007660:	07d2      	lsls	r2, r2, #31
 8007662:	d402      	bmi.n	800766a <HAL_I2C_Master_Transmit+0x5a>
      __HAL_I2C_ENABLE(hi2c);
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	430a      	orrs	r2, r1
 8007668:	601a      	str	r2, [r3, #0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800766a:	2100      	movs	r1, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800766c:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007670:	2010      	movs	r0, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007678:	601a      	str	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800767a:	4aa5      	ldr	r2, [pc, #660]	; (8007910 <HAL_I2C_Master_Transmit+0x300>)
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800767c:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007680:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007684:	6421      	str	r1, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8007686:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800768a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800768c:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800768e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8007690:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007694:	2a08      	cmp	r2, #8
    hi2c->XferSize    = hi2c->XferCount;
 8007696:	8521      	strh	r1, [r4, #40]	; 0x28
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007698:	d072      	beq.n	8007780 <HAL_I2C_Master_Transmit+0x170>
 800769a:	2a01      	cmp	r2, #1
 800769c:	d070      	beq.n	8007780 <HAL_I2C_Master_Transmit+0x170>
 800769e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80076a2:	d06d      	beq.n	8007780 <HAL_I2C_Master_Transmit+0x170>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80076a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80076a6:	2a12      	cmp	r2, #18
 80076a8:	d06a      	beq.n	8007780 <HAL_I2C_Master_Transmit+0x170>
 80076aa:	1c68      	adds	r0, r5, #1
 80076ac:	f040 808b 	bne.w	80077c6 <HAL_I2C_Master_Transmit+0x1b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80076b0:	695a      	ldr	r2, [r3, #20]
 80076b2:	07d1      	lsls	r1, r2, #31
 80076b4:	d5fc      	bpl.n	80076b0 <HAL_I2C_Master_Transmit+0xa0>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80076b6:	6922      	ldr	r2, [r4, #16]
 80076b8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80076bc:	f040 80c9 	bne.w	8007852 <HAL_I2C_Master_Transmit+0x242>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80076c0:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80076c4:	611f      	str	r7, [r3, #16]
 80076c6:	1c6f      	adds	r7, r5, #1
 80076c8:	d004      	beq.n	80076d4 <HAL_I2C_Master_Transmit+0xc4>
 80076ca:	e0e9      	b.n	80078a0 <HAL_I2C_Master_Transmit+0x290>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076cc:	695a      	ldr	r2, [r3, #20]
 80076ce:	0551      	lsls	r1, r2, #21
 80076d0:	f100 80a9 	bmi.w	8007826 <HAL_I2C_Master_Transmit+0x216>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80076d4:	695a      	ldr	r2, [r3, #20]
 80076d6:	0790      	lsls	r0, r2, #30
 80076d8:	d5f8      	bpl.n	80076cc <HAL_I2C_Master_Transmit+0xbc>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076da:	2200      	movs	r2, #0
 80076dc:	9201      	str	r2, [sp, #4]
 80076de:	695a      	ldr	r2, [r3, #20]
 80076e0:	9201      	str	r2, [sp, #4]
 80076e2:	699a      	ldr	r2, [r3, #24]
 80076e4:	9201      	str	r2, [sp, #4]
 80076e6:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 80076e8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80076ea:	2a00      	cmp	r2, #0
 80076ec:	f000 80e7 	beq.w	80078be <HAL_I2C_Master_Transmit+0x2ae>
 80076f0:	1c68      	adds	r0, r5, #1
 80076f2:	d003      	beq.n	80076fc <HAL_I2C_Master_Transmit+0xec>
 80076f4:	e049      	b.n	800778a <HAL_I2C_Master_Transmit+0x17a>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076f6:	695a      	ldr	r2, [r3, #20]
 80076f8:	0552      	lsls	r2, r2, #21
 80076fa:	d42a      	bmi.n	8007752 <HAL_I2C_Master_Transmit+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076fc:	695a      	ldr	r2, [r3, #20]
 80076fe:	0611      	lsls	r1, r2, #24
 8007700:	d5f9      	bpl.n	80076f6 <HAL_I2C_Master_Transmit+0xe6>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007702:	6a67      	ldr	r7, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8007704:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007708:	4638      	mov	r0, r7
 800770a:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 800770e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007712:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8007714:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007716:	b289      	uxth	r1, r1
      hi2c->XferCount--;
 8007718:	3a01      	subs	r2, #1
 800771a:	b292      	uxth	r2, r2
 800771c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800771e:	695a      	ldr	r2, [r3, #20]
      hi2c->pBuffPtr++;
 8007720:	6260      	str	r0, [r4, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007722:	0750      	lsls	r0, r2, #29
      hi2c->XferSize--;
 8007724:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007726:	d50c      	bpl.n	8007742 <HAL_I2C_Master_Transmit+0x132>
 8007728:	b159      	cbz	r1, 8007742 <HAL_I2C_Master_Transmit+0x132>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800772a:	787a      	ldrb	r2, [r7, #1]
        hi2c->XferSize--;
 800772c:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007730:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8007732:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8007734:	3702      	adds	r7, #2
        hi2c->XferCount--;
 8007736:	3a01      	subs	r2, #1
 8007738:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 800773a:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 800773e:	6267      	str	r7, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8007740:	8562      	strh	r2, [r4, #42]	; 0x2a
 8007742:	1c6f      	adds	r7, r5, #1
 8007744:	d130      	bne.n	80077a8 <HAL_I2C_Master_Transmit+0x198>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007746:	695a      	ldr	r2, [r3, #20]
 8007748:	0750      	lsls	r0, r2, #29
 800774a:	d4cd      	bmi.n	80076e8 <HAL_I2C_Master_Transmit+0xd8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800774c:	695a      	ldr	r2, [r3, #20]
 800774e:	0551      	lsls	r1, r2, #21
 8007750:	d5f9      	bpl.n	8007746 <HAL_I2C_Master_Transmit+0x136>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007752:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007754:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8007758:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800775a:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800775c:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800775e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007762:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007766:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007768:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800776c:	f043 0304 	orr.w	r3, r3, #4
 8007770:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007772:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007774:	2b04      	cmp	r3, #4
 8007776:	d07e      	beq.n	8007876 <HAL_I2C_Master_Transmit+0x266>
      return HAL_ERROR;
 8007778:	2001      	movs	r0, #1
}
 800777a:	b002      	add	sp, #8
 800777c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	e78f      	b.n	80076aa <HAL_I2C_Master_Transmit+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800778a:	695a      	ldr	r2, [r3, #20]
 800778c:	0617      	lsls	r7, r2, #24
 800778e:	d4b8      	bmi.n	8007702 <HAL_I2C_Master_Transmit+0xf2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007790:	695a      	ldr	r2, [r3, #20]
 8007792:	0557      	lsls	r7, r2, #21
 8007794:	d4dd      	bmi.n	8007752 <HAL_I2C_Master_Transmit+0x142>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007796:	f7ff fca3 	bl	80070e0 <HAL_GetTick>
 800779a:	1b80      	subs	r0, r0, r6
 800779c:	4285      	cmp	r5, r0
 800779e:	d371      	bcc.n	8007884 <HAL_I2C_Master_Transmit+0x274>
 80077a0:	2d00      	cmp	r5, #0
 80077a2:	d06f      	beq.n	8007884 <HAL_I2C_Master_Transmit+0x274>
 80077a4:	6823      	ldr	r3, [r4, #0]
 80077a6:	e7a3      	b.n	80076f0 <HAL_I2C_Master_Transmit+0xe0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80077a8:	695a      	ldr	r2, [r3, #20]
 80077aa:	0752      	lsls	r2, r2, #29
 80077ac:	d49c      	bmi.n	80076e8 <HAL_I2C_Master_Transmit+0xd8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80077ae:	695a      	ldr	r2, [r3, #20]
 80077b0:	0552      	lsls	r2, r2, #21
 80077b2:	d4ce      	bmi.n	8007752 <HAL_I2C_Master_Transmit+0x142>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077b4:	f7ff fc94 	bl	80070e0 <HAL_GetTick>
 80077b8:	1b80      	subs	r0, r0, r6
 80077ba:	4285      	cmp	r5, r0
 80077bc:	d362      	bcc.n	8007884 <HAL_I2C_Master_Transmit+0x274>
 80077be:	2d00      	cmp	r5, #0
 80077c0:	d060      	beq.n	8007884 <HAL_I2C_Master_Transmit+0x274>
 80077c2:	6823      	ldr	r3, [r4, #0]
 80077c4:	e7bd      	b.n	8007742 <HAL_I2C_Master_Transmit+0x132>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077c6:	695a      	ldr	r2, [r3, #20]
 80077c8:	07d2      	lsls	r2, r2, #31
 80077ca:	f53f af74 	bmi.w	80076b6 <HAL_I2C_Master_Transmit+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077ce:	f7ff fc87 	bl	80070e0 <HAL_GetTick>
 80077d2:	1b80      	subs	r0, r0, r6
 80077d4:	4285      	cmp	r5, r0
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	d302      	bcc.n	80077e0 <HAL_I2C_Master_Transmit+0x1d0>
 80077da:	2d00      	cmp	r5, #0
 80077dc:	f47f af65 	bne.w	80076aa <HAL_I2C_Master_Transmit+0x9a>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80077e0:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80077e2:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80077e4:	6321      	str	r1, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80077e6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80077ea:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80077ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80077f0:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80077f4:	f042 0220 	orr.w	r2, r2, #32
 80077f8:	6422      	str	r2, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	05dd      	lsls	r5, r3, #23
 80077fe:	d5bb      	bpl.n	8007778 <HAL_I2C_Master_Transmit+0x168>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007800:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 8007804:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007806:	6423      	str	r3, [r4, #64]	; 0x40
 8007808:	e711      	b.n	800762e <HAL_I2C_Master_Transmit+0x1e>
        hi2c->State             = HAL_I2C_STATE_READY;
 800780a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800780c:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007810:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007814:	f884 a03e 	strb.w	sl, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007818:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800781a:	f884 a03c 	strb.w	sl, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800781e:	f043 0320 	orr.w	r3, r3, #32
 8007822:	6423      	str	r3, [r4, #64]	; 0x40
 8007824:	e702      	b.n	800762c <HAL_I2C_Master_Transmit+0x1c>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007826:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8007828:	2020      	movs	r0, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800782a:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800782e:	6819      	ldr	r1, [r3, #0]
 8007830:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8007834:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007836:	615d      	str	r5, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007838:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800783a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800783e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007842:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8007844:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007848:	f043 0304 	orr.w	r3, r3, #4
 800784c:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800784e:	2001      	movs	r0, #1
 8007850:	e6ed      	b.n	800762e <HAL_I2C_Master_Transmit+0x1e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007852:	11fa      	asrs	r2, r7, #7
 8007854:	f002 0206 	and.w	r2, r2, #6
 8007858:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 800785c:	611a      	str	r2, [r3, #16]
 800785e:	1c69      	adds	r1, r5, #1
 8007860:	d003      	beq.n	800786a <HAL_I2C_Master_Transmit+0x25a>
 8007862:	e039      	b.n	80078d8 <HAL_I2C_Master_Transmit+0x2c8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007864:	695a      	ldr	r2, [r3, #20]
 8007866:	0550      	lsls	r0, r2, #21
 8007868:	d4dd      	bmi.n	8007826 <HAL_I2C_Master_Transmit+0x216>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800786a:	695a      	ldr	r2, [r3, #20]
 800786c:	0712      	lsls	r2, r2, #28
 800786e:	d5f9      	bpl.n	8007864 <HAL_I2C_Master_Transmit+0x254>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007870:	b2ff      	uxtb	r7, r7
 8007872:	611f      	str	r7, [r3, #16]
 8007874:	e727      	b.n	80076c6 <HAL_I2C_Master_Transmit+0xb6>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007876:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR;
 8007878:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800787a:	6813      	ldr	r3, [r2, #0]
 800787c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007880:	6013      	str	r3, [r2, #0]
 8007882:	e6d4      	b.n	800762e <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007884:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8007886:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007888:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800788a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800788e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007892:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007894:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007898:	f043 0320 	orr.w	r3, r3, #32
 800789c:	6423      	str	r3, [r4, #64]	; 0x40
 800789e:	e768      	b.n	8007772 <HAL_I2C_Master_Transmit+0x162>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80078a0:	695a      	ldr	r2, [r3, #20]
 80078a2:	0792      	lsls	r2, r2, #30
 80078a4:	f53f af19 	bmi.w	80076da <HAL_I2C_Master_Transmit+0xca>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80078a8:	695a      	ldr	r2, [r3, #20]
 80078aa:	0552      	lsls	r2, r2, #21
 80078ac:	d4bb      	bmi.n	8007826 <HAL_I2C_Master_Transmit+0x216>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078ae:	f7ff fc17 	bl	80070e0 <HAL_GetTick>
 80078b2:	1b80      	subs	r0, r0, r6
 80078b4:	4285      	cmp	r5, r0
 80078b6:	d31d      	bcc.n	80078f4 <HAL_I2C_Master_Transmit+0x2e4>
 80078b8:	b1e5      	cbz	r5, 80078f4 <HAL_I2C_Master_Transmit+0x2e4>
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	e703      	b.n	80076c6 <HAL_I2C_Master_Transmit+0xb6>
    hi2c->State = HAL_I2C_STATE_READY;
 80078be:	2520      	movs	r5, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078c0:	6819      	ldr	r1, [r3, #0]
    return HAL_OK;
 80078c2:	4610      	mov	r0, r2
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078c4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80078c8:	6019      	str	r1, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80078ca:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80078ce:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078d2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    return HAL_OK;
 80078d6:	e6aa      	b.n	800762e <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80078d8:	695a      	ldr	r2, [r3, #20]
 80078da:	0711      	lsls	r1, r2, #28
 80078dc:	d4c8      	bmi.n	8007870 <HAL_I2C_Master_Transmit+0x260>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80078de:	695a      	ldr	r2, [r3, #20]
 80078e0:	0550      	lsls	r0, r2, #21
 80078e2:	d4a0      	bmi.n	8007826 <HAL_I2C_Master_Transmit+0x216>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078e4:	f7ff fbfc 	bl	80070e0 <HAL_GetTick>
 80078e8:	1b80      	subs	r0, r0, r6
 80078ea:	4285      	cmp	r5, r0
 80078ec:	d302      	bcc.n	80078f4 <HAL_I2C_Master_Transmit+0x2e4>
 80078ee:	b10d      	cbz	r5, 80078f4 <HAL_I2C_Master_Transmit+0x2e4>
 80078f0:	6823      	ldr	r3, [r4, #0]
 80078f2:	e7b4      	b.n	800785e <HAL_I2C_Master_Transmit+0x24e>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80078f4:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80078f6:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80078f8:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80078fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078fe:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007902:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007904:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007908:	f043 0320 	orr.w	r3, r3, #32
 800790c:	6423      	str	r3, [r4, #64]	; 0x40
 800790e:	e733      	b.n	8007778 <HAL_I2C_Master_Transmit+0x168>
 8007910:	ffff0000 	.word	0xffff0000

08007914 <HAL_I2C_Master_Receive>:
{
 8007914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007918:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800791a:	2000      	movs	r0, #0
{
 800791c:	b086      	sub	sp, #24
 800791e:	4699      	mov	r9, r3
 8007920:	460f      	mov	r7, r1
 8007922:	4690      	mov	r8, r2
  __IO uint32_t count = 0U;
 8007924:	9000      	str	r0, [sp, #0]
{
 8007926:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 8007928:	f7ff fbda 	bl	80070e0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800792c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8007930:	2b20      	cmp	r3, #32
 8007932:	d003      	beq.n	800793c <HAL_I2C_Master_Receive+0x28>
      return HAL_BUSY;
 8007934:	2002      	movs	r0, #2
}
 8007936:	b006      	add	sp, #24
 8007938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800793c:	4605      	mov	r5, r0
 800793e:	e005      	b.n	800794c <HAL_I2C_Master_Receive+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007940:	f7ff fbce 	bl	80070e0 <HAL_GetTick>
 8007944:	1b40      	subs	r0, r0, r5
 8007946:	2819      	cmp	r0, #25
 8007948:	f200 808a 	bhi.w	8007a60 <HAL_I2C_Master_Receive+0x14c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800794c:	6822      	ldr	r2, [r4, #0]
 800794e:	6993      	ldr	r3, [r2, #24]
 8007950:	43db      	mvns	r3, r3
 8007952:	f013 0a02 	ands.w	sl, r3, #2
 8007956:	d0f3      	beq.n	8007940 <HAL_I2C_Master_Receive+0x2c>
    __HAL_LOCK(hi2c);
 8007958:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800795c:	2b01      	cmp	r3, #1
 800795e:	d0e9      	beq.n	8007934 <HAL_I2C_Master_Receive+0x20>
 8007960:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007962:	6813      	ldr	r3, [r2, #0]
    __HAL_LOCK(hi2c);
 8007964:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007968:	07db      	lsls	r3, r3, #31
 800796a:	d402      	bmi.n	8007972 <HAL_I2C_Master_Receive+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800796c:	6813      	ldr	r3, [r2, #0]
 800796e:	430b      	orrs	r3, r1
 8007970:	6013      	str	r3, [r2, #0]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007972:	2010      	movs	r0, #16
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007974:	2100      	movs	r1, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007976:	f04f 0c22 	mov.w	ip, #34	; 0x22
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800797a:	6813      	ldr	r3, [r2, #0]
 800797c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007980:	6013      	str	r3, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007982:	4b9f      	ldr	r3, [pc, #636]	; (8007c00 <HAL_I2C_Master_Receive+0x2ec>)
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007984:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007988:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800798c:	6421      	str	r1, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800798e:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007992:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007994:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007996:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007998:	6813      	ldr	r3, [r2, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800799a:	2908      	cmp	r1, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800799c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    hi2c->pBuffPtr    = pData;
 80079a0:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80079a4:	8520      	strh	r0, [r4, #40]	; 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079a6:	6013      	str	r3, [r2, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80079a8:	d035      	beq.n	8007a16 <HAL_I2C_Master_Receive+0x102>
 80079aa:	2901      	cmp	r1, #1
 80079ac:	d033      	beq.n	8007a16 <HAL_I2C_Master_Receive+0x102>
 80079ae:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80079b2:	d030      	beq.n	8007a16 <HAL_I2C_Master_Receive+0x102>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80079b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80079b6:	2b11      	cmp	r3, #17
 80079b8:	d02d      	beq.n	8007a16 <HAL_I2C_Master_Receive+0x102>
 80079ba:	1c71      	adds	r1, r6, #1
 80079bc:	d130      	bne.n	8007a20 <HAL_I2C_Master_Receive+0x10c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079be:	6953      	ldr	r3, [r2, #20]
 80079c0:	07db      	lsls	r3, r3, #31
 80079c2:	d5fc      	bpl.n	80079be <HAL_I2C_Master_Receive+0xaa>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80079c4:	6923      	ldr	r3, [r4, #16]
 80079c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079ca:	f040 81a8 	bne.w	8007d1e <HAL_I2C_Master_Receive+0x40a>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80079ce:	f047 0701 	orr.w	r7, r7, #1
 80079d2:	b2ff      	uxtb	r7, r7
 80079d4:	6117      	str	r7, [r2, #16]
 80079d6:	1c71      	adds	r1, r6, #1
 80079d8:	d003      	beq.n	80079e2 <HAL_I2C_Master_Receive+0xce>
 80079da:	e1d1      	b.n	8007d80 <HAL_I2C_Master_Receive+0x46c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80079dc:	6953      	ldr	r3, [r2, #20]
 80079de:	055f      	lsls	r7, r3, #21
 80079e0:	d44c      	bmi.n	8007a7c <HAL_I2C_Master_Receive+0x168>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80079e2:	6953      	ldr	r3, [r2, #20]
 80079e4:	079b      	lsls	r3, r3, #30
 80079e6:	d5f9      	bpl.n	80079dc <HAL_I2C_Master_Receive+0xc8>
    if (hi2c->XferSize == 0U)
 80079e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d15e      	bne.n	8007aac <HAL_I2C_Master_Receive+0x198>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079ee:	9301      	str	r3, [sp, #4]
 80079f0:	6953      	ldr	r3, [r2, #20]
 80079f2:	9301      	str	r3, [sp, #4]
 80079f4:	6993      	ldr	r3, [r2, #24]
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079fa:	6813      	ldr	r3, [r2, #0]
 80079fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a00:	6013      	str	r3, [r2, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a02:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8007a04:	2220      	movs	r2, #32
    return HAL_OK;
 8007a06:	4618      	mov	r0, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8007a08:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8007a0c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a10:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8007a14:	e78f      	b.n	8007936 <HAL_I2C_Master_Receive+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a16:	6813      	ldr	r3, [r2, #0]
 8007a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a1c:	6013      	str	r3, [r2, #0]
 8007a1e:	e7cc      	b.n	80079ba <HAL_I2C_Master_Receive+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a20:	6953      	ldr	r3, [r2, #20]
 8007a22:	07d8      	lsls	r0, r3, #31
 8007a24:	d4ce      	bmi.n	80079c4 <HAL_I2C_Master_Receive+0xb0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a26:	f7ff fb5b 	bl	80070e0 <HAL_GetTick>
 8007a2a:	1b40      	subs	r0, r0, r5
 8007a2c:	4286      	cmp	r6, r0
 8007a2e:	6822      	ldr	r2, [r4, #0]
 8007a30:	d301      	bcc.n	8007a36 <HAL_I2C_Master_Receive+0x122>
 8007a32:	2e00      	cmp	r6, #0
 8007a34:	d1c1      	bne.n	80079ba <HAL_I2C_Master_Receive+0xa6>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007a36:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8007a38:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007a3a:	6321      	str	r1, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007a3c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007a40:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007a44:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007a46:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007a4a:	f043 0320 	orr.w	r3, r3, #32
 8007a4e:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a50:	6813      	ldr	r3, [r2, #0]
 8007a52:	05d8      	lsls	r0, r3, #23
 8007a54:	d526      	bpl.n	8007aa4 <HAL_I2C_Master_Receive+0x190>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a56:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 8007a5a:	2001      	movs	r0, #1
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a5c:	6423      	str	r3, [r4, #64]	; 0x40
 8007a5e:	e76a      	b.n	8007936 <HAL_I2C_Master_Receive+0x22>
        hi2c->State             = HAL_I2C_STATE_READY;
 8007a60:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007a62:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007a66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007a6a:	f884 a03e 	strb.w	sl, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007a6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007a70:	f884 a03c 	strb.w	sl, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007a74:	f043 0320 	orr.w	r3, r3, #32
 8007a78:	6423      	str	r3, [r4, #64]	; 0x40
 8007a7a:	e75b      	b.n	8007934 <HAL_I2C_Master_Receive+0x20>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a7c:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a7e:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a82:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a84:	6813      	ldr	r3, [r2, #0]
 8007a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a8a:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a8c:	6155      	str	r5, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a8e:	6321      	str	r1, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a90:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a94:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a98:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8007a9a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a9e:	f043 0304 	orr.w	r3, r3, #4
 8007aa2:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8007aa4:	2001      	movs	r0, #1
}
 8007aa6:	b006      	add	sp, #24
 8007aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (hi2c->XferSize == 1U)
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	f000 8091 	beq.w	8007bd4 <HAL_I2C_Master_Receive+0x2c0>
    else if (hi2c->XferSize == 2U)
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	f000 818f 	beq.w	8007dd6 <HAL_I2C_Master_Receive+0x4c2>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ab8:	2000      	movs	r0, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007aba:	6811      	ldr	r1, [r2, #0]
 8007abc:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8007ac0:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ac2:	9004      	str	r0, [sp, #16]
 8007ac4:	6951      	ldr	r1, [r2, #20]
 8007ac6:	9104      	str	r1, [sp, #16]
 8007ac8:	6992      	ldr	r2, [r2, #24]
 8007aca:	9204      	str	r2, [sp, #16]
 8007acc:	9a04      	ldr	r2, [sp, #16]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007ace:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8007c08 <HAL_I2C_Master_Receive+0x2f4>
 8007ad2:	4f4c      	ldr	r7, [pc, #304]	; (8007c04 <HAL_I2C_Master_Receive+0x2f0>)
    while (hi2c->XferSize > 0U)
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d094      	beq.n	8007a02 <HAL_I2C_Master_Receive+0xee>
      if (hi2c->XferSize <= 3U)
 8007ad8:	2b03      	cmp	r3, #3
 8007ada:	f200 808f 	bhi.w	8007bfc <HAL_I2C_Master_Receive+0x2e8>
        if (hi2c->XferSize == 1U)
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	f000 80ea 	beq.w	8007cb8 <HAL_I2C_Master_Receive+0x3a4>
        else if (hi2c->XferSize == 2U)
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d136      	bne.n	8007b56 <HAL_I2C_Master_Receive+0x242>
 8007ae8:	1c71      	adds	r1, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007aea:	6822      	ldr	r2, [r4, #0]
 8007aec:	f040 80d7 	bne.w	8007c9e <HAL_I2C_Master_Receive+0x38a>
 8007af0:	6953      	ldr	r3, [r2, #20]
 8007af2:	075b      	lsls	r3, r3, #29
 8007af4:	d5fc      	bpl.n	8007af0 <HAL_I2C_Master_Receive+0x1dc>
 8007af6:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007af8:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007afa:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b02:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8007b08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8007b0a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007b0c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007b0e:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8007b10:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8007b12:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8007b14:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8007b16:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007b18:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007b1a:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007b1c:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b1e:	6822      	ldr	r2, [r4, #0]
 8007b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b22:	6912      	ldr	r2, [r2, #16]
 8007b24:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8007b26:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8007b28:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8007b2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8007b2c:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 8007b2e:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8007b30:	3101      	adds	r1, #1
          hi2c->XferCount--;
 8007b32:	b292      	uxth	r2, r2
          hi2c->XferSize--;
 8007b34:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8007b36:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8007b38:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8007b3a:	8523      	strh	r3, [r4, #40]	; 0x28
 8007b3c:	e7ca      	b.n	8007ad4 <HAL_I2C_Master_Receive+0x1c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b3e:	6953      	ldr	r3, [r2, #20]
 8007b40:	0758      	lsls	r0, r3, #29
 8007b42:	d40e      	bmi.n	8007b62 <HAL_I2C_Master_Receive+0x24e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b44:	f7ff facc 	bl	80070e0 <HAL_GetTick>
 8007b48:	1b40      	subs	r0, r0, r5
 8007b4a:	4286      	cmp	r6, r0
 8007b4c:	f0c0 8096 	bcc.w	8007c7c <HAL_I2C_Master_Receive+0x368>
 8007b50:	2e00      	cmp	r6, #0
 8007b52:	f000 8093 	beq.w	8007c7c <HAL_I2C_Master_Receive+0x368>
 8007b56:	1c71      	adds	r1, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b58:	6822      	ldr	r2, [r4, #0]
 8007b5a:	d1f0      	bne.n	8007b3e <HAL_I2C_Master_Receive+0x22a>
 8007b5c:	6953      	ldr	r3, [r2, #20]
 8007b5e:	075b      	lsls	r3, r3, #29
 8007b60:	d5fc      	bpl.n	8007b5c <HAL_I2C_Master_Receive+0x248>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b62:	6813      	ldr	r3, [r2, #0]
 8007b64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b68:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007b6a:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b6c:	6822      	ldr	r2, [r4, #0]
 8007b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b70:	6912      	ldr	r2, [r2, #16]
 8007b72:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007b74:	f8d8 3000 	ldr.w	r3, [r8]
          hi2c->XferCount--;
 8007b78:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007b7a:	08db      	lsrs	r3, r3, #3
 8007b7c:	fba7 2303 	umull	r2, r3, r7, r3
          hi2c->XferSize--;
 8007b80:	8d20      	ldrh	r0, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8007b82:	6a62      	ldr	r2, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007b84:	0a1b      	lsrs	r3, r3, #8
          hi2c->XferCount--;
 8007b86:	3901      	subs	r1, #1
 8007b88:	b289      	uxth	r1, r1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007b8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
          hi2c->XferCount--;
 8007b8e:	8561      	strh	r1, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8007b90:	3801      	subs	r0, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007b92:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
          hi2c->pBuffPtr++;
 8007b96:	1c51      	adds	r1, r2, #1
 8007b98:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007b9a:	8520      	strh	r0, [r4, #40]	; 0x28
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	e004      	b.n	8007baa <HAL_I2C_Master_Receive+0x296>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	6959      	ldr	r1, [r3, #20]
 8007ba4:	0749      	lsls	r1, r1, #29
 8007ba6:	f100 8099 	bmi.w	8007cdc <HAL_I2C_Master_Receive+0x3c8>
            count--;
 8007baa:	9b00      	ldr	r3, [sp, #0]
 8007bac:	3b01      	subs	r3, #1
 8007bae:	9300      	str	r3, [sp, #0]
            if (count == 0U)
 8007bb0:	9b00      	ldr	r3, [sp, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1f4      	bne.n	8007ba0 <HAL_I2C_Master_Receive+0x28c>
              hi2c->State               = HAL_I2C_STATE_READY;
 8007bb6:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007bb8:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007bba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bbe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bc2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007bc4:	f042 0220 	orr.w	r2, r2, #32
 8007bc8:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007bca:	b662      	cpsie	i
              return HAL_ERROR;
 8007bcc:	2001      	movs	r0, #1
              __HAL_UNLOCK(hi2c);
 8007bce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8007bd2:	e6b0      	b.n	8007936 <HAL_I2C_Master_Receive+0x22>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bd4:	6813      	ldr	r3, [r2, #0]
 8007bd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bda:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007bdc:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bde:	2200      	movs	r2, #0
 8007be0:	6823      	ldr	r3, [r4, #0]
 8007be2:	9202      	str	r2, [sp, #8]
 8007be4:	695a      	ldr	r2, [r3, #20]
 8007be6:	9202      	str	r2, [sp, #8]
 8007be8:	699a      	ldr	r2, [r3, #24]
 8007bea:	9202      	str	r2, [sp, #8]
 8007bec:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bf4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007bf6:	b662      	cpsie	i
 8007bf8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007bfa:	e768      	b.n	8007ace <HAL_I2C_Master_Receive+0x1ba>
 8007bfc:	b976      	cbnz	r6, 8007c1c <HAL_I2C_Master_Receive+0x308>
 8007bfe:	e034      	b.n	8007c6a <HAL_I2C_Master_Receive+0x356>
 8007c00:	ffff0000 	.word	0xffff0000
 8007c04:	14f8b589 	.word	0x14f8b589
 8007c08:	20000088 	.word	0x20000088
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007c0c:	695a      	ldr	r2, [r3, #20]
 8007c0e:	06d1      	lsls	r1, r2, #27
 8007c10:	d475      	bmi.n	8007cfe <HAL_I2C_Master_Receive+0x3ea>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c12:	f7ff fa65 	bl	80070e0 <HAL_GetTick>
 8007c16:	1b40      	subs	r0, r0, r5
 8007c18:	4286      	cmp	r6, r0
 8007c1a:	d32f      	bcc.n	8007c7c <HAL_I2C_Master_Receive+0x368>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	695a      	ldr	r2, [r3, #20]
 8007c20:	0650      	lsls	r0, r2, #25
 8007c22:	d5f3      	bpl.n	8007c0c <HAL_I2C_Master_Receive+0x2f8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c24:	691a      	ldr	r2, [r3, #16]
 8007c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c28:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8007c2a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007c2c:	6821      	ldr	r1, [r4, #0]
        hi2c->XferCount--;
 8007c2e:	3a01      	subs	r2, #1
 8007c30:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 8007c32:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8007c34:	8562      	strh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007c36:	6948      	ldr	r0, [r1, #20]
        hi2c->pBuffPtr++;
 8007c38:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8007c3e:	f102 0c01 	add.w	ip, r2, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007c42:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 8007c44:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8007c46:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007c4a:	f57f af43 	bpl.w	8007ad4 <HAL_I2C_Master_Receive+0x1c0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c4e:	690b      	ldr	r3, [r1, #16]
 8007c50:	7053      	strb	r3, [r2, #1]
          hi2c->XferSize--;
 8007c52:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007c54:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8007c56:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007c58:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 8007c5a:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 8007c5c:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 8007c5e:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 8007c60:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8007c62:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007c64:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8007c66:	6261      	str	r1, [r4, #36]	; 0x24
 8007c68:	e734      	b.n	8007ad4 <HAL_I2C_Master_Receive+0x1c0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c6a:	6823      	ldr	r3, [r4, #0]
 8007c6c:	695a      	ldr	r2, [r3, #20]
 8007c6e:	0652      	lsls	r2, r2, #25
 8007c70:	d4d8      	bmi.n	8007c24 <HAL_I2C_Master_Receive+0x310>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007c72:	695a      	ldr	r2, [r3, #20]
 8007c74:	06d5      	lsls	r5, r2, #27
 8007c76:	d442      	bmi.n	8007cfe <HAL_I2C_Master_Receive+0x3ea>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c78:	f7ff fa32 	bl	80070e0 <HAL_GetTick>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007c7c:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8007c7e:	2320      	movs	r3, #32
          return HAL_ERROR;
 8007c80:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007c82:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007c84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007c88:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007c8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007c8e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007c92:	f043 0320 	orr.w	r3, r3, #32
 8007c96:	6423      	str	r3, [r4, #64]	; 0x40
}
 8007c98:	b006      	add	sp, #24
 8007c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c9e:	6953      	ldr	r3, [r2, #20]
 8007ca0:	0758      	lsls	r0, r3, #29
 8007ca2:	f53f af28 	bmi.w	8007af6 <HAL_I2C_Master_Receive+0x1e2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ca6:	f7ff fa1b 	bl	80070e0 <HAL_GetTick>
 8007caa:	1b40      	subs	r0, r0, r5
 8007cac:	4286      	cmp	r6, r0
 8007cae:	d3e5      	bcc.n	8007c7c <HAL_I2C_Master_Receive+0x368>
 8007cb0:	2e00      	cmp	r6, #0
 8007cb2:	f47f af19 	bne.w	8007ae8 <HAL_I2C_Master_Receive+0x1d4>
 8007cb6:	e7e1      	b.n	8007c7c <HAL_I2C_Master_Receive+0x368>
 8007cb8:	b946      	cbnz	r6, 8007ccc <HAL_I2C_Master_Receive+0x3b8>
 8007cba:	e086      	b.n	8007dca <HAL_I2C_Master_Receive+0x4b6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007cbc:	695a      	ldr	r2, [r3, #20]
 8007cbe:	06d2      	lsls	r2, r2, #27
 8007cc0:	d41d      	bmi.n	8007cfe <HAL_I2C_Master_Receive+0x3ea>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cc2:	f7ff fa0d 	bl	80070e0 <HAL_GetTick>
 8007cc6:	1b40      	subs	r0, r0, r5
 8007cc8:	4286      	cmp	r6, r0
 8007cca:	d3d7      	bcc.n	8007c7c <HAL_I2C_Master_Receive+0x368>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ccc:	6823      	ldr	r3, [r4, #0]
 8007cce:	695a      	ldr	r2, [r3, #20]
 8007cd0:	0651      	lsls	r1, r2, #25
 8007cd2:	d5f3      	bpl.n	8007cbc <HAL_I2C_Master_Receive+0x3a8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cd4:	691a      	ldr	r2, [r3, #16]
 8007cd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cd8:	701a      	strb	r2, [r3, #0]
 8007cda:	e7ba      	b.n	8007c52 <HAL_I2C_Master_Receive+0x33e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cdc:	6819      	ldr	r1, [r3, #0]
 8007cde:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8007ce2:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	7053      	strb	r3, [r2, #1]
          hi2c->XferCount--;
 8007ce8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8007cea:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007cec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8007cf2:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8007cf4:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8007cf6:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8007cf8:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007cfa:	8522      	strh	r2, [r4, #40]	; 0x28
 8007cfc:	e70e      	b.n	8007b1c <HAL_I2C_Master_Receive+0x208>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007cfe:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d00:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d04:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d06:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d08:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d0a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d0e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007d12:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8007d14:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007d18:	6423      	str	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8007d1a:	2001      	movs	r0, #1
 8007d1c:	e60b      	b.n	8007936 <HAL_I2C_Master_Receive+0x22>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007d1e:	ea4f 18e7 	mov.w	r8, r7, asr #7
 8007d22:	f008 0806 	and.w	r8, r8, #6
 8007d26:	f048 03f0 	orr.w	r3, r8, #240	; 0xf0
 8007d2a:	6113      	str	r3, [r2, #16]
 8007d2c:	1c73      	adds	r3, r6, #1
 8007d2e:	d004      	beq.n	8007d3a <HAL_I2C_Master_Receive+0x426>
 8007d30:	e039      	b.n	8007da6 <HAL_I2C_Master_Receive+0x492>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d32:	6953      	ldr	r3, [r2, #20]
 8007d34:	0559      	lsls	r1, r3, #21
 8007d36:	f53f aea1 	bmi.w	8007a7c <HAL_I2C_Master_Receive+0x168>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d3a:	6953      	ldr	r3, [r2, #20]
 8007d3c:	0718      	lsls	r0, r3, #28
 8007d3e:	d5f8      	bpl.n	8007d32 <HAL_I2C_Master_Receive+0x41e>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007d40:	b2ff      	uxtb	r7, r7
 8007d42:	6117      	str	r7, [r2, #16]
 8007d44:	1c70      	adds	r0, r6, #1
 8007d46:	d004      	beq.n	8007d52 <HAL_I2C_Master_Receive+0x43e>
 8007d48:	e059      	b.n	8007dfe <HAL_I2C_Master_Receive+0x4ea>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d4a:	6953      	ldr	r3, [r2, #20]
 8007d4c:	055b      	lsls	r3, r3, #21
 8007d4e:	f53f ae95 	bmi.w	8007a7c <HAL_I2C_Master_Receive+0x168>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d52:	6953      	ldr	r3, [r2, #20]
 8007d54:	0799      	lsls	r1, r3, #30
 8007d56:	d5f8      	bpl.n	8007d4a <HAL_I2C_Master_Receive+0x436>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d58:	2300      	movs	r3, #0
 8007d5a:	9305      	str	r3, [sp, #20]
 8007d5c:	6953      	ldr	r3, [r2, #20]
 8007d5e:	9305      	str	r3, [sp, #20]
 8007d60:	6993      	ldr	r3, [r2, #24]
 8007d62:	9305      	str	r3, [sp, #20]
 8007d64:	9b05      	ldr	r3, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d66:	6813      	ldr	r3, [r2, #0]
 8007d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d6c:	6013      	str	r3, [r2, #0]
 8007d6e:	1c71      	adds	r1, r6, #1
 8007d70:	d157      	bne.n	8007e22 <HAL_I2C_Master_Receive+0x50e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d72:	6953      	ldr	r3, [r2, #20]
 8007d74:	07db      	lsls	r3, r3, #31
 8007d76:	d5fc      	bpl.n	8007d72 <HAL_I2C_Master_Receive+0x45e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007d78:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8007d7c:	6113      	str	r3, [r2, #16]
 8007d7e:	e62a      	b.n	80079d6 <HAL_I2C_Master_Receive+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d80:	6953      	ldr	r3, [r2, #20]
 8007d82:	0798      	lsls	r0, r3, #30
 8007d84:	f53f ae30 	bmi.w	80079e8 <HAL_I2C_Master_Receive+0xd4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d88:	6953      	ldr	r3, [r2, #20]
 8007d8a:	0558      	lsls	r0, r3, #21
 8007d8c:	f53f ae76 	bmi.w	8007a7c <HAL_I2C_Master_Receive+0x168>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d90:	f7ff f9a6 	bl	80070e0 <HAL_GetTick>
 8007d94:	1b40      	subs	r0, r0, r5
 8007d96:	4286      	cmp	r6, r0
 8007d98:	f4ff af70 	bcc.w	8007c7c <HAL_I2C_Master_Receive+0x368>
 8007d9c:	2e00      	cmp	r6, #0
 8007d9e:	f43f af6d 	beq.w	8007c7c <HAL_I2C_Master_Receive+0x368>
 8007da2:	6822      	ldr	r2, [r4, #0]
 8007da4:	e617      	b.n	80079d6 <HAL_I2C_Master_Receive+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007da6:	6953      	ldr	r3, [r2, #20]
 8007da8:	071b      	lsls	r3, r3, #28
 8007daa:	d4c9      	bmi.n	8007d40 <HAL_I2C_Master_Receive+0x42c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007dac:	6953      	ldr	r3, [r2, #20]
 8007dae:	0559      	lsls	r1, r3, #21
 8007db0:	f53f ae64 	bmi.w	8007a7c <HAL_I2C_Master_Receive+0x168>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007db4:	f7ff f994 	bl	80070e0 <HAL_GetTick>
 8007db8:	1b40      	subs	r0, r0, r5
 8007dba:	4286      	cmp	r6, r0
 8007dbc:	f4ff af5e 	bcc.w	8007c7c <HAL_I2C_Master_Receive+0x368>
 8007dc0:	2e00      	cmp	r6, #0
 8007dc2:	f43f af5b 	beq.w	8007c7c <HAL_I2C_Master_Receive+0x368>
 8007dc6:	6822      	ldr	r2, [r4, #0]
 8007dc8:	e7b0      	b.n	8007d2c <HAL_I2C_Master_Receive+0x418>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007dca:	6823      	ldr	r3, [r4, #0]
 8007dcc:	695a      	ldr	r2, [r3, #20]
 8007dce:	0650      	lsls	r0, r2, #25
 8007dd0:	f57f af4f 	bpl.w	8007c72 <HAL_I2C_Master_Receive+0x35e>
 8007dd4:	e77e      	b.n	8007cd4 <HAL_I2C_Master_Receive+0x3c0>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007dd6:	6813      	ldr	r3, [r2, #0]
 8007dd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007ddc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007dde:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007de0:	2200      	movs	r2, #0
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	9203      	str	r2, [sp, #12]
 8007de6:	695a      	ldr	r2, [r3, #20]
 8007de8:	9203      	str	r2, [sp, #12]
 8007dea:	699a      	ldr	r2, [r3, #24]
 8007dec:	9203      	str	r2, [sp, #12]
 8007dee:	9a03      	ldr	r2, [sp, #12]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007df6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007df8:	b662      	cpsie	i
 8007dfa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007dfc:	e667      	b.n	8007ace <HAL_I2C_Master_Receive+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007dfe:	6953      	ldr	r3, [r2, #20]
 8007e00:	079f      	lsls	r7, r3, #30
 8007e02:	d4a9      	bmi.n	8007d58 <HAL_I2C_Master_Receive+0x444>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e04:	6953      	ldr	r3, [r2, #20]
 8007e06:	055f      	lsls	r7, r3, #21
 8007e08:	f53f ae38 	bmi.w	8007a7c <HAL_I2C_Master_Receive+0x168>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e0c:	f7ff f968 	bl	80070e0 <HAL_GetTick>
 8007e10:	1b40      	subs	r0, r0, r5
 8007e12:	4286      	cmp	r6, r0
 8007e14:	f4ff af32 	bcc.w	8007c7c <HAL_I2C_Master_Receive+0x368>
 8007e18:	2e00      	cmp	r6, #0
 8007e1a:	f43f af2f 	beq.w	8007c7c <HAL_I2C_Master_Receive+0x368>
 8007e1e:	6822      	ldr	r2, [r4, #0]
 8007e20:	e790      	b.n	8007d44 <HAL_I2C_Master_Receive+0x430>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e22:	6953      	ldr	r3, [r2, #20]
 8007e24:	07df      	lsls	r7, r3, #31
 8007e26:	d4a7      	bmi.n	8007d78 <HAL_I2C_Master_Receive+0x464>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e28:	f7ff f95a 	bl	80070e0 <HAL_GetTick>
 8007e2c:	1b40      	subs	r0, r0, r5
 8007e2e:	4286      	cmp	r6, r0
 8007e30:	d315      	bcc.n	8007e5e <HAL_I2C_Master_Receive+0x54a>
 8007e32:	6822      	ldr	r2, [r4, #0]
 8007e34:	4611      	mov	r1, r2
 8007e36:	2e00      	cmp	r6, #0
 8007e38:	d199      	bne.n	8007d6e <HAL_I2C_Master_Receive+0x45a>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007e3a:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8007e3c:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007e3e:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007e40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007e44:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007e48:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007e4a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007e4e:	f043 0320 	orr.w	r3, r3, #32
 8007e52:	6423      	str	r3, [r4, #64]	; 0x40
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e54:	680b      	ldr	r3, [r1, #0]
 8007e56:	05d8      	lsls	r0, r3, #23
 8007e58:	f53f adfd 	bmi.w	8007a56 <HAL_I2C_Master_Receive+0x142>
 8007e5c:	e622      	b.n	8007aa4 <HAL_I2C_Master_Receive+0x190>
 8007e5e:	6821      	ldr	r1, [r4, #0]
 8007e60:	e7eb      	b.n	8007e3a <HAL_I2C_Master_Receive+0x526>
 8007e62:	bf00      	nop

08007e64 <HAL_I2C_MasterTxCpltCallback>:
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop

08007e68 <HAL_I2C_MasterRxCpltCallback>:
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop

08007e6c <HAL_I2C_SlaveTxCpltCallback>:
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop

08007e70 <HAL_I2C_SlaveRxCpltCallback>:
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop

08007e74 <HAL_I2C_AddrCallback>:
}
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop

08007e78 <HAL_I2C_ListenCpltCallback>:
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop

08007e7c <HAL_I2C_MemTxCpltCallback>:
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop

08007e80 <I2C_MemoryTransmit_TXE_BTF>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e80:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 8007e84:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8007e86:	b538      	push	{r3, r4, r5, lr}
 8007e88:	4603      	mov	r3, r0
  if (hi2c->EventCount == 0U)
 8007e8a:	b959      	cbnz	r1, 8007ea4 <I2C_MemoryTransmit_TXE_BTF+0x24>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007e8c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8007e8e:	6801      	ldr	r1, [r0, #0]
 8007e90:	2a01      	cmp	r2, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007e92:	6c82      	ldr	r2, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007e94:	d02a      	beq.n	8007eec <I2C_MemoryTransmit_TXE_BTF+0x6c>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007e96:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8007e9a:	610a      	str	r2, [r1, #16]
      hi2c->EventCount++;
 8007e9c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007e9e:	3201      	adds	r2, #1
 8007ea0:	6502      	str	r2, [r0, #80]	; 0x50
}
 8007ea2:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->EventCount == 1U)
 8007ea4:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8007ea6:	2901      	cmp	r1, #1
 8007ea8:	d026      	beq.n	8007ef8 <I2C_MemoryTransmit_TXE_BTF+0x78>
  else if (hi2c->EventCount == 2U)
 8007eaa:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8007eac:	2902      	cmp	r1, #2
 8007eae:	d1f8      	bne.n	8007ea2 <I2C_MemoryTransmit_TXE_BTF+0x22>
 8007eb0:	b2d2      	uxtb	r2, r2
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007eb2:	2a22      	cmp	r2, #34	; 0x22
 8007eb4:	d02c      	beq.n	8007f10 <I2C_MemoryTransmit_TXE_BTF+0x90>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007eb6:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8007eb8:	b289      	uxth	r1, r1
 8007eba:	bb29      	cbnz	r1, 8007f08 <I2C_MemoryTransmit_TXE_BTF+0x88>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007ebc:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8007ebe:	b289      	uxth	r1, r1
 8007ec0:	2900      	cmp	r1, #0
 8007ec2:	d1ee      	bne.n	8007ea2 <I2C_MemoryTransmit_TXE_BTF+0x22>
 8007ec4:	2a21      	cmp	r2, #33	; 0x21
 8007ec6:	d1ec      	bne.n	8007ea2 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->State = HAL_I2C_STATE_READY;
 8007ec8:	2520      	movs	r5, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007eca:	6802      	ldr	r2, [r0, #0]
 8007ecc:	6854      	ldr	r4, [r2, #4]
 8007ece:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 8007ed2:	6054      	str	r4, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ed4:	6814      	ldr	r4, [r2, #0]
 8007ed6:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8007eda:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007edc:	6301      	str	r1, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007ede:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ee2:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007ee6:	f7ff ffc9 	bl	8007e7c <HAL_I2C_MemTxCpltCallback>
}
 8007eea:	bd38      	pop	{r3, r4, r5, pc}
 8007eec:	b2d2      	uxtb	r2, r2
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007eee:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 8007ef0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007ef2:	3202      	adds	r2, #2
 8007ef4:	6502      	str	r2, [r0, #80]	; 0x50
}
 8007ef6:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007ef8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8007efa:	6801      	ldr	r1, [r0, #0]
 8007efc:	b2d2      	uxtb	r2, r2
 8007efe:	610a      	str	r2, [r1, #16]
    hi2c->EventCount++;
 8007f00:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007f02:	3201      	adds	r2, #1
 8007f04:	6502      	str	r2, [r0, #80]	; 0x50
}
 8007f06:	bd38      	pop	{r3, r4, r5, pc}
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007f08:	2a21      	cmp	r2, #33	; 0x21
 8007f0a:	d007      	beq.n	8007f1c <I2C_MemoryTransmit_TXE_BTF+0x9c>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
}
 8007f0e:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007f10:	6802      	ldr	r2, [r0, #0]
 8007f12:	6813      	ldr	r3, [r2, #0]
 8007f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f18:	6013      	str	r3, [r2, #0]
}
 8007f1a:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f1c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8007f1e:	6802      	ldr	r2, [r0, #0]
 8007f20:	f811 0b01 	ldrb.w	r0, [r1], #1
 8007f24:	6110      	str	r0, [r2, #16]
      hi2c->XferCount--;
 8007f26:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8007f28:	6259      	str	r1, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007f2a:	3a01      	subs	r2, #1
 8007f2c:	b292      	uxth	r2, r2
 8007f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007f30:	bd38      	pop	{r3, r4, r5, pc}
 8007f32:	bf00      	nop

08007f34 <HAL_I2C_MemRxCpltCallback>:
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop

08007f38 <HAL_I2C_ErrorCallback>:
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop

08007f3c <HAL_I2C_AbortCpltCallback>:
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop

08007f40 <I2C_DMAAbort>:
{
 8007f40:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t count = 0U;
 8007f42:	2400      	movs	r4, #0
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007f44:	4b3a      	ldr	r3, [pc, #232]	; (8008030 <I2C_DMAAbort+0xf0>)
 8007f46:	4d3b      	ldr	r5, [pc, #236]	; (8008034 <I2C_DMAAbort+0xf4>)
 8007f48:	681b      	ldr	r3, [r3, #0]
{
 8007f4a:	b082      	sub	sp, #8
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007f4c:	08db      	lsrs	r3, r3, #3
 8007f4e:	fba5 2303 	umull	r2, r3, r5, r3
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007f52:	6a41      	ldr	r1, [r0, #36]	; 0x24
  __IO uint32_t count = 0U;
 8007f54:	9401      	str	r4, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007f56:	0a1b      	lsrs	r3, r3, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f58:	f891 003d 	ldrb.w	r0, [r1, #61]	; 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007f5c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007f60:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007f64:	680a      	ldr	r2, [r1, #0]
 8007f66:	9301      	str	r3, [sp, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f68:	b2c0      	uxtb	r0, r0
 8007f6a:	e005      	b.n	8007f78 <I2C_DMAAbort+0x38>
    count--;
 8007f6c:	9b01      	ldr	r3, [sp, #4]
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007f72:	6813      	ldr	r3, [r2, #0]
 8007f74:	059b      	lsls	r3, r3, #22
 8007f76:	d506      	bpl.n	8007f86 <I2C_DMAAbort+0x46>
    if (count == 0U)
 8007f78:	9b01      	ldr	r3, [sp, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1f6      	bne.n	8007f6c <I2C_DMAAbort+0x2c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f7e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f80:	f043 0320 	orr.w	r3, r3, #32
 8007f84:	640b      	str	r3, [r1, #64]	; 0x40
 8007f86:	e9d1 430d 	ldrd	r4, r3, [r1, #52]	; 0x34
  if (hi2c->hdmatx != NULL)
 8007f8a:	b34c      	cbz	r4, 8007fe0 <I2C_DMAAbort+0xa0>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007f8c:	2500      	movs	r5, #0
 8007f8e:	62a5      	str	r5, [r4, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8007f90:	b1fb      	cbz	r3, 8007fd2 <I2C_DMAAbort+0x92>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f92:	6816      	ldr	r6, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007f94:	629d      	str	r5, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f96:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
 8007f9a:	6016      	str	r6, [r2, #0]
  hi2c->XferCount = 0U;
 8007f9c:	854d      	strh	r5, [r1, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007f9e:	6365      	str	r5, [r4, #52]	; 0x34
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007fa0:	2400      	movs	r4, #0
 8007fa2:	635c      	str	r4, [r3, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 8007fa4:	6813      	ldr	r3, [r2, #0]
 8007fa6:	f023 0301 	bic.w	r3, r3, #1
 8007faa:	6013      	str	r3, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007fac:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
 8007fb0:	2b60      	cmp	r3, #96	; 0x60
 8007fb2:	d02a      	beq.n	800800a <I2C_DMAAbort+0xca>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fb4:	f000 0028 	and.w	r0, r0, #40	; 0x28
 8007fb8:	2828      	cmp	r0, #40	; 0x28
 8007fba:	d019      	beq.n	8007ff0 <I2C_DMAAbort+0xb0>
      hi2c->State = HAL_I2C_STATE_READY;
 8007fbc:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fbe:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8007fc0:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fc4:	f881 303e 	strb.w	r3, [r1, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007fc8:	4608      	mov	r0, r1
 8007fca:	f7ff ffb5 	bl	8007f38 <HAL_I2C_ErrorCallback>
}
 8007fce:	b002      	add	sp, #8
 8007fd0:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fd2:	6815      	ldr	r5, [r2, #0]
 8007fd4:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8007fd8:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8007fda:	854b      	strh	r3, [r1, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007fdc:	6363      	str	r3, [r4, #52]	; 0x34
 8007fde:	e7e1      	b.n	8007fa4 <I2C_DMAAbort+0x64>
  if (hi2c->hdmarx != NULL)
 8007fe0:	b1fb      	cbz	r3, 8008022 <I2C_DMAAbort+0xe2>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fe2:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007fe4:	629c      	str	r4, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fe6:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8007fea:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8007fec:	854c      	strh	r4, [r1, #42]	; 0x2a
 8007fee:	e7d7      	b.n	8007fa0 <I2C_DMAAbort+0x60>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007ff0:	2400      	movs	r4, #0
      __HAL_I2C_ENABLE(hi2c);
 8007ff2:	6813      	ldr	r3, [r2, #0]
 8007ff4:	f043 0301 	orr.w	r3, r3, #1
 8007ff8:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ffa:	6813      	ldr	r3, [r2, #0]
 8007ffc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008000:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008002:	630c      	str	r4, [r1, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008004:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
 8008008:	e7de      	b.n	8007fc8 <I2C_DMAAbort+0x88>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800800a:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 800800c:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 800800e:	4608      	mov	r0, r1
    hi2c->State         = HAL_I2C_STATE_READY;
 8008010:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008014:	f881 303e 	strb.w	r3, [r1, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008018:	640b      	str	r3, [r1, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800801a:	f7ff ff8f 	bl	8007f3c <HAL_I2C_AbortCpltCallback>
}
 800801e:	b002      	add	sp, #8
 8008020:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008022:	6814      	ldr	r4, [r2, #0]
 8008024:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8008028:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 800802a:	854b      	strh	r3, [r1, #42]	; 0x2a
 800802c:	e7ba      	b.n	8007fa4 <I2C_DMAAbort+0x64>
 800802e:	bf00      	nop
 8008030:	20000088 	.word	0x20000088
 8008034:	14f8b589 	.word	0x14f8b589

08008038 <HAL_I2C_EV_IRQHandler>:
{
 8008038:	b570      	push	{r4, r5, r6, lr}
 800803a:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800803c:	6803      	ldr	r3, [r0, #0]
{
 800803e:	b08e      	sub	sp, #56	; 0x38
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008040:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008042:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008044:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008048:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800804c:	b2d2      	uxtb	r2, r2
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800804e:	2a10      	cmp	r2, #16
 8008050:	d020      	beq.n	8008094 <HAL_I2C_EV_IRQHandler+0x5c>
 8008052:	2a40      	cmp	r2, #64	; 0x40
 8008054:	d01e      	beq.n	8008094 <HAL_I2C_EV_IRQHandler+0x5c>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008056:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008058:	b2c9      	uxtb	r1, r1
 800805a:	2a00      	cmp	r2, #0
 800805c:	f000 80bb 	beq.w	80081d6 <HAL_I2C_EV_IRQHandler+0x19e>
  uint32_t sr2itflags               = 0U;
 8008060:	2600      	movs	r6, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008062:	695a      	ldr	r2, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008064:	f3c2 0540 	ubfx	r5, r2, #1, #1
 8008068:	2d00      	cmp	r5, #0
 800806a:	d078      	beq.n	800815e <HAL_I2C_EV_IRQHandler+0x126>
 800806c:	0585      	lsls	r5, r0, #22
 800806e:	d57b      	bpl.n	8008168 <HAL_I2C_EV_IRQHandler+0x130>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008070:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008072:	b102      	cbz	r2, 8008076 <HAL_I2C_EV_IRQHandler+0x3e>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008074:	699e      	ldr	r6, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008076:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800807a:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800807e:	2a28      	cmp	r2, #40	; 0x28
 8008080:	f000 8216 	beq.w	80084b0 <HAL_I2C_EV_IRQHandler+0x478>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008084:	f06f 0102 	mvn.w	r1, #2
    __HAL_UNLOCK(hi2c);
 8008088:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800808a:	6159      	str	r1, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800808c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8008090:	b00e      	add	sp, #56	; 0x38
 8008092:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008094:	699e      	ldr	r6, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008096:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008098:	f011 0f01 	tst.w	r1, #1
 800809c:	d139      	bne.n	8008112 <HAL_I2C_EV_IRQHandler+0xda>
 800809e:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 80080a2:	d0f5      	beq.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
 80080a4:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 80080a8:	d0f2      	beq.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80080aa:	070d      	lsls	r5, r1, #28
 80080ac:	f140 8099 	bpl.w	80081e2 <HAL_I2C_EV_IRQHandler+0x1aa>
 80080b0:	0585      	lsls	r5, r0, #22
 80080b2:	f100 81ee 	bmi.w	8008492 <HAL_I2C_EV_IRQHandler+0x45a>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80080b6:	0776      	lsls	r6, r6, #29
 80080b8:	f140 8100 	bpl.w	80082bc <HAL_I2C_EV_IRQHandler+0x284>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80080bc:	685d      	ldr	r5, [r3, #4]
 80080be:	052d      	lsls	r5, r5, #20
 80080c0:	d4e6      	bmi.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
 80080c2:	f3c1 0580 	ubfx	r5, r1, #2, #1
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80080c6:	0609      	lsls	r1, r1, #24
 80080c8:	f140 81a2 	bpl.w	8008410 <HAL_I2C_EV_IRQHandler+0x3d8>
 80080cc:	0546      	lsls	r6, r0, #21
 80080ce:	f140 819f 	bpl.w	8008410 <HAL_I2C_EV_IRQHandler+0x3d8>
 80080d2:	2d00      	cmp	r5, #0
 80080d4:	f040 819f 	bne.w	8008416 <HAL_I2C_EV_IRQHandler+0x3de>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80080d8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80080dc:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80080de:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80080e2:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80080e4:	b2c9      	uxtb	r1, r1
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80080e6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80080e8:	2800      	cmp	r0, #0
 80080ea:	f040 837d 	bne.w	80087e8 <HAL_I2C_EV_IRQHandler+0x7b0>
 80080ee:	2a21      	cmp	r2, #33	; 0x21
 80080f0:	f000 842d 	beq.w	800894e <HAL_I2C_EV_IRQHandler+0x916>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80080f4:	2940      	cmp	r1, #64	; 0x40
 80080f6:	d1cb      	bne.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80080f8:	2a22      	cmp	r2, #34	; 0x22
 80080fa:	d1c9      	bne.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
    if (hi2c->XferCount == 0U)
 80080fc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80080fe:	b292      	uxth	r2, r2
 8008100:	2a00      	cmp	r2, #0
 8008102:	f000 8445 	beq.w	8008990 <HAL_I2C_EV_IRQHandler+0x958>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008106:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800810a:	2a40      	cmp	r2, #64	; 0x40
 800810c:	f040 80b6 	bne.w	800827c <HAL_I2C_EV_IRQHandler+0x244>
 8008110:	e187      	b.n	8008422 <HAL_I2C_EV_IRQHandler+0x3ea>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008112:	0585      	lsls	r5, r0, #22
 8008114:	d562      	bpl.n	80081dc <HAL_I2C_EV_IRQHandler+0x1a4>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008116:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008118:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 800811c:	f000 81e3 	beq.w	80084e6 <HAL_I2C_EV_IRQHandler+0x4ae>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008120:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008122:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008126:	bf04      	itt	eq
 8008128:	2208      	moveq	r2, #8
 800812a:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800812c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8008130:	2a40      	cmp	r2, #64	; 0x40
 8008132:	f000 81d1 	beq.w	80084d8 <HAL_I2C_EV_IRQHandler+0x4a0>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008136:	6922      	ldr	r2, [r4, #16]
 8008138:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800813c:	f000 8191 	beq.w	8008462 <HAL_I2C_EV_IRQHandler+0x42a>
      if (hi2c->EventCount == 0U)
 8008140:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008142:	2a00      	cmp	r2, #0
 8008144:	f000 81d2 	beq.w	80084ec <HAL_I2C_EV_IRQHandler+0x4b4>
      else if (hi2c->EventCount == 1U)
 8008148:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800814a:	2a01      	cmp	r2, #1
 800814c:	d1a0      	bne.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800814e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008150:	11d2      	asrs	r2, r2, #7
 8008152:	f002 0206 	and.w	r2, r2, #6
 8008156:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 800815a:	611a      	str	r2, [r3, #16]
 800815c:	e798      	b.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800815e:	06d6      	lsls	r6, r2, #27
 8008160:	d502      	bpl.n	8008168 <HAL_I2C_EV_IRQHandler+0x130>
 8008162:	0586      	lsls	r6, r0, #22
 8008164:	f100 80d8 	bmi.w	8008318 <HAL_I2C_EV_IRQHandler+0x2e0>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008168:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 800816c:	2921      	cmp	r1, #33	; 0x21
 800816e:	f3c2 0580 	ubfx	r5, r2, #2, #1
 8008172:	d04e      	beq.n	8008212 <HAL_I2C_EV_IRQHandler+0x1da>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008174:	0651      	lsls	r1, r2, #25
 8008176:	f140 808b 	bpl.w	8008290 <HAL_I2C_EV_IRQHandler+0x258>
 800817a:	0542      	lsls	r2, r0, #21
 800817c:	f140 8088 	bpl.w	8008290 <HAL_I2C_EV_IRQHandler+0x258>
 8008180:	2d00      	cmp	r5, #0
 8008182:	f040 8088 	bne.w	8008296 <HAL_I2C_EV_IRQHandler+0x25e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008186:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 800818a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800818c:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 800818e:	b292      	uxth	r2, r2
 8008190:	2a00      	cmp	r2, #0
 8008192:	f43f af7d 	beq.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008196:	691a      	ldr	r2, [r3, #16]
 8008198:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800819a:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 800819c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 800819e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80081a0:	3b01      	subs	r3, #1
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80081a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80081a8:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80081aa:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 80081ac:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f47f af6e 	bne.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
 80081b4:	292a      	cmp	r1, #42	; 0x2a
 80081b6:	f47f af6b 	bne.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80081ba:	2522      	movs	r5, #34	; 0x22
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80081bc:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80081be:	6822      	ldr	r2, [r4, #0]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80081c0:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80081c2:	6853      	ldr	r3, [r2, #4]
 80081c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081c8:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80081ca:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80081cc:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80081d0:	f7ff fe4e 	bl	8007e70 <HAL_I2C_SlaveRxCpltCallback>
 80081d4:	e75c      	b.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80081d6:	699e      	ldr	r6, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80081d8:	695a      	ldr	r2, [r3, #20]
 80081da:	e743      	b.n	8008064 <HAL_I2C_EV_IRQHandler+0x2c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80081dc:	070d      	lsls	r5, r1, #28
 80081de:	f53f af6a 	bmi.w	80080b6 <HAL_I2C_EV_IRQHandler+0x7e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80081e2:	078d      	lsls	r5, r1, #30
 80081e4:	f57f af67 	bpl.w	80080b6 <HAL_I2C_EV_IRQHandler+0x7e>
 80081e8:	0585      	lsls	r5, r0, #22
 80081ea:	f57f af64 	bpl.w	80080b6 <HAL_I2C_EV_IRQHandler+0x7e>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80081ee:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80081f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 80081f4:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80081f6:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80081fa:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80081fc:	2922      	cmp	r1, #34	; 0x22
 80081fe:	f000 820d 	beq.w	800861c <HAL_I2C_EV_IRQHandler+0x5e4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008202:	2200      	movs	r2, #0
 8008204:	920b      	str	r2, [sp, #44]	; 0x2c
 8008206:	695a      	ldr	r2, [r3, #20]
 8008208:	920b      	str	r2, [sp, #44]	; 0x2c
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	930b      	str	r3, [sp, #44]	; 0x2c
 800820e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008210:	e73e      	b.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008212:	0612      	lsls	r2, r2, #24
 8008214:	d527      	bpl.n	8008266 <HAL_I2C_EV_IRQHandler+0x22e>
 8008216:	0546      	lsls	r6, r0, #21
 8008218:	d525      	bpl.n	8008266 <HAL_I2C_EV_IRQHandler+0x22e>
 800821a:	bb3d      	cbnz	r5, 800826c <HAL_I2C_EV_IRQHandler+0x234>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800821c:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8008220:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008222:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8008224:	b292      	uxth	r2, r2
 8008226:	2a00      	cmp	r2, #0
 8008228:	f43f af32 	beq.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800822c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800822e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8008232:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8008234:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8008236:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8008238:	3a01      	subs	r2, #1
 800823a:	b292      	uxth	r2, r2
 800823c:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800823e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008240:	b292      	uxth	r2, r2
 8008242:	2a00      	cmp	r2, #0
 8008244:	f47f af24 	bne.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
 8008248:	2829      	cmp	r0, #41	; 0x29
 800824a:	f47f af21 	bne.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800824e:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008250:	685a      	ldr	r2, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008252:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008258:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800825a:	6321      	str	r1, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800825c:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008260:	f7ff fe04 	bl	8007e6c <HAL_I2C_SlaveTxCpltCallback>
 8008264:	e714      	b.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008266:	2d00      	cmp	r5, #0
 8008268:	f43f af12 	beq.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
 800826c:	0580      	lsls	r0, r0, #22
 800826e:	f57f af0f 	bpl.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
  if (hi2c->XferCount != 0U)
 8008272:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008274:	b292      	uxth	r2, r2
 8008276:	2a00      	cmp	r2, #0
 8008278:	f43f af0a 	beq.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800827c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800827e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008282:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8008284:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8008286:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8008288:	3b01      	subs	r3, #1
 800828a:	b29b      	uxth	r3, r3
 800828c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800828e:	e6ff      	b.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008290:	2d00      	cmp	r5, #0
 8008292:	f43f aefd 	beq.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
 8008296:	0586      	lsls	r6, r0, #22
 8008298:	f57f aefa 	bpl.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
  if (hi2c->XferCount != 0U)
 800829c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800829e:	b292      	uxth	r2, r2
 80082a0:	2a00      	cmp	r2, #0
 80082a2:	f43f aef5 	beq.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082a6:	691a      	ldr	r2, [r3, #16]
 80082a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082aa:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80082ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80082ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80082b0:	3b01      	subs	r3, #1
 80082b2:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 80082b4:	3201      	adds	r2, #1
    hi2c->XferCount--;
 80082b6:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80082b8:	6262      	str	r2, [r4, #36]	; 0x24
 80082ba:	e6e9      	b.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80082bc:	685a      	ldr	r2, [r3, #4]
 80082be:	0516      	lsls	r6, r2, #20
 80082c0:	f53f aee6 	bmi.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80082c4:	064d      	lsls	r5, r1, #25
 80082c6:	f3c1 0280 	ubfx	r2, r1, #2, #1
 80082ca:	f140 80b0 	bpl.w	800842e <HAL_I2C_EV_IRQHandler+0x3f6>
 80082ce:	0541      	lsls	r1, r0, #21
 80082d0:	f140 80ad 	bpl.w	800842e <HAL_I2C_EV_IRQHandler+0x3f6>
 80082d4:	2a00      	cmp	r2, #0
 80082d6:	f040 80ad 	bne.w	8008434 <HAL_I2C_EV_IRQHandler+0x3fc>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80082da:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80082de:	2922      	cmp	r1, #34	; 0x22
 80082e0:	f47f aed6 	bne.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
    tmp = hi2c->XferCount;
 80082e4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80082e6:	b289      	uxth	r1, r1
    if (tmp > 3U)
 80082e8:	2903      	cmp	r1, #3
 80082ea:	f240 82ef 	bls.w	80088cc <HAL_I2C_EV_IRQHandler+0x894>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082ee:	691a      	ldr	r2, [r3, #16]
 80082f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082f2:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80082f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80082f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80082f8:	3b01      	subs	r3, #1
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 80082fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8008300:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 8008302:	b29b      	uxth	r3, r3
 8008304:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 8008306:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 8008308:	f47f aec2 	bne.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800830c:	6822      	ldr	r2, [r4, #0]
 800830e:	6853      	ldr	r3, [r2, #4]
 8008310:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008314:	6053      	str	r3, [r2, #4]
 8008316:	e6bb      	b.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008318:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800831c:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800831e:	b2f6      	uxtb	r6, r6
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008320:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008324:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008326:	950d      	str	r5, [sp, #52]	; 0x34
 8008328:	695a      	ldr	r2, [r3, #20]
 800832a:	920d      	str	r2, [sp, #52]	; 0x34
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	f042 0201 	orr.w	r2, r2, #1
 8008332:	601a      	str	r2, [r3, #0]
 8008334:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800833c:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	0510      	lsls	r0, r2, #20
 8008342:	d522      	bpl.n	800838a <HAL_I2C_EV_IRQHandler+0x352>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008344:	f006 02f7 	and.w	r2, r6, #247	; 0xf7
 8008348:	2a22      	cmp	r2, #34	; 0x22
 800834a:	f000 8140 	beq.w	80085ce <HAL_I2C_EV_IRQHandler+0x596>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800834e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008350:	6802      	ldr	r2, [r0, #0]
 8008352:	6852      	ldr	r2, [r2, #4]
 8008354:	b292      	uxth	r2, r2
 8008356:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8008358:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800835a:	b292      	uxth	r2, r2
 800835c:	b11a      	cbz	r2, 8008366 <HAL_I2C_EV_IRQHandler+0x32e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800835e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008360:	f042 0204 	orr.w	r2, r2, #4
 8008364:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008366:	685a      	ldr	r2, [r3, #4]
 8008368:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800836c:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800836e:	f7fe ff71 	bl	8007254 <HAL_DMA_GetState>
 8008372:	2801      	cmp	r0, #1
 8008374:	d009      	beq.n	800838a <HAL_I2C_EV_IRQHandler+0x352>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008376:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008378:	4aa6      	ldr	r2, [pc, #664]	; (8008614 <HAL_I2C_EV_IRQHandler+0x5dc>)
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800837a:	4618      	mov	r0, r3
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800837c:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800837e:	f7fe ff1d 	bl	80071bc <HAL_DMA_Abort_IT>
 8008382:	b110      	cbz	r0, 800838a <HAL_I2C_EV_IRQHandler+0x352>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008384:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008386:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008388:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 800838a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800838c:	b29b      	uxth	r3, r3
 800838e:	b313      	cbz	r3, 80083d6 <HAL_I2C_EV_IRQHandler+0x39e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008390:	6823      	ldr	r3, [r4, #0]
 8008392:	695a      	ldr	r2, [r3, #20]
 8008394:	0751      	lsls	r1, r2, #29
 8008396:	d50a      	bpl.n	80083ae <HAL_I2C_EV_IRQHandler+0x376>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008398:	691a      	ldr	r2, [r3, #16]
 800839a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800839c:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800839e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80083a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80083a2:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80083a4:	1c59      	adds	r1, r3, #1
      hi2c->XferCount--;
 80083a6:	b292      	uxth	r2, r2
 80083a8:	6823      	ldr	r3, [r4, #0]
 80083aa:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80083ac:	6261      	str	r1, [r4, #36]	; 0x24
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80083ae:	695a      	ldr	r2, [r3, #20]
 80083b0:	0652      	lsls	r2, r2, #25
 80083b2:	d509      	bpl.n	80083c8 <HAL_I2C_EV_IRQHandler+0x390>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083b4:	691a      	ldr	r2, [r3, #16]
 80083b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083b8:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80083ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80083bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80083be:	3b01      	subs	r3, #1
 80083c0:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 80083c2:	3201      	adds	r2, #1
      hi2c->XferCount--;
 80083c4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80083c6:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount != 0U)
 80083c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	b11b      	cbz	r3, 80083d6 <HAL_I2C_EV_IRQHandler+0x39e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80083ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083d0:	f043 0304 	orr.w	r3, r3, #4
 80083d4:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80083d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f040 8095 	bne.w	8008508 <HAL_I2C_EV_IRQHandler+0x4d0>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80083de:	2e2a      	cmp	r6, #42	; 0x2a
 80083e0:	f000 815c 	beq.w	800869c <HAL_I2C_EV_IRQHandler+0x664>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80083e4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80083e8:	2b28      	cmp	r3, #40	; 0x28
 80083ea:	f000 80de 	beq.w	80085aa <HAL_I2C_EV_IRQHandler+0x572>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80083ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80083f0:	2b22      	cmp	r3, #34	; 0x22
 80083f2:	d002      	beq.n	80083fa <HAL_I2C_EV_IRQHandler+0x3c2>
 80083f4:	2e22      	cmp	r6, #34	; 0x22
 80083f6:	f47f ae4b 	bne.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
        hi2c->PreviousState = I2C_STATE_NONE;
 80083fa:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80083fc:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80083fe:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008400:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8008402:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008406:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800840a:	f7ff fd31 	bl	8007e70 <HAL_I2C_SlaveRxCpltCallback>
 800840e:	e63f      	b.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008410:	2d00      	cmp	r5, #0
 8008412:	f43f ae3d 	beq.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
 8008416:	0581      	lsls	r1, r0, #22
 8008418:	f57f ae3a 	bpl.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800841c:	2a10      	cmp	r2, #16
 800841e:	f000 8145 	beq.w	80086ac <HAL_I2C_EV_IRQHandler+0x674>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008422:	4620      	mov	r0, r4
}
 8008424:	b00e      	add	sp, #56	; 0x38
 8008426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800842a:	f7ff bd29 	b.w	8007e80 <I2C_MemoryTransmit_TXE_BTF>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800842e:	2a00      	cmp	r2, #0
 8008430:	f43f ae2e 	beq.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
 8008434:	0586      	lsls	r6, r0, #22
 8008436:	f57f ae2b 	bpl.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800843a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 800843c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800843e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008440:	b292      	uxth	r2, r2
 8008442:	2a04      	cmp	r2, #4
 8008444:	f000 8185 	beq.w	8008752 <HAL_I2C_EV_IRQHandler+0x71a>
  else if (hi2c->XferCount == 3U)
 8008448:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800844a:	b292      	uxth	r2, r2
 800844c:	2a03      	cmp	r2, #3
 800844e:	f000 8187 	beq.w	8008760 <HAL_I2C_EV_IRQHandler+0x728>
  else if (hi2c->XferCount == 2U)
 8008452:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008454:	b292      	uxth	r2, r2
 8008456:	2a02      	cmp	r2, #2
 8008458:	f000 8200 	beq.w	800885c <HAL_I2C_EV_IRQHandler+0x824>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	700b      	strb	r3, [r1, #0]
 8008460:	e724      	b.n	80082ac <HAL_I2C_EV_IRQHandler+0x274>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008462:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8008466:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008468:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800846a:	bf16      	itet	ne
 800846c:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008470:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008474:	b2d2      	uxtbne	r2, r2
 8008476:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008478:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800847a:	2a00      	cmp	r2, #0
 800847c:	f000 80eb 	beq.w	8008656 <HAL_I2C_EV_IRQHandler+0x61e>
 8008480:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008482:	2a00      	cmp	r2, #0
 8008484:	f000 80e7 	beq.w	8008656 <HAL_I2C_EV_IRQHandler+0x61e>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008488:	685a      	ldr	r2, [r3, #4]
 800848a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800848e:	605a      	str	r2, [r3, #4]
 8008490:	e5fe      	b.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008492:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8008494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008496:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008498:	611a      	str	r2, [r3, #16]
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800849a:	2900      	cmp	r1, #0
 800849c:	f000 8092 	beq.w	80085c4 <HAL_I2C_EV_IRQHandler+0x58c>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80084a0:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80084a2:	2a00      	cmp	r2, #0
 80084a4:	d1f0      	bne.n	8008488 <HAL_I2C_EV_IRQHandler+0x450>
 80084a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80084a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80084aa:	2a00      	cmp	r2, #0
 80084ac:	d1ec      	bne.n	8008488 <HAL_I2C_EV_IRQHandler+0x450>
 80084ae:	e5ef      	b.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80084b0:	685a      	ldr	r2, [r3, #4]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80084b2:	ea6f 0196 	mvn.w	r1, r6, lsr #2
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80084b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084ba:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80084bc:	0633      	lsls	r3, r6, #24
    __HAL_UNLOCK(hi2c);
 80084be:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80084c2:	f001 0101 	and.w	r1, r1, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80084c6:	bf54      	ite	pl
 80084c8:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80084ca:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 80084cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80084d0:	4620      	mov	r0, r4
 80084d2:	f7ff fccf 	bl	8007e74 <HAL_I2C_AddrCallback>
 80084d6:	e5db      	b.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
    if (hi2c->EventCount == 0U)
 80084d8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80084da:	b97a      	cbnz	r2, 80084fc <HAL_I2C_EV_IRQHandler+0x4c4>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80084dc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80084de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80084e2:	611a      	str	r2, [r3, #16]
 80084e4:	e5d4      	b.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80084e6:	2201      	movs	r2, #1
 80084e8:	62e2      	str	r2, [r4, #44]	; 0x2c
 80084ea:	e61f      	b.n	800812c <HAL_I2C_EV_IRQHandler+0xf4>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80084ec:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80084ee:	11d2      	asrs	r2, r2, #7
 80084f0:	f002 0206 	and.w	r2, r2, #6
 80084f4:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 80084f8:	611a      	str	r2, [r3, #16]
 80084fa:	e5c9      	b.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80084fc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80084fe:	f042 0201 	orr.w	r2, r2, #1
 8008502:	b2d2      	uxtb	r2, r2
 8008504:	611a      	str	r2, [r3, #16]
 8008506:	e5c3      	b.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008508:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800850c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008510:	b2c9      	uxtb	r1, r1
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008512:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008514:	2a10      	cmp	r2, #16
 8008516:	6823      	ldr	r3, [r4, #0]
 8008518:	f000 80a2 	beq.w	8008660 <HAL_I2C_EV_IRQHandler+0x628>
 800851c:	2a40      	cmp	r2, #64	; 0x40
 800851e:	f000 809f 	beq.w	8008660 <HAL_I2C_EV_IRQHandler+0x628>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008522:	f001 0228 	and.w	r2, r1, #40	; 0x28
 8008526:	2a28      	cmp	r2, #40	; 0x28
 8008528:	f000 80e6 	beq.w	80086f8 <HAL_I2C_EV_IRQHandler+0x6c0>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800852c:	685a      	ldr	r2, [r3, #4]
 800852e:	0510      	lsls	r0, r2, #20
 8008530:	d407      	bmi.n	8008542 <HAL_I2C_EV_IRQHandler+0x50a>
 8008532:	2960      	cmp	r1, #96	; 0x60
 8008534:	d005      	beq.n	8008542 <HAL_I2C_EV_IRQHandler+0x50a>
      hi2c->State = HAL_I2C_STATE_READY;
 8008536:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008538:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 800853a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800853e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8008542:	2200      	movs	r2, #0
 8008544:	6322      	str	r2, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800854c:	f000 8094 	beq.w	8008678 <HAL_I2C_EV_IRQHandler+0x640>
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008550:	6b61      	ldr	r1, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008552:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008554:	f891 0021 	ldrb.w	r0, [r1, #33]	; 0x21
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008558:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800855c:	2801      	cmp	r0, #1
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800855e:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008560:	f000 810d 	beq.w	800877e <HAL_I2C_EV_IRQHandler+0x746>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008564:	4b2b      	ldr	r3, [pc, #172]	; (8008614 <HAL_I2C_EV_IRQHandler+0x5dc>)
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008566:	4608      	mov	r0, r1
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008568:	634b      	str	r3, [r1, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800856a:	f7fe fe27 	bl	80071bc <HAL_DMA_Abort_IT>
 800856e:	b150      	cbz	r0, 8008586 <HAL_I2C_EV_IRQHandler+0x54e>
        hi2c->State = HAL_I2C_STATE_READY;
 8008570:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE(hi2c);
 8008572:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008574:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8008576:	6813      	ldr	r3, [r2, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008578:	6b41      	ldr	r1, [r0, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 800857a:	f023 0301 	bic.w	r3, r3, #1
 800857e:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8008580:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008584:	4788      	blx	r1
  CurrentError = hi2c->ErrorCode;
 8008586:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008588:	0718      	lsls	r0, r3, #28
 800858a:	d004      	beq.n	8008596 <HAL_I2C_EV_IRQHandler+0x55e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800858c:	6822      	ldr	r2, [r4, #0]
 800858e:	6853      	ldr	r3, [r2, #4]
 8008590:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008594:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8008596:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800859a:	6c22      	ldr	r2, [r4, #64]	; 0x40
  CurrentState = hi2c->State;
 800859c:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800859e:	0751      	lsls	r1, r2, #29
 80085a0:	f57f ad76 	bpl.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
 80085a4:	2b28      	cmp	r3, #40	; 0x28
 80085a6:	f47f ad73 	bne.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->PreviousState = I2C_STATE_NONE;
 80085aa:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80085ac:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085ae:	491a      	ldr	r1, [pc, #104]	; (8008618 <HAL_I2C_EV_IRQHandler+0x5e0>)
      HAL_I2C_ListenCpltCallback(hi2c);
 80085b0:	4620      	mov	r0, r4
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085b2:	62e1      	str	r1, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80085b4:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80085b6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80085ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80085be:	f7ff fc5b 	bl	8007e78 <HAL_I2C_ListenCpltCallback>
 80085c2:	e565      	b.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80085c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80085c6:	2a00      	cmp	r2, #0
 80085c8:	f47f af6a 	bne.w	80084a0 <HAL_I2C_EV_IRQHandler+0x468>
 80085cc:	e560      	b.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80085ce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80085d0:	6802      	ldr	r2, [r0, #0]
 80085d2:	6852      	ldr	r2, [r2, #4]
 80085d4:	b292      	uxth	r2, r2
 80085d6:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80085d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80085da:	b292      	uxth	r2, r2
 80085dc:	b11a      	cbz	r2, 80085e6 <HAL_I2C_EV_IRQHandler+0x5ae>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80085de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80085e0:	f042 0204 	orr.w	r2, r2, #4
 80085e4:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80085e6:	685a      	ldr	r2, [r3, #4]
 80085e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085ec:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80085ee:	f7fe fe31 	bl	8007254 <HAL_DMA_GetState>
 80085f2:	2801      	cmp	r0, #1
 80085f4:	f43f aec9 	beq.w	800838a <HAL_I2C_EV_IRQHandler+0x352>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80085f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80085fa:	4a06      	ldr	r2, [pc, #24]	; (8008614 <HAL_I2C_EV_IRQHandler+0x5dc>)
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80085fc:	4618      	mov	r0, r3
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80085fe:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008600:	f7fe fddc 	bl	80071bc <HAL_DMA_Abort_IT>
 8008604:	2800      	cmp	r0, #0
 8008606:	f43f aec0 	beq.w	800838a <HAL_I2C_EV_IRQHandler+0x352>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800860a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800860c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800860e:	4798      	blx	r3
 8008610:	e6bb      	b.n	800838a <HAL_I2C_EV_IRQHandler+0x352>
 8008612:	bf00      	nop
 8008614:	08007f41 	.word	0x08007f41
 8008618:	ffff0000 	.word	0xffff0000
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800861c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800861e:	b911      	cbnz	r1, 8008626 <HAL_I2C_EV_IRQHandler+0x5ee>
 8008620:	2a40      	cmp	r2, #64	; 0x40
 8008622:	f000 80e5 	beq.w	80087f0 <HAL_I2C_EV_IRQHandler+0x7b8>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008626:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008628:	b922      	cbnz	r2, 8008634 <HAL_I2C_EV_IRQHandler+0x5fc>
 800862a:	6921      	ldr	r1, [r4, #16]
 800862c:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8008630:	f000 80e5 	beq.w	80087fe <HAL_I2C_EV_IRQHandler+0x7c6>
      if (hi2c->XferCount == 0U)
 8008634:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008636:	b292      	uxth	r2, r2
 8008638:	2a00      	cmp	r2, #0
 800863a:	d162      	bne.n	8008702 <HAL_I2C_EV_IRQHandler+0x6ca>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800863c:	9203      	str	r2, [sp, #12]
 800863e:	695a      	ldr	r2, [r3, #20]
 8008640:	9203      	str	r2, [sp, #12]
 8008642:	699a      	ldr	r2, [r3, #24]
 8008644:	9203      	str	r2, [sp, #12]
 8008646:	9a03      	ldr	r2, [sp, #12]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800864e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8008650:	2300      	movs	r3, #0
 8008652:	6523      	str	r3, [r4, #80]	; 0x50
 8008654:	e51c      	b.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008656:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008658:	2a00      	cmp	r2, #0
 800865a:	f47f af25 	bne.w	80084a8 <HAL_I2C_EV_IRQHandler+0x470>
 800865e:	e517      	b.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008660:	2922      	cmp	r1, #34	; 0x22
 8008662:	f47f af5e 	bne.w	8008522 <HAL_I2C_EV_IRQHandler+0x4ea>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800866c:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800866e:	685a      	ldr	r2, [r3, #4]
 8008670:	0515      	lsls	r5, r2, #20
 8008672:	f53f af66 	bmi.w	8008542 <HAL_I2C_EV_IRQHandler+0x50a>
 8008676:	e75e      	b.n	8008536 <HAL_I2C_EV_IRQHandler+0x4fe>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008678:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800867c:	2960      	cmp	r1, #96	; 0x60
 800867e:	f000 809d 	beq.w	80087bc <HAL_I2C_EV_IRQHandler+0x784>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008682:	695a      	ldr	r2, [r3, #20]
 8008684:	0655      	lsls	r5, r2, #25
 8008686:	d505      	bpl.n	8008694 <HAL_I2C_EV_IRQHandler+0x65c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008688:	691a      	ldr	r2, [r3, #16]
 800868a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800868c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800868e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008690:	3301      	adds	r3, #1
 8008692:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8008694:	4620      	mov	r0, r4
 8008696:	f7ff fc4f 	bl	8007f38 <HAL_I2C_ErrorCallback>
 800869a:	e774      	b.n	8008586 <HAL_I2C_EV_IRQHandler+0x54e>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800869c:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 800869e:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80086a0:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80086a2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80086a6:	f7ff fbe3 	bl	8007e70 <HAL_I2C_SlaveRxCpltCallback>
 80086aa:	e69b      	b.n	80083e4 <HAL_I2C_EV_IRQHandler+0x3ac>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80086ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80086ae:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80086b2:	2a21      	cmp	r2, #33	; 0x21
 80086b4:	f47f acec 	bne.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
    if (hi2c->XferCount != 0U)
 80086b8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80086ba:	b292      	uxth	r2, r2
 80086bc:	2a00      	cmp	r2, #0
 80086be:	f47f addd 	bne.w	800827c <HAL_I2C_EV_IRQHandler+0x244>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80086c2:	2908      	cmp	r1, #8
 80086c4:	d005      	beq.n	80086d2 <HAL_I2C_EV_IRQHandler+0x69a>
 80086c6:	2920      	cmp	r1, #32
 80086c8:	d003      	beq.n	80086d2 <HAL_I2C_EV_IRQHandler+0x69a>
 80086ca:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80086ce:	f040 81e8 	bne.w	8008aa2 <HAL_I2C_EV_IRQHandler+0xa6a>
        hi2c->PreviousState = I2C_STATE_NONE;
 80086d2:	2100      	movs	r1, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80086d4:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80086d6:	685a      	ldr	r2, [r3, #4]
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80086d8:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80086da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80086de:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086e6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80086e8:	6321      	str	r1, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80086ea:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80086ee:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80086f2:	f7ff fbb7 	bl	8007e64 <HAL_I2C_MasterTxCpltCallback>
 80086f6:	e4cb      	b.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->PreviousState = I2C_STATE_NONE;
 80086f8:	2100      	movs	r1, #0
 80086fa:	6321      	str	r1, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80086fc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8008700:	e721      	b.n	8008546 <HAL_I2C_EV_IRQHandler+0x50e>
      else if (hi2c->XferCount == 1U)
 8008702:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008704:	b292      	uxth	r2, r2
 8008706:	2a01      	cmp	r2, #1
 8008708:	f000 8087 	beq.w	800881a <HAL_I2C_EV_IRQHandler+0x7e2>
      else if (hi2c->XferCount == 2U)
 800870c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800870e:	b292      	uxth	r2, r2
 8008710:	2a02      	cmp	r2, #2
 8008712:	f000 8143 	beq.w	800899c <HAL_I2C_EV_IRQHandler+0x964>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800871c:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	0511      	lsls	r1, r2, #20
 8008722:	d50e      	bpl.n	8008742 <HAL_I2C_EV_IRQHandler+0x70a>
 8008724:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8008728:	d007      	beq.n	800873a <HAL_I2C_EV_IRQHandler+0x702>
 800872a:	3801      	subs	r0, #1
 800872c:	281f      	cmp	r0, #31
 800872e:	d808      	bhi.n	8008742 <HAL_I2C_EV_IRQHandler+0x70a>
 8008730:	4aad      	ldr	r2, [pc, #692]	; (80089e8 <HAL_I2C_EV_IRQHandler+0x9b0>)
 8008732:	fa22 f000 	lsr.w	r0, r2, r0
 8008736:	07c2      	lsls	r2, r0, #31
 8008738:	d503      	bpl.n	8008742 <HAL_I2C_EV_IRQHandler+0x70a>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008740:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008742:	2200      	movs	r2, #0
 8008744:	920a      	str	r2, [sp, #40]	; 0x28
 8008746:	695a      	ldr	r2, [r3, #20]
 8008748:	920a      	str	r2, [sp, #40]	; 0x28
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	930a      	str	r3, [sp, #40]	; 0x28
 800874e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008750:	e77e      	b.n	8008650 <HAL_I2C_EV_IRQHandler+0x618>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008758:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	700b      	strb	r3, [r1, #0]
 800875e:	e5a5      	b.n	80082ac <HAL_I2C_EV_IRQHandler+0x274>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008760:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008762:	2804      	cmp	r0, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008768:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800876a:	f43f ae77 	beq.w	800845c <HAL_I2C_EV_IRQHandler+0x424>
 800876e:	2802      	cmp	r0, #2
 8008770:	f43f ae74 	beq.w	800845c <HAL_I2C_EV_IRQHandler+0x424>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800877a:	601a      	str	r2, [r3, #0]
 800877c:	e66e      	b.n	800845c <HAL_I2C_EV_IRQHandler+0x424>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800877e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008780:	4a9a      	ldr	r2, [pc, #616]	; (80089ec <HAL_I2C_EV_IRQHandler+0x9b4>)
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008782:	4618      	mov	r0, r3
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008784:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008786:	f7fe fd19 	bl	80071bc <HAL_DMA_Abort_IT>
 800878a:	2800      	cmp	r0, #0
 800878c:	f43f aefb 	beq.w	8008586 <HAL_I2C_EV_IRQHandler+0x54e>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008790:	6823      	ldr	r3, [r4, #0]
 8008792:	695a      	ldr	r2, [r3, #20]
 8008794:	0652      	lsls	r2, r2, #25
 8008796:	d506      	bpl.n	80087a6 <HAL_I2C_EV_IRQHandler+0x76e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008798:	691a      	ldr	r2, [r3, #16]
 800879a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800879c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800879e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80087a0:	6823      	ldr	r3, [r4, #0]
 80087a2:	3201      	adds	r2, #1
 80087a4:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 80087a6:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 80087a8:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80087aa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 80087ac:	f022 0201 	bic.w	r2, r2, #1
 80087b0:	601a      	str	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80087b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
        hi2c->State = HAL_I2C_STATE_READY;
 80087b4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80087b8:	4798      	blx	r3
 80087ba:	e6e4      	b.n	8008586 <HAL_I2C_EV_IRQHandler+0x54e>
    hi2c->State = HAL_I2C_STATE_READY;
 80087bc:	2120      	movs	r1, #32
 80087be:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087c2:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80087c4:	695a      	ldr	r2, [r3, #20]
 80087c6:	0656      	lsls	r6, r2, #25
 80087c8:	d506      	bpl.n	80087d8 <HAL_I2C_EV_IRQHandler+0x7a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087ca:	691a      	ldr	r2, [r3, #16]
 80087cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087ce:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80087d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	3201      	adds	r2, #1
 80087d6:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80087d8:	681a      	ldr	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80087da:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 80087dc:	f022 0201 	bic.w	r2, r2, #1
 80087e0:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80087e2:	f7ff fbab 	bl	8007f3c <HAL_I2C_AbortCpltCallback>
 80087e6:	e6ce      	b.n	8008586 <HAL_I2C_EV_IRQHandler+0x54e>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80087e8:	2a21      	cmp	r2, #33	; 0x21
 80087ea:	f43f ac87 	beq.w	80080fc <HAL_I2C_EV_IRQHandler+0xc4>
 80087ee:	e481      	b.n	80080f4 <HAL_I2C_EV_IRQHandler+0xbc>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087f0:	9101      	str	r1, [sp, #4]
 80087f2:	695a      	ldr	r2, [r3, #20]
 80087f4:	9201      	str	r2, [sp, #4]
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	9301      	str	r3, [sp, #4]
 80087fa:	9b01      	ldr	r3, [sp, #4]
 80087fc:	e448      	b.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087fe:	9202      	str	r2, [sp, #8]
 8008800:	695a      	ldr	r2, [r3, #20]
 8008802:	9202      	str	r2, [sp, #8]
 8008804:	699a      	ldr	r2, [r3, #24]
 8008806:	9202      	str	r2, [sp, #8]
 8008808:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008810:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008812:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008814:	3301      	adds	r3, #1
 8008816:	6523      	str	r3, [r4, #80]	; 0x50
 8008818:	e43a      	b.n	8008090 <HAL_I2C_EV_IRQHandler+0x58>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800881a:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800881e:	f000 810f 	beq.w	8008a40 <HAL_I2C_EV_IRQHandler+0xa08>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008822:	2808      	cmp	r0, #8
 8008824:	f000 80fc 	beq.w	8008a20 <HAL_I2C_EV_IRQHandler+0x9e8>
 8008828:	2820      	cmp	r0, #32
 800882a:	f000 80f9 	beq.w	8008a20 <HAL_I2C_EV_IRQHandler+0x9e8>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800882e:	2d12      	cmp	r5, #18
 8008830:	f000 80f3 	beq.w	8008a1a <HAL_I2C_EV_IRQHandler+0x9e2>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008834:	2810      	cmp	r0, #16
 8008836:	d805      	bhi.n	8008844 <HAL_I2C_EV_IRQHandler+0x80c>
 8008838:	4a6d      	ldr	r2, [pc, #436]	; (80089f0 <HAL_I2C_EV_IRQHandler+0x9b8>)
 800883a:	fa22 f000 	lsr.w	r0, r2, r0
 800883e:	07c6      	lsls	r6, r0, #31
 8008840:	f100 812a 	bmi.w	8008a98 <HAL_I2C_EV_IRQHandler+0xa60>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800884a:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800884c:	2200      	movs	r2, #0
 800884e:	9206      	str	r2, [sp, #24]
 8008850:	695a      	ldr	r2, [r3, #20]
 8008852:	9206      	str	r2, [sp, #24]
 8008854:	699b      	ldr	r3, [r3, #24]
 8008856:	9306      	str	r3, [sp, #24]
 8008858:	9b06      	ldr	r3, [sp, #24]
 800885a:	e6f9      	b.n	8008650 <HAL_I2C_EV_IRQHandler+0x618>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800885c:	2801      	cmp	r0, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800885e:	681a      	ldr	r2, [r3, #0]
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008860:	d071      	beq.n	8008946 <HAL_I2C_EV_IRQHandler+0x90e>
 8008862:	2810      	cmp	r0, #16
 8008864:	d06f      	beq.n	8008946 <HAL_I2C_EV_IRQHandler+0x90e>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008866:	2804      	cmp	r0, #4
 8008868:	f000 8107 	beq.w	8008a7a <HAL_I2C_EV_IRQHandler+0xa42>
 800886c:	2802      	cmp	r0, #2
 800886e:	f000 8104 	beq.w	8008a7a <HAL_I2C_EV_IRQHandler+0xa42>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008876:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008878:	2020      	movs	r0, #32
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 800887e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008880:	6822      	ldr	r2, [r4, #0]
    hi2c->XferCount--;
 8008882:	3b01      	subs	r3, #1
 8008884:	b29b      	uxth	r3, r3
 8008886:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8008888:	6a63      	ldr	r3, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800888a:	6912      	ldr	r2, [r2, #16]
    hi2c->pBuffPtr++;
 800888c:	1c59      	adds	r1, r3, #1
 800888e:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008890:	705a      	strb	r2, [r3, #1]
    hi2c->XferCount--;
 8008892:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008894:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 8008896:	3b01      	subs	r3, #1
 8008898:	b29b      	uxth	r3, r3
 800889a:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800889c:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 800889e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80088a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->pBuffPtr++;
 80088a4:	3201      	adds	r2, #1
 80088a6:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80088a8:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80088aa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80088ae:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80088b2:	2b40      	cmp	r3, #64	; 0x40
 80088b4:	f000 80d8 	beq.w	8008a68 <HAL_I2C_EV_IRQHandler+0xa30>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80088b8:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80088ba:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80088bc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80088c0:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80088c2:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80088c4:	f7ff fad0 	bl	8007e68 <HAL_I2C_MasterRxCpltCallback>
 80088c8:	f7ff bbe2 	b.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80088cc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80088ce:	2802      	cmp	r0, #2
 80088d0:	f43f abde 	beq.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
 80088d4:	2901      	cmp	r1, #1
 80088d6:	f63f abdb 	bhi.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80088da:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80088de:	4845      	ldr	r0, [pc, #276]	; (80089f4 <HAL_I2C_EV_IRQHandler+0x9bc>)
  __IO uint32_t count = 0U;
 80088e0:	920c      	str	r2, [sp, #48]	; 0x30
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80088e2:	6802      	ldr	r2, [r0, #0]
 80088e4:	fbb2 f2f1 	udiv	r2, r2, r1
 80088e8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80088ec:	920c      	str	r2, [sp, #48]	; 0x30
    count--;
 80088ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088f0:	3a01      	subs	r2, #1
 80088f2:	920c      	str	r2, [sp, #48]	; 0x30
    if (count == 0U)
 80088f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80088f6:	2900      	cmp	r1, #0
 80088f8:	f000 80f5 	beq.w	8008ae6 <HAL_I2C_EV_IRQHandler+0xaae>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8008902:	d1f4      	bne.n	80088ee <HAL_I2C_EV_IRQHandler+0x8b6>
        hi2c->State = HAL_I2C_STATE_READY;
 8008904:	2020      	movs	r0, #32
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008906:	6819      	ldr	r1, [r3, #0]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008908:	6a65      	ldr	r5, [r4, #36]	; 0x24
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800890a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800890e:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008910:	6859      	ldr	r1, [r3, #4]
 8008912:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8008916:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	702b      	strb	r3, [r5, #0]
        hi2c->XferCount--;
 800891c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 800891e:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8008920:	3b01      	subs	r3, #1
 8008922:	b29b      	uxth	r3, r3
 8008924:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008926:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800892a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->pBuffPtr++;
 800892e:	3101      	adds	r1, #1
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008930:	2b40      	cmp	r3, #64	; 0x40
        hi2c->pBuffPtr++;
 8008932:	6261      	str	r1, [r4, #36]	; 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008934:	d1c1      	bne.n	80088ba <HAL_I2C_EV_IRQHandler+0x882>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008936:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          HAL_I2C_MemRxCpltCallback(hi2c);
 800893a:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_NONE;
 800893c:	6322      	str	r2, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800893e:	f7ff faf9 	bl	8007f34 <HAL_I2C_MemRxCpltCallback>
 8008942:	f7ff bba5 	b.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800894a:	601a      	str	r2, [r3, #0]
 800894c:	e794      	b.n	8008878 <HAL_I2C_EV_IRQHandler+0x840>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800894e:	2d08      	cmp	r5, #8
 8008950:	d005      	beq.n	800895e <HAL_I2C_EV_IRQHandler+0x926>
 8008952:	2d20      	cmp	r5, #32
 8008954:	d003      	beq.n	800895e <HAL_I2C_EV_IRQHandler+0x926>
 8008956:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 800895a:	f040 80b3 	bne.w	8008ac4 <HAL_I2C_EV_IRQHandler+0xa8c>
      hi2c->PreviousState = I2C_STATE_NONE;
 800895e:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8008960:	2020      	movs	r0, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008962:	6859      	ldr	r1, [r3, #4]
 8008964:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8008968:	6059      	str	r1, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800896a:	6819      	ldr	r1, [r3, #0]
 800896c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8008970:	6019      	str	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008972:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008974:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008978:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 800897c:	4620      	mov	r0, r4
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800897e:	2b40      	cmp	r3, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008980:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008984:	f000 809a 	beq.w	8008abc <HAL_I2C_EV_IRQHandler+0xa84>
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008988:	f7ff fa6c 	bl	8007e64 <HAL_I2C_MasterTxCpltCallback>
 800898c:	f7ff bb80 	b.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008990:	685a      	ldr	r2, [r3, #4]
 8008992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008996:	605a      	str	r2, [r3, #4]
 8008998:	f7ff bb7a 	b.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800899c:	2810      	cmp	r0, #16
 800899e:	d92b      	bls.n	80089f8 <HAL_I2C_EV_IRQHandler+0x9c0>
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089a0:	2100      	movs	r1, #0
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089a8:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089aa:	9108      	str	r1, [sp, #32]
 80089ac:	695a      	ldr	r2, [r3, #20]
 80089ae:	9208      	str	r2, [sp, #32]
 80089b0:	699a      	ldr	r2, [r3, #24]
 80089b2:	9208      	str	r2, [sp, #32]
 80089b4:	9a08      	ldr	r2, [sp, #32]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089bc:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80089be:	685a      	ldr	r2, [r3, #4]
 80089c0:	0515      	lsls	r5, r2, #20
 80089c2:	f57f ae45 	bpl.w	8008650 <HAL_I2C_EV_IRQHandler+0x618>
 80089c6:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80089ca:	d008      	beq.n	80089de <HAL_I2C_EV_IRQHandler+0x9a6>
 80089cc:	3801      	subs	r0, #1
 80089ce:	281f      	cmp	r0, #31
 80089d0:	f63f ae3e 	bhi.w	8008650 <HAL_I2C_EV_IRQHandler+0x618>
 80089d4:	4a04      	ldr	r2, [pc, #16]	; (80089e8 <HAL_I2C_EV_IRQHandler+0x9b0>)
 80089d6:	40c2      	lsrs	r2, r0
 80089d8:	07d0      	lsls	r0, r2, #31
 80089da:	f57f ae39 	bpl.w	8008650 <HAL_I2C_EV_IRQHandler+0x618>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80089de:	685a      	ldr	r2, [r3, #4]
 80089e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80089e4:	605a      	str	r2, [r3, #4]
 80089e6:	e633      	b.n	8008650 <HAL_I2C_EV_IRQHandler+0x618>
 80089e8:	80008081 	.word	0x80008081
 80089ec:	08007f41 	.word	0x08007f41
 80089f0:	00010014 	.word	0x00010014
 80089f4:	20000088 	.word	0x20000088
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80089f8:	4a48      	ldr	r2, [pc, #288]	; (8008b1c <HAL_I2C_EV_IRQHandler+0xae4>)
 80089fa:	40c2      	lsrs	r2, r0
 80089fc:	43d2      	mvns	r2, r2
 80089fe:	f012 0201 	ands.w	r2, r2, #1
 8008a02:	d1cd      	bne.n	80089a0 <HAL_I2C_EV_IRQHandler+0x968>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a04:	6819      	ldr	r1, [r3, #0]
 8008a06:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8008a0a:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a0c:	9209      	str	r2, [sp, #36]	; 0x24
 8008a0e:	695a      	ldr	r2, [r3, #20]
 8008a10:	9209      	str	r2, [sp, #36]	; 0x24
 8008a12:	699a      	ldr	r2, [r3, #24]
 8008a14:	9209      	str	r2, [sp, #36]	; 0x24
 8008a16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a18:	e7d1      	b.n	80089be <HAL_I2C_EV_IRQHandler+0x986>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008a1a:	2801      	cmp	r0, #1
 8008a1c:	f43f af12 	beq.w	8008844 <HAL_I2C_EV_IRQHandler+0x80c>
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a20:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a28:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a2a:	9107      	str	r1, [sp, #28]
 8008a2c:	695a      	ldr	r2, [r3, #20]
 8008a2e:	9207      	str	r2, [sp, #28]
 8008a30:	699a      	ldr	r2, [r3, #24]
 8008a32:	9207      	str	r2, [sp, #28]
 8008a34:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a3c:	601a      	str	r2, [r3, #0]
 8008a3e:	e607      	b.n	8008650 <HAL_I2C_EV_IRQHandler+0x618>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a46:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008a48:	685a      	ldr	r2, [r3, #4]
 8008a4a:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8008a4e:	d018      	beq.n	8008a82 <HAL_I2C_EV_IRQHandler+0xa4a>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a50:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a58:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a5a:	9104      	str	r1, [sp, #16]
 8008a5c:	695a      	ldr	r2, [r3, #20]
 8008a5e:	9204      	str	r2, [sp, #16]
 8008a60:	699b      	ldr	r3, [r3, #24]
 8008a62:	9304      	str	r3, [sp, #16]
 8008a64:	9b04      	ldr	r3, [sp, #16]
 8008a66:	e5f3      	b.n	8008650 <HAL_I2C_EV_IRQHandler+0x618>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a68:	2300      	movs	r3, #0
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008a6a:	4620      	mov	r0, r4
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a6c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008a70:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008a72:	f7ff fa5f 	bl	8007f34 <HAL_I2C_MemRxCpltCallback>
 8008a76:	f7ff bb0b 	b.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a7e:	601a      	str	r2, [r3, #0]
 8008a80:	e6fa      	b.n	8008878 <HAL_I2C_EV_IRQHandler+0x840>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a82:	9205      	str	r2, [sp, #20]
 8008a84:	695a      	ldr	r2, [r3, #20]
 8008a86:	9205      	str	r2, [sp, #20]
 8008a88:	699a      	ldr	r2, [r3, #24]
 8008a8a:	9205      	str	r2, [sp, #20]
 8008a8c:	9a05      	ldr	r2, [sp, #20]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a94:	601a      	str	r2, [r3, #0]
 8008a96:	e5db      	b.n	8008650 <HAL_I2C_EV_IRQHandler+0x618>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a9e:	601a      	str	r2, [r3, #0]
 8008aa0:	e6d4      	b.n	800884c <HAL_I2C_EV_IRQHandler+0x814>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008aa2:	2611      	movs	r6, #17
        hi2c->State = HAL_I2C_STATE_READY;
 8008aa4:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008aa6:	6859      	ldr	r1, [r3, #4]
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008aa8:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008aaa:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8008aae:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008ab0:	6326      	str	r6, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ab2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008ab6:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
 8008aba:	e765      	b.n	8008988 <HAL_I2C_EV_IRQHandler+0x950>
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008abc:	f7ff f9de 	bl	8007e7c <HAL_I2C_MemTxCpltCallback>
 8008ac0:	f7ff bae6 	b.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008ac4:	2611      	movs	r6, #17
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ac6:	2500      	movs	r5, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8008ac8:	2120      	movs	r1, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008aca:	685a      	ldr	r2, [r3, #4]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008acc:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008ace:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008ad2:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008ad4:	6326      	str	r6, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ad6:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008ada:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008ade:	f7ff f9c1 	bl	8007e64 <HAL_I2C_MasterTxCpltCallback>
 8008ae2:	f7ff bad5 	b.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
        hi2c->State = HAL_I2C_STATE_READY;
 8008ae6:	2520      	movs	r5, #32
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ae8:	6c22      	ldr	r2, [r4, #64]	; 0x40
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008aea:	6a66      	ldr	r6, [r4, #36]	; 0x24
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008aec:	432a      	orrs	r2, r5
 8008aee:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008af0:	685a      	ldr	r2, [r3, #4]
        HAL_I2C_ErrorCallback(hi2c);
 8008af2:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008af4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008af8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	7033      	strb	r3, [r6, #0]
        hi2c->XferCount--;
 8008afe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8008b00:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8008b02:	3b01      	subs	r3, #1
 8008b04:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8008b06:	3201      	adds	r2, #1
        hi2c->XferCount--;
 8008b08:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8008b0a:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 8008b0c:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b10:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008b14:	f7ff fa10 	bl	8007f38 <HAL_I2C_ErrorCallback>
 8008b18:	f7ff baba 	b.w	8008090 <HAL_I2C_EV_IRQHandler+0x58>
 8008b1c:	00010014 	.word	0x00010014

08008b20 <HAL_I2C_ER_IRQHandler>:
{
 8008b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008b22:	6803      	ldr	r3, [r0, #0]
{
 8008b24:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008b26:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008b28:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008b2a:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008b2e:	469c      	mov	ip, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008b30:	b2cf      	uxtb	r7, r1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008b32:	05e9      	lsls	r1, r5, #23
 8008b34:	f3c5 2040 	ubfx	r0, r5, #9, #1
 8008b38:	f140 8085 	bpl.w	8008c46 <HAL_I2C_ER_IRQHandler+0x126>
 8008b3c:	0a11      	lsrs	r1, r2, #8
 8008b3e:	07ce      	lsls	r6, r1, #31
 8008b40:	f140 8081 	bpl.w	8008c46 <HAL_I2C_ER_IRQHandler+0x126>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008b44:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008b48:	615a      	str	r2, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b50:	601a      	str	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008b52:	2800      	cmp	r0, #0
 8008b54:	f040 8086 	bne.w	8008c64 <HAL_I2C_ER_IRQHandler+0x144>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008b58:	0568      	lsls	r0, r5, #21
 8008b5a:	f140 80db 	bpl.w	8008d14 <HAL_I2C_ER_IRQHandler+0x1f4>
    error |= HAL_I2C_ERROR_BERR;
 8008b5e:	2601      	movs	r6, #1
    tmp2 = hi2c->XferCount;
 8008b60:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8008b62:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008b66:	2f20      	cmp	r7, #32
    tmp2 = hi2c->XferCount;
 8008b68:	b292      	uxth	r2, r2
    tmp3 = hi2c->State;
 8008b6a:	b2c9      	uxtb	r1, r1
    tmp4 = hi2c->PreviousState;
 8008b6c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008b6e:	f000 80b0 	beq.w	8008cd2 <HAL_I2C_ER_IRQHandler+0x1b2>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008b76:	2f10      	cmp	r7, #16
      error |= HAL_I2C_ERROR_AF;
 8008b78:	f046 0604 	orr.w	r6, r6, #4
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b7c:	615a      	str	r2, [r3, #20]
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008b7e:	d001      	beq.n	8008b84 <HAL_I2C_ER_IRQHandler+0x64>
 8008b80:	2f40      	cmp	r7, #64	; 0x40
 8008b82:	d103      	bne.n	8008b8c <HAL_I2C_ER_IRQHandler+0x6c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b8a:	601a      	str	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008b8c:	052f      	lsls	r7, r5, #20
 8008b8e:	469c      	mov	ip, r3
 8008b90:	d505      	bpl.n	8008b9e <HAL_I2C_ER_IRQHandler+0x7e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008b92:	f46f 6300 	mvn.w	r3, #2048	; 0x800
    error |= HAL_I2C_ERROR_OVR;
 8008b96:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008b9a:	f8cc 3014 	str.w	r3, [ip, #20]
    hi2c->ErrorCode |= error;
 8008b9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ba0:	431e      	orrs	r6, r3
 8008ba2:	6426      	str	r6, [r4, #64]	; 0x40
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ba4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008ba8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008bac:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008bae:	b2db      	uxtb	r3, r3
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008bb0:	2b10      	cmp	r3, #16
 8008bb2:	d069      	beq.n	8008c88 <HAL_I2C_ER_IRQHandler+0x168>
 8008bb4:	2b40      	cmp	r3, #64	; 0x40
 8008bb6:	d067      	beq.n	8008c88 <HAL_I2C_ER_IRQHandler+0x168>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008bb8:	f002 0328 	and.w	r3, r2, #40	; 0x28
 8008bbc:	2b28      	cmp	r3, #40	; 0x28
 8008bbe:	f000 8083 	beq.w	8008cc8 <HAL_I2C_ER_IRQHandler+0x1a8>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008bc2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8008bc6:	051f      	lsls	r7, r3, #20
 8008bc8:	d407      	bmi.n	8008bda <HAL_I2C_ER_IRQHandler+0xba>
 8008bca:	2a60      	cmp	r2, #96	; 0x60
 8008bcc:	d005      	beq.n	8008bda <HAL_I2C_ER_IRQHandler+0xba>
      hi2c->State = HAL_I2C_STATE_READY;
 8008bce:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bd0:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8008bd2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bd6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008bde:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8008be2:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8008be6:	d05c      	beq.n	8008ca2 <HAL_I2C_ER_IRQHandler+0x182>
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008be8:	6b62      	ldr	r2, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008bea:	f8dc 3004 	ldr.w	r3, [ip, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008bee:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008bf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008bf6:	2901      	cmp	r1, #1
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008bf8:	f8cc 3004 	str.w	r3, [ip, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008bfc:	f000 80ac 	beq.w	8008d58 <HAL_I2C_ER_IRQHandler+0x238>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008c00:	4b84      	ldr	r3, [pc, #528]	; (8008e14 <HAL_I2C_ER_IRQHandler+0x2f4>)
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008c02:	4610      	mov	r0, r2
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008c04:	6353      	str	r3, [r2, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008c06:	f7fe fad9 	bl	80071bc <HAL_DMA_Abort_IT>
 8008c0a:	b150      	cbz	r0, 8008c22 <HAL_I2C_ER_IRQHandler+0x102>
        hi2c->State = HAL_I2C_STATE_READY;
 8008c0c:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE(hi2c);
 8008c0e:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008c10:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8008c12:	6813      	ldr	r3, [r2, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008c14:	6b41      	ldr	r1, [r0, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8008c16:	f023 0301 	bic.w	r3, r3, #1
 8008c1a:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8008c1c:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008c20:	4788      	blx	r1
  CurrentError = hi2c->ErrorCode;
 8008c22:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008c24:	0719      	lsls	r1, r3, #28
 8008c26:	d004      	beq.n	8008c32 <HAL_I2C_ER_IRQHandler+0x112>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008c28:	6822      	ldr	r2, [r4, #0]
 8008c2a:	6853      	ldr	r3, [r2, #4]
 8008c2c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008c30:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8008c32:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008c36:	6c22      	ldr	r2, [r4, #64]	; 0x40
  CurrentState = hi2c->State;
 8008c38:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008c3a:	0752      	lsls	r2, r2, #29
 8008c3c:	d502      	bpl.n	8008c44 <HAL_I2C_ER_IRQHandler+0x124>
 8008c3e:	2b28      	cmp	r3, #40	; 0x28
 8008c40:	f000 80a9 	beq.w	8008d96 <HAL_I2C_ER_IRQHandler+0x276>
}
 8008c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008c46:	b110      	cbz	r0, 8008c4e <HAL_I2C_ER_IRQHandler+0x12e>
 8008c48:	0a11      	lsrs	r1, r2, #8
 8008c4a:	07c8      	lsls	r0, r1, #31
 8008c4c:	d41a      	bmi.n	8008c84 <HAL_I2C_ER_IRQHandler+0x164>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008c4e:	f3c5 2680 	ubfx	r6, r5, #10, #1
 8008c52:	b11e      	cbz	r6, 8008c5c <HAL_I2C_ER_IRQHandler+0x13c>
 8008c54:	05d0      	lsls	r0, r2, #23
 8008c56:	d5f5      	bpl.n	8008c44 <HAL_I2C_ER_IRQHandler+0x124>
 8008c58:	2600      	movs	r6, #0
 8008c5a:	e781      	b.n	8008b60 <HAL_I2C_ER_IRQHandler+0x40>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008c5c:	0529      	lsls	r1, r5, #20
 8008c5e:	d5f1      	bpl.n	8008c44 <HAL_I2C_ER_IRQHandler+0x124>
 8008c60:	0a11      	lsrs	r1, r2, #8
 8008c62:	e008      	b.n	8008c76 <HAL_I2C_ER_IRQHandler+0x156>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008c64:	2603      	movs	r6, #3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008c66:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8008c6a:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008c6c:	056a      	lsls	r2, r5, #21
 8008c6e:	f53f af77 	bmi.w	8008b60 <HAL_I2C_ER_IRQHandler+0x40>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008c72:	052a      	lsls	r2, r5, #20
 8008c74:	d504      	bpl.n	8008c80 <HAL_I2C_ER_IRQHandler+0x160>
 8008c76:	07ca      	lsls	r2, r1, #31
 8008c78:	d48b      	bmi.n	8008b92 <HAL_I2C_ER_IRQHandler+0x72>
  if (error != HAL_I2C_ERROR_NONE)
 8008c7a:	2e00      	cmp	r6, #0
 8008c7c:	d0e2      	beq.n	8008c44 <HAL_I2C_ER_IRQHandler+0x124>
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	469c      	mov	ip, r3
 8008c82:	e78c      	b.n	8008b9e <HAL_I2C_ER_IRQHandler+0x7e>
 8008c84:	2602      	movs	r6, #2
 8008c86:	e7ee      	b.n	8008c66 <HAL_I2C_ER_IRQHandler+0x146>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008c88:	2a22      	cmp	r2, #34	; 0x22
 8008c8a:	d195      	bne.n	8008bb8 <HAL_I2C_ER_IRQHandler+0x98>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008c8c:	f8dc 3000 	ldr.w	r3, [ip]
 8008c90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c94:	f8cc 3000 	str.w	r3, [ip]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008c98:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8008c9c:	051b      	lsls	r3, r3, #20
 8008c9e:	d49c      	bmi.n	8008bda <HAL_I2C_ER_IRQHandler+0xba>
 8008ca0:	e795      	b.n	8008bce <HAL_I2C_ER_IRQHandler+0xae>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008ca2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8008ca6:	2a60      	cmp	r2, #96	; 0x60
 8008ca8:	d03b      	beq.n	8008d22 <HAL_I2C_ER_IRQHandler+0x202>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008caa:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8008cae:	0658      	lsls	r0, r3, #25
 8008cb0:	d506      	bpl.n	8008cc0 <HAL_I2C_ER_IRQHandler+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cb4:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8008cb8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8008cba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	f7ff f939 	bl	8007f38 <HAL_I2C_ErrorCallback>
 8008cc6:	e7ac      	b.n	8008c22 <HAL_I2C_ER_IRQHandler+0x102>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008cc8:	2200      	movs	r2, #0
 8008cca:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008ccc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8008cd0:	e785      	b.n	8008bde <HAL_I2C_ER_IRQHandler+0xbe>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008cd2:	b9ca      	cbnz	r2, 8008d08 <HAL_I2C_ER_IRQHandler+0x1e8>
 8008cd4:	f001 02f7 	and.w	r2, r1, #247	; 0xf7
 8008cd8:	2a21      	cmp	r2, #33	; 0x21
 8008cda:	d003      	beq.n	8008ce4 <HAL_I2C_ER_IRQHandler+0x1c4>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8008cdc:	2928      	cmp	r1, #40	; 0x28
 8008cde:	d113      	bne.n	8008d08 <HAL_I2C_ER_IRQHandler+0x1e8>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8008ce0:	2821      	cmp	r0, #33	; 0x21
 8008ce2:	d111      	bne.n	8008d08 <HAL_I2C_ER_IRQHandler+0x1e8>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ce4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008ce8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008cea:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008cec:	2908      	cmp	r1, #8
 8008cee:	d05f      	beq.n	8008db0 <HAL_I2C_ER_IRQHandler+0x290>
 8008cf0:	2920      	cmp	r1, #32
 8008cf2:	d05d      	beq.n	8008db0 <HAL_I2C_ER_IRQHandler+0x290>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008cf4:	2a21      	cmp	r2, #33	; 0x21
 8008cf6:	d074      	beq.n	8008de2 <HAL_I2C_ER_IRQHandler+0x2c2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cf8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008cfc:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008cfe:	052d      	lsls	r5, r5, #20
 8008d00:	d5bb      	bpl.n	8008c7a <HAL_I2C_ER_IRQHandler+0x15a>
 8008d02:	f8d4 c000 	ldr.w	ip, [r4]
 8008d06:	e744      	b.n	8008b92 <HAL_I2C_ER_IRQHandler+0x72>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
      error |= HAL_I2C_ERROR_AF;
 8008d0c:	f046 0604 	orr.w	r6, r6, #4
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d10:	615a      	str	r2, [r3, #20]
 8008d12:	e73b      	b.n	8008b8c <HAL_I2C_ER_IRQHandler+0x6c>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008d14:	0529      	lsls	r1, r5, #20
    error |= HAL_I2C_ERROR_BERR;
 8008d16:	f04f 0601 	mov.w	r6, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008d1a:	f53f af3a 	bmi.w	8008b92 <HAL_I2C_ER_IRQHandler+0x72>
 8008d1e:	469c      	mov	ip, r3
 8008d20:	e73d      	b.n	8008b9e <HAL_I2C_ER_IRQHandler+0x7e>
    hi2c->State = HAL_I2C_STATE_READY;
 8008d22:	2220      	movs	r2, #32
 8008d24:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d28:	6423      	str	r3, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008d2a:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8008d2e:	065d      	lsls	r5, r3, #25
 8008d30:	d508      	bpl.n	8008d44 <HAL_I2C_ER_IRQHandler+0x224>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d32:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8008d36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d38:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8008d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d3c:	f8d4 c000 	ldr.w	ip, [r4]
 8008d40:	3301      	adds	r3, #1
 8008d42:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8008d44:	f8dc 3000 	ldr.w	r3, [ip]
    HAL_I2C_AbortCpltCallback(hi2c);
 8008d48:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8008d4a:	f023 0301 	bic.w	r3, r3, #1
 8008d4e:	f8cc 3000 	str.w	r3, [ip]
    HAL_I2C_AbortCpltCallback(hi2c);
 8008d52:	f7ff f8f3 	bl	8007f3c <HAL_I2C_AbortCpltCallback>
 8008d56:	e764      	b.n	8008c22 <HAL_I2C_ER_IRQHandler+0x102>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008d58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008d5a:	4a2e      	ldr	r2, [pc, #184]	; (8008e14 <HAL_I2C_ER_IRQHandler+0x2f4>)
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008d5c:	4618      	mov	r0, r3
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008d5e:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008d60:	f7fe fa2c 	bl	80071bc <HAL_DMA_Abort_IT>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	f43f af5c 	beq.w	8008c22 <HAL_I2C_ER_IRQHandler+0x102>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	695a      	ldr	r2, [r3, #20]
 8008d6e:	0656      	lsls	r6, r2, #25
 8008d70:	d506      	bpl.n	8008d80 <HAL_I2C_ER_IRQHandler+0x260>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d72:	691a      	ldr	r2, [r3, #16]
 8008d74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d76:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008d78:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	3201      	adds	r2, #1
 8008d7e:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 8008d80:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8008d82:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008d84:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8008d86:	f022 0201 	bic.w	r2, r2, #1
 8008d8a:	601a      	str	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008d8c:	6b43      	ldr	r3, [r0, #52]	; 0x34
        hi2c->State = HAL_I2C_STATE_READY;
 8008d8e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008d92:	4798      	blx	r3
 8008d94:	e745      	b.n	8008c22 <HAL_I2C_ER_IRQHandler+0x102>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d96:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8008d98:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008d9a:	491f      	ldr	r1, [pc, #124]	; (8008e18 <HAL_I2C_ER_IRQHandler+0x2f8>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8008d9c:	4620      	mov	r0, r4
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008d9e:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008da0:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008da2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008da6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8008daa:	f7ff f865 	bl	8007e78 <HAL_I2C_ListenCpltCallback>
}
 8008dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008db0:	2a28      	cmp	r2, #40	; 0x28
 8008db2:	d19f      	bne.n	8008cf4 <HAL_I2C_ER_IRQHandler+0x1d4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008db4:	f46f 6780 	mvn.w	r7, #1024	; 0x400
    hi2c->PreviousState = I2C_STATE_NONE;
 8008db8:	2100      	movs	r1, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8008dba:	2020      	movs	r0, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008dbc:	4a16      	ldr	r2, [pc, #88]	; (8008e18 <HAL_I2C_ER_IRQHandler+0x2f8>)
 8008dbe:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008dc0:	685a      	ldr	r2, [r3, #4]
 8008dc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008dc6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008dc8:	615f      	str	r7, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	403a      	ands	r2, r7
 8008dce:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008dd0:	6321      	str	r1, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008dd2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    HAL_I2C_ListenCpltCallback(hi2c);
 8008dd6:	4620      	mov	r0, r4
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008dd8:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8008ddc:	f7ff f84c 	bl	8007e78 <HAL_I2C_ListenCpltCallback>
 8008de0:	e78d      	b.n	8008cfe <HAL_I2C_ER_IRQHandler+0x1de>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008de2:	2720      	movs	r7, #32
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008de4:	2000      	movs	r0, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008de6:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008dea:	f8df c02c 	ldr.w	ip, [pc, #44]	; 8008e18 <HAL_I2C_ER_IRQHandler+0x2f8>
 8008dee:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008df2:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008df4:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008df8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008dfc:	685a      	ldr	r2, [r3, #4]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008dfe:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008e00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008e04:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e06:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	400a      	ands	r2, r1
 8008e0c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008e0e:	f7ff f82d 	bl	8007e6c <HAL_I2C_SlaveTxCpltCallback>
 8008e12:	e774      	b.n	8008cfe <HAL_I2C_ER_IRQHandler+0x1de>
 8008e14:	08007f41 	.word	0x08007f41
 8008e18:	ffff0000 	.word	0xffff0000

08008e1c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	f000 8155 	beq.w	80090cc <HAL_RCC_OscConfig+0x2b0>
{
 8008e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e26:	6803      	ldr	r3, [r0, #0]
{
 8008e28:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e2a:	07dd      	lsls	r5, r3, #31
 8008e2c:	4604      	mov	r4, r0
 8008e2e:	d535      	bpl.n	8008e9c <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008e30:	49a8      	ldr	r1, [pc, #672]	; (80090d4 <HAL_RCC_OscConfig+0x2b8>)
 8008e32:	684a      	ldr	r2, [r1, #4]
 8008e34:	f002 020c 	and.w	r2, r2, #12
 8008e38:	2a04      	cmp	r2, #4
 8008e3a:	f000 8105 	beq.w	8009048 <HAL_RCC_OscConfig+0x22c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008e3e:	684a      	ldr	r2, [r1, #4]
 8008e40:	f002 020c 	and.w	r2, r2, #12
 8008e44:	2a08      	cmp	r2, #8
 8008e46:	f000 80fb 	beq.w	8009040 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e4a:	6863      	ldr	r3, [r4, #4]
 8008e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e50:	d010      	beq.n	8008e74 <HAL_RCC_OscConfig+0x58>
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f000 8120 	beq.w	8009098 <HAL_RCC_OscConfig+0x27c>
 8008e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e5c:	f000 8178 	beq.w	8009150 <HAL_RCC_OscConfig+0x334>
 8008e60:	4b9c      	ldr	r3, [pc, #624]	; (80090d4 <HAL_RCC_OscConfig+0x2b8>)
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008e68:	601a      	str	r2, [r3, #0]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008e70:	601a      	str	r2, [r3, #0]
 8008e72:	e004      	b.n	8008e7e <HAL_RCC_OscConfig+0x62>
 8008e74:	4a97      	ldr	r2, [pc, #604]	; (80090d4 <HAL_RCC_OscConfig+0x2b8>)
 8008e76:	6813      	ldr	r3, [r2, #0]
 8008e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e7c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e7e:	f7fe f92f 	bl	80070e0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e82:	4d94      	ldr	r5, [pc, #592]	; (80090d4 <HAL_RCC_OscConfig+0x2b8>)
        tickstart = HAL_GetTick();
 8008e84:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e86:	e005      	b.n	8008e94 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e88:	f7fe f92a 	bl	80070e0 <HAL_GetTick>
 8008e8c:	1b80      	subs	r0, r0, r6
 8008e8e:	2864      	cmp	r0, #100	; 0x64
 8008e90:	f200 80f5 	bhi.w	800907e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e94:	682b      	ldr	r3, [r5, #0]
 8008e96:	039a      	lsls	r2, r3, #14
 8008e98:	d5f6      	bpl.n	8008e88 <HAL_RCC_OscConfig+0x6c>
 8008e9a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e9c:	079f      	lsls	r7, r3, #30
 8008e9e:	d44d      	bmi.n	8008f3c <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ea0:	071a      	lsls	r2, r3, #28
 8008ea2:	d522      	bpl.n	8008eea <HAL_RCC_OscConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008ea4:	69a3      	ldr	r3, [r4, #24]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	f000 80ba 	beq.w	8009020 <HAL_RCC_OscConfig+0x204>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008eac:	2201      	movs	r2, #1
 8008eae:	4b8a      	ldr	r3, [pc, #552]	; (80090d8 <HAL_RCC_OscConfig+0x2bc>)

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008eb0:	4d88      	ldr	r5, [pc, #544]	; (80090d4 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_ENABLE();
 8008eb2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008eb4:	f7fe f914 	bl	80070e0 <HAL_GetTick>
 8008eb8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008eba:	e005      	b.n	8008ec8 <HAL_RCC_OscConfig+0xac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ebc:	f7fe f910 	bl	80070e0 <HAL_GetTick>
 8008ec0:	1b80      	subs	r0, r0, r6
 8008ec2:	2802      	cmp	r0, #2
 8008ec4:	f200 80db 	bhi.w	800907e <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ec8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008eca:	079b      	lsls	r3, r3, #30
 8008ecc:	d5f6      	bpl.n	8008ebc <HAL_RCC_OscConfig+0xa0>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008ece:	4b83      	ldr	r3, [pc, #524]	; (80090dc <HAL_RCC_OscConfig+0x2c0>)
 8008ed0:	4a83      	ldr	r2, [pc, #524]	; (80090e0 <HAL_RCC_OscConfig+0x2c4>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ed8:	0a5b      	lsrs	r3, r3, #9
 8008eda:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8008edc:	bf00      	nop
  }
  while (Delay --);
 8008ede:	9b01      	ldr	r3, [sp, #4]
 8008ee0:	1e5a      	subs	r2, r3, #1
 8008ee2:	9201      	str	r2, [sp, #4]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1f9      	bne.n	8008edc <HAL_RCC_OscConfig+0xc0>
 8008ee8:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008eea:	075d      	lsls	r5, r3, #29
 8008eec:	d569      	bpl.n	8008fc2 <HAL_RCC_OscConfig+0x1a6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008eee:	4b79      	ldr	r3, [pc, #484]	; (80090d4 <HAL_RCC_OscConfig+0x2b8>)
 8008ef0:	69da      	ldr	r2, [r3, #28]
 8008ef2:	00d0      	lsls	r0, r2, #3
 8008ef4:	f100 80ec 	bmi.w	80090d0 <HAL_RCC_OscConfig+0x2b4>
      pwrclkchanged = SET;
 8008ef8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8008efa:	69da      	ldr	r2, [r3, #28]
 8008efc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008f00:	61da      	str	r2, [r3, #28]
 8008f02:	69db      	ldr	r3, [r3, #28]
 8008f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f08:	9300      	str	r3, [sp, #0]
 8008f0a:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f0c:	4b75      	ldr	r3, [pc, #468]	; (80090e4 <HAL_RCC_OscConfig+0x2c8>)
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	05d1      	lsls	r1, r2, #23
 8008f12:	f140 80a3 	bpl.w	800905c <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f16:	68e3      	ldr	r3, [r4, #12]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d037      	beq.n	8008f8c <HAL_RCC_OscConfig+0x170>
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f000 80e7 	beq.w	80090f0 <HAL_RCC_OscConfig+0x2d4>
 8008f22:	2b05      	cmp	r3, #5
 8008f24:	4b6b      	ldr	r3, [pc, #428]	; (80090d4 <HAL_RCC_OscConfig+0x2b8>)
 8008f26:	6a1a      	ldr	r2, [r3, #32]
 8008f28:	f000 811f 	beq.w	800916a <HAL_RCC_OscConfig+0x34e>
 8008f2c:	f022 0201 	bic.w	r2, r2, #1
 8008f30:	621a      	str	r2, [r3, #32]
 8008f32:	6a1a      	ldr	r2, [r3, #32]
 8008f34:	f022 0204 	bic.w	r2, r2, #4
 8008f38:	621a      	str	r2, [r3, #32]
 8008f3a:	e02c      	b.n	8008f96 <HAL_RCC_OscConfig+0x17a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008f3c:	4a65      	ldr	r2, [pc, #404]	; (80090d4 <HAL_RCC_OscConfig+0x2b8>)
 8008f3e:	6851      	ldr	r1, [r2, #4]
 8008f40:	f011 0f0c 	tst.w	r1, #12
 8008f44:	d061      	beq.n	800900a <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008f46:	6851      	ldr	r1, [r2, #4]
 8008f48:	f001 010c 	and.w	r1, r1, #12
 8008f4c:	2908      	cmp	r1, #8
 8008f4e:	d059      	beq.n	8009004 <HAL_RCC_OscConfig+0x1e8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008f50:	6923      	ldr	r3, [r4, #16]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f000 80eb 	beq.w	800912e <HAL_RCC_OscConfig+0x312>
        __HAL_RCC_HSI_ENABLE();
 8008f58:	2201      	movs	r2, #1
 8008f5a:	4b63      	ldr	r3, [pc, #396]	; (80090e8 <HAL_RCC_OscConfig+0x2cc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f5c:	4d5d      	ldr	r5, [pc, #372]	; (80090d4 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_ENABLE();
 8008f5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008f60:	f7fe f8be 	bl	80070e0 <HAL_GetTick>
 8008f64:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f66:	e005      	b.n	8008f74 <HAL_RCC_OscConfig+0x158>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f68:	f7fe f8ba 	bl	80070e0 <HAL_GetTick>
 8008f6c:	1b80      	subs	r0, r0, r6
 8008f6e:	2802      	cmp	r0, #2
 8008f70:	f200 8085 	bhi.w	800907e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f74:	682b      	ldr	r3, [r5, #0]
 8008f76:	0798      	lsls	r0, r3, #30
 8008f78:	d5f6      	bpl.n	8008f68 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f7a:	682b      	ldr	r3, [r5, #0]
 8008f7c:	6962      	ldr	r2, [r4, #20]
 8008f7e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008f82:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008f86:	602b      	str	r3, [r5, #0]
 8008f88:	6823      	ldr	r3, [r4, #0]
 8008f8a:	e789      	b.n	8008ea0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f8c:	4a51      	ldr	r2, [pc, #324]	; (80090d4 <HAL_RCC_OscConfig+0x2b8>)
 8008f8e:	6a13      	ldr	r3, [r2, #32]
 8008f90:	f043 0301 	orr.w	r3, r3, #1
 8008f94:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8008f96:	f7fe f8a3 	bl	80070e0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f9a:	4e4e      	ldr	r6, [pc, #312]	; (80090d4 <HAL_RCC_OscConfig+0x2b8>)
      tickstart = HAL_GetTick();
 8008f9c:	4680      	mov	r8, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f9e:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fa2:	e005      	b.n	8008fb0 <HAL_RCC_OscConfig+0x194>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fa4:	f7fe f89c 	bl	80070e0 <HAL_GetTick>
 8008fa8:	eba0 0008 	sub.w	r0, r0, r8
 8008fac:	42b8      	cmp	r0, r7
 8008fae:	d866      	bhi.n	800907e <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fb0:	6a33      	ldr	r3, [r6, #32]
 8008fb2:	079b      	lsls	r3, r3, #30
 8008fb4:	d5f6      	bpl.n	8008fa4 <HAL_RCC_OscConfig+0x188>
    if (pwrclkchanged == SET)
 8008fb6:	b125      	cbz	r5, 8008fc2 <HAL_RCC_OscConfig+0x1a6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008fb8:	4a46      	ldr	r2, [pc, #280]	; (80090d4 <HAL_RCC_OscConfig+0x2b8>)
 8008fba:	69d3      	ldr	r3, [r2, #28]
 8008fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fc0:	61d3      	str	r3, [r2, #28]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008fc2:	69e0      	ldr	r0, [r4, #28]
 8008fc4:	b1d0      	cbz	r0, 8008ffc <HAL_RCC_OscConfig+0x1e0>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008fc6:	4d43      	ldr	r5, [pc, #268]	; (80090d4 <HAL_RCC_OscConfig+0x2b8>)
 8008fc8:	686a      	ldr	r2, [r5, #4]
 8008fca:	f002 020c 	and.w	r2, r2, #12
 8008fce:	2a08      	cmp	r2, #8
 8008fd0:	f000 80d3 	beq.w	800917a <HAL_RCC_OscConfig+0x35e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008fd4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8008fd6:	f04f 0100 	mov.w	r1, #0
 8008fda:	4a44      	ldr	r2, [pc, #272]	; (80090ec <HAL_RCC_OscConfig+0x2d0>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008fdc:	f000 80de 	beq.w	800919c <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_PLL_DISABLE();
 8008fe0:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8008fe2:	f7fe f87d 	bl	80070e0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008fe6:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8008fe8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008fea:	e004      	b.n	8008ff6 <HAL_RCC_OscConfig+0x1da>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fec:	f7fe f878 	bl	80070e0 <HAL_GetTick>
 8008ff0:	1b40      	subs	r0, r0, r5
 8008ff2:	2802      	cmp	r0, #2
 8008ff4:	d843      	bhi.n	800907e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ff6:	6823      	ldr	r3, [r4, #0]
 8008ff8:	019b      	lsls	r3, r3, #6
 8008ffa:	d4f7      	bmi.n	8008fec <HAL_RCC_OscConfig+0x1d0>
  return HAL_OK;
 8008ffc:	2000      	movs	r0, #0
}
 8008ffe:	b002      	add	sp, #8
 8009000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009004:	6852      	ldr	r2, [r2, #4]
 8009006:	03d6      	lsls	r6, r2, #15
 8009008:	d4a2      	bmi.n	8008f50 <HAL_RCC_OscConfig+0x134>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800900a:	4a32      	ldr	r2, [pc, #200]	; (80090d4 <HAL_RCC_OscConfig+0x2b8>)
 800900c:	6812      	ldr	r2, [r2, #0]
 800900e:	0795      	lsls	r5, r2, #30
 8009010:	d539      	bpl.n	8009086 <HAL_RCC_OscConfig+0x26a>
 8009012:	6922      	ldr	r2, [r4, #16]
 8009014:	2a01      	cmp	r2, #1
 8009016:	d036      	beq.n	8009086 <HAL_RCC_OscConfig+0x26a>
        return HAL_ERROR;
 8009018:	2001      	movs	r0, #1
}
 800901a:	b002      	add	sp, #8
 800901c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8009020:	4a2d      	ldr	r2, [pc, #180]	; (80090d8 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009022:	4d2c      	ldr	r5, [pc, #176]	; (80090d4 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_DISABLE();
 8009024:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8009026:	f7fe f85b 	bl	80070e0 <HAL_GetTick>
 800902a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800902c:	e004      	b.n	8009038 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800902e:	f7fe f857 	bl	80070e0 <HAL_GetTick>
 8009032:	1b80      	subs	r0, r0, r6
 8009034:	2802      	cmp	r0, #2
 8009036:	d822      	bhi.n	800907e <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009038:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800903a:	079f      	lsls	r7, r3, #30
 800903c:	d4f7      	bmi.n	800902e <HAL_RCC_OscConfig+0x212>
 800903e:	e753      	b.n	8008ee8 <HAL_RCC_OscConfig+0xcc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009040:	684a      	ldr	r2, [r1, #4]
 8009042:	03d0      	lsls	r0, r2, #15
 8009044:	f57f af01 	bpl.w	8008e4a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009048:	4a22      	ldr	r2, [pc, #136]	; (80090d4 <HAL_RCC_OscConfig+0x2b8>)
 800904a:	6812      	ldr	r2, [r2, #0]
 800904c:	0391      	lsls	r1, r2, #14
 800904e:	f57f af25 	bpl.w	8008e9c <HAL_RCC_OscConfig+0x80>
 8009052:	6862      	ldr	r2, [r4, #4]
 8009054:	2a00      	cmp	r2, #0
 8009056:	f47f af21 	bne.w	8008e9c <HAL_RCC_OscConfig+0x80>
 800905a:	e7dd      	b.n	8009018 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800905c:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800905e:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009060:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009064:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8009066:	f7fe f83b 	bl	80070e0 <HAL_GetTick>
 800906a:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800906c:	6833      	ldr	r3, [r6, #0]
 800906e:	05da      	lsls	r2, r3, #23
 8009070:	f53f af51 	bmi.w	8008f16 <HAL_RCC_OscConfig+0xfa>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009074:	f7fe f834 	bl	80070e0 <HAL_GetTick>
 8009078:	1bc0      	subs	r0, r0, r7
 800907a:	2864      	cmp	r0, #100	; 0x64
 800907c:	d9f6      	bls.n	800906c <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 800907e:	2003      	movs	r0, #3
}
 8009080:	b002      	add	sp, #8
 8009082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009086:	4913      	ldr	r1, [pc, #76]	; (80090d4 <HAL_RCC_OscConfig+0x2b8>)
 8009088:	6960      	ldr	r0, [r4, #20]
 800908a:	680a      	ldr	r2, [r1, #0]
 800908c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8009090:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8009094:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009096:	e703      	b.n	8008ea0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009098:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800909c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80090a0:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090a2:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80090b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80090b2:	f7fe f815 	bl	80070e0 <HAL_GetTick>
 80090b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090b8:	e004      	b.n	80090c4 <HAL_RCC_OscConfig+0x2a8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090ba:	f7fe f811 	bl	80070e0 <HAL_GetTick>
 80090be:	1b80      	subs	r0, r0, r6
 80090c0:	2864      	cmp	r0, #100	; 0x64
 80090c2:	d8dc      	bhi.n	800907e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090c4:	682b      	ldr	r3, [r5, #0]
 80090c6:	039b      	lsls	r3, r3, #14
 80090c8:	d4f7      	bmi.n	80090ba <HAL_RCC_OscConfig+0x29e>
 80090ca:	e6e6      	b.n	8008e9a <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 80090cc:	2001      	movs	r0, #1
}
 80090ce:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 80090d0:	2500      	movs	r5, #0
 80090d2:	e71b      	b.n	8008f0c <HAL_RCC_OscConfig+0xf0>
 80090d4:	40021000 	.word	0x40021000
 80090d8:	42420480 	.word	0x42420480
 80090dc:	20000088 	.word	0x20000088
 80090e0:	10624dd3 	.word	0x10624dd3
 80090e4:	40007000 	.word	0x40007000
 80090e8:	42420000 	.word	0x42420000
 80090ec:	42420060 	.word	0x42420060
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80090f4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80090f8:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80090fa:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090fc:	f022 0201 	bic.w	r2, r2, #1
 8009100:	621a      	str	r2, [r3, #32]
 8009102:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009104:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009108:	f022 0204 	bic.w	r2, r2, #4
 800910c:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 800910e:	f7fd ffe7 	bl	80070e0 <HAL_GetTick>
 8009112:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009114:	e004      	b.n	8009120 <HAL_RCC_OscConfig+0x304>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009116:	f7fd ffe3 	bl	80070e0 <HAL_GetTick>
 800911a:	1bc0      	subs	r0, r0, r7
 800911c:	4540      	cmp	r0, r8
 800911e:	d8ae      	bhi.n	800907e <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009120:	6a33      	ldr	r3, [r6, #32]
 8009122:	0798      	lsls	r0, r3, #30
 8009124:	d4f7      	bmi.n	8009116 <HAL_RCC_OscConfig+0x2fa>
    if (pwrclkchanged == SET)
 8009126:	2d00      	cmp	r5, #0
 8009128:	f43f af4b 	beq.w	8008fc2 <HAL_RCC_OscConfig+0x1a6>
 800912c:	e744      	b.n	8008fb8 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_DISABLE();
 800912e:	4a34      	ldr	r2, [pc, #208]	; (8009200 <HAL_RCC_OscConfig+0x3e4>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009130:	4d34      	ldr	r5, [pc, #208]	; (8009204 <HAL_RCC_OscConfig+0x3e8>)
        __HAL_RCC_HSI_DISABLE();
 8009132:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8009134:	f7fd ffd4 	bl	80070e0 <HAL_GetTick>
 8009138:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800913a:	e004      	b.n	8009146 <HAL_RCC_OscConfig+0x32a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800913c:	f7fd ffd0 	bl	80070e0 <HAL_GetTick>
 8009140:	1b80      	subs	r0, r0, r6
 8009142:	2802      	cmp	r0, #2
 8009144:	d89b      	bhi.n	800907e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009146:	682b      	ldr	r3, [r5, #0]
 8009148:	0799      	lsls	r1, r3, #30
 800914a:	d4f7      	bmi.n	800913c <HAL_RCC_OscConfig+0x320>
 800914c:	6823      	ldr	r3, [r4, #0]
 800914e:	e6a7      	b.n	8008ea0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009150:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009154:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800915e:	601a      	str	r2, [r3, #0]
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009166:	601a      	str	r2, [r3, #0]
 8009168:	e689      	b.n	8008e7e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800916a:	f042 0204 	orr.w	r2, r2, #4
 800916e:	621a      	str	r2, [r3, #32]
 8009170:	6a1a      	ldr	r2, [r3, #32]
 8009172:	f042 0201 	orr.w	r2, r2, #1
 8009176:	621a      	str	r2, [r3, #32]
 8009178:	e70d      	b.n	8008f96 <HAL_RCC_OscConfig+0x17a>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800917a:	2801      	cmp	r0, #1
 800917c:	f43f af4d 	beq.w	800901a <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 8009180:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009182:	6a22      	ldr	r2, [r4, #32]
 8009184:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8009188:	4291      	cmp	r1, r2
 800918a:	f47f af45 	bne.w	8009018 <HAL_RCC_OscConfig+0x1fc>
 800918e:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009190:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 8009194:	1a18      	subs	r0, r3, r0
 8009196:	bf18      	it	ne
 8009198:	2001      	movne	r0, #1
 800919a:	e73e      	b.n	800901a <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_PLL_DISABLE();
 800919c:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 800919e:	f7fd ff9f 	bl	80070e0 <HAL_GetTick>
 80091a2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80091a4:	e005      	b.n	80091b2 <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091a6:	f7fd ff9b 	bl	80070e0 <HAL_GetTick>
 80091aa:	1b80      	subs	r0, r0, r6
 80091ac:	2802      	cmp	r0, #2
 80091ae:	f63f af66 	bhi.w	800907e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80091b2:	682b      	ldr	r3, [r5, #0]
 80091b4:	0199      	lsls	r1, r3, #6
 80091b6:	d4f6      	bmi.n	80091a6 <HAL_RCC_OscConfig+0x38a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80091b8:	6a22      	ldr	r2, [r4, #32]
 80091ba:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80091be:	d105      	bne.n	80091cc <HAL_RCC_OscConfig+0x3b0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80091c0:	686b      	ldr	r3, [r5, #4]
 80091c2:	68a1      	ldr	r1, [r4, #8]
 80091c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80091c8:	430b      	orrs	r3, r1
 80091ca:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80091cc:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80091ce:	4b0d      	ldr	r3, [pc, #52]	; (8009204 <HAL_RCC_OscConfig+0x3e8>)
 80091d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80091d2:	6859      	ldr	r1, [r3, #4]
 80091d4:	4302      	orrs	r2, r0
 80091d6:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 80091da:	480b      	ldr	r0, [pc, #44]	; (8009208 <HAL_RCC_OscConfig+0x3ec>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80091dc:	430a      	orrs	r2, r1
 80091de:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80091e0:	6005      	str	r5, [r0, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80091e2:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 80091e4:	f7fd ff7c 	bl	80070e0 <HAL_GetTick>
 80091e8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80091ea:	e005      	b.n	80091f8 <HAL_RCC_OscConfig+0x3dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091ec:	f7fd ff78 	bl	80070e0 <HAL_GetTick>
 80091f0:	1b40      	subs	r0, r0, r5
 80091f2:	2802      	cmp	r0, #2
 80091f4:	f63f af43 	bhi.w	800907e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80091f8:	6823      	ldr	r3, [r4, #0]
 80091fa:	019a      	lsls	r2, r3, #6
 80091fc:	d5f6      	bpl.n	80091ec <HAL_RCC_OscConfig+0x3d0>
 80091fe:	e6fd      	b.n	8008ffc <HAL_RCC_OscConfig+0x1e0>
 8009200:	42420000 	.word	0x42420000
 8009204:	40021000 	.word	0x40021000
 8009208:	42420060 	.word	0x42420060

0800920c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800920c:	b178      	cbz	r0, 800922e <HAL_RCC_ClockConfig+0x22>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800920e:	4a5d      	ldr	r2, [pc, #372]	; (8009384 <HAL_RCC_ClockConfig+0x178>)
 8009210:	6813      	ldr	r3, [r2, #0]
 8009212:	f003 0307 	and.w	r3, r3, #7
 8009216:	428b      	cmp	r3, r1
 8009218:	d20b      	bcs.n	8009232 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800921a:	6813      	ldr	r3, [r2, #0]
 800921c:	f023 0307 	bic.w	r3, r3, #7
 8009220:	430b      	orrs	r3, r1
 8009222:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009224:	6813      	ldr	r3, [r2, #0]
 8009226:	f003 0307 	and.w	r3, r3, #7
 800922a:	428b      	cmp	r3, r1
 800922c:	d001      	beq.n	8009232 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 800922e:	2001      	movs	r0, #1
}
 8009230:	4770      	bx	lr
{
 8009232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009236:	6803      	ldr	r3, [r0, #0]
{
 8009238:	b086      	sub	sp, #24
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800923a:	079d      	lsls	r5, r3, #30
 800923c:	d514      	bpl.n	8009268 <HAL_RCC_ClockConfig+0x5c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800923e:	075c      	lsls	r4, r3, #29
 8009240:	d504      	bpl.n	800924c <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009242:	4c51      	ldr	r4, [pc, #324]	; (8009388 <HAL_RCC_ClockConfig+0x17c>)
 8009244:	6862      	ldr	r2, [r4, #4]
 8009246:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800924a:	6062      	str	r2, [r4, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800924c:	071a      	lsls	r2, r3, #28
 800924e:	d504      	bpl.n	800925a <HAL_RCC_ClockConfig+0x4e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009250:	4c4d      	ldr	r4, [pc, #308]	; (8009388 <HAL_RCC_ClockConfig+0x17c>)
 8009252:	6862      	ldr	r2, [r4, #4]
 8009254:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8009258:	6062      	str	r2, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800925a:	4c4b      	ldr	r4, [pc, #300]	; (8009388 <HAL_RCC_ClockConfig+0x17c>)
 800925c:	6885      	ldr	r5, [r0, #8]
 800925e:	6862      	ldr	r2, [r4, #4]
 8009260:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009264:	432a      	orrs	r2, r5
 8009266:	6062      	str	r2, [r4, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009268:	07db      	lsls	r3, r3, #31
 800926a:	4604      	mov	r4, r0
 800926c:	460d      	mov	r5, r1
 800926e:	d520      	bpl.n	80092b2 <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009270:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009272:	4b45      	ldr	r3, [pc, #276]	; (8009388 <HAL_RCC_ClockConfig+0x17c>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009274:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009276:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009278:	d06f      	beq.n	800935a <HAL_RCC_ClockConfig+0x14e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800927a:	2a02      	cmp	r2, #2
 800927c:	d07e      	beq.n	800937c <HAL_RCC_ClockConfig+0x170>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800927e:	0798      	lsls	r0, r3, #30
 8009280:	d527      	bpl.n	80092d2 <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009282:	4e41      	ldr	r6, [pc, #260]	; (8009388 <HAL_RCC_ClockConfig+0x17c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009284:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009288:	6873      	ldr	r3, [r6, #4]
 800928a:	f023 0303 	bic.w	r3, r3, #3
 800928e:	4313      	orrs	r3, r2
 8009290:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8009292:	f7fd ff25 	bl	80070e0 <HAL_GetTick>
 8009296:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009298:	e004      	b.n	80092a4 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800929a:	f7fd ff21 	bl	80070e0 <HAL_GetTick>
 800929e:	1bc0      	subs	r0, r0, r7
 80092a0:	4540      	cmp	r0, r8
 80092a2:	d869      	bhi.n	8009378 <HAL_RCC_ClockConfig+0x16c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092a4:	6873      	ldr	r3, [r6, #4]
 80092a6:	6862      	ldr	r2, [r4, #4]
 80092a8:	f003 030c 	and.w	r3, r3, #12
 80092ac:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80092b0:	d1f3      	bne.n	800929a <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80092b2:	4a34      	ldr	r2, [pc, #208]	; (8009384 <HAL_RCC_ClockConfig+0x178>)
 80092b4:	6813      	ldr	r3, [r2, #0]
 80092b6:	f003 0307 	and.w	r3, r3, #7
 80092ba:	42ab      	cmp	r3, r5
 80092bc:	d90d      	bls.n	80092da <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092be:	6813      	ldr	r3, [r2, #0]
 80092c0:	f023 0307 	bic.w	r3, r3, #7
 80092c4:	432b      	orrs	r3, r5
 80092c6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092c8:	6813      	ldr	r3, [r2, #0]
 80092ca:	f003 0307 	and.w	r3, r3, #7
 80092ce:	42ab      	cmp	r3, r5
 80092d0:	d003      	beq.n	80092da <HAL_RCC_ClockConfig+0xce>
    return HAL_ERROR;
 80092d2:	2001      	movs	r0, #1
}
 80092d4:	b006      	add	sp, #24
 80092d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	0759      	lsls	r1, r3, #29
 80092de:	d506      	bpl.n	80092ee <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80092e0:	4929      	ldr	r1, [pc, #164]	; (8009388 <HAL_RCC_ClockConfig+0x17c>)
 80092e2:	68e0      	ldr	r0, [r4, #12]
 80092e4:	684a      	ldr	r2, [r1, #4]
 80092e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80092ea:	4302      	orrs	r2, r0
 80092ec:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092ee:	071a      	lsls	r2, r3, #28
 80092f0:	d507      	bpl.n	8009302 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80092f2:	4a25      	ldr	r2, [pc, #148]	; (8009388 <HAL_RCC_ClockConfig+0x17c>)
 80092f4:	6921      	ldr	r1, [r4, #16]
 80092f6:	6853      	ldr	r3, [r2, #4]
 80092f8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80092fc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009300:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8009302:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8009306:	4b21      	ldr	r3, [pc, #132]	; (800938c <HAL_RCC_ClockConfig+0x180>)
 8009308:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800930a:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800930e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009310:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8009314:	491c      	ldr	r1, [pc, #112]	; (8009388 <HAL_RCC_ClockConfig+0x17c>)
 8009316:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8009318:	f002 030c 	and.w	r3, r2, #12
 800931c:	2b08      	cmp	r3, #8
 800931e:	d11a      	bne.n	8009356 <HAL_RCC_ClockConfig+0x14a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009320:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8009324:	4423      	add	r3, r4
 8009326:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800932a:	03d3      	lsls	r3, r2, #15
 800932c:	d418      	bmi.n	8009360 <HAL_RCC_ClockConfig+0x154>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800932e:	4b18      	ldr	r3, [pc, #96]	; (8009390 <HAL_RCC_ClockConfig+0x184>)
 8009330:	fb03 f300 	mul.w	r3, r3, r0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009334:	4a14      	ldr	r2, [pc, #80]	; (8009388 <HAL_RCC_ClockConfig+0x17c>)
 8009336:	4817      	ldr	r0, [pc, #92]	; (8009394 <HAL_RCC_ClockConfig+0x188>)
 8009338:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 800933a:	4917      	ldr	r1, [pc, #92]	; (8009398 <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800933c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8009340:	5c80      	ldrb	r0, [r0, r2]
 8009342:	4a16      	ldr	r2, [pc, #88]	; (800939c <HAL_RCC_ClockConfig+0x190>)
 8009344:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8009346:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009348:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 800934a:	f7fd fcaf 	bl	8006cac <HAL_InitTick>
  return HAL_OK;
 800934e:	2000      	movs	r0, #0
}
 8009350:	b006      	add	sp, #24
 8009352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSE_VALUE;
 8009356:	4b12      	ldr	r3, [pc, #72]	; (80093a0 <HAL_RCC_ClockConfig+0x194>)
 8009358:	e7ec      	b.n	8009334 <HAL_RCC_ClockConfig+0x128>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800935a:	039f      	lsls	r7, r3, #14
 800935c:	d491      	bmi.n	8009282 <HAL_RCC_ClockConfig+0x76>
 800935e:	e7b8      	b.n	80092d2 <HAL_RCC_ClockConfig+0xc6>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009360:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009362:	4b0f      	ldr	r3, [pc, #60]	; (80093a0 <HAL_RCC_ClockConfig+0x194>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009364:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009368:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800936c:	4422      	add	r2, r4
 800936e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009372:	fbb3 f3f2 	udiv	r3, r3, r2
 8009376:	e7dd      	b.n	8009334 <HAL_RCC_ClockConfig+0x128>
        return HAL_TIMEOUT;
 8009378:	2003      	movs	r0, #3
 800937a:	e7ab      	b.n	80092d4 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800937c:	019e      	lsls	r6, r3, #6
 800937e:	d480      	bmi.n	8009282 <HAL_RCC_ClockConfig+0x76>
 8009380:	e7a7      	b.n	80092d2 <HAL_RCC_ClockConfig+0xc6>
 8009382:	bf00      	nop
 8009384:	40022000 	.word	0x40022000
 8009388:	40021000 	.word	0x40021000
 800938c:	0800d030 	.word	0x0800d030
 8009390:	003d0900 	.word	0x003d0900
 8009394:	0800d0e0 	.word	0x0800d0e0
 8009398:	20000090 	.word	0x20000090
 800939c:	20000088 	.word	0x20000088
 80093a0:	007a1200 	.word	0x007a1200

080093a4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80093a4:	4b04      	ldr	r3, [pc, #16]	; (80093b8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80093a6:	4905      	ldr	r1, [pc, #20]	; (80093bc <HAL_RCC_GetPCLK1Freq+0x18>)
 80093a8:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 80093aa:	4a05      	ldr	r2, [pc, #20]	; (80093c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80093ac:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80093b0:	5ccb      	ldrb	r3, [r1, r3]
 80093b2:	6810      	ldr	r0, [r2, #0]
}
 80093b4:	40d8      	lsrs	r0, r3
 80093b6:	4770      	bx	lr
 80093b8:	40021000 	.word	0x40021000
 80093bc:	0800d0f0 	.word	0x0800d0f0
 80093c0:	20000088 	.word	0x20000088

080093c4 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80093c4:	220f      	movs	r2, #15
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80093c6:	4b0d      	ldr	r3, [pc, #52]	; (80093fc <HAL_RCC_GetClockConfig+0x38>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80093c8:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80093ca:	685a      	ldr	r2, [r3, #4]
{
 80093cc:	b410      	push	{r4}
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80093ce:	f002 0203 	and.w	r2, r2, #3
 80093d2:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80093d4:	685a      	ldr	r2, [r3, #4]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80093d6:	4c0a      	ldr	r4, [pc, #40]	; (8009400 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80093d8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80093dc:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80093de:	685a      	ldr	r2, [r3, #4]
 80093e0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80093e4:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	08db      	lsrs	r3, r3, #3
 80093ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80093ee:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80093f0:	6823      	ldr	r3, [r4, #0]
}
 80093f2:	bc10      	pop	{r4}
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80093f4:	f003 0307 	and.w	r3, r3, #7
 80093f8:	600b      	str	r3, [r1, #0]
}
 80093fa:	4770      	bx	lr
 80093fc:	40021000 	.word	0x40021000
 8009400:	40022000 	.word	0x40022000

08009404 <SPI_WaitFlagStateUntilTimeout.constprop.8>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8009404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009408:	461d      	mov	r5, r3
 800940a:	b082      	sub	sp, #8
 800940c:	4616      	mov	r6, r2
 800940e:	460c      	mov	r4, r1
 8009410:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009412:	f7fd fe65 	bl	80070e0 <HAL_GetTick>
 8009416:	4435      	add	r5, r6
 8009418:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800941a:	f7fd fe61 	bl	80070e0 <HAL_GetTick>
 800941e:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009420:	4b27      	ldr	r3, [pc, #156]	; (80094c0 <SPI_WaitFlagStateUntilTimeout.constprop.8+0xbc>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8009428:	fb05 f303 	mul.w	r3, r5, r3
 800942c:	9301      	str	r3, [sp, #4]
 800942e:	1c73      	adds	r3, r6, #1

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009430:	683a      	ldr	r2, [r7, #0]
 8009432:	d107      	bne.n	8009444 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x40>
 8009434:	6893      	ldr	r3, [r2, #8]
 8009436:	ea34 0303 	bics.w	r3, r4, r3
 800943a:	d0fb      	beq.n	8009434 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x30>
      }
      count--;
    }
  }

  return HAL_OK;
 800943c:	2000      	movs	r0, #0
}
 800943e:	b002      	add	sp, #8
 8009440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009444:	6893      	ldr	r3, [r2, #8]
 8009446:	ea34 0303 	bics.w	r3, r4, r3
 800944a:	d1f7      	bne.n	800943c <SPI_WaitFlagStateUntilTimeout.constprop.8+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800944c:	f7fd fe48 	bl	80070e0 <HAL_GetTick>
 8009450:	eba0 0008 	sub.w	r0, r0, r8
 8009454:	42a8      	cmp	r0, r5
 8009456:	d208      	bcs.n	800946a <SPI_WaitFlagStateUntilTimeout.constprop.8+0x66>
      if(count == 0U)
 8009458:	9a01      	ldr	r2, [sp, #4]
      count--;
 800945a:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800945c:	2a00      	cmp	r2, #0
      count--;
 800945e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 8009462:	bf08      	it	eq
 8009464:	2500      	moveq	r5, #0
      count--;
 8009466:	9301      	str	r3, [sp, #4]
 8009468:	e7e1      	b.n	800942e <SPI_WaitFlagStateUntilTimeout.constprop.8+0x2a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800946a:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800946e:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009470:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009474:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009478:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800947a:	d014      	beq.n	80094a6 <SPI_WaitFlagStateUntilTimeout.constprop.8+0xa2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800947c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800947e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009482:	d007      	beq.n	8009494 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x90>
        hspi->State = HAL_SPI_STATE_READY;
 8009484:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8009486:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8009488:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800948c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8009490:	2003      	movs	r0, #3
 8009492:	e7d4      	b.n	800943e <SPI_WaitFlagStateUntilTimeout.constprop.8+0x3a>
          SPI_RESET_CRC(hspi);
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800949a:	601a      	str	r2, [r3, #0]
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80094a2:	601a      	str	r2, [r3, #0]
 80094a4:	e7ee      	b.n	8009484 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x80>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094a6:	68ba      	ldr	r2, [r7, #8]
 80094a8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80094ac:	d002      	beq.n	80094b4 <SPI_WaitFlagStateUntilTimeout.constprop.8+0xb0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80094ae:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80094b2:	d1e3      	bne.n	800947c <SPI_WaitFlagStateUntilTimeout.constprop.8+0x78>
          __HAL_SPI_DISABLE(hspi);
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094ba:	601a      	str	r2, [r3, #0]
 80094bc:	e7de      	b.n	800947c <SPI_WaitFlagStateUntilTimeout.constprop.8+0x78>
 80094be:	bf00      	nop
 80094c0:	20000088 	.word	0x20000088

080094c4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80094c4:	2800      	cmp	r0, #0
 80094c6:	d04c      	beq.n	8009562 <HAL_SPI_Init+0x9e>
{
 80094c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80094ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d042      	beq.n	8009556 <HAL_SPI_Init+0x92>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80094d0:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80094d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094d6:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80094d8:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
 80094dc:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094de:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80094e0:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 80094e4:	2900      	cmp	r1, #0
 80094e6:	d03e      	beq.n	8009566 <HAL_SPI_Init+0xa2>
 80094e8:	461a      	mov	r2, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80094ea:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 80094ee:	2702      	movs	r7, #2
  hspi->State     = HAL_SPI_STATE_READY;
 80094f0:	2601      	movs	r6, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094f2:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80094f4:	68e1      	ldr	r1, [r4, #12]
 80094f6:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 80094fa:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80094fe:	4303      	orrs	r3, r0
 8009500:	6920      	ldr	r0, [r4, #16]
 8009502:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8009506:	4038      	ands	r0, r7
 8009508:	430b      	orrs	r3, r1
 800950a:	6961      	ldr	r1, [r4, #20]
 800950c:	4303      	orrs	r3, r0
 800950e:	69a0      	ldr	r0, [r4, #24]
 8009510:	4031      	ands	r1, r6
 8009512:	430b      	orrs	r3, r1
 8009514:	f400 7100 	and.w	r1, r0, #512	; 0x200
 8009518:	430b      	orrs	r3, r1
 800951a:	69e1      	ldr	r1, [r4, #28]
  hspi->State = HAL_SPI_STATE_BUSY;
 800951c:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009520:	6a27      	ldr	r7, [r4, #32]
 8009522:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8009526:	430b      	orrs	r3, r1
 8009528:	f007 0780 	and.w	r7, r7, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 800952c:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800952e:	433b      	orrs	r3, r7
 8009530:	4313      	orrs	r3, r2
  __HAL_SPI_DISABLE(hspi);
 8009532:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009534:	0c00      	lsrs	r0, r0, #16
 8009536:	f000 0004 	and.w	r0, r0, #4
  __HAL_SPI_DISABLE(hspi);
 800953a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800953e:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009540:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009542:	6048      	str	r0, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009544:	69cb      	ldr	r3, [r1, #28]
  return HAL_OK;
 8009546:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009548:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800954c:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800954e:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009550:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
}
 8009554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009556:	6842      	ldr	r2, [r0, #4]
 8009558:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800955c:	d0bb      	beq.n	80094d6 <HAL_SPI_Init+0x12>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800955e:	61c3      	str	r3, [r0, #28]
 8009560:	e7b9      	b.n	80094d6 <HAL_SPI_Init+0x12>
    return HAL_ERROR;
 8009562:	2001      	movs	r0, #1
}
 8009564:	4770      	bx	lr
    hspi->Lock = HAL_UNLOCKED;
 8009566:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800956a:	f7fd fb49 	bl	8006c00 <HAL_SPI_MspInit>
 800956e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009570:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009574:	e7b9      	b.n	80094ea <HAL_SPI_Init+0x26>
 8009576:	bf00      	nop

08009578 <HAL_SPI_TransmitReceive>:
{
 8009578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hspi);
 800957c:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
{
 8009580:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8009582:	2c01      	cmp	r4, #1
 8009584:	f000 8090 	beq.w	80096a8 <HAL_SPI_TransmitReceive+0x130>
 8009588:	461e      	mov	r6, r3
 800958a:	2301      	movs	r3, #1
 800958c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 8009590:	4604      	mov	r4, r0
 8009592:	4617      	mov	r7, r2
 8009594:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 8009596:	f7fd fda3 	bl	80070e0 <HAL_GetTick>
 800959a:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 800959c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 80095a0:	6863      	ldr	r3, [r4, #4]
  tmp_state           = hspi->State;
 80095a2:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80095a4:	2801      	cmp	r0, #1
 80095a6:	d011      	beq.n	80095cc <HAL_SPI_TransmitReceive+0x54>
 80095a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095ac:	d009      	beq.n	80095c2 <HAL_SPI_TransmitReceive+0x4a>
    errorcode = HAL_BUSY;
 80095ae:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80095b0:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80095b2:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80095b4:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80095b8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80095bc:	b002      	add	sp, #8
 80095be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80095c2:	68a2      	ldr	r2, [r4, #8]
 80095c4:	2a00      	cmp	r2, #0
 80095c6:	d1f2      	bne.n	80095ae <HAL_SPI_TransmitReceive+0x36>
 80095c8:	2804      	cmp	r0, #4
 80095ca:	d1f0      	bne.n	80095ae <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80095cc:	2d00      	cmp	r5, #0
 80095ce:	d06f      	beq.n	80096b0 <HAL_SPI_TransmitReceive+0x138>
 80095d0:	2f00      	cmp	r7, #0
 80095d2:	d06d      	beq.n	80096b0 <HAL_SPI_TransmitReceive+0x138>
 80095d4:	2e00      	cmp	r6, #0
 80095d6:	d06b      	beq.n	80096b0 <HAL_SPI_TransmitReceive+0x138>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80095d8:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095dc:	6820      	ldr	r0, [r4, #0]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80095de:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80095e0:	bf1c      	itt	ne
 80095e2:	2205      	movne	r2, #5
 80095e4:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095e8:	2200      	movs	r2, #0
 80095ea:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 80095ec:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80095ee:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095f0:	6801      	ldr	r1, [r0, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80095f2:	63a7      	str	r7, [r4, #56]	; 0x38
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095f4:	064f      	lsls	r7, r1, #25
  hspi->RxXferSize  = Size;
 80095f6:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80095f8:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80095fa:	86a6      	strh	r6, [r4, #52]	; 0x34
  hspi->TxISR       = NULL;
 80095fc:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009600:	d403      	bmi.n	800960a <HAL_SPI_TransmitReceive+0x92>
    __HAL_SPI_ENABLE(hspi);
 8009602:	6802      	ldr	r2, [r0, #0]
 8009604:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009608:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800960a:	68e2      	ldr	r2, [r4, #12]
 800960c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8009610:	f000 8085 	beq.w	800971e <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009614:	2b00      	cmp	r3, #0
 8009616:	f000 80ea 	beq.w	80097ee <HAL_SPI_TransmitReceive+0x276>
 800961a:	2e01      	cmp	r6, #1
 800961c:	f000 80e7 	beq.w	80097ee <HAL_SPI_TransmitReceive+0x276>
 8009620:	9b08      	ldr	r3, [sp, #32]
        txallowed = 1U;
 8009622:	2501      	movs	r5, #1
 8009624:	3301      	adds	r3, #1
 8009626:	d027      	beq.n	8009678 <HAL_SPI_TransmitReceive+0x100>
 8009628:	e044      	b.n	80096b4 <HAL_SPI_TransmitReceive+0x13c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800962a:	6823      	ldr	r3, [r4, #0]
 800962c:	689a      	ldr	r2, [r3, #8]
 800962e:	0796      	lsls	r6, r2, #30
 8009630:	d50f      	bpl.n	8009652 <HAL_SPI_TransmitReceive+0xda>
 8009632:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8009634:	b292      	uxth	r2, r2
 8009636:	b162      	cbz	r2, 8009652 <HAL_SPI_TransmitReceive+0xda>
 8009638:	b15d      	cbz	r5, 8009652 <HAL_SPI_TransmitReceive+0xda>
        txallowed = 0U;
 800963a:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800963c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800963e:	7812      	ldrb	r2, [r2, #0]
 8009640:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8009642:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8009644:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8009646:	3a01      	subs	r2, #1
        hspi->pTxBuffPtr++;
 8009648:	1c59      	adds	r1, r3, #1
        hspi->TxXferCount--;
 800964a:	b292      	uxth	r2, r2
 800964c:	6823      	ldr	r3, [r4, #0]
 800964e:	86e2      	strh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8009650:	6321      	str	r1, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009652:	689a      	ldr	r2, [r3, #8]
 8009654:	07d0      	lsls	r0, r2, #31
 8009656:	d50d      	bpl.n	8009674 <HAL_SPI_TransmitReceive+0xfc>
 8009658:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800965a:	b292      	uxth	r2, r2
 800965c:	b152      	cbz	r2, 8009674 <HAL_SPI_TransmitReceive+0xfc>
        txallowed = 1U;
 800965e:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009660:	68da      	ldr	r2, [r3, #12]
 8009662:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009664:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8009666:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8009668:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800966a:	3b01      	subs	r3, #1
 800966c:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 800966e:	442a      	add	r2, r5
        hspi->RxXferCount--;
 8009670:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8009672:	63a2      	str	r2, [r4, #56]	; 0x38
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009674:	f7fd fd34 	bl	80070e0 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009678:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800967a:	b29b      	uxth	r3, r3
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1d4      	bne.n	800962a <HAL_SPI_TransmitReceive+0xb2>
 8009680:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009682:	b29b      	uxth	r3, r3
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1d0      	bne.n	800962a <HAL_SPI_TransmitReceive+0xb2>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009688:	4643      	mov	r3, r8
 800968a:	9a08      	ldr	r2, [sp, #32]
 800968c:	2180      	movs	r1, #128	; 0x80
 800968e:	4620      	mov	r0, r4
 8009690:	f7ff feb8 	bl	8009404 <SPI_WaitFlagStateUntilTimeout.constprop.8>
 8009694:	2800      	cmp	r0, #0
 8009696:	f000 80bd 	beq.w	8009814 <HAL_SPI_TransmitReceive+0x29c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800969a:	2220      	movs	r2, #32
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800969c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800969e:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096a0:	4313      	orrs	r3, r2
 80096a2:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80096a4:	6562      	str	r2, [r4, #84]	; 0x54
 80096a6:	e783      	b.n	80095b0 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 80096a8:	2002      	movs	r0, #2
}
 80096aa:	b002      	add	sp, #8
 80096ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errorcode = HAL_ERROR;
 80096b0:	2001      	movs	r0, #1
 80096b2:	e77d      	b.n	80095b0 <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	b91b      	cbnz	r3, 80096c2 <HAL_SPI_TransmitReceive+0x14a>
 80096ba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80096bc:	b29b      	uxth	r3, r3
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d0e2      	beq.n	8009688 <HAL_SPI_TransmitReceive+0x110>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80096c2:	6823      	ldr	r3, [r4, #0]
 80096c4:	689a      	ldr	r2, [r3, #8]
 80096c6:	0791      	lsls	r1, r2, #30
 80096c8:	d50f      	bpl.n	80096ea <HAL_SPI_TransmitReceive+0x172>
 80096ca:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80096cc:	b292      	uxth	r2, r2
 80096ce:	b162      	cbz	r2, 80096ea <HAL_SPI_TransmitReceive+0x172>
 80096d0:	b15d      	cbz	r5, 80096ea <HAL_SPI_TransmitReceive+0x172>
        txallowed = 0U;
 80096d2:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80096d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80096d6:	7812      	ldrb	r2, [r2, #0]
 80096d8:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80096da:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80096dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80096de:	3a01      	subs	r2, #1
        hspi->pTxBuffPtr++;
 80096e0:	1c59      	adds	r1, r3, #1
        hspi->TxXferCount--;
 80096e2:	b292      	uxth	r2, r2
 80096e4:	6823      	ldr	r3, [r4, #0]
 80096e6:	86e2      	strh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80096e8:	6321      	str	r1, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80096ea:	689a      	ldr	r2, [r3, #8]
 80096ec:	07d2      	lsls	r2, r2, #31
 80096ee:	d50d      	bpl.n	800970c <HAL_SPI_TransmitReceive+0x194>
 80096f0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80096f2:	b292      	uxth	r2, r2
 80096f4:	b152      	cbz	r2, 800970c <HAL_SPI_TransmitReceive+0x194>
        txallowed = 1U;
 80096f6:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80096f8:	68da      	ldr	r2, [r3, #12]
 80096fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80096fc:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 80096fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8009700:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8009702:	3b01      	subs	r3, #1
 8009704:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 8009706:	442a      	add	r2, r5
        hspi->RxXferCount--;
 8009708:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 800970a:	63a2      	str	r2, [r4, #56]	; 0x38
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800970c:	f7fd fce8 	bl	80070e0 <HAL_GetTick>
 8009710:	9b08      	ldr	r3, [sp, #32]
 8009712:	eba0 0008 	sub.w	r0, r0, r8
 8009716:	4283      	cmp	r3, r0
 8009718:	d8cc      	bhi.n	80096b4 <HAL_SPI_TransmitReceive+0x13c>
        errorcode = HAL_TIMEOUT;
 800971a:	2003      	movs	r0, #3
 800971c:	e748      	b.n	80095b0 <HAL_SPI_TransmitReceive+0x38>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800971e:	2b00      	cmp	r3, #0
 8009720:	d06f      	beq.n	8009802 <HAL_SPI_TransmitReceive+0x28a>
 8009722:	2e01      	cmp	r6, #1
 8009724:	d06d      	beq.n	8009802 <HAL_SPI_TransmitReceive+0x28a>
 8009726:	9b08      	ldr	r3, [sp, #32]
{
 8009728:	2501      	movs	r5, #1
 800972a:	3301      	adds	r3, #1
 800972c:	d024      	beq.n	8009778 <HAL_SPI_TransmitReceive+0x200>
 800972e:	e02c      	b.n	800978a <HAL_SPI_TransmitReceive+0x212>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009730:	6823      	ldr	r3, [r4, #0]
 8009732:	689a      	ldr	r2, [r3, #8]
 8009734:	0790      	lsls	r0, r2, #30
 8009736:	d50d      	bpl.n	8009754 <HAL_SPI_TransmitReceive+0x1dc>
 8009738:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800973a:	b292      	uxth	r2, r2
 800973c:	b152      	cbz	r2, 8009754 <HAL_SPI_TransmitReceive+0x1dc>
 800973e:	b14d      	cbz	r5, 8009754 <HAL_SPI_TransmitReceive+0x1dc>
        txallowed = 0U;
 8009740:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009742:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009744:	f831 2b02 	ldrh.w	r2, [r1], #2
 8009748:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800974a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800974c:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800974e:	3a01      	subs	r2, #1
 8009750:	b292      	uxth	r2, r2
 8009752:	86e2      	strh	r2, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009754:	689a      	ldr	r2, [r3, #8]
 8009756:	07d1      	lsls	r1, r2, #31
 8009758:	d50c      	bpl.n	8009774 <HAL_SPI_TransmitReceive+0x1fc>
 800975a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800975c:	b292      	uxth	r2, r2
 800975e:	b14a      	cbz	r2, 8009774 <HAL_SPI_TransmitReceive+0x1fc>
        txallowed = 1U;
 8009760:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009766:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 800976a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800976c:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800976e:	3b01      	subs	r3, #1
 8009770:	b29b      	uxth	r3, r3
 8009772:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009774:	f7fd fcb4 	bl	80070e0 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009778:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800977a:	b29b      	uxth	r3, r3
 800977c:	2b00      	cmp	r3, #0
 800977e:	d1d7      	bne.n	8009730 <HAL_SPI_TransmitReceive+0x1b8>
 8009780:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009782:	b29b      	uxth	r3, r3
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1d3      	bne.n	8009730 <HAL_SPI_TransmitReceive+0x1b8>
 8009788:	e77e      	b.n	8009688 <HAL_SPI_TransmitReceive+0x110>
 800978a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800978c:	b29b      	uxth	r3, r3
 800978e:	b923      	cbnz	r3, 800979a <HAL_SPI_TransmitReceive+0x222>
 8009790:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009792:	b29b      	uxth	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	f43f af77 	beq.w	8009688 <HAL_SPI_TransmitReceive+0x110>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800979a:	6823      	ldr	r3, [r4, #0]
 800979c:	689a      	ldr	r2, [r3, #8]
 800979e:	0792      	lsls	r2, r2, #30
 80097a0:	d50d      	bpl.n	80097be <HAL_SPI_TransmitReceive+0x246>
 80097a2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80097a4:	b292      	uxth	r2, r2
 80097a6:	b152      	cbz	r2, 80097be <HAL_SPI_TransmitReceive+0x246>
 80097a8:	b14d      	cbz	r5, 80097be <HAL_SPI_TransmitReceive+0x246>
        txallowed = 0U;
 80097aa:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80097ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80097ae:	f831 2b02 	ldrh.w	r2, [r1], #2
 80097b2:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80097b4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80097b6:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80097b8:	3a01      	subs	r2, #1
 80097ba:	b292      	uxth	r2, r2
 80097bc:	86e2      	strh	r2, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80097be:	689a      	ldr	r2, [r3, #8]
 80097c0:	07d7      	lsls	r7, r2, #31
 80097c2:	d50c      	bpl.n	80097de <HAL_SPI_TransmitReceive+0x266>
 80097c4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80097c6:	b292      	uxth	r2, r2
 80097c8:	b14a      	cbz	r2, 80097de <HAL_SPI_TransmitReceive+0x266>
        txallowed = 1U;
 80097ca:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80097d0:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 80097d4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80097d6:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80097d8:	3b01      	subs	r3, #1
 80097da:	b29b      	uxth	r3, r3
 80097dc:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80097de:	f7fd fc7f 	bl	80070e0 <HAL_GetTick>
 80097e2:	9b08      	ldr	r3, [sp, #32]
 80097e4:	eba0 0008 	sub.w	r0, r0, r8
 80097e8:	4283      	cmp	r3, r0
 80097ea:	d8ce      	bhi.n	800978a <HAL_SPI_TransmitReceive+0x212>
 80097ec:	e795      	b.n	800971a <HAL_SPI_TransmitReceive+0x1a2>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097ee:	782b      	ldrb	r3, [r5, #0]
 80097f0:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 80097f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80097f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80097f6:	3b01      	subs	r3, #1
 80097f8:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80097fa:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80097fc:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80097fe:	6322      	str	r2, [r4, #48]	; 0x30
 8009800:	e70e      	b.n	8009620 <HAL_SPI_TransmitReceive+0xa8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009802:	f835 3b02 	ldrh.w	r3, [r5], #2
 8009806:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8009808:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800980a:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800980c:	3b01      	subs	r3, #1
 800980e:	b29b      	uxth	r3, r3
 8009810:	86e3      	strh	r3, [r4, #54]	; 0x36
 8009812:	e788      	b.n	8009726 <HAL_SPI_TransmitReceive+0x1ae>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009814:	68a3      	ldr	r3, [r4, #8]
 8009816:	2b00      	cmp	r3, #0
 8009818:	f47f aeca 	bne.w	80095b0 <HAL_SPI_TransmitReceive+0x38>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800981c:	6823      	ldr	r3, [r4, #0]
 800981e:	9001      	str	r0, [sp, #4]
 8009820:	68da      	ldr	r2, [r3, #12]
 8009822:	9201      	str	r2, [sp, #4]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	9301      	str	r3, [sp, #4]
 8009828:	9b01      	ldr	r3, [sp, #4]
 800982a:	e6c1      	b.n	80095b0 <HAL_SPI_TransmitReceive+0x38>

0800982c <HAL_SPI_ErrorCallback>:
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop

08009830 <HAL_SPI_IRQHandler>:
{
 8009830:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8009832:	6805      	ldr	r5, [r0, #0]
{
 8009834:	b084      	sub	sp, #16
  uint32_t itsource = hspi->Instance->CR2;
 8009836:	686e      	ldr	r6, [r5, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8009838:	68ab      	ldr	r3, [r5, #8]
{
 800983a:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800983c:	f3c3 1180 	ubfx	r1, r3, #6, #1
 8009840:	b941      	cbnz	r1, 8009854 <HAL_SPI_IRQHandler+0x24>
 8009842:	07da      	lsls	r2, r3, #31
 8009844:	d506      	bpl.n	8009854 <HAL_SPI_IRQHandler+0x24>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009846:	0672      	lsls	r2, r6, #25
 8009848:	d504      	bpl.n	8009854 <HAL_SPI_IRQHandler+0x24>
    hspi->RxISR(hspi);
 800984a:	6c03      	ldr	r3, [r0, #64]	; 0x40
}
 800984c:	b004      	add	sp, #16
 800984e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hspi->TxISR(hspi);
 8009852:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009854:	0798      	lsls	r0, r3, #30
 8009856:	d507      	bpl.n	8009868 <HAL_SPI_IRQHandler+0x38>
 8009858:	0632      	lsls	r2, r6, #24
 800985a:	d505      	bpl.n	8009868 <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 800985c:	4620      	mov	r0, r4
 800985e:	6c63      	ldr	r3, [r4, #68]	; 0x44
}
 8009860:	b004      	add	sp, #16
 8009862:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hspi->TxISR(hspi);
 8009866:	4718      	bx	r3
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8009868:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800986c:	2b00      	cmp	r3, #0
 800986e:	d13a      	bne.n	80098e6 <HAL_SPI_IRQHandler+0xb6>
 8009870:	2900      	cmp	r1, #0
 8009872:	d036      	beq.n	80098e2 <HAL_SPI_IRQHandler+0xb2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009874:	06b2      	lsls	r2, r6, #26
 8009876:	d534      	bpl.n	80098e2 <HAL_SPI_IRQHandler+0xb2>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009878:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 800987c:	2903      	cmp	r1, #3
 800987e:	d043      	beq.n	8009908 <HAL_SPI_IRQHandler+0xd8>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009880:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8009882:	f041 0104 	orr.w	r1, r1, #4
 8009886:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009888:	9301      	str	r3, [sp, #4]
 800988a:	68eb      	ldr	r3, [r5, #12]
 800988c:	9301      	str	r3, [sp, #4]
 800988e:	68ab      	ldr	r3, [r5, #8]
 8009890:	9301      	str	r3, [sp, #4]
 8009892:	9b01      	ldr	r3, [sp, #4]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009894:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009896:	b323      	cbz	r3, 80098e2 <HAL_SPI_IRQHandler+0xb2>
      hspi->State = HAL_SPI_STATE_READY;
 8009898:	2201      	movs	r2, #1
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800989a:	686b      	ldr	r3, [r5, #4]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800989c:	07b1      	lsls	r1, r6, #30
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800989e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80098a2:	606b      	str	r3, [r5, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80098a4:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80098a8:	d036      	beq.n	8009918 <HAL_SPI_IRQHandler+0xe8>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80098aa:	686b      	ldr	r3, [r5, #4]
        if (hspi->hdmarx != NULL)
 80098ac:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80098ae:	f023 0303 	bic.w	r3, r3, #3
 80098b2:	606b      	str	r3, [r5, #4]
        if (hspi->hdmarx != NULL)
 80098b4:	b14a      	cbz	r2, 80098ca <HAL_SPI_IRQHandler+0x9a>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80098b6:	4b22      	ldr	r3, [pc, #136]	; (8009940 <HAL_SPI_IRQHandler+0x110>)
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80098b8:	4610      	mov	r0, r2
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80098ba:	6353      	str	r3, [r2, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80098bc:	f7fd fc7e 	bl	80071bc <HAL_DMA_Abort_IT>
 80098c0:	b118      	cbz	r0, 80098ca <HAL_SPI_IRQHandler+0x9a>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80098c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80098c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098c8:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80098ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80098cc:	b14b      	cbz	r3, 80098e2 <HAL_SPI_IRQHandler+0xb2>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80098ce:	4a1c      	ldr	r2, [pc, #112]	; (8009940 <HAL_SPI_IRQHandler+0x110>)
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80098d0:	4618      	mov	r0, r3
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80098d2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80098d4:	f7fd fc72 	bl	80071bc <HAL_DMA_Abort_IT>
 80098d8:	b118      	cbz	r0, 80098e2 <HAL_SPI_IRQHandler+0xb2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80098da:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80098dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098e0:	6563      	str	r3, [r4, #84]	; 0x54
}
 80098e2:	b004      	add	sp, #16
 80098e4:	bd70      	pop	{r4, r5, r6, pc}
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80098e6:	06b0      	lsls	r0, r6, #26
 80098e8:	d5fb      	bpl.n	80098e2 <HAL_SPI_IRQHandler+0xb2>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80098ea:	b9c9      	cbnz	r1, 8009920 <HAL_SPI_IRQHandler+0xf0>
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80098ec:	2100      	movs	r1, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80098ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80098f0:	f043 0301 	orr.w	r3, r3, #1
 80098f4:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80098f6:	9103      	str	r1, [sp, #12]
 80098f8:	68ab      	ldr	r3, [r5, #8]
 80098fa:	9303      	str	r3, [sp, #12]
 80098fc:	682b      	ldr	r3, [r5, #0]
 80098fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009902:	602b      	str	r3, [r5, #0]
 8009904:	9b03      	ldr	r3, [sp, #12]
 8009906:	e7c5      	b.n	8009894 <HAL_SPI_IRQHandler+0x64>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009908:	2300      	movs	r3, #0
 800990a:	9302      	str	r3, [sp, #8]
 800990c:	68eb      	ldr	r3, [r5, #12]
 800990e:	9302      	str	r3, [sp, #8]
 8009910:	68ab      	ldr	r3, [r5, #8]
 8009912:	9302      	str	r3, [sp, #8]
 8009914:	9b02      	ldr	r3, [sp, #8]
        return;
 8009916:	e7e4      	b.n	80098e2 <HAL_SPI_IRQHandler+0xb2>
        HAL_SPI_ErrorCallback(hspi);
 8009918:	4620      	mov	r0, r4
 800991a:	f7ff ff87 	bl	800982c <HAL_SPI_ErrorCallback>
 800991e:	e7e0      	b.n	80098e2 <HAL_SPI_IRQHandler+0xb2>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009920:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8009924:	2b03      	cmp	r3, #3
 8009926:	d0ef      	beq.n	8009908 <HAL_SPI_IRQHandler+0xd8>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009928:	2100      	movs	r1, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800992a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800992c:	f043 0304 	orr.w	r3, r3, #4
 8009930:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009932:	9101      	str	r1, [sp, #4]
 8009934:	68eb      	ldr	r3, [r5, #12]
 8009936:	9301      	str	r3, [sp, #4]
 8009938:	68ab      	ldr	r3, [r5, #8]
 800993a:	9301      	str	r3, [sp, #4]
 800993c:	9b01      	ldr	r3, [sp, #4]
 800993e:	e7d5      	b.n	80098ec <HAL_SPI_IRQHandler+0xbc>
 8009940:	08009945 	.word	0x08009945

08009944 <SPI_DMAAbortOnError>:
  hspi->RxXferCount = 0U;
 8009944:	2200      	movs	r2, #0
{
 8009946:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009948:	6a43      	ldr	r3, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 800994a:	87da      	strh	r2, [r3, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 800994c:	4618      	mov	r0, r3
  hspi->TxXferCount = 0U;
 800994e:	86da      	strh	r2, [r3, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8009950:	f7ff ff6c 	bl	800982c <HAL_SPI_ErrorCallback>
}
 8009954:	bd08      	pop	{r3, pc}
 8009956:	bf00      	nop

08009958 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009958:	2800      	cmp	r0, #0
 800995a:	d048      	beq.n	80099ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800995c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8009960:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8009962:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009966:	4604      	mov	r4, r0
 8009968:	b39b      	cbz	r3, 80099d2 <HAL_TIM_Base_Init+0x7a>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800996a:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800996c:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800996e:	4e29      	ldr	r6, [pc, #164]	; (8009a14 <HAL_TIM_Base_Init+0xbc>)
  htim->State = HAL_TIM_STATE_BUSY;
 8009970:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009974:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8009976:	6813      	ldr	r3, [r2, #0]
 8009978:	69a5      	ldr	r5, [r4, #24]
 800997a:	68e0      	ldr	r0, [r4, #12]
 800997c:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800997e:	d038      	beq.n	80099f2 <HAL_TIM_Base_Init+0x9a>
 8009980:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009984:	d02a      	beq.n	80099dc <HAL_TIM_Base_Init+0x84>
 8009986:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800998a:	42b2      	cmp	r2, r6
 800998c:	d026      	beq.n	80099dc <HAL_TIM_Base_Init+0x84>
 800998e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009992:	42b2      	cmp	r2, r6
 8009994:	d022      	beq.n	80099dc <HAL_TIM_Base_Init+0x84>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800999a:	432b      	orrs	r3, r5

  TIMx->CR1 = tmpcr1;
 800999c:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800999e:	62d0      	str	r0, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099a0:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099a2:	2301      	movs	r3, #1
  return HAL_OK;
 80099a4:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 80099a6:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099a8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099ac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80099b0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80099b4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80099b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099c4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80099c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80099cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80099d0:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80099d2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80099d6:	f7fd f955 	bl	8006c84 <HAL_TIM_Base_MspInit>
 80099da:	e7c6      	b.n	800996a <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 80099dc:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80099e2:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099e4:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80099e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099ea:	4333      	orrs	r3, r6
 80099ec:	e7d3      	b.n	8009996 <HAL_TIM_Base_Init+0x3e>
    return HAL_ERROR;
 80099ee:	2001      	movs	r0, #1
}
 80099f0:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80099f2:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80099f8:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099fa:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80099fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a00:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a06:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009a08:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a0a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009a0c:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8009a0e:	6963      	ldr	r3, [r4, #20]
 8009a10:	6313      	str	r3, [r2, #48]	; 0x30
 8009a12:	e7c6      	b.n	80099a2 <HAL_TIM_Base_Init+0x4a>
 8009a14:	40012c00 	.word	0x40012c00

08009a18 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8009a18:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d001      	beq.n	8009a24 <HAL_TIM_Base_Start+0xc>
    return HAL_ERROR;
 8009a20:	2001      	movs	r0, #1
 8009a22:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 8009a24:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a26:	6803      	ldr	r3, [r0, #0]
 8009a28:	4a0e      	ldr	r2, [pc, #56]	; (8009a64 <HAL_TIM_Base_Start+0x4c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8009a2a:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d010      	beq.n	8009a54 <HAL_TIM_Base_Start+0x3c>
 8009a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a36:	d00d      	beq.n	8009a54 <HAL_TIM_Base_Start+0x3c>
 8009a38:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d009      	beq.n	8009a54 <HAL_TIM_Base_Start+0x3c>
 8009a40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d005      	beq.n	8009a54 <HAL_TIM_Base_Start+0x3c>
    __HAL_TIM_ENABLE(htim);
 8009a48:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8009a4a:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8009a4c:	f042 0201 	orr.w	r2, r2, #1
 8009a50:	601a      	str	r2, [r3, #0]
 8009a52:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a54:	689a      	ldr	r2, [r3, #8]
 8009a56:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a5a:	2a06      	cmp	r2, #6
 8009a5c:	d1f4      	bne.n	8009a48 <HAL_TIM_Base_Start+0x30>
  return HAL_OK;
 8009a5e:	2000      	movs	r0, #0
}
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	40012c00 	.word	0x40012c00

08009a68 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8009a68:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d001      	beq.n	8009a74 <HAL_TIM_Base_Start_IT+0xc>
    return HAL_ERROR;
 8009a70:	2001      	movs	r0, #1
 8009a72:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 8009a74:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a76:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009a78:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a7c:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a7e:	490e      	ldr	r1, [pc, #56]	; (8009ab8 <HAL_TIM_Base_Start_IT+0x50>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a80:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a84:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a86:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a88:	d00f      	beq.n	8009aaa <HAL_TIM_Base_Start_IT+0x42>
 8009a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a8e:	d00c      	beq.n	8009aaa <HAL_TIM_Base_Start_IT+0x42>
 8009a90:	4a0a      	ldr	r2, [pc, #40]	; (8009abc <HAL_TIM_Base_Start_IT+0x54>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d009      	beq.n	8009aaa <HAL_TIM_Base_Start_IT+0x42>
 8009a96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d005      	beq.n	8009aaa <HAL_TIM_Base_Start_IT+0x42>
    __HAL_TIM_ENABLE(htim);
 8009a9e:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8009aa0:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8009aa2:	f042 0201 	orr.w	r2, r2, #1
 8009aa6:	601a      	str	r2, [r3, #0]
 8009aa8:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009aaa:	689a      	ldr	r2, [r3, #8]
 8009aac:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ab0:	2a06      	cmp	r2, #6
 8009ab2:	d1f4      	bne.n	8009a9e <HAL_TIM_Base_Start_IT+0x36>
  return HAL_OK;
 8009ab4:	2000      	movs	r0, #0
}
 8009ab6:	4770      	bx	lr
 8009ab8:	40012c00 	.word	0x40012c00
 8009abc:	40000400 	.word	0x40000400

08009ac0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8009ac0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d05a      	beq.n	8009b7e <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 8009ac8:	2202      	movs	r2, #2
{
 8009aca:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8009acc:	2501      	movs	r5, #1
  tmpsmcr = htim->Instance->SMCR;
 8009ace:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009ad0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8009ad4:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8009ad6:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ad8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8009adc:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8009ae0:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8009ae2:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8009ae6:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8009ae8:	d074      	beq.n	8009bd4 <HAL_TIM_ConfigClockSource+0x114>
 8009aea:	d94a      	bls.n	8009b82 <HAL_TIM_ConfigClockSource+0xc2>
 8009aec:	2c60      	cmp	r4, #96	; 0x60
 8009aee:	d02d      	beq.n	8009b4c <HAL_TIM_ConfigClockSource+0x8c>
 8009af0:	d956      	bls.n	8009ba0 <HAL_TIM_ConfigClockSource+0xe0>
 8009af2:	2c70      	cmp	r4, #112	; 0x70
 8009af4:	d01a      	beq.n	8009b2c <HAL_TIM_ConfigClockSource+0x6c>
 8009af6:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8009afa:	d10e      	bne.n	8009b1a <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009afc:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8009b00:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8009b02:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b04:	432a      	orrs	r2, r5
 8009b06:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b0a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b0e:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b10:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b12:	689a      	ldr	r2, [r3, #8]
 8009b14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b18:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	bcf0      	pop	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_READY;
 8009b1e:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8009b20:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8009b24:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  return HAL_OK;
 8009b28:	4618      	mov	r0, r3
}
 8009b2a:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b2c:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8009b30:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8009b32:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b34:	432a      	orrs	r2, r5
 8009b36:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b3a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b3e:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8009b40:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8009b42:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b44:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8009b48:	609a      	str	r2, [r3, #8]
      break;
 8009b4a:	e7e6      	b.n	8009b1a <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b4c:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b4e:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b50:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b54:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b56:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b58:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8009b5a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b5c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b64:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b68:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8009b6c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b6e:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8009b70:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b76:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8009b7a:	609a      	str	r2, [r3, #8]
 8009b7c:	e7cd      	b.n	8009b1a <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8009b7e:	2002      	movs	r0, #2
}
 8009b80:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8009b82:	2c10      	cmp	r4, #16
 8009b84:	d004      	beq.n	8009b90 <HAL_TIM_ConfigClockSource+0xd0>
 8009b86:	d93d      	bls.n	8009c04 <HAL_TIM_ConfigClockSource+0x144>
 8009b88:	2c20      	cmp	r4, #32
 8009b8a:	d001      	beq.n	8009b90 <HAL_TIM_ConfigClockSource+0xd0>
 8009b8c:	2c30      	cmp	r4, #48	; 0x30
 8009b8e:	d1c4      	bne.n	8009b1a <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 8009b90:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b92:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b9a:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 8009b9c:	609c      	str	r4, [r3, #8]
 8009b9e:	e7bc      	b.n	8009b1a <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8009ba0:	2c50      	cmp	r4, #80	; 0x50
 8009ba2:	d1ba      	bne.n	8009b1a <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8009ba4:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ba6:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ba8:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009baa:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bae:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bb0:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bb2:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009bb4:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bb8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009bbc:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8009bc0:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8009bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bc4:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8009bc6:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009bc8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009bcc:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8009bd0:	609a      	str	r2, [r3, #8]
 8009bd2:	e7a2      	b.n	8009b1a <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8009bd4:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bd6:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bd8:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bda:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bde:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009be0:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009be2:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009be4:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009be8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009bec:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8009bf0:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8009bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bf4:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8009bf6:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009bf8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009bfc:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8009c00:	609a      	str	r2, [r3, #8]
 8009c02:	e78a      	b.n	8009b1a <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8009c04:	2c00      	cmp	r4, #0
 8009c06:	d0c3      	beq.n	8009b90 <HAL_TIM_ConfigClockSource+0xd0>
 8009c08:	e787      	b.n	8009b1a <HAL_TIM_ConfigClockSource+0x5a>
 8009c0a:	bf00      	nop

08009c0c <HAL_TIM_OC_DelayElapsedCallback>:
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop

08009c10 <HAL_TIM_IC_CaptureCallback>:
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop

08009c14 <HAL_TIM_PWM_PulseFinishedCallback>:
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop

08009c18 <HAL_TIM_TriggerCallback>:
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop

08009c1c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c1c:	6803      	ldr	r3, [r0, #0]
{
 8009c1e:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c20:	691a      	ldr	r2, [r3, #16]
{
 8009c22:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c24:	0791      	lsls	r1, r2, #30
 8009c26:	d502      	bpl.n	8009c2e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c28:	68da      	ldr	r2, [r3, #12]
 8009c2a:	0792      	lsls	r2, r2, #30
 8009c2c:	d45f      	bmi.n	8009cee <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c2e:	691a      	ldr	r2, [r3, #16]
 8009c30:	0750      	lsls	r0, r2, #29
 8009c32:	d502      	bpl.n	8009c3a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c34:	68da      	ldr	r2, [r3, #12]
 8009c36:	0751      	lsls	r1, r2, #29
 8009c38:	d446      	bmi.n	8009cc8 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c3a:	691a      	ldr	r2, [r3, #16]
 8009c3c:	0712      	lsls	r2, r2, #28
 8009c3e:	d502      	bpl.n	8009c46 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c40:	68da      	ldr	r2, [r3, #12]
 8009c42:	0710      	lsls	r0, r2, #28
 8009c44:	d42e      	bmi.n	8009ca4 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c46:	691a      	ldr	r2, [r3, #16]
 8009c48:	06d2      	lsls	r2, r2, #27
 8009c4a:	d502      	bpl.n	8009c52 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c4c:	68da      	ldr	r2, [r3, #12]
 8009c4e:	06d0      	lsls	r0, r2, #27
 8009c50:	d418      	bmi.n	8009c84 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c52:	691a      	ldr	r2, [r3, #16]
 8009c54:	07d1      	lsls	r1, r2, #31
 8009c56:	d502      	bpl.n	8009c5e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c58:	68da      	ldr	r2, [r3, #12]
 8009c5a:	07d2      	lsls	r2, r2, #31
 8009c5c:	d45d      	bmi.n	8009d1a <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c5e:	691a      	ldr	r2, [r3, #16]
 8009c60:	0610      	lsls	r0, r2, #24
 8009c62:	d502      	bpl.n	8009c6a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c64:	68da      	ldr	r2, [r3, #12]
 8009c66:	0611      	lsls	r1, r2, #24
 8009c68:	d45f      	bmi.n	8009d2a <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c6a:	691a      	ldr	r2, [r3, #16]
 8009c6c:	0652      	lsls	r2, r2, #25
 8009c6e:	d502      	bpl.n	8009c76 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c70:	68da      	ldr	r2, [r3, #12]
 8009c72:	0650      	lsls	r0, r2, #25
 8009c74:	d461      	bmi.n	8009d3a <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c76:	691a      	ldr	r2, [r3, #16]
 8009c78:	0691      	lsls	r1, r2, #26
 8009c7a:	d502      	bpl.n	8009c82 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009c7c:	68da      	ldr	r2, [r3, #12]
 8009c7e:	0692      	lsls	r2, r2, #26
 8009c80:	d443      	bmi.n	8009d0a <HAL_TIM_IRQHandler+0xee>
}
 8009c82:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c84:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c88:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c8a:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c8c:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8009c8e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c90:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c94:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c96:	d064      	beq.n	8009d62 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8009c98:	f7ff ffba 	bl	8009c10 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	6823      	ldr	r3, [r4, #0]
 8009ca0:	7722      	strb	r2, [r4, #28]
 8009ca2:	e7d6      	b.n	8009c52 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ca4:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ca8:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009caa:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009cac:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8009cae:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009cb0:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009cb2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009cb4:	d152      	bne.n	8009d5c <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cb6:	f7ff ffa9 	bl	8009c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f7ff ffaa 	bl	8009c14 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	6823      	ldr	r3, [r4, #0]
 8009cc4:	7722      	strb	r2, [r4, #28]
 8009cc6:	e7be      	b.n	8009c46 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009cc8:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ccc:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009cce:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cd0:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8009cd2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cd4:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cd8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cda:	d13c      	bne.n	8009d56 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cdc:	f7ff ff96 	bl	8009c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	f7ff ff97 	bl	8009c14 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	6823      	ldr	r3, [r4, #0]
 8009cea:	7722      	strb	r2, [r4, #28]
 8009cec:	e7a5      	b.n	8009c3a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009cee:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cf2:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009cf4:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009cf6:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cf8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009cfa:	079b      	lsls	r3, r3, #30
 8009cfc:	d025      	beq.n	8009d4a <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8009cfe:	f7ff ff87 	bl	8009c10 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d02:	2200      	movs	r2, #0
 8009d04:	6823      	ldr	r3, [r4, #0]
 8009d06:	7722      	strb	r2, [r4, #28]
 8009d08:	e791      	b.n	8009c2e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d0a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8009d0e:	4620      	mov	r0, r4
}
 8009d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d14:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8009d16:	f000 b85f 	b.w	8009dd8 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d1a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d1e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d20:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d22:	f7fc feef 	bl	8006b04 <HAL_TIM_PeriodElapsedCallback>
 8009d26:	6823      	ldr	r3, [r4, #0]
 8009d28:	e799      	b.n	8009c5e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8009d2e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d30:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009d32:	f000 f853 	bl	8009ddc <HAL_TIMEx_BreakCallback>
 8009d36:	6823      	ldr	r3, [r4, #0]
 8009d38:	e797      	b.n	8009c6a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8009d3e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d40:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009d42:	f7ff ff69 	bl	8009c18 <HAL_TIM_TriggerCallback>
 8009d46:	6823      	ldr	r3, [r4, #0]
 8009d48:	e795      	b.n	8009c76 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d4a:	f7ff ff5f 	bl	8009c0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f7ff ff60 	bl	8009c14 <HAL_TIM_PWM_PulseFinishedCallback>
 8009d54:	e7d5      	b.n	8009d02 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8009d56:	f7ff ff5b 	bl	8009c10 <HAL_TIM_IC_CaptureCallback>
 8009d5a:	e7c4      	b.n	8009ce6 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8009d5c:	f7ff ff58 	bl	8009c10 <HAL_TIM_IC_CaptureCallback>
 8009d60:	e7ae      	b.n	8009cc0 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d62:	f7ff ff53 	bl	8009c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d66:	4620      	mov	r0, r4
 8009d68:	f7ff ff54 	bl	8009c14 <HAL_TIM_PWM_PulseFinishedCallback>
 8009d6c:	e796      	b.n	8009c9c <HAL_TIM_IRQHandler+0x80>
 8009d6e:	bf00      	nop

08009d70 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d70:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d029      	beq.n	8009dcc <HAL_TIMEx_MasterConfigSynchronization+0x5c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d78:	2202      	movs	r2, #2
{
 8009d7a:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8009d7c:	2601      	movs	r6, #1

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d7e:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009d80:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8009d84:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d86:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d88:	4d11      	ldr	r5, [pc, #68]	; (8009dd0 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d8a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d8e:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d90:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 8009d92:	689c      	ldr	r4, [r3, #8]
  __HAL_LOCK(htim);
 8009d94:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  htim->Instance->CR2 = tmpcr2;
 8009d98:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d9a:	d009      	beq.n	8009db0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8009d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009da0:	d006      	beq.n	8009db0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8009da2:	4a0c      	ldr	r2, [pc, #48]	; (8009dd4 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d003      	beq.n	8009db0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8009da8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d104      	bne.n	8009dba <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009db0:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009db2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009db6:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009db8:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8009dba:	2300      	movs	r3, #0

  return HAL_OK;
}
 8009dbc:	bc70      	pop	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_READY;
 8009dbe:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8009dc0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8009dc4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  return HAL_OK;
 8009dc8:	4618      	mov	r0, r3
}
 8009dca:	4770      	bx	lr
  __HAL_LOCK(htim);
 8009dcc:	2002      	movs	r0, #2
}
 8009dce:	4770      	bx	lr
 8009dd0:	40012c00 	.word	0x40012c00
 8009dd4:	40000400 	.word	0x40000400

08009dd8 <HAL_TIMEx_CommutCallback>:
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop

08009ddc <HAL_TIMEx_BreakCallback>:
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop

08009de0 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009de0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8009de4:	b983      	cbnz	r3, 8009e08 <osKernelInitialize+0x28>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009de6:	f3ef 8310 	mrs	r3, PRIMASK
 8009dea:	b96b      	cbnz	r3, 8009e08 <osKernelInitialize+0x28>
 8009dec:	4b08      	ldr	r3, [pc, #32]	; (8009e10 <osKernelInitialize+0x30>)
 8009dee:	6818      	ldr	r0, [r3, #0]
 8009df0:	2802      	cmp	r0, #2
 8009df2:	d003      	beq.n	8009dfc <osKernelInitialize+0x1c>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8009df4:	b928      	cbnz	r0, 8009e02 <osKernelInitialize+0x22>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8009df6:	2201      	movs	r2, #1
 8009df8:	601a      	str	r2, [r3, #0]
 8009dfa:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009dfc:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8009e00:	b913      	cbnz	r3, 8009e08 <osKernelInitialize+0x28>
      stat = osOK;
    } else {
      stat = osError;
 8009e02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  }

  return (stat);
}
 8009e06:	4770      	bx	lr
    stat = osErrorISR;
 8009e08:	f06f 0005 	mvn.w	r0, #5
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop
 8009e10:	20001e44 	.word	0x20001e44

08009e14 <osKernelStart>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e14:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e18:	b9c3      	cbnz	r3, 8009e4c <osKernelStart+0x38>
osStatus_t osKernelStart (void) {
 8009e1a:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e1c:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 8009e20:	b98c      	cbnz	r4, 8009e46 <osKernelStart+0x32>
 8009e22:	4b0c      	ldr	r3, [pc, #48]	; (8009e54 <osKernelStart+0x40>)
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	2a02      	cmp	r2, #2
 8009e28:	d007      	beq.n	8009e3a <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8009e2a:	2a01      	cmp	r2, #1
 8009e2c:	d108      	bne.n	8009e40 <osKernelStart+0x2c>
      KernelState = osKernelRunning;
 8009e2e:	2202      	movs	r2, #2
 8009e30:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8009e32:	f000 ff71 	bl	800ad18 <vTaskStartScheduler>
      stat = osOK;
 8009e36:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8009e38:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e3a:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8009e3e:	b913      	cbnz	r3, 8009e46 <osKernelStart+0x32>
      stat = osError;
 8009e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8009e44:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8009e46:	f06f 0005 	mvn.w	r0, #5
}
 8009e4a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8009e4c:	f06f 0005 	mvn.w	r0, #5
}
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	20001e44 	.word	0x20001e44

08009e58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009e58:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009e5a:	2400      	movs	r4, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009e5c:	b087      	sub	sp, #28
  hTask = NULL;
 8009e5e:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e60:	f3ef 8505 	mrs	r5, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8009e64:	2d00      	cmp	r5, #0
 8009e66:	d135      	bne.n	8009ed4 <osThreadNew+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e68:	f3ef 8310 	mrs	r3, PRIMASK
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d138      	bne.n	8009ee2 <osThreadNew+0x8a>
 8009e70:	4b25      	ldr	r3, [pc, #148]	; (8009f08 <osThreadNew+0xb0>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2b02      	cmp	r3, #2
 8009e76:	d030      	beq.n	8009eda <osThreadNew+0x82>
 8009e78:	b398      	cbz	r0, 8009ee2 <osThreadNew+0x8a>
 8009e7a:	460b      	mov	r3, r1
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	f88d 1013 	strb.w	r1, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8009e82:	b1e2      	cbz	r2, 8009ebe <osThreadNew+0x66>
      if (attr->name != NULL) {
 8009e84:	6811      	ldr	r1, [r2, #0]
 8009e86:	b399      	cbz	r1, 8009ef0 <osThreadNew+0x98>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8009e88:	6994      	ldr	r4, [r2, #24]
 8009e8a:	b36c      	cbz	r4, 8009ee8 <osThreadNew+0x90>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009e8c:	1e65      	subs	r5, r4, #1
 8009e8e:	2d37      	cmp	r5, #55	; 0x37
 8009e90:	d820      	bhi.n	8009ed4 <osThreadNew+0x7c>
 8009e92:	6855      	ldr	r5, [r2, #4]
 8009e94:	07ed      	lsls	r5, r5, #31
 8009e96:	d41d      	bmi.n	8009ed4 <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8009e98:	6955      	ldr	r5, [r2, #20]
 8009e9a:	bb3d      	cbnz	r5, 8009eec <osThreadNew+0x94>
    stack = configMINIMAL_STACK_SIZE;
 8009e9c:	2780      	movs	r7, #128	; 0x80
 8009e9e:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ea2:	b346      	cbz	r6, 8009ef6 <osThreadNew+0x9e>
 8009ea4:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
 8009ea8:	d91b      	bls.n	8009ee2 <osThreadNew+0x8a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009eaa:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009eac:	b1ca      	cbz	r2, 8009ee2 <osThreadNew+0x8a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009eae:	b1c5      	cbz	r5, 8009ee2 <osThreadNew+0x8a>
    else {
      mem = 0;
    }

    if (mem == 1) {
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009eb0:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8009eb4:	9400      	str	r4, [sp, #0]
 8009eb6:	463a      	mov	r2, r7
 8009eb8:	f000 fe46 	bl	800ab48 <xTaskCreateStatic>
 8009ebc:	e00b      	b.n	8009ed6 <osThreadNew+0x7e>
 8009ebe:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
 8009ec0:	2418      	movs	r4, #24
    name  = &empty;
 8009ec2:	f10d 0113 	add.w	r1, sp, #19
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009ec6:	ad05      	add	r5, sp, #20
 8009ec8:	e9cd 4500 	strd	r4, r5, [sp]
 8009ecc:	f000 fe74 	bl	800abb8 <xTaskCreate>
 8009ed0:	2801      	cmp	r0, #1
 8009ed2:	d006      	beq.n	8009ee2 <osThreadNew+0x8a>
        return (NULL);
 8009ed4:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 8009ed6:	b007      	add	sp, #28
 8009ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009eda:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d0ca      	beq.n	8009e78 <osThreadNew+0x20>
 8009ee2:	9805      	ldr	r0, [sp, #20]
}
 8009ee4:	b007      	add	sp, #28
 8009ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    prio  = (UBaseType_t)osPriorityNormal;
 8009ee8:	2418      	movs	r4, #24
 8009eea:	e7d2      	b.n	8009e92 <osThreadNew+0x3a>
        stack = attr->stack_size / sizeof(StackType_t);
 8009eec:	08af      	lsrs	r7, r5, #2
 8009eee:	e7d6      	b.n	8009e9e <osThreadNew+0x46>
    name  = &empty;
 8009ef0:	f10d 0113 	add.w	r1, sp, #19
 8009ef4:	e7c8      	b.n	8009e88 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009ef6:	f1bc 0f00 	cmp.w	ip, #0
 8009efa:	d1f2      	bne.n	8009ee2 <osThreadNew+0x8a>
 8009efc:	6912      	ldr	r2, [r2, #16]
 8009efe:	2a00      	cmp	r2, #0
 8009f00:	d1ef      	bne.n	8009ee2 <osThreadNew+0x8a>
 8009f02:	b2ba      	uxth	r2, r7
 8009f04:	e7df      	b.n	8009ec6 <osThreadNew+0x6e>
 8009f06:	bf00      	nop
 8009f08:	20001e44 	.word	0x20001e44

08009f0c <vApplicationGetIdleTaskMemory>:
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009f0c:	2380      	movs	r3, #128	; 0x80
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009f0e:	b430      	push	{r4, r5}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009f10:	4d03      	ldr	r5, [pc, #12]	; (8009f20 <vApplicationGetIdleTaskMemory+0x14>)
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009f12:	4c04      	ldr	r4, [pc, #16]	; (8009f24 <vApplicationGetIdleTaskMemory+0x18>)
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009f14:	6005      	str	r5, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009f16:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009f18:	6013      	str	r3, [r2, #0]
}
 8009f1a:	bc30      	pop	{r4, r5}
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	20001de0 	.word	0x20001de0
 8009f24:	20001be0 	.word	0x20001be0

08009f28 <vApplicationGetTimerTaskMemory>:
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009f28:	f44f 7380 	mov.w	r3, #256	; 0x100
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009f2c:	b430      	push	{r4, r5}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009f2e:	4d03      	ldr	r5, [pc, #12]	; (8009f3c <vApplicationGetTimerTaskMemory+0x14>)
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009f30:	4c03      	ldr	r4, [pc, #12]	; (8009f40 <vApplicationGetTimerTaskMemory+0x18>)
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009f32:	6005      	str	r5, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009f34:	600c      	str	r4, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009f36:	6013      	str	r3, [r2, #0]
}
 8009f38:	bc30      	pop	{r4, r5}
 8009f3a:	4770      	bx	lr
 8009f3c:	20002248 	.word	0x20002248
 8009f40:	20001e48 	.word	0x20001e48

08009f44 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009f44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f48:	2200      	movs	r2, #0
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f4a:	f100 0308 	add.w	r3, r0, #8
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009f4e:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f50:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f52:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f54:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop

08009f5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop

08009f64 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f64:	6843      	ldr	r3, [r0, #4]
{
 8009f66:	b410      	push	{r4}

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f68:	689c      	ldr	r4, [r3, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8009f6a:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f6c:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f6e:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8009f70:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 8009f72:	604b      	str	r3, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f74:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f76:	6099      	str	r1, [r3, #8]
}
 8009f78:	bc10      	pop	{r4}
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009f7a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8009f7c:	6002      	str	r2, [r0, #0]
}
 8009f7e:	4770      	bx	lr

08009f80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f80:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f82:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f84:	1c6b      	adds	r3, r5, #1
 8009f86:	d011      	beq.n	8009fac <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f88:	f100 0208 	add.w	r2, r0, #8
 8009f8c:	e000      	b.n	8009f90 <vListInsert+0x10>
 8009f8e:	461a      	mov	r2, r3
 8009f90:	6853      	ldr	r3, [r2, #4]
 8009f92:	681c      	ldr	r4, [r3, #0]
 8009f94:	42ac      	cmp	r4, r5
 8009f96:	d9fa      	bls.n	8009f8e <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8009f98:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f9a:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8009f9c:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f9e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009fa0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8009fa2:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009fa4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8009fa6:	6004      	str	r4, [r0, #0]
}
 8009fa8:	bc30      	pop	{r4, r5}
 8009faa:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8009fac:	6902      	ldr	r2, [r0, #16]
 8009fae:	6853      	ldr	r3, [r2, #4]
 8009fb0:	e7f2      	b.n	8009f98 <vListInsert+0x18>
 8009fb2:	bf00      	nop

08009fb4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009fb4:	6903      	ldr	r3, [r0, #16]
{
 8009fb6:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009fb8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009fbc:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009fbe:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009fc0:	6881      	ldr	r1, [r0, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8009fc2:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009fc4:	604a      	str	r2, [r1, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009fc6:	bf08      	it	eq
 8009fc8:	6059      	streq	r1, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009fca:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8009fcc:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pvContainer = NULL;
 8009fce:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8009fd0:	3a01      	subs	r2, #1
 8009fd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009fd4:	6818      	ldr	r0, [r3, #0]
}
 8009fd6:	bc10      	pop	{r4}
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop

08009fdc <xQueueGenericReset>:

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8009fdc:	b1e8      	cbz	r0, 800a01a <xQueueGenericReset+0x3e>
{
 8009fde:	b570      	push	{r4, r5, r6, lr}
 8009fe0:	4604      	mov	r4, r0
 8009fe2:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009fe4:	2600      	movs	r6, #0
	taskENTER_CRITICAL();
 8009fe6:	f001 fc85 	bl	800b8f4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009fea:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->cRxLock = queueUNLOCKED;
 8009fee:	20ff      	movs	r0, #255	; 0xff
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009ff0:	fb03 f302 	mul.w	r3, r3, r2
 8009ff4:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009ff6:	1a9a      	subs	r2, r3, r2
 8009ff8:	440a      	add	r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009ffa:	440b      	add	r3, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ffc:	63a6      	str	r6, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009ffe:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a000:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a004:	e9c4 3101 	strd	r3, r1, [r4, #4]
		pxQueue->cTxLock = queueUNLOCKED;
 800a008:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a00c:	b975      	cbnz	r5, 800a02c <xQueueGenericReset+0x50>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a00e:	6923      	ldr	r3, [r4, #16]
 800a010:	b9ab      	cbnz	r3, 800a03e <xQueueGenericReset+0x62>
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
 800a012:	f001 fc91 	bl	800b938 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 800a016:	2001      	movs	r0, #1
 800a018:	bd70      	pop	{r4, r5, r6, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01e:	f383 8811 	msr	BASEPRI, r3
 800a022:	f3bf 8f6f 	isb	sy
 800a026:	f3bf 8f4f 	dsb	sy
 800a02a:	e7fe      	b.n	800a02a <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a02c:	f104 0010 	add.w	r0, r4, #16
 800a030:	f7ff ff88 	bl	8009f44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a034:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a038:	f7ff ff84 	bl	8009f44 <vListInitialise>
 800a03c:	e7e9      	b.n	800a012 <xQueueGenericReset+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a03e:	f104 0010 	add.w	r0, r4, #16
 800a042:	f001 f93d 	bl	800b2c0 <xTaskRemoveFromEventList>
 800a046:	2800      	cmp	r0, #0
 800a048:	d0e3      	beq.n	800a012 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800a04a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a04e:	4b03      	ldr	r3, [pc, #12]	; (800a05c <xQueueGenericReset+0x80>)
 800a050:	601a      	str	r2, [r3, #0]
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	e7da      	b.n	800a012 <xQueueGenericReset+0x36>
 800a05c:	e000ed04 	.word	0xe000ed04

0800a060 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a060:	b530      	push	{r4, r5, lr}
 800a062:	b083      	sub	sp, #12
 800a064:	f89d 5018 	ldrb.w	r5, [sp, #24]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a068:	b940      	cbnz	r0, 800a07c <xQueueGenericCreateStatic+0x1c>
 800a06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06e:	f383 8811 	msr	BASEPRI, r3
 800a072:	f3bf 8f6f 	isb	sy
 800a076:	f3bf 8f4f 	dsb	sy
 800a07a:	e7fe      	b.n	800a07a <xQueueGenericCreateStatic+0x1a>
 800a07c:	461c      	mov	r4, r3

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a07e:	b17b      	cbz	r3, 800a0a0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a080:	b37a      	cbz	r2, 800a0e2 <xQueueGenericCreateStatic+0x82>
 800a082:	b1b1      	cbz	r1, 800a0b2 <xQueueGenericCreateStatic+0x52>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a084:	2350      	movs	r3, #80	; 0x50
 800a086:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a088:	9b01      	ldr	r3, [sp, #4]
 800a08a:	2b50      	cmp	r3, #80	; 0x50
 800a08c:	d01a      	beq.n	800a0c4 <xQueueGenericCreateStatic+0x64>
 800a08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a092:	f383 8811 	msr	BASEPRI, r3
 800a096:	f3bf 8f6f 	isb	sy
 800a09a:	f3bf 8f4f 	dsb	sy
 800a09e:	e7fe      	b.n	800a09e <xQueueGenericCreateStatic+0x3e>
 800a0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	e7fe      	b.n	800a0b0 <xQueueGenericCreateStatic+0x50>
 800a0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b6:	f383 8811 	msr	BASEPRI, r3
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	e7fe      	b.n	800a0c2 <xQueueGenericCreateStatic+0x62>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
	pxNewQueue->uxItemSize = uxItemSize;
 800a0ca:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
 800a0ce:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a0d0:	2101      	movs	r1, #1
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f7ff ff82 	bl	8009fdc <xQueueGenericReset>
	}
 800a0d8:	4620      	mov	r0, r4

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a0da:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
	}
 800a0de:	b003      	add	sp, #12
 800a0e0:	bd30      	pop	{r4, r5, pc}
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a0e2:	b141      	cbz	r1, 800a0f6 <xQueueGenericCreateStatic+0x96>
 800a0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e8:	f383 8811 	msr	BASEPRI, r3
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	e7fe      	b.n	800a0f4 <xQueueGenericCreateStatic+0x94>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a0f6:	2350      	movs	r3, #80	; 0x50
 800a0f8:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0fa:	9b01      	ldr	r3, [sp, #4]
 800a0fc:	2b50      	cmp	r3, #80	; 0x50
 800a0fe:	d1c6      	bne.n	800a08e <xQueueGenericCreateStatic+0x2e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a100:	2301      	movs	r3, #1
 800a102:	4622      	mov	r2, r4
 800a104:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800a108:	e7df      	b.n	800a0ca <xQueueGenericCreateStatic+0x6a>
 800a10a:	bf00      	nop

0800a10c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a110:	b085      	sub	sp, #20
 800a112:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800a114:	2800      	cmp	r0, #0
 800a116:	f000 8125 	beq.w	800a364 <xQueueGenericSend+0x258>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a11a:	2900      	cmp	r1, #0
 800a11c:	f000 8115 	beq.w	800a34a <xQueueGenericSend+0x23e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a120:	2b02      	cmp	r3, #2
 800a122:	d10b      	bne.n	800a13c <xQueueGenericSend+0x30>
 800a124:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a126:	2a01      	cmp	r2, #1
 800a128:	d008      	beq.n	800a13c <xQueueGenericSend+0x30>
 800a12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12e:	f383 8811 	msr	BASEPRI, r3
 800a132:	f3bf 8f6f 	isb	sy
 800a136:	f3bf 8f4f 	dsb	sy
 800a13a:	e7fe      	b.n	800a13a <xQueueGenericSend+0x2e>
 800a13c:	4604      	mov	r4, r0
 800a13e:	461f      	mov	r7, r3
 800a140:	460e      	mov	r6, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a142:	f001 f95b 	bl	800b3fc <xTaskGetSchedulerState>
 800a146:	2800      	cmp	r0, #0
 800a148:	f040 80fc 	bne.w	800a344 <xQueueGenericSend+0x238>
 800a14c:	9b01      	ldr	r3, [sp, #4]
 800a14e:	b143      	cbz	r3, 800a162 <xQueueGenericSend+0x56>
 800a150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	e7fe      	b.n	800a160 <xQueueGenericSend+0x54>
 800a162:	469a      	mov	sl, r3
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a164:	f001 fbc6 	bl	800b8f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a168:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a16a:	6be3      	ldr	r3, [r4, #60]	; 0x3c

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 800a16c:	f04f 0800 	mov.w	r8, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a170:	429a      	cmp	r2, r3
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 800a172:	f8df 932c 	ldr.w	r9, [pc, #812]	; 800a4a0 <xQueueGenericSend+0x394>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a176:	d375      	bcc.n	800a264 <xQueueGenericSend+0x158>
 800a178:	2f02      	cmp	r7, #2
 800a17a:	f000 80fc 	beq.w	800a376 <xQueueGenericSend+0x26a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a17e:	9d01      	ldr	r5, [sp, #4]
 800a180:	2d00      	cmp	r5, #0
 800a182:	f000 8161 	beq.w	800a448 <xQueueGenericSend+0x33c>
				else if( xEntryTimeSet == pdFALSE )
 800a186:	f1ba 0f00 	cmp.w	sl, #0
 800a18a:	d102      	bne.n	800a192 <xQueueGenericSend+0x86>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a18c:	a802      	add	r0, sp, #8
 800a18e:	f001 f8dd 	bl	800b34c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800a192:	f001 fbd1 	bl	800b938 <vPortExitCritical>
		vTaskSuspendAll();
 800a196:	f000 fe31 	bl	800adfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a19a:	f001 fbab 	bl	800b8f4 <vPortEnterCritical>
 800a19e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a1a2:	2bff      	cmp	r3, #255	; 0xff
 800a1a4:	bf08      	it	eq
 800a1a6:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800a1aa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a1ae:	2bff      	cmp	r3, #255	; 0xff
 800a1b0:	bf08      	it	eq
 800a1b2:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800a1b6:	f001 fbbf 	bl	800b938 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1ba:	a901      	add	r1, sp, #4
 800a1bc:	a802      	add	r0, sp, #8
 800a1be:	f001 f8d1 	bl	800b364 <xTaskCheckForTimeOut>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	f040 8126 	bne.w	800a414 <xQueueGenericSend+0x308>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a1c8:	f001 fb94 	bl	800b8f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a1cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a1ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d06a      	beq.n	800a2aa <xQueueGenericSend+0x19e>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800a1d4:	f001 fbb0 	bl	800b938 <vPortExitCritical>
	taskENTER_CRITICAL();
 800a1d8:	f001 fb8c 	bl	800b8f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800a1dc:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800a1e0:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a1e2:	2d00      	cmp	r5, #0
 800a1e4:	dd11      	ble.n	800a20a <xQueueGenericSend+0xfe>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1e8:	b17b      	cbz	r3, 800a20a <xQueueGenericSend+0xfe>
 800a1ea:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 800a1ee:	e001      	b.n	800a1f4 <xQueueGenericSend+0xe8>
 800a1f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1f2:	b153      	cbz	r3, 800a20a <xQueueGenericSend+0xfe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1f4:	4650      	mov	r0, sl
 800a1f6:	f001 f863 	bl	800b2c0 <xTaskRemoveFromEventList>
 800a1fa:	b108      	cbz	r0, 800a200 <xQueueGenericSend+0xf4>
						vTaskMissedYield();
 800a1fc:	f001 f8f8 	bl	800b3f0 <vTaskMissedYield>
 800a200:	3d01      	subs	r5, #1
 800a202:	b2eb      	uxtb	r3, r5
 800a204:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a206:	2b00      	cmp	r3, #0
 800a208:	d1f2      	bne.n	800a1f0 <xQueueGenericSend+0xe4>
		pxQueue->cTxLock = queueUNLOCKED;
 800a20a:	23ff      	movs	r3, #255	; 0xff
 800a20c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800a210:	f001 fb92 	bl	800b938 <vPortExitCritical>
	taskENTER_CRITICAL();
 800a214:	f001 fb6e 	bl	800b8f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800a218:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800a21c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a21e:	2d00      	cmp	r5, #0
 800a220:	dd11      	ble.n	800a246 <xQueueGenericSend+0x13a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a222:	6923      	ldr	r3, [r4, #16]
 800a224:	b17b      	cbz	r3, 800a246 <xQueueGenericSend+0x13a>
 800a226:	f104 0a10 	add.w	sl, r4, #16
 800a22a:	e001      	b.n	800a230 <xQueueGenericSend+0x124>
 800a22c:	6923      	ldr	r3, [r4, #16]
 800a22e:	b153      	cbz	r3, 800a246 <xQueueGenericSend+0x13a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a230:	4650      	mov	r0, sl
 800a232:	f001 f845 	bl	800b2c0 <xTaskRemoveFromEventList>
 800a236:	b108      	cbz	r0, 800a23c <xQueueGenericSend+0x130>
					vTaskMissedYield();
 800a238:	f001 f8da 	bl	800b3f0 <vTaskMissedYield>
 800a23c:	3d01      	subs	r5, #1
 800a23e:	b2eb      	uxtb	r3, r5
 800a240:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1f2      	bne.n	800a22c <xQueueGenericSend+0x120>
		pxQueue->cRxLock = queueUNLOCKED;
 800a246:	23ff      	movs	r3, #255	; 0xff
 800a248:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800a24c:	f001 fb74 	bl	800b938 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800a250:	f000 fe86 	bl	800af60 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800a254:	f001 fb4e 	bl	800b8f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a258:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a25a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a25c:	f04f 0a01 	mov.w	sl, #1
 800a260:	429a      	cmp	r2, r3
 800a262:	d289      	bcs.n	800a178 <xQueueGenericSend+0x6c>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a264:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a266:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a268:	2a00      	cmp	r2, #0
 800a26a:	f000 8087 	beq.w	800a37c <xQueueGenericSend+0x270>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a26e:	4631      	mov	r1, r6
	else if( xPosition == queueSEND_TO_BACK )
 800a270:	2f00      	cmp	r7, #0
 800a272:	f040 80bb 	bne.w	800a3ec <xQueueGenericSend+0x2e0>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a276:	68a0      	ldr	r0, [r4, #8]
 800a278:	f002 fda6 	bl	800cdc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a27c:	68a3      	ldr	r3, [r4, #8]
 800a27e:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a280:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a282:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a284:	4293      	cmp	r3, r2
 800a286:	f105 0501 	add.w	r5, r5, #1
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a28a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a28c:	d379      	bcc.n	800a382 <xQueueGenericSend+0x276>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a28e:	63a5      	str	r5, [r4, #56]	; 0x38
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a290:	6822      	ldr	r2, [r4, #0]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a292:	6a63      	ldr	r3, [r4, #36]	; 0x24
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a294:	60a2      	str	r2, [r4, #8]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a296:	2b00      	cmp	r3, #0
 800a298:	d077      	beq.n	800a38a <xQueueGenericSend+0x27e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a29a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a29e:	f001 f80f 	bl	800b2c0 <xTaskRemoveFromEventList>
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	f040 8082 	bne.w	800a3ac <xQueueGenericSend+0x2a0>
 800a2a8:	e06f      	b.n	800a38a <xQueueGenericSend+0x27e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a2aa:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
 800a2ae:	f001 fb43 	bl	800b938 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a2b2:	4650      	mov	r0, sl
 800a2b4:	9901      	ldr	r1, [sp, #4]
 800a2b6:	f000 ff75 	bl	800b1a4 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800a2ba:	f001 fb1b 	bl	800b8f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800a2be:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800a2c2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a2c4:	2d00      	cmp	r5, #0
 800a2c6:	dd11      	ble.n	800a2ec <xQueueGenericSend+0x1e0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2ca:	b17b      	cbz	r3, 800a2ec <xQueueGenericSend+0x1e0>
 800a2cc:	f104 0b24 	add.w	fp, r4, #36	; 0x24
 800a2d0:	e001      	b.n	800a2d6 <xQueueGenericSend+0x1ca>
 800a2d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2d4:	b153      	cbz	r3, 800a2ec <xQueueGenericSend+0x1e0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2d6:	4658      	mov	r0, fp
 800a2d8:	f000 fff2 	bl	800b2c0 <xTaskRemoveFromEventList>
 800a2dc:	b108      	cbz	r0, 800a2e2 <xQueueGenericSend+0x1d6>
						vTaskMissedYield();
 800a2de:	f001 f887 	bl	800b3f0 <vTaskMissedYield>
 800a2e2:	3d01      	subs	r5, #1
 800a2e4:	b2eb      	uxtb	r3, r5
 800a2e6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d1f2      	bne.n	800a2d2 <xQueueGenericSend+0x1c6>
		pxQueue->cTxLock = queueUNLOCKED;
 800a2ec:	23ff      	movs	r3, #255	; 0xff
 800a2ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800a2f2:	f001 fb21 	bl	800b938 <vPortExitCritical>
	taskENTER_CRITICAL();
 800a2f6:	f001 fafd 	bl	800b8f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800a2fa:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800a2fe:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a300:	2d00      	cmp	r5, #0
 800a302:	dc0a      	bgt.n	800a31a <xQueueGenericSend+0x20e>
 800a304:	e00c      	b.n	800a320 <xQueueGenericSend+0x214>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a306:	4650      	mov	r0, sl
 800a308:	f000 ffda 	bl	800b2c0 <xTaskRemoveFromEventList>
 800a30c:	b108      	cbz	r0, 800a312 <xQueueGenericSend+0x206>
					vTaskMissedYield();
 800a30e:	f001 f86f 	bl	800b3f0 <vTaskMissedYield>
 800a312:	3d01      	subs	r5, #1
 800a314:	b2eb      	uxtb	r3, r5
 800a316:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a318:	b113      	cbz	r3, 800a320 <xQueueGenericSend+0x214>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a31a:	6923      	ldr	r3, [r4, #16]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1f2      	bne.n	800a306 <xQueueGenericSend+0x1fa>
		pxQueue->cRxLock = queueUNLOCKED;
 800a320:	23ff      	movs	r3, #255	; 0xff
 800a322:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800a326:	f001 fb07 	bl	800b938 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800a32a:	f000 fe19 	bl	800af60 <xTaskResumeAll>
 800a32e:	2800      	cmp	r0, #0
 800a330:	d190      	bne.n	800a254 <xQueueGenericSend+0x148>
					portYIELD_WITHIN_API();
 800a332:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a336:	f8c9 3000 	str.w	r3, [r9]
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	f3bf 8f6f 	isb	sy
 800a342:	e787      	b.n	800a254 <xQueueGenericSend+0x148>
 800a344:	f04f 0a00 	mov.w	sl, #0
 800a348:	e70c      	b.n	800a164 <xQueueGenericSend+0x58>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a34a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a34c:	2a00      	cmp	r2, #0
 800a34e:	f43f aee7 	beq.w	800a120 <xQueueGenericSend+0x14>
 800a352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a356:	f383 8811 	msr	BASEPRI, r3
 800a35a:	f3bf 8f6f 	isb	sy
 800a35e:	f3bf 8f4f 	dsb	sy
 800a362:	e7fe      	b.n	800a362 <xQueueGenericSend+0x256>
 800a364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a368:	f383 8811 	msr	BASEPRI, r3
 800a36c:	f3bf 8f6f 	isb	sy
 800a370:	f3bf 8f4f 	dsb	sy
 800a374:	e7fe      	b.n	800a374 <xQueueGenericSend+0x268>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a376:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a378:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a37a:	bb02      	cbnz	r2, 800a3be <xQueueGenericSend+0x2b2>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a37c:	6826      	ldr	r6, [r4, #0]
 800a37e:	3501      	adds	r5, #1
 800a380:	b14e      	cbz	r6, 800a396 <xQueueGenericSend+0x28a>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a382:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a384:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a386:	2b00      	cmp	r3, #0
 800a388:	d187      	bne.n	800a29a <xQueueGenericSend+0x18e>
				taskEXIT_CRITICAL();
 800a38a:	f001 fad5 	bl	800b938 <vPortExitCritical>
				return pdPASS;
 800a38e:	2001      	movs	r0, #1
}
 800a390:	b005      	add	sp, #20
 800a392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a396:	6860      	ldr	r0, [r4, #4]
 800a398:	f001 f840 	bl	800b41c <xTaskPriorityDisinherit>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a39c:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a39e:	6a63      	ldr	r3, [r4, #36]	; 0x24
				pxQueue->pxMutexHolder = NULL;
 800a3a0:	6066      	str	r6, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	f47f af79 	bne.w	800a29a <xQueueGenericSend+0x18e>
					else if( xYieldRequired != pdFALSE )
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	d0ee      	beq.n	800a38a <xQueueGenericSend+0x27e>
						queueYIELD_IF_USING_PREEMPTION();
 800a3ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3b0:	4b3b      	ldr	r3, [pc, #236]	; (800a4a0 <xQueueGenericSend+0x394>)
 800a3b2:	601a      	str	r2, [r3, #0]
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	f3bf 8f6f 	isb	sy
 800a3bc:	e7e5      	b.n	800a38a <xQueueGenericSend+0x27e>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3be:	4631      	mov	r1, r6
 800a3c0:	68e0      	ldr	r0, [r4, #12]
 800a3c2:	f002 fd01 	bl	800cdc8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a3c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3c8:	68e2      	ldr	r2, [r4, #12]
 800a3ca:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a3cc:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a3ce:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a3d0:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a3d2:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a3d4:	d216      	bcs.n	800a404 <xQueueGenericSend+0x2f8>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a3d6:	6862      	ldr	r2, [r4, #4]
 800a3d8:	4413      	add	r3, r2
 800a3da:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800a3dc:	2f02      	cmp	r7, #2
 800a3de:	d011      	beq.n	800a404 <xQueueGenericSend+0x2f8>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a3e0:	3501      	adds	r5, #1
 800a3e2:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d0cf      	beq.n	800a38a <xQueueGenericSend+0x27e>
 800a3ea:	e756      	b.n	800a29a <xQueueGenericSend+0x18e>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3ec:	68e0      	ldr	r0, [r4, #12]
 800a3ee:	f002 fceb 	bl	800cdc8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a3f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3f4:	68e2      	ldr	r2, [r4, #12]
 800a3f6:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a3f8:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a3fa:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a3fc:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a3fe:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a400:	d2ec      	bcs.n	800a3dc <xQueueGenericSend+0x2d0>
 800a402:	e7e8      	b.n	800a3d6 <xQueueGenericSend+0x2ca>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a404:	2d00      	cmp	r5, #0
 800a406:	d1bc      	bne.n	800a382 <xQueueGenericSend+0x276>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a408:	2301      	movs	r3, #1
 800a40a:	63a3      	str	r3, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a40c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d0bb      	beq.n	800a38a <xQueueGenericSend+0x27e>
 800a412:	e742      	b.n	800a29a <xQueueGenericSend+0x18e>
	taskENTER_CRITICAL();
 800a414:	f001 fa6e 	bl	800b8f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800a418:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800a41c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a41e:	2d00      	cmp	r5, #0
 800a420:	dd16      	ble.n	800a450 <xQueueGenericSend+0x344>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a424:	b1a3      	cbz	r3, 800a450 <xQueueGenericSend+0x344>
 800a426:	f104 0624 	add.w	r6, r4, #36	; 0x24
 800a42a:	e005      	b.n	800a438 <xQueueGenericSend+0x32c>
 800a42c:	3d01      	subs	r5, #1
 800a42e:	b2eb      	uxtb	r3, r5
 800a430:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a432:	b16b      	cbz	r3, 800a450 <xQueueGenericSend+0x344>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a434:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a436:	b15b      	cbz	r3, 800a450 <xQueueGenericSend+0x344>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a438:	4630      	mov	r0, r6
 800a43a:	f000 ff41 	bl	800b2c0 <xTaskRemoveFromEventList>
 800a43e:	2800      	cmp	r0, #0
 800a440:	d0f4      	beq.n	800a42c <xQueueGenericSend+0x320>
						vTaskMissedYield();
 800a442:	f000 ffd5 	bl	800b3f0 <vTaskMissedYield>
 800a446:	e7f1      	b.n	800a42c <xQueueGenericSend+0x320>
					taskEXIT_CRITICAL();
 800a448:	f001 fa76 	bl	800b938 <vPortExitCritical>
					return errQUEUE_FULL;
 800a44c:	4628      	mov	r0, r5
 800a44e:	e79f      	b.n	800a390 <xQueueGenericSend+0x284>
		pxQueue->cTxLock = queueUNLOCKED;
 800a450:	23ff      	movs	r3, #255	; 0xff
 800a452:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800a456:	f001 fa6f 	bl	800b938 <vPortExitCritical>
	taskENTER_CRITICAL();
 800a45a:	f001 fa4b 	bl	800b8f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800a45e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800a462:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a464:	2d00      	cmp	r5, #0
 800a466:	dd12      	ble.n	800a48e <xQueueGenericSend+0x382>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a468:	6923      	ldr	r3, [r4, #16]
 800a46a:	b183      	cbz	r3, 800a48e <xQueueGenericSend+0x382>
 800a46c:	f104 0610 	add.w	r6, r4, #16
 800a470:	e005      	b.n	800a47e <xQueueGenericSend+0x372>
 800a472:	3d01      	subs	r5, #1
 800a474:	b2eb      	uxtb	r3, r5
 800a476:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a478:	b14b      	cbz	r3, 800a48e <xQueueGenericSend+0x382>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a47a:	6923      	ldr	r3, [r4, #16]
 800a47c:	b13b      	cbz	r3, 800a48e <xQueueGenericSend+0x382>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a47e:	4630      	mov	r0, r6
 800a480:	f000 ff1e 	bl	800b2c0 <xTaskRemoveFromEventList>
 800a484:	2800      	cmp	r0, #0
 800a486:	d0f4      	beq.n	800a472 <xQueueGenericSend+0x366>
					vTaskMissedYield();
 800a488:	f000 ffb2 	bl	800b3f0 <vTaskMissedYield>
 800a48c:	e7f1      	b.n	800a472 <xQueueGenericSend+0x366>
		pxQueue->cRxLock = queueUNLOCKED;
 800a48e:	23ff      	movs	r3, #255	; 0xff
 800a490:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800a494:	f001 fa50 	bl	800b938 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800a498:	f000 fd62 	bl	800af60 <xTaskResumeAll>
			return errQUEUE_FULL;
 800a49c:	2000      	movs	r0, #0
 800a49e:	e777      	b.n	800a390 <xQueueGenericSend+0x284>
 800a4a0:	e000ed04 	.word	0xe000ed04

0800a4a4 <xQueueReceive>:
{
 800a4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4a8:	b084      	sub	sp, #16
 800a4aa:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	f000 8143 	beq.w	800a738 <xQueueReceive+0x294>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4b2:	2900      	cmp	r1, #0
 800a4b4:	f000 8133 	beq.w	800a71e <xQueueReceive+0x27a>
 800a4b8:	4604      	mov	r4, r0
 800a4ba:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4bc:	f000 ff9e 	bl	800b3fc <xTaskGetSchedulerState>
 800a4c0:	b950      	cbnz	r0, 800a4d8 <xQueueReceive+0x34>
 800a4c2:	9b01      	ldr	r3, [sp, #4]
 800a4c4:	b143      	cbz	r3, 800a4d8 <xQueueReceive+0x34>
 800a4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ca:	f383 8811 	msr	BASEPRI, r3
 800a4ce:	f3bf 8f6f 	isb	sy
 800a4d2:	f3bf 8f4f 	dsb	sy
 800a4d6:	e7fe      	b.n	800a4d6 <xQueueReceive+0x32>
		taskENTER_CRITICAL();
 800a4d8:	f001 fa0c 	bl	800b8f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4dc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4de:	2d00      	cmp	r5, #0
 800a4e0:	f040 80ba 	bne.w	800a658 <xQueueReceive+0x1b4>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4e4:	9b01      	ldr	r3, [sp, #4]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d06a      	beq.n	800a5c0 <xQueueReceive+0x11c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4ea:	a802      	add	r0, sp, #8
		prvLockQueue( pxQueue );
 800a4ec:	46a8      	mov	r8, r5
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4ee:	f000 ff2d 	bl	800b34c <vTaskInternalSetTimeOutState>
					portYIELD_WITHIN_API();
 800a4f2:	f8df 9274 	ldr.w	r9, [pc, #628]	; 800a768 <xQueueReceive+0x2c4>
 800a4f6:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 800a4fa:	f001 fa1d 	bl	800b938 <vPortExitCritical>
		vTaskSuspendAll();
 800a4fe:	f000 fc7d 	bl	800adfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a502:	f001 f9f7 	bl	800b8f4 <vPortEnterCritical>
 800a506:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a50a:	2bff      	cmp	r3, #255	; 0xff
 800a50c:	bf08      	it	eq
 800a50e:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800a512:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a516:	2bff      	cmp	r3, #255	; 0xff
 800a518:	bf08      	it	eq
 800a51a:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800a51e:	f001 fa0b 	bl	800b938 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a522:	a901      	add	r1, sp, #4
 800a524:	a802      	add	r0, sp, #8
 800a526:	f000 ff1d 	bl	800b364 <xTaskCheckForTimeOut>
 800a52a:	2800      	cmp	r0, #0
 800a52c:	d14e      	bne.n	800a5cc <xQueueReceive+0x128>
	taskENTER_CRITICAL();
 800a52e:	f001 f9e1 	bl	800b8f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a532:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a534:	2b00      	cmp	r3, #0
 800a536:	f000 80a8 	beq.w	800a68a <xQueueReceive+0x1e6>
	taskEXIT_CRITICAL();
 800a53a:	f001 f9fd 	bl	800b938 <vPortExitCritical>
	taskENTER_CRITICAL();
 800a53e:	f001 f9d9 	bl	800b8f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800a542:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800a546:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a548:	2d00      	cmp	r5, #0
 800a54a:	dc0a      	bgt.n	800a562 <xQueueReceive+0xbe>
 800a54c:	e00c      	b.n	800a568 <xQueueReceive+0xc4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a54e:	4630      	mov	r0, r6
 800a550:	f000 feb6 	bl	800b2c0 <xTaskRemoveFromEventList>
 800a554:	b108      	cbz	r0, 800a55a <xQueueReceive+0xb6>
						vTaskMissedYield();
 800a556:	f000 ff4b 	bl	800b3f0 <vTaskMissedYield>
 800a55a:	3d01      	subs	r5, #1
 800a55c:	b2eb      	uxtb	r3, r5
 800a55e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a560:	b113      	cbz	r3, 800a568 <xQueueReceive+0xc4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a562:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a564:	2b00      	cmp	r3, #0
 800a566:	d1f2      	bne.n	800a54e <xQueueReceive+0xaa>
		pxQueue->cTxLock = queueUNLOCKED;
 800a568:	23ff      	movs	r3, #255	; 0xff
 800a56a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800a56e:	f001 f9e3 	bl	800b938 <vPortExitCritical>
	taskENTER_CRITICAL();
 800a572:	f001 f9bf 	bl	800b8f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800a576:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800a57a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a57c:	2d00      	cmp	r5, #0
 800a57e:	dd10      	ble.n	800a5a2 <xQueueReceive+0xfe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a580:	6923      	ldr	r3, [r4, #16]
 800a582:	b173      	cbz	r3, 800a5a2 <xQueueReceive+0xfe>
 800a584:	f104 0a10 	add.w	sl, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a588:	4650      	mov	r0, sl
 800a58a:	f000 fe99 	bl	800b2c0 <xTaskRemoveFromEventList>
 800a58e:	b108      	cbz	r0, 800a594 <xQueueReceive+0xf0>
					vTaskMissedYield();
 800a590:	f000 ff2e 	bl	800b3f0 <vTaskMissedYield>
 800a594:	3d01      	subs	r5, #1
 800a596:	b2eb      	uxtb	r3, r5
 800a598:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a59a:	b113      	cbz	r3, 800a5a2 <xQueueReceive+0xfe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a59c:	6923      	ldr	r3, [r4, #16]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1f2      	bne.n	800a588 <xQueueReceive+0xe4>
		pxQueue->cRxLock = queueUNLOCKED;
 800a5a2:	23ff      	movs	r3, #255	; 0xff
 800a5a4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800a5a8:	f001 f9c6 	bl	800b938 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800a5ac:	f000 fcd8 	bl	800af60 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800a5b0:	f001 f9a0 	bl	800b8f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5b4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5b6:	2d00      	cmp	r5, #0
 800a5b8:	d14e      	bne.n	800a658 <xQueueReceive+0x1b4>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5ba:	9b01      	ldr	r3, [sp, #4]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d19c      	bne.n	800a4fa <xQueueReceive+0x56>
					taskEXIT_CRITICAL();
 800a5c0:	f001 f9ba 	bl	800b938 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800a5c4:	2000      	movs	r0, #0
}
 800a5c6:	b004      	add	sp, #16
 800a5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskENTER_CRITICAL();
 800a5cc:	f001 f992 	bl	800b8f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800a5d0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800a5d4:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a5d6:	2d00      	cmp	r5, #0
 800a5d8:	dc0a      	bgt.n	800a5f0 <xQueueReceive+0x14c>
 800a5da:	e00c      	b.n	800a5f6 <xQueueReceive+0x152>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5dc:	4630      	mov	r0, r6
 800a5de:	f000 fe6f 	bl	800b2c0 <xTaskRemoveFromEventList>
 800a5e2:	b108      	cbz	r0, 800a5e8 <xQueueReceive+0x144>
						vTaskMissedYield();
 800a5e4:	f000 ff04 	bl	800b3f0 <vTaskMissedYield>
 800a5e8:	3d01      	subs	r5, #1
 800a5ea:	b2eb      	uxtb	r3, r5
 800a5ec:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a5ee:	b113      	cbz	r3, 800a5f6 <xQueueReceive+0x152>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d1f2      	bne.n	800a5dc <xQueueReceive+0x138>
		pxQueue->cTxLock = queueUNLOCKED;
 800a5f6:	23ff      	movs	r3, #255	; 0xff
 800a5f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800a5fc:	f001 f99c 	bl	800b938 <vPortExitCritical>
	taskENTER_CRITICAL();
 800a600:	f001 f978 	bl	800b8f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800a604:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800a608:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a60a:	2d00      	cmp	r5, #0
 800a60c:	dd11      	ble.n	800a632 <xQueueReceive+0x18e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a60e:	6923      	ldr	r3, [r4, #16]
 800a610:	b17b      	cbz	r3, 800a632 <xQueueReceive+0x18e>
 800a612:	f104 0a10 	add.w	sl, r4, #16
 800a616:	e001      	b.n	800a61c <xQueueReceive+0x178>
 800a618:	6923      	ldr	r3, [r4, #16]
 800a61a:	b153      	cbz	r3, 800a632 <xQueueReceive+0x18e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a61c:	4650      	mov	r0, sl
 800a61e:	f000 fe4f 	bl	800b2c0 <xTaskRemoveFromEventList>
 800a622:	b108      	cbz	r0, 800a628 <xQueueReceive+0x184>
					vTaskMissedYield();
 800a624:	f000 fee4 	bl	800b3f0 <vTaskMissedYield>
 800a628:	3d01      	subs	r5, #1
 800a62a:	b2eb      	uxtb	r3, r5
 800a62c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1f2      	bne.n	800a618 <xQueueReceive+0x174>
		pxQueue->cRxLock = queueUNLOCKED;
 800a632:	23ff      	movs	r3, #255	; 0xff
 800a634:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800a638:	f001 f97e 	bl	800b938 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800a63c:	f000 fc90 	bl	800af60 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800a640:	f001 f958 	bl	800b8f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a644:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a646:	2b00      	cmp	r3, #0
 800a648:	d0ba      	beq.n	800a5c0 <xQueueReceive+0x11c>
	taskEXIT_CRITICAL();
 800a64a:	f001 f975 	bl	800b938 <vPortExitCritical>
		taskENTER_CRITICAL();
 800a64e:	f001 f951 	bl	800b8f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a652:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a654:	2d00      	cmp	r5, #0
 800a656:	d0b0      	beq.n	800a5ba <xQueueReceive+0x116>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a658:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a65a:	b15a      	cbz	r2, 800a674 <xQueueReceive+0x1d0>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a65c:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a65e:	6863      	ldr	r3, [r4, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a660:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a662:	4299      	cmp	r1, r3
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a664:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a666:	d302      	bcc.n	800a66e <xQueueReceive+0x1ca>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a668:	6823      	ldr	r3, [r4, #0]
 800a66a:	4619      	mov	r1, r3
 800a66c:	60e3      	str	r3, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a66e:	4638      	mov	r0, r7
 800a670:	f002 fbaa 	bl	800cdc8 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a674:	3d01      	subs	r5, #1
 800a676:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a678:	6923      	ldr	r3, [r4, #16]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d165      	bne.n	800a74a <xQueueReceive+0x2a6>
				taskEXIT_CRITICAL();
 800a67e:	f001 f95b 	bl	800b938 <vPortExitCritical>
				return pdPASS;
 800a682:	2001      	movs	r0, #1
}
 800a684:	b004      	add	sp, #16
 800a686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 800a68a:	f001 f955 	bl	800b938 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a68e:	9901      	ldr	r1, [sp, #4]
 800a690:	4630      	mov	r0, r6
 800a692:	f000 fd87 	bl	800b1a4 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800a696:	f001 f92d 	bl	800b8f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800a69a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800a69e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6a0:	2d00      	cmp	r5, #0
 800a6a2:	dc0a      	bgt.n	800a6ba <xQueueReceive+0x216>
 800a6a4:	e00c      	b.n	800a6c0 <xQueueReceive+0x21c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6a6:	4630      	mov	r0, r6
 800a6a8:	f000 fe0a 	bl	800b2c0 <xTaskRemoveFromEventList>
 800a6ac:	b108      	cbz	r0, 800a6b2 <xQueueReceive+0x20e>
						vTaskMissedYield();
 800a6ae:	f000 fe9f 	bl	800b3f0 <vTaskMissedYield>
 800a6b2:	3d01      	subs	r5, #1
 800a6b4:	b2eb      	uxtb	r3, r5
 800a6b6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6b8:	b113      	cbz	r3, 800a6c0 <xQueueReceive+0x21c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d1f2      	bne.n	800a6a6 <xQueueReceive+0x202>
		pxQueue->cTxLock = queueUNLOCKED;
 800a6c0:	23ff      	movs	r3, #255	; 0xff
 800a6c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800a6c6:	f001 f937 	bl	800b938 <vPortExitCritical>
	taskENTER_CRITICAL();
 800a6ca:	f001 f913 	bl	800b8f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800a6ce:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800a6d2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6d4:	2d00      	cmp	r5, #0
 800a6d6:	dd10      	ble.n	800a6fa <xQueueReceive+0x256>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6d8:	6923      	ldr	r3, [r4, #16]
 800a6da:	b173      	cbz	r3, 800a6fa <xQueueReceive+0x256>
 800a6dc:	f104 0a10 	add.w	sl, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6e0:	4650      	mov	r0, sl
 800a6e2:	f000 fded 	bl	800b2c0 <xTaskRemoveFromEventList>
 800a6e6:	b108      	cbz	r0, 800a6ec <xQueueReceive+0x248>
					vTaskMissedYield();
 800a6e8:	f000 fe82 	bl	800b3f0 <vTaskMissedYield>
 800a6ec:	3d01      	subs	r5, #1
 800a6ee:	b2eb      	uxtb	r3, r5
 800a6f0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6f2:	b113      	cbz	r3, 800a6fa <xQueueReceive+0x256>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6f4:	6923      	ldr	r3, [r4, #16]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1f2      	bne.n	800a6e0 <xQueueReceive+0x23c>
		pxQueue->cRxLock = queueUNLOCKED;
 800a6fa:	23ff      	movs	r3, #255	; 0xff
 800a6fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800a700:	f001 f91a 	bl	800b938 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800a704:	f000 fc2c 	bl	800af60 <xTaskResumeAll>
 800a708:	2800      	cmp	r0, #0
 800a70a:	d1a0      	bne.n	800a64e <xQueueReceive+0x1aa>
					portYIELD_WITHIN_API();
 800a70c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a710:	f8c9 3000 	str.w	r3, [r9]
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	e797      	b.n	800a64e <xQueueReceive+0x1aa>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a71e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a720:	2b00      	cmp	r3, #0
 800a722:	f43f aec9 	beq.w	800a4b8 <xQueueReceive+0x14>
 800a726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72a:	f383 8811 	msr	BASEPRI, r3
 800a72e:	f3bf 8f6f 	isb	sy
 800a732:	f3bf 8f4f 	dsb	sy
 800a736:	e7fe      	b.n	800a736 <xQueueReceive+0x292>
 800a738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73c:	f383 8811 	msr	BASEPRI, r3
 800a740:	f3bf 8f6f 	isb	sy
 800a744:	f3bf 8f4f 	dsb	sy
 800a748:	e7fe      	b.n	800a748 <xQueueReceive+0x2a4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a74a:	f104 0010 	add.w	r0, r4, #16
 800a74e:	f000 fdb7 	bl	800b2c0 <xTaskRemoveFromEventList>
 800a752:	2800      	cmp	r0, #0
 800a754:	d093      	beq.n	800a67e <xQueueReceive+0x1da>
						queueYIELD_IF_USING_PREEMPTION();
 800a756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a75a:	4b03      	ldr	r3, [pc, #12]	; (800a768 <xQueueReceive+0x2c4>)
 800a75c:	601a      	str	r2, [r3, #0]
 800a75e:	f3bf 8f4f 	dsb	sy
 800a762:	f3bf 8f6f 	isb	sy
 800a766:	e78a      	b.n	800a67e <xQueueReceive+0x1da>
 800a768:	e000ed04 	.word	0xe000ed04

0800a76c <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a76c:	4b13      	ldr	r3, [pc, #76]	; (800a7bc <vQueueAddToRegistry+0x50>)
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	b17a      	cbz	r2, 800a792 <vQueueAddToRegistry+0x26>
 800a772:	689a      	ldr	r2, [r3, #8]
 800a774:	b1aa      	cbz	r2, 800a7a2 <vQueueAddToRegistry+0x36>
 800a776:	691a      	ldr	r2, [r3, #16]
 800a778:	b1aa      	cbz	r2, 800a7a6 <vQueueAddToRegistry+0x3a>
 800a77a:	699a      	ldr	r2, [r3, #24]
 800a77c:	b1aa      	cbz	r2, 800a7aa <vQueueAddToRegistry+0x3e>
 800a77e:	6a1a      	ldr	r2, [r3, #32]
 800a780:	b1aa      	cbz	r2, 800a7ae <vQueueAddToRegistry+0x42>
 800a782:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a784:	b1aa      	cbz	r2, 800a7b2 <vQueueAddToRegistry+0x46>
 800a786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a788:	b112      	cbz	r2, 800a790 <vQueueAddToRegistry+0x24>
 800a78a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a78c:	b19a      	cbz	r2, 800a7b6 <vQueueAddToRegistry+0x4a>
 800a78e:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a790:	2206      	movs	r2, #6
	{
 800a792:	b410      	push	{r4}
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a794:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
 800a798:	6060      	str	r0, [r4, #4]
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a79a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a79e:	bc10      	pop	{r4}
 800a7a0:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	e7f5      	b.n	800a792 <vQueueAddToRegistry+0x26>
 800a7a6:	2202      	movs	r2, #2
 800a7a8:	e7f3      	b.n	800a792 <vQueueAddToRegistry+0x26>
 800a7aa:	2203      	movs	r2, #3
 800a7ac:	e7f1      	b.n	800a792 <vQueueAddToRegistry+0x26>
 800a7ae:	2204      	movs	r2, #4
 800a7b0:	e7ef      	b.n	800a792 <vQueueAddToRegistry+0x26>
 800a7b2:	2205      	movs	r2, #5
 800a7b4:	e7ed      	b.n	800a792 <vQueueAddToRegistry+0x26>
 800a7b6:	2207      	movs	r2, #7
 800a7b8:	e7eb      	b.n	800a792 <vQueueAddToRegistry+0x26>
 800a7ba:	bf00      	nop
 800a7bc:	20003e60 	.word	0x20003e60

0800a7c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a7c0:	b570      	push	{r4, r5, r6, lr}
 800a7c2:	4605      	mov	r5, r0
 800a7c4:	460c      	mov	r4, r1
 800a7c6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a7c8:	f001 f894 	bl	800b8f4 <vPortEnterCritical>
 800a7cc:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 800a7d0:	2bff      	cmp	r3, #255	; 0xff
 800a7d2:	bf04      	itt	eq
 800a7d4:	2300      	moveq	r3, #0
 800a7d6:	f885 3044 	strbeq.w	r3, [r5, #68]	; 0x44
 800a7da:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800a7de:	2bff      	cmp	r3, #255	; 0xff
 800a7e0:	bf04      	itt	eq
 800a7e2:	2300      	moveq	r3, #0
 800a7e4:	f885 3045 	strbeq.w	r3, [r5, #69]	; 0x45
 800a7e8:	f001 f8a6 	bl	800b938 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a7ec:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a7ee:	b92b      	cbnz	r3, 800a7fc <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a7f0:	4632      	mov	r2, r6
 800a7f2:	4621      	mov	r1, r4
 800a7f4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800a7f8:	f000 fd18 	bl	800b22c <vTaskPlaceOnEventListRestricted>
	taskENTER_CRITICAL();
 800a7fc:	f001 f87a 	bl	800b8f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800a800:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800a804:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a806:	2c00      	cmp	r4, #0
 800a808:	dd16      	ble.n	800a838 <vQueueWaitForMessageRestricted+0x78>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a80a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a80c:	b1a3      	cbz	r3, 800a838 <vQueueWaitForMessageRestricted+0x78>
 800a80e:	f105 0624 	add.w	r6, r5, #36	; 0x24
 800a812:	e005      	b.n	800a820 <vQueueWaitForMessageRestricted+0x60>
 800a814:	3c01      	subs	r4, #1
 800a816:	b2e3      	uxtb	r3, r4
 800a818:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a81a:	b16b      	cbz	r3, 800a838 <vQueueWaitForMessageRestricted+0x78>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a81c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a81e:	b15b      	cbz	r3, 800a838 <vQueueWaitForMessageRestricted+0x78>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a820:	4630      	mov	r0, r6
 800a822:	f000 fd4d 	bl	800b2c0 <xTaskRemoveFromEventList>
 800a826:	2800      	cmp	r0, #0
 800a828:	d0f4      	beq.n	800a814 <vQueueWaitForMessageRestricted+0x54>
 800a82a:	3c01      	subs	r4, #1
						vTaskMissedYield();
 800a82c:	f000 fde0 	bl	800b3f0 <vTaskMissedYield>
 800a830:	b2e3      	uxtb	r3, r4
 800a832:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a834:	2b00      	cmp	r3, #0
 800a836:	d1f1      	bne.n	800a81c <vQueueWaitForMessageRestricted+0x5c>
		pxQueue->cTxLock = queueUNLOCKED;
 800a838:	23ff      	movs	r3, #255	; 0xff
 800a83a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800a83e:	f001 f87b 	bl	800b938 <vPortExitCritical>
	taskENTER_CRITICAL();
 800a842:	f001 f857 	bl	800b8f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800a846:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800a84a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a84c:	2c00      	cmp	r4, #0
 800a84e:	dd16      	ble.n	800a87e <vQueueWaitForMessageRestricted+0xbe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a850:	692b      	ldr	r3, [r5, #16]
 800a852:	b1a3      	cbz	r3, 800a87e <vQueueWaitForMessageRestricted+0xbe>
 800a854:	f105 0610 	add.w	r6, r5, #16
 800a858:	e005      	b.n	800a866 <vQueueWaitForMessageRestricted+0xa6>
 800a85a:	3c01      	subs	r4, #1
 800a85c:	b2e3      	uxtb	r3, r4
 800a85e:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a860:	b16b      	cbz	r3, 800a87e <vQueueWaitForMessageRestricted+0xbe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a862:	692b      	ldr	r3, [r5, #16]
 800a864:	b15b      	cbz	r3, 800a87e <vQueueWaitForMessageRestricted+0xbe>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a866:	4630      	mov	r0, r6
 800a868:	f000 fd2a 	bl	800b2c0 <xTaskRemoveFromEventList>
 800a86c:	2800      	cmp	r0, #0
 800a86e:	d0f4      	beq.n	800a85a <vQueueWaitForMessageRestricted+0x9a>
 800a870:	3c01      	subs	r4, #1
					vTaskMissedYield();
 800a872:	f000 fdbd 	bl	800b3f0 <vTaskMissedYield>
 800a876:	b2e3      	uxtb	r3, r4
 800a878:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1f1      	bne.n	800a862 <vQueueWaitForMessageRestricted+0xa2>
		pxQueue->cRxLock = queueUNLOCKED;
 800a87e:	23ff      	movs	r3, #255	; 0xff
 800a880:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 800a884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800a888:	f001 b856 	b.w	800b938 <vPortExitCritical>

0800a88c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a890:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a892:	f001 f82f 	bl	800b8f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a896:	4a33      	ldr	r2, [pc, #204]	; (800a964 <prvAddNewTaskToReadyList+0xd8>)
		if( pxCurrentTCB == NULL )
 800a898:	4e33      	ldr	r6, [pc, #204]	; (800a968 <prvAddNewTaskToReadyList+0xdc>)
		uxCurrentNumberOfTasks++;
 800a89a:	6813      	ldr	r3, [r2, #0]
 800a89c:	3301      	adds	r3, #1
 800a89e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a8a0:	6833      	ldr	r3, [r6, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d031      	beq.n	800a90a <prvAddNewTaskToReadyList+0x7e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a8a6:	4c31      	ldr	r4, [pc, #196]	; (800a96c <prvAddNewTaskToReadyList+0xe0>)
 800a8a8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800a8aa:	6823      	ldr	r3, [r4, #0]
 800a8ac:	b333      	cbz	r3, 800a8fc <prvAddNewTaskToReadyList+0x70>
 800a8ae:	4f30      	ldr	r7, [pc, #192]	; (800a970 <prvAddNewTaskToReadyList+0xe4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a8b0:	4930      	ldr	r1, [pc, #192]	; (800a974 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 800a8b2:	4a31      	ldr	r2, [pc, #196]	; (800a978 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 800a8b4:	f8d1 c000 	ldr.w	ip, [r1]
		uxTaskNumber++;
 800a8b8:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800a8ba:	4584      	cmp	ip, r0
		uxTaskNumber++;
 800a8bc:	f103 0301 	add.w	r3, r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 800a8c0:	bf38      	it	cc
 800a8c2:	6008      	strcc	r0, [r1, #0]
 800a8c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a8c8:	64ab      	str	r3, [r5, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 800a8ca:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800a8ce:	1d29      	adds	r1, r5, #4
		uxTaskNumber++;
 800a8d0:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800a8d2:	f7ff fb47 	bl	8009f64 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a8d6:	f001 f82f 	bl	800b938 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	b163      	cbz	r3, 800a8f8 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a8de:	6832      	ldr	r2, [r6, #0]
 800a8e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a8e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d207      	bcs.n	800a8f8 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a8e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ec:	4b23      	ldr	r3, [pc, #140]	; (800a97c <prvAddNewTaskToReadyList+0xf0>)
 800a8ee:	601a      	str	r2, [r3, #0]
 800a8f0:	f3bf 8f4f 	dsb	sy
 800a8f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a8fc:	6833      	ldr	r3, [r6, #0]
 800a8fe:	4f1c      	ldr	r7, [pc, #112]	; (800a970 <prvAddNewTaskToReadyList+0xe4>)
 800a900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a902:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 800a904:	bf98      	it	ls
 800a906:	6035      	strls	r5, [r6, #0]
 800a908:	e7d2      	b.n	800a8b0 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 800a90a:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a90c:	6813      	ldr	r3, [r2, #0]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d003      	beq.n	800a91a <prvAddNewTaskToReadyList+0x8e>
 800a912:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800a914:	4f16      	ldr	r7, [pc, #88]	; (800a970 <prvAddNewTaskToReadyList+0xe4>)
 800a916:	4c15      	ldr	r4, [pc, #84]	; (800a96c <prvAddNewTaskToReadyList+0xe0>)
 800a918:	e7ca      	b.n	800a8b0 <prvAddNewTaskToReadyList+0x24>
 800a91a:	4f15      	ldr	r7, [pc, #84]	; (800a970 <prvAddNewTaskToReadyList+0xe4>)
 800a91c:	463c      	mov	r4, r7
 800a91e:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a922:	4620      	mov	r0, r4
 800a924:	3414      	adds	r4, #20
 800a926:	f7ff fb0d 	bl	8009f44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a92a:	45a0      	cmp	r8, r4
 800a92c:	d1f9      	bne.n	800a922 <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a92e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800a998 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList2 );
 800a932:	4c13      	ldr	r4, [pc, #76]	; (800a980 <prvAddNewTaskToReadyList+0xf4>)
	vListInitialise( &xDelayedTaskList1 );
 800a934:	4640      	mov	r0, r8
 800a936:	f7ff fb05 	bl	8009f44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a93a:	4620      	mov	r0, r4
 800a93c:	f7ff fb02 	bl	8009f44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a940:	4810      	ldr	r0, [pc, #64]	; (800a984 <prvAddNewTaskToReadyList+0xf8>)
 800a942:	f7ff faff 	bl	8009f44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a946:	4810      	ldr	r0, [pc, #64]	; (800a988 <prvAddNewTaskToReadyList+0xfc>)
 800a948:	f7ff fafc 	bl	8009f44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a94c:	480f      	ldr	r0, [pc, #60]	; (800a98c <prvAddNewTaskToReadyList+0x100>)
 800a94e:	f7ff faf9 	bl	8009f44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a952:	4a0f      	ldr	r2, [pc, #60]	; (800a990 <prvAddNewTaskToReadyList+0x104>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a954:	4b0f      	ldr	r3, [pc, #60]	; (800a994 <prvAddNewTaskToReadyList+0x108>)
	pxDelayedTaskList = &xDelayedTaskList1;
 800a956:	f8c2 8000 	str.w	r8, [r2]
 800a95a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a95c:	601c      	str	r4, [r3, #0]
 800a95e:	4c03      	ldr	r4, [pc, #12]	; (800a96c <prvAddNewTaskToReadyList+0xe0>)
 800a960:	e7a6      	b.n	800a8b0 <prvAddNewTaskToReadyList+0x24>
 800a962:	bf00      	nop
 800a964:	2000271c 	.word	0x2000271c
 800a968:	200022ac 	.word	0x200022ac
 800a96c:	20002778 	.word	0x20002778
 800a970:	200022b8 	.word	0x200022b8
 800a974:	20002730 	.word	0x20002730
 800a978:	2000272c 	.word	0x2000272c
 800a97c:	e000ed04 	.word	0xe000ed04
 800a980:	20002748 	.word	0x20002748
 800a984:	20002764 	.word	0x20002764
 800a988:	20002790 	.word	0x20002790
 800a98c:	2000277c 	.word	0x2000277c
 800a990:	200022b0 	.word	0x200022b0
 800a994:	200022b4 	.word	0x200022b4
 800a998:	20002734 	.word	0x20002734

0800a99c <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a99c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a0:	468a      	mov	sl, r1
 800a9a2:	e9dd 570a 	ldrd	r5, r7, [sp, #40]	; 0x28
 800a9a6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a9a8:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800a9ac:	465a      	mov	r2, fp
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a9ae:	4680      	mov	r8, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a9b0:	21a5      	movs	r1, #165	; 0xa5
 800a9b2:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a9b4:	4699      	mov	r9, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a9b6:	f002 fa2b 	bl	800ce10 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a9ba:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800a9bc:	f1ab 0b04 	sub.w	fp, fp, #4
 800a9c0:	445e      	add	r6, fp
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a9c2:	f026 0607 	bic.w	r6, r6, #7
 800a9c6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800a9ca:	6466      	str	r6, [r4, #68]	; 0x44
 800a9cc:	f10a 0a0f 	add.w	sl, sl, #15
 800a9d0:	f104 0234 	add.w	r2, r4, #52	; 0x34
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a9d4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800a9d8:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800a9dc:	7819      	ldrb	r1, [r3, #0]
 800a9de:	b109      	cbz	r1, 800a9e4 <prvInitialiseNewTask.isra.2+0x48>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9e0:	4553      	cmp	r3, sl
 800a9e2:	d1f7      	bne.n	800a9d4 <prvInitialiseNewTask.isra.2+0x38>
 800a9e4:	2d37      	cmp	r5, #55	; 0x37
 800a9e6:	bf28      	it	cs
 800a9e8:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a9ea:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 800a9ee:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800a9f0:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a9f2:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a9f4:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 800a9f8:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a9fc:	f7ff faae 	bl	8009f5c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa00:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aa04:	f104 0018 	add.w	r0, r4, #24
 800aa08:	f7ff faa8 	bl	8009f5c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800aa0c:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa10:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulRunTimeCounter = 0UL;
 800aa12:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa16:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aa1a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aa1c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aa1e:	464a      	mov	r2, r9
 800aa20:	4641      	mov	r1, r8
 800aa22:	4630      	mov	r0, r6
 800aa24:	f000 ff40 	bl	800b8a8 <pxPortInitialiseStack>
 800aa28:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800aa2a:	b107      	cbz	r7, 800aa2e <prvInitialiseNewTask.isra.2+0x92>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aa2c:	603c      	str	r4, [r7, #0]
}
 800aa2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800aa34 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aa34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa36:	4605      	mov	r5, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aa38:	4b15      	ldr	r3, [pc, #84]	; (800aa90 <prvAddCurrentTaskToDelayedList+0x5c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa3a:	4e16      	ldr	r6, [pc, #88]	; (800aa94 <prvAddCurrentTaskToDelayedList+0x60>)
const TickType_t xConstTickCount = xTickCount;
 800aa3c:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa3e:	6830      	ldr	r0, [r6, #0]
{
 800aa40:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa42:	3004      	adds	r0, #4
 800aa44:	f7ff fab6 	bl	8009fb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aa48:	1c6b      	adds	r3, r5, #1
 800aa4a:	4633      	mov	r3, r6
 800aa4c:	d107      	bne.n	800aa5e <prvAddCurrentTaskToDelayedList+0x2a>
 800aa4e:	b137      	cbz	r7, 800aa5e <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa50:	6831      	ldr	r1, [r6, #0]
 800aa52:	4811      	ldr	r0, [pc, #68]	; (800aa98 <prvAddCurrentTaskToDelayedList+0x64>)
 800aa54:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aa56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa5a:	f7ff ba83 	b.w	8009f64 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	1964      	adds	r4, r4, r5
 800aa62:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800aa64:	d307      	bcc.n	800aa76 <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa66:	4a0d      	ldr	r2, [pc, #52]	; (800aa9c <prvAddCurrentTaskToDelayedList+0x68>)
 800aa68:	6810      	ldr	r0, [r2, #0]
 800aa6a:	6819      	ldr	r1, [r3, #0]
}
 800aa6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa70:	3104      	adds	r1, #4
 800aa72:	f7ff ba85 	b.w	8009f80 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa76:	4a0a      	ldr	r2, [pc, #40]	; (800aaa0 <prvAddCurrentTaskToDelayedList+0x6c>)
 800aa78:	6810      	ldr	r0, [r2, #0]
 800aa7a:	6819      	ldr	r1, [r3, #0]
 800aa7c:	3104      	adds	r1, #4
 800aa7e:	f7ff fa7f 	bl	8009f80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aa82:	4b08      	ldr	r3, [pc, #32]	; (800aaa4 <prvAddCurrentTaskToDelayedList+0x70>)
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 800aa88:	bf88      	it	hi
 800aa8a:	601c      	strhi	r4, [r3, #0]
}
 800aa8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	200027a4 	.word	0x200027a4
 800aa94:	200022ac 	.word	0x200022ac
 800aa98:	2000277c 	.word	0x2000277c
 800aa9c:	200022b4 	.word	0x200022b4
 800aaa0:	200022b0 	.word	0x200022b0
 800aaa4:	2000275c 	.word	0x2000275c

0800aaa8 <prvIdleTask>:
{
 800aaa8:	b580      	push	{r7, lr}
				taskYIELD();
 800aaaa:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 800aaae:	f8df a08c 	ldr.w	sl, [pc, #140]	; 800ab3c <prvIdleTask+0x94>
 800aab2:	4e20      	ldr	r6, [pc, #128]	; (800ab34 <prvIdleTask+0x8c>)
 800aab4:	4d20      	ldr	r5, [pc, #128]	; (800ab38 <prvIdleTask+0x90>)
 800aab6:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800ab40 <prvIdleTask+0x98>
 800aaba:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800ab44 <prvIdleTask+0x9c>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aabe:	682b      	ldr	r3, [r5, #0]
 800aac0:	b343      	cbz	r3, 800ab14 <prvIdleTask+0x6c>
			taskENTER_CRITICAL();
 800aac2:	f000 ff17 	bl	800b8f4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800aac6:	f8da 300c 	ldr.w	r3, [sl, #12]
 800aaca:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aacc:	1d20      	adds	r0, r4, #4
 800aace:	f7ff fa71 	bl	8009fb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aad2:	6833      	ldr	r3, [r6, #0]
 800aad4:	3b01      	subs	r3, #1
 800aad6:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aad8:	682b      	ldr	r3, [r5, #0]
 800aada:	3b01      	subs	r3, #1
 800aadc:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 800aade:	f000 ff2b 	bl	800b938 <vPortExitCritical>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aae2:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 800aae6:	b163      	cbz	r3, 800ab02 <prvIdleTask+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d01e      	beq.n	800ab2a <prvIdleTask+0x82>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	d0e6      	beq.n	800aabe <prvIdleTask+0x16>
 800aaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	e7fe      	b.n	800ab00 <prvIdleTask+0x58>
				vPortFree( pxTCB->pxStack );
 800ab02:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ab04:	f001 f89a 	bl	800bc3c <vPortFree>
				vPortFree( pxTCB );
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f001 f897 	bl	800bc3c <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab0e:	682b      	ldr	r3, [r5, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d1d6      	bne.n	800aac2 <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ab14:	f8d9 3000 	ldr.w	r3, [r9]
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d9d0      	bls.n	800aabe <prvIdleTask+0x16>
				taskYIELD();
 800ab1c:	f8c8 7000 	str.w	r7, [r8]
 800ab20:	f3bf 8f4f 	dsb	sy
 800ab24:	f3bf 8f6f 	isb	sy
 800ab28:	e7c9      	b.n	800aabe <prvIdleTask+0x16>
				vPortFree( pxTCB );
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	f001 f886 	bl	800bc3c <vPortFree>
 800ab30:	e7c5      	b.n	800aabe <prvIdleTask+0x16>
 800ab32:	bf00      	nop
 800ab34:	2000271c 	.word	0x2000271c
 800ab38:	20002720 	.word	0x20002720
 800ab3c:	20002790 	.word	0x20002790
 800ab40:	200022b8 	.word	0x200022b8
 800ab44:	e000ed04 	.word	0xe000ed04

0800ab48 <xTaskCreateStatic>:
	{
 800ab48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab4a:	b087      	sub	sp, #28
 800ab4c:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 800ab50:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		configASSERT( puxStackBuffer != NULL );
 800ab52:	b1bd      	cbz	r5, 800ab84 <xTaskCreateStatic+0x3c>
		configASSERT( pxTaskBuffer != NULL );
 800ab54:	b16c      	cbz	r4, 800ab72 <xTaskCreateStatic+0x2a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab56:	2764      	movs	r7, #100	; 0x64
 800ab58:	9704      	str	r7, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab5a:	9f04      	ldr	r7, [sp, #16]
 800ab5c:	2f64      	cmp	r7, #100	; 0x64
 800ab5e:	d01a      	beq.n	800ab96 <xTaskCreateStatic+0x4e>
 800ab60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab64:	f383 8811 	msr	BASEPRI, r3
 800ab68:	f3bf 8f6f 	isb	sy
 800ab6c:	f3bf 8f4f 	dsb	sy
 800ab70:	e7fe      	b.n	800ab70 <xTaskCreateStatic+0x28>
 800ab72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab76:	f383 8811 	msr	BASEPRI, r3
 800ab7a:	f3bf 8f6f 	isb	sy
 800ab7e:	f3bf 8f4f 	dsb	sy
 800ab82:	e7fe      	b.n	800ab82 <xTaskCreateStatic+0x3a>
 800ab84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab88:	f383 8811 	msr	BASEPRI, r3
 800ab8c:	f3bf 8f6f 	isb	sy
 800ab90:	f3bf 8f4f 	dsb	sy
 800ab94:	e7fe      	b.n	800ab94 <xTaskCreateStatic+0x4c>
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab96:	2702      	movs	r7, #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab98:	6325      	str	r5, [r4, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab9a:	ad05      	add	r5, sp, #20
 800ab9c:	9402      	str	r4, [sp, #8]
 800ab9e:	9600      	str	r6, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aba0:	f884 7061 	strb.w	r7, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aba4:	9501      	str	r5, [sp, #4]
 800aba6:	f7ff fef9 	bl	800a99c <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abaa:	4620      	mov	r0, r4
 800abac:	f7ff fe6e 	bl	800a88c <prvAddNewTaskToReadyList>
	}
 800abb0:	9805      	ldr	r0, [sp, #20]
 800abb2:	b007      	add	sp, #28
 800abb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abb6:	bf00      	nop

0800abb8 <xTaskCreate>:
	{
 800abb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abbc:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 800abc0:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abc2:	4650      	mov	r0, sl
	{
 800abc4:	460d      	mov	r5, r1
 800abc6:	4699      	mov	r9, r3
 800abc8:	9f09      	ldr	r7, [sp, #36]	; 0x24
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abca:	f000 ffa3 	bl	800bb14 <pvPortMalloc>
			if( pxStack != NULL )
 800abce:	2800      	cmp	r0, #0
 800abd0:	f000 809f 	beq.w	800ad12 <xTaskCreate+0x15a>
 800abd4:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800abd6:	2064      	movs	r0, #100	; 0x64
 800abd8:	f000 ff9c 	bl	800bb14 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800abdc:	4604      	mov	r4, r0
 800abde:	2800      	cmp	r0, #0
 800abe0:	f000 8090 	beq.w	800ad04 <xTaskCreate+0x14c>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800abe4:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800abe6:	6306      	str	r6, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800abe8:	4652      	mov	r2, sl
 800abea:	4630      	mov	r0, r6
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800abec:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800abf0:	21a5      	movs	r1, #165	; 0xa5
 800abf2:	f002 f90d 	bl	800ce10 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800abf6:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800abf8:	f1aa 0a04 	sub.w	sl, sl, #4
 800abfc:	4456      	add	r6, sl
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800abfe:	f026 0607 	bic.w	r6, r6, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800ac02:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac04:	782b      	ldrb	r3, [r5, #0]
 800ac06:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 800ac0a:	782b      	ldrb	r3, [r5, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d04d      	beq.n	800acac <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac10:	786b      	ldrb	r3, [r5, #1]
 800ac12:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 800ac16:	786b      	ldrb	r3, [r5, #1]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d047      	beq.n	800acac <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac1c:	78ab      	ldrb	r3, [r5, #2]
 800ac1e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 800ac22:	78ab      	ldrb	r3, [r5, #2]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d041      	beq.n	800acac <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac28:	78eb      	ldrb	r3, [r5, #3]
 800ac2a:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 800ac2e:	78eb      	ldrb	r3, [r5, #3]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d03b      	beq.n	800acac <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac34:	792b      	ldrb	r3, [r5, #4]
 800ac36:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 800ac3a:	792b      	ldrb	r3, [r5, #4]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d035      	beq.n	800acac <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac40:	796b      	ldrb	r3, [r5, #5]
 800ac42:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 800ac46:	796b      	ldrb	r3, [r5, #5]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d02f      	beq.n	800acac <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac4c:	79ab      	ldrb	r3, [r5, #6]
 800ac4e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 800ac52:	79ab      	ldrb	r3, [r5, #6]
 800ac54:	b353      	cbz	r3, 800acac <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac56:	79eb      	ldrb	r3, [r5, #7]
 800ac58:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 800ac5c:	79eb      	ldrb	r3, [r5, #7]
 800ac5e:	b32b      	cbz	r3, 800acac <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac60:	7a2b      	ldrb	r3, [r5, #8]
 800ac62:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 800ac66:	7a2b      	ldrb	r3, [r5, #8]
 800ac68:	b303      	cbz	r3, 800acac <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac6a:	7a6b      	ldrb	r3, [r5, #9]
 800ac6c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 800ac70:	7a6b      	ldrb	r3, [r5, #9]
 800ac72:	b1db      	cbz	r3, 800acac <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac74:	7aab      	ldrb	r3, [r5, #10]
 800ac76:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 800ac7a:	7aab      	ldrb	r3, [r5, #10]
 800ac7c:	b1b3      	cbz	r3, 800acac <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac7e:	7aeb      	ldrb	r3, [r5, #11]
 800ac80:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 800ac84:	7aeb      	ldrb	r3, [r5, #11]
 800ac86:	b18b      	cbz	r3, 800acac <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac88:	7b2b      	ldrb	r3, [r5, #12]
 800ac8a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 800ac8e:	7b2b      	ldrb	r3, [r5, #12]
 800ac90:	b163      	cbz	r3, 800acac <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac92:	7b6b      	ldrb	r3, [r5, #13]
 800ac94:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 800ac98:	7b6b      	ldrb	r3, [r5, #13]
 800ac9a:	b13b      	cbz	r3, 800acac <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac9c:	7bab      	ldrb	r3, [r5, #14]
 800ac9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		if( pcName[ x ] == 0x00 )
 800aca2:	7bab      	ldrb	r3, [r5, #14]
 800aca4:	b113      	cbz	r3, 800acac <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aca6:	7beb      	ldrb	r3, [r5, #15]
 800aca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acac:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800acae:	f04f 0a00 	mov.w	sl, #0
 800acb2:	2d37      	cmp	r5, #55	; 0x37
 800acb4:	bf28      	it	cs
 800acb6:	2537      	movcs	r5, #55	; 0x37
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800acb8:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800acba:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800acbc:	6525      	str	r5, [r4, #80]	; 0x50
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800acbe:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 800acc2:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800acc6:	f7ff f949 	bl	8009f5c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acca:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800acce:	f104 0018 	add.w	r0, r4, #24
 800acd2:	f7ff f943 	bl	8009f5c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800acd6:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acda:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulRunTimeCounter = 0UL;
 800acdc:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ace0:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ace4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ace6:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ace8:	464a      	mov	r2, r9
 800acea:	4641      	mov	r1, r8
 800acec:	4630      	mov	r0, r6
 800acee:	f000 fddb 	bl	800b8a8 <pxPortInitialiseStack>
 800acf2:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800acf4:	b107      	cbz	r7, 800acf8 <xTaskCreate+0x140>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800acf6:	603c      	str	r4, [r7, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 800acf8:	4620      	mov	r0, r4
 800acfa:	f7ff fdc7 	bl	800a88c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800acfe:	2001      	movs	r0, #1
	}
 800ad00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					vPortFree( pxStack );
 800ad04:	4630      	mov	r0, r6
 800ad06:	f000 ff99 	bl	800bc3c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ad0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 800ad0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ad12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 800ad16:	e7f3      	b.n	800ad00 <xTaskCreate+0x148>

0800ad18 <vTaskStartScheduler>:
{
 800ad18:	b530      	push	{r4, r5, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ad1a:	2400      	movs	r4, #0
{
 800ad1c:	b08b      	sub	sp, #44	; 0x2c
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ad1e:	aa07      	add	r2, sp, #28
 800ad20:	a906      	add	r1, sp, #24
 800ad22:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ad24:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ad28:	f7ff f8f0 	bl	8009f0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ad2c:	e9dd 5305 	ldrd	r5, r3, [sp, #20]
		configASSERT( puxStackBuffer != NULL );
 800ad30:	b1c3      	cbz	r3, 800ad64 <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
 800ad32:	b175      	cbz	r5, 800ad52 <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800ad34:	2264      	movs	r2, #100	; 0x64
 800ad36:	9208      	str	r2, [sp, #32]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ad38:	9908      	ldr	r1, [sp, #32]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ad3a:	9a07      	ldr	r2, [sp, #28]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ad3c:	2964      	cmp	r1, #100	; 0x64
 800ad3e:	d01a      	beq.n	800ad76 <vTaskStartScheduler+0x5e>
 800ad40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad44:	f383 8811 	msr	BASEPRI, r3
 800ad48:	f3bf 8f6f 	isb	sy
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	e7fe      	b.n	800ad50 <vTaskStartScheduler+0x38>
 800ad52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad56:	f383 8811 	msr	BASEPRI, r3
 800ad5a:	f3bf 8f6f 	isb	sy
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	e7fe      	b.n	800ad62 <vTaskStartScheduler+0x4a>
 800ad64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad68:	f383 8811 	msr	BASEPRI, r3
 800ad6c:	f3bf 8f6f 	isb	sy
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	e7fe      	b.n	800ad74 <vTaskStartScheduler+0x5c>
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad76:	2002      	movs	r0, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad78:	a909      	add	r1, sp, #36	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ad7a:	632b      	str	r3, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad7c:	f885 0061 	strb.w	r0, [r5, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad80:	4623      	mov	r3, r4
 800ad82:	e9cd 4100 	strd	r4, r1, [sp]
 800ad86:	4818      	ldr	r0, [pc, #96]	; (800ade8 <vTaskStartScheduler+0xd0>)
 800ad88:	4918      	ldr	r1, [pc, #96]	; (800adec <vTaskStartScheduler+0xd4>)
 800ad8a:	9502      	str	r5, [sp, #8]
 800ad8c:	f7ff fe06 	bl	800a99c <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad90:	4628      	mov	r0, r5
 800ad92:	f7ff fd7b 	bl	800a88c <prvAddNewTaskToReadyList>
		return xReturn;
 800ad96:	9b09      	ldr	r3, [sp, #36]	; 0x24
		if( xIdleTaskHandle != NULL )
 800ad98:	b12b      	cbz	r3, 800ada6 <vTaskStartScheduler+0x8e>
			xReturn = xTimerCreateTimerTask();
 800ad9a:	f000 fcf7 	bl	800b78c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800ad9e:	2801      	cmp	r0, #1
 800ada0:	d00c      	beq.n	800adbc <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ada2:	3001      	adds	r0, #1
 800ada4:	d001      	beq.n	800adaa <vTaskStartScheduler+0x92>
}
 800ada6:	b00b      	add	sp, #44	; 0x2c
 800ada8:	bd30      	pop	{r4, r5, pc}
 800adaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adae:	f383 8811 	msr	BASEPRI, r3
 800adb2:	f3bf 8f6f 	isb	sy
 800adb6:	f3bf 8f4f 	dsb	sy
 800adba:	e7fe      	b.n	800adba <vTaskStartScheduler+0xa2>
 800adbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc0:	f383 8811 	msr	BASEPRI, r3
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800adcc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800add0:	4907      	ldr	r1, [pc, #28]	; (800adf0 <vTaskStartScheduler+0xd8>)
		xSchedulerRunning = pdTRUE;
 800add2:	4a08      	ldr	r2, [pc, #32]	; (800adf4 <vTaskStartScheduler+0xdc>)
		xTickCount = ( TickType_t ) 0U;
 800add4:	4b08      	ldr	r3, [pc, #32]	; (800adf8 <vTaskStartScheduler+0xe0>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800add6:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 800add8:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 800adda:	601c      	str	r4, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800addc:	f7fb fb78 	bl	80064d0 <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800ade0:	f000 fe14 	bl	800ba0c <xPortStartScheduler>
 800ade4:	e7df      	b.n	800ada6 <vTaskStartScheduler+0x8e>
 800ade6:	bf00      	nop
 800ade8:	0800aaa9 	.word	0x0800aaa9
 800adec:	0800d0f8 	.word	0x0800d0f8
 800adf0:	2000275c 	.word	0x2000275c
 800adf4:	20002778 	.word	0x20002778
 800adf8:	200027a4 	.word	0x200027a4

0800adfc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800adfc:	4a02      	ldr	r2, [pc, #8]	; (800ae08 <vTaskSuspendAll+0xc>)
 800adfe:	6813      	ldr	r3, [r2, #0]
 800ae00:	3301      	adds	r3, #1
 800ae02:	6013      	str	r3, [r2, #0]
}
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	20002728 	.word	0x20002728

0800ae0c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800ae0c:	4b01      	ldr	r3, [pc, #4]	; (800ae14 <xTaskGetTickCount+0x8>)
 800ae0e:	6818      	ldr	r0, [r3, #0]
}
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	200027a4 	.word	0x200027a4

0800ae18 <xTaskIncrementTick>:
{
 800ae18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae1c:	4b45      	ldr	r3, [pc, #276]	; (800af34 <xTaskIncrementTick+0x11c>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	b9cb      	cbnz	r3, 800ae56 <xTaskIncrementTick+0x3e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ae22:	4b45      	ldr	r3, [pc, #276]	; (800af38 <xTaskIncrementTick+0x120>)
 800ae24:	681f      	ldr	r7, [r3, #0]
 800ae26:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 800ae28:	601f      	str	r7, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae2a:	b30f      	cbz	r7, 800ae70 <xTaskIncrementTick+0x58>
 800ae2c:	4e43      	ldr	r6, [pc, #268]	; (800af3c <xTaskIncrementTick+0x124>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ae2e:	6833      	ldr	r3, [r6, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800ae30:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ae32:	42bb      	cmp	r3, r7
 800ae34:	d92a      	bls.n	800ae8c <xTaskIncrementTick+0x74>
 800ae36:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800af58 <xTaskIncrementTick+0x140>
 800ae3a:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800af5c <xTaskIncrementTick+0x144>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ae3e:	f8d9 3000 	ldr.w	r3, [r9]
 800ae42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	f858 3003 	ldr.w	r3, [r8, r3]
				xSwitchRequired = pdTRUE;
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	bf28      	it	cs
 800ae52:	2501      	movcs	r5, #1
 800ae54:	e004      	b.n	800ae60 <xTaskIncrementTick+0x48>
BaseType_t xSwitchRequired = pdFALSE;
 800ae56:	2500      	movs	r5, #0
		++uxPendedTicks;
 800ae58:	4a39      	ldr	r2, [pc, #228]	; (800af40 <xTaskIncrementTick+0x128>)
 800ae5a:	6813      	ldr	r3, [r2, #0]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 800ae60:	4b38      	ldr	r3, [pc, #224]	; (800af44 <xTaskIncrementTick+0x12c>)
 800ae62:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800ae64:	2b00      	cmp	r3, #0
}
 800ae66:	bf0c      	ite	eq
 800ae68:	4628      	moveq	r0, r5
 800ae6a:	2001      	movne	r0, #1
 800ae6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800ae70:	4c35      	ldr	r4, [pc, #212]	; (800af48 <xTaskIncrementTick+0x130>)
 800ae72:	6823      	ldr	r3, [r4, #0]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d044      	beq.n	800af04 <xTaskIncrementTick+0xec>
 800ae7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7e:	f383 8811 	msr	BASEPRI, r3
 800ae82:	f3bf 8f6f 	isb	sy
 800ae86:	f3bf 8f4f 	dsb	sy
 800ae8a:	e7fe      	b.n	800ae8a <xTaskIncrementTick+0x72>
 800ae8c:	4c2e      	ldr	r4, [pc, #184]	; (800af48 <xTaskIncrementTick+0x130>)
 800ae8e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800af58 <xTaskIncrementTick+0x140>
 800ae92:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800af5c <xTaskIncrementTick+0x144>
 800ae96:	e02b      	b.n	800aef0 <xTaskIncrementTick+0xd8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ae98:	6823      	ldr	r3, [r4, #0]
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	f8d3 a00c 	ldr.w	sl, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aea0:	f8da 2004 	ldr.w	r2, [sl, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aea4:	f10a 0b04 	add.w	fp, sl, #4
					if( xConstTickCount < xItemValue )
 800aea8:	4297      	cmp	r7, r2
 800aeaa:	d329      	bcc.n	800af00 <xTaskIncrementTick+0xe8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aeac:	4658      	mov	r0, fp
 800aeae:	f7ff f881 	bl	8009fb4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aeb2:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aeb6:	f10a 0018 	add.w	r0, sl, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aeba:	b10a      	cbz	r2, 800aec0 <xTaskIncrementTick+0xa8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aebc:	f7ff f87a 	bl	8009fb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aec0:	4b22      	ldr	r3, [pc, #136]	; (800af4c <xTaskIncrementTick+0x134>)
 800aec2:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800aecc:	429a      	cmp	r2, r3
 800aece:	bf88      	it	hi
 800aed0:	4b1e      	ldrhi	r3, [pc, #120]	; (800af4c <xTaskIncrementTick+0x134>)
 800aed2:	4659      	mov	r1, fp
 800aed4:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800aed8:	bf88      	it	hi
 800aeda:	601a      	strhi	r2, [r3, #0]
 800aedc:	f7ff f842 	bl	8009f64 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aee0:	f8d9 1000 	ldr.w	r1, [r9]
 800aee4:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 800aee8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800aeea:	429a      	cmp	r2, r3
 800aeec:	bf28      	it	cs
 800aeee:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aef0:	6823      	ldr	r3, [r4, #0]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d1cf      	bne.n	800ae98 <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aefc:	6033      	str	r3, [r6, #0]
					break;
 800aefe:	e79e      	b.n	800ae3e <xTaskIncrementTick+0x26>
						xNextTaskUnblockTime = xItemValue;
 800af00:	6032      	str	r2, [r6, #0]
						break;
 800af02:	e79c      	b.n	800ae3e <xTaskIncrementTick+0x26>
			taskSWITCH_DELAYED_LISTS();
 800af04:	4b12      	ldr	r3, [pc, #72]	; (800af50 <xTaskIncrementTick+0x138>)
 800af06:	6821      	ldr	r1, [r4, #0]
 800af08:	6818      	ldr	r0, [r3, #0]
 800af0a:	4a12      	ldr	r2, [pc, #72]	; (800af54 <xTaskIncrementTick+0x13c>)
 800af0c:	6020      	str	r0, [r4, #0]
 800af0e:	6019      	str	r1, [r3, #0]
 800af10:	6813      	ldr	r3, [r2, #0]
 800af12:	3301      	adds	r3, #1
 800af14:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af16:	6823      	ldr	r3, [r4, #0]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	b923      	cbnz	r3, 800af26 <xTaskIncrementTick+0x10e>
		xNextTaskUnblockTime = portMAX_DELAY;
 800af1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af20:	4e06      	ldr	r6, [pc, #24]	; (800af3c <xTaskIncrementTick+0x124>)
 800af22:	6033      	str	r3, [r6, #0]
 800af24:	e783      	b.n	800ae2e <xTaskIncrementTick+0x16>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800af26:	6823      	ldr	r3, [r4, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800af28:	4e04      	ldr	r6, [pc, #16]	; (800af3c <xTaskIncrementTick+0x124>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800af2a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	6033      	str	r3, [r6, #0]
 800af32:	e77c      	b.n	800ae2e <xTaskIncrementTick+0x16>
 800af34:	20002728 	.word	0x20002728
 800af38:	200027a4 	.word	0x200027a4
 800af3c:	2000275c 	.word	0x2000275c
 800af40:	20002724 	.word	0x20002724
 800af44:	200027a8 	.word	0x200027a8
 800af48:	200022b0 	.word	0x200022b0
 800af4c:	20002730 	.word	0x20002730
 800af50:	200022b4 	.word	0x200022b4
 800af54:	20002760 	.word	0x20002760
 800af58:	200022b8 	.word	0x200022b8
 800af5c:	200022ac 	.word	0x200022ac

0800af60 <xTaskResumeAll>:
{
 800af60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	configASSERT( uxSchedulerSuspended );
 800af64:	4c36      	ldr	r4, [pc, #216]	; (800b040 <xTaskResumeAll+0xe0>)
 800af66:	6823      	ldr	r3, [r4, #0]
 800af68:	b943      	cbnz	r3, 800af7c <xTaskResumeAll+0x1c>
 800af6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6e:	f383 8811 	msr	BASEPRI, r3
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	f3bf 8f4f 	dsb	sy
 800af7a:	e7fe      	b.n	800af7a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800af7c:	f000 fcba 	bl	800b8f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800af80:	6823      	ldr	r3, [r4, #0]
 800af82:	3b01      	subs	r3, #1
 800af84:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af86:	6824      	ldr	r4, [r4, #0]
 800af88:	bb5c      	cbnz	r4, 800afe2 <xTaskResumeAll+0x82>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af8a:	4b2e      	ldr	r3, [pc, #184]	; (800b044 <xTaskResumeAll+0xe4>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	b343      	cbz	r3, 800afe2 <xTaskResumeAll+0x82>
 800af90:	4e2d      	ldr	r6, [pc, #180]	; (800b048 <xTaskResumeAll+0xe8>)
 800af92:	4f2e      	ldr	r7, [pc, #184]	; (800b04c <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 800af94:	4d2e      	ldr	r5, [pc, #184]	; (800b050 <xTaskResumeAll+0xf0>)
 800af96:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 800b064 <xTaskResumeAll+0x104>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af9a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 800b068 <xTaskResumeAll+0x108>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	b32b      	cbz	r3, 800afee <xTaskResumeAll+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afa6:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afaa:	f104 0018 	add.w	r0, r4, #24
 800afae:	f7ff f801 	bl	8009fb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afb2:	4640      	mov	r0, r8
 800afb4:	f7fe fffe 	bl	8009fb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800afb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800afba:	682a      	ldr	r2, [r5, #0]
 800afbc:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800afc0:	4293      	cmp	r3, r2
 800afc2:	4641      	mov	r1, r8
 800afc4:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 800afc8:	bf88      	it	hi
 800afca:	602b      	strhi	r3, [r5, #0]
 800afcc:	f7fe ffca 	bl	8009f64 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800afd0:	f8d9 3000 	ldr.w	r3, [r9]
 800afd4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800afd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd8:	429a      	cmp	r2, r3
 800afda:	d3e0      	bcc.n	800af9e <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 800afdc:	2301      	movs	r3, #1
 800afde:	6033      	str	r3, [r6, #0]
 800afe0:	e7dd      	b.n	800af9e <xTaskResumeAll+0x3e>
BaseType_t xAlreadyYielded = pdFALSE;
 800afe2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800afe4:	f000 fca8 	bl	800b938 <vPortExitCritical>
}
 800afe8:	4620      	mov	r0, r4
 800afea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if( pxTCB != NULL )
 800afee:	b13c      	cbz	r4, 800b000 <xTaskResumeAll+0xa0>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aff0:	4b18      	ldr	r3, [pc, #96]	; (800b054 <xTaskResumeAll+0xf4>)
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	6812      	ldr	r2, [r2, #0]
 800aff6:	b9da      	cbnz	r2, 800b030 <xTaskResumeAll+0xd0>
		xNextTaskUnblockTime = portMAX_DELAY;
 800aff8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800affc:	4b16      	ldr	r3, [pc, #88]	; (800b058 <xTaskResumeAll+0xf8>)
 800affe:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b000:	4d16      	ldr	r5, [pc, #88]	; (800b05c <xTaskResumeAll+0xfc>)
 800b002:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b004:	b13c      	cbz	r4, 800b016 <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
 800b006:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800b008:	f7ff ff06 	bl	800ae18 <xTaskIncrementTick>
 800b00c:	b100      	cbz	r0, 800b010 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800b00e:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b010:	3c01      	subs	r4, #1
 800b012:	d1f9      	bne.n	800b008 <xTaskResumeAll+0xa8>
						uxPendedTicks = 0;
 800b014:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800b016:	6833      	ldr	r3, [r6, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d0e2      	beq.n	800afe2 <xTaskResumeAll+0x82>
					taskYIELD_IF_USING_PREEMPTION();
 800b01c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b020:	4b0f      	ldr	r3, [pc, #60]	; (800b060 <xTaskResumeAll+0x100>)
 800b022:	601a      	str	r2, [r3, #0]
 800b024:	f3bf 8f4f 	dsb	sy
 800b028:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800b02c:	2401      	movs	r4, #1
 800b02e:	e7d9      	b.n	800afe4 <xTaskResumeAll+0x84>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b030:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b032:	4b09      	ldr	r3, [pc, #36]	; (800b058 <xTaskResumeAll+0xf8>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b034:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b036:	68d2      	ldr	r2, [r2, #12]
 800b038:	6852      	ldr	r2, [r2, #4]
 800b03a:	601a      	str	r2, [r3, #0]
 800b03c:	e7e0      	b.n	800b000 <xTaskResumeAll+0xa0>
 800b03e:	bf00      	nop
 800b040:	20002728 	.word	0x20002728
 800b044:	2000271c 	.word	0x2000271c
 800b048:	200027a8 	.word	0x200027a8
 800b04c:	20002764 	.word	0x20002764
 800b050:	20002730 	.word	0x20002730
 800b054:	200022b0 	.word	0x200022b0
 800b058:	2000275c 	.word	0x2000275c
 800b05c:	20002724 	.word	0x20002724
 800b060:	e000ed04 	.word	0xe000ed04
 800b064:	200022b8 	.word	0x200022b8
 800b068:	200022ac 	.word	0x200022ac

0800b06c <vTaskDelayUntil>:
		configASSERT( pxPreviousWakeTime );
 800b06c:	b1b0      	cbz	r0, 800b09c <vTaskDelayUntil+0x30>
 800b06e:	460b      	mov	r3, r1
		configASSERT( ( xTimeIncrement > 0U ) );
 800b070:	b941      	cbnz	r1, 800b084 <vTaskDelayUntil+0x18>
 800b072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b076:	f383 8811 	msr	BASEPRI, r3
 800b07a:	f3bf 8f6f 	isb	sy
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	e7fe      	b.n	800b082 <vTaskDelayUntil+0x16>
		configASSERT( uxSchedulerSuspended == 0 );
 800b084:	491c      	ldr	r1, [pc, #112]	; (800b0f8 <vTaskDelayUntil+0x8c>)
 800b086:	680a      	ldr	r2, [r1, #0]
 800b088:	b18a      	cbz	r2, 800b0ae <vTaskDelayUntil+0x42>
 800b08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08e:	f383 8811 	msr	BASEPRI, r3
 800b092:	f3bf 8f6f 	isb	sy
 800b096:	f3bf 8f4f 	dsb	sy
 800b09a:	e7fe      	b.n	800b09a <vTaskDelayUntil+0x2e>
 800b09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a0:	f383 8811 	msr	BASEPRI, r3
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	e7fe      	b.n	800b0ac <vTaskDelayUntil+0x40>
 800b0ae:	4602      	mov	r2, r0
	++uxSchedulerSuspended;
 800b0b0:	6808      	ldr	r0, [r1, #0]
	{
 800b0b2:	b510      	push	{r4, lr}
	++uxSchedulerSuspended;
 800b0b4:	3001      	adds	r0, #1
			const TickType_t xConstTickCount = xTickCount;
 800b0b6:	4c11      	ldr	r4, [pc, #68]	; (800b0fc <vTaskDelayUntil+0x90>)
	++uxSchedulerSuspended;
 800b0b8:	6008      	str	r0, [r1, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b0ba:	6811      	ldr	r1, [r2, #0]
			const TickType_t xConstTickCount = xTickCount;
 800b0bc:	6820      	ldr	r0, [r4, #0]
 800b0be:	18cb      	adds	r3, r1, r3
 800b0c0:	bf2c      	ite	cs
 800b0c2:	2401      	movcs	r4, #1
 800b0c4:	2400      	movcc	r4, #0
			if( xConstTickCount < *pxPreviousWakeTime )
 800b0c6:	4281      	cmp	r1, r0
			*pxPreviousWakeTime = xTimeToWake;
 800b0c8:	6013      	str	r3, [r2, #0]
			if( xConstTickCount < *pxPreviousWakeTime )
 800b0ca:	d912      	bls.n	800b0f2 <vTaskDelayUntil+0x86>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b0cc:	b12c      	cbz	r4, 800b0da <vTaskDelayUntil+0x6e>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b0ce:	4298      	cmp	r0, r3
 800b0d0:	d203      	bcs.n	800b0da <vTaskDelayUntil+0x6e>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b0d2:	1a18      	subs	r0, r3, r0
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	f7ff fcad 	bl	800aa34 <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
 800b0da:	f7ff ff41 	bl	800af60 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800b0de:	b938      	cbnz	r0, 800b0f0 <vTaskDelayUntil+0x84>
			portYIELD_WITHIN_API();
 800b0e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0e4:	4b06      	ldr	r3, [pc, #24]	; (800b100 <vTaskDelayUntil+0x94>)
 800b0e6:	601a      	str	r2, [r3, #0]
 800b0e8:	f3bf 8f4f 	dsb	sy
 800b0ec:	f3bf 8f6f 	isb	sy
	}
 800b0f0:	bd10      	pop	{r4, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b0f2:	2c00      	cmp	r4, #0
 800b0f4:	d1ed      	bne.n	800b0d2 <vTaskDelayUntil+0x66>
 800b0f6:	e7ea      	b.n	800b0ce <vTaskDelayUntil+0x62>
 800b0f8:	20002728 	.word	0x20002728
 800b0fc:	200027a4 	.word	0x200027a4
 800b100:	e000ed04 	.word	0xe000ed04

0800b104 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b104:	4b21      	ldr	r3, [pc, #132]	; (800b18c <vTaskSwitchContext+0x88>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	b11b      	cbz	r3, 800b112 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800b10a:	2201      	movs	r2, #1
 800b10c:	4b20      	ldr	r3, [pc, #128]	; (800b190 <vTaskSwitchContext+0x8c>)
 800b10e:	601a      	str	r2, [r3, #0]
 800b110:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800b112:	4a1f      	ldr	r2, [pc, #124]	; (800b190 <vTaskSwitchContext+0x8c>)
{
 800b114:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
 800b116:	6013      	str	r3, [r2, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b118:	f7fb f9e0 	bl	80064dc <getRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b11c:	491d      	ldr	r1, [pc, #116]	; (800b194 <vTaskSwitchContext+0x90>)
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b11e:	4d1e      	ldr	r5, [pc, #120]	; (800b198 <vTaskSwitchContext+0x94>)
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b120:	680c      	ldr	r4, [r1, #0]
 800b122:	42a0      	cmp	r0, r4
 800b124:	d904      	bls.n	800b130 <vTaskSwitchContext+0x2c>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b126:	682a      	ldr	r2, [r5, #0]
 800b128:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b12a:	1b1b      	subs	r3, r3, r4
 800b12c:	4403      	add	r3, r0
 800b12e:	6593      	str	r3, [r2, #88]	; 0x58
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b130:	4e1a      	ldr	r6, [pc, #104]	; (800b19c <vTaskSwitchContext+0x98>)
 800b132:	4c1b      	ldr	r4, [pc, #108]	; (800b1a0 <vTaskSwitchContext+0x9c>)
 800b134:	6832      	ldr	r2, [r6, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
 800b136:	6008      	str	r0, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b138:	0093      	lsls	r3, r2, #2
 800b13a:	1899      	adds	r1, r3, r2
 800b13c:	0089      	lsls	r1, r1, #2
 800b13e:	5861      	ldr	r1, [r4, r1]
 800b140:	b939      	cbnz	r1, 800b152 <vTaskSwitchContext+0x4e>
 800b142:	b1a2      	cbz	r2, 800b16e <vTaskSwitchContext+0x6a>
 800b144:	3a01      	subs	r2, #1
 800b146:	0093      	lsls	r3, r2, #2
 800b148:	1899      	adds	r1, r3, r2
 800b14a:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800b14e:	2900      	cmp	r1, #0
 800b150:	d0f7      	beq.n	800b142 <vTaskSwitchContext+0x3e>
 800b152:	4413      	add	r3, r2
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	18e0      	adds	r0, r4, r3
 800b158:	6841      	ldr	r1, [r0, #4]
 800b15a:	3308      	adds	r3, #8
 800b15c:	6849      	ldr	r1, [r1, #4]
 800b15e:	4423      	add	r3, r4
 800b160:	4299      	cmp	r1, r3
 800b162:	6041      	str	r1, [r0, #4]
 800b164:	d00c      	beq.n	800b180 <vTaskSwitchContext+0x7c>
 800b166:	68cb      	ldr	r3, [r1, #12]
 800b168:	602b      	str	r3, [r5, #0]
 800b16a:	6032      	str	r2, [r6, #0]
}
 800b16c:	bd70      	pop	{r4, r5, r6, pc}
 800b16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b172:	f383 8811 	msr	BASEPRI, r3
 800b176:	f3bf 8f6f 	isb	sy
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	e7fe      	b.n	800b17e <vTaskSwitchContext+0x7a>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b180:	2314      	movs	r3, #20
 800b182:	fb03 4402 	mla	r4, r3, r2, r4
 800b186:	6849      	ldr	r1, [r1, #4]
 800b188:	6061      	str	r1, [r4, #4]
 800b18a:	e7ec      	b.n	800b166 <vTaskSwitchContext+0x62>
 800b18c:	20002728 	.word	0x20002728
 800b190:	200027a8 	.word	0x200027a8
 800b194:	20002718 	.word	0x20002718
 800b198:	200022ac 	.word	0x200022ac
 800b19c:	20002730 	.word	0x20002730
 800b1a0:	200022b8 	.word	0x200022b8

0800b1a4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800b1a4:	b940      	cbnz	r0, 800b1b8 <vTaskPlaceOnEventList+0x14>
 800b1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1aa:	f383 8811 	msr	BASEPRI, r3
 800b1ae:	f3bf 8f6f 	isb	sy
 800b1b2:	f3bf 8f4f 	dsb	sy
 800b1b6:	e7fe      	b.n	800b1b6 <vTaskPlaceOnEventList+0x12>
{
 800b1b8:	b570      	push	{r4, r5, r6, lr}
 800b1ba:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b1bc:	4d15      	ldr	r5, [pc, #84]	; (800b214 <vTaskPlaceOnEventList+0x70>)
 800b1be:	6829      	ldr	r1, [r5, #0]
 800b1c0:	3118      	adds	r1, #24
 800b1c2:	f7fe fedd 	bl	8009f80 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 800b1c6:	4b14      	ldr	r3, [pc, #80]	; (800b218 <vTaskPlaceOnEventList+0x74>)
 800b1c8:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1ca:	6828      	ldr	r0, [r5, #0]
 800b1cc:	3004      	adds	r0, #4
 800b1ce:	f7fe fef1 	bl	8009fb4 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b1d2:	1c63      	adds	r3, r4, #1
 800b1d4:	d00f      	beq.n	800b1f6 <vTaskPlaceOnEventList+0x52>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b1d6:	682b      	ldr	r3, [r5, #0]
 800b1d8:	19a4      	adds	r4, r4, r6
 800b1da:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b1dc:	d212      	bcs.n	800b204 <vTaskPlaceOnEventList+0x60>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1de:	4b0f      	ldr	r3, [pc, #60]	; (800b21c <vTaskPlaceOnEventList+0x78>)
 800b1e0:	6818      	ldr	r0, [r3, #0]
 800b1e2:	6829      	ldr	r1, [r5, #0]
 800b1e4:	3104      	adds	r1, #4
 800b1e6:	f7fe fecb 	bl	8009f80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b1ea:	4b0d      	ldr	r3, [pc, #52]	; (800b220 <vTaskPlaceOnEventList+0x7c>)
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800b1f0:	bf38      	it	cc
 800b1f2:	601c      	strcc	r4, [r3, #0]
}
 800b1f4:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1f6:	6829      	ldr	r1, [r5, #0]
 800b1f8:	480a      	ldr	r0, [pc, #40]	; (800b224 <vTaskPlaceOnEventList+0x80>)
 800b1fa:	3104      	adds	r1, #4
}
 800b1fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b200:	f7fe beb0 	b.w	8009f64 <vListInsertEnd>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b204:	4b08      	ldr	r3, [pc, #32]	; (800b228 <vTaskPlaceOnEventList+0x84>)
 800b206:	6818      	ldr	r0, [r3, #0]
 800b208:	6829      	ldr	r1, [r5, #0]
}
 800b20a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b20e:	3104      	adds	r1, #4
 800b210:	f7fe beb6 	b.w	8009f80 <vListInsert>
 800b214:	200022ac 	.word	0x200022ac
 800b218:	200027a4 	.word	0x200027a4
 800b21c:	200022b0 	.word	0x200022b0
 800b220:	2000275c 	.word	0x2000275c
 800b224:	2000277c 	.word	0x2000277c
 800b228:	200022b4 	.word	0x200022b4

0800b22c <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
 800b22c:	b1a8      	cbz	r0, 800b25a <vTaskPlaceOnEventListRestricted+0x2e>
	{
 800b22e:	b570      	push	{r4, r5, r6, lr}
 800b230:	4616      	mov	r6, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b232:	4d1d      	ldr	r5, [pc, #116]	; (800b2a8 <vTaskPlaceOnEventListRestricted+0x7c>)
 800b234:	460c      	mov	r4, r1
 800b236:	6829      	ldr	r1, [r5, #0]
 800b238:	3118      	adds	r1, #24
 800b23a:	f7fe fe93 	bl	8009f64 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 800b23e:	4b1b      	ldr	r3, [pc, #108]	; (800b2ac <vTaskPlaceOnEventListRestricted+0x80>)
		if( xWaitIndefinitely != pdFALSE )
 800b240:	b1a6      	cbz	r6, 800b26c <vTaskPlaceOnEventListRestricted+0x40>
const TickType_t xConstTickCount = xTickCount;
 800b242:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b244:	6828      	ldr	r0, [r5, #0]
 800b246:	3004      	adds	r0, #4
 800b248:	f7fe feb4 	bl	8009fb4 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b24c:	6829      	ldr	r1, [r5, #0]
 800b24e:	4818      	ldr	r0, [pc, #96]	; (800b2b0 <vTaskPlaceOnEventListRestricted+0x84>)
 800b250:	3104      	adds	r1, #4
	}
 800b252:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b256:	f7fe be85 	b.w	8009f64 <vListInsertEnd>
 800b25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25e:	f383 8811 	msr	BASEPRI, r3
 800b262:	f3bf 8f6f 	isb	sy
 800b266:	f3bf 8f4f 	dsb	sy
 800b26a:	e7fe      	b.n	800b26a <vTaskPlaceOnEventListRestricted+0x3e>
const TickType_t xConstTickCount = xTickCount;
 800b26c:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b26e:	6828      	ldr	r0, [r5, #0]
 800b270:	3004      	adds	r0, #4
 800b272:	f7fe fe9f 	bl	8009fb4 <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b276:	682b      	ldr	r3, [r5, #0]
 800b278:	19a4      	adds	r4, r4, r6
 800b27a:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b27c:	d20b      	bcs.n	800b296 <vTaskPlaceOnEventListRestricted+0x6a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b27e:	4b0d      	ldr	r3, [pc, #52]	; (800b2b4 <vTaskPlaceOnEventListRestricted+0x88>)
 800b280:	6818      	ldr	r0, [r3, #0]
 800b282:	6829      	ldr	r1, [r5, #0]
 800b284:	3104      	adds	r1, #4
 800b286:	f7fe fe7b 	bl	8009f80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b28a:	4b0b      	ldr	r3, [pc, #44]	; (800b2b8 <vTaskPlaceOnEventListRestricted+0x8c>)
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800b290:	bf38      	it	cc
 800b292:	601c      	strcc	r4, [r3, #0]
	}
 800b294:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b296:	4b09      	ldr	r3, [pc, #36]	; (800b2bc <vTaskPlaceOnEventListRestricted+0x90>)
 800b298:	6818      	ldr	r0, [r3, #0]
 800b29a:	6829      	ldr	r1, [r5, #0]
	}
 800b29c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2a0:	3104      	adds	r1, #4
 800b2a2:	f7fe be6d 	b.w	8009f80 <vListInsert>
 800b2a6:	bf00      	nop
 800b2a8:	200022ac 	.word	0x200022ac
 800b2ac:	200027a4 	.word	0x200027a4
 800b2b0:	2000277c 	.word	0x2000277c
 800b2b4:	200022b0 	.word	0x200022b0
 800b2b8:	2000275c 	.word	0x2000275c
 800b2bc:	200022b4 	.word	0x200022b4

0800b2c0 <xTaskRemoveFromEventList>:
{
 800b2c0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b2c2:	68c3      	ldr	r3, [r0, #12]
 800b2c4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800b2c6:	b34c      	cbz	r4, 800b31c <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b2c8:	f104 0518 	add.w	r5, r4, #24
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	f7fe fe71 	bl	8009fb4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2d2:	4b18      	ldr	r3, [pc, #96]	; (800b334 <xTaskRemoveFromEventList+0x74>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	b9e3      	cbnz	r3, 800b312 <xTaskRemoveFromEventList+0x52>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b2d8:	1d25      	adds	r5, r4, #4
 800b2da:	4628      	mov	r0, r5
 800b2dc:	f7fe fe6a 	bl	8009fb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b2e0:	4a15      	ldr	r2, [pc, #84]	; (800b338 <xTaskRemoveFromEventList+0x78>)
 800b2e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b2e4:	6811      	ldr	r1, [r2, #0]
 800b2e6:	4815      	ldr	r0, [pc, #84]	; (800b33c <xTaskRemoveFromEventList+0x7c>)
 800b2e8:	428b      	cmp	r3, r1
 800b2ea:	bf88      	it	hi
 800b2ec:	6013      	strhi	r3, [r2, #0]
 800b2ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b2f2:	4629      	mov	r1, r5
 800b2f4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800b2f8:	f7fe fe34 	bl	8009f64 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b2fc:	4b10      	ldr	r3, [pc, #64]	; (800b340 <xTaskRemoveFromEventList+0x80>)
 800b2fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b304:	429a      	cmp	r2, r3
 800b306:	d912      	bls.n	800b32e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800b308:	2301      	movs	r3, #1
 800b30a:	4a0e      	ldr	r2, [pc, #56]	; (800b344 <xTaskRemoveFromEventList+0x84>)
		xReturn = pdTRUE;
 800b30c:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 800b30e:	6013      	str	r3, [r2, #0]
}
 800b310:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b312:	4629      	mov	r1, r5
 800b314:	480c      	ldr	r0, [pc, #48]	; (800b348 <xTaskRemoveFromEventList+0x88>)
 800b316:	f7fe fe25 	bl	8009f64 <vListInsertEnd>
 800b31a:	e7ef      	b.n	800b2fc <xTaskRemoveFromEventList+0x3c>
 800b31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b320:	f383 8811 	msr	BASEPRI, r3
 800b324:	f3bf 8f6f 	isb	sy
 800b328:	f3bf 8f4f 	dsb	sy
 800b32c:	e7fe      	b.n	800b32c <xTaskRemoveFromEventList+0x6c>
		xReturn = pdFALSE;
 800b32e:	2000      	movs	r0, #0
}
 800b330:	bd38      	pop	{r3, r4, r5, pc}
 800b332:	bf00      	nop
 800b334:	20002728 	.word	0x20002728
 800b338:	20002730 	.word	0x20002730
 800b33c:	200022b8 	.word	0x200022b8
 800b340:	200022ac 	.word	0x200022ac
 800b344:	200027a8 	.word	0x200027a8
 800b348:	20002764 	.word	0x20002764

0800b34c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b34c:	4a03      	ldr	r2, [pc, #12]	; (800b35c <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b34e:	4b04      	ldr	r3, [pc, #16]	; (800b360 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b350:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	e9c0 2300 	strd	r2, r3, [r0]
}
 800b358:	4770      	bx	lr
 800b35a:	bf00      	nop
 800b35c:	20002760 	.word	0x20002760
 800b360:	200027a4 	.word	0x200027a4

0800b364 <xTaskCheckForTimeOut>:
{
 800b364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800b366:	b340      	cbz	r0, 800b3ba <xTaskCheckForTimeOut+0x56>
	configASSERT( pxTicksToWait );
 800b368:	b1f1      	cbz	r1, 800b3a8 <xTaskCheckForTimeOut+0x44>
 800b36a:	460d      	mov	r5, r1
 800b36c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800b36e:	f000 fac1 	bl	800b8f4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800b372:	f8df c078 	ldr.w	ip, [pc, #120]	; 800b3ec <xTaskCheckForTimeOut+0x88>
			if( *pxTicksToWait == portMAX_DELAY )
 800b376:	682b      	ldr	r3, [r5, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b378:	6867      	ldr	r7, [r4, #4]
		const TickType_t xConstTickCount = xTickCount;
 800b37a:	f8dc 6000 	ldr.w	r6, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 800b37e:	1c59      	adds	r1, r3, #1
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b380:	eba6 0207 	sub.w	r2, r6, r7
			if( *pxTicksToWait == portMAX_DELAY )
 800b384:	d022      	beq.n	800b3cc <xTaskCheckForTimeOut+0x68>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b386:	4818      	ldr	r0, [pc, #96]	; (800b3e8 <xTaskCheckForTimeOut+0x84>)
 800b388:	6821      	ldr	r1, [r4, #0]
 800b38a:	f8d0 e000 	ldr.w	lr, [r0]
 800b38e:	4571      	cmp	r1, lr
 800b390:	d001      	beq.n	800b396 <xTaskCheckForTimeOut+0x32>
 800b392:	42b7      	cmp	r7, r6
 800b394:	d925      	bls.n	800b3e2 <xTaskCheckForTimeOut+0x7e>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b396:	4293      	cmp	r3, r2
 800b398:	d81a      	bhi.n	800b3d0 <xTaskCheckForTimeOut+0x6c>
			*pxTicksToWait = 0;
 800b39a:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 800b39c:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 800b39e:	602b      	str	r3, [r5, #0]
	taskEXIT_CRITICAL();
 800b3a0:	f000 faca 	bl	800b938 <vPortExitCritical>
}
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ac:	f383 8811 	msr	BASEPRI, r3
 800b3b0:	f3bf 8f6f 	isb	sy
 800b3b4:	f3bf 8f4f 	dsb	sy
 800b3b8:	e7fe      	b.n	800b3b8 <xTaskCheckForTimeOut+0x54>
 800b3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3be:	f383 8811 	msr	BASEPRI, r3
 800b3c2:	f3bf 8f6f 	isb	sy
 800b3c6:	f3bf 8f4f 	dsb	sy
 800b3ca:	e7fe      	b.n	800b3ca <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
 800b3cc:	2600      	movs	r6, #0
 800b3ce:	e7e7      	b.n	800b3a0 <xTaskCheckForTimeOut+0x3c>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b3d0:	6800      	ldr	r0, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b3d2:	f8dc 1000 	ldr.w	r1, [ip]
			*pxTicksToWait -= xElapsedTime;
 800b3d6:	1a9b      	subs	r3, r3, r2
 800b3d8:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
 800b3da:	2600      	movs	r6, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b3dc:	e9c4 0100 	strd	r0, r1, [r4]
 800b3e0:	e7de      	b.n	800b3a0 <xTaskCheckForTimeOut+0x3c>
			xReturn = pdTRUE;
 800b3e2:	2601      	movs	r6, #1
 800b3e4:	e7dc      	b.n	800b3a0 <xTaskCheckForTimeOut+0x3c>
 800b3e6:	bf00      	nop
 800b3e8:	20002760 	.word	0x20002760
 800b3ec:	200027a4 	.word	0x200027a4

0800b3f0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	4b01      	ldr	r3, [pc, #4]	; (800b3f8 <vTaskMissedYield+0x8>)
 800b3f4:	601a      	str	r2, [r3, #0]
}
 800b3f6:	4770      	bx	lr
 800b3f8:	200027a8 	.word	0x200027a8

0800b3fc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800b3fc:	4b05      	ldr	r3, [pc, #20]	; (800b414 <xTaskGetSchedulerState+0x18>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	b133      	cbz	r3, 800b410 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b402:	4b05      	ldr	r3, [pc, #20]	; (800b418 <xTaskGetSchedulerState+0x1c>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800b408:	bf0c      	ite	eq
 800b40a:	2002      	moveq	r0, #2
 800b40c:	2000      	movne	r0, #0
 800b40e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b410:	2001      	movs	r0, #1
	}
 800b412:	4770      	bx	lr
 800b414:	20002778 	.word	0x20002778
 800b418:	20002728 	.word	0x20002728

0800b41c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800b41c:	b168      	cbz	r0, 800b43a <xTaskPriorityDisinherit+0x1e>
	{
 800b41e:	b538      	push	{r3, r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 800b420:	4b1c      	ldr	r3, [pc, #112]	; (800b494 <xTaskPriorityDisinherit+0x78>)
 800b422:	681c      	ldr	r4, [r3, #0]
 800b424:	4284      	cmp	r4, r0
 800b426:	d00a      	beq.n	800b43e <xTaskPriorityDisinherit+0x22>
 800b428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42c:	f383 8811 	msr	BASEPRI, r3
 800b430:	f3bf 8f6f 	isb	sy
 800b434:	f3bf 8f4f 	dsb	sy
 800b438:	e7fe      	b.n	800b438 <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 800b43a:	2000      	movs	r0, #0
	}
 800b43c:	4770      	bx	lr
			configASSERT( pxTCB->uxMutexesHeld );
 800b43e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b440:	b943      	cbnz	r3, 800b454 <xTaskPriorityDisinherit+0x38>
 800b442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b446:	f383 8811 	msr	BASEPRI, r3
 800b44a:	f3bf 8f6f 	isb	sy
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	e7fe      	b.n	800b452 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b454:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b456:	6d22      	ldr	r2, [r4, #80]	; 0x50
			( pxTCB->uxMutexesHeld )--;
 800b458:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b45a:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800b45c:	6563      	str	r3, [r4, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b45e:	d000      	beq.n	800b462 <xTaskPriorityDisinherit+0x46>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b460:	b10b      	cbz	r3, 800b466 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800b462:	2000      	movs	r0, #0
	}
 800b464:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b466:	1d25      	adds	r5, r4, #4
 800b468:	4628      	mov	r0, r5
 800b46a:	f7fe fda3 	bl	8009fb4 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b46e:	6d23      	ldr	r3, [r4, #80]	; 0x50
					prvAddTaskToReadyList( pxTCB );
 800b470:	4a09      	ldr	r2, [pc, #36]	; (800b498 <xTaskPriorityDisinherit+0x7c>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b472:	f1c3 0038 	rsb	r0, r3, #56	; 0x38
 800b476:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800b478:	2014      	movs	r0, #20
 800b47a:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b47c:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800b47e:	428b      	cmp	r3, r1
 800b480:	bf88      	it	hi
 800b482:	6013      	strhi	r3, [r2, #0]
 800b484:	4a05      	ldr	r2, [pc, #20]	; (800b49c <xTaskPriorityDisinherit+0x80>)
 800b486:	4629      	mov	r1, r5
 800b488:	fb00 2003 	mla	r0, r0, r3, r2
 800b48c:	f7fe fd6a 	bl	8009f64 <vListInsertEnd>
					xReturn = pdTRUE;
 800b490:	2001      	movs	r0, #1
	}
 800b492:	bd38      	pop	{r3, r4, r5, pc}
 800b494:	200022ac 	.word	0x200022ac
 800b498:	20002730 	.word	0x20002730
 800b49c:	200022b8 	.word	0x200022b8

0800b4a0 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b4a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4a4:	4e20      	ldr	r6, [pc, #128]	; (800b528 <prvSwitchTimerLists+0x88>)
 800b4a6:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 800b4a8:	4f20      	ldr	r7, [pc, #128]	; (800b52c <prvSwitchTimerLists+0x8c>)
		xMessage.xMessageID = xCommandID;
 800b4aa:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b4ae:	e00d      	b.n	800b4cc <prvSwitchTimerLists+0x2c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b4b0:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b4b2:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b4b4:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4b8:	1d25      	adds	r5, r4, #4
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	f7fe fd7a 	bl	8009fb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b4c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b4c6:	69e3      	ldr	r3, [r4, #28]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d00a      	beq.n	800b4e2 <prvSwitchTimerLists+0x42>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b4cc:	6833      	ldr	r3, [r6, #0]
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	2a00      	cmp	r2, #0
 800b4d2:	d1ed      	bne.n	800b4b0 <prvSwitchTimerLists+0x10>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 800b4d4:	4a16      	ldr	r2, [pc, #88]	; (800b530 <prvSwitchTimerLists+0x90>)
 800b4d6:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b4d8:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800b4da:	6031      	str	r1, [r6, #0]
}
 800b4dc:	b005      	add	sp, #20
 800b4de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b4e2:	69a3      	ldr	r3, [r4, #24]
 800b4e4:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800b4e6:	4599      	cmp	r9, r3
 800b4e8:	d317      	bcc.n	800b51a <prvSwitchTimerLists+0x7a>
	if( xTimerQueue != NULL )
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	b163      	cbz	r3, 800b508 <prvSwitchTimerLists+0x68>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b4ee:	e9cd 8900 	strd	r8, r9, [sp]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b4f2:	9402      	str	r4, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b4f4:	f7ff ff82 	bl	800b3fc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	4669      	mov	r1, sp
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	6838      	ldr	r0, [r7, #0]
 800b500:	f7fe fe04 	bl	800a10c <xQueueGenericSend>
				configASSERT( xResult );
 800b504:	2800      	cmp	r0, #0
 800b506:	d1e1      	bne.n	800b4cc <prvSwitchTimerLists+0x2c>
 800b508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b50c:	f383 8811 	msr	BASEPRI, r3
 800b510:	f3bf 8f6f 	isb	sy
 800b514:	f3bf 8f4f 	dsb	sy
 800b518:	e7fe      	b.n	800b518 <prvSwitchTimerLists+0x78>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b51a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b51c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b51e:	4629      	mov	r1, r5
 800b520:	6830      	ldr	r0, [r6, #0]
 800b522:	f7fe fd2d 	bl	8009f80 <vListInsert>
 800b526:	e7d1      	b.n	800b4cc <prvSwitchTimerLists+0x2c>
 800b528:	200027ac 	.word	0x200027ac
 800b52c:	200028d0 	.word	0x200028d0
 800b530:	200027b0 	.word	0x200027b0

0800b534 <prvTimerTask>:
{
 800b534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b538:	f04f 0a01 	mov.w	sl, #1
 800b53c:	4f8e      	ldr	r7, [pc, #568]	; (800b778 <prvTimerTask+0x244>)
 800b53e:	4e8f      	ldr	r6, [pc, #572]	; (800b77c <prvTimerTask+0x248>)
 800b540:	f8df 9244 	ldr.w	r9, [pc, #580]	; 800b788 <prvTimerTask+0x254>
 800b544:	4d8e      	ldr	r5, [pc, #568]	; (800b780 <prvTimerTask+0x24c>)
 800b546:	b08b      	sub	sp, #44	; 0x2c
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	681c      	ldr	r4, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b54c:	2c00      	cmp	r4, #0
 800b54e:	d052      	beq.n	800b5f6 <prvTimerTask+0xc2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 800b554:	f7ff fc52 	bl	800adfc <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800b558:	f7ff fc58 	bl	800ae0c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800b55c:	6832      	ldr	r2, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 800b55e:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 800b560:	4290      	cmp	r0, r2
 800b562:	d359      	bcc.n	800b618 <prvTimerTask+0xe4>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b564:	4284      	cmp	r4, r0
	xLastTime = xTimeNow;
 800b566:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b568:	d973      	bls.n	800b652 <prvTimerTask+0x11e>
 800b56a:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b56c:	eba4 010b 	sub.w	r1, r4, fp
 800b570:	6828      	ldr	r0, [r5, #0]
 800b572:	f7ff f925 	bl	800a7c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b576:	f7ff fcf3 	bl	800af60 <xTaskResumeAll>
 800b57a:	b938      	cbnz	r0, 800b58c <prvTimerTask+0x58>
					portYIELD_WITHIN_API();
 800b57c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b580:	4a80      	ldr	r2, [pc, #512]	; (800b784 <prvTimerTask+0x250>)
 800b582:	6013      	str	r3, [r2, #0]
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b58c:	f04f 0800 	mov.w	r8, #0
 800b590:	2200      	movs	r2, #0
 800b592:	a902      	add	r1, sp, #8
 800b594:	6828      	ldr	r0, [r5, #0]
 800b596:	f7fe ff85 	bl	800a4a4 <xQueueReceive>
 800b59a:	2800      	cmp	r0, #0
 800b59c:	d0d4      	beq.n	800b548 <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b59e:	9b02      	ldr	r3, [sp, #8]
 800b5a0:	9c04      	ldr	r4, [sp, #16]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	da07      	bge.n	800b5b6 <prvTimerTask+0x82>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b5a6:	9b03      	ldr	r3, [sp, #12]
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	9905      	ldr	r1, [sp, #20]
 800b5ac:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b5ae:	9b02      	ldr	r3, [sp, #8]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	dbed      	blt.n	800b590 <prvTimerTask+0x5c>
 800b5b4:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b5b6:	6963      	ldr	r3, [r4, #20]
 800b5b8:	b113      	cbz	r3, 800b5c0 <prvTimerTask+0x8c>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5ba:	1d20      	adds	r0, r4, #4
 800b5bc:	f7fe fcfa 	bl	8009fb4 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800b5c0:	f7ff fc24 	bl	800ae0c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800b5c4:	6833      	ldr	r3, [r6, #0]
 800b5c6:	4298      	cmp	r0, r3
 800b5c8:	d32d      	bcc.n	800b626 <prvTimerTask+0xf2>
 800b5ca:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 800b5cc:	6030      	str	r0, [r6, #0]
 800b5ce:	2b09      	cmp	r3, #9
 800b5d0:	d8de      	bhi.n	800b590 <prvTimerTask+0x5c>
 800b5d2:	fa0a f303 	lsl.w	r3, sl, r3
 800b5d6:	f413 7f04 	tst.w	r3, #528	; 0x210
 800b5da:	d129      	bne.n	800b630 <prvTimerTask+0xfc>
 800b5dc:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 800b5e0:	d14d      	bne.n	800b67e <prvTimerTask+0x14a>
 800b5e2:	069b      	lsls	r3, r3, #26
 800b5e4:	d5d4      	bpl.n	800b590 <prvTimerTask+0x5c>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b5e6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d1d0      	bne.n	800b590 <prvTimerTask+0x5c>
							vPortFree( pxTimer );
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	f000 fb24 	bl	800bc3c <vPortFree>
 800b5f4:	e7cc      	b.n	800b590 <prvTimerTask+0x5c>
	vTaskSuspendAll();
 800b5f6:	f7ff fc01 	bl	800adfc <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800b5fa:	f7ff fc07 	bl	800ae0c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800b5fe:	6832      	ldr	r2, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 800b600:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 800b602:	4282      	cmp	r2, r0
 800b604:	d808      	bhi.n	800b618 <prvTimerTask+0xe4>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b606:	f8d9 2000 	ldr.w	r2, [r9]
	xLastTime = xTimeNow;
 800b60a:	f8c6 b000 	str.w	fp, [r6]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b60e:	6812      	ldr	r2, [r2, #0]
 800b610:	fab2 f282 	clz	r2, r2
 800b614:	0952      	lsrs	r2, r2, #5
 800b616:	e7a9      	b.n	800b56c <prvTimerTask+0x38>
		prvSwitchTimerLists();
 800b618:	f7ff ff42 	bl	800b4a0 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800b61c:	f8c6 b000 	str.w	fp, [r6]
			( void ) xTaskResumeAll();
 800b620:	f7ff fc9e 	bl	800af60 <xTaskResumeAll>
 800b624:	e7b2      	b.n	800b58c <prvTimerTask+0x58>
 800b626:	9001      	str	r0, [sp, #4]
		prvSwitchTimerLists();
 800b628:	f7ff ff3a 	bl	800b4a0 <prvSwitchTimerLists>
 800b62c:	9801      	ldr	r0, [sp, #4]
 800b62e:	e7cc      	b.n	800b5ca <prvTimerTask+0x96>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b630:	9b03      	ldr	r3, [sp, #12]
 800b632:	61a3      	str	r3, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b634:	2b00      	cmp	r3, #0
 800b636:	d064      	beq.n	800b702 <prvTimerTask+0x1ce>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b638:	4403      	add	r3, r0
	if( xNextExpiryTime <= xTimeNow )
 800b63a:	4283      	cmp	r3, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b63c:	6063      	str	r3, [r4, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b63e:	6124      	str	r4, [r4, #16]
 800b640:	f104 0104 	add.w	r1, r4, #4
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b644:	bf94      	ite	ls
 800b646:	f8d9 0000 	ldrls.w	r0, [r9]
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b64a:	6838      	ldrhi	r0, [r7, #0]
 800b64c:	f7fe fc98 	bl	8009f80 <vListInsert>
 800b650:	e79e      	b.n	800b590 <prvTimerTask+0x5c>
				( void ) xTaskResumeAll();
 800b652:	f7ff fc85 	bl	800af60 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b656:	683a      	ldr	r2, [r7, #0]
 800b658:	68d2      	ldr	r2, [r2, #12]
 800b65a:	f8d2 800c 	ldr.w	r8, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b65e:	f108 0104 	add.w	r1, r8, #4
 800b662:	4608      	mov	r0, r1
 800b664:	9101      	str	r1, [sp, #4]
 800b666:	f7fe fca5 	bl	8009fb4 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b66a:	f8d8 201c 	ldr.w	r2, [r8, #28]
 800b66e:	9901      	ldr	r1, [sp, #4]
 800b670:	2a01      	cmp	r2, #1
 800b672:	d04f      	beq.n	800b714 <prvTimerTask+0x1e0>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b674:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800b678:	4640      	mov	r0, r8
 800b67a:	4798      	blx	r3
 800b67c:	e786      	b.n	800b58c <prvTimerTask+0x58>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b67e:	9b03      	ldr	r3, [sp, #12]
 800b680:	69a2      	ldr	r2, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b682:	6124      	str	r4, [r4, #16]
 800b684:	1899      	adds	r1, r3, r2
 800b686:	bf2c      	ite	cs
 800b688:	f04f 0c01 	movcs.w	ip, #1
 800b68c:	f04f 0c00 	movcc.w	ip, #0
	if( xNextExpiryTime <= xTimeNow )
 800b690:	4281      	cmp	r1, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b692:	6061      	str	r1, [r4, #4]
	if( xNextExpiryTime <= xTimeNow )
 800b694:	d825      	bhi.n	800b6e2 <prvTimerTask+0x1ae>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b696:	1ac3      	subs	r3, r0, r3
 800b698:	429a      	cmp	r2, r3
 800b69a:	d82c      	bhi.n	800b6f6 <prvTimerTask+0x1c2>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b69c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b69e:	4620      	mov	r0, r4
 800b6a0:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b6a2:	69e3      	ldr	r3, [r4, #28]
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	f47f af73 	bne.w	800b590 <prvTimerTask+0x5c>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b6aa:	9b03      	ldr	r3, [sp, #12]
 800b6ac:	69a1      	ldr	r1, [r4, #24]
	if( xTimerQueue != NULL )
 800b6ae:	682a      	ldr	r2, [r5, #0]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b6b0:	440b      	add	r3, r1
	if( xTimerQueue != NULL )
 800b6b2:	b16a      	cbz	r2, 800b6d0 <prvTimerTask+0x19c>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b6b4:	e9cd 8306 	strd	r8, r3, [sp, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b6b8:	9408      	str	r4, [sp, #32]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b6ba:	f7ff fe9f 	bl	800b3fc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b6be:	2300      	movs	r3, #0
 800b6c0:	a906      	add	r1, sp, #24
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	6828      	ldr	r0, [r5, #0]
 800b6c6:	f7fe fd21 	bl	800a10c <xQueueGenericSend>
							configASSERT( xResult );
 800b6ca:	2800      	cmp	r0, #0
 800b6cc:	f47f af60 	bne.w	800b590 <prvTimerTask+0x5c>
 800b6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d4:	f383 8811 	msr	BASEPRI, r3
 800b6d8:	f3bf 8f6f 	isb	sy
 800b6dc:	f3bf 8f4f 	dsb	sy
 800b6e0:	e7fe      	b.n	800b6e0 <prvTimerTask+0x1ac>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b6e2:	4283      	cmp	r3, r0
 800b6e4:	d902      	bls.n	800b6ec <prvTimerTask+0x1b8>
 800b6e6:	f1bc 0f00 	cmp.w	ip, #0
 800b6ea:	d0d7      	beq.n	800b69c <prvTimerTask+0x168>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b6ec:	1d21      	adds	r1, r4, #4
 800b6ee:	6838      	ldr	r0, [r7, #0]
 800b6f0:	f7fe fc46 	bl	8009f80 <vListInsert>
 800b6f4:	e74c      	b.n	800b590 <prvTimerTask+0x5c>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b6f6:	1d21      	adds	r1, r4, #4
 800b6f8:	f8d9 0000 	ldr.w	r0, [r9]
 800b6fc:	f7fe fc40 	bl	8009f80 <vListInsert>
 800b700:	e746      	b.n	800b590 <prvTimerTask+0x5c>
 800b702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b706:	f383 8811 	msr	BASEPRI, r3
 800b70a:	f3bf 8f6f 	isb	sy
 800b70e:	f3bf 8f4f 	dsb	sy
 800b712:	e7fe      	b.n	800b712 <prvTimerTask+0x1de>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b714:	f8d8 2018 	ldr.w	r2, [r8, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b718:	f8c8 8010 	str.w	r8, [r8, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b71c:	18a0      	adds	r0, r4, r2
	if( xNextExpiryTime <= xTimeNow )
 800b71e:	4583      	cmp	fp, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b720:	f8c8 0004 	str.w	r0, [r8, #4]
	if( xNextExpiryTime <= xTimeNow )
 800b724:	d323      	bcc.n	800b76e <prvTimerTask+0x23a>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b726:	ebab 0304 	sub.w	r3, fp, r4
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d81a      	bhi.n	800b764 <prvTimerTask+0x230>
	if( xTimerQueue != NULL )
 800b72e:	682b      	ldr	r3, [r5, #0]
 800b730:	b17b      	cbz	r3, 800b752 <prvTimerTask+0x21e>
		xMessage.xMessageID = xCommandID;
 800b732:	f04f 0b00 	mov.w	fp, #0
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b736:	e9cd 4807 	strd	r4, r8, [sp, #28]
		xMessage.xMessageID = xCommandID;
 800b73a:	f8cd b018 	str.w	fp, [sp, #24]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b73e:	f7ff fe5d 	bl	800b3fc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b742:	465b      	mov	r3, fp
 800b744:	465a      	mov	r2, fp
 800b746:	a906      	add	r1, sp, #24
 800b748:	6828      	ldr	r0, [r5, #0]
 800b74a:	f7fe fcdf 	bl	800a10c <xQueueGenericSend>
			configASSERT( xResult );
 800b74e:	2800      	cmp	r0, #0
 800b750:	d190      	bne.n	800b674 <prvTimerTask+0x140>
 800b752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b756:	f383 8811 	msr	BASEPRI, r3
 800b75a:	f3bf 8f6f 	isb	sy
 800b75e:	f3bf 8f4f 	dsb	sy
 800b762:	e7fe      	b.n	800b762 <prvTimerTask+0x22e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b764:	f8d9 0000 	ldr.w	r0, [r9]
 800b768:	f7fe fc0a 	bl	8009f80 <vListInsert>
 800b76c:	e782      	b.n	800b674 <prvTimerTask+0x140>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b76e:	6838      	ldr	r0, [r7, #0]
 800b770:	f7fe fc06 	bl	8009f80 <vListInsert>
 800b774:	e77e      	b.n	800b674 <prvTimerTask+0x140>
 800b776:	bf00      	nop
 800b778:	200027ac 	.word	0x200027ac
 800b77c:	2000287c 	.word	0x2000287c
 800b780:	200028d0 	.word	0x200028d0
 800b784:	e000ed04 	.word	0xe000ed04
 800b788:	200027b0 	.word	0x200027b0

0800b78c <xTimerCreateTimerTask>:
{
 800b78c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800b78e:	4c23      	ldr	r4, [pc, #140]	; (800b81c <xTimerCreateTimerTask+0x90>)
{
 800b790:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
 800b792:	f000 f8af 	bl	800b8f4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800b796:	6827      	ldr	r7, [r4, #0]
 800b798:	b32f      	cbz	r7, 800b7e6 <xTimerCreateTimerTask+0x5a>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b79a:	f000 f8cd 	bl	800b938 <vPortExitCritical>
	if( xTimerQueue != NULL )
 800b79e:	6823      	ldr	r3, [r4, #0]
 800b7a0:	b1c3      	cbz	r3, 800b7d4 <xTimerCreateTimerTask+0x48>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b7a2:	2400      	movs	r4, #0
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b7a4:	2502      	movs	r5, #2
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b7a6:	aa07      	add	r2, sp, #28
 800b7a8:	a906      	add	r1, sp, #24
 800b7aa:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b7ac:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b7b0:	f7fe fbba 	bl	8009f28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b7b4:	a805      	add	r0, sp, #20
 800b7b6:	c807      	ldmia	r0, {r0, r1, r2}
 800b7b8:	4623      	mov	r3, r4
 800b7ba:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800b7be:	9500      	str	r5, [sp, #0]
 800b7c0:	4917      	ldr	r1, [pc, #92]	; (800b820 <xTimerCreateTimerTask+0x94>)
 800b7c2:	4818      	ldr	r0, [pc, #96]	; (800b824 <xTimerCreateTimerTask+0x98>)
 800b7c4:	f7ff f9c0 	bl	800ab48 <xTaskCreateStatic>
 800b7c8:	4b17      	ldr	r3, [pc, #92]	; (800b828 <xTimerCreateTimerTask+0x9c>)
 800b7ca:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800b7cc:	b110      	cbz	r0, 800b7d4 <xTimerCreateTimerTask+0x48>
}
 800b7ce:	2001      	movs	r0, #1
 800b7d0:	b009      	add	sp, #36	; 0x24
 800b7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d8:	f383 8811 	msr	BASEPRI, r3
 800b7dc:	f3bf 8f6f 	isb	sy
 800b7e0:	f3bf 8f4f 	dsb	sy
 800b7e4:	e7fe      	b.n	800b7e4 <xTimerCreateTimerTask+0x58>
			vListInitialise( &xActiveTimerList1 );
 800b7e6:	4e11      	ldr	r6, [pc, #68]	; (800b82c <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 800b7e8:	4d11      	ldr	r5, [pc, #68]	; (800b830 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	f7fe fbaa 	bl	8009f44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b7f0:	4628      	mov	r0, r5
 800b7f2:	f7fe fba7 	bl	8009f44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b7f6:	4a0f      	ldr	r2, [pc, #60]	; (800b834 <xTimerCreateTimerTask+0xa8>)
			pxOverflowTimerList = &xActiveTimerList2;
 800b7f8:	480f      	ldr	r0, [pc, #60]	; (800b838 <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b7fa:	9700      	str	r7, [sp, #0]
 800b7fc:	4b0f      	ldr	r3, [pc, #60]	; (800b83c <xTimerCreateTimerTask+0xb0>)
			pxCurrentTimerList = &xActiveTimerList1;
 800b7fe:	6016      	str	r6, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b800:	6005      	str	r5, [r0, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b802:	4a0f      	ldr	r2, [pc, #60]	; (800b840 <xTimerCreateTimerTask+0xb4>)
 800b804:	2110      	movs	r1, #16
 800b806:	200a      	movs	r0, #10
 800b808:	f7fe fc2a 	bl	800a060 <xQueueGenericCreateStatic>
 800b80c:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800b80e:	2800      	cmp	r0, #0
 800b810:	d0c3      	beq.n	800b79a <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b812:	490c      	ldr	r1, [pc, #48]	; (800b844 <xTimerCreateTimerTask+0xb8>)
 800b814:	f7fe ffaa 	bl	800a76c <vQueueAddToRegistry>
 800b818:	e7bf      	b.n	800b79a <xTimerCreateTimerTask+0xe>
 800b81a:	bf00      	nop
 800b81c:	200028d0 	.word	0x200028d0
 800b820:	0800d108 	.word	0x0800d108
 800b824:	0800b535 	.word	0x0800b535
 800b828:	200028d4 	.word	0x200028d4
 800b82c:	20002854 	.word	0x20002854
 800b830:	20002868 	.word	0x20002868
 800b834:	200027ac 	.word	0x200027ac
 800b838:	200027b0 	.word	0x200027b0
 800b83c:	20002880 	.word	0x20002880
 800b840:	200027b4 	.word	0x200027b4
 800b844:	0800d100 	.word	0x0800d100

0800b848 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 800b848:	2200      	movs	r2, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b84a:	4b0e      	ldr	r3, [pc, #56]	; (800b884 <prvTaskExitError+0x3c>)
{
 800b84c:	b082      	sub	sp, #8
	configASSERT( uxCriticalNesting == ~0UL );
 800b84e:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0UL;
 800b850:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800b852:	3301      	adds	r3, #1
 800b854:	d008      	beq.n	800b868 <prvTaskExitError+0x20>
 800b856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85a:	f383 8811 	msr	BASEPRI, r3
 800b85e:	f3bf 8f6f 	isb	sy
 800b862:	f3bf 8f4f 	dsb	sy
 800b866:	e7fe      	b.n	800b866 <prvTaskExitError+0x1e>
 800b868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b86c:	f383 8811 	msr	BASEPRI, r3
 800b870:	f3bf 8f6f 	isb	sy
 800b874:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b878:	9b01      	ldr	r3, [sp, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d0fc      	beq.n	800b878 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b87e:	b002      	add	sp, #8
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop
 800b884:	20000094 	.word	0x20000094

0800b888 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b888:	4806      	ldr	r0, [pc, #24]	; (800b8a4 <prvPortStartFirstTask+0x1c>)
 800b88a:	6800      	ldr	r0, [r0, #0]
 800b88c:	6800      	ldr	r0, [r0, #0]
 800b88e:	f380 8808 	msr	MSP, r0
 800b892:	b662      	cpsie	i
 800b894:	b661      	cpsie	f
 800b896:	f3bf 8f4f 	dsb	sy
 800b89a:	f3bf 8f6f 	isb	sy
 800b89e:	df00      	svc	0
 800b8a0:	bf00      	nop
 800b8a2:	0000      	.short	0x0000
 800b8a4:	e000ed08 	.word	0xe000ed08

0800b8a8 <pxPortInitialiseStack>:
{
 800b8a8:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b8aa:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b8ae:	4b06      	ldr	r3, [pc, #24]	; (800b8c8 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b8b0:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b8b4:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b8b8:	e940 1402 	strd	r1, r4, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b8bc:	f840 3c0c 	str.w	r3, [r0, #-12]
}
 800b8c0:	bc10      	pop	{r4}
 800b8c2:	3840      	subs	r0, #64	; 0x40
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	0800b849 	.word	0x0800b849
 800b8cc:	00000000 	.word	0x00000000

0800b8d0 <SVC_Handler>:
	__asm volatile (
 800b8d0:	4b07      	ldr	r3, [pc, #28]	; (800b8f0 <pxCurrentTCBConst2>)
 800b8d2:	6819      	ldr	r1, [r3, #0]
 800b8d4:	6808      	ldr	r0, [r1, #0]
 800b8d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b8da:	f380 8809 	msr	PSP, r0
 800b8de:	f3bf 8f6f 	isb	sy
 800b8e2:	f04f 0000 	mov.w	r0, #0
 800b8e6:	f380 8811 	msr	BASEPRI, r0
 800b8ea:	f04e 0e0d 	orr.w	lr, lr, #13
 800b8ee:	4770      	bx	lr

0800b8f0 <pxCurrentTCBConst2>:
 800b8f0:	200022ac 	.word	0x200022ac

0800b8f4 <vPortEnterCritical>:
 800b8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b904:	4a0a      	ldr	r2, [pc, #40]	; (800b930 <vPortEnterCritical+0x3c>)
 800b906:	6813      	ldr	r3, [r2, #0]
 800b908:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b90a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800b90c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800b90e:	d000      	beq.n	800b912 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800b910:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b912:	4b08      	ldr	r3, [pc, #32]	; (800b934 <vPortEnterCritical+0x40>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b91a:	d0f9      	beq.n	800b910 <vPortEnterCritical+0x1c>
 800b91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b920:	f383 8811 	msr	BASEPRI, r3
 800b924:	f3bf 8f6f 	isb	sy
 800b928:	f3bf 8f4f 	dsb	sy
 800b92c:	e7fe      	b.n	800b92c <vPortEnterCritical+0x38>
 800b92e:	bf00      	nop
 800b930:	20000094 	.word	0x20000094
 800b934:	e000ed04 	.word	0xe000ed04

0800b938 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 800b938:	4a08      	ldr	r2, [pc, #32]	; (800b95c <vPortExitCritical+0x24>)
 800b93a:	6813      	ldr	r3, [r2, #0]
 800b93c:	b943      	cbnz	r3, 800b950 <vPortExitCritical+0x18>
 800b93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b942:	f383 8811 	msr	BASEPRI, r3
 800b946:	f3bf 8f6f 	isb	sy
 800b94a:	f3bf 8f4f 	dsb	sy
 800b94e:	e7fe      	b.n	800b94e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800b950:	3b01      	subs	r3, #1
 800b952:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b954:	b90b      	cbnz	r3, 800b95a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b956:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b95a:	4770      	bx	lr
 800b95c:	20000094 	.word	0x20000094

0800b960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b960:	f3ef 8009 	mrs	r0, PSP
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	4b0d      	ldr	r3, [pc, #52]	; (800b9a0 <pxCurrentTCBConst>)
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b970:	6010      	str	r0, [r2, #0]
 800b972:	e92d 4008 	stmdb	sp!, {r3, lr}
 800b976:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b97a:	f380 8811 	msr	BASEPRI, r0
 800b97e:	f7ff fbc1 	bl	800b104 <vTaskSwitchContext>
 800b982:	f04f 0000 	mov.w	r0, #0
 800b986:	f380 8811 	msr	BASEPRI, r0
 800b98a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b98e:	6819      	ldr	r1, [r3, #0]
 800b990:	6808      	ldr	r0, [r1, #0]
 800b992:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b996:	f380 8809 	msr	PSP, r0
 800b99a:	f3bf 8f6f 	isb	sy
 800b99e:	4770      	bx	lr

0800b9a0 <pxCurrentTCBConst>:
 800b9a0:	200022ac 	.word	0x200022ac

0800b9a4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b9a4:	b508      	push	{r3, lr}
	__asm volatile
 800b9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9aa:	f383 8811 	msr	BASEPRI, r3
 800b9ae:	f3bf 8f6f 	isb	sy
 800b9b2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b9b6:	f7ff fa2f 	bl	800ae18 <xTaskIncrementTick>
 800b9ba:	b118      	cbz	r0, 800b9c4 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b9bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9c0:	4b02      	ldr	r3, [pc, #8]	; (800b9cc <SysTick_Handler+0x28>)
 800b9c2:	601a      	str	r2, [r3, #0]
	__asm volatile
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b9ca:	bd08      	pop	{r3, pc}
 800b9cc:	e000ed04 	.word	0xe000ed04

0800b9d0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b9d0:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b9d2:	2107      	movs	r1, #7
{
 800b9d4:	b410      	push	{r4}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b9d6:	4a08      	ldr	r2, [pc, #32]	; (800b9f8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b9d8:	4c08      	ldr	r4, [pc, #32]	; (800b9fc <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b9da:	4809      	ldr	r0, [pc, #36]	; (800ba00 <vPortSetupTimerInterrupt+0x30>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b9dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b9de:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b9e0:	6803      	ldr	r3, [r0, #0]
 800b9e2:	4c08      	ldr	r4, [pc, #32]	; (800ba04 <vPortSetupTimerInterrupt+0x34>)
 800b9e4:	4808      	ldr	r0, [pc, #32]	; (800ba08 <vPortSetupTimerInterrupt+0x38>)
 800b9e6:	fba4 4303 	umull	r4, r3, r4, r3
 800b9ea:	099b      	lsrs	r3, r3, #6
 800b9ec:	3b01      	subs	r3, #1
 800b9ee:	6003      	str	r3, [r0, #0]
}
 800b9f0:	bc10      	pop	{r4}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b9f2:	6011      	str	r1, [r2, #0]
}
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	e000e010 	.word	0xe000e010
 800b9fc:	e000e018 	.word	0xe000e018
 800ba00:	20000088 	.word	0x20000088
 800ba04:	10624dd3 	.word	0x10624dd3
 800ba08:	e000e014 	.word	0xe000e014

0800ba0c <xPortStartScheduler>:
{
 800ba0c:	b530      	push	{r4, r5, lr}
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ba0e:	25ff      	movs	r5, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba10:	2407      	movs	r4, #7
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ba12:	4b27      	ldr	r3, [pc, #156]	; (800bab0 <xPortStartScheduler+0xa4>)
{
 800ba14:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ba16:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba18:	4926      	ldr	r1, [pc, #152]	; (800bab4 <xPortStartScheduler+0xa8>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ba1a:	b2d2      	uxtb	r2, r2
 800ba1c:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ba1e:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba20:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba22:	4825      	ldr	r0, [pc, #148]	; (800bab8 <xPortStartScheduler+0xac>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba2e:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba32:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ba36:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba38:	0611      	lsls	r1, r2, #24
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba3a:	6004      	str	r4, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba3c:	d510      	bpl.n	800ba60 <xPortStartScheduler+0x54>
 800ba3e:	2306      	movs	r3, #6
 800ba40:	e000      	b.n	800ba44 <xPortStartScheduler+0x38>
 800ba42:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ba44:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ba48:	1e59      	subs	r1, r3, #1
 800ba4a:	0052      	lsls	r2, r2, #1
 800ba4c:	b2d2      	uxtb	r2, r2
 800ba4e:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba52:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ba56:	0612      	lsls	r2, r2, #24
 800ba58:	d4f3      	bmi.n	800ba42 <xPortStartScheduler+0x36>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	6003      	str	r3, [r0, #0]
 800ba5e:	d008      	beq.n	800ba72 <xPortStartScheduler+0x66>
	__asm volatile
 800ba60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	e7fe      	b.n	800ba70 <xPortStartScheduler+0x64>
	uxCriticalNesting = 0;
 800ba72:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ba74:	9901      	ldr	r1, [sp, #4]
 800ba76:	4d0e      	ldr	r5, [pc, #56]	; (800bab0 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ba78:	021b      	lsls	r3, r3, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ba7a:	4a10      	ldr	r2, [pc, #64]	; (800babc <xPortStartScheduler+0xb0>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ba7c:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ba7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ba82:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ba84:	7029      	strb	r1, [r5, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ba86:	6813      	ldr	r3, [r2, #0]
 800ba88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ba8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ba8e:	6813      	ldr	r3, [r2, #0]
 800ba90:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ba94:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 800ba96:	f7ff ff9b 	bl	800b9d0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800ba9a:	4b09      	ldr	r3, [pc, #36]	; (800bac0 <xPortStartScheduler+0xb4>)
 800ba9c:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 800ba9e:	f7ff fef3 	bl	800b888 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800baa2:	f7ff fb2f 	bl	800b104 <vTaskSwitchContext>
	prvTaskExitError();
 800baa6:	f7ff fecf 	bl	800b848 <prvTaskExitError>
}
 800baaa:	4620      	mov	r0, r4
 800baac:	b003      	add	sp, #12
 800baae:	bd30      	pop	{r4, r5, pc}
 800bab0:	e000e400 	.word	0xe000e400
 800bab4:	200028d8 	.word	0x200028d8
 800bab8:	200028dc 	.word	0x200028dc
 800babc:	e000ed20 	.word	0xe000ed20
 800bac0:	20000094 	.word	0x20000094

0800bac4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bac4:	b430      	push	{r4, r5}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bac6:	4b11      	ldr	r3, [pc, #68]	; (800bb0c <prvInsertBlockIntoFreeList+0x48>)
 800bac8:	681a      	ldr	r2, [r3, #0]
 800baca:	4282      	cmp	r2, r0
 800bacc:	d201      	bcs.n	800bad2 <prvInsertBlockIntoFreeList+0xe>
 800bace:	4613      	mov	r3, r2
 800bad0:	e7fa      	b.n	800bac8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bad2:	685c      	ldr	r4, [r3, #4]
 800bad4:	1919      	adds	r1, r3, r4
 800bad6:	4288      	cmp	r0, r1
 800bad8:	d103      	bne.n	800bae2 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bada:	6841      	ldr	r1, [r0, #4]
 800badc:	4618      	mov	r0, r3
 800bade:	4421      	add	r1, r4
 800bae0:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bae2:	6844      	ldr	r4, [r0, #4]
 800bae4:	1901      	adds	r1, r0, r4
 800bae6:	428a      	cmp	r2, r1
 800bae8:	d109      	bne.n	800bafe <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800baea:	4909      	ldr	r1, [pc, #36]	; (800bb10 <prvInsertBlockIntoFreeList+0x4c>)
 800baec:	6809      	ldr	r1, [r1, #0]
 800baee:	428a      	cmp	r2, r1
 800baf0:	d005      	beq.n	800bafe <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800baf2:	e9d2 5100 	ldrd	r5, r1, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800baf6:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800baf8:	e9c0 5100 	strd	r5, r1, [r0]
 800bafc:	e000      	b.n	800bb00 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bafe:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bb00:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb02:	bf18      	it	ne
 800bb04:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb06:	bc30      	pop	{r4, r5}
 800bb08:	4770      	bx	lr
 800bb0a:	bf00      	nop
 800bb0c:	20003c78 	.word	0x20003c78
 800bb10:	200028e0 	.word	0x200028e0

0800bb14 <pvPortMalloc>:
{
 800bb14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 800bb18:	4f41      	ldr	r7, [pc, #260]	; (800bc20 <pvPortMalloc+0x10c>)
{
 800bb1a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800bb1c:	f7ff f96e 	bl	800adfc <vTaskSuspendAll>
		if( pxEnd == NULL )
 800bb20:	683a      	ldr	r2, [r7, #0]
 800bb22:	2a00      	cmp	r2, #0
 800bb24:	d05a      	beq.n	800bbdc <pvPortMalloc+0xc8>
 800bb26:	4b3f      	ldr	r3, [pc, #252]	; (800bc24 <pvPortMalloc+0x110>)
 800bb28:	681e      	ldr	r6, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bb2a:	4234      	tst	r4, r6
 800bb2c:	d150      	bne.n	800bbd0 <pvPortMalloc+0xbc>
			if( xWantedSize > 0 )
 800bb2e:	2c00      	cmp	r4, #0
 800bb30:	d04e      	beq.n	800bbd0 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 800bb32:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bb36:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bb38:	bf1c      	itt	ne
 800bb3a:	f023 0307 	bicne.w	r3, r3, #7
 800bb3e:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d045      	beq.n	800bbd0 <pvPortMalloc+0xbc>
 800bb44:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800bc38 <pvPortMalloc+0x124>
 800bb48:	f8d8 5000 	ldr.w	r5, [r8]
 800bb4c:	429d      	cmp	r5, r3
 800bb4e:	d33f      	bcc.n	800bbd0 <pvPortMalloc+0xbc>
				pxBlock = xStart.pxNextFreeBlock;
 800bb50:	4835      	ldr	r0, [pc, #212]	; (800bc28 <pvPortMalloc+0x114>)
 800bb52:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb54:	e006      	b.n	800bb64 <pvPortMalloc+0x50>
 800bb56:	f8d4 c000 	ldr.w	ip, [r4]
 800bb5a:	f1bc 0f00 	cmp.w	ip, #0
 800bb5e:	d004      	beq.n	800bb6a <pvPortMalloc+0x56>
 800bb60:	4620      	mov	r0, r4
 800bb62:	4664      	mov	r4, ip
 800bb64:	6861      	ldr	r1, [r4, #4]
 800bb66:	4299      	cmp	r1, r3
 800bb68:	d3f5      	bcc.n	800bb56 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 800bb6a:	4294      	cmp	r4, r2
 800bb6c:	d030      	beq.n	800bbd0 <pvPortMalloc+0xbc>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb6e:	1aca      	subs	r2, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bb70:	6827      	ldr	r7, [r4, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb72:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bb74:	6007      	str	r7, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb76:	d910      	bls.n	800bb9a <pvPortMalloc+0x86>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bb78:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb7a:	0741      	lsls	r1, r0, #29
 800bb7c:	d008      	beq.n	800bb90 <pvPortMalloc+0x7c>
 800bb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb82:	f383 8811 	msr	BASEPRI, r3
 800bb86:	f3bf 8f6f 	isb	sy
 800bb8a:	f3bf 8f4f 	dsb	sy
 800bb8e:	e7fe      	b.n	800bb8e <pvPortMalloc+0x7a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bb90:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bb92:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bb94:	f7ff ff96 	bl	800bac4 <prvInsertBlockIntoFreeList>
 800bb98:	6861      	ldr	r1, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bb9a:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bb9c:	4a23      	ldr	r2, [pc, #140]	; (800bc2c <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bb9e:	1a6d      	subs	r5, r5, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bba0:	6810      	ldr	r0, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bba2:	4331      	orrs	r1, r6
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bba4:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
 800bba6:	e9c4 3100 	strd	r3, r1, [r4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bbaa:	f104 0408 	add.w	r4, r4, #8
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bbae:	bf38      	it	cc
 800bbb0:	6015      	strcc	r5, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bbb2:	f8c8 5000 	str.w	r5, [r8]
	( void ) xTaskResumeAll();
 800bbb6:	f7ff f9d3 	bl	800af60 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbba:	0763      	lsls	r3, r4, #29
 800bbbc:	d00b      	beq.n	800bbd6 <pvPortMalloc+0xc2>
 800bbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc2:	f383 8811 	msr	BASEPRI, r3
 800bbc6:	f3bf 8f6f 	isb	sy
 800bbca:	f3bf 8f4f 	dsb	sy
 800bbce:	e7fe      	b.n	800bbce <pvPortMalloc+0xba>
	( void ) xTaskResumeAll();
 800bbd0:	f7ff f9c6 	bl	800af60 <xTaskResumeAll>
 800bbd4:	2400      	movs	r4, #0
}
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uxAddress = ( size_t ) ucHeap;
 800bbdc:	4b14      	ldr	r3, [pc, #80]	; (800bc30 <pvPortMalloc+0x11c>)
	xStart.xBlockSize = ( size_t ) 0;
 800bbde:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bbe0:	075d      	lsls	r5, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bbe2:	bf1c      	itt	ne
 800bbe4:	3307      	addne	r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbe6:	f023 0307 	bicne.w	r3, r3, #7
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bbea:	4619      	mov	r1, r3
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bbec:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	uxAddress -= xHeapStructSize;
 800bbf0:	4a10      	ldr	r2, [pc, #64]	; (800bc34 <pvPortMalloc+0x120>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bbf2:	f8df c034 	ldr.w	ip, [pc, #52]	; 800bc28 <pvPortMalloc+0x114>
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbf6:	f022 0207 	bic.w	r2, r2, #7
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bbfa:	1ad3      	subs	r3, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 800bbfc:	f8cc 0004 	str.w	r0, [ip, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bc00:	f8cc 1000 	str.w	r1, [ip]
	pxEnd = ( void * ) uxAddress;
 800bc04:	603a      	str	r2, [r7, #0]
	pxEnd->pxNextFreeBlock = NULL;
 800bc06:	e9c2 0000 	strd	r0, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc0a:	4f08      	ldr	r7, [pc, #32]	; (800bc2c <pvPortMalloc+0x118>)
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bc0c:	e9c1 2300 	strd	r2, r3, [r1]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc10:	4809      	ldr	r0, [pc, #36]	; (800bc38 <pvPortMalloc+0x124>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc12:	4904      	ldr	r1, [pc, #16]	; (800bc24 <pvPortMalloc+0x110>)
 800bc14:	462e      	mov	r6, r5
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc16:	603b      	str	r3, [r7, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc18:	6003      	str	r3, [r0, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc1a:	600d      	str	r5, [r1, #0]
 800bc1c:	e785      	b.n	800bb2a <pvPortMalloc+0x16>
 800bc1e:	bf00      	nop
 800bc20:	200028e0 	.word	0x200028e0
 800bc24:	20003c6c 	.word	0x20003c6c
 800bc28:	20003c78 	.word	0x20003c78
 800bc2c:	20003c74 	.word	0x20003c74
 800bc30:	200028e4 	.word	0x200028e4
 800bc34:	20003c64 	.word	0x20003c64
 800bc38:	20003c70 	.word	0x20003c70

0800bc3c <vPortFree>:
	if( pv != NULL )
 800bc3c:	b1d0      	cbz	r0, 800bc74 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bc3e:	4a19      	ldr	r2, [pc, #100]	; (800bca4 <vPortFree+0x68>)
 800bc40:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800bc44:	6812      	ldr	r2, [r2, #0]
 800bc46:	4213      	tst	r3, r2
 800bc48:	d108      	bne.n	800bc5c <vPortFree+0x20>
 800bc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4e:	f383 8811 	msr	BASEPRI, r3
 800bc52:	f3bf 8f6f 	isb	sy
 800bc56:	f3bf 8f4f 	dsb	sy
 800bc5a:	e7fe      	b.n	800bc5a <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bc5c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800bc60:	b149      	cbz	r1, 800bc76 <vPortFree+0x3a>
 800bc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc66:	f383 8811 	msr	BASEPRI, r3
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	e7fe      	b.n	800bc72 <vPortFree+0x36>
 800bc74:	4770      	bx	lr
{
 800bc76:	b510      	push	{r4, lr}
 800bc78:	4604      	mov	r4, r0
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bc7a:	ea23 0302 	bic.w	r3, r3, r2
 800bc7e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800bc82:	f7ff f8bb 	bl	800adfc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bc86:	4a08      	ldr	r2, [pc, #32]	; (800bca8 <vPortFree+0x6c>)
 800bc88:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bc8c:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bc8e:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bc92:	440b      	add	r3, r1
 800bc94:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bc96:	f7ff ff15 	bl	800bac4 <prvInsertBlockIntoFreeList>
}
 800bc9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800bc9e:	f7ff b95f 	b.w	800af60 <xTaskResumeAll>
 800bca2:	bf00      	nop
 800bca4:	20003c6c 	.word	0x20003c6c
 800bca8:	20003c70 	.word	0x20003c70

0800bcac <_ZdaPv>:
 800bcac:	f000 b81e 	b.w	800bcec <_ZdlPv>

0800bcb0 <_Znaj>:
 800bcb0:	f000 b802 	b.w	800bcb8 <_Znwj>

0800bcb4 <_ZdlPvj>:
 800bcb4:	f000 b81a 	b.w	800bcec <_ZdlPv>

0800bcb8 <_Znwj>:
 800bcb8:	b510      	push	{r4, lr}
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	bf14      	ite	ne
 800bcbe:	4604      	movne	r4, r0
 800bcc0:	2401      	moveq	r4, #1
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	f001 f870 	bl	800cda8 <malloc>
 800bcc8:	b930      	cbnz	r0, 800bcd8 <_Znwj+0x20>
 800bcca:	f000 f807 	bl	800bcdc <_ZSt15get_new_handlerv>
 800bcce:	b908      	cbnz	r0, 800bcd4 <_Znwj+0x1c>
 800bcd0:	f001 f839 	bl	800cd46 <abort>
 800bcd4:	4780      	blx	r0
 800bcd6:	e7f4      	b.n	800bcc2 <_Znwj+0xa>
 800bcd8:	bd10      	pop	{r4, pc}
	...

0800bcdc <_ZSt15get_new_handlerv>:
 800bcdc:	4b02      	ldr	r3, [pc, #8]	; (800bce8 <_ZSt15get_new_handlerv+0xc>)
 800bcde:	6818      	ldr	r0, [r3, #0]
 800bce0:	f3bf 8f5b 	dmb	ish
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop
 800bce8:	20003c80 	.word	0x20003c80

0800bcec <_ZdlPv>:
 800bcec:	f001 b864 	b.w	800cdb8 <free>

0800bcf0 <_ZSt20__throw_length_errorPKc>:
 800bcf0:	b508      	push	{r3, lr}
 800bcf2:	f001 f828 	bl	800cd46 <abort>
	...

0800bcf8 <pow>:
 800bcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcfc:	b08f      	sub	sp, #60	; 0x3c
 800bcfe:	461d      	mov	r5, r3
 800bd00:	4680      	mov	r8, r0
 800bd02:	4689      	mov	r9, r1
 800bd04:	4614      	mov	r4, r2
 800bd06:	f000 f953 	bl	800bfb0 <__ieee754_pow>
 800bd0a:	4fa1      	ldr	r7, [pc, #644]	; (800bf90 <pow+0x298>)
 800bd0c:	e9cd 0100 	strd	r0, r1, [sp]
 800bd10:	f997 3000 	ldrsb.w	r3, [r7]
 800bd14:	463e      	mov	r6, r7
 800bd16:	9302      	str	r3, [sp, #8]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	d05f      	beq.n	800bddc <pow+0xe4>
 800bd1c:	4622      	mov	r2, r4
 800bd1e:	462b      	mov	r3, r5
 800bd20:	4620      	mov	r0, r4
 800bd22:	4629      	mov	r1, r5
 800bd24:	f7f4 fe6a 	bl	80009fc <__aeabi_dcmpun>
 800bd28:	4682      	mov	sl, r0
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	d156      	bne.n	800bddc <pow+0xe4>
 800bd2e:	4642      	mov	r2, r8
 800bd30:	464b      	mov	r3, r9
 800bd32:	4640      	mov	r0, r8
 800bd34:	4649      	mov	r1, r9
 800bd36:	f7f4 fe61 	bl	80009fc <__aeabi_dcmpun>
 800bd3a:	9003      	str	r0, [sp, #12]
 800bd3c:	b1e8      	cbz	r0, 800bd7a <pow+0x82>
 800bd3e:	2200      	movs	r2, #0
 800bd40:	2300      	movs	r3, #0
 800bd42:	4620      	mov	r0, r4
 800bd44:	4629      	mov	r1, r5
 800bd46:	f7f4 fe27 	bl	8000998 <__aeabi_dcmpeq>
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	d046      	beq.n	800bddc <pow+0xe4>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	2200      	movs	r2, #0
 800bd52:	9304      	str	r3, [sp, #16]
 800bd54:	4b8f      	ldr	r3, [pc, #572]	; (800bf94 <pow+0x29c>)
 800bd56:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800bd5a:	9305      	str	r3, [sp, #20]
 800bd5c:	4b8e      	ldr	r3, [pc, #568]	; (800bf98 <pow+0x2a0>)
 800bd5e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800bd62:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bd66:	9b02      	ldr	r3, [sp, #8]
 800bd68:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800bd6c:	2b02      	cmp	r3, #2
 800bd6e:	d031      	beq.n	800bdd4 <pow+0xdc>
 800bd70:	a804      	add	r0, sp, #16
 800bd72:	f000 fedd 	bl	800cb30 <matherr>
 800bd76:	bb38      	cbnz	r0, 800bdc8 <pow+0xd0>
 800bd78:	e058      	b.n	800be2c <pow+0x134>
 800bd7a:	f04f 0a00 	mov.w	sl, #0
 800bd7e:	f04f 0b00 	mov.w	fp, #0
 800bd82:	4652      	mov	r2, sl
 800bd84:	465b      	mov	r3, fp
 800bd86:	4640      	mov	r0, r8
 800bd88:	4649      	mov	r1, r9
 800bd8a:	f7f4 fe05 	bl	8000998 <__aeabi_dcmpeq>
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	d051      	beq.n	800be36 <pow+0x13e>
 800bd92:	4652      	mov	r2, sl
 800bd94:	465b      	mov	r3, fp
 800bd96:	4620      	mov	r0, r4
 800bd98:	4629      	mov	r1, r5
 800bd9a:	f7f4 fdfd 	bl	8000998 <__aeabi_dcmpeq>
 800bd9e:	4606      	mov	r6, r0
 800bda0:	b308      	cbz	r0, 800bde6 <pow+0xee>
 800bda2:	2301      	movs	r3, #1
 800bda4:	9304      	str	r3, [sp, #16]
 800bda6:	4b7b      	ldr	r3, [pc, #492]	; (800bf94 <pow+0x29c>)
 800bda8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800bdac:	9305      	str	r3, [sp, #20]
 800bdae:	9b03      	ldr	r3, [sp, #12]
 800bdb0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800bdb4:	930c      	str	r3, [sp, #48]	; 0x30
 800bdb6:	9b02      	ldr	r3, [sp, #8]
 800bdb8:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d0d7      	beq.n	800bd70 <pow+0x78>
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	4b75      	ldr	r3, [pc, #468]	; (800bf98 <pow+0x2a0>)
 800bdc4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bdc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bdca:	b11b      	cbz	r3, 800bdd4 <pow+0xdc>
 800bdcc:	f000 ffc2 	bl	800cd54 <__errno>
 800bdd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bdd2:	6003      	str	r3, [r0, #0]
 800bdd4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800bdd8:	e9cd 3400 	strd	r3, r4, [sp]
 800bddc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bde0:	b00f      	add	sp, #60	; 0x3c
 800bde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bde6:	4620      	mov	r0, r4
 800bde8:	4629      	mov	r1, r5
 800bdea:	f000 fe9b 	bl	800cb24 <finite>
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	d0f4      	beq.n	800bddc <pow+0xe4>
 800bdf2:	4652      	mov	r2, sl
 800bdf4:	465b      	mov	r3, fp
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	4629      	mov	r1, r5
 800bdfa:	f7f4 fdd7 	bl	80009ac <__aeabi_dcmplt>
 800bdfe:	2800      	cmp	r0, #0
 800be00:	d0ec      	beq.n	800bddc <pow+0xe4>
 800be02:	2301      	movs	r3, #1
 800be04:	9304      	str	r3, [sp, #16]
 800be06:	4b63      	ldr	r3, [pc, #396]	; (800bf94 <pow+0x29c>)
 800be08:	960c      	str	r6, [sp, #48]	; 0x30
 800be0a:	9305      	str	r3, [sp, #20]
 800be0c:	f997 3000 	ldrsb.w	r3, [r7]
 800be10:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800be14:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800be18:	b913      	cbnz	r3, 800be20 <pow+0x128>
 800be1a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800be1e:	e7a7      	b.n	800bd70 <pow+0x78>
 800be20:	2000      	movs	r0, #0
 800be22:	495e      	ldr	r1, [pc, #376]	; (800bf9c <pow+0x2a4>)
 800be24:	2b02      	cmp	r3, #2
 800be26:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800be2a:	d1a1      	bne.n	800bd70 <pow+0x78>
 800be2c:	f000 ff92 	bl	800cd54 <__errno>
 800be30:	2321      	movs	r3, #33	; 0x21
 800be32:	6003      	str	r3, [r0, #0]
 800be34:	e7c8      	b.n	800bdc8 <pow+0xd0>
 800be36:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be3a:	f000 fe73 	bl	800cb24 <finite>
 800be3e:	9002      	str	r0, [sp, #8]
 800be40:	2800      	cmp	r0, #0
 800be42:	d177      	bne.n	800bf34 <pow+0x23c>
 800be44:	4640      	mov	r0, r8
 800be46:	4649      	mov	r1, r9
 800be48:	f000 fe6c 	bl	800cb24 <finite>
 800be4c:	2800      	cmp	r0, #0
 800be4e:	d071      	beq.n	800bf34 <pow+0x23c>
 800be50:	4620      	mov	r0, r4
 800be52:	4629      	mov	r1, r5
 800be54:	f000 fe66 	bl	800cb24 <finite>
 800be58:	2800      	cmp	r0, #0
 800be5a:	d06b      	beq.n	800bf34 <pow+0x23c>
 800be5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be60:	4619      	mov	r1, r3
 800be62:	4610      	mov	r0, r2
 800be64:	f7f4 fdca 	bl	80009fc <__aeabi_dcmpun>
 800be68:	f997 7000 	ldrsb.w	r7, [r7]
 800be6c:	4b49      	ldr	r3, [pc, #292]	; (800bf94 <pow+0x29c>)
 800be6e:	b1a0      	cbz	r0, 800be9a <pow+0x1a2>
 800be70:	2201      	movs	r2, #1
 800be72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800be76:	9b02      	ldr	r3, [sp, #8]
 800be78:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800be7c:	930c      	str	r3, [sp, #48]	; 0x30
 800be7e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800be82:	2f00      	cmp	r7, #0
 800be84:	d0c9      	beq.n	800be1a <pow+0x122>
 800be86:	4652      	mov	r2, sl
 800be88:	465b      	mov	r3, fp
 800be8a:	4650      	mov	r0, sl
 800be8c:	4659      	mov	r1, fp
 800be8e:	f7f4 fc45 	bl	800071c <__aeabi_ddiv>
 800be92:	2f02      	cmp	r7, #2
 800be94:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800be98:	e7c7      	b.n	800be2a <pow+0x132>
 800be9a:	2203      	movs	r2, #3
 800be9c:	900c      	str	r0, [sp, #48]	; 0x30
 800be9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bea2:	4620      	mov	r0, r4
 800bea4:	4629      	mov	r1, r5
 800bea6:	2200      	movs	r2, #0
 800bea8:	4b3d      	ldr	r3, [pc, #244]	; (800bfa0 <pow+0x2a8>)
 800beaa:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800beae:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800beb2:	f7f4 fb09 	bl	80004c8 <__aeabi_dmul>
 800beb6:	4604      	mov	r4, r0
 800beb8:	460d      	mov	r5, r1
 800beba:	bb17      	cbnz	r7, 800bf02 <pow+0x20a>
 800bebc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800bec0:	4b38      	ldr	r3, [pc, #224]	; (800bfa4 <pow+0x2ac>)
 800bec2:	4640      	mov	r0, r8
 800bec4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bec8:	4649      	mov	r1, r9
 800beca:	4652      	mov	r2, sl
 800becc:	465b      	mov	r3, fp
 800bece:	f7f4 fd6d 	bl	80009ac <__aeabi_dcmplt>
 800bed2:	2800      	cmp	r0, #0
 800bed4:	d054      	beq.n	800bf80 <pow+0x288>
 800bed6:	4620      	mov	r0, r4
 800bed8:	4629      	mov	r1, r5
 800beda:	f000 fe31 	bl	800cb40 <rint>
 800bede:	4622      	mov	r2, r4
 800bee0:	462b      	mov	r3, r5
 800bee2:	f7f4 fd59 	bl	8000998 <__aeabi_dcmpeq>
 800bee6:	b920      	cbnz	r0, 800bef2 <pow+0x1fa>
 800bee8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800beec:	4b2e      	ldr	r3, [pc, #184]	; (800bfa8 <pow+0x2b0>)
 800beee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bef2:	f996 3000 	ldrsb.w	r3, [r6]
 800bef6:	2b02      	cmp	r3, #2
 800bef8:	d142      	bne.n	800bf80 <pow+0x288>
 800befa:	f000 ff2b 	bl	800cd54 <__errno>
 800befe:	2322      	movs	r3, #34	; 0x22
 800bf00:	e797      	b.n	800be32 <pow+0x13a>
 800bf02:	2200      	movs	r2, #0
 800bf04:	4b29      	ldr	r3, [pc, #164]	; (800bfac <pow+0x2b4>)
 800bf06:	4640      	mov	r0, r8
 800bf08:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bf0c:	4649      	mov	r1, r9
 800bf0e:	4652      	mov	r2, sl
 800bf10:	465b      	mov	r3, fp
 800bf12:	f7f4 fd4b 	bl	80009ac <__aeabi_dcmplt>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d0eb      	beq.n	800bef2 <pow+0x1fa>
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	4629      	mov	r1, r5
 800bf1e:	f000 fe0f 	bl	800cb40 <rint>
 800bf22:	4622      	mov	r2, r4
 800bf24:	462b      	mov	r3, r5
 800bf26:	f7f4 fd37 	bl	8000998 <__aeabi_dcmpeq>
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	d1e1      	bne.n	800bef2 <pow+0x1fa>
 800bf2e:	2200      	movs	r2, #0
 800bf30:	4b1a      	ldr	r3, [pc, #104]	; (800bf9c <pow+0x2a4>)
 800bf32:	e7dc      	b.n	800beee <pow+0x1f6>
 800bf34:	2200      	movs	r2, #0
 800bf36:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	f7f4 fd2c 	bl	8000998 <__aeabi_dcmpeq>
 800bf40:	2800      	cmp	r0, #0
 800bf42:	f43f af4b 	beq.w	800bddc <pow+0xe4>
 800bf46:	4640      	mov	r0, r8
 800bf48:	4649      	mov	r1, r9
 800bf4a:	f000 fdeb 	bl	800cb24 <finite>
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	f43f af44 	beq.w	800bddc <pow+0xe4>
 800bf54:	4620      	mov	r0, r4
 800bf56:	4629      	mov	r1, r5
 800bf58:	f000 fde4 	bl	800cb24 <finite>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	f43f af3d 	beq.w	800bddc <pow+0xe4>
 800bf62:	2304      	movs	r3, #4
 800bf64:	9304      	str	r3, [sp, #16]
 800bf66:	4b0b      	ldr	r3, [pc, #44]	; (800bf94 <pow+0x29c>)
 800bf68:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800bf6c:	9305      	str	r3, [sp, #20]
 800bf6e:	2300      	movs	r3, #0
 800bf70:	2400      	movs	r4, #0
 800bf72:	930c      	str	r3, [sp, #48]	; 0x30
 800bf74:	2300      	movs	r3, #0
 800bf76:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800bf7a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800bf7e:	e7b8      	b.n	800bef2 <pow+0x1fa>
 800bf80:	a804      	add	r0, sp, #16
 800bf82:	f000 fdd5 	bl	800cb30 <matherr>
 800bf86:	2800      	cmp	r0, #0
 800bf88:	f47f af1e 	bne.w	800bdc8 <pow+0xd0>
 800bf8c:	e7b5      	b.n	800befa <pow+0x202>
 800bf8e:	bf00      	nop
 800bf90:	20000098 	.word	0x20000098
 800bf94:	0800d110 	.word	0x0800d110
 800bf98:	3ff00000 	.word	0x3ff00000
 800bf9c:	fff00000 	.word	0xfff00000
 800bfa0:	3fe00000 	.word	0x3fe00000
 800bfa4:	47efffff 	.word	0x47efffff
 800bfa8:	c7efffff 	.word	0xc7efffff
 800bfac:	7ff00000 	.word	0x7ff00000

0800bfb0 <__ieee754_pow>:
 800bfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb4:	b091      	sub	sp, #68	; 0x44
 800bfb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bfba:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800bfbe:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800bfc2:	ea55 0302 	orrs.w	r3, r5, r2
 800bfc6:	4607      	mov	r7, r0
 800bfc8:	4688      	mov	r8, r1
 800bfca:	f000 84b7 	beq.w	800c93c <__ieee754_pow+0x98c>
 800bfce:	4b80      	ldr	r3, [pc, #512]	; (800c1d0 <__ieee754_pow+0x220>)
 800bfd0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800bfd4:	429c      	cmp	r4, r3
 800bfd6:	4689      	mov	r9, r1
 800bfd8:	4682      	mov	sl, r0
 800bfda:	dc09      	bgt.n	800bff0 <__ieee754_pow+0x40>
 800bfdc:	d103      	bne.n	800bfe6 <__ieee754_pow+0x36>
 800bfde:	b938      	cbnz	r0, 800bff0 <__ieee754_pow+0x40>
 800bfe0:	42a5      	cmp	r5, r4
 800bfe2:	dc0d      	bgt.n	800c000 <__ieee754_pow+0x50>
 800bfe4:	e001      	b.n	800bfea <__ieee754_pow+0x3a>
 800bfe6:	429d      	cmp	r5, r3
 800bfe8:	dc02      	bgt.n	800bff0 <__ieee754_pow+0x40>
 800bfea:	429d      	cmp	r5, r3
 800bfec:	d10e      	bne.n	800c00c <__ieee754_pow+0x5c>
 800bfee:	b16a      	cbz	r2, 800c00c <__ieee754_pow+0x5c>
 800bff0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bff4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bff8:	ea54 030a 	orrs.w	r3, r4, sl
 800bffc:	f000 849e 	beq.w	800c93c <__ieee754_pow+0x98c>
 800c000:	4874      	ldr	r0, [pc, #464]	; (800c1d4 <__ieee754_pow+0x224>)
 800c002:	b011      	add	sp, #68	; 0x44
 800c004:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c008:	f000 bd94 	b.w	800cb34 <nan>
 800c00c:	f1b9 0f00 	cmp.w	r9, #0
 800c010:	da53      	bge.n	800c0ba <__ieee754_pow+0x10a>
 800c012:	4b71      	ldr	r3, [pc, #452]	; (800c1d8 <__ieee754_pow+0x228>)
 800c014:	429d      	cmp	r5, r3
 800c016:	dc4e      	bgt.n	800c0b6 <__ieee754_pow+0x106>
 800c018:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c01c:	429d      	cmp	r5, r3
 800c01e:	dd4c      	ble.n	800c0ba <__ieee754_pow+0x10a>
 800c020:	152b      	asrs	r3, r5, #20
 800c022:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c026:	2b14      	cmp	r3, #20
 800c028:	dd28      	ble.n	800c07c <__ieee754_pow+0xcc>
 800c02a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c02e:	fa22 f103 	lsr.w	r1, r2, r3
 800c032:	fa01 f303 	lsl.w	r3, r1, r3
 800c036:	4293      	cmp	r3, r2
 800c038:	d13f      	bne.n	800c0ba <__ieee754_pow+0x10a>
 800c03a:	f001 0101 	and.w	r1, r1, #1
 800c03e:	f1c1 0302 	rsb	r3, r1, #2
 800c042:	9300      	str	r3, [sp, #0]
 800c044:	2a00      	cmp	r2, #0
 800c046:	d15c      	bne.n	800c102 <__ieee754_pow+0x152>
 800c048:	4b61      	ldr	r3, [pc, #388]	; (800c1d0 <__ieee754_pow+0x220>)
 800c04a:	429d      	cmp	r5, r3
 800c04c:	d126      	bne.n	800c09c <__ieee754_pow+0xec>
 800c04e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c052:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c056:	ea53 030a 	orrs.w	r3, r3, sl
 800c05a:	f000 846f 	beq.w	800c93c <__ieee754_pow+0x98c>
 800c05e:	4b5f      	ldr	r3, [pc, #380]	; (800c1dc <__ieee754_pow+0x22c>)
 800c060:	429c      	cmp	r4, r3
 800c062:	dd2c      	ble.n	800c0be <__ieee754_pow+0x10e>
 800c064:	2e00      	cmp	r6, #0
 800c066:	f280 846f 	bge.w	800c948 <__ieee754_pow+0x998>
 800c06a:	f04f 0b00 	mov.w	fp, #0
 800c06e:	f04f 0c00 	mov.w	ip, #0
 800c072:	4658      	mov	r0, fp
 800c074:	4661      	mov	r1, ip
 800c076:	b011      	add	sp, #68	; 0x44
 800c078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c07c:	2a00      	cmp	r2, #0
 800c07e:	d13e      	bne.n	800c0fe <__ieee754_pow+0x14e>
 800c080:	f1c3 0314 	rsb	r3, r3, #20
 800c084:	fa45 f103 	asr.w	r1, r5, r3
 800c088:	fa01 f303 	lsl.w	r3, r1, r3
 800c08c:	42ab      	cmp	r3, r5
 800c08e:	f040 8463 	bne.w	800c958 <__ieee754_pow+0x9a8>
 800c092:	f001 0101 	and.w	r1, r1, #1
 800c096:	f1c1 0302 	rsb	r3, r1, #2
 800c09a:	9300      	str	r3, [sp, #0]
 800c09c:	4b50      	ldr	r3, [pc, #320]	; (800c1e0 <__ieee754_pow+0x230>)
 800c09e:	429d      	cmp	r5, r3
 800c0a0:	d114      	bne.n	800c0cc <__ieee754_pow+0x11c>
 800c0a2:	2e00      	cmp	r6, #0
 800c0a4:	f280 8454 	bge.w	800c950 <__ieee754_pow+0x9a0>
 800c0a8:	463a      	mov	r2, r7
 800c0aa:	4643      	mov	r3, r8
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	494c      	ldr	r1, [pc, #304]	; (800c1e0 <__ieee754_pow+0x230>)
 800c0b0:	f7f4 fb34 	bl	800071c <__aeabi_ddiv>
 800c0b4:	e013      	b.n	800c0de <__ieee754_pow+0x12e>
 800c0b6:	2302      	movs	r3, #2
 800c0b8:	e7c3      	b.n	800c042 <__ieee754_pow+0x92>
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	e7c1      	b.n	800c042 <__ieee754_pow+0x92>
 800c0be:	2e00      	cmp	r6, #0
 800c0c0:	dad3      	bge.n	800c06a <__ieee754_pow+0xba>
 800c0c2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800c0c6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800c0ca:	e7d2      	b.n	800c072 <__ieee754_pow+0xc2>
 800c0cc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800c0d0:	d108      	bne.n	800c0e4 <__ieee754_pow+0x134>
 800c0d2:	463a      	mov	r2, r7
 800c0d4:	4643      	mov	r3, r8
 800c0d6:	4638      	mov	r0, r7
 800c0d8:	4641      	mov	r1, r8
 800c0da:	f7f4 f9f5 	bl	80004c8 <__aeabi_dmul>
 800c0de:	4683      	mov	fp, r0
 800c0e0:	468c      	mov	ip, r1
 800c0e2:	e7c6      	b.n	800c072 <__ieee754_pow+0xc2>
 800c0e4:	4b3f      	ldr	r3, [pc, #252]	; (800c1e4 <__ieee754_pow+0x234>)
 800c0e6:	429e      	cmp	r6, r3
 800c0e8:	d10b      	bne.n	800c102 <__ieee754_pow+0x152>
 800c0ea:	f1b9 0f00 	cmp.w	r9, #0
 800c0ee:	db08      	blt.n	800c102 <__ieee754_pow+0x152>
 800c0f0:	4638      	mov	r0, r7
 800c0f2:	4641      	mov	r1, r8
 800c0f4:	b011      	add	sp, #68	; 0x44
 800c0f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0fa:	f000 bc63 	b.w	800c9c4 <__ieee754_sqrt>
 800c0fe:	2300      	movs	r3, #0
 800c100:	9300      	str	r3, [sp, #0]
 800c102:	4638      	mov	r0, r7
 800c104:	4641      	mov	r1, r8
 800c106:	f000 fd09 	bl	800cb1c <fabs>
 800c10a:	4683      	mov	fp, r0
 800c10c:	468c      	mov	ip, r1
 800c10e:	f1ba 0f00 	cmp.w	sl, #0
 800c112:	d12b      	bne.n	800c16c <__ieee754_pow+0x1bc>
 800c114:	b124      	cbz	r4, 800c120 <__ieee754_pow+0x170>
 800c116:	4b32      	ldr	r3, [pc, #200]	; (800c1e0 <__ieee754_pow+0x230>)
 800c118:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d125      	bne.n	800c16c <__ieee754_pow+0x1bc>
 800c120:	2e00      	cmp	r6, #0
 800c122:	da07      	bge.n	800c134 <__ieee754_pow+0x184>
 800c124:	465a      	mov	r2, fp
 800c126:	4663      	mov	r3, ip
 800c128:	2000      	movs	r0, #0
 800c12a:	492d      	ldr	r1, [pc, #180]	; (800c1e0 <__ieee754_pow+0x230>)
 800c12c:	f7f4 faf6 	bl	800071c <__aeabi_ddiv>
 800c130:	4683      	mov	fp, r0
 800c132:	468c      	mov	ip, r1
 800c134:	f1b9 0f00 	cmp.w	r9, #0
 800c138:	da9b      	bge.n	800c072 <__ieee754_pow+0xc2>
 800c13a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c13e:	9b00      	ldr	r3, [sp, #0]
 800c140:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c144:	4323      	orrs	r3, r4
 800c146:	d108      	bne.n	800c15a <__ieee754_pow+0x1aa>
 800c148:	465a      	mov	r2, fp
 800c14a:	4663      	mov	r3, ip
 800c14c:	4658      	mov	r0, fp
 800c14e:	4661      	mov	r1, ip
 800c150:	f7f4 f802 	bl	8000158 <__aeabi_dsub>
 800c154:	4602      	mov	r2, r0
 800c156:	460b      	mov	r3, r1
 800c158:	e7aa      	b.n	800c0b0 <__ieee754_pow+0x100>
 800c15a:	9b00      	ldr	r3, [sp, #0]
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d188      	bne.n	800c072 <__ieee754_pow+0xc2>
 800c160:	4658      	mov	r0, fp
 800c162:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800c166:	4683      	mov	fp, r0
 800c168:	469c      	mov	ip, r3
 800c16a:	e782      	b.n	800c072 <__ieee754_pow+0xc2>
 800c16c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 800c170:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800c174:	930d      	str	r3, [sp, #52]	; 0x34
 800c176:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c178:	9b00      	ldr	r3, [sp, #0]
 800c17a:	4313      	orrs	r3, r2
 800c17c:	d104      	bne.n	800c188 <__ieee754_pow+0x1d8>
 800c17e:	463a      	mov	r2, r7
 800c180:	4643      	mov	r3, r8
 800c182:	4638      	mov	r0, r7
 800c184:	4641      	mov	r1, r8
 800c186:	e7e3      	b.n	800c150 <__ieee754_pow+0x1a0>
 800c188:	4b17      	ldr	r3, [pc, #92]	; (800c1e8 <__ieee754_pow+0x238>)
 800c18a:	429d      	cmp	r5, r3
 800c18c:	f340 80fe 	ble.w	800c38c <__ieee754_pow+0x3dc>
 800c190:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c194:	429d      	cmp	r5, r3
 800c196:	dd0b      	ble.n	800c1b0 <__ieee754_pow+0x200>
 800c198:	4b10      	ldr	r3, [pc, #64]	; (800c1dc <__ieee754_pow+0x22c>)
 800c19a:	429c      	cmp	r4, r3
 800c19c:	dc0e      	bgt.n	800c1bc <__ieee754_pow+0x20c>
 800c19e:	2e00      	cmp	r6, #0
 800c1a0:	f6bf af63 	bge.w	800c06a <__ieee754_pow+0xba>
 800c1a4:	a308      	add	r3, pc, #32	; (adr r3, 800c1c8 <__ieee754_pow+0x218>)
 800c1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1aa:	4610      	mov	r0, r2
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	e794      	b.n	800c0da <__ieee754_pow+0x12a>
 800c1b0:	4b0e      	ldr	r3, [pc, #56]	; (800c1ec <__ieee754_pow+0x23c>)
 800c1b2:	429c      	cmp	r4, r3
 800c1b4:	ddf3      	ble.n	800c19e <__ieee754_pow+0x1ee>
 800c1b6:	4b0a      	ldr	r3, [pc, #40]	; (800c1e0 <__ieee754_pow+0x230>)
 800c1b8:	429c      	cmp	r4, r3
 800c1ba:	dd19      	ble.n	800c1f0 <__ieee754_pow+0x240>
 800c1bc:	2e00      	cmp	r6, #0
 800c1be:	dcf1      	bgt.n	800c1a4 <__ieee754_pow+0x1f4>
 800c1c0:	e753      	b.n	800c06a <__ieee754_pow+0xba>
 800c1c2:	bf00      	nop
 800c1c4:	f3af 8000 	nop.w
 800c1c8:	8800759c 	.word	0x8800759c
 800c1cc:	7e37e43c 	.word	0x7e37e43c
 800c1d0:	7ff00000 	.word	0x7ff00000
 800c1d4:	0800d113 	.word	0x0800d113
 800c1d8:	433fffff 	.word	0x433fffff
 800c1dc:	3fefffff 	.word	0x3fefffff
 800c1e0:	3ff00000 	.word	0x3ff00000
 800c1e4:	3fe00000 	.word	0x3fe00000
 800c1e8:	41e00000 	.word	0x41e00000
 800c1ec:	3feffffe 	.word	0x3feffffe
 800c1f0:	4661      	mov	r1, ip
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	4b60      	ldr	r3, [pc, #384]	; (800c378 <__ieee754_pow+0x3c8>)
 800c1f6:	4658      	mov	r0, fp
 800c1f8:	f7f3 ffae 	bl	8000158 <__aeabi_dsub>
 800c1fc:	a354      	add	r3, pc, #336	; (adr r3, 800c350 <__ieee754_pow+0x3a0>)
 800c1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c202:	4604      	mov	r4, r0
 800c204:	460d      	mov	r5, r1
 800c206:	f7f4 f95f 	bl	80004c8 <__aeabi_dmul>
 800c20a:	a353      	add	r3, pc, #332	; (adr r3, 800c358 <__ieee754_pow+0x3a8>)
 800c20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c210:	4606      	mov	r6, r0
 800c212:	460f      	mov	r7, r1
 800c214:	4620      	mov	r0, r4
 800c216:	4629      	mov	r1, r5
 800c218:	f7f4 f956 	bl	80004c8 <__aeabi_dmul>
 800c21c:	2200      	movs	r2, #0
 800c21e:	4682      	mov	sl, r0
 800c220:	468b      	mov	fp, r1
 800c222:	4b56      	ldr	r3, [pc, #344]	; (800c37c <__ieee754_pow+0x3cc>)
 800c224:	4620      	mov	r0, r4
 800c226:	4629      	mov	r1, r5
 800c228:	f7f4 f94e 	bl	80004c8 <__aeabi_dmul>
 800c22c:	4602      	mov	r2, r0
 800c22e:	460b      	mov	r3, r1
 800c230:	a14b      	add	r1, pc, #300	; (adr r1, 800c360 <__ieee754_pow+0x3b0>)
 800c232:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c236:	f7f3 ff8f 	bl	8000158 <__aeabi_dsub>
 800c23a:	4622      	mov	r2, r4
 800c23c:	462b      	mov	r3, r5
 800c23e:	f7f4 f943 	bl	80004c8 <__aeabi_dmul>
 800c242:	4602      	mov	r2, r0
 800c244:	460b      	mov	r3, r1
 800c246:	2000      	movs	r0, #0
 800c248:	494d      	ldr	r1, [pc, #308]	; (800c380 <__ieee754_pow+0x3d0>)
 800c24a:	f7f3 ff85 	bl	8000158 <__aeabi_dsub>
 800c24e:	4622      	mov	r2, r4
 800c250:	462b      	mov	r3, r5
 800c252:	4680      	mov	r8, r0
 800c254:	4689      	mov	r9, r1
 800c256:	4620      	mov	r0, r4
 800c258:	4629      	mov	r1, r5
 800c25a:	f7f4 f935 	bl	80004c8 <__aeabi_dmul>
 800c25e:	4602      	mov	r2, r0
 800c260:	460b      	mov	r3, r1
 800c262:	4640      	mov	r0, r8
 800c264:	4649      	mov	r1, r9
 800c266:	f7f4 f92f 	bl	80004c8 <__aeabi_dmul>
 800c26a:	a33f      	add	r3, pc, #252	; (adr r3, 800c368 <__ieee754_pow+0x3b8>)
 800c26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c270:	f7f4 f92a 	bl	80004c8 <__aeabi_dmul>
 800c274:	4602      	mov	r2, r0
 800c276:	460b      	mov	r3, r1
 800c278:	4650      	mov	r0, sl
 800c27a:	4659      	mov	r1, fp
 800c27c:	f7f3 ff6c 	bl	8000158 <__aeabi_dsub>
 800c280:	4602      	mov	r2, r0
 800c282:	460b      	mov	r3, r1
 800c284:	4604      	mov	r4, r0
 800c286:	460d      	mov	r5, r1
 800c288:	4630      	mov	r0, r6
 800c28a:	4639      	mov	r1, r7
 800c28c:	f7f3 ff66 	bl	800015c <__adddf3>
 800c290:	2000      	movs	r0, #0
 800c292:	468b      	mov	fp, r1
 800c294:	4682      	mov	sl, r0
 800c296:	4632      	mov	r2, r6
 800c298:	463b      	mov	r3, r7
 800c29a:	f7f3 ff5d 	bl	8000158 <__aeabi_dsub>
 800c29e:	4602      	mov	r2, r0
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	4629      	mov	r1, r5
 800c2a6:	f7f3 ff57 	bl	8000158 <__aeabi_dsub>
 800c2aa:	9b00      	ldr	r3, [sp, #0]
 800c2ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c2ae:	3b01      	subs	r3, #1
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	f04f 0300 	mov.w	r3, #0
 800c2b6:	bf0c      	ite	eq
 800c2b8:	4c32      	ldreq	r4, [pc, #200]	; (800c384 <__ieee754_pow+0x3d4>)
 800c2ba:	4c2f      	ldrne	r4, [pc, #188]	; (800c378 <__ieee754_pow+0x3c8>)
 800c2bc:	4606      	mov	r6, r0
 800c2be:	e9cd 3400 	strd	r3, r4, [sp]
 800c2c2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c2c6:	2400      	movs	r4, #0
 800c2c8:	460f      	mov	r7, r1
 800c2ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2ce:	4622      	mov	r2, r4
 800c2d0:	462b      	mov	r3, r5
 800c2d2:	f7f3 ff41 	bl	8000158 <__aeabi_dsub>
 800c2d6:	4652      	mov	r2, sl
 800c2d8:	465b      	mov	r3, fp
 800c2da:	f7f4 f8f5 	bl	80004c8 <__aeabi_dmul>
 800c2de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2e2:	4680      	mov	r8, r0
 800c2e4:	4689      	mov	r9, r1
 800c2e6:	4630      	mov	r0, r6
 800c2e8:	4639      	mov	r1, r7
 800c2ea:	f7f4 f8ed 	bl	80004c8 <__aeabi_dmul>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	4640      	mov	r0, r8
 800c2f4:	4649      	mov	r1, r9
 800c2f6:	f7f3 ff31 	bl	800015c <__adddf3>
 800c2fa:	4622      	mov	r2, r4
 800c2fc:	462b      	mov	r3, r5
 800c2fe:	4680      	mov	r8, r0
 800c300:	4689      	mov	r9, r1
 800c302:	4650      	mov	r0, sl
 800c304:	4659      	mov	r1, fp
 800c306:	f7f4 f8df 	bl	80004c8 <__aeabi_dmul>
 800c30a:	4604      	mov	r4, r0
 800c30c:	460d      	mov	r5, r1
 800c30e:	460b      	mov	r3, r1
 800c310:	4602      	mov	r2, r0
 800c312:	4649      	mov	r1, r9
 800c314:	4640      	mov	r0, r8
 800c316:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c31a:	f7f3 ff1f 	bl	800015c <__adddf3>
 800c31e:	4b1a      	ldr	r3, [pc, #104]	; (800c388 <__ieee754_pow+0x3d8>)
 800c320:	4682      	mov	sl, r0
 800c322:	4299      	cmp	r1, r3
 800c324:	460f      	mov	r7, r1
 800c326:	460e      	mov	r6, r1
 800c328:	f340 82e1 	ble.w	800c8ee <__ieee754_pow+0x93e>
 800c32c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c330:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c334:	4303      	orrs	r3, r0
 800c336:	f000 81db 	beq.w	800c6f0 <__ieee754_pow+0x740>
 800c33a:	a30d      	add	r3, pc, #52	; (adr r3, 800c370 <__ieee754_pow+0x3c0>)
 800c33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c340:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c344:	f7f4 f8c0 	bl	80004c8 <__aeabi_dmul>
 800c348:	a309      	add	r3, pc, #36	; (adr r3, 800c370 <__ieee754_pow+0x3c0>)
 800c34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34e:	e6c4      	b.n	800c0da <__ieee754_pow+0x12a>
 800c350:	60000000 	.word	0x60000000
 800c354:	3ff71547 	.word	0x3ff71547
 800c358:	f85ddf44 	.word	0xf85ddf44
 800c35c:	3e54ae0b 	.word	0x3e54ae0b
 800c360:	55555555 	.word	0x55555555
 800c364:	3fd55555 	.word	0x3fd55555
 800c368:	652b82fe 	.word	0x652b82fe
 800c36c:	3ff71547 	.word	0x3ff71547
 800c370:	8800759c 	.word	0x8800759c
 800c374:	7e37e43c 	.word	0x7e37e43c
 800c378:	3ff00000 	.word	0x3ff00000
 800c37c:	3fd00000 	.word	0x3fd00000
 800c380:	3fe00000 	.word	0x3fe00000
 800c384:	bff00000 	.word	0xbff00000
 800c388:	408fffff 	.word	0x408fffff
 800c38c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c390:	f04f 0200 	mov.w	r2, #0
 800c394:	da08      	bge.n	800c3a8 <__ieee754_pow+0x3f8>
 800c396:	4658      	mov	r0, fp
 800c398:	4bcd      	ldr	r3, [pc, #820]	; (800c6d0 <__ieee754_pow+0x720>)
 800c39a:	4661      	mov	r1, ip
 800c39c:	f7f4 f894 	bl	80004c8 <__aeabi_dmul>
 800c3a0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c3a4:	4683      	mov	fp, r0
 800c3a6:	460c      	mov	r4, r1
 800c3a8:	1523      	asrs	r3, r4, #20
 800c3aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c3ae:	4413      	add	r3, r2
 800c3b0:	930c      	str	r3, [sp, #48]	; 0x30
 800c3b2:	4bc8      	ldr	r3, [pc, #800]	; (800c6d4 <__ieee754_pow+0x724>)
 800c3b4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c3b8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c3bc:	429c      	cmp	r4, r3
 800c3be:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c3c2:	dd08      	ble.n	800c3d6 <__ieee754_pow+0x426>
 800c3c4:	4bc4      	ldr	r3, [pc, #784]	; (800c6d8 <__ieee754_pow+0x728>)
 800c3c6:	429c      	cmp	r4, r3
 800c3c8:	f340 815b 	ble.w	800c682 <__ieee754_pow+0x6d2>
 800c3cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	930c      	str	r3, [sp, #48]	; 0x30
 800c3d6:	f04f 0800 	mov.w	r8, #0
 800c3da:	4658      	mov	r0, fp
 800c3dc:	4629      	mov	r1, r5
 800c3de:	4bbf      	ldr	r3, [pc, #764]	; (800c6dc <__ieee754_pow+0x72c>)
 800c3e0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800c3e4:	444b      	add	r3, r9
 800c3e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c3ea:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	4623      	mov	r3, r4
 800c3f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c3f6:	f7f3 feaf 	bl	8000158 <__aeabi_dsub>
 800c3fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c3fe:	4606      	mov	r6, r0
 800c400:	460f      	mov	r7, r1
 800c402:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c406:	f7f3 fea9 	bl	800015c <__adddf3>
 800c40a:	4602      	mov	r2, r0
 800c40c:	460b      	mov	r3, r1
 800c40e:	2000      	movs	r0, #0
 800c410:	49b3      	ldr	r1, [pc, #716]	; (800c6e0 <__ieee754_pow+0x730>)
 800c412:	f7f4 f983 	bl	800071c <__aeabi_ddiv>
 800c416:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c41a:	4602      	mov	r2, r0
 800c41c:	460b      	mov	r3, r1
 800c41e:	4630      	mov	r0, r6
 800c420:	4639      	mov	r1, r7
 800c422:	f7f4 f851 	bl	80004c8 <__aeabi_dmul>
 800c426:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c42a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800c42e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c432:	2300      	movs	r3, #0
 800c434:	2200      	movs	r2, #0
 800c436:	106d      	asrs	r5, r5, #1
 800c438:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c43c:	9304      	str	r3, [sp, #16]
 800c43e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c442:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c446:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800c44a:	4650      	mov	r0, sl
 800c44c:	4659      	mov	r1, fp
 800c44e:	4614      	mov	r4, r2
 800c450:	461d      	mov	r5, r3
 800c452:	f7f4 f839 	bl	80004c8 <__aeabi_dmul>
 800c456:	4602      	mov	r2, r0
 800c458:	460b      	mov	r3, r1
 800c45a:	4630      	mov	r0, r6
 800c45c:	4639      	mov	r1, r7
 800c45e:	f7f3 fe7b 	bl	8000158 <__aeabi_dsub>
 800c462:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c466:	4606      	mov	r6, r0
 800c468:	460f      	mov	r7, r1
 800c46a:	4620      	mov	r0, r4
 800c46c:	4629      	mov	r1, r5
 800c46e:	f7f3 fe73 	bl	8000158 <__aeabi_dsub>
 800c472:	4602      	mov	r2, r0
 800c474:	460b      	mov	r3, r1
 800c476:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c47a:	f7f3 fe6d 	bl	8000158 <__aeabi_dsub>
 800c47e:	4652      	mov	r2, sl
 800c480:	465b      	mov	r3, fp
 800c482:	f7f4 f821 	bl	80004c8 <__aeabi_dmul>
 800c486:	4602      	mov	r2, r0
 800c488:	460b      	mov	r3, r1
 800c48a:	4630      	mov	r0, r6
 800c48c:	4639      	mov	r1, r7
 800c48e:	f7f3 fe63 	bl	8000158 <__aeabi_dsub>
 800c492:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c496:	f7f4 f817 	bl	80004c8 <__aeabi_dmul>
 800c49a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c49e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c4a2:	4610      	mov	r0, r2
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	f7f4 f80f 	bl	80004c8 <__aeabi_dmul>
 800c4aa:	a377      	add	r3, pc, #476	; (adr r3, 800c688 <__ieee754_pow+0x6d8>)
 800c4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b0:	4604      	mov	r4, r0
 800c4b2:	460d      	mov	r5, r1
 800c4b4:	f7f4 f808 	bl	80004c8 <__aeabi_dmul>
 800c4b8:	a375      	add	r3, pc, #468	; (adr r3, 800c690 <__ieee754_pow+0x6e0>)
 800c4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4be:	f7f3 fe4d 	bl	800015c <__adddf3>
 800c4c2:	4622      	mov	r2, r4
 800c4c4:	462b      	mov	r3, r5
 800c4c6:	f7f3 ffff 	bl	80004c8 <__aeabi_dmul>
 800c4ca:	a373      	add	r3, pc, #460	; (adr r3, 800c698 <__ieee754_pow+0x6e8>)
 800c4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d0:	f7f3 fe44 	bl	800015c <__adddf3>
 800c4d4:	4622      	mov	r2, r4
 800c4d6:	462b      	mov	r3, r5
 800c4d8:	f7f3 fff6 	bl	80004c8 <__aeabi_dmul>
 800c4dc:	a370      	add	r3, pc, #448	; (adr r3, 800c6a0 <__ieee754_pow+0x6f0>)
 800c4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e2:	f7f3 fe3b 	bl	800015c <__adddf3>
 800c4e6:	4622      	mov	r2, r4
 800c4e8:	462b      	mov	r3, r5
 800c4ea:	f7f3 ffed 	bl	80004c8 <__aeabi_dmul>
 800c4ee:	a36e      	add	r3, pc, #440	; (adr r3, 800c6a8 <__ieee754_pow+0x6f8>)
 800c4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f4:	f7f3 fe32 	bl	800015c <__adddf3>
 800c4f8:	4622      	mov	r2, r4
 800c4fa:	462b      	mov	r3, r5
 800c4fc:	f7f3 ffe4 	bl	80004c8 <__aeabi_dmul>
 800c500:	a36b      	add	r3, pc, #428	; (adr r3, 800c6b0 <__ieee754_pow+0x700>)
 800c502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c506:	f7f3 fe29 	bl	800015c <__adddf3>
 800c50a:	4622      	mov	r2, r4
 800c50c:	4606      	mov	r6, r0
 800c50e:	460f      	mov	r7, r1
 800c510:	462b      	mov	r3, r5
 800c512:	4620      	mov	r0, r4
 800c514:	4629      	mov	r1, r5
 800c516:	f7f3 ffd7 	bl	80004c8 <__aeabi_dmul>
 800c51a:	4602      	mov	r2, r0
 800c51c:	460b      	mov	r3, r1
 800c51e:	4630      	mov	r0, r6
 800c520:	4639      	mov	r1, r7
 800c522:	f7f3 ffd1 	bl	80004c8 <__aeabi_dmul>
 800c526:	4604      	mov	r4, r0
 800c528:	460d      	mov	r5, r1
 800c52a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c52e:	4652      	mov	r2, sl
 800c530:	465b      	mov	r3, fp
 800c532:	f7f3 fe13 	bl	800015c <__adddf3>
 800c536:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c53a:	f7f3 ffc5 	bl	80004c8 <__aeabi_dmul>
 800c53e:	4622      	mov	r2, r4
 800c540:	462b      	mov	r3, r5
 800c542:	f7f3 fe0b 	bl	800015c <__adddf3>
 800c546:	4652      	mov	r2, sl
 800c548:	4606      	mov	r6, r0
 800c54a:	460f      	mov	r7, r1
 800c54c:	465b      	mov	r3, fp
 800c54e:	4650      	mov	r0, sl
 800c550:	4659      	mov	r1, fp
 800c552:	f7f3 ffb9 	bl	80004c8 <__aeabi_dmul>
 800c556:	2200      	movs	r2, #0
 800c558:	4b62      	ldr	r3, [pc, #392]	; (800c6e4 <__ieee754_pow+0x734>)
 800c55a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c55e:	f7f3 fdfd 	bl	800015c <__adddf3>
 800c562:	4632      	mov	r2, r6
 800c564:	463b      	mov	r3, r7
 800c566:	f7f3 fdf9 	bl	800015c <__adddf3>
 800c56a:	9804      	ldr	r0, [sp, #16]
 800c56c:	460d      	mov	r5, r1
 800c56e:	4604      	mov	r4, r0
 800c570:	4602      	mov	r2, r0
 800c572:	460b      	mov	r3, r1
 800c574:	4650      	mov	r0, sl
 800c576:	4659      	mov	r1, fp
 800c578:	f7f3 ffa6 	bl	80004c8 <__aeabi_dmul>
 800c57c:	2200      	movs	r2, #0
 800c57e:	4682      	mov	sl, r0
 800c580:	468b      	mov	fp, r1
 800c582:	4b58      	ldr	r3, [pc, #352]	; (800c6e4 <__ieee754_pow+0x734>)
 800c584:	4620      	mov	r0, r4
 800c586:	4629      	mov	r1, r5
 800c588:	f7f3 fde6 	bl	8000158 <__aeabi_dsub>
 800c58c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c590:	f7f3 fde2 	bl	8000158 <__aeabi_dsub>
 800c594:	4602      	mov	r2, r0
 800c596:	460b      	mov	r3, r1
 800c598:	4630      	mov	r0, r6
 800c59a:	4639      	mov	r1, r7
 800c59c:	f7f3 fddc 	bl	8000158 <__aeabi_dsub>
 800c5a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c5a4:	f7f3 ff90 	bl	80004c8 <__aeabi_dmul>
 800c5a8:	4622      	mov	r2, r4
 800c5aa:	4606      	mov	r6, r0
 800c5ac:	460f      	mov	r7, r1
 800c5ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c5b2:	462b      	mov	r3, r5
 800c5b4:	f7f3 ff88 	bl	80004c8 <__aeabi_dmul>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	4630      	mov	r0, r6
 800c5be:	4639      	mov	r1, r7
 800c5c0:	f7f3 fdcc 	bl	800015c <__adddf3>
 800c5c4:	4606      	mov	r6, r0
 800c5c6:	460f      	mov	r7, r1
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	4650      	mov	r0, sl
 800c5ce:	4659      	mov	r1, fp
 800c5d0:	f7f3 fdc4 	bl	800015c <__adddf3>
 800c5d4:	a338      	add	r3, pc, #224	; (adr r3, 800c6b8 <__ieee754_pow+0x708>)
 800c5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5da:	9804      	ldr	r0, [sp, #16]
 800c5dc:	460d      	mov	r5, r1
 800c5de:	4604      	mov	r4, r0
 800c5e0:	f7f3 ff72 	bl	80004c8 <__aeabi_dmul>
 800c5e4:	4652      	mov	r2, sl
 800c5e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c5ea:	465b      	mov	r3, fp
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	4629      	mov	r1, r5
 800c5f0:	f7f3 fdb2 	bl	8000158 <__aeabi_dsub>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	460b      	mov	r3, r1
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	4639      	mov	r1, r7
 800c5fc:	f7f3 fdac 	bl	8000158 <__aeabi_dsub>
 800c600:	a32f      	add	r3, pc, #188	; (adr r3, 800c6c0 <__ieee754_pow+0x710>)
 800c602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c606:	f7f3 ff5f 	bl	80004c8 <__aeabi_dmul>
 800c60a:	a32f      	add	r3, pc, #188	; (adr r3, 800c6c8 <__ieee754_pow+0x718>)
 800c60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c610:	4606      	mov	r6, r0
 800c612:	460f      	mov	r7, r1
 800c614:	4620      	mov	r0, r4
 800c616:	4629      	mov	r1, r5
 800c618:	f7f3 ff56 	bl	80004c8 <__aeabi_dmul>
 800c61c:	4602      	mov	r2, r0
 800c61e:	460b      	mov	r3, r1
 800c620:	4630      	mov	r0, r6
 800c622:	4639      	mov	r1, r7
 800c624:	f7f3 fd9a 	bl	800015c <__adddf3>
 800c628:	4b2f      	ldr	r3, [pc, #188]	; (800c6e8 <__ieee754_pow+0x738>)
 800c62a:	444b      	add	r3, r9
 800c62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c630:	f7f3 fd94 	bl	800015c <__adddf3>
 800c634:	4604      	mov	r4, r0
 800c636:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c638:	460d      	mov	r5, r1
 800c63a:	f7f3 fedb 	bl	80003f4 <__aeabi_i2d>
 800c63e:	4606      	mov	r6, r0
 800c640:	460f      	mov	r7, r1
 800c642:	4b2a      	ldr	r3, [pc, #168]	; (800c6ec <__ieee754_pow+0x73c>)
 800c644:	4622      	mov	r2, r4
 800c646:	444b      	add	r3, r9
 800c648:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c64c:	462b      	mov	r3, r5
 800c64e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c652:	f7f3 fd83 	bl	800015c <__adddf3>
 800c656:	4642      	mov	r2, r8
 800c658:	464b      	mov	r3, r9
 800c65a:	f7f3 fd7f 	bl	800015c <__adddf3>
 800c65e:	4632      	mov	r2, r6
 800c660:	463b      	mov	r3, r7
 800c662:	f7f3 fd7b 	bl	800015c <__adddf3>
 800c666:	9804      	ldr	r0, [sp, #16]
 800c668:	4632      	mov	r2, r6
 800c66a:	463b      	mov	r3, r7
 800c66c:	4682      	mov	sl, r0
 800c66e:	468b      	mov	fp, r1
 800c670:	f7f3 fd72 	bl	8000158 <__aeabi_dsub>
 800c674:	4642      	mov	r2, r8
 800c676:	464b      	mov	r3, r9
 800c678:	f7f3 fd6e 	bl	8000158 <__aeabi_dsub>
 800c67c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c680:	e60b      	b.n	800c29a <__ieee754_pow+0x2ea>
 800c682:	f04f 0801 	mov.w	r8, #1
 800c686:	e6a8      	b.n	800c3da <__ieee754_pow+0x42a>
 800c688:	4a454eef 	.word	0x4a454eef
 800c68c:	3fca7e28 	.word	0x3fca7e28
 800c690:	93c9db65 	.word	0x93c9db65
 800c694:	3fcd864a 	.word	0x3fcd864a
 800c698:	a91d4101 	.word	0xa91d4101
 800c69c:	3fd17460 	.word	0x3fd17460
 800c6a0:	518f264d 	.word	0x518f264d
 800c6a4:	3fd55555 	.word	0x3fd55555
 800c6a8:	db6fabff 	.word	0xdb6fabff
 800c6ac:	3fdb6db6 	.word	0x3fdb6db6
 800c6b0:	33333303 	.word	0x33333303
 800c6b4:	3fe33333 	.word	0x3fe33333
 800c6b8:	e0000000 	.word	0xe0000000
 800c6bc:	3feec709 	.word	0x3feec709
 800c6c0:	dc3a03fd 	.word	0xdc3a03fd
 800c6c4:	3feec709 	.word	0x3feec709
 800c6c8:	145b01f5 	.word	0x145b01f5
 800c6cc:	be3e2fe0 	.word	0xbe3e2fe0
 800c6d0:	43400000 	.word	0x43400000
 800c6d4:	0003988e 	.word	0x0003988e
 800c6d8:	000bb679 	.word	0x000bb679
 800c6dc:	0800d118 	.word	0x0800d118
 800c6e0:	3ff00000 	.word	0x3ff00000
 800c6e4:	40080000 	.word	0x40080000
 800c6e8:	0800d138 	.word	0x0800d138
 800c6ec:	0800d128 	.word	0x0800d128
 800c6f0:	a39b      	add	r3, pc, #620	; (adr r3, 800c960 <__ieee754_pow+0x9b0>)
 800c6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f6:	4640      	mov	r0, r8
 800c6f8:	4649      	mov	r1, r9
 800c6fa:	f7f3 fd2f 	bl	800015c <__adddf3>
 800c6fe:	4622      	mov	r2, r4
 800c700:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c704:	462b      	mov	r3, r5
 800c706:	4650      	mov	r0, sl
 800c708:	4639      	mov	r1, r7
 800c70a:	f7f3 fd25 	bl	8000158 <__aeabi_dsub>
 800c70e:	4602      	mov	r2, r0
 800c710:	460b      	mov	r3, r1
 800c712:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c716:	f7f4 f967 	bl	80009e8 <__aeabi_dcmpgt>
 800c71a:	2800      	cmp	r0, #0
 800c71c:	f47f ae0d 	bne.w	800c33a <__ieee754_pow+0x38a>
 800c720:	4aa3      	ldr	r2, [pc, #652]	; (800c9b0 <__ieee754_pow+0xa00>)
 800c722:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800c726:	4293      	cmp	r3, r2
 800c728:	f340 8103 	ble.w	800c932 <__ieee754_pow+0x982>
 800c72c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c730:	2000      	movs	r0, #0
 800c732:	151b      	asrs	r3, r3, #20
 800c734:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c738:	fa4a f303 	asr.w	r3, sl, r3
 800c73c:	4433      	add	r3, r6
 800c73e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c742:	4f9c      	ldr	r7, [pc, #624]	; (800c9b4 <__ieee754_pow+0xa04>)
 800c744:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c748:	4117      	asrs	r7, r2
 800c74a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c74e:	ea23 0107 	bic.w	r1, r3, r7
 800c752:	f1c2 0214 	rsb	r2, r2, #20
 800c756:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c75a:	fa4a fa02 	asr.w	sl, sl, r2
 800c75e:	2e00      	cmp	r6, #0
 800c760:	4602      	mov	r2, r0
 800c762:	460b      	mov	r3, r1
 800c764:	4620      	mov	r0, r4
 800c766:	4629      	mov	r1, r5
 800c768:	bfb8      	it	lt
 800c76a:	f1ca 0a00 	rsblt	sl, sl, #0
 800c76e:	f7f3 fcf3 	bl	8000158 <__aeabi_dsub>
 800c772:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c77a:	4642      	mov	r2, r8
 800c77c:	464b      	mov	r3, r9
 800c77e:	f7f3 fced 	bl	800015c <__adddf3>
 800c782:	a379      	add	r3, pc, #484	; (adr r3, 800c968 <__ieee754_pow+0x9b8>)
 800c784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c788:	2000      	movs	r0, #0
 800c78a:	460d      	mov	r5, r1
 800c78c:	4604      	mov	r4, r0
 800c78e:	f7f3 fe9b 	bl	80004c8 <__aeabi_dmul>
 800c792:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c796:	4606      	mov	r6, r0
 800c798:	460f      	mov	r7, r1
 800c79a:	4620      	mov	r0, r4
 800c79c:	4629      	mov	r1, r5
 800c79e:	f7f3 fcdb 	bl	8000158 <__aeabi_dsub>
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	4640      	mov	r0, r8
 800c7a8:	4649      	mov	r1, r9
 800c7aa:	f7f3 fcd5 	bl	8000158 <__aeabi_dsub>
 800c7ae:	a370      	add	r3, pc, #448	; (adr r3, 800c970 <__ieee754_pow+0x9c0>)
 800c7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b4:	f7f3 fe88 	bl	80004c8 <__aeabi_dmul>
 800c7b8:	a36f      	add	r3, pc, #444	; (adr r3, 800c978 <__ieee754_pow+0x9c8>)
 800c7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7be:	4680      	mov	r8, r0
 800c7c0:	4689      	mov	r9, r1
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	f7f3 fe7f 	bl	80004c8 <__aeabi_dmul>
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	4640      	mov	r0, r8
 800c7d0:	4649      	mov	r1, r9
 800c7d2:	f7f3 fcc3 	bl	800015c <__adddf3>
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	460d      	mov	r5, r1
 800c7da:	4602      	mov	r2, r0
 800c7dc:	460b      	mov	r3, r1
 800c7de:	4630      	mov	r0, r6
 800c7e0:	4639      	mov	r1, r7
 800c7e2:	f7f3 fcbb 	bl	800015c <__adddf3>
 800c7e6:	4632      	mov	r2, r6
 800c7e8:	463b      	mov	r3, r7
 800c7ea:	4680      	mov	r8, r0
 800c7ec:	4689      	mov	r9, r1
 800c7ee:	f7f3 fcb3 	bl	8000158 <__aeabi_dsub>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	4629      	mov	r1, r5
 800c7fa:	f7f3 fcad 	bl	8000158 <__aeabi_dsub>
 800c7fe:	4642      	mov	r2, r8
 800c800:	4606      	mov	r6, r0
 800c802:	460f      	mov	r7, r1
 800c804:	464b      	mov	r3, r9
 800c806:	4640      	mov	r0, r8
 800c808:	4649      	mov	r1, r9
 800c80a:	f7f3 fe5d 	bl	80004c8 <__aeabi_dmul>
 800c80e:	a35c      	add	r3, pc, #368	; (adr r3, 800c980 <__ieee754_pow+0x9d0>)
 800c810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c814:	4604      	mov	r4, r0
 800c816:	460d      	mov	r5, r1
 800c818:	f7f3 fe56 	bl	80004c8 <__aeabi_dmul>
 800c81c:	a35a      	add	r3, pc, #360	; (adr r3, 800c988 <__ieee754_pow+0x9d8>)
 800c81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c822:	f7f3 fc99 	bl	8000158 <__aeabi_dsub>
 800c826:	4622      	mov	r2, r4
 800c828:	462b      	mov	r3, r5
 800c82a:	f7f3 fe4d 	bl	80004c8 <__aeabi_dmul>
 800c82e:	a358      	add	r3, pc, #352	; (adr r3, 800c990 <__ieee754_pow+0x9e0>)
 800c830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c834:	f7f3 fc92 	bl	800015c <__adddf3>
 800c838:	4622      	mov	r2, r4
 800c83a:	462b      	mov	r3, r5
 800c83c:	f7f3 fe44 	bl	80004c8 <__aeabi_dmul>
 800c840:	a355      	add	r3, pc, #340	; (adr r3, 800c998 <__ieee754_pow+0x9e8>)
 800c842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c846:	f7f3 fc87 	bl	8000158 <__aeabi_dsub>
 800c84a:	4622      	mov	r2, r4
 800c84c:	462b      	mov	r3, r5
 800c84e:	f7f3 fe3b 	bl	80004c8 <__aeabi_dmul>
 800c852:	a353      	add	r3, pc, #332	; (adr r3, 800c9a0 <__ieee754_pow+0x9f0>)
 800c854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c858:	f7f3 fc80 	bl	800015c <__adddf3>
 800c85c:	4622      	mov	r2, r4
 800c85e:	462b      	mov	r3, r5
 800c860:	f7f3 fe32 	bl	80004c8 <__aeabi_dmul>
 800c864:	4602      	mov	r2, r0
 800c866:	460b      	mov	r3, r1
 800c868:	4640      	mov	r0, r8
 800c86a:	4649      	mov	r1, r9
 800c86c:	f7f3 fc74 	bl	8000158 <__aeabi_dsub>
 800c870:	4604      	mov	r4, r0
 800c872:	460d      	mov	r5, r1
 800c874:	4602      	mov	r2, r0
 800c876:	460b      	mov	r3, r1
 800c878:	4640      	mov	r0, r8
 800c87a:	4649      	mov	r1, r9
 800c87c:	f7f3 fe24 	bl	80004c8 <__aeabi_dmul>
 800c880:	2200      	movs	r2, #0
 800c882:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c88a:	4620      	mov	r0, r4
 800c88c:	4629      	mov	r1, r5
 800c88e:	f7f3 fc63 	bl	8000158 <__aeabi_dsub>
 800c892:	4602      	mov	r2, r0
 800c894:	460b      	mov	r3, r1
 800c896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c89a:	f7f3 ff3f 	bl	800071c <__aeabi_ddiv>
 800c89e:	4632      	mov	r2, r6
 800c8a0:	4604      	mov	r4, r0
 800c8a2:	460d      	mov	r5, r1
 800c8a4:	463b      	mov	r3, r7
 800c8a6:	4640      	mov	r0, r8
 800c8a8:	4649      	mov	r1, r9
 800c8aa:	f7f3 fe0d 	bl	80004c8 <__aeabi_dmul>
 800c8ae:	4632      	mov	r2, r6
 800c8b0:	463b      	mov	r3, r7
 800c8b2:	f7f3 fc53 	bl	800015c <__adddf3>
 800c8b6:	4602      	mov	r2, r0
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	4620      	mov	r0, r4
 800c8bc:	4629      	mov	r1, r5
 800c8be:	f7f3 fc4b 	bl	8000158 <__aeabi_dsub>
 800c8c2:	4642      	mov	r2, r8
 800c8c4:	464b      	mov	r3, r9
 800c8c6:	f7f3 fc47 	bl	8000158 <__aeabi_dsub>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	2000      	movs	r0, #0
 800c8d0:	4939      	ldr	r1, [pc, #228]	; (800c9b8 <__ieee754_pow+0xa08>)
 800c8d2:	f7f3 fc41 	bl	8000158 <__aeabi_dsub>
 800c8d6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c8da:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c8de:	da2b      	bge.n	800c938 <__ieee754_pow+0x988>
 800c8e0:	4652      	mov	r2, sl
 800c8e2:	f000 f9b9 	bl	800cc58 <scalbn>
 800c8e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8ea:	f7ff bbf6 	b.w	800c0da <__ieee754_pow+0x12a>
 800c8ee:	4b33      	ldr	r3, [pc, #204]	; (800c9bc <__ieee754_pow+0xa0c>)
 800c8f0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800c8f4:	429f      	cmp	r7, r3
 800c8f6:	f77f af13 	ble.w	800c720 <__ieee754_pow+0x770>
 800c8fa:	4b31      	ldr	r3, [pc, #196]	; (800c9c0 <__ieee754_pow+0xa10>)
 800c8fc:	440b      	add	r3, r1
 800c8fe:	4303      	orrs	r3, r0
 800c900:	d00b      	beq.n	800c91a <__ieee754_pow+0x96a>
 800c902:	a329      	add	r3, pc, #164	; (adr r3, 800c9a8 <__ieee754_pow+0x9f8>)
 800c904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c908:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c90c:	f7f3 fddc 	bl	80004c8 <__aeabi_dmul>
 800c910:	a325      	add	r3, pc, #148	; (adr r3, 800c9a8 <__ieee754_pow+0x9f8>)
 800c912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c916:	f7ff bbe0 	b.w	800c0da <__ieee754_pow+0x12a>
 800c91a:	4622      	mov	r2, r4
 800c91c:	462b      	mov	r3, r5
 800c91e:	f7f3 fc1b 	bl	8000158 <__aeabi_dsub>
 800c922:	4642      	mov	r2, r8
 800c924:	464b      	mov	r3, r9
 800c926:	f7f4 f855 	bl	80009d4 <__aeabi_dcmpge>
 800c92a:	2800      	cmp	r0, #0
 800c92c:	f43f aef8 	beq.w	800c720 <__ieee754_pow+0x770>
 800c930:	e7e7      	b.n	800c902 <__ieee754_pow+0x952>
 800c932:	f04f 0a00 	mov.w	sl, #0
 800c936:	e71e      	b.n	800c776 <__ieee754_pow+0x7c6>
 800c938:	4621      	mov	r1, r4
 800c93a:	e7d4      	b.n	800c8e6 <__ieee754_pow+0x936>
 800c93c:	f04f 0b00 	mov.w	fp, #0
 800c940:	f8df c074 	ldr.w	ip, [pc, #116]	; 800c9b8 <__ieee754_pow+0xa08>
 800c944:	f7ff bb95 	b.w	800c072 <__ieee754_pow+0xc2>
 800c948:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800c94c:	f7ff bb91 	b.w	800c072 <__ieee754_pow+0xc2>
 800c950:	4638      	mov	r0, r7
 800c952:	4641      	mov	r1, r8
 800c954:	f7ff bbc3 	b.w	800c0de <__ieee754_pow+0x12e>
 800c958:	9200      	str	r2, [sp, #0]
 800c95a:	f7ff bb9f 	b.w	800c09c <__ieee754_pow+0xec>
 800c95e:	bf00      	nop
 800c960:	652b82fe 	.word	0x652b82fe
 800c964:	3c971547 	.word	0x3c971547
 800c968:	00000000 	.word	0x00000000
 800c96c:	3fe62e43 	.word	0x3fe62e43
 800c970:	fefa39ef 	.word	0xfefa39ef
 800c974:	3fe62e42 	.word	0x3fe62e42
 800c978:	0ca86c39 	.word	0x0ca86c39
 800c97c:	be205c61 	.word	0xbe205c61
 800c980:	72bea4d0 	.word	0x72bea4d0
 800c984:	3e663769 	.word	0x3e663769
 800c988:	c5d26bf1 	.word	0xc5d26bf1
 800c98c:	3ebbbd41 	.word	0x3ebbbd41
 800c990:	af25de2c 	.word	0xaf25de2c
 800c994:	3f11566a 	.word	0x3f11566a
 800c998:	16bebd93 	.word	0x16bebd93
 800c99c:	3f66c16c 	.word	0x3f66c16c
 800c9a0:	5555553e 	.word	0x5555553e
 800c9a4:	3fc55555 	.word	0x3fc55555
 800c9a8:	c2f8f359 	.word	0xc2f8f359
 800c9ac:	01a56e1f 	.word	0x01a56e1f
 800c9b0:	3fe00000 	.word	0x3fe00000
 800c9b4:	000fffff 	.word	0x000fffff
 800c9b8:	3ff00000 	.word	0x3ff00000
 800c9bc:	4090cbff 	.word	0x4090cbff
 800c9c0:	3f6f3400 	.word	0x3f6f3400

0800c9c4 <__ieee754_sqrt>:
 800c9c4:	4b54      	ldr	r3, [pc, #336]	; (800cb18 <__ieee754_sqrt+0x154>)
 800c9c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9ca:	438b      	bics	r3, r1
 800c9cc:	4606      	mov	r6, r0
 800c9ce:	460d      	mov	r5, r1
 800c9d0:	460a      	mov	r2, r1
 800c9d2:	460c      	mov	r4, r1
 800c9d4:	d10f      	bne.n	800c9f6 <__ieee754_sqrt+0x32>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	460b      	mov	r3, r1
 800c9da:	f7f3 fd75 	bl	80004c8 <__aeabi_dmul>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	460b      	mov	r3, r1
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	4629      	mov	r1, r5
 800c9e6:	f7f3 fbb9 	bl	800015c <__adddf3>
 800c9ea:	4606      	mov	r6, r0
 800c9ec:	460d      	mov	r5, r1
 800c9ee:	4630      	mov	r0, r6
 800c9f0:	4629      	mov	r1, r5
 800c9f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9f6:	2900      	cmp	r1, #0
 800c9f8:	4607      	mov	r7, r0
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	dc0e      	bgt.n	800ca1c <__ieee754_sqrt+0x58>
 800c9fe:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800ca02:	ea5c 0707 	orrs.w	r7, ip, r7
 800ca06:	d0f2      	beq.n	800c9ee <__ieee754_sqrt+0x2a>
 800ca08:	b141      	cbz	r1, 800ca1c <__ieee754_sqrt+0x58>
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	f7f3 fba3 	bl	8000158 <__aeabi_dsub>
 800ca12:	4602      	mov	r2, r0
 800ca14:	460b      	mov	r3, r1
 800ca16:	f7f3 fe81 	bl	800071c <__aeabi_ddiv>
 800ca1a:	e7e6      	b.n	800c9ea <__ieee754_sqrt+0x26>
 800ca1c:	1512      	asrs	r2, r2, #20
 800ca1e:	d074      	beq.n	800cb0a <__ieee754_sqrt+0x146>
 800ca20:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ca24:	07d5      	lsls	r5, r2, #31
 800ca26:	f04f 0500 	mov.w	r5, #0
 800ca2a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ca2e:	bf48      	it	mi
 800ca30:	0fd9      	lsrmi	r1, r3, #31
 800ca32:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800ca36:	bf44      	itt	mi
 800ca38:	005b      	lslmi	r3, r3, #1
 800ca3a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800ca3e:	1051      	asrs	r1, r2, #1
 800ca40:	0fda      	lsrs	r2, r3, #31
 800ca42:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800ca46:	4628      	mov	r0, r5
 800ca48:	2216      	movs	r2, #22
 800ca4a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800ca4e:	005b      	lsls	r3, r3, #1
 800ca50:	1987      	adds	r7, r0, r6
 800ca52:	42a7      	cmp	r7, r4
 800ca54:	bfde      	ittt	le
 800ca56:	19b8      	addle	r0, r7, r6
 800ca58:	1be4      	suble	r4, r4, r7
 800ca5a:	19ad      	addle	r5, r5, r6
 800ca5c:	0fdf      	lsrs	r7, r3, #31
 800ca5e:	3a01      	subs	r2, #1
 800ca60:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800ca64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ca68:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ca6c:	d1f0      	bne.n	800ca50 <__ieee754_sqrt+0x8c>
 800ca6e:	f04f 0c20 	mov.w	ip, #32
 800ca72:	4696      	mov	lr, r2
 800ca74:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ca78:	4284      	cmp	r4, r0
 800ca7a:	eb06 070e 	add.w	r7, r6, lr
 800ca7e:	dc02      	bgt.n	800ca86 <__ieee754_sqrt+0xc2>
 800ca80:	d112      	bne.n	800caa8 <__ieee754_sqrt+0xe4>
 800ca82:	429f      	cmp	r7, r3
 800ca84:	d810      	bhi.n	800caa8 <__ieee754_sqrt+0xe4>
 800ca86:	2f00      	cmp	r7, #0
 800ca88:	eb07 0e06 	add.w	lr, r7, r6
 800ca8c:	da42      	bge.n	800cb14 <__ieee754_sqrt+0x150>
 800ca8e:	f1be 0f00 	cmp.w	lr, #0
 800ca92:	db3f      	blt.n	800cb14 <__ieee754_sqrt+0x150>
 800ca94:	f100 0801 	add.w	r8, r0, #1
 800ca98:	1a24      	subs	r4, r4, r0
 800ca9a:	4640      	mov	r0, r8
 800ca9c:	429f      	cmp	r7, r3
 800ca9e:	bf88      	it	hi
 800caa0:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 800caa4:	1bdb      	subs	r3, r3, r7
 800caa6:	4432      	add	r2, r6
 800caa8:	0064      	lsls	r4, r4, #1
 800caaa:	f1bc 0c01 	subs.w	ip, ip, #1
 800caae:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800cab2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cab6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800caba:	d1dd      	bne.n	800ca78 <__ieee754_sqrt+0xb4>
 800cabc:	4323      	orrs	r3, r4
 800cabe:	d006      	beq.n	800cace <__ieee754_sqrt+0x10a>
 800cac0:	1c54      	adds	r4, r2, #1
 800cac2:	bf0b      	itete	eq
 800cac4:	4662      	moveq	r2, ip
 800cac6:	3201      	addne	r2, #1
 800cac8:	3501      	addeq	r5, #1
 800caca:	f022 0201 	bicne.w	r2, r2, #1
 800cace:	106b      	asrs	r3, r5, #1
 800cad0:	0852      	lsrs	r2, r2, #1
 800cad2:	07e8      	lsls	r0, r5, #31
 800cad4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cad8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cadc:	bf48      	it	mi
 800cade:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800cae2:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800cae6:	4616      	mov	r6, r2
 800cae8:	e781      	b.n	800c9ee <__ieee754_sqrt+0x2a>
 800caea:	0adc      	lsrs	r4, r3, #11
 800caec:	3915      	subs	r1, #21
 800caee:	055b      	lsls	r3, r3, #21
 800caf0:	2c00      	cmp	r4, #0
 800caf2:	d0fa      	beq.n	800caea <__ieee754_sqrt+0x126>
 800caf4:	02e6      	lsls	r6, r4, #11
 800caf6:	d50a      	bpl.n	800cb0e <__ieee754_sqrt+0x14a>
 800caf8:	f1c2 0020 	rsb	r0, r2, #32
 800cafc:	fa23 f000 	lsr.w	r0, r3, r0
 800cb00:	1e55      	subs	r5, r2, #1
 800cb02:	4093      	lsls	r3, r2
 800cb04:	4304      	orrs	r4, r0
 800cb06:	1b4a      	subs	r2, r1, r5
 800cb08:	e78a      	b.n	800ca20 <__ieee754_sqrt+0x5c>
 800cb0a:	4611      	mov	r1, r2
 800cb0c:	e7f0      	b.n	800caf0 <__ieee754_sqrt+0x12c>
 800cb0e:	0064      	lsls	r4, r4, #1
 800cb10:	3201      	adds	r2, #1
 800cb12:	e7ef      	b.n	800caf4 <__ieee754_sqrt+0x130>
 800cb14:	4680      	mov	r8, r0
 800cb16:	e7bf      	b.n	800ca98 <__ieee754_sqrt+0xd4>
 800cb18:	7ff00000 	.word	0x7ff00000

0800cb1c <fabs>:
 800cb1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cb20:	4619      	mov	r1, r3
 800cb22:	4770      	bx	lr

0800cb24 <finite>:
 800cb24:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800cb28:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800cb2c:	0fc0      	lsrs	r0, r0, #31
 800cb2e:	4770      	bx	lr

0800cb30 <matherr>:
 800cb30:	2000      	movs	r0, #0
 800cb32:	4770      	bx	lr

0800cb34 <nan>:
 800cb34:	2000      	movs	r0, #0
 800cb36:	4901      	ldr	r1, [pc, #4]	; (800cb3c <nan+0x8>)
 800cb38:	4770      	bx	lr
 800cb3a:	bf00      	nop
 800cb3c:	7ff80000 	.word	0x7ff80000

0800cb40 <rint>:
 800cb40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb42:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cb46:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800cb4a:	f1bc 0f13 	cmp.w	ip, #19
 800cb4e:	4604      	mov	r4, r0
 800cb50:	460d      	mov	r5, r1
 800cb52:	460b      	mov	r3, r1
 800cb54:	4606      	mov	r6, r0
 800cb56:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800cb5a:	dc5a      	bgt.n	800cc12 <rint+0xd2>
 800cb5c:	f1bc 0f00 	cmp.w	ip, #0
 800cb60:	da2b      	bge.n	800cbba <rint+0x7a>
 800cb62:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800cb66:	4302      	orrs	r2, r0
 800cb68:	d023      	beq.n	800cbb2 <rint+0x72>
 800cb6a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800cb6e:	4302      	orrs	r2, r0
 800cb70:	4256      	negs	r6, r2
 800cb72:	4316      	orrs	r6, r2
 800cb74:	0c4b      	lsrs	r3, r1, #17
 800cb76:	0b36      	lsrs	r6, r6, #12
 800cb78:	4934      	ldr	r1, [pc, #208]	; (800cc4c <rint+0x10c>)
 800cb7a:	045b      	lsls	r3, r3, #17
 800cb7c:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 800cb80:	ea46 0503 	orr.w	r5, r6, r3
 800cb84:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800cb88:	4602      	mov	r2, r0
 800cb8a:	462b      	mov	r3, r5
 800cb8c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800cb90:	4620      	mov	r0, r4
 800cb92:	4629      	mov	r1, r5
 800cb94:	f7f3 fae2 	bl	800015c <__adddf3>
 800cb98:	e9cd 0100 	strd	r0, r1, [sp]
 800cb9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cba0:	462b      	mov	r3, r5
 800cba2:	4622      	mov	r2, r4
 800cba4:	f7f3 fad8 	bl	8000158 <__aeabi_dsub>
 800cba8:	4604      	mov	r4, r0
 800cbaa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cbae:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	4629      	mov	r1, r5
 800cbb6:	b003      	add	sp, #12
 800cbb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbba:	4a25      	ldr	r2, [pc, #148]	; (800cc50 <rint+0x110>)
 800cbbc:	fa42 f20c 	asr.w	r2, r2, ip
 800cbc0:	4011      	ands	r1, r2
 800cbc2:	4301      	orrs	r1, r0
 800cbc4:	d0f5      	beq.n	800cbb2 <rint+0x72>
 800cbc6:	0852      	lsrs	r2, r2, #1
 800cbc8:	ea05 0102 	and.w	r1, r5, r2
 800cbcc:	ea50 0601 	orrs.w	r6, r0, r1
 800cbd0:	d00c      	beq.n	800cbec <rint+0xac>
 800cbd2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cbd6:	f1bc 0f13 	cmp.w	ip, #19
 800cbda:	bf0c      	ite	eq
 800cbdc:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800cbe0:	2600      	movne	r6, #0
 800cbe2:	ea25 0202 	bic.w	r2, r5, r2
 800cbe6:	fa43 f30c 	asr.w	r3, r3, ip
 800cbea:	4313      	orrs	r3, r2
 800cbec:	4917      	ldr	r1, [pc, #92]	; (800cc4c <rint+0x10c>)
 800cbee:	4632      	mov	r2, r6
 800cbf0:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800cbf4:	e9d7 4500 	ldrd	r4, r5, [r7]
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	4629      	mov	r1, r5
 800cbfc:	f7f3 faae 	bl	800015c <__adddf3>
 800cc00:	e9cd 0100 	strd	r0, r1, [sp]
 800cc04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc08:	4622      	mov	r2, r4
 800cc0a:	462b      	mov	r3, r5
 800cc0c:	f7f3 faa4 	bl	8000158 <__aeabi_dsub>
 800cc10:	e008      	b.n	800cc24 <rint+0xe4>
 800cc12:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800cc16:	dd08      	ble.n	800cc2a <rint+0xea>
 800cc18:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800cc1c:	d1c9      	bne.n	800cbb2 <rint+0x72>
 800cc1e:	4602      	mov	r2, r0
 800cc20:	f7f3 fa9c 	bl	800015c <__adddf3>
 800cc24:	4604      	mov	r4, r0
 800cc26:	460d      	mov	r5, r1
 800cc28:	e7c3      	b.n	800cbb2 <rint+0x72>
 800cc2a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800cc2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc32:	40ca      	lsrs	r2, r1
 800cc34:	4210      	tst	r0, r2
 800cc36:	d0bc      	beq.n	800cbb2 <rint+0x72>
 800cc38:	0852      	lsrs	r2, r2, #1
 800cc3a:	4210      	tst	r0, r2
 800cc3c:	bf1f      	itttt	ne
 800cc3e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800cc42:	ea20 0202 	bicne.w	r2, r0, r2
 800cc46:	410e      	asrne	r6, r1
 800cc48:	4316      	orrne	r6, r2
 800cc4a:	e7cf      	b.n	800cbec <rint+0xac>
 800cc4c:	0800d148 	.word	0x0800d148
 800cc50:	000fffff 	.word	0x000fffff
 800cc54:	00000000 	.word	0x00000000

0800cc58 <scalbn>:
 800cc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc5a:	4616      	mov	r6, r2
 800cc5c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cc60:	4604      	mov	r4, r0
 800cc62:	460d      	mov	r5, r1
 800cc64:	460b      	mov	r3, r1
 800cc66:	b982      	cbnz	r2, 800cc8a <scalbn+0x32>
 800cc68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cc6c:	4303      	orrs	r3, r0
 800cc6e:	d034      	beq.n	800ccda <scalbn+0x82>
 800cc70:	4b2d      	ldr	r3, [pc, #180]	; (800cd28 <scalbn+0xd0>)
 800cc72:	2200      	movs	r2, #0
 800cc74:	f7f3 fc28 	bl	80004c8 <__aeabi_dmul>
 800cc78:	4b2c      	ldr	r3, [pc, #176]	; (800cd2c <scalbn+0xd4>)
 800cc7a:	4604      	mov	r4, r0
 800cc7c:	429e      	cmp	r6, r3
 800cc7e:	460d      	mov	r5, r1
 800cc80:	da0d      	bge.n	800cc9e <scalbn+0x46>
 800cc82:	a325      	add	r3, pc, #148	; (adr r3, 800cd18 <scalbn+0xc0>)
 800cc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc88:	e01c      	b.n	800ccc4 <scalbn+0x6c>
 800cc8a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800cc8e:	42ba      	cmp	r2, r7
 800cc90:	d109      	bne.n	800cca6 <scalbn+0x4e>
 800cc92:	4602      	mov	r2, r0
 800cc94:	f7f3 fa62 	bl	800015c <__adddf3>
 800cc98:	4604      	mov	r4, r0
 800cc9a:	460d      	mov	r5, r1
 800cc9c:	e01d      	b.n	800ccda <scalbn+0x82>
 800cc9e:	460b      	mov	r3, r1
 800cca0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cca4:	3a36      	subs	r2, #54	; 0x36
 800cca6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ccaa:	4432      	add	r2, r6
 800ccac:	428a      	cmp	r2, r1
 800ccae:	dd0c      	ble.n	800ccca <scalbn+0x72>
 800ccb0:	4622      	mov	r2, r4
 800ccb2:	462b      	mov	r3, r5
 800ccb4:	a11a      	add	r1, pc, #104	; (adr r1, 800cd20 <scalbn+0xc8>)
 800ccb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccba:	f000 f83b 	bl	800cd34 <copysign>
 800ccbe:	a318      	add	r3, pc, #96	; (adr r3, 800cd20 <scalbn+0xc8>)
 800ccc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc4:	f7f3 fc00 	bl	80004c8 <__aeabi_dmul>
 800ccc8:	e7e6      	b.n	800cc98 <scalbn+0x40>
 800ccca:	2a00      	cmp	r2, #0
 800cccc:	dd08      	ble.n	800cce0 <scalbn+0x88>
 800ccce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ccd2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ccd6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ccda:	4620      	mov	r0, r4
 800ccdc:	4629      	mov	r1, r5
 800ccde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cce0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cce4:	da0b      	bge.n	800ccfe <scalbn+0xa6>
 800cce6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ccea:	429e      	cmp	r6, r3
 800ccec:	4622      	mov	r2, r4
 800ccee:	462b      	mov	r3, r5
 800ccf0:	dce0      	bgt.n	800ccb4 <scalbn+0x5c>
 800ccf2:	a109      	add	r1, pc, #36	; (adr r1, 800cd18 <scalbn+0xc0>)
 800ccf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccf8:	f000 f81c 	bl	800cd34 <copysign>
 800ccfc:	e7c1      	b.n	800cc82 <scalbn+0x2a>
 800ccfe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cd02:	3236      	adds	r2, #54	; 0x36
 800cd04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cd08:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	4629      	mov	r1, r5
 800cd10:	2200      	movs	r2, #0
 800cd12:	4b07      	ldr	r3, [pc, #28]	; (800cd30 <scalbn+0xd8>)
 800cd14:	e7d6      	b.n	800ccc4 <scalbn+0x6c>
 800cd16:	bf00      	nop
 800cd18:	c2f8f359 	.word	0xc2f8f359
 800cd1c:	01a56e1f 	.word	0x01a56e1f
 800cd20:	8800759c 	.word	0x8800759c
 800cd24:	7e37e43c 	.word	0x7e37e43c
 800cd28:	43500000 	.word	0x43500000
 800cd2c:	ffff3cb0 	.word	0xffff3cb0
 800cd30:	3c900000 	.word	0x3c900000

0800cd34 <copysign>:
 800cd34:	b530      	push	{r4, r5, lr}
 800cd36:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800cd3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd3e:	ea42 0503 	orr.w	r5, r2, r3
 800cd42:	4629      	mov	r1, r5
 800cd44:	bd30      	pop	{r4, r5, pc}

0800cd46 <abort>:
 800cd46:	b508      	push	{r3, lr}
 800cd48:	2006      	movs	r0, #6
 800cd4a:	f000 f947 	bl	800cfdc <raise>
 800cd4e:	2001      	movs	r0, #1
 800cd50:	f7fa f820 	bl	8006d94 <_exit>

0800cd54 <__errno>:
 800cd54:	4b01      	ldr	r3, [pc, #4]	; (800cd5c <__errno+0x8>)
 800cd56:	6818      	ldr	r0, [r3, #0]
 800cd58:	4770      	bx	lr
 800cd5a:	bf00      	nop
 800cd5c:	2000009c 	.word	0x2000009c

0800cd60 <__libc_init_array>:
 800cd60:	b570      	push	{r4, r5, r6, lr}
 800cd62:	2500      	movs	r5, #0
 800cd64:	4e0c      	ldr	r6, [pc, #48]	; (800cd98 <__libc_init_array+0x38>)
 800cd66:	4c0d      	ldr	r4, [pc, #52]	; (800cd9c <__libc_init_array+0x3c>)
 800cd68:	1ba4      	subs	r4, r4, r6
 800cd6a:	10a4      	asrs	r4, r4, #2
 800cd6c:	42a5      	cmp	r5, r4
 800cd6e:	d109      	bne.n	800cd84 <__libc_init_array+0x24>
 800cd70:	f000 f952 	bl	800d018 <_init>
 800cd74:	2500      	movs	r5, #0
 800cd76:	4e0a      	ldr	r6, [pc, #40]	; (800cda0 <__libc_init_array+0x40>)
 800cd78:	4c0a      	ldr	r4, [pc, #40]	; (800cda4 <__libc_init_array+0x44>)
 800cd7a:	1ba4      	subs	r4, r4, r6
 800cd7c:	10a4      	asrs	r4, r4, #2
 800cd7e:	42a5      	cmp	r5, r4
 800cd80:	d105      	bne.n	800cd8e <__libc_init_array+0x2e>
 800cd82:	bd70      	pop	{r4, r5, r6, pc}
 800cd84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cd88:	4798      	blx	r3
 800cd8a:	3501      	adds	r5, #1
 800cd8c:	e7ee      	b.n	800cd6c <__libc_init_array+0xc>
 800cd8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cd92:	4798      	blx	r3
 800cd94:	3501      	adds	r5, #1
 800cd96:	e7f2      	b.n	800cd7e <__libc_init_array+0x1e>
 800cd98:	0800d160 	.word	0x0800d160
 800cd9c:	0800d160 	.word	0x0800d160
 800cda0:	0800d160 	.word	0x0800d160
 800cda4:	0800d170 	.word	0x0800d170

0800cda8 <malloc>:
 800cda8:	4b02      	ldr	r3, [pc, #8]	; (800cdb4 <malloc+0xc>)
 800cdaa:	4601      	mov	r1, r0
 800cdac:	6818      	ldr	r0, [r3, #0]
 800cdae:	f000 b883 	b.w	800ceb8 <_malloc_r>
 800cdb2:	bf00      	nop
 800cdb4:	2000009c 	.word	0x2000009c

0800cdb8 <free>:
 800cdb8:	4b02      	ldr	r3, [pc, #8]	; (800cdc4 <free+0xc>)
 800cdba:	4601      	mov	r1, r0
 800cdbc:	6818      	ldr	r0, [r3, #0]
 800cdbe:	f000 b82f 	b.w	800ce20 <_free_r>
 800cdc2:	bf00      	nop
 800cdc4:	2000009c 	.word	0x2000009c

0800cdc8 <memcpy>:
 800cdc8:	b510      	push	{r4, lr}
 800cdca:	1e43      	subs	r3, r0, #1
 800cdcc:	440a      	add	r2, r1
 800cdce:	4291      	cmp	r1, r2
 800cdd0:	d100      	bne.n	800cdd4 <memcpy+0xc>
 800cdd2:	bd10      	pop	{r4, pc}
 800cdd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cddc:	e7f7      	b.n	800cdce <memcpy+0x6>

0800cdde <memmove>:
 800cdde:	4288      	cmp	r0, r1
 800cde0:	b510      	push	{r4, lr}
 800cde2:	eb01 0302 	add.w	r3, r1, r2
 800cde6:	d807      	bhi.n	800cdf8 <memmove+0x1a>
 800cde8:	1e42      	subs	r2, r0, #1
 800cdea:	4299      	cmp	r1, r3
 800cdec:	d00a      	beq.n	800ce04 <memmove+0x26>
 800cdee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdf2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cdf6:	e7f8      	b.n	800cdea <memmove+0xc>
 800cdf8:	4283      	cmp	r3, r0
 800cdfa:	d9f5      	bls.n	800cde8 <memmove+0xa>
 800cdfc:	1881      	adds	r1, r0, r2
 800cdfe:	1ad2      	subs	r2, r2, r3
 800ce00:	42d3      	cmn	r3, r2
 800ce02:	d100      	bne.n	800ce06 <memmove+0x28>
 800ce04:	bd10      	pop	{r4, pc}
 800ce06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce0a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ce0e:	e7f7      	b.n	800ce00 <memmove+0x22>

0800ce10 <memset>:
 800ce10:	4603      	mov	r3, r0
 800ce12:	4402      	add	r2, r0
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d100      	bne.n	800ce1a <memset+0xa>
 800ce18:	4770      	bx	lr
 800ce1a:	f803 1b01 	strb.w	r1, [r3], #1
 800ce1e:	e7f9      	b.n	800ce14 <memset+0x4>

0800ce20 <_free_r>:
 800ce20:	b538      	push	{r3, r4, r5, lr}
 800ce22:	4605      	mov	r5, r0
 800ce24:	2900      	cmp	r1, #0
 800ce26:	d043      	beq.n	800ceb0 <_free_r+0x90>
 800ce28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce2c:	1f0c      	subs	r4, r1, #4
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	bfb8      	it	lt
 800ce32:	18e4      	addlt	r4, r4, r3
 800ce34:	f000 f8ee 	bl	800d014 <__malloc_lock>
 800ce38:	4a1e      	ldr	r2, [pc, #120]	; (800ceb4 <_free_r+0x94>)
 800ce3a:	6813      	ldr	r3, [r2, #0]
 800ce3c:	4610      	mov	r0, r2
 800ce3e:	b933      	cbnz	r3, 800ce4e <_free_r+0x2e>
 800ce40:	6063      	str	r3, [r4, #4]
 800ce42:	6014      	str	r4, [r2, #0]
 800ce44:	4628      	mov	r0, r5
 800ce46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce4a:	f000 b8e4 	b.w	800d016 <__malloc_unlock>
 800ce4e:	42a3      	cmp	r3, r4
 800ce50:	d90b      	bls.n	800ce6a <_free_r+0x4a>
 800ce52:	6821      	ldr	r1, [r4, #0]
 800ce54:	1862      	adds	r2, r4, r1
 800ce56:	4293      	cmp	r3, r2
 800ce58:	bf01      	itttt	eq
 800ce5a:	681a      	ldreq	r2, [r3, #0]
 800ce5c:	685b      	ldreq	r3, [r3, #4]
 800ce5e:	1852      	addeq	r2, r2, r1
 800ce60:	6022      	streq	r2, [r4, #0]
 800ce62:	6063      	str	r3, [r4, #4]
 800ce64:	6004      	str	r4, [r0, #0]
 800ce66:	e7ed      	b.n	800ce44 <_free_r+0x24>
 800ce68:	4613      	mov	r3, r2
 800ce6a:	685a      	ldr	r2, [r3, #4]
 800ce6c:	b10a      	cbz	r2, 800ce72 <_free_r+0x52>
 800ce6e:	42a2      	cmp	r2, r4
 800ce70:	d9fa      	bls.n	800ce68 <_free_r+0x48>
 800ce72:	6819      	ldr	r1, [r3, #0]
 800ce74:	1858      	adds	r0, r3, r1
 800ce76:	42a0      	cmp	r0, r4
 800ce78:	d10b      	bne.n	800ce92 <_free_r+0x72>
 800ce7a:	6820      	ldr	r0, [r4, #0]
 800ce7c:	4401      	add	r1, r0
 800ce7e:	1858      	adds	r0, r3, r1
 800ce80:	4282      	cmp	r2, r0
 800ce82:	6019      	str	r1, [r3, #0]
 800ce84:	d1de      	bne.n	800ce44 <_free_r+0x24>
 800ce86:	6810      	ldr	r0, [r2, #0]
 800ce88:	6852      	ldr	r2, [r2, #4]
 800ce8a:	4401      	add	r1, r0
 800ce8c:	6019      	str	r1, [r3, #0]
 800ce8e:	605a      	str	r2, [r3, #4]
 800ce90:	e7d8      	b.n	800ce44 <_free_r+0x24>
 800ce92:	d902      	bls.n	800ce9a <_free_r+0x7a>
 800ce94:	230c      	movs	r3, #12
 800ce96:	602b      	str	r3, [r5, #0]
 800ce98:	e7d4      	b.n	800ce44 <_free_r+0x24>
 800ce9a:	6820      	ldr	r0, [r4, #0]
 800ce9c:	1821      	adds	r1, r4, r0
 800ce9e:	428a      	cmp	r2, r1
 800cea0:	bf01      	itttt	eq
 800cea2:	6811      	ldreq	r1, [r2, #0]
 800cea4:	6852      	ldreq	r2, [r2, #4]
 800cea6:	1809      	addeq	r1, r1, r0
 800cea8:	6021      	streq	r1, [r4, #0]
 800ceaa:	6062      	str	r2, [r4, #4]
 800ceac:	605c      	str	r4, [r3, #4]
 800ceae:	e7c9      	b.n	800ce44 <_free_r+0x24>
 800ceb0:	bd38      	pop	{r3, r4, r5, pc}
 800ceb2:	bf00      	nop
 800ceb4:	20003c84 	.word	0x20003c84

0800ceb8 <_malloc_r>:
 800ceb8:	b570      	push	{r4, r5, r6, lr}
 800ceba:	1ccd      	adds	r5, r1, #3
 800cebc:	f025 0503 	bic.w	r5, r5, #3
 800cec0:	3508      	adds	r5, #8
 800cec2:	2d0c      	cmp	r5, #12
 800cec4:	bf38      	it	cc
 800cec6:	250c      	movcc	r5, #12
 800cec8:	2d00      	cmp	r5, #0
 800ceca:	4606      	mov	r6, r0
 800cecc:	db01      	blt.n	800ced2 <_malloc_r+0x1a>
 800cece:	42a9      	cmp	r1, r5
 800ced0:	d903      	bls.n	800ceda <_malloc_r+0x22>
 800ced2:	230c      	movs	r3, #12
 800ced4:	6033      	str	r3, [r6, #0]
 800ced6:	2000      	movs	r0, #0
 800ced8:	bd70      	pop	{r4, r5, r6, pc}
 800ceda:	f000 f89b 	bl	800d014 <__malloc_lock>
 800cede:	4a21      	ldr	r2, [pc, #132]	; (800cf64 <_malloc_r+0xac>)
 800cee0:	6814      	ldr	r4, [r2, #0]
 800cee2:	4621      	mov	r1, r4
 800cee4:	b991      	cbnz	r1, 800cf0c <_malloc_r+0x54>
 800cee6:	4c20      	ldr	r4, [pc, #128]	; (800cf68 <_malloc_r+0xb0>)
 800cee8:	6823      	ldr	r3, [r4, #0]
 800ceea:	b91b      	cbnz	r3, 800cef4 <_malloc_r+0x3c>
 800ceec:	4630      	mov	r0, r6
 800ceee:	f000 f83d 	bl	800cf6c <_sbrk_r>
 800cef2:	6020      	str	r0, [r4, #0]
 800cef4:	4629      	mov	r1, r5
 800cef6:	4630      	mov	r0, r6
 800cef8:	f000 f838 	bl	800cf6c <_sbrk_r>
 800cefc:	1c43      	adds	r3, r0, #1
 800cefe:	d124      	bne.n	800cf4a <_malloc_r+0x92>
 800cf00:	230c      	movs	r3, #12
 800cf02:	4630      	mov	r0, r6
 800cf04:	6033      	str	r3, [r6, #0]
 800cf06:	f000 f886 	bl	800d016 <__malloc_unlock>
 800cf0a:	e7e4      	b.n	800ced6 <_malloc_r+0x1e>
 800cf0c:	680b      	ldr	r3, [r1, #0]
 800cf0e:	1b5b      	subs	r3, r3, r5
 800cf10:	d418      	bmi.n	800cf44 <_malloc_r+0x8c>
 800cf12:	2b0b      	cmp	r3, #11
 800cf14:	d90f      	bls.n	800cf36 <_malloc_r+0x7e>
 800cf16:	600b      	str	r3, [r1, #0]
 800cf18:	18cc      	adds	r4, r1, r3
 800cf1a:	50cd      	str	r5, [r1, r3]
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	f000 f87a 	bl	800d016 <__malloc_unlock>
 800cf22:	f104 000b 	add.w	r0, r4, #11
 800cf26:	1d23      	adds	r3, r4, #4
 800cf28:	f020 0007 	bic.w	r0, r0, #7
 800cf2c:	1ac3      	subs	r3, r0, r3
 800cf2e:	d0d3      	beq.n	800ced8 <_malloc_r+0x20>
 800cf30:	425a      	negs	r2, r3
 800cf32:	50e2      	str	r2, [r4, r3]
 800cf34:	e7d0      	b.n	800ced8 <_malloc_r+0x20>
 800cf36:	684b      	ldr	r3, [r1, #4]
 800cf38:	428c      	cmp	r4, r1
 800cf3a:	bf16      	itet	ne
 800cf3c:	6063      	strne	r3, [r4, #4]
 800cf3e:	6013      	streq	r3, [r2, #0]
 800cf40:	460c      	movne	r4, r1
 800cf42:	e7eb      	b.n	800cf1c <_malloc_r+0x64>
 800cf44:	460c      	mov	r4, r1
 800cf46:	6849      	ldr	r1, [r1, #4]
 800cf48:	e7cc      	b.n	800cee4 <_malloc_r+0x2c>
 800cf4a:	1cc4      	adds	r4, r0, #3
 800cf4c:	f024 0403 	bic.w	r4, r4, #3
 800cf50:	42a0      	cmp	r0, r4
 800cf52:	d005      	beq.n	800cf60 <_malloc_r+0xa8>
 800cf54:	1a21      	subs	r1, r4, r0
 800cf56:	4630      	mov	r0, r6
 800cf58:	f000 f808 	bl	800cf6c <_sbrk_r>
 800cf5c:	3001      	adds	r0, #1
 800cf5e:	d0cf      	beq.n	800cf00 <_malloc_r+0x48>
 800cf60:	6025      	str	r5, [r4, #0]
 800cf62:	e7db      	b.n	800cf1c <_malloc_r+0x64>
 800cf64:	20003c84 	.word	0x20003c84
 800cf68:	20003c88 	.word	0x20003c88

0800cf6c <_sbrk_r>:
 800cf6c:	b538      	push	{r3, r4, r5, lr}
 800cf6e:	2300      	movs	r3, #0
 800cf70:	4c05      	ldr	r4, [pc, #20]	; (800cf88 <_sbrk_r+0x1c>)
 800cf72:	4605      	mov	r5, r0
 800cf74:	4608      	mov	r0, r1
 800cf76:	6023      	str	r3, [r4, #0]
 800cf78:	f7f9 ff12 	bl	8006da0 <_sbrk>
 800cf7c:	1c43      	adds	r3, r0, #1
 800cf7e:	d102      	bne.n	800cf86 <_sbrk_r+0x1a>
 800cf80:	6823      	ldr	r3, [r4, #0]
 800cf82:	b103      	cbz	r3, 800cf86 <_sbrk_r+0x1a>
 800cf84:	602b      	str	r3, [r5, #0]
 800cf86:	bd38      	pop	{r3, r4, r5, pc}
 800cf88:	20003ea0 	.word	0x20003ea0

0800cf8c <_raise_r>:
 800cf8c:	291f      	cmp	r1, #31
 800cf8e:	b538      	push	{r3, r4, r5, lr}
 800cf90:	4604      	mov	r4, r0
 800cf92:	460d      	mov	r5, r1
 800cf94:	d904      	bls.n	800cfa0 <_raise_r+0x14>
 800cf96:	2316      	movs	r3, #22
 800cf98:	6003      	str	r3, [r0, #0]
 800cf9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf9e:	bd38      	pop	{r3, r4, r5, pc}
 800cfa0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cfa2:	b112      	cbz	r2, 800cfaa <_raise_r+0x1e>
 800cfa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cfa8:	b94b      	cbnz	r3, 800cfbe <_raise_r+0x32>
 800cfaa:	4620      	mov	r0, r4
 800cfac:	f000 f830 	bl	800d010 <_getpid_r>
 800cfb0:	462a      	mov	r2, r5
 800cfb2:	4601      	mov	r1, r0
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfba:	f000 b817 	b.w	800cfec <_kill_r>
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d00a      	beq.n	800cfd8 <_raise_r+0x4c>
 800cfc2:	1c59      	adds	r1, r3, #1
 800cfc4:	d103      	bne.n	800cfce <_raise_r+0x42>
 800cfc6:	2316      	movs	r3, #22
 800cfc8:	6003      	str	r3, [r0, #0]
 800cfca:	2001      	movs	r0, #1
 800cfcc:	e7e7      	b.n	800cf9e <_raise_r+0x12>
 800cfce:	2400      	movs	r4, #0
 800cfd0:	4628      	mov	r0, r5
 800cfd2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cfd6:	4798      	blx	r3
 800cfd8:	2000      	movs	r0, #0
 800cfda:	e7e0      	b.n	800cf9e <_raise_r+0x12>

0800cfdc <raise>:
 800cfdc:	4b02      	ldr	r3, [pc, #8]	; (800cfe8 <raise+0xc>)
 800cfde:	4601      	mov	r1, r0
 800cfe0:	6818      	ldr	r0, [r3, #0]
 800cfe2:	f7ff bfd3 	b.w	800cf8c <_raise_r>
 800cfe6:	bf00      	nop
 800cfe8:	2000009c 	.word	0x2000009c

0800cfec <_kill_r>:
 800cfec:	b538      	push	{r3, r4, r5, lr}
 800cfee:	2300      	movs	r3, #0
 800cff0:	4c06      	ldr	r4, [pc, #24]	; (800d00c <_kill_r+0x20>)
 800cff2:	4605      	mov	r5, r0
 800cff4:	4608      	mov	r0, r1
 800cff6:	4611      	mov	r1, r2
 800cff8:	6023      	str	r3, [r4, #0]
 800cffa:	f7f9 fec3 	bl	8006d84 <_kill>
 800cffe:	1c43      	adds	r3, r0, #1
 800d000:	d102      	bne.n	800d008 <_kill_r+0x1c>
 800d002:	6823      	ldr	r3, [r4, #0]
 800d004:	b103      	cbz	r3, 800d008 <_kill_r+0x1c>
 800d006:	602b      	str	r3, [r5, #0]
 800d008:	bd38      	pop	{r3, r4, r5, pc}
 800d00a:	bf00      	nop
 800d00c:	20003ea0 	.word	0x20003ea0

0800d010 <_getpid_r>:
 800d010:	f7f9 beb6 	b.w	8006d80 <_getpid>

0800d014 <__malloc_lock>:
 800d014:	4770      	bx	lr

0800d016 <__malloc_unlock>:
 800d016:	4770      	bx	lr

0800d018 <_init>:
 800d018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d01a:	bf00      	nop
 800d01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d01e:	bc08      	pop	{r3}
 800d020:	469e      	mov	lr, r3
 800d022:	4770      	bx	lr

0800d024 <_fini>:
 800d024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d026:	bf00      	nop
 800d028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d02a:	bc08      	pop	{r3}
 800d02c:	469e      	mov	lr, r3
 800d02e:	4770      	bx	lr
