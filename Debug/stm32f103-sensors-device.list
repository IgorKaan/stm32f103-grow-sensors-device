
stm32f103-sensors-device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a710  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800a820  0800a820  0001a820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a940  0800a940  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  0800a940  0800a940  0001a940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a948  0800a948  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0800a948  0800a948  0001a948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  0800a95c  0800a95c  0001a95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800a968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e04  20000100  0800aa68  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20003f04  0800aa68  00023f04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004eb0b  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008635  00000000  00000000  0006ec34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001a7cb  00000000  00000000  00077269  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001cc8  00000000  00000000  00091a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002ff8  00000000  00000000  00093700  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000983b  00000000  00000000  000966f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001cc4d  00000000  00000000  0009ff33  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000ae0cf  00000000  00000000  000bcb80  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0016ac4f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006290  00000000  00000000  0016accc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000100 	.word	0x20000100
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a808 	.word	0x0800a808

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000104 	.word	0x20000104
 800014c:	0800a808 	.word	0x0800a808

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_ldivmod>:
 8000b08:	b97b      	cbnz	r3, 8000b2a <__aeabi_ldivmod+0x22>
 8000b0a:	b972      	cbnz	r2, 8000b2a <__aeabi_ldivmod+0x22>
 8000b0c:	2900      	cmp	r1, #0
 8000b0e:	bfbe      	ittt	lt
 8000b10:	2000      	movlt	r0, #0
 8000b12:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b16:	e006      	blt.n	8000b26 <__aeabi_ldivmod+0x1e>
 8000b18:	bf08      	it	eq
 8000b1a:	2800      	cmpeq	r0, #0
 8000b1c:	bf1c      	itt	ne
 8000b1e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b22:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b26:	f000 b9bf 	b.w	8000ea8 <__aeabi_idiv0>
 8000b2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b32:	2900      	cmp	r1, #0
 8000b34:	db09      	blt.n	8000b4a <__aeabi_ldivmod+0x42>
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	db1a      	blt.n	8000b70 <__aeabi_ldivmod+0x68>
 8000b3a:	f000 f84d 	bl	8000bd8 <__udivmoddi4>
 8000b3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b46:	b004      	add	sp, #16
 8000b48:	4770      	bx	lr
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	db1b      	blt.n	8000b8c <__aeabi_ldivmod+0x84>
 8000b54:	f000 f840 	bl	8000bd8 <__udivmoddi4>
 8000b58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b60:	b004      	add	sp, #16
 8000b62:	4240      	negs	r0, r0
 8000b64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b68:	4252      	negs	r2, r2
 8000b6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b6e:	4770      	bx	lr
 8000b70:	4252      	negs	r2, r2
 8000b72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b76:	f000 f82f 	bl	8000bd8 <__udivmoddi4>
 8000b7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b82:	b004      	add	sp, #16
 8000b84:	4240      	negs	r0, r0
 8000b86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8a:	4770      	bx	lr
 8000b8c:	4252      	negs	r2, r2
 8000b8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b92:	f000 f821 	bl	8000bd8 <__udivmoddi4>
 8000b96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b9e:	b004      	add	sp, #16
 8000ba0:	4252      	negs	r2, r2
 8000ba2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	468c      	mov	ip, r1
 8000bde:	4604      	mov	r4, r0
 8000be0:	9e08      	ldr	r6, [sp, #32]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0c03 	orr.w	ip, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	fbbc f7fe 	udiv	r7, ip, lr
 8000c0e:	fa1f f885 	uxth.w	r8, r5
 8000c12:	fb0e c317 	mls	r3, lr, r7, ip
 8000c16:	fb07 f908 	mul.w	r9, r7, r8
 8000c1a:	0c21      	lsrs	r1, r4, #16
 8000c1c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c20:	4599      	cmp	r9, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000c2a:	f080 811c 	bcs.w	8000e66 <__udivmoddi4+0x28e>
 8000c2e:	4599      	cmp	r9, r3
 8000c30:	f240 8119 	bls.w	8000e66 <__udivmoddi4+0x28e>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	eba3 0309 	sub.w	r3, r3, r9
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	fb00 f108 	mul.w	r1, r0, r8
 8000c48:	b2a4      	uxth	r4, r4
 8000c4a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4e:	42a1      	cmp	r1, r4
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	192c      	adds	r4, r5, r4
 8000c54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c58:	f080 8107 	bcs.w	8000e6a <__udivmoddi4+0x292>
 8000c5c:	42a1      	cmp	r1, r4
 8000c5e:	f240 8104 	bls.w	8000e6a <__udivmoddi4+0x292>
 8000c62:	3802      	subs	r0, #2
 8000c64:	442c      	add	r4, r5
 8000c66:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c6a:	2700      	movs	r7, #0
 8000c6c:	1a64      	subs	r4, r4, r1
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	2300      	movs	r3, #0
 8000c72:	40d4      	lsrs	r4, r2
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ec 	beq.w	8000e60 <__udivmoddi4+0x288>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d148      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fb 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	469c      	mov	ip, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4c00 	strd	r4, ip, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	2701      	movs	r7, #1
 8000ccc:	1b49      	subs	r1, r1, r5
 8000cce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000cd2:	fa1f f985 	uxth.w	r9, r5
 8000cd6:	fbb1 fef8 	udiv	lr, r1, r8
 8000cda:	fb08 111e 	mls	r1, r8, lr, r1
 8000cde:	fb09 f00e 	mul.w	r0, r9, lr
 8000ce2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000ce6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000cea:	4298      	cmp	r0, r3
 8000cec:	d907      	bls.n	8000cfe <__udivmoddi4+0x126>
 8000cee:	18eb      	adds	r3, r5, r3
 8000cf0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000cf4:	d202      	bcs.n	8000cfc <__udivmoddi4+0x124>
 8000cf6:	4298      	cmp	r0, r3
 8000cf8:	f200 80cd 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000cfc:	468e      	mov	lr, r1
 8000cfe:	1a1b      	subs	r3, r3, r0
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	fb09 f900 	mul.w	r9, r9, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d12:	45a1      	cmp	r9, r4
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d16:	192c      	adds	r4, r5, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a1      	cmp	r9, r4
 8000d20:	f200 80b6 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000d24:	4618      	mov	r0, r3
 8000d26:	eba4 0409 	sub.w	r4, r4, r9
 8000d2a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000d2e:	e79e      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d30:	f1c7 0520 	rsb	r5, r7, #32
 8000d34:	40bb      	lsls	r3, r7
 8000d36:	fa22 fc05 	lsr.w	ip, r2, r5
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa21 f405 	lsr.w	r4, r1, r5
 8000d42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d46:	fbb4 f9fe 	udiv	r9, r4, lr
 8000d4a:	fa1f f88c 	uxth.w	r8, ip
 8000d4e:	fb0e 4419 	mls	r4, lr, r9, r4
 8000d52:	fa20 f305 	lsr.w	r3, r0, r5
 8000d56:	40b9      	lsls	r1, r7
 8000d58:	fb09 fa08 	mul.w	sl, r9, r8
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	0c0b      	lsrs	r3, r1, #16
 8000d60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d64:	45a2      	cmp	sl, r4
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f307 	lsl.w	r3, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	45a2      	cmp	sl, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	eba4 040a 	sub.w	r4, r4, sl
 8000d8c:	fbb4 f0fe 	udiv	r0, r4, lr
 8000d90:	fb0e 4410 	mls	r4, lr, r0, r4
 8000d94:	fb00 fa08 	mul.w	sl, r0, r8
 8000d98:	b289      	uxth	r1, r1
 8000d9a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000d9e:	45a2      	cmp	sl, r4
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x1dc>
 8000da2:	eb1c 0404 	adds.w	r4, ip, r4
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000daa:	d26b      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d969      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000db0:	3802      	subs	r0, #2
 8000db2:	4464      	add	r4, ip
 8000db4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db8:	fba0 8902 	umull	r8, r9, r0, r2
 8000dbc:	eba4 040a 	sub.w	r4, r4, sl
 8000dc0:	454c      	cmp	r4, r9
 8000dc2:	4641      	mov	r1, r8
 8000dc4:	46ce      	mov	lr, r9
 8000dc6:	d354      	bcc.n	8000e72 <__udivmoddi4+0x29a>
 8000dc8:	d051      	beq.n	8000e6e <__udivmoddi4+0x296>
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	d069      	beq.n	8000ea2 <__udivmoddi4+0x2ca>
 8000dce:	1a5a      	subs	r2, r3, r1
 8000dd0:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd4:	fa04 f505 	lsl.w	r5, r4, r5
 8000dd8:	fa22 f307 	lsr.w	r3, r2, r7
 8000ddc:	40fc      	lsrs	r4, r7
 8000dde:	431d      	orrs	r5, r3
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	4095      	lsls	r5, r2
 8000dea:	f1c2 0320 	rsb	r3, r2, #32
 8000dee:	fa21 f003 	lsr.w	r0, r1, r3
 8000df2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000df6:	fbb0 f7f8 	udiv	r7, r0, r8
 8000dfa:	fa1f f985 	uxth.w	r9, r5
 8000dfe:	fb08 0017 	mls	r0, r8, r7, r0
 8000e02:	fa24 f303 	lsr.w	r3, r4, r3
 8000e06:	4091      	lsls	r1, r2
 8000e08:	fb07 fc09 	mul.w	ip, r7, r9
 8000e0c:	430b      	orrs	r3, r1
 8000e0e:	0c19      	lsrs	r1, r3, #16
 8000e10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e14:	458c      	cmp	ip, r1
 8000e16:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x254>
 8000e1c:	1869      	adds	r1, r5, r1
 8000e1e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000e22:	d231      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e24:	458c      	cmp	ip, r1
 8000e26:	d92f      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	3f02      	subs	r7, #2
 8000e2a:	4429      	add	r1, r5
 8000e2c:	eba1 010c 	sub.w	r1, r1, ip
 8000e30:	fbb1 f0f8 	udiv	r0, r1, r8
 8000e34:	fb08 1c10 	mls	ip, r8, r0, r1
 8000e38:	fb00 fe09 	mul.w	lr, r0, r9
 8000e3c:	b299      	uxth	r1, r3
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	458e      	cmp	lr, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e4c:	d218      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e4e:	458e      	cmp	lr, r1
 8000e50:	d916      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	eba1 010e 	sub.w	r1, r1, lr
 8000e5a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5e:	e73a      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e60:	4637      	mov	r7, r6
 8000e62:	4630      	mov	r0, r6
 8000e64:	e708      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e66:	460f      	mov	r7, r1
 8000e68:	e6e6      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	e6fb      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e6e:	4543      	cmp	r3, r8
 8000e70:	d2ab      	bcs.n	8000dca <__udivmoddi4+0x1f2>
 8000e72:	ebb8 0102 	subs.w	r1, r8, r2
 8000e76:	eb69 020c 	sbc.w	r2, r9, ip
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	4696      	mov	lr, r2
 8000e7e:	e7a4      	b.n	8000dca <__udivmoddi4+0x1f2>
 8000e80:	4618      	mov	r0, r3
 8000e82:	e7e8      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e795      	b.n	8000db4 <__udivmoddi4+0x1dc>
 8000e88:	4607      	mov	r7, r0
 8000e8a:	e7cf      	b.n	8000e2c <__udivmoddi4+0x254>
 8000e8c:	4681      	mov	r9, r0
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3802      	subs	r0, #2
 8000e92:	442c      	add	r4, r5
 8000e94:	e747      	b.n	8000d26 <__udivmoddi4+0x14e>
 8000e96:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9a:	442b      	add	r3, r5
 8000e9c:	e72f      	b.n	8000cfe <__udivmoddi4+0x126>
 8000e9e:	4638      	mov	r0, r7
 8000ea0:	e707      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea2:	4637      	mov	r7, r6
 8000ea4:	e6e8      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <_ZN8RegisterC1Ethh>:
    if (value > max_value)
        return max_value;
    return value;
}

Register::Register(uint16_t address, uint8_t bit_count, uint8_t bit_bias) {
 8000eac:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (value < min_value)
 8000eae:	b1c2      	cbz	r2, 8000ee2 <_ZN8RegisterC1Ethh+0x36>
 8000eb0:	2a08      	cmp	r2, #8
 8000eb2:	bf28      	it	cs
 8000eb4:	2208      	movcs	r2, #8
    uint8_t bit_in_reg = 8;
    bit_count = value_range(bit_count, 1, bit_in_reg);
    bit_bias = value_range(bit_bias, 0, (bit_in_reg - bit_count));
 8000eb6:	2500      	movs	r5, #0
 8000eb8:	f1c2 0408 	rsb	r4, r2, #8
 8000ebc:	b2e4      	uxtb	r4, r4
 8000ebe:	42a3      	cmp	r3, r4
 8000ec0:	bf28      	it	cs
 8000ec2:	4623      	movcs	r3, r4
    uint32_t mask = 0x00;
 8000ec4:	462c      	mov	r4, r5
    for (uint8_t i = 0; i < bit_in_reg; ++i) {
        if (i < bit_count)
            mask = (mask << 1) + 1;
        else
            if (i < (bit_count + bit_bias))
 8000ec6:	18d6      	adds	r6, r2, r3
        if (i < bit_count)
 8000ec8:	b2ef      	uxtb	r7, r5
 8000eca:	42ba      	cmp	r2, r7
 8000ecc:	d90b      	bls.n	8000ee6 <_ZN8RegisterC1Ethh+0x3a>
            mask = (mask << 1) + 1;
 8000ece:	0064      	lsls	r4, r4, #1
 8000ed0:	3401      	adds	r4, #1
 8000ed2:	3501      	adds	r5, #1
    for (uint8_t i = 0; i < bit_in_reg; ++i) {
 8000ed4:	2d08      	cmp	r5, #8
 8000ed6:	d1f7      	bne.n	8000ec8 <_ZN8RegisterC1Ethh+0x1c>
                mask <<= 1;
    }
    _address = address;
 8000ed8:	8001      	strh	r1, [r0, #0]
    _bit_count = bit_count;
 8000eda:	7082      	strb	r2, [r0, #2]
    _bit_bias = bit_bias;
 8000edc:	70c3      	strb	r3, [r0, #3]
    _mask = mask;
 8000ede:	6044      	str	r4, [r0, #4]
}
 8000ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return min_value;
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	e7e7      	b.n	8000eb6 <_ZN8RegisterC1Ethh+0xa>
            if (i < (bit_count + bit_bias))
 8000ee6:	42ae      	cmp	r6, r5
                mask <<= 1;
 8000ee8:	bfc8      	it	gt
 8000eea:	0064      	lslgt	r4, r4, #1
 8000eec:	e7f1      	b.n	8000ed2 <_ZN8RegisterC1Ethh+0x26>

08000eee <_ZN8Register7addressEv>:

uint16_t Register::address() {
    return _address;
}
 8000eee:	8800      	ldrh	r0, [r0, #0]
 8000ef0:	4770      	bx	lr

08000ef2 <_ZN8Register4maskEv>:
uint8_t Register::bit_bias() {
    return _bit_bias;
}
uint32_t Register::mask() {
    return _mask;
}
 8000ef2:	6840      	ldr	r0, [r0, #4]
 8000ef4:	4770      	bx	lr
	...

08000ef8 <_ZN13Address_field18init_address_fieldEP8RegisterhbcmmPmm>:
                             uint32_t max_value, uint32_t *reserved_value, uint32_t reserv_count) {
    init_address_field(registers, reg_count, reg_revers, mode, min_value, max_value, reserved_value, reserv_count);
}

bool Address_field::init_address_field(Register *registers, uint8_t reg_count, bool reg_revers, char mode, uint32_t min_value,
                                       uint32_t max_value, uint32_t *reserved_value, uint32_t reserv_count) {
 8000ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000efa:	f89d c014 	ldrb.w	ip, [sp, #20]
 8000efe:	4605      	mov	r5, r0
 8000f00:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    if ((mode != 'r') && (mode != 'w') && (mode != 'c'))
 8000f04:	f1ac 0463 	sub.w	r4, ip, #99	; 0x63
 8000f08:	b2e0      	uxtb	r0, r4
 8000f0a:	2814      	cmp	r0, #20
 8000f0c:	d837      	bhi.n	8000f7e <_ZN13Address_field18init_address_fieldEP8RegisterhbcmmPmm+0x86>
 8000f0e:	4c1d      	ldr	r4, [pc, #116]	; (8000f84 <_ZN13Address_field18init_address_fieldEP8RegisterhbcmmPmm+0x8c>)
 8000f10:	40c4      	lsrs	r4, r0
 8000f12:	43e4      	mvns	r4, r4
 8000f14:	f014 0001 	ands.w	r0, r4, #1
 8000f18:	d130      	bne.n	8000f7c <_ZN13Address_field18init_address_fieldEP8RegisterhbcmmPmm+0x84>
    uint8_t bit_count = 0;
    uint32_t value = 0;
    _mode = mode;
    _registers = registers;
    _reg_count = reg_count;
    _reg_revers = reg_revers;
 8000f1a:	716b      	strb	r3, [r5, #5]
    _reserved_value = reserved_value;
 8000f1c:	9b08      	ldr	r3, [sp, #32]
    uint8_t bit_count = 0;
 8000f1e:	4604      	mov	r4, r0
    _reserved_value = reserved_value;
 8000f20:	612b      	str	r3, [r5, #16]
    _reserv_count = reserv_count;
 8000f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
    _mode = mode;
 8000f24:	f885 c018 	strb.w	ip, [r5, #24]
    _reserv_count = reserv_count;
 8000f28:	616b      	str	r3, [r5, #20]
    _max_address = 0;
    for (int i = 0; i < _reg_count; ++i) {
 8000f2a:	4603      	mov	r3, r0
    _registers = registers;
 8000f2c:	6029      	str	r1, [r5, #0]
    _reg_count = reg_count;
 8000f2e:	712a      	strb	r2, [r5, #4]
    _max_address = 0;
 8000f30:	80e8      	strh	r0, [r5, #6]
    for (int i = 0; i < _reg_count; ++i) {
 8000f32:	429a      	cmp	r2, r3
 8000f34:	dd0f      	ble.n	8000f56 <_ZN13Address_field18init_address_fieldEP8RegisterhbcmmPmm+0x5e>
    return _bit_count;
 8000f36:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
        bit_count += _registers[i].bit_count();
 8000f3a:	f89c c002 	ldrb.w	ip, [ip, #2]
        if (_max_address < _registers[i].address())
 8000f3e:	f8b5 e006 	ldrh.w	lr, [r5, #6]
        bit_count += _registers[i].bit_count();
 8000f42:	4464      	add	r4, ip
    return _address;
 8000f44:	f831 c033 	ldrh.w	ip, [r1, r3, lsl #3]
        bit_count += _registers[i].bit_count();
 8000f48:	b2e4      	uxtb	r4, r4
        if (_max_address < _registers[i].address())
 8000f4a:	45e6      	cmp	lr, ip
            _max_address = _registers[i].address();
 8000f4c:	bf38      	it	cc
 8000f4e:	f8a5 c006 	strhcc.w	ip, [r5, #6]
    for (int i = 0; i < _reg_count; ++i) {
 8000f52:	3301      	adds	r3, #1
 8000f54:	e7ed      	b.n	8000f32 <_ZN13Address_field18init_address_fieldEP8RegisterhbcmmPmm+0x3a>
    }
    for (int i = 0; i < bit_count; ++i)
 8000f56:	2200      	movs	r2, #0
    uint32_t value = 0;
 8000f58:	4613      	mov	r3, r2
    for (int i = 0; i < bit_count; ++i)
 8000f5a:	4294      	cmp	r4, r2
 8000f5c:	dd03      	ble.n	8000f66 <_ZN13Address_field18init_address_fieldEP8RegisterhbcmmPmm+0x6e>
        value = (value << 1) + 1;
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	3301      	adds	r3, #1
    for (int i = 0; i < bit_count; ++i)
 8000f62:	3201      	adds	r2, #1
 8000f64:	e7f9      	b.n	8000f5a <_ZN13Address_field18init_address_fieldEP8RegisterhbcmmPmm+0x62>
    _min_value = value_range(min_value, 0, value);
 8000f66:	429e      	cmp	r6, r3
 8000f68:	bf94      	ite	ls
 8000f6a:	60ae      	strls	r6, [r5, #8]
 8000f6c:	60ab      	strhi	r3, [r5, #8]
    if (value < min_value)
 8000f6e:	42be      	cmp	r6, r7
 8000f70:	d803      	bhi.n	8000f7a <_ZN13Address_field18init_address_fieldEP8RegisterhbcmmPmm+0x82>
 8000f72:	429f      	cmp	r7, r3
 8000f74:	463e      	mov	r6, r7
 8000f76:	bf28      	it	cs
 8000f78:	461e      	movcs	r6, r3
    _max_value = value_range(max_value, min_value, value);
 8000f7a:	60ee      	str	r6, [r5, #12]
    return false;
}
 8000f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return true;
 8000f7e:	2001      	movs	r0, #1
 8000f80:	e7fc      	b.n	8000f7c <_ZN13Address_field18init_address_fieldEP8RegisterhbcmmPmm+0x84>
 8000f82:	bf00      	nop
 8000f84:	00108001 	.word	0x00108001

08000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>:
Address_field::Address_field(Register *registers, uint8_t reg_count, bool reg_revers, char mode, uint32_t min_value,
 8000f88:	b530      	push	{r4, r5, lr}
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	b087      	sub	sp, #28
    init_address_field(registers, reg_count, reg_revers, mode, min_value, max_value, reserved_value, reserv_count);
 8000f8e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8000f90:	9504      	str	r5, [sp, #16]
 8000f92:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8000f94:	9503      	str	r5, [sp, #12]
 8000f96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000f98:	9502      	str	r5, [sp, #8]
 8000f9a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000f9c:	9501      	str	r5, [sp, #4]
 8000f9e:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8000fa2:	9500      	str	r5, [sp, #0]
 8000fa4:	f7ff ffa8 	bl	8000ef8 <_ZN13Address_field18init_address_fieldEP8RegisterhbcmmPmm>
}
 8000fa8:	4620      	mov	r0, r4
 8000faa:	b007      	add	sp, #28
 8000fac:	bd30      	pop	{r4, r5, pc}

08000fae <_ZN13Address_field9get_valueEPhi>:

uint32_t Address_field::get_value(uint8_t *register_value, int register_count) {
    if (register_count < (_max_address + 1))
 8000fae:	88c3      	ldrh	r3, [r0, #6]
uint32_t Address_field::get_value(uint8_t *register_value, int register_count) {
 8000fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (register_count < (_max_address + 1))
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	da2a      	bge.n	800100c <_ZN13Address_field9get_valueEPhi+0x5e>
        return -1;
    uint32_t value = 0;
    if(_reg_revers) {
 8000fb6:	7942      	ldrb	r2, [r0, #5]
 8000fb8:	7905      	ldrb	r5, [r0, #4]
 8000fba:	b192      	cbz	r2, 8000fe2 <_ZN13Address_field9get_valueEPhi+0x34>
        for (int i = 0; i < _reg_count; ++i) {
 8000fbc:	2200      	movs	r2, #0
    uint32_t value = 0;
 8000fbe:	4613      	mov	r3, r2
        for (int i = 0; i < _reg_count; ++i) {
 8000fc0:	42aa      	cmp	r2, r5
 8000fc2:	da25      	bge.n	8001010 <_ZN13Address_field9get_valueEPhi+0x62>
            value <<= _registers[i].bit_count();
 8000fc4:	6804      	ldr	r4, [r0, #0]
 8000fc6:	eb04 06c2 	add.w	r6, r4, r2, lsl #3
 8000fca:	78b7      	ldrb	r7, [r6, #2]
            value |= (register_value[_registers[i].address()] & _registers[i].mask()) >> _registers[i].bit_bias();
 8000fcc:	f834 4032 	ldrh.w	r4, [r4, r2, lsl #3]
            value <<= _registers[i].bit_count();
 8000fd0:	40bb      	lsls	r3, r7
            value |= (register_value[_registers[i].address()] & _registers[i].mask()) >> _registers[i].bit_bias();
 8000fd2:	5d0c      	ldrb	r4, [r1, r4]
 8000fd4:	6877      	ldr	r7, [r6, #4]
 8000fd6:	78f6      	ldrb	r6, [r6, #3]
 8000fd8:	403c      	ands	r4, r7
 8000fda:	40f4      	lsrs	r4, r6
 8000fdc:	4323      	orrs	r3, r4
        for (int i = 0; i < _reg_count; ++i) {
 8000fde:	3201      	adds	r2, #1
 8000fe0:	e7ee      	b.n	8000fc0 <_ZN13Address_field9get_valueEPhi+0x12>
    uint32_t value = 0;
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	3201      	adds	r2, #1
 8000fe6:	1aac      	subs	r4, r5, r2
        }
    }
    else {
        for (int i = (_reg_count - 1); i >= 0; --i) {
 8000fe8:	1c66      	adds	r6, r4, #1
 8000fea:	d011      	beq.n	8001010 <_ZN13Address_field9get_valueEPhi+0x62>
            value <<= _registers[i].bit_count();
 8000fec:	6807      	ldr	r7, [r0, #0]
 8000fee:	eb07 06c4 	add.w	r6, r7, r4, lsl #3
            value |= (register_value[_registers[i].address()] & _registers[i].mask()) >> _registers[i].bit_bias();
 8000ff2:	f837 4034 	ldrh.w	r4, [r7, r4, lsl #3]
 8000ff6:	6877      	ldr	r7, [r6, #4]
 8000ff8:	5d0c      	ldrb	r4, [r1, r4]
            value <<= _registers[i].bit_count();
 8000ffa:	f896 c002 	ldrb.w	ip, [r6, #2]
            value |= (register_value[_registers[i].address()] & _registers[i].mask()) >> _registers[i].bit_bias();
 8000ffe:	78f6      	ldrb	r6, [r6, #3]
 8001000:	403c      	ands	r4, r7
            value <<= _registers[i].bit_count();
 8001002:	fa03 f30c 	lsl.w	r3, r3, ip
            value |= (register_value[_registers[i].address()] & _registers[i].mask()) >> _registers[i].bit_bias();
 8001006:	40f4      	lsrs	r4, r6
 8001008:	4323      	orrs	r3, r4
        for (int i = (_reg_count - 1); i >= 0; --i) {
 800100a:	e7eb      	b.n	8000fe4 <_ZN13Address_field9get_valueEPhi+0x36>
        return -1;
 800100c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        }
    }
    return value;
}
 8001010:	4618      	mov	r0, r3
 8001012:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001014 <_ZN13Address_field9set_valueEmPhi>:
bool Address_field::set_value(uint32_t value, uint8_t *register_value, int register_count) {
 8001014:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ((register_count < (_max_address + 1)) || (_mode == 'r') ||
 8001016:	88c4      	ldrh	r4, [r0, #6]
 8001018:	429c      	cmp	r4, r3
 800101a:	da62      	bge.n	80010e2 <_ZN13Address_field9set_valueEmPhi+0xce>
 800101c:	7e03      	ldrb	r3, [r0, #24]
 800101e:	2b72      	cmp	r3, #114	; 0x72
 8001020:	d05f      	beq.n	80010e2 <_ZN13Address_field9set_valueEmPhi+0xce>
 8001022:	6883      	ldr	r3, [r0, #8]
 8001024:	428b      	cmp	r3, r1
 8001026:	d85c      	bhi.n	80010e2 <_ZN13Address_field9set_valueEmPhi+0xce>
                (value < _min_value) || (value > _max_value))
 8001028:	68c3      	ldr	r3, [r0, #12]
 800102a:	428b      	cmp	r3, r1
 800102c:	d359      	bcc.n	80010e2 <_ZN13Address_field9set_valueEmPhi+0xce>
        return true;
    for (int i = 0; i < (int)_reserv_count; ++i)
 800102e:	2300      	movs	r3, #0
 8001030:	6944      	ldr	r4, [r0, #20]
 8001032:	429c      	cmp	r4, r3
 8001034:	dd06      	ble.n	8001044 <_ZN13Address_field9set_valueEmPhi+0x30>
        if (value == _reserved_value[i])
 8001036:	6905      	ldr	r5, [r0, #16]
 8001038:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 800103c:	428d      	cmp	r5, r1
 800103e:	d050      	beq.n	80010e2 <_ZN13Address_field9set_valueEmPhi+0xce>
    for (int i = 0; i < (int)_reserv_count; ++i)
 8001040:	3301      	adds	r3, #1
 8001042:	e7f6      	b.n	8001032 <_ZN13Address_field9set_valueEmPhi+0x1e>
            return true;
    if(_reg_revers) {
 8001044:	7943      	ldrb	r3, [r0, #5]
 8001046:	b36b      	cbz	r3, 80010a4 <_ZN13Address_field9set_valueEmPhi+0x90>
 8001048:	2600      	movs	r6, #0
 800104a:	7907      	ldrb	r7, [r0, #4]
 800104c:	3601      	adds	r6, #1
 800104e:	1bbc      	subs	r4, r7, r6
        for (int i = (_reg_count - 1); i >= 0; --i) {
 8001050:	1c63      	adds	r3, r4, #1
 8001052:	d101      	bne.n	8001058 <_ZN13Address_field9set_valueEmPhi+0x44>
            register_value[_registers[i].address()] &= ~_registers[i].mask();
            register_value[_registers[i].address()] |= (value & (_registers[i].mask() >> _registers[i].bit_bias())) << _registers[i].bit_bias();
            value >>= _registers[i].bit_count();
        }
    }
    return false;
 8001054:	2000      	movs	r0, #0
}
 8001056:	bdf0      	pop	{r4, r5, r6, r7, pc}
            register_value[_registers[i].address()] &= ~_registers[i].mask();
 8001058:	6803      	ldr	r3, [r0, #0]
 800105a:	00e5      	lsls	r5, r4, #3
 800105c:	f833 c034 	ldrh.w	ip, [r3, r4, lsl #3]
 8001060:	eb03 0e05 	add.w	lr, r3, r5
 8001064:	f8de e004 	ldr.w	lr, [lr, #4]
 8001068:	f812 300c 	ldrb.w	r3, [r2, ip]
 800106c:	ea23 030e 	bic.w	r3, r3, lr
 8001070:	f802 300c 	strb.w	r3, [r2, ip]
            register_value[_registers[i].address()] |= (value & (_registers[i].mask() >> _registers[i].bit_bias())) << _registers[i].bit_bias();
 8001074:	f8d0 e000 	ldr.w	lr, [r0]
 8001078:	eb0e 0305 	add.w	r3, lr, r5
 800107c:	f893 c003 	ldrb.w	ip, [r3, #3]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f83e 4034 	ldrh.w	r4, [lr, r4, lsl #3]
 8001086:	fa23 f30c 	lsr.w	r3, r3, ip
 800108a:	400b      	ands	r3, r1
 800108c:	fa03 f30c 	lsl.w	r3, r3, ip
 8001090:	f812 c004 	ldrb.w	ip, [r2, r4]
 8001094:	ea43 030c 	orr.w	r3, r3, ip
 8001098:	5513      	strb	r3, [r2, r4]
    return _bit_count;
 800109a:	6803      	ldr	r3, [r0, #0]
 800109c:	442b      	add	r3, r5
            value >>= _registers[i].bit_count();
 800109e:	789b      	ldrb	r3, [r3, #2]
 80010a0:	40d9      	lsrs	r1, r3
        for (int i = (_reg_count - 1); i >= 0; --i) {
 80010a2:	e7d3      	b.n	800104c <_ZN13Address_field9set_valueEmPhi+0x38>
        for (int i = 0; i < _reg_count; ++i) {
 80010a4:	7904      	ldrb	r4, [r0, #4]
 80010a6:	429c      	cmp	r4, r3
 80010a8:	ddd4      	ble.n	8001054 <_ZN13Address_field9set_valueEmPhi+0x40>
            register_value[_registers[i].address()] &= ~_registers[i].mask();
 80010aa:	6804      	ldr	r4, [r0, #0]
 80010ac:	00dd      	lsls	r5, r3, #3
 80010ae:	f834 6033 	ldrh.w	r6, [r4, r3, lsl #3]
 80010b2:	1967      	adds	r7, r4, r5
 80010b4:	687f      	ldr	r7, [r7, #4]
 80010b6:	5d94      	ldrb	r4, [r2, r6]
 80010b8:	ea24 0407 	bic.w	r4, r4, r7
 80010bc:	5594      	strb	r4, [r2, r6]
            register_value[_registers[i].address()] |= (value & (_registers[i].mask() >> _registers[i].bit_bias())) << _registers[i].bit_bias();
 80010be:	6806      	ldr	r6, [r0, #0]
 80010c0:	1974      	adds	r4, r6, r5
 80010c2:	78e7      	ldrb	r7, [r4, #3]
 80010c4:	6864      	ldr	r4, [r4, #4]
 80010c6:	f836 6033 	ldrh.w	r6, [r6, r3, lsl #3]
 80010ca:	40fc      	lsrs	r4, r7
 80010cc:	400c      	ands	r4, r1
 80010ce:	40bc      	lsls	r4, r7
 80010d0:	5d97      	ldrb	r7, [r2, r6]
        for (int i = 0; i < _reg_count; ++i) {
 80010d2:	3301      	adds	r3, #1
            register_value[_registers[i].address()] |= (value & (_registers[i].mask() >> _registers[i].bit_bias())) << _registers[i].bit_bias();
 80010d4:	433c      	orrs	r4, r7
 80010d6:	5594      	strb	r4, [r2, r6]
    return _bit_count;
 80010d8:	6804      	ldr	r4, [r0, #0]
 80010da:	442c      	add	r4, r5
            value >>= _registers[i].bit_count();
 80010dc:	78a4      	ldrb	r4, [r4, #2]
 80010de:	40e1      	lsrs	r1, r4
        for (int i = 0; i < _reg_count; ++i) {
 80010e0:	e7e0      	b.n	80010a4 <_ZN13Address_field9set_valueEmPhi+0x90>
        return true;
 80010e2:	2001      	movs	r0, #1
 80010e4:	e7b7      	b.n	8001056 <_ZN13Address_field9set_valueEmPhi+0x42>

080010e6 <_ZN13Address_field13get_registersEv>:

Register *Address_field::get_registers() {
    return _registers;
}
 80010e6:	6800      	ldr	r0, [r0, #0]
 80010e8:	4770      	bx	lr

080010ea <_ZN13Address_field13get_reg_countEv>:
uint8_t Address_field::get_reg_count() {
    return _reg_count;
}
 80010ea:	7900      	ldrb	r0, [r0, #4]
 80010ec:	4770      	bx	lr

080010ee <_ZN10LoRa_classD1Ev>:
	init(nullptr);
}
LoRa_class::LoRa_class(SPI_HandleTypeDef *spi) {
	init(spi);
}
LoRa_class::~LoRa_class() {
 80010ee:	b510      	push	{r4, lr}
 80010f0:	4604      	mov	r4, r0
    if(_spi != nullptr)
 80010f2:	6800      	ldr	r0, [r0, #0]
 80010f4:	b110      	cbz	r0, 80010fc <_ZN10LoRa_classD1Ev+0xe>
        delete _spi;
 80010f6:	2158      	movs	r1, #88	; 0x58
 80010f8:	f008 f9d2 	bl	80094a0 <_ZdlPvj>
LoRa_class::~LoRa_class() {
 80010fc:	f504 7003 	add.w	r0, r4, #524	; 0x20c
 8001100:	f000 fc49 	bl	8001996 <_ZN11LoRa_packetD1Ev>
 8001104:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8001108:	f000 fc4d 	bl	80019a6 <_ZN13LoRa_registerD1Ev>
}
 800110c:	4620      	mov	r0, r4
 800110e:	bd10      	pop	{r4, pc}

08001110 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef>:

void LoRa_class::init(SPI_HandleTypeDef *spi) {
	_reset_pin = LORA_RESET_Pin;
 8001110:	f44f 6300 	mov.w	r3, #2048	; 0x800
void LoRa_class::init(SPI_HandleTypeDef *spi) {
 8001114:	b4d0      	push	{r4, r6, r7}
	_reset_pin = LORA_RESET_Pin;
 8001116:	8083      	strh	r3, [r0, #4]
#else
	_dio3_pin = 0;
	_dio3_port = 0;
#endif
	_spi = spi;
	_frequency = 0;
 8001118:	2600      	movs	r6, #0
	_reset_port = LORA_RESET_GPIO_Port;
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef+0x3c>)
	_frequency = 0;
 800111c:	2700      	movs	r7, #0
	_dio0_pin = 0;
 800111e:	2400      	movs	r4, #0
	_reset_port = LORA_RESET_GPIO_Port;
 8001120:	6083      	str	r3, [r0, #8]
	_nss_pin = LORA_NSS_Pin;
 8001122:	2310      	movs	r3, #16
	_frequency = 0;
 8001124:	e9c0 670c 	strd	r6, r7, [r0, #48]	; 0x30
	_nss_port = LORA_NSS_GPIO_Port;
 8001128:	4a09      	ldr	r2, [pc, #36]	; (8001150 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef+0x40>)
	_nss_pin = LORA_NSS_Pin;
 800112a:	8183      	strh	r3, [r0, #12]
	_nss_port = LORA_NSS_GPIO_Port;
 800112c:	6102      	str	r2, [r0, #16]
	_dio0_pin = 0;
 800112e:	8284      	strh	r4, [r0, #20]
	_dio0_port = 0;
 8001130:	6184      	str	r4, [r0, #24]
	_dio1_pin = 0;
 8001132:	8384      	strh	r4, [r0, #28]
	_dio1_port = 0;
 8001134:	6204      	str	r4, [r0, #32]
	_dio3_pin = 0;
 8001136:	8484      	strh	r4, [r0, #36]	; 0x24
	_dio3_port = 0;
 8001138:	6284      	str	r4, [r0, #40]	; 0x28
	_spi = spi;
 800113a:	6001      	str	r1, [r0, #0]
	_FifoTxBaseAddr = 0;
 800113c:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
	_packet_length = 0;
 8001140:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
	_reg_field.init(spi, _nss_port, _nss_pin);
}
 8001144:	bcd0      	pop	{r4, r6, r7}
	_reg_field.init(spi, _nss_port, _nss_pin);
 8001146:	303c      	adds	r0, #60	; 0x3c
 8001148:	f000 bc2e 	b.w	80019a8 <_ZN13LoRa_register4initEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 800114c:	40010c00 	.word	0x40010c00
 8001150:	40010800 	.word	0x40010800

08001154 <_ZN10LoRa_classC1Ev>:
LoRa_class::LoRa_class(/* args */) {
 8001154:	b510      	push	{r4, lr}
 8001156:	4604      	mov	r4, r0
 8001158:	303c      	adds	r0, #60	; 0x3c
 800115a:	f000 fc37 	bl	80019cc <_ZN13LoRa_registerC1Ev>
 800115e:	f504 7003 	add.w	r0, r4, #524	; 0x20c
 8001162:	f000 fc11 	bl	8001988 <_ZN11LoRa_packetC1Ev>
	init(nullptr);
 8001166:	4620      	mov	r0, r4
 8001168:	2100      	movs	r1, #0
 800116a:	f7ff ffd1 	bl	8001110 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef>
}
 800116e:	4620      	mov	r0, r4
 8001170:	bd10      	pop	{r4, pc}

08001172 <_ZN10LoRa_class9field_setE13Address_fieldmb>:

uint8_t LoRa_class::field_set(Address_field field, uint32_t value, bool write) {
 8001172:	b084      	sub	sp, #16
 8001174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001176:	b087      	sub	sp, #28
 8001178:	ac0d      	add	r4, sp, #52	; 0x34
 800117a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    uint8_t result;
    result = _reg_field.set_field_value(field, value);
 800117e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001180:	ad10      	add	r5, sp, #64	; 0x40
 8001182:	9304      	str	r3, [sp, #16]
 8001184:	f100 063c 	add.w	r6, r0, #60	; 0x3c
 8001188:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800118c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
uint8_t LoRa_class::field_set(Address_field field, uint32_t value, bool write) {
 8001190:	f89d 7054 	ldrb.w	r7, [sp, #84]	; 0x54
    result = _reg_field.set_field_value(field, value);
 8001194:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001198:	4630      	mov	r0, r6
 800119a:	f000 fedb 	bl	8001f54 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
    if(write) {
 800119e:	b15f      	cbz	r7, 80011b8 <_ZN10LoRa_class9field_setE13Address_fieldmb+0x46>
        result = _reg_field.register_write(field, true, true);
 80011a0:	2301      	movs	r3, #1
 80011a2:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80011a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011aa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80011ae:	4630      	mov	r0, r6
 80011b0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80011b4:	f000 ff63 	bl	800207e <_ZN13LoRa_register14register_writeE13Address_fieldbb>
    }
    return result;
}
 80011b8:	b007      	add	sp, #28
 80011ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80011be:	b004      	add	sp, #16
 80011c0:	4770      	bx	lr

080011c2 <_ZN10LoRa_class9field_setEP13Address_fieldPmhb>:
uint8_t LoRa_class::field_set(Address_field* fields, uint32_t* values, uint8_t amt, bool write) {
 80011c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t result;
    result = _reg_field.set_field_value(fields, values, amt);
 80011c6:	f100 043c 	add.w	r4, r0, #60	; 0x3c
uint8_t LoRa_class::field_set(Address_field* fields, uint32_t* values, uint8_t amt, bool write) {
 80011ca:	f89d 7018 	ldrb.w	r7, [sp, #24]
    result = _reg_field.set_field_value(fields, values, amt);
 80011ce:	4620      	mov	r0, r4
uint8_t LoRa_class::field_set(Address_field* fields, uint32_t* values, uint8_t amt, bool write) {
 80011d0:	460d      	mov	r5, r1
 80011d2:	461e      	mov	r6, r3
    result = _reg_field.set_field_value(fields, values, amt);
 80011d4:	f000 fe68 	bl	8001ea8 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
    if(write) {
 80011d8:	b147      	cbz	r7, 80011ec <_ZN10LoRa_class9field_setEP13Address_fieldPmhb+0x2a>
        result = _reg_field.register_write(fields, amt, true, true);
 80011da:	2301      	movs	r3, #1
 80011dc:	4632      	mov	r2, r6
 80011de:	9306      	str	r3, [sp, #24]
 80011e0:	4629      	mov	r1, r5
 80011e2:	4620      	mov	r0, r4
    }
    return result;
}
 80011e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        result = _reg_field.register_write(fields, amt, true, true);
 80011e8:	f000 bf04 	b.w	8001ff4 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
}
 80011ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080011f0 <_ZN10LoRa_class9field_getE13Address_fieldPmb>:

uint8_t LoRa_class::field_get(Address_field field, uint32_t* value, bool read) {
 80011f0:	b084      	sub	sp, #16
 80011f2:	b530      	push	{r4, r5, lr}
 80011f4:	b087      	sub	sp, #28
 80011f6:	ac0b      	add	r4, sp, #44	; 0x2c
 80011f8:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return _reg_field.get_field_value(field, value, read);
 80011fc:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8001200:	f100 053c 	add.w	r5, r0, #60	; 0x3c
 8001204:	9305      	str	r3, [sp, #20]
 8001206:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001208:	9304      	str	r3, [sp, #16]
 800120a:	ab0e      	add	r3, sp, #56	; 0x38
 800120c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800120e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001212:	4628      	mov	r0, r5
 8001214:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001218:	f000 feda 	bl	8001fd0 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>
}
 800121c:	b007      	add	sp, #28
 800121e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001222:	b004      	add	sp, #16
 8001224:	4770      	bx	lr
	...

08001228 <_ZN10LoRa_class8set_modeEh>:
    // переход в режим сна
    mode_sleep();
}


uint8_t LoRa_class::set_mode(uint8_t mode) {
 8001228:	b5f0      	push	{r4, r5, r6, r7, lr}
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 800122a:	4d14      	ldr	r5, [pc, #80]	; (800127c <_ZN10LoRa_class8set_modeEh+0x54>)
uint8_t LoRa_class::set_mode(uint8_t mode) {
 800122c:	b09b      	sub	sp, #108	; 0x6c
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 800122e:	ac05      	add	r4, sp, #20
uint8_t LoRa_class::set_mode(uint8_t mode) {
 8001230:	4606      	mov	r6, r0
 8001232:	460f      	mov	r7, r1
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8001234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001238:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800123c:	4d10      	ldr	r5, [pc, #64]	; (8001280 <_ZN10LoRa_class8set_modeEh+0x58>)
 800123e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001244:	ac0c      	add	r4, sp, #48	; 0x30
 8001246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001248:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800124c:	4d0d      	ldr	r5, [pc, #52]	; (8001284 <_ZN10LoRa_class8set_modeEh+0x5c>)
 800124e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001254:	ac13      	add	r4, sp, #76	; 0x4c
 8001256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001258:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    uint32_t values[3] = {1, 0, mode};
 800125c:	2301      	movs	r3, #1
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 800125e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    uint32_t values[3] = {1, 0, mode};
 8001262:	2200      	movs	r2, #0
    return field_set(fields, values, 3);
 8001264:	9300      	str	r3, [sp, #0]
    uint32_t values[3] = {1, 0, mode};
 8001266:	e9cd 3202 	strd	r3, r2, [sp, #8]
    return field_set(fields, values, 3);
 800126a:	a905      	add	r1, sp, #20
 800126c:	2303      	movs	r3, #3
 800126e:	aa02      	add	r2, sp, #8
 8001270:	4630      	mov	r0, r6
    uint32_t values[3] = {1, 0, mode};
 8001272:	9704      	str	r7, [sp, #16]
    return field_set(fields, values, 3);
 8001274:	f7ff ffa5 	bl	80011c2 <_ZN10LoRa_class9field_setEP13Address_fieldPmhb>
}
 8001278:	b01b      	add	sp, #108	; 0x6c
 800127a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800127c:	20001178 	.word	0x20001178
 8001280:	200011b0 	.word	0x200011b0
 8001284:	20001204 	.word	0x20001204

08001288 <_ZN10LoRa_class10mode_sleepEv>:
// Режим сна/настройки
uint8_t LoRa_class::mode_sleep() {
    return set_mode(MODE_SLEEP);
 8001288:	2100      	movs	r1, #0
 800128a:	f7ff bfcd 	b.w	8001228 <_ZN10LoRa_class8set_modeEh>

0800128e <_ZN10LoRa_class10mode_STDBYEv>:
}
// Режим ожидания
uint8_t LoRa_class::mode_STDBY() {
    return set_mode(MODE_STDBY);
 800128e:	2101      	movs	r1, #1
 8001290:	f7ff bfca 	b.w	8001228 <_ZN10LoRa_class8set_modeEh>

08001294 <_ZN10LoRa_class7mode_TXEb>:
}
// Режим отправки
uint8_t LoRa_class::mode_TX(bool set_dio) {
 8001294:	b530      	push	{r4, r5, lr}
    if (set_dio & (_dio0_pin != 0))
 8001296:	8a83      	ldrh	r3, [r0, #20]
uint8_t LoRa_class::mode_TX(bool set_dio) {
 8001298:	b087      	sub	sp, #28
 800129a:	4605      	mov	r5, r0
    if (set_dio & (_dio0_pin != 0))
 800129c:	b173      	cbz	r3, 80012bc <_ZN10LoRa_class7mode_TXEb+0x28>
 800129e:	b169      	cbz	r1, 80012bc <_ZN10LoRa_class7mode_TXEb+0x28>
        field_set(Dio0Mapping, 1);
 80012a0:	2301      	movs	r3, #1
 80012a2:	4c0a      	ldr	r4, [pc, #40]	; (80012cc <_ZN10LoRa_class7mode_TXEb+0x38>)
 80012a4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80012a8:	f104 030c 	add.w	r3, r4, #12
 80012ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ae:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80012b2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80012b6:	4628      	mov	r0, r5
 80012b8:	f7ff ff5b 	bl	8001172 <_ZN10LoRa_class9field_setE13Address_fieldmb>
    return set_mode(MODE_TX);
 80012bc:	2103      	movs	r1, #3
 80012be:	4628      	mov	r0, r5
}
 80012c0:	b007      	add	sp, #28
 80012c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return set_mode(MODE_TX);
 80012c6:	f7ff bfaf 	b.w	8001228 <_ZN10LoRa_class8set_modeEh>
 80012ca:	bf00      	nop
 80012cc:	20000ea0 	.word	0x20000ea0

080012d0 <_ZN10LoRa_class12set_TX_powerEhbh>:
    return set_mode(MODE_CAD);
}


// Установка силы отправляемого пакета
uint8_t LoRa_class::set_TX_power(uint8_t power, bool paboost, uint8_t max_power) {
 80012d0:	469c      	mov	ip, r3
 80012d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Address_field fields[4] = {PaDac, PaSelect, MaxPower, OutputPower};
 80012d6:	4e31      	ldr	r6, [pc, #196]	; (800139c <_ZN10LoRa_class12set_TX_powerEhbh+0xcc>)
uint8_t LoRa_class::set_TX_power(uint8_t power, bool paboost, uint8_t max_power) {
 80012d8:	b0a2      	sub	sp, #136	; 0x88
    Address_field fields[4] = {PaDac, PaSelect, MaxPower, OutputPower};
 80012da:	ad06      	add	r5, sp, #24
uint8_t LoRa_class::set_TX_power(uint8_t power, bool paboost, uint8_t max_power) {
 80012dc:	4607      	mov	r7, r0
 80012de:	460c      	mov	r4, r1
 80012e0:	4690      	mov	r8, r2
    Address_field fields[4] = {PaDac, PaSelect, MaxPower, OutputPower};
 80012e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012e6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80012ea:	4e2d      	ldr	r6, [pc, #180]	; (80013a0 <_ZN10LoRa_class12set_TX_powerEhbh+0xd0>)
 80012ec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80012f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012f2:	ad0d      	add	r5, sp, #52	; 0x34
 80012f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80012fa:	4e2a      	ldr	r6, [pc, #168]	; (80013a4 <_ZN10LoRa_class12set_TX_powerEhbh+0xd4>)
 80012fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001300:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001302:	ad14      	add	r5, sp, #80	; 0x50
 8001304:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001306:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800130a:	4e27      	ldr	r6, [pc, #156]	; (80013a8 <_ZN10LoRa_class12set_TX_powerEhbh+0xd8>)
 800130c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001310:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001312:	ad1b      	add	r5, sp, #108	; 0x6c
 8001314:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001316:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800131a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    uint32_t pa_dac, pa_select;
    int16_t power_adjustment, min_power_value, max_power_value;
    if (max_power < 0x01)
 800131e:	f1bc 0f00 	cmp.w	ip, #0
 8001322:	d033      	beq.n	800138c <_ZN10LoRa_class12set_TX_powerEhbh+0xbc>
 8001324:	4665      	mov	r5, ip
 8001326:	2d07      	cmp	r5, #7
 8001328:	bf28      	it	cs
 800132a:	2507      	movcs	r5, #7
        max_power = 0x01;
    else if (max_power > 0x07)
        max_power = 0x07;
    _reg_field.register_read(fields, 4);
 800132c:	2301      	movs	r3, #1
 800132e:	2204      	movs	r2, #4
 8001330:	a906      	add	r1, sp, #24
 8001332:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001336:	f000 fd7a 	bl	8001e2e <_ZN13LoRa_register13register_readEP13Address_fieldhb>
    // Изменение бита PABOOST
    if (paboost) {
 800133a:	f1b8 0f00 	cmp.w	r8, #0
 800133e:	d027      	beq.n	8001390 <_ZN10LoRa_class12set_TX_powerEhbh+0xc0>
        pa_select = 1;
        min_power_value = 2;
        max_power_value = 20;
        if (power > 17)
 8001340:	2c11      	cmp	r4, #17
        max_power_value = 20;
 8001342:	f04f 0214 	mov.w	r2, #20
 8001346:	f04f 0102 	mov.w	r1, #2
 800134a:	bf8c      	ite	hi
 800134c:	f06f 0004 	mvnhi.w	r0, #4
 8001350:	f06f 0001 	mvnls.w	r0, #1
 8001354:	2301      	movs	r3, #1
        min_power_value = -1;
        max_power_value = 14;
        power_adjustment = 1;
    }
    // Проверка выхода силы сигнала за диапазон
    if (power < min_power_value)
 8001356:	428c      	cmp	r4, r1
        power = min_power_value;
 8001358:	bfb8      	it	lt
 800135a:	b2cc      	uxtblt	r4, r1
    if (power > max_power_value)
 800135c:	4294      	cmp	r4, r2
        power = max_power_value;
 800135e:	bfc8      	it	gt
 8001360:	b2d4      	uxtbgt	r4, r2
    // Корректировка параметра
    power += power_adjustment;
 8001362:	4404      	add	r4, r0
 8001364:	b2e4      	uxtb	r4, r4
    // Настройка флага высокого сигнала
    if (power > 17)
 8001366:	2c11      	cmp	r4, #17
        pa_dac = RF_PADAC_20DBM_ON;
    else
        pa_dac = RF_PADAC_20DBM_OFF;
 8001368:	bf8c      	ite	hi
 800136a:	2207      	movhi	r2, #7
 800136c:	2204      	movls	r2, #4
    // Передача настроек
    uint32_t values[4] = {pa_dac, pa_select, max_power, power};
 800136e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    return field_set(fields, values, 4);
 8001372:	2301      	movs	r3, #1
 8001374:	aa02      	add	r2, sp, #8
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	a906      	add	r1, sp, #24
 800137a:	2304      	movs	r3, #4
 800137c:	4638      	mov	r0, r7
    uint32_t values[4] = {pa_dac, pa_select, max_power, power};
 800137e:	e9cd 5404 	strd	r5, r4, [sp, #16]
    return field_set(fields, values, 4);
 8001382:	f7ff ff1e 	bl	80011c2 <_ZN10LoRa_class9field_setEP13Address_fieldPmhb>
}
 8001386:	b022      	add	sp, #136	; 0x88
 8001388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        max_power = 0x01;
 800138c:	2501      	movs	r5, #1
 800138e:	e7cd      	b.n	800132c <_ZN10LoRa_class12set_TX_powerEhbh+0x5c>
        max_power_value = 14;
 8001390:	220e      	movs	r2, #14
        min_power_value = -1;
 8001392:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        power_adjustment = 1;
 8001396:	2001      	movs	r0, #1
        pa_select = 0;
 8001398:	4643      	mov	r3, r8
 800139a:	e7dc      	b.n	8001356 <_ZN10LoRa_class12set_TX_powerEhbh+0x86>
 800139c:	20001290 	.word	0x20001290
 80013a0:	200012c8 	.word	0x200012c8
 80013a4:	200011e8 	.word	0x200011e8
 80013a8:	20001274 	.word	0x20001274

080013ac <_ZN10LoRa_class13set_frequencyEy>:

// Установка частоты радиосигнала
uint8_t LoRa_class::set_frequency(uint64_t frequency) {
 80013ac:	b570      	push	{r4, r5, r6, lr}
    _frequency = frequency;
 80013ae:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
uint8_t LoRa_class::set_frequency(uint64_t frequency) {
 80013b2:	4616      	mov	r6, r2
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
    return field_set(Frf, frf);
 80013b4:	2201      	movs	r2, #1
uint8_t LoRa_class::set_frequency(uint64_t frequency) {
 80013b6:	b086      	sub	sp, #24
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
 80013b8:	04d9      	lsls	r1, r3, #19
uint8_t LoRa_class::set_frequency(uint64_t frequency) {
 80013ba:	4605      	mov	r5, r0
    return field_set(Frf, frf);
 80013bc:	9205      	str	r2, [sp, #20]
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
 80013be:	2300      	movs	r3, #0
 80013c0:	4a09      	ldr	r2, [pc, #36]	; (80013e8 <_ZN10LoRa_class13set_frequencyEy+0x3c>)
 80013c2:	04f0      	lsls	r0, r6, #19
 80013c4:	ea41 3156 	orr.w	r1, r1, r6, lsr #13
 80013c8:	f7ff fbee 	bl	8000ba8 <__aeabi_uldivmod>
    return field_set(Frf, frf);
 80013cc:	4c07      	ldr	r4, [pc, #28]	; (80013ec <_ZN10LoRa_class13set_frequencyEy+0x40>)
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
 80013ce:	9004      	str	r0, [sp, #16]
    return field_set(Frf, frf);
 80013d0:	f104 030c 	add.w	r3, r4, #12
 80013d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013d6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80013da:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80013de:	4628      	mov	r0, r5
 80013e0:	f7ff fec7 	bl	8001172 <_ZN10LoRa_class9field_setE13Address_fieldmb>
}
 80013e4:	b006      	add	sp, #24
 80013e6:	bd70      	pop	{r4, r5, r6, pc}
 80013e8:	01e84800 	.word	0x01e84800
 80013ec:	200010d0 	.word	0x200010d0

080013f0 <_ZN10LoRa_class20set_spreading_factorEh>:

// Установка силы коэффициента распространения SF
uint8_t LoRa_class::set_spreading_factor(uint8_t SF) {
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t detection_optimize, detection_threshold;
    if (SF < 6)
 80013f2:	2905      	cmp	r1, #5
uint8_t LoRa_class::set_spreading_factor(uint8_t SF) {
 80013f4:	b09b      	sub	sp, #108	; 0x6c
 80013f6:	4686      	mov	lr, r0
 80013f8:	460e      	mov	r6, r1
    if (SF < 6)
 80013fa:	d92e      	bls.n	800145a <_ZN10LoRa_class20set_spreading_factorEh+0x6a>
        SF = 6;
    else if (SF > 12)
 80013fc:	290c      	cmp	r1, #12
 80013fe:	d831      	bhi.n	8001464 <_ZN10LoRa_class20set_spreading_factorEh+0x74>
        SF = 12;
    if (SF == 6) {
 8001400:	2906      	cmp	r1, #6
        detection_optimize = DO_SF6;
        detection_threshold = DT_SF6;
    }
    else {
        detection_optimize = DO_SF7_12;
        detection_threshold = DT_SF7_12;
 8001402:	bf0b      	itete	eq
 8001404:	270c      	moveq	r7, #12
 8001406:	270a      	movne	r7, #10
 8001408:	f04f 0c05 	moveq.w	ip, #5
 800140c:	f04f 0c03 	movne.w	ip, #3
    }
    Address_field fields[3] = {DetectionOptimize, DetectionThreshold, SpreadingFactor};
 8001410:	4d17      	ldr	r5, [pc, #92]	; (8001470 <_ZN10LoRa_class20set_spreading_factorEh+0x80>)
 8001412:	ac05      	add	r4, sp, #20
 8001414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001418:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800141c:	4d15      	ldr	r5, [pc, #84]	; (8001474 <_ZN10LoRa_class20set_spreading_factorEh+0x84>)
 800141e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001424:	ac0c      	add	r4, sp, #48	; 0x30
 8001426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001428:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800142c:	4d12      	ldr	r5, [pc, #72]	; (8001478 <_ZN10LoRa_class20set_spreading_factorEh+0x88>)
 800142e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001434:	ac13      	add	r4, sp, #76	; 0x4c
 8001436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001438:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    uint32_t values[3] = {detection_optimize, detection_threshold, SF};
    return field_set(fields, values, 3);
 800143c:	2301      	movs	r3, #1
    Address_field fields[3] = {DetectionOptimize, DetectionThreshold, SpreadingFactor};
 800143e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return field_set(fields, values, 3);
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	aa02      	add	r2, sp, #8
 8001446:	2303      	movs	r3, #3
 8001448:	a905      	add	r1, sp, #20
 800144a:	4670      	mov	r0, lr
    uint32_t values[3] = {detection_optimize, detection_threshold, SF};
 800144c:	e9cd c702 	strd	ip, r7, [sp, #8]
 8001450:	9604      	str	r6, [sp, #16]
    return field_set(fields, values, 3);
 8001452:	f7ff feb6 	bl	80011c2 <_ZN10LoRa_class9field_setEP13Address_fieldPmhb>
}
 8001456:	b01b      	add	sp, #108	; 0x6c
 8001458:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SF = 6;
 800145a:	2606      	movs	r6, #6
        detection_threshold = DT_SF6;
 800145c:	270c      	movs	r7, #12
        detection_optimize = DO_SF6;
 800145e:	f04f 0c05 	mov.w	ip, #5
 8001462:	e7d5      	b.n	8001410 <_ZN10LoRa_class20set_spreading_factorEh+0x20>
        SF = 12;
 8001464:	260c      	movs	r6, #12
        detection_threshold = DT_SF7_12;
 8001466:	270a      	movs	r7, #10
        detection_optimize = DO_SF7_12;
 8001468:	f04f 0c03 	mov.w	ip, #3
 800146c:	e7d0      	b.n	8001410 <_ZN10LoRa_class20set_spreading_factorEh+0x20>
 800146e:	bf00      	nop
 8001470:	20000e68 	.word	0x20000e68
 8001474:	20000e84 	.word	0x20000e84
 8001478:	200014dc 	.word	0x200014dc
 800147c:	00000000 	.word	0x00000000

08001480 <_ZN10LoRa_class20set_signal_bandwidthEy>:

// Установка пропускной способности
uint8_t LoRa_class::set_signal_bandwidth(uint64_t sbw) {
 8001480:	b570      	push	{r4, r5, r6, lr}
    uint8_t bw;
    if (sbw <= 7.8E3)        bw = 0;
 8001482:	4619      	mov	r1, r3
uint8_t LoRa_class::set_signal_bandwidth(uint64_t sbw) {
 8001484:	b086      	sub	sp, #24
 8001486:	4606      	mov	r6, r0
    if (sbw <= 7.8E3)        bw = 0;
 8001488:	4610      	mov	r0, r2
 800148a:	f7fe ffe7 	bl	800045c <__aeabi_ul2d>
 800148e:	a338      	add	r3, pc, #224	; (adr r3, 8001570 <_ZN10LoRa_class20set_signal_bandwidthEy+0xf0>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	4604      	mov	r4, r0
 8001496:	460d      	mov	r5, r1
 8001498:	f7ff fa92 	bl	80009c0 <__aeabi_dcmple>
 800149c:	2800      	cmp	r0, #0
 800149e:	d156      	bne.n	800154e <_ZN10LoRa_class20set_signal_bandwidthEy+0xce>
    else if (sbw <= 10.4E3)  bw = 1;
 80014a0:	a335      	add	r3, pc, #212	; (adr r3, 8001578 <_ZN10LoRa_class20set_signal_bandwidthEy+0xf8>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	4620      	mov	r0, r4
 80014a8:	4629      	mov	r1, r5
 80014aa:	f7ff fa89 	bl	80009c0 <__aeabi_dcmple>
 80014ae:	2800      	cmp	r0, #0
 80014b0:	d14f      	bne.n	8001552 <_ZN10LoRa_class20set_signal_bandwidthEy+0xd2>
    else if (sbw <= 15.6E3)  bw = 2;
 80014b2:	a333      	add	r3, pc, #204	; (adr r3, 8001580 <_ZN10LoRa_class20set_signal_bandwidthEy+0x100>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	4620      	mov	r0, r4
 80014ba:	4629      	mov	r1, r5
 80014bc:	f7ff fa80 	bl	80009c0 <__aeabi_dcmple>
 80014c0:	2800      	cmp	r0, #0
 80014c2:	d148      	bne.n	8001556 <_ZN10LoRa_class20set_signal_bandwidthEy+0xd6>
    else if (sbw <= 20.8E3)  bw = 3;
 80014c4:	a330      	add	r3, pc, #192	; (adr r3, 8001588 <_ZN10LoRa_class20set_signal_bandwidthEy+0x108>)
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	4620      	mov	r0, r4
 80014cc:	4629      	mov	r1, r5
 80014ce:	f7ff fa77 	bl	80009c0 <__aeabi_dcmple>
 80014d2:	2800      	cmp	r0, #0
 80014d4:	d141      	bne.n	800155a <_ZN10LoRa_class20set_signal_bandwidthEy+0xda>
    else if (sbw <= 31.25E3) bw = 4;
 80014d6:	a32e      	add	r3, pc, #184	; (adr r3, 8001590 <_ZN10LoRa_class20set_signal_bandwidthEy+0x110>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	4620      	mov	r0, r4
 80014de:	4629      	mov	r1, r5
 80014e0:	f7ff fa6e 	bl	80009c0 <__aeabi_dcmple>
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d13a      	bne.n	800155e <_ZN10LoRa_class20set_signal_bandwidthEy+0xde>
    else if (sbw <= 41.7E3)  bw = 5;
 80014e8:	a32b      	add	r3, pc, #172	; (adr r3, 8001598 <_ZN10LoRa_class20set_signal_bandwidthEy+0x118>)
 80014ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ee:	4620      	mov	r0, r4
 80014f0:	4629      	mov	r1, r5
 80014f2:	f7ff fa65 	bl	80009c0 <__aeabi_dcmple>
 80014f6:	bba0      	cbnz	r0, 8001562 <_ZN10LoRa_class20set_signal_bandwidthEy+0xe2>
    else if (sbw <= 62.5E3)  bw = 6;
 80014f8:	a329      	add	r3, pc, #164	; (adr r3, 80015a0 <_ZN10LoRa_class20set_signal_bandwidthEy+0x120>)
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	4620      	mov	r0, r4
 8001500:	4629      	mov	r1, r5
 8001502:	f7ff fa5d 	bl	80009c0 <__aeabi_dcmple>
 8001506:	bb70      	cbnz	r0, 8001566 <_ZN10LoRa_class20set_signal_bandwidthEy+0xe6>
    else if (sbw <= 125E3)   bw = 7;
 8001508:	a327      	add	r3, pc, #156	; (adr r3, 80015a8 <_ZN10LoRa_class20set_signal_bandwidthEy+0x128>)
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	4620      	mov	r0, r4
 8001510:	4629      	mov	r1, r5
 8001512:	f7ff fa55 	bl	80009c0 <__aeabi_dcmple>
 8001516:	bb40      	cbnz	r0, 800156a <_ZN10LoRa_class20set_signal_bandwidthEy+0xea>
    else if (sbw <= 250E3)   bw = 8;
 8001518:	a325      	add	r3, pc, #148	; (adr r3, 80015b0 <_ZN10LoRa_class20set_signal_bandwidthEy+0x130>)
 800151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151e:	4620      	mov	r0, r4
 8001520:	4629      	mov	r1, r5
 8001522:	f7ff fa4d 	bl	80009c0 <__aeabi_dcmple>
    else                     bw = 9;
 8001526:	2800      	cmp	r0, #0
 8001528:	bf14      	ite	ne
 800152a:	2308      	movne	r3, #8
 800152c:	2309      	moveq	r3, #9
    return field_set(Bw, bw);
 800152e:	2201      	movs	r2, #1
 8001530:	4c21      	ldr	r4, [pc, #132]	; (80015b8 <_ZN10LoRa_class20set_signal_bandwidthEy+0x138>)
 8001532:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8001536:	f104 030c 	add.w	r3, r4, #12
 800153a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800153c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001540:	4630      	mov	r0, r6
 8001542:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001546:	f7ff fe14 	bl	8001172 <_ZN10LoRa_class9field_setE13Address_fieldmb>
}
 800154a:	b006      	add	sp, #24
 800154c:	bd70      	pop	{r4, r5, r6, pc}
    if (sbw <= 7.8E3)        bw = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	e7ed      	b.n	800152e <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 10.4E3)  bw = 1;
 8001552:	2301      	movs	r3, #1
 8001554:	e7eb      	b.n	800152e <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 15.6E3)  bw = 2;
 8001556:	2302      	movs	r3, #2
 8001558:	e7e9      	b.n	800152e <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 20.8E3)  bw = 3;
 800155a:	2303      	movs	r3, #3
 800155c:	e7e7      	b.n	800152e <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 31.25E3) bw = 4;
 800155e:	2304      	movs	r3, #4
 8001560:	e7e5      	b.n	800152e <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 41.7E3)  bw = 5;
 8001562:	2305      	movs	r3, #5
 8001564:	e7e3      	b.n	800152e <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 62.5E3)  bw = 6;
 8001566:	2306      	movs	r3, #6
 8001568:	e7e1      	b.n	800152e <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 125E3)   bw = 7;
 800156a:	2307      	movs	r3, #7
 800156c:	e7df      	b.n	800152e <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
 800156e:	bf00      	nop
 8001570:	00000000 	.word	0x00000000
 8001574:	40be7800 	.word	0x40be7800
 8001578:	00000000 	.word	0x00000000
 800157c:	40c45000 	.word	0x40c45000
 8001580:	00000000 	.word	0x00000000
 8001584:	40ce7800 	.word	0x40ce7800
 8001588:	00000000 	.word	0x00000000
 800158c:	40d45000 	.word	0x40d45000
 8001590:	00000000 	.word	0x00000000
 8001594:	40de8480 	.word	0x40de8480
 8001598:	00000000 	.word	0x00000000
 800159c:	40e45c80 	.word	0x40e45c80
 80015a0:	00000000 	.word	0x00000000
 80015a4:	40ee8480 	.word	0x40ee8480
 80015a8:	00000000 	.word	0x00000000
 80015ac:	40fe8480 	.word	0x40fe8480
 80015b0:	00000000 	.word	0x00000000
 80015b4:	410e8480 	.word	0x410e8480
 80015b8:	20000da4 	.word	0x20000da4

080015bc <_ZN10LoRa_class10crc_enableEv>:
    return field_set(SyncWord, SW);
}

// Включение CRC на LoRa-модуле
uint8_t LoRa_class::crc_enable() {
    return field_set(RxPayloadCrcOn, 1);
 80015bc:	2301      	movs	r3, #1
uint8_t LoRa_class::crc_enable() {
 80015be:	b530      	push	{r4, r5, lr}
 80015c0:	4605      	mov	r5, r0
 80015c2:	b087      	sub	sp, #28
    return field_set(RxPayloadCrcOn, 1);
 80015c4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80015c8:	4c06      	ldr	r4, [pc, #24]	; (80015e4 <_ZN10LoRa_class10crc_enableEv+0x28>)
 80015ca:	f104 030c 	add.w	r3, r4, #12
 80015ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015d0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80015d4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80015d8:	4628      	mov	r0, r5
 80015da:	f7ff fdca 	bl	8001172 <_ZN10LoRa_class9field_setE13Address_fieldmb>
}
 80015de:	b007      	add	sp, #28
 80015e0:	bd30      	pop	{r4, r5, pc}
 80015e2:	bf00      	nop
 80015e4:	20001488 	.word	0x20001488

080015e8 <_ZN10LoRa_class5beginEybhhyh>:
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 80015e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015ec:	4604      	mov	r4, r0
    uint32_t result = 0;
 80015ee:	2700      	movs	r7, #0
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 80015f0:	b08e      	sub	sp, #56	; 0x38
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 80015f2:	8881      	ldrh	r1, [r0, #4]
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 80015f4:	4690      	mov	r8, r2
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 80015f6:	6880      	ldr	r0, [r0, #8]
 80015f8:	2201      	movs	r2, #1
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 80015fa:	4699      	mov	r9, r3
    uint32_t result = 0;
 80015fc:	9706      	str	r7, [sp, #24]
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 80015fe:	f004 f8e9 	bl	80057d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_RESET);
 8001602:	463a      	mov	r2, r7
 8001604:	88a1      	ldrh	r1, [r4, #4]
 8001606:	68a0      	ldr	r0, [r4, #8]
 8001608:	f004 f8e4 	bl	80057d4 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800160c:	2014      	movs	r0, #20
 800160e:	f003 ff49 	bl	80054a4 <HAL_Delay>
 8001612:	4e6a      	ldr	r6, [pc, #424]	; (80017bc <_ZN10LoRa_class5beginEybhhyh+0x1d4>)
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 8001614:	2201      	movs	r2, #1
 8001616:	88a1      	ldrh	r1, [r4, #4]
 8001618:	68a0      	ldr	r0, [r4, #8]
 800161a:	f004 f8db 	bl	80057d4 <HAL_GPIO_WritePin>
 800161e:	ad07      	add	r5, sp, #28
    HAL_Delay(50);
 8001620:	2032      	movs	r0, #50	; 0x32
 8001622:	f003 ff3f 	bl	80054a4 <HAL_Delay>
 8001626:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800162a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800162e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    return _reg_field.get_field_value(field, value, read);
 8001632:	ab06      	add	r3, sp, #24
 8001634:	9304      	str	r3, [sp, #16]
 8001636:	9705      	str	r7, [sp, #20]
 8001638:	ab0e      	add	r3, sp, #56	; 0x38
 800163a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800163e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001642:	ab07      	add	r3, sp, #28
 8001644:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001646:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800164a:	f000 fcc1 	bl	8001fd0 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>
    if ((result != 0x12) || (amt != 1)) return 2;
 800164e:	9b06      	ldr	r3, [sp, #24]
 8001650:	2b12      	cmp	r3, #18
 8001652:	f040 8098 	bne.w	8001786 <_ZN10LoRa_class5beginEybhhyh+0x19e>
 8001656:	2801      	cmp	r0, #1
 8001658:	f040 8095 	bne.w	8001786 <_ZN10LoRa_class5beginEybhhyh+0x19e>
    if(mode_sleep() != 1) return 3;
 800165c:	4620      	mov	r0, r4
 800165e:	f7ff fe13 	bl	8001288 <_ZN10LoRa_class10mode_sleepEv>
 8001662:	2801      	cmp	r0, #1
 8001664:	4682      	mov	sl, r0
 8001666:	f040 8090 	bne.w	800178a <_ZN10LoRa_class5beginEybhhyh+0x1a2>
    if(set_frequency(frequency) != 3) return 4;
 800166a:	4642      	mov	r2, r8
 800166c:	464b      	mov	r3, r9
 800166e:	4620      	mov	r0, r4
 8001670:	f7ff fe9c 	bl	80013ac <_ZN10LoRa_class13set_frequencyEy>
 8001674:	2803      	cmp	r0, #3
 8001676:	4606      	mov	r6, r0
 8001678:	f040 8089 	bne.w	800178e <_ZN10LoRa_class5beginEybhhyh+0x1a6>
    if(field_set(FifoRxBaseAddr, 0x00) != 1) return 5;
 800167c:	e9cd 7a04 	strd	r7, sl, [sp, #16]
 8001680:	4d4f      	ldr	r5, [pc, #316]	; (80017c0 <_ZN10LoRa_class5beginEybhhyh+0x1d8>)
 8001682:	f105 030c 	add.w	r3, r5, #12
 8001686:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001688:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800168c:	4620      	mov	r0, r4
 800168e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001692:	f7ff fd6e 	bl	8001172 <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8001696:	2801      	cmp	r0, #1
 8001698:	d17b      	bne.n	8001792 <_ZN10LoRa_class5beginEybhhyh+0x1aa>
    if(field_set(FifoTxBaseAddr, _FifoTxBaseAddr) != 1) return 6;
 800169a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800169e:	4d49      	ldr	r5, [pc, #292]	; (80017c4 <_ZN10LoRa_class5beginEybhhyh+0x1dc>)
 80016a0:	9304      	str	r3, [sp, #16]
 80016a2:	9005      	str	r0, [sp, #20]
 80016a4:	f105 030c 	add.w	r3, r5, #12
 80016a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016aa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80016ae:	4620      	mov	r0, r4
 80016b0:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80016b4:	f7ff fd5d 	bl	8001172 <_ZN10LoRa_class9field_setE13Address_fieldmb>
 80016b8:	2801      	cmp	r0, #1
 80016ba:	d16c      	bne.n	8001796 <_ZN10LoRa_class5beginEybhhyh+0x1ae>
    if(field_set(LnaBoostHf, 0x03) != 1) return 7;
 80016bc:	e9cd 6004 	strd	r6, r0, [sp, #16]
 80016c0:	4d41      	ldr	r5, [pc, #260]	; (80017c8 <_ZN10LoRa_class5beginEybhhyh+0x1e0>)
 80016c2:	f105 030c 	add.w	r3, r5, #12
 80016c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016c8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80016cc:	4620      	mov	r0, r4
 80016ce:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80016d2:	f7ff fd4e 	bl	8001172 <_ZN10LoRa_class9field_setE13Address_fieldmb>
 80016d6:	2801      	cmp	r0, #1
 80016d8:	d15f      	bne.n	800179a <_ZN10LoRa_class5beginEybhhyh+0x1b2>
    if(field_set(LowDataRateOptimize, 0) != 1) return 8;
 80016da:	e9cd 7004 	strd	r7, r0, [sp, #16]
 80016de:	4d3b      	ldr	r5, [pc, #236]	; (80017cc <_ZN10LoRa_class5beginEybhhyh+0x1e4>)
 80016e0:	f105 030c 	add.w	r3, r5, #12
 80016e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016e6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80016ea:	4620      	mov	r0, r4
 80016ec:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80016f0:	f7ff fd3f 	bl	8001172 <_ZN10LoRa_class9field_setE13Address_fieldmb>
 80016f4:	2801      	cmp	r0, #1
 80016f6:	d152      	bne.n	800179e <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(field_set(AgcAutoOn, 1) != 1) return 9;
 80016f8:	e9cd 0004 	strd	r0, r0, [sp, #16]
 80016fc:	4d34      	ldr	r5, [pc, #208]	; (80017d0 <_ZN10LoRa_class5beginEybhhyh+0x1e8>)
 80016fe:	f105 030c 	add.w	r3, r5, #12
 8001702:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001704:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001708:	4620      	mov	r0, r4
 800170a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800170e:	f7ff fd30 	bl	8001172 <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8001712:	2801      	cmp	r0, #1
 8001714:	d145      	bne.n	80017a2 <_ZN10LoRa_class5beginEybhhyh+0x1ba>
    if(set_TX_power(signal_power, paboost) != 2) return 10;
 8001716:	2307      	movs	r3, #7
 8001718:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800171c:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 8001720:	4620      	mov	r0, r4
 8001722:	f7ff fdd5 	bl	80012d0 <_ZN10LoRa_class12set_TX_powerEhbh>
 8001726:	2802      	cmp	r0, #2
 8001728:	d13d      	bne.n	80017a6 <_ZN10LoRa_class5beginEybhhyh+0x1be>
    if(set_spreading_factor(SF) != 3) return 11;
 800172a:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
 800172e:	4620      	mov	r0, r4
 8001730:	f7ff fe5e 	bl	80013f0 <_ZN10LoRa_class20set_spreading_factorEh>
 8001734:	2803      	cmp	r0, #3
 8001736:	d138      	bne.n	80017aa <_ZN10LoRa_class5beginEybhhyh+0x1c2>
    if(set_signal_bandwidth(SBW) != 1) return 12;
 8001738:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800173c:	4620      	mov	r0, r4
 800173e:	f7ff fe9f 	bl	8001480 <_ZN10LoRa_class20set_signal_bandwidthEy>
 8001742:	2801      	cmp	r0, #1
 8001744:	d133      	bne.n	80017ae <_ZN10LoRa_class5beginEybhhyh+0x1c6>
    if(field_set(SyncWord, sync_word) != 1) return 13;
 8001746:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 800174a:	4d22      	ldr	r5, [pc, #136]	; (80017d4 <_ZN10LoRa_class5beginEybhhyh+0x1ec>)
 800174c:	9304      	str	r3, [sp, #16]
 800174e:	9005      	str	r0, [sp, #20]
 8001750:	f105 030c 	add.w	r3, r5, #12
 8001754:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001756:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800175a:	4620      	mov	r0, r4
 800175c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001760:	f7ff fd07 	bl	8001172 <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8001764:	2801      	cmp	r0, #1
 8001766:	d124      	bne.n	80017b2 <_ZN10LoRa_class5beginEybhhyh+0x1ca>
    if(crc_enable() != 1) return 14;
 8001768:	4620      	mov	r0, r4
 800176a:	f7ff ff27 	bl	80015bc <_ZN10LoRa_class10crc_enableEv>
 800176e:	2801      	cmp	r0, #1
 8001770:	d121      	bne.n	80017b6 <_ZN10LoRa_class5beginEybhhyh+0x1ce>
    if(mode_STDBY() != 1) return 15;
 8001772:	4620      	mov	r0, r4
 8001774:	f7ff fd8b 	bl	800128e <_ZN10LoRa_class10mode_STDBYEv>
    return 0;
 8001778:	2801      	cmp	r0, #1
 800177a:	bf14      	ite	ne
 800177c:	200f      	movne	r0, #15
 800177e:	4638      	moveq	r0, r7
}
 8001780:	b00e      	add	sp, #56	; 0x38
 8001782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((result != 0x12) || (amt != 1)) return 2;
 8001786:	2002      	movs	r0, #2
 8001788:	e7fa      	b.n	8001780 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(mode_sleep() != 1) return 3;
 800178a:	2003      	movs	r0, #3
 800178c:	e7f8      	b.n	8001780 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(set_frequency(frequency) != 3) return 4;
 800178e:	2004      	movs	r0, #4
 8001790:	e7f6      	b.n	8001780 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(field_set(FifoRxBaseAddr, 0x00) != 1) return 5;
 8001792:	2005      	movs	r0, #5
 8001794:	e7f4      	b.n	8001780 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(field_set(FifoTxBaseAddr, _FifoTxBaseAddr) != 1) return 6;
 8001796:	2006      	movs	r0, #6
 8001798:	e7f2      	b.n	8001780 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(field_set(LnaBoostHf, 0x03) != 1) return 7;
 800179a:	2007      	movs	r0, #7
 800179c:	e7f0      	b.n	8001780 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(field_set(LowDataRateOptimize, 0) != 1) return 8;
 800179e:	2008      	movs	r0, #8
 80017a0:	e7ee      	b.n	8001780 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(field_set(AgcAutoOn, 1) != 1) return 9;
 80017a2:	2009      	movs	r0, #9
 80017a4:	e7ec      	b.n	8001780 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(set_TX_power(signal_power, paboost) != 2) return 10;
 80017a6:	200a      	movs	r0, #10
 80017a8:	e7ea      	b.n	8001780 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(set_spreading_factor(SF) != 3) return 11;
 80017aa:	200b      	movs	r0, #11
 80017ac:	e7e8      	b.n	8001780 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(set_signal_bandwidth(SBW) != 1) return 12;
 80017ae:	200c      	movs	r0, #12
 80017b0:	e7e6      	b.n	8001780 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(field_set(SyncWord, sync_word) != 1) return 13;
 80017b2:	200d      	movs	r0, #13
 80017b4:	e7e4      	b.n	8001780 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(crc_enable() != 1) return 14;
 80017b6:	200e      	movs	r0, #14
 80017b8:	e7e2      	b.n	8001780 <_ZN10LoRa_class5beginEybhhyh+0x198>
 80017ba:	bf00      	nop
 80017bc:	20001610 	.word	0x20001610
 80017c0:	20000ff0 	.word	0x20000ff0
 80017c4:	20001060 	.word	0x20001060
 80017c8:	20001124 	.word	0x20001124
 80017cc:	20001194 	.word	0x20001194
 80017d0:	20000cc4 	.word	0x20000cc4
 80017d4:	20001514 	.word	0x20001514

080017d8 <_ZN10LoRa_class12packet_beginEv>:
    if (packet_end(wait))
        return true;
    return false;
}
// Объявление пакета
bool LoRa_class::packet_begin() {
 80017d8:	b570      	push	{r4, r5, r6, lr}
 80017da:	4605      	mov	r5, r0
    mode_STDBY();
    field_set(FifoAddrPtr, _FifoTxBaseAddr);
 80017dc:	2601      	movs	r6, #1
bool LoRa_class::packet_begin() {
 80017de:	b086      	sub	sp, #24
    mode_STDBY();
 80017e0:	f7ff fd55 	bl	800128e <_ZN10LoRa_class10mode_STDBYEv>
    field_set(FifoAddrPtr, _FifoTxBaseAddr);
 80017e4:	4c0a      	ldr	r4, [pc, #40]	; (8001810 <_ZN10LoRa_class12packet_beginEv+0x38>)
 80017e6:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 80017ea:	9605      	str	r6, [sp, #20]
 80017ec:	9304      	str	r3, [sp, #16]
 80017ee:	f104 030c 	add.w	r3, r4, #12
 80017f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017f4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80017f8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80017fc:	4628      	mov	r0, r5
 80017fe:	f7ff fcb8 	bl	8001172 <_ZN10LoRa_class9field_setE13Address_fieldmb>
    _packet_length = 0;
 8001802:	2300      	movs	r3, #0
    return true;
}
 8001804:	4630      	mov	r0, r6
    _packet_length = 0;
 8001806:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
}
 800180a:	b006      	add	sp, #24
 800180c:	bd70      	pop	{r4, r5, r6, pc}
 800180e:	bf00      	nop
 8001810:	20000fd4 	.word	0x20000fd4

08001814 <_ZN10LoRa_class12packet_writeEPhh>:
// Отправка данных в пакет buffer, size=None? (len)
bool LoRa_class::packet_write(uint8_t* packet, uint8_t len) {
 8001814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len + _packet_length > 255)
 8001818:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
bool LoRa_class::packet_write(uint8_t* packet, uint8_t len) {
 800181c:	b086      	sub	sp, #24
    if (len + _packet_length > 255)
 800181e:	4413      	add	r3, r2
 8001820:	2bff      	cmp	r3, #255	; 0xff
bool LoRa_class::packet_write(uint8_t* packet, uint8_t len) {
 8001822:	4604      	mov	r4, r0
 8001824:	4689      	mov	r9, r1
 8001826:	4690      	mov	r8, r2
    if (len + _packet_length > 255)
 8001828:	dc2d      	bgt.n	8001886 <_ZN10LoRa_class12packet_writeEPhh+0x72>
        return true;
    _packet_length += len;
 800182a:	460f      	mov	r7, r1
 800182c:	f04f 0a01 	mov.w	sl, #1
    for(int i = 0; i < len; ++i)
        field_set(Fifo, packet[i]);
 8001830:	4d16      	ldr	r5, [pc, #88]	; (800188c <_ZN10LoRa_class12packet_writeEPhh+0x78>)
    _packet_length += len;
 8001832:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
        field_set(Fifo, packet[i]);
 8001836:	f105 060c 	add.w	r6, r5, #12
    for(int i = 0; i < len; ++i)
 800183a:	eba7 0309 	sub.w	r3, r7, r9
 800183e:	4598      	cmp	r8, r3
 8001840:	dd0d      	ble.n	800185e <_ZN10LoRa_class12packet_writeEPhh+0x4a>
        field_set(Fifo, packet[i]);
 8001842:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001846:	e9cd 3a04 	strd	r3, sl, [sp, #16]
 800184a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800184e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001852:	4620      	mov	r0, r4
 8001854:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001858:	f7ff fc8b 	bl	8001172 <_ZN10LoRa_class9field_setE13Address_fieldmb>
    for(int i = 0; i < len; ++i)
 800185c:	e7ed      	b.n	800183a <_ZN10LoRa_class12packet_writeEPhh+0x26>
    field_set(PayloadLength, _packet_length);
 800185e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001862:	4d0b      	ldr	r5, [pc, #44]	; (8001890 <_ZN10LoRa_class12packet_writeEPhh+0x7c>)
 8001864:	9304      	str	r3, [sp, #16]
 8001866:	f8cd a014 	str.w	sl, [sp, #20]
 800186a:	f105 030c 	add.w	r3, r5, #12
 800186e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001870:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001874:	4620      	mov	r0, r4
 8001876:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800187a:	f7ff fc7a 	bl	8001172 <_ZN10LoRa_class9field_setE13Address_fieldmb>
 800187e:	2000      	movs	r0, #0
    return false;
}
 8001880:	b006      	add	sp, #24
 8001882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return true;
 8001886:	2001      	movs	r0, #1
 8001888:	e7fa      	b.n	8001880 <_ZN10LoRa_class12packet_writeEPhh+0x6c>
 800188a:	bf00      	nop
 800188c:	20000fb8 	.word	0x20000fb8
 8001890:	20001354 	.word	0x20001354

08001894 <_ZN10LoRa_class10packet_endEmb>:
    field_set(PayloadLength, _packet_length);
    return false;
}

// Отправка пакета
bool LoRa_class::packet_end(uint32_t wait, bool sleep) {
 8001894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001898:	468a      	mov	sl, r1
 800189a:	b089      	sub	sp, #36	; 0x24
    mode_TX();
 800189c:	2101      	movs	r1, #1
bool LoRa_class::packet_end(uint32_t wait, bool sleep) {
 800189e:	4605      	mov	r5, r0
 80018a0:	4691      	mov	r9, r2
    mode_TX();
 80018a2:	f7ff fcf7 	bl	8001294 <_ZN10LoRa_class7mode_TXEb>
    bool result = false;
    if(wait > 0) {
 80018a6:	f1ba 0f00 	cmp.w	sl, #0
 80018aa:	d045      	beq.n	8001938 <_ZN10LoRa_class10packet_endEmb+0xa4>
        uint32_t tx_done = 0;
 80018ac:	2400      	movs	r4, #0
 80018ae:	9407      	str	r4, [sp, #28]
        bool signal = false;
        uint32_t time, start_time, read_time;
        int pin_done;
        tx_done = 0;
        for(time = HAL_GetTick(), start_time = time, read_time = time; HAL_GetTick() - time < wait;) {
 80018b0:	f003 fdf2 	bl	8005498 <HAL_GetTick>
                        signal = true;
                    }
                }
                // Если неработают DIO выходы, был signal или превышено время ожидания
                if ((_dio0_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
                    field_get(TxDone, &tx_done, true);
 80018b4:	f04f 0b01 	mov.w	fp, #1
        for(time = HAL_GetTick(), start_time = time, read_time = time; HAL_GetTick() - time < wait;) {
 80018b8:	4680      	mov	r8, r0
                    field_get(TxDone, &tx_done, true);
 80018ba:	4e21      	ldr	r6, [pc, #132]	; (8001940 <_ZN10LoRa_class10packet_endEmb+0xac>)
 80018bc:	f106 070c 	add.w	r7, r6, #12
        for(time = HAL_GetTick(), start_time = time, read_time = time; HAL_GetTick() - time < wait;) {
 80018c0:	f003 fdea 	bl	8005498 <HAL_GetTick>
 80018c4:	eba0 0008 	sub.w	r0, r0, r8
 80018c8:	4582      	cmp	sl, r0
 80018ca:	d92d      	bls.n	8001928 <_ZN10LoRa_class10packet_endEmb+0x94>
            if(HAL_GetTick() - read_time > 10) {
 80018cc:	f003 fde4 	bl	8005498 <HAL_GetTick>
 80018d0:	eba0 0008 	sub.w	r0, r0, r8
 80018d4:	280a      	cmp	r0, #10
 80018d6:	d9f3      	bls.n	80018c0 <_ZN10LoRa_class10packet_endEmb+0x2c>
                if (_dio0_pin != 0) {
 80018d8:	8aa9      	ldrh	r1, [r5, #20]
 80018da:	b129      	cbz	r1, 80018e8 <_ZN10LoRa_class10packet_endEmb+0x54>
                	pin_done = HAL_GPIO_ReadPin(_dio0_port, _dio0_pin);
 80018dc:	69a8      	ldr	r0, [r5, #24]
 80018de:	f003 ff73 	bl	80057c8 <HAL_GPIO_ReadPin>
                        signal = true;
 80018e2:	2801      	cmp	r0, #1
 80018e4:	bf08      	it	eq
 80018e6:	2401      	moveq	r4, #1
                if ((_dio0_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 80018e8:	8aab      	ldrh	r3, [r5, #20]
 80018ea:	b99b      	cbnz	r3, 8001914 <_ZN10LoRa_class10packet_endEmb+0x80>
                    field_get(TxDone, &tx_done, true);
 80018ec:	ab07      	add	r3, sp, #28
 80018ee:	f8cd b014 	str.w	fp, [sp, #20]
 80018f2:	9304      	str	r3, [sp, #16]
 80018f4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80018f8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80018fc:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001900:	4628      	mov	r0, r5
 8001902:	f7ff fc75 	bl	80011f0 <_ZN10LoRa_class9field_getE13Address_fieldPmb>
                }
                if(tx_done != 0) {
 8001906:	9b07      	ldr	r3, [sp, #28]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0d9      	beq.n	80018c0 <_ZN10LoRa_class10packet_endEmb+0x2c>
                    break;
                }
            }
        }
        if(sleep && (tx_done != 0)) {
 800190c:	f1b9 0f00 	cmp.w	r9, #0
 8001910:	d10f      	bne.n	8001932 <_ZN10LoRa_class10packet_endEmb+0x9e>
 8001912:	e011      	b.n	8001938 <_ZN10LoRa_class10packet_endEmb+0xa4>
                if ((_dio0_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 8001914:	f003 fdc0 	bl	8005498 <HAL_GetTick>
 8001918:	eba0 0008 	sub.w	r0, r0, r8
 800191c:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8001920:	d8e4      	bhi.n	80018ec <_ZN10LoRa_class10packet_endEmb+0x58>
 8001922:	2c00      	cmp	r4, #0
 8001924:	d1e2      	bne.n	80018ec <_ZN10LoRa_class10packet_endEmb+0x58>
 8001926:	e7ee      	b.n	8001906 <_ZN10LoRa_class10packet_endEmb+0x72>
        if(sleep && (tx_done != 0)) {
 8001928:	f1b9 0f00 	cmp.w	r9, #0
 800192c:	d004      	beq.n	8001938 <_ZN10LoRa_class10packet_endEmb+0xa4>
 800192e:	9b07      	ldr	r3, [sp, #28]
 8001930:	b113      	cbz	r3, 8001938 <_ZN10LoRa_class10packet_endEmb+0xa4>
            mode_sleep();
 8001932:	4628      	mov	r0, r5
 8001934:	f7ff fca8 	bl	8001288 <_ZN10LoRa_class10mode_sleepEv>
        }
    }
    return result;
}
 8001938:	2000      	movs	r0, #0
 800193a:	b009      	add	sp, #36	; 0x24
 800193c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001940:	20001568 	.word	0x20001568

08001944 <_ZN10LoRa_class13sender_packetEPhhm>:
bool LoRa_class::sender_packet(uint8_t* packet, uint8_t len, uint32_t wait) {
 8001944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001946:	4604      	mov	r4, r0
 8001948:	460e      	mov	r6, r1
 800194a:	4617      	mov	r7, r2
 800194c:	461d      	mov	r5, r3
    packet_begin();
 800194e:	f7ff ff43 	bl	80017d8 <_ZN10LoRa_class12packet_beginEv>
    if (packet_write(packet, len))
 8001952:	463a      	mov	r2, r7
 8001954:	4631      	mov	r1, r6
 8001956:	4620      	mov	r0, r4
 8001958:	f7ff ff5c 	bl	8001814 <_ZN10LoRa_class12packet_writeEPhh>
 800195c:	4602      	mov	r2, r0
 800195e:	b928      	cbnz	r0, 800196c <_ZN10LoRa_class13sender_packetEPhhm+0x28>
    if (packet_end(wait))
 8001960:	4629      	mov	r1, r5
 8001962:	4620      	mov	r0, r4
}
 8001964:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if (packet_end(wait))
 8001968:	f7ff bf94 	b.w	8001894 <_ZN10LoRa_class10packet_endEmb>
}
 800196c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001970 <_GLOBAL__sub_I_LoRa>:
class LoRa_class LoRa;
 8001970:	4801      	ldr	r0, [pc, #4]	; (8001978 <_GLOBAL__sub_I_LoRa+0x8>)
 8001972:	f7ff bbef 	b.w	8001154 <_ZN10LoRa_classC1Ev>
 8001976:	bf00      	nop
 8001978:	20000120 	.word	0x20000120

0800197c <_GLOBAL__sub_D_LoRa>:
 800197c:	4801      	ldr	r0, [pc, #4]	; (8001984 <_GLOBAL__sub_D_LoRa+0x8>)
 800197e:	f7ff bbb6 	b.w	80010ee <_ZN10LoRa_classD1Ev>
 8001982:	bf00      	nop
 8001984:	20000120 	.word	0x20000120

08001988 <_ZN11LoRa_packetC1Ev>:
#include "LoRa_packet.h"

LoRa_packet::LoRa_packet() {}
 8001988:	2200      	movs	r2, #0
 800198a:	2100      	movs	r1, #0
 800198c:	6002      	str	r2, [r0, #0]
 800198e:	8082      	strh	r2, [r0, #4]
 8001990:	6081      	str	r1, [r0, #8]
 8001992:	7302      	strb	r2, [r0, #12]
 8001994:	4770      	bx	lr

08001996 <_ZN11LoRa_packetD1Ev>:

LoRa_packet::LoRa_packet(uint8_t* data, uint8_t len, bool crc_error, uint8_t rssi, float snr) {
    set_packet(data, len, crc_error, rssi, snr);
}

LoRa_packet::~LoRa_packet() {
 8001996:	b510      	push	{r4, lr}
 8001998:	4604      	mov	r4, r0
    if(_data != nullptr) {
 800199a:	6800      	ldr	r0, [r0, #0]
 800199c:	b108      	cbz	r0, 80019a2 <_ZN11LoRa_packetD1Ev+0xc>
        delete[] _data;
 800199e:	f007 fd7b 	bl	8009498 <_ZdaPv>
        _data = nullptr;
        _len = 0;
    }
}
 80019a2:	4620      	mov	r0, r4
 80019a4:	bd10      	pop	{r4, pc}

080019a6 <_ZN13LoRa_registerD1Ev>:
    _send = false;
    clear();
    init(spi, nss_port, nss_pin);
}
LoRa_register::~LoRa_register() {
}
 80019a6:	4770      	bx	lr

080019a8 <_ZN13LoRa_register4initEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:

void LoRa_register::init(SPI_HandleTypeDef* spi, GPIO_TypeDef* nss_port, uint16_t nss_pin) {
    _spi = spi;
 80019a8:	6001      	str	r1, [r0, #0]
    _nss_port = nss_port;
 80019aa:	6082      	str	r2, [r0, #8]
	_nss_pin = nss_pin;
 80019ac:	8083      	strh	r3, [r0, #4]
}
 80019ae:	4770      	bx	lr

080019b0 <_ZN13LoRa_register5clearEv>:

void LoRa_register::clear() {
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
        _registers_data[i] = 0;
 80019b0:	2200      	movs	r2, #0
 80019b2:	f100 030c 	add.w	r3, r0, #12
 80019b6:	f100 017c 	add.w	r1, r0, #124	; 0x7c
 80019ba:	f803 2b01 	strb.w	r2, [r3], #1
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 80019be:	428b      	cmp	r3, r1
        _registers_state[i] = false;
 80019c0:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 80019c4:	d1f9      	bne.n	80019ba <_ZN13LoRa_register5clearEv+0xa>
    }
    _send = false;
 80019c6:	f880 20ec 	strb.w	r2, [r0, #236]	; 0xec
}
 80019ca:	4770      	bx	lr

080019cc <_ZN13LoRa_registerC1Ev>:
LoRa_register::LoRa_register() {
 80019cc:	b570      	push	{r4, r5, r6, lr}
 80019ce:	4604      	mov	r4, r0
 80019d0:	4e27      	ldr	r6, [pc, #156]	; (8001a70 <_ZN13LoRa_registerC1Ev+0xa4>)
 80019d2:	f100 05f0 	add.w	r5, r0, #240	; 0xf0
 80019d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80019d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019da:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80019de:	4e25      	ldr	r6, [pc, #148]	; (8001a74 <_ZN13LoRa_registerC1Ev+0xa8>)
 80019e0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80019e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80019e6:	f504 7586 	add.w	r5, r4, #268	; 0x10c
 80019ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ec:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80019f0:	4e21      	ldr	r6, [pc, #132]	; (8001a78 <_ZN13LoRa_registerC1Ev+0xac>)
 80019f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80019f6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80019f8:	f504 7594 	add.w	r5, r4, #296	; 0x128
 80019fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019fe:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001a02:	4e1e      	ldr	r6, [pc, #120]	; (8001a7c <_ZN13LoRa_registerC1Ev+0xb0>)
 8001a04:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001a08:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a0a:	f504 75a2 	add.w	r5, r4, #324	; 0x144
 8001a0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a10:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001a14:	4e1a      	ldr	r6, [pc, #104]	; (8001a80 <_ZN13LoRa_registerC1Ev+0xb4>)
 8001a16:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001a1a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a1c:	f504 75b0 	add.w	r5, r4, #352	; 0x160
 8001a20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a22:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001a26:	4e17      	ldr	r6, [pc, #92]	; (8001a84 <_ZN13LoRa_registerC1Ev+0xb8>)
 8001a28:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001a2c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a2e:	f504 75be 	add.w	r5, r4, #380	; 0x17c
 8001a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a34:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001a38:	4e13      	ldr	r6, [pc, #76]	; (8001a88 <_ZN13LoRa_registerC1Ev+0xbc>)
 8001a3a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001a3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a40:	f504 75cc 	add.w	r5, r4, #408	; 0x198
 8001a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a46:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001a4a:	4e10      	ldr	r6, [pc, #64]	; (8001a8c <_ZN13LoRa_registerC1Ev+0xc0>)
 8001a4c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001a50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a52:	f504 75da 	add.w	r5, r4, #436	; 0x1b4
 8001a56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a58:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    _send = false;
 8001a5c:	2300      	movs	r3, #0
LoRa_register::LoRa_register() {
 8001a5e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    clear();
 8001a62:	4620      	mov	r0, r4
    _send = false;
 8001a64:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    clear();
 8001a68:	f7ff ffa2 	bl	80019b0 <_ZN13LoRa_register5clearEv>
}
 8001a6c:	bd70      	pop	{r4, r5, r6, pc}
 8001a6e:	bf00      	nop
 8001a70:	200014a4 	.word	0x200014a4
 8001a74:	20001450 	.word	0x20001450
 8001a78:	2000131c 	.word	0x2000131c
 8001a7c:	200015a0 	.word	0x200015a0
 8001a80:	20001568 	.word	0x20001568
 8001a84:	20000df8 	.word	0x20000df8
 8001a88:	20000f64 	.word	0x20000f64
 8001a8c:	20000dc0 	.word	0x20000dc0

08001a90 <_ZN13LoRa_register16_single_transferEhh>:
    return _single_transfer(address & 0x7f, 0x00);
}
void LoRa_register::_write_register(uint8_t address, uint8_t value) {
    _single_transfer(address | 0x80, value);
}
uint8_t LoRa_register::_single_transfer(uint8_t address, uint8_t value) {
 8001a90:	b510      	push	{r4, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	4604      	mov	r4, r0
 8001a96:	f88d 100f 	strb.w	r1, [sp, #15]
 8001a9a:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t response;
    // Подача NSS сигнала
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 8001a9e:	8881      	ldrh	r1, [r0, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	6880      	ldr	r0, [r0, #8]
 8001aa4:	f003 fe96 	bl	80057d4 <HAL_GPIO_WritePin>
    // Отправка бита действия и 7 бит адреса
    HAL_SPI_TransmitReceive(_spi, &address, &response, 1, 1000);
 8001aa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aac:	f10d 0217 	add.w	r2, sp, #23
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	f10d 010f 	add.w	r1, sp, #15
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	6820      	ldr	r0, [r4, #0]
 8001aba:	f005 fc69 	bl	8007390 <HAL_SPI_TransmitReceive>
 8001abe:	2332      	movs	r3, #50	; 0x32
    for(int i = 0; i < 50; i++) __NOP();
 8001ac0:	bf00      	nop
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	d1fc      	bne.n	8001ac0 <_ZN13LoRa_register16_single_transferEhh+0x30>
    // Отправка/приём байта значения
    HAL_SPI_TransmitReceive(_spi, &value, &response, 1, 1000);
 8001ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aca:	f10d 0217 	add.w	r2, sp, #23
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	f10d 010e 	add.w	r1, sp, #14
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	6820      	ldr	r0, [r4, #0]
 8001ad8:	f005 fc5a 	bl	8007390 <HAL_SPI_TransmitReceive>
 8001adc:	2314      	movs	r3, #20
    for(int i = 0; i < 20; i++) __NOP();
 8001ade:	bf00      	nop
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	d1fc      	bne.n	8001ade <_ZN13LoRa_register16_single_transferEhh+0x4e>
//    if(address == 66) {	extern uint8_t begin_data; begin_data = response; }
    // Прекращение NSS сигнала
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_SET);
 8001ae4:	68a0      	ldr	r0, [r4, #8]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	88a1      	ldrh	r1, [r4, #4]
 8001aea:	f003 fe73 	bl	80057d4 <HAL_GPIO_WritePin>
    return response;
}
 8001aee:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001af2:	b006      	add	sp, #24
 8001af4:	bd10      	pop	{r4, pc}

08001af6 <_ZN13LoRa_register14_read_registerEh>:
    return _single_transfer(address & 0x7f, 0x00);
 8001af6:	2200      	movs	r2, #0
 8001af8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001afc:	f7ff bfc8 	b.w	8001a90 <_ZN13LoRa_register16_single_transferEhh>

08001b00 <_ZN13LoRa_register15_write_registerEhh>:
    _single_transfer(address | 0x80, value);
 8001b00:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001b04:	f7ff bfc4 	b.w	8001a90 <_ZN13LoRa_register16_single_transferEhh>

08001b08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
	    _M_create_storage(__n);
	  }
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001b08:	b510      	push	{r4, lr}
 8001b0a:	4604      	mov	r4, r0
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8001b0c:	6800      	ldr	r0, [r0, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 8001b0e:	b108      	cbz	r0, 8001b14 <_ZNSt12_Vector_baseIhSaIhEED1Ev+0xc>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8001b10:	f007 fce2 	bl	80094d8 <_ZdlPv>
		      - this->_M_impl._M_start); }
 8001b14:	4620      	mov	r0, r4
 8001b16:	bd10      	pop	{r4, pc}

08001b18 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.26>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, std::true_type) noexcept
 8001b18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8001b1a:	2300      	movs	r3, #0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001b1c:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 8001b1e:	6003      	str	r3, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001b20:	9201      	str	r2, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001b22:	6842      	ldr	r2, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 8001b24:	6043      	str	r3, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8001b26:	9202      	str	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001b28:	6882      	ldr	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
 8001b2a:	6083      	str	r3, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8001b2c:	9203      	str	r2, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001b2e:	680a      	ldr	r2, [r1, #0]
 8001b30:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001b32:	600b      	str	r3, [r1, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001b34:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 8001b36:	684a      	ldr	r2, [r1, #4]
 8001b38:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8001b3a:	604b      	str	r3, [r1, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001b3c:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
 8001b3e:	688a      	ldr	r2, [r1, #8]
 8001b40:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8001b42:	608b      	str	r3, [r1, #8]
		      _M_get_Tp_allocator()); }
 8001b44:	a801      	add	r0, sp, #4
 8001b46:	f7ff ffdf 	bl	8001b08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      {
	vector __tmp(get_allocator());
	this->_M_impl._M_swap_data(__tmp._M_impl);
	this->_M_impl._M_swap_data(__x._M_impl);
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
      }
 8001b4a:	b005      	add	sp, #20
 8001b4c:	f85d fb04 	ldr.w	pc, [sp], #4

08001b50 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8001b50:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001b52:	e9d0 3400 	ldrd	r3, r4, [r0]
 8001b56:	1ae3      	subs	r3, r4, r3
	if (max_size() - size() < __n)
 8001b58:	43d8      	mvns	r0, r3
 8001b5a:	4288      	cmp	r0, r1
 8001b5c:	d202      	bcs.n	8001b64 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x14>
	  __throw_length_error(__N(__s));
 8001b5e:	4610      	mov	r0, r2
 8001b60:	f007 fcbc 	bl	80094dc <_ZSt20__throw_length_errorPKc>
 8001b64:	4299      	cmp	r1, r3
 8001b66:	bf38      	it	cc
 8001b68:	4619      	movcc	r1, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001b6a:	1858      	adds	r0, r3, r1
      }
 8001b6c:	bf28      	it	cs
 8001b6e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8001b72:	bd10      	pop	{r4, pc}

08001b74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001b74:	b510      	push	{r4, lr}
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 8001b76:	1a0c      	subs	r4, r1, r0
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001b78:	4613      	mov	r3, r2
	  if (_Num)
 8001b7a:	d005      	beq.n	8001b88 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001b7c:	4601      	mov	r1, r0
 8001b7e:	4622      	mov	r2, r4
 8001b80:	4618      	mov	r0, r3
 8001b82:	f008 fd24 	bl	800a5ce <memmove>
 8001b86:	4603      	mov	r3, r0
	  return __result + _Num;
	}
 8001b88:	1918      	adds	r0, r3, r4
 8001b8a:	bd10      	pop	{r4, pc}

08001b8c <_ZNSt6vectorIhSaIhEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPhS1_EE>:
      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
 8001b8c:	b538      	push	{r3, r4, r5, lr}
 8001b8e:	4605      	mov	r5, r0
 8001b90:	460c      	mov	r4, r1
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current + __n); }
 8001b92:	1c48      	adds	r0, r1, #1
      : _M_current(__i) { }
 8001b94:	6869      	ldr	r1, [r5, #4]
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
 8001b96:	4281      	cmp	r1, r0
 8001b98:	d002      	beq.n	8001ba0 <_ZNSt6vectorIhSaIhEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPhS1_EE+0x14>
	                     && __is_pointer<_II>::__value
	                     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
	                      _Category>::__copy_m(__first, __last, __result);
 8001b9a:	4622      	mov	r2, r4
 8001b9c:	f7ff ffea 	bl	8001b74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
 8001ba0:	686b      	ldr	r3, [r5, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      return __position;
    }
 8001ba2:	4620      	mov	r0, r4
      --this->_M_impl._M_finish;
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	606b      	str	r3, [r5, #4]
    }
 8001ba8:	bd38      	pop	{r3, r4, r5, pc}
	...

08001bac <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8001bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001bb0:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
 8001bb4:	429e      	cmp	r6, r3
      vector<_Tp, _Alloc>::
 8001bb6:	4604      	mov	r4, r0
 8001bb8:	4689      	mov	r9, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001bba:	d007      	beq.n	8001bcc <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x20>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001bbc:	b10e      	cbz	r6, 8001bc2 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x16>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8001bbe:	780b      	ldrb	r3, [r1, #0]
 8001bc0:	7033      	strb	r3, [r6, #0]
	    ++this->_M_impl._M_finish;
 8001bc2:	6863      	ldr	r3, [r4, #4]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	6063      	str	r3, [r4, #4]
      }
 8001bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8001bcc:	4a13      	ldr	r2, [pc, #76]	; (8001c1c <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x70>)
 8001bce:	2101      	movs	r1, #1
 8001bd0:	f7ff ffbe 	bl	8001b50 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8001bd4:	6827      	ldr	r7, [r4, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001bd6:	4680      	mov	r8, r0
 8001bd8:	1bf7      	subs	r7, r6, r7
 8001bda:	b1e0      	cbz	r0, 8001c16 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x6a>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001bdc:	f007 fc62 	bl	80094a4 <_Znwj>
 8001be0:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001be2:	42fd      	cmn	r5, r7
 8001be4:	bf18      	it	ne
 8001be6:	f899 3000 	ldrbne.w	r3, [r9]
 8001bea:	4631      	mov	r1, r6
 8001bec:	bf18      	it	ne
 8001bee:	55eb      	strbne	r3, [r5, r7]
 8001bf0:	462a      	mov	r2, r5
 8001bf2:	6820      	ldr	r0, [r4, #0]
 8001bf4:	f7ff ffbe 	bl	8001b74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001bf8:	6861      	ldr	r1, [r4, #4]
 8001bfa:	1c42      	adds	r2, r0, #1
 8001bfc:	4630      	mov	r0, r6
 8001bfe:	f7ff ffb9 	bl	8001b74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001c02:	4606      	mov	r6, r0
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001c04:	6820      	ldr	r0, [r4, #0]
	if (__p)
 8001c06:	b108      	cbz	r0, 8001c0c <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x60>
	::operator delete(__p);
 8001c08:	f007 fc66 	bl	80094d8 <_ZdlPv>
		    _M_get_Tp_allocator());
      _M_deallocate(this->_M_impl._M_start,
		    this->_M_impl._M_end_of_storage
		    - this->_M_impl._M_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
 8001c0c:	e9c4 5600 	strd	r5, r6, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001c10:	4445      	add	r5, r8
 8001c12:	60a5      	str	r5, [r4, #8]
      }
 8001c14:	e7d8      	b.n	8001bc8 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x1c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001c16:	4605      	mov	r5, r0
 8001c18:	e7e3      	b.n	8001be2 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x36>
 8001c1a:	bf00      	nop
 8001c1c:	0800a830 	.word	0x0800a830

08001c20 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_>:
bool LoRa_register::check_read(Address_field* fields, uint8_t amt_fields, std::vector<uint8_t>* reg_read, std::vector<uint8_t>* reg_not_read) {
 8001c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c24:	461e      	mov	r6, r3
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8001c26:	2300      	movs	r3, #0
bool LoRa_register::check_read(Address_field* fields, uint8_t amt_fields, std::vector<uint8_t>* reg_read, std::vector<uint8_t>* reg_not_read) {
 8001c28:	4692      	mov	sl, r2
 8001c2a:	4689      	mov	r9, r1
        reg_bit[i] = 0;
 8001c2c:	461a      	mov	r2, r3
bool LoRa_register::check_read(Address_field* fields, uint8_t amt_fields, std::vector<uint8_t>* reg_read, std::vector<uint8_t>* reg_not_read) {
 8001c2e:	b0a3      	sub	sp, #140	; 0x8c
 8001c30:	9001      	str	r0, [sp, #4]
        reg_bit[i] = 0;
 8001c32:	af06      	add	r7, sp, #24
 8001c34:	55da      	strb	r2, [r3, r7]
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8001c36:	3301      	adds	r3, #1
 8001c38:	2b70      	cmp	r3, #112	; 0x70
 8001c3a:	d1fb      	bne.n	8001c34 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x14>
    for(int i = 0; i < amt_fields; ++i) {
 8001c3c:	f04f 0800 	mov.w	r8, #0
 8001c40:	f04f 0b1c 	mov.w	fp, #28
 8001c44:	45c2      	cmp	sl, r8
 8001c46:	dd25      	ble.n	8001c94 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x74>
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8001c48:	2400      	movs	r4, #0
 8001c4a:	fb0b 9508 	mla	r5, fp, r8, r9
 8001c4e:	4628      	mov	r0, r5
 8001c50:	f7ff fa4b 	bl	80010ea <_ZN13Address_field13get_reg_countEv>
 8001c54:	42a0      	cmp	r0, r4
 8001c56:	dd1a      	ble.n	8001c8e <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x6e>
            adr = fields[i].get_registers()[j].address();
 8001c58:	4628      	mov	r0, r5
 8001c5a:	f7ff fa44 	bl	80010e6 <_ZN13Address_field13get_registersEv>
 8001c5e:	00e1      	lsls	r1, r4, #3
 8001c60:	4408      	add	r0, r1
 8001c62:	9103      	str	r1, [sp, #12]
 8001c64:	f7ff f943 	bl	8000eee <_ZN8Register7addressEv>
 8001c68:	9002      	str	r0, [sp, #8]
            reg_bit[adr] |= fields[i].get_registers()[j].mask();
 8001c6a:	4628      	mov	r0, r5
 8001c6c:	f7ff fa3b 	bl	80010e6 <_ZN13Address_field13get_registersEv>
 8001c70:	9903      	ldr	r1, [sp, #12]
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8001c72:	3401      	adds	r4, #1
            reg_bit[adr] |= fields[i].get_registers()[j].mask();
 8001c74:	4408      	add	r0, r1
 8001c76:	f7ff f93c 	bl	8000ef2 <_ZN8Register4maskEv>
 8001c7a:	9b02      	ldr	r3, [sp, #8]
 8001c7c:	aa22      	add	r2, sp, #136	; 0x88
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	4413      	add	r3, r2
 8001c82:	f813 1c70 	ldrb.w	r1, [r3, #-112]
 8001c86:	4308      	orrs	r0, r1
 8001c88:	f803 0c70 	strb.w	r0, [r3, #-112]
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8001c8c:	e7df      	b.n	8001c4e <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x2e>
    for(int i = 0; i < amt_fields; ++i) {
 8001c8e:	f108 0801 	add.w	r8, r8, #1
 8001c92:	e7d7      	b.n	8001c44 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x24>
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8001c94:	2400      	movs	r4, #0
    bool check_reg_read = false;
 8001c96:	4625      	mov	r5, r4
        if (reg_bit[i] != 0x00) {
 8001c98:	5d3b      	ldrb	r3, [r7, r4]
 8001c9a:	b17b      	cbz	r3, 8001cbc <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x9c>
            if ((reg_bit[i] == 0xFF) || (_registers_state[i] == true)) {
 8001c9c:	2bff      	cmp	r3, #255	; 0xff
 8001c9e:	d004      	beq.n	8001caa <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x8a>
 8001ca0:	9b01      	ldr	r3, [sp, #4]
 8001ca2:	4423      	add	r3, r4
 8001ca4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001ca8:	b17b      	cbz	r3, 8001cca <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0xaa>
                if(reg_not_read != nullptr)
 8001caa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001cac:	b133      	cbz	r3, 8001cbc <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x9c>
      { emplace_back(std::move(__x)); }
 8001cae:	f10d 0117 	add.w	r1, sp, #23
 8001cb2:	4618      	mov	r0, r3
                    reg_not_read->push_back(i);
 8001cb4:	f88d 4017 	strb.w	r4, [sp, #23]
 8001cb8:	f7ff ff78 	bl	8001bac <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8001cbc:	3401      	adds	r4, #1
 8001cbe:	2c70      	cmp	r4, #112	; 0x70
 8001cc0:	d1ea      	bne.n	8001c98 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x78>
}
 8001cc2:	4628      	mov	r0, r5
 8001cc4:	b023      	add	sp, #140	; 0x8c
 8001cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(reg_read != nullptr)
 8001cca:	b136      	cbz	r6, 8001cda <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0xba>
 8001ccc:	f10d 0117 	add.w	r1, sp, #23
 8001cd0:	4630      	mov	r0, r6
                    reg_read->push_back(i);
 8001cd2:	f88d 4017 	strb.w	r4, [sp, #23]
 8001cd6:	f7ff ff69 	bl	8001bac <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
                check_reg_read = true;
 8001cda:	2501      	movs	r5, #1
 8001cdc:	e7ee      	b.n	8001cbc <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x9c>
	...

08001ce0 <_ZNSt6vectorIhSaIhEE9push_backERKh>:
      push_back(const value_type& __x)
 8001ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001ce4:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
 8001ce8:	429e      	cmp	r6, r3
      push_back(const value_type& __x)
 8001cea:	4604      	mov	r4, r0
 8001cec:	4689      	mov	r9, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001cee:	d007      	beq.n	8001d00 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x20>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001cf0:	b10e      	cbz	r6, 8001cf6 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x16>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8001cf2:	780b      	ldrb	r3, [r1, #0]
 8001cf4:	7033      	strb	r3, [r6, #0]
	    ++this->_M_impl._M_finish;
 8001cf6:	6863      	ldr	r3, [r4, #4]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	6063      	str	r3, [r4, #4]
      }
 8001cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      const size_type __len =
 8001d00:	4a13      	ldr	r2, [pc, #76]	; (8001d50 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x70>)
 8001d02:	2101      	movs	r1, #1
 8001d04:	f7ff ff24 	bl	8001b50 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8001d08:	6827      	ldr	r7, [r4, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001d0a:	4680      	mov	r8, r0
 8001d0c:	1bf7      	subs	r7, r6, r7
 8001d0e:	b1e0      	cbz	r0, 8001d4a <_ZNSt6vectorIhSaIhEE9push_backERKh+0x6a>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001d10:	f007 fbc8 	bl	80094a4 <_Znwj>
 8001d14:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001d16:	42fd      	cmn	r5, r7
 8001d18:	bf18      	it	ne
 8001d1a:	f899 3000 	ldrbne.w	r3, [r9]
 8001d1e:	4631      	mov	r1, r6
 8001d20:	bf18      	it	ne
 8001d22:	55eb      	strbne	r3, [r5, r7]
 8001d24:	462a      	mov	r2, r5
 8001d26:	6820      	ldr	r0, [r4, #0]
 8001d28:	f7ff ff24 	bl	8001b74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001d2c:	6861      	ldr	r1, [r4, #4]
 8001d2e:	1c42      	adds	r2, r0, #1
 8001d30:	4630      	mov	r0, r6
 8001d32:	f7ff ff1f 	bl	8001b74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001d36:	4606      	mov	r6, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001d38:	6820      	ldr	r0, [r4, #0]
	if (__p)
 8001d3a:	b108      	cbz	r0, 8001d40 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x60>
	::operator delete(__p);
 8001d3c:	f007 fbcc 	bl	80094d8 <_ZdlPv>
      this->_M_impl._M_finish = __new_finish;
 8001d40:	e9c4 5600 	strd	r5, r6, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001d44:	4445      	add	r5, r8
 8001d46:	60a5      	str	r5, [r4, #8]
      }
 8001d48:	e7d8      	b.n	8001cfc <_ZNSt6vectorIhSaIhEE9push_backERKh+0x1c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001d4a:	4605      	mov	r5, r0
 8001d4c:	e7e3      	b.n	8001d16 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x36>
 8001d4e:	bf00      	nop
 8001d50:	0800a830 	.word	0x0800a830

08001d54 <_ZN13LoRa_register15field_registersEP13Address_fieldh>:
std::vector<uint8_t> LoRa_register::field_registers(Address_field* fields, uint8_t amt_fields) {
 8001d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d58:	4698      	mov	r8, r3
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	b09f      	sub	sp, #124	; 0x7c
 8001d5e:	4604      	mov	r4, r0
 8001d60:	e9c0 3300 	strd	r3, r3, [r0]
 8001d64:	6083      	str	r3, [r0, #8]
    if((fields == nullptr) || (amt_fields == 0))
 8001d66:	4617      	mov	r7, r2
 8001d68:	b3aa      	cbz	r2, 8001dd6 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x82>
 8001d6a:	f1b8 0f00 	cmp.w	r8, #0
 8001d6e:	d032      	beq.n	8001dd6 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x82>
        reg_add[i] = false;
 8001d70:	4619      	mov	r1, r3
 8001d72:	aa02      	add	r2, sp, #8
 8001d74:	5499      	strb	r1, [r3, r2]
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8001d76:	3301      	adds	r3, #1
 8001d78:	2b70      	cmp	r3, #112	; 0x70
 8001d7a:	d1fb      	bne.n	8001d74 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x20>
    for(int i = 0; i < amt_fields; ++i) {
 8001d7c:	2500      	movs	r5, #0
 8001d7e:	f04f 0a1c 	mov.w	sl, #28
 8001d82:	45a8      	cmp	r8, r5
 8001d84:	dd27      	ble.n	8001dd6 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x82>
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8001d86:	2600      	movs	r6, #0
                reg_add[adr] = true;
 8001d88:	f04f 0b01 	mov.w	fp, #1
 8001d8c:	fb0a 7905 	mla	r9, sl, r5, r7
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8001d90:	4648      	mov	r0, r9
 8001d92:	f7ff f9aa 	bl	80010ea <_ZN13Address_field13get_reg_countEv>
 8001d96:	42b0      	cmp	r0, r6
 8001d98:	dd1b      	ble.n	8001dd2 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x7e>
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 8001d9a:	4648      	mov	r0, r9
 8001d9c:	f7ff f9a3 	bl	80010e6 <_ZN13Address_field13get_registersEv>
 8001da0:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8001da4:	f7ff f8a3 	bl	8000eee <_ZN8Register7addressEv>
            if(reg_add[adr] == false) {
 8001da8:	ab1e      	add	r3, sp, #120	; 0x78
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 8001daa:	b2c0      	uxtb	r0, r0
 8001dac:	f88d 0007 	strb.w	r0, [sp, #7]
            if(reg_add[adr] == false) {
 8001db0:	4418      	add	r0, r3
 8001db2:	f810 3c70 	ldrb.w	r3, [r0, #-112]
 8001db6:	b953      	cbnz	r3, 8001dce <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x7a>
                registers.push_back(adr);
 8001db8:	f10d 0107 	add.w	r1, sp, #7
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	f7ff ff8f 	bl	8001ce0 <_ZNSt6vectorIhSaIhEE9push_backERKh>
                reg_add[adr] = true;
 8001dc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001dc6:	aa1e      	add	r2, sp, #120	; 0x78
 8001dc8:	4413      	add	r3, r2
 8001dca:	f803 bc70 	strb.w	fp, [r3, #-112]
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8001dce:	3601      	adds	r6, #1
 8001dd0:	e7de      	b.n	8001d90 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x3c>
    for(int i = 0; i < amt_fields; ++i) {
 8001dd2:	3501      	adds	r5, #1
 8001dd4:	e7d5      	b.n	8001d82 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x2e>
}
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	b01f      	add	sp, #124	; 0x7c
 8001dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001dde <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>:
std::vector<uint8_t> LoRa_register::check_missing_register(Address_field* fields, uint8_t amt_fields) {
 8001dde:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001de0:	4604      	mov	r4, r0
 8001de2:	2000      	movs	r0, #0
 8001de4:	460e      	mov	r6, r1
 8001de6:	e9c4 0000 	strd	r0, r0, [r4]
 8001dea:	60a0      	str	r0, [r4, #8]
    if((fields == nullptr) || (amt_fields == 0))
 8001dec:	b1e2      	cbz	r2, 8001e28 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x4a>
 8001dee:	b1db      	cbz	r3, 8001e28 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x4a>
    registers = field_registers(fields, amt_fields);
 8001df0:	a801      	add	r0, sp, #4
 8001df2:	f7ff ffaf 	bl	8001d54 <_ZN13LoRa_register15field_registersEP13Address_fieldh>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8001df6:	a901      	add	r1, sp, #4
 8001df8:	4620      	mov	r0, r4
 8001dfa:	f7ff fe8d 	bl	8001b18 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.26>
		      _M_get_Tp_allocator()); }
 8001dfe:	a801      	add	r0, sp, #4
 8001e00:	f7ff fe82 	bl	8001b08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001e04:	e9d4 3500 	ldrd	r3, r5, [r4]
 8001e08:	1aed      	subs	r5, r5, r3
    for(int i = registers.size() - 1; i >= 0; --i) {
 8001e0a:	3d01      	subs	r5, #1
 8001e0c:	2d00      	cmp	r5, #0
 8001e0e:	db0b      	blt.n	8001e28 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x4a>
	return *(this->_M_impl._M_start + __n);
 8001e10:	6823      	ldr	r3, [r4, #0]
 8001e12:	1959      	adds	r1, r3, r5
        if(_registers_state[registers[i]] != false) {
 8001e14:	5d5b      	ldrb	r3, [r3, r5]
 8001e16:	4433      	add	r3, r6
 8001e18:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f4      	beq.n	8001e0a <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x2c>
      { return _M_erase(begin() + (__position - cbegin())); }
 8001e20:	4620      	mov	r0, r4
 8001e22:	f7ff feb3 	bl	8001b8c <_ZNSt6vectorIhSaIhEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPhS1_EE>
 8001e26:	e7f0      	b.n	8001e0a <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x2c>
}
 8001e28:	4620      	mov	r0, r4
 8001e2a:	b004      	add	sp, #16
 8001e2c:	bd70      	pop	{r4, r5, r6, pc}

08001e2e <_ZN13LoRa_register13register_readEP13Address_fieldhb>:
uint8_t LoRa_register::register_read(Address_field* fields, uint8_t amt_fields, bool update) {
 8001e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e32:	461f      	mov	r7, r3
    if (_send)
 8001e34:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
uint8_t LoRa_register::register_read(Address_field* fields, uint8_t amt_fields, bool update) {
 8001e38:	b086      	sub	sp, #24
 8001e3a:	4606      	mov	r6, r0
 8001e3c:	460c      	mov	r4, r1
 8001e3e:	4615      	mov	r5, r2
    if (_send)
 8001e40:	b10b      	cbz	r3, 8001e46 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x18>
    	clear();
 8001e42:	f7ff fdb5 	bl	80019b0 <_ZN13LoRa_register5clearEv>
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8001e46:	2000      	movs	r0, #0
        registers = field_registers(fields, amt_fields);
 8001e48:	462b      	mov	r3, r5
 8001e4a:	e9cd 0000 	strd	r0, r0, [sp]
 8001e4e:	9002      	str	r0, [sp, #8]
 8001e50:	4622      	mov	r2, r4
 8001e52:	4631      	mov	r1, r6
 8001e54:	a803      	add	r0, sp, #12
    if (update) {
 8001e56:	b1ef      	cbz	r7, 8001e94 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x66>
        registers = field_registers(fields, amt_fields);
 8001e58:	f7ff ff7c 	bl	8001d54 <_ZN13LoRa_register15field_registersEP13Address_fieldh>
    for(int i = 0; i < amt_read; ++i) {
 8001e5c:	2700      	movs	r7, #0
        _registers_state[adr] = true;
 8001e5e:	f04f 0801 	mov.w	r8, #1
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8001e62:	a903      	add	r1, sp, #12
 8001e64:	4668      	mov	r0, sp
 8001e66:	f7ff fe57 	bl	8001b18 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.26>
		      _M_get_Tp_allocator()); }
 8001e6a:	a803      	add	r0, sp, #12
 8001e6c:	f7ff fe4c 	bl	8001b08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001e70:	e9dd 3400 	ldrd	r3, r4, [sp]
 8001e74:	1ae4      	subs	r4, r4, r3
    uint8_t amt_read = registers.size();
 8001e76:	b2e4      	uxtb	r4, r4
    for(int i = 0; i < amt_read; ++i) {
 8001e78:	42a7      	cmp	r7, r4
 8001e7a:	da0e      	bge.n	8001e9a <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x6c>
        adr = registers[i];
 8001e7c:	9b00      	ldr	r3, [sp, #0]
        _registers_data[adr] = _read_register(adr);
 8001e7e:	4630      	mov	r0, r6
        adr = registers[i];
 8001e80:	5ddd      	ldrb	r5, [r3, r7]
    for(int i = 0; i < amt_read; ++i) {
 8001e82:	3701      	adds	r7, #1
        _registers_data[adr] = _read_register(adr);
 8001e84:	4629      	mov	r1, r5
 8001e86:	f7ff fe36 	bl	8001af6 <_ZN13LoRa_register14_read_registerEh>
 8001e8a:	4435      	add	r5, r6
 8001e8c:	7328      	strb	r0, [r5, #12]
        _registers_state[adr] = true;
 8001e8e:	f885 807c 	strb.w	r8, [r5, #124]	; 0x7c
    for(int i = 0; i < amt_read; ++i) {
 8001e92:	e7f1      	b.n	8001e78 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x4a>
        registers = check_missing_register(fields, amt_fields);
 8001e94:	f7ff ffa3 	bl	8001dde <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
 8001e98:	e7e0      	b.n	8001e5c <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x2e>
		      _M_get_Tp_allocator()); }
 8001e9a:	4668      	mov	r0, sp
 8001e9c:	f7ff fe34 	bl	8001b08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	b006      	add	sp, #24
 8001ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001ea8 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>:
uint8_t LoRa_register::set_field_value(Address_field* fields, uint32_t* values, uint8_t amt) {
 8001ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001eac:	b08c      	sub	sp, #48	; 0x30
 8001eae:	4604      	mov	r4, r0
 8001eb0:	460e      	mov	r6, r1
 8001eb2:	4690      	mov	r8, r2
    std::vector<uint8_t> missing_register = check_missing_register(fields, amt);
 8001eb4:	460a      	mov	r2, r1
 8001eb6:	4601      	mov	r1, r0
 8001eb8:	a803      	add	r0, sp, #12
uint8_t LoRa_register::set_field_value(Address_field* fields, uint32_t* values, uint8_t amt) {
 8001eba:	461f      	mov	r7, r3
    std::vector<uint8_t> missing_register = check_missing_register(fields, amt);
 8001ebc:	f7ff ff8f 	bl	8001dde <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
    if(missing_register.size() > 0) {
 8001ec0:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d02b      	beq.n	8001f20 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x78>
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8001ec8:	2300      	movs	r3, #0
        read_fields = check_read(fields, amt, &reg_read, &reg_not_read);
 8001eca:	ad09      	add	r5, sp, #36	; 0x24
 8001ecc:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001ed0:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8001ed4:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8001ed8:	463a      	mov	r2, r7
 8001eda:	ab06      	add	r3, sp, #24
 8001edc:	4631      	mov	r1, r6
 8001ede:	9500      	str	r5, [sp, #0]
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	f7ff fe9d 	bl	8001c20 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001ee6:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
            _registers_state[reg_not_read[i]] = true;
 8001eea:	f04f 0e01 	mov.w	lr, #1
 8001eee:	460a      	mov	r2, r1
 8001ef0:	eba3 0c01 	sub.w	ip, r3, r1
        for(int i = 0; i < (int)reg_not_read.size(); ++i) {
 8001ef4:	1a53      	subs	r3, r2, r1
 8001ef6:	459c      	cmp	ip, r3
 8001ef8:	dd05      	ble.n	8001f06 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x5e>
            _registers_state[reg_not_read[i]] = true;
 8001efa:	f812 3b01 	ldrb.w	r3, [r2], #1
 8001efe:	4423      	add	r3, r4
 8001f00:	f883 e07c 	strb.w	lr, [r3, #124]	; 0x7c
        for(int i = 0; i < (int)reg_not_read.size(); ++i) {
 8001f04:	e7f6      	b.n	8001ef4 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x4c>
        if(read_fields) {
 8001f06:	b128      	cbz	r0, 8001f14 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x6c>
            register_read(fields, amt, false);
 8001f08:	2300      	movs	r3, #0
 8001f0a:	463a      	mov	r2, r7
 8001f0c:	4631      	mov	r1, r6
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f7ff ff8d 	bl	8001e2e <_ZN13LoRa_register13register_readEP13Address_fieldhb>
		      _M_get_Tp_allocator()); }
 8001f14:	4628      	mov	r0, r5
 8001f16:	f7ff fdf7 	bl	8001b08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001f1a:	a806      	add	r0, sp, #24
 8001f1c:	f7ff fdf4 	bl	8001b08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001f20:	2500      	movs	r5, #0
        result = fields[i].set_value(values[i], _registers_data, LORA_DATA_SIZE);
 8001f22:	f04f 0a1c 	mov.w	sl, #28
 8001f26:	340c      	adds	r4, #12
    for(int i = 0; i < amt; ++i) {
 8001f28:	42af      	cmp	r7, r5
 8001f2a:	fa5f f985 	uxtb.w	r9, r5
 8001f2e:	dd0a      	ble.n	8001f46 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x9e>
        result = fields[i].set_value(values[i], _registers_data, LORA_DATA_SIZE);
 8001f30:	2370      	movs	r3, #112	; 0x70
 8001f32:	4622      	mov	r2, r4
 8001f34:	f858 1025 	ldr.w	r1, [r8, r5, lsl #2]
 8001f38:	fb0a 6005 	mla	r0, sl, r5, r6
 8001f3c:	f7ff f86a 	bl	8001014 <_ZN13Address_field9set_valueEmPhi>
        if(result)
 8001f40:	b908      	cbnz	r0, 8001f46 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x9e>
    for(int i = 0; i < amt; ++i) {
 8001f42:	3501      	adds	r5, #1
 8001f44:	e7f0      	b.n	8001f28 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x80>
		      _M_get_Tp_allocator()); }
 8001f46:	a803      	add	r0, sp, #12
 8001f48:	f7ff fdde 	bl	8001b08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8001f4c:	4648      	mov	r0, r9
 8001f4e:	b00c      	add	sp, #48	; 0x30
 8001f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001f54 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>:
uint8_t LoRa_register::set_field_value(Address_field field, uint32_t value) {
 8001f54:	b084      	sub	sp, #16
 8001f56:	b510      	push	{r4, lr}
 8001f58:	ac03      	add	r4, sp, #12
 8001f5a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return set_field_value(&field, &value, 1);
 8001f5e:	aa0a      	add	r2, sp, #40	; 0x28
 8001f60:	4621      	mov	r1, r4
 8001f62:	2301      	movs	r3, #1
 8001f64:	f7ff ffa0 	bl	8001ea8 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
}
 8001f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f6c:	b004      	add	sp, #16
 8001f6e:	4770      	bx	lr

08001f70 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb>:
uint8_t LoRa_register::get_field_value(Address_field* fields, uint32_t* values, uint8_t amt, bool read) {
 8001f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f74:	b085      	sub	sp, #20
 8001f76:	4605      	mov	r5, r0
 8001f78:	460f      	mov	r7, r1
 8001f7a:	4690      	mov	r8, r2
    std::vector<uint8_t> check = check_missing_register(fields, amt);
 8001f7c:	460a      	mov	r2, r1
 8001f7e:	4601      	mov	r1, r0
 8001f80:	a801      	add	r0, sp, #4
uint8_t LoRa_register::get_field_value(Address_field* fields, uint32_t* values, uint8_t amt, bool read) {
 8001f82:	461e      	mov	r6, r3
 8001f84:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
    std::vector<uint8_t> check = check_missing_register(fields, amt);
 8001f88:	f7ff ff29 	bl	8001dde <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
    if((check.size() != 0) || read) {
 8001f8c:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d100      	bne.n	8001f96 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x26>
 8001f94:	b12c      	cbz	r4, 8001fa2 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x32>
        register_read(fields, amt, read);
 8001f96:	4623      	mov	r3, r4
 8001f98:	4632      	mov	r2, r6
 8001f9a:	4639      	mov	r1, r7
 8001f9c:	4628      	mov	r0, r5
 8001f9e:	f7ff ff46 	bl	8001e2e <_ZN13LoRa_register13register_readEP13Address_fieldhb>
uint8_t LoRa_register::get_field_value(Address_field* fields, uint32_t* values, uint8_t amt, bool read) {
 8001fa2:	2400      	movs	r4, #0
        values[i] = fields[i].get_value(_registers_data, LORA_DATA_SIZE);
 8001fa4:	f04f 091c 	mov.w	r9, #28
 8001fa8:	350c      	adds	r5, #12
    for(int i = 0; i < amt; ++i)
 8001faa:	42a6      	cmp	r6, r4
 8001fac:	dd09      	ble.n	8001fc2 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x52>
        values[i] = fields[i].get_value(_registers_data, LORA_DATA_SIZE);
 8001fae:	fb09 7004 	mla	r0, r9, r4, r7
 8001fb2:	2270      	movs	r2, #112	; 0x70
 8001fb4:	4629      	mov	r1, r5
 8001fb6:	f7fe fffa 	bl	8000fae <_ZN13Address_field9get_valueEPhi>
 8001fba:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
    for(int i = 0; i < amt; ++i)
 8001fbe:	3401      	adds	r4, #1
 8001fc0:	e7f3      	b.n	8001faa <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x3a>
 8001fc2:	a801      	add	r0, sp, #4
 8001fc4:	f7ff fda0 	bl	8001b08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8001fc8:	4630      	mov	r0, r6
 8001fca:	b005      	add	sp, #20
 8001fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001fd0 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>:
uint8_t LoRa_register::get_field_value(Address_field field, uint32_t* value, bool read) {
 8001fd0:	b084      	sub	sp, #16
 8001fd2:	b513      	push	{r0, r1, r4, lr}
 8001fd4:	ac05      	add	r4, sp, #20
 8001fd6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return get_field_value(&field, value, 1, read);
 8001fda:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8001fde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	4621      	mov	r1, r4
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	f7ff ffc3 	bl	8001f70 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb>
}
 8001fea:	b002      	add	sp, #8
 8001fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ff0:	b004      	add	sp, #16
 8001ff2:	4770      	bx	lr

08001ff4 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>:
uint8_t LoRa_register::register_write(Address_field* fields, uint8_t amt_fields, bool fl_clear, bool error_clear) {
 8001ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	4605      	mov	r5, r0
 8001ffc:	460e      	mov	r6, r1
 8001ffe:	4690      	mov	r8, r2
 8002000:	461f      	mov	r7, r3
    std::vector<uint8_t> write_adr = check_missing_register(fields, amt_fields);
 8002002:	4613      	mov	r3, r2
 8002004:	460a      	mov	r2, r1
 8002006:	4601      	mov	r1, r0
 8002008:	4668      	mov	r0, sp
uint8_t LoRa_register::register_write(Address_field* fields, uint8_t amt_fields, bool fl_clear, bool error_clear) {
 800200a:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
    std::vector<uint8_t> write_adr = check_missing_register(fields, amt_fields);
 800200e:	f7ff fee6 	bl	8001dde <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
    if(write_adr.size() != 0) {
 8002012:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002016:	429a      	cmp	r2, r3
 8002018:	d00b      	beq.n	8002032 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x3e>
        if(error_clear)
 800201a:	b11c      	cbz	r4, 8002024 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x30>
            clear();
 800201c:	4628      	mov	r0, r5
 800201e:	f7ff fcc7 	bl	80019b0 <_ZN13LoRa_register5clearEv>
        return 0;
 8002022:	2400      	movs	r4, #0
 8002024:	4668      	mov	r0, sp
 8002026:	f7ff fd6f 	bl	8001b08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 800202a:	4620      	mov	r0, r4
 800202c:	b006      	add	sp, #24
 800202e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    write_adr = field_registers(fields, amt_fields);
 8002032:	4632      	mov	r2, r6
    for(int i = 0; i < amt_write; ++i) {
 8002034:	2600      	movs	r6, #0
    write_adr = field_registers(fields, amt_fields);
 8002036:	4643      	mov	r3, r8
 8002038:	4629      	mov	r1, r5
 800203a:	a803      	add	r0, sp, #12
 800203c:	f7ff fe8a 	bl	8001d54 <_ZN13LoRa_register15field_registersEP13Address_fieldh>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8002040:	a903      	add	r1, sp, #12
 8002042:	4668      	mov	r0, sp
 8002044:	f7ff fd68 	bl	8001b18 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.26>
		      _M_get_Tp_allocator()); }
 8002048:	a803      	add	r0, sp, #12
 800204a:	f7ff fd5d 	bl	8001b08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800204e:	e9dd 3400 	ldrd	r3, r4, [sp]
 8002052:	1ae4      	subs	r4, r4, r3
    uint8_t amt_write = write_adr.size();
 8002054:	b2e4      	uxtb	r4, r4
    for(int i = 0; i < amt_write; ++i) {
 8002056:	42a6      	cmp	r6, r4
 8002058:	da08      	bge.n	800206c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x78>
        _write_register(write_adr[i], _registers_data[write_adr[i]]);
 800205a:	9b00      	ldr	r3, [sp, #0]
 800205c:	4628      	mov	r0, r5
 800205e:	5d99      	ldrb	r1, [r3, r6]
    for(int i = 0; i < amt_write; ++i) {
 8002060:	3601      	adds	r6, #1
        _write_register(write_adr[i], _registers_data[write_adr[i]]);
 8002062:	186b      	adds	r3, r5, r1
 8002064:	7b1a      	ldrb	r2, [r3, #12]
 8002066:	f7ff fd4b 	bl	8001b00 <_ZN13LoRa_register15_write_registerEhh>
    for(int i = 0; i < amt_write; ++i) {
 800206a:	e7f4      	b.n	8002056 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x62>
    _send = true;
 800206c:	2301      	movs	r3, #1
 800206e:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
    if (fl_clear) {
 8002072:	2f00      	cmp	r7, #0
 8002074:	d0d6      	beq.n	8002024 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x30>
        clear();
 8002076:	4628      	mov	r0, r5
 8002078:	f7ff fc9a 	bl	80019b0 <_ZN13LoRa_register5clearEv>
 800207c:	e7d2      	b.n	8002024 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x30>

0800207e <_ZN13LoRa_register14register_writeE13Address_fieldbb>:
uint8_t LoRa_register::register_write(Address_field field, bool fl_clear, bool error_clear) {
 800207e:	b084      	sub	sp, #16
 8002080:	b513      	push	{r0, r1, r4, lr}
 8002082:	ac05      	add	r4, sp, #20
 8002084:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return register_write(&field, 1, fl_clear, error_clear);
 8002088:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 800208c:	2201      	movs	r2, #1
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	4621      	mov	r1, r4
 8002092:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8002096:	f7ff ffad 	bl	8001ff4 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
}
 800209a:	b002      	add	sp, #8
 800209c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020a0:	b004      	add	sp, #16
 80020a2:	4770      	bx	lr

080020a4 <_GLOBAL__sub_I_REG_FIFO>:
// ----- ----- ----- Регистры ----- ----- -----
//   ----- ----- ----- - - - - - - ----- ----- -----
Register
// --- --- --- Регистр очереди --- --- ---
// - REG_FIFO -
reg_fifo[1] = {Register(REG_FIFO, 8, 0)},
 80020a4:	2300      	movs	r3, #0
    FifoRxByteAddrPtr, LowDataRateOptimize, AgcAutoOn, PpmCorrection, FreqError,
    RssiWideband, DetectionOptimize, InvertIQ, DetectionThreshold, SyncWord,
    Dio0Mapping, Dio1Mapping, Dio2Mapping, Dio3Mapping, Dio4Mapping, Dio5Mapping,
    Version, FastHopOn, TcxoInputOn, PaDac, FormerTemp, BitRateFrac, AgcReferenceLevel,
    AgcStep1, AgcStep2, AgcStep3, AgcStep4, AgcStep5, PllBandwidth
};
 80020a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
reg_fifo[1] = {Register(REG_FIFO, 8, 0)},
 80020aa:	4de0      	ldr	r5, [pc, #896]	; (800242c <_GLOBAL__sub_I_REG_FIFO+0x388>)
};
 80020ac:	b087      	sub	sp, #28
reg_fifo[1] = {Register(REG_FIFO, 8, 0)},
 80020ae:	4619      	mov	r1, r3
 80020b0:	2208      	movs	r2, #8
 80020b2:	4628      	mov	r0, r5
 80020b4:	f7fe fefa 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_long_range_mode[1] = {Register(REG_OP_MODE, 1, 7)},
 80020b8:	2201      	movs	r2, #1
 80020ba:	f8df b45c 	ldr.w	fp, [pc, #1116]	; 8002518 <_GLOBAL__sub_I_REG_FIFO+0x474>
 80020be:	4611      	mov	r1, r2
 80020c0:	2307      	movs	r3, #7
 80020c2:	4658      	mov	r0, fp
 80020c4:	f7fe fef2 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_access_shared_reg[1] = {Register(REG_OP_MODE, 1, 6)},
 80020c8:	2201      	movs	r2, #1
 80020ca:	f8df 9450 	ldr.w	r9, [pc, #1104]	; 800251c <_GLOBAL__sub_I_REG_FIFO+0x478>
 80020ce:	4611      	mov	r1, r2
 80020d0:	2306      	movs	r3, #6
 80020d2:	4648      	mov	r0, r9
 80020d4:	f7fe feea 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_low_frequency_mode_on[1] = {Register(REG_OP_MODE, 1, 3)},
 80020d8:	2201      	movs	r2, #1
 80020da:	2303      	movs	r3, #3
 80020dc:	4611      	mov	r1, r2
 80020de:	48d4      	ldr	r0, [pc, #848]	; (8002430 <_GLOBAL__sub_I_REG_FIFO+0x38c>)
 80020e0:	f7fe fee4 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_mode[1] = {Register(REG_OP_MODE, 3, 0)},
 80020e4:	2300      	movs	r3, #0
 80020e6:	2203      	movs	r2, #3
 80020e8:	2101      	movs	r1, #1
 80020ea:	48d2      	ldr	r0, [pc, #840]	; (8002434 <_GLOBAL__sub_I_REG_FIFO+0x390>)
 80020ec:	f7fe fede 	bl	8000eac <_ZN8RegisterC1Ethh>
              Register(REG_FRF_MSB, 8, 0)},
 80020f0:	2208      	movs	r2, #8
 80020f2:	f8df 842c 	ldr.w	r8, [pc, #1068]	; 8002520 <_GLOBAL__sub_I_REG_FIFO+0x47c>
 80020f6:	4611      	mov	r1, r2
 80020f8:	2300      	movs	r3, #0
 80020fa:	4640      	mov	r0, r8
 80020fc:	f7fe fed6 	bl	8000eac <_ZN8RegisterC1Ethh>
 8002100:	2208      	movs	r2, #8
 8002102:	2300      	movs	r3, #0
 8002104:	eb08 0002 	add.w	r0, r8, r2
 8002108:	2107      	movs	r1, #7
 800210a:	f7fe fecf 	bl	8000eac <_ZN8RegisterC1Ethh>
 800210e:	2300      	movs	r3, #0
 8002110:	2208      	movs	r2, #8
 8002112:	2106      	movs	r1, #6
 8002114:	f108 0010 	add.w	r0, r8, #16
 8002118:	f7fe fec8 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_pa_select[1] = {Register(REG_PA_CONFIG, 1, 7)},
 800211c:	2307      	movs	r3, #7
 800211e:	2201      	movs	r2, #1
 8002120:	2109      	movs	r1, #9
 8002122:	48c5      	ldr	r0, [pc, #788]	; (8002438 <_GLOBAL__sub_I_REG_FIFO+0x394>)
 8002124:	f7fe fec2 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_max_power[1] = {Register(REG_PA_CONFIG, 3, 4)},
 8002128:	2304      	movs	r3, #4
 800212a:	2203      	movs	r2, #3
 800212c:	2109      	movs	r1, #9
 800212e:	48c3      	ldr	r0, [pc, #780]	; (800243c <_GLOBAL__sub_I_REG_FIFO+0x398>)
 8002130:	f7fe febc 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_output_power[1] = {Register(REG_PA_CONFIG, 4, 0)},
 8002134:	2300      	movs	r3, #0
 8002136:	2204      	movs	r2, #4
 8002138:	2109      	movs	r1, #9
 800213a:	48c1      	ldr	r0, [pc, #772]	; (8002440 <_GLOBAL__sub_I_REG_FIFO+0x39c>)
 800213c:	f7fe feb6 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_pa_ramp[1] = {Register(REG_PA_RAMP, 4, 0)},
 8002140:	2300      	movs	r3, #0
 8002142:	2204      	movs	r2, #4
 8002144:	210a      	movs	r1, #10
 8002146:	48bf      	ldr	r0, [pc, #764]	; (8002444 <_GLOBAL__sub_I_REG_FIFO+0x3a0>)
 8002148:	f7fe feb0 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_ocp_on[1] = {Register(REG_LR_OCP, 1, 5)},
 800214c:	2305      	movs	r3, #5
 800214e:	2201      	movs	r2, #1
 8002150:	210b      	movs	r1, #11
 8002152:	48bd      	ldr	r0, [pc, #756]	; (8002448 <_GLOBAL__sub_I_REG_FIFO+0x3a4>)
 8002154:	f7fe feaa 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_ocp_trim[1] = {Register(REG_LR_OCP, 5, 0)},
 8002158:	2300      	movs	r3, #0
 800215a:	2205      	movs	r2, #5
 800215c:	210b      	movs	r1, #11
 800215e:	48bb      	ldr	r0, [pc, #748]	; (800244c <_GLOBAL__sub_I_REG_FIFO+0x3a8>)
 8002160:	f7fe fea4 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_lna_gain[1] = {Register(REG_LNA, 3, 5)},
 8002164:	2305      	movs	r3, #5
 8002166:	2203      	movs	r2, #3
 8002168:	210c      	movs	r1, #12
 800216a:	48b9      	ldr	r0, [pc, #740]	; (8002450 <_GLOBAL__sub_I_REG_FIFO+0x3ac>)
 800216c:	f7fe fe9e 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_lna_boost_lf[1] = {Register(REG_LNA, 2, 3)},
 8002170:	2303      	movs	r3, #3
 8002172:	2202      	movs	r2, #2
 8002174:	210c      	movs	r1, #12
 8002176:	48b7      	ldr	r0, [pc, #732]	; (8002454 <_GLOBAL__sub_I_REG_FIFO+0x3b0>)
 8002178:	f7fe fe98 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_lna_boost_hf[1] = {Register(REG_LNA, 2, 0)},
 800217c:	2300      	movs	r3, #0
 800217e:	2202      	movs	r2, #2
 8002180:	210c      	movs	r1, #12
 8002182:	48b5      	ldr	r0, [pc, #724]	; (8002458 <_GLOBAL__sub_I_REG_FIFO+0x3b4>)
 8002184:	f7fe fe92 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_fifo_addr_ptr[1] = {Register(REG_FIFO_ADDR_PTR, 8, 0)},
 8002188:	2300      	movs	r3, #0
 800218a:	2208      	movs	r2, #8
 800218c:	210d      	movs	r1, #13
 800218e:	48b3      	ldr	r0, [pc, #716]	; (800245c <_GLOBAL__sub_I_REG_FIFO+0x3b8>)
 8002190:	f7fe fe8c 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_fifo_tx_base_addr[1] = {Register(REG_FIFO_TX_BASE_ADDR, 8, 0)},
 8002194:	2300      	movs	r3, #0
 8002196:	2208      	movs	r2, #8
 8002198:	210e      	movs	r1, #14
 800219a:	48b1      	ldr	r0, [pc, #708]	; (8002460 <_GLOBAL__sub_I_REG_FIFO+0x3bc>)
 800219c:	f7fe fe86 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_fifo_rx_base_addr[1] = {Register(REG_FIFO_RX_BASE_ADDR, 8, 0)},
 80021a0:	2300      	movs	r3, #0
 80021a2:	2208      	movs	r2, #8
 80021a4:	210f      	movs	r1, #15
 80021a6:	48af      	ldr	r0, [pc, #700]	; (8002464 <_GLOBAL__sub_I_REG_FIFO+0x3c0>)
 80021a8:	f7fe fe80 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_fifo_rx_current_addr[1] = {Register(REG_FIFO_RX_CURRENT_ADDR, 8, 0)},
 80021ac:	2300      	movs	r3, #0
 80021ae:	2208      	movs	r2, #8
 80021b0:	2110      	movs	r1, #16
 80021b2:	48ad      	ldr	r0, [pc, #692]	; (8002468 <_GLOBAL__sub_I_REG_FIFO+0x3c4>)
 80021b4:	f7fe fe7a 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_rx_timeout_mask[1] = {Register(REG_IRQ_FLAGS_MASK, 1, 7)},
 80021b8:	2307      	movs	r3, #7
 80021ba:	2201      	movs	r2, #1
 80021bc:	2111      	movs	r1, #17
 80021be:	48ab      	ldr	r0, [pc, #684]	; (800246c <_GLOBAL__sub_I_REG_FIFO+0x3c8>)
 80021c0:	f7fe fe74 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_rx_done_mask[1] = {Register(REG_IRQ_FLAGS_MASK, 1, 6)},
 80021c4:	2306      	movs	r3, #6
 80021c6:	2201      	movs	r2, #1
 80021c8:	2111      	movs	r1, #17
 80021ca:	48a9      	ldr	r0, [pc, #676]	; (8002470 <_GLOBAL__sub_I_REG_FIFO+0x3cc>)
 80021cc:	f7fe fe6e 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_payload_crc_error_mask[1] = {Register(REG_IRQ_FLAGS_MASK, 1, 5)},
 80021d0:	2305      	movs	r3, #5
 80021d2:	2201      	movs	r2, #1
 80021d4:	2111      	movs	r1, #17
 80021d6:	48a7      	ldr	r0, [pc, #668]	; (8002474 <_GLOBAL__sub_I_REG_FIFO+0x3d0>)
 80021d8:	f7fe fe68 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_valid_header_mask[1] = {Register(REG_IRQ_FLAGS_MASK, 1, 4)},
 80021dc:	2304      	movs	r3, #4
 80021de:	2201      	movs	r2, #1
 80021e0:	2111      	movs	r1, #17
 80021e2:	48a5      	ldr	r0, [pc, #660]	; (8002478 <_GLOBAL__sub_I_REG_FIFO+0x3d4>)
 80021e4:	f7fe fe62 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_tx_done_mask[1] = {Register(REG_IRQ_FLAGS_MASK, 1, 3)},
 80021e8:	2303      	movs	r3, #3
 80021ea:	2201      	movs	r2, #1
 80021ec:	2111      	movs	r1, #17
 80021ee:	48a3      	ldr	r0, [pc, #652]	; (800247c <_GLOBAL__sub_I_REG_FIFO+0x3d8>)
 80021f0:	f7fe fe5c 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_cad_done_mask[1] = {Register(REG_IRQ_FLAGS_MASK, 1, 2)},
 80021f4:	2302      	movs	r3, #2
 80021f6:	2201      	movs	r2, #1
 80021f8:	2111      	movs	r1, #17
 80021fa:	48a1      	ldr	r0, [pc, #644]	; (8002480 <_GLOBAL__sub_I_REG_FIFO+0x3dc>)
 80021fc:	f7fe fe56 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_fhss_change_channel_mask[1] = {Register(REG_IRQ_FLAGS_MASK, 1, 1)},
 8002200:	2301      	movs	r3, #1
 8002202:	2111      	movs	r1, #17
 8002204:	461a      	mov	r2, r3
 8002206:	489f      	ldr	r0, [pc, #636]	; (8002484 <_GLOBAL__sub_I_REG_FIFO+0x3e0>)
 8002208:	f7fe fe50 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_cad_detected_mask[1] = {Register(REG_IRQ_FLAGS_MASK, 1, 0)},
 800220c:	2300      	movs	r3, #0
 800220e:	2201      	movs	r2, #1
 8002210:	2111      	movs	r1, #17
 8002212:	489d      	ldr	r0, [pc, #628]	; (8002488 <_GLOBAL__sub_I_REG_FIFO+0x3e4>)
 8002214:	f7fe fe4a 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_rx_timeout[1] = {Register(REG_IRQ_FLAGS, 1, 7)},
 8002218:	2307      	movs	r3, #7
 800221a:	2201      	movs	r2, #1
 800221c:	2112      	movs	r1, #18
 800221e:	489b      	ldr	r0, [pc, #620]	; (800248c <_GLOBAL__sub_I_REG_FIFO+0x3e8>)
 8002220:	f7fe fe44 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_rx_done[1] = {Register(REG_IRQ_FLAGS, 1, 6)},
 8002224:	2306      	movs	r3, #6
 8002226:	2201      	movs	r2, #1
 8002228:	2112      	movs	r1, #18
 800222a:	4899      	ldr	r0, [pc, #612]	; (8002490 <_GLOBAL__sub_I_REG_FIFO+0x3ec>)
 800222c:	f7fe fe3e 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_payload_crc_error[1] = {Register(REG_IRQ_FLAGS, 1, 5)},
 8002230:	2305      	movs	r3, #5
 8002232:	2201      	movs	r2, #1
 8002234:	2112      	movs	r1, #18
 8002236:	4897      	ldr	r0, [pc, #604]	; (8002494 <_GLOBAL__sub_I_REG_FIFO+0x3f0>)
 8002238:	f7fe fe38 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_valid_header[1] = {Register(REG_IRQ_FLAGS, 1, 4)},
 800223c:	2304      	movs	r3, #4
 800223e:	2201      	movs	r2, #1
 8002240:	2112      	movs	r1, #18
 8002242:	4895      	ldr	r0, [pc, #596]	; (8002498 <_GLOBAL__sub_I_REG_FIFO+0x3f4>)
 8002244:	f7fe fe32 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_tx_done[1] = {Register(REG_IRQ_FLAGS, 1, 3)},
 8002248:	2303      	movs	r3, #3
 800224a:	2201      	movs	r2, #1
 800224c:	2112      	movs	r1, #18
 800224e:	4893      	ldr	r0, [pc, #588]	; (800249c <_GLOBAL__sub_I_REG_FIFO+0x3f8>)
 8002250:	f7fe fe2c 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_cad_done[1] = {Register(REG_IRQ_FLAGS, 1, 2)},
 8002254:	2302      	movs	r3, #2
 8002256:	2201      	movs	r2, #1
 8002258:	2112      	movs	r1, #18
 800225a:	4891      	ldr	r0, [pc, #580]	; (80024a0 <_GLOBAL__sub_I_REG_FIFO+0x3fc>)
 800225c:	f7fe fe26 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_fhss_change_channel[1] = {Register(REG_IRQ_FLAGS, 1, 1)},
 8002260:	2301      	movs	r3, #1
 8002262:	2112      	movs	r1, #18
 8002264:	461a      	mov	r2, r3
 8002266:	488f      	ldr	r0, [pc, #572]	; (80024a4 <_GLOBAL__sub_I_REG_FIFO+0x400>)
 8002268:	f7fe fe20 	bl	8000eac <_ZN8RegisterC1Ethh>
                           Register(REG_RX_HEADER_CNT_VALUE_MSB, 8, 0)},
 800226c:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8002524 <_GLOBAL__sub_I_REG_FIFO+0x480>
reg_cad_detected[1] = {Register(REG_IRQ_FLAGS, 1, 0)},
 8002270:	2300      	movs	r3, #0
 8002272:	2201      	movs	r2, #1
 8002274:	2112      	movs	r1, #18
 8002276:	488c      	ldr	r0, [pc, #560]	; (80024a8 <_GLOBAL__sub_I_REG_FIFO+0x404>)
 8002278:	f7fe fe18 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_fifo_rx_bytes_nb[1] = {Register(REG_RX_NB_BYTES, 8, 0)},
 800227c:	2300      	movs	r3, #0
 800227e:	2208      	movs	r2, #8
 8002280:	2113      	movs	r1, #19
 8002282:	488a      	ldr	r0, [pc, #552]	; (80024ac <_GLOBAL__sub_I_REG_FIFO+0x408>)
 8002284:	f7fe fe12 	bl	8000eac <_ZN8RegisterC1Ethh>
                           Register(REG_RX_HEADER_CNT_VALUE_MSB, 8, 0)},
 8002288:	2300      	movs	r3, #0
 800228a:	2208      	movs	r2, #8
 800228c:	2115      	movs	r1, #21
 800228e:	4650      	mov	r0, sl
 8002290:	f7fe fe0c 	bl	8000eac <_ZN8RegisterC1Ethh>
 8002294:	2208      	movs	r2, #8
                           Register(REG_RX_PACKET_CNT_VALUE_MSB, 8, 0)},
 8002296:	4c86      	ldr	r4, [pc, #536]	; (80024b0 <_GLOBAL__sub_I_REG_FIFO+0x40c>)
                           Register(REG_RX_HEADER_CNT_VALUE_MSB, 8, 0)},
 8002298:	eb0a 0002 	add.w	r0, sl, r2
 800229c:	2300      	movs	r3, #0
 800229e:	2114      	movs	r1, #20
 80022a0:	f7fe fe04 	bl	8000eac <_ZN8RegisterC1Ethh>
                           Register(REG_RX_PACKET_CNT_VALUE_MSB, 8, 0)},
 80022a4:	2300      	movs	r3, #0
 80022a6:	2208      	movs	r2, #8
 80022a8:	2117      	movs	r1, #23
 80022aa:	4620      	mov	r0, r4
 80022ac:	f7fe fdfe 	bl	8000eac <_ZN8RegisterC1Ethh>
 80022b0:	2208      	movs	r2, #8
 80022b2:	2300      	movs	r3, #0
 80022b4:	18a0      	adds	r0, r4, r2
 80022b6:	2116      	movs	r1, #22
 80022b8:	f7fe fdf8 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_rx_coding_rate[1] = {Register(REG_MODEM_STAT, 3, 5)},
 80022bc:	2305      	movs	r3, #5
 80022be:	2203      	movs	r2, #3
 80022c0:	2118      	movs	r1, #24
 80022c2:	487c      	ldr	r0, [pc, #496]	; (80024b4 <_GLOBAL__sub_I_REG_FIFO+0x410>)
 80022c4:	f7fe fdf2 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_modem_status[1] = {Register(REG_MODEM_STAT, 5, 0)},
 80022c8:	2300      	movs	r3, #0
 80022ca:	2205      	movs	r2, #5
 80022cc:	2118      	movs	r1, #24
 80022ce:	487a      	ldr	r0, [pc, #488]	; (80024b8 <_GLOBAL__sub_I_REG_FIFO+0x414>)
 80022d0:	f7fe fdec 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_packet_snr[1] = {Register(REG_PKT_SNR_VALUE, 8, 0)},
 80022d4:	2300      	movs	r3, #0
 80022d6:	2208      	movs	r2, #8
 80022d8:	2119      	movs	r1, #25
 80022da:	4878      	ldr	r0, [pc, #480]	; (80024bc <_GLOBAL__sub_I_REG_FIFO+0x418>)
 80022dc:	f7fe fde6 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_packet_rssi[1] = {Register(REG_PKT_RSSI_VALUE, 8, 0)},
 80022e0:	2300      	movs	r3, #0
 80022e2:	2208      	movs	r2, #8
 80022e4:	211a      	movs	r1, #26
 80022e6:	4876      	ldr	r0, [pc, #472]	; (80024c0 <_GLOBAL__sub_I_REG_FIFO+0x41c>)
 80022e8:	f7fe fde0 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_rssi[1] = {Register(REG_RSSI_VALUE, 8, 0)},
 80022ec:	2300      	movs	r3, #0
 80022ee:	2208      	movs	r2, #8
 80022f0:	211b      	movs	r1, #27
 80022f2:	4874      	ldr	r0, [pc, #464]	; (80024c4 <_GLOBAL__sub_I_REG_FIFO+0x420>)
 80022f4:	f7fe fdda 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_pll_timeout[1] = {Register(REG_HOP_CHANNEL, 1, 7)},
 80022f8:	2307      	movs	r3, #7
 80022fa:	2201      	movs	r2, #1
 80022fc:	211c      	movs	r1, #28
 80022fe:	4872      	ldr	r0, [pc, #456]	; (80024c8 <_GLOBAL__sub_I_REG_FIFO+0x424>)
 8002300:	f7fe fdd4 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_crc_on_payload[1] = {Register(REG_HOP_CHANNEL, 1, 6)},
 8002304:	2306      	movs	r3, #6
 8002306:	2201      	movs	r2, #1
 8002308:	211c      	movs	r1, #28
 800230a:	4870      	ldr	r0, [pc, #448]	; (80024cc <_GLOBAL__sub_I_REG_FIFO+0x428>)
 800230c:	f7fe fdce 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_fhss_present_channel[1] = {Register(REG_HOP_CHANNEL, 6, 0)},
 8002310:	2300      	movs	r3, #0
 8002312:	2206      	movs	r2, #6
 8002314:	211c      	movs	r1, #28
 8002316:	486e      	ldr	r0, [pc, #440]	; (80024d0 <_GLOBAL__sub_I_REG_FIFO+0x42c>)
 8002318:	f7fe fdc8 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_bw[1] = {Register(REG_MODEM_CONFIG_1, 4, 4)},
 800231c:	2304      	movs	r3, #4
 800231e:	211d      	movs	r1, #29
 8002320:	461a      	mov	r2, r3
 8002322:	486c      	ldr	r0, [pc, #432]	; (80024d4 <_GLOBAL__sub_I_REG_FIFO+0x430>)
 8002324:	f7fe fdc2 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_coding_rate[1] = {Register(REG_MODEM_CONFIG_1, 3, 1)},
 8002328:	2301      	movs	r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	211d      	movs	r1, #29
 800232e:	486a      	ldr	r0, [pc, #424]	; (80024d8 <_GLOBAL__sub_I_REG_FIFO+0x434>)
 8002330:	f7fe fdbc 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_implicit_header_mode_on[1] = {Register(REG_MODEM_CONFIG_1, 1, 0)},
 8002334:	2300      	movs	r3, #0
 8002336:	2201      	movs	r2, #1
 8002338:	211d      	movs	r1, #29
 800233a:	4868      	ldr	r0, [pc, #416]	; (80024dc <_GLOBAL__sub_I_REG_FIFO+0x438>)
 800233c:	f7fe fdb6 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_spreading_factor[1] = {Register(REG_MODEM_CONFIG_2, 4, 4)},
 8002340:	2304      	movs	r3, #4
 8002342:	211e      	movs	r1, #30
 8002344:	461a      	mov	r2, r3
 8002346:	4866      	ldr	r0, [pc, #408]	; (80024e0 <_GLOBAL__sub_I_REG_FIFO+0x43c>)
 8002348:	f7fe fdb0 	bl	8000eac <_ZN8RegisterC1Ethh>
                       Register(REG_MODEM_CONFIG_2, 2, 0)},
 800234c:	4c65      	ldr	r4, [pc, #404]	; (80024e4 <_GLOBAL__sub_I_REG_FIFO+0x440>)
reg_tx_continuous_mode[1] = {Register(REG_MODEM_CONFIG_2, 1, 3)},
 800234e:	2303      	movs	r3, #3
 8002350:	2201      	movs	r2, #1
 8002352:	211e      	movs	r1, #30
 8002354:	4864      	ldr	r0, [pc, #400]	; (80024e8 <_GLOBAL__sub_I_REG_FIFO+0x444>)
 8002356:	f7fe fda9 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_rx_payload_crc_on[1] = {Register(REG_MODEM_CONFIG_2, 1, 2)},
 800235a:	2302      	movs	r3, #2
 800235c:	2201      	movs	r2, #1
 800235e:	211e      	movs	r1, #30
 8002360:	4862      	ldr	r0, [pc, #392]	; (80024ec <_GLOBAL__sub_I_REG_FIFO+0x448>)
 8002362:	f7fe fda3 	bl	8000eac <_ZN8RegisterC1Ethh>
                       Register(REG_MODEM_CONFIG_2, 2, 0)},
 8002366:	2300      	movs	r3, #0
 8002368:	2208      	movs	r2, #8
 800236a:	211f      	movs	r1, #31
 800236c:	4620      	mov	r0, r4
 800236e:	f7fe fd9d 	bl	8000eac <_ZN8RegisterC1Ethh>
 8002372:	f104 0008 	add.w	r0, r4, #8
                          Register(REG_PREAMBLE_MSB, 8, 0)},
 8002376:	4c5e      	ldr	r4, [pc, #376]	; (80024f0 <_GLOBAL__sub_I_REG_FIFO+0x44c>)
                       Register(REG_MODEM_CONFIG_2, 2, 0)},
 8002378:	2300      	movs	r3, #0
 800237a:	2202      	movs	r2, #2
 800237c:	211e      	movs	r1, #30
 800237e:	f7fe fd95 	bl	8000eac <_ZN8RegisterC1Ethh>
                          Register(REG_PREAMBLE_MSB, 8, 0)},
 8002382:	2300      	movs	r3, #0
 8002384:	2208      	movs	r2, #8
 8002386:	2121      	movs	r1, #33	; 0x21
 8002388:	4620      	mov	r0, r4
 800238a:	f7fe fd8f 	bl	8000eac <_ZN8RegisterC1Ethh>
 800238e:	2208      	movs	r2, #8
 8002390:	2300      	movs	r3, #0
 8002392:	18a0      	adds	r0, r4, r2
 8002394:	2120      	movs	r1, #32
 8002396:	f7fe fd89 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_payload_length[1] = {Register(REG_PAYLOAD_LENGTH, 8, 0)},
 800239a:	2300      	movs	r3, #0
 800239c:	2208      	movs	r2, #8
 800239e:	2122      	movs	r1, #34	; 0x22
 80023a0:	4854      	ldr	r0, [pc, #336]	; (80024f4 <_GLOBAL__sub_I_REG_FIFO+0x450>)
 80023a2:	f7fe fd83 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_payload_max_length[1] = {Register(REG_MAX_PAYLOAD_LENGTH, 8, 0)},
 80023a6:	2300      	movs	r3, #0
 80023a8:	2208      	movs	r2, #8
 80023aa:	2123      	movs	r1, #35	; 0x23
 80023ac:	4852      	ldr	r0, [pc, #328]	; (80024f8 <_GLOBAL__sub_I_REG_FIFO+0x454>)
 80023ae:	f7fe fd7d 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_freq_hopping_period[1] = {Register(REG_HOP_PERIOD, 8, 0)},
 80023b2:	2300      	movs	r3, #0
 80023b4:	2208      	movs	r2, #8
 80023b6:	2124      	movs	r1, #36	; 0x24
 80023b8:	4850      	ldr	r0, [pc, #320]	; (80024fc <_GLOBAL__sub_I_REG_FIFO+0x458>)
 80023ba:	f7fe fd77 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_fifo_rx_byte_addr_ptr[1] = {Register(REG_FIFI_RX_BYTE_ADDR, 8, 0)},
 80023be:	2300      	movs	r3, #0
 80023c0:	2208      	movs	r2, #8
 80023c2:	2125      	movs	r1, #37	; 0x25
 80023c4:	484e      	ldr	r0, [pc, #312]	; (8002500 <_GLOBAL__sub_I_REG_FIFO+0x45c>)
 80023c6:	f7fe fd71 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_low_data_rate_optimize[1] = {Register(REG_MODEM_CONFIG_3, 1, 3)},
 80023ca:	2303      	movs	r3, #3
 80023cc:	2201      	movs	r2, #1
 80023ce:	2126      	movs	r1, #38	; 0x26
 80023d0:	484c      	ldr	r0, [pc, #304]	; (8002504 <_GLOBAL__sub_I_REG_FIFO+0x460>)
 80023d2:	f7fe fd6b 	bl	8000eac <_ZN8RegisterC1Ethh>
                     Register(REG_FEI_MSB, 4, 0)},
 80023d6:	4c4c      	ldr	r4, [pc, #304]	; (8002508 <_GLOBAL__sub_I_REG_FIFO+0x464>)
reg_agc_auto_on[1] = {Register(REG_MODEM_CONFIG_3, 1, 2)},
 80023d8:	2302      	movs	r3, #2
 80023da:	2201      	movs	r2, #1
 80023dc:	2126      	movs	r1, #38	; 0x26
 80023de:	484b      	ldr	r0, [pc, #300]	; (800250c <_GLOBAL__sub_I_REG_FIFO+0x468>)
 80023e0:	f7fe fd64 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_ppm_correction[1] = {Register(REG_PPM_CORRECTION, 8, 0)},
 80023e4:	2300      	movs	r3, #0
 80023e6:	2208      	movs	r2, #8
 80023e8:	2127      	movs	r1, #39	; 0x27
 80023ea:	4849      	ldr	r0, [pc, #292]	; (8002510 <_GLOBAL__sub_I_REG_FIFO+0x46c>)
 80023ec:	f7fe fd5e 	bl	8000eac <_ZN8RegisterC1Ethh>
                     Register(REG_FEI_MSB, 4, 0)},
 80023f0:	2300      	movs	r3, #0
 80023f2:	2208      	movs	r2, #8
 80023f4:	212a      	movs	r1, #42	; 0x2a
 80023f6:	4620      	mov	r0, r4
 80023f8:	f7fe fd58 	bl	8000eac <_ZN8RegisterC1Ethh>
 80023fc:	2208      	movs	r2, #8
 80023fe:	2300      	movs	r3, #0
 8002400:	18a0      	adds	r0, r4, r2
 8002402:	2129      	movs	r1, #41	; 0x29
 8002404:	f7fe fd52 	bl	8000eac <_ZN8RegisterC1Ethh>
 8002408:	2300      	movs	r3, #0
 800240a:	2204      	movs	r2, #4
 800240c:	2128      	movs	r1, #40	; 0x28
 800240e:	f104 0010 	add.w	r0, r4, #16
 8002412:	f7fe fd4b 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_rssi_wideband[1] = {Register(REG_RSSI_WIDEBAND, 8, 0)},
 8002416:	2300      	movs	r3, #0
 8002418:	2208      	movs	r2, #8
 800241a:	212c      	movs	r1, #44	; 0x2c
 800241c:	483d      	ldr	r0, [pc, #244]	; (8002514 <_GLOBAL__sub_I_REG_FIFO+0x470>)
 800241e:	f7fe fd45 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_detection_optimize[1] = {Register(REG_DETECTION_OPTIMIZE, 3, 0)},
 8002422:	2300      	movs	r3, #0
 8002424:	2203      	movs	r2, #3
 8002426:	2131      	movs	r1, #49	; 0x31
 8002428:	e07e      	b.n	8002528 <_GLOBAL__sub_I_REG_FIFO+0x484>
 800242a:	bf00      	nop
 800242c:	2000170c 	.word	0x2000170c
 8002430:	200017bc 	.word	0x200017bc
 8002434:	200017d4 	.word	0x200017d4
 8002438:	2000180c 	.word	0x2000180c
 800243c:	200017cc 	.word	0x200017cc
 8002440:	200017f4 	.word	0x200017f4
 8002444:	20001804 	.word	0x20001804
 8002448:	200017e4 	.word	0x200017e4
 800244c:	200017ec 	.word	0x200017ec
 8002450:	200017a4 	.word	0x200017a4
 8002454:	2000179c 	.word	0x2000179c
 8002458:	20001794 	.word	0x20001794
 800245c:	20001714 	.word	0x20001714
 8002460:	2000173c 	.word	0x2000173c
 8002464:	2000171c 	.word	0x2000171c
 8002468:	20001734 	.word	0x20001734
 800246c:	200018a4 	.word	0x200018a4
 8002470:	2000188c 	.word	0x2000188c
 8002474:	2000182c 	.word	0x2000182c
 8002478:	20001904 	.word	0x20001904
 800247c:	200018e4 	.word	0x200018e4
 8002480:	20001694 	.word	0x20001694
 8002484:	200016fc 	.word	0x200016fc
 8002488:	20001684 	.word	0x20001684
 800248c:	2000189c 	.word	0x2000189c
 8002490:	20001884 	.word	0x20001884
 8002494:	20001824 	.word	0x20001824
 8002498:	200018ec 	.word	0x200018ec
 800249c:	200018dc 	.word	0x200018dc
 80024a0:	2000168c 	.word	0x2000168c
 80024a4:	200016f4 	.word	0x200016f4
 80024a8:	2000167c 	.word	0x2000167c
 80024ac:	2000172c 	.word	0x2000172c
 80024b0:	2000190c 	.word	0x2000190c
 80024b4:	2000187c 	.word	0x2000187c
 80024b8:	200017dc 	.word	0x200017dc
 80024bc:	2000181c 	.word	0x2000181c
 80024c0:	20001814 	.word	0x20001814
 80024c4:	2000186c 	.word	0x2000186c
 80024c8:	2000184c 	.word	0x2000184c
 80024cc:	200016a4 	.word	0x200016a4
 80024d0:	20001704 	.word	0x20001704
 80024d4:	20001674 	.word	0x20001674
 80024d8:	2000169c 	.word	0x2000169c
 80024dc:	20001784 	.word	0x20001784
 80024e0:	200018ac 	.word	0x200018ac
 80024e4:	200018b4 	.word	0x200018b4
 80024e8:	200018d4 	.word	0x200018d4
 80024ec:	20001894 	.word	0x20001894
 80024f0:	2000185c 	.word	0x2000185c
 80024f4:	20001834 	.word	0x20001834
 80024f8:	2000183c 	.word	0x2000183c
 80024fc:	20001764 	.word	0x20001764
 8002500:	20001724 	.word	0x20001724
 8002504:	200017b4 	.word	0x200017b4
 8002508:	2000174c 	.word	0x2000174c
 800250c:	20001634 	.word	0x20001634
 8002510:	20001854 	.word	0x20001854
 8002514:	20001874 	.word	0x20001874
 8002518:	200017ac 	.word	0x200017ac
 800251c:	2000162c 	.word	0x2000162c
 8002520:	2000176c 	.word	0x2000176c
 8002524:	200018f4 	.word	0x200018f4
 8002528:	48d0      	ldr	r0, [pc, #832]	; (800286c <_GLOBAL__sub_I_REG_FIFO+0x7c8>)
 800252a:	f7fe fcbf 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_invert_iq[1] = {Register(REG_INVERT_IQ, 1, 6)},
 800252e:	2306      	movs	r3, #6
 8002530:	2201      	movs	r2, #1
 8002532:	2133      	movs	r1, #51	; 0x33
 8002534:	48ce      	ldr	r0, [pc, #824]	; (8002870 <_GLOBAL__sub_I_REG_FIFO+0x7cc>)
 8002536:	f7fe fcb9 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_detection_threshold[1] = {Register(REG_DETECTION_THRESHOLD, 8, 0)},
 800253a:	2300      	movs	r3, #0
 800253c:	2208      	movs	r2, #8
 800253e:	2137      	movs	r1, #55	; 0x37
 8002540:	48cc      	ldr	r0, [pc, #816]	; (8002874 <_GLOBAL__sub_I_REG_FIFO+0x7d0>)
 8002542:	f7fe fcb3 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_sync_word[1] = {Register(REG_SYNC_WORD, 8, 0)},  // , reserved_value=[0x34])
 8002546:	2300      	movs	r3, #0
 8002548:	2208      	movs	r2, #8
 800254a:	2139      	movs	r1, #57	; 0x39
 800254c:	48ca      	ldr	r0, [pc, #808]	; (8002878 <_GLOBAL__sub_I_REG_FIFO+0x7d4>)
 800254e:	f7fe fcad 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_dio0_mapping[1] = {Register(REG_DIO_MAPPING_1, 2, 6)},
 8002552:	2306      	movs	r3, #6
 8002554:	2202      	movs	r2, #2
 8002556:	2140      	movs	r1, #64	; 0x40
 8002558:	48c8      	ldr	r0, [pc, #800]	; (800287c <_GLOBAL__sub_I_REG_FIFO+0x7d8>)
 800255a:	f7fe fca7 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_dio1_mapping[1] = {Register(REG_DIO_MAPPING_1, 2, 4)},
 800255e:	2304      	movs	r3, #4
 8002560:	2202      	movs	r2, #2
 8002562:	2140      	movs	r1, #64	; 0x40
 8002564:	48c6      	ldr	r0, [pc, #792]	; (8002880 <_GLOBAL__sub_I_REG_FIFO+0x7dc>)
 8002566:	f7fe fca1 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_dio2_mapping[1] = {Register(REG_DIO_MAPPING_1, 2, 2)},
 800256a:	2302      	movs	r3, #2
 800256c:	2140      	movs	r1, #64	; 0x40
 800256e:	461a      	mov	r2, r3
 8002570:	48c4      	ldr	r0, [pc, #784]	; (8002884 <_GLOBAL__sub_I_REG_FIFO+0x7e0>)
 8002572:	f7fe fc9b 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_dio3_mapping[1] = {Register(REG_DIO_MAPPING_1, 2, 0)},
 8002576:	2300      	movs	r3, #0
 8002578:	2202      	movs	r2, #2
 800257a:	2140      	movs	r1, #64	; 0x40
 800257c:	48c2      	ldr	r0, [pc, #776]	; (8002888 <_GLOBAL__sub_I_REG_FIFO+0x7e4>)
 800257e:	f7fe fc95 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_dio4_mapping[1] = {Register(REG_DIO_MAPPING_2, 2, 6)},
 8002582:	2306      	movs	r3, #6
 8002584:	2202      	movs	r2, #2
 8002586:	2141      	movs	r1, #65	; 0x41
 8002588:	48c0      	ldr	r0, [pc, #768]	; (800288c <_GLOBAL__sub_I_REG_FIFO+0x7e8>)
 800258a:	f7fe fc8f 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_dio5_mapping[1] = {Register(REG_DIO_MAPPING_2, 2, 4)},
 800258e:	2304      	movs	r3, #4
 8002590:	2202      	movs	r2, #2
 8002592:	2141      	movs	r1, #65	; 0x41
 8002594:	48be      	ldr	r0, [pc, #760]	; (8002890 <_GLOBAL__sub_I_REG_FIFO+0x7ec>)
 8002596:	f7fe fc89 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_map_preamble_detect[1] = {Register(REG_DIO_MAPPING_2, 1, 0)},
 800259a:	2300      	movs	r3, #0
 800259c:	2201      	movs	r2, #1
 800259e:	2141      	movs	r1, #65	; 0x41
 80025a0:	48bc      	ldr	r0, [pc, #752]	; (8002894 <_GLOBAL__sub_I_REG_FIFO+0x7f0>)
 80025a2:	f7fe fc83 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_version[1] = {Register(REG_VERSION, 8, 0)},
 80025a6:	2300      	movs	r3, #0
 80025a8:	2208      	movs	r2, #8
 80025aa:	2142      	movs	r1, #66	; 0x42
 80025ac:	48ba      	ldr	r0, [pc, #744]	; (8002898 <_GLOBAL__sub_I_REG_FIFO+0x7f4>)
 80025ae:	f7fe fc7d 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_fast_hop_on[1] = {Register(REG_PLL_HOP, 1, 7)},
 80025b2:	2307      	movs	r3, #7
 80025b4:	2201      	movs	r2, #1
 80025b6:	2144      	movs	r1, #68	; 0x44
 80025b8:	48b8      	ldr	r0, [pc, #736]	; (800289c <_GLOBAL__sub_I_REG_FIFO+0x7f8>)
 80025ba:	f7fe fc77 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_tcxo_input_on[1] = {Register(REG_TCXO, 1, 4)},
 80025be:	2304      	movs	r3, #4
 80025c0:	2201      	movs	r2, #1
 80025c2:	214b      	movs	r1, #75	; 0x4b
 80025c4:	48b6      	ldr	r0, [pc, #728]	; (80028a0 <_GLOBAL__sub_I_REG_FIFO+0x7fc>)
 80025c6:	f7fe fc71 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_pa_dac[1] = {Register(REG_PA_DAC, 3, 0)},
 80025ca:	2300      	movs	r3, #0
 80025cc:	2203      	movs	r2, #3
 80025ce:	214d      	movs	r1, #77	; 0x4d
 80025d0:	48b4      	ldr	r0, [pc, #720]	; (80028a4 <_GLOBAL__sub_I_REG_FIFO+0x800>)
 80025d2:	f7fe fc6b 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_former_temp[1] = {Register(REG_FORMER_TEMP, 8, 0)},
 80025d6:	2300      	movs	r3, #0
 80025d8:	2208      	movs	r2, #8
 80025da:	215b      	movs	r1, #91	; 0x5b
 80025dc:	48b2      	ldr	r0, [pc, #712]	; (80028a8 <_GLOBAL__sub_I_REG_FIFO+0x804>)
 80025de:	f7fe fc65 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_bit_rate_frac[1] = {Register(REG_BITRATE_FRAC, 4, 0)},
 80025e2:	2300      	movs	r3, #0
 80025e4:	2204      	movs	r2, #4
 80025e6:	215d      	movs	r1, #93	; 0x5d
 80025e8:	48b0      	ldr	r0, [pc, #704]	; (80028ac <_GLOBAL__sub_I_REG_FIFO+0x808>)
 80025ea:	f7fe fc5f 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_agc_reference_level[1] = {Register(REG_AGC_REF, 6, 0)},
 80025ee:	2300      	movs	r3, #0
 80025f0:	2206      	movs	r2, #6
 80025f2:	2161      	movs	r1, #97	; 0x61
 80025f4:	48ae      	ldr	r0, [pc, #696]	; (80028b0 <_GLOBAL__sub_I_REG_FIFO+0x80c>)
 80025f6:	f7fe fc59 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_agc_step1[1] = {Register(REG_AGC_THRESH_1, 5, 0)},
 80025fa:	2300      	movs	r3, #0
 80025fc:	2205      	movs	r2, #5
 80025fe:	2162      	movs	r1, #98	; 0x62
 8002600:	48ac      	ldr	r0, [pc, #688]	; (80028b4 <_GLOBAL__sub_I_REG_FIFO+0x810>)
 8002602:	f7fe fc53 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_agc_step2[1] = {Register(REG_AGC_THRESH_2, 4, 4)},
 8002606:	2304      	movs	r3, #4
 8002608:	2163      	movs	r1, #99	; 0x63
 800260a:	461a      	mov	r2, r3
 800260c:	48aa      	ldr	r0, [pc, #680]	; (80028b8 <_GLOBAL__sub_I_REG_FIFO+0x814>)
 800260e:	f7fe fc4d 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_agc_step3[1] = {Register(REG_AGC_THRESH_2, 4, 0)},
 8002612:	2300      	movs	r3, #0
 8002614:	2204      	movs	r2, #4
 8002616:	2163      	movs	r1, #99	; 0x63
 8002618:	48a8      	ldr	r0, [pc, #672]	; (80028bc <_GLOBAL__sub_I_REG_FIFO+0x818>)
 800261a:	f7fe fc47 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_agc_step4[1] = {Register(REG_AGC_THRESH_3, 4, 4)},
 800261e:	2304      	movs	r3, #4
 8002620:	2164      	movs	r1, #100	; 0x64
 8002622:	461a      	mov	r2, r3
 8002624:	48a6      	ldr	r0, [pc, #664]	; (80028c0 <_GLOBAL__sub_I_REG_FIFO+0x81c>)
 8002626:	f7fe fc41 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_agc_step5[1] = {Register(REG_AGC_THRESH_3, 4, 0)},
 800262a:	2300      	movs	r3, #0
 800262c:	2204      	movs	r2, #4
 800262e:	2164      	movs	r1, #100	; 0x64
 8002630:	48a4      	ldr	r0, [pc, #656]	; (80028c4 <_GLOBAL__sub_I_REG_FIFO+0x820>)
Fifo(reg_fifo, 1, false, 'w', 0x00, 0xFF),
 8002632:	2400      	movs	r4, #0
 8002634:	2677      	movs	r6, #119	; 0x77
 8002636:	27ff      	movs	r7, #255	; 0xff
reg_agc_step5[1] = {Register(REG_AGC_THRESH_3, 4, 0)},
 8002638:	f7fe fc38 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_pll_bandwidth[1] = {Register(REG_PLL_HF, 2, 6)};
 800263c:	2306      	movs	r3, #6
 800263e:	2202      	movs	r2, #2
 8002640:	2170      	movs	r1, #112	; 0x70
 8002642:	48a1      	ldr	r0, [pc, #644]	; (80028c8 <_GLOBAL__sub_I_REG_FIFO+0x824>)
 8002644:	f7fe fc32 	bl	8000eac <_ZN8RegisterC1Ethh>
Fifo(reg_fifo, 1, false, 'w', 0x00, 0xFF),
 8002648:	4629      	mov	r1, r5
LongRangeMode(reg_long_range_mode, 1, false, 'w', 0x00, 0x01),
 800264a:	2501      	movs	r5, #1
Fifo(reg_fifo, 1, false, 'w', 0x00, 0xFF),
 800264c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8002650:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002654:	9600      	str	r6, [sp, #0]
 8002656:	4623      	mov	r3, r4
 8002658:	2201      	movs	r2, #1
 800265a:	489c      	ldr	r0, [pc, #624]	; (80028cc <_GLOBAL__sub_I_REG_FIFO+0x828>)
 800265c:	f7fe fc94 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
LongRangeMode(reg_long_range_mode, 1, false, 'w', 0x00, 0x01),
 8002660:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002664:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002668:	9600      	str	r6, [sp, #0]
 800266a:	4623      	mov	r3, r4
 800266c:	462a      	mov	r2, r5
 800266e:	4659      	mov	r1, fp
 8002670:	4897      	ldr	r0, [pc, #604]	; (80028d0 <_GLOBAL__sub_I_REG_FIFO+0x82c>)
 8002672:	f7fe fc89 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
AccessSharedReg(reg_access_shared_reg, 1, false, 'w', 0x00, 0x01),
 8002676:	4649      	mov	r1, r9
Mode(reg_mode, 1, false, 'w', 0x00, 0x07),
 8002678:	f04f 0907 	mov.w	r9, #7
AccessSharedReg(reg_access_shared_reg, 1, false, 'w', 0x00, 0x01),
 800267c:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002680:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002684:	9600      	str	r6, [sp, #0]
 8002686:	4623      	mov	r3, r4
 8002688:	462a      	mov	r2, r5
 800268a:	4892      	ldr	r0, [pc, #584]	; (80028d4 <_GLOBAL__sub_I_REG_FIFO+0x830>)
 800268c:	f7fe fc7c 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
LowFrequencyModeOn(reg_low_frequency_mode_on, 1, false, 'w', 0x00, 0x01),
 8002690:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002694:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002698:	9600      	str	r6, [sp, #0]
 800269a:	4623      	mov	r3, r4
 800269c:	462a      	mov	r2, r5
 800269e:	498e      	ldr	r1, [pc, #568]	; (80028d8 <_GLOBAL__sub_I_REG_FIFO+0x834>)
 80026a0:	488e      	ldr	r0, [pc, #568]	; (80028dc <_GLOBAL__sub_I_REG_FIFO+0x838>)
 80026a2:	f7fe fc71 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Mode(reg_mode, 1, false, 'w', 0x00, 0x07),
 80026a6:	e9cd 4901 	strd	r4, r9, [sp, #4]
 80026aa:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80026ae:	9600      	str	r6, [sp, #0]
 80026b0:	4623      	mov	r3, r4
 80026b2:	462a      	mov	r2, r5
 80026b4:	498a      	ldr	r1, [pc, #552]	; (80028e0 <_GLOBAL__sub_I_REG_FIFO+0x83c>)
 80026b6:	488b      	ldr	r0, [pc, #556]	; (80028e4 <_GLOBAL__sub_I_REG_FIFO+0x840>)
 80026b8:	f7fe fc66 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Frf(reg_frf, 3, false, 'w', 0x000000, 0xFFFFFF),
 80026bc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80026c0:	4641      	mov	r1, r8
OutputPower(reg_output_power, 1, false, 'w', 0x00, 0x0F),
 80026c2:	f04f 080f 	mov.w	r8, #15
Frf(reg_frf, 3, false, 'w', 0x000000, 0xFFFFFF),
 80026c6:	e9cd 4301 	strd	r4, r3, [sp, #4]
 80026ca:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80026ce:	9600      	str	r6, [sp, #0]
 80026d0:	4623      	mov	r3, r4
 80026d2:	2203      	movs	r2, #3
 80026d4:	4884      	ldr	r0, [pc, #528]	; (80028e8 <_GLOBAL__sub_I_REG_FIFO+0x844>)
 80026d6:	f7fe fc57 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PaSelect(reg_pa_select, 1, false, 'w', 0x00, 0x01),
 80026da:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80026de:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80026e2:	9600      	str	r6, [sp, #0]
 80026e4:	4623      	mov	r3, r4
 80026e6:	462a      	mov	r2, r5
 80026e8:	4980      	ldr	r1, [pc, #512]	; (80028ec <_GLOBAL__sub_I_REG_FIFO+0x848>)
 80026ea:	4881      	ldr	r0, [pc, #516]	; (80028f0 <_GLOBAL__sub_I_REG_FIFO+0x84c>)
 80026ec:	f7fe fc4c 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
MaxPower(reg_max_power, 1, false, 'w', 0x00, 0x07),
 80026f0:	e9cd 4901 	strd	r4, r9, [sp, #4]
 80026f4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80026f8:	9600      	str	r6, [sp, #0]
 80026fa:	4623      	mov	r3, r4
 80026fc:	462a      	mov	r2, r5
 80026fe:	497d      	ldr	r1, [pc, #500]	; (80028f4 <_GLOBAL__sub_I_REG_FIFO+0x850>)
 8002700:	487d      	ldr	r0, [pc, #500]	; (80028f8 <_GLOBAL__sub_I_REG_FIFO+0x854>)
 8002702:	f7fe fc41 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
OutputPower(reg_output_power, 1, false, 'w', 0x00, 0x0F),
 8002706:	e9cd 4801 	strd	r4, r8, [sp, #4]
 800270a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800270e:	9600      	str	r6, [sp, #0]
 8002710:	4623      	mov	r3, r4
 8002712:	462a      	mov	r2, r5
 8002714:	4979      	ldr	r1, [pc, #484]	; (80028fc <_GLOBAL__sub_I_REG_FIFO+0x858>)
 8002716:	487a      	ldr	r0, [pc, #488]	; (8002900 <_GLOBAL__sub_I_REG_FIFO+0x85c>)
 8002718:	f7fe fc36 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PaRamp(reg_pa_ramp, 1, false, 'w', 0x00, 0x0F),
 800271c:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8002720:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002724:	9600      	str	r6, [sp, #0]
 8002726:	4623      	mov	r3, r4
 8002728:	462a      	mov	r2, r5
 800272a:	4976      	ldr	r1, [pc, #472]	; (8002904 <_GLOBAL__sub_I_REG_FIFO+0x860>)
 800272c:	4876      	ldr	r0, [pc, #472]	; (8002908 <_GLOBAL__sub_I_REG_FIFO+0x864>)
 800272e:	f7fe fc2b 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
OcpOn(reg_ocp_on, 1, false, 'w', 0x00, 0x01),
 8002732:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002736:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800273a:	9600      	str	r6, [sp, #0]
 800273c:	4623      	mov	r3, r4
 800273e:	462a      	mov	r2, r5
 8002740:	4972      	ldr	r1, [pc, #456]	; (800290c <_GLOBAL__sub_I_REG_FIFO+0x868>)
 8002742:	4873      	ldr	r0, [pc, #460]	; (8002910 <_GLOBAL__sub_I_REG_FIFO+0x86c>)
 8002744:	f7fe fc20 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
OcpTrim(reg_ocp_trim, 1, false, 'w', 0x00, 0x1F),
 8002748:	231f      	movs	r3, #31
 800274a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800274e:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8002752:	9600      	str	r6, [sp, #0]
 8002754:	4623      	mov	r3, r4
 8002756:	462a      	mov	r2, r5
 8002758:	496e      	ldr	r1, [pc, #440]	; (8002914 <_GLOBAL__sub_I_REG_FIFO+0x870>)
 800275a:	486f      	ldr	r0, [pc, #444]	; (8002918 <_GLOBAL__sub_I_REG_FIFO+0x874>)
 800275c:	f7fe fc14 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
LnaGain(reg_lna_gain, 1, false, 'w', 0x01, 0x06),
 8002760:	2306      	movs	r3, #6
 8002762:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002766:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800276a:	9600      	str	r6, [sp, #0]
 800276c:	4623      	mov	r3, r4
 800276e:	462a      	mov	r2, r5
 8002770:	496a      	ldr	r1, [pc, #424]	; (800291c <_GLOBAL__sub_I_REG_FIFO+0x878>)
 8002772:	486b      	ldr	r0, [pc, #428]	; (8002920 <_GLOBAL__sub_I_REG_FIFO+0x87c>)
 8002774:	f7fe fc08 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
LnaBoostLf(reg_lna_boost_lf, 1, false, 'w', 0x00, 0x00),
 8002778:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800277c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002780:	9600      	str	r6, [sp, #0]
 8002782:	4623      	mov	r3, r4
 8002784:	462a      	mov	r2, r5
 8002786:	4967      	ldr	r1, [pc, #412]	; (8002924 <_GLOBAL__sub_I_REG_FIFO+0x880>)
 8002788:	4867      	ldr	r0, [pc, #412]	; (8002928 <_GLOBAL__sub_I_REG_FIFO+0x884>)
 800278a:	f7fe fbfd 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
LnaBoostHf(reg_lna_boost_hf, 1, false, 'w', 0x00, 0x03, reserv_lna_boost_hf, 2),
 800278e:	2302      	movs	r3, #2
 8002790:	9304      	str	r3, [sp, #16]
 8002792:	4b66      	ldr	r3, [pc, #408]	; (800292c <_GLOBAL__sub_I_REG_FIFO+0x888>)
FifoRxCurrentAddr(reg_fifo_rx_current_addr, 1, false, 'r', 0x00, 0xFF),
 8002794:	f04f 0872 	mov.w	r8, #114	; 0x72
LnaBoostHf(reg_lna_boost_hf, 1, false, 'w', 0x00, 0x03, reserv_lna_boost_hf, 2),
 8002798:	9303      	str	r3, [sp, #12]
 800279a:	2303      	movs	r3, #3
RxTimeout(reg_rx_timeout, 1, false, 'c', 0x00, 0x01),
 800279c:	f04f 0b63 	mov.w	fp, #99	; 0x63
ValidHeaderCnt(reg_valid_header_cnt, 2, false, 'r', 0x0000, 0xFFFF),
 80027a0:	f64f 79ff 	movw	r9, #65535	; 0xffff
LnaBoostHf(reg_lna_boost_hf, 1, false, 'w', 0x00, 0x03, reserv_lna_boost_hf, 2),
 80027a4:	e9cd 4301 	strd	r4, r3, [sp, #4]
 80027a8:	9600      	str	r6, [sp, #0]
 80027aa:	4623      	mov	r3, r4
 80027ac:	462a      	mov	r2, r5
 80027ae:	4960      	ldr	r1, [pc, #384]	; (8002930 <_GLOBAL__sub_I_REG_FIFO+0x88c>)
 80027b0:	4860      	ldr	r0, [pc, #384]	; (8002934 <_GLOBAL__sub_I_REG_FIFO+0x890>)
 80027b2:	f7fe fbe9 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FifoAddrPtr(reg_fifo_addr_ptr, 1, false, 'w', 0x00, 0xFF),
 80027b6:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80027ba:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80027be:	9600      	str	r6, [sp, #0]
 80027c0:	4623      	mov	r3, r4
 80027c2:	462a      	mov	r2, r5
 80027c4:	495c      	ldr	r1, [pc, #368]	; (8002938 <_GLOBAL__sub_I_REG_FIFO+0x894>)
 80027c6:	485d      	ldr	r0, [pc, #372]	; (800293c <_GLOBAL__sub_I_REG_FIFO+0x898>)
 80027c8:	f7fe fbde 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FifoTxBaseAddr(reg_fifo_tx_base_addr, 1, false, 'w', 0x00, 0xFF),
 80027cc:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80027d0:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80027d4:	9600      	str	r6, [sp, #0]
 80027d6:	4623      	mov	r3, r4
 80027d8:	462a      	mov	r2, r5
 80027da:	4959      	ldr	r1, [pc, #356]	; (8002940 <_GLOBAL__sub_I_REG_FIFO+0x89c>)
 80027dc:	4859      	ldr	r0, [pc, #356]	; (8002944 <_GLOBAL__sub_I_REG_FIFO+0x8a0>)
 80027de:	f7fe fbd3 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FifoRxBaseAddr(reg_fifo_rx_base_addr, 1, false, 'w', 0x00, 0xFF),
 80027e2:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80027e6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80027ea:	9600      	str	r6, [sp, #0]
 80027ec:	4623      	mov	r3, r4
 80027ee:	462a      	mov	r2, r5
 80027f0:	4955      	ldr	r1, [pc, #340]	; (8002948 <_GLOBAL__sub_I_REG_FIFO+0x8a4>)
 80027f2:	4856      	ldr	r0, [pc, #344]	; (800294c <_GLOBAL__sub_I_REG_FIFO+0x8a8>)
 80027f4:	f7fe fbc8 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FifoRxCurrentAddr(reg_fifo_rx_current_addr, 1, false, 'r', 0x00, 0xFF),
 80027f8:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80027fc:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002800:	f8cd 8000 	str.w	r8, [sp]
 8002804:	4623      	mov	r3, r4
 8002806:	462a      	mov	r2, r5
 8002808:	4951      	ldr	r1, [pc, #324]	; (8002950 <_GLOBAL__sub_I_REG_FIFO+0x8ac>)
 800280a:	4852      	ldr	r0, [pc, #328]	; (8002954 <_GLOBAL__sub_I_REG_FIFO+0x8b0>)
 800280c:	f7fe fbbc 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
RxTimeoutMask(reg_rx_timeout_mask, 1, false, 'w', 0x00, 0x01),
 8002810:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002814:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002818:	9600      	str	r6, [sp, #0]
 800281a:	4623      	mov	r3, r4
 800281c:	462a      	mov	r2, r5
 800281e:	494e      	ldr	r1, [pc, #312]	; (8002958 <_GLOBAL__sub_I_REG_FIFO+0x8b4>)
 8002820:	484e      	ldr	r0, [pc, #312]	; (800295c <_GLOBAL__sub_I_REG_FIFO+0x8b8>)
 8002822:	f7fe fbb1 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
RxDoneMask(reg_rx_done_mask, 1, false, 'w', 0x00, 0x01),
 8002826:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800282a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800282e:	9600      	str	r6, [sp, #0]
 8002830:	4623      	mov	r3, r4
 8002832:	462a      	mov	r2, r5
 8002834:	494a      	ldr	r1, [pc, #296]	; (8002960 <_GLOBAL__sub_I_REG_FIFO+0x8bc>)
 8002836:	484b      	ldr	r0, [pc, #300]	; (8002964 <_GLOBAL__sub_I_REG_FIFO+0x8c0>)
 8002838:	f7fe fba6 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PayloadCrcErrorMask(reg_payload_crc_error_mask, 1, false, 'w', 0x00, 0x01),
 800283c:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002840:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002844:	9600      	str	r6, [sp, #0]
 8002846:	4623      	mov	r3, r4
 8002848:	462a      	mov	r2, r5
 800284a:	4947      	ldr	r1, [pc, #284]	; (8002968 <_GLOBAL__sub_I_REG_FIFO+0x8c4>)
 800284c:	4847      	ldr	r0, [pc, #284]	; (800296c <_GLOBAL__sub_I_REG_FIFO+0x8c8>)
 800284e:	f7fe fb9b 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
ValidHeaderMask(reg_valid_header_mask, 1, false, 'w', 0x00, 0x01),
 8002852:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002856:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800285a:	9600      	str	r6, [sp, #0]
 800285c:	4623      	mov	r3, r4
 800285e:	462a      	mov	r2, r5
 8002860:	4943      	ldr	r1, [pc, #268]	; (8002970 <_GLOBAL__sub_I_REG_FIFO+0x8cc>)
 8002862:	4844      	ldr	r0, [pc, #272]	; (8002974 <_GLOBAL__sub_I_REG_FIFO+0x8d0>)
 8002864:	f7fe fb90 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 8002868:	e086      	b.n	8002978 <_GLOBAL__sub_I_REG_FIFO+0x8d4>
 800286a:	bf00      	nop
 800286c:	200016ac 	.word	0x200016ac
 8002870:	2000178c 	.word	0x2000178c
 8002874:	200016b4 	.word	0x200016b4
 8002878:	200018c4 	.word	0x200018c4
 800287c:	200016bc 	.word	0x200016bc
 8002880:	200016c4 	.word	0x200016c4
 8002884:	200016cc 	.word	0x200016cc
 8002888:	200016d4 	.word	0x200016d4
 800288c:	200016dc 	.word	0x200016dc
 8002890:	200016e4 	.word	0x200016e4
 8002894:	200017c4 	.word	0x200017c4
 8002898:	2000191c 	.word	0x2000191c
 800289c:	200016ec 	.word	0x200016ec
 80028a0:	200018cc 	.word	0x200018cc
 80028a4:	200017fc 	.word	0x200017fc
 80028a8:	20001744 	.word	0x20001744
 80028ac:	2000166c 	.word	0x2000166c
 80028b0:	2000163c 	.word	0x2000163c
 80028b4:	20001644 	.word	0x20001644
 80028b8:	2000164c 	.word	0x2000164c
 80028bc:	20001654 	.word	0x20001654
 80028c0:	2000165c 	.word	0x2000165c
 80028c4:	20001664 	.word	0x20001664
 80028c8:	20001844 	.word	0x20001844
 80028cc:	20000fb8 	.word	0x20000fb8
 80028d0:	20001178 	.word	0x20001178
 80028d4:	20000ca8 	.word	0x20000ca8
 80028d8:	200017bc 	.word	0x200017bc
 80028dc:	200011b0 	.word	0x200011b0
 80028e0:	200017d4 	.word	0x200017d4
 80028e4:	20001204 	.word	0x20001204
 80028e8:	200010d0 	.word	0x200010d0
 80028ec:	2000180c 	.word	0x2000180c
 80028f0:	200012c8 	.word	0x200012c8
 80028f4:	200017cc 	.word	0x200017cc
 80028f8:	200011e8 	.word	0x200011e8
 80028fc:	200017f4 	.word	0x200017f4
 8002900:	20001274 	.word	0x20001274
 8002904:	20001804 	.word	0x20001804
 8002908:	200012ac 	.word	0x200012ac
 800290c:	200017e4 	.word	0x200017e4
 8002910:	2000123c 	.word	0x2000123c
 8002914:	200017ec 	.word	0x200017ec
 8002918:	20001258 	.word	0x20001258
 800291c:	200017a4 	.word	0x200017a4
 8002920:	2000115c 	.word	0x2000115c
 8002924:	2000179c 	.word	0x2000179c
 8002928:	20001140 	.word	0x20001140
 800292c:	20000008 	.word	0x20000008
 8002930:	20001794 	.word	0x20001794
 8002934:	20001124 	.word	0x20001124
 8002938:	20001714 	.word	0x20001714
 800293c:	20000fd4 	.word	0x20000fd4
 8002940:	2000173c 	.word	0x2000173c
 8002944:	20001060 	.word	0x20001060
 8002948:	2000171c 	.word	0x2000171c
 800294c:	20000ff0 	.word	0x20000ff0
 8002950:	20001734 	.word	0x20001734
 8002954:	20001044 	.word	0x20001044
 8002958:	200018a4 	.word	0x200018a4
 800295c:	200014c0 	.word	0x200014c0
 8002960:	2000188c 	.word	0x2000188c
 8002964:	2000146c 	.word	0x2000146c
 8002968:	2000182c 	.word	0x2000182c
 800296c:	20001338 	.word	0x20001338
 8002970:	20001904 	.word	0x20001904
 8002974:	200015d8 	.word	0x200015d8
TxDoneMask(reg_tx_done_mask, 1, false, 'w', 0x00, 0x01),
 8002978:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800297c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002980:	9600      	str	r6, [sp, #0]
 8002982:	4623      	mov	r3, r4
 8002984:	462a      	mov	r2, r5
 8002986:	49d4      	ldr	r1, [pc, #848]	; (8002cd8 <_GLOBAL__sub_I_REG_FIFO+0xc34>)
 8002988:	48d4      	ldr	r0, [pc, #848]	; (8002cdc <_GLOBAL__sub_I_REG_FIFO+0xc38>)
 800298a:	f7fe fafd 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
CadDoneMask(reg_cad_done_mask, 1, false, 'w', 0x00, 0x01),
 800298e:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002992:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002996:	9600      	str	r6, [sp, #0]
 8002998:	4623      	mov	r3, r4
 800299a:	462a      	mov	r2, r5
 800299c:	49d0      	ldr	r1, [pc, #832]	; (8002ce0 <_GLOBAL__sub_I_REG_FIFO+0xc3c>)
 800299e:	48d1      	ldr	r0, [pc, #836]	; (8002ce4 <_GLOBAL__sub_I_REG_FIFO+0xc40>)
 80029a0:	f7fe faf2 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FhssChangeChannelMask(reg_fhss_change_channel_mask, 1, false, 'w', 0x00, 0x01),
 80029a4:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80029a8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80029ac:	9600      	str	r6, [sp, #0]
 80029ae:	4623      	mov	r3, r4
 80029b0:	462a      	mov	r2, r5
 80029b2:	49cd      	ldr	r1, [pc, #820]	; (8002ce8 <_GLOBAL__sub_I_REG_FIFO+0xc44>)
 80029b4:	48cd      	ldr	r0, [pc, #820]	; (8002cec <_GLOBAL__sub_I_REG_FIFO+0xc48>)
 80029b6:	f7fe fae7 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
CadDetectedMask(reg_cad_detected_mask, 1, false, 'w', 0x00, 0x01),
 80029ba:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80029be:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80029c2:	9600      	str	r6, [sp, #0]
 80029c4:	4623      	mov	r3, r4
 80029c6:	462a      	mov	r2, r5
 80029c8:	49c9      	ldr	r1, [pc, #804]	; (8002cf0 <_GLOBAL__sub_I_REG_FIFO+0xc4c>)
 80029ca:	48ca      	ldr	r0, [pc, #808]	; (8002cf4 <_GLOBAL__sub_I_REG_FIFO+0xc50>)
 80029cc:	f7fe fadc 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
RxTimeout(reg_rx_timeout, 1, false, 'c', 0x00, 0x01),
 80029d0:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80029d4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80029d8:	f8cd b000 	str.w	fp, [sp]
 80029dc:	4623      	mov	r3, r4
 80029de:	462a      	mov	r2, r5
 80029e0:	49c5      	ldr	r1, [pc, #788]	; (8002cf8 <_GLOBAL__sub_I_REG_FIFO+0xc54>)
 80029e2:	48c6      	ldr	r0, [pc, #792]	; (8002cfc <_GLOBAL__sub_I_REG_FIFO+0xc58>)
 80029e4:	f7fe fad0 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
RxDone(reg_rx_done, 1, false, 'c', 0x00, 0x01),
 80029e8:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80029ec:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80029f0:	f8cd b000 	str.w	fp, [sp]
 80029f4:	4623      	mov	r3, r4
 80029f6:	462a      	mov	r2, r5
 80029f8:	49c1      	ldr	r1, [pc, #772]	; (8002d00 <_GLOBAL__sub_I_REG_FIFO+0xc5c>)
 80029fa:	48c2      	ldr	r0, [pc, #776]	; (8002d04 <_GLOBAL__sub_I_REG_FIFO+0xc60>)
 80029fc:	f7fe fac4 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PayloadCrcError(reg_payload_crc_error, 1, false, 'c', 0x00, 0x01),
 8002a00:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002a04:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002a08:	f8cd b000 	str.w	fp, [sp]
 8002a0c:	4623      	mov	r3, r4
 8002a0e:	462a      	mov	r2, r5
 8002a10:	49bd      	ldr	r1, [pc, #756]	; (8002d08 <_GLOBAL__sub_I_REG_FIFO+0xc64>)
 8002a12:	48be      	ldr	r0, [pc, #760]	; (8002d0c <_GLOBAL__sub_I_REG_FIFO+0xc68>)
 8002a14:	f7fe fab8 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
ValidHeader(reg_valid_header, 1, false, 'c', 0x00, 0x01),
 8002a18:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002a1c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002a20:	f8cd b000 	str.w	fp, [sp]
 8002a24:	4623      	mov	r3, r4
 8002a26:	462a      	mov	r2, r5
 8002a28:	49b9      	ldr	r1, [pc, #740]	; (8002d10 <_GLOBAL__sub_I_REG_FIFO+0xc6c>)
 8002a2a:	48ba      	ldr	r0, [pc, #744]	; (8002d14 <_GLOBAL__sub_I_REG_FIFO+0xc70>)
 8002a2c:	f7fe faac 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
TxDone(reg_tx_done, 1, false, 'c', 0x00, 0x01),
 8002a30:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002a34:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002a38:	f8cd b000 	str.w	fp, [sp]
 8002a3c:	4623      	mov	r3, r4
 8002a3e:	462a      	mov	r2, r5
 8002a40:	49b5      	ldr	r1, [pc, #724]	; (8002d18 <_GLOBAL__sub_I_REG_FIFO+0xc74>)
 8002a42:	48b6      	ldr	r0, [pc, #728]	; (8002d1c <_GLOBAL__sub_I_REG_FIFO+0xc78>)
 8002a44:	f7fe faa0 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
CadDone(reg_cad_done, 1, false, 'c', 0x00, 0x01),
 8002a48:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002a4c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002a50:	f8cd b000 	str.w	fp, [sp]
 8002a54:	4623      	mov	r3, r4
 8002a56:	462a      	mov	r2, r5
 8002a58:	49b1      	ldr	r1, [pc, #708]	; (8002d20 <_GLOBAL__sub_I_REG_FIFO+0xc7c>)
 8002a5a:	48b2      	ldr	r0, [pc, #712]	; (8002d24 <_GLOBAL__sub_I_REG_FIFO+0xc80>)
 8002a5c:	f7fe fa94 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FhssChangeChannel(reg_fhss_change_channel, 1, false, 'c', 0x00, 0x01),
 8002a60:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002a64:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002a68:	f8cd b000 	str.w	fp, [sp]
 8002a6c:	4623      	mov	r3, r4
 8002a6e:	462a      	mov	r2, r5
 8002a70:	49ad      	ldr	r1, [pc, #692]	; (8002d28 <_GLOBAL__sub_I_REG_FIFO+0xc84>)
 8002a72:	48ae      	ldr	r0, [pc, #696]	; (8002d2c <_GLOBAL__sub_I_REG_FIFO+0xc88>)
 8002a74:	f7fe fa88 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
CadDetected(reg_cad_detected, 1, false, 'c', 0x00, 0x01),
 8002a78:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002a7c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002a80:	f8cd b000 	str.w	fp, [sp]
 8002a84:	4623      	mov	r3, r4
 8002a86:	462a      	mov	r2, r5
 8002a88:	49a9      	ldr	r1, [pc, #676]	; (8002d30 <_GLOBAL__sub_I_REG_FIFO+0xc8c>)
 8002a8a:	48aa      	ldr	r0, [pc, #680]	; (8002d34 <_GLOBAL__sub_I_REG_FIFO+0xc90>)
 8002a8c:	f7fe fa7c 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FifoRxBytesNb(reg_fifo_rx_bytes_nb, 1, false, 'r', 0x00, 0xFF),
 8002a90:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8002a94:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002a98:	f8cd 8000 	str.w	r8, [sp]
 8002a9c:	4623      	mov	r3, r4
 8002a9e:	462a      	mov	r2, r5
 8002aa0:	49a5      	ldr	r1, [pc, #660]	; (8002d38 <_GLOBAL__sub_I_REG_FIFO+0xc94>)
 8002aa2:	48a6      	ldr	r0, [pc, #664]	; (8002d3c <_GLOBAL__sub_I_REG_FIFO+0xc98>)
 8002aa4:	f7fe fa70 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
ValidHeaderCnt(reg_valid_header_cnt, 2, false, 'r', 0x0000, 0xFFFF),
 8002aa8:	e9cd 4901 	strd	r4, r9, [sp, #4]
 8002aac:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002ab0:	f8cd 8000 	str.w	r8, [sp]
 8002ab4:	4623      	mov	r3, r4
 8002ab6:	4651      	mov	r1, sl
 8002ab8:	2202      	movs	r2, #2
 8002aba:	48a1      	ldr	r0, [pc, #644]	; (8002d40 <_GLOBAL__sub_I_REG_FIFO+0xc9c>)
 8002abc:	f7fe fa64 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
ValidPacketCnt(reg_valid_packet_cnt, 2, false, 'c', 0x0000, 0xFFFF),
 8002ac0:	e9cd 4901 	strd	r4, r9, [sp, #4]
 8002ac4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002ac8:	f8cd b000 	str.w	fp, [sp]
 8002acc:	4623      	mov	r3, r4
 8002ace:	2202      	movs	r2, #2
 8002ad0:	499c      	ldr	r1, [pc, #624]	; (8002d44 <_GLOBAL__sub_I_REG_FIFO+0xca0>)
 8002ad2:	489d      	ldr	r0, [pc, #628]	; (8002d48 <_GLOBAL__sub_I_REG_FIFO+0xca4>)
 8002ad4:	f7fe fa58 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
RxCodingRate(reg_rx_coding_rate, 1, false, 'r', 0x00, 0x07),
 8002ad8:	2307      	movs	r3, #7
 8002ada:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002ade:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8002ae2:	f8cd 8000 	str.w	r8, [sp]
 8002ae6:	4623      	mov	r3, r4
 8002ae8:	462a      	mov	r2, r5
 8002aea:	4998      	ldr	r1, [pc, #608]	; (8002d4c <_GLOBAL__sub_I_REG_FIFO+0xca8>)
 8002aec:	4898      	ldr	r0, [pc, #608]	; (8002d50 <_GLOBAL__sub_I_REG_FIFO+0xcac>)
 8002aee:	f7fe fa4b 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
ModemStatus(reg_modem_status, 1, false, 'r', 0x00, 0x1F),
 8002af2:	231f      	movs	r3, #31
 8002af4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002af8:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8002afc:	f8cd 8000 	str.w	r8, [sp]
 8002b00:	4623      	mov	r3, r4
 8002b02:	462a      	mov	r2, r5
 8002b04:	4993      	ldr	r1, [pc, #588]	; (8002d54 <_GLOBAL__sub_I_REG_FIFO+0xcb0>)
 8002b06:	4894      	ldr	r0, [pc, #592]	; (8002d58 <_GLOBAL__sub_I_REG_FIFO+0xcb4>)
 8002b08:	f7fe fa3e 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PacketSnr(reg_packet_snr, 1, false, 'r', 0x00, 0xFF),
 8002b0c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8002b10:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002b14:	f8cd 8000 	str.w	r8, [sp]
 8002b18:	4623      	mov	r3, r4
 8002b1a:	462a      	mov	r2, r5
 8002b1c:	498f      	ldr	r1, [pc, #572]	; (8002d5c <_GLOBAL__sub_I_REG_FIFO+0xcb8>)
 8002b1e:	4890      	ldr	r0, [pc, #576]	; (8002d60 <_GLOBAL__sub_I_REG_FIFO+0xcbc>)
 8002b20:	f7fe fa32 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PacketRssi(reg_packet_rssi, 1, false, 'r', 0x00, 0xFF),
 8002b24:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8002b28:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002b2c:	f8cd 8000 	str.w	r8, [sp]
 8002b30:	4623      	mov	r3, r4
 8002b32:	462a      	mov	r2, r5
 8002b34:	498b      	ldr	r1, [pc, #556]	; (8002d64 <_GLOBAL__sub_I_REG_FIFO+0xcc0>)
 8002b36:	488c      	ldr	r0, [pc, #560]	; (8002d68 <_GLOBAL__sub_I_REG_FIFO+0xcc4>)
 8002b38:	f7fe fa26 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Rssi(reg_rssi, 1, false, 'r', 0x00, 0xFF),
 8002b3c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8002b40:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002b44:	f8cd 8000 	str.w	r8, [sp]
 8002b48:	4623      	mov	r3, r4
 8002b4a:	462a      	mov	r2, r5
 8002b4c:	4987      	ldr	r1, [pc, #540]	; (8002d6c <_GLOBAL__sub_I_REG_FIFO+0xcc8>)
 8002b4e:	4888      	ldr	r0, [pc, #544]	; (8002d70 <_GLOBAL__sub_I_REG_FIFO+0xccc>)
 8002b50:	f7fe fa1a 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PllTimeout(reg_pll_timeout, 1, false, 'r', 0x00, 0x01),
 8002b54:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002b58:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002b5c:	f8cd 8000 	str.w	r8, [sp]
 8002b60:	4623      	mov	r3, r4
 8002b62:	462a      	mov	r2, r5
 8002b64:	4983      	ldr	r1, [pc, #524]	; (8002d74 <_GLOBAL__sub_I_REG_FIFO+0xcd0>)
 8002b66:	4884      	ldr	r0, [pc, #528]	; (8002d78 <_GLOBAL__sub_I_REG_FIFO+0xcd4>)
 8002b68:	f7fe fa0e 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
CrcOnPayload(reg_crc_on_payload, 1, false, 'r', 0x00, 0x01),
 8002b6c:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002b70:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002b74:	f8cd 8000 	str.w	r8, [sp]
 8002b78:	4623      	mov	r3, r4
 8002b7a:	462a      	mov	r2, r5
 8002b7c:	497f      	ldr	r1, [pc, #508]	; (8002d7c <_GLOBAL__sub_I_REG_FIFO+0xcd8>)
 8002b7e:	4880      	ldr	r0, [pc, #512]	; (8002d80 <_GLOBAL__sub_I_REG_FIFO+0xcdc>)
 8002b80:	f7fe fa02 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FhssPresentChannel(reg_fhss_present_channel, 1, false, 'r', 0x00, 0x3F),
 8002b84:	233f      	movs	r3, #63	; 0x3f
 8002b86:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002b8a:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8002b8e:	f8cd 8000 	str.w	r8, [sp]
 8002b92:	4623      	mov	r3, r4
 8002b94:	462a      	mov	r2, r5
 8002b96:	497b      	ldr	r1, [pc, #492]	; (8002d84 <_GLOBAL__sub_I_REG_FIFO+0xce0>)
 8002b98:	487b      	ldr	r0, [pc, #492]	; (8002d88 <_GLOBAL__sub_I_REG_FIFO+0xce4>)
 8002b9a:	f7fe f9f5 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Bw(reg_bw, 1, false, 'w', 0x00, 0x09),
 8002b9e:	2309      	movs	r3, #9
CodingRate(reg_coding_rate, 1, false, 'w', 0x01, 0x04),
 8002ba0:	f04f 0a04 	mov.w	sl, #4
Bw(reg_bw, 1, false, 'w', 0x00, 0x09),
 8002ba4:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8002ba8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002bac:	9600      	str	r6, [sp, #0]
 8002bae:	4623      	mov	r3, r4
 8002bb0:	462a      	mov	r2, r5
 8002bb2:	4976      	ldr	r1, [pc, #472]	; (8002d8c <_GLOBAL__sub_I_REG_FIFO+0xce8>)
 8002bb4:	4876      	ldr	r0, [pc, #472]	; (8002d90 <_GLOBAL__sub_I_REG_FIFO+0xcec>)
 8002bb6:	f7fe f9e7 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
CodingRate(reg_coding_rate, 1, false, 'w', 0x01, 0x04),
 8002bba:	e9cd 5a01 	strd	r5, sl, [sp, #4]
 8002bbe:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002bc2:	9600      	str	r6, [sp, #0]
 8002bc4:	4623      	mov	r3, r4
 8002bc6:	462a      	mov	r2, r5
 8002bc8:	4972      	ldr	r1, [pc, #456]	; (8002d94 <_GLOBAL__sub_I_REG_FIFO+0xcf0>)
 8002bca:	4873      	ldr	r0, [pc, #460]	; (8002d98 <_GLOBAL__sub_I_REG_FIFO+0xcf4>)
 8002bcc:	f7fe f9dc 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
ImplicitHeaderModeOn(reg_implicit_header_mode_on, 1, false, 'w', 0x00, 0x01),
 8002bd0:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002bd4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002bd8:	9600      	str	r6, [sp, #0]
 8002bda:	4623      	mov	r3, r4
 8002bdc:	462a      	mov	r2, r5
 8002bde:	496f      	ldr	r1, [pc, #444]	; (8002d9c <_GLOBAL__sub_I_REG_FIFO+0xcf8>)
 8002be0:	486f      	ldr	r0, [pc, #444]	; (8002da0 <_GLOBAL__sub_I_REG_FIFO+0xcfc>)
 8002be2:	f7fe f9d1 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
SpreadingFactor(reg_spreading_factor, 1, false, 'w', 0x06, 0x0C),
 8002be6:	2306      	movs	r3, #6
 8002be8:	220c      	movs	r2, #12
 8002bea:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002bee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002bf2:	9600      	str	r6, [sp, #0]
 8002bf4:	4623      	mov	r3, r4
 8002bf6:	462a      	mov	r2, r5
 8002bf8:	496a      	ldr	r1, [pc, #424]	; (8002da4 <_GLOBAL__sub_I_REG_FIFO+0xd00>)
 8002bfa:	486b      	ldr	r0, [pc, #428]	; (8002da8 <_GLOBAL__sub_I_REG_FIFO+0xd04>)
 8002bfc:	f7fe f9c4 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
TxContinuousMode(reg_tx_continuous_mode, 1, false, 'w', 0x00, 0x01),
 8002c00:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002c04:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002c08:	9600      	str	r6, [sp, #0]
 8002c0a:	4623      	mov	r3, r4
 8002c0c:	462a      	mov	r2, r5
 8002c0e:	4967      	ldr	r1, [pc, #412]	; (8002dac <_GLOBAL__sub_I_REG_FIFO+0xd08>)
 8002c10:	4867      	ldr	r0, [pc, #412]	; (8002db0 <_GLOBAL__sub_I_REG_FIFO+0xd0c>)
 8002c12:	f7fe f9b9 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
RxPayloadCrcOn(reg_rx_payload_crc_on, 1, false, 'w', 0x00, 0x01),
 8002c16:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002c1a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002c1e:	9600      	str	r6, [sp, #0]
 8002c20:	4623      	mov	r3, r4
 8002c22:	462a      	mov	r2, r5
 8002c24:	4963      	ldr	r1, [pc, #396]	; (8002db4 <_GLOBAL__sub_I_REG_FIFO+0xd10>)
 8002c26:	4864      	ldr	r0, [pc, #400]	; (8002db8 <_GLOBAL__sub_I_REG_FIFO+0xd14>)
 8002c28:	f7fe f9ae 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
SymbTimeout(reg_symb_timeout, 2, false, 'w', 0x0000, 0x03FF),
 8002c2c:	f240 33ff 	movw	r3, #1023	; 0x3ff
PreambleLength(reg_preamble_length, 2, false, 'w', 0x0000, 0xFFFF),
 8002c30:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8002df0 <_GLOBAL__sub_I_REG_FIFO+0xd4c>
SymbTimeout(reg_symb_timeout, 2, false, 'w', 0x0000, 0x03FF),
 8002c34:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8002c38:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002c3c:	9600      	str	r6, [sp, #0]
 8002c3e:	4623      	mov	r3, r4
 8002c40:	2202      	movs	r2, #2
 8002c42:	495e      	ldr	r1, [pc, #376]	; (8002dbc <_GLOBAL__sub_I_REG_FIFO+0xd18>)
 8002c44:	485e      	ldr	r0, [pc, #376]	; (8002dc0 <_GLOBAL__sub_I_REG_FIFO+0xd1c>)
 8002c46:	f7fe f99f 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PreambleLength(reg_preamble_length, 2, false, 'w', 0x0000, 0xFFFF),
 8002c4a:	e9cd 4901 	strd	r4, r9, [sp, #4]
 8002c4e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002c52:	9600      	str	r6, [sp, #0]
 8002c54:	4623      	mov	r3, r4
 8002c56:	2202      	movs	r2, #2
 8002c58:	495a      	ldr	r1, [pc, #360]	; (8002dc4 <_GLOBAL__sub_I_REG_FIFO+0xd20>)
 8002c5a:	4658      	mov	r0, fp
 8002c5c:	f7fe f994 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PayloadLength(reg_payload_length, 1, false, 'w', 0x01, 0xFF),
 8002c60:	e9cd 5701 	strd	r5, r7, [sp, #4]
 8002c64:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002c68:	9600      	str	r6, [sp, #0]
 8002c6a:	4623      	mov	r3, r4
 8002c6c:	462a      	mov	r2, r5
 8002c6e:	4956      	ldr	r1, [pc, #344]	; (8002dc8 <_GLOBAL__sub_I_REG_FIFO+0xd24>)
 8002c70:	4856      	ldr	r0, [pc, #344]	; (8002dcc <_GLOBAL__sub_I_REG_FIFO+0xd28>)
 8002c72:	f7fe f989 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PayloadMaxLength(reg_payload_max_length, 1, false, 'w', 0x00, 0xFF),
 8002c76:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8002c7a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002c7e:	9600      	str	r6, [sp, #0]
 8002c80:	4623      	mov	r3, r4
 8002c82:	462a      	mov	r2, r5
 8002c84:	4952      	ldr	r1, [pc, #328]	; (8002dd0 <_GLOBAL__sub_I_REG_FIFO+0xd2c>)
 8002c86:	4853      	ldr	r0, [pc, #332]	; (8002dd4 <_GLOBAL__sub_I_REG_FIFO+0xd30>)
 8002c88:	f7fe f97e 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FreqHoppingPeriod(reg_freq_hopping_period, 1, false, 'w', 0x00, 0xFF),
 8002c8c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8002c90:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002c94:	9600      	str	r6, [sp, #0]
 8002c96:	4623      	mov	r3, r4
 8002c98:	462a      	mov	r2, r5
 8002c9a:	494f      	ldr	r1, [pc, #316]	; (8002dd8 <_GLOBAL__sub_I_REG_FIFO+0xd34>)
 8002c9c:	484f      	ldr	r0, [pc, #316]	; (8002ddc <_GLOBAL__sub_I_REG_FIFO+0xd38>)
 8002c9e:	f7fe f973 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FifoRxByteAddrPtr(reg_fifo_rx_byte_addr_ptr, 1, false, 'r', 0x00, 0xFF),
 8002ca2:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8002ca6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002caa:	f8cd 8000 	str.w	r8, [sp]
 8002cae:	4623      	mov	r3, r4
 8002cb0:	462a      	mov	r2, r5
 8002cb2:	494b      	ldr	r1, [pc, #300]	; (8002de0 <_GLOBAL__sub_I_REG_FIFO+0xd3c>)
 8002cb4:	484b      	ldr	r0, [pc, #300]	; (8002de4 <_GLOBAL__sub_I_REG_FIFO+0xd40>)
 8002cb6:	f7fe f967 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
LowDataRateOptimize(reg_low_data_rate_optimize, 1, false, 'w', 0x00, 0x01),
 8002cba:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002cbe:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002cc2:	9600      	str	r6, [sp, #0]
 8002cc4:	4623      	mov	r3, r4
 8002cc6:	462a      	mov	r2, r5
 8002cc8:	4947      	ldr	r1, [pc, #284]	; (8002de8 <_GLOBAL__sub_I_REG_FIFO+0xd44>)
 8002cca:	4848      	ldr	r0, [pc, #288]	; (8002dec <_GLOBAL__sub_I_REG_FIFO+0xd48>)
 8002ccc:	f7fe f95c 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
AgcAutoOn(reg_agc_auto_on, 1, false, 'w', 0x00, 0x01),
 8002cd0:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002cd4:	e08e      	b.n	8002df4 <_GLOBAL__sub_I_REG_FIFO+0xd50>
 8002cd6:	bf00      	nop
 8002cd8:	200018e4 	.word	0x200018e4
 8002cdc:	20001584 	.word	0x20001584
 8002ce0:	20001694 	.word	0x20001694
 8002ce4:	20000e14 	.word	0x20000e14
 8002ce8:	200016fc 	.word	0x200016fc
 8002cec:	20000f80 	.word	0x20000f80
 8002cf0:	20001684 	.word	0x20001684
 8002cf4:	20000ddc 	.word	0x20000ddc
 8002cf8:	2000189c 	.word	0x2000189c
 8002cfc:	200014a4 	.word	0x200014a4
 8002d00:	20001884 	.word	0x20001884
 8002d04:	20001450 	.word	0x20001450
 8002d08:	20001824 	.word	0x20001824
 8002d0c:	2000131c 	.word	0x2000131c
 8002d10:	200018ec 	.word	0x200018ec
 8002d14:	200015a0 	.word	0x200015a0
 8002d18:	200018dc 	.word	0x200018dc
 8002d1c:	20001568 	.word	0x20001568
 8002d20:	2000168c 	.word	0x2000168c
 8002d24:	20000df8 	.word	0x20000df8
 8002d28:	200016f4 	.word	0x200016f4
 8002d2c:	20000f64 	.word	0x20000f64
 8002d30:	2000167c 	.word	0x2000167c
 8002d34:	20000dc0 	.word	0x20000dc0
 8002d38:	2000172c 	.word	0x2000172c
 8002d3c:	20001028 	.word	0x20001028
 8002d40:	200015bc 	.word	0x200015bc
 8002d44:	2000190c 	.word	0x2000190c
 8002d48:	200015f4 	.word	0x200015f4
 8002d4c:	2000187c 	.word	0x2000187c
 8002d50:	20001434 	.word	0x20001434
 8002d54:	200017dc 	.word	0x200017dc
 8002d58:	20001220 	.word	0x20001220
 8002d5c:	2000181c 	.word	0x2000181c
 8002d60:	20001300 	.word	0x20001300
 8002d64:	20001814 	.word	0x20001814
 8002d68:	200012e4 	.word	0x200012e4
 8002d6c:	2000186c 	.word	0x2000186c
 8002d70:	200013fc 	.word	0x200013fc
 8002d74:	2000184c 	.word	0x2000184c
 8002d78:	200013a8 	.word	0x200013a8
 8002d7c:	200016a4 	.word	0x200016a4
 8002d80:	20000e4c 	.word	0x20000e4c
 8002d84:	20001704 	.word	0x20001704
 8002d88:	20000f9c 	.word	0x20000f9c
 8002d8c:	20001674 	.word	0x20001674
 8002d90:	20000da4 	.word	0x20000da4
 8002d94:	2000169c 	.word	0x2000169c
 8002d98:	20000e30 	.word	0x20000e30
 8002d9c:	20001784 	.word	0x20001784
 8002da0:	200010ec 	.word	0x200010ec
 8002da4:	200018ac 	.word	0x200018ac
 8002da8:	200014dc 	.word	0x200014dc
 8002dac:	200018d4 	.word	0x200018d4
 8002db0:	2000154c 	.word	0x2000154c
 8002db4:	20001894 	.word	0x20001894
 8002db8:	20001488 	.word	0x20001488
 8002dbc:	200018b4 	.word	0x200018b4
 8002dc0:	200014f8 	.word	0x200014f8
 8002dc4:	2000185c 	.word	0x2000185c
 8002dc8:	20001834 	.word	0x20001834
 8002dcc:	20001354 	.word	0x20001354
 8002dd0:	2000183c 	.word	0x2000183c
 8002dd4:	20001370 	.word	0x20001370
 8002dd8:	20001764 	.word	0x20001764
 8002ddc:	200010b4 	.word	0x200010b4
 8002de0:	20001724 	.word	0x20001724
 8002de4:	2000100c 	.word	0x2000100c
 8002de8:	200017b4 	.word	0x200017b4
 8002dec:	20001194 	.word	0x20001194
 8002df0:	200013e0 	.word	0x200013e0
 8002df4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002df8:	9600      	str	r6, [sp, #0]
 8002dfa:	4623      	mov	r3, r4
 8002dfc:	462a      	mov	r2, r5
 8002dfe:	49ce      	ldr	r1, [pc, #824]	; (8003138 <_GLOBAL__sub_I_REG_FIFO+0x1094>)
 8002e00:	48ce      	ldr	r0, [pc, #824]	; (800313c <_GLOBAL__sub_I_REG_FIFO+0x1098>)
 8002e02:	f7fe f8c1 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PpmCorrection(reg_ppm_correction, 1, false, 'w', 0x00, 0xFF),
 8002e06:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8002e0a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002e0e:	9600      	str	r6, [sp, #0]
 8002e10:	4623      	mov	r3, r4
 8002e12:	462a      	mov	r2, r5
 8002e14:	49ca      	ldr	r1, [pc, #808]	; (8003140 <_GLOBAL__sub_I_REG_FIFO+0x109c>)
 8002e16:	48cb      	ldr	r0, [pc, #812]	; (8003144 <_GLOBAL__sub_I_REG_FIFO+0x10a0>)
 8002e18:	f7fe f8b6 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FreqError(reg_freq_error, 3, false, 'r', 0x000000, 0x0FFFFF),
 8002e1c:	4bca      	ldr	r3, [pc, #808]	; (8003148 <_GLOBAL__sub_I_REG_FIFO+0x10a4>)
 8002e1e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002e22:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8002e26:	f8cd 8000 	str.w	r8, [sp]
 8002e2a:	4623      	mov	r3, r4
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	49c7      	ldr	r1, [pc, #796]	; (800314c <_GLOBAL__sub_I_REG_FIFO+0x10a8>)
 8002e30:	48c7      	ldr	r0, [pc, #796]	; (8003150 <_GLOBAL__sub_I_REG_FIFO+0x10ac>)
 8002e32:	f7fe f8a9 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
RssiWideband(reg_rssi_wideband, 1, false, 'r', 0x00, 0xFF),
 8002e36:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8002e3a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002e3e:	f8cd 8000 	str.w	r8, [sp]
 8002e42:	4623      	mov	r3, r4
 8002e44:	462a      	mov	r2, r5
 8002e46:	49c3      	ldr	r1, [pc, #780]	; (8003154 <_GLOBAL__sub_I_REG_FIFO+0x10b0>)
 8002e48:	48c3      	ldr	r0, [pc, #780]	; (8003158 <_GLOBAL__sub_I_REG_FIFO+0x10b4>)
 8002e4a:	f7fe f89d 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
DetectionOptimize(reg_detection_optimize, 1, false, 'w', 0x03, 0x05, reserv_detection_optimize, 1),
 8002e4e:	4bc3      	ldr	r3, [pc, #780]	; (800315c <_GLOBAL__sub_I_REG_FIFO+0x10b8>)
 8002e50:	f04f 0903 	mov.w	r9, #3
 8002e54:	9303      	str	r3, [sp, #12]
 8002e56:	2305      	movs	r3, #5
 8002e58:	9504      	str	r5, [sp, #16]
 8002e5a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8002e5e:	9600      	str	r6, [sp, #0]
 8002e60:	4623      	mov	r3, r4
 8002e62:	462a      	mov	r2, r5
 8002e64:	49be      	ldr	r1, [pc, #760]	; (8003160 <_GLOBAL__sub_I_REG_FIFO+0x10bc>)
 8002e66:	48bf      	ldr	r0, [pc, #764]	; (8003164 <_GLOBAL__sub_I_REG_FIFO+0x10c0>)
 8002e68:	f7fe f88e 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
InvertIQ(reg_invert_iq, 1, false, 'w', 0x00, 0x01),
 8002e6c:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002e70:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002e74:	9600      	str	r6, [sp, #0]
 8002e76:	4623      	mov	r3, r4
 8002e78:	462a      	mov	r2, r5
 8002e7a:	49bb      	ldr	r1, [pc, #748]	; (8003168 <_GLOBAL__sub_I_REG_FIFO+0x10c4>)
 8002e7c:	48bb      	ldr	r0, [pc, #748]	; (800316c <_GLOBAL__sub_I_REG_FIFO+0x10c8>)
 8002e7e:	f7fe f883 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
DetectionThreshold(reg_detection_threshold, 1, false, 'w', 0x0A, 0x0C, reserv_detection_threshold, 1),
 8002e82:	4bbb      	ldr	r3, [pc, #748]	; (8003170 <_GLOBAL__sub_I_REG_FIFO+0x10cc>)
 8002e84:	210c      	movs	r1, #12
 8002e86:	9303      	str	r3, [sp, #12]
 8002e88:	230a      	movs	r3, #10
 8002e8a:	9504      	str	r5, [sp, #16]
 8002e8c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8002e90:	9600      	str	r6, [sp, #0]
 8002e92:	4623      	mov	r3, r4
 8002e94:	462a      	mov	r2, r5
 8002e96:	49b7      	ldr	r1, [pc, #732]	; (8003174 <_GLOBAL__sub_I_REG_FIFO+0x10d0>)
 8002e98:	48b7      	ldr	r0, [pc, #732]	; (8003178 <_GLOBAL__sub_I_REG_FIFO+0x10d4>)
 8002e9a:	f7fe f875 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
SyncWord(reg_sync_word, 1, false, 'w', 0x00, 0xFF),  // , reserv_sync_word, 1),
 8002e9e:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8002ea2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002ea6:	9600      	str	r6, [sp, #0]
 8002ea8:	4623      	mov	r3, r4
 8002eaa:	462a      	mov	r2, r5
 8002eac:	49b3      	ldr	r1, [pc, #716]	; (800317c <_GLOBAL__sub_I_REG_FIFO+0x10d8>)
 8002eae:	48b4      	ldr	r0, [pc, #720]	; (8003180 <_GLOBAL__sub_I_REG_FIFO+0x10dc>)
 8002eb0:	f7fe f86a 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Dio0Mapping(reg_dio0_mapping, 1, false, 'w', 0x00, 0x03),
 8002eb4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002eb8:	e9cd 4901 	strd	r4, r9, [sp, #4]
 8002ebc:	9600      	str	r6, [sp, #0]
 8002ebe:	4623      	mov	r3, r4
 8002ec0:	462a      	mov	r2, r5
 8002ec2:	49b0      	ldr	r1, [pc, #704]	; (8003184 <_GLOBAL__sub_I_REG_FIFO+0x10e0>)
 8002ec4:	48b0      	ldr	r0, [pc, #704]	; (8003188 <_GLOBAL__sub_I_REG_FIFO+0x10e4>)
 8002ec6:	f7fe f85f 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Dio1Mapping(reg_dio1_mapping, 1, false, 'w', 0x00, 0x03),
 8002eca:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002ece:	e9cd 4901 	strd	r4, r9, [sp, #4]
 8002ed2:	9600      	str	r6, [sp, #0]
 8002ed4:	4623      	mov	r3, r4
 8002ed6:	462a      	mov	r2, r5
 8002ed8:	49ac      	ldr	r1, [pc, #688]	; (800318c <_GLOBAL__sub_I_REG_FIFO+0x10e8>)
 8002eda:	48ad      	ldr	r0, [pc, #692]	; (8003190 <_GLOBAL__sub_I_REG_FIFO+0x10ec>)
 8002edc:	f7fe f854 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Dio2Mapping(reg_dio2_mapping, 1, false, 'w', 0x00, 0x03),
 8002ee0:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002ee4:	e9cd 4901 	strd	r4, r9, [sp, #4]
 8002ee8:	9600      	str	r6, [sp, #0]
 8002eea:	4623      	mov	r3, r4
 8002eec:	462a      	mov	r2, r5
 8002eee:	49a9      	ldr	r1, [pc, #676]	; (8003194 <_GLOBAL__sub_I_REG_FIFO+0x10f0>)
 8002ef0:	48a9      	ldr	r0, [pc, #676]	; (8003198 <_GLOBAL__sub_I_REG_FIFO+0x10f4>)
 8002ef2:	f7fe f849 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Dio3Mapping(reg_dio3_mapping, 1, false, 'w', 0x00, 0x03),
 8002ef6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002efa:	e9cd 4901 	strd	r4, r9, [sp, #4]
 8002efe:	9600      	str	r6, [sp, #0]
 8002f00:	4623      	mov	r3, r4
 8002f02:	462a      	mov	r2, r5
 8002f04:	49a5      	ldr	r1, [pc, #660]	; (800319c <_GLOBAL__sub_I_REG_FIFO+0x10f8>)
 8002f06:	48a6      	ldr	r0, [pc, #664]	; (80031a0 <_GLOBAL__sub_I_REG_FIFO+0x10fc>)
 8002f08:	f7fe f83e 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Dio4Mapping(reg_dio4_mapping, 1, false, 'w', 0x00, 0x03),
 8002f0c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002f10:	e9cd 4901 	strd	r4, r9, [sp, #4]
 8002f14:	9600      	str	r6, [sp, #0]
 8002f16:	4623      	mov	r3, r4
 8002f18:	462a      	mov	r2, r5
 8002f1a:	49a2      	ldr	r1, [pc, #648]	; (80031a4 <_GLOBAL__sub_I_REG_FIFO+0x1100>)
 8002f1c:	48a2      	ldr	r0, [pc, #648]	; (80031a8 <_GLOBAL__sub_I_REG_FIFO+0x1104>)
 8002f1e:	f7fe f833 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Dio5Mapping(reg_dio5_mapping, 1, false, 'w', 0x00, 0x03),
 8002f22:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002f26:	e9cd 4901 	strd	r4, r9, [sp, #4]
 8002f2a:	9600      	str	r6, [sp, #0]
 8002f2c:	4623      	mov	r3, r4
 8002f2e:	462a      	mov	r2, r5
 8002f30:	499e      	ldr	r1, [pc, #632]	; (80031ac <_GLOBAL__sub_I_REG_FIFO+0x1108>)
 8002f32:	489f      	ldr	r0, [pc, #636]	; (80031b0 <_GLOBAL__sub_I_REG_FIFO+0x110c>)
 8002f34:	f7fe f828 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
MapPreambleDetect(reg_map_preamble_detect, 1, false, 'w', 0x00, 0x01),
 8002f38:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002f3c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002f40:	9600      	str	r6, [sp, #0]
 8002f42:	4623      	mov	r3, r4
 8002f44:	462a      	mov	r2, r5
 8002f46:	499b      	ldr	r1, [pc, #620]	; (80031b4 <_GLOBAL__sub_I_REG_FIFO+0x1110>)
 8002f48:	489b      	ldr	r0, [pc, #620]	; (80031b8 <_GLOBAL__sub_I_REG_FIFO+0x1114>)
 8002f4a:	f7fe f81d 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Version(reg_version, 1, false, 'r', 0x00, 0xFF),
 8002f4e:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8002f52:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002f56:	f8cd 8000 	str.w	r8, [sp]
 8002f5a:	4623      	mov	r3, r4
 8002f5c:	462a      	mov	r2, r5
 8002f5e:	4997      	ldr	r1, [pc, #604]	; (80031bc <_GLOBAL__sub_I_REG_FIFO+0x1118>)
 8002f60:	4897      	ldr	r0, [pc, #604]	; (80031c0 <_GLOBAL__sub_I_REG_FIFO+0x111c>)
 8002f62:	f7fe f811 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FastHopOn(reg_fast_hop_on, 1, false, 'w', 0x00, 0x01),
 8002f66:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002f6a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002f6e:	9600      	str	r6, [sp, #0]
 8002f70:	4623      	mov	r3, r4
 8002f72:	462a      	mov	r2, r5
 8002f74:	4993      	ldr	r1, [pc, #588]	; (80031c4 <_GLOBAL__sub_I_REG_FIFO+0x1120>)
 8002f76:	4894      	ldr	r0, [pc, #592]	; (80031c8 <_GLOBAL__sub_I_REG_FIFO+0x1124>)
 8002f78:	f7fe f806 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
TcxoInputOn(reg_tcxo_input_on, 1, false, 'w', 0x00, 0x01),
 8002f7c:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002f80:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002f84:	9600      	str	r6, [sp, #0]
 8002f86:	4623      	mov	r3, r4
 8002f88:	462a      	mov	r2, r5
 8002f8a:	4990      	ldr	r1, [pc, #576]	; (80031cc <_GLOBAL__sub_I_REG_FIFO+0x1128>)
 8002f8c:	4890      	ldr	r0, [pc, #576]	; (80031d0 <_GLOBAL__sub_I_REG_FIFO+0x112c>)
 8002f8e:	f7fd fffb 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PaDac(reg_pa_dac, 1, false, 'w', 0x04, 0x07, reserv_pa_dac, 2),
 8002f92:	2302      	movs	r3, #2
 8002f94:	9304      	str	r3, [sp, #16]
 8002f96:	4b8f      	ldr	r3, [pc, #572]	; (80031d4 <_GLOBAL__sub_I_REG_FIFO+0x1130>)
 8002f98:	9600      	str	r6, [sp, #0]
 8002f9a:	9303      	str	r3, [sp, #12]
 8002f9c:	2307      	movs	r3, #7
 8002f9e:	462a      	mov	r2, r5
 8002fa0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002fa4:	498c      	ldr	r1, [pc, #560]	; (80031d8 <_GLOBAL__sub_I_REG_FIFO+0x1134>)
 8002fa6:	4623      	mov	r3, r4
 8002fa8:	488c      	ldr	r0, [pc, #560]	; (80031dc <_GLOBAL__sub_I_REG_FIFO+0x1138>)
 8002faa:	f7fd ffed 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FormerTemp(reg_former_temp, 1, false, 'r', 0x00, 0xFF),
 8002fae:	e9cd 4701 	strd	r4, r7, [sp, #4]
BitRateFrac(reg_bit_rate_frac, 1, false, 'w', 0x00, 0x0F),
 8002fb2:	270f      	movs	r7, #15
FormerTemp(reg_former_temp, 1, false, 'r', 0x00, 0xFF),
 8002fb4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002fb8:	f8cd 8000 	str.w	r8, [sp]
 8002fbc:	4623      	mov	r3, r4
 8002fbe:	462a      	mov	r2, r5
 8002fc0:	4987      	ldr	r1, [pc, #540]	; (80031e0 <_GLOBAL__sub_I_REG_FIFO+0x113c>)
 8002fc2:	4888      	ldr	r0, [pc, #544]	; (80031e4 <_GLOBAL__sub_I_REG_FIFO+0x1140>)
 8002fc4:	f7fd ffe0 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
BitRateFrac(reg_bit_rate_frac, 1, false, 'w', 0x00, 0x0F),
 8002fc8:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8002fcc:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002fd0:	9600      	str	r6, [sp, #0]
 8002fd2:	4623      	mov	r3, r4
 8002fd4:	462a      	mov	r2, r5
 8002fd6:	4984      	ldr	r1, [pc, #528]	; (80031e8 <_GLOBAL__sub_I_REG_FIFO+0x1144>)
 8002fd8:	4884      	ldr	r0, [pc, #528]	; (80031ec <_GLOBAL__sub_I_REG_FIFO+0x1148>)
 8002fda:	f7fd ffd5 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
AgcReferenceLevel(reg_agc_reference_level, 1, false, 'w', 0x00, 0x3F),
 8002fde:	233f      	movs	r3, #63	; 0x3f
 8002fe0:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002fe4:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8002fe8:	9600      	str	r6, [sp, #0]
 8002fea:	4623      	mov	r3, r4
 8002fec:	462a      	mov	r2, r5
 8002fee:	4980      	ldr	r1, [pc, #512]	; (80031f0 <_GLOBAL__sub_I_REG_FIFO+0x114c>)
 8002ff0:	4880      	ldr	r0, [pc, #512]	; (80031f4 <_GLOBAL__sub_I_REG_FIFO+0x1150>)
 8002ff2:	f7fd ffc9 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
AgcStep1(reg_agc_step1, 1, false, 'w', 0x00, 0x1F),
 8002ff6:	231f      	movs	r3, #31
AgcStep4(reg_agc_step4, 1, false, 'w', 0x00, 0x0F),
 8002ff8:	46b2      	mov	sl, r6
AgcStep1(reg_agc_step1, 1, false, 'w', 0x00, 0x1F),
 8002ffa:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8002ffe:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003002:	9600      	str	r6, [sp, #0]
 8003004:	4623      	mov	r3, r4
 8003006:	462a      	mov	r2, r5
 8003008:	497b      	ldr	r1, [pc, #492]	; (80031f8 <_GLOBAL__sub_I_REG_FIFO+0x1154>)
 800300a:	487c      	ldr	r0, [pc, #496]	; (80031fc <_GLOBAL__sub_I_REG_FIFO+0x1158>)
 800300c:	f7fd ffbc 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
AgcStep2(reg_agc_step2, 1, false, 'w', 0x00, 0x0F),
 8003010:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8003014:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003018:	9600      	str	r6, [sp, #0]
 800301a:	4623      	mov	r3, r4
 800301c:	462a      	mov	r2, r5
 800301e:	4978      	ldr	r1, [pc, #480]	; (8003200 <_GLOBAL__sub_I_REG_FIFO+0x115c>)
 8003020:	4878      	ldr	r0, [pc, #480]	; (8003204 <_GLOBAL__sub_I_REG_FIFO+0x1160>)
 8003022:	f7fd ffb1 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
AgcStep4(reg_agc_step4, 1, false, 'w', 0x00, 0x0F),
 8003026:	f8df 8200 	ldr.w	r8, [pc, #512]	; 8003228 <_GLOBAL__sub_I_REG_FIFO+0x1184>
AgcStep3(reg_agc_step3, 1, false, 'w', 0x00, 0x0F),
 800302a:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800302e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003032:	9600      	str	r6, [sp, #0]
 8003034:	4623      	mov	r3, r4
 8003036:	462a      	mov	r2, r5
 8003038:	4973      	ldr	r1, [pc, #460]	; (8003208 <_GLOBAL__sub_I_REG_FIFO+0x1164>)
 800303a:	4874      	ldr	r0, [pc, #464]	; (800320c <_GLOBAL__sub_I_REG_FIFO+0x1168>)
 800303c:	f7fd ffa4 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
AgcStep4(reg_agc_step4, 1, false, 'w', 0x00, 0x0F),
 8003040:	9600      	str	r6, [sp, #0]
AgcStep5(reg_agc_step5, 1, false, 'w', 0x00, 0x0F),
 8003042:	4e73      	ldr	r6, [pc, #460]	; (8003210 <_GLOBAL__sub_I_REG_FIFO+0x116c>)
AgcStep4(reg_agc_step4, 1, false, 'w', 0x00, 0x0F),
 8003044:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8003048:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800304c:	4623      	mov	r3, r4
 800304e:	462a      	mov	r2, r5
 8003050:	4970      	ldr	r1, [pc, #448]	; (8003214 <_GLOBAL__sub_I_REG_FIFO+0x1170>)
 8003052:	4640      	mov	r0, r8
 8003054:	f7fd ff98 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
AgcStep5(reg_agc_step5, 1, false, 'w', 0x00, 0x0F),
 8003058:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800305c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003060:	4623      	mov	r3, r4
 8003062:	462a      	mov	r2, r5
 8003064:	f8cd a000 	str.w	sl, [sp]
 8003068:	496b      	ldr	r1, [pc, #428]	; (8003218 <_GLOBAL__sub_I_REG_FIFO+0x1174>)
 800306a:	4630      	mov	r0, r6
 800306c:	f7fd ff8c 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PllBandwidth(reg_pll_bandwidth, 1, false, 'w', 0x00, 0x03);
 8003070:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003074:	e9cd 4901 	strd	r4, r9, [sp, #4]
 8003078:	4623      	mov	r3, r4
};
 800307a:	4c68      	ldr	r4, [pc, #416]	; (800321c <_GLOBAL__sub_I_REG_FIFO+0x1178>)
PllBandwidth(reg_pll_bandwidth, 1, false, 'w', 0x00, 0x03);
 800307c:	462a      	mov	r2, r5
};
 800307e:	4625      	mov	r5, r4
PllBandwidth(reg_pll_bandwidth, 1, false, 'w', 0x00, 0x03);
 8003080:	4f67      	ldr	r7, [pc, #412]	; (8003220 <_GLOBAL__sub_I_REG_FIFO+0x117c>)
 8003082:	f8cd a000 	str.w	sl, [sp]
 8003086:	4967      	ldr	r1, [pc, #412]	; (8003224 <_GLOBAL__sub_I_REG_FIFO+0x1180>)
 8003088:	4638      	mov	r0, r7
 800308a:	f7fd ff7d 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
};
 800308e:	f8df c19c 	ldr.w	ip, [pc, #412]	; 800322c <_GLOBAL__sub_I_REG_FIFO+0x1188>
 8003092:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003096:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003098:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800309c:	f8df c190 	ldr.w	ip, [pc, #400]	; 8003230 <_GLOBAL__sub_I_REG_FIFO+0x118c>
 80030a0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80030a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80030a8:	f104 051c 	add.w	r5, r4, #28
 80030ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ae:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80030b2:	f8df c180 	ldr.w	ip, [pc, #384]	; 8003234 <_GLOBAL__sub_I_REG_FIFO+0x1190>
 80030b6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80030ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80030be:	f104 0538 	add.w	r5, r4, #56	; 0x38
 80030c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030c4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80030c8:	f8df c16c 	ldr.w	ip, [pc, #364]	; 8003238 <_GLOBAL__sub_I_REG_FIFO+0x1194>
 80030cc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80030d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80030d4:	f104 0554 	add.w	r5, r4, #84	; 0x54
 80030d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030da:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80030de:	f8df c15c 	ldr.w	ip, [pc, #348]	; 800323c <_GLOBAL__sub_I_REG_FIFO+0x1198>
 80030e2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80030e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80030ea:	f104 0570 	add.w	r5, r4, #112	; 0x70
 80030ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030f0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80030f4:	f8df c148 	ldr.w	ip, [pc, #328]	; 8003240 <_GLOBAL__sub_I_REG_FIFO+0x119c>
 80030f8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80030fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003100:	f104 058c 	add.w	r5, r4, #140	; 0x8c
 8003104:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003106:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800310a:	f8df c138 	ldr.w	ip, [pc, #312]	; 8003244 <_GLOBAL__sub_I_REG_FIFO+0x11a0>
 800310e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003112:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003116:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
 800311a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800311c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003120:	f8df c124 	ldr.w	ip, [pc, #292]	; 8003248 <_GLOBAL__sub_I_REG_FIFO+0x11a4>
 8003124:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003128:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800312c:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
 8003130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003132:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003136:	e089      	b.n	800324c <_GLOBAL__sub_I_REG_FIFO+0x11a8>
 8003138:	20001634 	.word	0x20001634
 800313c:	20000cc4 	.word	0x20000cc4
 8003140:	20001854 	.word	0x20001854
 8003144:	200013c4 	.word	0x200013c4
 8003148:	000fffff 	.word	0x000fffff
 800314c:	2000174c 	.word	0x2000174c
 8003150:	20001098 	.word	0x20001098
 8003154:	20001874 	.word	0x20001874
 8003158:	20001418 	.word	0x20001418
 800315c:	20000000 	.word	0x20000000
 8003160:	200016ac 	.word	0x200016ac
 8003164:	20000e68 	.word	0x20000e68
 8003168:	2000178c 	.word	0x2000178c
 800316c:	20001108 	.word	0x20001108
 8003170:	20000004 	.word	0x20000004
 8003174:	200016b4 	.word	0x200016b4
 8003178:	20000e84 	.word	0x20000e84
 800317c:	200018c4 	.word	0x200018c4
 8003180:	20001514 	.word	0x20001514
 8003184:	200016bc 	.word	0x200016bc
 8003188:	20000ea0 	.word	0x20000ea0
 800318c:	200016c4 	.word	0x200016c4
 8003190:	20000ebc 	.word	0x20000ebc
 8003194:	200016cc 	.word	0x200016cc
 8003198:	20000ed8 	.word	0x20000ed8
 800319c:	200016d4 	.word	0x200016d4
 80031a0:	20000ef4 	.word	0x20000ef4
 80031a4:	200016dc 	.word	0x200016dc
 80031a8:	20000f10 	.word	0x20000f10
 80031ac:	200016e4 	.word	0x200016e4
 80031b0:	20000f2c 	.word	0x20000f2c
 80031b4:	200017c4 	.word	0x200017c4
 80031b8:	200011cc 	.word	0x200011cc
 80031bc:	2000191c 	.word	0x2000191c
 80031c0:	20001610 	.word	0x20001610
 80031c4:	200016ec 	.word	0x200016ec
 80031c8:	20000f48 	.word	0x20000f48
 80031cc:	200018cc 	.word	0x200018cc
 80031d0:	20001530 	.word	0x20001530
 80031d4:	20000010 	.word	0x20000010
 80031d8:	200017fc 	.word	0x200017fc
 80031dc:	20001290 	.word	0x20001290
 80031e0:	20001744 	.word	0x20001744
 80031e4:	2000107c 	.word	0x2000107c
 80031e8:	2000166c 	.word	0x2000166c
 80031ec:	20000d88 	.word	0x20000d88
 80031f0:	2000163c 	.word	0x2000163c
 80031f4:	20000ce0 	.word	0x20000ce0
 80031f8:	20001644 	.word	0x20001644
 80031fc:	20000cfc 	.word	0x20000cfc
 8003200:	2000164c 	.word	0x2000164c
 8003204:	20000d18 	.word	0x20000d18
 8003208:	20001654 	.word	0x20001654
 800320c:	20000d34 	.word	0x20000d34
 8003210:	20000d6c 	.word	0x20000d6c
 8003214:	2000165c 	.word	0x2000165c
 8003218:	20001664 	.word	0x20001664
 800321c:	20000340 	.word	0x20000340
 8003220:	2000138c 	.word	0x2000138c
 8003224:	20001844 	.word	0x20001844
 8003228:	20000d50 	.word	0x20000d50
 800322c:	20000fb8 	.word	0x20000fb8
 8003230:	20001178 	.word	0x20001178
 8003234:	20000ca8 	.word	0x20000ca8
 8003238:	200011b0 	.word	0x200011b0
 800323c:	20001204 	.word	0x20001204
 8003240:	200010d0 	.word	0x200010d0
 8003244:	200012c8 	.word	0x200012c8
 8003248:	200011e8 	.word	0x200011e8
 800324c:	f8df c62c 	ldr.w	ip, [pc, #1580]	; 800387c <_GLOBAL__sub_I_REG_FIFO+0x17d8>
 8003250:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003254:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003258:	f104 05e0 	add.w	r5, r4, #224	; 0xe0
 800325c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800325e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003262:	f8df c61c 	ldr.w	ip, [pc, #1564]	; 8003880 <_GLOBAL__sub_I_REG_FIFO+0x17dc>
 8003266:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800326a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800326e:	f104 05fc 	add.w	r5, r4, #252	; 0xfc
 8003272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003274:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003278:	f8df c608 	ldr.w	ip, [pc, #1544]	; 8003884 <_GLOBAL__sub_I_REG_FIFO+0x17e0>
 800327c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003280:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003284:	f504 758c 	add.w	r5, r4, #280	; 0x118
 8003288:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800328a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800328e:	f8df c5f8 	ldr.w	ip, [pc, #1528]	; 8003888 <_GLOBAL__sub_I_REG_FIFO+0x17e4>
 8003292:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003296:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800329a:	f504 759a 	add.w	r5, r4, #308	; 0x134
 800329e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032a0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80032a4:	f8df c5e4 	ldr.w	ip, [pc, #1508]	; 800388c <_GLOBAL__sub_I_REG_FIFO+0x17e8>
 80032a8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80032ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80032b0:	f504 75a8 	add.w	r5, r4, #336	; 0x150
 80032b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032b6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80032ba:	f8df c5d4 	ldr.w	ip, [pc, #1492]	; 8003890 <_GLOBAL__sub_I_REG_FIFO+0x17ec>
 80032be:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80032c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80032c6:	f504 75b6 	add.w	r5, r4, #364	; 0x16c
 80032ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032cc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80032d0:	f8df c5c0 	ldr.w	ip, [pc, #1472]	; 8003894 <_GLOBAL__sub_I_REG_FIFO+0x17f0>
 80032d4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80032d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80032dc:	f504 75c4 	add.w	r5, r4, #392	; 0x188
 80032e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032e2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80032e6:	f8df c5b0 	ldr.w	ip, [pc, #1456]	; 8003898 <_GLOBAL__sub_I_REG_FIFO+0x17f4>
 80032ea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80032ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80032f2:	f504 75d2 	add.w	r5, r4, #420	; 0x1a4
 80032f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032f8:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80032fc:	f8df c59c 	ldr.w	ip, [pc, #1436]	; 800389c <_GLOBAL__sub_I_REG_FIFO+0x17f8>
 8003300:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003304:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003308:	f504 75e0 	add.w	r5, r4, #448	; 0x1c0
 800330c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800330e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003312:	f8df c58c 	ldr.w	ip, [pc, #1420]	; 80038a0 <_GLOBAL__sub_I_REG_FIFO+0x17fc>
 8003316:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800331a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800331e:	f504 75ee 	add.w	r5, r4, #476	; 0x1dc
 8003322:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003324:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003328:	f8df c578 	ldr.w	ip, [pc, #1400]	; 80038a4 <_GLOBAL__sub_I_REG_FIFO+0x1800>
 800332c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003330:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003334:	f504 75fc 	add.w	r5, r4, #504	; 0x1f8
 8003338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800333a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800333e:	f8df c568 	ldr.w	ip, [pc, #1384]	; 80038a8 <_GLOBAL__sub_I_REG_FIFO+0x1804>
 8003342:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003346:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800334a:	f504 7505 	add.w	r5, r4, #532	; 0x214
 800334e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003350:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003354:	f8df c554 	ldr.w	ip, [pc, #1364]	; 80038ac <_GLOBAL__sub_I_REG_FIFO+0x1808>
 8003358:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800335c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003360:	f504 750c 	add.w	r5, r4, #560	; 0x230
 8003364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003366:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800336a:	f8df c544 	ldr.w	ip, [pc, #1348]	; 80038b0 <_GLOBAL__sub_I_REG_FIFO+0x180c>
 800336e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003372:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003376:	f504 7513 	add.w	r5, r4, #588	; 0x24c
 800337a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800337c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003380:	f8df c530 	ldr.w	ip, [pc, #1328]	; 80038b4 <_GLOBAL__sub_I_REG_FIFO+0x1810>
 8003384:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003388:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800338c:	f504 751a 	add.w	r5, r4, #616	; 0x268
 8003390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003392:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003396:	f8df c520 	ldr.w	ip, [pc, #1312]	; 80038b8 <_GLOBAL__sub_I_REG_FIFO+0x1814>
 800339a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800339e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80033a2:	f504 7521 	add.w	r5, r4, #644	; 0x284
 80033a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033a8:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80033ac:	f8df c50c 	ldr.w	ip, [pc, #1292]	; 80038bc <_GLOBAL__sub_I_REG_FIFO+0x1818>
 80033b0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80033b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80033b8:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 80033bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033be:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80033c2:	f8df c4fc 	ldr.w	ip, [pc, #1276]	; 80038c0 <_GLOBAL__sub_I_REG_FIFO+0x181c>
 80033c6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80033ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80033ce:	f504 752f 	add.w	r5, r4, #700	; 0x2bc
 80033d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033d4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80033d8:	f8df c4e8 	ldr.w	ip, [pc, #1256]	; 80038c4 <_GLOBAL__sub_I_REG_FIFO+0x1820>
 80033dc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80033e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80033e4:	f504 7536 	add.w	r5, r4, #728	; 0x2d8
 80033e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ea:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80033ee:	f8df c4d8 	ldr.w	ip, [pc, #1240]	; 80038c8 <_GLOBAL__sub_I_REG_FIFO+0x1824>
 80033f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80033f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80033fa:	f504 753d 	add.w	r5, r4, #756	; 0x2f4
 80033fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003400:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003404:	f8df c4c4 	ldr.w	ip, [pc, #1220]	; 80038cc <_GLOBAL__sub_I_REG_FIFO+0x1828>
 8003408:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800340c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003410:	f504 7544 	add.w	r5, r4, #784	; 0x310
 8003414:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003416:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800341a:	f8df c4b4 	ldr.w	ip, [pc, #1204]	; 80038d0 <_GLOBAL__sub_I_REG_FIFO+0x182c>
 800341e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003422:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003426:	f504 754b 	add.w	r5, r4, #812	; 0x32c
 800342a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800342c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003430:	f8df c4a0 	ldr.w	ip, [pc, #1184]	; 80038d4 <_GLOBAL__sub_I_REG_FIFO+0x1830>
 8003434:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003438:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800343c:	f504 7552 	add.w	r5, r4, #840	; 0x348
 8003440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003442:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003446:	f8df c490 	ldr.w	ip, [pc, #1168]	; 80038d8 <_GLOBAL__sub_I_REG_FIFO+0x1834>
 800344a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800344e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003452:	f504 7559 	add.w	r5, r4, #868	; 0x364
 8003456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003458:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800345c:	f8df c47c 	ldr.w	ip, [pc, #1148]	; 80038dc <_GLOBAL__sub_I_REG_FIFO+0x1838>
 8003460:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003464:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003468:	f504 7560 	add.w	r5, r4, #896	; 0x380
 800346c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800346e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003472:	f8df c46c 	ldr.w	ip, [pc, #1132]	; 80038e0 <_GLOBAL__sub_I_REG_FIFO+0x183c>
 8003476:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800347a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800347e:	f504 7567 	add.w	r5, r4, #924	; 0x39c
 8003482:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003484:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003488:	f8df c458 	ldr.w	ip, [pc, #1112]	; 80038e4 <_GLOBAL__sub_I_REG_FIFO+0x1840>
 800348c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003490:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003494:	f504 756e 	add.w	r5, r4, #952	; 0x3b8
 8003498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800349a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800349e:	f8df c448 	ldr.w	ip, [pc, #1096]	; 80038e8 <_GLOBAL__sub_I_REG_FIFO+0x1844>
 80034a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80034a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80034aa:	f504 7575 	add.w	r5, r4, #980	; 0x3d4
 80034ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80034b4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80034b8:	4de0      	ldr	r5, [pc, #896]	; (800383c <_GLOBAL__sub_I_REG_FIFO+0x1798>)
 80034ba:	f504 7c7c 	add.w	ip, r4, #1008	; 0x3f0
 80034be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80034c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80034c8:	4ddd      	ldr	r5, [pc, #884]	; (8003840 <_GLOBAL__sub_I_REG_FIFO+0x179c>)
 80034ca:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80034ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034d0:	f204 4c0c 	addw	ip, r4, #1036	; 0x40c
 80034d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80034d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80034dc:	4dd9      	ldr	r5, [pc, #868]	; (8003844 <_GLOBAL__sub_I_REG_FIFO+0x17a0>)
 80034de:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80034e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034e4:	f504 6c85 	add.w	ip, r4, #1064	; 0x428
 80034e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80034ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80034f0:	4dd5      	ldr	r5, [pc, #852]	; (8003848 <_GLOBAL__sub_I_REG_FIFO+0x17a4>)
 80034f2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80034f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034f8:	f204 4c44 	addw	ip, r4, #1092	; 0x444
 80034fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003500:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003504:	4dd1      	ldr	r5, [pc, #836]	; (800384c <_GLOBAL__sub_I_REG_FIFO+0x17a8>)
 8003506:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800350a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800350c:	f504 6c8c 	add.w	ip, r4, #1120	; 0x460
 8003510:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003514:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003518:	4dcd      	ldr	r5, [pc, #820]	; (8003850 <_GLOBAL__sub_I_REG_FIFO+0x17ac>)
 800351a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800351e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003520:	f204 4c7c 	addw	ip, r4, #1148	; 0x47c
 8003524:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003528:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800352c:	4dc9      	ldr	r5, [pc, #804]	; (8003854 <_GLOBAL__sub_I_REG_FIFO+0x17b0>)
 800352e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8003532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003534:	f504 6c93 	add.w	ip, r4, #1176	; 0x498
 8003538:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800353c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003540:	4dc5      	ldr	r5, [pc, #788]	; (8003858 <_GLOBAL__sub_I_REG_FIFO+0x17b4>)
 8003542:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8003546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003548:	f204 4cb4 	addw	ip, r4, #1204	; 0x4b4
 800354c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003550:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003554:	4dc1      	ldr	r5, [pc, #772]	; (800385c <_GLOBAL__sub_I_REG_FIFO+0x17b8>)
 8003556:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800355a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800355c:	f504 6c9a 	add.w	ip, r4, #1232	; 0x4d0
 8003560:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003564:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003568:	4dbd      	ldr	r5, [pc, #756]	; (8003860 <_GLOBAL__sub_I_REG_FIFO+0x17bc>)
 800356a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800356e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003570:	f204 4cec 	addw	ip, r4, #1260	; 0x4ec
 8003574:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003578:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800357c:	4db9      	ldr	r5, [pc, #740]	; (8003864 <_GLOBAL__sub_I_REG_FIFO+0x17c0>)
 800357e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8003582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003584:	f504 6ca1 	add.w	ip, r4, #1288	; 0x508
 8003588:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800358c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003590:	4db5      	ldr	r5, [pc, #724]	; (8003868 <_GLOBAL__sub_I_REG_FIFO+0x17c4>)
 8003592:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8003596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003598:	f204 5c24 	addw	ip, r4, #1316	; 0x524
 800359c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80035a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035a4:	4db1      	ldr	r5, [pc, #708]	; (800386c <_GLOBAL__sub_I_REG_FIFO+0x17c8>)
 80035a6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80035aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035ac:	f504 6ca8 	add.w	ip, r4, #1344	; 0x540
 80035b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80035b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035b8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80035bc:	f8df c32c 	ldr.w	ip, [pc, #812]	; 80038ec <_GLOBAL__sub_I_REG_FIFO+0x1848>
 80035c0:	f204 555c 	addw	r5, r4, #1372	; 0x55c
 80035c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80035c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ca:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80035ce:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80035d2:	4da7      	ldr	r5, [pc, #668]	; (8003870 <_GLOBAL__sub_I_REG_FIFO+0x17cc>)
 80035d4:	f504 6caf 	add.w	ip, r4, #1400	; 0x578
 80035d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80035de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035e2:	4da4      	ldr	r5, [pc, #656]	; (8003874 <_GLOBAL__sub_I_REG_FIFO+0x17d0>)
 80035e4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80035e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035ea:	f204 5c94 	addw	ip, r4, #1428	; 0x594
 80035ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80035f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035f6:	4da0      	ldr	r5, [pc, #640]	; (8003878 <_GLOBAL__sub_I_REG_FIFO+0x17d4>)
 80035f8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80035fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035fe:	f504 6cb6 	add.w	ip, r4, #1456	; 0x5b0
 8003602:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003606:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800360a:	465d      	mov	r5, fp
 800360c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8003610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003612:	f204 5ccc 	addw	ip, r4, #1484	; 0x5cc
 8003616:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800361a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800361e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8003622:	f8df c2cc 	ldr.w	ip, [pc, #716]	; 80038f0 <_GLOBAL__sub_I_REG_FIFO+0x184c>
 8003626:	f504 65bd 	add.w	r5, r4, #1512	; 0x5e8
 800362a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800362e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003630:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003634:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 80038f4 <_GLOBAL__sub_I_REG_FIFO+0x1850>
 8003638:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800363c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003640:	f204 6504 	addw	r5, r4, #1540	; 0x604
 8003644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003646:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800364a:	f8df c2ac 	ldr.w	ip, [pc, #684]	; 80038f8 <_GLOBAL__sub_I_REG_FIFO+0x1854>
 800364e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003652:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003656:	f504 65c4 	add.w	r5, r4, #1568	; 0x620
 800365a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800365c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003660:	f8df c298 	ldr.w	ip, [pc, #664]	; 80038fc <_GLOBAL__sub_I_REG_FIFO+0x1858>
 8003664:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003668:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800366c:	f204 653c 	addw	r5, r4, #1596	; 0x63c
 8003670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003672:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003676:	f8df c288 	ldr.w	ip, [pc, #648]	; 8003900 <_GLOBAL__sub_I_REG_FIFO+0x185c>
 800367a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800367e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003682:	f504 65cb 	add.w	r5, r4, #1624	; 0x658
 8003686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003688:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800368c:	f8df c274 	ldr.w	ip, [pc, #628]	; 8003904 <_GLOBAL__sub_I_REG_FIFO+0x1860>
 8003690:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003694:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003698:	f204 6574 	addw	r5, r4, #1652	; 0x674
 800369c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800369e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80036a2:	f8df c264 	ldr.w	ip, [pc, #612]	; 8003908 <_GLOBAL__sub_I_REG_FIFO+0x1864>
 80036a6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80036aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80036ae:	f504 65d2 	add.w	r5, r4, #1680	; 0x690
 80036b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036b4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80036b8:	f8df c250 	ldr.w	ip, [pc, #592]	; 800390c <_GLOBAL__sub_I_REG_FIFO+0x1868>
 80036bc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80036c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80036c4:	f204 65ac 	addw	r5, r4, #1708	; 0x6ac
 80036c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036ca:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80036ce:	f8df c240 	ldr.w	ip, [pc, #576]	; 8003910 <_GLOBAL__sub_I_REG_FIFO+0x186c>
 80036d2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80036d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80036da:	f504 65d9 	add.w	r5, r4, #1736	; 0x6c8
 80036de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036e0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80036e4:	f8df c22c 	ldr.w	ip, [pc, #556]	; 8003914 <_GLOBAL__sub_I_REG_FIFO+0x1870>
 80036e8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80036ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80036f0:	f204 65e4 	addw	r5, r4, #1764	; 0x6e4
 80036f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036f6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80036fa:	f8df c21c 	ldr.w	ip, [pc, #540]	; 8003918 <_GLOBAL__sub_I_REG_FIFO+0x1874>
 80036fe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003702:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003706:	f504 65e0 	add.w	r5, r4, #1792	; 0x700
 800370a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800370c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003710:	f8df c208 	ldr.w	ip, [pc, #520]	; 800391c <_GLOBAL__sub_I_REG_FIFO+0x1878>
 8003714:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003718:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800371c:	f204 751c 	addw	r5, r4, #1820	; 0x71c
 8003720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003722:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003726:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 8003920 <_GLOBAL__sub_I_REG_FIFO+0x187c>
 800372a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800372e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003732:	f504 65e7 	add.w	r5, r4, #1848	; 0x738
 8003736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003738:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800373c:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 8003924 <_GLOBAL__sub_I_REG_FIFO+0x1880>
 8003740:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003744:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003748:	f204 7554 	addw	r5, r4, #1876	; 0x754
 800374c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800374e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003752:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 8003928 <_GLOBAL__sub_I_REG_FIFO+0x1884>
 8003756:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800375a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800375e:	f504 65ee 	add.w	r5, r4, #1904	; 0x770
 8003762:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003764:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003768:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 800392c <_GLOBAL__sub_I_REG_FIFO+0x1888>
 800376c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003770:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003774:	f204 758c 	addw	r5, r4, #1932	; 0x78c
 8003778:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800377a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800377e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8003930 <_GLOBAL__sub_I_REG_FIFO+0x188c>
 8003782:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003786:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800378a:	f504 65f5 	add.w	r5, r4, #1960	; 0x7a8
 800378e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003790:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003794:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8003934 <_GLOBAL__sub_I_REG_FIFO+0x1890>
 8003798:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800379c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80037a0:	f204 75c4 	addw	r5, r4, #1988	; 0x7c4
 80037a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037a6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80037aa:	f8df c18c 	ldr.w	ip, [pc, #396]	; 8003938 <_GLOBAL__sub_I_REG_FIFO+0x1894>
 80037ae:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80037b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80037b6:	f504 65fc 	add.w	r5, r4, #2016	; 0x7e0
 80037ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037bc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80037c0:	f8df c178 	ldr.w	ip, [pc, #376]	; 800393c <_GLOBAL__sub_I_REG_FIFO+0x1898>
 80037c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80037c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80037cc:	f204 75fc 	addw	r5, r4, #2044	; 0x7fc
 80037d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037d2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80037d6:	f8df c168 	ldr.w	ip, [pc, #360]	; 8003940 <_GLOBAL__sub_I_REG_FIFO+0x189c>
 80037da:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80037de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80037e2:	f604 0518 	addw	r5, r4, #2072	; 0x818
 80037e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037e8:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80037ec:	f8df c154 	ldr.w	ip, [pc, #340]	; 8003944 <_GLOBAL__sub_I_REG_FIFO+0x18a0>
 80037f0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80037f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80037f8:	f604 0534 	addw	r5, r4, #2100	; 0x834
 80037fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037fe:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003802:	f8df c144 	ldr.w	ip, [pc, #324]	; 8003948 <_GLOBAL__sub_I_REG_FIFO+0x18a4>
 8003806:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800380a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800380e:	f504 6505 	add.w	r5, r4, #2128	; 0x850
 8003812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003814:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003818:	f8df c130 	ldr.w	ip, [pc, #304]	; 800394c <_GLOBAL__sub_I_REG_FIFO+0x18a8>
 800381c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003820:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003824:	f604 056c 	addw	r5, r4, #2156	; 0x86c
 8003828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800382a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800382e:	f8df c120 	ldr.w	ip, [pc, #288]	; 8003950 <_GLOBAL__sub_I_REG_FIFO+0x18ac>
 8003832:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003836:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800383a:	e08b      	b.n	8003954 <_GLOBAL__sub_I_REG_FIFO+0x18b0>
 800383c:	200015bc 	.word	0x200015bc
 8003840:	200015f4 	.word	0x200015f4
 8003844:	20001434 	.word	0x20001434
 8003848:	20001220 	.word	0x20001220
 800384c:	20001300 	.word	0x20001300
 8003850:	200012e4 	.word	0x200012e4
 8003854:	200013fc 	.word	0x200013fc
 8003858:	200013a8 	.word	0x200013a8
 800385c:	20000e4c 	.word	0x20000e4c
 8003860:	20000f9c 	.word	0x20000f9c
 8003864:	20000da4 	.word	0x20000da4
 8003868:	20000e30 	.word	0x20000e30
 800386c:	200010ec 	.word	0x200010ec
 8003870:	2000154c 	.word	0x2000154c
 8003874:	20001488 	.word	0x20001488
 8003878:	200014f8 	.word	0x200014f8
 800387c:	20001274 	.word	0x20001274
 8003880:	200012ac 	.word	0x200012ac
 8003884:	2000123c 	.word	0x2000123c
 8003888:	20001258 	.word	0x20001258
 800388c:	2000115c 	.word	0x2000115c
 8003890:	20001140 	.word	0x20001140
 8003894:	20001124 	.word	0x20001124
 8003898:	20000fd4 	.word	0x20000fd4
 800389c:	20001060 	.word	0x20001060
 80038a0:	20000ff0 	.word	0x20000ff0
 80038a4:	20001044 	.word	0x20001044
 80038a8:	200014c0 	.word	0x200014c0
 80038ac:	2000146c 	.word	0x2000146c
 80038b0:	20001338 	.word	0x20001338
 80038b4:	200015d8 	.word	0x200015d8
 80038b8:	20001584 	.word	0x20001584
 80038bc:	20000e14 	.word	0x20000e14
 80038c0:	20000f80 	.word	0x20000f80
 80038c4:	20000ddc 	.word	0x20000ddc
 80038c8:	200014a4 	.word	0x200014a4
 80038cc:	20001450 	.word	0x20001450
 80038d0:	2000131c 	.word	0x2000131c
 80038d4:	200015a0 	.word	0x200015a0
 80038d8:	20001568 	.word	0x20001568
 80038dc:	20000df8 	.word	0x20000df8
 80038e0:	20000f64 	.word	0x20000f64
 80038e4:	20000dc0 	.word	0x20000dc0
 80038e8:	20001028 	.word	0x20001028
 80038ec:	200014dc 	.word	0x200014dc
 80038f0:	20001354 	.word	0x20001354
 80038f4:	20001370 	.word	0x20001370
 80038f8:	200010b4 	.word	0x200010b4
 80038fc:	2000100c 	.word	0x2000100c
 8003900:	20001194 	.word	0x20001194
 8003904:	20000cc4 	.word	0x20000cc4
 8003908:	200013c4 	.word	0x200013c4
 800390c:	20001098 	.word	0x20001098
 8003910:	20001418 	.word	0x20001418
 8003914:	20000e68 	.word	0x20000e68
 8003918:	20001108 	.word	0x20001108
 800391c:	20000e84 	.word	0x20000e84
 8003920:	20001514 	.word	0x20001514
 8003924:	20000ea0 	.word	0x20000ea0
 8003928:	20000ebc 	.word	0x20000ebc
 800392c:	20000ed8 	.word	0x20000ed8
 8003930:	20000ef4 	.word	0x20000ef4
 8003934:	20000f10 	.word	0x20000f10
 8003938:	20000f2c 	.word	0x20000f2c
 800393c:	20001610 	.word	0x20001610
 8003940:	20000f48 	.word	0x20000f48
 8003944:	20001530 	.word	0x20001530
 8003948:	20001290 	.word	0x20001290
 800394c:	2000107c 	.word	0x2000107c
 8003950:	20000d88 	.word	0x20000d88
 8003954:	f604 0588 	addw	r5, r4, #2184	; 0x888
 8003958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800395a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800395e:	f8df c094 	ldr.w	ip, [pc, #148]	; 80039f4 <_GLOBAL__sub_I_REG_FIFO+0x1950>
 8003962:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003966:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800396a:	f604 05a4 	addw	r5, r4, #2212	; 0x8a4
 800396e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003970:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003974:	f8df c080 	ldr.w	ip, [pc, #128]	; 80039f8 <_GLOBAL__sub_I_REG_FIFO+0x1954>
 8003978:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800397c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003980:	f504 650c 	add.w	r5, r4, #2240	; 0x8c0
 8003984:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003986:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800398a:	f8df c070 	ldr.w	ip, [pc, #112]	; 80039fc <_GLOBAL__sub_I_REG_FIFO+0x1958>
 800398e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003992:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003996:	f604 05dc 	addw	r5, r4, #2268	; 0x8dc
 800399a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800399c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80039a0:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8003a00 <_GLOBAL__sub_I_REG_FIFO+0x195c>
 80039a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80039a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80039ac:	f604 05f8 	addw	r5, r4, #2296	; 0x8f8
 80039b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039b2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80039b6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80039ba:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80039be:	f604 1514 	addw	r5, r4, #2324	; 0x914
 80039c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039c4:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80039c8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80039cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80039ce:	f504 6513 	add.w	r5, r4, #2352	; 0x930
 80039d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039d4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80039d8:	f604 144c 	addw	r4, r4, #2380	; 0x94c
 80039dc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80039e0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80039e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039e4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80039e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80039ec:	b007      	add	sp, #28
 80039ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039f2:	bf00      	nop
 80039f4:	20000ce0 	.word	0x20000ce0
 80039f8:	20000cfc 	.word	0x20000cfc
 80039fc:	20000d18 	.word	0x20000d18
 8003a00:	20000d34 	.word	0x20000d34

08003a04 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH>:
const uint16_t LORA_ADDRESS_BRANCH = 24 - LORA_ADDRESS_GROUP; 

Register Hendler[11] = {Register(0, 8, 0), Register(1, 1, 7), Register(1, 7, 0), Register(2, 8, 0),
                        Register(3, 8, 0), Register(4, 1, 7), Register(4, 7, 0), Register(5, 8, 0),
                        Register(6, 8, 0),
                        Register(7, 8, 0), Register(8, 8, 0)};
 8003a04:	2300      	movs	r3, #0
bool Packet_System::set_command(uint8_t com) {
    return true;
}
bool Packet_System::set_data(uint8_t *data, uint8_t len) {
    return true;
}
 8003a06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a0a:	4ece      	ldr	r6, [pc, #824]	; (8003d44 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x340>)
 8003a0c:	b087      	sub	sp, #28
 8003a0e:	4619      	mov	r1, r3
 8003a10:	2208      	movs	r2, #8
 8003a12:	4630      	mov	r0, r6
 8003a14:	f7fd fa4a 	bl	8000eac <_ZN8RegisterC1Ethh>
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f106 0b10 	add.w	fp, r6, #16
 8003a1e:	4611      	mov	r1, r2
 8003a20:	2307      	movs	r3, #7
 8003a22:	f106 0008 	add.w	r0, r6, #8
 8003a26:	f7fd fa41 	bl	8000eac <_ZN8RegisterC1Ethh>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	2207      	movs	r2, #7
 8003a2e:	2101      	movs	r1, #1
 8003a30:	4658      	mov	r0, fp
 8003a32:	f7fd fa3b 	bl	8000eac <_ZN8RegisterC1Ethh>
 8003a36:	2300      	movs	r3, #0
 8003a38:	2208      	movs	r2, #8
 8003a3a:	2102      	movs	r1, #2
 8003a3c:	f106 0018 	add.w	r0, r6, #24
 8003a40:	f7fd fa34 	bl	8000eac <_ZN8RegisterC1Ethh>
 8003a44:	2300      	movs	r3, #0
 8003a46:	2208      	movs	r2, #8
 8003a48:	2103      	movs	r1, #3
 8003a4a:	f106 0020 	add.w	r0, r6, #32
 8003a4e:	f7fd fa2d 	bl	8000eac <_ZN8RegisterC1Ethh>
 8003a52:	f106 0930 	add.w	r9, r6, #48	; 0x30
 8003a56:	2307      	movs	r3, #7
 8003a58:	2201      	movs	r2, #1
 8003a5a:	2104      	movs	r1, #4
 8003a5c:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8003a60:	f7fd fa24 	bl	8000eac <_ZN8RegisterC1Ethh>
 8003a64:	2300      	movs	r3, #0
 8003a66:	2207      	movs	r2, #7
 8003a68:	2104      	movs	r1, #4
 8003a6a:	4648      	mov	r0, r9
 8003a6c:	f7fd fa1e 	bl	8000eac <_ZN8RegisterC1Ethh>
 8003a70:	f106 0840 	add.w	r8, r6, #64	; 0x40
 8003a74:	2300      	movs	r3, #0
 8003a76:	2208      	movs	r2, #8
 8003a78:	2105      	movs	r1, #5
 8003a7a:	f106 0038 	add.w	r0, r6, #56	; 0x38
 8003a7e:	f7fd fa15 	bl	8000eac <_ZN8RegisterC1Ethh>
 8003a82:	f106 0748 	add.w	r7, r6, #72	; 0x48
 8003a86:	2300      	movs	r3, #0
 8003a88:	2208      	movs	r2, #8
 8003a8a:	2106      	movs	r1, #6
 8003a8c:	4640      	mov	r0, r8
 8003a8e:	f7fd fa0d 	bl	8000eac <_ZN8RegisterC1Ethh>
 8003a92:	2300      	movs	r3, #0
 8003a94:	2208      	movs	r2, #8
 8003a96:	2107      	movs	r1, #7
 8003a98:	4638      	mov	r0, r7
 8003a9a:	f7fd fa07 	bl	8000eac <_ZN8RegisterC1Ethh>
 8003a9e:	2208      	movs	r2, #8

Address_field field_dest_adr_group(&Hendler[0], 2, true),  // Destination Address group (адресс группы устройства назначения)
 8003aa0:	2400      	movs	r4, #0
 8003aa2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003aa6:	f04f 0a77 	mov.w	sl, #119	; 0x77
                        Register(7, 8, 0), Register(8, 8, 0)};
 8003aaa:	4611      	mov	r1, r2
 8003aac:	2300      	movs	r3, #0
 8003aae:	f106 0050 	add.w	r0, r6, #80	; 0x50
 8003ab2:	f7fd f9fb 	bl	8000eac <_ZN8RegisterC1Ethh>
Address_field field_dest_adr_group(&Hendler[0], 2, true),  // Destination Address group (адресс группы устройства назначения)
 8003ab6:	4631      	mov	r1, r6
 8003ab8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003abc:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003ac0:	f8cd a000 	str.w	sl, [sp]
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	489f      	ldr	r0, [pc, #636]	; (8003d48 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x344>)
 8003aca:	f7fd fa5d 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
              field_dest_adr_branch(&Hendler[2], 2, true), // Destination Address branch (адресс ветви устройства назначения)
 8003ace:	4659      	mov	r1, fp
 8003ad0:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003ad4:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003ad8:	f8cd a000 	str.w	sl, [sp]
 8003adc:	2301      	movs	r3, #1
 8003ade:	2202      	movs	r2, #2
 8003ae0:	489a      	ldr	r0, [pc, #616]	; (8003d4c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x348>)
 8003ae2:	f7fd fa51 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
              field_sour_adr_group(&Hendler[4], 2, true),  // Source Address group (адресс группы отправляющего устройства)
 8003ae6:	f106 0120 	add.w	r1, r6, #32
 8003aea:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003aee:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003af2:	f8cd a000 	str.w	sl, [sp]
 8003af6:	2301      	movs	r3, #1
 8003af8:	2202      	movs	r2, #2
 8003afa:	4895      	ldr	r0, [pc, #596]	; (8003d50 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x34c>)
 8003afc:	f7fd fa44 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
              field_sour_adr_branch(&Hendler[6], 2, true), // Source Address branch (адресс ветви отправляющего устройства)
 8003b00:	4649      	mov	r1, r9
 8003b02:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003b06:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003b0a:	f8cd a000 	str.w	sl, [sp]
 8003b0e:	2301      	movs	r3, #1
 8003b10:	2202      	movs	r2, #2
 8003b12:	4890      	ldr	r0, [pc, #576]	; (8003d54 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x350>)
 8003b14:	f7fd fa38 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
              field_type(&Hendler[8], 1, true),   // Packet Type (тип пакетп)
 8003b18:	2301      	movs	r3, #1
 8003b1a:	4641      	mov	r1, r8
 8003b1c:	461a      	mov	r2, r3
                                             &field_sour_adr_group, &field_sour_adr_branch, 
                                             &field_type, &field_number};


// Типы данных
Register register_PWM[2]   = {Register(0, 4, 0), Register(1, 8, 0)},
 8003b1e:	f8df 825c 	ldr.w	r8, [pc, #604]	; 8003d7c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x378>
              field_type(&Hendler[8], 1, true),   // Packet Type (тип пакетп)
 8003b22:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003b26:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003b2a:	f8cd a000 	str.w	sl, [sp]
 8003b2e:	488a      	ldr	r0, [pc, #552]	; (8003d58 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x354>)
 8003b30:	f7fd fa2a 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
              field_number(&Hendler[9], 2, true); // Packet Number (номер пакета)
 8003b34:	4639      	mov	r1, r7
 8003b36:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003b3a:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003b3e:	f8cd a000 	str.w	sl, [sp]
 8003b42:	2301      	movs	r3, #1
 8003b44:	2202      	movs	r2, #2
 8003b46:	4885      	ldr	r0, [pc, #532]	; (8003d5c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x358>)
 8003b48:	f7fd fa1e 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Register register_PWM[2]   = {Register(0, 4, 0), Register(1, 8, 0)},
 8003b4c:	4623      	mov	r3, r4
 8003b4e:	4621      	mov	r1, r4
 8003b50:	2204      	movs	r2, #4
 8003b52:	4640      	mov	r0, r8
 8003b54:	f7fd f9aa 	bl	8000eac <_ZN8RegisterC1Ethh>
 8003b58:	2208      	movs	r2, #8
         register_byte[1]  = {Register(0, 8, 0)},
         register_float[4] = {Register(0, 8, 0), Register(1, 8, 0), Register(2, 8, 0), Register(3, 8, 0)},
 8003b5a:	4f81      	ldr	r7, [pc, #516]	; (8003d60 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x35c>)
Register register_PWM[2]   = {Register(0, 4, 0), Register(1, 8, 0)},
 8003b5c:	4623      	mov	r3, r4
 8003b5e:	eb08 0002 	add.w	r0, r8, r2
 8003b62:	2101      	movs	r1, #1
 8003b64:	f7fd f9a2 	bl	8000eac <_ZN8RegisterC1Ethh>
         register_byte[1]  = {Register(0, 8, 0)},
 8003b68:	4623      	mov	r3, r4
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	2208      	movs	r2, #8
 8003b6e:	487d      	ldr	r0, [pc, #500]	; (8003d64 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x360>)
 8003b70:	f7fd f99c 	bl	8000eac <_ZN8RegisterC1Ethh>
         register_float[4] = {Register(0, 8, 0), Register(1, 8, 0), Register(2, 8, 0), Register(3, 8, 0)},
 8003b74:	4623      	mov	r3, r4
 8003b76:	4621      	mov	r1, r4
 8003b78:	2208      	movs	r2, #8
 8003b7a:	4638      	mov	r0, r7
 8003b7c:	f7fd f996 	bl	8000eac <_ZN8RegisterC1Ethh>
 8003b80:	2208      	movs	r2, #8
 8003b82:	4623      	mov	r3, r4
 8003b84:	18b8      	adds	r0, r7, r2
 8003b86:	2101      	movs	r1, #1
         register_bit[8]   = {Register(0, 1, 0), Register(0, 1, 1), Register(0, 1, 2), Register(0, 1, 3),
                              Register(0, 1, 4), Register(0, 1, 5), Register(0, 1, 6), Register(0, 1, 7)};
 8003b88:	4e77      	ldr	r6, [pc, #476]	; (8003d68 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x364>)
         register_float[4] = {Register(0, 8, 0), Register(1, 8, 0), Register(2, 8, 0), Register(3, 8, 0)},
 8003b8a:	f7fd f98f 	bl	8000eac <_ZN8RegisterC1Ethh>
 8003b8e:	4623      	mov	r3, r4
 8003b90:	2208      	movs	r2, #8
 8003b92:	2102      	movs	r1, #2
 8003b94:	f107 0010 	add.w	r0, r7, #16
 8003b98:	f7fd f988 	bl	8000eac <_ZN8RegisterC1Ethh>
 8003b9c:	4623      	mov	r3, r4
 8003b9e:	2208      	movs	r2, #8
 8003ba0:	2103      	movs	r1, #3
 8003ba2:	f107 0018 	add.w	r0, r7, #24
 8003ba6:	f7fd f981 	bl	8000eac <_ZN8RegisterC1Ethh>
                              Register(0, 1, 4), Register(0, 1, 5), Register(0, 1, 6), Register(0, 1, 7)};
 8003baa:	4623      	mov	r3, r4
 8003bac:	4621      	mov	r1, r4
 8003bae:	2201      	movs	r2, #1
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	f7fd f97b 	bl	8000eac <_ZN8RegisterC1Ethh>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	4621      	mov	r1, r4
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f106 0008 	add.w	r0, r6, #8
 8003bc0:	f7fd f974 	bl	8000eac <_ZN8RegisterC1Ethh>
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f106 0010 	add.w	r0, r6, #16
 8003bce:	f7fd f96d 	bl	8000eac <_ZN8RegisterC1Ethh>
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f106 0018 	add.w	r0, r6, #24
 8003bdc:	f7fd f966 	bl	8000eac <_ZN8RegisterC1Ethh>
 8003be0:	4621      	mov	r1, r4
 8003be2:	2304      	movs	r3, #4
 8003be4:	2201      	movs	r2, #1
 8003be6:	f106 0020 	add.w	r0, r6, #32
 8003bea:	f7fd f95f 	bl	8000eac <_ZN8RegisterC1Ethh>
 8003bee:	f106 0b30 	add.w	fp, r6, #48	; 0x30
 8003bf2:	4621      	mov	r1, r4
 8003bf4:	2305      	movs	r3, #5
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8003bfc:	f7fd f956 	bl	8000eac <_ZN8RegisterC1Ethh>
 8003c00:	f106 0938 	add.w	r9, r6, #56	; 0x38
 8003c04:	4621      	mov	r1, r4
 8003c06:	2306      	movs	r3, #6
 8003c08:	2201      	movs	r2, #1
 8003c0a:	4658      	mov	r0, fp
 8003c0c:	f7fd f94e 	bl	8000eac <_ZN8RegisterC1Ethh>
 8003c10:	4621      	mov	r1, r4
 8003c12:	2307      	movs	r3, #7
 8003c14:	2201      	movs	r2, #1
 8003c16:	4648      	mov	r0, r9
 8003c18:	f7fd f948 	bl	8000eac <_ZN8RegisterC1Ethh>

Address_field field_PWM(&register_PWM[0], 2, true),
 8003c1c:	4641      	mov	r1, r8
 8003c1e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003c22:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003c26:	f8cd a000 	str.w	sl, [sp]
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	484f      	ldr	r0, [pc, #316]	; (8003d6c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x368>)
 8003c30:	f7fd f9aa 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
              field_byte(&register_byte[0]),
 8003c34:	4623      	mov	r3, r4
 8003c36:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003c3a:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003c3e:	f8cd a000 	str.w	sl, [sp]
 8003c42:	2201      	movs	r2, #1
 8003c44:	4947      	ldr	r1, [pc, #284]	; (8003d64 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x360>)
 8003c46:	484a      	ldr	r0, [pc, #296]	; (8003d70 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x36c>)
 8003c48:	f7fd f99e 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
              field_float(&register_float[0], 4, false),
 8003c4c:	4639      	mov	r1, r7
              field_bit[8] = {Address_field(&register_bit[0]), Address_field(&register_bit[1]), 
                              Address_field(&register_bit[2]), Address_field(&register_bit[3]), 
                              Address_field(&register_bit[4]), Address_field(&register_bit[5]), 
                              Address_field(&register_bit[6]), Address_field(&register_bit[7])};
 8003c4e:	4f49      	ldr	r7, [pc, #292]	; (8003d74 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x370>)
              field_float(&register_float[0], 4, false),
 8003c50:	4623      	mov	r3, r4
 8003c52:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003c56:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003c5a:	f8cd a000 	str.w	sl, [sp]
 8003c5e:	2204      	movs	r2, #4
 8003c60:	4845      	ldr	r0, [pc, #276]	; (8003d78 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x374>)
 8003c62:	f7fd f991 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
                              Address_field(&register_bit[6]), Address_field(&register_bit[7])};
 8003c66:	4623      	mov	r3, r4
 8003c68:	4631      	mov	r1, r6
 8003c6a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003c6e:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003c72:	f8cd a000 	str.w	sl, [sp]
 8003c76:	2201      	movs	r2, #1
 8003c78:	4638      	mov	r0, r7
 8003c7a:	f7fd f985 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 8003c7e:	4623      	mov	r3, r4
 8003c80:	f106 0108 	add.w	r1, r6, #8
 8003c84:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003c88:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003c8c:	f8cd a000 	str.w	sl, [sp]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f107 001c 	add.w	r0, r7, #28
 8003c96:	f7fd f977 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 8003c9a:	4623      	mov	r3, r4
 8003c9c:	f106 0110 	add.w	r1, r6, #16
 8003ca0:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003ca4:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003ca8:	f8cd a000 	str.w	sl, [sp]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003cb2:	f7fd f969 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 8003cb6:	4623      	mov	r3, r4
 8003cb8:	f106 0118 	add.w	r1, r6, #24
 8003cbc:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003cc0:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003cc4:	f8cd a000 	str.w	sl, [sp]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8003cce:	f7fd f95b 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 8003cd2:	4623      	mov	r3, r4
 8003cd4:	f106 0120 	add.w	r1, r6, #32
 8003cd8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003cdc:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003ce0:	f8cd a000 	str.w	sl, [sp]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8003cea:	f7fd f94d 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 8003cee:	4623      	mov	r3, r4
 8003cf0:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8003cf4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003cf8:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003cfc:	f8cd a000 	str.w	sl, [sp]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8003d06:	f7fd f93f 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 8003d0a:	4623      	mov	r3, r4
 8003d0c:	4659      	mov	r1, fp
 8003d0e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003d12:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003d16:	f8cd a000 	str.w	sl, [sp]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8003d20:	f7fd f932 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 8003d24:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003d28:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003d2c:	f8cd a000 	str.w	sl, [sp]
 8003d30:	4623      	mov	r3, r4
 8003d32:	2201      	movs	r2, #1
 8003d34:	4649      	mov	r1, r9
 8003d36:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8003d3a:	f7fd f925 	bl	8000f88 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 8003d3e:	b007      	add	sp, #28
 8003d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d44:	20001924 	.word	0x20001924
 8003d48:	20001ab0 	.word	0x20001ab0
 8003d4c:	20001a94 	.word	0x20001a94
 8003d50:	20001b20 	.word	0x20001b20
 8003d54:	20001b04 	.word	0x20001b04
 8003d58:	20001b3c 	.word	0x20001b3c
 8003d5c:	20001ae8 	.word	0x20001ae8
 8003d60:	20001bb0 	.word	0x20001bb0
 8003d64:	20001ba8 	.word	0x20001ba8
 8003d68:	20001b68 	.word	0x20001b68
 8003d6c:	2000197c 	.word	0x2000197c
 8003d70:	20001a78 	.word	0x20001a78
 8003d74:	20001998 	.word	0x20001998
 8003d78:	20001acc 	.word	0x20001acc
 8003d7c:	20001b58 	.word	0x20001b58

08003d80 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8003d80:	b148      	cbz	r0, 8003d96 <null_ptr_check+0x16>
 8003d82:	6843      	ldr	r3, [r0, #4]
 8003d84:	b13b      	cbz	r3, 8003d96 <null_ptr_check+0x16>
 8003d86:	6883      	ldr	r3, [r0, #8]
 8003d88:	b12b      	cbz	r3, 8003d96 <null_ptr_check+0x16>
 8003d8a:	68c0      	ldr	r0, [r0, #12]
 8003d8c:	fab0 f080 	clz	r0, r0
 8003d90:	0940      	lsrs	r0, r0, #5
 8003d92:	4240      	negs	r0, r0
 8003d94:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8003d96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		/* Device structure is fine */
		rslt = BME280_OK;
	}

	return rslt;
}
 8003d9a:	4770      	bx	lr

08003d9c <bme280_get_regs>:
{
 8003d9c:	b570      	push	{r4, r5, r6, lr}
 8003d9e:	4605      	mov	r5, r0
	rslt = null_ptr_check(dev);
 8003da0:	4618      	mov	r0, r3
{
 8003da2:	461c      	mov	r4, r3
	rslt = null_ptr_check(dev);
 8003da4:	f7ff ffec 	bl	8003d80 <null_ptr_check>
	if (rslt == BME280_OK) {
 8003da8:	b970      	cbnz	r0, 8003dc8 <bme280_get_regs+0x2c>
		if (dev->intf != BME280_I2C_INTF)
 8003daa:	78a3      	ldrb	r3, [r4, #2]
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8003dac:	6866      	ldr	r6, [r4, #4]
		if (dev->intf != BME280_I2C_INTF)
 8003dae:	2b01      	cmp	r3, #1
			reg_addr = reg_addr | 0x80;
 8003db0:	bf18      	it	ne
 8003db2:	f045 0580 	orrne.w	r5, r5, #128	; 0x80
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8003db6:	4613      	mov	r3, r2
 8003db8:	7860      	ldrb	r0, [r4, #1]
 8003dba:	460a      	mov	r2, r1
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	47b0      	blx	r6
			rslt = BME280_E_COMM_FAIL;
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	bf18      	it	ne
 8003dc4:	f06f 0003 	mvnne.w	r0, #3
}
 8003dc8:	bd70      	pop	{r4, r5, r6, pc}

08003dca <bme280_set_regs>:
{
 8003dca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dcc:	2a0a      	cmp	r2, #10
 8003dce:	b087      	sub	sp, #28
 8003dd0:	4605      	mov	r5, r0
	rslt = null_ptr_check(dev);
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	4614      	mov	r4, r2
{
 8003dd6:	461e      	mov	r6, r3
 8003dd8:	bf28      	it	cs
 8003dda:	240a      	movcs	r4, #10
	rslt = null_ptr_check(dev);
 8003ddc:	f7ff ffd0 	bl	8003d80 <null_ptr_check>
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8003de0:	2800      	cmp	r0, #0
 8003de2:	d135      	bne.n	8003e50 <bme280_set_regs+0x86>
 8003de4:	2d00      	cmp	r5, #0
 8003de6:	d033      	beq.n	8003e50 <bme280_set_regs+0x86>
 8003de8:	2900      	cmp	r1, #0
 8003dea:	d031      	beq.n	8003e50 <bme280_set_regs+0x86>
		if (len != 0) {
 8003dec:	2a00      	cmp	r2, #0
 8003dee:	d032      	beq.n	8003e56 <bme280_set_regs+0x8c>
			temp_buff[0] = reg_data[0];
 8003df0:	780b      	ldrb	r3, [r1, #0]
 8003df2:	f88d 3004 	strb.w	r3, [sp, #4]
			if (dev->intf != BME280_I2C_INTF) {
 8003df6:	78b3      	ldrb	r3, [r6, #2]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d009      	beq.n	8003e10 <bme280_set_regs+0x46>
 8003dfc:	462b      	mov	r3, r5
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8003dfe:	7818      	ldrb	r0, [r3, #0]
 8003e00:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003e04:	f803 0b01 	strb.w	r0, [r3], #1
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003e08:	1b58      	subs	r0, r3, r5
 8003e0a:	b2c0      	uxtb	r0, r0
 8003e0c:	42a0      	cmp	r0, r4
 8003e0e:	d3f6      	bcc.n	8003dfe <bme280_set_regs+0x34>
			if (len > 1) {
 8003e10:	2a01      	cmp	r2, #1
 8003e12:	a801      	add	r0, sp, #4
 8003e14:	d01a      	beq.n	8003e4c <bme280_set_regs+0x82>
 8003e16:	2301      	movs	r3, #1
		temp_buff[(index * 2) - 1] = reg_addr[index];
 8003e18:	5cef      	ldrb	r7, [r5, r3]
 8003e1a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8003e1e:	f802 7c01 	strb.w	r7, [r2, #-1]
		temp_buff[index * 2] = reg_data[index];
 8003e22:	5cca      	ldrb	r2, [r1, r3]
 8003e24:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
 8003e28:	3301      	adds	r3, #1
	for (index = 1; index < len; index++) {
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	42a2      	cmp	r2, r4
 8003e2e:	d3f3      	bcc.n	8003e18 <bme280_set_regs+0x4e>
				temp_len = ((len * 2) - 1);
 8003e30:	0063      	lsls	r3, r4, #1
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29b      	uxth	r3, r3
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8003e36:	4602      	mov	r2, r0
 8003e38:	68b4      	ldr	r4, [r6, #8]
 8003e3a:	7829      	ldrb	r1, [r5, #0]
 8003e3c:	7870      	ldrb	r0, [r6, #1]
 8003e3e:	47a0      	blx	r4
				rslt = BME280_E_COMM_FAIL;
 8003e40:	2800      	cmp	r0, #0
 8003e42:	bf18      	it	ne
 8003e44:	f06f 0003 	mvnne.w	r0, #3
}
 8003e48:	b007      	add	sp, #28
 8003e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp_len = len;
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	e7f2      	b.n	8003e36 <bme280_set_regs+0x6c>
		rslt = BME280_E_NULL_PTR;
 8003e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e54:	e7f8      	b.n	8003e48 <bme280_set_regs+0x7e>
			rslt = BME280_E_INVALID_LEN;
 8003e56:	f06f 0002 	mvn.w	r0, #2
 8003e5a:	e7f5      	b.n	8003e48 <bme280_set_regs+0x7e>

08003e5c <set_osr_humidity_settings.isra.8>:
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
 8003e5c:	b513      	push	{r0, r1, r4, lr}
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8003e5e:	23f2      	movs	r3, #242	; 0xf2
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
 8003e60:	460c      	mov	r4, r1
	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8003e62:	f000 0007 	and.w	r0, r0, #7
 8003e66:	a902      	add	r1, sp, #8
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8003e68:	f88d 3007 	strb.w	r3, [sp, #7]
	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8003e6c:	f801 0d03 	strb.w	r0, [r1, #-3]!
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8003e70:	4623      	mov	r3, r4
 8003e72:	2201      	movs	r2, #1
 8003e74:	f10d 0007 	add.w	r0, sp, #7
 8003e78:	f7ff ffa7 	bl	8003dca <bme280_set_regs>
	if (rslt == BME280_OK) {
 8003e7c:	b988      	cbnz	r0, 8003ea2 <set_osr_humidity_settings.isra.8+0x46>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8003e7e:	20f4      	movs	r0, #244	; 0xf4
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8003e80:	4623      	mov	r3, r4
 8003e82:	2201      	movs	r2, #1
 8003e84:	f10d 0106 	add.w	r1, sp, #6
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8003e88:	f88d 0007 	strb.w	r0, [sp, #7]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8003e8c:	f7ff ff86 	bl	8003d9c <bme280_get_regs>
		if (rslt == BME280_OK)
 8003e90:	b938      	cbnz	r0, 8003ea2 <set_osr_humidity_settings.isra.8+0x46>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8003e92:	4623      	mov	r3, r4
 8003e94:	2201      	movs	r2, #1
 8003e96:	f10d 0106 	add.w	r1, sp, #6
 8003e9a:	f10d 0007 	add.w	r0, sp, #7
 8003e9e:	f7ff ff94 	bl	8003dca <bme280_set_regs>
}
 8003ea2:	b002      	add	sp, #8
 8003ea4:	bd10      	pop	{r4, pc}

08003ea6 <set_osr_press_temp_settings>:
{
 8003ea6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ea8:	4606      	mov	r6, r0
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8003eaa:	20f4      	movs	r0, #244	; 0xf4
{
 8003eac:	460d      	mov	r5, r1
 8003eae:	4614      	mov	r4, r2
	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	f10d 0107 	add.w	r1, sp, #7
 8003eb6:	2201      	movs	r2, #1
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8003eb8:	f88d 0006 	strb.w	r0, [sp, #6]
	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8003ebc:	f7ff ff6e 	bl	8003d9c <bme280_get_regs>
	if (rslt == BME280_OK) {
 8003ec0:	b9f8      	cbnz	r0, 8003f02 <set_osr_press_temp_settings+0x5c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8003ec2:	07f2      	lsls	r2, r6, #31
 8003ec4:	d50a      	bpl.n	8003edc <set_osr_press_temp_settings+0x36>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8003ec6:	782b      	ldrb	r3, [r5, #0]
 8003ec8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	f003 031c 	and.w	r3, r3, #28
 8003ed2:	f022 021c 	bic.w	r2, r2, #28
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f88d 3007 	strb.w	r3, [sp, #7]
		if (desired_settings & BME280_OSR_TEMP_SEL)
 8003edc:	07b3      	lsls	r3, r6, #30
 8003ede:	d508      	bpl.n	8003ef2 <set_osr_press_temp_settings+0x4c>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8003ee0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003ee4:	786a      	ldrb	r2, [r5, #1]
 8003ee6:	f003 031f 	and.w	r3, r3, #31
 8003eea:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8003eee:	f88d 3007 	strb.w	r3, [sp, #7]
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8003ef2:	4623      	mov	r3, r4
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f10d 0107 	add.w	r1, sp, #7
 8003efa:	f10d 0006 	add.w	r0, sp, #6
 8003efe:	f7ff ff64 	bl	8003dca <bme280_set_regs>
}
 8003f02:	b002      	add	sp, #8
 8003f04:	bd70      	pop	{r4, r5, r6, pc}

08003f06 <set_filter_standby_settings>:
{
 8003f06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f08:	4606      	mov	r6, r0
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8003f0a:	20f5      	movs	r0, #245	; 0xf5
{
 8003f0c:	460d      	mov	r5, r1
 8003f0e:	4614      	mov	r4, r2
	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8003f10:	4613      	mov	r3, r2
 8003f12:	f10d 0107 	add.w	r1, sp, #7
 8003f16:	2201      	movs	r2, #1
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8003f18:	f88d 0006 	strb.w	r0, [sp, #6]
	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8003f1c:	f7ff ff3e 	bl	8003d9c <bme280_get_regs>
	if (rslt == BME280_OK) {
 8003f20:	b9f8      	cbnz	r0, 8003f62 <set_filter_standby_settings+0x5c>
		if (desired_settings & BME280_FILTER_SEL)
 8003f22:	0732      	lsls	r2, r6, #28
 8003f24:	d50a      	bpl.n	8003f3c <set_filter_standby_settings+0x36>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8003f26:	78eb      	ldrb	r3, [r5, #3]
 8003f28:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	f003 031c 	and.w	r3, r3, #28
 8003f32:	f022 021c 	bic.w	r2, r2, #28
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f88d 3007 	strb.w	r3, [sp, #7]
		if (desired_settings & BME280_STANDBY_SEL)
 8003f3c:	06f3      	lsls	r3, r6, #27
 8003f3e:	d508      	bpl.n	8003f52 <set_filter_standby_settings+0x4c>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8003f40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003f44:	792a      	ldrb	r2, [r5, #4]
 8003f46:	f003 031f 	and.w	r3, r3, #31
 8003f4a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8003f4e:	f88d 3007 	strb.w	r3, [sp, #7]
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8003f52:	4623      	mov	r3, r4
 8003f54:	2201      	movs	r2, #1
 8003f56:	f10d 0107 	add.w	r1, sp, #7
 8003f5a:	f10d 0006 	add.w	r0, sp, #6
 8003f5e:	f7ff ff34 	bl	8003dca <bme280_set_regs>
}
 8003f62:	b002      	add	sp, #8
 8003f64:	bd70      	pop	{r4, r5, r6, pc}

08003f66 <bme280_get_sensor_mode>:
{
 8003f66:	b510      	push	{r4, lr}
 8003f68:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
 8003f6a:	4608      	mov	r0, r1
 8003f6c:	f7ff ff08 	bl	8003d80 <null_ptr_check>
	if (rslt == BME280_OK) {
 8003f70:	b948      	cbnz	r0, 8003f86 <bme280_get_sensor_mode+0x20>
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8003f72:	460b      	mov	r3, r1
 8003f74:	2201      	movs	r2, #1
 8003f76:	4621      	mov	r1, r4
 8003f78:	20f4      	movs	r0, #244	; 0xf4
 8003f7a:	f7ff ff0f 	bl	8003d9c <bme280_get_regs>
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8003f7e:	7823      	ldrb	r3, [r4, #0]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	7023      	strb	r3, [r4, #0]
}
 8003f86:	bd10      	pop	{r4, pc}

08003f88 <bme280_soft_reset>:
	uint8_t reg_addr = BME280_RESET_ADDR;
 8003f88:	23e0      	movs	r3, #224	; 0xe0
{
 8003f8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t reg_addr = BME280_RESET_ADDR;
 8003f8c:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t soft_rst_cmd = 0xB6;
 8003f90:	23b6      	movs	r3, #182	; 0xb6
{
 8003f92:	4605      	mov	r5, r0
	uint8_t soft_rst_cmd = 0xB6;
 8003f94:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
 8003f98:	f7ff fef2 	bl	8003d80 <null_ptr_check>
	if (rslt == BME280_OK) {
 8003f9c:	4604      	mov	r4, r0
 8003f9e:	b958      	cbnz	r0, 8003fb8 <bme280_soft_reset+0x30>
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003fa0:	462b      	mov	r3, r5
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f10d 0107 	add.w	r1, sp, #7
 8003fa8:	f10d 0006 	add.w	r0, sp, #6
 8003fac:	f7ff ff0d 	bl	8003dca <bme280_set_regs>
		dev->delay_ms(2);
 8003fb0:	68eb      	ldr	r3, [r5, #12]
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003fb2:	4604      	mov	r4, r0
		dev->delay_ms(2);
 8003fb4:	2002      	movs	r0, #2
 8003fb6:	4798      	blx	r3
}
 8003fb8:	4620      	mov	r0, r4
 8003fba:	b003      	add	sp, #12
 8003fbc:	bd30      	pop	{r4, r5, pc}

08003fbe <bme280_init>:
	uint8_t chip_id = 0;
 8003fbe:	2300      	movs	r3, #0
{
 8003fc0:	b530      	push	{r4, r5, lr}
 8003fc2:	b089      	sub	sp, #36	; 0x24
 8003fc4:	4604      	mov	r4, r0
	uint8_t chip_id = 0;
 8003fc6:	f88d 3003 	strb.w	r3, [sp, #3]
	rslt = null_ptr_check(dev);
 8003fca:	f7ff fed9 	bl	8003d80 <null_ptr_check>
	if (rslt ==  BME280_OK) {
 8003fce:	2800      	cmp	r0, #0
 8003fd0:	f040 80a1 	bne.w	8004116 <bme280_init+0x158>
 8003fd4:	2505      	movs	r5, #5
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8003fd6:	4623      	mov	r3, r4
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f10d 0103 	add.w	r1, sp, #3
 8003fde:	20d0      	movs	r0, #208	; 0xd0
 8003fe0:	f7ff fedc 	bl	8003d9c <bme280_get_regs>
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	f040 8098 	bne.w	800411a <bme280_init+0x15c>
 8003fea:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003fee:	2b60      	cmp	r3, #96	; 0x60
 8003ff0:	f040 8093 	bne.w	800411a <bme280_init+0x15c>
				dev->chip_id = chip_id;
 8003ff4:	7023      	strb	r3, [r4, #0]
				rslt = bme280_soft_reset(dev);
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	f7ff ffc6 	bl	8003f88 <bme280_soft_reset>
				if (rslt == BME280_OK) {
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	f040 808a 	bne.w	8004116 <bme280_init+0x158>
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8004002:	4601      	mov	r1, r0
 8004004:	221a      	movs	r2, #26
 8004006:	a801      	add	r0, sp, #4
 8004008:	f006 fafa 	bl	800a600 <memset>
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800400c:	4623      	mov	r3, r4
 800400e:	221a      	movs	r2, #26
 8004010:	a901      	add	r1, sp, #4
 8004012:	2088      	movs	r0, #136	; 0x88
 8004014:	f7ff fec2 	bl	8003d9c <bme280_get_regs>
	if (rslt == BME280_OK) {
 8004018:	2800      	cmp	r0, #0
 800401a:	d17c      	bne.n	8004116 <bme280_init+0x158>
	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800401c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004020:	f89d 3004 	ldrb.w	r3, [sp, #4]
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8004024:	a901      	add	r1, sp, #4
	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004026:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800402a:	8223      	strh	r3, [r4, #16]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800402c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004030:	f89d 3006 	ldrb.w	r3, [sp, #6]
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8004034:	20e1      	movs	r0, #225	; 0xe1
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8004036:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800403a:	8263      	strh	r3, [r4, #18]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800403c:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8004040:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004044:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004048:	82a3      	strh	r3, [r4, #20]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 800404a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800404e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8004052:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004056:	82e3      	strh	r3, [r4, #22]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8004058:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800405c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004060:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004064:	8323      	strh	r3, [r4, #24]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8004066:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800406a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800406e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004072:	8363      	strh	r3, [r4, #26]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8004074:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8004078:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800407c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004080:	83a3      	strh	r3, [r4, #28]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8004082:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8004086:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800408a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800408e:	83e3      	strh	r3, [r4, #30]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8004090:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8004094:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8004098:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800409c:	8423      	strh	r3, [r4, #32]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800409e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80040a2:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80040a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80040aa:	8463      	strh	r3, [r4, #34]	; 0x22
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 80040ac:	f89d 2019 	ldrb.w	r2, [sp, #25]
 80040b0:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80040b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80040b8:	84a3      	strh	r3, [r4, #36]	; 0x24
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 80040ba:	f89d 201b 	ldrb.w	r2, [sp, #27]
 80040be:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80040c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80040c6:	84e3      	strh	r3, [r4, #38]	; 0x26
	calib_data->dig_H1 = reg_data[25];
 80040c8:	f89d 301d 	ldrb.w	r3, [sp, #29]
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80040cc:	2207      	movs	r2, #7
	calib_data->dig_H1 = reg_data[25];
 80040ce:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80040d2:	4623      	mov	r3, r4
 80040d4:	f7ff fe62 	bl	8003d9c <bme280_get_regs>
		if (rslt == BME280_OK) {
 80040d8:	b9e8      	cbnz	r0, 8004116 <bme280_init+0x158>
	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80040da:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80040de:	f89d 3004 	ldrb.w	r3, [sp, #4]
	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80040e2:	f99d 1007 	ldrsb.w	r1, [sp, #7]
	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80040e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80040ea:	8563      	strh	r3, [r4, #42]	; 0x2a
	calib_data->dig_H3 = reg_data[2];
 80040ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80040f0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80040f4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80040f8:	f003 020f 	and.w	r2, r3, #15
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80040fc:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8004100:	85e2      	strh	r2, [r4, #46]	; 0x2e
	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8004102:	f99d 2009 	ldrsb.w	r2, [sp, #9]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8004106:	091b      	lsrs	r3, r3, #4
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8004108:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800410c:	8623      	strh	r3, [r4, #48]	; 0x30
	calib_data->dig_H6 = (int8_t)reg_data[6];
 800410e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8004112:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
 8004116:	b009      	add	sp, #36	; 0x24
 8004118:	bd30      	pop	{r4, r5, pc}
			dev->delay_ms(1);
 800411a:	68e3      	ldr	r3, [r4, #12]
 800411c:	2001      	movs	r0, #1
 800411e:	3d01      	subs	r5, #1
 8004120:	4798      	blx	r3
		while (try_count) {
 8004122:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8004126:	f47f af56 	bne.w	8003fd6 <bme280_init+0x18>
			rslt = BME280_E_DEV_NOT_FOUND;
 800412a:	f06f 0001 	mvn.w	r0, #1
 800412e:	e7f2      	b.n	8004116 <bme280_init+0x158>

08004130 <put_device_to_sleep>:
{
 8004130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8004132:	2204      	movs	r2, #4
{
 8004134:	4604      	mov	r4, r0
	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8004136:	4603      	mov	r3, r0
 8004138:	eb0d 0102 	add.w	r1, sp, r2
 800413c:	20f2      	movs	r0, #242	; 0xf2
 800413e:	f7ff fe2d 	bl	8003d9c <bme280_get_regs>
	if (rslt == BME280_OK) {
 8004142:	bb58      	cbnz	r0, 800419c <put_device_to_sleep+0x6c>
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8004144:	f89d 3004 	ldrb.w	r3, [sp, #4]
		rslt = bme280_soft_reset(dev);
 8004148:	4620      	mov	r0, r4
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	f88d 300a 	strb.w	r3, [sp, #10]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8004152:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004156:	f3c3 0282 	ubfx	r2, r3, #2, #3
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	f88d 3009 	strb.w	r3, [sp, #9]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8004160:	f89d 3007 	ldrb.w	r3, [sp, #7]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8004164:	f88d 2008 	strb.w	r2, [sp, #8]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8004168:	f3c3 0282 	ubfx	r2, r3, #2, #3
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800416c:	095b      	lsrs	r3, r3, #5
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800416e:	f88d 200b 	strb.w	r2, [sp, #11]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8004172:	f88d 300c 	strb.w	r3, [sp, #12]
		rslt = bme280_soft_reset(dev);
 8004176:	f7ff ff07 	bl	8003f88 <bme280_soft_reset>
		if (rslt == BME280_OK)
 800417a:	b978      	cbnz	r0, 800419c <put_device_to_sleep+0x6c>
		rslt = set_osr_humidity_settings(settings, dev);
 800417c:	4621      	mov	r1, r4
 800417e:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8004182:	f7ff fe6b 	bl	8003e5c <set_osr_humidity_settings.isra.8>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8004186:	4622      	mov	r2, r4
 8004188:	a902      	add	r1, sp, #8
 800418a:	201f      	movs	r0, #31
 800418c:	f7ff fe8b 	bl	8003ea6 <set_osr_press_temp_settings>
	if (rslt == BME280_OK)
 8004190:	b920      	cbnz	r0, 800419c <put_device_to_sleep+0x6c>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8004192:	4622      	mov	r2, r4
 8004194:	a902      	add	r1, sp, #8
 8004196:	201f      	movs	r0, #31
 8004198:	f7ff feb5 	bl	8003f06 <set_filter_standby_settings>
}
 800419c:	b004      	add	sp, #16
 800419e:	bd10      	pop	{r4, pc}

080041a0 <bme280_set_sensor_settings>:
{
 80041a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80041a2:	4606      	mov	r6, r0
	rslt = null_ptr_check(dev);
 80041a4:	4608      	mov	r0, r1
{
 80041a6:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 80041a8:	f7ff fdea 	bl	8003d80 <null_ptr_check>
	if (rslt == BME280_OK) {
 80041ac:	4605      	mov	r5, r0
 80041ae:	bb50      	cbnz	r0, 8004206 <bme280_set_sensor_settings+0x66>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 80041b0:	f10d 0007 	add.w	r0, sp, #7
 80041b4:	f7ff fed7 	bl	8003f66 <bme280_get_sensor_mode>
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 80041b8:	4605      	mov	r5, r0
 80041ba:	bb20      	cbnz	r0, 8004206 <bme280_set_sensor_settings+0x66>
 80041bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80041c0:	b9db      	cbnz	r3, 80041fa <bme280_set_sensor_settings+0x5a>
	if (sub_settings & desired_settings) {
 80041c2:	0771      	lsls	r1, r6, #29
 80041c4:	d00f      	beq.n	80041e6 <bme280_set_sensor_settings+0x46>
	if (desired_settings & BME280_OSR_HUM_SEL)
 80041c6:	0772      	lsls	r2, r6, #29
 80041c8:	d520      	bpl.n	800420c <bme280_set_sensor_settings+0x6c>
		rslt = set_osr_humidity_settings(settings, dev);
 80041ca:	4621      	mov	r1, r4
 80041cc:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
 80041d0:	f7ff fe44 	bl	8003e5c <set_osr_humidity_settings.isra.8>
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80041d4:	07b3      	lsls	r3, r6, #30
 80041d6:	d005      	beq.n	80041e4 <bme280_set_sensor_settings+0x44>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 80041d8:	4622      	mov	r2, r4
 80041da:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80041de:	4630      	mov	r0, r6
 80041e0:	f7ff fe61 	bl	8003ea6 <set_osr_press_temp_settings>
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80041e4:	b970      	cbnz	r0, 8004204 <bme280_set_sensor_settings+0x64>
	if (sub_settings & desired_settings) {
 80041e6:	f016 0f18 	tst.w	r6, #24
 80041ea:	d00c      	beq.n	8004206 <bme280_set_sensor_settings+0x66>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 80041ec:	4622      	mov	r2, r4
 80041ee:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80041f2:	4630      	mov	r0, r6
 80041f4:	f7ff fe87 	bl	8003f06 <set_filter_standby_settings>
 80041f8:	e004      	b.n	8004204 <bme280_set_sensor_settings+0x64>
			rslt = put_device_to_sleep(dev);
 80041fa:	4620      	mov	r0, r4
 80041fc:	f7ff ff98 	bl	8004130 <put_device_to_sleep>
		if (rslt == BME280_OK) {
 8004200:	2800      	cmp	r0, #0
 8004202:	d0de      	beq.n	80041c2 <bme280_set_sensor_settings+0x22>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8004204:	4605      	mov	r5, r0
}
 8004206:	4628      	mov	r0, r5
 8004208:	b002      	add	sp, #8
 800420a:	bd70      	pop	{r4, r5, r6, pc}
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 800420c:	2001      	movs	r0, #1
 800420e:	e7e1      	b.n	80041d4 <bme280_set_sensor_settings+0x34>

08004210 <bme280_set_sensor_mode>:
{
 8004210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004212:	4605      	mov	r5, r0
	rslt = null_ptr_check(dev);
 8004214:	4608      	mov	r0, r1
{
 8004216:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 8004218:	f7ff fdb2 	bl	8003d80 <null_ptr_check>
	if (rslt == BME280_OK) {
 800421c:	bb40      	cbnz	r0, 8004270 <bme280_set_sensor_mode+0x60>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 800421e:	f10d 0005 	add.w	r0, sp, #5
 8004222:	f7ff fea0 	bl	8003f66 <bme280_get_sensor_mode>
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8004226:	bb18      	cbnz	r0, 8004270 <bme280_set_sensor_mode+0x60>
 8004228:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800422c:	b9db      	cbnz	r3, 8004266 <bme280_set_sensor_mode+0x56>
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 800422e:	20f4      	movs	r0, #244	; 0xf4
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8004230:	4623      	mov	r3, r4
 8004232:	2201      	movs	r2, #1
 8004234:	f10d 0107 	add.w	r1, sp, #7
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8004238:	f88d 0006 	strb.w	r0, [sp, #6]
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 800423c:	f7ff fdae 	bl	8003d9c <bme280_get_regs>
	if (rslt == BME280_OK) {
 8004240:	b9b0      	cbnz	r0, 8004270 <bme280_set_sensor_mode+0x60>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8004242:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004246:	f005 0503 	and.w	r5, r5, #3
 800424a:	f020 0003 	bic.w	r0, r0, #3
 800424e:	4328      	orrs	r0, r5
 8004250:	f88d 0007 	strb.w	r0, [sp, #7]
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8004254:	4623      	mov	r3, r4
 8004256:	2201      	movs	r2, #1
 8004258:	f10d 0107 	add.w	r1, sp, #7
 800425c:	f10d 0006 	add.w	r0, sp, #6
 8004260:	f7ff fdb3 	bl	8003dca <bme280_set_regs>
 8004264:	e004      	b.n	8004270 <bme280_set_sensor_mode+0x60>
			rslt = put_device_to_sleep(dev);
 8004266:	4620      	mov	r0, r4
 8004268:	f7ff ff62 	bl	8004130 <put_device_to_sleep>
		if (rslt == BME280_OK)
 800426c:	2800      	cmp	r0, #0
 800426e:	d0de      	beq.n	800422e <bme280_set_sensor_mode+0x1e>
}
 8004270:	b003      	add	sp, #12
 8004272:	bd30      	pop	{r4, r5, pc}

08004274 <bme280_parse_sensor_data>:
	data_lsb = (uint32_t)reg_data[1] << 4;
 8004274:	7843      	ldrb	r3, [r0, #1]
	data_msb = (uint32_t)reg_data[0] << 12;
 8004276:	7802      	ldrb	r2, [r0, #0]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8004278:	011b      	lsls	r3, r3, #4
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800427a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 800427e:	7882      	ldrb	r2, [r0, #2]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8004280:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8004284:	600b      	str	r3, [r1, #0]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8004286:	7903      	ldrb	r3, [r0, #4]
	data_msb = (uint32_t)reg_data[3] << 12;
 8004288:	78c2      	ldrb	r2, [r0, #3]
	data_lsb = (uint32_t)reg_data[4] << 4;
 800428a:	011b      	lsls	r3, r3, #4
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800428c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8004290:	7942      	ldrb	r2, [r0, #5]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8004292:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8004296:	604b      	str	r3, [r1, #4]
	uncomp_data->humidity = data_msb | data_lsb;
 8004298:	88c3      	ldrh	r3, [r0, #6]
 800429a:	ba5b      	rev16	r3, r3
 800429c:	b29b      	uxth	r3, r3
 800429e:	608b      	str	r3, [r1, #8]
}
 80042a0:	4770      	bx	lr
	...

080042a4 <bme280_compensate_data>:
{
 80042a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a8:	4681      	mov	r9, r0
 80042aa:	b085      	sub	sp, #20
 80042ac:	4615      	mov	r5, r2
 80042ae:	461c      	mov	r4, r3
	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 80042b0:	4688      	mov	r8, r1
 80042b2:	2900      	cmp	r1, #0
 80042b4:	f000 816b 	beq.w	800458e <bme280_compensate_data+0x2ea>
 80042b8:	2a00      	cmp	r2, #0
 80042ba:	f000 8168 	beq.w	800458e <bme280_compensate_data+0x2ea>
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 8165 	beq.w	800458e <bme280_compensate_data+0x2ea>
		comp_data->temperature = 0;
 80042c4:	2300      	movs	r3, #0
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 80042c6:	f010 0f07 	tst.w	r0, #7
		comp_data->pressure = 0;
 80042ca:	e9c2 3300 	strd	r3, r3, [r2]
		comp_data->humidity = 0;
 80042ce:	6093      	str	r3, [r2, #8]
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 80042d0:	d029      	beq.n	8004326 <bme280_compensate_data+0x82>
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80042d2:	6848      	ldr	r0, [r1, #4]
	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 80042d4:	8822      	ldrh	r2, [r4, #0]
 80042d6:	0053      	lsls	r3, r2, #1
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 80042d8:	ebc2 1210 	rsb	r2, r2, r0, lsr #4
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 80042dc:	4352      	muls	r2, r2
	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 80042de:	ebc3 01d0 	rsb	r1, r3, r0, lsr #3
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 80042e2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 80042e6:	1312      	asrs	r2, r2, #12
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 80042e8:	434b      	muls	r3, r1
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 80042ea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80042ee:	434a      	muls	r2, r1
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 80042f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80042f4:	fb93 f3f1 	sdiv	r3, r3, r1
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 80042f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80042fc:	fb92 f2f1 	sdiv	r2, r2, r1
	calib_data->t_fine = var1 + var2;
 8004300:	4413      	add	r3, r2
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8004302:	f44f 7280 	mov.w	r2, #256	; 0x100
	calib_data->t_fine = var1 + var2;
 8004306:	6263      	str	r3, [r4, #36]	; 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8004308:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800430c:	3380      	adds	r3, #128	; 0x80
 800430e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004312:	f242 1234 	movw	r2, #8500	; 0x2134
 8004316:	4293      	cmp	r3, r2
 8004318:	bfa8      	it	ge
 800431a:	4613      	movge	r3, r2
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800431c:	4a9d      	ldr	r2, [pc, #628]	; (8004594 <bme280_compensate_data+0x2f0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	bfac      	ite	ge
 8004322:	606b      	strge	r3, [r5, #4]
 8004324:	606a      	strlt	r2, [r5, #4]
		if (sensor_comp & BME280_PRESS) {
 8004326:	f019 0f01 	tst.w	r9, #1
 800432a:	f000 80f2 	beq.w	8004512 <bme280_compensate_data+0x26e>
	var1 = ((int64_t)calib_data->t_fine) - 128000;
 800432e:	6a62      	ldr	r2, [r4, #36]	; 0x24
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) >> 8) + ((var1 * ((int64_t)calib_data->dig_P2) << 12));
 8004330:	f9b4 a00a 	ldrsh.w	sl, [r4, #10]
	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8004334:	f5b2 30fa 	subs.w	r0, r2, #128000	; 0x1f400
 8004338:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800433c:	f143 31ff 	adc.w	r1, r3, #4294967295	; 0xffffffff
 8004340:	e9cd 0100 	strd	r0, r1, [sp]
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8004344:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004348:	fb03 f602 	mul.w	r6, r3, r2
 800434c:	fba3 2303 	umull	r2, r3, r3, r3
 8004350:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004354:	9b03      	ldr	r3, [sp, #12]
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) >> 8) + ((var1 * ((int64_t)calib_data->dig_P2) << 12));
 8004356:	ea4f 7bea 	mov.w	fp, sl, asr #31
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 800435a:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800435e:	9303      	str	r3, [sp, #12]
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) >> 8) + ((var1 * ((int64_t)calib_data->dig_P2) << 12));
 8004360:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 8004364:	9b01      	ldr	r3, [sp, #4]
 8004366:	17f7      	asrs	r7, r6, #31
 8004368:	fb06 fc03 	mul.w	ip, r6, r3
 800436c:	9b00      	ldr	r3, [sp, #0]
 800436e:	fb03 cc07 	mla	ip, r3, r7, ip
 8004372:	fba6 6703 	umull	r6, r7, r6, r3
 8004376:	4467      	add	r7, ip
 8004378:	033b      	lsls	r3, r7, #12
 800437a:	ea43 5316 	orr.w	r3, r3, r6, lsr #20
 800437e:	461a      	mov	r2, r3
 8004380:	0333      	lsls	r3, r6, #12
 8004382:	4619      	mov	r1, r3
 8004384:	9b03      	ldr	r3, [sp, #12]
 8004386:	fb0a f603 	mul.w	r6, sl, r3
 800438a:	9b02      	ldr	r3, [sp, #8]
 800438c:	fb03 660b 	mla	r6, r3, fp, r6
 8004390:	fbaa ab03 	umull	sl, fp, sl, r3
 8004394:	4613      	mov	r3, r2
 8004396:	44b3      	add	fp, r6
 8004398:	ea4f 261a 	mov.w	r6, sl, lsr #8
 800439c:	ea46 660b 	orr.w	r6, r6, fp, lsl #24
 80043a0:	198a      	adds	r2, r1, r6
 80043a2:	ea4f 272b 	mov.w	r7, fp, asr #8
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) >> 33;
 80043a6:	88e6      	ldrh	r6, [r4, #6]
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) >> 8) + ((var1 * ((int64_t)calib_data->dig_P2) << 12));
 80043a8:	417b      	adcs	r3, r7
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) >> 33;
 80043aa:	f112 0b00 	adds.w	fp, r2, #0
 80043ae:	f543 4c00 	adc.w	ip, r3, #32768	; 0x8000
 80043b2:	fbab 2306 	umull	r2, r3, fp, r6
 80043b6:	fb06 330c 	mla	r3, r6, ip, r3
 80043ba:	105e      	asrs	r6, r3, #1
 80043bc:	17df      	asrs	r7, r3, #31
	if (var1 != 0) {
 80043be:	ea56 0307 	orrs.w	r3, r6, r7
 80043c2:	f000 80e2 	beq.w	800458a <bme280_compensate_data+0x2e6>
		var4 = 1048576 - uncomp_data->pressure;
 80043c6:	f04f 0c00 	mov.w	ip, #0
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 80043ca:	f9b4 a010 	ldrsh.w	sl, [r4, #16]
 80043ce:	9b03      	ldr	r3, [sp, #12]
 80043d0:	ea4f 7bea 	mov.w	fp, sl, asr #31
 80043d4:	fb0a f103 	mul.w	r1, sl, r3
 80043d8:	9b02      	ldr	r3, [sp, #8]
 80043da:	fb03 110b 	mla	r1, r3, fp, r1
 80043de:	fbaa 2303 	umull	r2, r3, sl, r3
 80043e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80043e6:	9b03      	ldr	r3, [sp, #12]
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) << 17);
 80043e8:	f9b4 a00e 	ldrsh.w	sl, [r4, #14]
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 80043ec:	440b      	add	r3, r1
 80043ee:	9303      	str	r3, [sp, #12]
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) << 17);
 80043f0:	9b01      	ldr	r3, [sp, #4]
 80043f2:	9a00      	ldr	r2, [sp, #0]
 80043f4:	fb0a f303 	mul.w	r3, sl, r3
 80043f8:	ea4f 7bea 	mov.w	fp, sl, asr #31
 80043fc:	fb02 310b 	mla	r1, r2, fp, r3
 8004400:	fbaa 2302 	umull	r2, r3, sl, r2
 8004404:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8004408:	440b      	add	r3, r1
 800440a:	0450      	lsls	r0, r2, #17
 800440c:	0459      	lsls	r1, r3, #17
 800440e:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8004412:	eb1a 0a00 	adds.w	sl, sl, r0
 8004416:	eb4b 0b01 	adc.w	fp, fp, r1
	var2 = var2 + (((int64_t)calib_data->dig_P4) << 35);
 800441a:	eb1c 000a 	adds.w	r0, ip, sl
		var4 = (((var4 << 31) - var2) * 3125) / var1;
 800441e:	f640 4c35 	movw	ip, #3125	; 0xc35
		var4 = 1048576 - uncomp_data->pressure;
 8004422:	f8d8 3000 	ldr.w	r3, [r8]
	var2 = var2 + (((int64_t)calib_data->dig_P4) << 35);
 8004426:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
		var4 = 1048576 - uncomp_data->pressure;
 800442a:	f5c3 1180 	rsb	r1, r3, #1048576	; 0x100000
		var4 = (((var4 << 31) - var2) * 3125) / var1;
 800442e:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8004432:	9301      	str	r3, [sp, #4]
 8004434:	ea4f 73c1 	mov.w	r3, r1, lsl #31
 8004438:	9300      	str	r3, [sp, #0]
	var2 = var2 + (((int64_t)calib_data->dig_P4) << 35);
 800443a:	ea4f 03c2 	mov.w	r3, r2, lsl #3
 800443e:	eb43 010b 	adc.w	r1, r3, fp
		var4 = (((var4 << 31) - var2) * 3125) / var1;
 8004442:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004446:	1a12      	subs	r2, r2, r0
 8004448:	eb63 0301 	sbc.w	r3, r3, r1
 800444c:	fba2 010c 	umull	r0, r1, r2, ip
 8004450:	4632      	mov	r2, r6
 8004452:	fb0c 1103 	mla	r1, ip, r3, r1
 8004456:	463b      	mov	r3, r7
 8004458:	f7fc fb56 	bl	8000b08 <__aeabi_ldivmod>
 800445c:	4682      	mov	sl, r0
		var1 = (((int64_t)calib_data->dig_P9) * (var4 >> 13) * (var4 >> 13)) >> 25;
 800445e:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 8004462:	134b      	asrs	r3, r1, #13
 8004464:	fb06 fc03 	mul.w	ip, r6, r3
 8004468:	0b42      	lsrs	r2, r0, #13
 800446a:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800446e:	17f7      	asrs	r7, r6, #31
 8004470:	fb02 cc07 	mla	ip, r2, r7, ip
 8004474:	fba6 6702 	umull	r6, r7, r6, r2
 8004478:	4373      	muls	r3, r6
 800447a:	4467      	add	r7, ip
 800447c:	fb02 3307 	mla	r3, r2, r7, r3
 8004480:	fba6 6702 	umull	r6, r7, r6, r2
 8004484:	441f      	add	r7, r3
 8004486:	0e72      	lsrs	r2, r6, #25
 8004488:	ea42 12c7 	orr.w	r2, r2, r7, lsl #7
		var4 = ((var4 + var1 + var2) >> 8) + (((int64_t)calib_data->dig_P7) << 4);
 800448c:	1816      	adds	r6, r2, r0
		var2 = (((int64_t)calib_data->dig_P8) * var4) >> 19;
 800448e:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
		var1 = (((int64_t)calib_data->dig_P9) * (var4 >> 13) * (var4 >> 13)) >> 25;
 8004492:	ea4f 6367 	mov.w	r3, r7, asr #25
		var4 = ((var4 + var1 + var2) >> 8) + (((int64_t)calib_data->dig_P7) << 4);
 8004496:	eb43 0701 	adc.w	r7, r3, r1
		var2 = (((int64_t)calib_data->dig_P8) * var4) >> 19;
 800449a:	17d3      	asrs	r3, r2, #31
 800449c:	e9cd 2300 	strd	r2, r3, [sp]
 80044a0:	9b00      	ldr	r3, [sp, #0]
 80044a2:	9a00      	ldr	r2, [sp, #0]
 80044a4:	4359      	muls	r1, r3
 80044a6:	9b01      	ldr	r3, [sp, #4]
 80044a8:	fb0a 1303 	mla	r3, sl, r3, r1
 80044ac:	fba2 010a 	umull	r0, r1, r2, sl
 80044b0:	4419      	add	r1, r3
 80044b2:	ea4f 4ad0 	mov.w	sl, r0, lsr #19
 80044b6:	ea4a 3a41 	orr.w	sl, sl, r1, lsl #13
		var4 = ((var4 + var1 + var2) >> 8) + (((int64_t)calib_data->dig_P7) << 4);
 80044ba:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
 80044be:	eb1a 0206 	adds.w	r2, sl, r6
		var2 = (((int64_t)calib_data->dig_P8) * var4) >> 19;
 80044c2:	ea4f 4be1 	mov.w	fp, r1, asr #19
		var4 = ((var4 + var1 + var2) >> 8) + (((int64_t)calib_data->dig_P7) << 4);
 80044c6:	eb4b 0307 	adc.w	r3, fp, r7
 80044ca:	0a16      	lsrs	r6, r2, #8
 80044cc:	17c1      	asrs	r1, r0, #31
 80044ce:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
 80044d2:	ea4f 1b01 	mov.w	fp, r1, lsl #4
 80044d6:	ea4f 1a00 	mov.w	sl, r0, lsl #4
 80044da:	eb1a 0206 	adds.w	r2, sl, r6
 80044de:	ea4b 7b10 	orr.w	fp, fp, r0, lsr #28
 80044e2:	ea4f 2723 	mov.w	r7, r3, asr #8
 80044e6:	eb4b 0307 	adc.w	r3, fp, r7
		pressure = (uint32_t)(((var4 >> 1) * 100) >> 7);
 80044ea:	105b      	asrs	r3, r3, #1
 80044ec:	ea4f 0232 	mov.w	r2, r2, rrx
 80044f0:	2664      	movs	r6, #100	; 0x64
 80044f2:	fba2 0106 	umull	r0, r1, r2, r6
 80044f6:	fb06 1103 	mla	r1, r6, r3, r1
 80044fa:	4a27      	ldr	r2, [pc, #156]	; (8004598 <bme280_compensate_data+0x2f4>)
 80044fc:	09c3      	lsrs	r3, r0, #7
 80044fe:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8004502:	4293      	cmp	r3, r2
 8004504:	bf28      	it	cs
 8004506:	4613      	movcs	r3, r2
 8004508:	4a24      	ldr	r2, [pc, #144]	; (800459c <bme280_compensate_data+0x2f8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	bf38      	it	cc
 800450e:	4613      	movcc	r3, r2
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8004510:	602b      	str	r3, [r5, #0]
		if (sensor_comp & BME280_HUM) {
 8004512:	f019 0004 	ands.w	r0, r9, #4
 8004516:	d035      	beq.n	8004584 <bme280_compensate_data+0x2e0>
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) << 20);
 8004518:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
	var2 = (int32_t)(uncomp_data->humidity << 14);
 800451c:	f8d8 1008 	ldr.w	r1, [r8, #8]
	var1 = calib_data->t_fine - ((int32_t)76800);
 8004520:	6a63      	ldr	r3, [r4, #36]	; 0x24
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) << 20);
 8004522:	0512      	lsls	r2, r2, #20
	var5 = (((var2 - var3) - var4) + (int32_t)16384) >> 15;
 8004524:	ebc2 3181 	rsb	r1, r2, r1, lsl #14
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 8004528:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
	var1 = calib_data->t_fine - ((int32_t)76800);
 800452c:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
	var5 = (((var2 - var3) - var4) + (int32_t)16384) >> 15;
 8004530:	fb03 1212 	mls	r2, r3, r2, r1
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) >> 11;
 8004534:	7f21      	ldrb	r1, [r4, #28]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) >> 10;
 8004536:	f994 0022 	ldrsb.w	r0, [r4, #34]	; 0x22
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) >> 11;
 800453a:	4359      	muls	r1, r3
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) >> 10;
 800453c:	4343      	muls	r3, r0
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) >> 11;
 800453e:	12c9      	asrs	r1, r1, #11
	var4 = ((var2 * (var3 + (int32_t)32768)) >> 10) + (int32_t)2097152;
 8004540:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) >> 10;
 8004544:	129b      	asrs	r3, r3, #10
	var4 = ((var2 * (var3 + (int32_t)32768)) >> 10) + (int32_t)2097152;
 8004546:	434b      	muls	r3, r1
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) >> 14;
 8004548:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
	var4 = ((var2 * (var3 + (int32_t)32768)) >> 10) + (int32_t)2097152;
 800454c:	129b      	asrs	r3, r3, #10
 800454e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) >> 14;
 8004552:	434b      	muls	r3, r1
	var5 = (((var2 - var3) - var4) + (int32_t)16384) >> 15;
 8004554:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) >> 14;
 8004558:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
	var5 = (((var2 - var3) - var4) + (int32_t)16384) >> 15;
 800455c:	13d2      	asrs	r2, r2, #15
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) >> 14;
 800455e:	139b      	asrs	r3, r3, #14
	var3 = var5 * var2;
 8004560:	4353      	muls	r3, r2
	var4 = ((var3 >> 15) * (var3 >> 15)) >> 7;
 8004562:	13da      	asrs	r2, r3, #15
 8004564:	4352      	muls	r2, r2
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) >> 4);
 8004566:	7e21      	ldrb	r1, [r4, #24]
	var4 = ((var3 >> 15) * (var3 >> 15)) >> 7;
 8004568:	11d2      	asrs	r2, r2, #7
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) >> 4);
 800456a:	434a      	muls	r2, r1
 800456c:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	var5 = (var5 < 0 ? 0 : var5);
 8004570:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8004574:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8004578:	bfa8      	it	ge
 800457a:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 800457e:	2000      	movs	r0, #0
	humidity = (uint32_t)(var5 >> 12);
 8004580:	131b      	asrs	r3, r3, #12
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8004582:	60ab      	str	r3, [r5, #8]
}
 8004584:	b005      	add	sp, #20
 8004586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pressure = pressure_min;
 800458a:	4b04      	ldr	r3, [pc, #16]	; (800459c <bme280_compensate_data+0x2f8>)
 800458c:	e7c0      	b.n	8004510 <bme280_compensate_data+0x26c>
		rslt = BME280_E_NULL_PTR;
 800458e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004592:	e7f7      	b.n	8004584 <bme280_compensate_data+0x2e0>
 8004594:	fffff060 	.word	0xfffff060
 8004598:	00a7d8c0 	.word	0x00a7d8c0
 800459c:	002dc6c0 	.word	0x002dc6c0

080045a0 <bme280_get_sensor_data>:
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 80045a0:	2300      	movs	r3, #0
{
 80045a2:	b570      	push	{r4, r5, r6, lr}
 80045a4:	4606      	mov	r6, r0
 80045a6:	b086      	sub	sp, #24
	rslt = null_ptr_check(dev);
 80045a8:	4610      	mov	r0, r2
{
 80045aa:	460d      	mov	r5, r1
 80045ac:	4614      	mov	r4, r2
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 80045ae:	e9cd 3301 	strd	r3, r3, [sp, #4]
	struct bme280_uncomp_data uncomp_data = {0};
 80045b2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80045b6:	9305      	str	r3, [sp, #20]
	rslt = null_ptr_check(dev);
 80045b8:	f7ff fbe2 	bl	8003d80 <null_ptr_check>
	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 80045bc:	b9a0      	cbnz	r0, 80045e8 <bme280_get_sensor_data+0x48>
 80045be:	b199      	cbz	r1, 80045e8 <bme280_get_sensor_data+0x48>
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80045c0:	4613      	mov	r3, r2
 80045c2:	a901      	add	r1, sp, #4
 80045c4:	2208      	movs	r2, #8
 80045c6:	20f7      	movs	r0, #247	; 0xf7
 80045c8:	f7ff fbe8 	bl	8003d9c <bme280_get_regs>
		if (rslt == BME280_OK) {
 80045cc:	b950      	cbnz	r0, 80045e4 <bme280_get_sensor_data+0x44>
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 80045ce:	a903      	add	r1, sp, #12
 80045d0:	a801      	add	r0, sp, #4
 80045d2:	f7ff fe4f 	bl	8004274 <bme280_parse_sensor_data>
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80045d6:	f104 0310 	add.w	r3, r4, #16
 80045da:	462a      	mov	r2, r5
 80045dc:	a903      	add	r1, sp, #12
 80045de:	4630      	mov	r0, r6
 80045e0:	f7ff fe60 	bl	80042a4 <bme280_compensate_data>
}
 80045e4:	b006      	add	sp, #24
 80045e6:	bd70      	pop	{r4, r5, r6, pc}
		rslt = BME280_E_NULL_PTR;
 80045e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045ec:	e7fa      	b.n	80045e4 <bme280_get_sensor_data+0x44>
	...

080045f0 <TSL2561_getLux>:
// ms: integration time in ms, from setTiming() or from manual integration
// CH0, CH1: results from getData()
// lux will be set to resulting lux calculation
// returns true (1) if calculation was successful
// RETURNS false (0) AND lux = 0.0 IF EITHER SENSOR WAS SATURATED (0XFFFF)
bool TSL2561_getLux(unsigned char gain, unsigned int ms, unsigned int CH0, unsigned int CH1, double *lux) {
 80045f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f4:	461f      	mov	r7, r3
	double ratio, d0, d1;
	// Determine if either sensor saturated (0xFFFF)
	// If so, abandon ship (calculation will not be accurate)
	if ((CH0 == 0xFFFF) || (CH1 == 0xFFFF)) {
 80045f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045fa:	429a      	cmp	r2, r3
bool TSL2561_getLux(unsigned char gain, unsigned int ms, unsigned int CH0, unsigned int CH1, double *lux) {
 80045fc:	4683      	mov	fp, r0
 80045fe:	460e      	mov	r6, r1
 8004600:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	if ((CH0 == 0xFFFF) || (CH1 == 0xFFFF)) {
 8004604:	d001      	beq.n	800460a <TSL2561_getLux+0x1a>
 8004606:	429f      	cmp	r7, r3
 8004608:	d107      	bne.n	800461a <TSL2561_getLux+0x2a>
		*lux = 0.0;
 800460a:	2200      	movs	r2, #0
 800460c:	2300      	movs	r3, #0
		return false;
 800460e:	2000      	movs	r0, #0
		*lux = 0.0;
 8004610:	e9ca 2300 	strd	r2, r3, [sl]
		return true;
	}
	// if (ratio > 1.30)
	*lux = 0.0;
	return true;
}
 8004614:	b003      	add	sp, #12
 8004616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	d0 = CH0; d1 = CH1;
 800461a:	4610      	mov	r0, r2
 800461c:	f7fb feda 	bl	80003d4 <__aeabi_ui2d>
 8004620:	4604      	mov	r4, r0
 8004622:	460d      	mov	r5, r1
 8004624:	4638      	mov	r0, r7
 8004626:	f7fb fed5 	bl	80003d4 <__aeabi_ui2d>
	ratio = d1 / d0;
 800462a:	4622      	mov	r2, r4
 800462c:	462b      	mov	r3, r5
	d0 = CH0; d1 = CH1;
 800462e:	e9cd 0100 	strd	r0, r1, [sp]
	ratio = d1 / d0;
 8004632:	f7fc f873 	bl	800071c <__aeabi_ddiv>
 8004636:	4680      	mov	r8, r0
	d0 *= (402.0/ms);
 8004638:	4630      	mov	r0, r6
	ratio = d1 / d0;
 800463a:	4689      	mov	r9, r1
	d0 *= (402.0/ms);
 800463c:	f7fb feca 	bl	80003d4 <__aeabi_ui2d>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	a150      	add	r1, pc, #320	; (adr r1, 8004788 <TSL2561_getLux+0x198>)
 8004646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800464a:	f7fc f867 	bl	800071c <__aeabi_ddiv>
 800464e:	4622      	mov	r2, r4
 8004650:	462b      	mov	r3, r5
 8004652:	4606      	mov	r6, r0
 8004654:	460f      	mov	r7, r1
 8004656:	f7fb ff37 	bl	80004c8 <__aeabi_dmul>
	d1 *= (402.0/ms);
 800465a:	e9dd 2300 	ldrd	r2, r3, [sp]
	d0 *= (402.0/ms);
 800465e:	4604      	mov	r4, r0
 8004660:	460d      	mov	r5, r1
	d1 *= (402.0/ms);
 8004662:	4630      	mov	r0, r6
 8004664:	4639      	mov	r1, r7
 8004666:	f7fb ff2f 	bl	80004c8 <__aeabi_dmul>
 800466a:	4606      	mov	r6, r0
 800466c:	460f      	mov	r7, r1
	if (!gain) {
 800466e:	f1bb 0f00 	cmp.w	fp, #0
 8004672:	d10f      	bne.n	8004694 <TSL2561_getLux+0xa4>
		d0 *= 16;
 8004674:	2200      	movs	r2, #0
 8004676:	4b5e      	ldr	r3, [pc, #376]	; (80047f0 <TSL2561_getLux+0x200>)
 8004678:	4620      	mov	r0, r4
 800467a:	4629      	mov	r1, r5
 800467c:	f7fb ff24 	bl	80004c8 <__aeabi_dmul>
		d1 *= 16;
 8004680:	2200      	movs	r2, #0
		d0 *= 16;
 8004682:	4604      	mov	r4, r0
 8004684:	460d      	mov	r5, r1
		d1 *= 16;
 8004686:	4630      	mov	r0, r6
 8004688:	4639      	mov	r1, r7
 800468a:	4b59      	ldr	r3, [pc, #356]	; (80047f0 <TSL2561_getLux+0x200>)
 800468c:	f7fb ff1c 	bl	80004c8 <__aeabi_dmul>
 8004690:	4606      	mov	r6, r0
 8004692:	460f      	mov	r7, r1
	if (ratio < 0.5) {
 8004694:	2200      	movs	r2, #0
 8004696:	4b57      	ldr	r3, [pc, #348]	; (80047f4 <TSL2561_getLux+0x204>)
 8004698:	4640      	mov	r0, r8
 800469a:	4649      	mov	r1, r9
 800469c:	f7fc f986 	bl	80009ac <__aeabi_dcmplt>
 80046a0:	b330      	cbz	r0, 80046f0 <TSL2561_getLux+0x100>
		*lux = 0.0304 * d0 - 0.062 * d0 * pow(ratio,1.4);
 80046a2:	a33b      	add	r3, pc, #236	; (adr r3, 8004790 <TSL2561_getLux+0x1a0>)
 80046a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a8:	4640      	mov	r0, r8
 80046aa:	4649      	mov	r1, r9
 80046ac:	f004 ff1a 	bl	80094e4 <pow>
 80046b0:	a339      	add	r3, pc, #228	; (adr r3, 8004798 <TSL2561_getLux+0x1a8>)
 80046b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b6:	4680      	mov	r8, r0
 80046b8:	4689      	mov	r9, r1
 80046ba:	4620      	mov	r0, r4
 80046bc:	4629      	mov	r1, r5
 80046be:	f7fb ff03 	bl	80004c8 <__aeabi_dmul>
 80046c2:	a337      	add	r3, pc, #220	; (adr r3, 80047a0 <TSL2561_getLux+0x1b0>)
 80046c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c8:	4606      	mov	r6, r0
 80046ca:	460f      	mov	r7, r1
 80046cc:	4620      	mov	r0, r4
 80046ce:	4629      	mov	r1, r5
 80046d0:	f7fb fefa 	bl	80004c8 <__aeabi_dmul>
 80046d4:	4642      	mov	r2, r8
 80046d6:	464b      	mov	r3, r9
 80046d8:	f7fb fef6 	bl	80004c8 <__aeabi_dmul>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4630      	mov	r0, r6
 80046e2:	4639      	mov	r1, r7
		*lux = 0.00146 * d0 - 0.00112 * d1;
 80046e4:	f7fb fd38 	bl	8000158 <__aeabi_dsub>
 80046e8:	e9ca 0100 	strd	r0, r1, [sl]
	return true;
 80046ec:	2001      	movs	r0, #1
 80046ee:	e791      	b.n	8004614 <TSL2561_getLux+0x24>
	if (ratio < 0.61) {
 80046f0:	a32d      	add	r3, pc, #180	; (adr r3, 80047a8 <TSL2561_getLux+0x1b8>)
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	4640      	mov	r0, r8
 80046f8:	4649      	mov	r1, r9
 80046fa:	f7fc f957 	bl	80009ac <__aeabi_dcmplt>
 80046fe:	b1a0      	cbz	r0, 800472a <TSL2561_getLux+0x13a>
		*lux = 0.0224 * d0 - 0.031 * d1;
 8004700:	a32b      	add	r3, pc, #172	; (adr r3, 80047b0 <TSL2561_getLux+0x1c0>)
 8004702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004706:	4620      	mov	r0, r4
 8004708:	4629      	mov	r1, r5
 800470a:	f7fb fedd 	bl	80004c8 <__aeabi_dmul>
 800470e:	a32a      	add	r3, pc, #168	; (adr r3, 80047b8 <TSL2561_getLux+0x1c8>)
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	4604      	mov	r4, r0
 8004716:	460d      	mov	r5, r1
		*lux = 0.00146 * d0 - 0.00112 * d1;
 8004718:	4630      	mov	r0, r6
 800471a:	4639      	mov	r1, r7
 800471c:	f7fb fed4 	bl	80004c8 <__aeabi_dmul>
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	4620      	mov	r0, r4
 8004726:	4629      	mov	r1, r5
 8004728:	e7dc      	b.n	80046e4 <TSL2561_getLux+0xf4>
	if (ratio < 0.80) {
 800472a:	a325      	add	r3, pc, #148	; (adr r3, 80047c0 <TSL2561_getLux+0x1d0>)
 800472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004730:	4640      	mov	r0, r8
 8004732:	4649      	mov	r1, r9
 8004734:	f7fc f93a 	bl	80009ac <__aeabi_dcmplt>
 8004738:	b160      	cbz	r0, 8004754 <TSL2561_getLux+0x164>
		*lux = 0.0128 * d0 - 0.0153 * d1;
 800473a:	a323      	add	r3, pc, #140	; (adr r3, 80047c8 <TSL2561_getLux+0x1d8>)
 800473c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004740:	4620      	mov	r0, r4
 8004742:	4629      	mov	r1, r5
 8004744:	f7fb fec0 	bl	80004c8 <__aeabi_dmul>
 8004748:	a321      	add	r3, pc, #132	; (adr r3, 80047d0 <TSL2561_getLux+0x1e0>)
 800474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474e:	4604      	mov	r4, r0
 8004750:	460d      	mov	r5, r1
 8004752:	e7e1      	b.n	8004718 <TSL2561_getLux+0x128>
	if (ratio < 1.30) {
 8004754:	a320      	add	r3, pc, #128	; (adr r3, 80047d8 <TSL2561_getLux+0x1e8>)
 8004756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475a:	4640      	mov	r0, r8
 800475c:	4649      	mov	r1, r9
 800475e:	f7fc f925 	bl	80009ac <__aeabi_dcmplt>
 8004762:	b160      	cbz	r0, 800477e <TSL2561_getLux+0x18e>
		*lux = 0.00146 * d0 - 0.00112 * d1;
 8004764:	a31e      	add	r3, pc, #120	; (adr r3, 80047e0 <TSL2561_getLux+0x1f0>)
 8004766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476a:	4620      	mov	r0, r4
 800476c:	4629      	mov	r1, r5
 800476e:	f7fb feab 	bl	80004c8 <__aeabi_dmul>
 8004772:	a31d      	add	r3, pc, #116	; (adr r3, 80047e8 <TSL2561_getLux+0x1f8>)
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	4604      	mov	r4, r0
 800477a:	460d      	mov	r5, r1
 800477c:	e7cc      	b.n	8004718 <TSL2561_getLux+0x128>
	*lux = 0.0;
 800477e:	2200      	movs	r2, #0
 8004780:	2300      	movs	r3, #0
 8004782:	e9ca 2300 	strd	r2, r3, [sl]
 8004786:	e7b1      	b.n	80046ec <TSL2561_getLux+0xfc>
 8004788:	00000000 	.word	0x00000000
 800478c:	40792000 	.word	0x40792000
 8004790:	66666666 	.word	0x66666666
 8004794:	3ff66666 	.word	0x3ff66666
 8004798:	77318fc5 	.word	0x77318fc5
 800479c:	3f9f212d 	.word	0x3f9f212d
 80047a0:	c8b43958 	.word	0xc8b43958
 80047a4:	3fafbe76 	.word	0x3fafbe76
 80047a8:	b851eb85 	.word	0xb851eb85
 80047ac:	3fe3851e 	.word	0x3fe3851e
 80047b0:	8db8bac7 	.word	0x8db8bac7
 80047b4:	3f96f006 	.word	0x3f96f006
 80047b8:	c8b43958 	.word	0xc8b43958
 80047bc:	3f9fbe76 	.word	0x3f9fbe76
 80047c0:	9999999a 	.word	0x9999999a
 80047c4:	3fe99999 	.word	0x3fe99999
 80047c8:	eb1c432d 	.word	0xeb1c432d
 80047cc:	3f8a36e2 	.word	0x3f8a36e2
 80047d0:	3d07c84b 	.word	0x3d07c84b
 80047d4:	3f8f559b 	.word	0x3f8f559b
 80047d8:	cccccccd 	.word	0xcccccccd
 80047dc:	3ff4cccc 	.word	0x3ff4cccc
 80047e0:	102363b2 	.word	0x102363b2
 80047e4:	3f57ebaf 	.word	0x3f57ebaf
 80047e8:	d7c6fbd2 	.word	0xd7c6fbd2
 80047ec:	3f52599e 	.word	0x3f52599e
 80047f0:	40300000 	.word	0x40300000
 80047f4:	3fe00000 	.word	0x3fe00000

080047f8 <TSL2561_WriteByte>:
		return true;
	}
	return false;
}

bool TSL2561_WriteByte(uint8_t regAdr, uint8_t value) {
 80047f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t data[2] = {0, 0};
	data[0] = ((regAdr & 0x0F) | TSL2561_CMD);
	data[1] = value;
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, data, 2, 1000) == HAL_OK) {
 80047fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	data[0] = ((regAdr & 0x0F) | TSL2561_CMD);
 80047fe:	f000 000f 	and.w	r0, r0, #15
 8004802:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8004806:	f88d 000c 	strb.w	r0, [sp, #12]
	data[1] = value;
 800480a:	f88d 100d 	strb.w	r1, [sp, #13]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, data, 2, 1000) == HAL_OK) {
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	aa03      	add	r2, sp, #12
 8004812:	2302      	movs	r3, #2
 8004814:	2172      	movs	r1, #114	; 0x72
 8004816:	4804      	ldr	r0, [pc, #16]	; (8004828 <TSL2561_WriteByte+0x30>)
 8004818:	f001 f99a 	bl	8005b50 <HAL_I2C_Master_Transmit>
		return true;
	}
	else {
		return false;
	}
}
 800481c:	fab0 f080 	clz	r0, r0
 8004820:	0940      	lsrs	r0, r0, #5
 8004822:	b005      	add	sp, #20
 8004824:	f85d fb04 	ldr.w	pc, [sp], #4
 8004828:	20003d08 	.word	0x20003d08

0800482c <TSL2561_setPowerUp>:
	return(TSL2561_WriteByte(TSL2561_REG_CONTROL,0x03));
 800482c:	2103      	movs	r1, #3
 800482e:	2000      	movs	r0, #0
 8004830:	f7ff bfe2 	b.w	80047f8 <TSL2561_WriteByte>

08004834 <TSL2561_ReadByte>:

bool TSL2561_ReadByte(uint8_t regAdr, uint8_t *value) {
 8004834:	b530      	push	{r4, r5, lr}
	uint8_t data = ((regAdr & 0x0F) | TSL2561_CMD);
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK) {
 8004836:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
bool TSL2561_ReadByte(uint8_t regAdr, uint8_t *value) {
 800483a:	b085      	sub	sp, #20
	uint8_t data = ((regAdr & 0x0F) | TSL2561_CMD);
 800483c:	f000 000f 	and.w	r0, r0, #15
 8004840:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8004844:	aa04      	add	r2, sp, #16
 8004846:	f802 0d01 	strb.w	r0, [r2, #-1]!
bool TSL2561_ReadByte(uint8_t regAdr, uint8_t *value) {
 800484a:	460d      	mov	r5, r1
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK) {
 800484c:	9400      	str	r4, [sp, #0]
 800484e:	2301      	movs	r3, #1
 8004850:	2172      	movs	r1, #114	; 0x72
 8004852:	4809      	ldr	r0, [pc, #36]	; (8004878 <TSL2561_ReadByte+0x44>)
 8004854:	f001 f97c 	bl	8005b50 <HAL_I2C_Master_Transmit>
 8004858:	b958      	cbnz	r0, 8004872 <TSL2561_ReadByte+0x3e>
		if(HAL_I2C_Master_Receive(&hi2c1, (uint16_t) TSL2561_ADDR, value, 1, 1000) == HAL_OK) {
 800485a:	9400      	str	r4, [sp, #0]
 800485c:	2301      	movs	r3, #1
 800485e:	462a      	mov	r2, r5
 8004860:	2172      	movs	r1, #114	; 0x72
 8004862:	4805      	ldr	r0, [pc, #20]	; (8004878 <TSL2561_ReadByte+0x44>)
 8004864:	f001 fa48 	bl	8005cf8 <HAL_I2C_Master_Receive>
 8004868:	fab0 f080 	clz	r0, r0
 800486c:	0940      	lsrs	r0, r0, #5
		}
	}
	else {
		return false;
	}
}
 800486e:	b005      	add	sp, #20
 8004870:	bd30      	pop	{r4, r5, pc}
		return false;
 8004872:	2000      	movs	r0, #0
 8004874:	e7fb      	b.n	800486e <TSL2561_ReadByte+0x3a>
 8004876:	bf00      	nop
 8004878:	20003d08 	.word	0x20003d08

0800487c <TSL2561_setTiming>:
bool TSL2561_setTiming(bool gain, uint8_t time) {
 800487c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800487e:	4605      	mov	r5, r0
 8004880:	460c      	mov	r4, r1
	if (TSL2561_ReadByte(TSL2561_REG_TIMING, &timing)) {
 8004882:	2001      	movs	r0, #1
 8004884:	f10d 0107 	add.w	r1, sp, #7
 8004888:	f7ff ffd4 	bl	8004834 <TSL2561_ReadByte>
 800488c:	b190      	cbz	r0, 80048b4 <TSL2561_setTiming+0x38>
 800488e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (gain)
 8004892:	b18d      	cbz	r5, 80048b8 <TSL2561_setTiming+0x3c>
			timing |= 0x10;
 8004894:	f043 0310 	orr.w	r3, r3, #16
			timing &= ~0x10;
 8004898:	f88d 3007 	strb.w	r3, [sp, #7]
		timing &= ~0x03;
 800489c:	f89d 1007 	ldrb.w	r1, [sp, #7]
		timing |= (time & 0x03);
 80048a0:	f004 0403 	and.w	r4, r4, #3
		timing &= ~0x03;
 80048a4:	f021 0103 	bic.w	r1, r1, #3
		timing |= (time & 0x03);
 80048a8:	4321      	orrs	r1, r4
		if (TSL2561_WriteByte(TSL2561_REG_TIMING, timing))
 80048aa:	2001      	movs	r0, #1
		timing |= (time & 0x03);
 80048ac:	f88d 1007 	strb.w	r1, [sp, #7]
		if (TSL2561_WriteByte(TSL2561_REG_TIMING, timing))
 80048b0:	f7ff ffa2 	bl	80047f8 <TSL2561_WriteByte>
}
 80048b4:	b003      	add	sp, #12
 80048b6:	bd30      	pop	{r4, r5, pc}
			timing &= ~0x10;
 80048b8:	f023 0310 	bic.w	r3, r3, #16
 80048bc:	e7ec      	b.n	8004898 <TSL2561_setTiming+0x1c>

080048be <TSL2561_setTiming_ms>:
	switch (time) {
 80048be:	2901      	cmp	r1, #1
 80048c0:	d008      	beq.n	80048d4 <TSL2561_setTiming_ms+0x16>
 80048c2:	d303      	bcc.n	80048cc <TSL2561_setTiming_ms+0xe>
 80048c4:	2902      	cmp	r1, #2
 80048c6:	d007      	beq.n	80048d8 <TSL2561_setTiming_ms+0x1a>
		default: *ms = 0;
 80048c8:	2300      	movs	r3, #0
 80048ca:	e000      	b.n	80048ce <TSL2561_setTiming_ms+0x10>
		case 0:  *ms = 14; break;
 80048cc:	230e      	movs	r3, #14
		default: *ms = 0;
 80048ce:	6013      	str	r3, [r2, #0]
	return(TSL2561_setTiming(gain, time));
 80048d0:	f7ff bfd4 	b.w	800487c <TSL2561_setTiming>
		case 1:  *ms = 101; break;
 80048d4:	2365      	movs	r3, #101	; 0x65
 80048d6:	e7fa      	b.n	80048ce <TSL2561_setTiming_ms+0x10>
		case 2:  *ms = 402; break;
 80048d8:	f44f 73c9 	mov.w	r3, #402	; 0x192
 80048dc:	e7f7      	b.n	80048ce <TSL2561_setTiming_ms+0x10>
	...

080048e0 <TSL2561_readUInt>:
// Reads an unsigned integer (16 bits) from a TSL2561 address (low byte first)
// Address: TSL2561 address (0 to 15), low byte first
// Value will be set to stored unsigned integer
// Returns true (1) if successful, false (0) if there was an I2C error
// (Also see getError() above)
bool TSL2561_readUInt(uint8_t address, unsigned int *value) {
 80048e0:	b530      	push	{r4, r5, lr}
	char high, low;
	// Set up command byte for read
	uint8_t data = ((address & 0x0F) | TSL2561_CMD);
	uint8_t tmpValue[2] = {0, 0};
 80048e2:	2300      	movs	r3, #0
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK) {
 80048e4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	uint8_t data = ((address & 0x0F) | TSL2561_CMD);
 80048e8:	f000 000f 	and.w	r0, r0, #15
bool TSL2561_readUInt(uint8_t address, unsigned int *value) {
 80048ec:	b085      	sub	sp, #20
	uint8_t data = ((address & 0x0F) | TSL2561_CMD);
 80048ee:	f060 007f 	orn	r0, r0, #127	; 0x7f
bool TSL2561_readUInt(uint8_t address, unsigned int *value) {
 80048f2:	460d      	mov	r5, r1
	uint8_t data = ((address & 0x0F) | TSL2561_CMD);
 80048f4:	f88d 000b 	strb.w	r0, [sp, #11]
	uint8_t tmpValue[2] = {0, 0};
 80048f8:	f8ad 300c 	strh.w	r3, [sp, #12]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK) {
 80048fc:	9400      	str	r4, [sp, #0]
 80048fe:	2301      	movs	r3, #1
 8004900:	f10d 020b 	add.w	r2, sp, #11
 8004904:	2172      	movs	r1, #114	; 0x72
 8004906:	480a      	ldr	r0, [pc, #40]	; (8004930 <TSL2561_readUInt+0x50>)
 8004908:	f001 f922 	bl	8005b50 <HAL_I2C_Master_Transmit>
 800490c:	b110      	cbz	r0, 8004914 <TSL2561_readUInt+0x34>
		else {
			return false;
		}
	}
	else {
		return false;
 800490e:	2000      	movs	r0, #0
	}
}
 8004910:	b005      	add	sp, #20
 8004912:	bd30      	pop	{r4, r5, pc}
		if(HAL_I2C_Master_Receive(&hi2c1, (uint16_t) TSL2561_ADDR, tmpValue, 2, 1000) == HAL_OK) {
 8004914:	9400      	str	r4, [sp, #0]
 8004916:	2302      	movs	r3, #2
 8004918:	aa03      	add	r2, sp, #12
 800491a:	2172      	movs	r1, #114	; 0x72
 800491c:	4804      	ldr	r0, [pc, #16]	; (8004930 <TSL2561_readUInt+0x50>)
 800491e:	f001 f9eb 	bl	8005cf8 <HAL_I2C_Master_Receive>
 8004922:	2800      	cmp	r0, #0
 8004924:	d1f3      	bne.n	800490e <TSL2561_readUInt+0x2e>
			*value = high << 8 |  low;
 8004926:	f8bd 300c 	ldrh.w	r3, [sp, #12]
			return true;
 800492a:	2001      	movs	r0, #1
			*value = high << 8 |  low;
 800492c:	602b      	str	r3, [r5, #0]
			return true;
 800492e:	e7ef      	b.n	8004910 <TSL2561_readUInt+0x30>
 8004930:	20003d08 	.word	0x20003d08

08004934 <TSL2561_getData>:
bool TSL2561_getData(unsigned int *data0, unsigned int *data1) {
 8004934:	b510      	push	{r4, lr}
 8004936:	460c      	mov	r4, r1
	return TSL2561_readUInt(TSL2561_REG_DATA_0, data0) && TSL2561_readUInt(TSL2561_REG_DATA_1, data1);
 8004938:	4601      	mov	r1, r0
 800493a:	200c      	movs	r0, #12
 800493c:	f7ff ffd0 	bl	80048e0 <TSL2561_readUInt>
 8004940:	b118      	cbz	r0, 800494a <TSL2561_getData+0x16>
 8004942:	4621      	mov	r1, r4
 8004944:	200e      	movs	r0, #14
 8004946:	f7ff ffcb 	bl	80048e0 <TSL2561_readUInt>
}
 800494a:	f000 0001 	and.w	r0, r0, #1
 800494e:	bd10      	pop	{r4, pc}

08004950 <_ZN11Sensor_testD1Ev>:

}

Sensor_test::~Sensor_test() {
	// TODO Auto-generated destructor stub
}
 8004950:	4770      	bx	lr

08004952 <_ZNSt19_Sp_counted_deleterIP11Sensor_testNSt12__shared_ptrIS0_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS0_EEES7_LS4_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, std::move(__d), __a) { }

      ~_Sp_counted_deleter() noexcept { }
 8004952:	4770      	bx	lr

08004954 <_ZNSt19_Sp_counted_deleterIP11Sensor_testNSt12__shared_ptrIS0_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS0_EEES7_LS4_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 8004954:	2000      	movs	r0, #0
 8004956:	4770      	bx	lr

08004958 <_ZN11Sensor_testD0Ev>:
Sensor_test::~Sensor_test() {
 8004958:	b510      	push	{r4, lr}
 800495a:	4604      	mov	r4, r0
}
 800495c:	2108      	movs	r1, #8
 800495e:	f004 fd9f 	bl	80094a0 <_ZdlPvj>
 8004962:	4620      	mov	r0, r4
 8004964:	bd10      	pop	{r4, pc}

08004966 <_ZNSt19_Sp_counted_deleterIP11Sensor_testNSt12__shared_ptrIS0_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS0_EEES7_LS4_0EED0Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8004966:	b510      	push	{r4, lr}
 8004968:	4604      	mov	r4, r0
 800496a:	2114      	movs	r1, #20
 800496c:	f004 fd98 	bl	80094a0 <_ZdlPvj>
 8004970:	4620      	mov	r0, r4
 8004972:	bd10      	pop	{r4, pc}

08004974 <_ZNSt19_Sp_counted_deleterIP11Sensor_testNSt12__shared_ptrIS0_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS0_EEES7_LS4_0EE10_M_destroyEv>:
 8004974:	f004 bdb0 	b.w	80094d8 <_ZdlPv>

08004978 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 8004978:	b510      	push	{r4, lr}
 800497a:	4604      	mov	r4, r0
          _M_dispose();
 800497c:	6803      	ldr	r3, [r0, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8004982:	68a3      	ldr	r3, [r4, #8]
 8004984:	3b01      	subs	r3, #1
 8004986:	60a3      	str	r3, [r4, #8]
 8004988:	b92b      	cbnz	r3, 8004996 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1+0x1e>
            _M_destroy();
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	4620      	mov	r0, r4
    }
 800498e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	4718      	bx	r3
    }
 8004996:	bd10      	pop	{r4, pc}

08004998 <_ZNSt19_Sp_counted_deleterIP11Sensor_testNSt12__shared_ptrIS0_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS0_EEES7_LS4_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8004998:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800499a:	6904      	ldr	r4, [r0, #16]

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 800499c:	6823      	ldr	r3, [r4, #0]
 800499e:	4620      	mov	r0, r4
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4798      	blx	r3
	::operator delete(__p);
 80049a4:	4620      	mov	r0, r4
 80049a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049aa:	f004 bd95 	b.w	80094d8 <_ZdlPv>
	...

080049b0 <_GLOBAL__sub_I__ZN11Sensor_testC2Ev>:
		t.count_t++;
	}
	//tst_array[0].count_t++;
	t->count_t++;
	p->increment();
}
 80049b0:	b570      	push	{r4, r5, r6, lr}
Sensor_test::Sensor_test() {
 80049b2:	4b1a      	ldr	r3, [pc, #104]	; (8004a1c <_GLOBAL__sub_I__ZN11Sensor_testC2Ev+0x6c>)
 80049b4:	4c1a      	ldr	r4, [pc, #104]	; (8004a20 <_GLOBAL__sub_I__ZN11Sensor_testC2Ev+0x70>)
Sensor_test* t = new Sensor_test;
 80049b6:	2008      	movs	r0, #8
Sensor_test::Sensor_test() {
 80049b8:	601c      	str	r4, [r3, #0]
 80049ba:	4b1a      	ldr	r3, [pc, #104]	; (8004a24 <_GLOBAL__sub_I__ZN11Sensor_testC2Ev+0x74>)
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80049bc:	4d1a      	ldr	r5, [pc, #104]	; (8004a28 <_GLOBAL__sub_I__ZN11Sensor_testC2Ev+0x78>)
 80049be:	601c      	str	r4, [r3, #0]
 80049c0:	609c      	str	r4, [r3, #8]
 80049c2:	611c      	str	r4, [r3, #16]
 80049c4:	619c      	str	r4, [r3, #24]
 80049c6:	621c      	str	r4, [r3, #32]
 80049c8:	629c      	str	r4, [r3, #40]	; 0x28
 80049ca:	631c      	str	r4, [r3, #48]	; 0x30
 80049cc:	639c      	str	r4, [r3, #56]	; 0x38
 80049ce:	641c      	str	r4, [r3, #64]	; 0x40
 80049d0:	649c      	str	r4, [r3, #72]	; 0x48
Sensor_test* t = new Sensor_test;
 80049d2:	f004 fd67 	bl	80094a4 <_Znwj>
 80049d6:	4b15      	ldr	r3, [pc, #84]	; (8004a2c <_GLOBAL__sub_I__ZN11Sensor_testC2Ev+0x7c>)
Sensor_test::Sensor_test() {
 80049d8:	6004      	str	r4, [r0, #0]
Sensor_test* t = new Sensor_test;
 80049da:	6018      	str	r0, [r3, #0]
 80049dc:	2300      	movs	r3, #0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80049de:	2008      	movs	r0, #8
      constexpr __shared_count() noexcept : _M_pi(0)
 80049e0:	e9c5 3300 	strd	r3, r3, [r5]
 80049e4:	f004 fd5e 	bl	80094a4 <_Znwj>
 80049e8:	4606      	mov	r6, r0
Sensor_test::Sensor_test() {
 80049ea:	6004      	str	r4, [r0, #0]
 80049ec:	2014      	movs	r0, #20
 80049ee:	f004 fd59 	bl	80094a4 <_Znwj>
      : _M_use_count(1), _M_weak_count(1) { }
 80049f2:	2201      	movs	r2, #1
 80049f4:	4603      	mov	r3, r0
 80049f6:	e9c0 2201 	strd	r2, r2, [r0, #4]
      : _M_impl(__p, std::move(__d), __a) { }
 80049fa:	4a0d      	ldr	r2, [pc, #52]	; (8004a30 <_GLOBAL__sub_I__ZN11Sensor_testC2Ev+0x80>)
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 80049fc:	6106      	str	r6, [r0, #16]
      : _M_impl(__p, std::move(__d), __a) { }
 80049fe:	6002      	str	r2, [r0, #0]
	__r._M_pi = _M_pi;
 8004a00:	6868      	ldr	r0, [r5, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 8004a02:	e9c5 6300 	strd	r6, r3, [r5]
	if (_M_pi != nullptr)
 8004a06:	b138      	cbz	r0, 8004a18 <_GLOBAL__sub_I__ZN11Sensor_testC2Ev+0x68>
      if (--_M_use_count == 0)
 8004a08:	6843      	ldr	r3, [r0, #4]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	6043      	str	r3, [r0, #4]
 8004a0e:	b91b      	cbnz	r3, 8004a18 <_GLOBAL__sub_I__ZN11Sensor_testC2Ev+0x68>
}
 8004a10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004a14:	f7ff bfb0 	b.w	8004978 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1>
 8004a18:	bd70      	pop	{r4, r5, r6, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20001bdc 	.word	0x20001bdc
 8004a20:	0800a870 	.word	0x0800a870
 8004a24:	20001be4 	.word	0x20001be4
 8004a28:	20001bd0 	.word	0x20001bd0
 8004a2c:	20001bd8 	.word	0x20001bd8
 8004a30:	0800a854 	.word	0x0800a854

08004a34 <_GLOBAL__sub_D__ZN11Sensor_testC2Ev>:
 8004a34:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 8004a36:	4b0a      	ldr	r3, [pc, #40]	; (8004a60 <_GLOBAL__sub_D__ZN11Sensor_testC2Ev+0x2c>)
 8004a38:	6858      	ldr	r0, [r3, #4]
 8004a3a:	b128      	cbz	r0, 8004a48 <_GLOBAL__sub_D__ZN11Sensor_testC2Ev+0x14>
      if (--_M_use_count == 0)
 8004a3c:	6843      	ldr	r3, [r0, #4]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	6043      	str	r3, [r0, #4]
 8004a42:	b90b      	cbnz	r3, 8004a48 <_GLOBAL__sub_D__ZN11Sensor_testC2Ev+0x14>
 8004a44:	f7ff ff98 	bl	8004978 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1>
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 8004a48:	2448      	movs	r4, #72	; 0x48
 8004a4a:	4d06      	ldr	r5, [pc, #24]	; (8004a64 <_GLOBAL__sub_D__ZN11Sensor_testC2Ev+0x30>)
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  N  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
 8004a4c:	5963      	ldr	r3, [r4, r5]
 8004a4e:	1928      	adds	r0, r5, r4
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	3c08      	subs	r4, #8
 8004a54:	4798      	blx	r3
 8004a56:	f114 0f08 	cmn.w	r4, #8
 8004a5a:	d1f7      	bne.n	8004a4c <_GLOBAL__sub_D__ZN11Sensor_testC2Ev+0x18>
 8004a5c:	bd38      	pop	{r3, r4, r5, pc}
 8004a5e:	bf00      	nop
 8004a60:	20001bd0 	.word	0x20001bd0
 8004a64:	20001be4 	.word	0x20001be4

08004a68 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
	HAL_TIM_Base_Start(&htim3);
 8004a68:	4801      	ldr	r0, [pc, #4]	; (8004a70 <configureTimerForRunTimeStats+0x8>)
 8004a6a:	f002 bdff 	b.w	800766c <HAL_TIM_Base_Start>
 8004a6e:	bf00      	nop
 8004a70:	20003d64 	.word	0x20003d64

08004a74 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
	static unsigned long counter = 0;

	counter += __HAL_TIM_GET_COUNTER(&htim3);
 8004a74:	4b04      	ldr	r3, [pc, #16]	; (8004a88 <getRunTimeCounterValue+0x14>)
 8004a76:	4a05      	ldr	r2, [pc, #20]	; (8004a8c <getRunTimeCounterValue+0x18>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6811      	ldr	r1, [r2, #0]
 8004a7c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004a7e:	4408      	add	r0, r1
 8004a80:	6010      	str	r0, [r2, #0]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004a82:	2200      	movs	r2, #0
 8004a84:	625a      	str	r2, [r3, #36]	; 0x24

	return counter;
}
 8004a86:	4770      	bx	lr
 8004a88:	20003d64 	.word	0x20003d64
 8004a8c:	20001c34 	.word	0x20001c34

08004a90 <user_delay_ms>:
  return 0;
}

void user_delay_ms(uint32_t period)
{
  HAL_Delay(period);
 8004a90:	f000 bd08 	b.w	80054a4 <HAL_Delay>

08004a94 <user_i2c_read>:
{
 8004a94:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8004a96:	250a      	movs	r5, #10
{
 8004a98:	b085      	sub	sp, #20
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8004a9a:	0044      	lsls	r4, r0, #1
{
 8004a9c:	4616      	mov	r6, r2
 8004a9e:	aa04      	add	r2, sp, #16
 8004aa0:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8004aa4:	461f      	mov	r7, r3
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8004aa6:	9500      	str	r5, [sp, #0]
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	4621      	mov	r1, r4
 8004aac:	480a      	ldr	r0, [pc, #40]	; (8004ad8 <user_i2c_read+0x44>)
 8004aae:	f001 f84f 	bl	8005b50 <HAL_I2C_Master_Transmit>
 8004ab2:	b968      	cbnz	r0, 8004ad0 <user_i2c_read+0x3c>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8004ab4:	9500      	str	r5, [sp, #0]
 8004ab6:	463b      	mov	r3, r7
 8004ab8:	4632      	mov	r2, r6
 8004aba:	f044 0101 	orr.w	r1, r4, #1
 8004abe:	4806      	ldr	r0, [pc, #24]	; (8004ad8 <user_i2c_read+0x44>)
 8004ac0:	f001 f91a 	bl	8005cf8 <HAL_I2C_Master_Receive>
 8004ac4:	3000      	adds	r0, #0
 8004ac6:	bf18      	it	ne
 8004ac8:	2001      	movne	r0, #1
 8004aca:	4240      	negs	r0, r0
}
 8004acc:	b005      	add	sp, #20
 8004ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8004ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ad4:	e7fa      	b.n	8004acc <user_i2c_read+0x38>
 8004ad6:	bf00      	nop
 8004ad8:	20003d08 	.word	0x20003d08

08004adc <user_i2c_write>:
}

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8004adc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  int8_t *buf;
  buf = malloc(len +1);
 8004ae0:	1c5e      	adds	r6, r3, #1
{
 8004ae2:	4607      	mov	r7, r0
  buf = malloc(len +1);
 8004ae4:	4630      	mov	r0, r6
{
 8004ae6:	461c      	mov	r4, r3
 8004ae8:	4689      	mov	r9, r1
 8004aea:	4690      	mov	r8, r2
  buf = malloc(len +1);
 8004aec:	f005 fd54 	bl	800a598 <malloc>
  buf[0] = reg_addr;
  memcpy(buf +1, data, len);
 8004af0:	4622      	mov	r2, r4
  buf = malloc(len +1);
 8004af2:	4605      	mov	r5, r0
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8004af4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  memcpy(buf +1, data, len);
 8004af8:	4641      	mov	r1, r8
  buf[0] = reg_addr;
 8004afa:	f800 9b01 	strb.w	r9, [r0], #1
  memcpy(buf +1, data, len);
 8004afe:	f005 fd5b 	bl	800a5b8 <memcpy>
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8004b02:	b2b3      	uxth	r3, r6
 8004b04:	9400      	str	r4, [sp, #0]
 8004b06:	462a      	mov	r2, r5
 8004b08:	0079      	lsls	r1, r7, #1
 8004b0a:	4807      	ldr	r0, [pc, #28]	; (8004b28 <user_i2c_write+0x4c>)
 8004b0c:	f001 f820 	bl	8005b50 <HAL_I2C_Master_Transmit>
 8004b10:	4606      	mov	r6, r0
 8004b12:	b930      	cbnz	r0, 8004b22 <user_i2c_write+0x46>
  free(buf);
 8004b14:	4628      	mov	r0, r5
 8004b16:	f005 fd47 	bl	800a5a8 <free>
  return 0;
 8004b1a:	4630      	mov	r0, r6
}
 8004b1c:	b003      	add	sp, #12
 8004b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8004b22:	4620      	mov	r0, r4
 8004b24:	e7fa      	b.n	8004b1c <user_i2c_write+0x40>
 8004b26:	bf00      	nop
 8004b28:	20003d08 	.word	0x20003d08
 8004b2c:	00000000 	.word	0x00000000

08004b30 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8004b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
	if(rslt == BME280_OK)
	{
		sensors_data.temperature = comp_data.temperature / 100.0;      /* C  */
		sensors_data.humidity = comp_data.humidity / 1024.0;           /* %   */
		sensors_data.pressure = comp_data.pressure / 10000.0 / 1.333;  /* hPa or mmhg */
 8004b34:	f20f 09d0 	addw	r9, pc, #208	; 0xd0
 8004b38:	e9d9 8900 	ldrd	r8, r9, [r9]
{
 8004b3c:	b089      	sub	sp, #36	; 0x24
  xLastWakeTime = xTaskGetTickCount();
 8004b3e:	f003 fdc7 	bl	80086d0 <xTaskGetTickCount>
		sensors_data.temperature = comp_data.temperature / 100.0;      /* C  */
 8004b42:	2400      	movs	r4, #0
		sensors_data.humidity = comp_data.humidity / 1024.0;           /* %   */
 8004b44:	2600      	movs	r6, #0
		sensors_data.temperature = comp_data.temperature / 100.0;      /* C  */
 8004b46:	4d34      	ldr	r5, [pc, #208]	; (8004c18 <StartTask01+0xe8>)
		sensors_data.humidity = comp_data.humidity / 1024.0;           /* %   */
 8004b48:	4f34      	ldr	r7, [pc, #208]	; (8004c1c <StartTask01+0xec>)
  xLastWakeTime = xTaskGetTickCount();
 8004b4a:	9003      	str	r0, [sp, #12]
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8004b4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b50:	a803      	add	r0, sp, #12
 8004b52:	f003 fec7 	bl	80088e4 <vTaskDelayUntil>
	if (TSL2561_getData(&data0, &data1))
 8004b56:	a905      	add	r1, sp, #20
 8004b58:	a804      	add	r0, sp, #16
 8004b5a:	f7ff feeb 	bl	8004934 <TSL2561_getData>
 8004b5e:	b1c8      	cbz	r0, 8004b94 <StartTask01+0x64>
		TSL2561_getLux(gain, ms, data0, data1, &lux);
 8004b60:	4b2f      	ldr	r3, [pc, #188]	; (8004c20 <StartTask01+0xf0>)
 8004b62:	4930      	ldr	r1, [pc, #192]	; (8004c24 <StartTask01+0xf4>)
 8004b64:	7818      	ldrb	r0, [r3, #0]
 8004b66:	ab06      	add	r3, sp, #24
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	6809      	ldr	r1, [r1, #0]
 8004b6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b70:	f7ff fd3e 	bl	80045f0 <TSL2561_getLux>
		sensors_data.lux = lux;
 8004b74:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8004b78:	4659      	mov	r1, fp
 8004b7a:	4650      	mov	r0, sl
 8004b7c:	f7fb ff54 	bl	8000a28 <__aeabi_d2uiz>
 8004b80:	4b29      	ldr	r3, [pc, #164]	; (8004c28 <StartTask01+0xf8>)
		lora_sensor_set_data(&illumination_sensor,(float)lux);
 8004b82:	4659      	mov	r1, fp
		sensors_data.lux = lux;
 8004b84:	8018      	strh	r0, [r3, #0]
		lora_sensor_set_data(&illumination_sensor,(float)lux);
 8004b86:	4650      	mov	r0, sl
 8004b88:	f7fb ff6e 	bl	8000a68 <__aeabi_d2f>
 8004b8c:	4601      	mov	r1, r0
 8004b8e:	4827      	ldr	r0, [pc, #156]	; (8004c2c <StartTask01+0xfc>)
 8004b90:	f000 fc0a 	bl	80053a8 <lora_sensor_set_data>
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8004b94:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8004c3c <StartTask01+0x10c>
 8004b98:	4a25      	ldr	r2, [pc, #148]	; (8004c30 <StartTask01+0x100>)
 8004b9a:	4651      	mov	r1, sl
 8004b9c:	2007      	movs	r0, #7
 8004b9e:	f7ff fcff 	bl	80045a0 <bme280_get_sensor_data>
 8004ba2:	4b24      	ldr	r3, [pc, #144]	; (8004c34 <StartTask01+0x104>)
 8004ba4:	7018      	strb	r0, [r3, #0]
	if(rslt == BME280_OK)
 8004ba6:	bb50      	cbnz	r0, 8004bfe <StartTask01+0xce>
		sensors_data.temperature = comp_data.temperature / 100.0;      /* C  */
 8004ba8:	f8da 0004 	ldr.w	r0, [sl, #4]
 8004bac:	f7fb fc22 	bl	80003f4 <__aeabi_i2d>
 8004bb0:	4622      	mov	r2, r4
 8004bb2:	462b      	mov	r3, r5
 8004bb4:	f7fb fdb2 	bl	800071c <__aeabi_ddiv>
 8004bb8:	f7fb ff36 	bl	8000a28 <__aeabi_d2uiz>
 8004bbc:	f8df b068 	ldr.w	fp, [pc, #104]	; 8004c28 <StartTask01+0xf8>
 8004bc0:	f8ab 0002 	strh.w	r0, [fp, #2]
		sensors_data.humidity = comp_data.humidity / 1024.0;           /* %   */
 8004bc4:	f8da 0008 	ldr.w	r0, [sl, #8]
 8004bc8:	f7fb fc04 	bl	80003d4 <__aeabi_ui2d>
 8004bcc:	4632      	mov	r2, r6
 8004bce:	463b      	mov	r3, r7
 8004bd0:	f7fb fc7a 	bl	80004c8 <__aeabi_dmul>
 8004bd4:	f7fb ff28 	bl	8000a28 <__aeabi_d2uiz>
 8004bd8:	f8ab 0004 	strh.w	r0, [fp, #4]
		sensors_data.pressure = comp_data.pressure / 10000.0 / 1.333;  /* hPa or mmhg */
 8004bdc:	f8da 0000 	ldr.w	r0, [sl]
 8004be0:	f7fb fbf8 	bl	80003d4 <__aeabi_ui2d>
 8004be4:	4642      	mov	r2, r8
 8004be6:	464b      	mov	r3, r9
 8004be8:	f7fb fd98 	bl	800071c <__aeabi_ddiv>
 8004bec:	a308      	add	r3, pc, #32	; (adr r3, 8004c10 <StartTask01+0xe0>)
 8004bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf2:	f7fb fd93 	bl	800071c <__aeabi_ddiv>
 8004bf6:	f7fb ff17 	bl	8000a28 <__aeabi_d2uiz>
 8004bfa:	f8ab 0006 	strh.w	r0, [fp, #6]
	}
	++cnt_task_1;
 8004bfe:	4a0e      	ldr	r2, [pc, #56]	; (8004c38 <StartTask01+0x108>)
 8004c00:	6813      	ldr	r3, [r2, #0]
 8004c02:	3301      	adds	r3, #1
 8004c04:	6013      	str	r3, [r2, #0]
  {
 8004c06:	e7a1      	b.n	8004b4c <StartTask01+0x1c>
 8004c08:	00000000 	.word	0x00000000
 8004c0c:	40c38800 	.word	0x40c38800
 8004c10:	ced91687 	.word	0xced91687
 8004c14:	3ff553f7 	.word	0x3ff553f7
 8004c18:	40590000 	.word	0x40590000
 8004c1c:	3f500000 	.word	0x3f500000
 8004c20:	20001c44 	.word	0x20001c44
 8004c24:	20001c48 	.word	0x20001c48
 8004c28:	20003e68 	.word	0x20003e68
 8004c2c:	20003db4 	.word	0x20003db4
 8004c30:	20000018 	.word	0x20000018
 8004c34:	20001c4c 	.word	0x20001c4c
 8004c38:	20003e64 	.word	0x20003e64
 8004c3c:	20001c38 	.word	0x20001c38

08004c40 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8004c40:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* USER CODE BEGIN StartTask02 */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = 1000;
  xLastWakeTime = xTaskGetTickCount();
 8004c42:	f003 fd45 	bl	80086d0 <xTaskGetTickCount>
 8004c46:	ac02      	add	r4, sp, #8
  /* Infinite loop */
  for(;;)
  {
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
	lora_module_send_packet_read_data(&lora_module);
 8004c48:	4e07      	ldr	r6, [pc, #28]	; (8004c68 <StartTask02+0x28>)
	++cnt_task_2;
 8004c4a:	4d08      	ldr	r5, [pc, #32]	; (8004c6c <StartTask02+0x2c>)
  xLastWakeTime = xTaskGetTickCount();
 8004c4c:	f844 0d04 	str.w	r0, [r4, #-4]!
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8004c50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004c54:	4620      	mov	r0, r4
 8004c56:	f003 fe45 	bl	80088e4 <vTaskDelayUntil>
	lora_module_send_packet_read_data(&lora_module);
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	f000 fb4a 	bl	80052f4 <lora_module_send_packet_read_data>
	++cnt_task_2;
 8004c60:	682b      	ldr	r3, [r5, #0]
 8004c62:	3301      	adds	r3, #1
 8004c64:	602b      	str	r3, [r5, #0]
 8004c66:	e7f3      	b.n	8004c50 <StartTask02+0x10>
 8004c68:	20000058 	.word	0x20000058
 8004c6c:	20003d5c 	.word	0x20003d5c

08004c70 <SystemClock_Config>:
{
 8004c70:	b500      	push	{lr}
 8004c72:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c74:	2224      	movs	r2, #36	; 0x24
 8004c76:	2100      	movs	r1, #0
 8004c78:	a807      	add	r0, sp, #28
 8004c7a:	f005 fcc1 	bl	800a600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004c7e:	2214      	movs	r2, #20
 8004c80:	2100      	movs	r1, #0
 8004c82:	a801      	add	r0, sp, #4
 8004c84:	f005 fcbc 	bl	800a600 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004c88:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c8a:	2101      	movs	r1, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004c8c:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c8e:	2310      	movs	r3, #16
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c90:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c92:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c96:	f002 f81d 	bl	8006cd4 <HAL_RCC_OscConfig>
 8004c9a:	4601      	mov	r1, r0
 8004c9c:	b108      	cbz	r0, 8004ca2 <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c9e:	b672      	cpsid	i
 8004ca0:	e7fe      	b.n	8004ca0 <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ca2:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004ca4:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004ca8:	e9cd 3001 	strd	r3, r0, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004cac:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004cae:	a801      	add	r0, sp, #4
 8004cb0:	f002 f9e8 	bl	8007084 <HAL_RCC_ClockConfig>
 8004cb4:	b108      	cbz	r0, 8004cba <SystemClock_Config+0x4a>
 8004cb6:	b672      	cpsid	i
 8004cb8:	e7fe      	b.n	8004cb8 <SystemClock_Config+0x48>
}
 8004cba:	b011      	add	sp, #68	; 0x44
 8004cbc:	f85d fb04 	ldr.w	pc, [sp], #4

08004cc0 <main>:
{
 8004cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cc2:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8004cc4:	f000 fbca 	bl	800545c <HAL_Init>
  SystemClock_Config();
 8004cc8:	f7ff ffd2 	bl	8004c70 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ccc:	2210      	movs	r2, #16
 8004cce:	2100      	movs	r1, #0
 8004cd0:	a80c      	add	r0, sp, #48	; 0x30
 8004cd2:	f005 fc95 	bl	800a600 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004cd6:	4b9e      	ldr	r3, [pc, #632]	; (8004f50 <main+0x290>)
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin, GPIO_PIN_RESET);
 8004cd8:	f641 4110 	movw	r1, #7184	; 0x1c10
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004cdc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin, GPIO_PIN_RESET);
 8004cde:	489d      	ldr	r0, [pc, #628]	; (8004f54 <main+0x294>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ce0:	f042 0220 	orr.w	r2, r2, #32
 8004ce4:	619a      	str	r2, [r3, #24]
 8004ce6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ce8:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004cea:	f002 0220 	and.w	r2, r2, #32
 8004cee:	9207      	str	r2, [sp, #28]
 8004cf0:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cf2:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cf4:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cf6:	f042 0204 	orr.w	r2, r2, #4
 8004cfa:	619a      	str	r2, [r3, #24]
 8004cfc:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cfe:	2502      	movs	r5, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d00:	f002 0204 	and.w	r2, r2, #4
 8004d04:	9208      	str	r2, [sp, #32]
 8004d06:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d08:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d0a:	f240 4604 	movw	r6, #1028	; 0x404
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d0e:	f042 0208 	orr.w	r2, r2, #8
 8004d12:	619a      	str	r2, [r3, #24]
 8004d14:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin, GPIO_PIN_RESET);
 8004d16:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d18:	f003 0308 	and.w	r3, r3, #8
 8004d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin, GPIO_PIN_RESET);
 8004d20:	f000 fd58 	bl	80057d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LORA_RESET_Pin|CO2_WAKE_UP_Pin, GPIO_PIN_RESET);
 8004d24:	2200      	movs	r2, #0
 8004d26:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8004d2a:	488b      	ldr	r0, [pc, #556]	; (8004f58 <main+0x298>)
 8004d2c:	f000 fd52 	bl	80057d4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d30:	f641 4310 	movw	r3, #7184	; 0x1c10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d34:	a90c      	add	r1, sp, #48	; 0x30
 8004d36:	4887      	ldr	r0, [pc, #540]	; (8004f54 <main+0x294>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d38:	e9cd 370c 	strd	r3, r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d3c:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d40:	f000 fc62 	bl	8005608 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d44:	4b85      	ldr	r3, [pc, #532]	; (8004f5c <main+0x29c>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d46:	a90c      	add	r1, sp, #48	; 0x30
 8004d48:	4883      	ldr	r0, [pc, #524]	; (8004f58 <main+0x298>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d4a:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4e:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d50:	f000 fc5a 	bl	8005608 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LORA_RESET_Pin|CO2_WAKE_UP_Pin;
 8004d54:	f44f 6301 	mov.w	r3, #2064	; 0x810
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d58:	a90c      	add	r1, sp, #48	; 0x30
 8004d5a:	487f      	ldr	r0, [pc, #508]	; (8004f58 <main+0x298>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d5c:	e9cd 370c 	strd	r3, r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d60:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d64:	f000 fc50 	bl	8005608 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8004d68:	4622      	mov	r2, r4
 8004d6a:	2105      	movs	r1, #5
 8004d6c:	2008      	movs	r0, #8
 8004d6e:	f000 fbbd 	bl	80054ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004d72:	2008      	movs	r0, #8
 8004d74:	f000 fbee 	bl	8005554 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8004d78:	4622      	mov	r2, r4
 8004d7a:	2105      	movs	r1, #5
 8004d7c:	2028      	movs	r0, #40	; 0x28
 8004d7e:	f000 fbb5 	bl	80054ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004d82:	2028      	movs	r0, #40	; 0x28
 8004d84:	f000 fbe6 	bl	8005554 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8004d88:	4875      	ldr	r0, [pc, #468]	; (8004f60 <main+0x2a0>)
  hi2c1.Init.ClockSpeed = 400000;
 8004d8a:	4b76      	ldr	r3, [pc, #472]	; (8004f64 <main+0x2a4>)
 8004d8c:	f8df c220 	ldr.w	ip, [pc, #544]	; 8004fb0 <main+0x2f0>
  hi2c1.Init.OwnAddress1 = 0;
 8004d90:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 400000;
 8004d94:	e9c0 c300 	strd	ip, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004d98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004d9c:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004da0:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004da4:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004da6:	f000 fe27 	bl	80059f8 <HAL_I2C_Init>
 8004daa:	b108      	cbz	r0, 8004db0 <main+0xf0>
 8004dac:	b672      	cpsid	i
 8004dae:	e7fe      	b.n	8004dae <main+0xee>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004db0:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 8004db4:	4c6c      	ldr	r4, [pc, #432]	; (8004f68 <main+0x2a8>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004db6:	496d      	ldr	r1, [pc, #436]	; (8004f6c <main+0x2ac>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004db8:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004dbc:	e9c4 1300 	strd	r1, r3, [r4]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004dc0:	2320      	movs	r3, #32
 8004dc2:	e9c4 5306 	strd	r5, r3, [r4, #24]
  hspi1.Init.CRCPolynomial = 10;
 8004dc6:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004dc8:	e9c4 0002 	strd	r0, r0, [r4, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004dcc:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004dd0:	e9c4 0008 	strd	r0, r0, [r4, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dd4:	62a0      	str	r0, [r4, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004dd6:	4620      	mov	r0, r4
  hspi1.Init.CRCPolynomial = 10;
 8004dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004dda:	f002 fa81 	bl	80072e0 <HAL_SPI_Init>
 8004dde:	4606      	mov	r6, r0
 8004de0:	b108      	cbz	r0, 8004de6 <main+0x126>
 8004de2:	b672      	cpsid	i
 8004de4:	e7fe      	b.n	8004de4 <main+0x124>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004de6:	2210      	movs	r2, #16
 8004de8:	4601      	mov	r1, r0
 8004dea:	a80c      	add	r0, sp, #48	; 0x30
 8004dec:	f005 fc08 	bl	800a600 <memset>
  htim3.Init.Prescaler = 72;
 8004df0:	2348      	movs	r3, #72	; 0x48
  htim3.Instance = TIM3;
 8004df2:	4d5f      	ldr	r5, [pc, #380]	; (8004f70 <main+0x2b0>)
  htim3.Init.Prescaler = 72;
 8004df4:	4a5f      	ldr	r2, [pc, #380]	; (8004f74 <main+0x2b4>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004df6:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 72;
 8004df8:	e9c5 2300 	strd	r2, r3, [r5]
  htim3.Init.Period = 65535;
 8004dfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e00:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e04:	60ae      	str	r6, [r5, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e06:	e9c5 3603 	strd	r3, r6, [r5, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e0a:	61ae      	str	r6, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004e0c:	f002 fd5c 	bl	80078c8 <HAL_TIM_Base_Init>
 8004e10:	b108      	cbz	r0, 8004e16 <main+0x156>
 8004e12:	b672      	cpsid	i
 8004e14:	e7fe      	b.n	8004e14 <main+0x154>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e16:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004e1a:	a90c      	add	r1, sp, #48	; 0x30
 8004e1c:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e1e:	960c      	str	r6, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004e20:	f002 fd88 	bl	8007934 <HAL_TIM_ConfigClockSource>
 8004e24:	b108      	cbz	r0, 8004e2a <main+0x16a>
 8004e26:	b672      	cpsid	i
 8004e28:	e7fe      	b.n	8004e28 <main+0x168>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e2a:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004e2e:	a90a      	add	r1, sp, #40	; 0x28
 8004e30:	4628      	mov	r0, r5
 8004e32:	f002 fe13 	bl	8007a5c <HAL_TIMEx_MasterConfigSynchronization>
 8004e36:	b108      	cbz	r0, 8004e3c <main+0x17c>
 8004e38:	b672      	cpsid	i
 8004e3a:	e7fe      	b.n	8004e3a <main+0x17a>
  LoRa_init(&hspi1);
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	f000 fac3 	bl	80053c8 <LoRa_init>
  result = LoRa_begin(BAND, true, 14, 7, 250E3, 0x4A);
 8004e42:	a141      	add	r1, pc, #260	; (adr r1, 8004f48 <main+0x288>)
 8004e44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e48:	234a      	movs	r3, #74	; 0x4a
 8004e4a:	9304      	str	r3, [sp, #16]
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	4a4a      	ldr	r2, [pc, #296]	; (8004f78 <main+0x2b8>)
 8004e50:	4d4a      	ldr	r5, [pc, #296]	; (8004f7c <main+0x2bc>)
 8004e52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e56:	2307      	movs	r3, #7
 8004e58:	463a      	mov	r2, r7
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	230e      	movs	r3, #14
 8004e5e:	f000 fab9 	bl	80053d4 <LoRa_begin>
 8004e62:	4604      	mov	r4, r0
 8004e64:	7028      	strb	r0, [r5, #0]
  if(result == 0) {
 8004e66:	2800      	cmp	r0, #0
 8004e68:	d031      	beq.n	8004ece <main+0x20e>
  lora_sensor_init(&illumination_sensor, 6 , 0);
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2106      	movs	r1, #6
 8004e6e:	4844      	ldr	r0, [pc, #272]	; (8004f80 <main+0x2c0>)
 8004e70:	f000 fa93 	bl	800539a <lora_sensor_init>
  TSL2561_setTiming_ms (gain, time, & ms);
 8004e74:	4b43      	ldr	r3, [pc, #268]	; (8004f84 <main+0x2c4>)
  rslt = bme280_init(&dev);
 8004e76:	4c44      	ldr	r4, [pc, #272]	; (8004f88 <main+0x2c8>)
  TSL2561_setTiming_ms (gain, time, & ms);
 8004e78:	4a44      	ldr	r2, [pc, #272]	; (8004f8c <main+0x2cc>)
 8004e7a:	2102      	movs	r1, #2
 8004e7c:	7818      	ldrb	r0, [r3, #0]
 8004e7e:	f7ff fd1e 	bl	80048be <TSL2561_setTiming_ms>
  TSL2561_setPowerUp ();
 8004e82:	f7ff fcd3 	bl	800482c <TSL2561_setPowerUp>
  rslt = bme280_init(&dev);
 8004e86:	4620      	mov	r0, r4
 8004e88:	f7ff f899 	bl	8003fbe <bme280_init>
 8004e8c:	4d40      	ldr	r5, [pc, #256]	; (8004f90 <main+0x2d0>)
  dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8004e8e:	4b41      	ldr	r3, [pc, #260]	; (8004f94 <main+0x2d4>)
  rslt = bme280_init(&dev);
 8004e90:	7028      	strb	r0, [r5, #0]
  dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8004e92:	63a3      	str	r3, [r4, #56]	; 0x38
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8004e94:	4621      	mov	r1, r4
 8004e96:	200f      	movs	r0, #15
 8004e98:	f7ff f982 	bl	80041a0 <bme280_set_sensor_settings>
  rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8004e9c:	4621      	mov	r1, r4
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8004e9e:	7028      	strb	r0, [r5, #0]
  rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8004ea0:	2003      	movs	r0, #3
 8004ea2:	f7ff f9b5 	bl	8004210 <bme280_set_sensor_mode>
 8004ea6:	7028      	strb	r0, [r5, #0]
  osKernelInitialize();
 8004ea8:	f002 fe0c 	bl	8007ac4 <osKernelInitialize>
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 8004eac:	4a3a      	ldr	r2, [pc, #232]	; (8004f98 <main+0x2d8>)
 8004eae:	2100      	movs	r1, #0
 8004eb0:	483a      	ldr	r0, [pc, #232]	; (8004f9c <main+0x2dc>)
 8004eb2:	f002 fe43 	bl	8007b3c <osThreadNew>
 8004eb6:	4b3a      	ldr	r3, [pc, #232]	; (8004fa0 <main+0x2e0>)
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8004eb8:	4a3a      	ldr	r2, [pc, #232]	; (8004fa4 <main+0x2e4>)
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 8004eba:	6018      	str	r0, [r3, #0]
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	483a      	ldr	r0, [pc, #232]	; (8004fa8 <main+0x2e8>)
 8004ec0:	f002 fe3c 	bl	8007b3c <osThreadNew>
 8004ec4:	4b39      	ldr	r3, [pc, #228]	; (8004fac <main+0x2ec>)
 8004ec6:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8004ec8:	f002 fe18 	bl	8007afc <osKernelStart>
 8004ecc:	e7fe      	b.n	8004ecc <main+0x20c>
	  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 8004ece:	463a      	mov	r2, r7
 8004ed0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ed4:	481f      	ldr	r0, [pc, #124]	; (8004f54 <main+0x294>)
 8004ed6:	f000 fc7d 	bl	80057d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_SET);
 8004eda:	463a      	mov	r2, r7
 8004edc:	4631      	mov	r1, r6
 8004ede:	481d      	ldr	r0, [pc, #116]	; (8004f54 <main+0x294>)
 8004ee0:	f000 fc78 	bl	80057d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_SET);
 8004ee4:	463a      	mov	r2, r7
 8004ee6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004eea:	481a      	ldr	r0, [pc, #104]	; (8004f54 <main+0x294>)
 8004eec:	f000 fc72 	bl	80057d4 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8004ef0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ef4:	f000 fad6 	bl	80054a4 <HAL_Delay>
	  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_RESET);
 8004ef8:	4622      	mov	r2, r4
 8004efa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004efe:	4815      	ldr	r0, [pc, #84]	; (8004f54 <main+0x294>)
 8004f00:	f000 fc68 	bl	80057d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_RESET);
 8004f04:	4622      	mov	r2, r4
 8004f06:	4631      	mov	r1, r6
 8004f08:	4812      	ldr	r0, [pc, #72]	; (8004f54 <main+0x294>)
 8004f0a:	f000 fc63 	bl	80057d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_RESET);
 8004f0e:	4622      	mov	r2, r4
 8004f10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f14:	480f      	ldr	r0, [pc, #60]	; (8004f54 <main+0x294>)
 8004f16:	f000 fc5d 	bl	80057d4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 8004f1a:	4c0e      	ldr	r4, [pc, #56]	; (8004f54 <main+0x294>)
	  while(result != 0) {
 8004f1c:	782b      	ldrb	r3, [r5, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0a3      	beq.n	8004e6a <main+0x1aa>
		  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 8004f22:	4620      	mov	r0, r4
 8004f24:	2201      	movs	r2, #1
 8004f26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f2a:	f000 fc53 	bl	80057d4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_RESET);
 8004f2e:	4620      	mov	r0, r4
 8004f30:	2200      	movs	r2, #0
 8004f32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f36:	f000 fc4d 	bl	80057d4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_RESET);
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f40:	4620      	mov	r0, r4
 8004f42:	f000 fc47 	bl	80057d4 <HAL_GPIO_WritePin>
 8004f46:	e7e9      	b.n	8004f1c <main+0x25c>
 8004f48:	19d2ded0 	.word	0x19d2ded0
 8004f4c:	00000000 	.word	0x00000000
 8004f50:	40021000 	.word	0x40021000
 8004f54:	40010800 	.word	0x40010800
 8004f58:	40010c00 	.word	0x40010c00
 8004f5c:	10110000 	.word	0x10110000
 8004f60:	20003d08 	.word	0x20003d08
 8004f64:	00061a80 	.word	0x00061a80
 8004f68:	20003dc4 	.word	0x20003dc4
 8004f6c:	40013000 	.word	0x40013000
 8004f70:	20003d64 	.word	0x20003d64
 8004f74:	40000400 	.word	0x40000400
 8004f78:	0003d090 	.word	0x0003d090
 8004f7c:	20003dc0 	.word	0x20003dc0
 8004f80:	20003db4 	.word	0x20003db4
 8004f84:	20001c44 	.word	0x20001c44
 8004f88:	20000018 	.word	0x20000018
 8004f8c:	20001c48 	.word	0x20001c48
 8004f90:	20001c4c 	.word	0x20001c4c
 8004f94:	04010205 	.word	0x04010205
 8004f98:	0800a878 	.word	0x0800a878
 8004f9c:	08004b31 	.word	0x08004b31
 8004fa0:	20003dac 	.word	0x20003dac
 8004fa4:	0800a89c 	.word	0x0800a89c
 8004fa8:	08004c41 	.word	0x08004c41
 8004fac:	20003d04 	.word	0x20003d04
 8004fb0:	40005400 	.word	0x40005400

08004fb4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8004fb4:	6802      	ldr	r2, [r0, #0]
 8004fb6:	4b03      	ldr	r3, [pc, #12]	; (8004fc4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d101      	bne.n	8004fc0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8004fbc:	f000 ba60 	b.w	8005480 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40000800 	.word	0x40000800

08004fc8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004fc8:	4b11      	ldr	r3, [pc, #68]	; (8005010 <HAL_MspInit+0x48>)
{
 8004fca:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004fcc:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004fce:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004fd0:	f042 0201 	orr.w	r2, r2, #1
 8004fd4:	619a      	str	r2, [r3, #24]
 8004fd6:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004fd8:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004fdc:	f002 0201 	and.w	r2, r2, #1
 8004fe0:	9200      	str	r2, [sp, #0]
 8004fe2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fe4:	69da      	ldr	r2, [r3, #28]
 8004fe6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004fea:	61da      	str	r2, [r3, #28]
 8004fec:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004fee:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff4:	9301      	str	r3, [sp, #4]
 8004ff6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004ff8:	f000 fa78 	bl	80054ec <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004ffc:	4a05      	ldr	r2, [pc, #20]	; (8005014 <HAL_MspInit+0x4c>)
 8004ffe:	6853      	ldr	r3, [r2, #4]
 8005000:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005004:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005008:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800500a:	b003      	add	sp, #12
 800500c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005010:	40021000 	.word	0x40021000
 8005014:	40010000 	.word	0x40010000

08005018 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005018:	b510      	push	{r4, lr}
 800501a:	4604      	mov	r4, r0
 800501c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800501e:	2210      	movs	r2, #16
 8005020:	2100      	movs	r1, #0
 8005022:	a802      	add	r0, sp, #8
 8005024:	f005 faec 	bl	800a600 <memset>
  if(hi2c->Instance==I2C1)
 8005028:	6822      	ldr	r2, [r4, #0]
 800502a:	4b1d      	ldr	r3, [pc, #116]	; (80050a0 <HAL_I2C_MspInit+0x88>)
 800502c:	429a      	cmp	r2, r3
 800502e:	d134      	bne.n	800509a <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005030:	4c1c      	ldr	r4, [pc, #112]	; (80050a4 <HAL_I2C_MspInit+0x8c>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005032:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005036:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005038:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800503a:	f043 0308 	orr.w	r3, r3, #8
 800503e:	61a3      	str	r3, [r4, #24]
 8005040:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005042:	4819      	ldr	r0, [pc, #100]	; (80050a8 <HAL_I2C_MspInit+0x90>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005044:	f003 0308 	and.w	r3, r3, #8
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800504c:	2312      	movs	r3, #18
 800504e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005052:	2303      	movs	r3, #3
 8005054:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005056:	f000 fad7 	bl	8005608 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800505a:	4a14      	ldr	r2, [pc, #80]	; (80050ac <HAL_I2C_MspInit+0x94>)

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800505c:	2105      	movs	r1, #5
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800505e:	6853      	ldr	r3, [r2, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8005060:	201f      	movs	r0, #31
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8005062:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005066:	f043 0302 	orr.w	r3, r3, #2
 800506a:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 800506c:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800506e:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005070:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005074:	61e3      	str	r3, [r4, #28]
 8005076:	69e3      	ldr	r3, [r4, #28]
 8005078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800507c:	9301      	str	r3, [sp, #4]
 800507e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8005080:	f000 fa34 	bl	80054ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005084:	201f      	movs	r0, #31
 8005086:	f000 fa65 	bl	8005554 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800508a:	2020      	movs	r0, #32
 800508c:	2200      	movs	r2, #0
 800508e:	2105      	movs	r1, #5
 8005090:	f000 fa2c 	bl	80054ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005094:	2020      	movs	r0, #32
 8005096:	f000 fa5d 	bl	8005554 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800509a:	b006      	add	sp, #24
 800509c:	bd10      	pop	{r4, pc}
 800509e:	bf00      	nop
 80050a0:	40005400 	.word	0x40005400
 80050a4:	40021000 	.word	0x40021000
 80050a8:	40010c00 	.word	0x40010c00
 80050ac:	40010000 	.word	0x40010000

080050b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80050b0:	b510      	push	{r4, lr}
 80050b2:	4604      	mov	r4, r0
 80050b4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050b6:	2210      	movs	r2, #16
 80050b8:	2100      	movs	r1, #0
 80050ba:	a802      	add	r0, sp, #8
 80050bc:	f005 faa0 	bl	800a600 <memset>
  if(hspi->Instance==SPI1)
 80050c0:	6822      	ldr	r2, [r4, #0]
 80050c2:	4b1a      	ldr	r3, [pc, #104]	; (800512c <HAL_SPI_MspInit+0x7c>)
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d12e      	bne.n	8005126 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80050c8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80050cc:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050ce:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80050d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050d4:	619a      	str	r2, [r3, #24]
 80050d6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050d8:	4815      	ldr	r0, [pc, #84]	; (8005130 <HAL_SPI_MspInit+0x80>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80050da:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80050de:	9200      	str	r2, [sp, #0]
 80050e0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050e2:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050e4:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050e6:	f042 0204 	orr.w	r2, r2, #4
 80050ea:	619a      	str	r2, [r3, #24]
 80050ec:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ee:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	9301      	str	r3, [sp, #4]
 80050f6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050f8:	2302      	movs	r3, #2
 80050fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050fe:	2303      	movs	r3, #3
 8005100:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005102:	f000 fa81 	bl	8005608 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005106:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005108:	a902      	add	r1, sp, #8
 800510a:	4809      	ldr	r0, [pc, #36]	; (8005130 <HAL_SPI_MspInit+0x80>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800510c:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005110:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005112:	f000 fa79 	bl	8005608 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8005116:	2023      	movs	r0, #35	; 0x23
 8005118:	4622      	mov	r2, r4
 800511a:	2105      	movs	r1, #5
 800511c:	f000 f9e6 	bl	80054ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005120:	2023      	movs	r0, #35	; 0x23
 8005122:	f000 fa17 	bl	8005554 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005126:	b006      	add	sp, #24
 8005128:	bd10      	pop	{r4, pc}
 800512a:	bf00      	nop
 800512c:	40013000 	.word	0x40013000
 8005130:	40010800 	.word	0x40010800

08005134 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8005134:	6802      	ldr	r2, [r0, #0]
 8005136:	4b08      	ldr	r3, [pc, #32]	; (8005158 <HAL_TIM_Base_MspInit+0x24>)
{
 8005138:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 800513a:	429a      	cmp	r2, r3
 800513c:	d10a      	bne.n	8005154 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800513e:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8005142:	69da      	ldr	r2, [r3, #28]
 8005144:	f042 0202 	orr.w	r2, r2, #2
 8005148:	61da      	str	r2, [r3, #28]
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	9301      	str	r3, [sp, #4]
 8005152:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005154:	b002      	add	sp, #8
 8005156:	4770      	bx	lr
 8005158:	40000400 	.word	0x40000400

0800515c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800515c:	b510      	push	{r4, lr}
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800515e:	4601      	mov	r1, r0
{
 8005160:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8005162:	2200      	movs	r2, #0
 8005164:	201e      	movs	r0, #30
 8005166:	f000 f9c1 	bl	80054ec <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800516a:	201e      	movs	r0, #30
 800516c:	f000 f9f2 	bl	8005554 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8005170:	4b14      	ldr	r3, [pc, #80]	; (80051c4 <HAL_InitTick+0x68>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005172:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM4_CLK_ENABLE();
 8005174:	69da      	ldr	r2, [r3, #28]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005176:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 8005178:	f042 0204 	orr.w	r2, r2, #4
 800517c:	61da      	str	r2, [r3, #28]
 800517e:	69db      	ldr	r3, [r3, #28]
  uwTimclock = HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8005180:	4c11      	ldr	r4, [pc, #68]	; (80051c8 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 8005182:	f003 0304 	and.w	r3, r3, #4
 8005186:	9302      	str	r3, [sp, #8]
 8005188:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800518a:	f002 f827 	bl	80071dc <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800518e:	f002 f815 	bl	80071bc <HAL_RCC_GetPCLK1Freq>
  htim4.Instance = TIM4;
 8005192:	4b0e      	ldr	r3, [pc, #56]	; (80051cc <HAL_InitTick+0x70>)
 8005194:	6023      	str	r3, [r4, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8005196:	f240 33e7 	movw	r3, #999	; 0x3e7
 800519a:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800519c:	4b0c      	ldr	r3, [pc, #48]	; (80051d0 <HAL_InitTick+0x74>)
 800519e:	fbb0 f0f3 	udiv	r0, r0, r3
  htim4.Init.Prescaler = uwPrescalerValue;
  htim4.Init.ClockDivision = 0;
 80051a2:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80051a4:	3801      	subs	r0, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 80051a6:	6060      	str	r0, [r4, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80051a8:	4620      	mov	r0, r4
  htim4.Init.ClockDivision = 0;
 80051aa:	6123      	str	r3, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051ac:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80051ae:	f002 fb8b 	bl	80078c8 <HAL_TIM_Base_Init>
 80051b2:	b920      	cbnz	r0, 80051be <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80051b4:	4620      	mov	r0, r4
 80051b6:	f002 fa7f 	bl	80076b8 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 80051ba:	b008      	add	sp, #32
 80051bc:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80051be:	2001      	movs	r0, #1
 80051c0:	e7fb      	b.n	80051ba <HAL_InitTick+0x5e>
 80051c2:	bf00      	nop
 80051c4:	40021000 	.word	0x40021000
 80051c8:	20003e74 	.word	0x20003e74
 80051cc:	40000800 	.word	0x40000800
 80051d0:	000f4240 	.word	0x000f4240

080051d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051d4:	e7fe      	b.n	80051d4 <NMI_Handler>

080051d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051d6:	e7fe      	b.n	80051d6 <HardFault_Handler>

080051d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051d8:	e7fe      	b.n	80051d8 <MemManage_Handler>

080051da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051da:	e7fe      	b.n	80051da <BusFault_Handler>

080051dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051dc:	e7fe      	b.n	80051dc <UsageFault_Handler>

080051de <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051de:	4770      	bx	lr

080051e0 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80051e0:	2004      	movs	r0, #4
 80051e2:	f000 bafd 	b.w	80057e0 <HAL_GPIO_EXTI_IRQHandler>
	...

080051e8 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80051e8:	4801      	ldr	r0, [pc, #4]	; (80051f0 <TIM4_IRQHandler+0x8>)
 80051ea:	f002 ba93 	b.w	8007714 <HAL_TIM_IRQHandler>
 80051ee:	bf00      	nop
 80051f0:	20003e74 	.word	0x20003e74

080051f4 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80051f4:	4801      	ldr	r0, [pc, #4]	; (80051fc <I2C1_EV_IRQHandler+0x8>)
 80051f6:	f001 b881 	b.w	80062fc <HAL_I2C_EV_IRQHandler>
 80051fa:	bf00      	nop
 80051fc:	20003d08 	.word	0x20003d08

08005200 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005200:	4801      	ldr	r0, [pc, #4]	; (8005208 <I2C1_ER_IRQHandler+0x8>)
 8005202:	f001 bccb 	b.w	8006b9c <HAL_I2C_ER_IRQHandler>
 8005206:	bf00      	nop
 8005208:	20003d08 	.word	0x20003d08

0800520c <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800520c:	4801      	ldr	r0, [pc, #4]	; (8005214 <SPI1_IRQHandler+0x8>)
 800520e:	f002 b9b1 	b.w	8007574 <HAL_SPI_IRQHandler>
 8005212:	bf00      	nop
 8005214:	20003dc4 	.word	0x20003dc4

08005218 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005218:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800521c:	f000 bae0 	b.w	80057e0 <HAL_GPIO_EXTI_IRQHandler>

08005220 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8005220:	2001      	movs	r0, #1
 8005222:	4770      	bx	lr

08005224 <_kill>:

int _kill(int pid, int sig)
{
 8005224:	b508      	push	{r3, lr}
	errno = EINVAL;
 8005226:	f005 f98d 	bl	800a544 <__errno>
 800522a:	2316      	movs	r3, #22
 800522c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800522e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005232:	bd08      	pop	{r3, pc}

08005234 <_exit>:

void _exit (int status)
{
 8005234:	b508      	push	{r3, lr}
	errno = EINVAL;
 8005236:	f005 f985 	bl	800a544 <__errno>
 800523a:	2316      	movs	r3, #22
 800523c:	6003      	str	r3, [r0, #0]
 800523e:	e7fe      	b.n	800523e <_exit+0xa>

08005240 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005240:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <_sbrk+0x30>)
{
 8005242:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8005244:	6819      	ldr	r1, [r3, #0]
{
 8005246:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8005248:	b909      	cbnz	r1, 800524e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800524a:	490a      	ldr	r1, [pc, #40]	; (8005274 <_sbrk+0x34>)
 800524c:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	4909      	ldr	r1, [pc, #36]	; (8005278 <_sbrk+0x38>)
 8005252:	4c0a      	ldr	r4, [pc, #40]	; (800527c <_sbrk+0x3c>)
 8005254:	4402      	add	r2, r0
 8005256:	1b09      	subs	r1, r1, r4
 8005258:	428a      	cmp	r2, r1
 800525a:	d906      	bls.n	800526a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800525c:	f005 f972 	bl	800a544 <__errno>
 8005260:	230c      	movs	r3, #12
 8005262:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8005264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8005268:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800526a:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 800526c:	e7fc      	b.n	8005268 <_sbrk+0x28>
 800526e:	bf00      	nop
 8005270:	20001c50 	.word	0x20001c50
 8005274:	20003f08 	.word	0x20003f08
 8005278:	20005000 	.word	0x20005000
 800527c:	00000400 	.word	0x00000400

08005280 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005280:	4770      	bx	lr
	...

08005284 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005284:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005286:	e003      	b.n	8005290 <LoopCopyDataInit>

08005288 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005288:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800528a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800528c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800528e:	3104      	adds	r1, #4

08005290 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005290:	480a      	ldr	r0, [pc, #40]	; (80052bc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005292:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005294:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005296:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005298:	d3f6      	bcc.n	8005288 <CopyDataInit>
  ldr r2, =_sbss
 800529a:	4a0a      	ldr	r2, [pc, #40]	; (80052c4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800529c:	e002      	b.n	80052a4 <LoopFillZerobss>

0800529e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800529e:	2300      	movs	r3, #0
  str r3, [r2], #4
 80052a0:	f842 3b04 	str.w	r3, [r2], #4

080052a4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80052a4:	4b08      	ldr	r3, [pc, #32]	; (80052c8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80052a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80052a8:	d3f9      	bcc.n	800529e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80052aa:	f7ff ffe9 	bl	8005280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052ae:	f005 f94f 	bl	800a550 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80052b2:	f7ff fd05 	bl	8004cc0 <main>
  bx lr
 80052b6:	4770      	bx	lr
  ldr r3, =_sidata
 80052b8:	0800a968 	.word	0x0800a968
  ldr r0, =_sdata
 80052bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80052c0:	20000100 	.word	0x20000100
  ldr r2, =_sbss
 80052c4:	20000100 	.word	0x20000100
  ldr r3, = _ebss
 80052c8:	20003f04 	.word	0x20003f04

080052cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80052cc:	e7fe      	b.n	80052cc <ADC1_2_IRQHandler>

080052ce <lora_module_send_packet>:
bool lora_module_reciv_regist_packet(struct LoRa_module* module);
bool lora_module_reciv_packet_use_device(struct LoRa_module* module);


void lora_module_send_packet(struct LoRa_module* module) {
	if(module->led)
 80052ce:	7a83      	ldrb	r3, [r0, #10]
void lora_module_send_packet(struct LoRa_module* module) {
 80052d0:	b510      	push	{r4, lr}
 80052d2:	4604      	mov	r4, r0
	if(module->led)
 80052d4:	b11b      	cbz	r3, 80052de <lora_module_send_packet+0x10>
		lora_led_struct_set_OUT(module->packet._len);
 80052d6:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 80052da:	f000 f869 	bl	80053b0 <lora_led_struct_set_OUT>
	LoRa_sender_packet(module->packet._data, module->packet._len, 2000);
 80052de:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80052e2:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 80052e6:	6a20      	ldr	r0, [r4, #32]
 80052e8:	f000 f88c 	bl	8005404 <LoRa_sender_packet>
    ++(module->num_packet);
 80052ec:	8923      	ldrh	r3, [r4, #8]
 80052ee:	3301      	adds	r3, #1
 80052f0:	8123      	strh	r3, [r4, #8]
}
 80052f2:	bd10      	pop	{r4, pc}

080052f4 <lora_module_send_packet_read_data>:
	packet_data_add(&(module->packet), 0x00);
    // отправка пакета
    lora_module_send_packet(module);
}

void lora_module_send_packet_read_data(struct LoRa_module* module) {
 80052f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f6:	4605      	mov	r5, r0
    for(int i = 0; i < module->amt_sensors; ++i) {
 80052f8:	2600      	movs	r6, #0
		packet_set_len(&(module->packet), 14);
 80052fa:	f100 0420 	add.w	r4, r0, #32
    for(int i = 0; i < module->amt_sensors; ++i) {
 80052fe:	7d2b      	ldrb	r3, [r5, #20]
 8005300:	42b3      	cmp	r3, r6
 8005302:	dc00      	bgt.n	8005306 <lora_module_send_packet_read_data+0x12>
    	packet_data_add(&(module->packet), ((data >> 8) & 0xFF));
    	packet_data_add(&(module->packet), (data & 0xFF));
        // отправка пакета
        lora_module_send_packet(module);
    }
}
 8005304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005306:	270c      	movs	r7, #12
		packet_set_len(&(module->packet), 14);
 8005308:	210e      	movs	r1, #14
 800530a:	4620      	mov	r0, r4
 800530c:	f000 f892 	bl	8005434 <packet_set_len>
	    	packet_data_add(&(module->packet), module->esp_adr[i]);
 8005310:	78e9      	ldrb	r1, [r5, #3]
 8005312:	4620      	mov	r0, r4
 8005314:	f000 f89a 	bl	800544c <packet_data_add>
 8005318:	7929      	ldrb	r1, [r5, #4]
 800531a:	4620      	mov	r0, r4
 800531c:	f000 f896 	bl	800544c <packet_data_add>
 8005320:	7969      	ldrb	r1, [r5, #5]
 8005322:	4620      	mov	r0, r4
 8005324:	f000 f892 	bl	800544c <packet_data_add>
	    	packet_data_add(&(module->packet), module->my_adr[i]);
 8005328:	7829      	ldrb	r1, [r5, #0]
 800532a:	4620      	mov	r0, r4
 800532c:	f000 f88e 	bl	800544c <packet_data_add>
 8005330:	7869      	ldrb	r1, [r5, #1]
 8005332:	4620      	mov	r0, r4
 8005334:	f000 f88a 	bl	800544c <packet_data_add>
 8005338:	78a9      	ldrb	r1, [r5, #2]
 800533a:	4620      	mov	r0, r4
 800533c:	f000 f886 	bl	800544c <packet_data_add>
		packet_data_add(&(module->packet), 0x01);
 8005340:	2101      	movs	r1, #1
 8005342:	4620      	mov	r0, r4
 8005344:	f000 f882 	bl	800544c <packet_data_add>
		packet_data_add(&(module->packet), ((module->num_packet >> 8) & 0xFF));
 8005348:	8929      	ldrh	r1, [r5, #8]
 800534a:	4377      	muls	r7, r6
 800534c:	0a09      	lsrs	r1, r1, #8
 800534e:	4620      	mov	r0, r4
 8005350:	f000 f87c 	bl	800544c <packet_data_add>
		packet_data_add(&(module->packet), ((module->num_packet) & 0xFF));
 8005354:	7a29      	ldrb	r1, [r5, #8]
 8005356:	4620      	mov	r0, r4
 8005358:	f000 f878 	bl	800544c <packet_data_add>
		packet_data_add(&(module->packet), (uint8_t)(module->sensors[i].type));
 800535c:	692b      	ldr	r3, [r5, #16]
 800535e:	4620      	mov	r0, r4
 8005360:	5dd9      	ldrb	r1, [r3, r7]
 8005362:	f000 f873 	bl	800544c <packet_data_add>
        uint32_t data = module->sensors[i].data;
 8005366:	692b      	ldr	r3, [r5, #16]
    	packet_data_add(&(module->packet), ((data >> 24) & 0xFF));
 8005368:	4620      	mov	r0, r4
        uint32_t data = module->sensors[i].data;
 800536a:	441f      	add	r7, r3
 800536c:	687f      	ldr	r7, [r7, #4]
    for(int i = 0; i < module->amt_sensors; ++i) {
 800536e:	3601      	adds	r6, #1
    	packet_data_add(&(module->packet), ((data >> 24) & 0xFF));
 8005370:	0e39      	lsrs	r1, r7, #24
 8005372:	f000 f86b 	bl	800544c <packet_data_add>
    	packet_data_add(&(module->packet), ((data >> 16) & 0xFF));
 8005376:	f3c7 4107 	ubfx	r1, r7, #16, #8
 800537a:	4620      	mov	r0, r4
 800537c:	f000 f866 	bl	800544c <packet_data_add>
    	packet_data_add(&(module->packet), ((data >> 8) & 0xFF));
 8005380:	f3c7 2107 	ubfx	r1, r7, #8, #8
 8005384:	4620      	mov	r0, r4
 8005386:	f000 f861 	bl	800544c <packet_data_add>
    	packet_data_add(&(module->packet), (data & 0xFF));
 800538a:	b2f9      	uxtb	r1, r7
 800538c:	4620      	mov	r0, r4
 800538e:	f000 f85d 	bl	800544c <packet_data_add>
        lora_module_send_packet(module);
 8005392:	4628      	mov	r0, r5
 8005394:	f7ff ff9b 	bl	80052ce <lora_module_send_packet>
 8005398:	e7b1      	b.n	80052fe <lora_module_send_packet_read_data+0xa>

0800539a <lora_sensor_init>:
//};

void lora_sensor_init(LoRa_sensor* sensor, enum Type_sensor_t type, uint8_t id) {
	sensor->type = type;
	sensor->id = id;
	sensor->data = 0;
 800539a:	2300      	movs	r3, #0
 800539c:	6043      	str	r3, [r0, #4]
	sensor->idata = 0;
 800539e:	2300      	movs	r3, #0
	sensor->type = type;
 80053a0:	7001      	strb	r1, [r0, #0]
	sensor->id = id;
 80053a2:	7042      	strb	r2, [r0, #1]
	sensor->idata = 0;
 80053a4:	6083      	str	r3, [r0, #8]
}
 80053a6:	4770      	bx	lr

080053a8 <lora_sensor_set_data>:

void lora_sensor_set_data(LoRa_sensor* sensor, float value) {
	sensor->idata = value;
 80053a8:	6081      	str	r1, [r0, #8]
	uint32_t *data = (uint32_t*)(&value);
	sensor->data = *data;
 80053aa:	6041      	str	r1, [r0, #4]
}
 80053ac:	4770      	bx	lr
	...

080053b0 <lora_led_struct_set_OUT>:

void lora_led_struct_set_IN(uint8_t signalIN) {
	LoRa_led_struct.ledIN.time = HAL_GetTick() - LoRa_led_struct.wait_time;
	LoRa_led_struct.ledIN.amt_signal = signalIN;
}
void lora_led_struct_set_OUT(uint8_t signalOUT) {
 80053b0:	b510      	push	{r4, lr}
 80053b2:	4604      	mov	r4, r0
	LoRa_led_struct.ledOUT.time = HAL_GetTick() - LoRa_led_struct.wait_time;
 80053b4:	f000 f870 	bl	8005498 <HAL_GetTick>
 80053b8:	4b02      	ldr	r3, [pc, #8]	; (80053c4 <lora_led_struct_set_OUT+0x14>)
 80053ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	LoRa_led_struct.ledOUT.amt_signal = signalOUT;
 80053bc:	771c      	strb	r4, [r3, #28]
	LoRa_led_struct.ledOUT.time = HAL_GetTick() - LoRa_led_struct.wait_time;
 80053be:	1a80      	subs	r0, r0, r2
 80053c0:	6218      	str	r0, [r3, #32]
}
 80053c2:	bd10      	pop	{r4, pc}
 80053c4:	20003e1c 	.word	0x20003e1c

080053c8 <LoRa_init>:
extern class LoRa_class LoRa;

extern "C" {

void LoRa_init(SPI_HandleTypeDef *spi) {
	return LoRa.init(spi);
 80053c8:	4601      	mov	r1, r0
 80053ca:	4801      	ldr	r0, [pc, #4]	; (80053d0 <LoRa_init+0x8>)
 80053cc:	f7fb bea0 	b.w	8001110 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef>
 80053d0:	20000120 	.word	0x20000120

080053d4 <LoRa_begin>:
	return LoRa.field_get(field, value, read);
}
uint8_t LoRa_field_get(Address_field* fields, uint32_t* values, uint8_t amt, bool read) {
	return LoRa.field_get(fields, values, amt, read);
}
uint8_t LoRa_begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 80053d4:	b530      	push	{r4, r5, lr}
 80053d6:	b089      	sub	sp, #36	; 0x24
	return LoRa.begin(frequency, paboost, signal_power, SF, SBW, sync_word);
 80053d8:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80053dc:	9200      	str	r2, [sp, #0]
 80053de:	9406      	str	r4, [sp, #24]
 80053e0:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 80053e4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80053e8:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 80053ec:	4602      	mov	r2, r0
 80053ee:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80053f2:	4803      	ldr	r0, [pc, #12]	; (8005400 <LoRa_begin+0x2c>)
 80053f4:	460b      	mov	r3, r1
 80053f6:	f7fc f8f7 	bl	80015e8 <_ZN10LoRa_class5beginEybhhyh>
}
 80053fa:	b009      	add	sp, #36	; 0x24
 80053fc:	bd30      	pop	{r4, r5, pc}
 80053fe:	bf00      	nop
 8005400:	20000120 	.word	0x20000120

08005404 <LoRa_sender_packet>:
}
float LoRa_packet_snr() {
	return LoRa.packet_snr();
}
bool LoRa_sender_packet(uint8_t* packet, uint8_t len, uint32_t wait) {
	return LoRa.sender_packet(packet, len, wait);
 8005404:	4613      	mov	r3, r2
 8005406:	460a      	mov	r2, r1
 8005408:	4601      	mov	r1, r0
 800540a:	4801      	ldr	r0, [pc, #4]	; (8005410 <LoRa_sender_packet+0xc>)
 800540c:	f7fc ba9a 	b.w	8001944 <_ZN10LoRa_class13sender_packetEPhhm>
 8005410:	20000120 	.word	0x20000120

08005414 <packet_delete>:
}
bool LoRa_packet_end(uint32_t wait, bool sleep) {
	return LoRa.packet_end(wait, sleep);
}

void packet_delete(struct lora_packet* packet) {
 8005414:	b510      	push	{r4, lr}
 8005416:	4604      	mov	r4, r0
	if(packet->_data != nullptr) {
 8005418:	6800      	ldr	r0, [r0, #0]
 800541a:	b120      	cbz	r0, 8005426 <packet_delete+0x12>
		delete[] packet->_data;
 800541c:	f004 f83c 	bl	8009498 <_ZdaPv>
//		free(packet->_data);
		packet->_data = nullptr;
 8005420:	2300      	movs	r3, #0
 8005422:	6023      	str	r3, [r4, #0]
		packet->_len = 0;
 8005424:	7123      	strb	r3, [r4, #4]
	}
	packet->_rssi = 0;
 8005426:	2300      	movs	r3, #0
	packet->_snr = 0;
 8005428:	2200      	movs	r2, #0
	packet->_rssi = 0;
 800542a:	7163      	strb	r3, [r4, #5]
	packet->_snr = 0;
 800542c:	60a2      	str	r2, [r4, #8]
	packet->_num = 0;
 800542e:	71a3      	strb	r3, [r4, #6]
	packet->_crc_error = false;
 8005430:	7323      	strb	r3, [r4, #12]
}
 8005432:	bd10      	pop	{r4, pc}

08005434 <packet_set_len>:
	packet->_snr = 0;
	packet->_num = 0;
	packet->_crc_error = false;
}

void packet_set_len(struct lora_packet* packet, uint8_t len) {
 8005434:	b538      	push	{r3, r4, r5, lr}
 8005436:	4605      	mov	r5, r0
 8005438:	460c      	mov	r4, r1
	packet_delete(packet);
 800543a:	f7ff ffeb 	bl	8005414 <packet_delete>
	packet->_len = len;
 800543e:	712c      	strb	r4, [r5, #4]
	if(len != 0) {
 8005440:	b11c      	cbz	r4, 800544a <packet_set_len+0x16>
		packet->_data = new uint8_t[len];
 8005442:	4620      	mov	r0, r4
 8005444:	f004 f82a 	bl	800949c <_Znaj>
 8005448:	6028      	str	r0, [r5, #0]
	}
}
 800544a:	bd38      	pop	{r3, r4, r5, pc}

0800544c <packet_data_add>:
	for(int i = 0; i < len; ++i)
		packet->_data[i] = data[i];
}

void packet_data_add(struct lora_packet* packet, uint8_t data_byte) {
	packet->_data[packet->_num] = data_byte;
 800544c:	7983      	ldrb	r3, [r0, #6]
 800544e:	6802      	ldr	r2, [r0, #0]
 8005450:	54d1      	strb	r1, [r2, r3]
	++(packet->_num);
 8005452:	7983      	ldrb	r3, [r0, #6]
 8005454:	3301      	adds	r3, #1
 8005456:	7183      	strb	r3, [r0, #6]
}
 8005458:	4770      	bx	lr
	...

0800545c <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800545c:	4a07      	ldr	r2, [pc, #28]	; (800547c <HAL_Init+0x20>)
{
 800545e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005460:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005462:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005464:	f043 0310 	orr.w	r3, r3, #16
 8005468:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800546a:	f000 f82d 	bl	80054c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800546e:	2000      	movs	r0, #0
 8005470:	f7ff fe74 	bl	800515c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005474:	f7ff fda8 	bl	8004fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8005478:	2000      	movs	r0, #0
 800547a:	bd08      	pop	{r3, pc}
 800547c:	40022000 	.word	0x40022000

08005480 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005480:	4a03      	ldr	r2, [pc, #12]	; (8005490 <HAL_IncTick+0x10>)
 8005482:	4b04      	ldr	r3, [pc, #16]	; (8005494 <HAL_IncTick+0x14>)
 8005484:	6811      	ldr	r1, [r2, #0]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	440b      	add	r3, r1
 800548a:	6013      	str	r3, [r2, #0]
}
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	20003ebc 	.word	0x20003ebc
 8005494:	2000008c 	.word	0x2000008c

08005498 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005498:	4b01      	ldr	r3, [pc, #4]	; (80054a0 <HAL_GetTick+0x8>)
 800549a:	6818      	ldr	r0, [r3, #0]
}
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	20003ebc 	.word	0x20003ebc

080054a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054a4:	b538      	push	{r3, r4, r5, lr}
 80054a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80054a8:	f7ff fff6 	bl	8005498 <HAL_GetTick>
 80054ac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054ae:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80054b0:	bf1e      	ittt	ne
 80054b2:	4b04      	ldrne	r3, [pc, #16]	; (80054c4 <HAL_Delay+0x20>)
 80054b4:	781b      	ldrbne	r3, [r3, #0]
 80054b6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80054b8:	f7ff ffee 	bl	8005498 <HAL_GetTick>
 80054bc:	1b40      	subs	r0, r0, r5
 80054be:	42a0      	cmp	r0, r4
 80054c0:	d3fa      	bcc.n	80054b8 <HAL_Delay+0x14>
  {
  }
}
 80054c2:	bd38      	pop	{r3, r4, r5, pc}
 80054c4:	2000008c 	.word	0x2000008c

080054c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054c8:	4a07      	ldr	r2, [pc, #28]	; (80054e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80054ca:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054cc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80054ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80054d6:	041b      	lsls	r3, r3, #16
 80054d8:	0c1b      	lsrs	r3, r3, #16
 80054da:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80054de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80054e2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80054e4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80054e6:	4770      	bx	lr
 80054e8:	e000ed00 	.word	0xe000ed00

080054ec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054ec:	4b17      	ldr	r3, [pc, #92]	; (800554c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054ee:	b570      	push	{r4, r5, r6, lr}
 80054f0:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054f2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054f6:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054fa:	f1c4 0507 	rsb	r5, r4, #7
 80054fe:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005500:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005504:	bf28      	it	cs
 8005506:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005508:	2b06      	cmp	r3, #6
 800550a:	bf98      	it	ls
 800550c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800550e:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005512:	bf88      	it	hi
 8005514:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005516:	ea21 0303 	bic.w	r3, r1, r3
 800551a:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800551c:	fa06 f404 	lsl.w	r4, r6, r4
 8005520:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8005524:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005526:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800552a:	bfa8      	it	ge
 800552c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8005530:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005534:	bfb8      	it	lt
 8005536:	4a06      	ldrlt	r2, [pc, #24]	; (8005550 <HAL_NVIC_SetPriority+0x64>)
 8005538:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800553a:	bfab      	itete	ge
 800553c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005540:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005544:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005548:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800554a:	bd70      	pop	{r4, r5, r6, pc}
 800554c:	e000ed00 	.word	0xe000ed00
 8005550:	e000ed14 	.word	0xe000ed14

08005554 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005554:	2800      	cmp	r0, #0
 8005556:	db08      	blt.n	800556a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005558:	2301      	movs	r3, #1
 800555a:	0942      	lsrs	r2, r0, #5
 800555c:	f000 001f 	and.w	r0, r0, #31
 8005560:	fa03 f000 	lsl.w	r0, r3, r0
 8005564:	4b01      	ldr	r3, [pc, #4]	; (800556c <HAL_NVIC_EnableIRQ+0x18>)
 8005566:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800556a:	4770      	bx	lr
 800556c:	e000e100 	.word	0xe000e100

08005570 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005570:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8005574:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005576:	2b02      	cmp	r3, #2
 8005578:	d003      	beq.n	8005582 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800557a:	2304      	movs	r3, #4
 800557c:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800557e:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8005580:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005582:	6803      	ldr	r3, [r0, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	f022 020e 	bic.w	r2, r2, #14
 800558a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	f022 0201 	bic.w	r2, r2, #1
 8005592:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005594:	4a18      	ldr	r2, [pc, #96]	; (80055f8 <HAL_DMA_Abort_IT+0x88>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d01f      	beq.n	80055da <HAL_DMA_Abort_IT+0x6a>
 800559a:	3214      	adds	r2, #20
 800559c:	4293      	cmp	r3, r2
 800559e:	d01e      	beq.n	80055de <HAL_DMA_Abort_IT+0x6e>
 80055a0:	3214      	adds	r2, #20
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d01d      	beq.n	80055e2 <HAL_DMA_Abort_IT+0x72>
 80055a6:	3214      	adds	r2, #20
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d01d      	beq.n	80055e8 <HAL_DMA_Abort_IT+0x78>
 80055ac:	3214      	adds	r2, #20
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d01d      	beq.n	80055ee <HAL_DMA_Abort_IT+0x7e>
 80055b2:	3214      	adds	r2, #20
 80055b4:	4293      	cmp	r3, r2
 80055b6:	bf0c      	ite	eq
 80055b8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80055bc:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80055c0:	4a0e      	ldr	r2, [pc, #56]	; (80055fc <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 80055c2:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80055c4:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80055c6:	2301      	movs	r3, #1
 80055c8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 80055cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80055ce:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80055d2:	b17b      	cbz	r3, 80055f4 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 80055d4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80055d6:	4620      	mov	r0, r4
 80055d8:	e7d2      	b.n	8005580 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80055da:	2301      	movs	r3, #1
 80055dc:	e7f0      	b.n	80055c0 <HAL_DMA_Abort_IT+0x50>
 80055de:	2310      	movs	r3, #16
 80055e0:	e7ee      	b.n	80055c0 <HAL_DMA_Abort_IT+0x50>
 80055e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055e6:	e7eb      	b.n	80055c0 <HAL_DMA_Abort_IT+0x50>
 80055e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055ec:	e7e8      	b.n	80055c0 <HAL_DMA_Abort_IT+0x50>
 80055ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055f2:	e7e5      	b.n	80055c0 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80055f4:	4618      	mov	r0, r3
 80055f6:	e7c3      	b.n	8005580 <HAL_DMA_Abort_IT+0x10>
 80055f8:	40020008 	.word	0x40020008
 80055fc:	40020000 	.word	0x40020000

08005600 <HAL_DMA_GetState>:
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
}
 8005600:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 8005604:	4770      	bx	lr
	...

08005608 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005608:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800560c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800560e:	4626      	mov	r6, r4
 8005610:	4b65      	ldr	r3, [pc, #404]	; (80057a8 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005612:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80057b8 <HAL_GPIO_Init+0x1b0>
 8005616:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80057bc <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800561a:	680a      	ldr	r2, [r1, #0]
 800561c:	fa32 f506 	lsrs.w	r5, r2, r6
 8005620:	d102      	bne.n	8005628 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8005622:	b003      	add	sp, #12
 8005624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8005628:	f04f 0801 	mov.w	r8, #1
 800562c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005630:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8005634:	4590      	cmp	r8, r2
 8005636:	d17e      	bne.n	8005736 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8005638:	684d      	ldr	r5, [r1, #4]
 800563a:	2d12      	cmp	r5, #18
 800563c:	f000 80a9 	beq.w	8005792 <HAL_GPIO_Init+0x18a>
 8005640:	f200 8082 	bhi.w	8005748 <HAL_GPIO_Init+0x140>
 8005644:	2d02      	cmp	r5, #2
 8005646:	f000 80a1 	beq.w	800578c <HAL_GPIO_Init+0x184>
 800564a:	d876      	bhi.n	800573a <HAL_GPIO_Init+0x132>
 800564c:	2d00      	cmp	r5, #0
 800564e:	f000 8088 	beq.w	8005762 <HAL_GPIO_Init+0x15a>
 8005652:	2d01      	cmp	r5, #1
 8005654:	f000 8098 	beq.w	8005788 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005658:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800565c:	2aff      	cmp	r2, #255	; 0xff
 800565e:	bf93      	iteet	ls
 8005660:	4682      	movls	sl, r0
 8005662:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8005666:	3d08      	subhi	r5, #8
 8005668:	f8d0 b000 	ldrls.w	fp, [r0]
 800566c:	bf92      	itee	ls
 800566e:	00b5      	lslls	r5, r6, #2
 8005670:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8005674:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005676:	fa09 f805 	lsl.w	r8, r9, r5
 800567a:	ea2b 0808 	bic.w	r8, fp, r8
 800567e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005682:	bf88      	it	hi
 8005684:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005688:	ea48 0505 	orr.w	r5, r8, r5
 800568c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005690:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8005694:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8005698:	d04d      	beq.n	8005736 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800569a:	4f44      	ldr	r7, [pc, #272]	; (80057ac <HAL_GPIO_Init+0x1a4>)
 800569c:	f026 0803 	bic.w	r8, r6, #3
 80056a0:	69bd      	ldr	r5, [r7, #24]
 80056a2:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80056a6:	f045 0501 	orr.w	r5, r5, #1
 80056aa:	61bd      	str	r5, [r7, #24]
 80056ac:	69bd      	ldr	r5, [r7, #24]
 80056ae:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80056b2:	f005 0501 	and.w	r5, r5, #1
 80056b6:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80056b8:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80056bc:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80056be:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80056c2:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80056c6:	fa09 f90b 	lsl.w	r9, r9, fp
 80056ca:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80056ce:	4d38      	ldr	r5, [pc, #224]	; (80057b0 <HAL_GPIO_Init+0x1a8>)
 80056d0:	42a8      	cmp	r0, r5
 80056d2:	d063      	beq.n	800579c <HAL_GPIO_Init+0x194>
 80056d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80056d8:	42a8      	cmp	r0, r5
 80056da:	d061      	beq.n	80057a0 <HAL_GPIO_Init+0x198>
 80056dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80056e0:	42a8      	cmp	r0, r5
 80056e2:	d05f      	beq.n	80057a4 <HAL_GPIO_Init+0x19c>
 80056e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80056e8:	42a8      	cmp	r0, r5
 80056ea:	bf0c      	ite	eq
 80056ec:	2503      	moveq	r5, #3
 80056ee:	2504      	movne	r5, #4
 80056f0:	fa05 f50b 	lsl.w	r5, r5, fp
 80056f4:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80056f8:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80056fc:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80056fe:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8005702:	bf14      	ite	ne
 8005704:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005706:	4395      	biceq	r5, r2
 8005708:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800570a:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800570c:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8005710:	bf14      	ite	ne
 8005712:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005714:	4395      	biceq	r5, r2
 8005716:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8005718:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800571a:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800571e:	bf14      	ite	ne
 8005720:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005722:	4395      	biceq	r5, r2
 8005724:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8005726:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005728:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800572c:	bf14      	ite	ne
 800572e:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005730:	ea25 0202 	biceq.w	r2, r5, r2
 8005734:	60da      	str	r2, [r3, #12]
	position++;
 8005736:	3601      	adds	r6, #1
 8005738:	e76f      	b.n	800561a <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 800573a:	2d03      	cmp	r5, #3
 800573c:	d022      	beq.n	8005784 <HAL_GPIO_Init+0x17c>
 800573e:	2d11      	cmp	r5, #17
 8005740:	d18a      	bne.n	8005658 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005742:	68cc      	ldr	r4, [r1, #12]
 8005744:	3404      	adds	r4, #4
          break;
 8005746:	e787      	b.n	8005658 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8005748:	4f1a      	ldr	r7, [pc, #104]	; (80057b4 <HAL_GPIO_Init+0x1ac>)
 800574a:	42bd      	cmp	r5, r7
 800574c:	d009      	beq.n	8005762 <HAL_GPIO_Init+0x15a>
 800574e:	d812      	bhi.n	8005776 <HAL_GPIO_Init+0x16e>
 8005750:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80057c0 <HAL_GPIO_Init+0x1b8>
 8005754:	454d      	cmp	r5, r9
 8005756:	d004      	beq.n	8005762 <HAL_GPIO_Init+0x15a>
 8005758:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800575c:	454d      	cmp	r5, r9
 800575e:	f47f af7b 	bne.w	8005658 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005762:	688c      	ldr	r4, [r1, #8]
 8005764:	b1c4      	cbz	r4, 8005798 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005766:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8005768:	bf0c      	ite	eq
 800576a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800576e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005772:	2408      	movs	r4, #8
 8005774:	e770      	b.n	8005658 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8005776:	4565      	cmp	r5, ip
 8005778:	d0f3      	beq.n	8005762 <HAL_GPIO_Init+0x15a>
 800577a:	4575      	cmp	r5, lr
 800577c:	d0f1      	beq.n	8005762 <HAL_GPIO_Init+0x15a>
 800577e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80057c4 <HAL_GPIO_Init+0x1bc>
 8005782:	e7eb      	b.n	800575c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005784:	2400      	movs	r4, #0
 8005786:	e767      	b.n	8005658 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005788:	68cc      	ldr	r4, [r1, #12]
          break;
 800578a:	e765      	b.n	8005658 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800578c:	68cc      	ldr	r4, [r1, #12]
 800578e:	3408      	adds	r4, #8
          break;
 8005790:	e762      	b.n	8005658 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005792:	68cc      	ldr	r4, [r1, #12]
 8005794:	340c      	adds	r4, #12
          break;
 8005796:	e75f      	b.n	8005658 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005798:	2404      	movs	r4, #4
 800579a:	e75d      	b.n	8005658 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800579c:	2500      	movs	r5, #0
 800579e:	e7a7      	b.n	80056f0 <HAL_GPIO_Init+0xe8>
 80057a0:	2501      	movs	r5, #1
 80057a2:	e7a5      	b.n	80056f0 <HAL_GPIO_Init+0xe8>
 80057a4:	2502      	movs	r5, #2
 80057a6:	e7a3      	b.n	80056f0 <HAL_GPIO_Init+0xe8>
 80057a8:	40010400 	.word	0x40010400
 80057ac:	40021000 	.word	0x40021000
 80057b0:	40010800 	.word	0x40010800
 80057b4:	10210000 	.word	0x10210000
 80057b8:	10310000 	.word	0x10310000
 80057bc:	10320000 	.word	0x10320000
 80057c0:	10110000 	.word	0x10110000
 80057c4:	10220000 	.word	0x10220000

080057c8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80057c8:	6883      	ldr	r3, [r0, #8]
 80057ca:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80057cc:	bf14      	ite	ne
 80057ce:	2001      	movne	r0, #1
 80057d0:	2000      	moveq	r0, #0
 80057d2:	4770      	bx	lr

080057d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057d4:	b10a      	cbz	r2, 80057da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80057d6:	6101      	str	r1, [r0, #16]
  }
}
 80057d8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80057da:	0409      	lsls	r1, r1, #16
 80057dc:	e7fb      	b.n	80057d6 <HAL_GPIO_WritePin+0x2>

080057de <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80057de:	4770      	bx	lr

080057e0 <HAL_GPIO_EXTI_IRQHandler>:
{
 80057e0:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80057e2:	4b04      	ldr	r3, [pc, #16]	; (80057f4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80057e4:	6959      	ldr	r1, [r3, #20]
 80057e6:	4201      	tst	r1, r0
 80057e8:	d002      	beq.n	80057f0 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057ea:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057ec:	f7ff fff7 	bl	80057de <HAL_GPIO_EXTI_Callback>
}
 80057f0:	bd08      	pop	{r3, pc}
 80057f2:	bf00      	nop
 80057f4:	40010400 	.word	0x40010400

080057f8 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057f8:	6801      	ldr	r1, [r0, #0]
 80057fa:	2200      	movs	r2, #0
 80057fc:	694b      	ldr	r3, [r1, #20]
 80057fe:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8005802:	d010      	beq.n	8005826 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005804:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8005808:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 800580a:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800580c:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800580e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005812:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005816:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005818:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800581c:	f043 0304 	orr.w	r3, r3, #4
 8005820:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8005822:	2001      	movs	r0, #1
 8005824:	4770      	bx	lr
  }
  return HAL_OK;
 8005826:	4618      	mov	r0, r3
}
 8005828:	4770      	bx	lr

0800582a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800582a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800582e:	4604      	mov	r4, r0
 8005830:	4616      	mov	r6, r2
 8005832:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005834:	b28f      	uxth	r7, r1
 8005836:	6825      	ldr	r5, [r4, #0]
 8005838:	6968      	ldr	r0, [r5, #20]
 800583a:	ea37 0000 	bics.w	r0, r7, r0
 800583e:	d017      	beq.n	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005840:	696b      	ldr	r3, [r5, #20]
 8005842:	055a      	lsls	r2, r3, #21
 8005844:	d516      	bpl.n	8005874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005846:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8005848:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800584a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800584e:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005850:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8005854:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005856:	2300      	movs	r3, #0
 8005858:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800585a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800585e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005862:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005864:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 8005868:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800586a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800586c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8005874:	1c73      	adds	r3, r6, #1
 8005876:	d0df      	beq.n	8005838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005878:	f7ff fe0e 	bl	8005498 <HAL_GetTick>
 800587c:	eba0 0008 	sub.w	r0, r0, r8
 8005880:	42b0      	cmp	r0, r6
 8005882:	d801      	bhi.n	8005888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 8005884:	2e00      	cmp	r6, #0
 8005886:	d1d6      	bne.n	8005836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005888:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800588a:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800588c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800588e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005892:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005896:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005898:	f042 0220 	orr.w	r2, r2, #32
 800589c:	e7e4      	b.n	8005868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

0800589e <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800589e:	b570      	push	{r4, r5, r6, lr}
 80058a0:	4604      	mov	r4, r0
 80058a2:	460d      	mov	r5, r1
 80058a4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	075b      	lsls	r3, r3, #29
 80058ac:	d501      	bpl.n	80058b2 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80058ae:	2000      	movs	r0, #0
}
 80058b0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058b2:	4620      	mov	r0, r4
 80058b4:	f7ff ffa0 	bl	80057f8 <I2C_IsAcknowledgeFailed>
 80058b8:	b9a8      	cbnz	r0, 80058e6 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80058ba:	1c6a      	adds	r2, r5, #1
 80058bc:	d0f3      	beq.n	80058a6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058be:	f7ff fdeb 	bl	8005498 <HAL_GetTick>
 80058c2:	1b80      	subs	r0, r0, r6
 80058c4:	42a8      	cmp	r0, r5
 80058c6:	d801      	bhi.n	80058cc <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80058c8:	2d00      	cmp	r5, #0
 80058ca:	d1ec      	bne.n	80058a6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80058cc:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80058ce:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80058d0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80058d2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80058d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80058da:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80058dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80058e0:	f042 0220 	orr.w	r2, r2, #32
 80058e4:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80058e6:	2001      	movs	r0, #1
 80058e8:	e7e2      	b.n	80058b0 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080058ea <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80058ea:	b570      	push	{r4, r5, r6, lr}
 80058ec:	4604      	mov	r4, r0
 80058ee:	460d      	mov	r5, r1
 80058f0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058f2:	6820      	ldr	r0, [r4, #0]
 80058f4:	6943      	ldr	r3, [r0, #20]
 80058f6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80058fa:	d001      	beq.n	8005900 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80058fc:	2000      	movs	r0, #0
 80058fe:	e010      	b.n	8005922 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005900:	6942      	ldr	r2, [r0, #20]
 8005902:	06d2      	lsls	r2, r2, #27
 8005904:	d50e      	bpl.n	8005924 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005906:	f06f 0210 	mvn.w	r2, #16
 800590a:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800590c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800590e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005910:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005914:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005918:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800591a:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800591c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800591e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005922:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005924:	f7ff fdb8 	bl	8005498 <HAL_GetTick>
 8005928:	1b80      	subs	r0, r0, r6
 800592a:	42a8      	cmp	r0, r5
 800592c:	d801      	bhi.n	8005932 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 800592e:	2d00      	cmp	r5, #0
 8005930:	d1df      	bne.n	80058f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005932:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005934:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005936:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005938:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800593c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005940:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005942:	f042 0220 	orr.w	r2, r2, #32
 8005946:	e7e8      	b.n	800591a <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08005948 <I2C_WaitOnFlagUntilTimeout>:
{
 8005948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800594c:	4604      	mov	r4, r0
 800594e:	4690      	mov	r8, r2
 8005950:	461f      	mov	r7, r3
 8005952:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005954:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8005958:	b28d      	uxth	r5, r1
 800595a:	6821      	ldr	r1, [r4, #0]
 800595c:	f1b9 0f01 	cmp.w	r9, #1
 8005960:	bf0c      	ite	eq
 8005962:	694b      	ldreq	r3, [r1, #20]
 8005964:	698b      	ldrne	r3, [r1, #24]
 8005966:	ea35 0303 	bics.w	r3, r5, r3
 800596a:	bf0c      	ite	eq
 800596c:	2301      	moveq	r3, #1
 800596e:	2300      	movne	r3, #0
 8005970:	4598      	cmp	r8, r3
 8005972:	d001      	beq.n	8005978 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8005974:	2000      	movs	r0, #0
 8005976:	e016      	b.n	80059a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8005978:	1c7b      	adds	r3, r7, #1
 800597a:	d0ef      	beq.n	800595c <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597c:	f7ff fd8c 	bl	8005498 <HAL_GetTick>
 8005980:	1b80      	subs	r0, r0, r6
 8005982:	42b8      	cmp	r0, r7
 8005984:	d801      	bhi.n	800598a <I2C_WaitOnFlagUntilTimeout+0x42>
 8005986:	2f00      	cmp	r7, #0
 8005988:	d1e7      	bne.n	800595a <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800598a:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800598c:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 800598e:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005990:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005992:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005996:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800599a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800599c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059a0:	f042 0220 	orr.w	r2, r2, #32
 80059a4:	6422      	str	r2, [r4, #64]	; 0x40
}
 80059a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080059aa <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80059aa:	b570      	push	{r4, r5, r6, lr}
 80059ac:	4604      	mov	r4, r0
 80059ae:	460d      	mov	r5, r1
 80059b0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	061b      	lsls	r3, r3, #24
 80059b8:	d501      	bpl.n	80059be <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80059ba:	2000      	movs	r0, #0
}
 80059bc:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059be:	4620      	mov	r0, r4
 80059c0:	f7ff ff1a 	bl	80057f8 <I2C_IsAcknowledgeFailed>
 80059c4:	b9a8      	cbnz	r0, 80059f2 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80059c6:	1c6a      	adds	r2, r5, #1
 80059c8:	d0f3      	beq.n	80059b2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ca:	f7ff fd65 	bl	8005498 <HAL_GetTick>
 80059ce:	1b80      	subs	r0, r0, r6
 80059d0:	42a8      	cmp	r0, r5
 80059d2:	d801      	bhi.n	80059d8 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80059d4:	2d00      	cmp	r5, #0
 80059d6:	d1ec      	bne.n	80059b2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80059d8:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80059da:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80059dc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80059de:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059e2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80059e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059ec:	f042 0220 	orr.w	r2, r2, #32
 80059f0:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80059f2:	2001      	movs	r0, #1
 80059f4:	e7e2      	b.n	80059bc <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

080059f8 <HAL_I2C_Init>:
{
 80059f8:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80059fa:	4604      	mov	r4, r0
 80059fc:	b908      	cbnz	r0, 8005a02 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80059fe:	2001      	movs	r0, #1
}
 8005a00:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a02:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005a06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005a0a:	b91b      	cbnz	r3, 8005a14 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8005a0c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8005a10:	f7ff fb02 	bl	8005018 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a14:	2324      	movs	r3, #36	; 0x24
 8005a16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8005a1a:	6823      	ldr	r3, [r4, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	f022 0201 	bic.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a32:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a34:	f001 fbc2 	bl	80071bc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a38:	6863      	ldr	r3, [r4, #4]
 8005a3a:	4a41      	ldr	r2, [pc, #260]	; (8005b40 <HAL_I2C_Init+0x148>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d84d      	bhi.n	8005adc <HAL_I2C_Init+0xe4>
 8005a40:	4a40      	ldr	r2, [pc, #256]	; (8005b44 <HAL_I2C_Init+0x14c>)
 8005a42:	4290      	cmp	r0, r2
 8005a44:	d9db      	bls.n	80059fe <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8005a46:	4940      	ldr	r1, [pc, #256]	; (8005b48 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a48:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8005a4a:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a4e:	6855      	ldr	r5, [r2, #4]
 8005a50:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8005a54:	430d      	orrs	r5, r1
 8005a56:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a58:	6a15      	ldr	r5, [r2, #32]
 8005a5a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8005a5e:	3101      	adds	r1, #1
 8005a60:	4329      	orrs	r1, r5
 8005a62:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a64:	69d1      	ldr	r1, [r2, #28]
 8005a66:	4d36      	ldr	r5, [pc, #216]	; (8005b40 <HAL_I2C_Init+0x148>)
 8005a68:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8005a6c:	42ab      	cmp	r3, r5
 8005a6e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005a72:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8005a76:	d848      	bhi.n	8005b0a <HAL_I2C_Init+0x112>
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	fbb0 f0f3 	udiv	r0, r0, r3
 8005a7e:	1c43      	adds	r3, r0, #1
 8005a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	bf38      	it	cc
 8005a88:	2304      	movcc	r3, #4
 8005a8a:	430b      	orrs	r3, r1
 8005a8c:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a8e:	6811      	ldr	r1, [r2, #0]
 8005a90:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8005a94:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8005a98:	4303      	orrs	r3, r0
 8005a9a:	430b      	orrs	r3, r1
 8005a9c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a9e:	6891      	ldr	r1, [r2, #8]
 8005aa0:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8005aa4:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8005aa8:	4303      	orrs	r3, r0
 8005aaa:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005aae:	430b      	orrs	r3, r1
 8005ab0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ab2:	68d1      	ldr	r1, [r2, #12]
 8005ab4:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8005ab8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005abc:	4303      	orrs	r3, r0
 8005abe:	430b      	orrs	r3, r1
 8005ac0:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8005ac2:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ac4:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8005ac6:	f043 0301 	orr.w	r3, r3, #1
 8005aca:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8005acc:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ace:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ad0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ad4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ad6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8005ada:	e791      	b.n	8005a00 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005adc:	4a1b      	ldr	r2, [pc, #108]	; (8005b4c <HAL_I2C_Init+0x154>)
 8005ade:	4290      	cmp	r0, r2
 8005ae0:	d98d      	bls.n	80059fe <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8005ae2:	4e19      	ldr	r6, [pc, #100]	; (8005b48 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005ae4:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8005ae8:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005aec:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005aee:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005af0:	6855      	ldr	r5, [r2, #4]
 8005af2:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8005af6:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005af8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005afc:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005afe:	6a15      	ldr	r5, [r2, #32]
 8005b00:	fbb1 f1f6 	udiv	r1, r1, r6
 8005b04:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8005b08:	e7a9      	b.n	8005a5e <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b0a:	68a5      	ldr	r5, [r4, #8]
 8005b0c:	b955      	cbnz	r5, 8005b24 <HAL_I2C_Init+0x12c>
 8005b0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005b12:	fbb0 f0f3 	udiv	r0, r0, r3
 8005b16:	1c43      	adds	r3, r0, #1
 8005b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b1c:	b16b      	cbz	r3, 8005b3a <HAL_I2C_Init+0x142>
 8005b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b22:	e7b2      	b.n	8005a8a <HAL_I2C_Init+0x92>
 8005b24:	2519      	movs	r5, #25
 8005b26:	436b      	muls	r3, r5
 8005b28:	fbb0 f0f3 	udiv	r0, r0, r3
 8005b2c:	1c43      	adds	r3, r0, #1
 8005b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b32:	b113      	cbz	r3, 8005b3a <HAL_I2C_Init+0x142>
 8005b34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b38:	e7a7      	b.n	8005a8a <HAL_I2C_Init+0x92>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e7a5      	b.n	8005a8a <HAL_I2C_Init+0x92>
 8005b3e:	bf00      	nop
 8005b40:	000186a0 	.word	0x000186a0
 8005b44:	001e847f 	.word	0x001e847f
 8005b48:	000f4240 	.word	0x000f4240
 8005b4c:	003d08ff 	.word	0x003d08ff

08005b50 <HAL_I2C_Master_Transmit>:
{
 8005b50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005b54:	4604      	mov	r4, r0
 8005b56:	461f      	mov	r7, r3
 8005b58:	460d      	mov	r5, r1
 8005b5a:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8005b5c:	f7ff fc9c 	bl	8005498 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b60:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8005b64:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b66:	2b20      	cmp	r3, #32
 8005b68:	d004      	beq.n	8005b74 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8005b6a:	2502      	movs	r5, #2
}
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	b004      	add	sp, #16
 8005b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b74:	9000      	str	r0, [sp, #0]
 8005b76:	2319      	movs	r3, #25
 8005b78:	2201      	movs	r2, #1
 8005b7a:	495b      	ldr	r1, [pc, #364]	; (8005ce8 <HAL_I2C_Master_Transmit+0x198>)
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	f7ff fee3 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d1f1      	bne.n	8005b6a <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8005b86:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d0ed      	beq.n	8005b6a <HAL_I2C_Master_Transmit+0x1a>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8005b9a:	bf5e      	ittt	pl
 8005b9c:	681a      	ldrpl	r2, [r3, #0]
 8005b9e:	f042 0201 	orrpl.w	r2, r2, #1
 8005ba2:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005baa:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005bac:	2221      	movs	r2, #33	; 0x21
 8005bae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005bb2:	2210      	movs	r2, #16
 8005bb4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005bb8:	2200      	movs	r2, #0
 8005bba:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8005bbc:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bbe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8005bc0:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8005bc4:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bc6:	4a49      	ldr	r2, [pc, #292]	; (8005cec <HAL_I2C_Master_Transmit+0x19c>)
 8005bc8:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005bca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005bcc:	2a08      	cmp	r2, #8
 8005bce:	d004      	beq.n	8005bda <HAL_I2C_Master_Transmit+0x8a>
 8005bd0:	2a01      	cmp	r2, #1
 8005bd2:	d002      	beq.n	8005bda <HAL_I2C_Master_Transmit+0x8a>
 8005bd4:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8005bd8:	d104      	bne.n	8005be4 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	e002      	b.n	8005bea <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005be4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005be6:	2a12      	cmp	r2, #18
 8005be8:	d0f7      	beq.n	8005bda <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bea:	2200      	movs	r2, #0
 8005bec:	9600      	str	r6, [sp, #0]
 8005bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bf0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	f7ff fea7 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 8005bfa:	6822      	ldr	r2, [r4, #0]
 8005bfc:	b138      	cbz	r0, 8005c0e <HAL_I2C_Master_Transmit+0xbe>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bfe:	6813      	ldr	r3, [r2, #0]
 8005c00:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c02:	bf44      	itt	mi
 8005c04:	f44f 7300 	movmi.w	r3, #512	; 0x200
 8005c08:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005c0a:	2501      	movs	r5, #1
 8005c0c:	e7ae      	b.n	8005b6c <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c0e:	6923      	ldr	r3, [r4, #16]
 8005c10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c14:	d121      	bne.n	8005c5a <HAL_I2C_Master_Transmit+0x10a>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c16:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8005c1a:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c1c:	4633      	mov	r3, r6
 8005c1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c20:	4933      	ldr	r1, [pc, #204]	; (8005cf0 <HAL_I2C_Master_Transmit+0x1a0>)
 8005c22:	4620      	mov	r0, r4
 8005c24:	f7ff fe01 	bl	800582a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c28:	4605      	mov	r5, r0
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	d1ed      	bne.n	8005c0a <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	9003      	str	r0, [sp, #12]
 8005c32:	695a      	ldr	r2, [r3, #20]
 8005c34:	9203      	str	r2, [sp, #12]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	9303      	str	r3, [sp, #12]
 8005c3a:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8005c3c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005c3e:	b9f3      	cbnz	r3, 8005c7e <HAL_I2C_Master_Transmit+0x12e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c40:	6821      	ldr	r1, [r4, #0]
 8005c42:	680a      	ldr	r2, [r1, #0]
 8005c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c48:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005c4a:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8005c4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8005c50:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c54:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8005c58:	e788      	b.n	8005b6c <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c5a:	11eb      	asrs	r3, r5, #7
 8005c5c:	f003 0306 	and.w	r3, r3, #6
 8005c60:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8005c64:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c66:	4923      	ldr	r1, [pc, #140]	; (8005cf4 <HAL_I2C_Master_Transmit+0x1a4>)
 8005c68:	4633      	mov	r3, r6
 8005c6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f7ff fddc 	bl	800582a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d1c9      	bne.n	8005c0a <HAL_I2C_Master_Transmit+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	b2ed      	uxtb	r5, r5
 8005c7a:	611d      	str	r5, [r3, #16]
 8005c7c:	e7ce      	b.n	8005c1c <HAL_I2C_Master_Transmit+0xcc>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c7e:	4632      	mov	r2, r6
 8005c80:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c82:	4620      	mov	r0, r4
 8005c84:	f7ff fe91 	bl	80059aa <I2C_WaitOnTXEFlagUntilTimeout>
 8005c88:	b140      	cbz	r0, 8005c9c <HAL_I2C_Master_Transmit+0x14c>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d1bc      	bne.n	8005c0a <HAL_I2C_Master_Transmit+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c90:	6822      	ldr	r2, [r4, #0]
 8005c92:	6813      	ldr	r3, [r2, #0]
 8005c94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	e7b6      	b.n	8005c0a <HAL_I2C_Master_Transmit+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c9e:	6820      	ldr	r0, [r4, #0]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005ca6:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8005ca8:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005caa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005cac:	3a01      	subs	r2, #1
 8005cae:	b292      	uxth	r2, r2
 8005cb0:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005cb2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005cb4:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8005cb6:	1e51      	subs	r1, r2, #1
 8005cb8:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005cba:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8005cbc:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005cbe:	d50a      	bpl.n	8005cd6 <HAL_I2C_Master_Transmit+0x186>
 8005cc0:	b149      	cbz	r1, 8005cd6 <HAL_I2C_Master_Transmit+0x186>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cc2:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 8005cc4:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cc6:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8005cc8:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8005cca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8005ccc:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8005cd4:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cd6:	4632      	mov	r2, r6
 8005cd8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005cda:	4620      	mov	r0, r4
 8005cdc:	f7ff fddf 	bl	800589e <I2C_WaitOnBTFFlagUntilTimeout>
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d0ab      	beq.n	8005c3c <HAL_I2C_Master_Transmit+0xec>
 8005ce4:	e7d1      	b.n	8005c8a <HAL_I2C_Master_Transmit+0x13a>
 8005ce6:	bf00      	nop
 8005ce8:	00100002 	.word	0x00100002
 8005cec:	ffff0000 	.word	0xffff0000
 8005cf0:	00010002 	.word	0x00010002
 8005cf4:	00010008 	.word	0x00010008

08005cf8 <HAL_I2C_Master_Receive>:
{
 8005cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cfc:	461f      	mov	r7, r3
  __IO uint32_t count = 0U;
 8005cfe:	2300      	movs	r3, #0
{
 8005d00:	4604      	mov	r4, r0
 8005d02:	b088      	sub	sp, #32
  __IO uint32_t count = 0U;
 8005d04:	9302      	str	r3, [sp, #8]
{
 8005d06:	460d      	mov	r5, r1
 8005d08:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8005d0a:	f7ff fbc5 	bl	8005498 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d0e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8005d12:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d14:	2b20      	cmp	r3, #32
 8005d16:	d004      	beq.n	8005d22 <HAL_I2C_Master_Receive+0x2a>
    return HAL_BUSY;
 8005d18:	2502      	movs	r5, #2
}
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	b008      	add	sp, #32
 8005d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d22:	9000      	str	r0, [sp, #0]
 8005d24:	2319      	movs	r3, #25
 8005d26:	2201      	movs	r2, #1
 8005d28:	498d      	ldr	r1, [pc, #564]	; (8005f60 <HAL_I2C_Master_Receive+0x268>)
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	f7ff fe0c 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 8005d30:	2800      	cmp	r0, #0
 8005d32:	d1f1      	bne.n	8005d18 <HAL_I2C_Master_Receive+0x20>
    __HAL_LOCK(hi2c);
 8005d34:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d0ed      	beq.n	8005d18 <HAL_I2C_Master_Receive+0x20>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8005d48:	bf5e      	ittt	pl
 8005d4a:	681a      	ldrpl	r2, [r3, #0]
 8005d4c:	f042 0201 	orrpl.w	r2, r2, #1
 8005d50:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d58:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005d5a:	2222      	movs	r2, #34	; 0x22
 8005d5c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005d60:	2210      	movs	r2, #16
 8005d62:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005d66:	2200      	movs	r2, #0
 8005d68:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8005d6a:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d6c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8005d6e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8005d72:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d74:	4a7b      	ldr	r2, [pc, #492]	; (8005f64 <HAL_I2C_Master_Receive+0x26c>)
 8005d76:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d7a:	6819      	ldr	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d7c:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d7e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8005d82:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d84:	d004      	beq.n	8005d90 <HAL_I2C_Master_Receive+0x98>
 8005d86:	2a01      	cmp	r2, #1
 8005d88:	d002      	beq.n	8005d90 <HAL_I2C_Master_Receive+0x98>
 8005d8a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8005d8e:	d104      	bne.n	8005d9a <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	e002      	b.n	8005da0 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005d9a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005d9c:	2a11      	cmp	r2, #17
 8005d9e:	d0f7      	beq.n	8005d90 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005da0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005da2:	9600      	str	r6, [sp, #0]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005daa:	4620      	mov	r0, r4
 8005dac:	f7ff fdcc 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	b138      	cbz	r0, 8005dc4 <HAL_I2C_Master_Receive+0xcc>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	05dd      	lsls	r5, r3, #23
 8005db8:	d502      	bpl.n	8005dc0 <HAL_I2C_Master_Receive+0xc8>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dbe:	6423      	str	r3, [r4, #64]	; 0x40
              return HAL_ERROR;
 8005dc0:	2501      	movs	r5, #1
 8005dc2:	e7aa      	b.n	8005d1a <HAL_I2C_Master_Receive+0x22>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dc4:	6922      	ldr	r2, [r4, #16]
 8005dc6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005dca:	d123      	bne.n	8005e14 <HAL_I2C_Master_Receive+0x11c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005dcc:	f045 0501 	orr.w	r5, r5, #1
 8005dd0:	b2ed      	uxtb	r5, r5
 8005dd2:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dd4:	4633      	mov	r3, r6
 8005dd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005dd8:	4963      	ldr	r1, [pc, #396]	; (8005f68 <HAL_I2C_Master_Receive+0x270>)
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f7ff fd25 	bl	800582a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005de0:	4605      	mov	r5, r0
 8005de2:	2800      	cmp	r0, #0
 8005de4:	d1ec      	bne.n	8005dc0 <HAL_I2C_Master_Receive+0xc8>
    if (hi2c->XferSize == 0U)
 8005de6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005de8:	6823      	ldr	r3, [r4, #0]
 8005dea:	2a00      	cmp	r2, #0
 8005dec:	d145      	bne.n	8005e7a <HAL_I2C_Master_Receive+0x182>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dee:	9003      	str	r0, [sp, #12]
 8005df0:	695a      	ldr	r2, [r3, #20]
 8005df2:	9203      	str	r2, [sp, #12]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	9203      	str	r2, [sp, #12]
 8005df8:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e00:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005e02:	2320      	movs	r3, #32
 8005e04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8005e0e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8005e12:	e782      	b.n	8005d1a <HAL_I2C_Master_Receive+0x22>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005e14:	11ef      	asrs	r7, r5, #7
 8005e16:	f007 0706 	and.w	r7, r7, #6
 8005e1a:	f047 02f0 	orr.w	r2, r7, #240	; 0xf0
 8005e1e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005e20:	4952      	ldr	r1, [pc, #328]	; (8005f6c <HAL_I2C_Master_Receive+0x274>)
 8005e22:	4633      	mov	r3, r6
 8005e24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e26:	4620      	mov	r0, r4
 8005e28:	f7ff fcff 	bl	800582a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	d1c7      	bne.n	8005dc0 <HAL_I2C_Master_Receive+0xc8>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	b2ed      	uxtb	r5, r5
 8005e34:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e38:	4633      	mov	r3, r6
 8005e3a:	494b      	ldr	r1, [pc, #300]	; (8005f68 <HAL_I2C_Master_Receive+0x270>)
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f7ff fcf4 	bl	800582a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e42:	4602      	mov	r2, r0
 8005e44:	2800      	cmp	r0, #0
 8005e46:	d1bb      	bne.n	8005dc0 <HAL_I2C_Master_Receive+0xc8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	9007      	str	r0, [sp, #28]
 8005e4c:	6959      	ldr	r1, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e4e:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e50:	9107      	str	r1, [sp, #28]
 8005e52:	6999      	ldr	r1, [r3, #24]
 8005e54:	9107      	str	r1, [sp, #28]
 8005e56:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e58:	6819      	ldr	r1, [r3, #0]
 8005e5a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005e5e:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e62:	9600      	str	r6, [sp, #0]
 8005e64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e68:	f7ff fd6e 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 8005e6c:	6823      	ldr	r3, [r4, #0]
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	d1a0      	bne.n	8005db4 <HAL_I2C_Master_Receive+0xbc>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005e72:	f047 07f1 	orr.w	r7, r7, #241	; 0xf1
 8005e76:	611f      	str	r7, [r3, #16]
 8005e78:	e7ac      	b.n	8005dd4 <HAL_I2C_Master_Receive+0xdc>
    else if (hi2c->XferSize == 1U)
 8005e7a:	2a01      	cmp	r2, #1
 8005e7c:	d132      	bne.n	8005ee4 <HAL_I2C_Master_Receive+0x1ec>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	9004      	str	r0, [sp, #16]
 8005e8c:	695a      	ldr	r2, [r3, #20]
 8005e8e:	9204      	str	r2, [sp, #16]
 8005e90:	699a      	ldr	r2, [r3, #24]
 8005e92:	9204      	str	r2, [sp, #16]
 8005e94:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005e9e:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ea0:	4f33      	ldr	r7, [pc, #204]	; (8005f70 <HAL_I2C_Master_Receive+0x278>)
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ea2:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005f74 <HAL_I2C_Master_Receive+0x27c>
    while (hi2c->XferSize > 0U)
 8005ea6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d0aa      	beq.n	8005e02 <HAL_I2C_Master_Receive+0x10a>
      if (hi2c->XferSize <= 3U)
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	f200 80a3 	bhi.w	8005ff8 <HAL_I2C_Master_Receive+0x300>
        if (hi2c->XferSize == 1U)
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d132      	bne.n	8005f1c <HAL_I2C_Master_Receive+0x224>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eb6:	4632      	mov	r2, r6
 8005eb8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f7ff fd15 	bl	80058ea <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	f47f af7d 	bne.w	8005dc0 <HAL_I2C_Master_Receive+0xc8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	691a      	ldr	r2, [r3, #16]
 8005eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ecc:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005ece:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005ed4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005eda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005edc:	3b01      	subs	r3, #1
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005ee2:	e7e0      	b.n	8005ea6 <HAL_I2C_Master_Receive+0x1ae>
    else if (hi2c->XferSize == 2U)
 8005ee4:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ee6:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8005ee8:	d10e      	bne.n	8005f08 <HAL_I2C_Master_Receive+0x210>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005eea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ef0:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	9005      	str	r0, [sp, #20]
 8005ef6:	695a      	ldr	r2, [r3, #20]
 8005ef8:	9205      	str	r2, [sp, #20]
 8005efa:	699a      	ldr	r2, [r3, #24]
 8005efc:	9205      	str	r2, [sp, #20]
 8005efe:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f06:	e7c9      	b.n	8005e9c <HAL_I2C_Master_Receive+0x1a4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f0c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f0e:	9006      	str	r0, [sp, #24]
 8005f10:	695a      	ldr	r2, [r3, #20]
 8005f12:	9206      	str	r2, [sp, #24]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	9306      	str	r3, [sp, #24]
 8005f18:	9b06      	ldr	r3, [sp, #24]
 8005f1a:	e7c1      	b.n	8005ea0 <HAL_I2C_Master_Receive+0x1a8>
        else if (hi2c->XferSize == 2U)
 8005f1c:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f1e:	9600      	str	r6, [sp, #0]
 8005f20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f22:	f04f 0200 	mov.w	r2, #0
 8005f26:	4639      	mov	r1, r7
 8005f28:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8005f2a:	d125      	bne.n	8005f78 <HAL_I2C_Master_Receive+0x280>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f2c:	f7ff fd0c 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 8005f30:	2800      	cmp	r0, #0
 8005f32:	f47f af45 	bne.w	8005dc0 <HAL_I2C_Master_Receive+0xc8>
 8005f36:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f40:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f42:	691a      	ldr	r2, [r3, #16]
 8005f44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f46:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005f4e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005f50:	3b01      	subs	r3, #1
 8005f52:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005f54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005f56:	3b01      	subs	r3, #1
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005f5c:	b662      	cpsie	i
 8005f5e:	e7b2      	b.n	8005ec6 <HAL_I2C_Master_Receive+0x1ce>
 8005f60:	00100002 	.word	0x00100002
 8005f64:	ffff0000 	.word	0xffff0000
 8005f68:	00010002 	.word	0x00010002
 8005f6c:	00010008 	.word	0x00010008
 8005f70:	00010004 	.word	0x00010004
 8005f74:	20000088 	.word	0x20000088
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f78:	f7ff fce6 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	f47f af1f 	bne.w	8005dc0 <HAL_I2C_Master_Receive+0xc8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f82:	6822      	ldr	r2, [r4, #0]
 8005f84:	6813      	ldr	r3, [r2, #0]
 8005f86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f8a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f8c:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	691a      	ldr	r2, [r3, #16]
 8005f92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f94:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f96:	f246 12a8 	movw	r2, #25000	; 0x61a8
          hi2c->pBuffPtr++;
 8005f9a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005f9c:	1c4b      	adds	r3, r1, #1
 8005f9e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005fa0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005fa6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005fae:	f8d8 3000 	ldr.w	r3, [r8]
 8005fb2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fb6:	2323      	movs	r3, #35	; 0x23
 8005fb8:	4353      	muls	r3, r2
 8005fba:	9302      	str	r3, [sp, #8]
            count--;
 8005fbc:	9b02      	ldr	r3, [sp, #8]
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	9302      	str	r3, [sp, #8]
            if (count == 0U)
 8005fc2:	9b02      	ldr	r3, [sp, #8]
 8005fc4:	b96b      	cbnz	r3, 8005fe2 <HAL_I2C_Master_Receive+0x2ea>
              hi2c->State               = HAL_I2C_STATE_READY;
 8005fc6:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005fc8:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005fca:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fd2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005fd4:	f042 0220 	orr.w	r2, r2, #32
 8005fd8:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005fda:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8005fdc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8005fe0:	e6ee      	b.n	8005dc0 <HAL_I2C_Master_Receive+0xc8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	695a      	ldr	r2, [r3, #20]
 8005fe6:	0750      	lsls	r0, r2, #29
 8005fe8:	d5e8      	bpl.n	8005fbc <HAL_I2C_Master_Receive+0x2c4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ff0:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	704b      	strb	r3, [r1, #1]
 8005ff6:	e7a7      	b.n	8005f48 <HAL_I2C_Master_Receive+0x250>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ff8:	4632      	mov	r2, r6
 8005ffa:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f7ff fc74 	bl	80058ea <I2C_WaitOnRXNEFlagUntilTimeout>
 8006002:	2800      	cmp	r0, #0
 8006004:	f47f aedc 	bne.w	8005dc0 <HAL_I2C_Master_Receive+0xc8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	691a      	ldr	r2, [r3, #16]
 800600c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800600e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006010:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006012:	1c53      	adds	r3, r2, #1
 8006014:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8006016:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006018:	3b01      	subs	r3, #1
 800601a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800601c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800601e:	3b01      	subs	r3, #1
 8006020:	b29b      	uxth	r3, r3
 8006022:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	6959      	ldr	r1, [r3, #20]
 8006028:	0749      	lsls	r1, r1, #29
 800602a:	f57f af3c 	bpl.w	8005ea6 <HAL_I2C_Master_Receive+0x1ae>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	7053      	strb	r3, [r2, #1]
 8006032:	e74c      	b.n	8005ece <HAL_I2C_Master_Receive+0x1d6>

08006034 <HAL_I2C_MasterTxCpltCallback>:
 8006034:	4770      	bx	lr

08006036 <HAL_I2C_MasterRxCpltCallback>:
 8006036:	4770      	bx	lr

08006038 <HAL_I2C_SlaveTxCpltCallback>:
 8006038:	4770      	bx	lr

0800603a <HAL_I2C_SlaveRxCpltCallback>:
 800603a:	4770      	bx	lr

0800603c <HAL_I2C_AddrCallback>:
}
 800603c:	4770      	bx	lr

0800603e <HAL_I2C_ListenCpltCallback>:
 800603e:	4770      	bx	lr

08006040 <HAL_I2C_MemTxCpltCallback>:
 8006040:	4770      	bx	lr

08006042 <I2C_MemoryTransmit_TXE_BTF>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006042:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8006046:	b508      	push	{r3, lr}
  if (hi2c->EventCount == 0U)
 8006048:	6d03      	ldr	r3, [r0, #80]	; 0x50
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800604a:	b2d2      	uxtb	r2, r2
  if (hi2c->EventCount == 0U)
 800604c:	b983      	cbnz	r3, 8006070 <I2C_MemoryTransmit_TXE_BTF+0x2e>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800604e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006050:	6802      	ldr	r2, [r0, #0]
 8006052:	2b01      	cmp	r3, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006054:	6c83      	ldr	r3, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006056:	d105      	bne.n	8006064 <I2C_MemoryTransmit_TXE_BTF+0x22>
 8006058:	b2db      	uxtb	r3, r3
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800605a:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 800605c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800605e:	3302      	adds	r3, #2
      hi2c->EventCount++;
 8006060:	6503      	str	r3, [r0, #80]	; 0x50
}
 8006062:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006064:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006068:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 800606a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800606c:	3301      	adds	r3, #1
 800606e:	e7f7      	b.n	8006060 <I2C_MemoryTransmit_TXE_BTF+0x1e>
  else if (hi2c->EventCount == 1U)
 8006070:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006072:	2b01      	cmp	r3, #1
 8006074:	d103      	bne.n	800607e <I2C_MemoryTransmit_TXE_BTF+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006076:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006078:	6802      	ldr	r2, [r0, #0]
 800607a:	b2db      	uxtb	r3, r3
 800607c:	e7f4      	b.n	8006068 <I2C_MemoryTransmit_TXE_BTF+0x26>
  else if (hi2c->EventCount == 2U)
 800607e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006080:	2b02      	cmp	r3, #2
 8006082:	d1ee      	bne.n	8006062 <I2C_MemoryTransmit_TXE_BTF+0x20>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006084:	2a22      	cmp	r2, #34	; 0x22
 8006086:	d105      	bne.n	8006094 <I2C_MemoryTransmit_TXE_BTF+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006088:	6802      	ldr	r2, [r0, #0]
 800608a:	6813      	ldr	r3, [r2, #0]
 800608c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	e7e6      	b.n	8006062 <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006094:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006096:	b29b      	uxth	r3, r3
 8006098:	b163      	cbz	r3, 80060b4 <I2C_MemoryTransmit_TXE_BTF+0x72>
 800609a:	2a21      	cmp	r2, #33	; 0x21
 800609c:	d10a      	bne.n	80060b4 <I2C_MemoryTransmit_TXE_BTF+0x72>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800609e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80060a0:	6802      	ldr	r2, [r0, #0]
 80060a2:	f813 1b01 	ldrb.w	r1, [r3], #1
 80060a6:	6111      	str	r1, [r2, #16]
      hi2c->pBuffPtr++;
 80060a8:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 80060aa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	8543      	strh	r3, [r0, #42]	; 0x2a
 80060b2:	e7d6      	b.n	8006062 <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80060b4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1d2      	bne.n	8006062 <I2C_MemoryTransmit_TXE_BTF+0x20>
 80060bc:	2a21      	cmp	r2, #33	; 0x21
 80060be:	d1d0      	bne.n	8006062 <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060c0:	6802      	ldr	r2, [r0, #0]
 80060c2:	6851      	ldr	r1, [r2, #4]
 80060c4:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80060c8:	6051      	str	r1, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ca:	6811      	ldr	r1, [r2, #0]
 80060cc:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80060d0:	6011      	str	r1, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 80060d2:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80060d4:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80060d6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060da:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80060de:	f7ff ffaf 	bl	8006040 <HAL_I2C_MemTxCpltCallback>
}
 80060e2:	e7be      	b.n	8006062 <I2C_MemoryTransmit_TXE_BTF+0x20>

080060e4 <HAL_I2C_MemRxCpltCallback>:
 80060e4:	4770      	bx	lr

080060e6 <HAL_I2C_ErrorCallback>:
 80060e6:	4770      	bx	lr

080060e8 <HAL_I2C_AbortCpltCallback>:
 80060e8:	4770      	bx	lr
	...

080060ec <I2C_DMAAbort>:
  __IO uint32_t count = 0U;
 80060ec:	2300      	movs	r3, #0
{
 80060ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80060f0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  __IO uint32_t count = 0U;
 80060f2:	9301      	str	r3, [sp, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060f4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80060f8:	4b2b      	ldr	r3, [pc, #172]	; (80061a8 <I2C_DMAAbort+0xbc>)
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060fa:	b2d1      	uxtb	r1, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80060fc:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	fbb3 f2f2 	udiv	r2, r3, r2
 8006106:	2323      	movs	r3, #35	; 0x23
 8006108:	4353      	muls	r3, r2
 800610a:	9301      	str	r3, [sp, #4]
 800610c:	6803      	ldr	r3, [r0, #0]
    if (count == 0U)
 800610e:	9a01      	ldr	r2, [sp, #4]
 8006110:	bb42      	cbnz	r2, 8006164 <I2C_DMAAbort+0x78>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006112:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006114:	f042 0220 	orr.w	r2, r2, #32
 8006118:	6402      	str	r2, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 800611a:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800611c:	b10d      	cbz	r5, 8006122 <I2C_DMAAbort+0x36>
    hi2c->hdmatx->XferCpltCallback = NULL;
 800611e:	2200      	movs	r2, #0
 8006120:	62aa      	str	r2, [r5, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8006122:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006124:	b10c      	cbz	r4, 800612a <I2C_DMAAbort+0x3e>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006126:	2200      	movs	r2, #0
 8006128:	62a2      	str	r2, [r4, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006130:	601a      	str	r2, [r3, #0]
  hi2c->XferCount = 0U;
 8006132:	2200      	movs	r2, #0
 8006134:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8006136:	b105      	cbz	r5, 800613a <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006138:	636a      	str	r2, [r5, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 800613a:	b104      	cbz	r4, 800613e <I2C_DMAAbort+0x52>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800613c:	6362      	str	r2, [r4, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	f022 0201 	bic.w	r2, r2, #1
 8006144:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006146:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800614a:	2a60      	cmp	r2, #96	; 0x60
 800614c:	d111      	bne.n	8006172 <I2C_DMAAbort+0x86>
    hi2c->State         = HAL_I2C_STATE_READY;
 800614e:	2320      	movs	r3, #32
 8006150:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006154:	2300      	movs	r3, #0
 8006156:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800615a:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800615c:	f7ff ffc4 	bl	80060e8 <HAL_I2C_AbortCpltCallback>
}
 8006160:	b003      	add	sp, #12
 8006162:	bd30      	pop	{r4, r5, pc}
    count--;
 8006164:	9a01      	ldr	r2, [sp, #4]
 8006166:	3a01      	subs	r2, #1
 8006168:	9201      	str	r2, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	0592      	lsls	r2, r2, #22
 800616e:	d4ce      	bmi.n	800610e <I2C_DMAAbort+0x22>
 8006170:	e7d3      	b.n	800611a <I2C_DMAAbort+0x2e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006172:	f001 0228 	and.w	r2, r1, #40	; 0x28
 8006176:	2a28      	cmp	r2, #40	; 0x28
 8006178:	d10e      	bne.n	8006198 <I2C_DMAAbort+0xac>
      __HAL_I2C_ENABLE(hi2c);
 800617a:	6819      	ldr	r1, [r3, #0]
 800617c:	f041 0101 	orr.w	r1, r1, #1
 8006180:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006182:	6819      	ldr	r1, [r3, #0]
 8006184:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8006188:	6019      	str	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800618a:	2300      	movs	r3, #0
 800618c:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800618e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 8006192:	f7ff ffa8 	bl	80060e6 <HAL_I2C_ErrorCallback>
}
 8006196:	e7e3      	b.n	8006160 <I2C_DMAAbort+0x74>
      hi2c->State = HAL_I2C_STATE_READY;
 8006198:	2320      	movs	r3, #32
 800619a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800619e:	2300      	movs	r3, #0
 80061a0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80061a4:	e7f5      	b.n	8006192 <I2C_DMAAbort+0xa6>
 80061a6:	bf00      	nop
 80061a8:	20000088 	.word	0x20000088

080061ac <I2C_ITError>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061ac:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80061b0:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
{
 80061b4:	b510      	push	{r4, lr}
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80061b6:	b2c9      	uxtb	r1, r1
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80061b8:	2910      	cmp	r1, #16
{
 80061ba:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061bc:	b2d2      	uxtb	r2, r2
 80061be:	6803      	ldr	r3, [r0, #0]
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80061c0:	d001      	beq.n	80061c6 <I2C_ITError+0x1a>
 80061c2:	2940      	cmp	r1, #64	; 0x40
 80061c4:	d105      	bne.n	80061d2 <I2C_ITError+0x26>
 80061c6:	2a22      	cmp	r2, #34	; 0x22
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80061c8:	bf02      	ittt	eq
 80061ca:	6819      	ldreq	r1, [r3, #0]
 80061cc:	f421 6100 	biceq.w	r1, r1, #2048	; 0x800
 80061d0:	6019      	streq	r1, [r3, #0]
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80061d2:	f002 0128 	and.w	r1, r2, #40	; 0x28
 80061d6:	2928      	cmp	r1, #40	; 0x28
 80061d8:	d13d      	bne.n	8006256 <I2C_ITError+0xaa>
    hi2c->PreviousState = I2C_STATE_NONE;
 80061da:	2200      	movs	r2, #0
 80061dc:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80061de:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80061e8:	d05d      	beq.n	80062a6 <I2C_ITError+0xfa>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80061ea:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80061ec:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80061ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061f2:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80061f4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	4b3e      	ldr	r3, [pc, #248]	; (80062f4 <I2C_ITError+0x148>)
 80061fc:	d039      	beq.n	8006272 <I2C_ITError+0xc6>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80061fe:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006200:	f7ff f9b6 	bl	8005570 <HAL_DMA_Abort_IT>
 8006204:	b150      	cbz	r0, 800621c <I2C_ITError+0x70>
        __HAL_I2C_DISABLE(hi2c);
 8006206:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006208:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 800620a:	6813      	ldr	r3, [r2, #0]
 800620c:	f023 0301 	bic.w	r3, r3, #1
 8006210:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8006212:	2320      	movs	r3, #32
 8006214:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006218:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800621a:	4798      	blx	r3
  CurrentError = hi2c->ErrorCode;
 800621c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800621e:	0719      	lsls	r1, r3, #28
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006220:	bf1f      	itttt	ne
 8006222:	6822      	ldrne	r2, [r4, #0]
 8006224:	6853      	ldrne	r3, [r2, #4]
 8006226:	f423 63e0 	bicne.w	r3, r3, #1792	; 0x700
 800622a:	6053      	strne	r3, [r2, #4]
  CurrentState = hi2c->State;
 800622c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006230:	6c22      	ldr	r2, [r4, #64]	; 0x40
  CurrentState = hi2c->State;
 8006232:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006234:	0752      	lsls	r2, r2, #29
 8006236:	d50d      	bpl.n	8006254 <I2C_ITError+0xa8>
 8006238:	2b28      	cmp	r3, #40	; 0x28
 800623a:	d10b      	bne.n	8006254 <I2C_ITError+0xa8>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800623c:	4b2e      	ldr	r3, [pc, #184]	; (80062f8 <I2C_ITError+0x14c>)
    hi2c->State         = HAL_I2C_STATE_READY;
 800623e:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006240:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006242:	2300      	movs	r3, #0
    HAL_I2C_ListenCpltCallback(hi2c);
 8006244:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8006246:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006248:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800624c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8006250:	f7ff fef5 	bl	800603e <HAL_I2C_ListenCpltCallback>
}
 8006254:	bd10      	pop	{r4, pc}
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006256:	6859      	ldr	r1, [r3, #4]
 8006258:	f411 6100 	ands.w	r1, r1, #2048	; 0x800
 800625c:	d106      	bne.n	800626c <I2C_ITError+0xc0>
 800625e:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 8006260:	bf1e      	ittt	ne
 8006262:	2220      	movne	r2, #32
 8006264:	f884 203d 	strbne.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006268:	f884 103e 	strbne.w	r1, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 800626c:	2200      	movs	r2, #0
 800626e:	6322      	str	r2, [r4, #48]	; 0x30
 8006270:	e7b7      	b.n	80061e2 <I2C_ITError+0x36>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006272:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006274:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006276:	f7ff f97b 	bl	8005570 <HAL_DMA_Abort_IT>
 800627a:	2800      	cmp	r0, #0
 800627c:	d0ce      	beq.n	800621c <I2C_ITError+0x70>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	695a      	ldr	r2, [r3, #20]
 8006282:	0651      	lsls	r1, r2, #25
 8006284:	d505      	bpl.n	8006292 <I2C_ITError+0xe6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800628a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800628c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800628e:	3301      	adds	r3, #1
 8006290:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8006292:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006294:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8006296:	6813      	ldr	r3, [r2, #0]
 8006298:	f023 0301 	bic.w	r3, r3, #1
 800629c:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800629e:	2320      	movs	r3, #32
 80062a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80062a4:	e7b8      	b.n	8006218 <I2C_ITError+0x6c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80062a6:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80062aa:	2960      	cmp	r1, #96	; 0x60
 80062ac:	d115      	bne.n	80062da <I2C_ITError+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80062ae:	2120      	movs	r1, #32
 80062b0:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062b4:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80062b6:	695a      	ldr	r2, [r3, #20]
 80062b8:	0652      	lsls	r2, r2, #25
 80062ba:	d505      	bpl.n	80062c8 <I2C_ITError+0x11c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062bc:	691a      	ldr	r2, [r3, #16]
 80062be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062c0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80062c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062c4:	3301      	adds	r3, #1
 80062c6:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80062c8:	6822      	ldr	r2, [r4, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80062ca:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 80062cc:	6813      	ldr	r3, [r2, #0]
 80062ce:	f023 0301 	bic.w	r3, r3, #1
 80062d2:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80062d4:	f7ff ff08 	bl	80060e8 <HAL_I2C_AbortCpltCallback>
 80062d8:	e7a0      	b.n	800621c <I2C_ITError+0x70>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80062da:	695a      	ldr	r2, [r3, #20]
 80062dc:	0650      	lsls	r0, r2, #25
 80062de:	d505      	bpl.n	80062ec <I2C_ITError+0x140>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062e0:	691a      	ldr	r2, [r3, #16]
 80062e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062e4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80062e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062e8:	3301      	adds	r3, #1
 80062ea:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 80062ec:	4620      	mov	r0, r4
 80062ee:	f7ff fefa 	bl	80060e6 <HAL_I2C_ErrorCallback>
 80062f2:	e793      	b.n	800621c <I2C_ITError+0x70>
 80062f4:	080060ed 	.word	0x080060ed
 80062f8:	ffff0000 	.word	0xffff0000

080062fc <HAL_I2C_EV_IRQHandler>:
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80062fc:	6803      	ldr	r3, [r0, #0]
{
 80062fe:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006300:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006302:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006304:	f890 503e 	ldrb.w	r5, [r0, #62]	; 0x3e
{
 8006308:	4604      	mov	r4, r0
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800630a:	b2ed      	uxtb	r5, r5
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800630c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006310:	2d10      	cmp	r5, #16
{
 8006312:	b08e      	sub	sp, #56	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006314:	b2c0      	uxtb	r0, r0
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006316:	d002      	beq.n	800631e <HAL_I2C_EV_IRQHandler+0x22>
 8006318:	2d40      	cmp	r5, #64	; 0x40
 800631a:	f040 82e0 	bne.w	80068de <HAL_I2C_EV_IRQHandler+0x5e2>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800631e:	6998      	ldr	r0, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006320:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006322:	f011 0f01 	tst.w	r1, #1
 8006326:	d107      	bne.n	8006338 <HAL_I2C_EV_IRQHandler+0x3c>
 8006328:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 800632c:	d002      	beq.n	8006334 <HAL_I2C_EV_IRQHandler+0x38>
 800632e:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8006332:	d150      	bne.n	80063d6 <HAL_I2C_EV_IRQHandler+0xda>
}
 8006334:	b00e      	add	sp, #56	; 0x38
 8006336:	bd70      	pop	{r4, r5, r6, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006338:	0596      	lsls	r6, r2, #22
 800633a:	d54c      	bpl.n	80063d6 <HAL_I2C_EV_IRQHandler+0xda>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800633c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800633e:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8006342:	d10c      	bne.n	800635e <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006344:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006346:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006348:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800634c:	2a40      	cmp	r2, #64	; 0x40
 800634e:	d111      	bne.n	8006374 <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8006350:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006352:	b952      	cbnz	r2, 800636a <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006354:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006356:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800635a:	611a      	str	r2, [r3, #16]
 800635c:	e7ea      	b.n	8006334 <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800635e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006360:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 8006364:	d1f0      	bne.n	8006348 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006366:	2208      	movs	r2, #8
 8006368:	e7ed      	b.n	8006346 <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800636a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800636c:	f042 0201 	orr.w	r2, r2, #1
 8006370:	b2d2      	uxtb	r2, r2
 8006372:	e7f2      	b.n	800635a <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006374:	6922      	ldr	r2, [r4, #16]
 8006376:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800637a:	d119      	bne.n	80063b0 <HAL_I2C_EV_IRQHandler+0xb4>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800637c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8006380:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006382:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006384:	bf16      	itet	ne
 8006386:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800638a:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800638e:	b2d2      	uxtbne	r2, r2
 8006390:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006392:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006394:	b10a      	cbz	r2, 800639a <HAL_I2C_EV_IRQHandler+0x9e>
 8006396:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006398:	b92a      	cbnz	r2, 80063a6 <HAL_I2C_EV_IRQHandler+0xaa>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800639a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800639c:	2a00      	cmp	r2, #0
 800639e:	d0c9      	beq.n	8006334 <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80063a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80063a2:	2a00      	cmp	r2, #0
 80063a4:	d0c6      	beq.n	8006334 <HAL_I2C_EV_IRQHandler+0x38>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063ac:	605a      	str	r2, [r3, #4]
 80063ae:	e7c1      	b.n	8006334 <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->EventCount == 0U)
 80063b0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80063b2:	b932      	cbnz	r2, 80063c2 <HAL_I2C_EV_IRQHandler+0xc6>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80063b4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80063b6:	11d2      	asrs	r2, r2, #7
 80063b8:	f002 0206 	and.w	r2, r2, #6
 80063bc:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 80063c0:	e7cb      	b.n	800635a <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 80063c2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80063c4:	2a01      	cmp	r2, #1
 80063c6:	d1b5      	bne.n	8006334 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80063c8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80063ca:	11d2      	asrs	r2, r2, #7
 80063cc:	f002 0206 	and.w	r2, r2, #6
 80063d0:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 80063d4:	e7c1      	b.n	800635a <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063d6:	070e      	lsls	r6, r1, #28
 80063d8:	d50e      	bpl.n	80063f8 <HAL_I2C_EV_IRQHandler+0xfc>
 80063da:	0596      	lsls	r6, r2, #22
 80063dc:	d50c      	bpl.n	80063f8 <HAL_I2C_EV_IRQHandler+0xfc>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80063de:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80063e0:	b2d2      	uxtb	r2, r2
 80063e2:	611a      	str	r2, [r3, #16]
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80063e4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80063e6:	b912      	cbnz	r2, 80063ee <HAL_I2C_EV_IRQHandler+0xf2>
 80063e8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80063ea:	2900      	cmp	r1, #0
 80063ec:	d0a2      	beq.n	8006334 <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80063ee:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80063f0:	2a00      	cmp	r2, #0
 80063f2:	d1d8      	bne.n	80063a6 <HAL_I2C_EV_IRQHandler+0xaa>
 80063f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80063f6:	e7d3      	b.n	80063a0 <HAL_I2C_EV_IRQHandler+0xa4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063f8:	078e      	lsls	r6, r1, #30
 80063fa:	f140 80e6 	bpl.w	80065ca <HAL_I2C_EV_IRQHandler+0x2ce>
 80063fe:	0596      	lsls	r6, r2, #22
 8006400:	f140 80e3 	bpl.w	80065ca <HAL_I2C_EV_IRQHandler+0x2ce>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006404:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006408:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 800640a:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800640c:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006410:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006412:	2822      	cmp	r0, #34	; 0x22
 8006414:	f040 80d1 	bne.w	80065ba <HAL_I2C_EV_IRQHandler+0x2be>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006418:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800641a:	b940      	cbnz	r0, 800642e <HAL_I2C_EV_IRQHandler+0x132>
 800641c:	2940      	cmp	r1, #64	; 0x40
 800641e:	d106      	bne.n	800642e <HAL_I2C_EV_IRQHandler+0x132>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006420:	9001      	str	r0, [sp, #4]
 8006422:	695a      	ldr	r2, [r3, #20]
 8006424:	9201      	str	r2, [sp, #4]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	9301      	str	r3, [sp, #4]
 800642a:	9b01      	ldr	r3, [sp, #4]
 800642c:	e782      	b.n	8006334 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800642e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006430:	b989      	cbnz	r1, 8006456 <HAL_I2C_EV_IRQHandler+0x15a>
 8006432:	6920      	ldr	r0, [r4, #16]
 8006434:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8006438:	d10d      	bne.n	8006456 <HAL_I2C_EV_IRQHandler+0x15a>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800643a:	9102      	str	r1, [sp, #8]
 800643c:	695a      	ldr	r2, [r3, #20]
 800643e:	9202      	str	r2, [sp, #8]
 8006440:	699a      	ldr	r2, [r3, #24]
 8006442:	9202      	str	r2, [sp, #8]
 8006444:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800644c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800644e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006450:	3301      	adds	r3, #1
      hi2c->EventCount = 0U;
 8006452:	6523      	str	r3, [r4, #80]	; 0x50
 8006454:	e76e      	b.n	8006334 <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->XferCount == 0U)
 8006456:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8006458:	b289      	uxth	r1, r1
 800645a:	b951      	cbnz	r1, 8006472 <HAL_I2C_EV_IRQHandler+0x176>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800645c:	9103      	str	r1, [sp, #12]
 800645e:	695a      	ldr	r2, [r3, #20]
 8006460:	9203      	str	r2, [sp, #12]
 8006462:	699a      	ldr	r2, [r3, #24]
 8006464:	9203      	str	r2, [sp, #12]
 8006466:	9a03      	ldr	r2, [sp, #12]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	e019      	b.n	80064a6 <HAL_I2C_EV_IRQHandler+0x1aa>
      else if (hi2c->XferCount == 1U)
 8006472:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8006474:	b289      	uxth	r1, r1
 8006476:	2901      	cmp	r1, #1
 8006478:	d149      	bne.n	800650e <HAL_I2C_EV_IRQHandler+0x212>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800647a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800647e:	d11b      	bne.n	80064b8 <HAL_I2C_EV_IRQHandler+0x1bc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006486:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006488:	685a      	ldr	r2, [r3, #4]
 800648a:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800648e:	d00c      	beq.n	80064aa <HAL_I2C_EV_IRQHandler+0x1ae>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006496:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006498:	2200      	movs	r2, #0
 800649a:	9204      	str	r2, [sp, #16]
 800649c:	695a      	ldr	r2, [r3, #20]
 800649e:	9204      	str	r2, [sp, #16]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	9304      	str	r3, [sp, #16]
 80064a4:	9b04      	ldr	r3, [sp, #16]
      hi2c->EventCount = 0U;
 80064a6:	2300      	movs	r3, #0
 80064a8:	e7d3      	b.n	8006452 <HAL_I2C_EV_IRQHandler+0x156>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064aa:	9205      	str	r2, [sp, #20]
 80064ac:	695a      	ldr	r2, [r3, #20]
 80064ae:	9205      	str	r2, [sp, #20]
 80064b0:	699a      	ldr	r2, [r3, #24]
 80064b2:	9205      	str	r2, [sp, #20]
 80064b4:	9a05      	ldr	r2, [sp, #20]
 80064b6:	e7d7      	b.n	8006468 <HAL_I2C_EV_IRQHandler+0x16c>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80064b8:	2a08      	cmp	r2, #8
 80064ba:	d01c      	beq.n	80064f6 <HAL_I2C_EV_IRQHandler+0x1fa>
 80064bc:	2a20      	cmp	r2, #32
 80064be:	d01a      	beq.n	80064f6 <HAL_I2C_EV_IRQHandler+0x1fa>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80064c0:	2d12      	cmp	r5, #18
 80064c2:	d10d      	bne.n	80064e0 <HAL_I2C_EV_IRQHandler+0x1e4>
 80064c4:	2a01      	cmp	r2, #1
 80064c6:	d116      	bne.n	80064f6 <HAL_I2C_EV_IRQHandler+0x1fa>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ce:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064d0:	2200      	movs	r2, #0
 80064d2:	9206      	str	r2, [sp, #24]
 80064d4:	695a      	ldr	r2, [r3, #20]
 80064d6:	9206      	str	r2, [sp, #24]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	9306      	str	r3, [sp, #24]
 80064dc:	9b06      	ldr	r3, [sp, #24]
 80064de:	e7e2      	b.n	80064a6 <HAL_I2C_EV_IRQHandler+0x1aa>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80064e0:	2a10      	cmp	r2, #16
 80064e2:	d8f1      	bhi.n	80064c8 <HAL_I2C_EV_IRQHandler+0x1cc>
 80064e4:	499c      	ldr	r1, [pc, #624]	; (8006758 <HAL_I2C_EV_IRQHandler+0x45c>)
 80064e6:	fa21 f202 	lsr.w	r2, r1, r2
 80064ea:	07d0      	lsls	r0, r2, #31
 80064ec:	d5ec      	bpl.n	80064c8 <HAL_I2C_EV_IRQHandler+0x1cc>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064f4:	e7eb      	b.n	80064ce <HAL_I2C_EV_IRQHandler+0x1d2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064fc:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064fe:	2200      	movs	r2, #0
 8006500:	9207      	str	r2, [sp, #28]
 8006502:	695a      	ldr	r2, [r3, #20]
 8006504:	9207      	str	r2, [sp, #28]
 8006506:	699a      	ldr	r2, [r3, #24]
 8006508:	9207      	str	r2, [sp, #28]
 800650a:	9a07      	ldr	r2, [sp, #28]
 800650c:	e7ac      	b.n	8006468 <HAL_I2C_EV_IRQHandler+0x16c>
      else if (hi2c->XferCount == 2U)
 800650e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8006510:	b289      	uxth	r1, r1
 8006512:	2902      	cmp	r1, #2
 8006514:	d133      	bne.n	800657e <HAL_I2C_EV_IRQHandler+0x282>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006516:	2a10      	cmp	r2, #16
 8006518:	d805      	bhi.n	8006526 <HAL_I2C_EV_IRQHandler+0x22a>
 800651a:	498f      	ldr	r1, [pc, #572]	; (8006758 <HAL_I2C_EV_IRQHandler+0x45c>)
 800651c:	40d1      	lsrs	r1, r2
 800651e:	43c9      	mvns	r1, r1
 8006520:	f011 0101 	ands.w	r1, r1, #1
 8006524:	d020      	beq.n	8006568 <HAL_I2C_EV_IRQHandler+0x26c>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006526:	6819      	ldr	r1, [r3, #0]
 8006528:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800652c:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800652e:	2100      	movs	r1, #0
 8006530:	9108      	str	r1, [sp, #32]
 8006532:	6959      	ldr	r1, [r3, #20]
 8006534:	9108      	str	r1, [sp, #32]
 8006536:	6999      	ldr	r1, [r3, #24]
 8006538:	9108      	str	r1, [sp, #32]
 800653a:	9908      	ldr	r1, [sp, #32]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800653c:	6819      	ldr	r1, [r3, #0]
 800653e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006542:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006544:	6859      	ldr	r1, [r3, #4]
 8006546:	0509      	lsls	r1, r1, #20
 8006548:	d5ad      	bpl.n	80064a6 <HAL_I2C_EV_IRQHandler+0x1aa>
 800654a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800654e:	d006      	beq.n	800655e <HAL_I2C_EV_IRQHandler+0x262>
 8006550:	1e51      	subs	r1, r2, #1
 8006552:	291f      	cmp	r1, #31
 8006554:	d8a7      	bhi.n	80064a6 <HAL_I2C_EV_IRQHandler+0x1aa>
 8006556:	4a81      	ldr	r2, [pc, #516]	; (800675c <HAL_I2C_EV_IRQHandler+0x460>)
 8006558:	40ca      	lsrs	r2, r1
 800655a:	07d2      	lsls	r2, r2, #31
 800655c:	d5a3      	bpl.n	80064a6 <HAL_I2C_EV_IRQHandler+0x1aa>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006564:	605a      	str	r2, [r3, #4]
 8006566:	e79e      	b.n	80064a6 <HAL_I2C_EV_IRQHandler+0x1aa>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006568:	6818      	ldr	r0, [r3, #0]
 800656a:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 800656e:	6018      	str	r0, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006570:	9109      	str	r1, [sp, #36]	; 0x24
 8006572:	6959      	ldr	r1, [r3, #20]
 8006574:	9109      	str	r1, [sp, #36]	; 0x24
 8006576:	6999      	ldr	r1, [r3, #24]
 8006578:	9109      	str	r1, [sp, #36]	; 0x24
 800657a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800657c:	e7e2      	b.n	8006544 <HAL_I2C_EV_IRQHandler+0x248>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800657e:	6819      	ldr	r1, [r3, #0]
 8006580:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8006584:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006586:	6859      	ldr	r1, [r3, #4]
 8006588:	050e      	lsls	r6, r1, #20
 800658a:	d50e      	bpl.n	80065aa <HAL_I2C_EV_IRQHandler+0x2ae>
 800658c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8006590:	d007      	beq.n	80065a2 <HAL_I2C_EV_IRQHandler+0x2a6>
 8006592:	3a01      	subs	r2, #1
 8006594:	2a1f      	cmp	r2, #31
 8006596:	d808      	bhi.n	80065aa <HAL_I2C_EV_IRQHandler+0x2ae>
 8006598:	4970      	ldr	r1, [pc, #448]	; (800675c <HAL_I2C_EV_IRQHandler+0x460>)
 800659a:	fa21 f202 	lsr.w	r2, r1, r2
 800659e:	07d5      	lsls	r5, r2, #31
 80065a0:	d503      	bpl.n	80065aa <HAL_I2C_EV_IRQHandler+0x2ae>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065a8:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065aa:	2200      	movs	r2, #0
 80065ac:	920a      	str	r2, [sp, #40]	; 0x28
 80065ae:	695a      	ldr	r2, [r3, #20]
 80065b0:	920a      	str	r2, [sp, #40]	; 0x28
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	930a      	str	r3, [sp, #40]	; 0x28
 80065b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065b8:	e775      	b.n	80064a6 <HAL_I2C_EV_IRQHandler+0x1aa>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ba:	2200      	movs	r2, #0
 80065bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80065be:	695a      	ldr	r2, [r3, #20]
 80065c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80065c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065c8:	e6b4      	b.n	8006334 <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80065ca:	f010 0f04 	tst.w	r0, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80065ce:	6858      	ldr	r0, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80065d0:	f000 8098 	beq.w	8006704 <HAL_I2C_EV_IRQHandler+0x408>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80065d4:	0500      	lsls	r0, r0, #20
 80065d6:	f53f aead 	bmi.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80065da:	060e      	lsls	r6, r1, #24
 80065dc:	f3c1 0080 	ubfx	r0, r1, #2, #1
 80065e0:	d555      	bpl.n	800668e <HAL_I2C_EV_IRQHandler+0x392>
 80065e2:	0551      	lsls	r1, r2, #21
 80065e4:	d553      	bpl.n	800668e <HAL_I2C_EV_IRQHandler+0x392>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d154      	bne.n	8006694 <HAL_I2C_EV_IRQHandler+0x398>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065ea:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80065ee:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80065f0:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065f4:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80065f6:	b2c9      	uxtb	r1, r1
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80065f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80065fa:	bb7d      	cbnz	r5, 800665c <HAL_I2C_EV_IRQHandler+0x360>
 80065fc:	2a21      	cmp	r2, #33	; 0x21
 80065fe:	d12f      	bne.n	8006660 <HAL_I2C_EV_IRQHandler+0x364>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006600:	2808      	cmp	r0, #8
 8006602:	d014      	beq.n	800662e <HAL_I2C_EV_IRQHandler+0x332>
 8006604:	2820      	cmp	r0, #32
 8006606:	d012      	beq.n	800662e <HAL_I2C_EV_IRQHandler+0x332>
 8006608:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800660c:	d00f      	beq.n	800662e <HAL_I2C_EV_IRQHandler+0x332>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006614:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006616:	2311      	movs	r3, #17
 8006618:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800661a:	2300      	movs	r3, #0
 800661c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006620:	2320      	movs	r3, #32
 8006622:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006626:	4620      	mov	r0, r4
 8006628:	f7ff fd04 	bl	8006034 <HAL_I2C_MasterTxCpltCallback>
 800662c:	e682      	b.n	8006334 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800662e:	685a      	ldr	r2, [r3, #4]
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006630:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006632:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006636:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800663e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006640:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8006642:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8006644:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006646:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800664a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800664e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006652:	2a40      	cmp	r2, #64	; 0x40
 8006654:	d1e8      	bne.n	8006628 <HAL_I2C_EV_IRQHandler+0x32c>
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006656:	f7ff fcf3 	bl	8006040 <HAL_I2C_MemTxCpltCallback>
 800665a:	e66b      	b.n	8006334 <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800665c:	2a21      	cmp	r2, #33	; 0x21
 800665e:	d005      	beq.n	800666c <HAL_I2C_EV_IRQHandler+0x370>
 8006660:	2940      	cmp	r1, #64	; 0x40
 8006662:	f47f ae67 	bne.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006666:	2a22      	cmp	r2, #34	; 0x22
 8006668:	f47f ae64 	bne.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 800666c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800666e:	b292      	uxth	r2, r2
 8006670:	b91a      	cbnz	r2, 800667a <HAL_I2C_EV_IRQHandler+0x37e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006672:	685a      	ldr	r2, [r3, #4]
 8006674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006678:	e698      	b.n	80063ac <HAL_I2C_EV_IRQHandler+0xb0>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800667a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800667e:	2a40      	cmp	r2, #64	; 0x40
 8006680:	d116      	bne.n	80066b0 <HAL_I2C_EV_IRQHandler+0x3b4>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006682:	4620      	mov	r0, r4
}
 8006684:	b00e      	add	sp, #56	; 0x38
 8006686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800668a:	f7ff bcda 	b.w	8006042 <I2C_MemoryTransmit_TXE_BTF>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800668e:	2800      	cmp	r0, #0
 8006690:	f43f ae50 	beq.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
 8006694:	0592      	lsls	r2, r2, #22
 8006696:	f57f ae4d 	bpl.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800669a:	2d10      	cmp	r5, #16
 800669c:	d1f1      	bne.n	8006682 <HAL_I2C_EV_IRQHandler+0x386>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800669e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80066a0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80066a4:	2a21      	cmp	r2, #33	; 0x21
 80066a6:	f47f ae45 	bne.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 80066aa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80066ac:	b292      	uxth	r2, r2
 80066ae:	b14a      	cbz	r2, 80066c4 <HAL_I2C_EV_IRQHandler+0x3c8>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80066b2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80066b6:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 80066b8:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80066ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80066bc:	3b01      	subs	r3, #1
 80066be:	b29b      	uxth	r3, r3
 80066c0:	8563      	strh	r3, [r4, #42]	; 0x2a
 80066c2:	e637      	b.n	8006334 <HAL_I2C_EV_IRQHandler+0x38>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80066c4:	2908      	cmp	r1, #8
 80066c6:	d00d      	beq.n	80066e4 <HAL_I2C_EV_IRQHandler+0x3e8>
 80066c8:	2920      	cmp	r1, #32
 80066ca:	d00b      	beq.n	80066e4 <HAL_I2C_EV_IRQHandler+0x3e8>
 80066cc:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80066d0:	d008      	beq.n	80066e4 <HAL_I2C_EV_IRQHandler+0x3e8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066d2:	6859      	ldr	r1, [r3, #4]
 80066d4:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80066d8:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80066da:	2311      	movs	r3, #17
 80066dc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066de:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 80066e2:	e79d      	b.n	8006620 <HAL_I2C_EV_IRQHandler+0x324>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066ea:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066f2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80066f4:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80066f6:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80066f8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80066fa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006702:	e790      	b.n	8006626 <HAL_I2C_EV_IRQHandler+0x32a>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006704:	0506      	lsls	r6, r0, #20
 8006706:	f53f ae15 	bmi.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800670a:	064d      	lsls	r5, r1, #25
 800670c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8006710:	d57b      	bpl.n	800680a <HAL_I2C_EV_IRQHandler+0x50e>
 8006712:	0551      	lsls	r1, r2, #21
 8006714:	d579      	bpl.n	800680a <HAL_I2C_EV_IRQHandler+0x50e>
 8006716:	2800      	cmp	r0, #0
 8006718:	d17a      	bne.n	8006810 <HAL_I2C_EV_IRQHandler+0x514>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800671a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800671e:	2a22      	cmp	r2, #34	; 0x22
 8006720:	f47f ae08 	bne.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
    tmp = hi2c->XferCount;
 8006724:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006726:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8006728:	2a03      	cmp	r2, #3
 800672a:	d919      	bls.n	8006760 <HAL_I2C_EV_IRQHandler+0x464>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800672c:	691a      	ldr	r2, [r3, #16]
 800672e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006730:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8006732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006734:	3301      	adds	r3, #1
 8006736:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006738:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800673a:	3b01      	subs	r3, #1
 800673c:	b29b      	uxth	r3, r3
 800673e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8006740:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006742:	b29b      	uxth	r3, r3
 8006744:	2b03      	cmp	r3, #3
 8006746:	f47f adf5 	bne.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800674a:	6822      	ldr	r2, [r4, #0]
 800674c:	6853      	ldr	r3, [r2, #4]
 800674e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006752:	6053      	str	r3, [r2, #4]
 8006754:	e5ee      	b.n	8006334 <HAL_I2C_EV_IRQHandler+0x38>
 8006756:	bf00      	nop
 8006758:	00010014 	.word	0x00010014
 800675c:	80008081 	.word	0x80008081
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006760:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006762:	2902      	cmp	r1, #2
 8006764:	f43f ade6 	beq.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
 8006768:	2a01      	cmp	r2, #1
 800676a:	f63f ade3 	bhi.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800676e:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8006772:	4a72      	ldr	r2, [pc, #456]	; (800693c <HAL_I2C_EV_IRQHandler+0x640>)
  __IO uint32_t count = 0U;
 8006774:	900c      	str	r0, [sp, #48]	; 0x30
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006776:	6812      	ldr	r2, [r2, #0]
 8006778:	fbb2 f2f1 	udiv	r2, r2, r1
 800677c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006780:	920c      	str	r2, [sp, #48]	; 0x30
    count--;
 8006782:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006784:	3a01      	subs	r2, #1
 8006786:	920c      	str	r2, [sp, #48]	; 0x30
    if (count == 0U)
 8006788:	990c      	ldr	r1, [sp, #48]	; 0x30
 800678a:	b9d1      	cbnz	r1, 80067c2 <HAL_I2C_EV_IRQHandler+0x4c6>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800678c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        HAL_I2C_ErrorCallback(hi2c);
 800678e:	4620      	mov	r0, r4
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006790:	f042 0220 	orr.w	r2, r2, #32
 8006794:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800679c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800679e:	691a      	ldr	r2, [r3, #16]
 80067a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067a2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80067a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067a6:	3301      	adds	r3, #1
 80067a8:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80067aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80067ac:	3b01      	subs	r3, #1
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80067b2:	2320      	movs	r3, #32
 80067b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b8:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80067bc:	f7ff fc93 	bl	80060e6 <HAL_I2C_ErrorCallback>
 80067c0:	e5b8      	b.n	8006334 <HAL_I2C_EV_IRQHandler+0x38>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 80067c8:	d1db      	bne.n	8006782 <HAL_I2C_EV_IRQHandler+0x486>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067ca:	6819      	ldr	r1, [r3, #0]
 80067cc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80067d0:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80067d2:	6859      	ldr	r1, [r3, #4]
 80067d4:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80067d8:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067da:	6919      	ldr	r1, [r3, #16]
 80067dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067de:	7019      	strb	r1, [r3, #0]
        hi2c->pBuffPtr++;
 80067e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067e2:	3301      	adds	r3, #1
 80067e4:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80067e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80067ee:	2320      	movs	r3, #32
 80067f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067f4:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80067f8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067fc:	2b40      	cmp	r3, #64	; 0x40
 80067fe:	d168      	bne.n	80068d2 <HAL_I2C_EV_IRQHandler+0x5d6>
          hi2c->PreviousState = I2C_STATE_NONE;
 8006800:	6322      	str	r2, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006802:	4620      	mov	r0, r4
 8006804:	f7ff fc6e 	bl	80060e4 <HAL_I2C_MemRxCpltCallback>
 8006808:	e594      	b.n	8006334 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800680a:	2800      	cmp	r0, #0
 800680c:	f43f ad92 	beq.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
 8006810:	0592      	lsls	r2, r2, #22
 8006812:	f57f ad8f 	bpl.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006816:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8006818:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800681a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800681c:	b280      	uxth	r0, r0
 800681e:	2804      	cmp	r0, #4
 8006820:	d109      	bne.n	8006836 <HAL_I2C_EV_IRQHandler+0x53a>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006828:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 800682e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006830:	3301      	adds	r3, #1
 8006832:	6263      	str	r3, [r4, #36]	; 0x24
 8006834:	e741      	b.n	80066ba <HAL_I2C_EV_IRQHandler+0x3be>
  else if (hi2c->XferCount == 3U)
 8006836:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8006838:	b280      	uxth	r0, r0
 800683a:	2803      	cmp	r0, #3
 800683c:	d10c      	bne.n	8006858 <HAL_I2C_EV_IRQHandler+0x55c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800683e:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006840:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006842:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8006846:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006848:	d0ef      	beq.n	800682a <HAL_I2C_EV_IRQHandler+0x52e>
 800684a:	2a02      	cmp	r2, #2
 800684c:	d0ed      	beq.n	800682a <HAL_I2C_EV_IRQHandler+0x52e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	e7e8      	b.n	800682a <HAL_I2C_EV_IRQHandler+0x52e>
  else if (hi2c->XferCount == 2U)
 8006858:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800685a:	b280      	uxth	r0, r0
 800685c:	2802      	cmp	r0, #2
 800685e:	d1e4      	bne.n	800682a <HAL_I2C_EV_IRQHandler+0x52e>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006860:	2a01      	cmp	r2, #1
 8006862:	d001      	beq.n	8006868 <HAL_I2C_EV_IRQHandler+0x56c>
 8006864:	2a10      	cmp	r2, #16
 8006866:	d128      	bne.n	80068ba <HAL_I2C_EV_IRQHandler+0x5be>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800686e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8006874:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006876:	1c53      	adds	r3, r2, #1
 8006878:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800687a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800687c:	3b01      	subs	r3, #1
 800687e:	b29b      	uxth	r3, r3
 8006880:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 8006888:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800688a:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr++;
 800688c:	3301      	adds	r3, #1
 800688e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8006890:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006892:	3b01      	subs	r3, #1
 8006894:	b29b      	uxth	r3, r3
 8006896:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006898:	6853      	ldr	r3, [r2, #4]
 800689a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800689e:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80068a0:	2320      	movs	r3, #32
 80068a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068a6:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80068aa:	2b40      	cmp	r3, #64	; 0x40
 80068ac:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068b0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068b4:	d10d      	bne.n	80068d2 <HAL_I2C_EV_IRQHandler+0x5d6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80068b6:	6323      	str	r3, [r4, #48]	; 0x30
 80068b8:	e7a3      	b.n	8006802 <HAL_I2C_EV_IRQHandler+0x506>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80068ba:	2a04      	cmp	r2, #4
 80068bc:	d001      	beq.n	80068c2 <HAL_I2C_EV_IRQHandler+0x5c6>
 80068be:	2a02      	cmp	r2, #2
 80068c0:	d103      	bne.n	80068ca <HAL_I2C_EV_IRQHandler+0x5ce>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068c8:	e7d1      	b.n	800686e <HAL_I2C_EV_IRQHandler+0x572>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068d0:	e7cd      	b.n	800686e <HAL_I2C_EV_IRQHandler+0x572>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80068d2:	2312      	movs	r3, #18
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80068d4:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80068d6:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80068d8:	f7ff fbad 	bl	8006036 <HAL_I2C_MasterRxCpltCallback>
 80068dc:	e52a      	b.n	8006334 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80068de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80068e0:	b311      	cbz	r1, 8006928 <HAL_I2C_EV_IRQHandler+0x62c>
  uint32_t sr2itflags               = 0U;
 80068e2:	2500      	movs	r5, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80068e4:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068e6:	078e      	lsls	r6, r1, #30
 80068e8:	d52a      	bpl.n	8006940 <HAL_I2C_EV_IRQHandler+0x644>
 80068ea:	0596      	lsls	r6, r2, #22
 80068ec:	d528      	bpl.n	8006940 <HAL_I2C_EV_IRQHandler+0x644>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80068ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80068f0:	b102      	cbz	r2, 80068f4 <HAL_I2C_EV_IRQHandler+0x5f8>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80068f2:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80068f4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80068f8:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80068fc:	2a28      	cmp	r2, #40	; 0x28
 80068fe:	d116      	bne.n	800692e <HAL_I2C_EV_IRQHandler+0x632>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006900:	685a      	ldr	r2, [r3, #4]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006902:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800690a:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800690c:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 800690e:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006912:	f001 0101 	and.w	r1, r1, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006916:	bf54      	ite	pl
 8006918:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800691a:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 800691c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006920:	4620      	mov	r0, r4
 8006922:	f7ff fb8b 	bl	800603c <HAL_I2C_AddrCallback>
 8006926:	e505      	b.n	8006334 <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006928:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800692a:	6959      	ldr	r1, [r3, #20]
 800692c:	e7db      	b.n	80068e6 <HAL_I2C_EV_IRQHandler+0x5ea>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800692e:	f06f 0202 	mvn.w	r2, #2
 8006932:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8006934:	2300      	movs	r3, #0
 8006936:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800693a:	e4fb      	b.n	8006334 <HAL_I2C_EV_IRQHandler+0x38>
 800693c:	20000088 	.word	0x20000088
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006940:	06ce      	lsls	r6, r1, #27
 8006942:	f140 80b1 	bpl.w	8006aa8 <HAL_I2C_EV_IRQHandler+0x7ac>
 8006946:	0595      	lsls	r5, r2, #22
 8006948:	f140 80ae 	bpl.w	8006aa8 <HAL_I2C_EV_IRQHandler+0x7ac>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800694c:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006950:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006952:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006954:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006958:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800695a:	2200      	movs	r2, #0
 800695c:	920d      	str	r2, [sp, #52]	; 0x34
 800695e:	695a      	ldr	r2, [r3, #20]
 8006960:	920d      	str	r2, [sp, #52]	; 0x34
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	f042 0201 	orr.w	r2, r2, #1
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006972:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	0512      	lsls	r2, r2, #20
 8006978:	d520      	bpl.n	80069bc <HAL_I2C_EV_IRQHandler+0x6c0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800697a:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 800697e:	2a22      	cmp	r2, #34	; 0x22
 8006980:	d14a      	bne.n	8006a18 <HAL_I2C_EV_IRQHandler+0x71c>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006982:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006984:	6802      	ldr	r2, [r0, #0]
 8006986:	6852      	ldr	r2, [r2, #4]
 8006988:	b292      	uxth	r2, r2
 800698a:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 800698c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800698e:	b292      	uxth	r2, r2
 8006990:	b11a      	cbz	r2, 800699a <HAL_I2C_EV_IRQHandler+0x69e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006992:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006994:	f042 0204 	orr.w	r2, r2, #4
 8006998:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069a0:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069a2:	f7fe fe2d 	bl	8005600 <HAL_DMA_GetState>
 80069a6:	2801      	cmp	r0, #1
 80069a8:	d008      	beq.n	80069bc <HAL_I2C_EV_IRQHandler+0x6c0>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80069aa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80069ac:	4b79      	ldr	r3, [pc, #484]	; (8006b94 <HAL_I2C_EV_IRQHandler+0x898>)
 80069ae:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80069b0:	f7fe fdde 	bl	8005570 <HAL_DMA_Abort_IT>
 80069b4:	b110      	cbz	r0, 80069bc <HAL_I2C_EV_IRQHandler+0x6c0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80069b6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80069b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80069ba:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 80069bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80069be:	b29b      	uxth	r3, r3
 80069c0:	b313      	cbz	r3, 8006a08 <HAL_I2C_EV_IRQHandler+0x70c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	695a      	ldr	r2, [r3, #20]
 80069c6:	0756      	lsls	r6, r2, #29
 80069c8:	d509      	bpl.n	80069de <HAL_I2C_EV_IRQHandler+0x6e2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ca:	691a      	ldr	r2, [r3, #16]
 80069cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069ce:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80069d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069d2:	3301      	adds	r3, #1
 80069d4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80069d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80069d8:	3b01      	subs	r3, #1
 80069da:	b29b      	uxth	r3, r3
 80069dc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80069de:	6823      	ldr	r3, [r4, #0]
 80069e0:	695a      	ldr	r2, [r3, #20]
 80069e2:	0650      	lsls	r0, r2, #25
 80069e4:	d509      	bpl.n	80069fa <HAL_I2C_EV_IRQHandler+0x6fe>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069e6:	691a      	ldr	r2, [r3, #16]
 80069e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069ea:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80069ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069ee:	3301      	adds	r3, #1
 80069f0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80069f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80069f4:	3b01      	subs	r3, #1
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 80069fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	b11b      	cbz	r3, 8006a08 <HAL_I2C_EV_IRQHandler+0x70c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a02:	f043 0304 	orr.w	r3, r3, #4
 8006a06:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a0a:	b313      	cbz	r3, 8006a52 <HAL_I2C_EV_IRQHandler+0x756>
    I2C_ITError(hi2c);
 8006a0c:	4620      	mov	r0, r4
}
 8006a0e:	b00e      	add	sp, #56	; 0x38
 8006a10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    I2C_ITError(hi2c);
 8006a14:	f7ff bbca 	b.w	80061ac <I2C_ITError>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006a18:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006a1a:	6802      	ldr	r2, [r0, #0]
 8006a1c:	6852      	ldr	r2, [r2, #4]
 8006a1e:	b292      	uxth	r2, r2
 8006a20:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8006a22:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006a24:	b292      	uxth	r2, r2
 8006a26:	b11a      	cbz	r2, 8006a30 <HAL_I2C_EV_IRQHandler+0x734>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a28:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006a2a:	f042 0204 	orr.w	r2, r2, #4
 8006a2e:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a36:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006a38:	f7fe fde2 	bl	8005600 <HAL_DMA_GetState>
 8006a3c:	2801      	cmp	r0, #1
 8006a3e:	d0bd      	beq.n	80069bc <HAL_I2C_EV_IRQHandler+0x6c0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006a40:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006a42:	4b54      	ldr	r3, [pc, #336]	; (8006b94 <HAL_I2C_EV_IRQHandler+0x898>)
 8006a44:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006a46:	f7fe fd93 	bl	8005570 <HAL_DMA_Abort_IT>
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	d0b6      	beq.n	80069bc <HAL_I2C_EV_IRQHandler+0x6c0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006a4e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006a50:	e7b2      	b.n	80069b8 <HAL_I2C_EV_IRQHandler+0x6bc>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006a52:	2d2a      	cmp	r5, #42	; 0x2a
 8006a54:	d106      	bne.n	8006a64 <HAL_I2C_EV_IRQHandler+0x768>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a56:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a58:	2328      	movs	r3, #40	; 0x28
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a5a:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a5c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a60:	f7ff faeb 	bl	800603a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006a64:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006a68:	2b28      	cmp	r3, #40	; 0x28
 8006a6a:	d10c      	bne.n	8006a86 <HAL_I2C_EV_IRQHandler+0x78a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a6c:	4b4a      	ldr	r3, [pc, #296]	; (8006b98 <HAL_I2C_EV_IRQHandler+0x89c>)
      hi2c->State = HAL_I2C_STATE_READY;
 8006a6e:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a70:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a72:	2300      	movs	r3, #0
      HAL_I2C_ListenCpltCallback(hi2c);
 8006a74:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a76:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006a78:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a7c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006a80:	f7ff fadd 	bl	800603e <HAL_I2C_ListenCpltCallback>
 8006a84:	e456      	b.n	8006334 <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006a86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006a88:	2b22      	cmp	r3, #34	; 0x22
 8006a8a:	d002      	beq.n	8006a92 <HAL_I2C_EV_IRQHandler+0x796>
 8006a8c:	2d22      	cmp	r5, #34	; 0x22
 8006a8e:	f47f ac51 	bne.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006a92:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8006a94:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8006a96:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006a98:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a9c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f7ff faca 	bl	800603a <HAL_I2C_SlaveRxCpltCallback>
 8006aa6:	e445      	b.n	8006334 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006aa8:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 8006aac:	2821      	cmp	r0, #33	; 0x21
 8006aae:	f3c1 0580 	ubfx	r5, r1, #2, #1
 8006ab2:	d135      	bne.n	8006b20 <HAL_I2C_EV_IRQHandler+0x824>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006ab4:	0609      	lsls	r1, r1, #24
 8006ab6:	d527      	bpl.n	8006b08 <HAL_I2C_EV_IRQHandler+0x80c>
 8006ab8:	0556      	lsls	r6, r2, #21
 8006aba:	d525      	bpl.n	8006b08 <HAL_I2C_EV_IRQHandler+0x80c>
 8006abc:	bb3d      	cbnz	r5, 8006b0e <HAL_I2C_EV_IRQHandler+0x812>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006abe:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8006ac2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ac4:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8006ac6:	b292      	uxth	r2, r2
 8006ac8:	2a00      	cmp	r2, #0
 8006aca:	f43f ac33 	beq.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ace:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006ad0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006ad4:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 8006ad6:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8006ad8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006ada:	3a01      	subs	r2, #1
 8006adc:	b292      	uxth	r2, r2
 8006ade:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006ae0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006ae2:	b292      	uxth	r2, r2
 8006ae4:	2a00      	cmp	r2, #0
 8006ae6:	f47f ac25 	bne.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
 8006aea:	2929      	cmp	r1, #41	; 0x29
 8006aec:	f47f ac22 	bne.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006af6:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006af8:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006afa:	6320      	str	r0, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006afc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006b00:	4620      	mov	r0, r4
 8006b02:	f7ff fa99 	bl	8006038 <HAL_I2C_SlaveTxCpltCallback>
 8006b06:	e415      	b.n	8006334 <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b08:	2d00      	cmp	r5, #0
 8006b0a:	f43f ac13 	beq.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
 8006b0e:	0595      	lsls	r5, r2, #22
 8006b10:	f57f ac10 	bpl.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8006b14:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006b16:	b292      	uxth	r2, r2
 8006b18:	2a00      	cmp	r2, #0
 8006b1a:	f47f adc9 	bne.w	80066b0 <HAL_I2C_EV_IRQHandler+0x3b4>
 8006b1e:	e409      	b.n	8006334 <HAL_I2C_EV_IRQHandler+0x38>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b20:	0648      	lsls	r0, r1, #25
 8006b22:	d527      	bpl.n	8006b74 <HAL_I2C_EV_IRQHandler+0x878>
 8006b24:	0551      	lsls	r1, r2, #21
 8006b26:	d525      	bpl.n	8006b74 <HAL_I2C_EV_IRQHandler+0x878>
 8006b28:	bb3d      	cbnz	r5, 8006b7a <HAL_I2C_EV_IRQHandler+0x87e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b2a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8006b2e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b30:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 8006b32:	b289      	uxth	r1, r1
 8006b34:	2900      	cmp	r1, #0
 8006b36:	f43f abfd 	beq.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b3a:	6919      	ldr	r1, [r3, #16]
 8006b3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b3e:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 8006b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b42:	3301      	adds	r3, #1
 8006b44:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8006b46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006b4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f47f abee 	bne.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
 8006b58:	2a2a      	cmp	r2, #42	; 0x2a
 8006b5a:	f47f abeb 	bne.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b5e:	6822      	ldr	r2, [r4, #0]
 8006b60:	6853      	ldr	r3, [r2, #4]
 8006b62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b66:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006b68:	2322      	movs	r3, #34	; 0x22
 8006b6a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b6c:	2328      	movs	r3, #40	; 0x28
 8006b6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8006b72:	e795      	b.n	8006aa0 <HAL_I2C_EV_IRQHandler+0x7a4>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b74:	2d00      	cmp	r5, #0
 8006b76:	f43f abdd 	beq.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
 8006b7a:	0592      	lsls	r2, r2, #22
 8006b7c:	f57f abda 	bpl.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8006b80:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006b82:	b292      	uxth	r2, r2
 8006b84:	2a00      	cmp	r2, #0
 8006b86:	f43f abd5 	beq.w	8006334 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b8a:	691a      	ldr	r2, [r3, #16]
 8006b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b8e:	701a      	strb	r2, [r3, #0]
 8006b90:	e64d      	b.n	800682e <HAL_I2C_EV_IRQHandler+0x532>
 8006b92:	bf00      	nop
 8006b94:	080060ed 	.word	0x080060ed
 8006b98:	ffff0000 	.word	0xffff0000

08006b9c <HAL_I2C_ER_IRQHandler>:
{
 8006b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006b9e:	6803      	ldr	r3, [r0, #0]
{
 8006ba0:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006ba2:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006ba4:	685e      	ldr	r6, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006ba6:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006baa:	f3c7 2500 	ubfx	r5, r7, #8, #1
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006bae:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006bb0:	b155      	cbz	r5, 8006bc8 <HAL_I2C_ER_IRQHandler+0x2c>
 8006bb2:	f3c6 2500 	ubfx	r5, r6, #8, #1
 8006bb6:	b13d      	cbz	r5, 8006bc8 <HAL_I2C_ER_IRQHandler+0x2c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006bb8:	f46f 7180 	mvn.w	r1, #256	; 0x100
    error |= HAL_I2C_ERROR_BERR;
 8006bbc:	2501      	movs	r5, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006bbe:	6159      	str	r1, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8006bc0:	6819      	ldr	r1, [r3, #0]
 8006bc2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8006bc6:	6019      	str	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006bc8:	05b8      	lsls	r0, r7, #22
 8006bca:	d506      	bpl.n	8006bda <HAL_I2C_ER_IRQHandler+0x3e>
 8006bcc:	05f1      	lsls	r1, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006bce:	bf42      	ittt	mi
 8006bd0:	f46f 7100 	mvnmi.w	r1, #512	; 0x200
    error |= HAL_I2C_ERROR_ARLO;
 8006bd4:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006bd8:	6159      	strmi	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006bda:	0578      	lsls	r0, r7, #21
 8006bdc:	d536      	bpl.n	8006c4c <HAL_I2C_ER_IRQHandler+0xb0>
 8006bde:	05f1      	lsls	r1, r6, #23
 8006be0:	d534      	bpl.n	8006c4c <HAL_I2C_ER_IRQHandler+0xb0>
    tmp2 = hi2c->XferCount;
 8006be2:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8006be4:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006be8:	2a20      	cmp	r2, #32
    tmp2 = hi2c->XferCount;
 8006bea:	b280      	uxth	r0, r0
    tmp3 = hi2c->State;
 8006bec:	b2c9      	uxtb	r1, r1
    tmp4 = hi2c->PreviousState;
 8006bee:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006bf2:	d15b      	bne.n	8006cac <HAL_I2C_ER_IRQHandler+0x110>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	d159      	bne.n	8006cac <HAL_I2C_ER_IRQHandler+0x110>
 8006bf8:	f001 00f7 	and.w	r0, r1, #247	; 0xf7
 8006bfc:	2821      	cmp	r0, #33	; 0x21
 8006bfe:	d004      	beq.n	8006c0a <HAL_I2C_ER_IRQHandler+0x6e>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006c00:	2928      	cmp	r1, #40	; 0x28
 8006c02:	d153      	bne.n	8006cac <HAL_I2C_ER_IRQHandler+0x110>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006c04:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
 8006c08:	d150      	bne.n	8006cac <HAL_I2C_ER_IRQHandler+0x110>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c0a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006c0e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c10:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006c12:	2908      	cmp	r1, #8
 8006c14:	d001      	beq.n	8006c1a <HAL_I2C_ER_IRQHandler+0x7e>
 8006c16:	2920      	cmp	r1, #32
 8006c18:	d12a      	bne.n	8006c70 <HAL_I2C_ER_IRQHandler+0xd4>
 8006c1a:	2a28      	cmp	r2, #40	; 0x28
 8006c1c:	d128      	bne.n	8006c70 <HAL_I2C_ER_IRQHandler+0xd4>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c1e:	4a2c      	ldr	r2, [pc, #176]	; (8006cd0 <HAL_I2C_ER_IRQHandler+0x134>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8006c20:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c22:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c2a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c30:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c38:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c3a:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8006c3c:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c3e:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006c40:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c44:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8006c48:	f7ff f9f9 	bl	800603e <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c4c:	053a      	lsls	r2, r7, #20
 8006c4e:	d53b      	bpl.n	8006cc8 <HAL_I2C_ER_IRQHandler+0x12c>
 8006c50:	05f3      	lsls	r3, r6, #23
 8006c52:	d539      	bpl.n	8006cc8 <HAL_I2C_ER_IRQHandler+0x12c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006c54:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006c58:	6823      	ldr	r3, [r4, #0]
    error |= HAL_I2C_ERROR_OVR;
 8006c5a:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006c5e:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 8006c60:	6c23      	ldr	r3, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8006c62:	4620      	mov	r0, r4
    hi2c->ErrorCode |= error;
 8006c64:	431d      	orrs	r5, r3
 8006c66:	6425      	str	r5, [r4, #64]	; 0x40
}
 8006c68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8006c6c:	f7ff ba9e 	b.w	80061ac <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006c70:	2a21      	cmp	r2, #33	; 0x21
 8006c72:	d117      	bne.n	8006ca4 <HAL_I2C_ER_IRQHandler+0x108>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c74:	4916      	ldr	r1, [pc, #88]	; (8006cd0 <HAL_I2C_ER_IRQHandler+0x134>)
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c76:	4620      	mov	r0, r4
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c78:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c7a:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c82:	2200      	movs	r2, #0
 8006c84:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c88:	685a      	ldr	r2, [r3, #4]
 8006c8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c8e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c94:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c9c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c9e:	f7ff f9cb 	bl	8006038 <HAL_I2C_SlaveTxCpltCallback>
 8006ca2:	e7d3      	b.n	8006c4c <HAL_I2C_ER_IRQHandler+0xb0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ca4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ca8:	615a      	str	r2, [r3, #20]
 8006caa:	e7cf      	b.n	8006c4c <HAL_I2C_ER_IRQHandler+0xb0>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cac:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006cb0:	2a10      	cmp	r2, #16
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cb2:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8006cb4:	f045 0504 	orr.w	r5, r5, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006cb8:	d001      	beq.n	8006cbe <HAL_I2C_ER_IRQHandler+0x122>
 8006cba:	2a40      	cmp	r2, #64	; 0x40
 8006cbc:	d1c6      	bne.n	8006c4c <HAL_I2C_ER_IRQHandler+0xb0>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	e7c1      	b.n	8006c4c <HAL_I2C_ER_IRQHandler+0xb0>
  if (error != HAL_I2C_ERROR_NONE)
 8006cc8:	2d00      	cmp	r5, #0
 8006cca:	d1c9      	bne.n	8006c60 <HAL_I2C_ER_IRQHandler+0xc4>
}
 8006ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	ffff0000 	.word	0xffff0000

08006cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006cd8:	4605      	mov	r5, r0
 8006cda:	b908      	cbnz	r0, 8006ce0 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8006cdc:	2001      	movs	r0, #1
 8006cde:	e03c      	b.n	8006d5a <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ce0:	6803      	ldr	r3, [r0, #0]
 8006ce2:	07db      	lsls	r3, r3, #31
 8006ce4:	d410      	bmi.n	8006d08 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ce6:	682b      	ldr	r3, [r5, #0]
 8006ce8:	079f      	lsls	r7, r3, #30
 8006cea:	d45d      	bmi.n	8006da8 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cec:	682b      	ldr	r3, [r5, #0]
 8006cee:	0719      	lsls	r1, r3, #28
 8006cf0:	f100 8094 	bmi.w	8006e1c <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cf4:	682b      	ldr	r3, [r5, #0]
 8006cf6:	075a      	lsls	r2, r3, #29
 8006cf8:	f100 80be 	bmi.w	8006e78 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006cfc:	69e8      	ldr	r0, [r5, #28]
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	f040 812c 	bne.w	8006f5c <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8006d04:	2000      	movs	r0, #0
 8006d06:	e028      	b.n	8006d5a <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d08:	4c8f      	ldr	r4, [pc, #572]	; (8006f48 <HAL_RCC_OscConfig+0x274>)
 8006d0a:	6863      	ldr	r3, [r4, #4]
 8006d0c:	f003 030c 	and.w	r3, r3, #12
 8006d10:	2b04      	cmp	r3, #4
 8006d12:	d007      	beq.n	8006d24 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006d14:	6863      	ldr	r3, [r4, #4]
 8006d16:	f003 030c 	and.w	r3, r3, #12
 8006d1a:	2b08      	cmp	r3, #8
 8006d1c:	d109      	bne.n	8006d32 <HAL_RCC_OscConfig+0x5e>
 8006d1e:	6863      	ldr	r3, [r4, #4]
 8006d20:	03de      	lsls	r6, r3, #15
 8006d22:	d506      	bpl.n	8006d32 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d24:	6823      	ldr	r3, [r4, #0]
 8006d26:	039c      	lsls	r4, r3, #14
 8006d28:	d5dd      	bpl.n	8006ce6 <HAL_RCC_OscConfig+0x12>
 8006d2a:	686b      	ldr	r3, [r5, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1da      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x12>
 8006d30:	e7d4      	b.n	8006cdc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d32:	686b      	ldr	r3, [r5, #4]
 8006d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d38:	d112      	bne.n	8006d60 <HAL_RCC_OscConfig+0x8c>
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d40:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006d42:	f7fe fba9 	bl	8005498 <HAL_GetTick>
 8006d46:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	0398      	lsls	r0, r3, #14
 8006d4c:	d4cb      	bmi.n	8006ce6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d4e:	f7fe fba3 	bl	8005498 <HAL_GetTick>
 8006d52:	1b80      	subs	r0, r0, r6
 8006d54:	2864      	cmp	r0, #100	; 0x64
 8006d56:	d9f7      	bls.n	8006d48 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8006d58:	2003      	movs	r0, #3
}
 8006d5a:	b002      	add	sp, #8
 8006d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d60:	b99b      	cbnz	r3, 8006d8a <HAL_RCC_OscConfig+0xb6>
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d68:	6023      	str	r3, [r4, #0]
 8006d6a:	6823      	ldr	r3, [r4, #0]
 8006d6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d70:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006d72:	f7fe fb91 	bl	8005498 <HAL_GetTick>
 8006d76:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d78:	6823      	ldr	r3, [r4, #0]
 8006d7a:	0399      	lsls	r1, r3, #14
 8006d7c:	d5b3      	bpl.n	8006ce6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d7e:	f7fe fb8b 	bl	8005498 <HAL_GetTick>
 8006d82:	1b80      	subs	r0, r0, r6
 8006d84:	2864      	cmp	r0, #100	; 0x64
 8006d86:	d9f7      	bls.n	8006d78 <HAL_RCC_OscConfig+0xa4>
 8006d88:	e7e6      	b.n	8006d58 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d8e:	6823      	ldr	r3, [r4, #0]
 8006d90:	d103      	bne.n	8006d9a <HAL_RCC_OscConfig+0xc6>
 8006d92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d96:	6023      	str	r3, [r4, #0]
 8006d98:	e7cf      	b.n	8006d3a <HAL_RCC_OscConfig+0x66>
 8006d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d9e:	6023      	str	r3, [r4, #0]
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006da6:	e7cb      	b.n	8006d40 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006da8:	4c67      	ldr	r4, [pc, #412]	; (8006f48 <HAL_RCC_OscConfig+0x274>)
 8006daa:	6863      	ldr	r3, [r4, #4]
 8006dac:	f013 0f0c 	tst.w	r3, #12
 8006db0:	d007      	beq.n	8006dc2 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006db2:	6863      	ldr	r3, [r4, #4]
 8006db4:	f003 030c 	and.w	r3, r3, #12
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	d110      	bne.n	8006dde <HAL_RCC_OscConfig+0x10a>
 8006dbc:	6863      	ldr	r3, [r4, #4]
 8006dbe:	03da      	lsls	r2, r3, #15
 8006dc0:	d40d      	bmi.n	8006dde <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dc2:	6823      	ldr	r3, [r4, #0]
 8006dc4:	079b      	lsls	r3, r3, #30
 8006dc6:	d502      	bpl.n	8006dce <HAL_RCC_OscConfig+0xfa>
 8006dc8:	692b      	ldr	r3, [r5, #16]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d186      	bne.n	8006cdc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	696a      	ldr	r2, [r5, #20]
 8006dd2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006dd6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006dda:	6023      	str	r3, [r4, #0]
 8006ddc:	e786      	b.n	8006cec <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006dde:	692a      	ldr	r2, [r5, #16]
 8006de0:	4b5a      	ldr	r3, [pc, #360]	; (8006f4c <HAL_RCC_OscConfig+0x278>)
 8006de2:	b16a      	cbz	r2, 8006e00 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8006de4:	2201      	movs	r2, #1
 8006de6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006de8:	f7fe fb56 	bl	8005498 <HAL_GetTick>
 8006dec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	079f      	lsls	r7, r3, #30
 8006df2:	d4ec      	bmi.n	8006dce <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006df4:	f7fe fb50 	bl	8005498 <HAL_GetTick>
 8006df8:	1b80      	subs	r0, r0, r6
 8006dfa:	2802      	cmp	r0, #2
 8006dfc:	d9f7      	bls.n	8006dee <HAL_RCC_OscConfig+0x11a>
 8006dfe:	e7ab      	b.n	8006d58 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8006e00:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006e02:	f7fe fb49 	bl	8005498 <HAL_GetTick>
 8006e06:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e08:	6823      	ldr	r3, [r4, #0]
 8006e0a:	0798      	lsls	r0, r3, #30
 8006e0c:	f57f af6e 	bpl.w	8006cec <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e10:	f7fe fb42 	bl	8005498 <HAL_GetTick>
 8006e14:	1b80      	subs	r0, r0, r6
 8006e16:	2802      	cmp	r0, #2
 8006e18:	d9f6      	bls.n	8006e08 <HAL_RCC_OscConfig+0x134>
 8006e1a:	e79d      	b.n	8006d58 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e1c:	69aa      	ldr	r2, [r5, #24]
 8006e1e:	4c4a      	ldr	r4, [pc, #296]	; (8006f48 <HAL_RCC_OscConfig+0x274>)
 8006e20:	4b4b      	ldr	r3, [pc, #300]	; (8006f50 <HAL_RCC_OscConfig+0x27c>)
 8006e22:	b1da      	cbz	r2, 8006e5c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8006e24:	2201      	movs	r2, #1
 8006e26:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006e28:	f7fe fb36 	bl	8005498 <HAL_GetTick>
 8006e2c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e30:	079b      	lsls	r3, r3, #30
 8006e32:	d50d      	bpl.n	8006e50 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006e34:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006e38:	4b46      	ldr	r3, [pc, #280]	; (8006f54 <HAL_RCC_OscConfig+0x280>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e40:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8006e42:	bf00      	nop
  }
  while (Delay --);
 8006e44:	9b01      	ldr	r3, [sp, #4]
 8006e46:	1e5a      	subs	r2, r3, #1
 8006e48:	9201      	str	r2, [sp, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1f9      	bne.n	8006e42 <HAL_RCC_OscConfig+0x16e>
 8006e4e:	e751      	b.n	8006cf4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e50:	f7fe fb22 	bl	8005498 <HAL_GetTick>
 8006e54:	1b80      	subs	r0, r0, r6
 8006e56:	2802      	cmp	r0, #2
 8006e58:	d9e9      	bls.n	8006e2e <HAL_RCC_OscConfig+0x15a>
 8006e5a:	e77d      	b.n	8006d58 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8006e5c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006e5e:	f7fe fb1b 	bl	8005498 <HAL_GetTick>
 8006e62:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e66:	079f      	lsls	r7, r3, #30
 8006e68:	f57f af44 	bpl.w	8006cf4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e6c:	f7fe fb14 	bl	8005498 <HAL_GetTick>
 8006e70:	1b80      	subs	r0, r0, r6
 8006e72:	2802      	cmp	r0, #2
 8006e74:	d9f6      	bls.n	8006e64 <HAL_RCC_OscConfig+0x190>
 8006e76:	e76f      	b.n	8006d58 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e78:	4c33      	ldr	r4, [pc, #204]	; (8006f48 <HAL_RCC_OscConfig+0x274>)
 8006e7a:	69e3      	ldr	r3, [r4, #28]
 8006e7c:	00d8      	lsls	r0, r3, #3
 8006e7e:	d424      	bmi.n	8006eca <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8006e80:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e82:	69e3      	ldr	r3, [r4, #28]
 8006e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e88:	61e3      	str	r3, [r4, #28]
 8006e8a:	69e3      	ldr	r3, [r4, #28]
 8006e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e94:	4e30      	ldr	r6, [pc, #192]	; (8006f58 <HAL_RCC_OscConfig+0x284>)
 8006e96:	6833      	ldr	r3, [r6, #0]
 8006e98:	05d9      	lsls	r1, r3, #23
 8006e9a:	d518      	bpl.n	8006ece <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e9c:	68eb      	ldr	r3, [r5, #12]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d126      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x21c>
 8006ea2:	6a23      	ldr	r3, [r4, #32]
 8006ea4:	f043 0301 	orr.w	r3, r3, #1
 8006ea8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8006eaa:	f7fe faf5 	bl	8005498 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eae:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006eb2:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eb4:	6a23      	ldr	r3, [r4, #32]
 8006eb6:	079b      	lsls	r3, r3, #30
 8006eb8:	d53f      	bpl.n	8006f3a <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8006eba:	2f00      	cmp	r7, #0
 8006ebc:	f43f af1e 	beq.w	8006cfc <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ec0:	69e3      	ldr	r3, [r4, #28]
 8006ec2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ec6:	61e3      	str	r3, [r4, #28]
 8006ec8:	e718      	b.n	8006cfc <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8006eca:	2700      	movs	r7, #0
 8006ecc:	e7e2      	b.n	8006e94 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ece:	6833      	ldr	r3, [r6, #0]
 8006ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ed4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006ed6:	f7fe fadf 	bl	8005498 <HAL_GetTick>
 8006eda:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006edc:	6833      	ldr	r3, [r6, #0]
 8006ede:	05da      	lsls	r2, r3, #23
 8006ee0:	d4dc      	bmi.n	8006e9c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ee2:	f7fe fad9 	bl	8005498 <HAL_GetTick>
 8006ee6:	eba0 0008 	sub.w	r0, r0, r8
 8006eea:	2864      	cmp	r0, #100	; 0x64
 8006eec:	d9f6      	bls.n	8006edc <HAL_RCC_OscConfig+0x208>
 8006eee:	e733      	b.n	8006d58 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ef0:	b9ab      	cbnz	r3, 8006f1e <HAL_RCC_OscConfig+0x24a>
 8006ef2:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ef4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ef8:	f023 0301 	bic.w	r3, r3, #1
 8006efc:	6223      	str	r3, [r4, #32]
 8006efe:	6a23      	ldr	r3, [r4, #32]
 8006f00:	f023 0304 	bic.w	r3, r3, #4
 8006f04:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8006f06:	f7fe fac7 	bl	8005498 <HAL_GetTick>
 8006f0a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f0c:	6a23      	ldr	r3, [r4, #32]
 8006f0e:	0798      	lsls	r0, r3, #30
 8006f10:	d5d3      	bpl.n	8006eba <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f12:	f7fe fac1 	bl	8005498 <HAL_GetTick>
 8006f16:	1b80      	subs	r0, r0, r6
 8006f18:	4540      	cmp	r0, r8
 8006f1a:	d9f7      	bls.n	8006f0c <HAL_RCC_OscConfig+0x238>
 8006f1c:	e71c      	b.n	8006d58 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f1e:	2b05      	cmp	r3, #5
 8006f20:	6a23      	ldr	r3, [r4, #32]
 8006f22:	d103      	bne.n	8006f2c <HAL_RCC_OscConfig+0x258>
 8006f24:	f043 0304 	orr.w	r3, r3, #4
 8006f28:	6223      	str	r3, [r4, #32]
 8006f2a:	e7ba      	b.n	8006ea2 <HAL_RCC_OscConfig+0x1ce>
 8006f2c:	f023 0301 	bic.w	r3, r3, #1
 8006f30:	6223      	str	r3, [r4, #32]
 8006f32:	6a23      	ldr	r3, [r4, #32]
 8006f34:	f023 0304 	bic.w	r3, r3, #4
 8006f38:	e7b6      	b.n	8006ea8 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f3a:	f7fe faad 	bl	8005498 <HAL_GetTick>
 8006f3e:	eba0 0008 	sub.w	r0, r0, r8
 8006f42:	42b0      	cmp	r0, r6
 8006f44:	d9b6      	bls.n	8006eb4 <HAL_RCC_OscConfig+0x1e0>
 8006f46:	e707      	b.n	8006d58 <HAL_RCC_OscConfig+0x84>
 8006f48:	40021000 	.word	0x40021000
 8006f4c:	42420000 	.word	0x42420000
 8006f50:	42420480 	.word	0x42420480
 8006f54:	20000088 	.word	0x20000088
 8006f58:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f5c:	4b2a      	ldr	r3, [pc, #168]	; (8007008 <HAL_RCC_OscConfig+0x334>)
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	461c      	mov	r4, r3
 8006f62:	f002 020c 	and.w	r2, r2, #12
 8006f66:	2a08      	cmp	r2, #8
 8006f68:	d03d      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x312>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	4e27      	ldr	r6, [pc, #156]	; (800700c <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f6e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006f70:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f72:	d12b      	bne.n	8006fcc <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8006f74:	f7fe fa90 	bl	8005498 <HAL_GetTick>
 8006f78:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	0199      	lsls	r1, r3, #6
 8006f7e:	d41f      	bmi.n	8006fc0 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006f80:	6a2b      	ldr	r3, [r5, #32]
 8006f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f86:	d105      	bne.n	8006f94 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006f88:	6862      	ldr	r2, [r4, #4]
 8006f8a:	68a9      	ldr	r1, [r5, #8]
 8006f8c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006f90:	430a      	orrs	r2, r1
 8006f92:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f94:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8006f96:	6862      	ldr	r2, [r4, #4]
 8006f98:	430b      	orrs	r3, r1
 8006f9a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8006fa6:	f7fe fa77 	bl	8005498 <HAL_GetTick>
 8006faa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	019a      	lsls	r2, r3, #6
 8006fb0:	f53f aea8 	bmi.w	8006d04 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fb4:	f7fe fa70 	bl	8005498 <HAL_GetTick>
 8006fb8:	1b40      	subs	r0, r0, r5
 8006fba:	2802      	cmp	r0, #2
 8006fbc:	d9f6      	bls.n	8006fac <HAL_RCC_OscConfig+0x2d8>
 8006fbe:	e6cb      	b.n	8006d58 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fc0:	f7fe fa6a 	bl	8005498 <HAL_GetTick>
 8006fc4:	1bc0      	subs	r0, r0, r7
 8006fc6:	2802      	cmp	r0, #2
 8006fc8:	d9d7      	bls.n	8006f7a <HAL_RCC_OscConfig+0x2a6>
 8006fca:	e6c5      	b.n	8006d58 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8006fcc:	f7fe fa64 	bl	8005498 <HAL_GetTick>
 8006fd0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fd2:	6823      	ldr	r3, [r4, #0]
 8006fd4:	019b      	lsls	r3, r3, #6
 8006fd6:	f57f ae95 	bpl.w	8006d04 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fda:	f7fe fa5d 	bl	8005498 <HAL_GetTick>
 8006fde:	1b40      	subs	r0, r0, r5
 8006fe0:	2802      	cmp	r0, #2
 8006fe2:	d9f6      	bls.n	8006fd2 <HAL_RCC_OscConfig+0x2fe>
 8006fe4:	e6b8      	b.n	8006d58 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fe6:	2801      	cmp	r0, #1
 8006fe8:	f43f aeb7 	beq.w	8006d5a <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8006fec:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fee:	6a2b      	ldr	r3, [r5, #32]
 8006ff0:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	f47f ae71 	bne.w	8006cdc <HAL_RCC_OscConfig+0x8>
 8006ffa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006ffc:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8007000:	1ac0      	subs	r0, r0, r3
 8007002:	bf18      	it	ne
 8007004:	2001      	movne	r0, #1
 8007006:	e6a8      	b.n	8006d5a <HAL_RCC_OscConfig+0x86>
 8007008:	40021000 	.word	0x40021000
 800700c:	42420060 	.word	0x42420060

08007010 <HAL_RCC_GetSysClockFreq>:
{
 8007010:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007012:	4b18      	ldr	r3, [pc, #96]	; (8007074 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8007014:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007016:	ac02      	add	r4, sp, #8
 8007018:	f103 0510 	add.w	r5, r3, #16
 800701c:	4622      	mov	r2, r4
 800701e:	6818      	ldr	r0, [r3, #0]
 8007020:	6859      	ldr	r1, [r3, #4]
 8007022:	3308      	adds	r3, #8
 8007024:	c203      	stmia	r2!, {r0, r1}
 8007026:	42ab      	cmp	r3, r5
 8007028:	4614      	mov	r4, r2
 800702a:	d1f7      	bne.n	800701c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800702c:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8007030:	4911      	ldr	r1, [pc, #68]	; (8007078 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007032:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8007036:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8007038:	f003 020c 	and.w	r2, r3, #12
 800703c:	2a08      	cmp	r2, #8
 800703e:	d117      	bne.n	8007070 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007040:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8007044:	a806      	add	r0, sp, #24
 8007046:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007048:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800704a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800704e:	d50c      	bpl.n	800706a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007050:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007052:	480a      	ldr	r0, [pc, #40]	; (800707c <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007054:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007058:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800705a:	aa06      	add	r2, sp, #24
 800705c:	4413      	add	r3, r2
 800705e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007062:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8007066:	b007      	add	sp, #28
 8007068:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800706a:	4805      	ldr	r0, [pc, #20]	; (8007080 <HAL_RCC_GetSysClockFreq+0x70>)
 800706c:	4350      	muls	r0, r2
 800706e:	e7fa      	b.n	8007066 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8007070:	4802      	ldr	r0, [pc, #8]	; (800707c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8007072:	e7f8      	b.n	8007066 <HAL_RCC_GetSysClockFreq+0x56>
 8007074:	0800a820 	.word	0x0800a820
 8007078:	40021000 	.word	0x40021000
 800707c:	007a1200 	.word	0x007a1200
 8007080:	003d0900 	.word	0x003d0900

08007084 <HAL_RCC_ClockConfig>:
{
 8007084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007088:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800708a:	4604      	mov	r4, r0
 800708c:	b910      	cbnz	r0, 8007094 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800708e:	2001      	movs	r0, #1
}
 8007090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007094:	4a44      	ldr	r2, [pc, #272]	; (80071a8 <HAL_RCC_ClockConfig+0x124>)
 8007096:	6813      	ldr	r3, [r2, #0]
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	428b      	cmp	r3, r1
 800709e:	d328      	bcc.n	80070f2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070a0:	6821      	ldr	r1, [r4, #0]
 80070a2:	078e      	lsls	r6, r1, #30
 80070a4:	d430      	bmi.n	8007108 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070a6:	07ca      	lsls	r2, r1, #31
 80070a8:	d443      	bmi.n	8007132 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070aa:	4a3f      	ldr	r2, [pc, #252]	; (80071a8 <HAL_RCC_ClockConfig+0x124>)
 80070ac:	6813      	ldr	r3, [r2, #0]
 80070ae:	f003 0307 	and.w	r3, r3, #7
 80070b2:	42ab      	cmp	r3, r5
 80070b4:	d865      	bhi.n	8007182 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070b6:	6822      	ldr	r2, [r4, #0]
 80070b8:	4d3c      	ldr	r5, [pc, #240]	; (80071ac <HAL_RCC_ClockConfig+0x128>)
 80070ba:	f012 0f04 	tst.w	r2, #4
 80070be:	d16c      	bne.n	800719a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070c0:	0713      	lsls	r3, r2, #28
 80070c2:	d506      	bpl.n	80070d2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80070c4:	686b      	ldr	r3, [r5, #4]
 80070c6:	6922      	ldr	r2, [r4, #16]
 80070c8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80070cc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80070d0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80070d2:	f7ff ff9d 	bl	8007010 <HAL_RCC_GetSysClockFreq>
 80070d6:	686b      	ldr	r3, [r5, #4]
 80070d8:	4a35      	ldr	r2, [pc, #212]	; (80071b0 <HAL_RCC_ClockConfig+0x12c>)
 80070da:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80070de:	5cd3      	ldrb	r3, [r2, r3]
 80070e0:	40d8      	lsrs	r0, r3
 80070e2:	4b34      	ldr	r3, [pc, #208]	; (80071b4 <HAL_RCC_ClockConfig+0x130>)
 80070e4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80070e6:	4b34      	ldr	r3, [pc, #208]	; (80071b8 <HAL_RCC_ClockConfig+0x134>)
 80070e8:	6818      	ldr	r0, [r3, #0]
 80070ea:	f7fe f837 	bl	800515c <HAL_InitTick>
  return HAL_OK;
 80070ee:	2000      	movs	r0, #0
 80070f0:	e7ce      	b.n	8007090 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070f2:	6813      	ldr	r3, [r2, #0]
 80070f4:	f023 0307 	bic.w	r3, r3, #7
 80070f8:	430b      	orrs	r3, r1
 80070fa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070fc:	6813      	ldr	r3, [r2, #0]
 80070fe:	f003 0307 	and.w	r3, r3, #7
 8007102:	428b      	cmp	r3, r1
 8007104:	d1c3      	bne.n	800708e <HAL_RCC_ClockConfig+0xa>
 8007106:	e7cb      	b.n	80070a0 <HAL_RCC_ClockConfig+0x1c>
 8007108:	4b28      	ldr	r3, [pc, #160]	; (80071ac <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800710a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800710e:	bf1e      	ittt	ne
 8007110:	685a      	ldrne	r2, [r3, #4]
 8007112:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8007116:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007118:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800711a:	bf42      	ittt	mi
 800711c:	685a      	ldrmi	r2, [r3, #4]
 800711e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8007122:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	68a0      	ldr	r0, [r4, #8]
 8007128:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800712c:	4302      	orrs	r2, r0
 800712e:	605a      	str	r2, [r3, #4]
 8007130:	e7b9      	b.n	80070a6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007132:	6862      	ldr	r2, [r4, #4]
 8007134:	4e1d      	ldr	r6, [pc, #116]	; (80071ac <HAL_RCC_ClockConfig+0x128>)
 8007136:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007138:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800713a:	d11a      	bne.n	8007172 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800713c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007140:	d0a5      	beq.n	800708e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007142:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007144:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007148:	f023 0303 	bic.w	r3, r3, #3
 800714c:	4313      	orrs	r3, r2
 800714e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8007150:	f7fe f9a2 	bl	8005498 <HAL_GetTick>
 8007154:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007156:	6873      	ldr	r3, [r6, #4]
 8007158:	6862      	ldr	r2, [r4, #4]
 800715a:	f003 030c 	and.w	r3, r3, #12
 800715e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007162:	d0a2      	beq.n	80070aa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007164:	f7fe f998 	bl	8005498 <HAL_GetTick>
 8007168:	1bc0      	subs	r0, r0, r7
 800716a:	4540      	cmp	r0, r8
 800716c:	d9f3      	bls.n	8007156 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800716e:	2003      	movs	r0, #3
 8007170:	e78e      	b.n	8007090 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007172:	2a02      	cmp	r2, #2
 8007174:	d102      	bne.n	800717c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007176:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800717a:	e7e1      	b.n	8007140 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800717c:	f013 0f02 	tst.w	r3, #2
 8007180:	e7de      	b.n	8007140 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007182:	6813      	ldr	r3, [r2, #0]
 8007184:	f023 0307 	bic.w	r3, r3, #7
 8007188:	432b      	orrs	r3, r5
 800718a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800718c:	6813      	ldr	r3, [r2, #0]
 800718e:	f003 0307 	and.w	r3, r3, #7
 8007192:	42ab      	cmp	r3, r5
 8007194:	f47f af7b 	bne.w	800708e <HAL_RCC_ClockConfig+0xa>
 8007198:	e78d      	b.n	80070b6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800719a:	686b      	ldr	r3, [r5, #4]
 800719c:	68e1      	ldr	r1, [r4, #12]
 800719e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80071a2:	430b      	orrs	r3, r1
 80071a4:	606b      	str	r3, [r5, #4]
 80071a6:	e78b      	b.n	80070c0 <HAL_RCC_ClockConfig+0x3c>
 80071a8:	40022000 	.word	0x40022000
 80071ac:	40021000 	.word	0x40021000
 80071b0:	0800a8ce 	.word	0x0800a8ce
 80071b4:	20000088 	.word	0x20000088
 80071b8:	20000090 	.word	0x20000090

080071bc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80071bc:	4b04      	ldr	r3, [pc, #16]	; (80071d0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80071be:	4a05      	ldr	r2, [pc, #20]	; (80071d4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80071c6:	5cd3      	ldrb	r3, [r2, r3]
 80071c8:	4a03      	ldr	r2, [pc, #12]	; (80071d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80071ca:	6810      	ldr	r0, [r2, #0]
}
 80071cc:	40d8      	lsrs	r0, r3
 80071ce:	4770      	bx	lr
 80071d0:	40021000 	.word	0x40021000
 80071d4:	0800a8de 	.word	0x0800a8de
 80071d8:	20000088 	.word	0x20000088

080071dc <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80071dc:	230f      	movs	r3, #15
 80071de:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80071e0:	4b0b      	ldr	r3, [pc, #44]	; (8007210 <HAL_RCC_GetClockConfig+0x34>)
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	f002 0203 	and.w	r2, r2, #3
 80071e8:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80071f0:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80071f8:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	08db      	lsrs	r3, r3, #3
 80071fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007202:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007204:	4b03      	ldr	r3, [pc, #12]	; (8007214 <HAL_RCC_GetClockConfig+0x38>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0307 	and.w	r3, r3, #7
 800720c:	600b      	str	r3, [r1, #0]
}
 800720e:	4770      	bx	lr
 8007210:	40021000 	.word	0x40021000
 8007214:	40022000 	.word	0x40022000

08007218 <SPI_WaitFlagStateUntilTimeout.constprop.6>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8007218:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800721c:	461c      	mov	r4, r3
 800721e:	4616      	mov	r6, r2
 8007220:	460f      	mov	r7, r1
 8007222:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007224:	f7fe f938 	bl	8005498 <HAL_GetTick>
 8007228:	4434      	add	r4, r6
 800722a:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 800722c:	f7fe f934 	bl	8005498 <HAL_GetTick>
 8007230:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007232:	4b23      	ldr	r3, [pc, #140]	; (80072c0 <SPI_WaitFlagStateUntilTimeout.constprop.6+0xa8>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800723a:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800723c:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 800723e:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007240:	6893      	ldr	r3, [r2, #8]
 8007242:	ea37 0303 	bics.w	r3, r7, r3
 8007246:	d001      	beq.n	800724c <SPI_WaitFlagStateUntilTimeout.constprop.6+0x34>
    }
  }

  return HAL_OK;
 8007248:	2000      	movs	r0, #0
 800724a:	e02e      	b.n	80072aa <SPI_WaitFlagStateUntilTimeout.constprop.6+0x92>
    if (Timeout != HAL_MAX_DELAY)
 800724c:	1c73      	adds	r3, r6, #1
 800724e:	d0f7      	beq.n	8007240 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007250:	f7fe f922 	bl	8005498 <HAL_GetTick>
 8007254:	eba0 0008 	sub.w	r0, r0, r8
 8007258:	42a0      	cmp	r0, r4
 800725a:	d329      	bcc.n	80072b0 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800725c:	682b      	ldr	r3, [r5, #0]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007264:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007266:	686a      	ldr	r2, [r5, #4]
 8007268:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800726c:	d10a      	bne.n	8007284 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x6c>
 800726e:	68aa      	ldr	r2, [r5, #8]
 8007270:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007274:	d002      	beq.n	800727c <SPI_WaitFlagStateUntilTimeout.constprop.6+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007276:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800727a:	d103      	bne.n	8007284 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x6c>
          __HAL_SPI_DISABLE(hspi);
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007282:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007284:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007286:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800728a:	d107      	bne.n	800729c <SPI_WaitFlagStateUntilTimeout.constprop.6+0x84>
          SPI_RESET_CRC(hspi);
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800729a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800729c:	2301      	movs	r3, #1
 800729e:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80072a2:	2300      	movs	r3, #0
 80072a4:	2003      	movs	r0, #3
 80072a6:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 80072aa:	b002      	add	sp, #8
 80072ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 80072b0:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80072b2:	2b00      	cmp	r3, #0
      count--;
 80072b4:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80072b6:	bf08      	it	eq
 80072b8:	2400      	moveq	r4, #0
      count--;
 80072ba:	3b01      	subs	r3, #1
 80072bc:	e7be      	b.n	800723c <SPI_WaitFlagStateUntilTimeout.constprop.6+0x24>
 80072be:	bf00      	nop
 80072c0:	20000088 	.word	0x20000088

080072c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80072c4:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072c6:	4613      	mov	r3, r2
 80072c8:	460a      	mov	r2, r1
 80072ca:	2180      	movs	r1, #128	; 0x80
{
 80072cc:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072ce:	f7ff ffa3 	bl	8007218 <SPI_WaitFlagStateUntilTimeout.constprop.6>
 80072d2:	b120      	cbz	r0, 80072de <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 80072d4:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80072d8:	f043 0320 	orr.w	r3, r3, #32
 80072dc:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 80072de:	bd10      	pop	{r4, pc}

080072e0 <HAL_SPI_Init>:
{
 80072e0:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80072e2:	4604      	mov	r4, r0
 80072e4:	2800      	cmp	r0, #0
 80072e6:	d051      	beq.n	800738c <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d14a      	bne.n	8007384 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072ee:	6842      	ldr	r2, [r0, #4]
 80072f0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80072f4:	d000      	beq.n	80072f8 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072f6:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072f8:	2300      	movs	r3, #0
 80072fa:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80072fc:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8007300:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007304:	b923      	cbnz	r3, 8007310 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8007306:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800730a:	4620      	mov	r0, r4
 800730c:	f7fd fed0 	bl	80050b0 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8007310:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8007312:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8007314:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8007318:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800731a:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 800731c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007320:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007322:	6863      	ldr	r3, [r4, #4]
 8007324:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8007328:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800732c:	4303      	orrs	r3, r0
 800732e:	68e0      	ldr	r0, [r4, #12]
 8007330:	69a1      	ldr	r1, [r4, #24]
 8007332:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8007336:	4303      	orrs	r3, r0
 8007338:	6920      	ldr	r0, [r4, #16]
 800733a:	f000 0002 	and.w	r0, r0, #2
 800733e:	4303      	orrs	r3, r0
 8007340:	6960      	ldr	r0, [r4, #20]
 8007342:	f000 0001 	and.w	r0, r0, #1
 8007346:	4303      	orrs	r3, r0
 8007348:	f401 7000 	and.w	r0, r1, #512	; 0x200
 800734c:	4303      	orrs	r3, r0
 800734e:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007350:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007352:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8007356:	4303      	orrs	r3, r0
 8007358:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800735a:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800735e:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8007362:	4303      	orrs	r3, r0
 8007364:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007366:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 800736a:	4303      	orrs	r3, r0
 800736c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800736e:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007370:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007372:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007374:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007378:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800737a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800737c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800737e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8007382:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007384:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800738a:	e7b5      	b.n	80072f8 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800738c:	2001      	movs	r0, #1
 800738e:	e7f8      	b.n	8007382 <HAL_SPI_Init+0xa2>

08007390 <HAL_SPI_TransmitReceive>:
{
 8007390:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007394:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8007396:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800739a:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800739c:	2b01      	cmp	r3, #1
{
 800739e:	460d      	mov	r5, r1
 80073a0:	4691      	mov	r9, r2
 80073a2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80073a4:	f000 80e2 	beq.w	800756c <HAL_SPI_TransmitReceive+0x1dc>
 80073a8:	2301      	movs	r3, #1
 80073aa:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80073ae:	f7fe f873 	bl	8005498 <HAL_GetTick>
  tmp_state           = hspi->State;
 80073b2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 80073b6:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 80073b8:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80073ba:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 80073bc:	6861      	ldr	r1, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80073be:	d00a      	beq.n	80073d6 <HAL_SPI_TransmitReceive+0x46>
 80073c0:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80073c4:	f040 80d0 	bne.w	8007568 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80073c8:	68a0      	ldr	r0, [r4, #8]
 80073ca:	2800      	cmp	r0, #0
 80073cc:	f040 80cc 	bne.w	8007568 <HAL_SPI_TransmitReceive+0x1d8>
 80073d0:	2b04      	cmp	r3, #4
 80073d2:	f040 80c9 	bne.w	8007568 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80073d6:	2d00      	cmp	r5, #0
 80073d8:	f000 80c4 	beq.w	8007564 <HAL_SPI_TransmitReceive+0x1d4>
 80073dc:	f1b9 0f00 	cmp.w	r9, #0
 80073e0:	f000 80c0 	beq.w	8007564 <HAL_SPI_TransmitReceive+0x1d4>
 80073e4:	2e00      	cmp	r6, #0
 80073e6:	f000 80bd 	beq.w	8007564 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073ea:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80073ee:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073f2:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80073f4:	bf1c      	itt	ne
 80073f6:	2305      	movne	r3, #5
 80073f8:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073fc:	2300      	movs	r3, #0
 80073fe:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8007400:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007404:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8007406:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8007408:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800740a:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 800740c:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800740e:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8007410:	bf58      	it	pl
 8007412:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007414:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8007416:	bf58      	it	pl
 8007418:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 800741c:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 800741e:	bf58      	it	pl
 8007420:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007422:	68e2      	ldr	r2, [r4, #12]
 8007424:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007428:	d158      	bne.n	80074dc <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800742a:	b109      	cbz	r1, 8007430 <HAL_SPI_TransmitReceive+0xa0>
 800742c:	2e01      	cmp	r6, #1
 800742e:	d107      	bne.n	8007440 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007430:	f835 2b02 	ldrh.w	r2, [r5], #2
 8007434:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8007436:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007438:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800743a:	3b01      	subs	r3, #1
 800743c:	b29b      	uxth	r3, r3
 800743e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8007440:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007442:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007444:	b29b      	uxth	r3, r3
 8007446:	b9ab      	cbnz	r3, 8007474 <HAL_SPI_TransmitReceive+0xe4>
 8007448:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800744a:	b29b      	uxth	r3, r3
 800744c:	b993      	cbnz	r3, 8007474 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800744e:	4642      	mov	r2, r8
 8007450:	4639      	mov	r1, r7
 8007452:	4620      	mov	r0, r4
 8007454:	f7ff ff36 	bl	80072c4 <SPI_EndRxTxTransaction>
 8007458:	2800      	cmp	r0, #0
 800745a:	f040 8081 	bne.w	8007560 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800745e:	68a3      	ldr	r3, [r4, #8]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d132      	bne.n	80074ca <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	9001      	str	r0, [sp, #4]
 8007468:	68da      	ldr	r2, [r3, #12]
 800746a:	9201      	str	r2, [sp, #4]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	9301      	str	r3, [sp, #4]
 8007470:	9b01      	ldr	r3, [sp, #4]
 8007472:	e02a      	b.n	80074ca <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007474:	6822      	ldr	r2, [r4, #0]
 8007476:	6893      	ldr	r3, [r2, #8]
 8007478:	0799      	lsls	r1, r3, #30
 800747a:	d50d      	bpl.n	8007498 <HAL_SPI_TransmitReceive+0x108>
 800747c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800747e:	b29b      	uxth	r3, r3
 8007480:	b153      	cbz	r3, 8007498 <HAL_SPI_TransmitReceive+0x108>
 8007482:	b14d      	cbz	r5, 8007498 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 0U;
 8007484:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007486:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007488:	f833 1b02 	ldrh.w	r1, [r3], #2
 800748c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800748e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8007490:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007492:	3b01      	subs	r3, #1
 8007494:	b29b      	uxth	r3, r3
 8007496:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007498:	6893      	ldr	r3, [r2, #8]
 800749a:	07db      	lsls	r3, r3, #31
 800749c:	d50c      	bpl.n	80074b8 <HAL_SPI_TransmitReceive+0x128>
 800749e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	b14b      	cbz	r3, 80074b8 <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 80074a4:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074a6:	68d2      	ldr	r2, [r2, #12]
 80074a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80074aa:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074ae:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80074b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80074b2:	3b01      	subs	r3, #1
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80074b8:	f7fd ffee 	bl	8005498 <HAL_GetTick>
 80074bc:	eba0 0008 	sub.w	r0, r0, r8
 80074c0:	4287      	cmp	r7, r0
 80074c2:	d8be      	bhi.n	8007442 <HAL_SPI_TransmitReceive+0xb2>
 80074c4:	1c7e      	adds	r6, r7, #1
 80074c6:	d0bc      	beq.n	8007442 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 80074c8:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80074ca:	2301      	movs	r3, #1
 80074cc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80074d0:	2300      	movs	r3, #0
 80074d2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80074d6:	b003      	add	sp, #12
 80074d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074dc:	b109      	cbz	r1, 80074e2 <HAL_SPI_TransmitReceive+0x152>
 80074de:	2e01      	cmp	r6, #1
 80074e0:	d108      	bne.n	80074f4 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074e2:	782a      	ldrb	r2, [r5, #0]
 80074e4:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80074e8:	3301      	adds	r3, #1
 80074ea:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80074ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80074ee:	3b01      	subs	r3, #1
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80074f4:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	b91b      	cbnz	r3, 8007504 <HAL_SPI_TransmitReceive+0x174>
 80074fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80074fe:	b29b      	uxth	r3, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	d0a4      	beq.n	800744e <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007504:	6822      	ldr	r2, [r4, #0]
 8007506:	6893      	ldr	r3, [r2, #8]
 8007508:	0798      	lsls	r0, r3, #30
 800750a:	d50e      	bpl.n	800752a <HAL_SPI_TransmitReceive+0x19a>
 800750c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800750e:	b29b      	uxth	r3, r3
 8007510:	b15b      	cbz	r3, 800752a <HAL_SPI_TransmitReceive+0x19a>
 8007512:	b155      	cbz	r5, 800752a <HAL_SPI_TransmitReceive+0x19a>
        txallowed = 0U;
 8007514:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007516:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 800751c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800751e:	3301      	adds	r3, #1
 8007520:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8007522:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007524:	3b01      	subs	r3, #1
 8007526:	b29b      	uxth	r3, r3
 8007528:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800752a:	6822      	ldr	r2, [r4, #0]
 800752c:	6893      	ldr	r3, [r2, #8]
 800752e:	07d9      	lsls	r1, r3, #31
 8007530:	d50d      	bpl.n	800754e <HAL_SPI_TransmitReceive+0x1be>
 8007532:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007534:	b29b      	uxth	r3, r3
 8007536:	b153      	cbz	r3, 800754e <HAL_SPI_TransmitReceive+0x1be>
        txallowed = 1U;
 8007538:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800753a:	68d2      	ldr	r2, [r2, #12]
 800753c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800753e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007540:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007542:	3301      	adds	r3, #1
 8007544:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8007546:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007548:	3b01      	subs	r3, #1
 800754a:	b29b      	uxth	r3, r3
 800754c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800754e:	f7fd ffa3 	bl	8005498 <HAL_GetTick>
 8007552:	eba0 0008 	sub.w	r0, r0, r8
 8007556:	4287      	cmp	r7, r0
 8007558:	d8cd      	bhi.n	80074f6 <HAL_SPI_TransmitReceive+0x166>
 800755a:	1c7b      	adds	r3, r7, #1
 800755c:	d0cb      	beq.n	80074f6 <HAL_SPI_TransmitReceive+0x166>
 800755e:	e7b3      	b.n	80074c8 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007560:	2320      	movs	r3, #32
 8007562:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007564:	2001      	movs	r0, #1
 8007566:	e7b0      	b.n	80074ca <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8007568:	2002      	movs	r0, #2
 800756a:	e7ae      	b.n	80074ca <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 800756c:	2002      	movs	r0, #2
 800756e:	e7b2      	b.n	80074d6 <HAL_SPI_TransmitReceive+0x146>

08007570 <HAL_SPI_ErrorCallback>:
 8007570:	4770      	bx	lr
	...

08007574 <HAL_SPI_IRQHandler>:
{
 8007574:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8007576:	6803      	ldr	r3, [r0, #0]
{
 8007578:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800757a:	685d      	ldr	r5, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800757c:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800757e:	0991      	lsrs	r1, r2, #6
 8007580:	f011 0601 	ands.w	r6, r1, #1
 8007584:	d10a      	bne.n	800759c <HAL_SPI_IRQHandler+0x28>
 8007586:	f012 0f01 	tst.w	r2, #1
 800758a:	d007      	beq.n	800759c <HAL_SPI_IRQHandler+0x28>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800758c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007590:	d004      	beq.n	800759c <HAL_SPI_IRQHandler+0x28>
    hspi->RxISR(hspi);
 8007592:	6c03      	ldr	r3, [r0, #64]	; 0x40
}
 8007594:	b004      	add	sp, #16
 8007596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hspi->TxISR(hspi);
 800759a:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800759c:	0790      	lsls	r0, r2, #30
 800759e:	d504      	bpl.n	80075aa <HAL_SPI_IRQHandler+0x36>
 80075a0:	0628      	lsls	r0, r5, #24
 80075a2:	d502      	bpl.n	80075aa <HAL_SPI_IRQHandler+0x36>
    hspi->TxISR(hspi);
 80075a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80075a6:	4620      	mov	r0, r4
 80075a8:	e7f4      	b.n	8007594 <HAL_SPI_IRQHandler+0x20>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80075aa:	0952      	lsrs	r2, r2, #5
 80075ac:	4311      	orrs	r1, r2
 80075ae:	07c9      	lsls	r1, r1, #31
 80075b0:	d54c      	bpl.n	800764c <HAL_SPI_IRQHandler+0xd8>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80075b2:	06a8      	lsls	r0, r5, #26
 80075b4:	d54a      	bpl.n	800764c <HAL_SPI_IRQHandler+0xd8>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80075b6:	b176      	cbz	r6, 80075d6 <HAL_SPI_IRQHandler+0x62>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80075b8:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 80075bc:	2000      	movs	r0, #0
 80075be:	2903      	cmp	r1, #3
 80075c0:	d03e      	beq.n	8007640 <HAL_SPI_IRQHandler+0xcc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80075c2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80075c4:	f041 0104 	orr.w	r1, r1, #4
 80075c8:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075ca:	9001      	str	r0, [sp, #4]
 80075cc:	68d9      	ldr	r1, [r3, #12]
 80075ce:	9101      	str	r1, [sp, #4]
 80075d0:	6899      	ldr	r1, [r3, #8]
 80075d2:	9101      	str	r1, [sp, #4]
 80075d4:	9901      	ldr	r1, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80075d6:	07d1      	lsls	r1, r2, #31
 80075d8:	d50c      	bpl.n	80075f4 <HAL_SPI_IRQHandler+0x80>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80075da:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80075dc:	f042 0201 	orr.w	r2, r2, #1
 80075e0:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80075e2:	2200      	movs	r2, #0
 80075e4:	9203      	str	r2, [sp, #12]
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	9203      	str	r2, [sp, #12]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075f4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80075f6:	b34a      	cbz	r2, 800764c <HAL_SPI_IRQHandler+0xd8>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80075fe:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8007600:	2201      	movs	r2, #1
 8007602:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007606:	07aa      	lsls	r2, r5, #30
 8007608:	d022      	beq.n	8007650 <HAL_SPI_IRQHandler+0xdc>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800760a:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800760c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800760e:	f022 0203 	bic.w	r2, r2, #3
 8007612:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8007614:	b140      	cbz	r0, 8007628 <HAL_SPI_IRQHandler+0xb4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007616:	4b10      	ldr	r3, [pc, #64]	; (8007658 <HAL_SPI_IRQHandler+0xe4>)
 8007618:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800761a:	f7fd ffa9 	bl	8005570 <HAL_DMA_Abort_IT>
 800761e:	b118      	cbz	r0, 8007628 <HAL_SPI_IRQHandler+0xb4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007620:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007626:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007628:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800762a:	b178      	cbz	r0, 800764c <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800762c:	4b0a      	ldr	r3, [pc, #40]	; (8007658 <HAL_SPI_IRQHandler+0xe4>)
 800762e:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007630:	f7fd ff9e 	bl	8005570 <HAL_DMA_Abort_IT>
 8007634:	b150      	cbz	r0, 800764c <HAL_SPI_IRQHandler+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007636:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800763c:	6563      	str	r3, [r4, #84]	; 0x54
 800763e:	e005      	b.n	800764c <HAL_SPI_IRQHandler+0xd8>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007640:	9002      	str	r0, [sp, #8]
 8007642:	68da      	ldr	r2, [r3, #12]
 8007644:	9202      	str	r2, [sp, #8]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	9302      	str	r3, [sp, #8]
 800764a:	9b02      	ldr	r3, [sp, #8]
}
 800764c:	b004      	add	sp, #16
 800764e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_SPI_ErrorCallback(hspi);
 8007650:	4620      	mov	r0, r4
 8007652:	f7ff ff8d 	bl	8007570 <HAL_SPI_ErrorCallback>
 8007656:	e7f9      	b.n	800764c <HAL_SPI_IRQHandler+0xd8>
 8007658:	0800765d 	.word	0x0800765d

0800765c <SPI_DMAAbortOnError>:
{
 800765c:	b508      	push	{r3, lr}
  hspi->RxXferCount = 0U;
 800765e:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007660:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8007662:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007664:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8007666:	f7ff ff83 	bl	8007570 <HAL_SPI_ErrorCallback>
}
 800766a:	bd08      	pop	{r3, pc}

0800766c <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800766c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007670:	2b01      	cmp	r3, #1
 8007672:	d11c      	bne.n	80076ae <HAL_TIM_Base_Start+0x42>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007674:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007676:	4a0f      	ldr	r2, [pc, #60]	; (80076b4 <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007678:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800767c:	6803      	ldr	r3, [r0, #0]
 800767e:	4293      	cmp	r3, r2
 8007680:	d00a      	beq.n	8007698 <HAL_TIM_Base_Start+0x2c>
 8007682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007686:	d007      	beq.n	8007698 <HAL_TIM_Base_Start+0x2c>
 8007688:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800768c:	4293      	cmp	r3, r2
 800768e:	d003      	beq.n	8007698 <HAL_TIM_Base_Start+0x2c>
 8007690:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007694:	4293      	cmp	r3, r2
 8007696:	d104      	bne.n	80076a2 <HAL_TIM_Base_Start+0x36>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007698:	689a      	ldr	r2, [r3, #8]
 800769a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800769e:	2a06      	cmp	r2, #6
 80076a0:	d003      	beq.n	80076aa <HAL_TIM_Base_Start+0x3e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	f042 0201 	orr.w	r2, r2, #1
 80076a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076aa:	2000      	movs	r0, #0
}
 80076ac:	4770      	bx	lr
    return HAL_ERROR;
 80076ae:	2001      	movs	r0, #1
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	40012c00 	.word	0x40012c00

080076b8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076b8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d120      	bne.n	8007702 <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c0:	2302      	movs	r3, #2
 80076c2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076c6:	6803      	ldr	r3, [r0, #0]
 80076c8:	68da      	ldr	r2, [r3, #12]
 80076ca:	f042 0201 	orr.w	r2, r2, #1
 80076ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076d0:	4a0d      	ldr	r2, [pc, #52]	; (8007708 <HAL_TIM_Base_Start_IT+0x50>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d00a      	beq.n	80076ec <HAL_TIM_Base_Start_IT+0x34>
 80076d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076da:	d007      	beq.n	80076ec <HAL_TIM_Base_Start_IT+0x34>
 80076dc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d003      	beq.n	80076ec <HAL_TIM_Base_Start_IT+0x34>
 80076e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d104      	bne.n	80076f6 <HAL_TIM_Base_Start_IT+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076ec:	689a      	ldr	r2, [r3, #8]
 80076ee:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076f2:	2a06      	cmp	r2, #6
 80076f4:	d003      	beq.n	80076fe <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	f042 0201 	orr.w	r2, r2, #1
 80076fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076fe:	2000      	movs	r0, #0
}
 8007700:	4770      	bx	lr
    return HAL_ERROR;
 8007702:	2001      	movs	r0, #1
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	40012c00 	.word	0x40012c00

0800770c <HAL_TIM_OC_DelayElapsedCallback>:
 800770c:	4770      	bx	lr

0800770e <HAL_TIM_IC_CaptureCallback>:
 800770e:	4770      	bx	lr

08007710 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007710:	4770      	bx	lr

08007712 <HAL_TIM_TriggerCallback>:
 8007712:	4770      	bx	lr

08007714 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007714:	6803      	ldr	r3, [r0, #0]
{
 8007716:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007718:	691a      	ldr	r2, [r3, #16]
{
 800771a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800771c:	0791      	lsls	r1, r2, #30
 800771e:	d50e      	bpl.n	800773e <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007720:	68da      	ldr	r2, [r3, #12]
 8007722:	0792      	lsls	r2, r2, #30
 8007724:	d50b      	bpl.n	800773e <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007726:	f06f 0202 	mvn.w	r2, #2
 800772a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800772c:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800772e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007730:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007732:	079b      	lsls	r3, r3, #30
 8007734:	d077      	beq.n	8007826 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007736:	f7ff ffea 	bl	800770e <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800773a:	2300      	movs	r3, #0
 800773c:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	691a      	ldr	r2, [r3, #16]
 8007742:	0750      	lsls	r0, r2, #29
 8007744:	d510      	bpl.n	8007768 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007746:	68da      	ldr	r2, [r3, #12]
 8007748:	0751      	lsls	r1, r2, #29
 800774a:	d50d      	bpl.n	8007768 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800774c:	f06f 0204 	mvn.w	r2, #4
 8007750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007752:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007754:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007756:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007758:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800775c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800775e:	d068      	beq.n	8007832 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8007760:	f7ff ffd5 	bl	800770e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007764:	2300      	movs	r3, #0
 8007766:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007768:	6823      	ldr	r3, [r4, #0]
 800776a:	691a      	ldr	r2, [r3, #16]
 800776c:	0712      	lsls	r2, r2, #28
 800776e:	d50f      	bpl.n	8007790 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007770:	68da      	ldr	r2, [r3, #12]
 8007772:	0710      	lsls	r0, r2, #28
 8007774:	d50c      	bpl.n	8007790 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007776:	f06f 0208 	mvn.w	r2, #8
 800777a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800777c:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800777e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007780:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007782:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007784:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007786:	d05a      	beq.n	800783e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8007788:	f7ff ffc1 	bl	800770e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800778c:	2300      	movs	r3, #0
 800778e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007790:	6823      	ldr	r3, [r4, #0]
 8007792:	691a      	ldr	r2, [r3, #16]
 8007794:	06d2      	lsls	r2, r2, #27
 8007796:	d510      	bpl.n	80077ba <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007798:	68da      	ldr	r2, [r3, #12]
 800779a:	06d0      	lsls	r0, r2, #27
 800779c:	d50d      	bpl.n	80077ba <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800779e:	f06f 0210 	mvn.w	r2, #16
 80077a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077a4:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077a6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077a8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077aa:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ae:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077b0:	d04b      	beq.n	800784a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80077b2:	f7ff ffac 	bl	800770e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077b6:	2300      	movs	r3, #0
 80077b8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	691a      	ldr	r2, [r3, #16]
 80077be:	07d1      	lsls	r1, r2, #31
 80077c0:	d508      	bpl.n	80077d4 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077c2:	68da      	ldr	r2, [r3, #12]
 80077c4:	07d2      	lsls	r2, r2, #31
 80077c6:	d505      	bpl.n	80077d4 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077c8:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077cc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077ce:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80077d0:	f7fd fbf0 	bl	8004fb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077d4:	6823      	ldr	r3, [r4, #0]
 80077d6:	691a      	ldr	r2, [r3, #16]
 80077d8:	0610      	lsls	r0, r2, #24
 80077da:	d508      	bpl.n	80077ee <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077dc:	68da      	ldr	r2, [r3, #12]
 80077de:	0611      	lsls	r1, r2, #24
 80077e0:	d505      	bpl.n	80077ee <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077e6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077e8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80077ea:	f000 f96a 	bl	8007ac2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	691a      	ldr	r2, [r3, #16]
 80077f2:	0652      	lsls	r2, r2, #25
 80077f4:	d508      	bpl.n	8007808 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	0650      	lsls	r0, r2, #25
 80077fa:	d505      	bpl.n	8007808 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007800:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007802:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007804:	f7ff ff85 	bl	8007712 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	691a      	ldr	r2, [r3, #16]
 800780c:	0691      	lsls	r1, r2, #26
 800780e:	d522      	bpl.n	8007856 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007810:	68da      	ldr	r2, [r3, #12]
 8007812:	0692      	lsls	r2, r2, #26
 8007814:	d51f      	bpl.n	8007856 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007816:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800781a:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800781c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007820:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007822:	f000 b94d 	b.w	8007ac0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007826:	f7ff ff71 	bl	800770c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800782a:	4620      	mov	r0, r4
 800782c:	f7ff ff70 	bl	8007710 <HAL_TIM_PWM_PulseFinishedCallback>
 8007830:	e783      	b.n	800773a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007832:	f7ff ff6b 	bl	800770c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007836:	4620      	mov	r0, r4
 8007838:	f7ff ff6a 	bl	8007710 <HAL_TIM_PWM_PulseFinishedCallback>
 800783c:	e792      	b.n	8007764 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800783e:	f7ff ff65 	bl	800770c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007842:	4620      	mov	r0, r4
 8007844:	f7ff ff64 	bl	8007710 <HAL_TIM_PWM_PulseFinishedCallback>
 8007848:	e7a0      	b.n	800778c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800784a:	f7ff ff5f 	bl	800770c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800784e:	4620      	mov	r0, r4
 8007850:	f7ff ff5e 	bl	8007710 <HAL_TIM_PWM_PulseFinishedCallback>
 8007854:	e7af      	b.n	80077b6 <HAL_TIM_IRQHandler+0xa2>
}
 8007856:	bd10      	pop	{r4, pc}

08007858 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007858:	4a1a      	ldr	r2, [pc, #104]	; (80078c4 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800785a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800785c:	4290      	cmp	r0, r2
 800785e:	d00a      	beq.n	8007876 <TIM_Base_SetConfig+0x1e>
 8007860:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007864:	d007      	beq.n	8007876 <TIM_Base_SetConfig+0x1e>
 8007866:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800786a:	4290      	cmp	r0, r2
 800786c:	d003      	beq.n	8007876 <TIM_Base_SetConfig+0x1e>
 800786e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007872:	4290      	cmp	r0, r2
 8007874:	d115      	bne.n	80078a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8007876:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800787c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800787e:	4a11      	ldr	r2, [pc, #68]	; (80078c4 <TIM_Base_SetConfig+0x6c>)
 8007880:	4290      	cmp	r0, r2
 8007882:	d00a      	beq.n	800789a <TIM_Base_SetConfig+0x42>
 8007884:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007888:	d007      	beq.n	800789a <TIM_Base_SetConfig+0x42>
 800788a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800788e:	4290      	cmp	r0, r2
 8007890:	d003      	beq.n	800789a <TIM_Base_SetConfig+0x42>
 8007892:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007896:	4290      	cmp	r0, r2
 8007898:	d103      	bne.n	80078a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800789a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800789c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078a0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078a2:	694a      	ldr	r2, [r1, #20]
 80078a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078a8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80078aa:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078ac:	688b      	ldr	r3, [r1, #8]
 80078ae:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078b0:	680b      	ldr	r3, [r1, #0]
 80078b2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078b4:	4b03      	ldr	r3, [pc, #12]	; (80078c4 <TIM_Base_SetConfig+0x6c>)
 80078b6:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078b8:	bf04      	itt	eq
 80078ba:	690b      	ldreq	r3, [r1, #16]
 80078bc:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078be:	2301      	movs	r3, #1
 80078c0:	6143      	str	r3, [r0, #20]
}
 80078c2:	4770      	bx	lr
 80078c4:	40012c00 	.word	0x40012c00

080078c8 <HAL_TIM_Base_Init>:
{
 80078c8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80078ca:	4604      	mov	r4, r0
 80078cc:	b330      	cbz	r0, 800791c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80078ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80078d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80078d6:	b91b      	cbnz	r3, 80078e0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80078d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80078dc:	f7fd fc2a 	bl	8005134 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80078e0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078e2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80078e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078e8:	1d21      	adds	r1, r4, #4
 80078ea:	f7ff ffb5 	bl	8007858 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078ee:	2301      	movs	r3, #1
  return HAL_OK;
 80078f0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078f2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80078fa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80078fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007902:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007906:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800790a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800790e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007912:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007916:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800791a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800791c:	2001      	movs	r0, #1
 800791e:	e7fc      	b.n	800791a <HAL_TIM_Base_Init+0x52>

08007920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007920:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007922:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007924:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007926:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800792a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800792e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007930:	6083      	str	r3, [r0, #8]
}
 8007932:	bd10      	pop	{r4, pc}

08007934 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007934:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8007938:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800793a:	2b01      	cmp	r3, #1
{
 800793c:	4604      	mov	r4, r0
 800793e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8007942:	d019      	beq.n	8007978 <HAL_TIM_ConfigClockSource+0x44>
 8007944:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8007946:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800794a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800794c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8007950:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007952:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007956:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800795a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800795c:	680b      	ldr	r3, [r1, #0]
 800795e:	2b40      	cmp	r3, #64	; 0x40
 8007960:	d065      	beq.n	8007a2e <HAL_TIM_ConfigClockSource+0xfa>
 8007962:	d815      	bhi.n	8007990 <HAL_TIM_ConfigClockSource+0x5c>
 8007964:	2b10      	cmp	r3, #16
 8007966:	d00c      	beq.n	8007982 <HAL_TIM_ConfigClockSource+0x4e>
 8007968:	d807      	bhi.n	800797a <HAL_TIM_ConfigClockSource+0x46>
 800796a:	b153      	cbz	r3, 8007982 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 800796c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800796e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007970:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007974:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007978:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800797a:	2b20      	cmp	r3, #32
 800797c:	d001      	beq.n	8007982 <HAL_TIM_ConfigClockSource+0x4e>
 800797e:	2b30      	cmp	r3, #48	; 0x30
 8007980:	d1f4      	bne.n	800796c <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8007982:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007984:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8007988:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800798c:	4313      	orrs	r3, r2
 800798e:	e01a      	b.n	80079c6 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8007990:	2b60      	cmp	r3, #96	; 0x60
 8007992:	d034      	beq.n	80079fe <HAL_TIM_ConfigClockSource+0xca>
 8007994:	d819      	bhi.n	80079ca <HAL_TIM_ConfigClockSource+0x96>
 8007996:	2b50      	cmp	r3, #80	; 0x50
 8007998:	d1e8      	bne.n	800796c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800799a:	684a      	ldr	r2, [r1, #4]
 800799c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800799e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079a0:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079a2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079a6:	f025 0501 	bic.w	r5, r5, #1
 80079aa:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079ac:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80079ae:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079b4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80079b8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80079ba:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80079bc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80079be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079c2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80079c6:	6083      	str	r3, [r0, #8]
 80079c8:	e7d0      	b.n	800796c <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80079ca:	2b70      	cmp	r3, #112	; 0x70
 80079cc:	d00c      	beq.n	80079e8 <HAL_TIM_ConfigClockSource+0xb4>
 80079ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079d2:	d1cb      	bne.n	800796c <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80079d4:	68cb      	ldr	r3, [r1, #12]
 80079d6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80079da:	f7ff ffa1 	bl	8007920 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079de:	6822      	ldr	r2, [r4, #0]
 80079e0:	6893      	ldr	r3, [r2, #8]
 80079e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079e6:	e008      	b.n	80079fa <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80079e8:	68cb      	ldr	r3, [r1, #12]
 80079ea:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80079ee:	f7ff ff97 	bl	8007920 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80079f2:	6822      	ldr	r2, [r4, #0]
 80079f4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079fa:	6093      	str	r3, [r2, #8]
      break;
 80079fc:	e7b6      	b.n	800796c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079fe:	684d      	ldr	r5, [r1, #4]
 8007a00:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a02:	6a01      	ldr	r1, [r0, #32]
 8007a04:	f021 0110 	bic.w	r1, r1, #16
 8007a08:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a0a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8007a0c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a0e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a16:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a1a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8007a1e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007a20:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007a22:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a28:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8007a2c:	e7cb      	b.n	80079c6 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a2e:	684a      	ldr	r2, [r1, #4]
 8007a30:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8007a32:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a34:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a36:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a3a:	f025 0501 	bic.w	r5, r5, #1
 8007a3e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a40:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8007a42:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a48:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007a4c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007a4e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007a50:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a56:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8007a5a:	e7b4      	b.n	80079c6 <HAL_TIM_ConfigClockSource+0x92>

08007a5c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a5c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8007a60:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	f04f 0302 	mov.w	r3, #2
 8007a68:	d025      	beq.n	8007ab6 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8007a6a:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a6c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a70:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a72:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8007a74:	685c      	ldr	r4, [r3, #4]
  __HAL_LOCK(htim);
 8007a76:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a7a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a7e:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8007a80:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a82:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a84:	4c0d      	ldr	r4, [pc, #52]	; (8007abc <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8007a86:	42a3      	cmp	r3, r4
 8007a88:	d00a      	beq.n	8007aa0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8007a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a8e:	d007      	beq.n	8007aa0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8007a90:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8007a94:	42a3      	cmp	r3, r4
 8007a96:	d003      	beq.n	8007aa0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8007a98:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007a9c:	42a3      	cmp	r3, r4
 8007a9e:	d104      	bne.n	8007aaa <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007aa0:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007aa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007aa6:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007aa8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8007ab6:	4618      	mov	r0, r3

  return HAL_OK;
}
 8007ab8:	bd30      	pop	{r4, r5, pc}
 8007aba:	bf00      	nop
 8007abc:	40012c00 	.word	0x40012c00

08007ac0 <HAL_TIMEx_CommutCallback>:
 8007ac0:	4770      	bx	lr

08007ac2 <HAL_TIMEx_BreakCallback>:
 8007ac2:	4770      	bx	lr

08007ac4 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ac4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ac8:	b113      	cbz	r3, 8007ad0 <osKernelInitialize+0xc>
    stat = osErrorISR;
 8007aca:	f06f 0005 	mvn.w	r0, #5
 8007ace:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ad0:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1f8      	bne.n	8007aca <osKernelInitialize+0x6>
 8007ad8:	4b07      	ldr	r3, [pc, #28]	; (8007af8 <osKernelInitialize+0x34>)
 8007ada:	6818      	ldr	r0, [r3, #0]
 8007adc:	2802      	cmp	r0, #2
 8007ade:	d106      	bne.n	8007aee <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ae0:	f3ef 8311 	mrs	r3, BASEPRI
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1f0      	bne.n	8007aca <osKernelInitialize+0x6>
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 8007ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  }

  return (stat);
}
 8007aec:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 8007aee:	2800      	cmp	r0, #0
 8007af0:	d1fa      	bne.n	8007ae8 <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 8007af2:	2201      	movs	r2, #1
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	4770      	bx	lr
 8007af8:	20001eb8 	.word	0x20001eb8

08007afc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007afc:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007afe:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b02:	b113      	cbz	r3, 8007b0a <osKernelStart+0xe>
    stat = osErrorISR;
 8007b04:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8007b08:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b0a:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 8007b0e:	2c00      	cmp	r4, #0
 8007b10:	d1f8      	bne.n	8007b04 <osKernelStart+0x8>
 8007b12:	4b09      	ldr	r3, [pc, #36]	; (8007b38 <osKernelStart+0x3c>)
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	2a02      	cmp	r2, #2
 8007b18:	d106      	bne.n	8007b28 <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b1a:	f3ef 8311 	mrs	r3, BASEPRI
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1f0      	bne.n	8007b04 <osKernelStart+0x8>
      stat = osError;
 8007b22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  return (stat);
 8007b26:	e7ef      	b.n	8007b08 <osKernelStart+0xc>
    if (KernelState == osKernelReady) {
 8007b28:	2a01      	cmp	r2, #1
 8007b2a:	d1fa      	bne.n	8007b22 <osKernelStart+0x26>
      KernelState = osKernelRunning;
 8007b2c:	2202      	movs	r2, #2
 8007b2e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007b30:	f000 fd80 	bl	8008634 <vTaskStartScheduler>
      stat = osOK;
 8007b34:	4620      	mov	r0, r4
 8007b36:	e7e7      	b.n	8007b08 <osKernelStart+0xc>
 8007b38:	20001eb8 	.word	0x20001eb8

08007b3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b3e:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007b40:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007b42:	b087      	sub	sp, #28
 8007b44:	460b      	mov	r3, r1
  hTask = NULL;
 8007b46:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b48:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8007b4c:	bb62      	cbnz	r2, 8007ba8 <osThreadNew+0x6c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b4e:	f3ef 8210 	mrs	r2, PRIMASK
 8007b52:	bb4a      	cbnz	r2, 8007ba8 <osThreadNew+0x6c>
 8007b54:	4a26      	ldr	r2, [pc, #152]	; (8007bf0 <osThreadNew+0xb4>)
 8007b56:	6812      	ldr	r2, [r2, #0]
 8007b58:	2a02      	cmp	r2, #2
 8007b5a:	d102      	bne.n	8007b62 <osThreadNew+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b5c:	f3ef 8211 	mrs	r2, BASEPRI
 8007b60:	bb12      	cbnz	r2, 8007ba8 <osThreadNew+0x6c>
 8007b62:	b308      	cbz	r0, 8007ba8 <osThreadNew+0x6c>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8007b64:	2200      	movs	r2, #0
 8007b66:	f88d 2013 	strb.w	r2, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8007b6a:	2c00      	cmp	r4, #0
 8007b6c:	d039      	beq.n	8007be2 <osThreadNew+0xa6>
      if (attr->name != NULL) {
 8007b6e:	6821      	ldr	r1, [r4, #0]
 8007b70:	b909      	cbnz	r1, 8007b76 <osThreadNew+0x3a>
    name  = &empty;
 8007b72:	f10d 0113 	add.w	r1, sp, #19
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8007b76:	69a5      	ldr	r5, [r4, #24]
 8007b78:	2d00      	cmp	r5, #0
 8007b7a:	bf08      	it	eq
 8007b7c:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007b7e:	1e6a      	subs	r2, r5, #1
 8007b80:	2a37      	cmp	r2, #55	; 0x37
 8007b82:	462f      	mov	r7, r5
 8007b84:	d832      	bhi.n	8007bec <osThreadNew+0xb0>
 8007b86:	6862      	ldr	r2, [r4, #4]
 8007b88:	07d2      	lsls	r2, r2, #31
 8007b8a:	d42f      	bmi.n	8007bec <osThreadNew+0xb0>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8007b8c:	6966      	ldr	r6, [r4, #20]
 8007b8e:	b176      	cbz	r6, 8007bae <osThreadNew+0x72>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007b90:	08b2      	lsrs	r2, r6, #2
 8007b92:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b96:	f1bc 0f00 	cmp.w	ip, #0
 8007b9a:	d00a      	beq.n	8007bb2 <osThreadNew+0x76>
 8007b9c:	f1be 0f63 	cmp.w	lr, #99	; 0x63
 8007ba0:	d902      	bls.n	8007ba8 <osThreadNew+0x6c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ba2:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ba4:	b104      	cbz	r4, 8007ba8 <osThreadNew+0x6c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ba6:	b9ae      	cbnz	r6, 8007bd4 <osThreadNew+0x98>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007ba8:	9805      	ldr	r0, [sp, #20]
}
 8007baa:	b007      	add	sp, #28
 8007bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8007bae:	2280      	movs	r2, #128	; 0x80
 8007bb0:	e7ef      	b.n	8007b92 <osThreadNew+0x56>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007bb2:	f1be 0f00 	cmp.w	lr, #0
 8007bb6:	d1f7      	bne.n	8007ba8 <osThreadNew+0x6c>
      if (mem == 0) {
 8007bb8:	6924      	ldr	r4, [r4, #16]
 8007bba:	2c00      	cmp	r4, #0
 8007bbc:	d1f4      	bne.n	8007ba8 <osThreadNew+0x6c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007bbe:	ac05      	add	r4, sp, #20
 8007bc0:	e9cd 7400 	strd	r7, r4, [sp]
 8007bc4:	b292      	uxth	r2, r2
 8007bc6:	f000 fd08 	bl	80085da <xTaskCreate>
 8007bca:	2801      	cmp	r0, #1
          hTask = NULL;
 8007bcc:	bf1c      	itt	ne
 8007bce:	2300      	movne	r3, #0
 8007bd0:	9305      	strne	r3, [sp, #20]
 8007bd2:	e7e9      	b.n	8007ba8 <osThreadNew+0x6c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007bd4:	e9cd 4c01 	strd	r4, ip, [sp, #4]
 8007bd8:	9500      	str	r5, [sp, #0]
 8007bda:	f000 fcc7 	bl	800856c <xTaskCreateStatic>
 8007bde:	9005      	str	r0, [sp, #20]
 8007be0:	e7e2      	b.n	8007ba8 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;
 8007be2:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 8007be4:	2280      	movs	r2, #128	; 0x80
    name  = &empty;
 8007be6:	f10d 0113 	add.w	r1, sp, #19
 8007bea:	e7e8      	b.n	8007bbe <osThreadNew+0x82>
        return (NULL);
 8007bec:	2000      	movs	r0, #0
 8007bee:	e7dc      	b.n	8007baa <osThreadNew+0x6e>
 8007bf0:	20001eb8 	.word	0x20001eb8

08007bf4 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007bf4:	4b03      	ldr	r3, [pc, #12]	; (8007c04 <vApplicationGetIdleTaskMemory+0x10>)
 8007bf6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007bf8:	4b03      	ldr	r3, [pc, #12]	; (8007c08 <vApplicationGetIdleTaskMemory+0x14>)
 8007bfa:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007bfc:	2380      	movs	r3, #128	; 0x80
 8007bfe:	6013      	str	r3, [r2, #0]
}
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	20001e54 	.word	0x20001e54
 8007c08:	20001c54 	.word	0x20001c54

08007c0c <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007c0c:	4b03      	ldr	r3, [pc, #12]	; (8007c1c <vApplicationGetTimerTaskMemory+0x10>)
 8007c0e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007c10:	4b03      	ldr	r3, [pc, #12]	; (8007c20 <vApplicationGetTimerTaskMemory+0x14>)
 8007c12:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007c14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c18:	6013      	str	r3, [r2, #0]
}
 8007c1a:	4770      	bx	lr
 8007c1c:	200022bc 	.word	0x200022bc
 8007c20:	20001ebc 	.word	0x20001ebc

08007c24 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c28:	f100 0308 	add.w	r3, r0, #8
 8007c2c:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c2e:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c32:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c38:	4770      	bx	lr

08007c3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c3e:	4770      	bx	lr

08007c40 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c40:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c42:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8007c44:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c46:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c48:	689a      	ldr	r2, [r3, #8]
 8007c4a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c4c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8007c4e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007c50:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007c52:	3301      	adds	r3, #1
 8007c54:	6003      	str	r3, [r0, #0]
}
 8007c56:	4770      	bx	lr

08007c58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c58:	680a      	ldr	r2, [r1, #0]
{
 8007c5a:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c5c:	1c53      	adds	r3, r2, #1
 8007c5e:	d10a      	bne.n	8007c76 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c60:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c66:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c68:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c6a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8007c6c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007c6e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007c70:	3301      	adds	r3, #1
 8007c72:	6003      	str	r3, [r0, #0]
}
 8007c74:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c76:	f100 0308 	add.w	r3, r0, #8
 8007c7a:	685c      	ldr	r4, [r3, #4]
 8007c7c:	6825      	ldr	r5, [r4, #0]
 8007c7e:	4295      	cmp	r5, r2
 8007c80:	d8ef      	bhi.n	8007c62 <vListInsert+0xa>
 8007c82:	4623      	mov	r3, r4
 8007c84:	e7f9      	b.n	8007c7a <vListInsert+0x22>

08007c86 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007c86:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c88:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8007c8c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c8e:	6882      	ldr	r2, [r0, #8]
 8007c90:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c92:	6859      	ldr	r1, [r3, #4]
 8007c94:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c96:	bf08      	it	eq
 8007c98:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	3a01      	subs	r2, #1
 8007ca2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ca4:	6818      	ldr	r0, [r3, #0]
}
 8007ca6:	4770      	bx	lr

08007ca8 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ca8:	b510      	push	{r4, lr}
 8007caa:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007cac:	f001 f9fa 	bl	80090a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007cb0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007cb2:	f001 fa19 	bl	80090e8 <vPortExitCritical>

	return xReturn;
}
 8007cb6:	fab4 f084 	clz	r0, r4
 8007cba:	0940      	lsrs	r0, r0, #5
 8007cbc:	bd10      	pop	{r4, pc}

08007cbe <prvCopyDataToQueue>:
{
 8007cbe:	b570      	push	{r4, r5, r6, lr}
 8007cc0:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007cc2:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8007cc4:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cc6:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007cc8:	b942      	cbnz	r2, 8007cdc <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cca:	6805      	ldr	r5, [r0, #0]
 8007ccc:	b99d      	cbnz	r5, 8007cf6 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007cce:	6840      	ldr	r0, [r0, #4]
 8007cd0:	f000 ff78 	bl	8008bc4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8007cd4:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007cd6:	3601      	adds	r6, #1
 8007cd8:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8007cda:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007cdc:	b96d      	cbnz	r5, 8007cfa <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007cde:	6880      	ldr	r0, [r0, #8]
 8007ce0:	f002 fc6a 	bl	800a5b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007ce4:	68a3      	ldr	r3, [r4, #8]
 8007ce6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007ce8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007cea:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007cec:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d301      	bcc.n	8007cf6 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cf2:	6823      	ldr	r3, [r4, #0]
 8007cf4:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	e7ed      	b.n	8007cd6 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cfa:	68c0      	ldr	r0, [r0, #12]
 8007cfc:	f002 fc5c 	bl	800a5b8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007d00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d02:	68e2      	ldr	r2, [r4, #12]
 8007d04:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d06:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007d08:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d0a:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007d0c:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007d0e:	bf3e      	ittt	cc
 8007d10:	6862      	ldrcc	r2, [r4, #4]
 8007d12:	189b      	addcc	r3, r3, r2
 8007d14:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007d16:	2d02      	cmp	r5, #2
 8007d18:	d1ed      	bne.n	8007cf6 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d1a:	b10e      	cbz	r6, 8007d20 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8007d1c:	3e01      	subs	r6, #1
 8007d1e:	e7ea      	b.n	8007cf6 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8007d20:	4630      	mov	r0, r6
 8007d22:	e7d8      	b.n	8007cd6 <prvCopyDataToQueue+0x18>

08007d24 <prvCopyDataFromQueue>:
{
 8007d24:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8007d28:	b410      	push	{r4}
 8007d2a:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d2c:	b162      	cbz	r2, 8007d48 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007d2e:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d30:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007d32:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d34:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007d36:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007d38:	bf28      	it	cs
 8007d3a:	6819      	ldrcs	r1, [r3, #0]
}
 8007d3c:	bc10      	pop	{r4}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007d3e:	bf28      	it	cs
 8007d40:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007d42:	68d9      	ldr	r1, [r3, #12]
 8007d44:	f002 bc38 	b.w	800a5b8 <memcpy>
}
 8007d48:	bc10      	pop	{r4}
 8007d4a:	4770      	bx	lr

08007d4c <prvUnlockQueue>:
{
 8007d4c:	b570      	push	{r4, r5, r6, lr}
 8007d4e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007d50:	f001 f9a8 	bl	80090a4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007d54:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d58:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8007d5c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d5e:	2d00      	cmp	r5, #0
 8007d60:	dc14      	bgt.n	8007d8c <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8007d62:	23ff      	movs	r3, #255	; 0xff
 8007d64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007d68:	f001 f9be 	bl	80090e8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007d6c:	f001 f99a 	bl	80090a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007d70:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d74:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8007d78:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d7a:	2d00      	cmp	r5, #0
 8007d7c:	dc12      	bgt.n	8007da4 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8007d7e:	23ff      	movs	r3, #255	; 0xff
 8007d80:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8007d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007d88:	f001 b9ae 	b.w	80090e8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d0e7      	beq.n	8007d62 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d92:	4630      	mov	r0, r6
 8007d94:	f000 fe78 	bl	8008a88 <xTaskRemoveFromEventList>
 8007d98:	b108      	cbz	r0, 8007d9e <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8007d9a:	f000 fefd 	bl	8008b98 <vTaskMissedYield>
 8007d9e:	3d01      	subs	r5, #1
 8007da0:	b26d      	sxtb	r5, r5
 8007da2:	e7dc      	b.n	8007d5e <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007da4:	6923      	ldr	r3, [r4, #16]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d0e9      	beq.n	8007d7e <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007daa:	4630      	mov	r0, r6
 8007dac:	f000 fe6c 	bl	8008a88 <xTaskRemoveFromEventList>
 8007db0:	b108      	cbz	r0, 8007db6 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8007db2:	f000 fef1 	bl	8008b98 <vTaskMissedYield>
 8007db6:	3d01      	subs	r5, #1
 8007db8:	b26d      	sxtb	r5, r5
 8007dba:	e7de      	b.n	8007d7a <prvUnlockQueue+0x2e>

08007dbc <xQueueGenericReset>:
{
 8007dbc:	b538      	push	{r3, r4, r5, lr}
 8007dbe:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8007dc0:	4604      	mov	r4, r0
 8007dc2:	b940      	cbnz	r0, 8007dd6 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	e7fe      	b.n	8007dd4 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8007dd6:	f001 f965 	bl	80090a4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007dda:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
 8007dde:	4343      	muls	r3, r0
 8007de0:	6822      	ldr	r2, [r4, #0]
 8007de2:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007de4:	1a1b      	subs	r3, r3, r0
 8007de6:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007de8:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007dea:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007dec:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8007dee:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007df0:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007df2:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8007df4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007df8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8007dfc:	b995      	cbnz	r5, 8007e24 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dfe:	6923      	ldr	r3, [r4, #16]
 8007e00:	b163      	cbz	r3, 8007e1c <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e02:	f104 0010 	add.w	r0, r4, #16
 8007e06:	f000 fe3f 	bl	8008a88 <xTaskRemoveFromEventList>
 8007e0a:	b138      	cbz	r0, 8007e1c <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8007e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e10:	4b09      	ldr	r3, [pc, #36]	; (8007e38 <xQueueGenericReset+0x7c>)
 8007e12:	601a      	str	r2, [r3, #0]
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8007e1c:	f001 f964 	bl	80090e8 <vPortExitCritical>
}
 8007e20:	2001      	movs	r0, #1
 8007e22:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e24:	f104 0010 	add.w	r0, r4, #16
 8007e28:	f7ff fefc 	bl	8007c24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007e2c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e30:	f7ff fef8 	bl	8007c24 <vListInitialise>
 8007e34:	e7f2      	b.n	8007e1c <xQueueGenericReset+0x60>
 8007e36:	bf00      	nop
 8007e38:	e000ed04 	.word	0xe000ed04

08007e3c <xQueueGenericCreateStatic>:
	{
 8007e3c:	b513      	push	{r0, r1, r4, lr}
 8007e3e:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e40:	b940      	cbnz	r0, 8007e54 <xQueueGenericCreateStatic+0x18>
 8007e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	e7fe      	b.n	8007e52 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8007e54:	b943      	cbnz	r3, 8007e68 <xQueueGenericCreateStatic+0x2c>
 8007e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	e7fe      	b.n	8007e66 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007e68:	b14a      	cbz	r2, 8007e7e <xQueueGenericCreateStatic+0x42>
 8007e6a:	b991      	cbnz	r1, 8007e92 <xQueueGenericCreateStatic+0x56>
 8007e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e70:	f383 8811 	msr	BASEPRI, r3
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	e7fe      	b.n	8007e7c <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e7e:	b141      	cbz	r1, 8007e92 <xQueueGenericCreateStatic+0x56>
 8007e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	e7fe      	b.n	8007e90 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e92:	2350      	movs	r3, #80	; 0x50
 8007e94:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e96:	9b01      	ldr	r3, [sp, #4]
 8007e98:	2b50      	cmp	r3, #80	; 0x50
 8007e9a:	d008      	beq.n	8007eae <xQueueGenericCreateStatic+0x72>
 8007e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	e7fe      	b.n	8007eac <xQueueGenericCreateStatic+0x70>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007eae:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007eb0:	2900      	cmp	r1, #0
 8007eb2:	bf08      	it	eq
 8007eb4:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8007eb6:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007eba:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ebe:	4619      	mov	r1, r3
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ec0:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	f7ff ff7a 	bl	8007dbc <xQueueGenericReset>
	}
 8007ec8:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8007eca:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8007ece:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8007ed2:	b002      	add	sp, #8
 8007ed4:	bd10      	pop	{r4, pc}
	...

08007ed8 <xQueueGenericSend>:
{
 8007ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007edc:	4688      	mov	r8, r1
 8007ede:	9201      	str	r2, [sp, #4]
 8007ee0:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	b940      	cbnz	r0, 8007ef8 <xQueueGenericSend+0x20>
 8007ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	e7fe      	b.n	8007ef6 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ef8:	b951      	cbnz	r1, 8007f10 <xQueueGenericSend+0x38>
 8007efa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007efc:	b143      	cbz	r3, 8007f10 <xQueueGenericSend+0x38>
 8007efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f02:	f383 8811 	msr	BASEPRI, r3
 8007f06:	f3bf 8f6f 	isb	sy
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	e7fe      	b.n	8007f0e <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f10:	2f02      	cmp	r7, #2
 8007f12:	d10b      	bne.n	8007f2c <xQueueGenericSend+0x54>
 8007f14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d008      	beq.n	8007f2c <xQueueGenericSend+0x54>
 8007f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1e:	f383 8811 	msr	BASEPRI, r3
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	e7fe      	b.n	8007f2a <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f2c:	f000 fe3a 	bl	8008ba4 <xTaskGetSchedulerState>
 8007f30:	b950      	cbnz	r0, 8007f48 <xQueueGenericSend+0x70>
 8007f32:	9e01      	ldr	r6, [sp, #4]
 8007f34:	b14e      	cbz	r6, 8007f4a <xQueueGenericSend+0x72>
 8007f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3a:	f383 8811 	msr	BASEPRI, r3
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f3bf 8f4f 	dsb	sy
 8007f46:	e7fe      	b.n	8007f46 <xQueueGenericSend+0x6e>
 8007f48:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8007f4a:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 8007f4e:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8008038 <xQueueGenericSend+0x160>
 8007f52:	e037      	b.n	8007fc4 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f54:	9d01      	ldr	r5, [sp, #4]
 8007f56:	b91d      	cbnz	r5, 8007f60 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8007f58:	f001 f8c6 	bl	80090e8 <vPortExitCritical>
			return errQUEUE_FULL;
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	e050      	b.n	8008002 <xQueueGenericSend+0x12a>
				else if( xEntryTimeSet == pdFALSE )
 8007f60:	b916      	cbnz	r6, 8007f68 <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f62:	a802      	add	r0, sp, #8
 8007f64:	f000 fdd0 	bl	8008b08 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007f68:	f001 f8be 	bl	80090e8 <vPortExitCritical>
		vTaskSuspendAll();
 8007f6c:	f000 fba8 	bl	80086c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f70:	f001 f898 	bl	80090a4 <vPortEnterCritical>
 8007f74:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007f78:	2bff      	cmp	r3, #255	; 0xff
 8007f7a:	bf08      	it	eq
 8007f7c:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8007f80:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007f84:	2bff      	cmp	r3, #255	; 0xff
 8007f86:	bf08      	it	eq
 8007f88:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8007f8c:	f001 f8ac 	bl	80090e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f90:	a901      	add	r1, sp, #4
 8007f92:	a802      	add	r0, sp, #8
 8007f94:	f000 fdc4 	bl	8008b20 <xTaskCheckForTimeOut>
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	d146      	bne.n	800802a <xQueueGenericSend+0x152>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f9c:	f001 f882 	bl	80090a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007fa0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007fa2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d12f      	bne.n	8008008 <xQueueGenericSend+0x130>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007fa8:	f001 f89e 	bl	80090e8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007fac:	9901      	ldr	r1, [sp, #4]
 8007fae:	f104 0010 	add.w	r0, r4, #16
 8007fb2:	f000 fd2f 	bl	8008a14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f7ff fec8 	bl	8007d4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007fbc:	f000 fc1e 	bl	80087fc <xTaskResumeAll>
 8007fc0:	b350      	cbz	r0, 8008018 <xQueueGenericSend+0x140>
 8007fc2:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007fc4:	f001 f86e 	bl	80090a4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fc8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007fca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d301      	bcc.n	8007fd4 <xQueueGenericSend+0xfc>
 8007fd0:	2f02      	cmp	r7, #2
 8007fd2:	d1bf      	bne.n	8007f54 <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fd4:	463a      	mov	r2, r7
 8007fd6:	4641      	mov	r1, r8
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f7ff fe70 	bl	8007cbe <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fe0:	b11b      	cbz	r3, 8007fea <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fe2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007fe6:	f000 fd4f 	bl	8008a88 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8007fea:	b138      	cbz	r0, 8007ffc <xQueueGenericSend+0x124>
						queueYIELD_IF_USING_PREEMPTION();
 8007fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ff0:	4b11      	ldr	r3, [pc, #68]	; (8008038 <xQueueGenericSend+0x160>)
 8007ff2:	601a      	str	r2, [r3, #0]
 8007ff4:	f3bf 8f4f 	dsb	sy
 8007ff8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007ffc:	f001 f874 	bl	80090e8 <vPortExitCritical>
				return pdPASS;
 8008000:	2001      	movs	r0, #1
}
 8008002:	b004      	add	sp, #16
 8008004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 8008008:	f001 f86e 	bl	80090e8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800800c:	4620      	mov	r0, r4
 800800e:	f7ff fe9d 	bl	8007d4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008012:	f000 fbf3 	bl	80087fc <xTaskResumeAll>
 8008016:	e7d4      	b.n	8007fc2 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8008018:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800801c:	f8ca 3000 	str.w	r3, [sl]
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	e7cb      	b.n	8007fc2 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800802a:	4620      	mov	r0, r4
 800802c:	f7ff fe8e 	bl	8007d4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008030:	f000 fbe4 	bl	80087fc <xTaskResumeAll>
 8008034:	e792      	b.n	8007f5c <xQueueGenericSend+0x84>
 8008036:	bf00      	nop
 8008038:	e000ed04 	.word	0xe000ed04

0800803c <xQueueGenericSendFromISR>:
{
 800803c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008040:	4689      	mov	r9, r1
 8008042:	4690      	mov	r8, r2
 8008044:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8008046:	4604      	mov	r4, r0
 8008048:	b940      	cbnz	r0, 800805c <xQueueGenericSendFromISR+0x20>
 800804a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	e7fe      	b.n	800805a <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800805c:	b951      	cbnz	r1, 8008074 <xQueueGenericSendFromISR+0x38>
 800805e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008060:	b143      	cbz	r3, 8008074 <xQueueGenericSendFromISR+0x38>
 8008062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008066:	f383 8811 	msr	BASEPRI, r3
 800806a:	f3bf 8f6f 	isb	sy
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	e7fe      	b.n	8008072 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008074:	2f02      	cmp	r7, #2
 8008076:	d10b      	bne.n	8008090 <xQueueGenericSendFromISR+0x54>
 8008078:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800807a:	2b01      	cmp	r3, #1
 800807c:	d008      	beq.n	8008090 <xQueueGenericSendFromISR+0x54>
 800807e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	e7fe      	b.n	800808e <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008090:	f001 f8ea 	bl	8009268 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008094:	f3ef 8611 	mrs	r6, BASEPRI
 8008098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80080aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d301      	bcc.n	80080b4 <xQueueGenericSendFromISR+0x78>
 80080b0:	2f02      	cmp	r7, #2
 80080b2:	d122      	bne.n	80080fa <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 80080b4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080b8:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 80080ba:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080bc:	4649      	mov	r1, r9
 80080be:	4620      	mov	r0, r4
 80080c0:	f7ff fdfd 	bl	8007cbe <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80080c4:	1c6b      	adds	r3, r5, #1
 80080c6:	d113      	bne.n	80080f0 <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080ca:	b90b      	cbnz	r3, 80080d0 <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 80080cc:	2001      	movs	r0, #1
 80080ce:	e00b      	b.n	80080e8 <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80080d4:	f000 fcd8 	bl	8008a88 <xTaskRemoveFromEventList>
 80080d8:	2800      	cmp	r0, #0
 80080da:	d0f7      	beq.n	80080cc <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 80080dc:	f1b8 0f00 	cmp.w	r8, #0
 80080e0:	d0f4      	beq.n	80080cc <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80080e2:	2001      	movs	r0, #1
 80080e4:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80080e8:	f386 8811 	msr	BASEPRI, r6
}
 80080ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080f0:	3501      	adds	r5, #1
 80080f2:	b26d      	sxtb	r5, r5
 80080f4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80080f8:	e7e8      	b.n	80080cc <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 80080fa:	2000      	movs	r0, #0
 80080fc:	e7f4      	b.n	80080e8 <xQueueGenericSendFromISR+0xac>
	...

08008100 <xQueueReceive>:
{
 8008100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008104:	b085      	sub	sp, #20
 8008106:	460f      	mov	r7, r1
 8008108:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800810a:	4604      	mov	r4, r0
 800810c:	b940      	cbnz	r0, 8008120 <xQueueReceive+0x20>
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	e7fe      	b.n	800811e <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008120:	b951      	cbnz	r1, 8008138 <xQueueReceive+0x38>
 8008122:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008124:	b143      	cbz	r3, 8008138 <xQueueReceive+0x38>
 8008126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812a:	f383 8811 	msr	BASEPRI, r3
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	e7fe      	b.n	8008136 <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008138:	f000 fd34 	bl	8008ba4 <xTaskGetSchedulerState>
 800813c:	b950      	cbnz	r0, 8008154 <xQueueReceive+0x54>
 800813e:	9e01      	ldr	r6, [sp, #4]
 8008140:	b14e      	cbz	r6, 8008156 <xQueueReceive+0x56>
 8008142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008146:	f383 8811 	msr	BASEPRI, r3
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	e7fe      	b.n	8008152 <xQueueReceive+0x52>
 8008154:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8008156:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800815a:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800823c <xQueueReceive+0x13c>
 800815e:	e03b      	b.n	80081d8 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008160:	9d01      	ldr	r5, [sp, #4]
 8008162:	b91d      	cbnz	r5, 800816c <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8008164:	f000 ffc0 	bl	80090e8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8008168:	2000      	movs	r0, #0
 800816a:	e052      	b.n	8008212 <xQueueReceive+0x112>
				else if( xEntryTimeSet == pdFALSE )
 800816c:	b916      	cbnz	r6, 8008174 <xQueueReceive+0x74>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800816e:	a802      	add	r0, sp, #8
 8008170:	f000 fcca 	bl	8008b08 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008174:	f000 ffb8 	bl	80090e8 <vPortExitCritical>
		vTaskSuspendAll();
 8008178:	f000 faa2 	bl	80086c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800817c:	f000 ff92 	bl	80090a4 <vPortEnterCritical>
 8008180:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008184:	2bff      	cmp	r3, #255	; 0xff
 8008186:	bf08      	it	eq
 8008188:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800818c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008190:	2bff      	cmp	r3, #255	; 0xff
 8008192:	bf08      	it	eq
 8008194:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8008198:	f000 ffa6 	bl	80090e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800819c:	a901      	add	r1, sp, #4
 800819e:	a802      	add	r0, sp, #8
 80081a0:	f000 fcbe 	bl	8008b20 <xTaskCheckForTimeOut>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d13d      	bne.n	8008224 <xQueueReceive+0x124>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081a8:	4620      	mov	r0, r4
 80081aa:	f7ff fd7d 	bl	8007ca8 <prvIsQueueEmpty>
 80081ae:	b398      	cbz	r0, 8008218 <xQueueReceive+0x118>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081b0:	9901      	ldr	r1, [sp, #4]
 80081b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80081b6:	f000 fc2d 	bl	8008a14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081ba:	4620      	mov	r0, r4
 80081bc:	f7ff fdc6 	bl	8007d4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081c0:	f000 fb1c 	bl	80087fc <xTaskResumeAll>
 80081c4:	b938      	cbnz	r0, 80081d6 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 80081c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80081ca:	f8c9 3000 	str.w	r3, [r9]
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80081d8:	f000 ff64 	bl	80090a4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081dc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081de:	2d00      	cmp	r5, #0
 80081e0:	d0be      	beq.n	8008160 <xQueueReceive+0x60>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80081e2:	4639      	mov	r1, r7
 80081e4:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80081e6:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80081e8:	f7ff fd9c 	bl	8007d24 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80081ec:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081ee:	6923      	ldr	r3, [r4, #16]
 80081f0:	b163      	cbz	r3, 800820c <xQueueReceive+0x10c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081f2:	f104 0010 	add.w	r0, r4, #16
 80081f6:	f000 fc47 	bl	8008a88 <xTaskRemoveFromEventList>
 80081fa:	b138      	cbz	r0, 800820c <xQueueReceive+0x10c>
						queueYIELD_IF_USING_PREEMPTION();
 80081fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008200:	4b0e      	ldr	r3, [pc, #56]	; (800823c <xQueueReceive+0x13c>)
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800820c:	f000 ff6c 	bl	80090e8 <vPortExitCritical>
				return pdPASS;
 8008210:	2001      	movs	r0, #1
}
 8008212:	b005      	add	sp, #20
 8008214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8008218:	4620      	mov	r0, r4
 800821a:	f7ff fd97 	bl	8007d4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800821e:	f000 faed 	bl	80087fc <xTaskResumeAll>
 8008222:	e7d8      	b.n	80081d6 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 8008224:	4620      	mov	r0, r4
 8008226:	f7ff fd91 	bl	8007d4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800822a:	f000 fae7 	bl	80087fc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800822e:	4620      	mov	r0, r4
 8008230:	f7ff fd3a 	bl	8007ca8 <prvIsQueueEmpty>
 8008234:	2800      	cmp	r0, #0
 8008236:	d0ce      	beq.n	80081d6 <xQueueReceive+0xd6>
 8008238:	e796      	b.n	8008168 <xQueueReceive+0x68>
 800823a:	bf00      	nop
 800823c:	e000ed04 	.word	0xe000ed04

08008240 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008240:	2300      	movs	r3, #0
	{
 8008242:	b530      	push	{r4, r5, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008244:	4a06      	ldr	r2, [pc, #24]	; (8008260 <vQueueAddToRegistry+0x20>)
 8008246:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800824a:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800824e:	b91d      	cbnz	r5, 8008258 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008250:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008254:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008256:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008258:	3301      	adds	r3, #1
 800825a:	2b08      	cmp	r3, #8
 800825c:	d1f3      	bne.n	8008246 <vQueueAddToRegistry+0x6>
 800825e:	e7fa      	b.n	8008256 <vQueueAddToRegistry+0x16>
 8008260:	20003ec0 	.word	0x20003ec0

08008264 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008264:	b570      	push	{r4, r5, r6, lr}
 8008266:	4604      	mov	r4, r0
 8008268:	460d      	mov	r5, r1
 800826a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800826c:	f000 ff1a 	bl	80090a4 <vPortEnterCritical>
 8008270:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008274:	2bff      	cmp	r3, #255	; 0xff
 8008276:	bf04      	itt	eq
 8008278:	2300      	moveq	r3, #0
 800827a:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 800827e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008282:	2bff      	cmp	r3, #255	; 0xff
 8008284:	bf04      	itt	eq
 8008286:	2300      	moveq	r3, #0
 8008288:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 800828c:	f000 ff2c 	bl	80090e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008290:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008292:	b92b      	cbnz	r3, 80082a0 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008294:	4632      	mov	r2, r6
 8008296:	4629      	mov	r1, r5
 8008298:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800829c:	f000 fbd4 	bl	8008a48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80082a0:	4620      	mov	r0, r4
	}
 80082a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80082a6:	f7ff bd51 	b.w	8007d4c <prvUnlockQueue>
	...

080082ac <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80082ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082b0:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80082b2:	f000 fef7 	bl	80090a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80082b6:	4b2f      	ldr	r3, [pc, #188]	; (8008374 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 80082b8:	4d2f      	ldr	r5, [pc, #188]	; (8008378 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	4f2f      	ldr	r7, [pc, #188]	; (800837c <prvAddNewTaskToReadyList+0xd0>)
 80082be:	3201      	adds	r2, #1
 80082c0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80082c2:	682e      	ldr	r6, [r5, #0]
 80082c4:	2e00      	cmp	r6, #0
 80082c6:	d149      	bne.n	800835c <prvAddNewTaskToReadyList+0xb0>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80082c8:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d11f      	bne.n	8008310 <prvAddNewTaskToReadyList+0x64>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082d0:	f04f 0814 	mov.w	r8, #20
 80082d4:	fb08 7006 	mla	r0, r8, r6, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082d8:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082da:	f7ff fca3 	bl	8007c24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082de:	2e38      	cmp	r6, #56	; 0x38
 80082e0:	d1f8      	bne.n	80082d4 <prvAddNewTaskToReadyList+0x28>
	}

	vListInitialise( &xDelayedTaskList1 );
 80082e2:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80083a8 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 80082e6:	4e26      	ldr	r6, [pc, #152]	; (8008380 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 80082e8:	4640      	mov	r0, r8
 80082ea:	f7ff fc9b 	bl	8007c24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80082ee:	4630      	mov	r0, r6
 80082f0:	f7ff fc98 	bl	8007c24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80082f4:	4823      	ldr	r0, [pc, #140]	; (8008384 <prvAddNewTaskToReadyList+0xd8>)
 80082f6:	f7ff fc95 	bl	8007c24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80082fa:	4823      	ldr	r0, [pc, #140]	; (8008388 <prvAddNewTaskToReadyList+0xdc>)
 80082fc:	f7ff fc92 	bl	8007c24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008300:	4822      	ldr	r0, [pc, #136]	; (800838c <prvAddNewTaskToReadyList+0xe0>)
 8008302:	f7ff fc8f 	bl	8007c24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008306:	4b22      	ldr	r3, [pc, #136]	; (8008390 <prvAddNewTaskToReadyList+0xe4>)
 8008308:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800830c:	4b21      	ldr	r3, [pc, #132]	; (8008394 <prvAddNewTaskToReadyList+0xe8>)
 800830e:	601e      	str	r6, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008310:	2014      	movs	r0, #20
		uxTaskNumber++;
 8008312:	4a21      	ldr	r2, [pc, #132]	; (8008398 <prvAddNewTaskToReadyList+0xec>)
 8008314:	6813      	ldr	r3, [r2, #0]
 8008316:	3301      	adds	r3, #1
 8008318:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800831a:	4a20      	ldr	r2, [pc, #128]	; (800839c <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800831c:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 800831e:	6811      	ldr	r1, [r2, #0]
 8008320:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008322:	428b      	cmp	r3, r1
 8008324:	fb00 7003 	mla	r0, r0, r3, r7
 8008328:	f104 0104 	add.w	r1, r4, #4
 800832c:	bf88      	it	hi
 800832e:	6013      	strhi	r3, [r2, #0]
 8008330:	f7ff fc86 	bl	8007c40 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008334:	f000 fed8 	bl	80090e8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008338:	4b19      	ldr	r3, [pc, #100]	; (80083a0 <prvAddNewTaskToReadyList+0xf4>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	b163      	cbz	r3, 8008358 <prvAddNewTaskToReadyList+0xac>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800833e:	682b      	ldr	r3, [r5, #0]
 8008340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008342:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008344:	429a      	cmp	r2, r3
 8008346:	d207      	bcs.n	8008358 <prvAddNewTaskToReadyList+0xac>
			taskYIELD_IF_USING_PREEMPTION();
 8008348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800834c:	4b15      	ldr	r3, [pc, #84]	; (80083a4 <prvAddNewTaskToReadyList+0xf8>)
 800834e:	601a      	str	r2, [r3, #0]
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	f3bf 8f6f 	isb	sy
}
 8008358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800835c:	4b10      	ldr	r3, [pc, #64]	; (80083a0 <prvAddNewTaskToReadyList+0xf4>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1d5      	bne.n	8008310 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008364:	682b      	ldr	r3, [r5, #0]
 8008366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008368:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800836a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800836c:	bf98      	it	ls
 800836e:	602c      	strls	r4, [r5, #0]
 8008370:	e7ce      	b.n	8008310 <prvAddNewTaskToReadyList+0x64>
 8008372:	bf00      	nop
 8008374:	20002794 	.word	0x20002794
 8008378:	20002320 	.word	0x20002320
 800837c:	2000232c 	.word	0x2000232c
 8008380:	200027c0 	.word	0x200027c0
 8008384:	200027dc 	.word	0x200027dc
 8008388:	20002808 	.word	0x20002808
 800838c:	200027f4 	.word	0x200027f4
 8008390:	20002324 	.word	0x20002324
 8008394:	20002328 	.word	0x20002328
 8008398:	200027a4 	.word	0x200027a4
 800839c:	200027a8 	.word	0x200027a8
 80083a0:	200027f0 	.word	0x200027f0
 80083a4:	e000ed04 	.word	0xe000ed04
 80083a8:	200027ac 	.word	0x200027ac

080083ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80083ac:	b510      	push	{r4, lr}
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80083ae:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
	{
 80083b2:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80083b4:	b93b      	cbnz	r3, 80083c6 <prvDeleteTCB+0x1a>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80083b6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80083b8:	f001 f836 	bl	8009428 <vPortFree>
				vPortFree( pxTCB );
 80083bc:	4620      	mov	r0, r4
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80083be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80083c2:	f001 b831 	b.w	8009428 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d0f9      	beq.n	80083be <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d008      	beq.n	80083e0 <prvDeleteTCB+0x34>
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	e7fe      	b.n	80083de <prvDeleteTCB+0x32>
	}
 80083e0:	bd10      	pop	{r4, pc}
	...

080083e4 <prvIdleTask>:
{
 80083e4:	b580      	push	{r7, lr}
				taskYIELD();
 80083e6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8008444 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80083ea:	4f12      	ldr	r7, [pc, #72]	; (8008434 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083ec:	4c12      	ldr	r4, [pc, #72]	; (8008438 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80083ee:	4d13      	ldr	r5, [pc, #76]	; (800843c <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083f0:	6823      	ldr	r3, [r4, #0]
 80083f2:	b963      	cbnz	r3, 800840e <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80083f4:	4b12      	ldr	r3, [pc, #72]	; (8008440 <prvIdleTask+0x5c>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d9f8      	bls.n	80083ee <prvIdleTask+0xa>
				taskYIELD();
 80083fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008400:	f8c8 3000 	str.w	r3, [r8]
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	e7ee      	b.n	80083ec <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 800840e:	f000 fe49 	bl	80090a4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008416:	1d30      	adds	r0, r6, #4
 8008418:	f7ff fc35 	bl	8007c86 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800841c:	682b      	ldr	r3, [r5, #0]
 800841e:	3b01      	subs	r3, #1
 8008420:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008422:	6823      	ldr	r3, [r4, #0]
 8008424:	3b01      	subs	r3, #1
 8008426:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8008428:	f000 fe5e 	bl	80090e8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800842c:	4630      	mov	r0, r6
 800842e:	f7ff ffbd 	bl	80083ac <prvDeleteTCB>
 8008432:	e7dd      	b.n	80083f0 <prvIdleTask+0xc>
 8008434:	20002808 	.word	0x20002808
 8008438:	20002798 	.word	0x20002798
 800843c:	20002794 	.word	0x20002794
 8008440:	2000232c 	.word	0x2000232c
 8008444:	e000ed04 	.word	0xe000ed04

08008448 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008448:	4a06      	ldr	r2, [pc, #24]	; (8008464 <prvResetNextTaskUnblockTime+0x1c>)
 800844a:	6813      	ldr	r3, [r2, #0]
 800844c:	6819      	ldr	r1, [r3, #0]
 800844e:	4b06      	ldr	r3, [pc, #24]	; (8008468 <prvResetNextTaskUnblockTime+0x20>)
 8008450:	b919      	cbnz	r1, 800845a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008452:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008456:	601a      	str	r2, [r3, #0]
	}
}
 8008458:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800845a:	6812      	ldr	r2, [r2, #0]
 800845c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800845e:	68d2      	ldr	r2, [r2, #12]
 8008460:	6852      	ldr	r2, [r2, #4]
 8008462:	e7f8      	b.n	8008456 <prvResetNextTaskUnblockTime+0xe>
 8008464:	20002324 	.word	0x20002324
 8008468:	200027d4 	.word	0x200027d4

0800846c <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800846c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008470:	460d      	mov	r5, r1
 8008472:	e9dd 7409 	ldrd	r7, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008476:	0096      	lsls	r6, r2, #2
 8008478:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800847a:	4680      	mov	r8, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800847c:	21a5      	movs	r1, #165	; 0xa5
 800847e:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008480:	4699      	mov	r9, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008482:	f002 f8bd 	bl	800a600 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008486:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008488:	3e04      	subs	r6, #4
 800848a:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800848c:	f026 0607 	bic.w	r6, r6, #7
 8008490:	1e6b      	subs	r3, r5, #1
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8008492:	6466      	str	r6, [r4, #68]	; 0x44
 8008494:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8008498:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800849a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800849e:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 80084a2:	7819      	ldrb	r1, [r3, #0]
 80084a4:	b109      	cbz	r1, 80084aa <prvInitialiseNewTask.isra.2+0x3e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084a6:	42ab      	cmp	r3, r5
 80084a8:	d1f7      	bne.n	800849a <prvInitialiseNewTask.isra.2+0x2e>
 80084aa:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80084ac:	f04f 0a00 	mov.w	sl, #0
 80084b0:	2d37      	cmp	r5, #55	; 0x37
 80084b2:	bf28      	it	cs
 80084b4:	2537      	movcs	r5, #55	; 0x37
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80084b6:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 80084b8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 80084ba:	e9c4 5a14 	strd	r5, sl, [r4, #80]	; 0x50
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80084be:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80084c2:	f7ff fbba 	bl	8007c3a <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084c6:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80084ca:	f104 0018 	add.w	r0, r4, #24
 80084ce:	f7ff fbb4 	bl	8007c3a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80084d2:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80084d6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084d8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80084da:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 80084dc:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80084e0:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80084e4:	464a      	mov	r2, r9
 80084e6:	4641      	mov	r1, r8
 80084e8:	4630      	mov	r0, r6
 80084ea:	f000 fdb3 	bl	8009054 <pxPortInitialiseStack>
 80084ee:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80084f0:	b107      	cbz	r7, 80084f4 <prvInitialiseNewTask.isra.2+0x88>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80084f2:	603c      	str	r4, [r7, #0]
}
 80084f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080084f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80084f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fa:	4605      	mov	r5, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80084fc:	4b15      	ldr	r3, [pc, #84]	; (8008554 <prvAddCurrentTaskToDelayedList+0x5c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084fe:	4e16      	ldr	r6, [pc, #88]	; (8008558 <prvAddCurrentTaskToDelayedList+0x60>)
const TickType_t xConstTickCount = xTickCount;
 8008500:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008502:	6830      	ldr	r0, [r6, #0]
{
 8008504:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008506:	3004      	adds	r0, #4
 8008508:	f7ff fbbd 	bl	8007c86 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800850c:	1c6b      	adds	r3, r5, #1
 800850e:	4633      	mov	r3, r6
 8008510:	d107      	bne.n	8008522 <prvAddCurrentTaskToDelayedList+0x2a>
 8008512:	b137      	cbz	r7, 8008522 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008514:	6831      	ldr	r1, [r6, #0]
 8008516:	4811      	ldr	r0, [pc, #68]	; (800855c <prvAddCurrentTaskToDelayedList+0x64>)
 8008518:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800851a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800851e:	f7ff bb8f 	b.w	8007c40 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	1964      	adds	r4, r4, r5
 8008526:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8008528:	d307      	bcc.n	800853a <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800852a:	4a0d      	ldr	r2, [pc, #52]	; (8008560 <prvAddCurrentTaskToDelayedList+0x68>)
 800852c:	6810      	ldr	r0, [r2, #0]
 800852e:	6819      	ldr	r1, [r3, #0]
}
 8008530:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008534:	3104      	adds	r1, #4
 8008536:	f7ff bb8f 	b.w	8007c58 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800853a:	4a0a      	ldr	r2, [pc, #40]	; (8008564 <prvAddCurrentTaskToDelayedList+0x6c>)
 800853c:	6810      	ldr	r0, [r2, #0]
 800853e:	6819      	ldr	r1, [r3, #0]
 8008540:	3104      	adds	r1, #4
 8008542:	f7ff fb89 	bl	8007c58 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008546:	4b08      	ldr	r3, [pc, #32]	; (8008568 <prvAddCurrentTaskToDelayedList+0x70>)
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 800854c:	bf88      	it	hi
 800854e:	601c      	strhi	r4, [r3, #0]
}
 8008550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008552:	bf00      	nop
 8008554:	2000281c 	.word	0x2000281c
 8008558:	20002320 	.word	0x20002320
 800855c:	200027f4 	.word	0x200027f4
 8008560:	20002328 	.word	0x20002328
 8008564:	20002324 	.word	0x20002324
 8008568:	200027d4 	.word	0x200027d4

0800856c <xTaskCreateStatic>:
	{
 800856c:	b570      	push	{r4, r5, r6, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008574:	b945      	cbnz	r5, 8008588 <xTaskCreateStatic+0x1c>
 8008576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857a:	f383 8811 	msr	BASEPRI, r3
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	e7fe      	b.n	8008586 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8008588:	b944      	cbnz	r4, 800859c <xTaskCreateStatic+0x30>
 800858a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858e:	f383 8811 	msr	BASEPRI, r3
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	f3bf 8f4f 	dsb	sy
 800859a:	e7fe      	b.n	800859a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800859c:	2664      	movs	r6, #100	; 0x64
 800859e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80085a0:	9e04      	ldr	r6, [sp, #16]
 80085a2:	2e64      	cmp	r6, #100	; 0x64
 80085a4:	d008      	beq.n	80085b8 <xTaskCreateStatic+0x4c>
 80085a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085aa:	f383 8811 	msr	BASEPRI, r3
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f3bf 8f4f 	dsb	sy
 80085b6:	e7fe      	b.n	80085b6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80085b8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80085ba:	2502      	movs	r5, #2
 80085bc:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80085c0:	ad05      	add	r5, sp, #20
 80085c2:	9501      	str	r5, [sp, #4]
 80085c4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80085c6:	9402      	str	r4, [sp, #8]
 80085c8:	9500      	str	r5, [sp, #0]
 80085ca:	f7ff ff4f 	bl	800846c <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085ce:	4620      	mov	r0, r4
 80085d0:	f7ff fe6c 	bl	80082ac <prvAddNewTaskToReadyList>
	}
 80085d4:	9805      	ldr	r0, [sp, #20]
 80085d6:	b006      	add	sp, #24
 80085d8:	bd70      	pop	{r4, r5, r6, pc}

080085da <xTaskCreate>:
	{
 80085da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085de:	4607      	mov	r7, r0
 80085e0:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085e2:	0090      	lsls	r0, r2, #2
	{
 80085e4:	4688      	mov	r8, r1
 80085e6:	4616      	mov	r6, r2
 80085e8:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085ea:	f000 fe8f 	bl	800930c <pvPortMalloc>
			if( pxStack != NULL )
 80085ee:	4605      	mov	r5, r0
 80085f0:	b1e8      	cbz	r0, 800862e <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80085f2:	2064      	movs	r0, #100	; 0x64
 80085f4:	f000 fe8a 	bl	800930c <pvPortMalloc>
				if( pxNewTCB != NULL )
 80085f8:	4604      	mov	r4, r0
 80085fa:	b1a8      	cbz	r0, 8008628 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80085fc:	2300      	movs	r3, #0
 80085fe:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8008604:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008606:	9301      	str	r3, [sp, #4]
 8008608:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800860a:	9002      	str	r0, [sp, #8]
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	4632      	mov	r2, r6
 8008610:	464b      	mov	r3, r9
 8008612:	4641      	mov	r1, r8
 8008614:	4638      	mov	r0, r7
 8008616:	f7ff ff29 	bl	800846c <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800861a:	4620      	mov	r0, r4
 800861c:	f7ff fe46 	bl	80082ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008620:	2001      	movs	r0, #1
	}
 8008622:	b005      	add	sp, #20
 8008624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8008628:	4628      	mov	r0, r5
 800862a:	f000 fefd 	bl	8009428 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800862e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8008632:	e7f6      	b.n	8008622 <xTaskCreate+0x48>

08008634 <vTaskStartScheduler>:
{
 8008634:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008636:	2400      	movs	r4, #0
{
 8008638:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800863a:	aa07      	add	r2, sp, #28
 800863c:	a906      	add	r1, sp, #24
 800863e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008640:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008644:	f7ff fad6 	bl	8007bf4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008648:	9b05      	ldr	r3, [sp, #20]
 800864a:	9a07      	ldr	r2, [sp, #28]
 800864c:	9302      	str	r3, [sp, #8]
 800864e:	9b06      	ldr	r3, [sp, #24]
 8008650:	4916      	ldr	r1, [pc, #88]	; (80086ac <vTaskStartScheduler+0x78>)
 8008652:	e9cd 4300 	strd	r4, r3, [sp]
 8008656:	4816      	ldr	r0, [pc, #88]	; (80086b0 <vTaskStartScheduler+0x7c>)
 8008658:	4623      	mov	r3, r4
 800865a:	f7ff ff87 	bl	800856c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800865e:	b1b8      	cbz	r0, 8008690 <vTaskStartScheduler+0x5c>
			xReturn = xTimerCreateTimerTask();
 8008660:	f000 fb44 	bl	8008cec <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008664:	2801      	cmp	r0, #1
 8008666:	d115      	bne.n	8008694 <vTaskStartScheduler+0x60>
 8008668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866c:	f383 8811 	msr	BASEPRI, r3
 8008670:	f3bf 8f6f 	isb	sy
 8008674:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8008678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800867c:	4b0d      	ldr	r3, [pc, #52]	; (80086b4 <vTaskStartScheduler+0x80>)
 800867e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008680:	4b0d      	ldr	r3, [pc, #52]	; (80086b8 <vTaskStartScheduler+0x84>)
 8008682:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008684:	4b0d      	ldr	r3, [pc, #52]	; (80086bc <vTaskStartScheduler+0x88>)
 8008686:	601c      	str	r4, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8008688:	f7fc f9ee 	bl	8004a68 <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800868c:	f000 fd92 	bl	80091b4 <xPortStartScheduler>
}
 8008690:	b008      	add	sp, #32
 8008692:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008694:	3001      	adds	r0, #1
 8008696:	d1fb      	bne.n	8008690 <vTaskStartScheduler+0x5c>
 8008698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869c:	f383 8811 	msr	BASEPRI, r3
 80086a0:	f3bf 8f6f 	isb	sy
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	e7fe      	b.n	80086a8 <vTaskStartScheduler+0x74>
 80086aa:	bf00      	nop
 80086ac:	0800a8e6 	.word	0x0800a8e6
 80086b0:	080083e5 	.word	0x080083e5
 80086b4:	200027d4 	.word	0x200027d4
 80086b8:	200027f0 	.word	0x200027f0
 80086bc:	2000281c 	.word	0x2000281c

080086c0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80086c0:	4a02      	ldr	r2, [pc, #8]	; (80086cc <vTaskSuspendAll+0xc>)
 80086c2:	6813      	ldr	r3, [r2, #0]
 80086c4:	3301      	adds	r3, #1
 80086c6:	6013      	str	r3, [r2, #0]
}
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	200027a0 	.word	0x200027a0

080086d0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80086d0:	4b01      	ldr	r3, [pc, #4]	; (80086d8 <xTaskGetTickCount+0x8>)
 80086d2:	6818      	ldr	r0, [r3, #0]
}
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	2000281c 	.word	0x2000281c

080086dc <xTaskIncrementTick>:
{
 80086dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086e0:	4b3b      	ldr	r3, [pc, #236]	; (80087d0 <xTaskIncrementTick+0xf4>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d16b      	bne.n	80087c0 <xTaskIncrementTick+0xe4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80086e8:	4b3a      	ldr	r3, [pc, #232]	; (80087d4 <xTaskIncrementTick+0xf8>)
 80086ea:	681c      	ldr	r4, [r3, #0]
 80086ec:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80086ee:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80086f0:	b9bc      	cbnz	r4, 8008722 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80086f2:	4b39      	ldr	r3, [pc, #228]	; (80087d8 <xTaskIncrementTick+0xfc>)
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	6812      	ldr	r2, [r2, #0]
 80086f8:	b142      	cbz	r2, 800870c <xTaskIncrementTick+0x30>
 80086fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fe:	f383 8811 	msr	BASEPRI, r3
 8008702:	f3bf 8f6f 	isb	sy
 8008706:	f3bf 8f4f 	dsb	sy
 800870a:	e7fe      	b.n	800870a <xTaskIncrementTick+0x2e>
 800870c:	4a33      	ldr	r2, [pc, #204]	; (80087dc <xTaskIncrementTick+0x100>)
 800870e:	6819      	ldr	r1, [r3, #0]
 8008710:	6810      	ldr	r0, [r2, #0]
 8008712:	6018      	str	r0, [r3, #0]
 8008714:	6011      	str	r1, [r2, #0]
 8008716:	4a32      	ldr	r2, [pc, #200]	; (80087e0 <xTaskIncrementTick+0x104>)
 8008718:	6813      	ldr	r3, [r2, #0]
 800871a:	3301      	adds	r3, #1
 800871c:	6013      	str	r3, [r2, #0]
 800871e:	f7ff fe93 	bl	8008448 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008722:	4d30      	ldr	r5, [pc, #192]	; (80087e4 <xTaskIncrementTick+0x108>)
BaseType_t xSwitchRequired = pdFALSE;
 8008724:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008728:	682b      	ldr	r3, [r5, #0]
 800872a:	4f2f      	ldr	r7, [pc, #188]	; (80087e8 <xTaskIncrementTick+0x10c>)
 800872c:	42a3      	cmp	r3, r4
 800872e:	d911      	bls.n	8008754 <xTaskIncrementTick+0x78>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008730:	683a      	ldr	r2, [r7, #0]
 8008732:	4b2e      	ldr	r3, [pc, #184]	; (80087ec <xTaskIncrementTick+0x110>)
 8008734:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008736:	2214      	movs	r2, #20
 8008738:	434a      	muls	r2, r1
 800873a:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800873c:	2a02      	cmp	r2, #2
 800873e:	bf28      	it	cs
 8008740:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8008744:	4a2a      	ldr	r2, [pc, #168]	; (80087f0 <xTaskIncrementTick+0x114>)
 8008746:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8008748:	2a00      	cmp	r2, #0
}
 800874a:	bf0c      	ite	eq
 800874c:	4658      	moveq	r0, fp
 800874e:	2001      	movne	r0, #1
 8008750:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008754:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80087d8 <xTaskIncrementTick+0xfc>
					prvAddTaskToReadyList( pxTCB );
 8008758:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80087f8 <xTaskIncrementTick+0x11c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800875c:	f8d9 2000 	ldr.w	r2, [r9]
 8008760:	6812      	ldr	r2, [r2, #0]
 8008762:	b91a      	cbnz	r2, 800876c <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008768:	602a      	str	r2, [r5, #0]
					break;
 800876a:	e7e1      	b.n	8008730 <xTaskIncrementTick+0x54>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800876c:	f8d9 2000 	ldr.w	r2, [r9]
 8008770:	68d2      	ldr	r2, [r2, #12]
 8008772:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008774:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8008776:	428c      	cmp	r4, r1
 8008778:	d201      	bcs.n	800877e <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 800877a:	6029      	str	r1, [r5, #0]
						break;
 800877c:	e7d8      	b.n	8008730 <xTaskIncrementTick+0x54>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800877e:	f106 0804 	add.w	r8, r6, #4
 8008782:	4640      	mov	r0, r8
 8008784:	f7ff fa7f 	bl	8007c86 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008788:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800878a:	b119      	cbz	r1, 8008794 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800878c:	f106 0018 	add.w	r0, r6, #24
 8008790:	f7ff fa79 	bl	8007c86 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008794:	2214      	movs	r2, #20
 8008796:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8008798:	f8da 1000 	ldr.w	r1, [sl]
 800879c:	4b13      	ldr	r3, [pc, #76]	; (80087ec <xTaskIncrementTick+0x110>)
 800879e:	4288      	cmp	r0, r1
 80087a0:	bf88      	it	hi
 80087a2:	f8ca 0000 	strhi.w	r0, [sl]
 80087a6:	4641      	mov	r1, r8
 80087a8:	fb02 3000 	mla	r0, r2, r0, r3
 80087ac:	f7ff fa48 	bl	8007c40 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087b0:	6838      	ldr	r0, [r7, #0]
 80087b2:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80087b4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80087b6:	4291      	cmp	r1, r2
 80087b8:	bf28      	it	cs
 80087ba:	f04f 0b01 	movcs.w	fp, #1
 80087be:	e7cd      	b.n	800875c <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 80087c0:	4a0c      	ldr	r2, [pc, #48]	; (80087f4 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 80087c2:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 80087c6:	6813      	ldr	r3, [r2, #0]
 80087c8:	3301      	adds	r3, #1
 80087ca:	6013      	str	r3, [r2, #0]
 80087cc:	e7ba      	b.n	8008744 <xTaskIncrementTick+0x68>
 80087ce:	bf00      	nop
 80087d0:	200027a0 	.word	0x200027a0
 80087d4:	2000281c 	.word	0x2000281c
 80087d8:	20002324 	.word	0x20002324
 80087dc:	20002328 	.word	0x20002328
 80087e0:	200027d8 	.word	0x200027d8
 80087e4:	200027d4 	.word	0x200027d4
 80087e8:	20002320 	.word	0x20002320
 80087ec:	2000232c 	.word	0x2000232c
 80087f0:	20002820 	.word	0x20002820
 80087f4:	2000279c 	.word	0x2000279c
 80087f8:	200027a8 	.word	0x200027a8

080087fc <xTaskResumeAll>:
{
 80087fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8008800:	4c2f      	ldr	r4, [pc, #188]	; (80088c0 <xTaskResumeAll+0xc4>)
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	b943      	cbnz	r3, 8008818 <xTaskResumeAll+0x1c>
 8008806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880a:	f383 8811 	msr	BASEPRI, r3
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	f3bf 8f4f 	dsb	sy
 8008816:	e7fe      	b.n	8008816 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8008818:	f000 fc44 	bl	80090a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800881c:	6823      	ldr	r3, [r4, #0]
 800881e:	3b01      	subs	r3, #1
 8008820:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008822:	6824      	ldr	r4, [r4, #0]
 8008824:	b12c      	cbz	r4, 8008832 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8008826:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008828:	f000 fc5e 	bl	80090e8 <vPortExitCritical>
}
 800882c:	4620      	mov	r0, r4
 800882e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008832:	4b24      	ldr	r3, [pc, #144]	; (80088c4 <xTaskResumeAll+0xc8>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d0f5      	beq.n	8008826 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800883a:	4d23      	ldr	r5, [pc, #140]	; (80088c8 <xTaskResumeAll+0xcc>)
					prvAddTaskToReadyList( pxTCB );
 800883c:	4e23      	ldr	r6, [pc, #140]	; (80088cc <xTaskResumeAll+0xd0>)
 800883e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80088e0 <xTaskResumeAll+0xe4>
 8008842:	e01d      	b.n	8008880 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008844:	68eb      	ldr	r3, [r5, #12]
 8008846:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008848:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800884a:	f104 0018 	add.w	r0, r4, #24
 800884e:	f7ff fa1a 	bl	8007c86 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008852:	4638      	mov	r0, r7
 8008854:	f7ff fa17 	bl	8007c86 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008858:	2014      	movs	r0, #20
 800885a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800885c:	6832      	ldr	r2, [r6, #0]
 800885e:	fb00 8003 	mla	r0, r0, r3, r8
 8008862:	4293      	cmp	r3, r2
 8008864:	4639      	mov	r1, r7
 8008866:	bf88      	it	hi
 8008868:	6033      	strhi	r3, [r6, #0]
 800886a:	f7ff f9e9 	bl	8007c40 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800886e:	4b18      	ldr	r3, [pc, #96]	; (80088d0 <xTaskResumeAll+0xd4>)
 8008870:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008876:	429a      	cmp	r2, r3
 8008878:	d302      	bcc.n	8008880 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800887a:	2201      	movs	r2, #1
 800887c:	4b15      	ldr	r3, [pc, #84]	; (80088d4 <xTaskResumeAll+0xd8>)
 800887e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008880:	682b      	ldr	r3, [r5, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d1de      	bne.n	8008844 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8008886:	b10c      	cbz	r4, 800888c <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8008888:	f7ff fdde 	bl	8008448 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800888c:	4d12      	ldr	r5, [pc, #72]	; (80088d8 <xTaskResumeAll+0xdc>)
 800888e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008890:	b144      	cbz	r4, 80088a4 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8008892:	2701      	movs	r7, #1
 8008894:	4e0f      	ldr	r6, [pc, #60]	; (80088d4 <xTaskResumeAll+0xd8>)
							if( xTaskIncrementTick() != pdFALSE )
 8008896:	f7ff ff21 	bl	80086dc <xTaskIncrementTick>
 800889a:	b100      	cbz	r0, 800889e <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800889c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800889e:	3c01      	subs	r4, #1
 80088a0:	d1f9      	bne.n	8008896 <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
 80088a2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80088a4:	4b0b      	ldr	r3, [pc, #44]	; (80088d4 <xTaskResumeAll+0xd8>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d0bc      	beq.n	8008826 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80088ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088b0:	4b0a      	ldr	r3, [pc, #40]	; (80088dc <xTaskResumeAll+0xe0>)
 80088b2:	601a      	str	r2, [r3, #0]
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80088bc:	2401      	movs	r4, #1
 80088be:	e7b3      	b.n	8008828 <xTaskResumeAll+0x2c>
 80088c0:	200027a0 	.word	0x200027a0
 80088c4:	20002794 	.word	0x20002794
 80088c8:	200027dc 	.word	0x200027dc
 80088cc:	200027a8 	.word	0x200027a8
 80088d0:	20002320 	.word	0x20002320
 80088d4:	20002820 	.word	0x20002820
 80088d8:	2000279c 	.word	0x2000279c
 80088dc:	e000ed04 	.word	0xe000ed04
 80088e0:	2000232c 	.word	0x2000232c

080088e4 <vTaskDelayUntil>:
	{
 80088e4:	b510      	push	{r4, lr}
		configASSERT( pxPreviousWakeTime );
 80088e6:	b940      	cbnz	r0, 80088fa <vTaskDelayUntil+0x16>
 80088e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ec:	f383 8811 	msr	BASEPRI, r3
 80088f0:	f3bf 8f6f 	isb	sy
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	e7fe      	b.n	80088f8 <vTaskDelayUntil+0x14>
		configASSERT( ( xTimeIncrement > 0U ) );
 80088fa:	b941      	cbnz	r1, 800890e <vTaskDelayUntil+0x2a>
 80088fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008900:	f383 8811 	msr	BASEPRI, r3
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	e7fe      	b.n	800890c <vTaskDelayUntil+0x28>
		configASSERT( uxSchedulerSuspended == 0 );
 800890e:	4b16      	ldr	r3, [pc, #88]	; (8008968 <vTaskDelayUntil+0x84>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	b143      	cbz	r3, 8008926 <vTaskDelayUntil+0x42>
 8008914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	e7fe      	b.n	8008924 <vTaskDelayUntil+0x40>
		vTaskSuspendAll();
 8008926:	f7ff fecb 	bl	80086c0 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 800892a:	4b10      	ldr	r3, [pc, #64]	; (800896c <vTaskDelayUntil+0x88>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800892c:	6804      	ldr	r4, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	1863      	adds	r3, r4, r1
 8008932:	bf2c      	ite	cs
 8008934:	2101      	movcs	r1, #1
 8008936:	2100      	movcc	r1, #0
			if( xConstTickCount < *pxPreviousWakeTime )
 8008938:	4294      	cmp	r4, r2
			*pxPreviousWakeTime = xTimeToWake;
 800893a:	6003      	str	r3, [r0, #0]
			if( xConstTickCount < *pxPreviousWakeTime )
 800893c:	d90c      	bls.n	8008958 <vTaskDelayUntil+0x74>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800893e:	b961      	cbnz	r1, 800895a <vTaskDelayUntil+0x76>
		xAlreadyYielded = xTaskResumeAll();
 8008940:	f7ff ff5c 	bl	80087fc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008944:	b938      	cbnz	r0, 8008956 <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
 8008946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800894a:	4b09      	ldr	r3, [pc, #36]	; (8008970 <vTaskDelayUntil+0x8c>)
 800894c:	601a      	str	r2, [r3, #0]
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	f3bf 8f6f 	isb	sy
	}
 8008956:	bd10      	pop	{r4, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008958:	b909      	cbnz	r1, 800895e <vTaskDelayUntil+0x7a>
 800895a:	429a      	cmp	r2, r3
 800895c:	d2f0      	bcs.n	8008940 <vTaskDelayUntil+0x5c>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800895e:	2100      	movs	r1, #0
 8008960:	1a98      	subs	r0, r3, r2
 8008962:	f7ff fdc9 	bl	80084f8 <prvAddCurrentTaskToDelayedList>
 8008966:	e7eb      	b.n	8008940 <vTaskDelayUntil+0x5c>
 8008968:	200027a0 	.word	0x200027a0
 800896c:	2000281c 	.word	0x2000281c
 8008970:	e000ed04 	.word	0xe000ed04

08008974 <vTaskSwitchContext>:
{
 8008974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008976:	4b20      	ldr	r3, [pc, #128]	; (80089f8 <vTaskSwitchContext+0x84>)
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	4b20      	ldr	r3, [pc, #128]	; (80089fc <vTaskSwitchContext+0x88>)
 800897c:	b112      	cbz	r2, 8008984 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800897e:	2201      	movs	r2, #1
 8008980:	601a      	str	r2, [r3, #0]
}
 8008982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xYieldPending = pdFALSE;
 8008984:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8008986:	f7fc f875 	bl	8004a74 <getRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800898a:	4a1d      	ldr	r2, [pc, #116]	; (8008a00 <vTaskSwitchContext+0x8c>)
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800898c:	4b1d      	ldr	r3, [pc, #116]	; (8008a04 <vTaskSwitchContext+0x90>)
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800898e:	6814      	ldr	r4, [r2, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8008990:	6018      	str	r0, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8008992:	42a0      	cmp	r0, r4
 8008994:	d905      	bls.n	80089a2 <vTaskSwitchContext+0x2e>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8008996:	4b1c      	ldr	r3, [pc, #112]	; (8008a08 <vTaskSwitchContext+0x94>)
 8008998:	6819      	ldr	r1, [r3, #0]
 800899a:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800899c:	1b1b      	subs	r3, r3, r4
 800899e:	4403      	add	r3, r0
 80089a0:	658b      	str	r3, [r1, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 80089a2:	6010      	str	r0, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80089a4:	4a19      	ldr	r2, [pc, #100]	; (8008a0c <vTaskSwitchContext+0x98>)
 80089a6:	2714      	movs	r7, #20
 80089a8:	4616      	mov	r6, r2
 80089aa:	4d19      	ldr	r5, [pc, #100]	; (8008a10 <vTaskSwitchContext+0x9c>)
 80089ac:	682b      	ldr	r3, [r5, #0]
 80089ae:	fb07 f103 	mul.w	r1, r7, r3
 80089b2:	5854      	ldr	r4, [r2, r1]
 80089b4:	1850      	adds	r0, r2, r1
 80089b6:	b194      	cbz	r4, 80089de <vTaskSwitchContext+0x6a>
 80089b8:	6844      	ldr	r4, [r0, #4]
 80089ba:	3108      	adds	r1, #8
 80089bc:	6864      	ldr	r4, [r4, #4]
 80089be:	440a      	add	r2, r1
 80089c0:	4294      	cmp	r4, r2
 80089c2:	bf08      	it	eq
 80089c4:	6862      	ldreq	r2, [r4, #4]
 80089c6:	6044      	str	r4, [r0, #4]
 80089c8:	bf08      	it	eq
 80089ca:	6042      	streq	r2, [r0, #4]
 80089cc:	2214      	movs	r2, #20
 80089ce:	fb02 6203 	mla	r2, r2, r3, r6
 80089d2:	6852      	ldr	r2, [r2, #4]
 80089d4:	68d1      	ldr	r1, [r2, #12]
 80089d6:	4a0c      	ldr	r2, [pc, #48]	; (8008a08 <vTaskSwitchContext+0x94>)
 80089d8:	6011      	str	r1, [r2, #0]
 80089da:	602b      	str	r3, [r5, #0]
}
 80089dc:	e7d1      	b.n	8008982 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80089de:	b943      	cbnz	r3, 80089f2 <vTaskSwitchContext+0x7e>
 80089e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	e7fe      	b.n	80089f0 <vTaskSwitchContext+0x7c>
 80089f2:	3b01      	subs	r3, #1
 80089f4:	e7db      	b.n	80089ae <vTaskSwitchContext+0x3a>
 80089f6:	bf00      	nop
 80089f8:	200027a0 	.word	0x200027a0
 80089fc:	20002820 	.word	0x20002820
 8008a00:	2000278c 	.word	0x2000278c
 8008a04:	20002790 	.word	0x20002790
 8008a08:	20002320 	.word	0x20002320
 8008a0c:	2000232c 	.word	0x2000232c
 8008a10:	200027a8 	.word	0x200027a8

08008a14 <vTaskPlaceOnEventList>:
{
 8008a14:	b510      	push	{r4, lr}
 8008a16:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8008a18:	b940      	cbnz	r0, 8008a2c <vTaskPlaceOnEventList+0x18>
 8008a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1e:	f383 8811 	msr	BASEPRI, r3
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	f3bf 8f4f 	dsb	sy
 8008a2a:	e7fe      	b.n	8008a2a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a2c:	4b05      	ldr	r3, [pc, #20]	; (8008a44 <vTaskPlaceOnEventList+0x30>)
 8008a2e:	6819      	ldr	r1, [r3, #0]
 8008a30:	3118      	adds	r1, #24
 8008a32:	f7ff f911 	bl	8007c58 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a36:	4620      	mov	r0, r4
}
 8008a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a3c:	2101      	movs	r1, #1
 8008a3e:	f7ff bd5b 	b.w	80084f8 <prvAddCurrentTaskToDelayedList>
 8008a42:	bf00      	nop
 8008a44:	20002320 	.word	0x20002320

08008a48 <vTaskPlaceOnEventListRestricted>:
	{
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	460d      	mov	r5, r1
 8008a4c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8008a4e:	b940      	cbnz	r0, 8008a62 <vTaskPlaceOnEventListRestricted+0x1a>
 8008a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a54:	f383 8811 	msr	BASEPRI, r3
 8008a58:	f3bf 8f6f 	isb	sy
 8008a5c:	f3bf 8f4f 	dsb	sy
 8008a60:	e7fe      	b.n	8008a60 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a62:	4b08      	ldr	r3, [pc, #32]	; (8008a84 <vTaskPlaceOnEventListRestricted+0x3c>)
 8008a64:	6819      	ldr	r1, [r3, #0]
 8008a66:	3118      	adds	r1, #24
 8008a68:	f7ff f8ea 	bl	8007c40 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8008a6c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008a6e:	4621      	mov	r1, r4
 8008a70:	bf08      	it	eq
 8008a72:	4628      	moveq	r0, r5
	}
 8008a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008a78:	bf18      	it	ne
 8008a7a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008a7e:	f7ff bd3b 	b.w	80084f8 <prvAddCurrentTaskToDelayedList>
 8008a82:	bf00      	nop
 8008a84:	20002320 	.word	0x20002320

08008a88 <xTaskRemoveFromEventList>:
{
 8008a88:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008a8a:	68c3      	ldr	r3, [r0, #12]
 8008a8c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008a8e:	b944      	cbnz	r4, 8008aa2 <xTaskRemoveFromEventList+0x1a>
 8008a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	e7fe      	b.n	8008aa0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008aa2:	f104 0518 	add.w	r5, r4, #24
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	f7ff f8ed 	bl	8007c86 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008aac:	4b10      	ldr	r3, [pc, #64]	; (8008af0 <xTaskRemoveFromEventList+0x68>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	b9db      	cbnz	r3, 8008aea <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ab2:	1d25      	adds	r5, r4, #4
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	f7ff f8e6 	bl	8007c86 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008aba:	4a0e      	ldr	r2, [pc, #56]	; (8008af4 <xTaskRemoveFromEventList+0x6c>)
 8008abc:	2014      	movs	r0, #20
 8008abe:	6811      	ldr	r1, [r2, #0]
 8008ac0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008ac2:	428b      	cmp	r3, r1
 8008ac4:	4629      	mov	r1, r5
 8008ac6:	bf88      	it	hi
 8008ac8:	6013      	strhi	r3, [r2, #0]
 8008aca:	4a0b      	ldr	r2, [pc, #44]	; (8008af8 <xTaskRemoveFromEventList+0x70>)
 8008acc:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008ad0:	f7ff f8b6 	bl	8007c40 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ad4:	4b09      	ldr	r3, [pc, #36]	; (8008afc <xTaskRemoveFromEventList+0x74>)
 8008ad6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008adc:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8008ade:	bf85      	ittet	hi
 8008ae0:	2001      	movhi	r0, #1
 8008ae2:	4b07      	ldrhi	r3, [pc, #28]	; (8008b00 <xTaskRemoveFromEventList+0x78>)
		xReturn = pdFALSE;
 8008ae4:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8008ae6:	6018      	strhi	r0, [r3, #0]
}
 8008ae8:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008aea:	4629      	mov	r1, r5
 8008aec:	4805      	ldr	r0, [pc, #20]	; (8008b04 <xTaskRemoveFromEventList+0x7c>)
 8008aee:	e7ef      	b.n	8008ad0 <xTaskRemoveFromEventList+0x48>
 8008af0:	200027a0 	.word	0x200027a0
 8008af4:	200027a8 	.word	0x200027a8
 8008af8:	2000232c 	.word	0x2000232c
 8008afc:	20002320 	.word	0x20002320
 8008b00:	20002820 	.word	0x20002820
 8008b04:	200027dc 	.word	0x200027dc

08008b08 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b08:	4b03      	ldr	r3, [pc, #12]	; (8008b18 <vTaskInternalSetTimeOutState+0x10>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b0e:	4b03      	ldr	r3, [pc, #12]	; (8008b1c <vTaskInternalSetTimeOutState+0x14>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	6043      	str	r3, [r0, #4]
}
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	200027d8 	.word	0x200027d8
 8008b1c:	2000281c 	.word	0x2000281c

08008b20 <xTaskCheckForTimeOut>:
{
 8008b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b22:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8008b24:	4605      	mov	r5, r0
 8008b26:	b940      	cbnz	r0, 8008b3a <xTaskCheckForTimeOut+0x1a>
 8008b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2c:	f383 8811 	msr	BASEPRI, r3
 8008b30:	f3bf 8f6f 	isb	sy
 8008b34:	f3bf 8f4f 	dsb	sy
 8008b38:	e7fe      	b.n	8008b38 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8008b3a:	b941      	cbnz	r1, 8008b4e <xTaskCheckForTimeOut+0x2e>
 8008b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b40:	f383 8811 	msr	BASEPRI, r3
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	e7fe      	b.n	8008b4c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8008b4e:	f000 faa9 	bl	80090a4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8008b52:	4b0f      	ldr	r3, [pc, #60]	; (8008b90 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b54:	6868      	ldr	r0, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8008b56:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8008b58:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b5a:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8008b5c:	1c5e      	adds	r6, r3, #1
 8008b5e:	d00d      	beq.n	8008b7c <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b60:	4e0c      	ldr	r6, [pc, #48]	; (8008b94 <xTaskCheckForTimeOut+0x74>)
 8008b62:	682f      	ldr	r7, [r5, #0]
 8008b64:	6836      	ldr	r6, [r6, #0]
 8008b66:	42b7      	cmp	r7, r6
 8008b68:	d001      	beq.n	8008b6e <xTaskCheckForTimeOut+0x4e>
 8008b6a:	4288      	cmp	r0, r1
 8008b6c:	d90d      	bls.n	8008b8a <xTaskCheckForTimeOut+0x6a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d909      	bls.n	8008b86 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8008b72:	1a9b      	subs	r3, r3, r2
 8008b74:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b76:	4628      	mov	r0, r5
 8008b78:	f7ff ffc6 	bl	8008b08 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8008b7c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008b7e:	f000 fab3 	bl	80090e8 <vPortExitCritical>
}
 8008b82:	4620      	mov	r0, r4
 8008b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008b8a:	2401      	movs	r4, #1
 8008b8c:	e7f7      	b.n	8008b7e <xTaskCheckForTimeOut+0x5e>
 8008b8e:	bf00      	nop
 8008b90:	2000281c 	.word	0x2000281c
 8008b94:	200027d8 	.word	0x200027d8

08008b98 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008b98:	2201      	movs	r2, #1
 8008b9a:	4b01      	ldr	r3, [pc, #4]	; (8008ba0 <vTaskMissedYield+0x8>)
 8008b9c:	601a      	str	r2, [r3, #0]
}
 8008b9e:	4770      	bx	lr
 8008ba0:	20002820 	.word	0x20002820

08008ba4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008ba4:	4b05      	ldr	r3, [pc, #20]	; (8008bbc <xTaskGetSchedulerState+0x18>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	b133      	cbz	r3, 8008bb8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008baa:	4b05      	ldr	r3, [pc, #20]	; (8008bc0 <xTaskGetSchedulerState+0x1c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8008bb0:	bf0c      	ite	eq
 8008bb2:	2002      	moveq	r0, #2
 8008bb4:	2000      	movne	r0, #0
 8008bb6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008bb8:	2001      	movs	r0, #1
	}
 8008bba:	4770      	bx	lr
 8008bbc:	200027f0 	.word	0x200027f0
 8008bc0:	200027a0 	.word	0x200027a0

08008bc4 <xTaskPriorityDisinherit>:
	{
 8008bc4:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8008bc6:	b908      	cbnz	r0, 8008bcc <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8008bc8:	2000      	movs	r0, #0
	}
 8008bca:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8008bcc:	4b1b      	ldr	r3, [pc, #108]	; (8008c3c <xTaskPriorityDisinherit+0x78>)
 8008bce:	681c      	ldr	r4, [r3, #0]
 8008bd0:	4284      	cmp	r4, r0
 8008bd2:	d008      	beq.n	8008be6 <xTaskPriorityDisinherit+0x22>
 8008bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	e7fe      	b.n	8008be4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8008be6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008be8:	b943      	cbnz	r3, 8008bfc <xTaskPriorityDisinherit+0x38>
 8008bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	e7fe      	b.n	8008bfa <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008bfc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008bfe:	6d22      	ldr	r2, [r4, #80]	; 0x50
			( pxTCB->uxMutexesHeld )--;
 8008c00:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c02:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8008c04:	6563      	str	r3, [r4, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c06:	d0df      	beq.n	8008bc8 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1dd      	bne.n	8008bc8 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c0c:	1d25      	adds	r5, r4, #4
 8008c0e:	4628      	mov	r0, r5
 8008c10:	f7ff f839 	bl	8007c86 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c14:	2014      	movs	r0, #20
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c16:	6d23      	ldr	r3, [r4, #80]	; 0x50
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c1c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c1e:	4a08      	ldr	r2, [pc, #32]	; (8008c40 <xTaskPriorityDisinherit+0x7c>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c20:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8008c22:	6811      	ldr	r1, [r2, #0]
 8008c24:	428b      	cmp	r3, r1
 8008c26:	bf88      	it	hi
 8008c28:	6013      	strhi	r3, [r2, #0]
 8008c2a:	4a06      	ldr	r2, [pc, #24]	; (8008c44 <xTaskPriorityDisinherit+0x80>)
 8008c2c:	4629      	mov	r1, r5
 8008c2e:	fb00 2003 	mla	r0, r0, r3, r2
 8008c32:	f7ff f805 	bl	8007c40 <vListInsertEnd>
					xReturn = pdTRUE;
 8008c36:	2001      	movs	r0, #1
		return xReturn;
 8008c38:	e7c7      	b.n	8008bca <xTaskPriorityDisinherit+0x6>
 8008c3a:	bf00      	nop
 8008c3c:	20002320 	.word	0x20002320
 8008c40:	200027a8 	.word	0x200027a8
 8008c44:	2000232c 	.word	0x2000232c

08008c48 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008c48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8008c4a:	4c11      	ldr	r4, [pc, #68]	; (8008c90 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8008c4c:	f000 fa2a 	bl	80090a4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8008c50:	6825      	ldr	r5, [r4, #0]
 8008c52:	b9bd      	cbnz	r5, 8008c84 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8008c54:	4f0f      	ldr	r7, [pc, #60]	; (8008c94 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8008c56:	4e10      	ldr	r6, [pc, #64]	; (8008c98 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8008c58:	4638      	mov	r0, r7
 8008c5a:	f7fe ffe3 	bl	8007c24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008c5e:	4630      	mov	r0, r6
 8008c60:	f7fe ffe0 	bl	8007c24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008c64:	4b0d      	ldr	r3, [pc, #52]	; (8008c9c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008c66:	4a0e      	ldr	r2, [pc, #56]	; (8008ca0 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8008c68:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008c6a:	4b0e      	ldr	r3, [pc, #56]	; (8008ca4 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008c6c:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8008c6e:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008c70:	200a      	movs	r0, #10
 8008c72:	9500      	str	r5, [sp, #0]
 8008c74:	4b0c      	ldr	r3, [pc, #48]	; (8008ca8 <prvCheckForValidListAndQueue+0x60>)
 8008c76:	f7ff f8e1 	bl	8007e3c <xQueueGenericCreateStatic>
 8008c7a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c7c:	b110      	cbz	r0, 8008c84 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c7e:	490b      	ldr	r1, [pc, #44]	; (8008cac <prvCheckForValidListAndQueue+0x64>)
 8008c80:	f7ff fade 	bl	8008240 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8008c84:	b003      	add	sp, #12
 8008c86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8008c8a:	f000 ba2d 	b.w	80090e8 <vPortExitCritical>
 8008c8e:	bf00      	nop
 8008c90:	20002948 	.word	0x20002948
 8008c94:	200028cc 	.word	0x200028cc
 8008c98:	200028e0 	.word	0x200028e0
 8008c9c:	20002824 	.word	0x20002824
 8008ca0:	2000282c 	.word	0x2000282c
 8008ca4:	20002828 	.word	0x20002828
 8008ca8:	200028f8 	.word	0x200028f8
 8008cac:	0800a8eb 	.word	0x0800a8eb

08008cb0 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8008cb0:	4291      	cmp	r1, r2
{
 8008cb2:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008cb4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cb6:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8008cb8:	d80a      	bhi.n	8008cd0 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cba:	1ad2      	subs	r2, r2, r3
 8008cbc:	6983      	ldr	r3, [r0, #24]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d20d      	bcs.n	8008cde <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008cc2:	4b08      	ldr	r3, [pc, #32]	; (8008ce4 <prvInsertTimerInActiveList+0x34>)
 8008cc4:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cc6:	6818      	ldr	r0, [r3, #0]
 8008cc8:	f7fe ffc6 	bl	8007c58 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8008ccc:	2000      	movs	r0, #0
}
 8008cce:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d201      	bcs.n	8008cd8 <prvInsertTimerInActiveList+0x28>
 8008cd4:	4299      	cmp	r1, r3
 8008cd6:	d202      	bcs.n	8008cde <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cd8:	1d01      	adds	r1, r0, #4
 8008cda:	4b03      	ldr	r3, [pc, #12]	; (8008ce8 <prvInsertTimerInActiveList+0x38>)
 8008cdc:	e7f3      	b.n	8008cc6 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8008cde:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8008ce0:	e7f5      	b.n	8008cce <prvInsertTimerInActiveList+0x1e>
 8008ce2:	bf00      	nop
 8008ce4:	20002828 	.word	0x20002828
 8008ce8:	20002824 	.word	0x20002824

08008cec <xTimerCreateTimerTask>:
{
 8008cec:	b510      	push	{r4, lr}
 8008cee:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8008cf0:	f7ff ffaa 	bl	8008c48 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8008cf4:	4b12      	ldr	r3, [pc, #72]	; (8008d40 <xTimerCreateTimerTask+0x54>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	b1b3      	cbz	r3, 8008d28 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008cfa:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008cfc:	aa07      	add	r2, sp, #28
 8008cfe:	a906      	add	r1, sp, #24
 8008d00:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d02:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d06:	f7fe ff81 	bl	8007c0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008d0a:	9b05      	ldr	r3, [sp, #20]
 8008d0c:	9a07      	ldr	r2, [sp, #28]
 8008d0e:	9302      	str	r3, [sp, #8]
 8008d10:	9b06      	ldr	r3, [sp, #24]
 8008d12:	490c      	ldr	r1, [pc, #48]	; (8008d44 <xTimerCreateTimerTask+0x58>)
 8008d14:	9301      	str	r3, [sp, #4]
 8008d16:	2302      	movs	r3, #2
 8008d18:	480b      	ldr	r0, [pc, #44]	; (8008d48 <xTimerCreateTimerTask+0x5c>)
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	4623      	mov	r3, r4
 8008d1e:	f7ff fc25 	bl	800856c <xTaskCreateStatic>
 8008d22:	4b0a      	ldr	r3, [pc, #40]	; (8008d4c <xTimerCreateTimerTask+0x60>)
 8008d24:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8008d26:	b940      	cbnz	r0, 8008d3a <xTimerCreateTimerTask+0x4e>
 8008d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2c:	f383 8811 	msr	BASEPRI, r3
 8008d30:	f3bf 8f6f 	isb	sy
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	e7fe      	b.n	8008d38 <xTimerCreateTimerTask+0x4c>
}
 8008d3a:	2001      	movs	r0, #1
 8008d3c:	b008      	add	sp, #32
 8008d3e:	bd10      	pop	{r4, pc}
 8008d40:	20002948 	.word	0x20002948
 8008d44:	0800a8f0 	.word	0x0800a8f0
 8008d48:	08008e25 	.word	0x08008e25
 8008d4c:	2000294c 	.word	0x2000294c

08008d50 <xTimerGenericCommand>:
{
 8008d50:	b530      	push	{r4, r5, lr}
 8008d52:	4615      	mov	r5, r2
 8008d54:	b085      	sub	sp, #20
 8008d56:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8008d58:	4603      	mov	r3, r0
 8008d5a:	b940      	cbnz	r0, 8008d6e <xTimerGenericCommand+0x1e>
 8008d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	e7fe      	b.n	8008d6c <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 8008d6e:	4c0d      	ldr	r4, [pc, #52]	; (8008da4 <xTimerGenericCommand+0x54>)
 8008d70:	6820      	ldr	r0, [r4, #0]
 8008d72:	b178      	cbz	r0, 8008d94 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008d74:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008d76:	e9cd 1500 	strd	r1, r5, [sp]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008d7a:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008d7c:	dc0c      	bgt.n	8008d98 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008d7e:	f7ff ff11 	bl	8008ba4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008d82:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008d84:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008d86:	bf0c      	ite	eq
 8008d88:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008d8a:	461a      	movne	r2, r3
 8008d8c:	4669      	mov	r1, sp
 8008d8e:	6820      	ldr	r0, [r4, #0]
 8008d90:	f7ff f8a2 	bl	8007ed8 <xQueueGenericSend>
}
 8008d94:	b005      	add	sp, #20
 8008d96:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d98:	2300      	movs	r3, #0
 8008d9a:	4669      	mov	r1, sp
 8008d9c:	f7ff f94e 	bl	800803c <xQueueGenericSendFromISR>
 8008da0:	e7f8      	b.n	8008d94 <xTimerGenericCommand+0x44>
 8008da2:	bf00      	nop
 8008da4:	20002948 	.word	0x20002948

08008da8 <prvSwitchTimerLists>:
{
 8008da8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008dac:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008db0:	4d1a      	ldr	r5, [pc, #104]	; (8008e1c <prvSwitchTimerLists+0x74>)
 8008db2:	682b      	ldr	r3, [r5, #0]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	b932      	cbnz	r2, 8008dc6 <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 8008db8:	4a19      	ldr	r2, [pc, #100]	; (8008e20 <prvSwitchTimerLists+0x78>)
 8008dba:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008dbc:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8008dbe:	6029      	str	r1, [r5, #0]
}
 8008dc0:	b002      	add	sp, #8
 8008dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008dc6:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008dc8:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008dca:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008dcc:	1d27      	adds	r7, r4, #4
 8008dce:	4638      	mov	r0, r7
 8008dd0:	f7fe ff59 	bl	8007c86 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008dd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008dda:	69e3      	ldr	r3, [r4, #28]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d1e8      	bne.n	8008db2 <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008de0:	69a3      	ldr	r3, [r4, #24]
 8008de2:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8008de4:	429e      	cmp	r6, r3
 8008de6:	d206      	bcs.n	8008df6 <prvSwitchTimerLists+0x4e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008de8:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008dea:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008dec:	4639      	mov	r1, r7
 8008dee:	6828      	ldr	r0, [r5, #0]
 8008df0:	f7fe ff32 	bl	8007c58 <vListInsert>
 8008df4:	e7dd      	b.n	8008db2 <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008df6:	2300      	movs	r3, #0
 8008df8:	f8cd 8000 	str.w	r8, [sp]
 8008dfc:	4632      	mov	r2, r6
 8008dfe:	4619      	mov	r1, r3
 8008e00:	4620      	mov	r0, r4
 8008e02:	f7ff ffa5 	bl	8008d50 <xTimerGenericCommand>
				configASSERT( xResult );
 8008e06:	2800      	cmp	r0, #0
 8008e08:	d1d3      	bne.n	8008db2 <prvSwitchTimerLists+0xa>
 8008e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0e:	f383 8811 	msr	BASEPRI, r3
 8008e12:	f3bf 8f6f 	isb	sy
 8008e16:	f3bf 8f4f 	dsb	sy
 8008e1a:	e7fe      	b.n	8008e1a <prvSwitchTimerLists+0x72>
 8008e1c:	20002824 	.word	0x20002824
 8008e20:	20002828 	.word	0x20002828

08008e24 <prvTimerTask>:
{
 8008e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008e28:	4d6d      	ldr	r5, [pc, #436]	; (8008fe0 <prvTimerTask+0x1bc>)
					portYIELD_WITHIN_API();
 8008e2a:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8008ff0 <prvTimerTask+0x1cc>
 8008e2e:	462f      	mov	r7, r5
{
 8008e30:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008e32:	682b      	ldr	r3, [r5, #0]
 8008e34:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8008e38:	f1bb 0f00 	cmp.w	fp, #0
 8008e3c:	d04b      	beq.n	8008ed6 <prvTimerTask+0xb2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
 8008e44:	f7ff fc3c 	bl	80086c0 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8008e48:	f7ff fc42 	bl	80086d0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008e4c:	4c65      	ldr	r4, [pc, #404]	; (8008fe4 <prvTimerTask+0x1c0>)
	xTimeNow = xTaskGetTickCount();
 8008e4e:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 8008e50:	6823      	ldr	r3, [r4, #0]
 8008e52:	4626      	mov	r6, r4
 8008e54:	4298      	cmp	r0, r3
 8008e56:	d240      	bcs.n	8008eda <prvTimerTask+0xb6>
		prvSwitchTimerLists();
 8008e58:	f7ff ffa6 	bl	8008da8 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8008e5c:	f8c4 9000 	str.w	r9, [r4]
			( void ) xTaskResumeAll();
 8008e60:	f7ff fccc 	bl	80087fc <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e64:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8008fec <prvTimerTask+0x1c8>
 8008e68:	2200      	movs	r2, #0
 8008e6a:	a902      	add	r1, sp, #8
 8008e6c:	f8d9 0000 	ldr.w	r0, [r9]
 8008e70:	f7ff f946 	bl	8008100 <xQueueReceive>
 8008e74:	2800      	cmp	r0, #0
 8008e76:	d0dc      	beq.n	8008e32 <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008e78:	9b02      	ldr	r3, [sp, #8]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	da03      	bge.n	8008e86 <prvTimerTask+0x62>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008e7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e82:	9b03      	ldr	r3, [sp, #12]
 8008e84:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008e86:	9b02      	ldr	r3, [sp, #8]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	dbed      	blt.n	8008e68 <prvTimerTask+0x44>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008e8c:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008e8e:	6963      	ldr	r3, [r4, #20]
 8008e90:	b113      	cbz	r3, 8008e98 <prvTimerTask+0x74>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e92:	1d20      	adds	r0, r4, #4
 8008e94:	f7fe fef7 	bl	8007c86 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8008e98:	f7ff fc1a 	bl	80086d0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008e9c:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8008e9e:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8008ea0:	4298      	cmp	r0, r3
 8008ea2:	d201      	bcs.n	8008ea8 <prvTimerTask+0x84>
		prvSwitchTimerLists();
 8008ea4:	f7ff ff80 	bl	8008da8 <prvSwitchTimerLists>
 8008ea8:	9a02      	ldr	r2, [sp, #8]
	xLastTime = xTimeNow;
 8008eaa:	f8c6 b000 	str.w	fp, [r6]
 8008eae:	2a09      	cmp	r2, #9
 8008eb0:	d8da      	bhi.n	8008e68 <prvTimerTask+0x44>
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	4093      	lsls	r3, r2
 8008eb6:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 8008eba:	d17e      	bne.n	8008fba <prvTimerTask+0x196>
 8008ebc:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 8008ec0:	d154      	bne.n	8008f6c <prvTimerTask+0x148>
 8008ec2:	069b      	lsls	r3, r3, #26
 8008ec4:	d5d0      	bpl.n	8008e68 <prvTimerTask+0x44>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008ec6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1cc      	bne.n	8008e68 <prvTimerTask+0x44>
							vPortFree( pxTimer );
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f000 faaa 	bl	8009428 <vPortFree>
 8008ed4:	e7c8      	b.n	8008e68 <prvTimerTask+0x44>
		xNextExpireTime = ( TickType_t ) 0U;
 8008ed6:	46da      	mov	sl, fp
 8008ed8:	e7b4      	b.n	8008e44 <prvTimerTask+0x20>
	xLastTime = xTimeNow;
 8008eda:	6020      	str	r0, [r4, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008edc:	f1bb 0f00 	cmp.w	fp, #0
 8008ee0:	d029      	beq.n	8008f36 <prvTimerTask+0x112>
 8008ee2:	4582      	cmp	sl, r0
 8008ee4:	d840      	bhi.n	8008f68 <prvTimerTask+0x144>
				( void ) xTaskResumeAll();
 8008ee6:	f7ff fc89 	bl	80087fc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ef0:	1d20      	adds	r0, r4, #4
 8008ef2:	f7fe fec8 	bl	8007c86 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008ef6:	69e3      	ldr	r3, [r4, #28]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d118      	bne.n	8008f2e <prvTimerTask+0x10a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008efc:	69a1      	ldr	r1, [r4, #24]
 8008efe:	4653      	mov	r3, sl
 8008f00:	464a      	mov	r2, r9
 8008f02:	4451      	add	r1, sl
 8008f04:	4620      	mov	r0, r4
 8008f06:	f7ff fed3 	bl	8008cb0 <prvInsertTimerInActiveList>
 8008f0a:	b180      	cbz	r0, 8008f2e <prvTimerTask+0x10a>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	4652      	mov	r2, sl
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	4619      	mov	r1, r3
 8008f14:	4620      	mov	r0, r4
 8008f16:	f7ff ff1b 	bl	8008d50 <xTimerGenericCommand>
			configASSERT( xResult );
 8008f1a:	b940      	cbnz	r0, 8008f2e <prvTimerTask+0x10a>
 8008f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f20:	f383 8811 	msr	BASEPRI, r3
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	e7fe      	b.n	8008f2c <prvTimerTask+0x108>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f30:	4620      	mov	r0, r4
 8008f32:	4798      	blx	r3
 8008f34:	e796      	b.n	8008e64 <prvTimerTask+0x40>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008f36:	4b2c      	ldr	r3, [pc, #176]	; (8008fe8 <prvTimerTask+0x1c4>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	fab2 f282 	clz	r2, r2
 8008f40:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008f42:	4b2a      	ldr	r3, [pc, #168]	; (8008fec <prvTimerTask+0x1c8>)
 8008f44:	ebaa 0109 	sub.w	r1, sl, r9
 8008f48:	6818      	ldr	r0, [r3, #0]
 8008f4a:	f7ff f98b 	bl	8008264 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008f4e:	f7ff fc55 	bl	80087fc <xTaskResumeAll>
 8008f52:	2800      	cmp	r0, #0
 8008f54:	d186      	bne.n	8008e64 <prvTimerTask+0x40>
					portYIELD_WITHIN_API();
 8008f56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f5a:	f8c8 3000 	str.w	r3, [r8]
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	e77d      	b.n	8008e64 <prvTimerTask+0x40>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f68:	2200      	movs	r2, #0
 8008f6a:	e7ea      	b.n	8008f42 <prvTimerTask+0x11e>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008f6c:	69a1      	ldr	r1, [r4, #24]
 8008f6e:	9b03      	ldr	r3, [sp, #12]
 8008f70:	465a      	mov	r2, fp
 8008f72:	4419      	add	r1, r3
 8008f74:	4620      	mov	r0, r4
 8008f76:	f7ff fe9b 	bl	8008cb0 <prvInsertTimerInActiveList>
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	f43f af74 	beq.w	8008e68 <prvTimerTask+0x44>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f82:	4620      	mov	r0, r4
 8008f84:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008f86:	69e3      	ldr	r3, [r4, #28]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	f47f af6d 	bne.w	8008e68 <prvTimerTask+0x44>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008f8e:	69a2      	ldr	r2, [r4, #24]
 8008f90:	9903      	ldr	r1, [sp, #12]
 8008f92:	f8cd a000 	str.w	sl, [sp]
 8008f96:	440a      	add	r2, r1
 8008f98:	4653      	mov	r3, sl
 8008f9a:	4651      	mov	r1, sl
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	f7ff fed7 	bl	8008d50 <xTimerGenericCommand>
							configASSERT( xResult );
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	f47f af60 	bne.w	8008e68 <prvTimerTask+0x44>
 8008fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fac:	f383 8811 	msr	BASEPRI, r3
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	e7fe      	b.n	8008fb8 <prvTimerTask+0x194>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008fba:	9903      	ldr	r1, [sp, #12]
 8008fbc:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008fbe:	b941      	cbnz	r1, 8008fd2 <prvTimerTask+0x1ae>
 8008fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc4:	f383 8811 	msr	BASEPRI, r3
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	f3bf 8f4f 	dsb	sy
 8008fd0:	e7fe      	b.n	8008fd0 <prvTimerTask+0x1ac>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008fd2:	465b      	mov	r3, fp
 8008fd4:	465a      	mov	r2, fp
 8008fd6:	4459      	add	r1, fp
 8008fd8:	4620      	mov	r0, r4
 8008fda:	f7ff fe69 	bl	8008cb0 <prvInsertTimerInActiveList>
 8008fde:	e743      	b.n	8008e68 <prvTimerTask+0x44>
 8008fe0:	20002824 	.word	0x20002824
 8008fe4:	200028f4 	.word	0x200028f4
 8008fe8:	20002828 	.word	0x20002828
 8008fec:	20002948 	.word	0x20002948
 8008ff0:	e000ed04 	.word	0xe000ed04

08008ff4 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8008ff4:	2300      	movs	r3, #0
{
 8008ff6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8008ff8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008ffa:	4b0d      	ldr	r3, [pc, #52]	; (8009030 <prvTaskExitError+0x3c>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	3301      	adds	r3, #1
 8009000:	d008      	beq.n	8009014 <prvTaskExitError+0x20>
 8009002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	e7fe      	b.n	8009012 <prvTaskExitError+0x1e>
 8009014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009018:	f383 8811 	msr	BASEPRI, r3
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009024:	9b01      	ldr	r3, [sp, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d0fc      	beq.n	8009024 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800902a:	b002      	add	sp, #8
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	20000094 	.word	0x20000094

08009034 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009034:	4806      	ldr	r0, [pc, #24]	; (8009050 <prvPortStartFirstTask+0x1c>)
 8009036:	6800      	ldr	r0, [r0, #0]
 8009038:	6800      	ldr	r0, [r0, #0]
 800903a:	f380 8808 	msr	MSP, r0
 800903e:	b662      	cpsie	i
 8009040:	b661      	cpsie	f
 8009042:	f3bf 8f4f 	dsb	sy
 8009046:	f3bf 8f6f 	isb	sy
 800904a:	df00      	svc	0
 800904c:	bf00      	nop
 800904e:	0000      	.short	0x0000
 8009050:	e000ed08 	.word	0xe000ed08

08009054 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009054:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009058:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800905c:	4b05      	ldr	r3, [pc, #20]	; (8009074 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800905e:	f021 0101 	bic.w	r1, r1, #1
 8009062:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009066:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800906a:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800906e:	3840      	subs	r0, #64	; 0x40
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	08008ff5 	.word	0x08008ff5
	...

08009080 <SVC_Handler>:
	__asm volatile (
 8009080:	4b07      	ldr	r3, [pc, #28]	; (80090a0 <pxCurrentTCBConst2>)
 8009082:	6819      	ldr	r1, [r3, #0]
 8009084:	6808      	ldr	r0, [r1, #0]
 8009086:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800908a:	f380 8809 	msr	PSP, r0
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	f04f 0000 	mov.w	r0, #0
 8009096:	f380 8811 	msr	BASEPRI, r0
 800909a:	f04e 0e0d 	orr.w	lr, lr, #13
 800909e:	4770      	bx	lr

080090a0 <pxCurrentTCBConst2>:
 80090a0:	20002320 	.word	0x20002320

080090a4 <vPortEnterCritical>:
 80090a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a8:	f383 8811 	msr	BASEPRI, r3
 80090ac:	f3bf 8f6f 	isb	sy
 80090b0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80090b4:	4a0a      	ldr	r2, [pc, #40]	; (80090e0 <vPortEnterCritical+0x3c>)
 80090b6:	6813      	ldr	r3, [r2, #0]
 80090b8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80090ba:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80090bc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80090be:	d10d      	bne.n	80090dc <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80090c0:	4b08      	ldr	r3, [pc, #32]	; (80090e4 <vPortEnterCritical+0x40>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80090c8:	d008      	beq.n	80090dc <vPortEnterCritical+0x38>
 80090ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	e7fe      	b.n	80090da <vPortEnterCritical+0x36>
	}
}
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	20000094 	.word	0x20000094
 80090e4:	e000ed04 	.word	0xe000ed04

080090e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80090e8:	4a08      	ldr	r2, [pc, #32]	; (800910c <vPortExitCritical+0x24>)
 80090ea:	6813      	ldr	r3, [r2, #0]
 80090ec:	b943      	cbnz	r3, 8009100 <vPortExitCritical+0x18>
 80090ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	e7fe      	b.n	80090fe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009100:	3b01      	subs	r3, #1
 8009102:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009104:	b90b      	cbnz	r3, 800910a <vPortExitCritical+0x22>
	__asm volatile
 8009106:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800910a:	4770      	bx	lr
 800910c:	20000094 	.word	0x20000094

08009110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009110:	f3ef 8009 	mrs	r0, PSP
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	4b0d      	ldr	r3, [pc, #52]	; (8009150 <pxCurrentTCBConst>)
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009120:	6010      	str	r0, [r2, #0]
 8009122:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009126:	f04f 0050 	mov.w	r0, #80	; 0x50
 800912a:	f380 8811 	msr	BASEPRI, r0
 800912e:	f7ff fc21 	bl	8008974 <vTaskSwitchContext>
 8009132:	f04f 0000 	mov.w	r0, #0
 8009136:	f380 8811 	msr	BASEPRI, r0
 800913a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800913e:	6819      	ldr	r1, [r3, #0]
 8009140:	6808      	ldr	r0, [r1, #0]
 8009142:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009146:	f380 8809 	msr	PSP, r0
 800914a:	f3bf 8f6f 	isb	sy
 800914e:	4770      	bx	lr

08009150 <pxCurrentTCBConst>:
 8009150:	20002320 	.word	0x20002320

08009154 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009154:	b508      	push	{r3, lr}
	__asm volatile
 8009156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915a:	f383 8811 	msr	BASEPRI, r3
 800915e:	f3bf 8f6f 	isb	sy
 8009162:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009166:	f7ff fab9 	bl	80086dc <xTaskIncrementTick>
 800916a:	b118      	cbz	r0, 8009174 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800916c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009170:	4b02      	ldr	r3, [pc, #8]	; (800917c <SysTick_Handler+0x28>)
 8009172:	601a      	str	r2, [r3, #0]
	__asm volatile
 8009174:	2300      	movs	r3, #0
 8009176:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800917a:	bd08      	pop	{r3, pc}
 800917c:	e000ed04 	.word	0xe000ed04

08009180 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009180:	2300      	movs	r3, #0
 8009182:	4a08      	ldr	r2, [pc, #32]	; (80091a4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009184:	4908      	ldr	r1, [pc, #32]	; (80091a8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009186:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009188:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800918a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800918e:	4b07      	ldr	r3, [pc, #28]	; (80091ac <vPortSetupTimerInterrupt+0x2c>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	fbb3 f3f1 	udiv	r3, r3, r1
 8009196:	4906      	ldr	r1, [pc, #24]	; (80091b0 <vPortSetupTimerInterrupt+0x30>)
 8009198:	3b01      	subs	r3, #1
 800919a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800919c:	2307      	movs	r3, #7
 800919e:	6013      	str	r3, [r2, #0]
}
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	e000e010 	.word	0xe000e010
 80091a8:	e000e018 	.word	0xe000e018
 80091ac:	20000088 	.word	0x20000088
 80091b0:	e000e014 	.word	0xe000e014

080091b4 <xPortStartScheduler>:
{
 80091b4:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80091b6:	4b27      	ldr	r3, [pc, #156]	; (8009254 <xPortStartScheduler+0xa0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091b8:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80091ba:	781a      	ldrb	r2, [r3, #0]
 80091bc:	b2d2      	uxtb	r2, r2
 80091be:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80091c0:	22ff      	movs	r2, #255	; 0xff
 80091c2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80091c4:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80091c6:	4a24      	ldr	r2, [pc, #144]	; (8009258 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80091ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80091d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80091d6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80091d8:	2207      	movs	r2, #7
 80091da:	4b20      	ldr	r3, [pc, #128]	; (800925c <xPortStartScheduler+0xa8>)
 80091dc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091de:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80091e2:	1e54      	subs	r4, r2, #1
 80091e4:	0600      	lsls	r0, r0, #24
 80091e6:	d40d      	bmi.n	8009204 <xPortStartScheduler+0x50>
 80091e8:	b101      	cbz	r1, 80091ec <xPortStartScheduler+0x38>
 80091ea:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	2a03      	cmp	r2, #3
 80091f0:	d011      	beq.n	8009216 <xPortStartScheduler+0x62>
	__asm volatile
 80091f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f6:	f383 8811 	msr	BASEPRI, r3
 80091fa:	f3bf 8f6f 	isb	sy
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	e7fe      	b.n	8009202 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009204:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009208:	2101      	movs	r1, #1
 800920a:	0052      	lsls	r2, r2, #1
 800920c:	b2d2      	uxtb	r2, r2
 800920e:	f88d 2003 	strb.w	r2, [sp, #3]
 8009212:	4622      	mov	r2, r4
 8009214:	e7e3      	b.n	80091de <xPortStartScheduler+0x2a>
	uxCriticalNesting = 0;
 8009216:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009218:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800921a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800921e:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009220:	9b01      	ldr	r3, [sp, #4]
 8009222:	4a0c      	ldr	r2, [pc, #48]	; (8009254 <xPortStartScheduler+0xa0>)
 8009224:	b2db      	uxtb	r3, r3
 8009226:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009228:	4b0d      	ldr	r3, [pc, #52]	; (8009260 <xPortStartScheduler+0xac>)
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8009230:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8009238:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800923a:	f7ff ffa1 	bl	8009180 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800923e:	4b09      	ldr	r3, [pc, #36]	; (8009264 <xPortStartScheduler+0xb0>)
 8009240:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8009242:	f7ff fef7 	bl	8009034 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009246:	f7ff fb95 	bl	8008974 <vTaskSwitchContext>
	prvTaskExitError();
 800924a:	f7ff fed3 	bl	8008ff4 <prvTaskExitError>
}
 800924e:	4620      	mov	r0, r4
 8009250:	b002      	add	sp, #8
 8009252:	bd10      	pop	{r4, pc}
 8009254:	e000e400 	.word	0xe000e400
 8009258:	20002950 	.word	0x20002950
 800925c:	20002954 	.word	0x20002954
 8009260:	e000ed20 	.word	0xe000ed20
 8009264:	20000094 	.word	0x20000094

08009268 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009268:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800926c:	2b0f      	cmp	r3, #15
 800926e:	d90e      	bls.n	800928e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009270:	4a10      	ldr	r2, [pc, #64]	; (80092b4 <vPortValidateInterruptPriority+0x4c>)
 8009272:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009274:	4a10      	ldr	r2, [pc, #64]	; (80092b8 <vPortValidateInterruptPriority+0x50>)
 8009276:	7812      	ldrb	r2, [r2, #0]
 8009278:	429a      	cmp	r2, r3
 800927a:	d908      	bls.n	800928e <vPortValidateInterruptPriority+0x26>
 800927c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	e7fe      	b.n	800928c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800928e:	4b0b      	ldr	r3, [pc, #44]	; (80092bc <vPortValidateInterruptPriority+0x54>)
 8009290:	4a0b      	ldr	r2, [pc, #44]	; (80092c0 <vPortValidateInterruptPriority+0x58>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	6812      	ldr	r2, [r2, #0]
 8009296:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800929a:	4293      	cmp	r3, r2
 800929c:	d908      	bls.n	80092b0 <vPortValidateInterruptPriority+0x48>
 800929e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a2:	f383 8811 	msr	BASEPRI, r3
 80092a6:	f3bf 8f6f 	isb	sy
 80092aa:	f3bf 8f4f 	dsb	sy
 80092ae:	e7fe      	b.n	80092ae <vPortValidateInterruptPriority+0x46>
	}
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	e000e3f0 	.word	0xe000e3f0
 80092b8:	20002950 	.word	0x20002950
 80092bc:	e000ed0c 	.word	0xe000ed0c
 80092c0:	20002954 	.word	0x20002954

080092c4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80092c4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80092c6:	4b0f      	ldr	r3, [pc, #60]	; (8009304 <prvInsertBlockIntoFreeList+0x40>)
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	4282      	cmp	r2, r0
 80092cc:	d318      	bcc.n	8009300 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80092ce:	685c      	ldr	r4, [r3, #4]
 80092d0:	1919      	adds	r1, r3, r4
 80092d2:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80092d4:	bf01      	itttt	eq
 80092d6:	6841      	ldreq	r1, [r0, #4]
 80092d8:	4618      	moveq	r0, r3
 80092da:	1909      	addeq	r1, r1, r4
 80092dc:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80092de:	6844      	ldr	r4, [r0, #4]
 80092e0:	1901      	adds	r1, r0, r4
 80092e2:	428a      	cmp	r2, r1
 80092e4:	d107      	bne.n	80092f6 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80092e6:	4908      	ldr	r1, [pc, #32]	; (8009308 <prvInsertBlockIntoFreeList+0x44>)
 80092e8:	6809      	ldr	r1, [r1, #0]
 80092ea:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092ec:	bf1f      	itttt	ne
 80092ee:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092f0:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092f2:	1909      	addne	r1, r1, r4
 80092f4:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80092f6:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80092f8:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80092fa:	bf18      	it	ne
 80092fc:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092fe:	bd10      	pop	{r4, pc}
 8009300:	4613      	mov	r3, r2
 8009302:	e7e1      	b.n	80092c8 <prvInsertBlockIntoFreeList+0x4>
 8009304:	20003cf0 	.word	0x20003cf0
 8009308:	20002958 	.word	0x20002958

0800930c <pvPortMalloc>:
{
 800930c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009310:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8009312:	f7ff f9d5 	bl	80086c0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009316:	493d      	ldr	r1, [pc, #244]	; (800940c <pvPortMalloc+0x100>)
 8009318:	4d3d      	ldr	r5, [pc, #244]	; (8009410 <pvPortMalloc+0x104>)
 800931a:	680b      	ldr	r3, [r1, #0]
 800931c:	b9fb      	cbnz	r3, 800935e <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 800931e:	4a3d      	ldr	r2, [pc, #244]	; (8009414 <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 8009320:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009322:	0756      	lsls	r6, r2, #29
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009324:	bf0f      	iteee	eq
 8009326:	f241 3388 	movweq	r3, #5000	; 0x1388
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800932a:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800932c:	4b3a      	ldrne	r3, [pc, #232]	; (8009418 <pvPortMalloc+0x10c>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800932e:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009332:	bf18      	it	ne
 8009334:	1a9b      	subne	r3, r3, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009336:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009338:	4e38      	ldr	r6, [pc, #224]	; (800941c <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 800933a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800933c:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8009340:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009342:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8009344:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009348:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800934a:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800934c:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009350:	4b33      	ldr	r3, [pc, #204]	; (8009420 <pvPortMalloc+0x114>)
 8009352:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009354:	4b33      	ldr	r3, [pc, #204]	; (8009424 <pvPortMalloc+0x118>)
 8009356:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009358:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800935c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800935e:	682f      	ldr	r7, [r5, #0]
 8009360:	4227      	tst	r7, r4
 8009362:	d14d      	bne.n	8009400 <pvPortMalloc+0xf4>
			if( xWantedSize > 0 )
 8009364:	2c00      	cmp	r4, #0
 8009366:	d03e      	beq.n	80093e6 <pvPortMalloc+0xda>
				xWantedSize += xHeapStructSize;
 8009368:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800936c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800936e:	bf1c      	itt	ne
 8009370:	f023 0307 	bicne.w	r3, r3, #7
 8009374:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009376:	2b00      	cmp	r3, #0
 8009378:	d042      	beq.n	8009400 <pvPortMalloc+0xf4>
 800937a:	4a2a      	ldr	r2, [pc, #168]	; (8009424 <pvPortMalloc+0x118>)
 800937c:	6816      	ldr	r6, [r2, #0]
 800937e:	4690      	mov	r8, r2
 8009380:	429e      	cmp	r6, r3
 8009382:	d33d      	bcc.n	8009400 <pvPortMalloc+0xf4>
				pxBlock = xStart.pxNextFreeBlock;
 8009384:	4a25      	ldr	r2, [pc, #148]	; (800941c <pvPortMalloc+0x110>)
 8009386:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009388:	6868      	ldr	r0, [r5, #4]
 800938a:	4298      	cmp	r0, r3
 800938c:	d201      	bcs.n	8009392 <pvPortMalloc+0x86>
 800938e:	682c      	ldr	r4, [r5, #0]
 8009390:	b9a4      	cbnz	r4, 80093bc <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 8009392:	6809      	ldr	r1, [r1, #0]
 8009394:	42a9      	cmp	r1, r5
 8009396:	d033      	beq.n	8009400 <pvPortMalloc+0xf4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009398:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800939a:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800939c:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800939e:	1ac2      	subs	r2, r0, r3
 80093a0:	2a10      	cmp	r2, #16
 80093a2:	d912      	bls.n	80093ca <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80093a4:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093a6:	0741      	lsls	r1, r0, #29
 80093a8:	d00b      	beq.n	80093c2 <pvPortMalloc+0xb6>
 80093aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ae:	f383 8811 	msr	BASEPRI, r3
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	e7fe      	b.n	80093ba <pvPortMalloc+0xae>
 80093bc:	462a      	mov	r2, r5
 80093be:	4625      	mov	r5, r4
 80093c0:	e7e2      	b.n	8009388 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80093c2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80093c4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80093c6:	f7ff ff7d 	bl	80092c4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093ca:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093cc:	4914      	ldr	r1, [pc, #80]	; (8009420 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093ce:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093d0:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 80093d2:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093d4:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093d6:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093da:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093dc:	bf38      	it	cc
 80093de:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80093e0:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093e2:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093e4:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80093e6:	f7ff fa09 	bl	80087fc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093ea:	0763      	lsls	r3, r4, #29
 80093ec:	d00a      	beq.n	8009404 <pvPortMalloc+0xf8>
 80093ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f2:	f383 8811 	msr	BASEPRI, r3
 80093f6:	f3bf 8f6f 	isb	sy
 80093fa:	f3bf 8f4f 	dsb	sy
 80093fe:	e7fe      	b.n	80093fe <pvPortMalloc+0xf2>
void *pvReturn = NULL;
 8009400:	2400      	movs	r4, #0
 8009402:	e7f0      	b.n	80093e6 <pvPortMalloc+0xda>
}
 8009404:	4620      	mov	r0, r4
 8009406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800940a:	bf00      	nop
 800940c:	20002958 	.word	0x20002958
 8009410:	20003ce4 	.word	0x20003ce4
 8009414:	2000295c 	.word	0x2000295c
 8009418:	20003ce4 	.word	0x20003ce4
 800941c:	20003cf0 	.word	0x20003cf0
 8009420:	20003cec 	.word	0x20003cec
 8009424:	20003ce8 	.word	0x20003ce8

08009428 <vPortFree>:
{
 8009428:	b510      	push	{r4, lr}
	if( pv != NULL )
 800942a:	4604      	mov	r4, r0
 800942c:	b370      	cbz	r0, 800948c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800942e:	4a18      	ldr	r2, [pc, #96]	; (8009490 <vPortFree+0x68>)
 8009430:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009434:	6812      	ldr	r2, [r2, #0]
 8009436:	4213      	tst	r3, r2
 8009438:	d108      	bne.n	800944c <vPortFree+0x24>
 800943a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943e:	f383 8811 	msr	BASEPRI, r3
 8009442:	f3bf 8f6f 	isb	sy
 8009446:	f3bf 8f4f 	dsb	sy
 800944a:	e7fe      	b.n	800944a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800944c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8009450:	b141      	cbz	r1, 8009464 <vPortFree+0x3c>
 8009452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009456:	f383 8811 	msr	BASEPRI, r3
 800945a:	f3bf 8f6f 	isb	sy
 800945e:	f3bf 8f4f 	dsb	sy
 8009462:	e7fe      	b.n	8009462 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009464:	ea23 0302 	bic.w	r3, r3, r2
 8009468:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800946c:	f7ff f928 	bl	80086c0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009470:	4a08      	ldr	r2, [pc, #32]	; (8009494 <vPortFree+0x6c>)
 8009472:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009476:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009478:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800947c:	440b      	add	r3, r1
 800947e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009480:	f7ff ff20 	bl	80092c4 <prvInsertBlockIntoFreeList>
}
 8009484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8009488:	f7ff b9b8 	b.w	80087fc <xTaskResumeAll>
}
 800948c:	bd10      	pop	{r4, pc}
 800948e:	bf00      	nop
 8009490:	20003ce4 	.word	0x20003ce4
 8009494:	20003ce8 	.word	0x20003ce8

08009498 <_ZdaPv>:
 8009498:	f000 b81e 	b.w	80094d8 <_ZdlPv>

0800949c <_Znaj>:
 800949c:	f000 b802 	b.w	80094a4 <_Znwj>

080094a0 <_ZdlPvj>:
 80094a0:	f000 b81a 	b.w	80094d8 <_ZdlPv>

080094a4 <_Znwj>:
 80094a4:	b510      	push	{r4, lr}
 80094a6:	2800      	cmp	r0, #0
 80094a8:	bf14      	ite	ne
 80094aa:	4604      	movne	r4, r0
 80094ac:	2401      	moveq	r4, #1
 80094ae:	4620      	mov	r0, r4
 80094b0:	f001 f872 	bl	800a598 <malloc>
 80094b4:	b930      	cbnz	r0, 80094c4 <_Znwj+0x20>
 80094b6:	f000 f807 	bl	80094c8 <_ZSt15get_new_handlerv>
 80094ba:	b908      	cbnz	r0, 80094c0 <_Znwj+0x1c>
 80094bc:	f001 f83b 	bl	800a536 <abort>
 80094c0:	4780      	blx	r0
 80094c2:	e7f4      	b.n	80094ae <_Znwj+0xa>
 80094c4:	bd10      	pop	{r4, pc}
	...

080094c8 <_ZSt15get_new_handlerv>:
 80094c8:	4b02      	ldr	r3, [pc, #8]	; (80094d4 <_ZSt15get_new_handlerv+0xc>)
 80094ca:	6818      	ldr	r0, [r3, #0]
 80094cc:	f3bf 8f5b 	dmb	ish
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	20003cf8 	.word	0x20003cf8

080094d8 <_ZdlPv>:
 80094d8:	f001 b866 	b.w	800a5a8 <free>

080094dc <_ZSt20__throw_length_errorPKc>:
 80094dc:	b508      	push	{r3, lr}
 80094de:	f001 f82a 	bl	800a536 <abort>
	...

080094e4 <pow>:
 80094e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e8:	b08f      	sub	sp, #60	; 0x3c
 80094ea:	461d      	mov	r5, r3
 80094ec:	4680      	mov	r8, r0
 80094ee:	4689      	mov	r9, r1
 80094f0:	4614      	mov	r4, r2
 80094f2:	f000 f955 	bl	80097a0 <__ieee754_pow>
 80094f6:	4fa1      	ldr	r7, [pc, #644]	; (800977c <pow+0x298>)
 80094f8:	e9cd 0100 	strd	r0, r1, [sp]
 80094fc:	f997 3000 	ldrsb.w	r3, [r7]
 8009500:	463e      	mov	r6, r7
 8009502:	9302      	str	r3, [sp, #8]
 8009504:	3301      	adds	r3, #1
 8009506:	d05f      	beq.n	80095c8 <pow+0xe4>
 8009508:	4622      	mov	r2, r4
 800950a:	462b      	mov	r3, r5
 800950c:	4620      	mov	r0, r4
 800950e:	4629      	mov	r1, r5
 8009510:	f7f7 fa74 	bl	80009fc <__aeabi_dcmpun>
 8009514:	4682      	mov	sl, r0
 8009516:	2800      	cmp	r0, #0
 8009518:	d156      	bne.n	80095c8 <pow+0xe4>
 800951a:	4642      	mov	r2, r8
 800951c:	464b      	mov	r3, r9
 800951e:	4640      	mov	r0, r8
 8009520:	4649      	mov	r1, r9
 8009522:	f7f7 fa6b 	bl	80009fc <__aeabi_dcmpun>
 8009526:	9003      	str	r0, [sp, #12]
 8009528:	b1e8      	cbz	r0, 8009566 <pow+0x82>
 800952a:	2200      	movs	r2, #0
 800952c:	2300      	movs	r3, #0
 800952e:	4620      	mov	r0, r4
 8009530:	4629      	mov	r1, r5
 8009532:	f7f7 fa31 	bl	8000998 <__aeabi_dcmpeq>
 8009536:	2800      	cmp	r0, #0
 8009538:	d046      	beq.n	80095c8 <pow+0xe4>
 800953a:	2301      	movs	r3, #1
 800953c:	2200      	movs	r2, #0
 800953e:	9304      	str	r3, [sp, #16]
 8009540:	4b8f      	ldr	r3, [pc, #572]	; (8009780 <pow+0x29c>)
 8009542:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8009546:	9305      	str	r3, [sp, #20]
 8009548:	4b8e      	ldr	r3, [pc, #568]	; (8009784 <pow+0x2a0>)
 800954a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800954e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009552:	9b02      	ldr	r3, [sp, #8]
 8009554:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009558:	2b02      	cmp	r3, #2
 800955a:	d031      	beq.n	80095c0 <pow+0xdc>
 800955c:	a804      	add	r0, sp, #16
 800955e:	f000 fedf 	bl	800a320 <matherr>
 8009562:	bb38      	cbnz	r0, 80095b4 <pow+0xd0>
 8009564:	e058      	b.n	8009618 <pow+0x134>
 8009566:	f04f 0a00 	mov.w	sl, #0
 800956a:	f04f 0b00 	mov.w	fp, #0
 800956e:	4652      	mov	r2, sl
 8009570:	465b      	mov	r3, fp
 8009572:	4640      	mov	r0, r8
 8009574:	4649      	mov	r1, r9
 8009576:	f7f7 fa0f 	bl	8000998 <__aeabi_dcmpeq>
 800957a:	2800      	cmp	r0, #0
 800957c:	d051      	beq.n	8009622 <pow+0x13e>
 800957e:	4652      	mov	r2, sl
 8009580:	465b      	mov	r3, fp
 8009582:	4620      	mov	r0, r4
 8009584:	4629      	mov	r1, r5
 8009586:	f7f7 fa07 	bl	8000998 <__aeabi_dcmpeq>
 800958a:	4606      	mov	r6, r0
 800958c:	b308      	cbz	r0, 80095d2 <pow+0xee>
 800958e:	2301      	movs	r3, #1
 8009590:	9304      	str	r3, [sp, #16]
 8009592:	4b7b      	ldr	r3, [pc, #492]	; (8009780 <pow+0x29c>)
 8009594:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009598:	9305      	str	r3, [sp, #20]
 800959a:	9b03      	ldr	r3, [sp, #12]
 800959c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80095a0:	930c      	str	r3, [sp, #48]	; 0x30
 80095a2:	9b02      	ldr	r3, [sp, #8]
 80095a4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d0d7      	beq.n	800955c <pow+0x78>
 80095ac:	2200      	movs	r2, #0
 80095ae:	4b75      	ldr	r3, [pc, #468]	; (8009784 <pow+0x2a0>)
 80095b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80095b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095b6:	b11b      	cbz	r3, 80095c0 <pow+0xdc>
 80095b8:	f000 ffc4 	bl	800a544 <__errno>
 80095bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095be:	6003      	str	r3, [r0, #0]
 80095c0:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80095c4:	e9cd 3400 	strd	r3, r4, [sp]
 80095c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095cc:	b00f      	add	sp, #60	; 0x3c
 80095ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095d2:	4620      	mov	r0, r4
 80095d4:	4629      	mov	r1, r5
 80095d6:	f000 fe9d 	bl	800a314 <finite>
 80095da:	2800      	cmp	r0, #0
 80095dc:	d0f4      	beq.n	80095c8 <pow+0xe4>
 80095de:	4652      	mov	r2, sl
 80095e0:	465b      	mov	r3, fp
 80095e2:	4620      	mov	r0, r4
 80095e4:	4629      	mov	r1, r5
 80095e6:	f7f7 f9e1 	bl	80009ac <__aeabi_dcmplt>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	d0ec      	beq.n	80095c8 <pow+0xe4>
 80095ee:	2301      	movs	r3, #1
 80095f0:	9304      	str	r3, [sp, #16]
 80095f2:	4b63      	ldr	r3, [pc, #396]	; (8009780 <pow+0x29c>)
 80095f4:	960c      	str	r6, [sp, #48]	; 0x30
 80095f6:	9305      	str	r3, [sp, #20]
 80095f8:	f997 3000 	ldrsb.w	r3, [r7]
 80095fc:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009600:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009604:	b913      	cbnz	r3, 800960c <pow+0x128>
 8009606:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800960a:	e7a7      	b.n	800955c <pow+0x78>
 800960c:	2000      	movs	r0, #0
 800960e:	495e      	ldr	r1, [pc, #376]	; (8009788 <pow+0x2a4>)
 8009610:	2b02      	cmp	r3, #2
 8009612:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009616:	d1a1      	bne.n	800955c <pow+0x78>
 8009618:	f000 ff94 	bl	800a544 <__errno>
 800961c:	2321      	movs	r3, #33	; 0x21
 800961e:	6003      	str	r3, [r0, #0]
 8009620:	e7c8      	b.n	80095b4 <pow+0xd0>
 8009622:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009626:	f000 fe75 	bl	800a314 <finite>
 800962a:	9002      	str	r0, [sp, #8]
 800962c:	2800      	cmp	r0, #0
 800962e:	d177      	bne.n	8009720 <pow+0x23c>
 8009630:	4640      	mov	r0, r8
 8009632:	4649      	mov	r1, r9
 8009634:	f000 fe6e 	bl	800a314 <finite>
 8009638:	2800      	cmp	r0, #0
 800963a:	d071      	beq.n	8009720 <pow+0x23c>
 800963c:	4620      	mov	r0, r4
 800963e:	4629      	mov	r1, r5
 8009640:	f000 fe68 	bl	800a314 <finite>
 8009644:	2800      	cmp	r0, #0
 8009646:	d06b      	beq.n	8009720 <pow+0x23c>
 8009648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800964c:	4619      	mov	r1, r3
 800964e:	4610      	mov	r0, r2
 8009650:	f7f7 f9d4 	bl	80009fc <__aeabi_dcmpun>
 8009654:	f997 7000 	ldrsb.w	r7, [r7]
 8009658:	4b49      	ldr	r3, [pc, #292]	; (8009780 <pow+0x29c>)
 800965a:	b1a0      	cbz	r0, 8009686 <pow+0x1a2>
 800965c:	2201      	movs	r2, #1
 800965e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009662:	9b02      	ldr	r3, [sp, #8]
 8009664:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009668:	930c      	str	r3, [sp, #48]	; 0x30
 800966a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800966e:	2f00      	cmp	r7, #0
 8009670:	d0c9      	beq.n	8009606 <pow+0x122>
 8009672:	4652      	mov	r2, sl
 8009674:	465b      	mov	r3, fp
 8009676:	4650      	mov	r0, sl
 8009678:	4659      	mov	r1, fp
 800967a:	f7f7 f84f 	bl	800071c <__aeabi_ddiv>
 800967e:	2f02      	cmp	r7, #2
 8009680:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009684:	e7c7      	b.n	8009616 <pow+0x132>
 8009686:	2203      	movs	r2, #3
 8009688:	900c      	str	r0, [sp, #48]	; 0x30
 800968a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800968e:	4620      	mov	r0, r4
 8009690:	4629      	mov	r1, r5
 8009692:	2200      	movs	r2, #0
 8009694:	4b3d      	ldr	r3, [pc, #244]	; (800978c <pow+0x2a8>)
 8009696:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800969a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800969e:	f7f6 ff13 	bl	80004c8 <__aeabi_dmul>
 80096a2:	4604      	mov	r4, r0
 80096a4:	460d      	mov	r5, r1
 80096a6:	bb17      	cbnz	r7, 80096ee <pow+0x20a>
 80096a8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80096ac:	4b38      	ldr	r3, [pc, #224]	; (8009790 <pow+0x2ac>)
 80096ae:	4640      	mov	r0, r8
 80096b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80096b4:	4649      	mov	r1, r9
 80096b6:	4652      	mov	r2, sl
 80096b8:	465b      	mov	r3, fp
 80096ba:	f7f7 f977 	bl	80009ac <__aeabi_dcmplt>
 80096be:	2800      	cmp	r0, #0
 80096c0:	d054      	beq.n	800976c <pow+0x288>
 80096c2:	4620      	mov	r0, r4
 80096c4:	4629      	mov	r1, r5
 80096c6:	f000 fe33 	bl	800a330 <rint>
 80096ca:	4622      	mov	r2, r4
 80096cc:	462b      	mov	r3, r5
 80096ce:	f7f7 f963 	bl	8000998 <__aeabi_dcmpeq>
 80096d2:	b920      	cbnz	r0, 80096de <pow+0x1fa>
 80096d4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80096d8:	4b2e      	ldr	r3, [pc, #184]	; (8009794 <pow+0x2b0>)
 80096da:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80096de:	f996 3000 	ldrsb.w	r3, [r6]
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d142      	bne.n	800976c <pow+0x288>
 80096e6:	f000 ff2d 	bl	800a544 <__errno>
 80096ea:	2322      	movs	r3, #34	; 0x22
 80096ec:	e797      	b.n	800961e <pow+0x13a>
 80096ee:	2200      	movs	r2, #0
 80096f0:	4b29      	ldr	r3, [pc, #164]	; (8009798 <pow+0x2b4>)
 80096f2:	4640      	mov	r0, r8
 80096f4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80096f8:	4649      	mov	r1, r9
 80096fa:	4652      	mov	r2, sl
 80096fc:	465b      	mov	r3, fp
 80096fe:	f7f7 f955 	bl	80009ac <__aeabi_dcmplt>
 8009702:	2800      	cmp	r0, #0
 8009704:	d0eb      	beq.n	80096de <pow+0x1fa>
 8009706:	4620      	mov	r0, r4
 8009708:	4629      	mov	r1, r5
 800970a:	f000 fe11 	bl	800a330 <rint>
 800970e:	4622      	mov	r2, r4
 8009710:	462b      	mov	r3, r5
 8009712:	f7f7 f941 	bl	8000998 <__aeabi_dcmpeq>
 8009716:	2800      	cmp	r0, #0
 8009718:	d1e1      	bne.n	80096de <pow+0x1fa>
 800971a:	2200      	movs	r2, #0
 800971c:	4b1a      	ldr	r3, [pc, #104]	; (8009788 <pow+0x2a4>)
 800971e:	e7dc      	b.n	80096da <pow+0x1f6>
 8009720:	2200      	movs	r2, #0
 8009722:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009726:	2300      	movs	r3, #0
 8009728:	f7f7 f936 	bl	8000998 <__aeabi_dcmpeq>
 800972c:	2800      	cmp	r0, #0
 800972e:	f43f af4b 	beq.w	80095c8 <pow+0xe4>
 8009732:	4640      	mov	r0, r8
 8009734:	4649      	mov	r1, r9
 8009736:	f000 fded 	bl	800a314 <finite>
 800973a:	2800      	cmp	r0, #0
 800973c:	f43f af44 	beq.w	80095c8 <pow+0xe4>
 8009740:	4620      	mov	r0, r4
 8009742:	4629      	mov	r1, r5
 8009744:	f000 fde6 	bl	800a314 <finite>
 8009748:	2800      	cmp	r0, #0
 800974a:	f43f af3d 	beq.w	80095c8 <pow+0xe4>
 800974e:	2304      	movs	r3, #4
 8009750:	9304      	str	r3, [sp, #16]
 8009752:	4b0b      	ldr	r3, [pc, #44]	; (8009780 <pow+0x29c>)
 8009754:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009758:	9305      	str	r3, [sp, #20]
 800975a:	2300      	movs	r3, #0
 800975c:	2400      	movs	r4, #0
 800975e:	930c      	str	r3, [sp, #48]	; 0x30
 8009760:	2300      	movs	r3, #0
 8009762:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009766:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800976a:	e7b8      	b.n	80096de <pow+0x1fa>
 800976c:	a804      	add	r0, sp, #16
 800976e:	f000 fdd7 	bl	800a320 <matherr>
 8009772:	2800      	cmp	r0, #0
 8009774:	f47f af1e 	bne.w	80095b4 <pow+0xd0>
 8009778:	e7b5      	b.n	80096e6 <pow+0x202>
 800977a:	bf00      	nop
 800977c:	20000098 	.word	0x20000098
 8009780:	0800a8f8 	.word	0x0800a8f8
 8009784:	3ff00000 	.word	0x3ff00000
 8009788:	fff00000 	.word	0xfff00000
 800978c:	3fe00000 	.word	0x3fe00000
 8009790:	47efffff 	.word	0x47efffff
 8009794:	c7efffff 	.word	0xc7efffff
 8009798:	7ff00000 	.word	0x7ff00000
 800979c:	00000000 	.word	0x00000000

080097a0 <__ieee754_pow>:
 80097a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a4:	b091      	sub	sp, #68	; 0x44
 80097a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80097aa:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80097ae:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80097b2:	ea55 0302 	orrs.w	r3, r5, r2
 80097b6:	4607      	mov	r7, r0
 80097b8:	4688      	mov	r8, r1
 80097ba:	f000 84b7 	beq.w	800a12c <__ieee754_pow+0x98c>
 80097be:	4b80      	ldr	r3, [pc, #512]	; (80099c0 <__ieee754_pow+0x220>)
 80097c0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80097c4:	429c      	cmp	r4, r3
 80097c6:	4689      	mov	r9, r1
 80097c8:	4682      	mov	sl, r0
 80097ca:	dc09      	bgt.n	80097e0 <__ieee754_pow+0x40>
 80097cc:	d103      	bne.n	80097d6 <__ieee754_pow+0x36>
 80097ce:	b938      	cbnz	r0, 80097e0 <__ieee754_pow+0x40>
 80097d0:	42a5      	cmp	r5, r4
 80097d2:	dc0d      	bgt.n	80097f0 <__ieee754_pow+0x50>
 80097d4:	e001      	b.n	80097da <__ieee754_pow+0x3a>
 80097d6:	429d      	cmp	r5, r3
 80097d8:	dc02      	bgt.n	80097e0 <__ieee754_pow+0x40>
 80097da:	429d      	cmp	r5, r3
 80097dc:	d10e      	bne.n	80097fc <__ieee754_pow+0x5c>
 80097de:	b16a      	cbz	r2, 80097fc <__ieee754_pow+0x5c>
 80097e0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80097e4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80097e8:	ea54 030a 	orrs.w	r3, r4, sl
 80097ec:	f000 849e 	beq.w	800a12c <__ieee754_pow+0x98c>
 80097f0:	4874      	ldr	r0, [pc, #464]	; (80099c4 <__ieee754_pow+0x224>)
 80097f2:	b011      	add	sp, #68	; 0x44
 80097f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f8:	f000 bd94 	b.w	800a324 <nan>
 80097fc:	f1b9 0f00 	cmp.w	r9, #0
 8009800:	da53      	bge.n	80098aa <__ieee754_pow+0x10a>
 8009802:	4b71      	ldr	r3, [pc, #452]	; (80099c8 <__ieee754_pow+0x228>)
 8009804:	429d      	cmp	r5, r3
 8009806:	dc4e      	bgt.n	80098a6 <__ieee754_pow+0x106>
 8009808:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800980c:	429d      	cmp	r5, r3
 800980e:	dd4c      	ble.n	80098aa <__ieee754_pow+0x10a>
 8009810:	152b      	asrs	r3, r5, #20
 8009812:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009816:	2b14      	cmp	r3, #20
 8009818:	dd28      	ble.n	800986c <__ieee754_pow+0xcc>
 800981a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800981e:	fa22 f103 	lsr.w	r1, r2, r3
 8009822:	fa01 f303 	lsl.w	r3, r1, r3
 8009826:	4293      	cmp	r3, r2
 8009828:	d13f      	bne.n	80098aa <__ieee754_pow+0x10a>
 800982a:	f001 0101 	and.w	r1, r1, #1
 800982e:	f1c1 0302 	rsb	r3, r1, #2
 8009832:	9300      	str	r3, [sp, #0]
 8009834:	2a00      	cmp	r2, #0
 8009836:	d15c      	bne.n	80098f2 <__ieee754_pow+0x152>
 8009838:	4b61      	ldr	r3, [pc, #388]	; (80099c0 <__ieee754_pow+0x220>)
 800983a:	429d      	cmp	r5, r3
 800983c:	d126      	bne.n	800988c <__ieee754_pow+0xec>
 800983e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009842:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009846:	ea53 030a 	orrs.w	r3, r3, sl
 800984a:	f000 846f 	beq.w	800a12c <__ieee754_pow+0x98c>
 800984e:	4b5f      	ldr	r3, [pc, #380]	; (80099cc <__ieee754_pow+0x22c>)
 8009850:	429c      	cmp	r4, r3
 8009852:	dd2c      	ble.n	80098ae <__ieee754_pow+0x10e>
 8009854:	2e00      	cmp	r6, #0
 8009856:	f280 846f 	bge.w	800a138 <__ieee754_pow+0x998>
 800985a:	f04f 0b00 	mov.w	fp, #0
 800985e:	f04f 0c00 	mov.w	ip, #0
 8009862:	4658      	mov	r0, fp
 8009864:	4661      	mov	r1, ip
 8009866:	b011      	add	sp, #68	; 0x44
 8009868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800986c:	2a00      	cmp	r2, #0
 800986e:	d13e      	bne.n	80098ee <__ieee754_pow+0x14e>
 8009870:	f1c3 0314 	rsb	r3, r3, #20
 8009874:	fa45 f103 	asr.w	r1, r5, r3
 8009878:	fa01 f303 	lsl.w	r3, r1, r3
 800987c:	42ab      	cmp	r3, r5
 800987e:	f040 8463 	bne.w	800a148 <__ieee754_pow+0x9a8>
 8009882:	f001 0101 	and.w	r1, r1, #1
 8009886:	f1c1 0302 	rsb	r3, r1, #2
 800988a:	9300      	str	r3, [sp, #0]
 800988c:	4b50      	ldr	r3, [pc, #320]	; (80099d0 <__ieee754_pow+0x230>)
 800988e:	429d      	cmp	r5, r3
 8009890:	d114      	bne.n	80098bc <__ieee754_pow+0x11c>
 8009892:	2e00      	cmp	r6, #0
 8009894:	f280 8454 	bge.w	800a140 <__ieee754_pow+0x9a0>
 8009898:	463a      	mov	r2, r7
 800989a:	4643      	mov	r3, r8
 800989c:	2000      	movs	r0, #0
 800989e:	494c      	ldr	r1, [pc, #304]	; (80099d0 <__ieee754_pow+0x230>)
 80098a0:	f7f6 ff3c 	bl	800071c <__aeabi_ddiv>
 80098a4:	e013      	b.n	80098ce <__ieee754_pow+0x12e>
 80098a6:	2302      	movs	r3, #2
 80098a8:	e7c3      	b.n	8009832 <__ieee754_pow+0x92>
 80098aa:	2300      	movs	r3, #0
 80098ac:	e7c1      	b.n	8009832 <__ieee754_pow+0x92>
 80098ae:	2e00      	cmp	r6, #0
 80098b0:	dad3      	bge.n	800985a <__ieee754_pow+0xba>
 80098b2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80098b6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80098ba:	e7d2      	b.n	8009862 <__ieee754_pow+0xc2>
 80098bc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80098c0:	d108      	bne.n	80098d4 <__ieee754_pow+0x134>
 80098c2:	463a      	mov	r2, r7
 80098c4:	4643      	mov	r3, r8
 80098c6:	4638      	mov	r0, r7
 80098c8:	4641      	mov	r1, r8
 80098ca:	f7f6 fdfd 	bl	80004c8 <__aeabi_dmul>
 80098ce:	4683      	mov	fp, r0
 80098d0:	468c      	mov	ip, r1
 80098d2:	e7c6      	b.n	8009862 <__ieee754_pow+0xc2>
 80098d4:	4b3f      	ldr	r3, [pc, #252]	; (80099d4 <__ieee754_pow+0x234>)
 80098d6:	429e      	cmp	r6, r3
 80098d8:	d10b      	bne.n	80098f2 <__ieee754_pow+0x152>
 80098da:	f1b9 0f00 	cmp.w	r9, #0
 80098de:	db08      	blt.n	80098f2 <__ieee754_pow+0x152>
 80098e0:	4638      	mov	r0, r7
 80098e2:	4641      	mov	r1, r8
 80098e4:	b011      	add	sp, #68	; 0x44
 80098e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ea:	f000 bc63 	b.w	800a1b4 <__ieee754_sqrt>
 80098ee:	2300      	movs	r3, #0
 80098f0:	9300      	str	r3, [sp, #0]
 80098f2:	4638      	mov	r0, r7
 80098f4:	4641      	mov	r1, r8
 80098f6:	f000 fd09 	bl	800a30c <fabs>
 80098fa:	4683      	mov	fp, r0
 80098fc:	468c      	mov	ip, r1
 80098fe:	f1ba 0f00 	cmp.w	sl, #0
 8009902:	d12b      	bne.n	800995c <__ieee754_pow+0x1bc>
 8009904:	b124      	cbz	r4, 8009910 <__ieee754_pow+0x170>
 8009906:	4b32      	ldr	r3, [pc, #200]	; (80099d0 <__ieee754_pow+0x230>)
 8009908:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800990c:	429a      	cmp	r2, r3
 800990e:	d125      	bne.n	800995c <__ieee754_pow+0x1bc>
 8009910:	2e00      	cmp	r6, #0
 8009912:	da07      	bge.n	8009924 <__ieee754_pow+0x184>
 8009914:	465a      	mov	r2, fp
 8009916:	4663      	mov	r3, ip
 8009918:	2000      	movs	r0, #0
 800991a:	492d      	ldr	r1, [pc, #180]	; (80099d0 <__ieee754_pow+0x230>)
 800991c:	f7f6 fefe 	bl	800071c <__aeabi_ddiv>
 8009920:	4683      	mov	fp, r0
 8009922:	468c      	mov	ip, r1
 8009924:	f1b9 0f00 	cmp.w	r9, #0
 8009928:	da9b      	bge.n	8009862 <__ieee754_pow+0xc2>
 800992a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800992e:	9b00      	ldr	r3, [sp, #0]
 8009930:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009934:	4323      	orrs	r3, r4
 8009936:	d108      	bne.n	800994a <__ieee754_pow+0x1aa>
 8009938:	465a      	mov	r2, fp
 800993a:	4663      	mov	r3, ip
 800993c:	4658      	mov	r0, fp
 800993e:	4661      	mov	r1, ip
 8009940:	f7f6 fc0a 	bl	8000158 <__aeabi_dsub>
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	e7aa      	b.n	80098a0 <__ieee754_pow+0x100>
 800994a:	9b00      	ldr	r3, [sp, #0]
 800994c:	2b01      	cmp	r3, #1
 800994e:	d188      	bne.n	8009862 <__ieee754_pow+0xc2>
 8009950:	4658      	mov	r0, fp
 8009952:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009956:	4683      	mov	fp, r0
 8009958:	469c      	mov	ip, r3
 800995a:	e782      	b.n	8009862 <__ieee754_pow+0xc2>
 800995c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8009960:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8009964:	930d      	str	r3, [sp, #52]	; 0x34
 8009966:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009968:	9b00      	ldr	r3, [sp, #0]
 800996a:	4313      	orrs	r3, r2
 800996c:	d104      	bne.n	8009978 <__ieee754_pow+0x1d8>
 800996e:	463a      	mov	r2, r7
 8009970:	4643      	mov	r3, r8
 8009972:	4638      	mov	r0, r7
 8009974:	4641      	mov	r1, r8
 8009976:	e7e3      	b.n	8009940 <__ieee754_pow+0x1a0>
 8009978:	4b17      	ldr	r3, [pc, #92]	; (80099d8 <__ieee754_pow+0x238>)
 800997a:	429d      	cmp	r5, r3
 800997c:	f340 80fe 	ble.w	8009b7c <__ieee754_pow+0x3dc>
 8009980:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009984:	429d      	cmp	r5, r3
 8009986:	dd0b      	ble.n	80099a0 <__ieee754_pow+0x200>
 8009988:	4b10      	ldr	r3, [pc, #64]	; (80099cc <__ieee754_pow+0x22c>)
 800998a:	429c      	cmp	r4, r3
 800998c:	dc0e      	bgt.n	80099ac <__ieee754_pow+0x20c>
 800998e:	2e00      	cmp	r6, #0
 8009990:	f6bf af63 	bge.w	800985a <__ieee754_pow+0xba>
 8009994:	a308      	add	r3, pc, #32	; (adr r3, 80099b8 <__ieee754_pow+0x218>)
 8009996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999a:	4610      	mov	r0, r2
 800999c:	4619      	mov	r1, r3
 800999e:	e794      	b.n	80098ca <__ieee754_pow+0x12a>
 80099a0:	4b0e      	ldr	r3, [pc, #56]	; (80099dc <__ieee754_pow+0x23c>)
 80099a2:	429c      	cmp	r4, r3
 80099a4:	ddf3      	ble.n	800998e <__ieee754_pow+0x1ee>
 80099a6:	4b0a      	ldr	r3, [pc, #40]	; (80099d0 <__ieee754_pow+0x230>)
 80099a8:	429c      	cmp	r4, r3
 80099aa:	dd19      	ble.n	80099e0 <__ieee754_pow+0x240>
 80099ac:	2e00      	cmp	r6, #0
 80099ae:	dcf1      	bgt.n	8009994 <__ieee754_pow+0x1f4>
 80099b0:	e753      	b.n	800985a <__ieee754_pow+0xba>
 80099b2:	bf00      	nop
 80099b4:	f3af 8000 	nop.w
 80099b8:	8800759c 	.word	0x8800759c
 80099bc:	7e37e43c 	.word	0x7e37e43c
 80099c0:	7ff00000 	.word	0x7ff00000
 80099c4:	0800a8cd 	.word	0x0800a8cd
 80099c8:	433fffff 	.word	0x433fffff
 80099cc:	3fefffff 	.word	0x3fefffff
 80099d0:	3ff00000 	.word	0x3ff00000
 80099d4:	3fe00000 	.word	0x3fe00000
 80099d8:	41e00000 	.word	0x41e00000
 80099dc:	3feffffe 	.word	0x3feffffe
 80099e0:	4661      	mov	r1, ip
 80099e2:	2200      	movs	r2, #0
 80099e4:	4b60      	ldr	r3, [pc, #384]	; (8009b68 <__ieee754_pow+0x3c8>)
 80099e6:	4658      	mov	r0, fp
 80099e8:	f7f6 fbb6 	bl	8000158 <__aeabi_dsub>
 80099ec:	a354      	add	r3, pc, #336	; (adr r3, 8009b40 <__ieee754_pow+0x3a0>)
 80099ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f2:	4604      	mov	r4, r0
 80099f4:	460d      	mov	r5, r1
 80099f6:	f7f6 fd67 	bl	80004c8 <__aeabi_dmul>
 80099fa:	a353      	add	r3, pc, #332	; (adr r3, 8009b48 <__ieee754_pow+0x3a8>)
 80099fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a00:	4606      	mov	r6, r0
 8009a02:	460f      	mov	r7, r1
 8009a04:	4620      	mov	r0, r4
 8009a06:	4629      	mov	r1, r5
 8009a08:	f7f6 fd5e 	bl	80004c8 <__aeabi_dmul>
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	4682      	mov	sl, r0
 8009a10:	468b      	mov	fp, r1
 8009a12:	4b56      	ldr	r3, [pc, #344]	; (8009b6c <__ieee754_pow+0x3cc>)
 8009a14:	4620      	mov	r0, r4
 8009a16:	4629      	mov	r1, r5
 8009a18:	f7f6 fd56 	bl	80004c8 <__aeabi_dmul>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	460b      	mov	r3, r1
 8009a20:	a14b      	add	r1, pc, #300	; (adr r1, 8009b50 <__ieee754_pow+0x3b0>)
 8009a22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a26:	f7f6 fb97 	bl	8000158 <__aeabi_dsub>
 8009a2a:	4622      	mov	r2, r4
 8009a2c:	462b      	mov	r3, r5
 8009a2e:	f7f6 fd4b 	bl	80004c8 <__aeabi_dmul>
 8009a32:	4602      	mov	r2, r0
 8009a34:	460b      	mov	r3, r1
 8009a36:	2000      	movs	r0, #0
 8009a38:	494d      	ldr	r1, [pc, #308]	; (8009b70 <__ieee754_pow+0x3d0>)
 8009a3a:	f7f6 fb8d 	bl	8000158 <__aeabi_dsub>
 8009a3e:	4622      	mov	r2, r4
 8009a40:	462b      	mov	r3, r5
 8009a42:	4680      	mov	r8, r0
 8009a44:	4689      	mov	r9, r1
 8009a46:	4620      	mov	r0, r4
 8009a48:	4629      	mov	r1, r5
 8009a4a:	f7f6 fd3d 	bl	80004c8 <__aeabi_dmul>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	460b      	mov	r3, r1
 8009a52:	4640      	mov	r0, r8
 8009a54:	4649      	mov	r1, r9
 8009a56:	f7f6 fd37 	bl	80004c8 <__aeabi_dmul>
 8009a5a:	a33f      	add	r3, pc, #252	; (adr r3, 8009b58 <__ieee754_pow+0x3b8>)
 8009a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a60:	f7f6 fd32 	bl	80004c8 <__aeabi_dmul>
 8009a64:	4602      	mov	r2, r0
 8009a66:	460b      	mov	r3, r1
 8009a68:	4650      	mov	r0, sl
 8009a6a:	4659      	mov	r1, fp
 8009a6c:	f7f6 fb74 	bl	8000158 <__aeabi_dsub>
 8009a70:	4602      	mov	r2, r0
 8009a72:	460b      	mov	r3, r1
 8009a74:	4604      	mov	r4, r0
 8009a76:	460d      	mov	r5, r1
 8009a78:	4630      	mov	r0, r6
 8009a7a:	4639      	mov	r1, r7
 8009a7c:	f7f6 fb6e 	bl	800015c <__adddf3>
 8009a80:	2000      	movs	r0, #0
 8009a82:	468b      	mov	fp, r1
 8009a84:	4682      	mov	sl, r0
 8009a86:	4632      	mov	r2, r6
 8009a88:	463b      	mov	r3, r7
 8009a8a:	f7f6 fb65 	bl	8000158 <__aeabi_dsub>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	460b      	mov	r3, r1
 8009a92:	4620      	mov	r0, r4
 8009a94:	4629      	mov	r1, r5
 8009a96:	f7f6 fb5f 	bl	8000158 <__aeabi_dsub>
 8009a9a:	9b00      	ldr	r3, [sp, #0]
 8009a9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	f04f 0300 	mov.w	r3, #0
 8009aa6:	bf0c      	ite	eq
 8009aa8:	4c32      	ldreq	r4, [pc, #200]	; (8009b74 <__ieee754_pow+0x3d4>)
 8009aaa:	4c2f      	ldrne	r4, [pc, #188]	; (8009b68 <__ieee754_pow+0x3c8>)
 8009aac:	4606      	mov	r6, r0
 8009aae:	e9cd 3400 	strd	r3, r4, [sp]
 8009ab2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009ab6:	2400      	movs	r4, #0
 8009ab8:	460f      	mov	r7, r1
 8009aba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009abe:	4622      	mov	r2, r4
 8009ac0:	462b      	mov	r3, r5
 8009ac2:	f7f6 fb49 	bl	8000158 <__aeabi_dsub>
 8009ac6:	4652      	mov	r2, sl
 8009ac8:	465b      	mov	r3, fp
 8009aca:	f7f6 fcfd 	bl	80004c8 <__aeabi_dmul>
 8009ace:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ad2:	4680      	mov	r8, r0
 8009ad4:	4689      	mov	r9, r1
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	4639      	mov	r1, r7
 8009ada:	f7f6 fcf5 	bl	80004c8 <__aeabi_dmul>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4640      	mov	r0, r8
 8009ae4:	4649      	mov	r1, r9
 8009ae6:	f7f6 fb39 	bl	800015c <__adddf3>
 8009aea:	4622      	mov	r2, r4
 8009aec:	462b      	mov	r3, r5
 8009aee:	4680      	mov	r8, r0
 8009af0:	4689      	mov	r9, r1
 8009af2:	4650      	mov	r0, sl
 8009af4:	4659      	mov	r1, fp
 8009af6:	f7f6 fce7 	bl	80004c8 <__aeabi_dmul>
 8009afa:	4604      	mov	r4, r0
 8009afc:	460d      	mov	r5, r1
 8009afe:	460b      	mov	r3, r1
 8009b00:	4602      	mov	r2, r0
 8009b02:	4649      	mov	r1, r9
 8009b04:	4640      	mov	r0, r8
 8009b06:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009b0a:	f7f6 fb27 	bl	800015c <__adddf3>
 8009b0e:	4b1a      	ldr	r3, [pc, #104]	; (8009b78 <__ieee754_pow+0x3d8>)
 8009b10:	4682      	mov	sl, r0
 8009b12:	4299      	cmp	r1, r3
 8009b14:	460f      	mov	r7, r1
 8009b16:	460e      	mov	r6, r1
 8009b18:	f340 82e1 	ble.w	800a0de <__ieee754_pow+0x93e>
 8009b1c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009b20:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009b24:	4303      	orrs	r3, r0
 8009b26:	f000 81db 	beq.w	8009ee0 <__ieee754_pow+0x740>
 8009b2a:	a30d      	add	r3, pc, #52	; (adr r3, 8009b60 <__ieee754_pow+0x3c0>)
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b34:	f7f6 fcc8 	bl	80004c8 <__aeabi_dmul>
 8009b38:	a309      	add	r3, pc, #36	; (adr r3, 8009b60 <__ieee754_pow+0x3c0>)
 8009b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3e:	e6c4      	b.n	80098ca <__ieee754_pow+0x12a>
 8009b40:	60000000 	.word	0x60000000
 8009b44:	3ff71547 	.word	0x3ff71547
 8009b48:	f85ddf44 	.word	0xf85ddf44
 8009b4c:	3e54ae0b 	.word	0x3e54ae0b
 8009b50:	55555555 	.word	0x55555555
 8009b54:	3fd55555 	.word	0x3fd55555
 8009b58:	652b82fe 	.word	0x652b82fe
 8009b5c:	3ff71547 	.word	0x3ff71547
 8009b60:	8800759c 	.word	0x8800759c
 8009b64:	7e37e43c 	.word	0x7e37e43c
 8009b68:	3ff00000 	.word	0x3ff00000
 8009b6c:	3fd00000 	.word	0x3fd00000
 8009b70:	3fe00000 	.word	0x3fe00000
 8009b74:	bff00000 	.word	0xbff00000
 8009b78:	408fffff 	.word	0x408fffff
 8009b7c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009b80:	f04f 0200 	mov.w	r2, #0
 8009b84:	da08      	bge.n	8009b98 <__ieee754_pow+0x3f8>
 8009b86:	4658      	mov	r0, fp
 8009b88:	4bcd      	ldr	r3, [pc, #820]	; (8009ec0 <__ieee754_pow+0x720>)
 8009b8a:	4661      	mov	r1, ip
 8009b8c:	f7f6 fc9c 	bl	80004c8 <__aeabi_dmul>
 8009b90:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009b94:	4683      	mov	fp, r0
 8009b96:	460c      	mov	r4, r1
 8009b98:	1523      	asrs	r3, r4, #20
 8009b9a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009b9e:	4413      	add	r3, r2
 8009ba0:	930c      	str	r3, [sp, #48]	; 0x30
 8009ba2:	4bc8      	ldr	r3, [pc, #800]	; (8009ec4 <__ieee754_pow+0x724>)
 8009ba4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009ba8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009bac:	429c      	cmp	r4, r3
 8009bae:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009bb2:	dd08      	ble.n	8009bc6 <__ieee754_pow+0x426>
 8009bb4:	4bc4      	ldr	r3, [pc, #784]	; (8009ec8 <__ieee754_pow+0x728>)
 8009bb6:	429c      	cmp	r4, r3
 8009bb8:	f340 815b 	ble.w	8009e72 <__ieee754_pow+0x6d2>
 8009bbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bbe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	930c      	str	r3, [sp, #48]	; 0x30
 8009bc6:	f04f 0800 	mov.w	r8, #0
 8009bca:	4658      	mov	r0, fp
 8009bcc:	4629      	mov	r1, r5
 8009bce:	4bbf      	ldr	r3, [pc, #764]	; (8009ecc <__ieee754_pow+0x72c>)
 8009bd0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8009bd4:	444b      	add	r3, r9
 8009bd6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009bda:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8009bde:	461a      	mov	r2, r3
 8009be0:	4623      	mov	r3, r4
 8009be2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009be6:	f7f6 fab7 	bl	8000158 <__aeabi_dsub>
 8009bea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009bee:	4606      	mov	r6, r0
 8009bf0:	460f      	mov	r7, r1
 8009bf2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009bf6:	f7f6 fab1 	bl	800015c <__adddf3>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	2000      	movs	r0, #0
 8009c00:	49b3      	ldr	r1, [pc, #716]	; (8009ed0 <__ieee754_pow+0x730>)
 8009c02:	f7f6 fd8b 	bl	800071c <__aeabi_ddiv>
 8009c06:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	4630      	mov	r0, r6
 8009c10:	4639      	mov	r1, r7
 8009c12:	f7f6 fc59 	bl	80004c8 <__aeabi_dmul>
 8009c16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009c1a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009c1e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009c22:	2300      	movs	r3, #0
 8009c24:	2200      	movs	r2, #0
 8009c26:	106d      	asrs	r5, r5, #1
 8009c28:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009c2c:	9304      	str	r3, [sp, #16]
 8009c2e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009c32:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009c36:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8009c3a:	4650      	mov	r0, sl
 8009c3c:	4659      	mov	r1, fp
 8009c3e:	4614      	mov	r4, r2
 8009c40:	461d      	mov	r5, r3
 8009c42:	f7f6 fc41 	bl	80004c8 <__aeabi_dmul>
 8009c46:	4602      	mov	r2, r0
 8009c48:	460b      	mov	r3, r1
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	4639      	mov	r1, r7
 8009c4e:	f7f6 fa83 	bl	8000158 <__aeabi_dsub>
 8009c52:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009c56:	4606      	mov	r6, r0
 8009c58:	460f      	mov	r7, r1
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	4629      	mov	r1, r5
 8009c5e:	f7f6 fa7b 	bl	8000158 <__aeabi_dsub>
 8009c62:	4602      	mov	r2, r0
 8009c64:	460b      	mov	r3, r1
 8009c66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c6a:	f7f6 fa75 	bl	8000158 <__aeabi_dsub>
 8009c6e:	4652      	mov	r2, sl
 8009c70:	465b      	mov	r3, fp
 8009c72:	f7f6 fc29 	bl	80004c8 <__aeabi_dmul>
 8009c76:	4602      	mov	r2, r0
 8009c78:	460b      	mov	r3, r1
 8009c7a:	4630      	mov	r0, r6
 8009c7c:	4639      	mov	r1, r7
 8009c7e:	f7f6 fa6b 	bl	8000158 <__aeabi_dsub>
 8009c82:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009c86:	f7f6 fc1f 	bl	80004c8 <__aeabi_dmul>
 8009c8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009c92:	4610      	mov	r0, r2
 8009c94:	4619      	mov	r1, r3
 8009c96:	f7f6 fc17 	bl	80004c8 <__aeabi_dmul>
 8009c9a:	a377      	add	r3, pc, #476	; (adr r3, 8009e78 <__ieee754_pow+0x6d8>)
 8009c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	460d      	mov	r5, r1
 8009ca4:	f7f6 fc10 	bl	80004c8 <__aeabi_dmul>
 8009ca8:	a375      	add	r3, pc, #468	; (adr r3, 8009e80 <__ieee754_pow+0x6e0>)
 8009caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cae:	f7f6 fa55 	bl	800015c <__adddf3>
 8009cb2:	4622      	mov	r2, r4
 8009cb4:	462b      	mov	r3, r5
 8009cb6:	f7f6 fc07 	bl	80004c8 <__aeabi_dmul>
 8009cba:	a373      	add	r3, pc, #460	; (adr r3, 8009e88 <__ieee754_pow+0x6e8>)
 8009cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc0:	f7f6 fa4c 	bl	800015c <__adddf3>
 8009cc4:	4622      	mov	r2, r4
 8009cc6:	462b      	mov	r3, r5
 8009cc8:	f7f6 fbfe 	bl	80004c8 <__aeabi_dmul>
 8009ccc:	a370      	add	r3, pc, #448	; (adr r3, 8009e90 <__ieee754_pow+0x6f0>)
 8009cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd2:	f7f6 fa43 	bl	800015c <__adddf3>
 8009cd6:	4622      	mov	r2, r4
 8009cd8:	462b      	mov	r3, r5
 8009cda:	f7f6 fbf5 	bl	80004c8 <__aeabi_dmul>
 8009cde:	a36e      	add	r3, pc, #440	; (adr r3, 8009e98 <__ieee754_pow+0x6f8>)
 8009ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce4:	f7f6 fa3a 	bl	800015c <__adddf3>
 8009ce8:	4622      	mov	r2, r4
 8009cea:	462b      	mov	r3, r5
 8009cec:	f7f6 fbec 	bl	80004c8 <__aeabi_dmul>
 8009cf0:	a36b      	add	r3, pc, #428	; (adr r3, 8009ea0 <__ieee754_pow+0x700>)
 8009cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf6:	f7f6 fa31 	bl	800015c <__adddf3>
 8009cfa:	4622      	mov	r2, r4
 8009cfc:	4606      	mov	r6, r0
 8009cfe:	460f      	mov	r7, r1
 8009d00:	462b      	mov	r3, r5
 8009d02:	4620      	mov	r0, r4
 8009d04:	4629      	mov	r1, r5
 8009d06:	f7f6 fbdf 	bl	80004c8 <__aeabi_dmul>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	4630      	mov	r0, r6
 8009d10:	4639      	mov	r1, r7
 8009d12:	f7f6 fbd9 	bl	80004c8 <__aeabi_dmul>
 8009d16:	4604      	mov	r4, r0
 8009d18:	460d      	mov	r5, r1
 8009d1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d1e:	4652      	mov	r2, sl
 8009d20:	465b      	mov	r3, fp
 8009d22:	f7f6 fa1b 	bl	800015c <__adddf3>
 8009d26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009d2a:	f7f6 fbcd 	bl	80004c8 <__aeabi_dmul>
 8009d2e:	4622      	mov	r2, r4
 8009d30:	462b      	mov	r3, r5
 8009d32:	f7f6 fa13 	bl	800015c <__adddf3>
 8009d36:	4652      	mov	r2, sl
 8009d38:	4606      	mov	r6, r0
 8009d3a:	460f      	mov	r7, r1
 8009d3c:	465b      	mov	r3, fp
 8009d3e:	4650      	mov	r0, sl
 8009d40:	4659      	mov	r1, fp
 8009d42:	f7f6 fbc1 	bl	80004c8 <__aeabi_dmul>
 8009d46:	2200      	movs	r2, #0
 8009d48:	4b62      	ldr	r3, [pc, #392]	; (8009ed4 <__ieee754_pow+0x734>)
 8009d4a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009d4e:	f7f6 fa05 	bl	800015c <__adddf3>
 8009d52:	4632      	mov	r2, r6
 8009d54:	463b      	mov	r3, r7
 8009d56:	f7f6 fa01 	bl	800015c <__adddf3>
 8009d5a:	9804      	ldr	r0, [sp, #16]
 8009d5c:	460d      	mov	r5, r1
 8009d5e:	4604      	mov	r4, r0
 8009d60:	4602      	mov	r2, r0
 8009d62:	460b      	mov	r3, r1
 8009d64:	4650      	mov	r0, sl
 8009d66:	4659      	mov	r1, fp
 8009d68:	f7f6 fbae 	bl	80004c8 <__aeabi_dmul>
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	4682      	mov	sl, r0
 8009d70:	468b      	mov	fp, r1
 8009d72:	4b58      	ldr	r3, [pc, #352]	; (8009ed4 <__ieee754_pow+0x734>)
 8009d74:	4620      	mov	r0, r4
 8009d76:	4629      	mov	r1, r5
 8009d78:	f7f6 f9ee 	bl	8000158 <__aeabi_dsub>
 8009d7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009d80:	f7f6 f9ea 	bl	8000158 <__aeabi_dsub>
 8009d84:	4602      	mov	r2, r0
 8009d86:	460b      	mov	r3, r1
 8009d88:	4630      	mov	r0, r6
 8009d8a:	4639      	mov	r1, r7
 8009d8c:	f7f6 f9e4 	bl	8000158 <__aeabi_dsub>
 8009d90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d94:	f7f6 fb98 	bl	80004c8 <__aeabi_dmul>
 8009d98:	4622      	mov	r2, r4
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	460f      	mov	r7, r1
 8009d9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009da2:	462b      	mov	r3, r5
 8009da4:	f7f6 fb90 	bl	80004c8 <__aeabi_dmul>
 8009da8:	4602      	mov	r2, r0
 8009daa:	460b      	mov	r3, r1
 8009dac:	4630      	mov	r0, r6
 8009dae:	4639      	mov	r1, r7
 8009db0:	f7f6 f9d4 	bl	800015c <__adddf3>
 8009db4:	4606      	mov	r6, r0
 8009db6:	460f      	mov	r7, r1
 8009db8:	4602      	mov	r2, r0
 8009dba:	460b      	mov	r3, r1
 8009dbc:	4650      	mov	r0, sl
 8009dbe:	4659      	mov	r1, fp
 8009dc0:	f7f6 f9cc 	bl	800015c <__adddf3>
 8009dc4:	a338      	add	r3, pc, #224	; (adr r3, 8009ea8 <__ieee754_pow+0x708>)
 8009dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dca:	9804      	ldr	r0, [sp, #16]
 8009dcc:	460d      	mov	r5, r1
 8009dce:	4604      	mov	r4, r0
 8009dd0:	f7f6 fb7a 	bl	80004c8 <__aeabi_dmul>
 8009dd4:	4652      	mov	r2, sl
 8009dd6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009dda:	465b      	mov	r3, fp
 8009ddc:	4620      	mov	r0, r4
 8009dde:	4629      	mov	r1, r5
 8009de0:	f7f6 f9ba 	bl	8000158 <__aeabi_dsub>
 8009de4:	4602      	mov	r2, r0
 8009de6:	460b      	mov	r3, r1
 8009de8:	4630      	mov	r0, r6
 8009dea:	4639      	mov	r1, r7
 8009dec:	f7f6 f9b4 	bl	8000158 <__aeabi_dsub>
 8009df0:	a32f      	add	r3, pc, #188	; (adr r3, 8009eb0 <__ieee754_pow+0x710>)
 8009df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df6:	f7f6 fb67 	bl	80004c8 <__aeabi_dmul>
 8009dfa:	a32f      	add	r3, pc, #188	; (adr r3, 8009eb8 <__ieee754_pow+0x718>)
 8009dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e00:	4606      	mov	r6, r0
 8009e02:	460f      	mov	r7, r1
 8009e04:	4620      	mov	r0, r4
 8009e06:	4629      	mov	r1, r5
 8009e08:	f7f6 fb5e 	bl	80004c8 <__aeabi_dmul>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4630      	mov	r0, r6
 8009e12:	4639      	mov	r1, r7
 8009e14:	f7f6 f9a2 	bl	800015c <__adddf3>
 8009e18:	4b2f      	ldr	r3, [pc, #188]	; (8009ed8 <__ieee754_pow+0x738>)
 8009e1a:	444b      	add	r3, r9
 8009e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e20:	f7f6 f99c 	bl	800015c <__adddf3>
 8009e24:	4604      	mov	r4, r0
 8009e26:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009e28:	460d      	mov	r5, r1
 8009e2a:	f7f6 fae3 	bl	80003f4 <__aeabi_i2d>
 8009e2e:	4606      	mov	r6, r0
 8009e30:	460f      	mov	r7, r1
 8009e32:	4b2a      	ldr	r3, [pc, #168]	; (8009edc <__ieee754_pow+0x73c>)
 8009e34:	4622      	mov	r2, r4
 8009e36:	444b      	add	r3, r9
 8009e38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e3c:	462b      	mov	r3, r5
 8009e3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e42:	f7f6 f98b 	bl	800015c <__adddf3>
 8009e46:	4642      	mov	r2, r8
 8009e48:	464b      	mov	r3, r9
 8009e4a:	f7f6 f987 	bl	800015c <__adddf3>
 8009e4e:	4632      	mov	r2, r6
 8009e50:	463b      	mov	r3, r7
 8009e52:	f7f6 f983 	bl	800015c <__adddf3>
 8009e56:	9804      	ldr	r0, [sp, #16]
 8009e58:	4632      	mov	r2, r6
 8009e5a:	463b      	mov	r3, r7
 8009e5c:	4682      	mov	sl, r0
 8009e5e:	468b      	mov	fp, r1
 8009e60:	f7f6 f97a 	bl	8000158 <__aeabi_dsub>
 8009e64:	4642      	mov	r2, r8
 8009e66:	464b      	mov	r3, r9
 8009e68:	f7f6 f976 	bl	8000158 <__aeabi_dsub>
 8009e6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e70:	e60b      	b.n	8009a8a <__ieee754_pow+0x2ea>
 8009e72:	f04f 0801 	mov.w	r8, #1
 8009e76:	e6a8      	b.n	8009bca <__ieee754_pow+0x42a>
 8009e78:	4a454eef 	.word	0x4a454eef
 8009e7c:	3fca7e28 	.word	0x3fca7e28
 8009e80:	93c9db65 	.word	0x93c9db65
 8009e84:	3fcd864a 	.word	0x3fcd864a
 8009e88:	a91d4101 	.word	0xa91d4101
 8009e8c:	3fd17460 	.word	0x3fd17460
 8009e90:	518f264d 	.word	0x518f264d
 8009e94:	3fd55555 	.word	0x3fd55555
 8009e98:	db6fabff 	.word	0xdb6fabff
 8009e9c:	3fdb6db6 	.word	0x3fdb6db6
 8009ea0:	33333303 	.word	0x33333303
 8009ea4:	3fe33333 	.word	0x3fe33333
 8009ea8:	e0000000 	.word	0xe0000000
 8009eac:	3feec709 	.word	0x3feec709
 8009eb0:	dc3a03fd 	.word	0xdc3a03fd
 8009eb4:	3feec709 	.word	0x3feec709
 8009eb8:	145b01f5 	.word	0x145b01f5
 8009ebc:	be3e2fe0 	.word	0xbe3e2fe0
 8009ec0:	43400000 	.word	0x43400000
 8009ec4:	0003988e 	.word	0x0003988e
 8009ec8:	000bb679 	.word	0x000bb679
 8009ecc:	0800a900 	.word	0x0800a900
 8009ed0:	3ff00000 	.word	0x3ff00000
 8009ed4:	40080000 	.word	0x40080000
 8009ed8:	0800a920 	.word	0x0800a920
 8009edc:	0800a910 	.word	0x0800a910
 8009ee0:	a39b      	add	r3, pc, #620	; (adr r3, 800a150 <__ieee754_pow+0x9b0>)
 8009ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee6:	4640      	mov	r0, r8
 8009ee8:	4649      	mov	r1, r9
 8009eea:	f7f6 f937 	bl	800015c <__adddf3>
 8009eee:	4622      	mov	r2, r4
 8009ef0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ef4:	462b      	mov	r3, r5
 8009ef6:	4650      	mov	r0, sl
 8009ef8:	4639      	mov	r1, r7
 8009efa:	f7f6 f92d 	bl	8000158 <__aeabi_dsub>
 8009efe:	4602      	mov	r2, r0
 8009f00:	460b      	mov	r3, r1
 8009f02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f06:	f7f6 fd6f 	bl	80009e8 <__aeabi_dcmpgt>
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	f47f ae0d 	bne.w	8009b2a <__ieee754_pow+0x38a>
 8009f10:	4aa3      	ldr	r2, [pc, #652]	; (800a1a0 <__ieee754_pow+0xa00>)
 8009f12:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8009f16:	4293      	cmp	r3, r2
 8009f18:	f340 8103 	ble.w	800a122 <__ieee754_pow+0x982>
 8009f1c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009f20:	2000      	movs	r0, #0
 8009f22:	151b      	asrs	r3, r3, #20
 8009f24:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009f28:	fa4a f303 	asr.w	r3, sl, r3
 8009f2c:	4433      	add	r3, r6
 8009f2e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009f32:	4f9c      	ldr	r7, [pc, #624]	; (800a1a4 <__ieee754_pow+0xa04>)
 8009f34:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009f38:	4117      	asrs	r7, r2
 8009f3a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009f3e:	ea23 0107 	bic.w	r1, r3, r7
 8009f42:	f1c2 0214 	rsb	r2, r2, #20
 8009f46:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009f4a:	fa4a fa02 	asr.w	sl, sl, r2
 8009f4e:	2e00      	cmp	r6, #0
 8009f50:	4602      	mov	r2, r0
 8009f52:	460b      	mov	r3, r1
 8009f54:	4620      	mov	r0, r4
 8009f56:	4629      	mov	r1, r5
 8009f58:	bfb8      	it	lt
 8009f5a:	f1ca 0a00 	rsblt	sl, sl, #0
 8009f5e:	f7f6 f8fb 	bl	8000158 <__aeabi_dsub>
 8009f62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f6a:	4642      	mov	r2, r8
 8009f6c:	464b      	mov	r3, r9
 8009f6e:	f7f6 f8f5 	bl	800015c <__adddf3>
 8009f72:	a379      	add	r3, pc, #484	; (adr r3, 800a158 <__ieee754_pow+0x9b8>)
 8009f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f78:	2000      	movs	r0, #0
 8009f7a:	460d      	mov	r5, r1
 8009f7c:	4604      	mov	r4, r0
 8009f7e:	f7f6 faa3 	bl	80004c8 <__aeabi_dmul>
 8009f82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f86:	4606      	mov	r6, r0
 8009f88:	460f      	mov	r7, r1
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	f7f6 f8e3 	bl	8000158 <__aeabi_dsub>
 8009f92:	4602      	mov	r2, r0
 8009f94:	460b      	mov	r3, r1
 8009f96:	4640      	mov	r0, r8
 8009f98:	4649      	mov	r1, r9
 8009f9a:	f7f6 f8dd 	bl	8000158 <__aeabi_dsub>
 8009f9e:	a370      	add	r3, pc, #448	; (adr r3, 800a160 <__ieee754_pow+0x9c0>)
 8009fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa4:	f7f6 fa90 	bl	80004c8 <__aeabi_dmul>
 8009fa8:	a36f      	add	r3, pc, #444	; (adr r3, 800a168 <__ieee754_pow+0x9c8>)
 8009faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fae:	4680      	mov	r8, r0
 8009fb0:	4689      	mov	r9, r1
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	4629      	mov	r1, r5
 8009fb6:	f7f6 fa87 	bl	80004c8 <__aeabi_dmul>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	4640      	mov	r0, r8
 8009fc0:	4649      	mov	r1, r9
 8009fc2:	f7f6 f8cb 	bl	800015c <__adddf3>
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	460d      	mov	r5, r1
 8009fca:	4602      	mov	r2, r0
 8009fcc:	460b      	mov	r3, r1
 8009fce:	4630      	mov	r0, r6
 8009fd0:	4639      	mov	r1, r7
 8009fd2:	f7f6 f8c3 	bl	800015c <__adddf3>
 8009fd6:	4632      	mov	r2, r6
 8009fd8:	463b      	mov	r3, r7
 8009fda:	4680      	mov	r8, r0
 8009fdc:	4689      	mov	r9, r1
 8009fde:	f7f6 f8bb 	bl	8000158 <__aeabi_dsub>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	4629      	mov	r1, r5
 8009fea:	f7f6 f8b5 	bl	8000158 <__aeabi_dsub>
 8009fee:	4642      	mov	r2, r8
 8009ff0:	4606      	mov	r6, r0
 8009ff2:	460f      	mov	r7, r1
 8009ff4:	464b      	mov	r3, r9
 8009ff6:	4640      	mov	r0, r8
 8009ff8:	4649      	mov	r1, r9
 8009ffa:	f7f6 fa65 	bl	80004c8 <__aeabi_dmul>
 8009ffe:	a35c      	add	r3, pc, #368	; (adr r3, 800a170 <__ieee754_pow+0x9d0>)
 800a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a004:	4604      	mov	r4, r0
 800a006:	460d      	mov	r5, r1
 800a008:	f7f6 fa5e 	bl	80004c8 <__aeabi_dmul>
 800a00c:	a35a      	add	r3, pc, #360	; (adr r3, 800a178 <__ieee754_pow+0x9d8>)
 800a00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a012:	f7f6 f8a1 	bl	8000158 <__aeabi_dsub>
 800a016:	4622      	mov	r2, r4
 800a018:	462b      	mov	r3, r5
 800a01a:	f7f6 fa55 	bl	80004c8 <__aeabi_dmul>
 800a01e:	a358      	add	r3, pc, #352	; (adr r3, 800a180 <__ieee754_pow+0x9e0>)
 800a020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a024:	f7f6 f89a 	bl	800015c <__adddf3>
 800a028:	4622      	mov	r2, r4
 800a02a:	462b      	mov	r3, r5
 800a02c:	f7f6 fa4c 	bl	80004c8 <__aeabi_dmul>
 800a030:	a355      	add	r3, pc, #340	; (adr r3, 800a188 <__ieee754_pow+0x9e8>)
 800a032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a036:	f7f6 f88f 	bl	8000158 <__aeabi_dsub>
 800a03a:	4622      	mov	r2, r4
 800a03c:	462b      	mov	r3, r5
 800a03e:	f7f6 fa43 	bl	80004c8 <__aeabi_dmul>
 800a042:	a353      	add	r3, pc, #332	; (adr r3, 800a190 <__ieee754_pow+0x9f0>)
 800a044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a048:	f7f6 f888 	bl	800015c <__adddf3>
 800a04c:	4622      	mov	r2, r4
 800a04e:	462b      	mov	r3, r5
 800a050:	f7f6 fa3a 	bl	80004c8 <__aeabi_dmul>
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	4640      	mov	r0, r8
 800a05a:	4649      	mov	r1, r9
 800a05c:	f7f6 f87c 	bl	8000158 <__aeabi_dsub>
 800a060:	4604      	mov	r4, r0
 800a062:	460d      	mov	r5, r1
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	4640      	mov	r0, r8
 800a06a:	4649      	mov	r1, r9
 800a06c:	f7f6 fa2c 	bl	80004c8 <__aeabi_dmul>
 800a070:	2200      	movs	r2, #0
 800a072:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a076:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a07a:	4620      	mov	r0, r4
 800a07c:	4629      	mov	r1, r5
 800a07e:	f7f6 f86b 	bl	8000158 <__aeabi_dsub>
 800a082:	4602      	mov	r2, r0
 800a084:	460b      	mov	r3, r1
 800a086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a08a:	f7f6 fb47 	bl	800071c <__aeabi_ddiv>
 800a08e:	4632      	mov	r2, r6
 800a090:	4604      	mov	r4, r0
 800a092:	460d      	mov	r5, r1
 800a094:	463b      	mov	r3, r7
 800a096:	4640      	mov	r0, r8
 800a098:	4649      	mov	r1, r9
 800a09a:	f7f6 fa15 	bl	80004c8 <__aeabi_dmul>
 800a09e:	4632      	mov	r2, r6
 800a0a0:	463b      	mov	r3, r7
 800a0a2:	f7f6 f85b 	bl	800015c <__adddf3>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	4629      	mov	r1, r5
 800a0ae:	f7f6 f853 	bl	8000158 <__aeabi_dsub>
 800a0b2:	4642      	mov	r2, r8
 800a0b4:	464b      	mov	r3, r9
 800a0b6:	f7f6 f84f 	bl	8000158 <__aeabi_dsub>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	460b      	mov	r3, r1
 800a0be:	2000      	movs	r0, #0
 800a0c0:	4939      	ldr	r1, [pc, #228]	; (800a1a8 <__ieee754_pow+0xa08>)
 800a0c2:	f7f6 f849 	bl	8000158 <__aeabi_dsub>
 800a0c6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a0ca:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a0ce:	da2b      	bge.n	800a128 <__ieee754_pow+0x988>
 800a0d0:	4652      	mov	r2, sl
 800a0d2:	f000 f9b9 	bl	800a448 <scalbn>
 800a0d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0da:	f7ff bbf6 	b.w	80098ca <__ieee754_pow+0x12a>
 800a0de:	4b33      	ldr	r3, [pc, #204]	; (800a1ac <__ieee754_pow+0xa0c>)
 800a0e0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a0e4:	429f      	cmp	r7, r3
 800a0e6:	f77f af13 	ble.w	8009f10 <__ieee754_pow+0x770>
 800a0ea:	4b31      	ldr	r3, [pc, #196]	; (800a1b0 <__ieee754_pow+0xa10>)
 800a0ec:	440b      	add	r3, r1
 800a0ee:	4303      	orrs	r3, r0
 800a0f0:	d00b      	beq.n	800a10a <__ieee754_pow+0x96a>
 800a0f2:	a329      	add	r3, pc, #164	; (adr r3, 800a198 <__ieee754_pow+0x9f8>)
 800a0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0fc:	f7f6 f9e4 	bl	80004c8 <__aeabi_dmul>
 800a100:	a325      	add	r3, pc, #148	; (adr r3, 800a198 <__ieee754_pow+0x9f8>)
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	f7ff bbe0 	b.w	80098ca <__ieee754_pow+0x12a>
 800a10a:	4622      	mov	r2, r4
 800a10c:	462b      	mov	r3, r5
 800a10e:	f7f6 f823 	bl	8000158 <__aeabi_dsub>
 800a112:	4642      	mov	r2, r8
 800a114:	464b      	mov	r3, r9
 800a116:	f7f6 fc5d 	bl	80009d4 <__aeabi_dcmpge>
 800a11a:	2800      	cmp	r0, #0
 800a11c:	f43f aef8 	beq.w	8009f10 <__ieee754_pow+0x770>
 800a120:	e7e7      	b.n	800a0f2 <__ieee754_pow+0x952>
 800a122:	f04f 0a00 	mov.w	sl, #0
 800a126:	e71e      	b.n	8009f66 <__ieee754_pow+0x7c6>
 800a128:	4621      	mov	r1, r4
 800a12a:	e7d4      	b.n	800a0d6 <__ieee754_pow+0x936>
 800a12c:	f04f 0b00 	mov.w	fp, #0
 800a130:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a1a8 <__ieee754_pow+0xa08>
 800a134:	f7ff bb95 	b.w	8009862 <__ieee754_pow+0xc2>
 800a138:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800a13c:	f7ff bb91 	b.w	8009862 <__ieee754_pow+0xc2>
 800a140:	4638      	mov	r0, r7
 800a142:	4641      	mov	r1, r8
 800a144:	f7ff bbc3 	b.w	80098ce <__ieee754_pow+0x12e>
 800a148:	9200      	str	r2, [sp, #0]
 800a14a:	f7ff bb9f 	b.w	800988c <__ieee754_pow+0xec>
 800a14e:	bf00      	nop
 800a150:	652b82fe 	.word	0x652b82fe
 800a154:	3c971547 	.word	0x3c971547
 800a158:	00000000 	.word	0x00000000
 800a15c:	3fe62e43 	.word	0x3fe62e43
 800a160:	fefa39ef 	.word	0xfefa39ef
 800a164:	3fe62e42 	.word	0x3fe62e42
 800a168:	0ca86c39 	.word	0x0ca86c39
 800a16c:	be205c61 	.word	0xbe205c61
 800a170:	72bea4d0 	.word	0x72bea4d0
 800a174:	3e663769 	.word	0x3e663769
 800a178:	c5d26bf1 	.word	0xc5d26bf1
 800a17c:	3ebbbd41 	.word	0x3ebbbd41
 800a180:	af25de2c 	.word	0xaf25de2c
 800a184:	3f11566a 	.word	0x3f11566a
 800a188:	16bebd93 	.word	0x16bebd93
 800a18c:	3f66c16c 	.word	0x3f66c16c
 800a190:	5555553e 	.word	0x5555553e
 800a194:	3fc55555 	.word	0x3fc55555
 800a198:	c2f8f359 	.word	0xc2f8f359
 800a19c:	01a56e1f 	.word	0x01a56e1f
 800a1a0:	3fe00000 	.word	0x3fe00000
 800a1a4:	000fffff 	.word	0x000fffff
 800a1a8:	3ff00000 	.word	0x3ff00000
 800a1ac:	4090cbff 	.word	0x4090cbff
 800a1b0:	3f6f3400 	.word	0x3f6f3400

0800a1b4 <__ieee754_sqrt>:
 800a1b4:	4b54      	ldr	r3, [pc, #336]	; (800a308 <__ieee754_sqrt+0x154>)
 800a1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ba:	438b      	bics	r3, r1
 800a1bc:	4606      	mov	r6, r0
 800a1be:	460d      	mov	r5, r1
 800a1c0:	460a      	mov	r2, r1
 800a1c2:	460c      	mov	r4, r1
 800a1c4:	d10f      	bne.n	800a1e6 <__ieee754_sqrt+0x32>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	f7f6 f97d 	bl	80004c8 <__aeabi_dmul>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	4629      	mov	r1, r5
 800a1d6:	f7f5 ffc1 	bl	800015c <__adddf3>
 800a1da:	4606      	mov	r6, r0
 800a1dc:	460d      	mov	r5, r1
 800a1de:	4630      	mov	r0, r6
 800a1e0:	4629      	mov	r1, r5
 800a1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e6:	2900      	cmp	r1, #0
 800a1e8:	4607      	mov	r7, r0
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	dc0e      	bgt.n	800a20c <__ieee754_sqrt+0x58>
 800a1ee:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a1f2:	ea5c 0707 	orrs.w	r7, ip, r7
 800a1f6:	d0f2      	beq.n	800a1de <__ieee754_sqrt+0x2a>
 800a1f8:	b141      	cbz	r1, 800a20c <__ieee754_sqrt+0x58>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	f7f5 ffab 	bl	8000158 <__aeabi_dsub>
 800a202:	4602      	mov	r2, r0
 800a204:	460b      	mov	r3, r1
 800a206:	f7f6 fa89 	bl	800071c <__aeabi_ddiv>
 800a20a:	e7e6      	b.n	800a1da <__ieee754_sqrt+0x26>
 800a20c:	1512      	asrs	r2, r2, #20
 800a20e:	d074      	beq.n	800a2fa <__ieee754_sqrt+0x146>
 800a210:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a214:	07d5      	lsls	r5, r2, #31
 800a216:	f04f 0500 	mov.w	r5, #0
 800a21a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a21e:	bf48      	it	mi
 800a220:	0fd9      	lsrmi	r1, r3, #31
 800a222:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800a226:	bf44      	itt	mi
 800a228:	005b      	lslmi	r3, r3, #1
 800a22a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800a22e:	1051      	asrs	r1, r2, #1
 800a230:	0fda      	lsrs	r2, r3, #31
 800a232:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800a236:	4628      	mov	r0, r5
 800a238:	2216      	movs	r2, #22
 800a23a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a23e:	005b      	lsls	r3, r3, #1
 800a240:	1987      	adds	r7, r0, r6
 800a242:	42a7      	cmp	r7, r4
 800a244:	bfde      	ittt	le
 800a246:	19b8      	addle	r0, r7, r6
 800a248:	1be4      	suble	r4, r4, r7
 800a24a:	19ad      	addle	r5, r5, r6
 800a24c:	0fdf      	lsrs	r7, r3, #31
 800a24e:	3a01      	subs	r2, #1
 800a250:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800a254:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a258:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a25c:	d1f0      	bne.n	800a240 <__ieee754_sqrt+0x8c>
 800a25e:	f04f 0c20 	mov.w	ip, #32
 800a262:	4696      	mov	lr, r2
 800a264:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a268:	4284      	cmp	r4, r0
 800a26a:	eb06 070e 	add.w	r7, r6, lr
 800a26e:	dc02      	bgt.n	800a276 <__ieee754_sqrt+0xc2>
 800a270:	d112      	bne.n	800a298 <__ieee754_sqrt+0xe4>
 800a272:	429f      	cmp	r7, r3
 800a274:	d810      	bhi.n	800a298 <__ieee754_sqrt+0xe4>
 800a276:	2f00      	cmp	r7, #0
 800a278:	eb07 0e06 	add.w	lr, r7, r6
 800a27c:	da42      	bge.n	800a304 <__ieee754_sqrt+0x150>
 800a27e:	f1be 0f00 	cmp.w	lr, #0
 800a282:	db3f      	blt.n	800a304 <__ieee754_sqrt+0x150>
 800a284:	f100 0801 	add.w	r8, r0, #1
 800a288:	1a24      	subs	r4, r4, r0
 800a28a:	4640      	mov	r0, r8
 800a28c:	429f      	cmp	r7, r3
 800a28e:	bf88      	it	hi
 800a290:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 800a294:	1bdb      	subs	r3, r3, r7
 800a296:	4432      	add	r2, r6
 800a298:	0064      	lsls	r4, r4, #1
 800a29a:	f1bc 0c01 	subs.w	ip, ip, #1
 800a29e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800a2a2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a2a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a2aa:	d1dd      	bne.n	800a268 <__ieee754_sqrt+0xb4>
 800a2ac:	4323      	orrs	r3, r4
 800a2ae:	d006      	beq.n	800a2be <__ieee754_sqrt+0x10a>
 800a2b0:	1c54      	adds	r4, r2, #1
 800a2b2:	bf0b      	itete	eq
 800a2b4:	4662      	moveq	r2, ip
 800a2b6:	3201      	addne	r2, #1
 800a2b8:	3501      	addeq	r5, #1
 800a2ba:	f022 0201 	bicne.w	r2, r2, #1
 800a2be:	106b      	asrs	r3, r5, #1
 800a2c0:	0852      	lsrs	r2, r2, #1
 800a2c2:	07e8      	lsls	r0, r5, #31
 800a2c4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a2c8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a2cc:	bf48      	it	mi
 800a2ce:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a2d2:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800a2d6:	4616      	mov	r6, r2
 800a2d8:	e781      	b.n	800a1de <__ieee754_sqrt+0x2a>
 800a2da:	0adc      	lsrs	r4, r3, #11
 800a2dc:	3915      	subs	r1, #21
 800a2de:	055b      	lsls	r3, r3, #21
 800a2e0:	2c00      	cmp	r4, #0
 800a2e2:	d0fa      	beq.n	800a2da <__ieee754_sqrt+0x126>
 800a2e4:	02e6      	lsls	r6, r4, #11
 800a2e6:	d50a      	bpl.n	800a2fe <__ieee754_sqrt+0x14a>
 800a2e8:	f1c2 0020 	rsb	r0, r2, #32
 800a2ec:	fa23 f000 	lsr.w	r0, r3, r0
 800a2f0:	1e55      	subs	r5, r2, #1
 800a2f2:	4093      	lsls	r3, r2
 800a2f4:	4304      	orrs	r4, r0
 800a2f6:	1b4a      	subs	r2, r1, r5
 800a2f8:	e78a      	b.n	800a210 <__ieee754_sqrt+0x5c>
 800a2fa:	4611      	mov	r1, r2
 800a2fc:	e7f0      	b.n	800a2e0 <__ieee754_sqrt+0x12c>
 800a2fe:	0064      	lsls	r4, r4, #1
 800a300:	3201      	adds	r2, #1
 800a302:	e7ef      	b.n	800a2e4 <__ieee754_sqrt+0x130>
 800a304:	4680      	mov	r8, r0
 800a306:	e7bf      	b.n	800a288 <__ieee754_sqrt+0xd4>
 800a308:	7ff00000 	.word	0x7ff00000

0800a30c <fabs>:
 800a30c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a310:	4619      	mov	r1, r3
 800a312:	4770      	bx	lr

0800a314 <finite>:
 800a314:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800a318:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800a31c:	0fc0      	lsrs	r0, r0, #31
 800a31e:	4770      	bx	lr

0800a320 <matherr>:
 800a320:	2000      	movs	r0, #0
 800a322:	4770      	bx	lr

0800a324 <nan>:
 800a324:	2000      	movs	r0, #0
 800a326:	4901      	ldr	r1, [pc, #4]	; (800a32c <nan+0x8>)
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	7ff80000 	.word	0x7ff80000

0800a330 <rint>:
 800a330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a332:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a336:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800a33a:	f1bc 0f13 	cmp.w	ip, #19
 800a33e:	4604      	mov	r4, r0
 800a340:	460d      	mov	r5, r1
 800a342:	460b      	mov	r3, r1
 800a344:	4606      	mov	r6, r0
 800a346:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800a34a:	dc5a      	bgt.n	800a402 <rint+0xd2>
 800a34c:	f1bc 0f00 	cmp.w	ip, #0
 800a350:	da2b      	bge.n	800a3aa <rint+0x7a>
 800a352:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a356:	4302      	orrs	r2, r0
 800a358:	d023      	beq.n	800a3a2 <rint+0x72>
 800a35a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a35e:	4302      	orrs	r2, r0
 800a360:	4256      	negs	r6, r2
 800a362:	4316      	orrs	r6, r2
 800a364:	0c4b      	lsrs	r3, r1, #17
 800a366:	0b36      	lsrs	r6, r6, #12
 800a368:	4934      	ldr	r1, [pc, #208]	; (800a43c <rint+0x10c>)
 800a36a:	045b      	lsls	r3, r3, #17
 800a36c:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 800a370:	ea46 0503 	orr.w	r5, r6, r3
 800a374:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800a378:	4602      	mov	r2, r0
 800a37a:	462b      	mov	r3, r5
 800a37c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a380:	4620      	mov	r0, r4
 800a382:	4629      	mov	r1, r5
 800a384:	f7f5 feea 	bl	800015c <__adddf3>
 800a388:	e9cd 0100 	strd	r0, r1, [sp]
 800a38c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a390:	462b      	mov	r3, r5
 800a392:	4622      	mov	r2, r4
 800a394:	f7f5 fee0 	bl	8000158 <__aeabi_dsub>
 800a398:	4604      	mov	r4, r0
 800a39a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a39e:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	4629      	mov	r1, r5
 800a3a6:	b003      	add	sp, #12
 800a3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3aa:	4a25      	ldr	r2, [pc, #148]	; (800a440 <rint+0x110>)
 800a3ac:	fa42 f20c 	asr.w	r2, r2, ip
 800a3b0:	4011      	ands	r1, r2
 800a3b2:	4301      	orrs	r1, r0
 800a3b4:	d0f5      	beq.n	800a3a2 <rint+0x72>
 800a3b6:	0852      	lsrs	r2, r2, #1
 800a3b8:	ea05 0102 	and.w	r1, r5, r2
 800a3bc:	ea50 0601 	orrs.w	r6, r0, r1
 800a3c0:	d00c      	beq.n	800a3dc <rint+0xac>
 800a3c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a3c6:	f1bc 0f13 	cmp.w	ip, #19
 800a3ca:	bf0c      	ite	eq
 800a3cc:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800a3d0:	2600      	movne	r6, #0
 800a3d2:	ea25 0202 	bic.w	r2, r5, r2
 800a3d6:	fa43 f30c 	asr.w	r3, r3, ip
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	4917      	ldr	r1, [pc, #92]	; (800a43c <rint+0x10c>)
 800a3de:	4632      	mov	r2, r6
 800a3e0:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800a3e4:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	4629      	mov	r1, r5
 800a3ec:	f7f5 feb6 	bl	800015c <__adddf3>
 800a3f0:	e9cd 0100 	strd	r0, r1, [sp]
 800a3f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3f8:	4622      	mov	r2, r4
 800a3fa:	462b      	mov	r3, r5
 800a3fc:	f7f5 feac 	bl	8000158 <__aeabi_dsub>
 800a400:	e008      	b.n	800a414 <rint+0xe4>
 800a402:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800a406:	dd08      	ble.n	800a41a <rint+0xea>
 800a408:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800a40c:	d1c9      	bne.n	800a3a2 <rint+0x72>
 800a40e:	4602      	mov	r2, r0
 800a410:	f7f5 fea4 	bl	800015c <__adddf3>
 800a414:	4604      	mov	r4, r0
 800a416:	460d      	mov	r5, r1
 800a418:	e7c3      	b.n	800a3a2 <rint+0x72>
 800a41a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800a41e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a422:	40ca      	lsrs	r2, r1
 800a424:	4210      	tst	r0, r2
 800a426:	d0bc      	beq.n	800a3a2 <rint+0x72>
 800a428:	0852      	lsrs	r2, r2, #1
 800a42a:	4210      	tst	r0, r2
 800a42c:	bf1f      	itttt	ne
 800a42e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800a432:	ea20 0202 	bicne.w	r2, r0, r2
 800a436:	410e      	asrne	r6, r1
 800a438:	4316      	orrne	r6, r2
 800a43a:	e7cf      	b.n	800a3dc <rint+0xac>
 800a43c:	0800a930 	.word	0x0800a930
 800a440:	000fffff 	.word	0x000fffff
 800a444:	00000000 	.word	0x00000000

0800a448 <scalbn>:
 800a448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44a:	4616      	mov	r6, r2
 800a44c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a450:	4604      	mov	r4, r0
 800a452:	460d      	mov	r5, r1
 800a454:	460b      	mov	r3, r1
 800a456:	b982      	cbnz	r2, 800a47a <scalbn+0x32>
 800a458:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a45c:	4303      	orrs	r3, r0
 800a45e:	d034      	beq.n	800a4ca <scalbn+0x82>
 800a460:	4b2d      	ldr	r3, [pc, #180]	; (800a518 <scalbn+0xd0>)
 800a462:	2200      	movs	r2, #0
 800a464:	f7f6 f830 	bl	80004c8 <__aeabi_dmul>
 800a468:	4b2c      	ldr	r3, [pc, #176]	; (800a51c <scalbn+0xd4>)
 800a46a:	4604      	mov	r4, r0
 800a46c:	429e      	cmp	r6, r3
 800a46e:	460d      	mov	r5, r1
 800a470:	da0d      	bge.n	800a48e <scalbn+0x46>
 800a472:	a325      	add	r3, pc, #148	; (adr r3, 800a508 <scalbn+0xc0>)
 800a474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a478:	e01c      	b.n	800a4b4 <scalbn+0x6c>
 800a47a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800a47e:	42ba      	cmp	r2, r7
 800a480:	d109      	bne.n	800a496 <scalbn+0x4e>
 800a482:	4602      	mov	r2, r0
 800a484:	f7f5 fe6a 	bl	800015c <__adddf3>
 800a488:	4604      	mov	r4, r0
 800a48a:	460d      	mov	r5, r1
 800a48c:	e01d      	b.n	800a4ca <scalbn+0x82>
 800a48e:	460b      	mov	r3, r1
 800a490:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a494:	3a36      	subs	r2, #54	; 0x36
 800a496:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a49a:	4432      	add	r2, r6
 800a49c:	428a      	cmp	r2, r1
 800a49e:	dd0c      	ble.n	800a4ba <scalbn+0x72>
 800a4a0:	4622      	mov	r2, r4
 800a4a2:	462b      	mov	r3, r5
 800a4a4:	a11a      	add	r1, pc, #104	; (adr r1, 800a510 <scalbn+0xc8>)
 800a4a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4aa:	f000 f83b 	bl	800a524 <copysign>
 800a4ae:	a318      	add	r3, pc, #96	; (adr r3, 800a510 <scalbn+0xc8>)
 800a4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b4:	f7f6 f808 	bl	80004c8 <__aeabi_dmul>
 800a4b8:	e7e6      	b.n	800a488 <scalbn+0x40>
 800a4ba:	2a00      	cmp	r2, #0
 800a4bc:	dd08      	ble.n	800a4d0 <scalbn+0x88>
 800a4be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a4c2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a4c6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	4629      	mov	r1, r5
 800a4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4d0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a4d4:	da0b      	bge.n	800a4ee <scalbn+0xa6>
 800a4d6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a4da:	429e      	cmp	r6, r3
 800a4dc:	4622      	mov	r2, r4
 800a4de:	462b      	mov	r3, r5
 800a4e0:	dce0      	bgt.n	800a4a4 <scalbn+0x5c>
 800a4e2:	a109      	add	r1, pc, #36	; (adr r1, 800a508 <scalbn+0xc0>)
 800a4e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4e8:	f000 f81c 	bl	800a524 <copysign>
 800a4ec:	e7c1      	b.n	800a472 <scalbn+0x2a>
 800a4ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a4f2:	3236      	adds	r2, #54	; 0x36
 800a4f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a4f8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	4629      	mov	r1, r5
 800a500:	2200      	movs	r2, #0
 800a502:	4b07      	ldr	r3, [pc, #28]	; (800a520 <scalbn+0xd8>)
 800a504:	e7d6      	b.n	800a4b4 <scalbn+0x6c>
 800a506:	bf00      	nop
 800a508:	c2f8f359 	.word	0xc2f8f359
 800a50c:	01a56e1f 	.word	0x01a56e1f
 800a510:	8800759c 	.word	0x8800759c
 800a514:	7e37e43c 	.word	0x7e37e43c
 800a518:	43500000 	.word	0x43500000
 800a51c:	ffff3cb0 	.word	0xffff3cb0
 800a520:	3c900000 	.word	0x3c900000

0800a524 <copysign>:
 800a524:	b530      	push	{r4, r5, lr}
 800a526:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a52a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a52e:	ea42 0503 	orr.w	r5, r2, r3
 800a532:	4629      	mov	r1, r5
 800a534:	bd30      	pop	{r4, r5, pc}

0800a536 <abort>:
 800a536:	b508      	push	{r3, lr}
 800a538:	2006      	movs	r0, #6
 800a53a:	f000 f947 	bl	800a7cc <raise>
 800a53e:	2001      	movs	r0, #1
 800a540:	f7fa fe78 	bl	8005234 <_exit>

0800a544 <__errno>:
 800a544:	4b01      	ldr	r3, [pc, #4]	; (800a54c <__errno+0x8>)
 800a546:	6818      	ldr	r0, [r3, #0]
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	2000009c 	.word	0x2000009c

0800a550 <__libc_init_array>:
 800a550:	b570      	push	{r4, r5, r6, lr}
 800a552:	2500      	movs	r5, #0
 800a554:	4e0c      	ldr	r6, [pc, #48]	; (800a588 <__libc_init_array+0x38>)
 800a556:	4c0d      	ldr	r4, [pc, #52]	; (800a58c <__libc_init_array+0x3c>)
 800a558:	1ba4      	subs	r4, r4, r6
 800a55a:	10a4      	asrs	r4, r4, #2
 800a55c:	42a5      	cmp	r5, r4
 800a55e:	d109      	bne.n	800a574 <__libc_init_array+0x24>
 800a560:	f000 f952 	bl	800a808 <_init>
 800a564:	2500      	movs	r5, #0
 800a566:	4e0a      	ldr	r6, [pc, #40]	; (800a590 <__libc_init_array+0x40>)
 800a568:	4c0a      	ldr	r4, [pc, #40]	; (800a594 <__libc_init_array+0x44>)
 800a56a:	1ba4      	subs	r4, r4, r6
 800a56c:	10a4      	asrs	r4, r4, #2
 800a56e:	42a5      	cmp	r5, r4
 800a570:	d105      	bne.n	800a57e <__libc_init_array+0x2e>
 800a572:	bd70      	pop	{r4, r5, r6, pc}
 800a574:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a578:	4798      	blx	r3
 800a57a:	3501      	adds	r5, #1
 800a57c:	e7ee      	b.n	800a55c <__libc_init_array+0xc>
 800a57e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a582:	4798      	blx	r3
 800a584:	3501      	adds	r5, #1
 800a586:	e7f2      	b.n	800a56e <__libc_init_array+0x1e>
 800a588:	0800a948 	.word	0x0800a948
 800a58c:	0800a948 	.word	0x0800a948
 800a590:	0800a948 	.word	0x0800a948
 800a594:	0800a95c 	.word	0x0800a95c

0800a598 <malloc>:
 800a598:	4b02      	ldr	r3, [pc, #8]	; (800a5a4 <malloc+0xc>)
 800a59a:	4601      	mov	r1, r0
 800a59c:	6818      	ldr	r0, [r3, #0]
 800a59e:	f000 b883 	b.w	800a6a8 <_malloc_r>
 800a5a2:	bf00      	nop
 800a5a4:	2000009c 	.word	0x2000009c

0800a5a8 <free>:
 800a5a8:	4b02      	ldr	r3, [pc, #8]	; (800a5b4 <free+0xc>)
 800a5aa:	4601      	mov	r1, r0
 800a5ac:	6818      	ldr	r0, [r3, #0]
 800a5ae:	f000 b82f 	b.w	800a610 <_free_r>
 800a5b2:	bf00      	nop
 800a5b4:	2000009c 	.word	0x2000009c

0800a5b8 <memcpy>:
 800a5b8:	b510      	push	{r4, lr}
 800a5ba:	1e43      	subs	r3, r0, #1
 800a5bc:	440a      	add	r2, r1
 800a5be:	4291      	cmp	r1, r2
 800a5c0:	d100      	bne.n	800a5c4 <memcpy+0xc>
 800a5c2:	bd10      	pop	{r4, pc}
 800a5c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5cc:	e7f7      	b.n	800a5be <memcpy+0x6>

0800a5ce <memmove>:
 800a5ce:	4288      	cmp	r0, r1
 800a5d0:	b510      	push	{r4, lr}
 800a5d2:	eb01 0302 	add.w	r3, r1, r2
 800a5d6:	d807      	bhi.n	800a5e8 <memmove+0x1a>
 800a5d8:	1e42      	subs	r2, r0, #1
 800a5da:	4299      	cmp	r1, r3
 800a5dc:	d00a      	beq.n	800a5f4 <memmove+0x26>
 800a5de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5e2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a5e6:	e7f8      	b.n	800a5da <memmove+0xc>
 800a5e8:	4283      	cmp	r3, r0
 800a5ea:	d9f5      	bls.n	800a5d8 <memmove+0xa>
 800a5ec:	1881      	adds	r1, r0, r2
 800a5ee:	1ad2      	subs	r2, r2, r3
 800a5f0:	42d3      	cmn	r3, r2
 800a5f2:	d100      	bne.n	800a5f6 <memmove+0x28>
 800a5f4:	bd10      	pop	{r4, pc}
 800a5f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5fa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a5fe:	e7f7      	b.n	800a5f0 <memmove+0x22>

0800a600 <memset>:
 800a600:	4603      	mov	r3, r0
 800a602:	4402      	add	r2, r0
 800a604:	4293      	cmp	r3, r2
 800a606:	d100      	bne.n	800a60a <memset+0xa>
 800a608:	4770      	bx	lr
 800a60a:	f803 1b01 	strb.w	r1, [r3], #1
 800a60e:	e7f9      	b.n	800a604 <memset+0x4>

0800a610 <_free_r>:
 800a610:	b538      	push	{r3, r4, r5, lr}
 800a612:	4605      	mov	r5, r0
 800a614:	2900      	cmp	r1, #0
 800a616:	d043      	beq.n	800a6a0 <_free_r+0x90>
 800a618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a61c:	1f0c      	subs	r4, r1, #4
 800a61e:	2b00      	cmp	r3, #0
 800a620:	bfb8      	it	lt
 800a622:	18e4      	addlt	r4, r4, r3
 800a624:	f000 f8ee 	bl	800a804 <__malloc_lock>
 800a628:	4a1e      	ldr	r2, [pc, #120]	; (800a6a4 <_free_r+0x94>)
 800a62a:	6813      	ldr	r3, [r2, #0]
 800a62c:	4610      	mov	r0, r2
 800a62e:	b933      	cbnz	r3, 800a63e <_free_r+0x2e>
 800a630:	6063      	str	r3, [r4, #4]
 800a632:	6014      	str	r4, [r2, #0]
 800a634:	4628      	mov	r0, r5
 800a636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a63a:	f000 b8e4 	b.w	800a806 <__malloc_unlock>
 800a63e:	42a3      	cmp	r3, r4
 800a640:	d90b      	bls.n	800a65a <_free_r+0x4a>
 800a642:	6821      	ldr	r1, [r4, #0]
 800a644:	1862      	adds	r2, r4, r1
 800a646:	4293      	cmp	r3, r2
 800a648:	bf01      	itttt	eq
 800a64a:	681a      	ldreq	r2, [r3, #0]
 800a64c:	685b      	ldreq	r3, [r3, #4]
 800a64e:	1852      	addeq	r2, r2, r1
 800a650:	6022      	streq	r2, [r4, #0]
 800a652:	6063      	str	r3, [r4, #4]
 800a654:	6004      	str	r4, [r0, #0]
 800a656:	e7ed      	b.n	800a634 <_free_r+0x24>
 800a658:	4613      	mov	r3, r2
 800a65a:	685a      	ldr	r2, [r3, #4]
 800a65c:	b10a      	cbz	r2, 800a662 <_free_r+0x52>
 800a65e:	42a2      	cmp	r2, r4
 800a660:	d9fa      	bls.n	800a658 <_free_r+0x48>
 800a662:	6819      	ldr	r1, [r3, #0]
 800a664:	1858      	adds	r0, r3, r1
 800a666:	42a0      	cmp	r0, r4
 800a668:	d10b      	bne.n	800a682 <_free_r+0x72>
 800a66a:	6820      	ldr	r0, [r4, #0]
 800a66c:	4401      	add	r1, r0
 800a66e:	1858      	adds	r0, r3, r1
 800a670:	4282      	cmp	r2, r0
 800a672:	6019      	str	r1, [r3, #0]
 800a674:	d1de      	bne.n	800a634 <_free_r+0x24>
 800a676:	6810      	ldr	r0, [r2, #0]
 800a678:	6852      	ldr	r2, [r2, #4]
 800a67a:	4401      	add	r1, r0
 800a67c:	6019      	str	r1, [r3, #0]
 800a67e:	605a      	str	r2, [r3, #4]
 800a680:	e7d8      	b.n	800a634 <_free_r+0x24>
 800a682:	d902      	bls.n	800a68a <_free_r+0x7a>
 800a684:	230c      	movs	r3, #12
 800a686:	602b      	str	r3, [r5, #0]
 800a688:	e7d4      	b.n	800a634 <_free_r+0x24>
 800a68a:	6820      	ldr	r0, [r4, #0]
 800a68c:	1821      	adds	r1, r4, r0
 800a68e:	428a      	cmp	r2, r1
 800a690:	bf01      	itttt	eq
 800a692:	6811      	ldreq	r1, [r2, #0]
 800a694:	6852      	ldreq	r2, [r2, #4]
 800a696:	1809      	addeq	r1, r1, r0
 800a698:	6021      	streq	r1, [r4, #0]
 800a69a:	6062      	str	r2, [r4, #4]
 800a69c:	605c      	str	r4, [r3, #4]
 800a69e:	e7c9      	b.n	800a634 <_free_r+0x24>
 800a6a0:	bd38      	pop	{r3, r4, r5, pc}
 800a6a2:	bf00      	nop
 800a6a4:	20003cfc 	.word	0x20003cfc

0800a6a8 <_malloc_r>:
 800a6a8:	b570      	push	{r4, r5, r6, lr}
 800a6aa:	1ccd      	adds	r5, r1, #3
 800a6ac:	f025 0503 	bic.w	r5, r5, #3
 800a6b0:	3508      	adds	r5, #8
 800a6b2:	2d0c      	cmp	r5, #12
 800a6b4:	bf38      	it	cc
 800a6b6:	250c      	movcc	r5, #12
 800a6b8:	2d00      	cmp	r5, #0
 800a6ba:	4606      	mov	r6, r0
 800a6bc:	db01      	blt.n	800a6c2 <_malloc_r+0x1a>
 800a6be:	42a9      	cmp	r1, r5
 800a6c0:	d903      	bls.n	800a6ca <_malloc_r+0x22>
 800a6c2:	230c      	movs	r3, #12
 800a6c4:	6033      	str	r3, [r6, #0]
 800a6c6:	2000      	movs	r0, #0
 800a6c8:	bd70      	pop	{r4, r5, r6, pc}
 800a6ca:	f000 f89b 	bl	800a804 <__malloc_lock>
 800a6ce:	4a21      	ldr	r2, [pc, #132]	; (800a754 <_malloc_r+0xac>)
 800a6d0:	6814      	ldr	r4, [r2, #0]
 800a6d2:	4621      	mov	r1, r4
 800a6d4:	b991      	cbnz	r1, 800a6fc <_malloc_r+0x54>
 800a6d6:	4c20      	ldr	r4, [pc, #128]	; (800a758 <_malloc_r+0xb0>)
 800a6d8:	6823      	ldr	r3, [r4, #0]
 800a6da:	b91b      	cbnz	r3, 800a6e4 <_malloc_r+0x3c>
 800a6dc:	4630      	mov	r0, r6
 800a6de:	f000 f83d 	bl	800a75c <_sbrk_r>
 800a6e2:	6020      	str	r0, [r4, #0]
 800a6e4:	4629      	mov	r1, r5
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	f000 f838 	bl	800a75c <_sbrk_r>
 800a6ec:	1c43      	adds	r3, r0, #1
 800a6ee:	d124      	bne.n	800a73a <_malloc_r+0x92>
 800a6f0:	230c      	movs	r3, #12
 800a6f2:	4630      	mov	r0, r6
 800a6f4:	6033      	str	r3, [r6, #0]
 800a6f6:	f000 f886 	bl	800a806 <__malloc_unlock>
 800a6fa:	e7e4      	b.n	800a6c6 <_malloc_r+0x1e>
 800a6fc:	680b      	ldr	r3, [r1, #0]
 800a6fe:	1b5b      	subs	r3, r3, r5
 800a700:	d418      	bmi.n	800a734 <_malloc_r+0x8c>
 800a702:	2b0b      	cmp	r3, #11
 800a704:	d90f      	bls.n	800a726 <_malloc_r+0x7e>
 800a706:	600b      	str	r3, [r1, #0]
 800a708:	18cc      	adds	r4, r1, r3
 800a70a:	50cd      	str	r5, [r1, r3]
 800a70c:	4630      	mov	r0, r6
 800a70e:	f000 f87a 	bl	800a806 <__malloc_unlock>
 800a712:	f104 000b 	add.w	r0, r4, #11
 800a716:	1d23      	adds	r3, r4, #4
 800a718:	f020 0007 	bic.w	r0, r0, #7
 800a71c:	1ac3      	subs	r3, r0, r3
 800a71e:	d0d3      	beq.n	800a6c8 <_malloc_r+0x20>
 800a720:	425a      	negs	r2, r3
 800a722:	50e2      	str	r2, [r4, r3]
 800a724:	e7d0      	b.n	800a6c8 <_malloc_r+0x20>
 800a726:	684b      	ldr	r3, [r1, #4]
 800a728:	428c      	cmp	r4, r1
 800a72a:	bf16      	itet	ne
 800a72c:	6063      	strne	r3, [r4, #4]
 800a72e:	6013      	streq	r3, [r2, #0]
 800a730:	460c      	movne	r4, r1
 800a732:	e7eb      	b.n	800a70c <_malloc_r+0x64>
 800a734:	460c      	mov	r4, r1
 800a736:	6849      	ldr	r1, [r1, #4]
 800a738:	e7cc      	b.n	800a6d4 <_malloc_r+0x2c>
 800a73a:	1cc4      	adds	r4, r0, #3
 800a73c:	f024 0403 	bic.w	r4, r4, #3
 800a740:	42a0      	cmp	r0, r4
 800a742:	d005      	beq.n	800a750 <_malloc_r+0xa8>
 800a744:	1a21      	subs	r1, r4, r0
 800a746:	4630      	mov	r0, r6
 800a748:	f000 f808 	bl	800a75c <_sbrk_r>
 800a74c:	3001      	adds	r0, #1
 800a74e:	d0cf      	beq.n	800a6f0 <_malloc_r+0x48>
 800a750:	6025      	str	r5, [r4, #0]
 800a752:	e7db      	b.n	800a70c <_malloc_r+0x64>
 800a754:	20003cfc 	.word	0x20003cfc
 800a758:	20003d00 	.word	0x20003d00

0800a75c <_sbrk_r>:
 800a75c:	b538      	push	{r3, r4, r5, lr}
 800a75e:	2300      	movs	r3, #0
 800a760:	4c05      	ldr	r4, [pc, #20]	; (800a778 <_sbrk_r+0x1c>)
 800a762:	4605      	mov	r5, r0
 800a764:	4608      	mov	r0, r1
 800a766:	6023      	str	r3, [r4, #0]
 800a768:	f7fa fd6a 	bl	8005240 <_sbrk>
 800a76c:	1c43      	adds	r3, r0, #1
 800a76e:	d102      	bne.n	800a776 <_sbrk_r+0x1a>
 800a770:	6823      	ldr	r3, [r4, #0]
 800a772:	b103      	cbz	r3, 800a776 <_sbrk_r+0x1a>
 800a774:	602b      	str	r3, [r5, #0]
 800a776:	bd38      	pop	{r3, r4, r5, pc}
 800a778:	20003f00 	.word	0x20003f00

0800a77c <_raise_r>:
 800a77c:	291f      	cmp	r1, #31
 800a77e:	b538      	push	{r3, r4, r5, lr}
 800a780:	4604      	mov	r4, r0
 800a782:	460d      	mov	r5, r1
 800a784:	d904      	bls.n	800a790 <_raise_r+0x14>
 800a786:	2316      	movs	r3, #22
 800a788:	6003      	str	r3, [r0, #0]
 800a78a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a78e:	bd38      	pop	{r3, r4, r5, pc}
 800a790:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a792:	b112      	cbz	r2, 800a79a <_raise_r+0x1e>
 800a794:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a798:	b94b      	cbnz	r3, 800a7ae <_raise_r+0x32>
 800a79a:	4620      	mov	r0, r4
 800a79c:	f000 f830 	bl	800a800 <_getpid_r>
 800a7a0:	462a      	mov	r2, r5
 800a7a2:	4601      	mov	r1, r0
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7aa:	f000 b817 	b.w	800a7dc <_kill_r>
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d00a      	beq.n	800a7c8 <_raise_r+0x4c>
 800a7b2:	1c59      	adds	r1, r3, #1
 800a7b4:	d103      	bne.n	800a7be <_raise_r+0x42>
 800a7b6:	2316      	movs	r3, #22
 800a7b8:	6003      	str	r3, [r0, #0]
 800a7ba:	2001      	movs	r0, #1
 800a7bc:	e7e7      	b.n	800a78e <_raise_r+0x12>
 800a7be:	2400      	movs	r4, #0
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a7c6:	4798      	blx	r3
 800a7c8:	2000      	movs	r0, #0
 800a7ca:	e7e0      	b.n	800a78e <_raise_r+0x12>

0800a7cc <raise>:
 800a7cc:	4b02      	ldr	r3, [pc, #8]	; (800a7d8 <raise+0xc>)
 800a7ce:	4601      	mov	r1, r0
 800a7d0:	6818      	ldr	r0, [r3, #0]
 800a7d2:	f7ff bfd3 	b.w	800a77c <_raise_r>
 800a7d6:	bf00      	nop
 800a7d8:	2000009c 	.word	0x2000009c

0800a7dc <_kill_r>:
 800a7dc:	b538      	push	{r3, r4, r5, lr}
 800a7de:	2300      	movs	r3, #0
 800a7e0:	4c06      	ldr	r4, [pc, #24]	; (800a7fc <_kill_r+0x20>)
 800a7e2:	4605      	mov	r5, r0
 800a7e4:	4608      	mov	r0, r1
 800a7e6:	4611      	mov	r1, r2
 800a7e8:	6023      	str	r3, [r4, #0]
 800a7ea:	f7fa fd1b 	bl	8005224 <_kill>
 800a7ee:	1c43      	adds	r3, r0, #1
 800a7f0:	d102      	bne.n	800a7f8 <_kill_r+0x1c>
 800a7f2:	6823      	ldr	r3, [r4, #0]
 800a7f4:	b103      	cbz	r3, 800a7f8 <_kill_r+0x1c>
 800a7f6:	602b      	str	r3, [r5, #0]
 800a7f8:	bd38      	pop	{r3, r4, r5, pc}
 800a7fa:	bf00      	nop
 800a7fc:	20003f00 	.word	0x20003f00

0800a800 <_getpid_r>:
 800a800:	f7fa bd0e 	b.w	8005220 <_getpid>

0800a804 <__malloc_lock>:
 800a804:	4770      	bx	lr

0800a806 <__malloc_unlock>:
 800a806:	4770      	bx	lr

0800a808 <_init>:
 800a808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a80a:	bf00      	nop
 800a80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a80e:	bc08      	pop	{r3}
 800a810:	469e      	mov	lr, r3
 800a812:	4770      	bx	lr

0800a814 <_fini>:
 800a814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a816:	bf00      	nop
 800a818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a81a:	bc08      	pop	{r3}
 800a81c:	469e      	mov	lr, r3
 800a81e:	4770      	bx	lr
