
stm32f103-sensors-device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd80  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800be90  0800be90  0001be90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfb8  0800bfb8  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  0800bfb8  0800bfb8  0001bfb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bfc0  0800bfc0  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800bfc0  0800bfc0  0001bfc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800bfd0  0800bfd0  0001bfd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800bfd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d44  20000100  0800c0d8  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20003e44  0800c0d8  00023e44  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   000546f2  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007b8e  00000000  00000000  0007481b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0003736d  00000000  00000000  0007c3a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001b48  00000000  00000000  000b3718  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00006d30  00000000  00000000  000b5260  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000092c6  00000000  00000000  000bbf90  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001eabf  00000000  00000000  000c5256  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000a6ead  00000000  00000000  000e3d15  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0018abc2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006dc4  00000000  00000000  0018ac40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000100 	.word	0x20000100
 800012c:	00000000 	.word	0x00000000
 8000130:	0800be78 	.word	0x0800be78

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000104 	.word	0x20000104
 800014c:	0800be78 	.word	0x0800be78

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_ldivmod>:
 8000b08:	b97b      	cbnz	r3, 8000b2a <__aeabi_ldivmod+0x22>
 8000b0a:	b972      	cbnz	r2, 8000b2a <__aeabi_ldivmod+0x22>
 8000b0c:	2900      	cmp	r1, #0
 8000b0e:	bfbe      	ittt	lt
 8000b10:	2000      	movlt	r0, #0
 8000b12:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b16:	e006      	blt.n	8000b26 <__aeabi_ldivmod+0x1e>
 8000b18:	bf08      	it	eq
 8000b1a:	2800      	cmpeq	r0, #0
 8000b1c:	bf1c      	itt	ne
 8000b1e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b22:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b26:	f000 b9bf 	b.w	8000ea8 <__aeabi_idiv0>
 8000b2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b32:	2900      	cmp	r1, #0
 8000b34:	db09      	blt.n	8000b4a <__aeabi_ldivmod+0x42>
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	db1a      	blt.n	8000b70 <__aeabi_ldivmod+0x68>
 8000b3a:	f000 f84d 	bl	8000bd8 <__udivmoddi4>
 8000b3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b46:	b004      	add	sp, #16
 8000b48:	4770      	bx	lr
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	db1b      	blt.n	8000b8c <__aeabi_ldivmod+0x84>
 8000b54:	f000 f840 	bl	8000bd8 <__udivmoddi4>
 8000b58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b60:	b004      	add	sp, #16
 8000b62:	4240      	negs	r0, r0
 8000b64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b68:	4252      	negs	r2, r2
 8000b6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b6e:	4770      	bx	lr
 8000b70:	4252      	negs	r2, r2
 8000b72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b76:	f000 f82f 	bl	8000bd8 <__udivmoddi4>
 8000b7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b82:	b004      	add	sp, #16
 8000b84:	4240      	negs	r0, r0
 8000b86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8a:	4770      	bx	lr
 8000b8c:	4252      	negs	r2, r2
 8000b8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b92:	f000 f821 	bl	8000bd8 <__udivmoddi4>
 8000b96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b9e:	b004      	add	sp, #16
 8000ba0:	4252      	negs	r2, r2
 8000ba2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	468c      	mov	ip, r1
 8000bde:	4604      	mov	r4, r0
 8000be0:	9e08      	ldr	r6, [sp, #32]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0c03 	orr.w	ip, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	fbbc f7fe 	udiv	r7, ip, lr
 8000c0e:	fa1f f885 	uxth.w	r8, r5
 8000c12:	fb0e c317 	mls	r3, lr, r7, ip
 8000c16:	fb07 f908 	mul.w	r9, r7, r8
 8000c1a:	0c21      	lsrs	r1, r4, #16
 8000c1c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c20:	4599      	cmp	r9, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000c2a:	f080 811c 	bcs.w	8000e66 <__udivmoddi4+0x28e>
 8000c2e:	4599      	cmp	r9, r3
 8000c30:	f240 8119 	bls.w	8000e66 <__udivmoddi4+0x28e>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	eba3 0309 	sub.w	r3, r3, r9
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	fb00 f108 	mul.w	r1, r0, r8
 8000c48:	b2a4      	uxth	r4, r4
 8000c4a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4e:	42a1      	cmp	r1, r4
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	192c      	adds	r4, r5, r4
 8000c54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c58:	f080 8107 	bcs.w	8000e6a <__udivmoddi4+0x292>
 8000c5c:	42a1      	cmp	r1, r4
 8000c5e:	f240 8104 	bls.w	8000e6a <__udivmoddi4+0x292>
 8000c62:	3802      	subs	r0, #2
 8000c64:	442c      	add	r4, r5
 8000c66:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c6a:	2700      	movs	r7, #0
 8000c6c:	1a64      	subs	r4, r4, r1
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	2300      	movs	r3, #0
 8000c72:	40d4      	lsrs	r4, r2
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ec 	beq.w	8000e60 <__udivmoddi4+0x288>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d148      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fb 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	469c      	mov	ip, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4c00 	strd	r4, ip, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	2701      	movs	r7, #1
 8000ccc:	1b49      	subs	r1, r1, r5
 8000cce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000cd2:	fa1f f985 	uxth.w	r9, r5
 8000cd6:	fbb1 fef8 	udiv	lr, r1, r8
 8000cda:	fb08 111e 	mls	r1, r8, lr, r1
 8000cde:	fb09 f00e 	mul.w	r0, r9, lr
 8000ce2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000ce6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000cea:	4298      	cmp	r0, r3
 8000cec:	d907      	bls.n	8000cfe <__udivmoddi4+0x126>
 8000cee:	18eb      	adds	r3, r5, r3
 8000cf0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000cf4:	d202      	bcs.n	8000cfc <__udivmoddi4+0x124>
 8000cf6:	4298      	cmp	r0, r3
 8000cf8:	f200 80cd 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000cfc:	468e      	mov	lr, r1
 8000cfe:	1a1b      	subs	r3, r3, r0
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	fb09 f900 	mul.w	r9, r9, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d12:	45a1      	cmp	r9, r4
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d16:	192c      	adds	r4, r5, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a1      	cmp	r9, r4
 8000d20:	f200 80b6 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000d24:	4618      	mov	r0, r3
 8000d26:	eba4 0409 	sub.w	r4, r4, r9
 8000d2a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000d2e:	e79e      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d30:	f1c7 0520 	rsb	r5, r7, #32
 8000d34:	40bb      	lsls	r3, r7
 8000d36:	fa22 fc05 	lsr.w	ip, r2, r5
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa21 f405 	lsr.w	r4, r1, r5
 8000d42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d46:	fbb4 f9fe 	udiv	r9, r4, lr
 8000d4a:	fa1f f88c 	uxth.w	r8, ip
 8000d4e:	fb0e 4419 	mls	r4, lr, r9, r4
 8000d52:	fa20 f305 	lsr.w	r3, r0, r5
 8000d56:	40b9      	lsls	r1, r7
 8000d58:	fb09 fa08 	mul.w	sl, r9, r8
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	0c0b      	lsrs	r3, r1, #16
 8000d60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d64:	45a2      	cmp	sl, r4
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f307 	lsl.w	r3, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	45a2      	cmp	sl, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	eba4 040a 	sub.w	r4, r4, sl
 8000d8c:	fbb4 f0fe 	udiv	r0, r4, lr
 8000d90:	fb0e 4410 	mls	r4, lr, r0, r4
 8000d94:	fb00 fa08 	mul.w	sl, r0, r8
 8000d98:	b289      	uxth	r1, r1
 8000d9a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000d9e:	45a2      	cmp	sl, r4
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x1dc>
 8000da2:	eb1c 0404 	adds.w	r4, ip, r4
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000daa:	d26b      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d969      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000db0:	3802      	subs	r0, #2
 8000db2:	4464      	add	r4, ip
 8000db4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db8:	fba0 8902 	umull	r8, r9, r0, r2
 8000dbc:	eba4 040a 	sub.w	r4, r4, sl
 8000dc0:	454c      	cmp	r4, r9
 8000dc2:	4641      	mov	r1, r8
 8000dc4:	46ce      	mov	lr, r9
 8000dc6:	d354      	bcc.n	8000e72 <__udivmoddi4+0x29a>
 8000dc8:	d051      	beq.n	8000e6e <__udivmoddi4+0x296>
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	d069      	beq.n	8000ea2 <__udivmoddi4+0x2ca>
 8000dce:	1a5a      	subs	r2, r3, r1
 8000dd0:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd4:	fa04 f505 	lsl.w	r5, r4, r5
 8000dd8:	fa22 f307 	lsr.w	r3, r2, r7
 8000ddc:	40fc      	lsrs	r4, r7
 8000dde:	431d      	orrs	r5, r3
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	4095      	lsls	r5, r2
 8000dea:	f1c2 0320 	rsb	r3, r2, #32
 8000dee:	fa21 f003 	lsr.w	r0, r1, r3
 8000df2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000df6:	fbb0 f7f8 	udiv	r7, r0, r8
 8000dfa:	fa1f f985 	uxth.w	r9, r5
 8000dfe:	fb08 0017 	mls	r0, r8, r7, r0
 8000e02:	fa24 f303 	lsr.w	r3, r4, r3
 8000e06:	4091      	lsls	r1, r2
 8000e08:	fb07 fc09 	mul.w	ip, r7, r9
 8000e0c:	430b      	orrs	r3, r1
 8000e0e:	0c19      	lsrs	r1, r3, #16
 8000e10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e14:	458c      	cmp	ip, r1
 8000e16:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x254>
 8000e1c:	1869      	adds	r1, r5, r1
 8000e1e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000e22:	d231      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e24:	458c      	cmp	ip, r1
 8000e26:	d92f      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	3f02      	subs	r7, #2
 8000e2a:	4429      	add	r1, r5
 8000e2c:	eba1 010c 	sub.w	r1, r1, ip
 8000e30:	fbb1 f0f8 	udiv	r0, r1, r8
 8000e34:	fb08 1c10 	mls	ip, r8, r0, r1
 8000e38:	fb00 fe09 	mul.w	lr, r0, r9
 8000e3c:	b299      	uxth	r1, r3
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	458e      	cmp	lr, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e4c:	d218      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e4e:	458e      	cmp	lr, r1
 8000e50:	d916      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	eba1 010e 	sub.w	r1, r1, lr
 8000e5a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5e:	e73a      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e60:	4637      	mov	r7, r6
 8000e62:	4630      	mov	r0, r6
 8000e64:	e708      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e66:	460f      	mov	r7, r1
 8000e68:	e6e6      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	e6fb      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e6e:	4543      	cmp	r3, r8
 8000e70:	d2ab      	bcs.n	8000dca <__udivmoddi4+0x1f2>
 8000e72:	ebb8 0102 	subs.w	r1, r8, r2
 8000e76:	eb69 020c 	sbc.w	r2, r9, ip
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	4696      	mov	lr, r2
 8000e7e:	e7a4      	b.n	8000dca <__udivmoddi4+0x1f2>
 8000e80:	4618      	mov	r0, r3
 8000e82:	e7e8      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e795      	b.n	8000db4 <__udivmoddi4+0x1dc>
 8000e88:	4607      	mov	r7, r0
 8000e8a:	e7cf      	b.n	8000e2c <__udivmoddi4+0x254>
 8000e8c:	4681      	mov	r9, r0
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3802      	subs	r0, #2
 8000e92:	442c      	add	r4, r5
 8000e94:	e747      	b.n	8000d26 <__udivmoddi4+0x14e>
 8000e96:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9a:	442b      	add	r3, r5
 8000e9c:	e72f      	b.n	8000cfe <__udivmoddi4+0x126>
 8000e9e:	4638      	mov	r0, r7
 8000ea0:	e707      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea2:	4637      	mov	r7, r6
 8000ea4:	e6e8      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <_ZN8RegisterC1Ethh>:
    if (value > max_value)
        return max_value;
    return value;
}

Register::Register(uint16_t address, uint8_t bit_count, uint8_t bit_bias) {
 8000eac:	b430      	push	{r4, r5}
    if (value < min_value)
 8000eae:	b9fa      	cbnz	r2, 8000ef0 <_ZN8RegisterC1Ethh+0x44>
 8000eb0:	2b07      	cmp	r3, #7
 8000eb2:	bf28      	it	cs
 8000eb4:	2307      	movcs	r3, #7
    uint32_t mask = 0x00;
    for (uint8_t i = 0; i < bit_in_reg; ++i) {
        if (i < bit_count)
            mask = (mask << 1) + 1;
        else
            if (i < (bit_count + bit_bias))
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	bf14      	ite	ne
 8000eba:	2202      	movne	r2, #2
 8000ebc:	2201      	moveq	r2, #1
            mask = (mask << 1) + 1;
 8000ebe:	2501      	movs	r5, #1
            if (i < (bit_count + bit_bias))
 8000ec0:	18ec      	adds	r4, r5, r3
 8000ec2:	2c02      	cmp	r4, #2
 8000ec4:	dd00      	ble.n	8000ec8 <_ZN8RegisterC1Ethh+0x1c>
                mask <<= 1;
 8000ec6:	0052      	lsls	r2, r2, #1
            if (i < (bit_count + bit_bias))
 8000ec8:	2c03      	cmp	r4, #3
 8000eca:	dd00      	ble.n	8000ece <_ZN8RegisterC1Ethh+0x22>
                mask <<= 1;
 8000ecc:	0052      	lsls	r2, r2, #1
            if (i < (bit_count + bit_bias))
 8000ece:	2c04      	cmp	r4, #4
 8000ed0:	dd00      	ble.n	8000ed4 <_ZN8RegisterC1Ethh+0x28>
                mask <<= 1;
 8000ed2:	0052      	lsls	r2, r2, #1
            if (i < (bit_count + bit_bias))
 8000ed4:	2c05      	cmp	r4, #5
 8000ed6:	dd00      	ble.n	8000eda <_ZN8RegisterC1Ethh+0x2e>
                mask <<= 1;
 8000ed8:	0052      	lsls	r2, r2, #1
            if (i < (bit_count + bit_bias))
 8000eda:	2c06      	cmp	r4, #6
 8000edc:	dc25      	bgt.n	8000f2a <_ZN8RegisterC1Ethh+0x7e>
 8000ede:	2c07      	cmp	r4, #7
                mask <<= 1;
 8000ee0:	bfc8      	it	gt
 8000ee2:	0052      	lslgt	r2, r2, #1
    }
    _address = address;
    _bit_count = bit_count;
 8000ee4:	7085      	strb	r5, [r0, #2]
    _address = address;
 8000ee6:	8001      	strh	r1, [r0, #0]
    _bit_bias = bit_bias;
 8000ee8:	70c3      	strb	r3, [r0, #3]
    _mask = mask;
 8000eea:	6042      	str	r2, [r0, #4]
}
 8000eec:	bc30      	pop	{r4, r5}
 8000eee:	4770      	bx	lr
 8000ef0:	2a08      	cmp	r2, #8
 8000ef2:	4615      	mov	r5, r2
 8000ef4:	bf28      	it	cs
 8000ef6:	2508      	movcs	r5, #8
 8000ef8:	f1c5 0408 	rsb	r4, r5, #8
 8000efc:	b2e4      	uxtb	r4, r4
 8000efe:	42a3      	cmp	r3, r4
 8000f00:	bf28      	it	cs
 8000f02:	4623      	movcs	r3, r4
        if (i < bit_count)
 8000f04:	2a01      	cmp	r2, #1
 8000f06:	d0d6      	beq.n	8000eb6 <_ZN8RegisterC1Ethh+0xa>
 8000f08:	2a02      	cmp	r2, #2
 8000f0a:	d91c      	bls.n	8000f46 <_ZN8RegisterC1Ethh+0x9a>
 8000f0c:	2a03      	cmp	r2, #3
 8000f0e:	d917      	bls.n	8000f40 <_ZN8RegisterC1Ethh+0x94>
 8000f10:	2a04      	cmp	r2, #4
 8000f12:	d912      	bls.n	8000f3a <_ZN8RegisterC1Ethh+0x8e>
 8000f14:	2a05      	cmp	r2, #5
 8000f16:	d90d      	bls.n	8000f34 <_ZN8RegisterC1Ethh+0x88>
 8000f18:	2a06      	cmp	r2, #6
 8000f1a:	d908      	bls.n	8000f2e <_ZN8RegisterC1Ethh+0x82>
 8000f1c:	2a07      	cmp	r2, #7
            mask = (mask << 1) + 1;
 8000f1e:	bf88      	it	hi
 8000f20:	22ff      	movhi	r2, #255	; 0xff
        if (i < bit_count)
 8000f22:	d8df      	bhi.n	8000ee4 <_ZN8RegisterC1Ethh+0x38>
            mask = (mask << 1) + 1;
 8000f24:	227f      	movs	r2, #127	; 0x7f
 8000f26:	18ec      	adds	r4, r5, r3
 8000f28:	e7d9      	b.n	8000ede <_ZN8RegisterC1Ethh+0x32>
                mask <<= 1;
 8000f2a:	0052      	lsls	r2, r2, #1
 8000f2c:	e7d7      	b.n	8000ede <_ZN8RegisterC1Ethh+0x32>
            mask = (mask << 1) + 1;
 8000f2e:	223f      	movs	r2, #63	; 0x3f
 8000f30:	18ec      	adds	r4, r5, r3
 8000f32:	e7d2      	b.n	8000eda <_ZN8RegisterC1Ethh+0x2e>
 8000f34:	221f      	movs	r2, #31
 8000f36:	18ec      	adds	r4, r5, r3
 8000f38:	e7cc      	b.n	8000ed4 <_ZN8RegisterC1Ethh+0x28>
 8000f3a:	220f      	movs	r2, #15
 8000f3c:	18ec      	adds	r4, r5, r3
 8000f3e:	e7c6      	b.n	8000ece <_ZN8RegisterC1Ethh+0x22>
 8000f40:	2207      	movs	r2, #7
 8000f42:	18ec      	adds	r4, r5, r3
 8000f44:	e7c0      	b.n	8000ec8 <_ZN8RegisterC1Ethh+0x1c>
 8000f46:	2203      	movs	r2, #3
 8000f48:	e7ba      	b.n	8000ec0 <_ZN8RegisterC1Ethh+0x14>
 8000f4a:	bf00      	nop

08000f4c <_ZN8Register7addressEv>:

uint16_t Register::address() {
    return _address;
}
 8000f4c:	8800      	ldrh	r0, [r0, #0]
 8000f4e:	4770      	bx	lr

08000f50 <_ZN8Register4maskEv>:
uint8_t Register::bit_bias() {
    return _bit_bias;
}
uint32_t Register::mask() {
    return _mask;
}
 8000f50:	6840      	ldr	r0, [r0, #4]
 8000f52:	4770      	bx	lr

08000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>:
    return !(left == right);
}



Address_field::Address_field(Register *registers, uint8_t reg_count, bool reg_revers, char mode, uint32_t min_value,
 8000f54:	b4f0      	push	{r4, r5, r6, r7}
 8000f56:	f89d 7010 	ldrb.w	r7, [sp, #16]
 8000f5a:	e9dd 6505 	ldrd	r6, r5, [sp, #20]
    init_address_field(registers, reg_count, reg_revers, mode, min_value, max_value, reserved_value, reserv_count);
}

bool Address_field::init_address_field(Register *registers, uint8_t reg_count, bool reg_revers, char mode, uint32_t min_value,
                                       uint32_t max_value, uint32_t *reserved_value, uint32_t reserv_count) {
    if ((mode != 'r') && (mode != 'w') && (mode != 'c'))
 8000f5e:	f1a7 0463 	sub.w	r4, r7, #99	; 0x63
 8000f62:	fa5f fc84 	uxtb.w	ip, r4
 8000f66:	f1bc 0f14 	cmp.w	ip, #20
 8000f6a:	d831      	bhi.n	8000fd0 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm+0x7c>
 8000f6c:	4c1d      	ldr	r4, [pc, #116]	; (8000fe4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm+0x90>)
 8000f6e:	fa24 f40c 	lsr.w	r4, r4, ip
 8000f72:	43e4      	mvns	r4, r4
 8000f74:	f014 0401 	ands.w	r4, r4, #1
 8000f78:	d12a      	bne.n	8000fd0 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm+0x7c>
    uint8_t bit_count = 0;
    uint32_t value = 0;
    _mode = mode;
    _registers = registers;
    _reg_count = reg_count;
    _reg_revers = reg_revers;
 8000f7a:	7143      	strb	r3, [r0, #5]
    _reserved_value = reserved_value;
 8000f7c:	9b07      	ldr	r3, [sp, #28]
    _mode = mode;
 8000f7e:	7607      	strb	r7, [r0, #24]
    _reserved_value = reserved_value;
 8000f80:	6103      	str	r3, [r0, #16]
    _reserv_count = reserv_count;
 8000f82:	9b08      	ldr	r3, [sp, #32]
    _registers = registers;
 8000f84:	6001      	str	r1, [r0, #0]
    _reg_count = reg_count;
 8000f86:	7102      	strb	r2, [r0, #4]
    _reserv_count = reserv_count;
 8000f88:	6143      	str	r3, [r0, #20]
    _max_address = 0;
 8000f8a:	80c4      	strh	r4, [r0, #6]
    for (int i = 0; i < _reg_count; ++i) {
 8000f8c:	b33a      	cbz	r2, 8000fde <_ZN13Address_fieldC1EP8RegisterhbcmmPmm+0x8a>
    uint8_t bit_count = 0;
 8000f8e:	4623      	mov	r3, r4
 8000f90:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    return _address;
 8000f94:	880f      	ldrh	r7, [r1, #0]
        bit_count += _registers[i].bit_count();
 8000f96:	f891 c002 	ldrb.w	ip, [r1, #2]
        if (_max_address < _registers[i].address())
 8000f9a:	42a7      	cmp	r7, r4
 8000f9c:	f101 0108 	add.w	r1, r1, #8
        bit_count += _registers[i].bit_count();
 8000fa0:	4463      	add	r3, ip
            _max_address = _registers[i].address();
 8000fa2:	bf84      	itt	hi
 8000fa4:	463c      	movhi	r4, r7
 8000fa6:	80c7      	strhhi	r7, [r0, #6]
    for (int i = 0; i < _reg_count; ++i) {
 8000fa8:	4291      	cmp	r1, r2
        bit_count += _registers[i].bit_count();
 8000faa:	b2db      	uxtb	r3, r3
    for (int i = 0; i < _reg_count; ++i) {
 8000fac:	d1f2      	bne.n	8000f94 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm+0x40>
    }
    for (int i = 0; i < bit_count; ++i)
 8000fae:	b1b3      	cbz	r3, 8000fde <_ZN13Address_fieldC1EP8RegisterhbcmmPmm+0x8a>
    uint32_t value = 0;
 8000fb0:	2200      	movs	r2, #0
    for (int i = 0; i < bit_count; ++i)
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	3101      	adds	r1, #1
        value = (value << 1) + 1;
 8000fb6:	0052      	lsls	r2, r2, #1
    for (int i = 0; i < bit_count; ++i)
 8000fb8:	4299      	cmp	r1, r3
        value = (value << 1) + 1;
 8000fba:	f102 0201 	add.w	r2, r2, #1
    for (int i = 0; i < bit_count; ++i)
 8000fbe:	d1f9      	bne.n	8000fb4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm+0x60>
 8000fc0:	4296      	cmp	r6, r2
 8000fc2:	4633      	mov	r3, r6
 8000fc4:	bf28      	it	cs
 8000fc6:	4613      	movcs	r3, r2
    if (value < min_value)
 8000fc8:	42ae      	cmp	r6, r5
    _min_value = value_range(min_value, 0, value);
 8000fca:	6083      	str	r3, [r0, #8]
    if (value < min_value)
 8000fcc:	d902      	bls.n	8000fd4 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm+0x80>
    _max_value = value_range(max_value, min_value, value);
 8000fce:	60c6      	str	r6, [r0, #12]
}
 8000fd0:	bcf0      	pop	{r4, r5, r6, r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	4295      	cmp	r5, r2
 8000fd6:	bf28      	it	cs
 8000fd8:	4615      	movcs	r5, r2
 8000fda:	462e      	mov	r6, r5
 8000fdc:	e7f7      	b.n	8000fce <_ZN13Address_fieldC1EP8RegisterhbcmmPmm+0x7a>
    for (int i = 0; i < bit_count; ++i)
 8000fde:	2300      	movs	r3, #0
    uint32_t value = 0;
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	e7f1      	b.n	8000fc8 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm+0x74>
 8000fe4:	00108001 	.word	0x00108001

08000fe8 <_ZN13Address_field9get_valueEPhi>:
    return false;
}

uint32_t Address_field::get_value(uint8_t *register_value, int register_count) {
    if (register_count < (_max_address + 1))
 8000fe8:	88c3      	ldrh	r3, [r0, #6]
uint32_t Address_field::get_value(uint8_t *register_value, int register_count) {
 8000fea:	b4f0      	push	{r4, r5, r6, r7}
    if (register_count < (_max_address + 1))
 8000fec:	4293      	cmp	r3, r2
 8000fee:	da2f      	bge.n	8001050 <_ZN13Address_field9get_valueEPhi+0x68>
        return -1;
    uint32_t value = 0;
    if(_reg_revers) {
 8000ff0:	7945      	ldrb	r5, [r0, #5]
 8000ff2:	7903      	ldrb	r3, [r0, #4]
 8000ff4:	b1a5      	cbz	r5, 8001020 <_ZN13Address_field9get_valueEPhi+0x38>
        for (int i = 0; i < _reg_count; ++i) {
 8000ff6:	b383      	cbz	r3, 800105a <_ZN13Address_field9get_valueEPhi+0x72>
    uint32_t value = 0;
 8000ff8:	2500      	movs	r5, #0
 8000ffa:	6802      	ldr	r2, [r0, #0]
 8000ffc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
            value <<= _registers[i].bit_count();
            value |= (register_value[_registers[i].address()] & _registers[i].mask()) >> _registers[i].bit_bias();
 8001000:	8810      	ldrh	r0, [r2, #0]
 8001002:	6857      	ldr	r7, [r2, #4]
 8001004:	5c0c      	ldrb	r4, [r1, r0]
 8001006:	78d6      	ldrb	r6, [r2, #3]
            value <<= _registers[i].bit_count();
 8001008:	7890      	ldrb	r0, [r2, #2]
            value |= (register_value[_registers[i].address()] & _registers[i].mask()) >> _registers[i].bit_bias();
 800100a:	403c      	ands	r4, r7
 800100c:	3208      	adds	r2, #8
 800100e:	40f4      	lsrs	r4, r6
            value <<= _registers[i].bit_count();
 8001010:	4085      	lsls	r5, r0
        for (int i = 0; i < _reg_count; ++i) {
 8001012:	4293      	cmp	r3, r2
            value |= (register_value[_registers[i].address()] & _registers[i].mask()) >> _registers[i].bit_bias();
 8001014:	ea45 0504 	orr.w	r5, r5, r4
        for (int i = 0; i < _reg_count; ++i) {
 8001018:	d1f2      	bne.n	8001000 <_ZN13Address_field9get_valueEPhi+0x18>
            value <<= _registers[i].bit_count();
            value |= (register_value[_registers[i].address()] & _registers[i].mask()) >> _registers[i].bit_bias();
        }
    }
    return value;
}
 800101a:	4628      	mov	r0, r5
 800101c:	bcf0      	pop	{r4, r5, r6, r7}
 800101e:	4770      	bx	lr
        for (int i = (_reg_count - 1); i >= 0; --i) {
 8001020:	b1db      	cbz	r3, 800105a <_ZN13Address_field9get_valueEPhi+0x72>
            value <<= _registers[i].bit_count();
 8001022:	6807      	ldr	r7, [r0, #0]
 8001024:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
            value |= (register_value[_registers[i].address()] & _registers[i].mask()) >> _registers[i].bit_bias();
 8001028:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 800102c:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8001030:	5c8a      	ldrb	r2, [r1, r2]
 8001032:	f813 4c05 	ldrb.w	r4, [r3, #-5]
            value <<= _registers[i].bit_count();
 8001036:	f813 0c06 	ldrb.w	r0, [r3, #-6]
            value |= (register_value[_registers[i].address()] & _registers[i].mask()) >> _registers[i].bit_bias();
 800103a:	4032      	ands	r2, r6
 800103c:	3b08      	subs	r3, #8
 800103e:	40e2      	lsrs	r2, r4
            value <<= _registers[i].bit_count();
 8001040:	4085      	lsls	r5, r0
        for (int i = (_reg_count - 1); i >= 0; --i) {
 8001042:	429f      	cmp	r7, r3
            value |= (register_value[_registers[i].address()] & _registers[i].mask()) >> _registers[i].bit_bias();
 8001044:	ea45 0502 	orr.w	r5, r5, r2
        for (int i = (_reg_count - 1); i >= 0; --i) {
 8001048:	d1ee      	bne.n	8001028 <_ZN13Address_field9get_valueEPhi+0x40>
}
 800104a:	4628      	mov	r0, r5
 800104c:	bcf0      	pop	{r4, r5, r6, r7}
 800104e:	4770      	bx	lr
        return -1;
 8001050:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
 8001054:	4628      	mov	r0, r5
 8001056:	bcf0      	pop	{r4, r5, r6, r7}
 8001058:	4770      	bx	lr
    uint32_t value = 0;
 800105a:	461d      	mov	r5, r3
}
 800105c:	4628      	mov	r0, r5
 800105e:	bcf0      	pop	{r4, r5, r6, r7}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <_ZN13Address_field9set_valueEmPhi>:
bool Address_field::set_value(uint32_t value, uint8_t *register_value, int register_count) {
 8001064:	b4f0      	push	{r4, r5, r6, r7}
    if ((register_count < (_max_address + 1)) || (_mode == 'r') ||
 8001066:	88c4      	ldrh	r4, [r0, #6]
 8001068:	429c      	cmp	r4, r3
 800106a:	da3d      	bge.n	80010e8 <_ZN13Address_field9set_valueEmPhi+0x84>
 800106c:	7e03      	ldrb	r3, [r0, #24]
 800106e:	2b72      	cmp	r3, #114	; 0x72
 8001070:	d03a      	beq.n	80010e8 <_ZN13Address_field9set_valueEmPhi+0x84>
 8001072:	6883      	ldr	r3, [r0, #8]
 8001074:	428b      	cmp	r3, r1
 8001076:	d837      	bhi.n	80010e8 <_ZN13Address_field9set_valueEmPhi+0x84>
                (value < _min_value) || (value > _max_value))
 8001078:	68c3      	ldr	r3, [r0, #12]
 800107a:	428b      	cmp	r3, r1
 800107c:	d334      	bcc.n	80010e8 <_ZN13Address_field9set_valueEmPhi+0x84>
        return true;
    for (int i = 0; i < (int)_reserv_count; ++i)
 800107e:	6946      	ldr	r6, [r0, #20]
 8001080:	2e00      	cmp	r6, #0
 8001082:	dd0c      	ble.n	800109e <_ZN13Address_field9set_valueEmPhi+0x3a>
        if (value == _reserved_value[i])
 8001084:	6904      	ldr	r4, [r0, #16]
 8001086:	6823      	ldr	r3, [r4, #0]
 8001088:	4299      	cmp	r1, r3
 800108a:	d02d      	beq.n	80010e8 <_ZN13Address_field9set_valueEmPhi+0x84>
    for (int i = 0; i < (int)_reserv_count; ++i)
 800108c:	2300      	movs	r3, #0
 800108e:	e003      	b.n	8001098 <_ZN13Address_field9set_valueEmPhi+0x34>
        if (value == _reserved_value[i])
 8001090:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8001094:	428d      	cmp	r5, r1
 8001096:	d027      	beq.n	80010e8 <_ZN13Address_field9set_valueEmPhi+0x84>
    for (int i = 0; i < (int)_reserv_count; ++i)
 8001098:	3301      	adds	r3, #1
 800109a:	42b3      	cmp	r3, r6
 800109c:	d1f8      	bne.n	8001090 <_ZN13Address_field9set_valueEmPhi+0x2c>
            return true;
    if(_reg_revers) {
 800109e:	7944      	ldrb	r4, [r0, #5]
 80010a0:	7903      	ldrb	r3, [r0, #4]
 80010a2:	b324      	cbz	r4, 80010ee <_ZN13Address_field9set_valueEmPhi+0x8a>
        for (int i = (_reg_count - 1); i >= 0; --i) {
 80010a4:	1e5d      	subs	r5, r3, #1
 80010a6:	b1eb      	cbz	r3, 80010e4 <_ZN13Address_field9set_valueEmPhi+0x80>
 80010a8:	6803      	ldr	r3, [r0, #0]
 80010aa:	00ec      	lsls	r4, r5, #3
            register_value[_registers[i].address()] &= ~_registers[i].mask();
 80010ac:	5b1e      	ldrh	r6, [r3, r4]
 80010ae:	4423      	add	r3, r4
 80010b0:	685f      	ldr	r7, [r3, #4]
 80010b2:	5d93      	ldrb	r3, [r2, r6]
        for (int i = (_reg_count - 1); i >= 0; --i) {
 80010b4:	3d01      	subs	r5, #1
            register_value[_registers[i].address()] &= ~_registers[i].mask();
 80010b6:	ea23 0307 	bic.w	r3, r3, r7
 80010ba:	5593      	strb	r3, [r2, r6]
            register_value[_registers[i].address()] |= (value & (_registers[i].mask() >> _registers[i].bit_bias())) << _registers[i].bit_bias();
 80010bc:	6806      	ldr	r6, [r0, #0]
 80010be:	1933      	adds	r3, r6, r4
 80010c0:	78df      	ldrb	r7, [r3, #3]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	5b36      	ldrh	r6, [r6, r4]
 80010c6:	40fb      	lsrs	r3, r7
 80010c8:	f812 c006 	ldrb.w	ip, [r2, r6]
 80010cc:	400b      	ands	r3, r1
 80010ce:	40bb      	lsls	r3, r7
 80010d0:	ea43 030c 	orr.w	r3, r3, ip
 80010d4:	5593      	strb	r3, [r2, r6]
            value >>= _registers[i].bit_count();
 80010d6:	6803      	ldr	r3, [r0, #0]
    return _bit_count;
 80010d8:	191e      	adds	r6, r3, r4
            value >>= _registers[i].bit_count();
 80010da:	78b6      	ldrb	r6, [r6, #2]
 80010dc:	3c08      	subs	r4, #8
 80010de:	40f1      	lsrs	r1, r6
        for (int i = (_reg_count - 1); i >= 0; --i) {
 80010e0:	1c6e      	adds	r6, r5, #1
 80010e2:	d1e3      	bne.n	80010ac <_ZN13Address_field9set_valueEmPhi+0x48>
            register_value[_registers[i].address()] &= ~_registers[i].mask();
            register_value[_registers[i].address()] |= (value & (_registers[i].mask() >> _registers[i].bit_bias())) << _registers[i].bit_bias();
            value >>= _registers[i].bit_count();
        }
    }
    return false;
 80010e4:	2000      	movs	r0, #0
 80010e6:	e000      	b.n	80010ea <_ZN13Address_field9set_valueEmPhi+0x86>
        return true;
 80010e8:	2001      	movs	r0, #1
}
 80010ea:	bcf0      	pop	{r4, r5, r6, r7}
 80010ec:	4770      	bx	lr
        for (int i = 0; i < _reg_count; ++i) {
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f8      	beq.n	80010e4 <_ZN13Address_field9set_valueEmPhi+0x80>
 80010f2:	6803      	ldr	r3, [r0, #0]
            register_value[_registers[i].address()] &= ~_registers[i].mask();
 80010f4:	f833 6034 	ldrh.w	r6, [r3, r4, lsl #3]
 80010f8:	00e5      	lsls	r5, r4, #3
 80010fa:	442b      	add	r3, r5
 80010fc:	685f      	ldr	r7, [r3, #4]
 80010fe:	5d93      	ldrb	r3, [r2, r6]
 8001100:	ea23 0307 	bic.w	r3, r3, r7
 8001104:	5593      	strb	r3, [r2, r6]
            register_value[_registers[i].address()] |= (value & (_registers[i].mask() >> _registers[i].bit_bias())) << _registers[i].bit_bias();
 8001106:	6806      	ldr	r6, [r0, #0]
 8001108:	1973      	adds	r3, r6, r5
 800110a:	78df      	ldrb	r7, [r3, #3]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f836 6034 	ldrh.w	r6, [r6, r4, lsl #3]
 8001112:	40fb      	lsrs	r3, r7
 8001114:	f812 c006 	ldrb.w	ip, [r2, r6]
 8001118:	400b      	ands	r3, r1
 800111a:	40bb      	lsls	r3, r7
 800111c:	ea43 030c 	orr.w	r3, r3, ip
 8001120:	5593      	strb	r3, [r2, r6]
            value >>= _registers[i].bit_count();
 8001122:	6803      	ldr	r3, [r0, #0]
        for (int i = 0; i < _reg_count; ++i) {
 8001124:	7906      	ldrb	r6, [r0, #4]
    return _bit_count;
 8001126:	441d      	add	r5, r3
            value >>= _registers[i].bit_count();
 8001128:	78ad      	ldrb	r5, [r5, #2]
        for (int i = 0; i < _reg_count; ++i) {
 800112a:	3401      	adds	r4, #1
 800112c:	42a6      	cmp	r6, r4
            value >>= _registers[i].bit_count();
 800112e:	fa21 f105 	lsr.w	r1, r1, r5
        for (int i = 0; i < _reg_count; ++i) {
 8001132:	dcdf      	bgt.n	80010f4 <_ZN13Address_field9set_valueEmPhi+0x90>
 8001134:	e7d6      	b.n	80010e4 <_ZN13Address_field9set_valueEmPhi+0x80>
 8001136:	bf00      	nop

08001138 <_ZN13Address_field13get_registersEv>:

Register *Address_field::get_registers() {
    return _registers;
}
 8001138:	6800      	ldr	r0, [r0, #0]
 800113a:	4770      	bx	lr

0800113c <_ZN13Address_field13get_reg_countEv>:
uint8_t Address_field::get_reg_count() {
    return _reg_count;
}
 800113c:	7900      	ldrb	r0, [r0, #4]
 800113e:	4770      	bx	lr

08001140 <_ZN10LoRa_class9field_setE13Address_fieldmb.constprop.22>:
	_FifoTxBaseAddr = 0;
	_packet_length = 0;
	_reg_field.init(spi, _nss_port, _nss_pin);
}

uint8_t LoRa_class::field_set(Address_field field, uint32_t value, bool write) {
 8001140:	b084      	sub	sp, #16
 8001142:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001144:	b087      	sub	sp, #28
 8001146:	ac0d      	add	r4, sp, #52	; 0x34
    uint8_t result;
    result = _reg_field.set_field_value(field, value);
 8001148:	ad10      	add	r5, sp, #64	; 0x40
uint8_t LoRa_class::field_set(Address_field field, uint32_t value, bool write) {
 800114a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    result = _reg_field.set_field_value(field, value);
 800114e:	f100 063c 	add.w	r6, r0, #60	; 0x3c
 8001152:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001156:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
uint8_t LoRa_class::field_set(Address_field field, uint32_t value, bool write) {
 800115a:	9f14      	ldr	r7, [sp, #80]	; 0x50
    result = _reg_field.set_field_value(field, value);
 800115c:	4630      	mov	r0, r6
 800115e:	9704      	str	r7, [sp, #16]
 8001160:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001164:	f001 fc56 	bl	8002a14 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
    if(write) {
        result = _reg_field.register_write(field, true, true);
 8001168:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800116c:	2501      	movs	r5, #1
 800116e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001172:	4630      	mov	r0, r6
 8001174:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001178:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800117c:	f001 f9f0 	bl	8002560 <_ZN13LoRa_register14register_writeE13Address_fieldbb>
    }
    return result;
}
 8001180:	b007      	add	sp, #28
 8001182:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001186:	b004      	add	sp, #16
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop

0800118c <_ZN10LoRa_class10packet_endEmb.part.2>:
    field_set(PayloadLength, _packet_length);
    return false;
}

// Отправка пакета
bool LoRa_class::packet_end(uint32_t wait, bool sleep) {
 800118c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mode_TX();
    bool result = false;
    if(wait > 0) {
        uint32_t tx_done = 0;
 8001190:	2600      	movs	r6, #0
bool LoRa_class::packet_end(uint32_t wait, bool sleep) {
 8001192:	b0a7      	sub	sp, #156	; 0x9c
        uint32_t tx_done = 0;
 8001194:	f10d 0898 	add.w	r8, sp, #152	; 0x98
bool LoRa_class::packet_end(uint32_t wait, bool sleep) {
 8001198:	4607      	mov	r7, r0
 800119a:	460d      	mov	r5, r1
 800119c:	4691      	mov	r9, r2
        uint32_t tx_done = 0;
 800119e:	f848 6d80 	str.w	r6, [r8, #-128]!
        bool signal = false;
        uint32_t time, start_time, read_time;
        int pin_done;
        tx_done = 0;
        for(time = HAL_GetTick(), start_time = time, read_time = time; HAL_GetTick() - time < wait;) {
 80011a2:	f004 ffe1 	bl	8006168 <HAL_GetTick>
    return _reg_field.get_field_value(field, value, read);
 80011a6:	f04f 0b01 	mov.w	fp, #1
        for(time = HAL_GetTick(), start_time = time, read_time = time; HAL_GetTick() - time < wait;) {
 80011aa:	4604      	mov	r4, r0
    return _reg_field.get_field_value(field, value, read);
 80011ac:	f107 0a3c 	add.w	sl, r7, #60	; 0x3c
 80011b0:	e004      	b.n	80011bc <_ZN10LoRa_class10packet_endEmb.part.2+0x30>
            // Считывание каждые 10 мс.
            if(HAL_GetTick() - read_time > 10) {
 80011b2:	f004 ffd9 	bl	8006168 <HAL_GetTick>
 80011b6:	1b00      	subs	r0, r0, r4
 80011b8:	280a      	cmp	r0, #10
 80011ba:	d80c      	bhi.n	80011d6 <_ZN10LoRa_class10packet_endEmb.part.2+0x4a>
        for(time = HAL_GetTick(), start_time = time, read_time = time; HAL_GetTick() - time < wait;) {
 80011bc:	f004 ffd4 	bl	8006168 <HAL_GetTick>
 80011c0:	1b00      	subs	r0, r0, r4
 80011c2:	42a8      	cmp	r0, r5
 80011c4:	d3f5      	bcc.n	80011b2 <_ZN10LoRa_class10packet_endEmb.part.2+0x26>
                if(tx_done != 0) {
                    break;
                }
            }
        }
        if(sleep && (tx_done != 0)) {
 80011c6:	f1b9 0f00 	cmp.w	r9, #0
 80011ca:	d001      	beq.n	80011d0 <_ZN10LoRa_class10packet_endEmb.part.2+0x44>
 80011cc:	9b06      	ldr	r3, [sp, #24]
 80011ce:	bb23      	cbnz	r3, 800121a <_ZN10LoRa_class10packet_endEmb.part.2+0x8e>
            mode_sleep();
        }
    }
    return result;
}
 80011d0:	b027      	add	sp, #156	; 0x9c
 80011d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (_dio0_pin != 0) {
 80011d6:	8ab9      	ldrh	r1, [r7, #20]
 80011d8:	2900      	cmp	r1, #0
 80011da:	d150      	bne.n	800127e <_ZN10LoRa_class10packet_endEmb.part.2+0xf2>
 80011dc:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 80012b0 <_ZN10LoRa_class10packet_endEmb.part.2+0x124>
 80011e0:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80011e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80011e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80011ec:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80011f0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    return _reg_field.get_field_value(field, value, read);
 80011f4:	e9cd 8b04 	strd	r8, fp, [sp, #16]
 80011f8:	ab0d      	add	r3, sp, #52	; 0x34
 80011fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011fc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001200:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8001204:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
 8001208:	4650      	mov	r0, sl
 800120a:	f001 fc11 	bl	8002a30 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>
                if(tx_done != 0) {
 800120e:	9b06      	ldr	r3, [sp, #24]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0d3      	beq.n	80011bc <_ZN10LoRa_class10packet_endEmb.part.2+0x30>
        if(sleep && (tx_done != 0)) {
 8001214:	f1b9 0f00 	cmp.w	r9, #0
 8001218:	d0da      	beq.n	80011d0 <_ZN10LoRa_class10packet_endEmb.part.2+0x44>
    uint32_t values[3] = {1, 0, mode};
 800121a:	f04f 0c00 	mov.w	ip, #0
 800121e:	f04f 0801 	mov.w	r8, #1
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8001222:	4c20      	ldr	r4, [pc, #128]	; (80012a4 <_ZN10LoRa_class10packet_endEmb.part.2+0x118>)
 8001224:	ad11      	add	r5, sp, #68	; 0x44
 8001226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800122a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800122e:	4c1e      	ldr	r4, [pc, #120]	; (80012a8 <_ZN10LoRa_class10packet_endEmb.part.2+0x11c>)
 8001230:	ae18      	add	r6, sp, #96	; 0x60
 8001232:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001238:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800123a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800123e:	4d1b      	ldr	r5, [pc, #108]	; (80012ac <_ZN10LoRa_class10packet_endEmb.part.2+0x120>)
 8001240:	ac1f      	add	r4, sp, #124	; 0x7c
 8001242:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8001246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800124a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 800124e:	373c      	adds	r7, #60	; 0x3c
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8001250:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 8001254:	2303      	movs	r3, #3
 8001256:	a911      	add	r1, sp, #68	; 0x44
 8001258:	aa07      	add	r2, sp, #28
 800125a:	4638      	mov	r0, r7
    uint32_t values[3] = {1, 0, mode};
 800125c:	e9cd cc08 	strd	ip, ip, [sp, #32]
 8001260:	f8cd 801c 	str.w	r8, [sp, #28]
    result = _reg_field.set_field_value(fields, values, amt);
 8001264:	f001 f80a 	bl	800227c <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
        result = _reg_field.register_write(fields, amt, true, true);
 8001268:	f8cd 8000 	str.w	r8, [sp]
 800126c:	4643      	mov	r3, r8
 800126e:	a911      	add	r1, sp, #68	; 0x44
 8001270:	4638      	mov	r0, r7
 8001272:	2203      	movs	r2, #3
 8001274:	f001 f866 	bl	8002344 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
}
 8001278:	b027      	add	sp, #156	; 0x9c
 800127a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                	pin_done = HAL_GPIO_ReadPin(_dio0_port, _dio0_pin);
 800127e:	69b8      	ldr	r0, [r7, #24]
 8001280:	f005 f92a 	bl	80064d8 <HAL_GPIO_ReadPin>
                if ((_dio0_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 8001284:	8abb      	ldrh	r3, [r7, #20]
                        signal = true;
 8001286:	2801      	cmp	r0, #1
 8001288:	bf08      	it	eq
 800128a:	2601      	moveq	r6, #1
                if ((_dio0_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0a5      	beq.n	80011dc <_ZN10LoRa_class10packet_endEmb.part.2+0x50>
 8001290:	f004 ff6a 	bl	8006168 <HAL_GetTick>
 8001294:	1b00      	subs	r0, r0, r4
 8001296:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 800129a:	d89f      	bhi.n	80011dc <_ZN10LoRa_class10packet_endEmb.part.2+0x50>
 800129c:	2e00      	cmp	r6, #0
 800129e:	d0b6      	beq.n	800120e <_ZN10LoRa_class10packet_endEmb.part.2+0x82>
 80012a0:	e79c      	b.n	80011dc <_ZN10LoRa_class10packet_endEmb.part.2+0x50>
 80012a2:	bf00      	nop
 80012a4:	20001178 	.word	0x20001178
 80012a8:	200011b0 	.word	0x200011b0
 80012ac:	20001204 	.word	0x20001204
 80012b0:	20001568 	.word	0x20001568

080012b4 <_ZN10LoRa_classC1Ev>:
LoRa_class::LoRa_class(/* args */) {
 80012b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012b6:	4604      	mov	r4, r0
 80012b8:	f100 053c 	add.w	r5, r0, #60	; 0x3c
 80012bc:	4628      	mov	r0, r5
 80012be:	f000 fd03 	bl	8001cc8 <_ZN13LoRa_registerC1Ev>
 80012c2:	f504 7003 	add.w	r0, r4, #524	; 0x20c
 80012c6:	f000 fcef 	bl	8001ca8 <_ZN11LoRa_packetC1Ev>
	_reset_pin = LORA_RESET_Pin;
 80012ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
	_dio0_pin = 0;
 80012ce:	2100      	movs	r1, #0
	_nss_pin = LORA_NSS_Pin;
 80012d0:	2310      	movs	r3, #16
	_frequency = 0;
 80012d2:	2600      	movs	r6, #0
 80012d4:	2700      	movs	r7, #0
	_reg_field.init(spi, _nss_port, _nss_pin);
 80012d6:	4628      	mov	r0, r5
	_reset_pin = LORA_RESET_Pin;
 80012d8:	80a2      	strh	r2, [r4, #4]
	_reset_port = LORA_RESET_GPIO_Port;
 80012da:	4d0c      	ldr	r5, [pc, #48]	; (800130c <_ZN10LoRa_classC1Ev+0x58>)
	_nss_port = LORA_NSS_GPIO_Port;
 80012dc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80012e0:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	_frequency = 0;
 80012e4:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
	_reset_port = LORA_RESET_GPIO_Port;
 80012e8:	60a5      	str	r5, [r4, #8]
	_nss_pin = LORA_NSS_Pin;
 80012ea:	81a3      	strh	r3, [r4, #12]
	_nss_port = LORA_NSS_GPIO_Port;
 80012ec:	6122      	str	r2, [r4, #16]
	_dio0_pin = 0;
 80012ee:	82a1      	strh	r1, [r4, #20]
	_dio0_port = 0;
 80012f0:	61a1      	str	r1, [r4, #24]
	_dio1_pin = 0;
 80012f2:	83a1      	strh	r1, [r4, #28]
	_dio1_port = 0;
 80012f4:	6221      	str	r1, [r4, #32]
	_dio3_pin = 0;
 80012f6:	84a1      	strh	r1, [r4, #36]	; 0x24
	_dio3_port = 0;
 80012f8:	62a1      	str	r1, [r4, #40]	; 0x28
	_spi = spi;
 80012fa:	6021      	str	r1, [r4, #0]
	_FifoTxBaseAddr = 0;
 80012fc:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	_packet_length = 0;
 8001300:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	_reg_field.init(spi, _nss_port, _nss_pin);
 8001304:	f000 fd52 	bl	8001dac <_ZN13LoRa_register4initEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
}
 8001308:	4620      	mov	r0, r4
 800130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800130c:	40010c00 	.word	0x40010c00

08001310 <_ZN10LoRa_classD1Ev>:
LoRa_class::~LoRa_class() {
 8001310:	b510      	push	{r4, lr}
 8001312:	4604      	mov	r4, r0
    if(_spi != nullptr)
 8001314:	6800      	ldr	r0, [r0, #0]
 8001316:	b110      	cbz	r0, 800131e <_ZN10LoRa_classD1Ev+0xe>
        delete _spi;
 8001318:	2158      	movs	r1, #88	; 0x58
 800131a:	f009 fbfb 	bl	800ab14 <_ZdlPvj>
LoRa_class::~LoRa_class() {
 800131e:	f504 7003 	add.w	r0, r4, #524	; 0x20c
 8001322:	f000 fcc9 	bl	8001cb8 <_ZN11LoRa_packetD1Ev>
 8001326:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800132a:	f000 fd3d 	bl	8001da8 <_ZN13LoRa_registerD1Ev>
}
 800132e:	4620      	mov	r0, r4
 8001330:	bd10      	pop	{r4, pc}
 8001332:	bf00      	nop

08001334 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef>:
void LoRa_class::init(SPI_HandleTypeDef *spi) {
 8001334:	b4f0      	push	{r4, r5, r6, r7}
	_reset_pin = LORA_RESET_Pin;
 8001336:	f44f 6200 	mov.w	r2, #2048	; 0x800
	_frequency = 0;
 800133a:	2600      	movs	r6, #0
 800133c:	2700      	movs	r7, #0
	_dio0_pin = 0;
 800133e:	2400      	movs	r4, #0
	_nss_pin = LORA_NSS_Pin;
 8001340:	2310      	movs	r3, #16
	_reset_pin = LORA_RESET_Pin;
 8001342:	8082      	strh	r2, [r0, #4]
	_reset_port = LORA_RESET_GPIO_Port;
 8001344:	4d0c      	ldr	r5, [pc, #48]	; (8001378 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef+0x44>)
	_frequency = 0;
 8001346:	e9c0 670c 	strd	r6, r7, [r0, #48]	; 0x30
	_nss_port = LORA_NSS_GPIO_Port;
 800134a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800134e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	_spi = spi;
 8001352:	6001      	str	r1, [r0, #0]
	_reset_port = LORA_RESET_GPIO_Port;
 8001354:	6085      	str	r5, [r0, #8]
	_nss_pin = LORA_NSS_Pin;
 8001356:	8183      	strh	r3, [r0, #12]
	_nss_port = LORA_NSS_GPIO_Port;
 8001358:	6102      	str	r2, [r0, #16]
	_dio0_pin = 0;
 800135a:	8284      	strh	r4, [r0, #20]
	_dio0_port = 0;
 800135c:	6184      	str	r4, [r0, #24]
	_dio1_pin = 0;
 800135e:	8384      	strh	r4, [r0, #28]
	_dio1_port = 0;
 8001360:	6204      	str	r4, [r0, #32]
	_dio3_pin = 0;
 8001362:	8484      	strh	r4, [r0, #36]	; 0x24
	_dio3_port = 0;
 8001364:	6284      	str	r4, [r0, #40]	; 0x28
	_FifoTxBaseAddr = 0;
 8001366:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
	_packet_length = 0;
 800136a:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
}
 800136e:	bcf0      	pop	{r4, r5, r6, r7}
	_reg_field.init(spi, _nss_port, _nss_pin);
 8001370:	303c      	adds	r0, #60	; 0x3c
 8001372:	f000 bd1b 	b.w	8001dac <_ZN13LoRa_register4initEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 8001376:	bf00      	nop
 8001378:	40010c00 	.word	0x40010c00

0800137c <_ZN10LoRa_class8set_modeEh>:
uint8_t LoRa_class::set_mode(uint8_t mode) {
 800137c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001380:	4680      	mov	r8, r0
 8001382:	468e      	mov	lr, r1
    uint32_t values[3] = {1, 0, mode};
 8001384:	f04f 0c00 	mov.w	ip, #0
 8001388:	2701      	movs	r7, #1
uint8_t LoRa_class::set_mode(uint8_t mode) {
 800138a:	b09a      	sub	sp, #104	; 0x68
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 800138c:	4c16      	ldr	r4, [pc, #88]	; (80013e8 <_ZN10LoRa_class8set_modeEh+0x6c>)
 800138e:	ad05      	add	r5, sp, #20
 8001390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001392:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001394:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001398:	4c14      	ldr	r4, [pc, #80]	; (80013ec <_ZN10LoRa_class8set_modeEh+0x70>)
 800139a:	ae0c      	add	r6, sp, #48	; 0x30
 800139c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80013a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80013a4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80013a8:	4d11      	ldr	r5, [pc, #68]	; (80013f0 <_ZN10LoRa_class8set_modeEh+0x74>)
 80013aa:	ac13      	add	r4, sp, #76	; 0x4c
 80013ac:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80013b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 80013b8:	f108 083c 	add.w	r8, r8, #60	; 0x3c
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 80013bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 80013c0:	2303      	movs	r3, #3
 80013c2:	a905      	add	r1, sp, #20
 80013c4:	aa02      	add	r2, sp, #8
 80013c6:	4640      	mov	r0, r8
    uint32_t values[3] = {1, 0, mode};
 80013c8:	e9cd ce03 	strd	ip, lr, [sp, #12]
 80013cc:	9702      	str	r7, [sp, #8]
    result = _reg_field.set_field_value(fields, values, amt);
 80013ce:	f000 ff55 	bl	800227c <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
        result = _reg_field.register_write(fields, amt, true, true);
 80013d2:	4640      	mov	r0, r8
 80013d4:	9700      	str	r7, [sp, #0]
 80013d6:	463b      	mov	r3, r7
 80013d8:	a905      	add	r1, sp, #20
 80013da:	2203      	movs	r2, #3
 80013dc:	f000 ffb2 	bl	8002344 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
}
 80013e0:	b01a      	add	sp, #104	; 0x68
 80013e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013e6:	bf00      	nop
 80013e8:	20001178 	.word	0x20001178
 80013ec:	200011b0 	.word	0x200011b0
 80013f0:	20001204 	.word	0x20001204

080013f4 <_ZN10LoRa_class12set_TX_powerEhbh>:
uint8_t LoRa_class::set_TX_power(uint8_t power, bool paboost, uint8_t max_power) {
 80013f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013f8:	469e      	mov	lr, r3
 80013fa:	b0a2      	sub	sp, #136	; 0x88
    Address_field fields[4] = {PaDac, PaSelect, MaxPower, OutputPower};
 80013fc:	4c34      	ldr	r4, [pc, #208]	; (80014d0 <_ZN10LoRa_class12set_TX_powerEhbh+0xdc>)
 80013fe:	ae06      	add	r6, sp, #24
uint8_t LoRa_class::set_TX_power(uint8_t power, bool paboost, uint8_t max_power) {
 8001400:	4684      	mov	ip, r0
 8001402:	4688      	mov	r8, r1
 8001404:	4617      	mov	r7, r2
    Address_field fields[4] = {PaDac, PaSelect, MaxPower, OutputPower};
 8001406:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001408:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800140a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800140e:	4c31      	ldr	r4, [pc, #196]	; (80014d4 <_ZN10LoRa_class12set_TX_powerEhbh+0xe0>)
 8001410:	ad0d      	add	r5, sp, #52	; 0x34
 8001412:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8001416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001418:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800141a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800141e:	4c2e      	ldr	r4, [pc, #184]	; (80014d8 <_ZN10LoRa_class12set_TX_powerEhbh+0xe4>)
 8001420:	ae14      	add	r6, sp, #80	; 0x50
 8001422:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001428:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800142a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800142e:	4d2b      	ldr	r5, [pc, #172]	; (80014dc <_ZN10LoRa_class12set_TX_powerEhbh+0xe8>)
 8001430:	ac1b      	add	r4, sp, #108	; 0x6c
 8001432:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8001436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800143a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800143e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if (max_power < 0x01)
 8001442:	f1be 0f00 	cmp.w	lr, #0
 8001446:	d016      	beq.n	8001476 <_ZN10LoRa_class12set_TX_powerEhbh+0x82>
 8001448:	4675      	mov	r5, lr
 800144a:	2d07      	cmp	r5, #7
 800144c:	bf28      	it	cs
 800144e:	2507      	movcs	r5, #7
    _reg_field.register_read(fields, 4);
 8001450:	f10c 043c 	add.w	r4, ip, #60	; 0x3c
 8001454:	4620      	mov	r0, r4
 8001456:	2301      	movs	r3, #1
 8001458:	2204      	movs	r2, #4
 800145a:	a906      	add	r1, sp, #24
 800145c:	f000 fe96 	bl	800218c <_ZN13LoRa_register13register_readEP13Address_fieldhb>
    if (paboost) {
 8001460:	b15f      	cbz	r7, 800147a <_ZN10LoRa_class12set_TX_powerEhbh+0x86>
        if (power > 17)
 8001462:	f1b8 0f11 	cmp.w	r8, #17
 8001466:	d829      	bhi.n	80014bc <_ZN10LoRa_class12set_TX_powerEhbh+0xc8>
    if (power < min_power_value)
 8001468:	f1b8 0f01 	cmp.w	r8, #1
 800146c:	d82b      	bhi.n	80014c6 <_ZN10LoRa_class12set_TX_powerEhbh+0xd2>
 800146e:	2600      	movs	r6, #0
 8001470:	2701      	movs	r7, #1
        pa_dac = RF_PADAC_20DBM_OFF;
 8001472:	2204      	movs	r2, #4
 8001474:	e00e      	b.n	8001494 <_ZN10LoRa_class12set_TX_powerEhbh+0xa0>
 8001476:	2501      	movs	r5, #1
 8001478:	e7ea      	b.n	8001450 <_ZN10LoRa_class12set_TX_powerEhbh+0x5c>
 800147a:	220e      	movs	r2, #14
 800147c:	2301      	movs	r3, #1
 800147e:	4611      	mov	r1, r2
    if (power > max_power_value)
 8001480:	4588      	cmp	r8, r1
 8001482:	bfcc      	ite	gt
 8001484:	189b      	addgt	r3, r3, r2
 8001486:	4443      	addle	r3, r8
 8001488:	b2db      	uxtb	r3, r3
        pa_dac = RF_PADAC_20DBM_OFF;
 800148a:	2b11      	cmp	r3, #17
 800148c:	461e      	mov	r6, r3
 800148e:	bf8c      	ite	hi
 8001490:	2207      	movhi	r2, #7
 8001492:	2204      	movls	r2, #4
    uint32_t values[4] = {pa_dac, pa_select, max_power, power};
 8001494:	9202      	str	r2, [sp, #8]
    result = _reg_field.set_field_value(fields, values, amt);
 8001496:	a906      	add	r1, sp, #24
 8001498:	aa02      	add	r2, sp, #8
 800149a:	2304      	movs	r3, #4
 800149c:	4620      	mov	r0, r4
    uint32_t values[4] = {pa_dac, pa_select, max_power, power};
 800149e:	9703      	str	r7, [sp, #12]
 80014a0:	9504      	str	r5, [sp, #16]
 80014a2:	9605      	str	r6, [sp, #20]
    result = _reg_field.set_field_value(fields, values, amt);
 80014a4:	f000 feea 	bl	800227c <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
        result = _reg_field.register_write(fields, amt, true, true);
 80014a8:	2301      	movs	r3, #1
 80014aa:	a906      	add	r1, sp, #24
 80014ac:	4620      	mov	r0, r4
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2204      	movs	r2, #4
 80014b2:	f000 ff47 	bl	8002344 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
}
 80014b6:	b022      	add	sp, #136	; 0x88
 80014b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014bc:	2214      	movs	r2, #20
 80014be:	23fb      	movs	r3, #251	; 0xfb
 80014c0:	4611      	mov	r1, r2
 80014c2:	2701      	movs	r7, #1
 80014c4:	e7dc      	b.n	8001480 <_ZN10LoRa_class12set_TX_powerEhbh+0x8c>
    if (power < min_power_value)
 80014c6:	2214      	movs	r2, #20
 80014c8:	23fe      	movs	r3, #254	; 0xfe
 80014ca:	4611      	mov	r1, r2
 80014cc:	2701      	movs	r7, #1
 80014ce:	e7d7      	b.n	8001480 <_ZN10LoRa_class12set_TX_powerEhbh+0x8c>
 80014d0:	20001290 	.word	0x20001290
 80014d4:	200012c8 	.word	0x200012c8
 80014d8:	200011e8 	.word	0x200011e8
 80014dc:	20001274 	.word	0x20001274

080014e0 <_ZN10LoRa_class20set_spreading_factorEh>:
uint8_t LoRa_class::set_spreading_factor(uint8_t SF) {
 80014e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (SF < 6)
 80014e4:	2905      	cmp	r1, #5
uint8_t LoRa_class::set_spreading_factor(uint8_t SF) {
 80014e6:	b09a      	sub	sp, #104	; 0x68
 80014e8:	4680      	mov	r8, r0
    if (SF < 6)
 80014ea:	d93f      	bls.n	800156c <_ZN10LoRa_class20set_spreading_factorEh+0x8c>
    else if (SF > 12)
 80014ec:	290c      	cmp	r1, #12
 80014ee:	d837      	bhi.n	8001560 <_ZN10LoRa_class20set_spreading_factorEh+0x80>
        detection_threshold = DT_SF6;
 80014f0:	2906      	cmp	r1, #6
 80014f2:	460f      	mov	r7, r1
 80014f4:	bf15      	itete	ne
 80014f6:	f04f 0c0a 	movne.w	ip, #10
 80014fa:	f04f 0c0c 	moveq.w	ip, #12
 80014fe:	f04f 0e03 	movne.w	lr, #3
 8001502:	f04f 0e05 	moveq.w	lr, #5
    Address_field fields[3] = {DetectionOptimize, DetectionThreshold, SpreadingFactor};
 8001506:	4c1c      	ldr	r4, [pc, #112]	; (8001578 <_ZN10LoRa_class20set_spreading_factorEh+0x98>)
 8001508:	ad05      	add	r5, sp, #20
 800150a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001512:	4c1a      	ldr	r4, [pc, #104]	; (800157c <_ZN10LoRa_class20set_spreading_factorEh+0x9c>)
 8001514:	ae0c      	add	r6, sp, #48	; 0x30
 8001516:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800151a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800151e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001522:	4d17      	ldr	r5, [pc, #92]	; (8001580 <_ZN10LoRa_class20set_spreading_factorEh+0xa0>)
 8001524:	ac13      	add	r4, sp, #76	; 0x4c
 8001526:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800152a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800152c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800152e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 8001532:	f108 083c 	add.w	r8, r8, #60	; 0x3c
    Address_field fields[3] = {DetectionOptimize, DetectionThreshold, SpreadingFactor};
 8001536:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 800153a:	2303      	movs	r3, #3
 800153c:	a905      	add	r1, sp, #20
 800153e:	aa02      	add	r2, sp, #8
 8001540:	4640      	mov	r0, r8
    uint32_t values[3] = {detection_optimize, detection_threshold, SF};
 8001542:	e9cd ec02 	strd	lr, ip, [sp, #8]
 8001546:	9704      	str	r7, [sp, #16]
    result = _reg_field.set_field_value(fields, values, amt);
 8001548:	f000 fe98 	bl	800227c <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
        result = _reg_field.register_write(fields, amt, true, true);
 800154c:	2301      	movs	r3, #1
 800154e:	a905      	add	r1, sp, #20
 8001550:	4640      	mov	r0, r8
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2203      	movs	r2, #3
 8001556:	f000 fef5 	bl	8002344 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
}
 800155a:	b01a      	add	sp, #104	; 0x68
 800155c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001560:	270c      	movs	r7, #12
        detection_threshold = DT_SF7_12;
 8001562:	f04f 0c0a 	mov.w	ip, #10
        detection_optimize = DO_SF7_12;
 8001566:	f04f 0e03 	mov.w	lr, #3
 800156a:	e7cc      	b.n	8001506 <_ZN10LoRa_class20set_spreading_factorEh+0x26>
 800156c:	2706      	movs	r7, #6
        detection_threshold = DT_SF6;
 800156e:	f04f 0c0c 	mov.w	ip, #12
        detection_optimize = DO_SF6;
 8001572:	f04f 0e05 	mov.w	lr, #5
 8001576:	e7c6      	b.n	8001506 <_ZN10LoRa_class20set_spreading_factorEh+0x26>
 8001578:	20000e68 	.word	0x20000e68
 800157c:	20000e84 	.word	0x20000e84
 8001580:	200014dc 	.word	0x200014dc
 8001584:	00000000 	.word	0x00000000

08001588 <_ZN10LoRa_class20set_signal_bandwidthEy>:
uint8_t LoRa_class::set_signal_bandwidth(uint64_t sbw) {
 8001588:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (sbw <= 7.8E3)        bw = 0;
 800158a:	4619      	mov	r1, r3
uint8_t LoRa_class::set_signal_bandwidth(uint64_t sbw) {
 800158c:	b08f      	sub	sp, #60	; 0x3c
 800158e:	4606      	mov	r6, r0
    if (sbw <= 7.8E3)        bw = 0;
 8001590:	4610      	mov	r0, r2
 8001592:	f7fe ff63 	bl	800045c <__aeabi_ul2d>
 8001596:	a344      	add	r3, pc, #272	; (adr r3, 80016a8 <_ZN10LoRa_class20set_signal_bandwidthEy+0x120>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	4604      	mov	r4, r0
 800159e:	460d      	mov	r5, r1
 80015a0:	f7ff fa0e 	bl	80009c0 <__aeabi_dcmple>
 80015a4:	2800      	cmp	r0, #0
 80015a6:	d16e      	bne.n	8001686 <_ZN10LoRa_class20set_signal_bandwidthEy+0xfe>
    else if (sbw <= 10.4E3)  bw = 1;
 80015a8:	a341      	add	r3, pc, #260	; (adr r3, 80016b0 <_ZN10LoRa_class20set_signal_bandwidthEy+0x128>)
 80015aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ae:	4620      	mov	r0, r4
 80015b0:	4629      	mov	r1, r5
 80015b2:	f7ff fa05 	bl	80009c0 <__aeabi_dcmple>
 80015b6:	2800      	cmp	r0, #0
 80015b8:	d141      	bne.n	800163e <_ZN10LoRa_class20set_signal_bandwidthEy+0xb6>
    else if (sbw <= 15.6E3)  bw = 2;
 80015ba:	a33f      	add	r3, pc, #252	; (adr r3, 80016b8 <_ZN10LoRa_class20set_signal_bandwidthEy+0x130>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	4620      	mov	r0, r4
 80015c2:	4629      	mov	r1, r5
 80015c4:	f7ff f9fc 	bl	80009c0 <__aeabi_dcmple>
 80015c8:	2800      	cmp	r0, #0
 80015ca:	d15e      	bne.n	800168a <_ZN10LoRa_class20set_signal_bandwidthEy+0x102>
    else if (sbw <= 20.8E3)  bw = 3;
 80015cc:	a33c      	add	r3, pc, #240	; (adr r3, 80016c0 <_ZN10LoRa_class20set_signal_bandwidthEy+0x138>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	4620      	mov	r0, r4
 80015d4:	4629      	mov	r1, r5
 80015d6:	f7ff f9f3 	bl	80009c0 <__aeabi_dcmple>
 80015da:	2800      	cmp	r0, #0
 80015dc:	d157      	bne.n	800168e <_ZN10LoRa_class20set_signal_bandwidthEy+0x106>
    else if (sbw <= 31.25E3) bw = 4;
 80015de:	a33a      	add	r3, pc, #232	; (adr r3, 80016c8 <_ZN10LoRa_class20set_signal_bandwidthEy+0x140>)
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	4620      	mov	r0, r4
 80015e6:	4629      	mov	r1, r5
 80015e8:	f7ff f9ea 	bl	80009c0 <__aeabi_dcmple>
 80015ec:	2800      	cmp	r0, #0
 80015ee:	d150      	bne.n	8001692 <_ZN10LoRa_class20set_signal_bandwidthEy+0x10a>
    else if (sbw <= 41.7E3)  bw = 5;
 80015f0:	a337      	add	r3, pc, #220	; (adr r3, 80016d0 <_ZN10LoRa_class20set_signal_bandwidthEy+0x148>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	4620      	mov	r0, r4
 80015f8:	4629      	mov	r1, r5
 80015fa:	f7ff f9e1 	bl	80009c0 <__aeabi_dcmple>
 80015fe:	2800      	cmp	r0, #0
 8001600:	d149      	bne.n	8001696 <_ZN10LoRa_class20set_signal_bandwidthEy+0x10e>
    else if (sbw <= 62.5E3)  bw = 6;
 8001602:	a335      	add	r3, pc, #212	; (adr r3, 80016d8 <_ZN10LoRa_class20set_signal_bandwidthEy+0x150>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	4620      	mov	r0, r4
 800160a:	4629      	mov	r1, r5
 800160c:	f7ff f9d8 	bl	80009c0 <__aeabi_dcmple>
 8001610:	2800      	cmp	r0, #0
 8001612:	d142      	bne.n	800169a <_ZN10LoRa_class20set_signal_bandwidthEy+0x112>
    else if (sbw <= 125E3)   bw = 7;
 8001614:	a332      	add	r3, pc, #200	; (adr r3, 80016e0 <_ZN10LoRa_class20set_signal_bandwidthEy+0x158>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	4620      	mov	r0, r4
 800161c:	4629      	mov	r1, r5
 800161e:	f7ff f9cf 	bl	80009c0 <__aeabi_dcmple>
 8001622:	2800      	cmp	r0, #0
 8001624:	d13b      	bne.n	800169e <_ZN10LoRa_class20set_signal_bandwidthEy+0x116>
    else if (sbw <= 250E3)   bw = 8;
 8001626:	a330      	add	r3, pc, #192	; (adr r3, 80016e8 <_ZN10LoRa_class20set_signal_bandwidthEy+0x160>)
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	4620      	mov	r0, r4
 800162e:	4629      	mov	r1, r5
 8001630:	f7ff f9c6 	bl	80009c0 <__aeabi_dcmple>
 8001634:	2800      	cmp	r0, #0
 8001636:	bf14      	ite	ne
 8001638:	2708      	movne	r7, #8
 800163a:	2709      	moveq	r7, #9
 800163c:	e000      	b.n	8001640 <_ZN10LoRa_class20set_signal_bandwidthEy+0xb8>
 800163e:	2701      	movs	r7, #1
 8001640:	4d2b      	ldr	r5, [pc, #172]	; (80016f0 <_ZN10LoRa_class20set_signal_bandwidthEy+0x168>)
 8001642:	ac07      	add	r4, sp, #28
 8001644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001648:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800164c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result = _reg_field.set_field_value(field, value);
 8001650:	ac0a      	add	r4, sp, #40	; 0x28
 8001652:	9704      	str	r7, [sp, #16]
 8001654:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001658:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800165c:	363c      	adds	r6, #60	; 0x3c
 800165e:	ad07      	add	r5, sp, #28
 8001660:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001664:	4630      	mov	r0, r6
 8001666:	f001 f9d5 	bl	8002a14 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
        result = _reg_field.register_write(field, true, true);
 800166a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800166e:	2401      	movs	r4, #1
 8001670:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001674:	4630      	mov	r0, r6
 8001676:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800167a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800167e:	f000 ff6f 	bl	8002560 <_ZN13LoRa_register14register_writeE13Address_fieldbb>
}
 8001682:	b00f      	add	sp, #60	; 0x3c
 8001684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001686:	2700      	movs	r7, #0
 8001688:	e7da      	b.n	8001640 <_ZN10LoRa_class20set_signal_bandwidthEy+0xb8>
 800168a:	2702      	movs	r7, #2
 800168c:	e7d8      	b.n	8001640 <_ZN10LoRa_class20set_signal_bandwidthEy+0xb8>
 800168e:	2703      	movs	r7, #3
 8001690:	e7d6      	b.n	8001640 <_ZN10LoRa_class20set_signal_bandwidthEy+0xb8>
 8001692:	2704      	movs	r7, #4
 8001694:	e7d4      	b.n	8001640 <_ZN10LoRa_class20set_signal_bandwidthEy+0xb8>
 8001696:	2705      	movs	r7, #5
 8001698:	e7d2      	b.n	8001640 <_ZN10LoRa_class20set_signal_bandwidthEy+0xb8>
 800169a:	2706      	movs	r7, #6
 800169c:	e7d0      	b.n	8001640 <_ZN10LoRa_class20set_signal_bandwidthEy+0xb8>
 800169e:	2707      	movs	r7, #7
 80016a0:	e7ce      	b.n	8001640 <_ZN10LoRa_class20set_signal_bandwidthEy+0xb8>
 80016a2:	bf00      	nop
 80016a4:	f3af 8000 	nop.w
 80016a8:	00000000 	.word	0x00000000
 80016ac:	40be7800 	.word	0x40be7800
 80016b0:	00000000 	.word	0x00000000
 80016b4:	40c45000 	.word	0x40c45000
 80016b8:	00000000 	.word	0x00000000
 80016bc:	40ce7800 	.word	0x40ce7800
 80016c0:	00000000 	.word	0x00000000
 80016c4:	40d45000 	.word	0x40d45000
 80016c8:	00000000 	.word	0x00000000
 80016cc:	40de8480 	.word	0x40de8480
 80016d0:	00000000 	.word	0x00000000
 80016d4:	40e45c80 	.word	0x40e45c80
 80016d8:	00000000 	.word	0x00000000
 80016dc:	40ee8480 	.word	0x40ee8480
 80016e0:	00000000 	.word	0x00000000
 80016e4:	40fe8480 	.word	0x40fe8480
 80016e8:	00000000 	.word	0x00000000
 80016ec:	410e8480 	.word	0x410e8480
 80016f0:	20000da4 	.word	0x20000da4

080016f4 <_ZN10LoRa_class5beginEybhhyh>:
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 80016f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016f8:	4604      	mov	r4, r0
    uint32_t result = 0;
 80016fa:	2500      	movs	r5, #0
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 80016fc:	b0bd      	sub	sp, #244	; 0xf4
 80016fe:	4699      	mov	r9, r3
 8001700:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 8001704:	8881      	ldrh	r1, [r0, #4]
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8001706:	9307      	str	r3, [sp, #28]
 8001708:	f89d 3120 	ldrb.w	r3, [sp, #288]	; 0x120
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 800170c:	6880      	ldr	r0, [r0, #8]
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 800170e:	9308      	str	r3, [sp, #32]
 8001710:	f89d 3130 	ldrb.w	r3, [sp, #304]	; 0x130
 8001714:	4690      	mov	r8, r2
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 8001716:	2201      	movs	r2, #1
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8001718:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t result = 0;
 800171a:	950a      	str	r5, [sp, #40]	; 0x28
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 800171c:	f89d a118 	ldrb.w	sl, [sp, #280]	; 0x118
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 8001720:	f004 fee0 	bl	80064e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_RESET);
 8001724:	462a      	mov	r2, r5
 8001726:	88a1      	ldrh	r1, [r4, #4]
 8001728:	68a0      	ldr	r0, [r4, #8]
 800172a:	f004 fedb 	bl	80064e4 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800172e:	2014      	movs	r0, #20
 8001730:	f004 fd20 	bl	8006174 <HAL_Delay>
 8001734:	4fbd      	ldr	r7, [pc, #756]	; (8001a2c <_ZN10LoRa_class5beginEybhhyh+0x338>)
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 8001736:	88a1      	ldrh	r1, [r4, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	68a0      	ldr	r0, [r4, #8]
 800173c:	f004 fed2 	bl	80064e4 <HAL_GPIO_WritePin>
 8001740:	ae0b      	add	r6, sp, #44	; 0x2c
    HAL_Delay(50);
 8001742:	2032      	movs	r0, #50	; 0x32
 8001744:	f004 fd16 	bl	8006174 <HAL_Delay>
 8001748:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800174a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800174c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8001750:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    return _reg_field.get_field_value(field, value, read);
 8001754:	ab0e      	add	r3, sp, #56	; 0x38
 8001756:	9505      	str	r5, [sp, #20]
 8001758:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800175a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800175e:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8001762:	f8cd c010 	str.w	ip, [sp, #16]
 8001766:	af0b      	add	r7, sp, #44	; 0x2c
 8001768:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 800176c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001770:	4630      	mov	r0, r6
 8001772:	f001 f95d 	bl	8002a30 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>
    if ((result != 0x12) || (amt != 1)) return 2;
 8001776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001778:	2b12      	cmp	r3, #18
 800177a:	d102      	bne.n	8001782 <_ZN10LoRa_class5beginEybhhyh+0x8e>
 800177c:	2801      	cmp	r0, #1
 800177e:	4607      	mov	r7, r0
 8001780:	d003      	beq.n	800178a <_ZN10LoRa_class5beginEybhhyh+0x96>
 8001782:	2002      	movs	r0, #2
}
 8001784:	b03d      	add	sp, #244	; 0xf4
 8001786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 800178a:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 8001a44 <_ZN10LoRa_class5beginEybhhyh+0x350>
 800178e:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 8001792:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001796:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800179a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800179e:	f8df c2a8 	ldr.w	ip, [pc, #680]	; 8001a48 <_ZN10LoRa_class5beginEybhhyh+0x354>
 80017a2:	f10d 0bb8 	add.w	fp, sp, #184	; 0xb8
 80017a6:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 80017aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80017ae:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 80017b2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80017b6:	f8df e294 	ldr.w	lr, [pc, #660]	; 8001a4c <_ZN10LoRa_class5beginEybhhyh+0x358>
 80017ba:	f10d 0cd4 	add.w	ip, sp, #212	; 0xd4
 80017be:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 80017c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80017c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80017ca:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 80017ce:	f10d 0b9c 	add.w	fp, sp, #156	; 0x9c
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 80017d2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 80017d6:	2303      	movs	r3, #3
 80017d8:	aa20      	add	r2, sp, #128	; 0x80
 80017da:	4659      	mov	r1, fp
 80017dc:	4630      	mov	r0, r6
    uint32_t values[3] = {1, 0, mode};
 80017de:	e9cd 7520 	strd	r7, r5, [sp, #128]	; 0x80
 80017e2:	9522      	str	r5, [sp, #136]	; 0x88
    result = _reg_field.set_field_value(fields, values, amt);
 80017e4:	f000 fd4a 	bl	800227c <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
        result = _reg_field.register_write(fields, amt, true, true);
 80017e8:	9700      	str	r7, [sp, #0]
 80017ea:	463b      	mov	r3, r7
 80017ec:	4659      	mov	r1, fp
 80017ee:	2203      	movs	r2, #3
 80017f0:	4630      	mov	r0, r6
 80017f2:	f000 fda7 	bl	8002344 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
    if(mode_sleep() != 1) return 3;
 80017f6:	2801      	cmp	r0, #1
        result = _reg_field.register_write(fields, amt, true, true);
 80017f8:	4607      	mov	r7, r0
    if(mode_sleep() != 1) return 3;
 80017fa:	d003      	beq.n	8001804 <_ZN10LoRa_class5beginEybhhyh+0x110>
 80017fc:	2003      	movs	r0, #3
}
 80017fe:	b03d      	add	sp, #244	; 0xf4
 8001800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001804:	f8df e248 	ldr.w	lr, [pc, #584]	; 8001a50 <_ZN10LoRa_class5beginEybhhyh+0x35c>
 8001808:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
 800180c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001810:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    _frequency = frequency;
 8001814:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
 8001818:	ea4f 43c9 	mov.w	r3, r9, lsl #19
 800181c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
    _frequency = frequency;
 8001820:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8001824:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
 8001828:	ea43 3158 	orr.w	r1, r3, r8, lsr #13
 800182c:	ea4f 40c8 	mov.w	r0, r8, lsl #19
 8001830:	4a7f      	ldr	r2, [pc, #508]	; (8001a30 <_ZN10LoRa_class5beginEybhhyh+0x33c>)
 8001832:	2300      	movs	r3, #0
 8001834:	f7ff f9b8 	bl	8000ba8 <__aeabi_uldivmod>
    result = _reg_field.set_field_value(field, value);
 8001838:	f10d 0854 	add.w	r8, sp, #84	; 0x54
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
 800183c:	9004      	str	r0, [sp, #16]
    result = _reg_field.set_field_value(field, value);
 800183e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8001842:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001846:	f10d 0948 	add.w	r9, sp, #72	; 0x48
 800184a:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 800184e:	4630      	mov	r0, r6
 8001850:	f001 f8e0 	bl	8002a14 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
        result = _reg_field.register_write(field, true, true);
 8001854:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8001858:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800185c:	e9cd 7704 	strd	r7, r7, [sp, #16]
 8001860:	4630      	mov	r0, r6
 8001862:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 8001866:	f000 fe7b 	bl	8002560 <_ZN13LoRa_register14register_writeE13Address_fieldbb>
    if(set_frequency(frequency) != 3) return 4;
 800186a:	2803      	cmp	r0, #3
        result = _reg_field.register_write(field, true, true);
 800186c:	4681      	mov	r9, r0
    if(set_frequency(frequency) != 3) return 4;
 800186e:	d001      	beq.n	8001874 <_ZN10LoRa_class5beginEybhhyh+0x180>
 8001870:	2004      	movs	r0, #4
 8001872:	e787      	b.n	8001784 <_ZN10LoRa_class5beginEybhhyh+0x90>
 8001874:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 8001a54 <_ZN10LoRa_class5beginEybhhyh+0x360>
 8001878:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800187c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001880:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001884:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001888:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    result = _reg_field.set_field_value(field, value);
 800188c:	f10d 0870 	add.w	r8, sp, #112	; 0x70
 8001890:	9504      	str	r5, [sp, #16]
 8001892:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8001896:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800189a:	ab19      	add	r3, sp, #100	; 0x64
 800189c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800189e:	4630      	mov	r0, r6
 80018a0:	f001 f8b8 	bl	8002a14 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
        result = _reg_field.register_write(field, true, true);
 80018a4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80018a8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80018ac:	e9cd 7704 	strd	r7, r7, [sp, #16]
 80018b0:	ab19      	add	r3, sp, #100	; 0x64
 80018b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018b4:	4630      	mov	r0, r6
 80018b6:	f000 fe53 	bl	8002560 <_ZN13LoRa_register14register_writeE13Address_fieldbb>
    if(field_set(FifoRxBaseAddr, 0x00) != 1) return 5;
 80018ba:	2801      	cmp	r0, #1
        result = _reg_field.register_write(field, true, true);
 80018bc:	4680      	mov	r8, r0
    if(field_set(FifoRxBaseAddr, 0x00) != 1) return 5;
 80018be:	d001      	beq.n	80018c4 <_ZN10LoRa_class5beginEybhhyh+0x1d0>
 80018c0:	2005      	movs	r0, #5
 80018c2:	e75f      	b.n	8001784 <_ZN10LoRa_class5beginEybhhyh+0x90>
 80018c4:	f8df c190 	ldr.w	ip, [pc, #400]	; 8001a58 <_ZN10LoRa_class5beginEybhhyh+0x364>
 80018c8:	af20      	add	r7, sp, #128	; 0x80
 80018ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80018ce:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80018d0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80018d4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    result = _reg_field.set_field_value(field, value);
 80018d8:	af23      	add	r7, sp, #140	; 0x8c
 80018da:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    if(field_set(FifoTxBaseAddr, _FifoTxBaseAddr) != 1) return 6;
 80018de:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
    result = _reg_field.set_field_value(field, value);
 80018e2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80018e6:	f8cd e010 	str.w	lr, [sp, #16]
 80018ea:	ab20      	add	r3, sp, #128	; 0x80
 80018ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018ee:	4630      	mov	r0, r6
 80018f0:	f001 f890 	bl	8002a14 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
        result = _reg_field.register_write(field, true, true);
 80018f4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80018f8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80018fc:	e9cd 8804 	strd	r8, r8, [sp, #16]
 8001900:	ab20      	add	r3, sp, #128	; 0x80
 8001902:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001904:	4630      	mov	r0, r6
 8001906:	f000 fe2b 	bl	8002560 <_ZN13LoRa_register14register_writeE13Address_fieldbb>
    if(field_set(FifoTxBaseAddr, _FifoTxBaseAddr) != 1) return 6;
 800190a:	2801      	cmp	r0, #1
        result = _reg_field.register_write(field, true, true);
 800190c:	4680      	mov	r8, r0
    if(field_set(FifoTxBaseAddr, _FifoTxBaseAddr) != 1) return 6;
 800190e:	d001      	beq.n	8001914 <_ZN10LoRa_class5beginEybhhyh+0x220>
 8001910:	2006      	movs	r0, #6
 8001912:	e737      	b.n	8001784 <_ZN10LoRa_class5beginEybhhyh+0x90>
 8001914:	46dc      	mov	ip, fp
 8001916:	f8df e144 	ldr.w	lr, [pc, #324]	; 8001a5c <_ZN10LoRa_class5beginEybhhyh+0x368>
    result = _reg_field.set_field_value(field, value);
 800191a:	af2a      	add	r7, sp, #168	; 0xa8
 800191c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001920:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001924:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001928:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800192c:	f8cd 9010 	str.w	r9, [sp, #16]
 8001930:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8001934:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001938:	4630      	mov	r0, r6
 800193a:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 800193e:	f001 f869 	bl	8002a14 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
        result = _reg_field.register_write(field, true, true);
 8001942:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8001946:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800194a:	e9cd 8804 	strd	r8, r8, [sp, #16]
 800194e:	4630      	mov	r0, r6
 8001950:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 8001954:	f000 fe04 	bl	8002560 <_ZN13LoRa_register14register_writeE13Address_fieldbb>
    if(field_set(LnaBoostHf, 0x03) != 1) return 7;
 8001958:	2801      	cmp	r0, #1
 800195a:	d001      	beq.n	8001960 <_ZN10LoRa_class5beginEybhhyh+0x26c>
 800195c:	2007      	movs	r0, #7
 800195e:	e711      	b.n	8001784 <_ZN10LoRa_class5beginEybhhyh+0x90>
    if(field_set(LowDataRateOptimize, 0) != 1) return 8;
 8001960:	4e34      	ldr	r6, [pc, #208]	; (8001a34 <_ZN10LoRa_class5beginEybhhyh+0x340>)
 8001962:	9504      	str	r5, [sp, #16]
 8001964:	f106 030c 	add.w	r3, r6, #12
 8001968:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800196a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800196e:	4620      	mov	r0, r4
 8001970:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001974:	f7ff fbe4 	bl	8001140 <_ZN10LoRa_class9field_setE13Address_fieldmb.constprop.22>
 8001978:	2801      	cmp	r0, #1
 800197a:	d001      	beq.n	8001980 <_ZN10LoRa_class5beginEybhhyh+0x28c>
 800197c:	2008      	movs	r0, #8
 800197e:	e701      	b.n	8001784 <_ZN10LoRa_class5beginEybhhyh+0x90>
    if(field_set(AgcAutoOn, 1) != 1) return 9;
 8001980:	4d2d      	ldr	r5, [pc, #180]	; (8001a38 <_ZN10LoRa_class5beginEybhhyh+0x344>)
 8001982:	9004      	str	r0, [sp, #16]
 8001984:	f105 030c 	add.w	r3, r5, #12
 8001988:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800198a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800198e:	4620      	mov	r0, r4
 8001990:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001994:	f7ff fbd4 	bl	8001140 <_ZN10LoRa_class9field_setE13Address_fieldmb.constprop.22>
 8001998:	2801      	cmp	r0, #1
 800199a:	d001      	beq.n	80019a0 <_ZN10LoRa_class5beginEybhhyh+0x2ac>
 800199c:	2009      	movs	r0, #9
 800199e:	e6f1      	b.n	8001784 <_ZN10LoRa_class5beginEybhhyh+0x90>
    if(set_TX_power(signal_power, paboost) != 2) return 10;
 80019a0:	4652      	mov	r2, sl
 80019a2:	9907      	ldr	r1, [sp, #28]
 80019a4:	2307      	movs	r3, #7
 80019a6:	4620      	mov	r0, r4
 80019a8:	f7ff fd24 	bl	80013f4 <_ZN10LoRa_class12set_TX_powerEhbh>
 80019ac:	2802      	cmp	r0, #2
 80019ae:	d001      	beq.n	80019b4 <_ZN10LoRa_class5beginEybhhyh+0x2c0>
 80019b0:	200a      	movs	r0, #10
 80019b2:	e6e7      	b.n	8001784 <_ZN10LoRa_class5beginEybhhyh+0x90>
    if(set_spreading_factor(SF) != 3) return 11;
 80019b4:	9908      	ldr	r1, [sp, #32]
 80019b6:	4620      	mov	r0, r4
 80019b8:	f7ff fd92 	bl	80014e0 <_ZN10LoRa_class20set_spreading_factorEh>
 80019bc:	2803      	cmp	r0, #3
 80019be:	d001      	beq.n	80019c4 <_ZN10LoRa_class5beginEybhhyh+0x2d0>
 80019c0:	200b      	movs	r0, #11
 80019c2:	e6df      	b.n	8001784 <_ZN10LoRa_class5beginEybhhyh+0x90>
    if(set_signal_bandwidth(SBW) != 1) return 12;
 80019c4:	ab4a      	add	r3, sp, #296	; 0x128
 80019c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ca:	4620      	mov	r0, r4
 80019cc:	f7ff fddc 	bl	8001588 <_ZN10LoRa_class20set_signal_bandwidthEy>
 80019d0:	2801      	cmp	r0, #1
 80019d2:	d001      	beq.n	80019d8 <_ZN10LoRa_class5beginEybhhyh+0x2e4>
 80019d4:	200c      	movs	r0, #12
 80019d6:	e6d5      	b.n	8001784 <_ZN10LoRa_class5beginEybhhyh+0x90>
    if(field_set(SyncWord, sync_word) != 1) return 13;
 80019d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019da:	4d18      	ldr	r5, [pc, #96]	; (8001a3c <_ZN10LoRa_class5beginEybhhyh+0x348>)
 80019dc:	9304      	str	r3, [sp, #16]
 80019de:	f105 030c 	add.w	r3, r5, #12
 80019e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019e4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80019e8:	4620      	mov	r0, r4
 80019ea:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80019ee:	f7ff fba7 	bl	8001140 <_ZN10LoRa_class9field_setE13Address_fieldmb.constprop.22>
 80019f2:	2801      	cmp	r0, #1
 80019f4:	d001      	beq.n	80019fa <_ZN10LoRa_class5beginEybhhyh+0x306>
 80019f6:	200d      	movs	r0, #13
 80019f8:	e6c4      	b.n	8001784 <_ZN10LoRa_class5beginEybhhyh+0x90>
    return field_set(RxPayloadCrcOn, 1);
 80019fa:	4d11      	ldr	r5, [pc, #68]	; (8001a40 <_ZN10LoRa_class5beginEybhhyh+0x34c>)
 80019fc:	9004      	str	r0, [sp, #16]
 80019fe:	f105 030c 	add.w	r3, r5, #12
 8001a02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a04:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001a08:	4620      	mov	r0, r4
 8001a0a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001a0e:	f7ff fb97 	bl	8001140 <_ZN10LoRa_class9field_setE13Address_fieldmb.constprop.22>
    if(crc_enable() != 1) return 14;
 8001a12:	2801      	cmp	r0, #1
    return field_set(RxPayloadCrcOn, 1);
 8001a14:	4601      	mov	r1, r0
    if(crc_enable() != 1) return 14;
 8001a16:	d001      	beq.n	8001a1c <_ZN10LoRa_class5beginEybhhyh+0x328>
 8001a18:	200e      	movs	r0, #14
 8001a1a:	e6b3      	b.n	8001784 <_ZN10LoRa_class5beginEybhhyh+0x90>
    return set_mode(MODE_STDBY);
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f7ff fcad 	bl	800137c <_ZN10LoRa_class8set_modeEh>
    return 0;
 8001a22:	2801      	cmp	r0, #1
 8001a24:	bf14      	ite	ne
 8001a26:	200f      	movne	r0, #15
 8001a28:	2000      	moveq	r0, #0
 8001a2a:	e6ab      	b.n	8001784 <_ZN10LoRa_class5beginEybhhyh+0x90>
 8001a2c:	20001610 	.word	0x20001610
 8001a30:	01e84800 	.word	0x01e84800
 8001a34:	20001194 	.word	0x20001194
 8001a38:	20000cc4 	.word	0x20000cc4
 8001a3c:	20001514 	.word	0x20001514
 8001a40:	20001488 	.word	0x20001488
 8001a44:	20001178 	.word	0x20001178
 8001a48:	200011b0 	.word	0x200011b0
 8001a4c:	20001204 	.word	0x20001204
 8001a50:	200010d0 	.word	0x200010d0
 8001a54:	20000ff0 	.word	0x20000ff0
 8001a58:	20001060 	.word	0x20001060
 8001a5c:	20001124 	.word	0x20001124

08001a60 <_ZN10LoRa_class13sender_packetEPhhm>:
bool LoRa_class::sender_packet(uint8_t* packet, uint8_t len, uint32_t wait) {
 8001a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a64:	4683      	mov	fp, r0
    uint32_t values[3] = {1, 0, mode};
 8001a66:	2701      	movs	r7, #1
 8001a68:	f04f 0c00 	mov.w	ip, #0
bool LoRa_class::sender_packet(uint8_t* packet, uint8_t len, uint32_t wait) {
 8001a6c:	b0bd      	sub	sp, #244	; 0xf4
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8001a6e:	4e81      	ldr	r6, [pc, #516]	; (8001c74 <_ZN10LoRa_class13sender_packetEPhhm+0x214>)
 8001a70:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
bool LoRa_class::sender_packet(uint8_t* packet, uint8_t len, uint32_t wait) {
 8001a74:	4615      	mov	r5, r2
 8001a76:	9307      	str	r3, [sp, #28]
 8001a78:	4689      	mov	r9, r1
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8001a7a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a7c:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8001a80:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001a84:	4e7c      	ldr	r6, [pc, #496]	; (8001c78 <_ZN10LoRa_class13sender_packetEPhhm+0x218>)
 8001a86:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 8001a8a:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8001a8e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a90:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001a94:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001a98:	4e78      	ldr	r6, [pc, #480]	; (8001c7c <_ZN10LoRa_class13sender_packetEPhhm+0x21c>)
 8001a9a:	ac35      	add	r4, sp, #212	; 0xd4
 8001a9c:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8001aa0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aa4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 8001aa8:	f10b 083c 	add.w	r8, fp, #60	; 0x3c
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8001aac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	aa20      	add	r2, sp, #128	; 0x80
 8001ab4:	a927      	add	r1, sp, #156	; 0x9c
 8001ab6:	4640      	mov	r0, r8
 8001ab8:	4e71      	ldr	r6, [pc, #452]	; (8001c80 <_ZN10LoRa_class13sender_packetEPhhm+0x220>)
    uint32_t values[3] = {1, 0, mode};
 8001aba:	e9cd 7c20 	strd	r7, ip, [sp, #128]	; 0x80
 8001abe:	9722      	str	r7, [sp, #136]	; 0x88
 8001ac0:	ac0b      	add	r4, sp, #44	; 0x2c
    result = _reg_field.set_field_value(fields, values, amt);
 8001ac2:	f000 fbdb 	bl	800227c <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
        result = _reg_field.register_write(fields, amt, true, true);
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	a927      	add	r1, sp, #156	; 0x9c
 8001aca:	2203      	movs	r2, #3
 8001acc:	9700      	str	r7, [sp, #0]
 8001ace:	4640      	mov	r0, r8
 8001ad0:	f000 fc38 	bl	8002344 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
 8001ad4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001adc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result = _reg_field.set_field_value(field, value);
 8001ae0:	ac0e      	add	r4, sp, #56	; 0x38
 8001ae2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    field_set(FifoAddrPtr, _FifoTxBaseAddr);
 8001ae6:	f89b c038 	ldrb.w	ip, [fp, #56]	; 0x38
    result = _reg_field.set_field_value(field, value);
 8001aea:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001aee:	f8cd c010 	str.w	ip, [sp, #16]
 8001af2:	ae0b      	add	r6, sp, #44	; 0x2c
 8001af4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001af8:	4640      	mov	r0, r8
 8001afa:	f000 ff8b 	bl	8002a14 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
        result = _reg_field.register_write(field, true, true);
 8001afe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b02:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001b06:	e9cd 7704 	strd	r7, r7, [sp, #16]
 8001b0a:	4640      	mov	r0, r8
 8001b0c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001b10:	f000 fd26 	bl	8002560 <_ZN13LoRa_register14register_writeE13Address_fieldbb>
    _packet_length += len;
 8001b14:	f88b 5039 	strb.w	r5, [fp, #57]	; 0x39
    for(int i = 0; i < len; ++i)
 8001b18:	b34d      	cbz	r5, 8001b6e <_ZN10LoRa_class13sender_packetEPhhm+0x10e>
 8001b1a:	eb09 0a05 	add.w	sl, r9, r5
 8001b1e:	ae12      	add	r6, sp, #72	; 0x48
 8001b20:	ad15      	add	r5, sp, #84	; 0x54
 8001b22:	4634      	mov	r4, r6
 8001b24:	f8df c164 	ldr.w	ip, [pc, #356]	; 8001c8c <_ZN10LoRa_class13sender_packetEPhhm+0x22c>
        field_set(Fifo, packet[i]);
 8001b28:	f819 eb01 	ldrb.w	lr, [r9], #1
 8001b2c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001b30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b32:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8001b36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b3a:	f8cd e010 	str.w	lr, [sp, #16]
    result = _reg_field.set_field_value(field, value);
 8001b3e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b42:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001b46:	4640      	mov	r0, r8
 8001b48:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001b4c:	f000 ff62 	bl	8002a14 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
        result = _reg_field.register_write(field, true, true);
 8001b50:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b54:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001b58:	e9cd 7704 	strd	r7, r7, [sp, #16]
 8001b5c:	4640      	mov	r0, r8
 8001b5e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001b62:	f000 fcfd 	bl	8002560 <_ZN13LoRa_register14register_writeE13Address_fieldbb>
    for(int i = 0; i < len; ++i)
 8001b66:	45ca      	cmp	sl, r9
 8001b68:	d1db      	bne.n	8001b22 <_ZN10LoRa_class13sender_packetEPhhm+0xc2>
 8001b6a:	f89b 5039 	ldrb.w	r5, [fp, #57]	; 0x39
        result = _reg_field.register_write(field, true, true);
 8001b6e:	2701      	movs	r7, #1
 8001b70:	4e44      	ldr	r6, [pc, #272]	; (8001c84 <_ZN10LoRa_class13sender_packetEPhhm+0x224>)
 8001b72:	ac19      	add	r4, sp, #100	; 0x64
 8001b74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b78:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001b7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    field_set(PayloadLength, _packet_length);
 8001b80:	9504      	str	r5, [sp, #16]
    result = _reg_field.set_field_value(field, value);
 8001b82:	ac1c      	add	r4, sp, #112	; 0x70
 8001b84:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b88:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001b8c:	ae19      	add	r6, sp, #100	; 0x64
 8001b8e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001b92:	4640      	mov	r0, r8
 8001b94:	f000 ff3e 	bl	8002a14 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
        result = _reg_field.register_write(field, true, true);
 8001b98:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b9c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001ba0:	9705      	str	r7, [sp, #20]
 8001ba2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001ba6:	4640      	mov	r0, r8
 8001ba8:	9704      	str	r7, [sp, #16]
 8001baa:	f000 fcd9 	bl	8002560 <_ZN13LoRa_register14register_writeE13Address_fieldbb>
    if (set_dio & (_dio0_pin != 0))
 8001bae:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d13e      	bne.n	8001c34 <_ZN10LoRa_class13sender_packetEPhhm+0x1d4>
    uint32_t values[3] = {1, 0, mode};
 8001bb6:	2603      	movs	r6, #3
 8001bb8:	2701      	movs	r7, #1
 8001bba:	f04f 0900 	mov.w	r9, #0
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8001bbe:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8001c74 <_ZN10LoRa_class13sender_packetEPhhm+0x214>
 8001bc2:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 8001bc6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001bca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001bce:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8001bd2:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8001c78 <_ZN10LoRa_class13sender_packetEPhhm+0x218>
 8001bd6:	ad2e      	add	r5, sp, #184	; 0xb8
 8001bd8:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8001bdc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001be2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8001be6:	f8df c094 	ldr.w	ip, [pc, #148]	; 8001c7c <_ZN10LoRa_class13sender_packetEPhhm+0x21c>
 8001bea:	ac35      	add	r4, sp, #212	; 0xd4
 8001bec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001bf0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bf6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 8001bfa:	4633      	mov	r3, r6
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8001bfc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result = _reg_field.set_field_value(fields, values, amt);
 8001c00:	aa08      	add	r2, sp, #32
 8001c02:	a927      	add	r1, sp, #156	; 0x9c
 8001c04:	4640      	mov	r0, r8
    uint32_t values[3] = {1, 0, mode};
 8001c06:	e9cd 9609 	strd	r9, r6, [sp, #36]	; 0x24
 8001c0a:	9708      	str	r7, [sp, #32]
    result = _reg_field.set_field_value(fields, values, amt);
 8001c0c:	f000 fb36 	bl	800227c <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
        result = _reg_field.register_write(fields, amt, true, true);
 8001c10:	463b      	mov	r3, r7
 8001c12:	9700      	str	r7, [sp, #0]
 8001c14:	4632      	mov	r2, r6
 8001c16:	a927      	add	r1, sp, #156	; 0x9c
 8001c18:	4640      	mov	r0, r8
 8001c1a:	f000 fb93 	bl	8002344 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
    if(wait > 0) {
 8001c1e:	9b07      	ldr	r3, [sp, #28]
 8001c20:	b123      	cbz	r3, 8001c2c <_ZN10LoRa_class13sender_packetEPhhm+0x1cc>
 8001c22:	464a      	mov	r2, r9
 8001c24:	4619      	mov	r1, r3
 8001c26:	4658      	mov	r0, fp
 8001c28:	f7ff fab0 	bl	800118c <_ZN10LoRa_class10packet_endEmb.part.2>
}
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	b03d      	add	sp, #244	; 0xf4
 8001c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c34:	4d14      	ldr	r5, [pc, #80]	; (8001c88 <_ZN10LoRa_class13sender_packetEPhhm+0x228>)
    result = _reg_field.set_field_value(field, value);
 8001c36:	9704      	str	r7, [sp, #16]
 8001c38:	ac20      	add	r4, sp, #128	; 0x80
 8001c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001c46:	ac23      	add	r4, sp, #140	; 0x8c
 8001c48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c4c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001c50:	ab20      	add	r3, sp, #128	; 0x80
 8001c52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c54:	4640      	mov	r0, r8
 8001c56:	f000 fedd 	bl	8002a14 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
        result = _reg_field.register_write(field, true, true);
 8001c5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c5e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8001c62:	e9cd 7704 	strd	r7, r7, [sp, #16]
 8001c66:	ab20      	add	r3, sp, #128	; 0x80
 8001c68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c6a:	4640      	mov	r0, r8
 8001c6c:	f000 fc78 	bl	8002560 <_ZN13LoRa_register14register_writeE13Address_fieldbb>
 8001c70:	e7a1      	b.n	8001bb6 <_ZN10LoRa_class13sender_packetEPhhm+0x156>
 8001c72:	bf00      	nop
 8001c74:	20001178 	.word	0x20001178
 8001c78:	200011b0 	.word	0x200011b0
 8001c7c:	20001204 	.word	0x20001204
 8001c80:	20000fd4 	.word	0x20000fd4
 8001c84:	20001354 	.word	0x20001354
 8001c88:	20000ea0 	.word	0x20000ea0
 8001c8c:	20000fb8 	.word	0x20000fb8

08001c90 <_GLOBAL__sub_I_LoRa>:
class LoRa_class LoRa;
 8001c90:	4801      	ldr	r0, [pc, #4]	; (8001c98 <_GLOBAL__sub_I_LoRa+0x8>)
 8001c92:	f7ff bb0f 	b.w	80012b4 <_ZN10LoRa_classC1Ev>
 8001c96:	bf00      	nop
 8001c98:	20000120 	.word	0x20000120

08001c9c <_GLOBAL__sub_D_LoRa>:
 8001c9c:	4801      	ldr	r0, [pc, #4]	; (8001ca4 <_GLOBAL__sub_D_LoRa+0x8>)
 8001c9e:	f7ff bb37 	b.w	8001310 <_ZN10LoRa_classD1Ev>
 8001ca2:	bf00      	nop
 8001ca4:	20000120 	.word	0x20000120

08001ca8 <_ZN11LoRa_packetC1Ev>:
#include "LoRa_packet.h"

LoRa_packet::LoRa_packet() {}
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2100      	movs	r1, #0
 8001cac:	6002      	str	r2, [r0, #0]
 8001cae:	6081      	str	r1, [r0, #8]
 8001cb0:	8082      	strh	r2, [r0, #4]
 8001cb2:	7302      	strb	r2, [r0, #12]
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop

08001cb8 <_ZN11LoRa_packetD1Ev>:

LoRa_packet::LoRa_packet(uint8_t* data, uint8_t len, bool crc_error, uint8_t rssi, float snr) {
    set_packet(data, len, crc_error, rssi, snr);
}

LoRa_packet::~LoRa_packet() {
 8001cb8:	b510      	push	{r4, lr}
 8001cba:	4604      	mov	r4, r0
    if(_data != nullptr) {
 8001cbc:	6800      	ldr	r0, [r0, #0]
 8001cbe:	b108      	cbz	r0, 8001cc4 <_ZN11LoRa_packetD1Ev+0xc>
        delete[] _data;
 8001cc0:	f008 ff24 	bl	800ab0c <_ZdaPv>
        _data = nullptr;
        _len = 0;
    }
}
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	bd10      	pop	{r4, pc}

08001cc8 <_ZN13LoRa_registerC1Ev>:
#include "LoRa_register.h"


LoRa_register::LoRa_register() {
 8001cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ccc:	4604      	mov	r4, r0
 8001cce:	4d2e      	ldr	r5, [pc, #184]	; (8001d88 <_ZN13LoRa_registerC1Ev+0xc0>)
 8001cd0:	f100 07f0 	add.w	r7, r0, #240	; 0xf0
 8001cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001cd8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cdc:	4d2b      	ldr	r5, [pc, #172]	; (8001d8c <_ZN13LoRa_registerC1Ev+0xc4>)
 8001cde:	f504 7686 	add.w	r6, r4, #268	; 0x10c
 8001ce2:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8001ce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001cea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    _send = false;
 8001cee:	f04f 0800 	mov.w	r8, #0
 8001cf2:	f04f 0970 	mov.w	r9, #112	; 0x70
LoRa_register::LoRa_register() {
 8001cf6:	4d26      	ldr	r5, [pc, #152]	; (8001d90 <_ZN13LoRa_registerC1Ev+0xc8>)
 8001cf8:	f504 7794 	add.w	r7, r4, #296	; 0x128
 8001cfc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8001d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d02:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001d04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d08:	4d22      	ldr	r5, [pc, #136]	; (8001d94 <_ZN13LoRa_registerC1Ev+0xcc>)
 8001d0a:	f504 76a2 	add.w	r6, r4, #324	; 0x144
 8001d0e:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8001d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d14:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001d16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d1a:	4d1f      	ldr	r5, [pc, #124]	; (8001d98 <_ZN13LoRa_registerC1Ev+0xd0>)
 8001d1c:	f504 77b0 	add.w	r7, r4, #352	; 0x160
 8001d20:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8001d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d26:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001d28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d2c:	4d1b      	ldr	r5, [pc, #108]	; (8001d9c <_ZN13LoRa_registerC1Ev+0xd4>)
 8001d2e:	f504 76be 	add.w	r6, r4, #380	; 0x17c
 8001d32:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8001d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d38:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001d3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d3e:	4d18      	ldr	r5, [pc, #96]	; (8001da0 <_ZN13LoRa_registerC1Ev+0xd8>)
 8001d40:	f504 77cc 	add.w	r7, r4, #408	; 0x198
 8001d44:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8001d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d4a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001d4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d50:	4e14      	ldr	r6, [pc, #80]	; (8001da4 <_ZN13LoRa_registerC1Ev+0xdc>)
 8001d52:	f504 75da 	add.w	r5, r4, #436	; 0x1b4
 8001d56:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8001d5a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d5e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001d62:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001d66:	4641      	mov	r1, r8
 8001d68:	464a      	mov	r2, r9
    _send = false;
 8001d6a:	f884 80ec 	strb.w	r8, [r4, #236]	; 0xec
 8001d6e:	f104 000c 	add.w	r0, r4, #12
 8001d72:	f009 ff7d 	bl	800bc70 <memset>
 8001d76:	464a      	mov	r2, r9
 8001d78:	4641      	mov	r1, r8
 8001d7a:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8001d7e:	f009 ff77 	bl	800bc70 <memset>
    clear();
}
 8001d82:	4620      	mov	r0, r4
 8001d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d88:	200014a4 	.word	0x200014a4
 8001d8c:	20001450 	.word	0x20001450
 8001d90:	2000131c 	.word	0x2000131c
 8001d94:	200015a0 	.word	0x200015a0
 8001d98:	20001568 	.word	0x20001568
 8001d9c:	20000df8 	.word	0x20000df8
 8001da0:	20000f64 	.word	0x20000f64
 8001da4:	20000dc0 	.word	0x20000dc0

08001da8 <_ZN13LoRa_registerD1Ev>:
    _send = false;
    clear();
    init(spi, nss_port, nss_pin);
}
LoRa_register::~LoRa_register() {
}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop

08001dac <_ZN13LoRa_register4initEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:

void LoRa_register::init(SPI_HandleTypeDef* spi, GPIO_TypeDef* nss_port, uint16_t nss_pin) {
    _spi = spi;
 8001dac:	6001      	str	r1, [r0, #0]
    _nss_port = nss_port;
 8001dae:	6082      	str	r2, [r0, #8]
	_nss_pin = nss_pin;
 8001db0:	8083      	strh	r3, [r0, #4]
}
 8001db2:	4770      	bx	lr

08001db4 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8001db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001db8:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
 8001dbc:	429c      	cmp	r4, r3
      vector<_Tp, _Alloc>::
 8001dbe:	b083      	sub	sp, #12
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001dc0:	d008      	beq.n	8001dd4 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x20>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001dc2:	b114      	cbz	r4, 8001dca <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x16>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8001dc4:	780b      	ldrb	r3, [r1, #0]
 8001dc6:	7023      	strb	r3, [r4, #0]
 8001dc8:	6844      	ldr	r4, [r0, #4]
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8001dca:	3401      	adds	r4, #1
 8001dcc:	6044      	str	r4, [r0, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8001dce:	b003      	add	sp, #12
 8001dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001dd4:	6803      	ldr	r3, [r0, #0]
 8001dd6:	9101      	str	r1, [sp, #4]
 8001dd8:	1ae6      	subs	r6, r4, r3

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 8001dda:	1c73      	adds	r3, r6, #1
 8001ddc:	4605      	mov	r5, r0
 8001dde:	d039      	beq.n	8001e54 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0xa0>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001de0:	b34e      	cbz	r6, 8001e36 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x82>
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
 8001de2:	ea4f 0846 	mov.w	r8, r6, lsl #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001de6:	4546      	cmp	r6, r8
 8001de8:	bf88      	it	hi
 8001dea:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001dee:	4640      	mov	r0, r8
 8001df0:	f008 fe92 	bl	800ab18 <_Znwj>
 8001df4:	e9d5 a200 	ldrd	sl, r2, [r5]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001df8:	42f0      	cmn	r0, r6
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001dfa:	4681      	mov	r9, r0
 8001dfc:	4480      	add	r8, r0
 8001dfe:	eba4 070a 	sub.w	r7, r4, sl
 8001e02:	eba2 0b04 	sub.w	fp, r2, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001e06:	d002      	beq.n	8001e0e <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x5a>
 8001e08:	9b01      	ldr	r3, [sp, #4]
 8001e0a:	781a      	ldrb	r2, [r3, #0]
 8001e0c:	5582      	strb	r2, [r0, r6]
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 8001e0e:	b9df      	cbnz	r7, 8001e48 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x94>
	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
	     __new_start, _M_get_Tp_allocator());

	  ++__new_finish;
 8001e10:	3701      	adds	r7, #1
 8001e12:	444f      	add	r7, r9
 8001e14:	f1bb 0f00 	cmp.w	fp, #0
 8001e18:	d110      	bne.n	8001e3c <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x88>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
	  return __result + _Num;
 8001e1a:	445f      	add	r7, fp
	if (__p)
 8001e1c:	f1ba 0f00 	cmp.w	sl, #0
 8001e20:	d002      	beq.n	8001e28 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x74>
	::operator delete(__p);
 8001e22:	4650      	mov	r0, sl
 8001e24:	f008 fe92 	bl	800ab4c <_ZdlPv>
		    _M_get_Tp_allocator());
      _M_deallocate(this->_M_impl._M_start,
		    this->_M_impl._M_end_of_storage
		    - this->_M_impl._M_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
 8001e28:	e9c5 9700 	strd	r9, r7, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001e2c:	f8c5 8008 	str.w	r8, [r5, #8]
      }
 8001e30:	b003      	add	sp, #12
 8001e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const size_type __len = size() + std::max(size(), __n);
 8001e36:	f04f 0801 	mov.w	r8, #1
 8001e3a:	e7d8      	b.n	8001dee <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x3a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001e3c:	4621      	mov	r1, r4
 8001e3e:	465a      	mov	r2, fp
 8001e40:	4638      	mov	r0, r7
 8001e42:	f009 fef1 	bl	800bc28 <memcpy>
 8001e46:	e7e8      	b.n	8001e1a <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x66>
 8001e48:	463a      	mov	r2, r7
 8001e4a:	4651      	mov	r1, sl
 8001e4c:	4648      	mov	r0, r9
 8001e4e:	f009 fef6 	bl	800bc3e <memmove>
 8001e52:	e7dd      	b.n	8001e10 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x5c>
	  __throw_length_error(__N(__s));
 8001e54:	4801      	ldr	r0, [pc, #4]	; (8001e5c <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0xa8>)
 8001e56:	f008 fe7b 	bl	800ab50 <_ZSt20__throw_length_errorPKc>
 8001e5a:	bf00      	nop
 8001e5c:	0800bea0 	.word	0x0800bea0

08001e60 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_>:
            if(field.get_registers()[i].mask() != 0xFF)
                return true;
    }
    return false;
}
bool LoRa_register::check_read(Address_field* fields, uint8_t amt_fields, std::vector<uint8_t>* reg_read, std::vector<uint8_t>* reg_not_read) {
 8001e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e64:	4614      	mov	r4, r2
 8001e66:	b0a5      	sub	sp, #148	; 0x94
 8001e68:	af08      	add	r7, sp, #32
 8001e6a:	4682      	mov	sl, r0
 8001e6c:	460d      	mov	r5, r1
 8001e6e:	4638      	mov	r0, r7
 8001e70:	2270      	movs	r2, #112	; 0x70
 8001e72:	2100      	movs	r1, #0
 8001e74:	9301      	str	r3, [sp, #4]
 8001e76:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
 8001e78:	f009 fefa 	bl	800bc70 <memset>
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
        reg_bit[i] = 0;
    }
    // Достаём из полей значения битов регистров
    uint8_t adr;
    for(int i = 0; i < amt_fields; ++i) {
 8001e7c:	b33c      	cbz	r4, 8001ece <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x6e>
 8001e7e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8001e82:	eb05 0884 	add.w	r8, r5, r4, lsl #2
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8001e86:	f04f 0900 	mov.w	r9, #0
 8001e8a:	e018      	b.n	8001ebe <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x5e>
            adr = fields[i].get_registers()[j].address();
 8001e8c:	4628      	mov	r0, r5
 8001e8e:	f7ff f953 	bl	8001138 <_ZN13Address_field13get_registersEv>
 8001e92:	ea4f 0bc9 	mov.w	fp, r9, lsl #3
 8001e96:	4458      	add	r0, fp
 8001e98:	f7ff f858 	bl	8000f4c <_ZN8Register7addressEv>
 8001e9c:	4604      	mov	r4, r0
            reg_bit[adr] |= fields[i].get_registers()[j].mask();
 8001e9e:	4628      	mov	r0, r5
 8001ea0:	f7ff f94a 	bl	8001138 <_ZN13Address_field13get_registersEv>
 8001ea4:	4458      	add	r0, fp
 8001ea6:	f7ff f853 	bl	8000f50 <_ZN8Register4maskEv>
 8001eaa:	aa24      	add	r2, sp, #144	; 0x90
 8001eac:	b2e3      	uxtb	r3, r4
 8001eae:	4413      	add	r3, r2
 8001eb0:	f813 2c70 	ldrb.w	r2, [r3, #-112]
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8001eb4:	f109 0901 	add.w	r9, r9, #1
            reg_bit[adr] |= fields[i].get_registers()[j].mask();
 8001eb8:	4310      	orrs	r0, r2
 8001eba:	f803 0c70 	strb.w	r0, [r3, #-112]
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8001ebe:	4628      	mov	r0, r5
 8001ec0:	f7ff f93c 	bl	800113c <_ZN13Address_field13get_reg_countEv>
 8001ec4:	4548      	cmp	r0, r9
 8001ec6:	dce1      	bgt.n	8001e8c <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x2c>
 8001ec8:	351c      	adds	r5, #28
    for(int i = 0; i < amt_fields; ++i) {
 8001eca:	45a8      	cmp	r8, r5
 8001ecc:	d1db      	bne.n	8001e86 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x26>
        }
    }

    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8001ece:	2400      	movs	r4, #0
      { emplace_back(std::move(__x)); }
 8001ed0:	f8dd 9004 	ldr.w	r9, [sp, #4]
    bool check_reg_read = false;
 8001ed4:	46a3      	mov	fp, r4
 8001ed6:	e013      	b.n	8001f00 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0xa0>
        if (reg_bit[i] != 0x00) {
            if ((reg_bit[i] == 0xFF) || (_registers_state[i] == true)) {
 8001ed8:	eb0a 0304 	add.w	r3, sl, r4
 8001edc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001ee0:	b99b      	cbnz	r3, 8001f0a <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0xaa>
                if(reg_not_read != nullptr)
                    reg_not_read->push_back(i);
            }
            else {
                // Если хоть один бит не занят, то без считывания его можно будет затереть => считывать необходимо
                if(reg_read != nullptr)
 8001ee2:	f1b9 0f00 	cmp.w	r9, #0
 8001ee6:	d023      	beq.n	8001f30 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0xd0>
 8001ee8:	f10d 011f 	add.w	r1, sp, #31
 8001eec:	4648      	mov	r0, r9
                    reg_read->push_back(i);
 8001eee:	f88d 401f 	strb.w	r4, [sp, #31]
                check_reg_read = true;
 8001ef2:	f04f 0b01 	mov.w	fp, #1
 8001ef6:	f7ff ff5d 	bl	8001db4 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8001efa:	3401      	adds	r4, #1
 8001efc:	2c70      	cmp	r4, #112	; 0x70
 8001efe:	d013      	beq.n	8001f28 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0xc8>
        if (reg_bit[i] != 0x00) {
 8001f00:	5d3b      	ldrb	r3, [r7, r4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f9      	beq.n	8001efa <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x9a>
            if ((reg_bit[i] == 0xFF) || (_registers_state[i] == true)) {
 8001f06:	2bff      	cmp	r3, #255	; 0xff
 8001f08:	d1e6      	bne.n	8001ed8 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x78>
                if(reg_not_read != nullptr)
 8001f0a:	2e00      	cmp	r6, #0
 8001f0c:	d0f5      	beq.n	8001efa <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x9a>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001f0e:	e9d6 5301 	ldrd	r5, r3, [r6, #4]
 8001f12:	429d      	cmp	r5, r3
                    reg_not_read->push_back(i);
 8001f14:	b2e2      	uxtb	r2, r4
 8001f16:	d00e      	beq.n	8001f36 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0xd6>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001f18:	b10d      	cbz	r5, 8001f1e <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0xbe>
 8001f1a:	702a      	strb	r2, [r5, #0]
 8001f1c:	6875      	ldr	r5, [r6, #4]
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8001f1e:	3401      	adds	r4, #1
	    ++this->_M_impl._M_finish;
 8001f20:	3501      	adds	r5, #1
 8001f22:	2c70      	cmp	r4, #112	; 0x70
 8001f24:	6075      	str	r5, [r6, #4]
 8001f26:	d1eb      	bne.n	8001f00 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0xa0>
            }
        }
    }
    return check_reg_read; // Наличие хоть одного регистра, который нужно будет считать

}
 8001f28:	4658      	mov	r0, fp
 8001f2a:	b025      	add	sp, #148	; 0x94
 8001f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                check_reg_read = true;
 8001f30:	f04f 0b01 	mov.w	fp, #1
 8001f34:	e7e1      	b.n	8001efa <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x9a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001f36:	6831      	ldr	r1, [r6, #0]
 8001f38:	1a69      	subs	r1, r5, r1
	if (max_size() - size() < __n)
 8001f3a:	1c4b      	adds	r3, r1, #1
 8001f3c:	d044      	beq.n	8001fc8 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x168>
      if (__a < __b)
 8001f3e:	2900      	cmp	r1, #0
 8001f40:	d030      	beq.n	8001fa4 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x144>
	const size_type __len = size() + std::max(size(), __n);
 8001f42:	ea4f 0841 	mov.w	r8, r1, lsl #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001f46:	4541      	cmp	r1, r8
 8001f48:	bf88      	it	hi
 8001f4a:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001f4e:	4640      	mov	r0, r8
 8001f50:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8001f54:	f008 fde0 	bl	800ab18 <_Znwj>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	eb03 0108 	add.w	r1, r3, r8
 8001f5e:	6832      	ldr	r2, [r6, #0]
 8001f60:	6870      	ldr	r0, [r6, #4]
 8001f62:	9103      	str	r1, [sp, #12]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001f64:	9904      	ldr	r1, [sp, #16]
 8001f66:	9202      	str	r2, [sp, #8]
 8001f68:	42cb      	cmn	r3, r1
 8001f6a:	eba5 0802 	sub.w	r8, r5, r2
 8001f6e:	eba0 0205 	sub.w	r2, r0, r5
 8001f72:	9201      	str	r2, [sp, #4]
 8001f74:	bf1c      	itt	ne
 8001f76:	9a05      	ldrne	r2, [sp, #20]
 8001f78:	545a      	strbne	r2, [r3, r1]
	  if (_Num)
 8001f7a:	f1b8 0f00 	cmp.w	r8, #0
 8001f7e:	d11c      	bne.n	8001fba <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x15a>
 8001f80:	9a01      	ldr	r2, [sp, #4]
	  ++__new_finish;
 8001f82:	f108 0801 	add.w	r8, r8, #1
 8001f86:	4498      	add	r8, r3
 8001f88:	b97a      	cbnz	r2, 8001faa <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x14a>
	if (__p)
 8001f8a:	9802      	ldr	r0, [sp, #8]
	  return __result + _Num;
 8001f8c:	4442      	add	r2, r8
 8001f8e:	4615      	mov	r5, r2
 8001f90:	b118      	cbz	r0, 8001f9a <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x13a>
 8001f92:	9301      	str	r3, [sp, #4]
	::operator delete(__p);
 8001f94:	f008 fdda 	bl	800ab4c <_ZdlPv>
 8001f98:	9b01      	ldr	r3, [sp, #4]
      this->_M_impl._M_finish = __new_finish;
 8001f9a:	e9c6 3500 	strd	r3, r5, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001f9e:	9b03      	ldr	r3, [sp, #12]
 8001fa0:	60b3      	str	r3, [r6, #8]
 8001fa2:	e7aa      	b.n	8001efa <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x9a>
	const size_type __len = size() + std::max(size(), __n);
 8001fa4:	f04f 0801 	mov.w	r8, #1
 8001fa8:	e7d1      	b.n	8001f4e <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0xee>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001faa:	4629      	mov	r1, r5
 8001fac:	4640      	mov	r0, r8
 8001fae:	9304      	str	r3, [sp, #16]
 8001fb0:	f009 fe3a 	bl	800bc28 <memcpy>
 8001fb4:	9b04      	ldr	r3, [sp, #16]
 8001fb6:	9a01      	ldr	r2, [sp, #4]
 8001fb8:	e7e7      	b.n	8001f8a <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x12a>
 8001fba:	4618      	mov	r0, r3
 8001fbc:	4642      	mov	r2, r8
 8001fbe:	9902      	ldr	r1, [sp, #8]
 8001fc0:	f009 fe3d 	bl	800bc3e <memmove>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	e7db      	b.n	8001f80 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x120>
	  __throw_length_error(__N(__s));
 8001fc8:	4801      	ldr	r0, [pc, #4]	; (8001fd0 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_+0x170>)
 8001fca:	f008 fdc1 	bl	800ab50 <_ZSt20__throw_length_errorPKc>
 8001fce:	bf00      	nop
 8001fd0:	0800bea0 	.word	0x0800bea0

08001fd4 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8001fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fd8:	4605      	mov	r5, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001fda:	6800      	ldr	r0, [r0, #0]
 8001fdc:	686b      	ldr	r3, [r5, #4]
 8001fde:	b083      	sub	sp, #12
 8001fe0:	1a1b      	subs	r3, r3, r0
	if (max_size() - size() < __n)
 8001fe2:	1c5c      	adds	r4, r3, #1
 8001fe4:	d03c      	beq.n	8002060 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x8c>
 8001fe6:	4688      	mov	r8, r1
 8001fe8:	eba1 0b00 	sub.w	fp, r1, r0
      if (__a < __b)
 8001fec:	b353      	cbz	r3, 8002044 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x70>
	const size_type __len = size() + std::max(size(), __n);
 8001fee:	005e      	lsls	r6, r3, #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001ff0:	42b3      	cmp	r3, r6
 8001ff2:	bf88      	it	hi
 8001ff4:	f04f 36ff 	movhi.w	r6, #4294967295	; 0xffffffff
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001ff8:	4630      	mov	r0, r6
 8001ffa:	9201      	str	r2, [sp, #4]
 8001ffc:	f008 fd8c 	bl	800ab18 <_Znwj>
 8002000:	f8d5 9000 	ldr.w	r9, [r5]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002004:	eb10 0f0b 	cmn.w	r0, fp
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002008:	4607      	mov	r7, r0
 800200a:	4406      	add	r6, r0
 800200c:	eba8 0409 	sub.w	r4, r8, r9
 8002010:	f8d5 a004 	ldr.w	sl, [r5, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002014:	d003      	beq.n	800201e <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x4a>
 8002016:	9a01      	ldr	r2, [sp, #4]
 8002018:	7813      	ldrb	r3, [r2, #0]
 800201a:	f800 300b 	strb.w	r3, [r0, fp]
	  if (_Num)
 800201e:	b9cc      	cbnz	r4, 8002054 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x80>
	  ++__new_finish;
 8002020:	3401      	adds	r4, #1
 8002022:	ebba 0a08 	subs.w	sl, sl, r8
 8002026:	443c      	add	r4, r7
 8002028:	d10e      	bne.n	8002048 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x74>
	  return __result + _Num;
 800202a:	4454      	add	r4, sl
	if (__p)
 800202c:	f1b9 0f00 	cmp.w	r9, #0
 8002030:	d002      	beq.n	8002038 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x64>
	::operator delete(__p);
 8002032:	4648      	mov	r0, r9
 8002034:	f008 fd8a 	bl	800ab4c <_ZdlPv>
      this->_M_impl._M_finish = __new_finish;
 8002038:	e9c5 7400 	strd	r7, r4, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800203c:	60ae      	str	r6, [r5, #8]
    }
 800203e:	b003      	add	sp, #12
 8002040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const size_type __len = size() + std::max(size(), __n);
 8002044:	2601      	movs	r6, #1
 8002046:	e7d7      	b.n	8001ff8 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x24>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002048:	4641      	mov	r1, r8
 800204a:	4652      	mov	r2, sl
 800204c:	4620      	mov	r0, r4
 800204e:	f009 fdeb 	bl	800bc28 <memcpy>
 8002052:	e7ea      	b.n	800202a <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x56>
 8002054:	4622      	mov	r2, r4
 8002056:	4649      	mov	r1, r9
 8002058:	4638      	mov	r0, r7
 800205a:	f009 fdf0 	bl	800bc3e <memmove>
 800205e:	e7df      	b.n	8002020 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x4c>
	  __throw_length_error(__N(__s));
 8002060:	4801      	ldr	r0, [pc, #4]	; (8002068 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x94>)
 8002062:	f008 fd75 	bl	800ab50 <_ZSt20__throw_length_errorPKc>
 8002066:	bf00      	nop
 8002068:	0800bea0 	.word	0x0800bea0

0800206c <_ZN13LoRa_register15field_registersEP13Address_fieldh>:
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800206c:	2100      	movs	r1, #0
std::vector<uint8_t> LoRa_register::field_registers(Address_field* fields, uint8_t amt_fields) {
 800206e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002072:	4606      	mov	r6, r0
 8002074:	b09e      	sub	sp, #120	; 0x78
 8002076:	e9c0 1100 	strd	r1, r1, [r0]
 800207a:	6081      	str	r1, [r0, #8]
    if((fields == nullptr) || (amt_fields == 0))
 800207c:	2a00      	cmp	r2, #0
 800207e:	d038      	beq.n	80020f2 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x86>
 8002080:	461f      	mov	r7, r3
 8002082:	b3b3      	cbz	r3, 80020f2 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x86>
 8002084:	4615      	mov	r5, r2
 8002086:	a802      	add	r0, sp, #8
 8002088:	2270      	movs	r2, #112	; 0x70
                reg_add[adr] = true;
 800208a:	f04f 0801 	mov.w	r8, #1
 800208e:	f009 fdef 	bl	800bc70 <memset>
 8002092:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 8002096:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 800209a:	2400      	movs	r4, #0
 800209c:	e000      	b.n	80020a0 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x34>
 800209e:	3401      	adds	r4, #1
 80020a0:	4628      	mov	r0, r5
 80020a2:	f7ff f84b 	bl	800113c <_ZN13Address_field13get_reg_countEv>
 80020a6:	42a0      	cmp	r0, r4
 80020a8:	dd20      	ble.n	80020ec <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x80>
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 80020aa:	4628      	mov	r0, r5
 80020ac:	f7ff f844 	bl	8001138 <_ZN13Address_field13get_registersEv>
 80020b0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80020b4:	f7fe ff4a 	bl	8000f4c <_ZN8Register7addressEv>
            if(reg_add[adr] == false) {
 80020b8:	aa1e      	add	r2, sp, #120	; 0x78
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 80020ba:	b2c0      	uxtb	r0, r0
            if(reg_add[adr] == false) {
 80020bc:	4402      	add	r2, r0
 80020be:	f812 2c70 	ldrb.w	r2, [r2, #-112]
 80020c2:	4603      	mov	r3, r0
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 80020c4:	f88d 0007 	strb.w	r0, [sp, #7]
            if(reg_add[adr] == false) {
 80020c8:	2a00      	cmp	r2, #0
 80020ca:	d1e8      	bne.n	800209e <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x32>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80020cc:	e9d6 1201 	ldrd	r1, r2, [r6, #4]
 80020d0:	4291      	cmp	r1, r2
 80020d2:	d012      	beq.n	80020fa <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x8e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80020d4:	b119      	cbz	r1, 80020de <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x72>
 80020d6:	7008      	strb	r0, [r1, #0]
 80020d8:	6871      	ldr	r1, [r6, #4]
 80020da:	f89d 3007 	ldrb.w	r3, [sp, #7]
	    ++this->_M_impl._M_finish;
 80020de:	3101      	adds	r1, #1
 80020e0:	6071      	str	r1, [r6, #4]
                reg_add[adr] = true;
 80020e2:	aa1e      	add	r2, sp, #120	; 0x78
 80020e4:	4413      	add	r3, r2
 80020e6:	f803 8c70 	strb.w	r8, [r3, #-112]
 80020ea:	e7d8      	b.n	800209e <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x32>
 80020ec:	351c      	adds	r5, #28
    for(int i = 0; i < amt_fields; ++i) {
 80020ee:	42af      	cmp	r7, r5
 80020f0:	d1d3      	bne.n	800209a <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x2e>
}
 80020f2:	4630      	mov	r0, r6
 80020f4:	b01e      	add	sp, #120	; 0x78
 80020f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  _M_realloc_insert(end(), __x);
 80020fa:	f10d 0207 	add.w	r2, sp, #7
 80020fe:	4630      	mov	r0, r6
 8002100:	f7ff ff68 	bl	8001fd4 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
 8002104:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002108:	e7eb      	b.n	80020e2 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x76>
 800210a:	bf00      	nop

0800210c <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>:
std::vector<uint8_t> LoRa_register::check_missing_register(Address_field* fields, uint8_t amt_fields) {
 800210c:	b5f0      	push	{r4, r5, r6, r7, lr}
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800210e:	2700      	movs	r7, #0
 8002110:	b085      	sub	sp, #20
 8002112:	4605      	mov	r5, r0
 8002114:	e9c0 7700 	strd	r7, r7, [r0]
 8002118:	6087      	str	r7, [r0, #8]
    if((fields == nullptr) || (amt_fields == 0))
 800211a:	b102      	cbz	r2, 800211e <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x12>
 800211c:	b913      	cbnz	r3, 8002124 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x18>
}
 800211e:	4628      	mov	r0, r5
 8002120:	b005      	add	sp, #20
 8002122:	bdf0      	pop	{r4, r5, r6, r7, pc}
    registers = field_registers(fields, amt_fields);
 8002124:	a801      	add	r0, sp, #4
 8002126:	460e      	mov	r6, r1
 8002128:	f7ff ffa0 	bl	800206c <_ZN13LoRa_register15field_registersEP13Address_fieldh>
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 800212c:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
 8002130:	9a03      	ldr	r2, [sp, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002132:	6828      	ldr	r0, [r5, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002134:	9701      	str	r7, [sp, #4]
      __a = _GLIBCXX_MOVE(__b);
 8002136:	602b      	str	r3, [r5, #0]
 8002138:	606c      	str	r4, [r5, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 800213a:	9702      	str	r7, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 800213c:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 800213e:	9703      	str	r7, [sp, #12]
	if (__p)
 8002140:	b138      	cbz	r0, 8002152 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x46>
	::operator delete(__p);
 8002142:	f008 fd03 	bl	800ab4c <_ZdlPv>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002146:	9801      	ldr	r0, [sp, #4]
	if (__p)
 8002148:	b108      	cbz	r0, 800214e <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x42>
 800214a:	f008 fcff 	bl	800ab4c <_ZdlPv>
 800214e:	e9d5 3400 	ldrd	r3, r4, [r5]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002152:	1ae4      	subs	r4, r4, r3
    for(int i = registers.size() - 1; i >= 0; --i) {
 8002154:	3c01      	subs	r4, #1
 8002156:	d503      	bpl.n	8002160 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x54>
 8002158:	e7e1      	b.n	800211e <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x12>
 800215a:	1c63      	adds	r3, r4, #1
 800215c:	d0df      	beq.n	800211e <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x12>
 800215e:	682b      	ldr	r3, [r5, #0]
        if(_registers_state[registers[i]] != false) {
 8002160:	5d1a      	ldrb	r2, [r3, r4]
	return *(this->_M_impl._M_start + __n);
 8002162:	1918      	adds	r0, r3, r4
 8002164:	18b3      	adds	r3, r6, r2
 8002166:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    for(int i = registers.size() - 1; i >= 0; --i) {
 800216a:	3c01      	subs	r4, #1
        if(_registers_state[registers[i]] != false) {
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f4      	beq.n	800215a <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x4e>
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
 8002170:	686b      	ldr	r3, [r5, #4]
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current + __n); }
 8002172:	1c41      	adds	r1, r0, #1
      if (__position + 1 != end())
 8002174:	4299      	cmp	r1, r3
 8002176:	d001      	beq.n	800217c <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x70>
	  if (_Num)
 8002178:	1a5a      	subs	r2, r3, r1
 800217a:	d102      	bne.n	8002182 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x76>
      --this->_M_impl._M_finish;
 800217c:	3b01      	subs	r3, #1
 800217e:	606b      	str	r3, [r5, #4]
 8002180:	e7eb      	b.n	800215a <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x4e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002182:	f009 fd5c 	bl	800bc3e <memmove>
 8002186:	686b      	ldr	r3, [r5, #4]
 8002188:	e7f8      	b.n	800217c <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x70>
 800218a:	bf00      	nop

0800218c <_ZN13LoRa_register13register_readEP13Address_fieldhb>:

// считывает регистры относящиеся к полю(ям)
uint8_t LoRa_register::register_read(Address_field field, bool update) {
    return register_read(&field, 1, update);
}
uint8_t LoRa_register::register_read(Address_field* fields, uint8_t amt_fields, bool update) {
 800218c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002190:	4604      	mov	r4, r0
    if (_send)
 8002192:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
uint8_t LoRa_register::register_read(Address_field* fields, uint8_t amt_fields, bool update) {
 8002196:	b089      	sub	sp, #36	; 0x24
 8002198:	460e      	mov	r6, r1
 800219a:	4690      	mov	r8, r2
 800219c:	461d      	mov	r5, r3
    if (_send)
 800219e:	b170      	cbz	r0, 80021be <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x32>
 80021a0:	2270      	movs	r2, #112	; 0x70
 80021a2:	2100      	movs	r1, #0
 80021a4:	f104 000c 	add.w	r0, r4, #12
 80021a8:	f009 fd62 	bl	800bc70 <memset>
 80021ac:	2270      	movs	r2, #112	; 0x70
 80021ae:	2100      	movs	r1, #0
 80021b0:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 80021b4:	f009 fd5c 	bl	800bc70 <memset>
    _send = false;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    	clear();
    std::vector<uint8_t> registers;
    if (update) {
        registers = field_registers(fields, amt_fields);
 80021be:	af05      	add	r7, sp, #20
 80021c0:	4643      	mov	r3, r8
 80021c2:	4632      	mov	r2, r6
 80021c4:	4638      	mov	r0, r7
 80021c6:	4621      	mov	r1, r4
    if (update) {
 80021c8:	2d00      	cmp	r5, #0
 80021ca:	d050      	beq.n	800226e <_ZN13LoRa_register13register_readEP13Address_fieldhb+0xe2>
        registers = field_registers(fields, amt_fields);
 80021cc:	f7ff ff4e 	bl	800206c <_ZN13LoRa_register15field_registersEP13Address_fieldh>
      __a = _GLIBCXX_MOVE(__b);
 80021d0:	9b05      	ldr	r3, [sp, #20]
 80021d2:	9302      	str	r3, [sp, #8]
 80021d4:	9b06      	ldr	r3, [sp, #24]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80021d6:	9a02      	ldr	r2, [sp, #8]
 80021d8:	1a9b      	subs	r3, r3, r2
    else {
        registers = check_missing_register(fields, amt_fields);
    }
    uint8_t adr;
    uint8_t amt_read = registers.size();
    for(int i = 0; i < amt_read; ++i) {
 80021da:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80021de:	9303      	str	r3, [sp, #12]
 80021e0:	d03c      	beq.n	800225c <_ZN13LoRa_register13register_readEP13Address_fieldhb+0xd0>
 80021e2:	f04f 0b00 	mov.w	fp, #0
uint8_t LoRa_register::_single_transfer(uint8_t address, uint8_t value) {
    uint8_t response;
    // Подача NSS сигнала
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
    // Отправка бита действия и 7 бит адреса
    HAL_SPI_TransmitReceive(_spi, &address, &response, 1, 1000);
 80021e6:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 80021ea:	f04f 0a01 	mov.w	sl, #1
 80021ee:	1e56      	subs	r6, r2, #1
 80021f0:	eb06 0903 	add.w	r9, r6, r3
        adr = registers[i];
 80021f4:	f816 5f01 	ldrb.w	r5, [r6, #1]!
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 80021f8:	2200      	movs	r2, #0
    return _single_transfer(address & 0x7f, 0x00);
 80021fa:	f005 037f 	and.w	r3, r5, #127	; 0x7f
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 80021fe:	88a1      	ldrh	r1, [r4, #4]
 8002200:	68a0      	ldr	r0, [r4, #8]
 8002202:	f88d 3012 	strb.w	r3, [sp, #18]
 8002206:	f88d b013 	strb.w	fp, [sp, #19]
 800220a:	f004 f96b 	bl	80064e4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(_spi, &address, &response, 1, 1000);
 800220e:	6820      	ldr	r0, [r4, #0]
 8002210:	2301      	movs	r3, #1
 8002212:	f8cd 8000 	str.w	r8, [sp]
 8002216:	463a      	mov	r2, r7
 8002218:	f10d 0112 	add.w	r1, sp, #18
 800221c:	f006 f9e8 	bl	80085f0 <HAL_SPI_TransmitReceive>
 8002220:	2332      	movs	r3, #50	; 0x32
    for(int i = 0; i < 50; i++) __NOP();
 8002222:	bf00      	nop
 8002224:	3b01      	subs	r3, #1
 8002226:	d1fc      	bne.n	8002222 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x96>
    // Отправка/приём байта значения
    HAL_SPI_TransmitReceive(_spi, &value, &response, 1, 1000);
 8002228:	6820      	ldr	r0, [r4, #0]
 800222a:	2301      	movs	r3, #1
 800222c:	f8cd 8000 	str.w	r8, [sp]
 8002230:	463a      	mov	r2, r7
 8002232:	f10d 0113 	add.w	r1, sp, #19
 8002236:	f006 f9db 	bl	80085f0 <HAL_SPI_TransmitReceive>
 800223a:	2314      	movs	r3, #20
    for(int i = 0; i < 20; i++) __NOP();
 800223c:	bf00      	nop
 800223e:	3b01      	subs	r3, #1
 8002240:	d1fc      	bne.n	800223c <_ZN13LoRa_register13register_readEP13Address_fieldhb+0xb0>
//    if(address == 66) {	extern uint8_t begin_data; begin_data = response; }
    // Прекращение NSS сигнала
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_SET);
 8002242:	2201      	movs	r2, #1
 8002244:	88a1      	ldrh	r1, [r4, #4]
 8002246:	68a0      	ldr	r0, [r4, #8]
 8002248:	f004 f94c 	bl	80064e4 <HAL_GPIO_WritePin>
    return response;
 800224c:	f89d 3014 	ldrb.w	r3, [sp, #20]
        _registers_data[adr] = _read_register(adr);
 8002250:	4425      	add	r5, r4
    for(int i = 0; i < amt_read; ++i) {
 8002252:	45b1      	cmp	r9, r6
        _registers_state[adr] = true;
 8002254:	f885 a07c 	strb.w	sl, [r5, #124]	; 0x7c
        _registers_data[adr] = _read_register(adr);
 8002258:	732b      	strb	r3, [r5, #12]
    for(int i = 0; i < amt_read; ++i) {
 800225a:	d1cb      	bne.n	80021f4 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x68>
	if (__p)
 800225c:	9b02      	ldr	r3, [sp, #8]
 800225e:	b113      	cbz	r3, 8002266 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0xda>
 8002260:	4618      	mov	r0, r3
 8002262:	f008 fc73 	bl	800ab4c <_ZdlPv>
}
 8002266:	9803      	ldr	r0, [sp, #12]
 8002268:	b009      	add	sp, #36	; 0x24
 800226a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        registers = check_missing_register(fields, amt_fields);
 800226e:	f7ff ff4d 	bl	800210c <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
 8002272:	9b05      	ldr	r3, [sp, #20]
 8002274:	9302      	str	r3, [sp, #8]
 8002276:	9b06      	ldr	r3, [sp, #24]
 8002278:	e7ad      	b.n	80021d6 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x4a>
 800227a:	bf00      	nop

0800227c <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>:
uint8_t LoRa_register::set_field_value(Address_field* fields, uint32_t* values, uint8_t amt) {
 800227c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002280:	460d      	mov	r5, r1
 8002282:	b08d      	sub	sp, #52	; 0x34
    std::vector<uint8_t> missing_register = check_missing_register(fields, amt);
 8002284:	4601      	mov	r1, r0
uint8_t LoRa_register::set_field_value(Address_field* fields, uint32_t* values, uint8_t amt) {
 8002286:	4680      	mov	r8, r0
 8002288:	4617      	mov	r7, r2
    std::vector<uint8_t> missing_register = check_missing_register(fields, amt);
 800228a:	a803      	add	r0, sp, #12
 800228c:	462a      	mov	r2, r5
uint8_t LoRa_register::set_field_value(Address_field* fields, uint32_t* values, uint8_t amt) {
 800228e:	4699      	mov	r9, r3
    std::vector<uint8_t> missing_register = check_missing_register(fields, amt);
 8002290:	f7ff ff3c 	bl	800210c <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
    if(missing_register.size() > 0) {
 8002294:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8002298:	429a      	cmp	r2, r3
 800229a:	d11f      	bne.n	80022dc <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x60>
    for(int i = 0; i < amt; ++i) {
 800229c:	f1b9 0f00 	cmp.w	r9, #0
 80022a0:	d04d      	beq.n	800233e <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0xc2>
 80022a2:	2400      	movs	r4, #0
 80022a4:	f108 080c 	add.w	r8, r8, #12
 80022a8:	3f04      	subs	r7, #4
 80022aa:	e002      	b.n	80022b2 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x36>
 80022ac:	454c      	cmp	r4, r9
 80022ae:	b2de      	uxtb	r6, r3
 80022b0:	d00c      	beq.n	80022cc <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x50>
        result = fields[i].set_value(values[i], _registers_data, LORA_DATA_SIZE);
 80022b2:	2370      	movs	r3, #112	; 0x70
 80022b4:	4628      	mov	r0, r5
 80022b6:	4642      	mov	r2, r8
 80022b8:	f857 1f04 	ldr.w	r1, [r7, #4]!
 80022bc:	f7fe fed2 	bl	8001064 <_ZN13Address_field9set_valueEmPhi>
 80022c0:	b2e6      	uxtb	r6, r4
 80022c2:	1c73      	adds	r3, r6, #1
    for(int i = 0; i < amt; ++i) {
 80022c4:	3401      	adds	r4, #1
 80022c6:	351c      	adds	r5, #28
        if(result)
 80022c8:	2800      	cmp	r0, #0
 80022ca:	d0ef      	beq.n	80022ac <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x30>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80022cc:	9803      	ldr	r0, [sp, #12]
	if (__p)
 80022ce:	b108      	cbz	r0, 80022d4 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x58>
 80022d0:	f008 fc3c 	bl	800ab4c <_ZdlPv>
}
 80022d4:	4630      	mov	r0, r6
 80022d6:	b00d      	add	sp, #52	; 0x34
 80022d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80022dc:	2400      	movs	r4, #0
        read_fields = check_read(fields, amt, &reg_read, &reg_not_read);
 80022de:	ab09      	add	r3, sp, #36	; 0x24
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	4629      	mov	r1, r5
 80022e4:	ab06      	add	r3, sp, #24
 80022e6:	464a      	mov	r2, r9
 80022e8:	4640      	mov	r0, r8
 80022ea:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80022ee:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80022f2:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 80022f6:	f7ff fdb3 	bl	8001e60 <_ZN13LoRa_register10check_readEP13Address_fieldhPSt6vectorIhSaIhEES5_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80022fa:	e9dd 6109 	ldrd	r6, r1, [sp, #36]	; 0x24
 80022fe:	1b89      	subs	r1, r1, r6
        for(int i = 0; i < (int)reg_not_read.size(); ++i) {
 8002300:	42a1      	cmp	r1, r4
 8002302:	dd09      	ble.n	8002318 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x9c>
            _registers_state[reg_not_read[i]] = true;
 8002304:	2401      	movs	r4, #1
 8002306:	1e72      	subs	r2, r6, #1
 8002308:	4411      	add	r1, r2
 800230a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800230e:	4443      	add	r3, r8
        for(int i = 0; i < (int)reg_not_read.size(); ++i) {
 8002310:	4291      	cmp	r1, r2
            _registers_state[reg_not_read[i]] = true;
 8002312:	f883 407c 	strb.w	r4, [r3, #124]	; 0x7c
        for(int i = 0; i < (int)reg_not_read.size(); ++i) {
 8002316:	d1f8      	bne.n	800230a <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x8e>
        if(read_fields) {
 8002318:	b948      	cbnz	r0, 800232e <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0xb2>
	if (__p)
 800231a:	b116      	cbz	r6, 8002322 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0xa6>
 800231c:	4630      	mov	r0, r6
 800231e:	f008 fc15 	bl	800ab4c <_ZdlPv>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002322:	9806      	ldr	r0, [sp, #24]
	if (__p)
 8002324:	2800      	cmp	r0, #0
 8002326:	d0b9      	beq.n	800229c <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x20>
 8002328:	f008 fc10 	bl	800ab4c <_ZdlPv>
 800232c:	e7b6      	b.n	800229c <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x20>
            register_read(fields, amt, false);
 800232e:	2300      	movs	r3, #0
 8002330:	464a      	mov	r2, r9
 8002332:	4629      	mov	r1, r5
 8002334:	4640      	mov	r0, r8
 8002336:	f7ff ff29 	bl	800218c <_ZN13LoRa_register13register_readEP13Address_fieldhb>
 800233a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800233c:	e7ed      	b.n	800231a <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x9e>
    for(int i = 0; i < amt; ++i) {
 800233e:	464e      	mov	r6, r9
 8002340:	e7c4      	b.n	80022cc <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x50>
 8002342:	bf00      	nop

08002344 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>:
uint8_t LoRa_register::register_write(Address_field* fields, uint8_t amt_fields, bool fl_clear, bool error_clear) {
 8002344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002348:	4690      	mov	r8, r2
 800234a:	b08b      	sub	sp, #44	; 0x2c
    std::vector<uint8_t> write_adr = check_missing_register(fields, amt_fields);
 800234c:	460a      	mov	r2, r1
uint8_t LoRa_register::register_write(Address_field* fields, uint8_t amt_fields, bool fl_clear, bool error_clear) {
 800234e:	4604      	mov	r4, r0
 8002350:	460f      	mov	r7, r1
 8002352:	4699      	mov	r9, r3
    std::vector<uint8_t> write_adr = check_missing_register(fields, amt_fields);
 8002354:	4601      	mov	r1, r0
 8002356:	4643      	mov	r3, r8
 8002358:	a804      	add	r0, sp, #16
uint8_t LoRa_register::register_write(Address_field* fields, uint8_t amt_fields, bool fl_clear, bool error_clear) {
 800235a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
    std::vector<uint8_t> write_adr = check_missing_register(fields, amt_fields);
 800235e:	f7ff fed5 	bl	800210c <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
    if(write_adr.size() != 0) {
 8002362:	e9dd 6304 	ldrd	r6, r3, [sp, #16]
 8002366:	429e      	cmp	r6, r3
 8002368:	d018      	beq.n	800239c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x58>
        if(error_clear)
 800236a:	b93d      	cbnz	r5, 800237c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x38>
 800236c:	b116      	cbz	r6, 8002374 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x30>
 800236e:	4630      	mov	r0, r6
 8002370:	f008 fbec 	bl	800ab4c <_ZdlPv>
}
 8002374:	4628      	mov	r0, r5
 8002376:	b00b      	add	sp, #44	; 0x2c
 8002378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    _send = false;
 800237c:	2500      	movs	r5, #0
 800237e:	2270      	movs	r2, #112	; 0x70
 8002380:	2100      	movs	r1, #0
 8002382:	f104 000c 	add.w	r0, r4, #12
 8002386:	f009 fc73 	bl	800bc70 <memset>
 800238a:	2270      	movs	r2, #112	; 0x70
 800238c:	2100      	movs	r1, #0
 800238e:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8002392:	f009 fc6d 	bl	800bc70 <memset>
 8002396:	f884 50ec 	strb.w	r5, [r4, #236]	; 0xec
 800239a:	e7e7      	b.n	800236c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x28>
    write_adr = field_registers(fields, amt_fields);
 800239c:	4643      	mov	r3, r8
 800239e:	463a      	mov	r2, r7
 80023a0:	a807      	add	r0, sp, #28
 80023a2:	4621      	mov	r1, r4
 80023a4:	f7ff fe62 	bl	800206c <_ZN13LoRa_register15field_registersEP13Address_fieldh>
 80023a8:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
 80023ac:	2200      	movs	r2, #0
      __a = _GLIBCXX_MOVE(__b);
 80023ae:	9e07      	ldr	r6, [sp, #28]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80023b0:	9804      	ldr	r0, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80023b2:	9207      	str	r2, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80023b4:	9604      	str	r6, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80023b6:	9208      	str	r2, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 80023b8:	9305      	str	r3, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 80023ba:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 80023bc:	9106      	str	r1, [sp, #24]
 80023be:	b138      	cbz	r0, 80023d0 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x8c>
 80023c0:	f008 fbc4 	bl	800ab4c <_ZdlPv>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80023c4:	9807      	ldr	r0, [sp, #28]
	if (__p)
 80023c6:	b108      	cbz	r0, 80023cc <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x88>
 80023c8:	f008 fbc0 	bl	800ab4c <_ZdlPv>
 80023cc:	e9dd 6304 	ldrd	r6, r3, [sp, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80023d0:	1b9b      	subs	r3, r3, r6
    for(int i = 0; i < amt_write; ++i) {
 80023d2:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
 80023d6:	d033      	beq.n	8002440 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0xfc>
 80023d8:	2700      	movs	r7, #0
    HAL_SPI_TransmitReceive(_spi, &address, &response, 1, 1000);
 80023da:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
        _write_register(write_adr[i], _registers_data[write_adr[i]]);
 80023de:	5df3      	ldrb	r3, [r6, r7]
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 80023e0:	2200      	movs	r2, #0
        _write_register(write_adr[i], _registers_data[write_adr[i]]);
 80023e2:	18e1      	adds	r1, r4, r3
 80023e4:	7b0e      	ldrb	r6, [r1, #12]
    _single_transfer(address | 0x80, value);
 80023e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 80023ea:	88a1      	ldrh	r1, [r4, #4]
 80023ec:	68a0      	ldr	r0, [r4, #8]
 80023ee:	f88d 300e 	strb.w	r3, [sp, #14]
 80023f2:	f88d 600f 	strb.w	r6, [sp, #15]
 80023f6:	f004 f875 	bl	80064e4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(_spi, &address, &response, 1, 1000);
 80023fa:	6820      	ldr	r0, [r4, #0]
 80023fc:	2301      	movs	r3, #1
 80023fe:	f8cd 8000 	str.w	r8, [sp]
 8002402:	aa07      	add	r2, sp, #28
 8002404:	f10d 010e 	add.w	r1, sp, #14
 8002408:	f006 f8f2 	bl	80085f0 <HAL_SPI_TransmitReceive>
 800240c:	2332      	movs	r3, #50	; 0x32
    for(int i = 0; i < 50; i++) __NOP();
 800240e:	bf00      	nop
 8002410:	3b01      	subs	r3, #1
 8002412:	d1fc      	bne.n	800240e <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0xca>
    HAL_SPI_TransmitReceive(_spi, &value, &response, 1, 1000);
 8002414:	6820      	ldr	r0, [r4, #0]
 8002416:	2301      	movs	r3, #1
 8002418:	f8cd 8000 	str.w	r8, [sp]
 800241c:	aa07      	add	r2, sp, #28
 800241e:	f10d 010f 	add.w	r1, sp, #15
 8002422:	f006 f8e5 	bl	80085f0 <HAL_SPI_TransmitReceive>
 8002426:	2314      	movs	r3, #20
    for(int i = 0; i < 20; i++) __NOP();
 8002428:	bf00      	nop
 800242a:	3b01      	subs	r3, #1
 800242c:	d1fc      	bne.n	8002428 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0xe4>
    for(int i = 0; i < amt_write; ++i) {
 800242e:	3701      	adds	r7, #1
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_SET);
 8002430:	2201      	movs	r2, #1
 8002432:	88a1      	ldrh	r1, [r4, #4]
 8002434:	68a0      	ldr	r0, [r4, #8]
 8002436:	f004 f855 	bl	80064e4 <HAL_GPIO_WritePin>
    for(int i = 0; i < amt_write; ++i) {
 800243a:	42af      	cmp	r7, r5
 800243c:	9e04      	ldr	r6, [sp, #16]
 800243e:	d1ce      	bne.n	80023de <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x9a>
    _send = true;
 8002440:	2301      	movs	r3, #1
 8002442:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    if (fl_clear) {
 8002446:	f1b9 0f00 	cmp.w	r9, #0
 800244a:	d08f      	beq.n	800236c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x28>
 800244c:	2270      	movs	r2, #112	; 0x70
 800244e:	2100      	movs	r1, #0
 8002450:	f104 000c 	add.w	r0, r4, #12
 8002454:	f009 fc0c 	bl	800bc70 <memset>
 8002458:	2270      	movs	r2, #112	; 0x70
 800245a:	2100      	movs	r1, #0
 800245c:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8002460:	f009 fc06 	bl	800bc70 <memset>
    _send = false;
 8002464:	2300      	movs	r3, #0
 8002466:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 800246a:	e77f      	b.n	800236c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x28>

0800246c <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51>:
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800246c:	2300      	movs	r3, #0
std::vector<uint8_t> LoRa_register::check_missing_register(Address_field* fields, uint8_t amt_fields) {
 800246e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002472:	4605      	mov	r5, r0
 8002474:	b0a0      	sub	sp, #128	; 0x80
 8002476:	e9c0 3300 	strd	r3, r3, [r0]
 800247a:	6083      	str	r3, [r0, #8]
    if((fields == nullptr) || (amt_fields == 0))
 800247c:	b3a2      	cbz	r2, 80024e8 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0x7c>
 800247e:	460e      	mov	r6, r1
 8002480:	4617      	mov	r7, r2
 8002482:	4619      	mov	r1, r3
 8002484:	2270      	movs	r2, #112	; 0x70
 8002486:	a804      	add	r0, sp, #16
 8002488:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800248c:	9303      	str	r3, [sp, #12]
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 800248e:	461c      	mov	r4, r3
                reg_add[adr] = true;
 8002490:	f04f 0801 	mov.w	r8, #1
 8002494:	f009 fbec 	bl	800bc70 <memset>
 8002498:	e000      	b.n	800249c <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0x30>
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 800249a:	3401      	adds	r4, #1
 800249c:	4638      	mov	r0, r7
 800249e:	f7fe fe4d 	bl	800113c <_ZN13Address_field13get_reg_countEv>
 80024a2:	4284      	cmp	r4, r0
 80024a4:	da24      	bge.n	80024f0 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0x84>
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 80024a6:	4638      	mov	r0, r7
 80024a8:	f7fe fe46 	bl	8001138 <_ZN13Address_field13get_registersEv>
 80024ac:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80024b0:	f7fe fd4c 	bl	8000f4c <_ZN8Register7addressEv>
            if(reg_add[adr] == false) {
 80024b4:	aa20      	add	r2, sp, #128	; 0x80
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 80024b6:	b2c0      	uxtb	r0, r0
            if(reg_add[adr] == false) {
 80024b8:	4402      	add	r2, r0
 80024ba:	f812 2c70 	ldrb.w	r2, [r2, #-112]
 80024be:	4603      	mov	r3, r0
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 80024c0:	f88d 0003 	strb.w	r0, [sp, #3]
            if(reg_add[adr] == false) {
 80024c4:	2a00      	cmp	r2, #0
 80024c6:	d1e8      	bne.n	800249a <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0x2e>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80024c8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80024cc:	4291      	cmp	r1, r2
 80024ce:	d03f      	beq.n	8002550 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0xe4>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80024d0:	b119      	cbz	r1, 80024da <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0x6e>
 80024d2:	7008      	strb	r0, [r1, #0]
 80024d4:	9902      	ldr	r1, [sp, #8]
 80024d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
	    ++this->_M_impl._M_finish;
 80024da:	3101      	adds	r1, #1
 80024dc:	9102      	str	r1, [sp, #8]
                reg_add[adr] = true;
 80024de:	aa20      	add	r2, sp, #128	; 0x80
 80024e0:	4413      	add	r3, r2
 80024e2:	f803 8c70 	strb.w	r8, [r3, #-112]
 80024e6:	e7d8      	b.n	800249a <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0x2e>
}
 80024e8:	4628      	mov	r0, r5
 80024ea:	b020      	add	sp, #128	; 0x80
 80024ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __b = _GLIBCXX_MOVE(__tmp);
 80024f0:	2100      	movs	r1, #0
      __a = _GLIBCXX_MOVE(__b);
 80024f2:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 80024f6:	9a01      	ldr	r2, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80024f8:	6828      	ldr	r0, [r5, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80024fa:	9101      	str	r1, [sp, #4]
      __a = _GLIBCXX_MOVE(__b);
 80024fc:	602a      	str	r2, [r5, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80024fe:	9102      	str	r1, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8002500:	606b      	str	r3, [r5, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8002502:	9103      	str	r1, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002504:	60ac      	str	r4, [r5, #8]
	if (__p)
 8002506:	b138      	cbz	r0, 8002518 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0xac>
	::operator delete(__p);
 8002508:	f008 fb20 	bl	800ab4c <_ZdlPv>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800250c:	9801      	ldr	r0, [sp, #4]
	if (__p)
 800250e:	b108      	cbz	r0, 8002514 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0xa8>
 8002510:	f008 fb1c 	bl	800ab4c <_ZdlPv>
 8002514:	e9d5 2300 	ldrd	r2, r3, [r5]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002518:	1a9b      	subs	r3, r3, r2
    for(int i = registers.size() - 1; i >= 0; --i) {
 800251a:	1e5c      	subs	r4, r3, #1
 800251c:	d503      	bpl.n	8002526 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0xba>
 800251e:	e7e3      	b.n	80024e8 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0x7c>
 8002520:	1c63      	adds	r3, r4, #1
 8002522:	d0e1      	beq.n	80024e8 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0x7c>
 8002524:	682a      	ldr	r2, [r5, #0]
        if(_registers_state[registers[i]] != false) {
 8002526:	5d13      	ldrb	r3, [r2, r4]
	return *(this->_M_impl._M_start + __n);
 8002528:	1910      	adds	r0, r2, r4
 800252a:	4433      	add	r3, r6
 800252c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    for(int i = registers.size() - 1; i >= 0; --i) {
 8002530:	3c01      	subs	r4, #1
        if(_registers_state[registers[i]] != false) {
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f4      	beq.n	8002520 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0xb4>
      : _M_current(__i) { }
 8002536:	686b      	ldr	r3, [r5, #4]
      { return __normal_iterator(_M_current + __n); }
 8002538:	1c41      	adds	r1, r0, #1
      if (__position + 1 != end())
 800253a:	4299      	cmp	r1, r3
 800253c:	d001      	beq.n	8002542 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0xd6>
	  if (_Num)
 800253e:	1a5a      	subs	r2, r3, r1
 8002540:	d102      	bne.n	8002548 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0xdc>
      --this->_M_impl._M_finish;
 8002542:	3b01      	subs	r3, #1
 8002544:	606b      	str	r3, [r5, #4]
 8002546:	e7eb      	b.n	8002520 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0xb4>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002548:	f009 fb79 	bl	800bc3e <memmove>
 800254c:	686b      	ldr	r3, [r5, #4]
 800254e:	e7f8      	b.n	8002542 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0xd6>
	  _M_realloc_insert(end(), __x);
 8002550:	f10d 0203 	add.w	r2, sp, #3
 8002554:	a801      	add	r0, sp, #4
 8002556:	f7ff fd3d 	bl	8001fd4 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
 800255a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800255e:	e7be      	b.n	80024de <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51+0x72>

08002560 <_ZN13LoRa_register14register_writeE13Address_fieldbb>:
uint8_t LoRa_register::register_write(Address_field field, bool fl_clear, bool error_clear) {
 8002560:	b084      	sub	sp, #16
 8002562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002566:	4604      	mov	r4, r0
 8002568:	b0a6      	sub	sp, #152	; 0x98
 800256a:	ad2d      	add	r5, sp, #180	; 0xb4
 800256c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
    std::vector<uint8_t> write_adr = check_missing_register(fields, amt_fields);
 8002570:	a804      	add	r0, sp, #16
 8002572:	462a      	mov	r2, r5
 8002574:	4621      	mov	r1, r4
uint8_t LoRa_register::register_write(Address_field field, bool fl_clear, bool error_clear) {
 8002576:	f89d 70d0 	ldrb.w	r7, [sp, #208]	; 0xd0
 800257a:	f89d 80d4 	ldrb.w	r8, [sp, #212]	; 0xd4
    std::vector<uint8_t> write_adr = check_missing_register(fields, amt_fields);
 800257e:	f7ff ff75 	bl	800246c <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51>
    if(write_adr.size() != 0) {
 8002582:	e9dd 6304 	ldrd	r6, r3, [sp, #16]
 8002586:	42b3      	cmp	r3, r6
 8002588:	d01d      	beq.n	80025c6 <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x66>
        if(error_clear)
 800258a:	f1b8 0f00 	cmp.w	r8, #0
 800258e:	d018      	beq.n	80025c2 <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x62>
    _send = false;
 8002590:	2500      	movs	r5, #0
 8002592:	2270      	movs	r2, #112	; 0x70
 8002594:	2100      	movs	r1, #0
 8002596:	f104 000c 	add.w	r0, r4, #12
 800259a:	f009 fb69 	bl	800bc70 <memset>
 800259e:	2270      	movs	r2, #112	; 0x70
 80025a0:	2100      	movs	r1, #0
 80025a2:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 80025a6:	f009 fb63 	bl	800bc70 <memset>
 80025aa:	f884 50ec 	strb.w	r5, [r4, #236]	; 0xec
	if (__p)
 80025ae:	b116      	cbz	r6, 80025b6 <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x56>
 80025b0:	4630      	mov	r0, r6
 80025b2:	f008 facb 	bl	800ab4c <_ZdlPv>
}
 80025b6:	4628      	mov	r0, r5
 80025b8:	b026      	add	sp, #152	; 0x98
 80025ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025be:	b004      	add	sp, #16
 80025c0:	4770      	bx	lr
        return 0;
 80025c2:	4645      	mov	r5, r8
 80025c4:	e7f3      	b.n	80025ae <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x4e>
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80025c6:	2100      	movs	r1, #0
 80025c8:	a80a      	add	r0, sp, #40	; 0x28
 80025ca:	2270      	movs	r2, #112	; 0x70
 80025cc:	e9cd 1107 	strd	r1, r1, [sp, #28]
 80025d0:	9109      	str	r1, [sp, #36]	; 0x24
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 80025d2:	460e      	mov	r6, r1
                reg_add[adr] = true;
 80025d4:	f04f 0801 	mov.w	r8, #1
 80025d8:	f009 fb4a 	bl	800bc70 <memset>
 80025dc:	e000      	b.n	80025e0 <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x80>
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 80025de:	3601      	adds	r6, #1
 80025e0:	4628      	mov	r0, r5
 80025e2:	f7fe fdab 	bl	800113c <_ZN13Address_field13get_reg_countEv>
 80025e6:	4286      	cmp	r6, r0
 80025e8:	da20      	bge.n	800262c <_ZN13LoRa_register14register_writeE13Address_fieldbb+0xcc>
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 80025ea:	4628      	mov	r0, r5
 80025ec:	f7fe fda4 	bl	8001138 <_ZN13Address_field13get_registersEv>
 80025f0:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 80025f4:	f7fe fcaa 	bl	8000f4c <_ZN8Register7addressEv>
            if(reg_add[adr] == false) {
 80025f8:	aa26      	add	r2, sp, #152	; 0x98
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 80025fa:	b2c0      	uxtb	r0, r0
            if(reg_add[adr] == false) {
 80025fc:	4402      	add	r2, r0
 80025fe:	f812 2c70 	ldrb.w	r2, [r2, #-112]
 8002602:	4603      	mov	r3, r0
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 8002604:	f88d 000f 	strb.w	r0, [sp, #15]
            if(reg_add[adr] == false) {
 8002608:	2a00      	cmp	r2, #0
 800260a:	d1e8      	bne.n	80025de <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x7e>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800260c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8002610:	4291      	cmp	r1, r2
 8002612:	d06f      	beq.n	80026f4 <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x194>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002614:	b119      	cbz	r1, 800261e <_ZN13LoRa_register14register_writeE13Address_fieldbb+0xbe>
 8002616:	7008      	strb	r0, [r1, #0]
 8002618:	9908      	ldr	r1, [sp, #32]
 800261a:	f89d 300f 	ldrb.w	r3, [sp, #15]
	    ++this->_M_impl._M_finish;
 800261e:	3101      	adds	r1, #1
 8002620:	9108      	str	r1, [sp, #32]
                reg_add[adr] = true;
 8002622:	aa26      	add	r2, sp, #152	; 0x98
 8002624:	4413      	add	r3, r2
 8002626:	f803 8c70 	strb.w	r8, [r3, #-112]
 800262a:	e7d8      	b.n	80025de <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x7e>
      __b = _GLIBCXX_MOVE(__tmp);
 800262c:	2100      	movs	r1, #0
      __a = _GLIBCXX_MOVE(__b);
 800262e:	e9dd 2508 	ldrd	r2, r5, [sp, #32]
 8002632:	9b07      	ldr	r3, [sp, #28]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002634:	9804      	ldr	r0, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8002636:	9107      	str	r1, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 8002638:	9304      	str	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 800263a:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 800263c:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 800263e:	9109      	str	r1, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 8002640:	9506      	str	r5, [sp, #24]
	if (__p)
 8002642:	b138      	cbz	r0, 8002654 <_ZN13LoRa_register14register_writeE13Address_fieldbb+0xf4>
	::operator delete(__p);
 8002644:	f008 fa82 	bl	800ab4c <_ZdlPv>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002648:	9807      	ldr	r0, [sp, #28]
	if (__p)
 800264a:	b108      	cbz	r0, 8002650 <_ZN13LoRa_register14register_writeE13Address_fieldbb+0xf0>
 800264c:	f008 fa7e 	bl	800ab4c <_ZdlPv>
 8002650:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002654:	1ad2      	subs	r2, r2, r3
    for(int i = 0; i < amt_write; ++i) {
 8002656:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 800265a:	d034      	beq.n	80026c6 <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x166>
 800265c:	2600      	movs	r6, #0
    HAL_SPI_TransmitReceive(_spi, &address, &response, 1, 1000);
 800265e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
        _write_register(write_adr[i], _registers_data[write_adr[i]]);
 8002662:	5d9b      	ldrb	r3, [r3, r6]
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 8002664:	2200      	movs	r2, #0
        _write_register(write_adr[i], _registers_data[write_adr[i]]);
 8002666:	18e1      	adds	r1, r4, r3
 8002668:	f891 c00c 	ldrb.w	ip, [r1, #12]
    _single_transfer(address | 0x80, value);
 800266c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 8002670:	88a1      	ldrh	r1, [r4, #4]
 8002672:	68a0      	ldr	r0, [r4, #8]
 8002674:	f88d c01c 	strb.w	ip, [sp, #28]
 8002678:	f88d 300f 	strb.w	r3, [sp, #15]
 800267c:	f003 ff32 	bl	80064e4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(_spi, &address, &response, 1, 1000);
 8002680:	6820      	ldr	r0, [r4, #0]
 8002682:	2301      	movs	r3, #1
 8002684:	f8cd 8000 	str.w	r8, [sp]
 8002688:	aa0a      	add	r2, sp, #40	; 0x28
 800268a:	f10d 010f 	add.w	r1, sp, #15
 800268e:	f005 ffaf 	bl	80085f0 <HAL_SPI_TransmitReceive>
 8002692:	2332      	movs	r3, #50	; 0x32
    for(int i = 0; i < 50; i++) __NOP();
 8002694:	bf00      	nop
 8002696:	3b01      	subs	r3, #1
 8002698:	d1fc      	bne.n	8002694 <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x134>
    HAL_SPI_TransmitReceive(_spi, &value, &response, 1, 1000);
 800269a:	6820      	ldr	r0, [r4, #0]
 800269c:	2301      	movs	r3, #1
 800269e:	f8cd 8000 	str.w	r8, [sp]
 80026a2:	aa0a      	add	r2, sp, #40	; 0x28
 80026a4:	a907      	add	r1, sp, #28
 80026a6:	f005 ffa3 	bl	80085f0 <HAL_SPI_TransmitReceive>
 80026aa:	2314      	movs	r3, #20
    for(int i = 0; i < 20; i++) __NOP();
 80026ac:	bf00      	nop
 80026ae:	3b01      	subs	r3, #1
 80026b0:	d1fc      	bne.n	80026ac <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x14c>
    for(int i = 0; i < amt_write; ++i) {
 80026b2:	3601      	adds	r6, #1
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_SET);
 80026b4:	2201      	movs	r2, #1
 80026b6:	88a1      	ldrh	r1, [r4, #4]
 80026b8:	68a0      	ldr	r0, [r4, #8]
 80026ba:	f003 ff13 	bl	80064e4 <HAL_GPIO_WritePin>
    for(int i = 0; i < amt_write; ++i) {
 80026be:	42ae      	cmp	r6, r5
 80026c0:	d001      	beq.n	80026c6 <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x166>
 80026c2:	9b04      	ldr	r3, [sp, #16]
 80026c4:	e7cd      	b.n	8002662 <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x102>
    _send = true;
 80026c6:	2301      	movs	r3, #1
 80026c8:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    if (fl_clear) {
 80026cc:	b187      	cbz	r7, 80026f0 <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x190>
 80026ce:	2270      	movs	r2, #112	; 0x70
 80026d0:	2100      	movs	r1, #0
 80026d2:	f104 000c 	add.w	r0, r4, #12
 80026d6:	f009 facb 	bl	800bc70 <memset>
 80026da:	2270      	movs	r2, #112	; 0x70
 80026dc:	2100      	movs	r1, #0
 80026de:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 80026e2:	f009 fac5 	bl	800bc70 <memset>
    _send = false;
 80026e6:	2300      	movs	r3, #0
 80026e8:	9e04      	ldr	r6, [sp, #16]
 80026ea:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 80026ee:	e75e      	b.n	80025ae <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x4e>
 80026f0:	9e04      	ldr	r6, [sp, #16]
 80026f2:	e75c      	b.n	80025ae <_ZN13LoRa_register14register_writeE13Address_fieldbb+0x4e>
	  _M_realloc_insert(end(), __x);
 80026f4:	f10d 020f 	add.w	r2, sp, #15
 80026f8:	a807      	add	r0, sp, #28
 80026fa:	f7ff fc6b 	bl	8001fd4 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
 80026fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002702:	e78e      	b.n	8002622 <_ZN13LoRa_register14register_writeE13Address_fieldbb+0xc2>

08002704 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49>:
uint8_t LoRa_register::register_read(Address_field* fields, uint8_t amt_fields, bool update) {
 8002704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (_send)
 8002708:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
uint8_t LoRa_register::register_read(Address_field* fields, uint8_t amt_fields, bool update) {
 800270c:	b0a5      	sub	sp, #148	; 0x94
 800270e:	4604      	mov	r4, r0
 8002710:	460e      	mov	r6, r1
 8002712:	4615      	mov	r5, r2
    if (_send)
 8002714:	b16b      	cbz	r3, 8002732 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x2e>
 8002716:	2270      	movs	r2, #112	; 0x70
 8002718:	2100      	movs	r1, #0
 800271a:	300c      	adds	r0, #12
 800271c:	f009 faa8 	bl	800bc70 <memset>
 8002720:	2270      	movs	r2, #112	; 0x70
 8002722:	2100      	movs	r1, #0
 8002724:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8002728:	f009 faa2 	bl	800bc70 <memset>
    _send = false;
 800272c:	2300      	movs	r3, #0
 800272e:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    if (update) {
 8002732:	2d00      	cmp	r5, #0
 8002734:	d036      	beq.n	80027a4 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0xa0>
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8002736:	2500      	movs	r5, #0
 8002738:	e9cd 5505 	strd	r5, r5, [sp, #20]
 800273c:	9507      	str	r5, [sp, #28]
    if((fields == nullptr) || (amt_fields == 0))
 800273e:	2e00      	cmp	r6, #0
 8002740:	f000 808f 	beq.w	8002862 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x15e>
 8002744:	af08      	add	r7, sp, #32
 8002746:	4638      	mov	r0, r7
 8002748:	2270      	movs	r2, #112	; 0x70
 800274a:	4629      	mov	r1, r5
 800274c:	f009 fa90 	bl	800bc70 <memset>
                reg_add[adr] = true;
 8002750:	f04f 0801 	mov.w	r8, #1
 8002754:	e000      	b.n	8002758 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x54>
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8002756:	3501      	adds	r5, #1
 8002758:	4630      	mov	r0, r6
 800275a:	f7fe fcef 	bl	800113c <_ZN13Address_field13get_reg_countEv>
 800275e:	4285      	cmp	r5, r0
 8002760:	da77      	bge.n	8002852 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x14e>
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 8002762:	4630      	mov	r0, r6
 8002764:	f7fe fce8 	bl	8001138 <_ZN13Address_field13get_registersEv>
 8002768:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 800276c:	f7fe fbee 	bl	8000f4c <_ZN8Register7addressEv>
            if(reg_add[adr] == false) {
 8002770:	aa24      	add	r2, sp, #144	; 0x90
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 8002772:	b2c0      	uxtb	r0, r0
            if(reg_add[adr] == false) {
 8002774:	4402      	add	r2, r0
 8002776:	f812 2c70 	ldrb.w	r2, [r2, #-112]
 800277a:	4603      	mov	r3, r0
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 800277c:	f88d 0013 	strb.w	r0, [sp, #19]
            if(reg_add[adr] == false) {
 8002780:	2a00      	cmp	r2, #0
 8002782:	d1e8      	bne.n	8002756 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x52>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002784:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8002788:	4291      	cmp	r1, r2
 800278a:	d06f      	beq.n	800286c <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x168>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800278c:	b119      	cbz	r1, 8002796 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x92>
 800278e:	7008      	strb	r0, [r1, #0]
 8002790:	9906      	ldr	r1, [sp, #24]
 8002792:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    ++this->_M_impl._M_finish;
 8002796:	3101      	adds	r1, #1
 8002798:	9106      	str	r1, [sp, #24]
                reg_add[adr] = true;
 800279a:	aa24      	add	r2, sp, #144	; 0x90
 800279c:	4413      	add	r3, r2
 800279e:	f803 8c70 	strb.w	r8, [r3, #-112]
 80027a2:	e7d8      	b.n	8002756 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x52>
        registers = check_missing_register(fields, amt_fields);
 80027a4:	af08      	add	r7, sp, #32
 80027a6:	4632      	mov	r2, r6
 80027a8:	4638      	mov	r0, r7
 80027aa:	4621      	mov	r1, r4
 80027ac:	f7ff fe5e 	bl	800246c <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51>
 80027b0:	9b08      	ldr	r3, [sp, #32]
 80027b2:	461a      	mov	r2, r3
 80027b4:	9303      	str	r3, [sp, #12]
 80027b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	9302      	str	r3, [sp, #8]
    for(int i = 0; i < amt_read; ++i) {
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d03e      	beq.n	8002840 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x13c>
 80027c2:	f04f 0b00 	mov.w	fp, #0
    HAL_SPI_TransmitReceive(_spi, &address, &response, 1, 1000);
 80027c6:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 80027ca:	f04f 0a01 	mov.w	sl, #1
 80027ce:	9a03      	ldr	r2, [sp, #12]
 80027d0:	eb02 0903 	add.w	r9, r2, r3
 80027d4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80027d8:	1e56      	subs	r6, r2, #1
        adr = registers[i];
 80027da:	f816 5f01 	ldrb.w	r5, [r6, #1]!
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 80027de:	2200      	movs	r2, #0
    return _single_transfer(address & 0x7f, 0x00);
 80027e0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 80027e4:	88a1      	ldrh	r1, [r4, #4]
 80027e6:	68a0      	ldr	r0, [r4, #8]
 80027e8:	f88d 3013 	strb.w	r3, [sp, #19]
 80027ec:	f88d b014 	strb.w	fp, [sp, #20]
 80027f0:	f003 fe78 	bl	80064e4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(_spi, &address, &response, 1, 1000);
 80027f4:	6820      	ldr	r0, [r4, #0]
 80027f6:	2301      	movs	r3, #1
 80027f8:	f8cd 8000 	str.w	r8, [sp]
 80027fc:	463a      	mov	r2, r7
 80027fe:	f10d 0113 	add.w	r1, sp, #19
 8002802:	f005 fef5 	bl	80085f0 <HAL_SPI_TransmitReceive>
 8002806:	2332      	movs	r3, #50	; 0x32
    for(int i = 0; i < 50; i++) __NOP();
 8002808:	bf00      	nop
 800280a:	3b01      	subs	r3, #1
 800280c:	d1fc      	bne.n	8002808 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x104>
    HAL_SPI_TransmitReceive(_spi, &value, &response, 1, 1000);
 800280e:	6820      	ldr	r0, [r4, #0]
 8002810:	2301      	movs	r3, #1
 8002812:	f8cd 8000 	str.w	r8, [sp]
 8002816:	463a      	mov	r2, r7
 8002818:	a905      	add	r1, sp, #20
 800281a:	f005 fee9 	bl	80085f0 <HAL_SPI_TransmitReceive>
 800281e:	2314      	movs	r3, #20
    for(int i = 0; i < 20; i++) __NOP();
 8002820:	bf00      	nop
 8002822:	3b01      	subs	r3, #1
 8002824:	d1fc      	bne.n	8002820 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x11c>
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_SET);
 8002826:	2201      	movs	r2, #1
 8002828:	88a1      	ldrh	r1, [r4, #4]
 800282a:	68a0      	ldr	r0, [r4, #8]
 800282c:	f003 fe5a 	bl	80064e4 <HAL_GPIO_WritePin>
    return response;
 8002830:	f89d 3020 	ldrb.w	r3, [sp, #32]
        _registers_data[adr] = _read_register(adr);
 8002834:	4425      	add	r5, r4
    for(int i = 0; i < amt_read; ++i) {
 8002836:	45b1      	cmp	r9, r6
        _registers_state[adr] = true;
 8002838:	f885 a07c 	strb.w	sl, [r5, #124]	; 0x7c
        _registers_data[adr] = _read_register(adr);
 800283c:	732b      	strb	r3, [r5, #12]
    for(int i = 0; i < amt_read; ++i) {
 800283e:	d1cc      	bne.n	80027da <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0xd6>
	if (__p)
 8002840:	9b03      	ldr	r3, [sp, #12]
 8002842:	b113      	cbz	r3, 800284a <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x146>
	::operator delete(__p);
 8002844:	4618      	mov	r0, r3
 8002846:	f008 f981 	bl	800ab4c <_ZdlPv>
}
 800284a:	9802      	ldr	r0, [sp, #8]
 800284c:	b025      	add	sp, #148	; 0x94
 800284e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002852:	9b05      	ldr	r3, [sp, #20]
 8002854:	461a      	mov	r2, r3
 8002856:	9303      	str	r3, [sp, #12]
 8002858:	9b06      	ldr	r3, [sp, #24]
 800285a:	1a9b      	subs	r3, r3, r2
 800285c:	b2db      	uxtb	r3, r3
 800285e:	9302      	str	r3, [sp, #8]
 8002860:	e7ad      	b.n	80027be <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0xba>
        registers = field_registers(fields, amt_fields);
 8002862:	9602      	str	r6, [sp, #8]
}
 8002864:	9802      	ldr	r0, [sp, #8]
 8002866:	b025      	add	sp, #148	; 0x94
 8002868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  _M_realloc_insert(end(), __x);
 800286c:	f10d 0213 	add.w	r2, sp, #19
 8002870:	a805      	add	r0, sp, #20
 8002872:	f7ff fbaf 	bl	8001fd4 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
 8002876:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800287a:	e78e      	b.n	800279a <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49+0x96>

0800287c <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47>:
uint8_t LoRa_register::set_field_value(Address_field* fields, uint32_t* values, uint8_t amt) {
 800287c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002880:	468b      	mov	fp, r1
 8002882:	b0a9      	sub	sp, #164	; 0xa4
 8002884:	9202      	str	r2, [sp, #8]
    std::vector<uint8_t> missing_register = check_missing_register(fields, amt);
 8002886:	4601      	mov	r1, r0
 8002888:	465a      	mov	r2, fp
uint8_t LoRa_register::set_field_value(Address_field* fields, uint32_t* values, uint8_t amt) {
 800288a:	4682      	mov	sl, r0
    std::vector<uint8_t> missing_register = check_missing_register(fields, amt);
 800288c:	a806      	add	r0, sp, #24
 800288e:	f7ff fded 	bl	800246c <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh.constprop.51>
    if(missing_register.size() > 0) {
 8002892:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8002896:	429a      	cmp	r2, r3
 8002898:	d113      	bne.n	80028c2 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x46>
        result = fields[i].set_value(values[i], _registers_data, LORA_DATA_SIZE);
 800289a:	9b02      	ldr	r3, [sp, #8]
 800289c:	f10a 020c 	add.w	r2, sl, #12
 80028a0:	6819      	ldr	r1, [r3, #0]
 80028a2:	4658      	mov	r0, fp
 80028a4:	2370      	movs	r3, #112	; 0x70
 80028a6:	f7fe fbdd 	bl	8001064 <_ZN13Address_field9set_valueEmPhi>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80028aa:	9b06      	ldr	r3, [sp, #24]
        if(result)
 80028ac:	f080 0001 	eor.w	r0, r0, #1
        ++amt_set_value;
 80028b0:	b2c4      	uxtb	r4, r0
	if (__p)
 80028b2:	b113      	cbz	r3, 80028ba <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x3e>
 80028b4:	4618      	mov	r0, r3
 80028b6:	f008 f949 	bl	800ab4c <_ZdlPv>
}
 80028ba:	4620      	mov	r0, r4
 80028bc:	b029      	add	sp, #164	; 0xa4
 80028be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80028c2:	2100      	movs	r1, #0
 80028c4:	2270      	movs	r2, #112	; 0x70
 80028c6:	a80c      	add	r0, sp, #48	; 0x30
 80028c8:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
 80028cc:	910b      	str	r1, [sp, #44]	; 0x2c
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 80028ce:	460d      	mov	r5, r1
 80028d0:	f009 f9ce 	bl	800bc70 <memset>
 80028d4:	e016      	b.n	8002904 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x88>
            adr = fields[i].get_registers()[j].address();
 80028d6:	4658      	mov	r0, fp
 80028d8:	f7fe fc2e 	bl	8001138 <_ZN13Address_field13get_registersEv>
 80028dc:	00ee      	lsls	r6, r5, #3
 80028de:	4430      	add	r0, r6
 80028e0:	f7fe fb34 	bl	8000f4c <_ZN8Register7addressEv>
 80028e4:	4604      	mov	r4, r0
            reg_bit[adr] |= fields[i].get_registers()[j].mask();
 80028e6:	4658      	mov	r0, fp
 80028e8:	f7fe fc26 	bl	8001138 <_ZN13Address_field13get_registersEv>
 80028ec:	4430      	add	r0, r6
 80028ee:	f7fe fb2f 	bl	8000f50 <_ZN8Register4maskEv>
 80028f2:	aa28      	add	r2, sp, #160	; 0xa0
 80028f4:	b2e3      	uxtb	r3, r4
 80028f6:	4413      	add	r3, r2
 80028f8:	f813 2c70 	ldrb.w	r2, [r3, #-112]
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 80028fc:	3501      	adds	r5, #1
            reg_bit[adr] |= fields[i].get_registers()[j].mask();
 80028fe:	4310      	orrs	r0, r2
 8002900:	f803 0c70 	strb.w	r0, [r3, #-112]
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8002904:	4658      	mov	r0, fp
 8002906:	f7fe fc19 	bl	800113c <_ZN13Address_field13get_reg_countEv>
 800290a:	4285      	cmp	r5, r0
 800290c:	dbe3      	blt.n	80028d6 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x5a>
 800290e:	f04f 0900 	mov.w	r9, #0
 8002912:	464e      	mov	r6, r9
      { emplace_back(std::move(__x)); }
 8002914:	f8cd b00c 	str.w	fp, [sp, #12]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8002918:	464f      	mov	r7, r9
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 800291a:	464c      	mov	r4, r9
 800291c:	f10d 052f 	add.w	r5, sp, #47	; 0x2f
      { emplace_back(std::move(__x)); }
 8002920:	46b3      	mov	fp, r6
 8002922:	e010      	b.n	8002946 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0xca>
            if ((reg_bit[i] == 0xFF) || (_registers_state[i] == true)) {
 8002924:	eb0a 0304 	add.w	r3, sl, r4
 8002928:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800292c:	b99b      	cbnz	r3, 8002956 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0xda>
 800292e:	f10d 0117 	add.w	r1, sp, #23
 8002932:	a809      	add	r0, sp, #36	; 0x24
                    reg_read->push_back(i);
 8002934:	f88d 2017 	strb.w	r2, [sp, #23]
                check_reg_read = true;
 8002938:	f04f 0b01 	mov.w	fp, #1
 800293c:	f7ff fa3a 	bl	8001db4 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8002940:	3401      	adds	r4, #1
 8002942:	2c70      	cmp	r4, #112	; 0x70
 8002944:	d010      	beq.n	8002968 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0xec>
        if (reg_bit[i] != 0x00) {
 8002946:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800294a:	46b8      	mov	r8, r7
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f7      	beq.n	8002940 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0xc4>
            if ((reg_bit[i] == 0xFF) || (_registers_state[i] == true)) {
 8002950:	2bff      	cmp	r3, #255	; 0xff
 8002952:	b2e2      	uxtb	r2, r4
 8002954:	d1e6      	bne.n	8002924 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0xa8>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002956:	45b1      	cmp	r9, r6
 8002958:	d023      	beq.n	80029a2 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x126>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800295a:	b106      	cbz	r6, 800295e <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0xe2>
 800295c:	7032      	strb	r2, [r6, #0]
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 800295e:	3401      	adds	r4, #1
 8002960:	2c70      	cmp	r4, #112	; 0x70
	    ++this->_M_impl._M_finish;
 8002962:	f106 0601 	add.w	r6, r6, #1
 8002966:	d1ee      	bne.n	8002946 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0xca>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002968:	eba6 0308 	sub.w	r3, r6, r8
        for(int i = 0; i < (int)reg_not_read.size(); ++i) {
 800296c:	2b00      	cmp	r3, #0
 800296e:	465c      	mov	r4, fp
 8002970:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8002974:	dd09      	ble.n	800298a <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x10e>
            _registers_state[reg_not_read[i]] = true;
 8002976:	2001      	movs	r0, #1
 8002978:	1e79      	subs	r1, r7, #1
 800297a:	440b      	add	r3, r1
 800297c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002980:	4452      	add	r2, sl
        for(int i = 0; i < (int)reg_not_read.size(); ++i) {
 8002982:	4299      	cmp	r1, r3
            _registers_state[reg_not_read[i]] = true;
 8002984:	f882 007c 	strb.w	r0, [r2, #124]	; 0x7c
        for(int i = 0; i < (int)reg_not_read.size(); ++i) {
 8002988:	d1f8      	bne.n	800297c <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x100>
        if(read_fields) {
 800298a:	bbbc      	cbnz	r4, 80029fc <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x180>
	if (__p)
 800298c:	b117      	cbz	r7, 8002994 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x118>
	::operator delete(__p);
 800298e:	4638      	mov	r0, r7
 8002990:	f008 f8dc 	bl	800ab4c <_ZdlPv>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002994:	9809      	ldr	r0, [sp, #36]	; 0x24
	if (__p)
 8002996:	2800      	cmp	r0, #0
 8002998:	f43f af7f 	beq.w	800289a <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x1e>
 800299c:	f008 f8d6 	bl	800ab4c <_ZdlPv>
 80029a0:	e77b      	b.n	800289a <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x1e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80029a2:	eba9 0607 	sub.w	r6, r9, r7
	if (max_size() - size() < __n)
 80029a6:	1c73      	adds	r3, r6, #1
 80029a8:	d02e      	beq.n	8002a08 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x18c>
      if (__a < __b)
 80029aa:	b326      	cbz	r6, 80029f6 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x17a>
	const size_type __len = size() + std::max(size(), __n);
 80029ac:	ea4f 0946 	mov.w	r9, r6, lsl #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80029b0:	454e      	cmp	r6, r9
 80029b2:	bf88      	it	hi
 80029b4:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80029b8:	4648      	mov	r0, r9
 80029ba:	9201      	str	r2, [sp, #4]
 80029bc:	f008 f8ac 	bl	800ab18 <_Znwj>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80029c0:	42f0      	cmn	r0, r6
 80029c2:	bf18      	it	ne
 80029c4:	9a01      	ldrne	r2, [sp, #4]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80029c6:	4603      	mov	r3, r0
 80029c8:	4481      	add	r9, r0
 80029ca:	4680      	mov	r8, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80029cc:	bf18      	it	ne
 80029ce:	5582      	strbne	r2, [r0, r6]
	  if (_Num)
 80029d0:	b91e      	cbnz	r6, 80029da <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x15e>
	  ++__new_finish;
 80029d2:	1c46      	adds	r6, r0, #1
	if (__p)
 80029d4:	b947      	cbnz	r7, 80029e8 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x16c>
                check_reg_read = true;
 80029d6:	461f      	mov	r7, r3
 80029d8:	e7b2      	b.n	8002940 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0xc4>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80029da:	4632      	mov	r2, r6
 80029dc:	4639      	mov	r1, r7
 80029de:	f009 f92e 	bl	800bc3e <memmove>
 80029e2:	4603      	mov	r3, r0
 80029e4:	3601      	adds	r6, #1
 80029e6:	4406      	add	r6, r0
	::operator delete(__p);
 80029e8:	4638      	mov	r0, r7
 80029ea:	9301      	str	r3, [sp, #4]
 80029ec:	f008 f8ae 	bl	800ab4c <_ZdlPv>
 80029f0:	9b01      	ldr	r3, [sp, #4]
 80029f2:	461f      	mov	r7, r3
 80029f4:	e7a4      	b.n	8002940 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0xc4>
	const size_type __len = size() + std::max(size(), __n);
 80029f6:	f04f 0901 	mov.w	r9, #1
 80029fa:	e7dd      	b.n	80029b8 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x13c>
            register_read(fields, amt, false);
 80029fc:	2200      	movs	r2, #0
 80029fe:	4659      	mov	r1, fp
 8002a00:	4650      	mov	r0, sl
 8002a02:	f7ff fe7f 	bl	8002704 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49>
 8002a06:	e7c1      	b.n	800298c <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x110>
	  __throw_length_error(__N(__s));
 8002a08:	4801      	ldr	r0, [pc, #4]	; (8002a10 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47+0x194>)
 8002a0a:	f008 f8a1 	bl	800ab50 <_ZSt20__throw_length_errorPKc>
 8002a0e:	bf00      	nop
 8002a10:	0800bea0 	.word	0x0800bea0

08002a14 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>:
uint8_t LoRa_register::set_field_value(Address_field field, uint32_t value) {
 8002a14:	b084      	sub	sp, #16
 8002a16:	b510      	push	{r4, lr}
 8002a18:	ac03      	add	r4, sp, #12
 8002a1a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return set_field_value(&field, &value, 1);
 8002a1e:	4621      	mov	r1, r4
 8002a20:	aa0a      	add	r2, sp, #40	; 0x28
 8002a22:	f7ff ff2b 	bl	800287c <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh.constprop.47>
}
 8002a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a2a:	b004      	add	sp, #16
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop

08002a30 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>:
uint8_t LoRa_register::get_field_value(Address_field field, uint32_t* value, bool read) {
 8002a30:	b084      	sub	sp, #16
 8002a32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8002a36:	2400      	movs	r4, #0
 8002a38:	b0a1      	sub	sp, #132	; 0x84
 8002a3a:	ae29      	add	r6, sp, #164	; 0xa4
 8002a3c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8002a40:	4607      	mov	r7, r0
 8002a42:	4621      	mov	r1, r4
 8002a44:	a804      	add	r0, sp, #16
 8002a46:	2270      	movs	r2, #112	; 0x70
 8002a48:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002a4c:	9403      	str	r4, [sp, #12]
 8002a4e:	f89d 80c4 	ldrb.w	r8, [sp, #196]	; 0xc4
                reg_add[adr] = true;
 8002a52:	f04f 0901 	mov.w	r9, #1
 8002a56:	f009 f90b 	bl	800bc70 <memset>
 8002a5a:	e000      	b.n	8002a5e <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0x2e>
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8002a5c:	3401      	adds	r4, #1
 8002a5e:	4630      	mov	r0, r6
 8002a60:	f7fe fb6c 	bl	800113c <_ZN13Address_field13get_reg_countEv>
 8002a64:	4284      	cmp	r4, r0
 8002a66:	da20      	bge.n	8002aaa <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0x7a>
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 8002a68:	4630      	mov	r0, r6
 8002a6a:	f7fe fb65 	bl	8001138 <_ZN13Address_field13get_registersEv>
 8002a6e:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002a72:	f7fe fa6b 	bl	8000f4c <_ZN8Register7addressEv>
            if(reg_add[adr] == false) {
 8002a76:	aa20      	add	r2, sp, #128	; 0x80
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 8002a78:	b2c0      	uxtb	r0, r0
            if(reg_add[adr] == false) {
 8002a7a:	4402      	add	r2, r0
 8002a7c:	f812 2c70 	ldrb.w	r2, [r2, #-112]
 8002a80:	4603      	mov	r3, r0
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 8002a82:	f88d 0003 	strb.w	r0, [sp, #3]
            if(reg_add[adr] == false) {
 8002a86:	2a00      	cmp	r2, #0
 8002a88:	d1e8      	bne.n	8002a5c <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0x2c>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002a8a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8002a8e:	4291      	cmp	r1, r2
 8002a90:	d04a      	beq.n	8002b28 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0xf8>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002a92:	b119      	cbz	r1, 8002a9c <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0x6c>
 8002a94:	7008      	strb	r0, [r1, #0]
 8002a96:	9902      	ldr	r1, [sp, #8]
 8002a98:	f89d 3003 	ldrb.w	r3, [sp, #3]
	    ++this->_M_impl._M_finish;
 8002a9c:	3101      	adds	r1, #1
 8002a9e:	9102      	str	r1, [sp, #8]
                reg_add[adr] = true;
 8002aa0:	aa20      	add	r2, sp, #128	; 0x80
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f803 9c70 	strb.w	r9, [r3, #-112]
 8002aa8:	e7d8      	b.n	8002a5c <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0x2c>
 8002aaa:	e9dd 5901 	ldrd	r5, r9, [sp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002aae:	eba9 0305 	sub.w	r3, r9, r5
    for(int i = registers.size() - 1; i >= 0; --i) {
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	d418      	bmi.n	8002ae8 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0xb8>
 8002ab6:	18e8      	adds	r0, r5, r3
 8002ab8:	e003      	b.n	8002ac2 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0x92>
 8002aba:	1b63      	subs	r3, r4, r5
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	4620      	mov	r0, r4
 8002ac0:	db12      	blt.n	8002ae8 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0xb8>
        if(_registers_state[registers[i]] != false) {
 8002ac2:	7803      	ldrb	r3, [r0, #0]
 8002ac4:	1e44      	subs	r4, r0, #1
 8002ac6:	443b      	add	r3, r7
 8002ac8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f4      	beq.n	8002aba <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0x8a>
 8002ad0:	1c41      	adds	r1, r0, #1
      if (__position + 1 != end())
 8002ad2:	4589      	cmp	r9, r1
 8002ad4:	d002      	beq.n	8002adc <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0xac>
	  if (_Num)
 8002ad6:	ebb9 0201 	subs.w	r2, r9, r1
 8002ada:	d122      	bne.n	8002b22 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0xf2>
    for(int i = registers.size() - 1; i >= 0; --i) {
 8002adc:	1b63      	subs	r3, r4, r5
 8002ade:	2b00      	cmp	r3, #0
      --this->_M_impl._M_finish;
 8002ae0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	daec      	bge.n	8002ac2 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0x92>
    if((check.size() != 0) || read) {
 8002ae8:	454d      	cmp	r5, r9
 8002aea:	d114      	bne.n	8002b16 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0xe6>
 8002aec:	f1b8 0f00 	cmp.w	r8, #0
 8002af0:	d111      	bne.n	8002b16 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0xe6>
        values[i] = fields[i].get_value(_registers_data, LORA_DATA_SIZE);
 8002af2:	f107 010c 	add.w	r1, r7, #12
 8002af6:	4630      	mov	r0, r6
 8002af8:	2270      	movs	r2, #112	; 0x70
 8002afa:	f7fe fa75 	bl	8000fe8 <_ZN13Address_field9get_valueEPhi>
 8002afe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8002b00:	6018      	str	r0, [r3, #0]
	if (__p)
 8002b02:	b115      	cbz	r5, 8002b0a <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0xda>
	::operator delete(__p);
 8002b04:	4628      	mov	r0, r5
 8002b06:	f008 f821 	bl	800ab4c <_ZdlPv>
}
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	b021      	add	sp, #132	; 0x84
 8002b0e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b12:	b004      	add	sp, #16
 8002b14:	4770      	bx	lr
        register_read(fields, amt, read);
 8002b16:	4642      	mov	r2, r8
 8002b18:	4631      	mov	r1, r6
 8002b1a:	4638      	mov	r0, r7
 8002b1c:	f7ff fdf2 	bl	8002704 <_ZN13LoRa_register13register_readEP13Address_fieldhb.constprop.49>
 8002b20:	e7e7      	b.n	8002af2 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0xc2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002b22:	f009 f88c 	bl	800bc3e <memmove>
 8002b26:	e7d9      	b.n	8002adc <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0xac>
	  _M_realloc_insert(end(), __x);
 8002b28:	f10d 0203 	add.w	r2, sp, #3
 8002b2c:	a801      	add	r0, sp, #4
 8002b2e:	f7ff fa51 	bl	8001fd4 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
 8002b32:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002b36:	e7b3      	b.n	8002aa0 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb+0x70>

08002b38 <_GLOBAL__sub_I_REG_FIFO>:
// ----- ----- ----- Регистры ----- ----- -----
//   ----- ----- ----- - - - - - - ----- ----- -----
Register
// --- --- --- Регистр очереди --- --- ---
// - REG_FIFO -
reg_fifo[1] = {Register(REG_FIFO, 8, 0)},
 8002b38:	2300      	movs	r3, #0
    FifoRxByteAddrPtr, LowDataRateOptimize, AgcAutoOn, PpmCorrection, FreqError,
    RssiWideband, DetectionOptimize, InvertIQ, DetectionThreshold, SyncWord,
    Dio0Mapping, Dio1Mapping, Dio2Mapping, Dio3Mapping, Dio4Mapping, Dio5Mapping,
    Version, FastHopOn, TcxoInputOn, PaDac, FormerTemp, BitRateFrac, AgcReferenceLevel,
    AgcStep1, AgcStep2, AgcStep3, AgcStep4, AgcStep5, PllBandwidth
};
 8002b3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
reg_fifo[1] = {Register(REG_FIFO, 8, 0)},
 8002b3e:	f8df b494 	ldr.w	fp, [pc, #1172]	; 8002fd4 <_GLOBAL__sub_I_REG_FIFO+0x49c>
};
 8002b42:	b087      	sub	sp, #28
reg_fifo[1] = {Register(REG_FIFO, 8, 0)},
 8002b44:	4619      	mov	r1, r3
 8002b46:	4658      	mov	r0, fp
 8002b48:	2208      	movs	r2, #8
 8002b4a:	f7fe f9af 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_long_range_mode[1] = {Register(REG_OP_MODE, 1, 7)},
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f8df 9484 	ldr.w	r9, [pc, #1156]	; 8002fd8 <_GLOBAL__sub_I_REG_FIFO+0x4a0>
 8002b54:	4611      	mov	r1, r2
 8002b56:	4648      	mov	r0, r9
 8002b58:	2307      	movs	r3, #7
 8002b5a:	f7fe f9a7 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_access_shared_reg[1] = {Register(REG_OP_MODE, 1, 6)},
 8002b5e:	2201      	movs	r2, #1
 8002b60:	2306      	movs	r3, #6
 8002b62:	4611      	mov	r1, r2
 8002b64:	48dd      	ldr	r0, [pc, #884]	; (8002edc <_GLOBAL__sub_I_REG_FIFO+0x3a4>)
 8002b66:	f7fe f9a1 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_low_frequency_mode_on[1] = {Register(REG_OP_MODE, 1, 3)},
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	4611      	mov	r1, r2
 8002b70:	48db      	ldr	r0, [pc, #876]	; (8002ee0 <_GLOBAL__sub_I_REG_FIFO+0x3a8>)
 8002b72:	f7fe f99b 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_mode[1] = {Register(REG_OP_MODE, 3, 0)},
 8002b76:	2300      	movs	r3, #0
 8002b78:	2203      	movs	r2, #3
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	48d9      	ldr	r0, [pc, #868]	; (8002ee4 <_GLOBAL__sub_I_REG_FIFO+0x3ac>)
 8002b7e:	f7fe f995 	bl	8000eac <_ZN8RegisterC1Ethh>
              Register(REG_FRF_MSB, 8, 0)},
 8002b82:	2208      	movs	r2, #8
 8002b84:	4fd8      	ldr	r7, [pc, #864]	; (8002ee8 <_GLOBAL__sub_I_REG_FIFO+0x3b0>)
 8002b86:	4611      	mov	r1, r2
 8002b88:	4638      	mov	r0, r7
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	f7fe f98e 	bl	8000eac <_ZN8RegisterC1Ethh>
 8002b90:	f107 0008 	add.w	r0, r7, #8
 8002b94:	2300      	movs	r3, #0
 8002b96:	2208      	movs	r2, #8
 8002b98:	2107      	movs	r1, #7
 8002b9a:	f7fe f987 	bl	8000eac <_ZN8RegisterC1Ethh>
 8002b9e:	f107 0010 	add.w	r0, r7, #16
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	2208      	movs	r2, #8
 8002ba6:	2106      	movs	r1, #6
 8002ba8:	f7fe f980 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_pa_select[1] = {Register(REG_PA_CONFIG, 1, 7)},
 8002bac:	2307      	movs	r3, #7
 8002bae:	2201      	movs	r2, #1
 8002bb0:	2109      	movs	r1, #9
 8002bb2:	48ce      	ldr	r0, [pc, #824]	; (8002eec <_GLOBAL__sub_I_REG_FIFO+0x3b4>)
 8002bb4:	f7fe f97a 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_max_power[1] = {Register(REG_PA_CONFIG, 3, 4)},
 8002bb8:	2304      	movs	r3, #4
 8002bba:	2203      	movs	r2, #3
 8002bbc:	2109      	movs	r1, #9
 8002bbe:	48cc      	ldr	r0, [pc, #816]	; (8002ef0 <_GLOBAL__sub_I_REG_FIFO+0x3b8>)
 8002bc0:	f7fe f974 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_output_power[1] = {Register(REG_PA_CONFIG, 4, 0)},
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	2204      	movs	r2, #4
 8002bc8:	2109      	movs	r1, #9
 8002bca:	48ca      	ldr	r0, [pc, #808]	; (8002ef4 <_GLOBAL__sub_I_REG_FIFO+0x3bc>)
 8002bcc:	f7fe f96e 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_pa_ramp[1] = {Register(REG_PA_RAMP, 4, 0)},
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	2204      	movs	r2, #4
 8002bd4:	210a      	movs	r1, #10
 8002bd6:	48c8      	ldr	r0, [pc, #800]	; (8002ef8 <_GLOBAL__sub_I_REG_FIFO+0x3c0>)
 8002bd8:	f7fe f968 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_ocp_on[1] = {Register(REG_LR_OCP, 1, 5)},
 8002bdc:	2305      	movs	r3, #5
 8002bde:	2201      	movs	r2, #1
 8002be0:	210b      	movs	r1, #11
 8002be2:	48c6      	ldr	r0, [pc, #792]	; (8002efc <_GLOBAL__sub_I_REG_FIFO+0x3c4>)
 8002be4:	f7fe f962 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_lna_boost_lf[1] = {Register(REG_LNA, 2, 3)},
 8002be8:	f8df 83f0 	ldr.w	r8, [pc, #1008]	; 8002fdc <_GLOBAL__sub_I_REG_FIFO+0x4a4>
reg_ocp_trim[1] = {Register(REG_LR_OCP, 5, 0)},
 8002bec:	2300      	movs	r3, #0
 8002bee:	2205      	movs	r2, #5
 8002bf0:	210b      	movs	r1, #11
 8002bf2:	48c3      	ldr	r0, [pc, #780]	; (8002f00 <_GLOBAL__sub_I_REG_FIFO+0x3c8>)
 8002bf4:	f7fe f95a 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_lna_gain[1] = {Register(REG_LNA, 3, 5)},
 8002bf8:	2305      	movs	r3, #5
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	210c      	movs	r1, #12
 8002bfe:	48c1      	ldr	r0, [pc, #772]	; (8002f04 <_GLOBAL__sub_I_REG_FIFO+0x3cc>)
 8002c00:	f7fe f954 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_lna_boost_lf[1] = {Register(REG_LNA, 2, 3)},
 8002c04:	4640      	mov	r0, r8
 8002c06:	2303      	movs	r3, #3
 8002c08:	2202      	movs	r2, #2
 8002c0a:	210c      	movs	r1, #12
 8002c0c:	f7fe f94e 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_lna_boost_hf[1] = {Register(REG_LNA, 2, 0)},
 8002c10:	2300      	movs	r3, #0
 8002c12:	2202      	movs	r2, #2
 8002c14:	210c      	movs	r1, #12
 8002c16:	48bc      	ldr	r0, [pc, #752]	; (8002f08 <_GLOBAL__sub_I_REG_FIFO+0x3d0>)
 8002c18:	f7fe f948 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_fifo_addr_ptr[1] = {Register(REG_FIFO_ADDR_PTR, 8, 0)},
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	2208      	movs	r2, #8
 8002c20:	210d      	movs	r1, #13
 8002c22:	48ba      	ldr	r0, [pc, #744]	; (8002f0c <_GLOBAL__sub_I_REG_FIFO+0x3d4>)
 8002c24:	f7fe f942 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_fifo_tx_base_addr[1] = {Register(REG_FIFO_TX_BASE_ADDR, 8, 0)},
 8002c28:	2300      	movs	r3, #0
 8002c2a:	2208      	movs	r2, #8
 8002c2c:	210e      	movs	r1, #14
 8002c2e:	48b8      	ldr	r0, [pc, #736]	; (8002f10 <_GLOBAL__sub_I_REG_FIFO+0x3d8>)
 8002c30:	f7fe f93c 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_fifo_rx_base_addr[1] = {Register(REG_FIFO_RX_BASE_ADDR, 8, 0)},
 8002c34:	2300      	movs	r3, #0
 8002c36:	2208      	movs	r2, #8
 8002c38:	210f      	movs	r1, #15
 8002c3a:	48b6      	ldr	r0, [pc, #728]	; (8002f14 <_GLOBAL__sub_I_REG_FIFO+0x3dc>)
 8002c3c:	f7fe f936 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_fifo_rx_current_addr[1] = {Register(REG_FIFO_RX_CURRENT_ADDR, 8, 0)},
 8002c40:	2300      	movs	r3, #0
 8002c42:	2208      	movs	r2, #8
 8002c44:	2110      	movs	r1, #16
 8002c46:	48b4      	ldr	r0, [pc, #720]	; (8002f18 <_GLOBAL__sub_I_REG_FIFO+0x3e0>)
 8002c48:	f7fe f930 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_rx_timeout_mask[1] = {Register(REG_IRQ_FLAGS_MASK, 1, 7)},
 8002c4c:	2307      	movs	r3, #7
 8002c4e:	2201      	movs	r2, #1
 8002c50:	2111      	movs	r1, #17
 8002c52:	48b2      	ldr	r0, [pc, #712]	; (8002f1c <_GLOBAL__sub_I_REG_FIFO+0x3e4>)
 8002c54:	f7fe f92a 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_rx_done_mask[1] = {Register(REG_IRQ_FLAGS_MASK, 1, 6)},
 8002c58:	2306      	movs	r3, #6
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	2111      	movs	r1, #17
 8002c5e:	48b0      	ldr	r0, [pc, #704]	; (8002f20 <_GLOBAL__sub_I_REG_FIFO+0x3e8>)
 8002c60:	f7fe f924 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_payload_crc_error_mask[1] = {Register(REG_IRQ_FLAGS_MASK, 1, 5)},
 8002c64:	2305      	movs	r3, #5
 8002c66:	2201      	movs	r2, #1
 8002c68:	2111      	movs	r1, #17
 8002c6a:	48ae      	ldr	r0, [pc, #696]	; (8002f24 <_GLOBAL__sub_I_REG_FIFO+0x3ec>)
 8002c6c:	f7fe f91e 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_valid_header_mask[1] = {Register(REG_IRQ_FLAGS_MASK, 1, 4)},
 8002c70:	2304      	movs	r3, #4
 8002c72:	2201      	movs	r2, #1
 8002c74:	2111      	movs	r1, #17
 8002c76:	48ac      	ldr	r0, [pc, #688]	; (8002f28 <_GLOBAL__sub_I_REG_FIFO+0x3f0>)
 8002c78:	f7fe f918 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_tx_done_mask[1] = {Register(REG_IRQ_FLAGS_MASK, 1, 3)},
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	2201      	movs	r2, #1
 8002c80:	2111      	movs	r1, #17
 8002c82:	48aa      	ldr	r0, [pc, #680]	; (8002f2c <_GLOBAL__sub_I_REG_FIFO+0x3f4>)
 8002c84:	f7fe f912 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_cad_done_mask[1] = {Register(REG_IRQ_FLAGS_MASK, 1, 2)},
 8002c88:	2302      	movs	r3, #2
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	2111      	movs	r1, #17
 8002c8e:	48a8      	ldr	r0, [pc, #672]	; (8002f30 <_GLOBAL__sub_I_REG_FIFO+0x3f8>)
 8002c90:	f7fe f90c 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_fhss_change_channel_mask[1] = {Register(REG_IRQ_FLAGS_MASK, 1, 1)},
 8002c94:	2301      	movs	r3, #1
 8002c96:	2111      	movs	r1, #17
 8002c98:	461a      	mov	r2, r3
 8002c9a:	48a6      	ldr	r0, [pc, #664]	; (8002f34 <_GLOBAL__sub_I_REG_FIFO+0x3fc>)
 8002c9c:	f7fe f906 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_cad_detected_mask[1] = {Register(REG_IRQ_FLAGS_MASK, 1, 0)},
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	2111      	movs	r1, #17
 8002ca6:	48a4      	ldr	r0, [pc, #656]	; (8002f38 <_GLOBAL__sub_I_REG_FIFO+0x400>)
 8002ca8:	f7fe f900 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_rx_timeout[1] = {Register(REG_IRQ_FLAGS, 1, 7)},
 8002cac:	2307      	movs	r3, #7
 8002cae:	2201      	movs	r2, #1
 8002cb0:	2112      	movs	r1, #18
 8002cb2:	48a2      	ldr	r0, [pc, #648]	; (8002f3c <_GLOBAL__sub_I_REG_FIFO+0x404>)
 8002cb4:	f7fe f8fa 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_rx_done[1] = {Register(REG_IRQ_FLAGS, 1, 6)},
 8002cb8:	2306      	movs	r3, #6
 8002cba:	2201      	movs	r2, #1
 8002cbc:	2112      	movs	r1, #18
 8002cbe:	48a0      	ldr	r0, [pc, #640]	; (8002f40 <_GLOBAL__sub_I_REG_FIFO+0x408>)
 8002cc0:	f7fe f8f4 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_payload_crc_error[1] = {Register(REG_IRQ_FLAGS, 1, 5)},
 8002cc4:	2305      	movs	r3, #5
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	2112      	movs	r1, #18
 8002cca:	489e      	ldr	r0, [pc, #632]	; (8002f44 <_GLOBAL__sub_I_REG_FIFO+0x40c>)
 8002ccc:	f7fe f8ee 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_valid_header[1] = {Register(REG_IRQ_FLAGS, 1, 4)},
 8002cd0:	2304      	movs	r3, #4
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	2112      	movs	r1, #18
 8002cd6:	489c      	ldr	r0, [pc, #624]	; (8002f48 <_GLOBAL__sub_I_REG_FIFO+0x410>)
 8002cd8:	f7fe f8e8 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_tx_done[1] = {Register(REG_IRQ_FLAGS, 1, 3)},
 8002cdc:	2303      	movs	r3, #3
 8002cde:	2201      	movs	r2, #1
 8002ce0:	2112      	movs	r1, #18
 8002ce2:	489a      	ldr	r0, [pc, #616]	; (8002f4c <_GLOBAL__sub_I_REG_FIFO+0x414>)
 8002ce4:	f7fe f8e2 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_cad_done[1] = {Register(REG_IRQ_FLAGS, 1, 2)},
 8002ce8:	2302      	movs	r3, #2
 8002cea:	2201      	movs	r2, #1
 8002cec:	2112      	movs	r1, #18
 8002cee:	4898      	ldr	r0, [pc, #608]	; (8002f50 <_GLOBAL__sub_I_REG_FIFO+0x418>)
 8002cf0:	f7fe f8dc 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_fhss_change_channel[1] = {Register(REG_IRQ_FLAGS, 1, 1)},
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	2112      	movs	r1, #18
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4896      	ldr	r0, [pc, #600]	; (8002f54 <_GLOBAL__sub_I_REG_FIFO+0x41c>)
 8002cfc:	f7fe f8d6 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_cad_detected[1] = {Register(REG_IRQ_FLAGS, 1, 0)},
 8002d00:	2300      	movs	r3, #0
 8002d02:	2201      	movs	r2, #1
 8002d04:	2112      	movs	r1, #18
 8002d06:	4894      	ldr	r0, [pc, #592]	; (8002f58 <_GLOBAL__sub_I_REG_FIFO+0x420>)
 8002d08:	f7fe f8d0 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_fifo_rx_bytes_nb[1] = {Register(REG_RX_NB_BYTES, 8, 0)},
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	2208      	movs	r2, #8
 8002d10:	2113      	movs	r1, #19
 8002d12:	4892      	ldr	r0, [pc, #584]	; (8002f5c <_GLOBAL__sub_I_REG_FIFO+0x424>)
 8002d14:	f7fe f8ca 	bl	8000eac <_ZN8RegisterC1Ethh>
                           Register(REG_RX_HEADER_CNT_VALUE_MSB, 8, 0)},
 8002d18:	2300      	movs	r3, #0
 8002d1a:	2208      	movs	r2, #8
 8002d1c:	2115      	movs	r1, #21
 8002d1e:	4890      	ldr	r0, [pc, #576]	; (8002f60 <_GLOBAL__sub_I_REG_FIFO+0x428>)
 8002d20:	f7fe f8c4 	bl	8000eac <_ZN8RegisterC1Ethh>
 8002d24:	4b8e      	ldr	r3, [pc, #568]	; (8002f60 <_GLOBAL__sub_I_REG_FIFO+0x428>)
                           Register(REG_RX_PACKET_CNT_VALUE_MSB, 8, 0)},
 8002d26:	4c8f      	ldr	r4, [pc, #572]	; (8002f64 <_GLOBAL__sub_I_REG_FIFO+0x42c>)
                           Register(REG_RX_HEADER_CNT_VALUE_MSB, 8, 0)},
 8002d28:	f103 0008 	add.w	r0, r3, #8
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	2300      	movs	r3, #0
 8002d30:	2114      	movs	r1, #20
 8002d32:	f7fe f8bb 	bl	8000eac <_ZN8RegisterC1Ethh>
                           Register(REG_RX_PACKET_CNT_VALUE_MSB, 8, 0)},
 8002d36:	4620      	mov	r0, r4
 8002d38:	2300      	movs	r3, #0
 8002d3a:	2208      	movs	r2, #8
 8002d3c:	2117      	movs	r1, #23
 8002d3e:	f7fe f8b5 	bl	8000eac <_ZN8RegisterC1Ethh>
 8002d42:	f104 0008 	add.w	r0, r4, #8
 8002d46:	2300      	movs	r3, #0
 8002d48:	2208      	movs	r2, #8
 8002d4a:	2116      	movs	r1, #22
 8002d4c:	f7fe f8ae 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_rx_coding_rate[1] = {Register(REG_MODEM_STAT, 3, 5)},
 8002d50:	2305      	movs	r3, #5
 8002d52:	2203      	movs	r2, #3
 8002d54:	2118      	movs	r1, #24
 8002d56:	4884      	ldr	r0, [pc, #528]	; (8002f68 <_GLOBAL__sub_I_REG_FIFO+0x430>)
 8002d58:	f7fe f8a8 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_modem_status[1] = {Register(REG_MODEM_STAT, 5, 0)},
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	2205      	movs	r2, #5
 8002d60:	2118      	movs	r1, #24
 8002d62:	4882      	ldr	r0, [pc, #520]	; (8002f6c <_GLOBAL__sub_I_REG_FIFO+0x434>)
 8002d64:	f7fe f8a2 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_packet_snr[1] = {Register(REG_PKT_SNR_VALUE, 8, 0)},
 8002d68:	2300      	movs	r3, #0
 8002d6a:	2208      	movs	r2, #8
 8002d6c:	2119      	movs	r1, #25
 8002d6e:	4880      	ldr	r0, [pc, #512]	; (8002f70 <_GLOBAL__sub_I_REG_FIFO+0x438>)
 8002d70:	f7fe f89c 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_packet_rssi[1] = {Register(REG_PKT_RSSI_VALUE, 8, 0)},
 8002d74:	2300      	movs	r3, #0
 8002d76:	2208      	movs	r2, #8
 8002d78:	211a      	movs	r1, #26
 8002d7a:	487e      	ldr	r0, [pc, #504]	; (8002f74 <_GLOBAL__sub_I_REG_FIFO+0x43c>)
 8002d7c:	f7fe f896 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_rssi[1] = {Register(REG_RSSI_VALUE, 8, 0)},
 8002d80:	2300      	movs	r3, #0
 8002d82:	2208      	movs	r2, #8
 8002d84:	211b      	movs	r1, #27
 8002d86:	487c      	ldr	r0, [pc, #496]	; (8002f78 <_GLOBAL__sub_I_REG_FIFO+0x440>)
 8002d88:	f7fe f890 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_pll_timeout[1] = {Register(REG_HOP_CHANNEL, 1, 7)},
 8002d8c:	2307      	movs	r3, #7
 8002d8e:	2201      	movs	r2, #1
 8002d90:	211c      	movs	r1, #28
 8002d92:	487a      	ldr	r0, [pc, #488]	; (8002f7c <_GLOBAL__sub_I_REG_FIFO+0x444>)
 8002d94:	f7fe f88a 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_crc_on_payload[1] = {Register(REG_HOP_CHANNEL, 1, 6)},
 8002d98:	2306      	movs	r3, #6
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	211c      	movs	r1, #28
 8002d9e:	4878      	ldr	r0, [pc, #480]	; (8002f80 <_GLOBAL__sub_I_REG_FIFO+0x448>)
 8002da0:	f7fe f884 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_fhss_present_channel[1] = {Register(REG_HOP_CHANNEL, 6, 0)},
 8002da4:	2300      	movs	r3, #0
 8002da6:	2206      	movs	r2, #6
 8002da8:	211c      	movs	r1, #28
 8002daa:	4876      	ldr	r0, [pc, #472]	; (8002f84 <_GLOBAL__sub_I_REG_FIFO+0x44c>)
 8002dac:	f7fe f87e 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_bw[1] = {Register(REG_MODEM_CONFIG_1, 4, 4)},
 8002db0:	2304      	movs	r3, #4
 8002db2:	211d      	movs	r1, #29
 8002db4:	461a      	mov	r2, r3
 8002db6:	4874      	ldr	r0, [pc, #464]	; (8002f88 <_GLOBAL__sub_I_REG_FIFO+0x450>)
 8002db8:	f7fe f878 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_coding_rate[1] = {Register(REG_MODEM_CONFIG_1, 3, 1)},
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	211d      	movs	r1, #29
 8002dc2:	4872      	ldr	r0, [pc, #456]	; (8002f8c <_GLOBAL__sub_I_REG_FIFO+0x454>)
 8002dc4:	f7fe f872 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_implicit_header_mode_on[1] = {Register(REG_MODEM_CONFIG_1, 1, 0)},
 8002dc8:	2300      	movs	r3, #0
 8002dca:	2201      	movs	r2, #1
 8002dcc:	211d      	movs	r1, #29
 8002dce:	4870      	ldr	r0, [pc, #448]	; (8002f90 <_GLOBAL__sub_I_REG_FIFO+0x458>)
 8002dd0:	f7fe f86c 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_spreading_factor[1] = {Register(REG_MODEM_CONFIG_2, 4, 4)},
 8002dd4:	2304      	movs	r3, #4
 8002dd6:	211e      	movs	r1, #30
 8002dd8:	461a      	mov	r2, r3
 8002dda:	486e      	ldr	r0, [pc, #440]	; (8002f94 <_GLOBAL__sub_I_REG_FIFO+0x45c>)
 8002ddc:	f7fe f866 	bl	8000eac <_ZN8RegisterC1Ethh>
                       Register(REG_MODEM_CONFIG_2, 2, 0)},
 8002de0:	4d6d      	ldr	r5, [pc, #436]	; (8002f98 <_GLOBAL__sub_I_REG_FIFO+0x460>)
reg_tx_continuous_mode[1] = {Register(REG_MODEM_CONFIG_2, 1, 3)},
 8002de2:	2303      	movs	r3, #3
 8002de4:	2201      	movs	r2, #1
 8002de6:	211e      	movs	r1, #30
 8002de8:	486c      	ldr	r0, [pc, #432]	; (8002f9c <_GLOBAL__sub_I_REG_FIFO+0x464>)
 8002dea:	f7fe f85f 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_rx_payload_crc_on[1] = {Register(REG_MODEM_CONFIG_2, 1, 2)},
 8002dee:	2302      	movs	r3, #2
 8002df0:	2201      	movs	r2, #1
 8002df2:	211e      	movs	r1, #30
 8002df4:	486a      	ldr	r0, [pc, #424]	; (8002fa0 <_GLOBAL__sub_I_REG_FIFO+0x468>)
 8002df6:	f7fe f859 	bl	8000eac <_ZN8RegisterC1Ethh>
                          Register(REG_PREAMBLE_MSB, 8, 0)},
 8002dfa:	4c6a      	ldr	r4, [pc, #424]	; (8002fa4 <_GLOBAL__sub_I_REG_FIFO+0x46c>)
                       Register(REG_MODEM_CONFIG_2, 2, 0)},
 8002dfc:	4628      	mov	r0, r5
 8002dfe:	2300      	movs	r3, #0
 8002e00:	2208      	movs	r2, #8
 8002e02:	211f      	movs	r1, #31
 8002e04:	f7fe f852 	bl	8000eac <_ZN8RegisterC1Ethh>
 8002e08:	f105 0008 	add.w	r0, r5, #8
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	2202      	movs	r2, #2
 8002e10:	211e      	movs	r1, #30
 8002e12:	f7fe f84b 	bl	8000eac <_ZN8RegisterC1Ethh>
                          Register(REG_PREAMBLE_MSB, 8, 0)},
 8002e16:	4620      	mov	r0, r4
 8002e18:	2300      	movs	r3, #0
 8002e1a:	2208      	movs	r2, #8
 8002e1c:	2121      	movs	r1, #33	; 0x21
 8002e1e:	f7fe f845 	bl	8000eac <_ZN8RegisterC1Ethh>
 8002e22:	f104 0008 	add.w	r0, r4, #8
 8002e26:	2300      	movs	r3, #0
 8002e28:	2208      	movs	r2, #8
 8002e2a:	2120      	movs	r1, #32
 8002e2c:	f7fe f83e 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_payload_length[1] = {Register(REG_PAYLOAD_LENGTH, 8, 0)},
 8002e30:	2300      	movs	r3, #0
 8002e32:	2208      	movs	r2, #8
 8002e34:	2122      	movs	r1, #34	; 0x22
 8002e36:	485c      	ldr	r0, [pc, #368]	; (8002fa8 <_GLOBAL__sub_I_REG_FIFO+0x470>)
 8002e38:	f7fe f838 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_payload_max_length[1] = {Register(REG_MAX_PAYLOAD_LENGTH, 8, 0)},
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	2208      	movs	r2, #8
 8002e40:	2123      	movs	r1, #35	; 0x23
 8002e42:	485a      	ldr	r0, [pc, #360]	; (8002fac <_GLOBAL__sub_I_REG_FIFO+0x474>)
 8002e44:	f7fe f832 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_freq_hopping_period[1] = {Register(REG_HOP_PERIOD, 8, 0)},
 8002e48:	2300      	movs	r3, #0
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	2124      	movs	r1, #36	; 0x24
 8002e4e:	4858      	ldr	r0, [pc, #352]	; (8002fb0 <_GLOBAL__sub_I_REG_FIFO+0x478>)
 8002e50:	f7fe f82c 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_fifo_rx_byte_addr_ptr[1] = {Register(REG_FIFI_RX_BYTE_ADDR, 8, 0)},
 8002e54:	2300      	movs	r3, #0
 8002e56:	2208      	movs	r2, #8
 8002e58:	2125      	movs	r1, #37	; 0x25
 8002e5a:	4856      	ldr	r0, [pc, #344]	; (8002fb4 <_GLOBAL__sub_I_REG_FIFO+0x47c>)
 8002e5c:	f7fe f826 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_low_data_rate_optimize[1] = {Register(REG_MODEM_CONFIG_3, 1, 3)},
 8002e60:	2303      	movs	r3, #3
 8002e62:	2201      	movs	r2, #1
 8002e64:	2126      	movs	r1, #38	; 0x26
 8002e66:	4854      	ldr	r0, [pc, #336]	; (8002fb8 <_GLOBAL__sub_I_REG_FIFO+0x480>)
 8002e68:	f7fe f820 	bl	8000eac <_ZN8RegisterC1Ethh>
                     Register(REG_FEI_MSB, 4, 0)},
 8002e6c:	4c53      	ldr	r4, [pc, #332]	; (8002fbc <_GLOBAL__sub_I_REG_FIFO+0x484>)
reg_agc_auto_on[1] = {Register(REG_MODEM_CONFIG_3, 1, 2)},
 8002e6e:	2302      	movs	r3, #2
 8002e70:	2201      	movs	r2, #1
 8002e72:	2126      	movs	r1, #38	; 0x26
 8002e74:	4852      	ldr	r0, [pc, #328]	; (8002fc0 <_GLOBAL__sub_I_REG_FIFO+0x488>)
 8002e76:	f7fe f819 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_ppm_correction[1] = {Register(REG_PPM_CORRECTION, 8, 0)},
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	2208      	movs	r2, #8
 8002e7e:	2127      	movs	r1, #39	; 0x27
 8002e80:	4850      	ldr	r0, [pc, #320]	; (8002fc4 <_GLOBAL__sub_I_REG_FIFO+0x48c>)
 8002e82:	f7fe f813 	bl	8000eac <_ZN8RegisterC1Ethh>
                     Register(REG_FEI_MSB, 4, 0)},
 8002e86:	4620      	mov	r0, r4
 8002e88:	2300      	movs	r3, #0
 8002e8a:	2208      	movs	r2, #8
 8002e8c:	212a      	movs	r1, #42	; 0x2a
 8002e8e:	f7fe f80d 	bl	8000eac <_ZN8RegisterC1Ethh>
 8002e92:	f104 0008 	add.w	r0, r4, #8
 8002e96:	2300      	movs	r3, #0
 8002e98:	2208      	movs	r2, #8
 8002e9a:	2129      	movs	r1, #41	; 0x29
 8002e9c:	f7fe f806 	bl	8000eac <_ZN8RegisterC1Ethh>
 8002ea0:	f104 0010 	add.w	r0, r4, #16
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	2204      	movs	r2, #4
 8002ea8:	2128      	movs	r1, #40	; 0x28
 8002eaa:	f7fd ffff 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_rssi_wideband[1] = {Register(REG_RSSI_WIDEBAND, 8, 0)},
 8002eae:	2300      	movs	r3, #0
 8002eb0:	2208      	movs	r2, #8
 8002eb2:	212c      	movs	r1, #44	; 0x2c
 8002eb4:	4844      	ldr	r0, [pc, #272]	; (8002fc8 <_GLOBAL__sub_I_REG_FIFO+0x490>)
 8002eb6:	f7fd fff9 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_detection_optimize[1] = {Register(REG_DETECTION_OPTIMIZE, 3, 0)},
 8002eba:	2300      	movs	r3, #0
 8002ebc:	2203      	movs	r2, #3
 8002ebe:	2131      	movs	r1, #49	; 0x31
 8002ec0:	4842      	ldr	r0, [pc, #264]	; (8002fcc <_GLOBAL__sub_I_REG_FIFO+0x494>)
 8002ec2:	f7fd fff3 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_invert_iq[1] = {Register(REG_INVERT_IQ, 1, 6)},
 8002ec6:	2306      	movs	r3, #6
 8002ec8:	2201      	movs	r2, #1
 8002eca:	2133      	movs	r1, #51	; 0x33
 8002ecc:	4840      	ldr	r0, [pc, #256]	; (8002fd0 <_GLOBAL__sub_I_REG_FIFO+0x498>)
 8002ece:	f7fd ffed 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_detection_threshold[1] = {Register(REG_DETECTION_THRESHOLD, 8, 0)},
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	2208      	movs	r2, #8
 8002ed6:	2137      	movs	r1, #55	; 0x37
 8002ed8:	e082      	b.n	8002fe0 <_GLOBAL__sub_I_REG_FIFO+0x4a8>
 8002eda:	bf00      	nop
 8002edc:	2000162c 	.word	0x2000162c
 8002ee0:	200017bc 	.word	0x200017bc
 8002ee4:	200017d4 	.word	0x200017d4
 8002ee8:	2000176c 	.word	0x2000176c
 8002eec:	2000180c 	.word	0x2000180c
 8002ef0:	200017cc 	.word	0x200017cc
 8002ef4:	200017f4 	.word	0x200017f4
 8002ef8:	20001804 	.word	0x20001804
 8002efc:	200017e4 	.word	0x200017e4
 8002f00:	200017ec 	.word	0x200017ec
 8002f04:	200017a4 	.word	0x200017a4
 8002f08:	20001794 	.word	0x20001794
 8002f0c:	20001714 	.word	0x20001714
 8002f10:	2000173c 	.word	0x2000173c
 8002f14:	2000171c 	.word	0x2000171c
 8002f18:	20001734 	.word	0x20001734
 8002f1c:	200018a4 	.word	0x200018a4
 8002f20:	2000188c 	.word	0x2000188c
 8002f24:	2000182c 	.word	0x2000182c
 8002f28:	20001904 	.word	0x20001904
 8002f2c:	200018e4 	.word	0x200018e4
 8002f30:	20001694 	.word	0x20001694
 8002f34:	200016fc 	.word	0x200016fc
 8002f38:	20001684 	.word	0x20001684
 8002f3c:	2000189c 	.word	0x2000189c
 8002f40:	20001884 	.word	0x20001884
 8002f44:	20001824 	.word	0x20001824
 8002f48:	200018ec 	.word	0x200018ec
 8002f4c:	200018dc 	.word	0x200018dc
 8002f50:	2000168c 	.word	0x2000168c
 8002f54:	200016f4 	.word	0x200016f4
 8002f58:	2000167c 	.word	0x2000167c
 8002f5c:	2000172c 	.word	0x2000172c
 8002f60:	200018f4 	.word	0x200018f4
 8002f64:	2000190c 	.word	0x2000190c
 8002f68:	2000187c 	.word	0x2000187c
 8002f6c:	200017dc 	.word	0x200017dc
 8002f70:	2000181c 	.word	0x2000181c
 8002f74:	20001814 	.word	0x20001814
 8002f78:	2000186c 	.word	0x2000186c
 8002f7c:	2000184c 	.word	0x2000184c
 8002f80:	200016a4 	.word	0x200016a4
 8002f84:	20001704 	.word	0x20001704
 8002f88:	20001674 	.word	0x20001674
 8002f8c:	2000169c 	.word	0x2000169c
 8002f90:	20001784 	.word	0x20001784
 8002f94:	200018ac 	.word	0x200018ac
 8002f98:	200018b4 	.word	0x200018b4
 8002f9c:	200018d4 	.word	0x200018d4
 8002fa0:	20001894 	.word	0x20001894
 8002fa4:	2000185c 	.word	0x2000185c
 8002fa8:	20001834 	.word	0x20001834
 8002fac:	2000183c 	.word	0x2000183c
 8002fb0:	20001764 	.word	0x20001764
 8002fb4:	20001724 	.word	0x20001724
 8002fb8:	200017b4 	.word	0x200017b4
 8002fbc:	2000174c 	.word	0x2000174c
 8002fc0:	20001634 	.word	0x20001634
 8002fc4:	20001854 	.word	0x20001854
 8002fc8:	20001874 	.word	0x20001874
 8002fcc:	200016ac 	.word	0x200016ac
 8002fd0:	2000178c 	.word	0x2000178c
 8002fd4:	2000170c 	.word	0x2000170c
 8002fd8:	200017ac 	.word	0x200017ac
 8002fdc:	2000179c 	.word	0x2000179c
 8002fe0:	48cd      	ldr	r0, [pc, #820]	; (8003318 <_GLOBAL__sub_I_REG_FIFO+0x7e0>)
 8002fe2:	f7fd ff63 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_sync_word[1] = {Register(REG_SYNC_WORD, 8, 0)},  // , reserved_value=[0x34])
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	2208      	movs	r2, #8
 8002fea:	2139      	movs	r1, #57	; 0x39
 8002fec:	48cb      	ldr	r0, [pc, #812]	; (800331c <_GLOBAL__sub_I_REG_FIFO+0x7e4>)
 8002fee:	f7fd ff5d 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_dio0_mapping[1] = {Register(REG_DIO_MAPPING_1, 2, 6)},
 8002ff2:	2306      	movs	r3, #6
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	2140      	movs	r1, #64	; 0x40
 8002ff8:	48c9      	ldr	r0, [pc, #804]	; (8003320 <_GLOBAL__sub_I_REG_FIFO+0x7e8>)
 8002ffa:	f7fd ff57 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_dio1_mapping[1] = {Register(REG_DIO_MAPPING_1, 2, 4)},
 8002ffe:	2304      	movs	r3, #4
 8003000:	2202      	movs	r2, #2
 8003002:	2140      	movs	r1, #64	; 0x40
 8003004:	48c7      	ldr	r0, [pc, #796]	; (8003324 <_GLOBAL__sub_I_REG_FIFO+0x7ec>)
 8003006:	f7fd ff51 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_dio2_mapping[1] = {Register(REG_DIO_MAPPING_1, 2, 2)},
 800300a:	2302      	movs	r3, #2
 800300c:	2140      	movs	r1, #64	; 0x40
 800300e:	461a      	mov	r2, r3
 8003010:	48c5      	ldr	r0, [pc, #788]	; (8003328 <_GLOBAL__sub_I_REG_FIFO+0x7f0>)
 8003012:	f7fd ff4b 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_dio3_mapping[1] = {Register(REG_DIO_MAPPING_1, 2, 0)},
 8003016:	2300      	movs	r3, #0
 8003018:	2202      	movs	r2, #2
 800301a:	2140      	movs	r1, #64	; 0x40
 800301c:	48c3      	ldr	r0, [pc, #780]	; (800332c <_GLOBAL__sub_I_REG_FIFO+0x7f4>)
 800301e:	f7fd ff45 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_dio4_mapping[1] = {Register(REG_DIO_MAPPING_2, 2, 6)},
 8003022:	2306      	movs	r3, #6
 8003024:	2202      	movs	r2, #2
 8003026:	2141      	movs	r1, #65	; 0x41
 8003028:	48c1      	ldr	r0, [pc, #772]	; (8003330 <_GLOBAL__sub_I_REG_FIFO+0x7f8>)
 800302a:	f7fd ff3f 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_dio5_mapping[1] = {Register(REG_DIO_MAPPING_2, 2, 4)},
 800302e:	2304      	movs	r3, #4
 8003030:	2202      	movs	r2, #2
 8003032:	2141      	movs	r1, #65	; 0x41
 8003034:	48bf      	ldr	r0, [pc, #764]	; (8003334 <_GLOBAL__sub_I_REG_FIFO+0x7fc>)
 8003036:	f7fd ff39 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_map_preamble_detect[1] = {Register(REG_DIO_MAPPING_2, 1, 0)},
 800303a:	2300      	movs	r3, #0
 800303c:	2201      	movs	r2, #1
 800303e:	2141      	movs	r1, #65	; 0x41
 8003040:	48bd      	ldr	r0, [pc, #756]	; (8003338 <_GLOBAL__sub_I_REG_FIFO+0x800>)
 8003042:	f7fd ff33 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_version[1] = {Register(REG_VERSION, 8, 0)},
 8003046:	2300      	movs	r3, #0
 8003048:	2208      	movs	r2, #8
 800304a:	2142      	movs	r1, #66	; 0x42
 800304c:	48bb      	ldr	r0, [pc, #748]	; (800333c <_GLOBAL__sub_I_REG_FIFO+0x804>)
 800304e:	f7fd ff2d 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_fast_hop_on[1] = {Register(REG_PLL_HOP, 1, 7)},
 8003052:	2307      	movs	r3, #7
 8003054:	2201      	movs	r2, #1
 8003056:	2144      	movs	r1, #68	; 0x44
 8003058:	48b9      	ldr	r0, [pc, #740]	; (8003340 <_GLOBAL__sub_I_REG_FIFO+0x808>)
 800305a:	f7fd ff27 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_tcxo_input_on[1] = {Register(REG_TCXO, 1, 4)},
 800305e:	2304      	movs	r3, #4
 8003060:	2201      	movs	r2, #1
 8003062:	214b      	movs	r1, #75	; 0x4b
 8003064:	48b7      	ldr	r0, [pc, #732]	; (8003344 <_GLOBAL__sub_I_REG_FIFO+0x80c>)
 8003066:	f7fd ff21 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_pa_dac[1] = {Register(REG_PA_DAC, 3, 0)},
 800306a:	2300      	movs	r3, #0
 800306c:	2203      	movs	r2, #3
 800306e:	214d      	movs	r1, #77	; 0x4d
 8003070:	48b5      	ldr	r0, [pc, #724]	; (8003348 <_GLOBAL__sub_I_REG_FIFO+0x810>)
 8003072:	f7fd ff1b 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_former_temp[1] = {Register(REG_FORMER_TEMP, 8, 0)},
 8003076:	2300      	movs	r3, #0
 8003078:	2208      	movs	r2, #8
 800307a:	215b      	movs	r1, #91	; 0x5b
 800307c:	48b3      	ldr	r0, [pc, #716]	; (800334c <_GLOBAL__sub_I_REG_FIFO+0x814>)
 800307e:	f7fd ff15 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_bit_rate_frac[1] = {Register(REG_BITRATE_FRAC, 4, 0)},
 8003082:	2300      	movs	r3, #0
 8003084:	2204      	movs	r2, #4
 8003086:	215d      	movs	r1, #93	; 0x5d
 8003088:	48b1      	ldr	r0, [pc, #708]	; (8003350 <_GLOBAL__sub_I_REG_FIFO+0x818>)
 800308a:	f7fd ff0f 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_agc_reference_level[1] = {Register(REG_AGC_REF, 6, 0)},
 800308e:	2300      	movs	r3, #0
 8003090:	2206      	movs	r2, #6
 8003092:	2161      	movs	r1, #97	; 0x61
 8003094:	48af      	ldr	r0, [pc, #700]	; (8003354 <_GLOBAL__sub_I_REG_FIFO+0x81c>)
 8003096:	f7fd ff09 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_agc_step1[1] = {Register(REG_AGC_THRESH_1, 5, 0)},
 800309a:	2300      	movs	r3, #0
 800309c:	2205      	movs	r2, #5
 800309e:	2162      	movs	r1, #98	; 0x62
 80030a0:	48ad      	ldr	r0, [pc, #692]	; (8003358 <_GLOBAL__sub_I_REG_FIFO+0x820>)
 80030a2:	f7fd ff03 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_agc_step2[1] = {Register(REG_AGC_THRESH_2, 4, 4)},
 80030a6:	2304      	movs	r3, #4
 80030a8:	2163      	movs	r1, #99	; 0x63
 80030aa:	461a      	mov	r2, r3
 80030ac:	48ab      	ldr	r0, [pc, #684]	; (800335c <_GLOBAL__sub_I_REG_FIFO+0x824>)
 80030ae:	f7fd fefd 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_agc_step3[1] = {Register(REG_AGC_THRESH_2, 4, 0)},
 80030b2:	2300      	movs	r3, #0
 80030b4:	2204      	movs	r2, #4
 80030b6:	2163      	movs	r1, #99	; 0x63
 80030b8:	48a9      	ldr	r0, [pc, #676]	; (8003360 <_GLOBAL__sub_I_REG_FIFO+0x828>)
 80030ba:	f7fd fef7 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_agc_step4[1] = {Register(REG_AGC_THRESH_3, 4, 4)},
 80030be:	2304      	movs	r3, #4
Fifo(reg_fifo, 1, false, 'w', 0x00, 0xFF),
 80030c0:	2400      	movs	r4, #0
LongRangeMode(reg_long_range_mode, 1, false, 'w', 0x00, 0x01),
 80030c2:	2501      	movs	r5, #1
Fifo(reg_fifo, 1, false, 'w', 0x00, 0xFF),
 80030c4:	2677      	movs	r6, #119	; 0x77
 80030c6:	f04f 0aff 	mov.w	sl, #255	; 0xff
reg_agc_step4[1] = {Register(REG_AGC_THRESH_3, 4, 4)},
 80030ca:	461a      	mov	r2, r3
 80030cc:	2164      	movs	r1, #100	; 0x64
 80030ce:	48a5      	ldr	r0, [pc, #660]	; (8003364 <_GLOBAL__sub_I_REG_FIFO+0x82c>)
 80030d0:	f7fd feec 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_agc_step5[1] = {Register(REG_AGC_THRESH_3, 4, 0)},
 80030d4:	4623      	mov	r3, r4
 80030d6:	2204      	movs	r2, #4
 80030d8:	2164      	movs	r1, #100	; 0x64
 80030da:	48a3      	ldr	r0, [pc, #652]	; (8003368 <_GLOBAL__sub_I_REG_FIFO+0x830>)
 80030dc:	f7fd fee6 	bl	8000eac <_ZN8RegisterC1Ethh>
reg_pll_bandwidth[1] = {Register(REG_PLL_HF, 2, 6)};
 80030e0:	2306      	movs	r3, #6
 80030e2:	2202      	movs	r2, #2
 80030e4:	2170      	movs	r1, #112	; 0x70
 80030e6:	48a1      	ldr	r0, [pc, #644]	; (800336c <_GLOBAL__sub_I_REG_FIFO+0x834>)
 80030e8:	f7fd fee0 	bl	8000eac <_ZN8RegisterC1Ethh>
Fifo(reg_fifo, 1, false, 'w', 0x00, 0xFF),
 80030ec:	4659      	mov	r1, fp
 80030ee:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80030f2:	9401      	str	r4, [sp, #4]
 80030f4:	4623      	mov	r3, r4
 80030f6:	f8cd a008 	str.w	sl, [sp, #8]
 80030fa:	9600      	str	r6, [sp, #0]
 80030fc:	462a      	mov	r2, r5
 80030fe:	489c      	ldr	r0, [pc, #624]	; (8003370 <_GLOBAL__sub_I_REG_FIFO+0x838>)
 8003100:	f7fd ff28 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
LongRangeMode(reg_long_range_mode, 1, false, 'w', 0x00, 0x01),
 8003104:	e9cd 6400 	strd	r6, r4, [sp]
 8003108:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800310c:	4649      	mov	r1, r9
 800310e:	4623      	mov	r3, r4
 8003110:	9502      	str	r5, [sp, #8]
 8003112:	462a      	mov	r2, r5
 8003114:	4897      	ldr	r0, [pc, #604]	; (8003374 <_GLOBAL__sub_I_REG_FIFO+0x83c>)
 8003116:	f7fd ff1d 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
AccessSharedReg(reg_access_shared_reg, 1, false, 'w', 0x00, 0x01),
 800311a:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800311e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003122:	9600      	str	r6, [sp, #0]
 8003124:	4623      	mov	r3, r4
 8003126:	462a      	mov	r2, r5
 8003128:	4993      	ldr	r1, [pc, #588]	; (8003378 <_GLOBAL__sub_I_REG_FIFO+0x840>)
 800312a:	4894      	ldr	r0, [pc, #592]	; (800337c <_GLOBAL__sub_I_REG_FIFO+0x844>)
 800312c:	f7fd ff12 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
LowFrequencyModeOn(reg_low_frequency_mode_on, 1, false, 'w', 0x00, 0x01),
 8003130:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003134:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003138:	9600      	str	r6, [sp, #0]
 800313a:	4623      	mov	r3, r4
 800313c:	462a      	mov	r2, r5
 800313e:	4990      	ldr	r1, [pc, #576]	; (8003380 <_GLOBAL__sub_I_REG_FIFO+0x848>)
 8003140:	4890      	ldr	r0, [pc, #576]	; (8003384 <_GLOBAL__sub_I_REG_FIFO+0x84c>)
 8003142:	f7fd ff07 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Mode(reg_mode, 1, false, 'w', 0x00, 0x07),
 8003146:	2007      	movs	r0, #7
 8003148:	e9cd 6400 	strd	r6, r4, [sp]
 800314c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003150:	4623      	mov	r3, r4
 8003152:	462a      	mov	r2, r5
 8003154:	9002      	str	r0, [sp, #8]
 8003156:	498c      	ldr	r1, [pc, #560]	; (8003388 <_GLOBAL__sub_I_REG_FIFO+0x850>)
 8003158:	488c      	ldr	r0, [pc, #560]	; (800338c <_GLOBAL__sub_I_REG_FIFO+0x854>)
 800315a:	f7fd fefb 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Frf(reg_frf, 3, false, 'w', 0x000000, 0xFFFFFF),
 800315e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8003162:	e9cd 6400 	strd	r6, r4, [sp]
 8003166:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800316a:	4639      	mov	r1, r7
 800316c:	4623      	mov	r3, r4
 800316e:	9202      	str	r2, [sp, #8]
 8003170:	4887      	ldr	r0, [pc, #540]	; (8003390 <_GLOBAL__sub_I_REG_FIFO+0x858>)
 8003172:	2203      	movs	r2, #3
 8003174:	f7fd feee 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PaSelect(reg_pa_select, 1, false, 'w', 0x00, 0x01),
 8003178:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800317c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003180:	9600      	str	r6, [sp, #0]
 8003182:	4623      	mov	r3, r4
 8003184:	462a      	mov	r2, r5
 8003186:	4983      	ldr	r1, [pc, #524]	; (8003394 <_GLOBAL__sub_I_REG_FIFO+0x85c>)
 8003188:	4883      	ldr	r0, [pc, #524]	; (8003398 <_GLOBAL__sub_I_REG_FIFO+0x860>)
 800318a:	f7fd fee3 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
MaxPower(reg_max_power, 1, false, 'w', 0x00, 0x07),
 800318e:	2307      	movs	r3, #7
OutputPower(reg_output_power, 1, false, 'w', 0x00, 0x0F),
 8003190:	f04f 090f 	mov.w	r9, #15
MaxPower(reg_max_power, 1, false, 'w', 0x00, 0x07),
 8003194:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8003198:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800319c:	9600      	str	r6, [sp, #0]
 800319e:	4623      	mov	r3, r4
 80031a0:	462a      	mov	r2, r5
 80031a2:	497e      	ldr	r1, [pc, #504]	; (800339c <_GLOBAL__sub_I_REG_FIFO+0x864>)
 80031a4:	487e      	ldr	r0, [pc, #504]	; (80033a0 <_GLOBAL__sub_I_REG_FIFO+0x868>)
 80031a6:	f7fd fed5 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
OutputPower(reg_output_power, 1, false, 'w', 0x00, 0x0F),
 80031aa:	e9cd 6400 	strd	r6, r4, [sp]
 80031ae:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80031b2:	4623      	mov	r3, r4
 80031b4:	462a      	mov	r2, r5
 80031b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80031ba:	497a      	ldr	r1, [pc, #488]	; (80033a4 <_GLOBAL__sub_I_REG_FIFO+0x86c>)
 80031bc:	487a      	ldr	r0, [pc, #488]	; (80033a8 <_GLOBAL__sub_I_REG_FIFO+0x870>)
 80031be:	f7fd fec9 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PaRamp(reg_pa_ramp, 1, false, 'w', 0x00, 0x0F),
 80031c2:	e9cd 4901 	strd	r4, r9, [sp, #4]
 80031c6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80031ca:	9600      	str	r6, [sp, #0]
 80031cc:	4623      	mov	r3, r4
 80031ce:	462a      	mov	r2, r5
 80031d0:	4976      	ldr	r1, [pc, #472]	; (80033ac <_GLOBAL__sub_I_REG_FIFO+0x874>)
 80031d2:	4877      	ldr	r0, [pc, #476]	; (80033b0 <_GLOBAL__sub_I_REG_FIFO+0x878>)
 80031d4:	f7fd febe 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
OcpOn(reg_ocp_on, 1, false, 'w', 0x00, 0x01),
 80031d8:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80031dc:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80031e0:	9600      	str	r6, [sp, #0]
 80031e2:	4623      	mov	r3, r4
 80031e4:	462a      	mov	r2, r5
 80031e6:	4973      	ldr	r1, [pc, #460]	; (80033b4 <_GLOBAL__sub_I_REG_FIFO+0x87c>)
 80031e8:	4873      	ldr	r0, [pc, #460]	; (80033b8 <_GLOBAL__sub_I_REG_FIFO+0x880>)
 80031ea:	f7fd feb3 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
OcpTrim(reg_ocp_trim, 1, false, 'w', 0x00, 0x1F),
 80031ee:	201f      	movs	r0, #31
 80031f0:	e9cd 6400 	strd	r6, r4, [sp]
 80031f4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80031f8:	4623      	mov	r3, r4
 80031fa:	462a      	mov	r2, r5
 80031fc:	9002      	str	r0, [sp, #8]
 80031fe:	496f      	ldr	r1, [pc, #444]	; (80033bc <_GLOBAL__sub_I_REG_FIFO+0x884>)
 8003200:	486f      	ldr	r0, [pc, #444]	; (80033c0 <_GLOBAL__sub_I_REG_FIFO+0x888>)
 8003202:	f7fd fea7 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
LnaGain(reg_lna_gain, 1, false, 'w', 0x01, 0x06),
 8003206:	2006      	movs	r0, #6
 8003208:	e9cd 6500 	strd	r6, r5, [sp]
 800320c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003210:	4623      	mov	r3, r4
 8003212:	462a      	mov	r2, r5
 8003214:	9002      	str	r0, [sp, #8]
 8003216:	496b      	ldr	r1, [pc, #428]	; (80033c4 <_GLOBAL__sub_I_REG_FIFO+0x88c>)
 8003218:	486b      	ldr	r0, [pc, #428]	; (80033c8 <_GLOBAL__sub_I_REG_FIFO+0x890>)
 800321a:	f7fd fe9b 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
LnaBoostLf(reg_lna_boost_lf, 1, false, 'w', 0x00, 0x00),
 800321e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003222:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003226:	9600      	str	r6, [sp, #0]
 8003228:	4641      	mov	r1, r8
 800322a:	4623      	mov	r3, r4
 800322c:	462a      	mov	r2, r5
 800322e:	4867      	ldr	r0, [pc, #412]	; (80033cc <_GLOBAL__sub_I_REG_FIFO+0x894>)
 8003230:	f7fd fe90 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
LnaBoostHf(reg_lna_boost_hf, 1, false, 'w', 0x00, 0x03, reserv_lna_boost_hf, 2),
 8003234:	f04f 0e02 	mov.w	lr, #2
 8003238:	f04f 0c03 	mov.w	ip, #3
FifoRxCurrentAddr(reg_fifo_rx_current_addr, 1, false, 'r', 0x00, 0xFF),
 800323c:	f04f 0b72 	mov.w	fp, #114	; 0x72
RxTimeout(reg_rx_timeout, 1, false, 'c', 0x00, 0x01),
 8003240:	f04f 0863 	mov.w	r8, #99	; 0x63
ValidHeaderCnt(reg_valid_header_cnt, 2, false, 'r', 0x0000, 0xFFFF),
 8003244:	f64f 77ff 	movw	r7, #65535	; 0xffff
LnaBoostHf(reg_lna_boost_hf, 1, false, 'w', 0x00, 0x03, reserv_lna_boost_hf, 2),
 8003248:	4861      	ldr	r0, [pc, #388]	; (80033d0 <_GLOBAL__sub_I_REG_FIFO+0x898>)
 800324a:	f8cd e010 	str.w	lr, [sp, #16]
 800324e:	e9cd c002 	strd	ip, r0, [sp, #8]
 8003252:	e9cd 6400 	strd	r6, r4, [sp]
 8003256:	4623      	mov	r3, r4
 8003258:	462a      	mov	r2, r5
 800325a:	495e      	ldr	r1, [pc, #376]	; (80033d4 <_GLOBAL__sub_I_REG_FIFO+0x89c>)
 800325c:	485e      	ldr	r0, [pc, #376]	; (80033d8 <_GLOBAL__sub_I_REG_FIFO+0x8a0>)
 800325e:	f7fd fe79 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FifoAddrPtr(reg_fifo_addr_ptr, 1, false, 'w', 0x00, 0xFF),
 8003262:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8003266:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800326a:	9600      	str	r6, [sp, #0]
 800326c:	4623      	mov	r3, r4
 800326e:	462a      	mov	r2, r5
 8003270:	495a      	ldr	r1, [pc, #360]	; (80033dc <_GLOBAL__sub_I_REG_FIFO+0x8a4>)
 8003272:	485b      	ldr	r0, [pc, #364]	; (80033e0 <_GLOBAL__sub_I_REG_FIFO+0x8a8>)
 8003274:	f7fd fe6e 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FifoTxBaseAddr(reg_fifo_tx_base_addr, 1, false, 'w', 0x00, 0xFF),
 8003278:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800327c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003280:	9600      	str	r6, [sp, #0]
 8003282:	4623      	mov	r3, r4
 8003284:	462a      	mov	r2, r5
 8003286:	4957      	ldr	r1, [pc, #348]	; (80033e4 <_GLOBAL__sub_I_REG_FIFO+0x8ac>)
 8003288:	4857      	ldr	r0, [pc, #348]	; (80033e8 <_GLOBAL__sub_I_REG_FIFO+0x8b0>)
 800328a:	f7fd fe63 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FifoRxBaseAddr(reg_fifo_rx_base_addr, 1, false, 'w', 0x00, 0xFF),
 800328e:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8003292:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003296:	9600      	str	r6, [sp, #0]
 8003298:	4623      	mov	r3, r4
 800329a:	462a      	mov	r2, r5
 800329c:	4953      	ldr	r1, [pc, #332]	; (80033ec <_GLOBAL__sub_I_REG_FIFO+0x8b4>)
 800329e:	4854      	ldr	r0, [pc, #336]	; (80033f0 <_GLOBAL__sub_I_REG_FIFO+0x8b8>)
 80032a0:	f7fd fe58 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FifoRxCurrentAddr(reg_fifo_rx_current_addr, 1, false, 'r', 0x00, 0xFF),
 80032a4:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80032a8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80032ac:	4623      	mov	r3, r4
 80032ae:	462a      	mov	r2, r5
 80032b0:	f8cd b000 	str.w	fp, [sp]
 80032b4:	494f      	ldr	r1, [pc, #316]	; (80033f4 <_GLOBAL__sub_I_REG_FIFO+0x8bc>)
 80032b6:	4850      	ldr	r0, [pc, #320]	; (80033f8 <_GLOBAL__sub_I_REG_FIFO+0x8c0>)
 80032b8:	f7fd fe4c 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
RxTimeoutMask(reg_rx_timeout_mask, 1, false, 'w', 0x00, 0x01),
 80032bc:	9502      	str	r5, [sp, #8]
 80032be:	9404      	str	r4, [sp, #16]
 80032c0:	9600      	str	r6, [sp, #0]
 80032c2:	9403      	str	r4, [sp, #12]
 80032c4:	9401      	str	r4, [sp, #4]
 80032c6:	4623      	mov	r3, r4
 80032c8:	462a      	mov	r2, r5
 80032ca:	494c      	ldr	r1, [pc, #304]	; (80033fc <_GLOBAL__sub_I_REG_FIFO+0x8c4>)
 80032cc:	484c      	ldr	r0, [pc, #304]	; (8003400 <_GLOBAL__sub_I_REG_FIFO+0x8c8>)
 80032ce:	f7fd fe41 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
RxDoneMask(reg_rx_done_mask, 1, false, 'w', 0x00, 0x01),
 80032d2:	9502      	str	r5, [sp, #8]
 80032d4:	9600      	str	r6, [sp, #0]
 80032d6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80032da:	9401      	str	r4, [sp, #4]
 80032dc:	4623      	mov	r3, r4
 80032de:	462a      	mov	r2, r5
 80032e0:	4948      	ldr	r1, [pc, #288]	; (8003404 <_GLOBAL__sub_I_REG_FIFO+0x8cc>)
 80032e2:	4849      	ldr	r0, [pc, #292]	; (8003408 <_GLOBAL__sub_I_REG_FIFO+0x8d0>)
 80032e4:	f7fd fe36 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PayloadCrcErrorMask(reg_payload_crc_error_mask, 1, false, 'w', 0x00, 0x01),
 80032e8:	9502      	str	r5, [sp, #8]
 80032ea:	9600      	str	r6, [sp, #0]
 80032ec:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80032f0:	9401      	str	r4, [sp, #4]
 80032f2:	4623      	mov	r3, r4
 80032f4:	462a      	mov	r2, r5
 80032f6:	4945      	ldr	r1, [pc, #276]	; (800340c <_GLOBAL__sub_I_REG_FIFO+0x8d4>)
 80032f8:	4845      	ldr	r0, [pc, #276]	; (8003410 <_GLOBAL__sub_I_REG_FIFO+0x8d8>)
 80032fa:	f7fd fe2b 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
ValidHeaderMask(reg_valid_header_mask, 1, false, 'w', 0x00, 0x01),
 80032fe:	9502      	str	r5, [sp, #8]
 8003300:	9600      	str	r6, [sp, #0]
 8003302:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003306:	9401      	str	r4, [sp, #4]
 8003308:	4623      	mov	r3, r4
 800330a:	462a      	mov	r2, r5
 800330c:	4941      	ldr	r1, [pc, #260]	; (8003414 <_GLOBAL__sub_I_REG_FIFO+0x8dc>)
 800330e:	4842      	ldr	r0, [pc, #264]	; (8003418 <_GLOBAL__sub_I_REG_FIFO+0x8e0>)
 8003310:	f7fd fe20 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
TxDoneMask(reg_tx_done_mask, 1, false, 'w', 0x00, 0x01),
 8003314:	9502      	str	r5, [sp, #8]
 8003316:	e081      	b.n	800341c <_GLOBAL__sub_I_REG_FIFO+0x8e4>
 8003318:	200016b4 	.word	0x200016b4
 800331c:	200018c4 	.word	0x200018c4
 8003320:	200016bc 	.word	0x200016bc
 8003324:	200016c4 	.word	0x200016c4
 8003328:	200016cc 	.word	0x200016cc
 800332c:	200016d4 	.word	0x200016d4
 8003330:	200016dc 	.word	0x200016dc
 8003334:	200016e4 	.word	0x200016e4
 8003338:	200017c4 	.word	0x200017c4
 800333c:	2000191c 	.word	0x2000191c
 8003340:	200016ec 	.word	0x200016ec
 8003344:	200018cc 	.word	0x200018cc
 8003348:	200017fc 	.word	0x200017fc
 800334c:	20001744 	.word	0x20001744
 8003350:	2000166c 	.word	0x2000166c
 8003354:	2000163c 	.word	0x2000163c
 8003358:	20001644 	.word	0x20001644
 800335c:	2000164c 	.word	0x2000164c
 8003360:	20001654 	.word	0x20001654
 8003364:	2000165c 	.word	0x2000165c
 8003368:	20001664 	.word	0x20001664
 800336c:	20001844 	.word	0x20001844
 8003370:	20000fb8 	.word	0x20000fb8
 8003374:	20001178 	.word	0x20001178
 8003378:	2000162c 	.word	0x2000162c
 800337c:	20000ca8 	.word	0x20000ca8
 8003380:	200017bc 	.word	0x200017bc
 8003384:	200011b0 	.word	0x200011b0
 8003388:	200017d4 	.word	0x200017d4
 800338c:	20001204 	.word	0x20001204
 8003390:	200010d0 	.word	0x200010d0
 8003394:	2000180c 	.word	0x2000180c
 8003398:	200012c8 	.word	0x200012c8
 800339c:	200017cc 	.word	0x200017cc
 80033a0:	200011e8 	.word	0x200011e8
 80033a4:	200017f4 	.word	0x200017f4
 80033a8:	20001274 	.word	0x20001274
 80033ac:	20001804 	.word	0x20001804
 80033b0:	200012ac 	.word	0x200012ac
 80033b4:	200017e4 	.word	0x200017e4
 80033b8:	2000123c 	.word	0x2000123c
 80033bc:	200017ec 	.word	0x200017ec
 80033c0:	20001258 	.word	0x20001258
 80033c4:	200017a4 	.word	0x200017a4
 80033c8:	2000115c 	.word	0x2000115c
 80033cc:	20001140 	.word	0x20001140
 80033d0:	20000008 	.word	0x20000008
 80033d4:	20001794 	.word	0x20001794
 80033d8:	20001124 	.word	0x20001124
 80033dc:	20001714 	.word	0x20001714
 80033e0:	20000fd4 	.word	0x20000fd4
 80033e4:	2000173c 	.word	0x2000173c
 80033e8:	20001060 	.word	0x20001060
 80033ec:	2000171c 	.word	0x2000171c
 80033f0:	20000ff0 	.word	0x20000ff0
 80033f4:	20001734 	.word	0x20001734
 80033f8:	20001044 	.word	0x20001044
 80033fc:	200018a4 	.word	0x200018a4
 8003400:	200014c0 	.word	0x200014c0
 8003404:	2000188c 	.word	0x2000188c
 8003408:	2000146c 	.word	0x2000146c
 800340c:	2000182c 	.word	0x2000182c
 8003410:	20001338 	.word	0x20001338
 8003414:	20001904 	.word	0x20001904
 8003418:	200015d8 	.word	0x200015d8
 800341c:	9600      	str	r6, [sp, #0]
 800341e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003422:	9401      	str	r4, [sp, #4]
 8003424:	4623      	mov	r3, r4
 8003426:	462a      	mov	r2, r5
 8003428:	49c2      	ldr	r1, [pc, #776]	; (8003734 <_GLOBAL__sub_I_REG_FIFO+0xbfc>)
 800342a:	48c3      	ldr	r0, [pc, #780]	; (8003738 <_GLOBAL__sub_I_REG_FIFO+0xc00>)
 800342c:	f7fd fd92 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
CadDoneMask(reg_cad_done_mask, 1, false, 'w', 0x00, 0x01),
 8003430:	9502      	str	r5, [sp, #8]
 8003432:	9600      	str	r6, [sp, #0]
 8003434:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003438:	9401      	str	r4, [sp, #4]
 800343a:	4623      	mov	r3, r4
 800343c:	462a      	mov	r2, r5
 800343e:	49bf      	ldr	r1, [pc, #764]	; (800373c <_GLOBAL__sub_I_REG_FIFO+0xc04>)
 8003440:	48bf      	ldr	r0, [pc, #764]	; (8003740 <_GLOBAL__sub_I_REG_FIFO+0xc08>)
 8003442:	f7fd fd87 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FhssChangeChannelMask(reg_fhss_change_channel_mask, 1, false, 'w', 0x00, 0x01),
 8003446:	9502      	str	r5, [sp, #8]
 8003448:	9600      	str	r6, [sp, #0]
 800344a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800344e:	9401      	str	r4, [sp, #4]
 8003450:	4623      	mov	r3, r4
 8003452:	462a      	mov	r2, r5
 8003454:	49bb      	ldr	r1, [pc, #748]	; (8003744 <_GLOBAL__sub_I_REG_FIFO+0xc0c>)
 8003456:	48bc      	ldr	r0, [pc, #752]	; (8003748 <_GLOBAL__sub_I_REG_FIFO+0xc10>)
 8003458:	f7fd fd7c 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
CadDetectedMask(reg_cad_detected_mask, 1, false, 'w', 0x00, 0x01),
 800345c:	9502      	str	r5, [sp, #8]
 800345e:	9600      	str	r6, [sp, #0]
 8003460:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003464:	9401      	str	r4, [sp, #4]
 8003466:	4623      	mov	r3, r4
 8003468:	462a      	mov	r2, r5
 800346a:	49b8      	ldr	r1, [pc, #736]	; (800374c <_GLOBAL__sub_I_REG_FIFO+0xc14>)
 800346c:	48b8      	ldr	r0, [pc, #736]	; (8003750 <_GLOBAL__sub_I_REG_FIFO+0xc18>)
 800346e:	f7fd fd71 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
RxTimeout(reg_rx_timeout, 1, false, 'c', 0x00, 0x01),
 8003472:	9502      	str	r5, [sp, #8]
 8003474:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003478:	9401      	str	r4, [sp, #4]
 800347a:	4623      	mov	r3, r4
 800347c:	462a      	mov	r2, r5
 800347e:	f8cd 8000 	str.w	r8, [sp]
 8003482:	49b4      	ldr	r1, [pc, #720]	; (8003754 <_GLOBAL__sub_I_REG_FIFO+0xc1c>)
 8003484:	48b4      	ldr	r0, [pc, #720]	; (8003758 <_GLOBAL__sub_I_REG_FIFO+0xc20>)
 8003486:	f7fd fd65 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
RxDone(reg_rx_done, 1, false, 'c', 0x00, 0x01),
 800348a:	f8cd 8000 	str.w	r8, [sp]
 800348e:	9502      	str	r5, [sp, #8]
 8003490:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003494:	9401      	str	r4, [sp, #4]
 8003496:	4623      	mov	r3, r4
 8003498:	462a      	mov	r2, r5
 800349a:	49b0      	ldr	r1, [pc, #704]	; (800375c <_GLOBAL__sub_I_REG_FIFO+0xc24>)
 800349c:	48b0      	ldr	r0, [pc, #704]	; (8003760 <_GLOBAL__sub_I_REG_FIFO+0xc28>)
 800349e:	f7fd fd59 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PayloadCrcError(reg_payload_crc_error, 1, false, 'c', 0x00, 0x01),
 80034a2:	f8cd 8000 	str.w	r8, [sp]
 80034a6:	9502      	str	r5, [sp, #8]
 80034a8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80034ac:	9401      	str	r4, [sp, #4]
 80034ae:	4623      	mov	r3, r4
 80034b0:	462a      	mov	r2, r5
 80034b2:	49ac      	ldr	r1, [pc, #688]	; (8003764 <_GLOBAL__sub_I_REG_FIFO+0xc2c>)
 80034b4:	48ac      	ldr	r0, [pc, #688]	; (8003768 <_GLOBAL__sub_I_REG_FIFO+0xc30>)
 80034b6:	f7fd fd4d 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
ValidHeader(reg_valid_header, 1, false, 'c', 0x00, 0x01),
 80034ba:	f8cd 8000 	str.w	r8, [sp]
 80034be:	9502      	str	r5, [sp, #8]
 80034c0:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80034c4:	9401      	str	r4, [sp, #4]
 80034c6:	4623      	mov	r3, r4
 80034c8:	462a      	mov	r2, r5
 80034ca:	49a8      	ldr	r1, [pc, #672]	; (800376c <_GLOBAL__sub_I_REG_FIFO+0xc34>)
 80034cc:	48a8      	ldr	r0, [pc, #672]	; (8003770 <_GLOBAL__sub_I_REG_FIFO+0xc38>)
 80034ce:	f7fd fd41 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
TxDone(reg_tx_done, 1, false, 'c', 0x00, 0x01),
 80034d2:	f8cd 8000 	str.w	r8, [sp]
 80034d6:	9502      	str	r5, [sp, #8]
 80034d8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80034dc:	9401      	str	r4, [sp, #4]
 80034de:	4623      	mov	r3, r4
 80034e0:	462a      	mov	r2, r5
 80034e2:	49a4      	ldr	r1, [pc, #656]	; (8003774 <_GLOBAL__sub_I_REG_FIFO+0xc3c>)
 80034e4:	48a4      	ldr	r0, [pc, #656]	; (8003778 <_GLOBAL__sub_I_REG_FIFO+0xc40>)
 80034e6:	f7fd fd35 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
CadDone(reg_cad_done, 1, false, 'c', 0x00, 0x01),
 80034ea:	f8cd 8000 	str.w	r8, [sp]
 80034ee:	9502      	str	r5, [sp, #8]
 80034f0:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80034f4:	9401      	str	r4, [sp, #4]
 80034f6:	4623      	mov	r3, r4
 80034f8:	462a      	mov	r2, r5
 80034fa:	49a0      	ldr	r1, [pc, #640]	; (800377c <_GLOBAL__sub_I_REG_FIFO+0xc44>)
 80034fc:	48a0      	ldr	r0, [pc, #640]	; (8003780 <_GLOBAL__sub_I_REG_FIFO+0xc48>)
 80034fe:	f7fd fd29 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FhssChangeChannel(reg_fhss_change_channel, 1, false, 'c', 0x00, 0x01),
 8003502:	f8cd 8000 	str.w	r8, [sp]
 8003506:	9502      	str	r5, [sp, #8]
 8003508:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800350c:	9401      	str	r4, [sp, #4]
 800350e:	4623      	mov	r3, r4
 8003510:	462a      	mov	r2, r5
 8003512:	499c      	ldr	r1, [pc, #624]	; (8003784 <_GLOBAL__sub_I_REG_FIFO+0xc4c>)
 8003514:	489c      	ldr	r0, [pc, #624]	; (8003788 <_GLOBAL__sub_I_REG_FIFO+0xc50>)
 8003516:	f7fd fd1d 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
CadDetected(reg_cad_detected, 1, false, 'c', 0x00, 0x01),
 800351a:	f8cd 8000 	str.w	r8, [sp]
 800351e:	9502      	str	r5, [sp, #8]
 8003520:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003524:	9401      	str	r4, [sp, #4]
 8003526:	4623      	mov	r3, r4
 8003528:	462a      	mov	r2, r5
 800352a:	4998      	ldr	r1, [pc, #608]	; (800378c <_GLOBAL__sub_I_REG_FIFO+0xc54>)
 800352c:	4898      	ldr	r0, [pc, #608]	; (8003790 <_GLOBAL__sub_I_REG_FIFO+0xc58>)
 800352e:	f7fd fd11 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FifoRxBytesNb(reg_fifo_rx_bytes_nb, 1, false, 'r', 0x00, 0xFF),
 8003532:	f8cd b000 	str.w	fp, [sp]
 8003536:	f8cd a008 	str.w	sl, [sp, #8]
 800353a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800353e:	9401      	str	r4, [sp, #4]
 8003540:	4623      	mov	r3, r4
 8003542:	462a      	mov	r2, r5
 8003544:	4993      	ldr	r1, [pc, #588]	; (8003794 <_GLOBAL__sub_I_REG_FIFO+0xc5c>)
 8003546:	4894      	ldr	r0, [pc, #592]	; (8003798 <_GLOBAL__sub_I_REG_FIFO+0xc60>)
 8003548:	f7fd fd04 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
ValidHeaderCnt(reg_valid_header_cnt, 2, false, 'r', 0x0000, 0xFFFF),
 800354c:	f8cd b000 	str.w	fp, [sp]
 8003550:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003554:	9401      	str	r4, [sp, #4]
 8003556:	4623      	mov	r3, r4
 8003558:	9702      	str	r7, [sp, #8]
 800355a:	4990      	ldr	r1, [pc, #576]	; (800379c <_GLOBAL__sub_I_REG_FIFO+0xc64>)
 800355c:	2202      	movs	r2, #2
 800355e:	4890      	ldr	r0, [pc, #576]	; (80037a0 <_GLOBAL__sub_I_REG_FIFO+0xc68>)
 8003560:	f7fd fcf8 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
ValidPacketCnt(reg_valid_packet_cnt, 2, false, 'c', 0x0000, 0xFFFF),
 8003564:	9702      	str	r7, [sp, #8]
 8003566:	f8cd 8000 	str.w	r8, [sp]
 800356a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800356e:	9401      	str	r4, [sp, #4]
 8003570:	4623      	mov	r3, r4
 8003572:	2202      	movs	r2, #2
 8003574:	498b      	ldr	r1, [pc, #556]	; (80037a4 <_GLOBAL__sub_I_REG_FIFO+0xc6c>)
 8003576:	488c      	ldr	r0, [pc, #560]	; (80037a8 <_GLOBAL__sub_I_REG_FIFO+0xc70>)
 8003578:	f7fd fcec 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
RxCodingRate(reg_rx_coding_rate, 1, false, 'r', 0x00, 0x07),
 800357c:	2107      	movs	r1, #7
 800357e:	f8cd b000 	str.w	fp, [sp]
 8003582:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003586:	9401      	str	r4, [sp, #4]
 8003588:	4623      	mov	r3, r4
 800358a:	462a      	mov	r2, r5
 800358c:	9102      	str	r1, [sp, #8]
 800358e:	4887      	ldr	r0, [pc, #540]	; (80037ac <_GLOBAL__sub_I_REG_FIFO+0xc74>)
 8003590:	4987      	ldr	r1, [pc, #540]	; (80037b0 <_GLOBAL__sub_I_REG_FIFO+0xc78>)
 8003592:	f7fd fcdf 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
ModemStatus(reg_modem_status, 1, false, 'r', 0x00, 0x1F),
 8003596:	211f      	movs	r1, #31
 8003598:	f8cd b000 	str.w	fp, [sp]
 800359c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80035a0:	9401      	str	r4, [sp, #4]
 80035a2:	4623      	mov	r3, r4
 80035a4:	462a      	mov	r2, r5
 80035a6:	9102      	str	r1, [sp, #8]
 80035a8:	4882      	ldr	r0, [pc, #520]	; (80037b4 <_GLOBAL__sub_I_REG_FIFO+0xc7c>)
 80035aa:	4983      	ldr	r1, [pc, #524]	; (80037b8 <_GLOBAL__sub_I_REG_FIFO+0xc80>)
 80035ac:	f7fd fcd2 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PacketSnr(reg_packet_snr, 1, false, 'r', 0x00, 0xFF),
 80035b0:	f8cd a008 	str.w	sl, [sp, #8]
 80035b4:	f8cd b000 	str.w	fp, [sp]
 80035b8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80035bc:	9401      	str	r4, [sp, #4]
 80035be:	4623      	mov	r3, r4
 80035c0:	462a      	mov	r2, r5
 80035c2:	497e      	ldr	r1, [pc, #504]	; (80037bc <_GLOBAL__sub_I_REG_FIFO+0xc84>)
 80035c4:	487e      	ldr	r0, [pc, #504]	; (80037c0 <_GLOBAL__sub_I_REG_FIFO+0xc88>)
 80035c6:	f7fd fcc5 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PacketRssi(reg_packet_rssi, 1, false, 'r', 0x00, 0xFF),
 80035ca:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80035ce:	f8cd b000 	str.w	fp, [sp]
 80035d2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80035d6:	4623      	mov	r3, r4
 80035d8:	462a      	mov	r2, r5
 80035da:	497a      	ldr	r1, [pc, #488]	; (80037c4 <_GLOBAL__sub_I_REG_FIFO+0xc8c>)
 80035dc:	487a      	ldr	r0, [pc, #488]	; (80037c8 <_GLOBAL__sub_I_REG_FIFO+0xc90>)
 80035de:	f7fd fcb9 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Rssi(reg_rssi, 1, false, 'r', 0x00, 0xFF),
 80035e2:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80035e6:	f8cd b000 	str.w	fp, [sp]
 80035ea:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80035ee:	4623      	mov	r3, r4
 80035f0:	462a      	mov	r2, r5
 80035f2:	4976      	ldr	r1, [pc, #472]	; (80037cc <_GLOBAL__sub_I_REG_FIFO+0xc94>)
 80035f4:	4876      	ldr	r0, [pc, #472]	; (80037d0 <_GLOBAL__sub_I_REG_FIFO+0xc98>)
 80035f6:	f7fd fcad 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PllTimeout(reg_pll_timeout, 1, false, 'r', 0x00, 0x01),
 80035fa:	9502      	str	r5, [sp, #8]
 80035fc:	f8cd b000 	str.w	fp, [sp]
 8003600:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003604:	9401      	str	r4, [sp, #4]
 8003606:	4623      	mov	r3, r4
 8003608:	462a      	mov	r2, r5
 800360a:	4972      	ldr	r1, [pc, #456]	; (80037d4 <_GLOBAL__sub_I_REG_FIFO+0xc9c>)
 800360c:	4872      	ldr	r0, [pc, #456]	; (80037d8 <_GLOBAL__sub_I_REG_FIFO+0xca0>)
 800360e:	f7fd fca1 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
CrcOnPayload(reg_crc_on_payload, 1, false, 'r', 0x00, 0x01),
 8003612:	9502      	str	r5, [sp, #8]
 8003614:	f8cd b000 	str.w	fp, [sp]
 8003618:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800361c:	9401      	str	r4, [sp, #4]
 800361e:	4623      	mov	r3, r4
 8003620:	462a      	mov	r2, r5
 8003622:	496e      	ldr	r1, [pc, #440]	; (80037dc <_GLOBAL__sub_I_REG_FIFO+0xca4>)
 8003624:	486e      	ldr	r0, [pc, #440]	; (80037e0 <_GLOBAL__sub_I_REG_FIFO+0xca8>)
 8003626:	f7fd fc95 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FhssPresentChannel(reg_fhss_present_channel, 1, false, 'r', 0x00, 0x3F),
 800362a:	213f      	movs	r1, #63	; 0x3f
 800362c:	f8cd b000 	str.w	fp, [sp]
 8003630:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003634:	9401      	str	r4, [sp, #4]
 8003636:	4623      	mov	r3, r4
 8003638:	462a      	mov	r2, r5
 800363a:	9102      	str	r1, [sp, #8]
 800363c:	4869      	ldr	r0, [pc, #420]	; (80037e4 <_GLOBAL__sub_I_REG_FIFO+0xcac>)
 800363e:	496a      	ldr	r1, [pc, #424]	; (80037e8 <_GLOBAL__sub_I_REG_FIFO+0xcb0>)
 8003640:	f7fd fc88 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Bw(reg_bw, 1, false, 'w', 0x00, 0x09),
 8003644:	2109      	movs	r1, #9
 8003646:	9600      	str	r6, [sp, #0]
 8003648:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800364c:	9401      	str	r4, [sp, #4]
 800364e:	4623      	mov	r3, r4
 8003650:	462a      	mov	r2, r5
 8003652:	9102      	str	r1, [sp, #8]
 8003654:	4865      	ldr	r0, [pc, #404]	; (80037ec <_GLOBAL__sub_I_REG_FIFO+0xcb4>)
 8003656:	4966      	ldr	r1, [pc, #408]	; (80037f0 <_GLOBAL__sub_I_REG_FIFO+0xcb8>)
 8003658:	f7fd fc7c 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
CodingRate(reg_coding_rate, 1, false, 'w', 0x01, 0x04),
 800365c:	2104      	movs	r1, #4
 800365e:	e9cd 6500 	strd	r6, r5, [sp]
 8003662:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003666:	4623      	mov	r3, r4
 8003668:	462a      	mov	r2, r5
 800366a:	9102      	str	r1, [sp, #8]
 800366c:	4861      	ldr	r0, [pc, #388]	; (80037f4 <_GLOBAL__sub_I_REG_FIFO+0xcbc>)
 800366e:	4962      	ldr	r1, [pc, #392]	; (80037f8 <_GLOBAL__sub_I_REG_FIFO+0xcc0>)
 8003670:	f7fd fc70 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
ImplicitHeaderModeOn(reg_implicit_header_mode_on, 1, false, 'w', 0x00, 0x01),
 8003674:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003678:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800367c:	9600      	str	r6, [sp, #0]
 800367e:	4623      	mov	r3, r4
 8003680:	462a      	mov	r2, r5
 8003682:	495e      	ldr	r1, [pc, #376]	; (80037fc <_GLOBAL__sub_I_REG_FIFO+0xcc4>)
 8003684:	485e      	ldr	r0, [pc, #376]	; (8003800 <_GLOBAL__sub_I_REG_FIFO+0xcc8>)
 8003686:	f7fd fc65 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
SpreadingFactor(reg_spreading_factor, 1, false, 'w', 0x06, 0x0C),
 800368a:	f04f 080c 	mov.w	r8, #12
 800368e:	2106      	movs	r1, #6
 8003690:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003694:	e9cd 1801 	strd	r1, r8, [sp, #4]
 8003698:	9600      	str	r6, [sp, #0]
 800369a:	4623      	mov	r3, r4
 800369c:	462a      	mov	r2, r5
 800369e:	4959      	ldr	r1, [pc, #356]	; (8003804 <_GLOBAL__sub_I_REG_FIFO+0xccc>)
 80036a0:	4859      	ldr	r0, [pc, #356]	; (8003808 <_GLOBAL__sub_I_REG_FIFO+0xcd0>)
 80036a2:	f7fd fc57 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
TxContinuousMode(reg_tx_continuous_mode, 1, false, 'w', 0x00, 0x01),
 80036a6:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80036aa:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80036ae:	9600      	str	r6, [sp, #0]
 80036b0:	4623      	mov	r3, r4
 80036b2:	462a      	mov	r2, r5
 80036b4:	4955      	ldr	r1, [pc, #340]	; (800380c <_GLOBAL__sub_I_REG_FIFO+0xcd4>)
 80036b6:	4856      	ldr	r0, [pc, #344]	; (8003810 <_GLOBAL__sub_I_REG_FIFO+0xcd8>)
 80036b8:	f7fd fc4c 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
RxPayloadCrcOn(reg_rx_payload_crc_on, 1, false, 'w', 0x00, 0x01),
 80036bc:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80036c0:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80036c4:	9600      	str	r6, [sp, #0]
 80036c6:	4623      	mov	r3, r4
 80036c8:	462a      	mov	r2, r5
 80036ca:	4952      	ldr	r1, [pc, #328]	; (8003814 <_GLOBAL__sub_I_REG_FIFO+0xcdc>)
 80036cc:	4852      	ldr	r0, [pc, #328]	; (8003818 <_GLOBAL__sub_I_REG_FIFO+0xce0>)
 80036ce:	f7fd fc41 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
SymbTimeout(reg_symb_timeout, 2, false, 'w', 0x0000, 0x03FF),
 80036d2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80036d6:	e9cd 6400 	strd	r6, r4, [sp]
 80036da:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80036de:	4623      	mov	r3, r4
 80036e0:	9202      	str	r2, [sp, #8]
 80036e2:	494e      	ldr	r1, [pc, #312]	; (800381c <_GLOBAL__sub_I_REG_FIFO+0xce4>)
 80036e4:	2202      	movs	r2, #2
 80036e6:	484e      	ldr	r0, [pc, #312]	; (8003820 <_GLOBAL__sub_I_REG_FIFO+0xce8>)
 80036e8:	f7fd fc34 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PreambleLength(reg_preamble_length, 2, false, 'w', 0x0000, 0xFFFF),
 80036ec:	e9cd 6400 	strd	r6, r4, [sp]
 80036f0:	9702      	str	r7, [sp, #8]
 80036f2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80036f6:	4623      	mov	r3, r4
 80036f8:	2202      	movs	r2, #2
 80036fa:	494a      	ldr	r1, [pc, #296]	; (8003824 <_GLOBAL__sub_I_REG_FIFO+0xcec>)
 80036fc:	484a      	ldr	r0, [pc, #296]	; (8003828 <_GLOBAL__sub_I_REG_FIFO+0xcf0>)
 80036fe:	f7fd fc29 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PayloadLength(reg_payload_length, 1, false, 'w', 0x01, 0xFF),
 8003702:	e9cd 5a01 	strd	r5, sl, [sp, #4]
 8003706:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800370a:	9600      	str	r6, [sp, #0]
 800370c:	4623      	mov	r3, r4
 800370e:	462a      	mov	r2, r5
 8003710:	4946      	ldr	r1, [pc, #280]	; (800382c <_GLOBAL__sub_I_REG_FIFO+0xcf4>)
 8003712:	4847      	ldr	r0, [pc, #284]	; (8003830 <_GLOBAL__sub_I_REG_FIFO+0xcf8>)
 8003714:	f7fd fc1e 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PayloadMaxLength(reg_payload_max_length, 1, false, 'w', 0x00, 0xFF),
 8003718:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800371c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003720:	9600      	str	r6, [sp, #0]
 8003722:	4623      	mov	r3, r4
 8003724:	462a      	mov	r2, r5
 8003726:	4943      	ldr	r1, [pc, #268]	; (8003834 <_GLOBAL__sub_I_REG_FIFO+0xcfc>)
 8003728:	4843      	ldr	r0, [pc, #268]	; (8003838 <_GLOBAL__sub_I_REG_FIFO+0xd00>)
 800372a:	f7fd fc13 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FreqHoppingPeriod(reg_freq_hopping_period, 1, false, 'w', 0x00, 0xFF),
 800372e:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8003732:	e083      	b.n	800383c <_GLOBAL__sub_I_REG_FIFO+0xd04>
 8003734:	200018e4 	.word	0x200018e4
 8003738:	20001584 	.word	0x20001584
 800373c:	20001694 	.word	0x20001694
 8003740:	20000e14 	.word	0x20000e14
 8003744:	200016fc 	.word	0x200016fc
 8003748:	20000f80 	.word	0x20000f80
 800374c:	20001684 	.word	0x20001684
 8003750:	20000ddc 	.word	0x20000ddc
 8003754:	2000189c 	.word	0x2000189c
 8003758:	200014a4 	.word	0x200014a4
 800375c:	20001884 	.word	0x20001884
 8003760:	20001450 	.word	0x20001450
 8003764:	20001824 	.word	0x20001824
 8003768:	2000131c 	.word	0x2000131c
 800376c:	200018ec 	.word	0x200018ec
 8003770:	200015a0 	.word	0x200015a0
 8003774:	200018dc 	.word	0x200018dc
 8003778:	20001568 	.word	0x20001568
 800377c:	2000168c 	.word	0x2000168c
 8003780:	20000df8 	.word	0x20000df8
 8003784:	200016f4 	.word	0x200016f4
 8003788:	20000f64 	.word	0x20000f64
 800378c:	2000167c 	.word	0x2000167c
 8003790:	20000dc0 	.word	0x20000dc0
 8003794:	2000172c 	.word	0x2000172c
 8003798:	20001028 	.word	0x20001028
 800379c:	200018f4 	.word	0x200018f4
 80037a0:	200015bc 	.word	0x200015bc
 80037a4:	2000190c 	.word	0x2000190c
 80037a8:	200015f4 	.word	0x200015f4
 80037ac:	20001434 	.word	0x20001434
 80037b0:	2000187c 	.word	0x2000187c
 80037b4:	20001220 	.word	0x20001220
 80037b8:	200017dc 	.word	0x200017dc
 80037bc:	2000181c 	.word	0x2000181c
 80037c0:	20001300 	.word	0x20001300
 80037c4:	20001814 	.word	0x20001814
 80037c8:	200012e4 	.word	0x200012e4
 80037cc:	2000186c 	.word	0x2000186c
 80037d0:	200013fc 	.word	0x200013fc
 80037d4:	2000184c 	.word	0x2000184c
 80037d8:	200013a8 	.word	0x200013a8
 80037dc:	200016a4 	.word	0x200016a4
 80037e0:	20000e4c 	.word	0x20000e4c
 80037e4:	20000f9c 	.word	0x20000f9c
 80037e8:	20001704 	.word	0x20001704
 80037ec:	20000da4 	.word	0x20000da4
 80037f0:	20001674 	.word	0x20001674
 80037f4:	20000e30 	.word	0x20000e30
 80037f8:	2000169c 	.word	0x2000169c
 80037fc:	20001784 	.word	0x20001784
 8003800:	200010ec 	.word	0x200010ec
 8003804:	200018ac 	.word	0x200018ac
 8003808:	200014dc 	.word	0x200014dc
 800380c:	200018d4 	.word	0x200018d4
 8003810:	2000154c 	.word	0x2000154c
 8003814:	20001894 	.word	0x20001894
 8003818:	20001488 	.word	0x20001488
 800381c:	200018b4 	.word	0x200018b4
 8003820:	200014f8 	.word	0x200014f8
 8003824:	2000185c 	.word	0x2000185c
 8003828:	200013e0 	.word	0x200013e0
 800382c:	20001834 	.word	0x20001834
 8003830:	20001354 	.word	0x20001354
 8003834:	2000183c 	.word	0x2000183c
 8003838:	20001370 	.word	0x20001370
 800383c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003840:	9600      	str	r6, [sp, #0]
 8003842:	4623      	mov	r3, r4
 8003844:	462a      	mov	r2, r5
 8003846:	49c6      	ldr	r1, [pc, #792]	; (8003b60 <_GLOBAL__sub_I_REG_FIFO+0x1028>)
 8003848:	48c6      	ldr	r0, [pc, #792]	; (8003b64 <_GLOBAL__sub_I_REG_FIFO+0x102c>)
 800384a:	f7fd fb83 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FifoRxByteAddrPtr(reg_fifo_rx_byte_addr_ptr, 1, false, 'r', 0x00, 0xFF),
 800384e:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8003852:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003856:	f8cd b000 	str.w	fp, [sp]
 800385a:	4623      	mov	r3, r4
 800385c:	462a      	mov	r2, r5
 800385e:	49c2      	ldr	r1, [pc, #776]	; (8003b68 <_GLOBAL__sub_I_REG_FIFO+0x1030>)
 8003860:	48c2      	ldr	r0, [pc, #776]	; (8003b6c <_GLOBAL__sub_I_REG_FIFO+0x1034>)
 8003862:	f7fd fb77 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
LowDataRateOptimize(reg_low_data_rate_optimize, 1, false, 'w', 0x00, 0x01),
 8003866:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800386a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800386e:	9600      	str	r6, [sp, #0]
 8003870:	4623      	mov	r3, r4
 8003872:	462a      	mov	r2, r5
 8003874:	49be      	ldr	r1, [pc, #760]	; (8003b70 <_GLOBAL__sub_I_REG_FIFO+0x1038>)
 8003876:	48bf      	ldr	r0, [pc, #764]	; (8003b74 <_GLOBAL__sub_I_REG_FIFO+0x103c>)
 8003878:	f7fd fb6c 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
AgcAutoOn(reg_agc_auto_on, 1, false, 'w', 0x00, 0x01),
 800387c:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003880:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003884:	9600      	str	r6, [sp, #0]
 8003886:	4623      	mov	r3, r4
 8003888:	462a      	mov	r2, r5
 800388a:	49bb      	ldr	r1, [pc, #748]	; (8003b78 <_GLOBAL__sub_I_REG_FIFO+0x1040>)
 800388c:	48bb      	ldr	r0, [pc, #748]	; (8003b7c <_GLOBAL__sub_I_REG_FIFO+0x1044>)
 800388e:	f7fd fb61 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PpmCorrection(reg_ppm_correction, 1, false, 'w', 0x00, 0xFF),
 8003892:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8003896:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800389a:	9600      	str	r6, [sp, #0]
 800389c:	4623      	mov	r3, r4
 800389e:	462a      	mov	r2, r5
 80038a0:	49b7      	ldr	r1, [pc, #732]	; (8003b80 <_GLOBAL__sub_I_REG_FIFO+0x1048>)
 80038a2:	48b8      	ldr	r0, [pc, #736]	; (8003b84 <_GLOBAL__sub_I_REG_FIFO+0x104c>)
 80038a4:	f7fd fb56 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FreqError(reg_freq_error, 3, false, 'r', 0x000000, 0x0FFFFF),
 80038a8:	4ab7      	ldr	r2, [pc, #732]	; (8003b88 <_GLOBAL__sub_I_REG_FIFO+0x1050>)
 80038aa:	e9cd b400 	strd	fp, r4, [sp]
 80038ae:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80038b2:	4623      	mov	r3, r4
 80038b4:	9202      	str	r2, [sp, #8]
 80038b6:	49b5      	ldr	r1, [pc, #724]	; (8003b8c <_GLOBAL__sub_I_REG_FIFO+0x1054>)
 80038b8:	2203      	movs	r2, #3
 80038ba:	48b5      	ldr	r0, [pc, #724]	; (8003b90 <_GLOBAL__sub_I_REG_FIFO+0x1058>)
 80038bc:	f7fd fb4a 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
RssiWideband(reg_rssi_wideband, 1, false, 'r', 0x00, 0xFF),
 80038c0:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80038c4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80038c8:	f8cd b000 	str.w	fp, [sp]
 80038cc:	4623      	mov	r3, r4
 80038ce:	462a      	mov	r2, r5
 80038d0:	49b0      	ldr	r1, [pc, #704]	; (8003b94 <_GLOBAL__sub_I_REG_FIFO+0x105c>)
 80038d2:	48b1      	ldr	r0, [pc, #708]	; (8003b98 <_GLOBAL__sub_I_REG_FIFO+0x1060>)
 80038d4:	f7fd fb3e 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
DetectionOptimize(reg_detection_optimize, 1, false, 'w', 0x03, 0x05, reserv_detection_optimize, 1),
 80038d8:	2703      	movs	r7, #3
 80038da:	2005      	movs	r0, #5
 80038dc:	49af      	ldr	r1, [pc, #700]	; (8003b9c <_GLOBAL__sub_I_REG_FIFO+0x1064>)
 80038de:	e9cd 7001 	strd	r7, r0, [sp, #4]
 80038e2:	9504      	str	r5, [sp, #16]
 80038e4:	9600      	str	r6, [sp, #0]
 80038e6:	4623      	mov	r3, r4
 80038e8:	462a      	mov	r2, r5
 80038ea:	9103      	str	r1, [sp, #12]
 80038ec:	48ac      	ldr	r0, [pc, #688]	; (8003ba0 <_GLOBAL__sub_I_REG_FIFO+0x1068>)
 80038ee:	49ad      	ldr	r1, [pc, #692]	; (8003ba4 <_GLOBAL__sub_I_REG_FIFO+0x106c>)
 80038f0:	f7fd fb30 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
InvertIQ(reg_invert_iq, 1, false, 'w', 0x00, 0x01),
 80038f4:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80038f8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80038fc:	9600      	str	r6, [sp, #0]
 80038fe:	4623      	mov	r3, r4
 8003900:	462a      	mov	r2, r5
 8003902:	49a9      	ldr	r1, [pc, #676]	; (8003ba8 <_GLOBAL__sub_I_REG_FIFO+0x1070>)
 8003904:	48a9      	ldr	r0, [pc, #676]	; (8003bac <_GLOBAL__sub_I_REG_FIFO+0x1074>)
 8003906:	f7fd fb25 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
DetectionThreshold(reg_detection_threshold, 1, false, 'w', 0x0A, 0x0C, reserv_detection_threshold, 1),
 800390a:	200a      	movs	r0, #10
 800390c:	49a8      	ldr	r1, [pc, #672]	; (8003bb0 <_GLOBAL__sub_I_REG_FIFO+0x1078>)
 800390e:	f8cd 8008 	str.w	r8, [sp, #8]
 8003912:	9504      	str	r5, [sp, #16]
 8003914:	9600      	str	r6, [sp, #0]
 8003916:	4623      	mov	r3, r4
 8003918:	462a      	mov	r2, r5
 800391a:	9001      	str	r0, [sp, #4]
 800391c:	9103      	str	r1, [sp, #12]
 800391e:	48a5      	ldr	r0, [pc, #660]	; (8003bb4 <_GLOBAL__sub_I_REG_FIFO+0x107c>)
 8003920:	49a5      	ldr	r1, [pc, #660]	; (8003bb8 <_GLOBAL__sub_I_REG_FIFO+0x1080>)
 8003922:	f7fd fb17 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
SyncWord(reg_sync_word, 1, false, 'w', 0x00, 0xFF),  // , reserv_sync_word, 1),
 8003926:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800392a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800392e:	9600      	str	r6, [sp, #0]
 8003930:	4623      	mov	r3, r4
 8003932:	462a      	mov	r2, r5
 8003934:	49a1      	ldr	r1, [pc, #644]	; (8003bbc <_GLOBAL__sub_I_REG_FIFO+0x1084>)
 8003936:	48a2      	ldr	r0, [pc, #648]	; (8003bc0 <_GLOBAL__sub_I_REG_FIFO+0x1088>)
 8003938:	f7fd fb0c 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Dio0Mapping(reg_dio0_mapping, 1, false, 'w', 0x00, 0x03),
 800393c:	e9cd 6400 	strd	r6, r4, [sp]
 8003940:	9702      	str	r7, [sp, #8]
 8003942:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003946:	4623      	mov	r3, r4
 8003948:	462a      	mov	r2, r5
 800394a:	499e      	ldr	r1, [pc, #632]	; (8003bc4 <_GLOBAL__sub_I_REG_FIFO+0x108c>)
 800394c:	489e      	ldr	r0, [pc, #632]	; (8003bc8 <_GLOBAL__sub_I_REG_FIFO+0x1090>)
 800394e:	f7fd fb01 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Dio1Mapping(reg_dio1_mapping, 1, false, 'w', 0x00, 0x03),
 8003952:	e9cd 6400 	strd	r6, r4, [sp]
 8003956:	9702      	str	r7, [sp, #8]
 8003958:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800395c:	4623      	mov	r3, r4
 800395e:	462a      	mov	r2, r5
 8003960:	499a      	ldr	r1, [pc, #616]	; (8003bcc <_GLOBAL__sub_I_REG_FIFO+0x1094>)
 8003962:	489b      	ldr	r0, [pc, #620]	; (8003bd0 <_GLOBAL__sub_I_REG_FIFO+0x1098>)
 8003964:	f7fd faf6 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Dio2Mapping(reg_dio2_mapping, 1, false, 'w', 0x00, 0x03),
 8003968:	e9cd 6400 	strd	r6, r4, [sp]
 800396c:	9702      	str	r7, [sp, #8]
 800396e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003972:	4623      	mov	r3, r4
 8003974:	462a      	mov	r2, r5
 8003976:	4997      	ldr	r1, [pc, #604]	; (8003bd4 <_GLOBAL__sub_I_REG_FIFO+0x109c>)
 8003978:	4897      	ldr	r0, [pc, #604]	; (8003bd8 <_GLOBAL__sub_I_REG_FIFO+0x10a0>)
 800397a:	f7fd faeb 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Dio3Mapping(reg_dio3_mapping, 1, false, 'w', 0x00, 0x03),
 800397e:	e9cd 6400 	strd	r6, r4, [sp]
 8003982:	9702      	str	r7, [sp, #8]
 8003984:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003988:	4623      	mov	r3, r4
 800398a:	462a      	mov	r2, r5
 800398c:	4993      	ldr	r1, [pc, #588]	; (8003bdc <_GLOBAL__sub_I_REG_FIFO+0x10a4>)
 800398e:	4894      	ldr	r0, [pc, #592]	; (8003be0 <_GLOBAL__sub_I_REG_FIFO+0x10a8>)
 8003990:	f7fd fae0 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Dio4Mapping(reg_dio4_mapping, 1, false, 'w', 0x00, 0x03),
 8003994:	e9cd 6400 	strd	r6, r4, [sp]
 8003998:	9702      	str	r7, [sp, #8]
 800399a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800399e:	4623      	mov	r3, r4
 80039a0:	462a      	mov	r2, r5
 80039a2:	4990      	ldr	r1, [pc, #576]	; (8003be4 <_GLOBAL__sub_I_REG_FIFO+0x10ac>)
 80039a4:	4890      	ldr	r0, [pc, #576]	; (8003be8 <_GLOBAL__sub_I_REG_FIFO+0x10b0>)
 80039a6:	f7fd fad5 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Dio5Mapping(reg_dio5_mapping, 1, false, 'w', 0x00, 0x03),
 80039aa:	e9cd 6400 	strd	r6, r4, [sp]
 80039ae:	9702      	str	r7, [sp, #8]
 80039b0:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80039b4:	4623      	mov	r3, r4
 80039b6:	462a      	mov	r2, r5
 80039b8:	498c      	ldr	r1, [pc, #560]	; (8003bec <_GLOBAL__sub_I_REG_FIFO+0x10b4>)
 80039ba:	488d      	ldr	r0, [pc, #564]	; (8003bf0 <_GLOBAL__sub_I_REG_FIFO+0x10b8>)
 80039bc:	f7fd faca 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
MapPreambleDetect(reg_map_preamble_detect, 1, false, 'w', 0x00, 0x01),
 80039c0:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80039c4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80039c8:	9600      	str	r6, [sp, #0]
 80039ca:	4623      	mov	r3, r4
 80039cc:	462a      	mov	r2, r5
 80039ce:	4989      	ldr	r1, [pc, #548]	; (8003bf4 <_GLOBAL__sub_I_REG_FIFO+0x10bc>)
 80039d0:	4889      	ldr	r0, [pc, #548]	; (8003bf8 <_GLOBAL__sub_I_REG_FIFO+0x10c0>)
 80039d2:	f7fd fabf 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Version(reg_version, 1, false, 'r', 0x00, 0xFF),
 80039d6:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80039da:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80039de:	f8cd b000 	str.w	fp, [sp]
 80039e2:	4623      	mov	r3, r4
 80039e4:	462a      	mov	r2, r5
 80039e6:	4985      	ldr	r1, [pc, #532]	; (8003bfc <_GLOBAL__sub_I_REG_FIFO+0x10c4>)
 80039e8:	4885      	ldr	r0, [pc, #532]	; (8003c00 <_GLOBAL__sub_I_REG_FIFO+0x10c8>)
 80039ea:	f7fd fab3 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FastHopOn(reg_fast_hop_on, 1, false, 'w', 0x00, 0x01),
 80039ee:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80039f2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80039f6:	9600      	str	r6, [sp, #0]
 80039f8:	4623      	mov	r3, r4
 80039fa:	462a      	mov	r2, r5
 80039fc:	4981      	ldr	r1, [pc, #516]	; (8003c04 <_GLOBAL__sub_I_REG_FIFO+0x10cc>)
 80039fe:	4882      	ldr	r0, [pc, #520]	; (8003c08 <_GLOBAL__sub_I_REG_FIFO+0x10d0>)
 8003a00:	f7fd faa8 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
TcxoInputOn(reg_tcxo_input_on, 1, false, 'w', 0x00, 0x01),
 8003a04:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003a08:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003a0c:	9600      	str	r6, [sp, #0]
 8003a0e:	4623      	mov	r3, r4
 8003a10:	462a      	mov	r2, r5
 8003a12:	497e      	ldr	r1, [pc, #504]	; (8003c0c <_GLOBAL__sub_I_REG_FIFO+0x10d4>)
 8003a14:	487e      	ldr	r0, [pc, #504]	; (8003c10 <_GLOBAL__sub_I_REG_FIFO+0x10d8>)
 8003a16:	f7fd fa9d 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PaDac(reg_pa_dac, 1, false, 'w', 0x04, 0x07, reserv_pa_dac, 2),
 8003a1a:	2002      	movs	r0, #2
 8003a1c:	2304      	movs	r3, #4
 8003a1e:	2207      	movs	r2, #7
BitRateFrac(reg_bit_rate_frac, 1, false, 'w', 0x00, 0x0F),
 8003a20:	46c8      	mov	r8, r9
PaDac(reg_pa_dac, 1, false, 'w', 0x04, 0x07, reserv_pa_dac, 2),
 8003a22:	497c      	ldr	r1, [pc, #496]	; (8003c14 <_GLOBAL__sub_I_REG_FIFO+0x10dc>)
 8003a24:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003a28:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8003a2c:	9600      	str	r6, [sp, #0]
 8003a2e:	4623      	mov	r3, r4
 8003a30:	462a      	mov	r2, r5
 8003a32:	4979      	ldr	r1, [pc, #484]	; (8003c18 <_GLOBAL__sub_I_REG_FIFO+0x10e0>)
 8003a34:	4879      	ldr	r0, [pc, #484]	; (8003c1c <_GLOBAL__sub_I_REG_FIFO+0x10e4>)
 8003a36:	f7fd fa8d 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
FormerTemp(reg_former_temp, 1, false, 'r', 0x00, 0xFF),
 8003a3a:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8003a3e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003a42:	f8cd b000 	str.w	fp, [sp]
 8003a46:	4623      	mov	r3, r4
 8003a48:	462a      	mov	r2, r5
 8003a4a:	4975      	ldr	r1, [pc, #468]	; (8003c20 <_GLOBAL__sub_I_REG_FIFO+0x10e8>)
 8003a4c:	4875      	ldr	r0, [pc, #468]	; (8003c24 <_GLOBAL__sub_I_REG_FIFO+0x10ec>)
 8003a4e:	f7fd fa81 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
BitRateFrac(reg_bit_rate_frac, 1, false, 'w', 0x00, 0x0F),
 8003a52:	e9cd 6400 	strd	r6, r4, [sp]
 8003a56:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003a5a:	4623      	mov	r3, r4
 8003a5c:	462a      	mov	r2, r5
 8003a5e:	f8cd 8008 	str.w	r8, [sp, #8]
 8003a62:	4971      	ldr	r1, [pc, #452]	; (8003c28 <_GLOBAL__sub_I_REG_FIFO+0x10f0>)
 8003a64:	4871      	ldr	r0, [pc, #452]	; (8003c2c <_GLOBAL__sub_I_REG_FIFO+0x10f4>)
 8003a66:	f7fd fa75 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
AgcReferenceLevel(reg_agc_reference_level, 1, false, 'w', 0x00, 0x3F),
 8003a6a:	233f      	movs	r3, #63	; 0x3f
 8003a6c:	e9cd 6400 	strd	r6, r4, [sp]
 8003a70:	9302      	str	r3, [sp, #8]
 8003a72:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003a76:	4623      	mov	r3, r4
 8003a78:	462a      	mov	r2, r5
 8003a7a:	496d      	ldr	r1, [pc, #436]	; (8003c30 <_GLOBAL__sub_I_REG_FIFO+0x10f8>)
 8003a7c:	486d      	ldr	r0, [pc, #436]	; (8003c34 <_GLOBAL__sub_I_REG_FIFO+0x10fc>)
 8003a7e:	f7fd fa69 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
AgcStep1(reg_agc_step1, 1, false, 'w', 0x00, 0x1F),
 8003a82:	231f      	movs	r3, #31
 8003a84:	e9cd 6400 	strd	r6, r4, [sp]
 8003a88:	9302      	str	r3, [sp, #8]
 8003a8a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003a8e:	4623      	mov	r3, r4
 8003a90:	462a      	mov	r2, r5
 8003a92:	4969      	ldr	r1, [pc, #420]	; (8003c38 <_GLOBAL__sub_I_REG_FIFO+0x1100>)
 8003a94:	4869      	ldr	r0, [pc, #420]	; (8003c3c <_GLOBAL__sub_I_REG_FIFO+0x1104>)
 8003a96:	f7fd fa5d 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
AgcStep2(reg_agc_step2, 1, false, 'w', 0x00, 0x0F),
 8003a9a:	e9cd 6400 	strd	r6, r4, [sp]
 8003a9e:	f8cd 8008 	str.w	r8, [sp, #8]
 8003aa2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003aa6:	4623      	mov	r3, r4
 8003aa8:	462a      	mov	r2, r5
 8003aaa:	4965      	ldr	r1, [pc, #404]	; (8003c40 <_GLOBAL__sub_I_REG_FIFO+0x1108>)
 8003aac:	4865      	ldr	r0, [pc, #404]	; (8003c44 <_GLOBAL__sub_I_REG_FIFO+0x110c>)
 8003aae:	f7fd fa51 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
AgcStep3(reg_agc_step3, 1, false, 'w', 0x00, 0x0F),
 8003ab2:	e9cd 6400 	strd	r6, r4, [sp]
 8003ab6:	f8cd 8008 	str.w	r8, [sp, #8]
 8003aba:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003abe:	4623      	mov	r3, r4
 8003ac0:	462a      	mov	r2, r5
 8003ac2:	4961      	ldr	r1, [pc, #388]	; (8003c48 <_GLOBAL__sub_I_REG_FIFO+0x1110>)
 8003ac4:	4861      	ldr	r0, [pc, #388]	; (8003c4c <_GLOBAL__sub_I_REG_FIFO+0x1114>)
 8003ac6:	f7fd fa45 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
AgcStep4(reg_agc_step4, 1, false, 'w', 0x00, 0x0F),
 8003aca:	f8cd 8008 	str.w	r8, [sp, #8]
 8003ace:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003ad2:	9401      	str	r4, [sp, #4]
 8003ad4:	4623      	mov	r3, r4
 8003ad6:	462a      	mov	r2, r5
 8003ad8:	9600      	str	r6, [sp, #0]
 8003ada:	495d      	ldr	r1, [pc, #372]	; (8003c50 <_GLOBAL__sub_I_REG_FIFO+0x1118>)
 8003adc:	485d      	ldr	r0, [pc, #372]	; (8003c54 <_GLOBAL__sub_I_REG_FIFO+0x111c>)
 8003ade:	f7fd fa39 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
AgcStep5(reg_agc_step5, 1, false, 'w', 0x00, 0x0F),
 8003ae2:	f8cd 8008 	str.w	r8, [sp, #8]
 8003ae6:	9600      	str	r6, [sp, #0]
 8003ae8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003aec:	9401      	str	r4, [sp, #4]
 8003aee:	4623      	mov	r3, r4
 8003af0:	462a      	mov	r2, r5
 8003af2:	4959      	ldr	r1, [pc, #356]	; (8003c58 <_GLOBAL__sub_I_REG_FIFO+0x1120>)
 8003af4:	4859      	ldr	r0, [pc, #356]	; (8003c5c <_GLOBAL__sub_I_REG_FIFO+0x1124>)
 8003af6:	f7fd fa2d 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
PllBandwidth(reg_pll_bandwidth, 1, false, 'w', 0x00, 0x03);
 8003afa:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003afe:	9401      	str	r4, [sp, #4]
 8003b00:	4623      	mov	r3, r4
};
 8003b02:	4c57      	ldr	r4, [pc, #348]	; (8003c60 <_GLOBAL__sub_I_REG_FIFO+0x1128>)
PllBandwidth(reg_pll_bandwidth, 1, false, 'w', 0x00, 0x03);
 8003b04:	9600      	str	r6, [sp, #0]
};
 8003b06:	4626      	mov	r6, r4
PllBandwidth(reg_pll_bandwidth, 1, false, 'w', 0x00, 0x03);
 8003b08:	462a      	mov	r2, r5
};
 8003b0a:	4d56      	ldr	r5, [pc, #344]	; (8003c64 <_GLOBAL__sub_I_REG_FIFO+0x112c>)
PllBandwidth(reg_pll_bandwidth, 1, false, 'w', 0x00, 0x03);
 8003b0c:	9702      	str	r7, [sp, #8]
 8003b0e:	4956      	ldr	r1, [pc, #344]	; (8003c68 <_GLOBAL__sub_I_REG_FIFO+0x1130>)
 8003b10:	4856      	ldr	r0, [pc, #344]	; (8003c6c <_GLOBAL__sub_I_REG_FIFO+0x1134>)
 8003b12:	f7fd fa1f 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
};
 8003b16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b18:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003b1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b1e:	4d54      	ldr	r5, [pc, #336]	; (8003c70 <_GLOBAL__sub_I_REG_FIFO+0x1138>)
 8003b20:	f104 071c 	add.w	r7, r4, #28
 8003b24:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b2a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003b2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b30:	4d50      	ldr	r5, [pc, #320]	; (8003c74 <_GLOBAL__sub_I_REG_FIFO+0x113c>)
 8003b32:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8003b36:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8003b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b3c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003b3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b42:	4d4d      	ldr	r5, [pc, #308]	; (8003c78 <_GLOBAL__sub_I_REG_FIFO+0x1140>)
 8003b44:	f104 0754 	add.w	r7, r4, #84	; 0x54
 8003b48:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b4e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003b50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b54:	4d49      	ldr	r5, [pc, #292]	; (8003c7c <_GLOBAL__sub_I_REG_FIFO+0x1144>)
 8003b56:	f104 0670 	add.w	r6, r4, #112	; 0x70
 8003b5a:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8003b5e:	e08f      	b.n	8003c80 <_GLOBAL__sub_I_REG_FIFO+0x1148>
 8003b60:	20001764 	.word	0x20001764
 8003b64:	200010b4 	.word	0x200010b4
 8003b68:	20001724 	.word	0x20001724
 8003b6c:	2000100c 	.word	0x2000100c
 8003b70:	200017b4 	.word	0x200017b4
 8003b74:	20001194 	.word	0x20001194
 8003b78:	20001634 	.word	0x20001634
 8003b7c:	20000cc4 	.word	0x20000cc4
 8003b80:	20001854 	.word	0x20001854
 8003b84:	200013c4 	.word	0x200013c4
 8003b88:	000fffff 	.word	0x000fffff
 8003b8c:	2000174c 	.word	0x2000174c
 8003b90:	20001098 	.word	0x20001098
 8003b94:	20001874 	.word	0x20001874
 8003b98:	20001418 	.word	0x20001418
 8003b9c:	20000000 	.word	0x20000000
 8003ba0:	20000e68 	.word	0x20000e68
 8003ba4:	200016ac 	.word	0x200016ac
 8003ba8:	2000178c 	.word	0x2000178c
 8003bac:	20001108 	.word	0x20001108
 8003bb0:	20000004 	.word	0x20000004
 8003bb4:	20000e84 	.word	0x20000e84
 8003bb8:	200016b4 	.word	0x200016b4
 8003bbc:	200018c4 	.word	0x200018c4
 8003bc0:	20001514 	.word	0x20001514
 8003bc4:	200016bc 	.word	0x200016bc
 8003bc8:	20000ea0 	.word	0x20000ea0
 8003bcc:	200016c4 	.word	0x200016c4
 8003bd0:	20000ebc 	.word	0x20000ebc
 8003bd4:	200016cc 	.word	0x200016cc
 8003bd8:	20000ed8 	.word	0x20000ed8
 8003bdc:	200016d4 	.word	0x200016d4
 8003be0:	20000ef4 	.word	0x20000ef4
 8003be4:	200016dc 	.word	0x200016dc
 8003be8:	20000f10 	.word	0x20000f10
 8003bec:	200016e4 	.word	0x200016e4
 8003bf0:	20000f2c 	.word	0x20000f2c
 8003bf4:	200017c4 	.word	0x200017c4
 8003bf8:	200011cc 	.word	0x200011cc
 8003bfc:	2000191c 	.word	0x2000191c
 8003c00:	20001610 	.word	0x20001610
 8003c04:	200016ec 	.word	0x200016ec
 8003c08:	20000f48 	.word	0x20000f48
 8003c0c:	200018cc 	.word	0x200018cc
 8003c10:	20001530 	.word	0x20001530
 8003c14:	20000010 	.word	0x20000010
 8003c18:	200017fc 	.word	0x200017fc
 8003c1c:	20001290 	.word	0x20001290
 8003c20:	20001744 	.word	0x20001744
 8003c24:	2000107c 	.word	0x2000107c
 8003c28:	2000166c 	.word	0x2000166c
 8003c2c:	20000d88 	.word	0x20000d88
 8003c30:	2000163c 	.word	0x2000163c
 8003c34:	20000ce0 	.word	0x20000ce0
 8003c38:	20001644 	.word	0x20001644
 8003c3c:	20000cfc 	.word	0x20000cfc
 8003c40:	2000164c 	.word	0x2000164c
 8003c44:	20000d18 	.word	0x20000d18
 8003c48:	20001654 	.word	0x20001654
 8003c4c:	20000d34 	.word	0x20000d34
 8003c50:	2000165c 	.word	0x2000165c
 8003c54:	20000d50 	.word	0x20000d50
 8003c58:	20001664 	.word	0x20001664
 8003c5c:	20000d6c 	.word	0x20000d6c
 8003c60:	20000340 	.word	0x20000340
 8003c64:	20000fb8 	.word	0x20000fb8
 8003c68:	20001844 	.word	0x20001844
 8003c6c:	2000138c 	.word	0x2000138c
 8003c70:	20001178 	.word	0x20001178
 8003c74:	20000ca8 	.word	0x20000ca8
 8003c78:	200011b0 	.word	0x200011b0
 8003c7c:	20001204 	.word	0x20001204
 8003c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c82:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003c84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c88:	4dcf      	ldr	r5, [pc, #828]	; (8003fc8 <_GLOBAL__sub_I_REG_FIFO+0x1490>)
 8003c8a:	f104 078c 	add.w	r7, r4, #140	; 0x8c
 8003c8e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c94:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003c96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c9a:	4dcc      	ldr	r5, [pc, #816]	; (8003fcc <_GLOBAL__sub_I_REG_FIFO+0x1494>)
 8003c9c:	f104 06a8 	add.w	r6, r4, #168	; 0xa8
 8003ca0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8003ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ca6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003ca8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003cac:	4dc8      	ldr	r5, [pc, #800]	; (8003fd0 <_GLOBAL__sub_I_REG_FIFO+0x1498>)
 8003cae:	f104 07c4 	add.w	r7, r4, #196	; 0xc4
 8003cb2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003cb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cb8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003cba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003cbe:	4dc5      	ldr	r5, [pc, #788]	; (8003fd4 <_GLOBAL__sub_I_REG_FIFO+0x149c>)
 8003cc0:	f104 06e0 	add.w	r6, r4, #224	; 0xe0
 8003cc4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8003cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003ccc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003cd0:	4dc1      	ldr	r5, [pc, #772]	; (8003fd8 <_GLOBAL__sub_I_REG_FIFO+0x14a0>)
 8003cd2:	f104 07fc 	add.w	r7, r4, #252	; 0xfc
 8003cd6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003cda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cdc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003cde:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003ce2:	4dbe      	ldr	r5, [pc, #760]	; (8003fdc <_GLOBAL__sub_I_REG_FIFO+0x14a4>)
 8003ce4:	f504 768c 	add.w	r6, r4, #280	; 0x118
 8003ce8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8003cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003cf0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003cf4:	4dba      	ldr	r5, [pc, #744]	; (8003fe0 <_GLOBAL__sub_I_REG_FIFO+0x14a8>)
 8003cf6:	f504 779a 	add.w	r7, r4, #308	; 0x134
 8003cfa:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d00:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003d02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003d06:	4db7      	ldr	r5, [pc, #732]	; (8003fe4 <_GLOBAL__sub_I_REG_FIFO+0x14ac>)
 8003d08:	f504 76a8 	add.w	r6, r4, #336	; 0x150
 8003d0c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8003d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d12:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003d14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003d18:	4db3      	ldr	r5, [pc, #716]	; (8003fe8 <_GLOBAL__sub_I_REG_FIFO+0x14b0>)
 8003d1a:	f504 77b6 	add.w	r7, r4, #364	; 0x16c
 8003d1e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003d22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d24:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003d26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003d2a:	4db0      	ldr	r5, [pc, #704]	; (8003fec <_GLOBAL__sub_I_REG_FIFO+0x14b4>)
 8003d2c:	f504 76c4 	add.w	r6, r4, #392	; 0x188
 8003d30:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8003d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d36:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003d38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003d3c:	4dac      	ldr	r5, [pc, #688]	; (8003ff0 <_GLOBAL__sub_I_REG_FIFO+0x14b8>)
 8003d3e:	f504 77d2 	add.w	r7, r4, #420	; 0x1a4
 8003d42:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003d46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d48:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003d4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003d4e:	4da9      	ldr	r5, [pc, #676]	; (8003ff4 <_GLOBAL__sub_I_REG_FIFO+0x14bc>)
 8003d50:	f504 76e0 	add.w	r6, r4, #448	; 0x1c0
 8003d54:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8003d58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d5a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003d5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003d60:	4da5      	ldr	r5, [pc, #660]	; (8003ff8 <_GLOBAL__sub_I_REG_FIFO+0x14c0>)
 8003d62:	f504 77ee 	add.w	r7, r4, #476	; 0x1dc
 8003d66:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003d6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d6c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003d6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003d72:	4da2      	ldr	r5, [pc, #648]	; (8003ffc <_GLOBAL__sub_I_REG_FIFO+0x14c4>)
 8003d74:	f504 76fc 	add.w	r6, r4, #504	; 0x1f8
 8003d78:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8003d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d7e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003d80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003d84:	4d9e      	ldr	r5, [pc, #632]	; (8004000 <_GLOBAL__sub_I_REG_FIFO+0x14c8>)
 8003d86:	f504 7705 	add.w	r7, r4, #532	; 0x214
 8003d8a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003d8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d90:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003d92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003d96:	4d9b      	ldr	r5, [pc, #620]	; (8004004 <_GLOBAL__sub_I_REG_FIFO+0x14cc>)
 8003d98:	f504 760c 	add.w	r6, r4, #560	; 0x230
 8003d9c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8003da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003da2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003da4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003da8:	4d97      	ldr	r5, [pc, #604]	; (8004008 <_GLOBAL__sub_I_REG_FIFO+0x14d0>)
 8003daa:	f504 7713 	add.w	r7, r4, #588	; 0x24c
 8003dae:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003db4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003db6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003dba:	4d94      	ldr	r5, [pc, #592]	; (800400c <_GLOBAL__sub_I_REG_FIFO+0x14d4>)
 8003dbc:	f504 761a 	add.w	r6, r4, #616	; 0x268
 8003dc0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8003dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dc6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003dc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003dcc:	4d90      	ldr	r5, [pc, #576]	; (8004010 <_GLOBAL__sub_I_REG_FIFO+0x14d8>)
 8003dce:	f504 7721 	add.w	r7, r4, #644	; 0x284
 8003dd2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003dd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dd8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003dda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003dde:	4d8d      	ldr	r5, [pc, #564]	; (8004014 <_GLOBAL__sub_I_REG_FIFO+0x14dc>)
 8003de0:	f504 7628 	add.w	r6, r4, #672	; 0x2a0
 8003de4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8003de8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003dec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003df0:	4d89      	ldr	r5, [pc, #548]	; (8004018 <_GLOBAL__sub_I_REG_FIFO+0x14e0>)
 8003df2:	f504 772f 	add.w	r7, r4, #700	; 0x2bc
 8003df6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dfc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003dfe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e02:	4d86      	ldr	r5, [pc, #536]	; (800401c <_GLOBAL__sub_I_REG_FIFO+0x14e4>)
 8003e04:	f504 7636 	add.w	r6, r4, #728	; 0x2d8
 8003e08:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8003e0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e0e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003e10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e14:	4d82      	ldr	r5, [pc, #520]	; (8004020 <_GLOBAL__sub_I_REG_FIFO+0x14e8>)
 8003e16:	f504 773d 	add.w	r7, r4, #756	; 0x2f4
 8003e1a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003e1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e20:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003e22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e26:	4d7f      	ldr	r5, [pc, #508]	; (8004024 <_GLOBAL__sub_I_REG_FIFO+0x14ec>)
 8003e28:	f504 7644 	add.w	r6, r4, #784	; 0x310
 8003e2c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8003e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e32:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003e34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e38:	4d7b      	ldr	r5, [pc, #492]	; (8004028 <_GLOBAL__sub_I_REG_FIFO+0x14f0>)
 8003e3a:	f504 774b 	add.w	r7, r4, #812	; 0x32c
 8003e3e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e44:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003e46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e4a:	4d78      	ldr	r5, [pc, #480]	; (800402c <_GLOBAL__sub_I_REG_FIFO+0x14f4>)
 8003e4c:	f504 7652 	add.w	r6, r4, #840	; 0x348
 8003e50:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8003e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e56:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003e58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e5c:	4d74      	ldr	r5, [pc, #464]	; (8004030 <_GLOBAL__sub_I_REG_FIFO+0x14f8>)
 8003e5e:	f504 7e59 	add.w	lr, r4, #868	; 0x364
 8003e62:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e68:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003e6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e70:	4d70      	ldr	r5, [pc, #448]	; (8004034 <_GLOBAL__sub_I_REG_FIFO+0x14fc>)
 8003e72:	f504 7960 	add.w	r9, r4, #896	; 0x380
 8003e76:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8003e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e7c:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8003e80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e84:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 8004050 <_GLOBAL__sub_I_REG_FIFO+0x1518>
 8003e88:	f504 7867 	add.w	r8, r4, #924	; 0x39c
 8003e8c:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8003e90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003e94:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8003e98:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8003e9c:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 8004054 <_GLOBAL__sub_I_REG_FIFO+0x151c>
 8003ea0:	f504 7b6e 	add.w	fp, r4, #952	; 0x3b8
 8003ea4:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8003ea8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003eac:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 8003eb0:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8003eb4:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8004058 <_GLOBAL__sub_I_REG_FIFO+0x1520>
 8003eb8:	f504 7a75 	add.w	sl, r4, #980	; 0x3d4
 8003ebc:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8003ec0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003ec4:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8003ec8:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8003ecc:	f8df c18c 	ldr.w	ip, [pc, #396]	; 800405c <_GLOBAL__sub_I_REG_FIFO+0x1524>
 8003ed0:	f504 7b7c 	add.w	fp, r4, #1008	; 0x3f0
 8003ed4:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8003ed8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003edc:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 8003ee0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003ee4:	4f54      	ldr	r7, [pc, #336]	; (8004038 <_GLOBAL__sub_I_REG_FIFO+0x1500>)
 8003ee6:	f204 4a0c 	addw	sl, r4, #1036	; 0x40c
 8003eea:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8003eee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003ef0:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8003ef4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003ef8:	4e50      	ldr	r6, [pc, #320]	; (800403c <_GLOBAL__sub_I_REG_FIFO+0x1504>)
 8003efa:	f504 6b85 	add.w	fp, r4, #1064	; 0x428
 8003efe:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8003f02:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003f04:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 8003f08:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003f0c:	4d4c      	ldr	r5, [pc, #304]	; (8004040 <_GLOBAL__sub_I_REG_FIFO+0x1508>)
 8003f0e:	f204 4a44 	addw	sl, r4, #1092	; 0x444
 8003f12:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8003f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f18:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8003f1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003f20:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8004060 <_GLOBAL__sub_I_REG_FIFO+0x1528>
 8003f24:	f504 6b8c 	add.w	fp, r4, #1120	; 0x460
 8003f28:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8003f2c:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8003f30:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 8003f34:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003f38:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8004064 <_GLOBAL__sub_I_REG_FIFO+0x152c>
 8003f3c:	f204 497c 	addw	r9, r4, #1148	; 0x47c
 8003f40:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8003f44:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8003f48:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8003f4c:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003f50:	f8df e114 	ldr.w	lr, [pc, #276]	; 8004068 <_GLOBAL__sub_I_REG_FIFO+0x1530>
 8003f54:	f504 6b93 	add.w	fp, r4, #1176	; 0x498
 8003f58:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8003f5c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003f60:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 8003f64:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8003f68:	f8df c100 	ldr.w	ip, [pc, #256]	; 800406c <_GLOBAL__sub_I_REG_FIFO+0x1534>
 8003f6c:	f204 49b4 	addw	r9, r4, #1204	; 0x4b4
 8003f70:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8003f74:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003f78:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8003f7c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003f80:	4f30      	ldr	r7, [pc, #192]	; (8004044 <_GLOBAL__sub_I_REG_FIFO+0x150c>)
 8003f82:	f504 6b9a 	add.w	fp, r4, #1232	; 0x4d0
 8003f86:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8003f8a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003f8c:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 8003f90:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003f94:	4e2c      	ldr	r6, [pc, #176]	; (8004048 <_GLOBAL__sub_I_REG_FIFO+0x1510>)
 8003f96:	f204 49ec 	addw	r9, r4, #1260	; 0x4ec
 8003f9a:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8003f9e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003fa0:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8003fa4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003fa8:	4d28      	ldr	r5, [pc, #160]	; (800404c <_GLOBAL__sub_I_REG_FIFO+0x1514>)
 8003faa:	f504 6ba1 	add.w	fp, r4, #1288	; 0x508
 8003fae:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8003fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fb4:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 8003fb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003fbc:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8004070 <_GLOBAL__sub_I_REG_FIFO+0x1538>
 8003fc0:	f204 5924 	addw	r9, r4, #1316	; 0x524
 8003fc4:	e056      	b.n	8004074 <_GLOBAL__sub_I_REG_FIFO+0x153c>
 8003fc6:	bf00      	nop
 8003fc8:	200010d0 	.word	0x200010d0
 8003fcc:	200012c8 	.word	0x200012c8
 8003fd0:	200011e8 	.word	0x200011e8
 8003fd4:	20001274 	.word	0x20001274
 8003fd8:	200012ac 	.word	0x200012ac
 8003fdc:	2000123c 	.word	0x2000123c
 8003fe0:	20001258 	.word	0x20001258
 8003fe4:	2000115c 	.word	0x2000115c
 8003fe8:	20001140 	.word	0x20001140
 8003fec:	20001124 	.word	0x20001124
 8003ff0:	20000fd4 	.word	0x20000fd4
 8003ff4:	20001060 	.word	0x20001060
 8003ff8:	20000ff0 	.word	0x20000ff0
 8003ffc:	20001044 	.word	0x20001044
 8004000:	200014c0 	.word	0x200014c0
 8004004:	2000146c 	.word	0x2000146c
 8004008:	20001338 	.word	0x20001338
 800400c:	200015d8 	.word	0x200015d8
 8004010:	20001584 	.word	0x20001584
 8004014:	20000e14 	.word	0x20000e14
 8004018:	20000f80 	.word	0x20000f80
 800401c:	20000ddc 	.word	0x20000ddc
 8004020:	200014a4 	.word	0x200014a4
 8004024:	20001450 	.word	0x20001450
 8004028:	2000131c 	.word	0x2000131c
 800402c:	200015a0 	.word	0x200015a0
 8004030:	20001568 	.word	0x20001568
 8004034:	20000df8 	.word	0x20000df8
 8004038:	200015f4 	.word	0x200015f4
 800403c:	20001434 	.word	0x20001434
 8004040:	20001220 	.word	0x20001220
 8004044:	20000e4c 	.word	0x20000e4c
 8004048:	20000f9c 	.word	0x20000f9c
 800404c:	20000da4 	.word	0x20000da4
 8004050:	20000f64 	.word	0x20000f64
 8004054:	20000dc0 	.word	0x20000dc0
 8004058:	20001028 	.word	0x20001028
 800405c:	200015bc 	.word	0x200015bc
 8004060:	20001300 	.word	0x20001300
 8004064:	200012e4 	.word	0x200012e4
 8004068:	200013fc 	.word	0x200013fc
 800406c:	200013a8 	.word	0x200013a8
 8004070:	20000e30 	.word	0x20000e30
 8004074:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8004078:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 800407c:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8004080:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8004084:	f8df 8360 	ldr.w	r8, [pc, #864]	; 80043e8 <_GLOBAL__sub_I_REG_FIFO+0x18b0>
 8004088:	f504 6aa8 	add.w	sl, r4, #1344	; 0x540
 800408c:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8004090:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8004094:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8004098:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800409c:	f8df e34c 	ldr.w	lr, [pc, #844]	; 80043ec <_GLOBAL__sub_I_REG_FIFO+0x18b4>
 80040a0:	f204 585c 	addw	r8, r4, #1372	; 0x55c
 80040a4:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 80040a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80040ac:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80040b0:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80040b4:	f8df c338 	ldr.w	ip, [pc, #824]	; 80043f0 <_GLOBAL__sub_I_REG_FIFO+0x18b8>
 80040b8:	f504 6eaf 	add.w	lr, r4, #1400	; 0x578
 80040bc:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 80040c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80040c4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80040c8:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80040cc:	4fa7      	ldr	r7, [pc, #668]	; (800436c <_GLOBAL__sub_I_REG_FIFO+0x1834>)
 80040ce:	f204 5c94 	addw	ip, r4, #1428	; 0x594
 80040d2:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 80040d6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80040d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80040dc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80040e0:	4ea3      	ldr	r6, [pc, #652]	; (8004370 <_GLOBAL__sub_I_REG_FIFO+0x1838>)
 80040e2:	f504 67b6 	add.w	r7, r4, #1456	; 0x5b0
 80040e6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80040ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80040ec:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80040ee:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80040f2:	4da0      	ldr	r5, [pc, #640]	; (8004374 <_GLOBAL__sub_I_REG_FIFO+0x183c>)
 80040f4:	f204 56cc 	addw	r6, r4, #1484	; 0x5cc
 80040f8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80040fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004100:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004104:	4d9c      	ldr	r5, [pc, #624]	; (8004378 <_GLOBAL__sub_I_REG_FIFO+0x1840>)
 8004106:	f504 67bd 	add.w	r7, r4, #1512	; 0x5e8
 800410a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800410e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004110:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004112:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004116:	4d99      	ldr	r5, [pc, #612]	; (800437c <_GLOBAL__sub_I_REG_FIFO+0x1844>)
 8004118:	f204 6604 	addw	r6, r4, #1540	; 0x604
 800411c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004122:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004124:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004128:	4d95      	ldr	r5, [pc, #596]	; (8004380 <_GLOBAL__sub_I_REG_FIFO+0x1848>)
 800412a:	f504 67c4 	add.w	r7, r4, #1568	; 0x620
 800412e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004132:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004134:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004136:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800413a:	4d92      	ldr	r5, [pc, #584]	; (8004384 <_GLOBAL__sub_I_REG_FIFO+0x184c>)
 800413c:	f204 663c 	addw	r6, r4, #1596	; 0x63c
 8004140:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004146:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004148:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800414c:	4d8e      	ldr	r5, [pc, #568]	; (8004388 <_GLOBAL__sub_I_REG_FIFO+0x1850>)
 800414e:	f504 67cb 	add.w	r7, r4, #1624	; 0x658
 8004152:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004156:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004158:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800415a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800415e:	4d8b      	ldr	r5, [pc, #556]	; (800438c <_GLOBAL__sub_I_REG_FIFO+0x1854>)
 8004160:	f204 6674 	addw	r6, r4, #1652	; 0x674
 8004164:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800416a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800416c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004170:	4d87      	ldr	r5, [pc, #540]	; (8004390 <_GLOBAL__sub_I_REG_FIFO+0x1858>)
 8004172:	f504 67d2 	add.w	r7, r4, #1680	; 0x690
 8004176:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800417a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800417c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800417e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004182:	4d84      	ldr	r5, [pc, #528]	; (8004394 <_GLOBAL__sub_I_REG_FIFO+0x185c>)
 8004184:	f204 66ac 	addw	r6, r4, #1708	; 0x6ac
 8004188:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800418c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800418e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004190:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004194:	4d80      	ldr	r5, [pc, #512]	; (8004398 <_GLOBAL__sub_I_REG_FIFO+0x1860>)
 8004196:	f504 67d9 	add.w	r7, r4, #1736	; 0x6c8
 800419a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800419e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041a0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80041a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80041a6:	4d7d      	ldr	r5, [pc, #500]	; (800439c <_GLOBAL__sub_I_REG_FIFO+0x1864>)
 80041a8:	f204 66e4 	addw	r6, r4, #1764	; 0x6e4
 80041ac:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80041b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80041b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80041b8:	4d79      	ldr	r5, [pc, #484]	; (80043a0 <_GLOBAL__sub_I_REG_FIFO+0x1868>)
 80041ba:	f504 67e0 	add.w	r7, r4, #1792	; 0x700
 80041be:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80041c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041c4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80041c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80041ca:	4d76      	ldr	r5, [pc, #472]	; (80043a4 <_GLOBAL__sub_I_REG_FIFO+0x186c>)
 80041cc:	f204 761c 	addw	r6, r4, #1820	; 0x71c
 80041d0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80041d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041d6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80041d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80041dc:	4d72      	ldr	r5, [pc, #456]	; (80043a8 <_GLOBAL__sub_I_REG_FIFO+0x1870>)
 80041de:	f504 67e7 	add.w	r7, r4, #1848	; 0x738
 80041e2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80041e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041e8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80041ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80041ee:	4d6f      	ldr	r5, [pc, #444]	; (80043ac <_GLOBAL__sub_I_REG_FIFO+0x1874>)
 80041f0:	f204 7654 	addw	r6, r4, #1876	; 0x754
 80041f4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80041f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041fa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80041fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004200:	4d6b      	ldr	r5, [pc, #428]	; (80043b0 <_GLOBAL__sub_I_REG_FIFO+0x1878>)
 8004202:	f504 67ee 	add.w	r7, r4, #1904	; 0x770
 8004206:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800420a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800420c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800420e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004212:	4d68      	ldr	r5, [pc, #416]	; (80043b4 <_GLOBAL__sub_I_REG_FIFO+0x187c>)
 8004214:	f204 768c 	addw	r6, r4, #1932	; 0x78c
 8004218:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800421c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800421e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004220:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004224:	4d64      	ldr	r5, [pc, #400]	; (80043b8 <_GLOBAL__sub_I_REG_FIFO+0x1880>)
 8004226:	f504 67f5 	add.w	r7, r4, #1960	; 0x7a8
 800422a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800422e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004230:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004232:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004236:	4d61      	ldr	r5, [pc, #388]	; (80043bc <_GLOBAL__sub_I_REG_FIFO+0x1884>)
 8004238:	f204 76c4 	addw	r6, r4, #1988	; 0x7c4
 800423c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004242:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004244:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004248:	4d5d      	ldr	r5, [pc, #372]	; (80043c0 <_GLOBAL__sub_I_REG_FIFO+0x1888>)
 800424a:	f504 67fc 	add.w	r7, r4, #2016	; 0x7e0
 800424e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004254:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004256:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800425a:	4d5a      	ldr	r5, [pc, #360]	; (80043c4 <_GLOBAL__sub_I_REG_FIFO+0x188c>)
 800425c:	f204 76fc 	addw	r6, r4, #2044	; 0x7fc
 8004260:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004266:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004268:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800426c:	4d56      	ldr	r5, [pc, #344]	; (80043c8 <_GLOBAL__sub_I_REG_FIFO+0x1890>)
 800426e:	f604 0718 	addw	r7, r4, #2072	; 0x818
 8004272:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004278:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800427a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800427e:	4d53      	ldr	r5, [pc, #332]	; (80043cc <_GLOBAL__sub_I_REG_FIFO+0x1894>)
 8004280:	f604 0634 	addw	r6, r4, #2100	; 0x834
 8004284:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800428a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800428c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004290:	4d4f      	ldr	r5, [pc, #316]	; (80043d0 <_GLOBAL__sub_I_REG_FIFO+0x1898>)
 8004292:	f504 6705 	add.w	r7, r4, #2128	; 0x850
 8004296:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800429a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800429c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800429e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80042a2:	4d4c      	ldr	r5, [pc, #304]	; (80043d4 <_GLOBAL__sub_I_REG_FIFO+0x189c>)
 80042a4:	f604 0c6c 	addw	ip, r4, #2156	; 0x86c
 80042a8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80042ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80042b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80042b6:	4d48      	ldr	r5, [pc, #288]	; (80043d8 <_GLOBAL__sub_I_REG_FIFO+0x18a0>)
 80042b8:	f604 0e88 	addw	lr, r4, #2184	; 0x888
 80042bc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80042c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042c2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80042c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80042ca:	f8df c128 	ldr.w	ip, [pc, #296]	; 80043f4 <_GLOBAL__sub_I_REG_FIFO+0x18bc>
 80042ce:	f604 08a4 	addw	r8, r4, #2212	; 0x8a4
 80042d2:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 80042d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80042da:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80042de:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80042e2:	f8df c114 	ldr.w	ip, [pc, #276]	; 80043f8 <_GLOBAL__sub_I_REG_FIFO+0x18c0>
 80042e6:	f504 6e0c 	add.w	lr, r4, #2240	; 0x8c0
 80042ea:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 80042ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80042f2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80042f6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80042fa:	f8df c100 	ldr.w	ip, [pc, #256]	; 80043fc <_GLOBAL__sub_I_REG_FIFO+0x18c4>
 80042fe:	f604 08dc 	addw	r8, r4, #2268	; 0x8dc
 8004302:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8004306:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800430a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800430e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8004312:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 8004400 <_GLOBAL__sub_I_REG_FIFO+0x18c8>
 8004316:	f604 0ef8 	addw	lr, r4, #2296	; 0x8f8
 800431a:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 800431e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004322:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8004326:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800432a:	4e2c      	ldr	r6, [pc, #176]	; (80043dc <_GLOBAL__sub_I_REG_FIFO+0x18a4>)
 800432c:	f604 1c14 	addw	ip, r4, #2324	; 0x914
 8004330:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8004334:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004336:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800433a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800433e:	4f28      	ldr	r7, [pc, #160]	; (80043e0 <_GLOBAL__sub_I_REG_FIFO+0x18a8>)
 8004340:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 8004344:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8004348:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800434a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800434c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004350:	4d24      	ldr	r5, [pc, #144]	; (80043e4 <_GLOBAL__sub_I_REG_FIFO+0x18ac>)
 8004352:	f604 144c 	addw	r4, r4, #2380	; 0x94c
 8004356:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800435a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800435c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800435e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004362:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004366:	b007      	add	sp, #28
 8004368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800436c:	20001488 	.word	0x20001488
 8004370:	200014f8 	.word	0x200014f8
 8004374:	200013e0 	.word	0x200013e0
 8004378:	20001354 	.word	0x20001354
 800437c:	20001370 	.word	0x20001370
 8004380:	200010b4 	.word	0x200010b4
 8004384:	2000100c 	.word	0x2000100c
 8004388:	20001194 	.word	0x20001194
 800438c:	20000cc4 	.word	0x20000cc4
 8004390:	200013c4 	.word	0x200013c4
 8004394:	20001098 	.word	0x20001098
 8004398:	20001418 	.word	0x20001418
 800439c:	20000e68 	.word	0x20000e68
 80043a0:	20001108 	.word	0x20001108
 80043a4:	20000e84 	.word	0x20000e84
 80043a8:	20001514 	.word	0x20001514
 80043ac:	20000ea0 	.word	0x20000ea0
 80043b0:	20000ebc 	.word	0x20000ebc
 80043b4:	20000ed8 	.word	0x20000ed8
 80043b8:	20000ef4 	.word	0x20000ef4
 80043bc:	20000f10 	.word	0x20000f10
 80043c0:	20000f2c 	.word	0x20000f2c
 80043c4:	20001610 	.word	0x20001610
 80043c8:	20000f48 	.word	0x20000f48
 80043cc:	20001530 	.word	0x20001530
 80043d0:	20001290 	.word	0x20001290
 80043d4:	2000107c 	.word	0x2000107c
 80043d8:	20000d88 	.word	0x20000d88
 80043dc:	20000d50 	.word	0x20000d50
 80043e0:	20000d6c 	.word	0x20000d6c
 80043e4:	2000138c 	.word	0x2000138c
 80043e8:	200010ec 	.word	0x200010ec
 80043ec:	200014dc 	.word	0x200014dc
 80043f0:	2000154c 	.word	0x2000154c
 80043f4:	20000ce0 	.word	0x20000ce0
 80043f8:	20000cfc 	.word	0x20000cfc
 80043fc:	20000d18 	.word	0x20000d18
 8004400:	20000d34 	.word	0x20000d34

08004404 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH>:
const uint16_t LORA_ADDRESS_BRANCH = 24 - LORA_ADDRESS_GROUP; 

Register Hendler[11] = {Register(0, 8, 0), Register(1, 1, 7), Register(1, 7, 0), Register(2, 8, 0),
                        Register(3, 8, 0), Register(4, 1, 7), Register(4, 7, 0), Register(5, 8, 0),
                        Register(6, 8, 0),
                        Register(7, 8, 0), Register(8, 8, 0)};
 8004404:	2300      	movs	r3, #0
bool Packet_System::set_command(uint8_t com) {
    return true;
}
bool Packet_System::set_data(uint8_t *data, uint8_t len) {
    return true;
}
 8004406:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800440a:	4ec7      	ldr	r6, [pc, #796]	; (8004728 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x324>)
 800440c:	b087      	sub	sp, #28
 800440e:	4619      	mov	r1, r3
 8004410:	4630      	mov	r0, r6
 8004412:	2208      	movs	r2, #8
 8004414:	f7fc fd4a 	bl	8000eac <_ZN8RegisterC1Ethh>
 8004418:	2201      	movs	r2, #1
 800441a:	f106 0b10 	add.w	fp, r6, #16
 800441e:	4611      	mov	r1, r2
 8004420:	f106 0008 	add.w	r0, r6, #8
 8004424:	2307      	movs	r3, #7
 8004426:	f7fc fd41 	bl	8000eac <_ZN8RegisterC1Ethh>
 800442a:	4658      	mov	r0, fp
 800442c:	2300      	movs	r3, #0
 800442e:	2207      	movs	r2, #7
 8004430:	2101      	movs	r1, #1
 8004432:	f7fc fd3b 	bl	8000eac <_ZN8RegisterC1Ethh>
 8004436:	f106 0a20 	add.w	sl, r6, #32
 800443a:	f106 0018 	add.w	r0, r6, #24
 800443e:	2300      	movs	r3, #0
 8004440:	2208      	movs	r2, #8
 8004442:	2102      	movs	r1, #2
 8004444:	f7fc fd32 	bl	8000eac <_ZN8RegisterC1Ethh>
 8004448:	4650      	mov	r0, sl
 800444a:	2300      	movs	r3, #0
 800444c:	2208      	movs	r2, #8
 800444e:	2103      	movs	r1, #3
 8004450:	f7fc fd2c 	bl	8000eac <_ZN8RegisterC1Ethh>
 8004454:	f106 0930 	add.w	r9, r6, #48	; 0x30
 8004458:	f106 0028 	add.w	r0, r6, #40	; 0x28
 800445c:	2307      	movs	r3, #7
 800445e:	2201      	movs	r2, #1
 8004460:	2104      	movs	r1, #4
 8004462:	f7fc fd23 	bl	8000eac <_ZN8RegisterC1Ethh>
 8004466:	4648      	mov	r0, r9
 8004468:	2300      	movs	r3, #0
 800446a:	2207      	movs	r2, #7
 800446c:	2104      	movs	r1, #4
 800446e:	f7fc fd1d 	bl	8000eac <_ZN8RegisterC1Ethh>
 8004472:	f106 0840 	add.w	r8, r6, #64	; 0x40
 8004476:	f106 0038 	add.w	r0, r6, #56	; 0x38
 800447a:	2300      	movs	r3, #0
 800447c:	2208      	movs	r2, #8
 800447e:	2105      	movs	r1, #5
 8004480:	f7fc fd14 	bl	8000eac <_ZN8RegisterC1Ethh>
 8004484:	4640      	mov	r0, r8
 8004486:	2300      	movs	r3, #0
 8004488:	2208      	movs	r2, #8
 800448a:	2106      	movs	r1, #6
 800448c:	f7fc fd0e 	bl	8000eac <_ZN8RegisterC1Ethh>
 8004490:	f106 0048 	add.w	r0, r6, #72	; 0x48
 8004494:	2300      	movs	r3, #0
 8004496:	2208      	movs	r2, #8
 8004498:	2107      	movs	r1, #7

Address_field field_dest_adr_group(&Hendler[0], 2, true),  // Destination Address group (адресс группы устройства назначения)
 800449a:	2400      	movs	r4, #0
                        Register(7, 8, 0), Register(8, 8, 0)};
 800449c:	f7fc fd06 	bl	8000eac <_ZN8RegisterC1Ethh>
 80044a0:	2208      	movs	r2, #8
Address_field field_dest_adr_group(&Hendler[0], 2, true),  // Destination Address group (адресс группы устройства назначения)
 80044a2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80044a6:	2577      	movs	r5, #119	; 0x77
                        Register(7, 8, 0), Register(8, 8, 0)};
 80044a8:	4611      	mov	r1, r2
 80044aa:	4623      	mov	r3, r4
 80044ac:	f106 0050 	add.w	r0, r6, #80	; 0x50
 80044b0:	f7fc fcfc 	bl	8000eac <_ZN8RegisterC1Ethh>
Address_field field_dest_adr_group(&Hendler[0], 2, true),  // Destination Address group (адресс группы устройства назначения)
 80044b4:	4631      	mov	r1, r6
 80044b6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80044ba:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80044be:	9500      	str	r5, [sp, #0]
 80044c0:	2301      	movs	r3, #1
 80044c2:	2202      	movs	r2, #2
 80044c4:	4899      	ldr	r0, [pc, #612]	; (800472c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x328>)
 80044c6:	f7fc fd45 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
              field_dest_adr_branch(&Hendler[2], 2, true), // Destination Address branch (адресс ветви устройства назначения)
 80044ca:	4659      	mov	r1, fp
 80044cc:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80044d0:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80044d4:	9500      	str	r5, [sp, #0]
 80044d6:	2301      	movs	r3, #1
 80044d8:	2202      	movs	r2, #2
 80044da:	4895      	ldr	r0, [pc, #596]	; (8004730 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x32c>)
 80044dc:	f7fc fd3a 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
              field_sour_adr_group(&Hendler[4], 2, true),  // Source Address group (адресс группы отправляющего устройства)
 80044e0:	4651      	mov	r1, sl
 80044e2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80044e6:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80044ea:	9500      	str	r5, [sp, #0]
 80044ec:	2301      	movs	r3, #1
 80044ee:	2202      	movs	r2, #2
 80044f0:	4890      	ldr	r0, [pc, #576]	; (8004734 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x330>)
 80044f2:	f7fc fd2f 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
              field_sour_adr_branch(&Hendler[6], 2, true), // Source Address branch (адресс ветви отправляющего устройства)
 80044f6:	4649      	mov	r1, r9
 80044f8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80044fc:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8004500:	9500      	str	r5, [sp, #0]
 8004502:	2301      	movs	r3, #1
 8004504:	2202      	movs	r2, #2
 8004506:	488c      	ldr	r0, [pc, #560]	; (8004738 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x334>)
 8004508:	f7fc fd24 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
              field_type(&Hendler[8], 1, true),   // Packet Type (тип пакетп)
 800450c:	2301      	movs	r3, #1
 800450e:	4641      	mov	r1, r8
 8004510:	461a      	mov	r2, r3
                                             &field_sour_adr_group, &field_sour_adr_branch, 
                                             &field_type, &field_number};


// Типы данных
Register register_PWM[2]   = {Register(0, 4, 0), Register(1, 8, 0)},
 8004512:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8004758 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x354>
              field_type(&Hendler[8], 1, true),   // Packet Type (тип пакетп)
 8004516:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800451a:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800451e:	9500      	str	r5, [sp, #0]
 8004520:	4886      	ldr	r0, [pc, #536]	; (800473c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x338>)
 8004522:	f7fc fd17 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
              field_number(&Hendler[9], 2, true); // Packet Number (номер пакета)
 8004526:	f106 0148 	add.w	r1, r6, #72	; 0x48
 800452a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800452e:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8004532:	9500      	str	r5, [sp, #0]
 8004534:	2301      	movs	r3, #1
 8004536:	2202      	movs	r2, #2
 8004538:	4881      	ldr	r0, [pc, #516]	; (8004740 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x33c>)
 800453a:	f7fc fd0b 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
Register register_PWM[2]   = {Register(0, 4, 0), Register(1, 8, 0)},
 800453e:	4623      	mov	r3, r4
 8004540:	4621      	mov	r1, r4
 8004542:	4640      	mov	r0, r8
 8004544:	2204      	movs	r2, #4
 8004546:	f7fc fcb1 	bl	8000eac <_ZN8RegisterC1Ethh>
         register_byte[1]  = {Register(0, 8, 0)},
         register_float[4] = {Register(0, 8, 0), Register(1, 8, 0), Register(2, 8, 0), Register(3, 8, 0)},
 800454a:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800475c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x358>
Register register_PWM[2]   = {Register(0, 4, 0), Register(1, 8, 0)},
 800454e:	4623      	mov	r3, r4
 8004550:	f108 0008 	add.w	r0, r8, #8
 8004554:	2208      	movs	r2, #8
 8004556:	2101      	movs	r1, #1
 8004558:	f7fc fca8 	bl	8000eac <_ZN8RegisterC1Ethh>
         register_byte[1]  = {Register(0, 8, 0)},
 800455c:	4623      	mov	r3, r4
 800455e:	4621      	mov	r1, r4
 8004560:	2208      	movs	r2, #8
 8004562:	4878      	ldr	r0, [pc, #480]	; (8004744 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x340>)
 8004564:	f7fc fca2 	bl	8000eac <_ZN8RegisterC1Ethh>
         register_float[4] = {Register(0, 8, 0), Register(1, 8, 0), Register(2, 8, 0), Register(3, 8, 0)},
 8004568:	4623      	mov	r3, r4
 800456a:	4621      	mov	r1, r4
 800456c:	4648      	mov	r0, r9
 800456e:	2208      	movs	r2, #8
 8004570:	f7fc fc9c 	bl	8000eac <_ZN8RegisterC1Ethh>
 8004574:	4623      	mov	r3, r4
 8004576:	f109 0008 	add.w	r0, r9, #8
 800457a:	2208      	movs	r2, #8
 800457c:	2101      	movs	r1, #1
         register_bit[8]   = {Register(0, 1, 0), Register(0, 1, 1), Register(0, 1, 2), Register(0, 1, 3),
                              Register(0, 1, 4), Register(0, 1, 5), Register(0, 1, 6), Register(0, 1, 7)};
 800457e:	4e72      	ldr	r6, [pc, #456]	; (8004748 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x344>)
         register_float[4] = {Register(0, 8, 0), Register(1, 8, 0), Register(2, 8, 0), Register(3, 8, 0)},
 8004580:	f7fc fc94 	bl	8000eac <_ZN8RegisterC1Ethh>
 8004584:	4623      	mov	r3, r4
 8004586:	f109 0010 	add.w	r0, r9, #16
 800458a:	2208      	movs	r2, #8
 800458c:	2102      	movs	r1, #2
 800458e:	f7fc fc8d 	bl	8000eac <_ZN8RegisterC1Ethh>
 8004592:	4623      	mov	r3, r4
 8004594:	f109 0018 	add.w	r0, r9, #24
 8004598:	2208      	movs	r2, #8
 800459a:	2103      	movs	r1, #3
 800459c:	f7fc fc86 	bl	8000eac <_ZN8RegisterC1Ethh>
                              Register(0, 1, 4), Register(0, 1, 5), Register(0, 1, 6), Register(0, 1, 7)};
 80045a0:	4623      	mov	r3, r4
 80045a2:	4621      	mov	r1, r4
 80045a4:	4630      	mov	r0, r6
 80045a6:	2201      	movs	r2, #1
 80045a8:	f7fc fc80 	bl	8000eac <_ZN8RegisterC1Ethh>
 80045ac:	2301      	movs	r3, #1
 80045ae:	4621      	mov	r1, r4
 80045b0:	461a      	mov	r2, r3
 80045b2:	f106 0008 	add.w	r0, r6, #8
 80045b6:	f7fc fc79 	bl	8000eac <_ZN8RegisterC1Ethh>
 80045ba:	4621      	mov	r1, r4
 80045bc:	f106 0010 	add.w	r0, r6, #16
 80045c0:	2302      	movs	r3, #2
 80045c2:	2201      	movs	r2, #1
 80045c4:	f7fc fc72 	bl	8000eac <_ZN8RegisterC1Ethh>
 80045c8:	4621      	mov	r1, r4
 80045ca:	f106 0018 	add.w	r0, r6, #24
 80045ce:	2303      	movs	r3, #3
 80045d0:	2201      	movs	r2, #1
 80045d2:	f7fc fc6b 	bl	8000eac <_ZN8RegisterC1Ethh>
 80045d6:	f106 0a28 	add.w	sl, r6, #40	; 0x28
 80045da:	4621      	mov	r1, r4
 80045dc:	f106 0020 	add.w	r0, r6, #32
 80045e0:	2304      	movs	r3, #4
 80045e2:	2201      	movs	r2, #1
 80045e4:	f7fc fc62 	bl	8000eac <_ZN8RegisterC1Ethh>
 80045e8:	f106 0b30 	add.w	fp, r6, #48	; 0x30
 80045ec:	4621      	mov	r1, r4
 80045ee:	4650      	mov	r0, sl
 80045f0:	2305      	movs	r3, #5
 80045f2:	2201      	movs	r2, #1
 80045f4:	f7fc fc5a 	bl	8000eac <_ZN8RegisterC1Ethh>
 80045f8:	4621      	mov	r1, r4
 80045fa:	4658      	mov	r0, fp
 80045fc:	2306      	movs	r3, #6
 80045fe:	2201      	movs	r2, #1
 8004600:	f7fc fc54 	bl	8000eac <_ZN8RegisterC1Ethh>
 8004604:	4621      	mov	r1, r4
 8004606:	f106 0038 	add.w	r0, r6, #56	; 0x38
 800460a:	2307      	movs	r3, #7
 800460c:	2201      	movs	r2, #1
 800460e:	f7fc fc4d 	bl	8000eac <_ZN8RegisterC1Ethh>

Address_field field_PWM(&register_PWM[0], 2, true),
 8004612:	4641      	mov	r1, r8
 8004614:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004618:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800461c:	9500      	str	r5, [sp, #0]
 800461e:	2301      	movs	r3, #1
 8004620:	2202      	movs	r2, #2
 8004622:	484a      	ldr	r0, [pc, #296]	; (800474c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x348>)
 8004624:	f7fc fc96 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
              field_byte(&register_byte[0]),
              field_float(&register_float[0], 4, false),
              field_bit[8] = {Address_field(&register_bit[0]), Address_field(&register_bit[1]), 
                              Address_field(&register_bit[2]), Address_field(&register_bit[3]), 
                              Address_field(&register_bit[4]), Address_field(&register_bit[5]), 
                              Address_field(&register_bit[6]), Address_field(&register_bit[7])};
 8004628:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8004760 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x35c>
              field_byte(&register_byte[0]),
 800462c:	4623      	mov	r3, r4
 800462e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004632:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8004636:	9500      	str	r5, [sp, #0]
 8004638:	4942      	ldr	r1, [pc, #264]	; (8004744 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x340>)
 800463a:	2201      	movs	r2, #1
 800463c:	4844      	ldr	r0, [pc, #272]	; (8004750 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x34c>)
 800463e:	f7fc fc89 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
              field_float(&register_float[0], 4, false),
 8004642:	4649      	mov	r1, r9
 8004644:	4623      	mov	r3, r4
 8004646:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800464a:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800464e:	9500      	str	r5, [sp, #0]
 8004650:	2204      	movs	r2, #4
 8004652:	4840      	ldr	r0, [pc, #256]	; (8004754 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x350>)
 8004654:	f7fc fc7e 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
                              Address_field(&register_bit[6]), Address_field(&register_bit[7])};
 8004658:	4631      	mov	r1, r6
 800465a:	4623      	mov	r3, r4
 800465c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004660:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8004664:	9500      	str	r5, [sp, #0]
 8004666:	4640      	mov	r0, r8
 8004668:	2201      	movs	r2, #1
 800466a:	f7fc fc73 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 800466e:	f106 0108 	add.w	r1, r6, #8
 8004672:	4623      	mov	r3, r4
 8004674:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004678:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800467c:	9500      	str	r5, [sp, #0]
 800467e:	f108 001c 	add.w	r0, r8, #28
 8004682:	2201      	movs	r2, #1
 8004684:	f7fc fc66 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 8004688:	f106 0110 	add.w	r1, r6, #16
 800468c:	4623      	mov	r3, r4
 800468e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004692:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8004696:	9500      	str	r5, [sp, #0]
 8004698:	f108 0038 	add.w	r0, r8, #56	; 0x38
 800469c:	2201      	movs	r2, #1
 800469e:	f7fc fc59 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 80046a2:	f106 0118 	add.w	r1, r6, #24
 80046a6:	4623      	mov	r3, r4
 80046a8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80046ac:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80046b0:	9500      	str	r5, [sp, #0]
 80046b2:	f108 0054 	add.w	r0, r8, #84	; 0x54
 80046b6:	2201      	movs	r2, #1
 80046b8:	f7fc fc4c 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 80046bc:	f106 0120 	add.w	r1, r6, #32
 80046c0:	4623      	mov	r3, r4
 80046c2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80046c6:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80046ca:	9500      	str	r5, [sp, #0]
 80046cc:	f108 0070 	add.w	r0, r8, #112	; 0x70
 80046d0:	2201      	movs	r2, #1
 80046d2:	f7fc fc3f 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 80046d6:	4651      	mov	r1, sl
 80046d8:	4623      	mov	r3, r4
 80046da:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80046de:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80046e2:	9500      	str	r5, [sp, #0]
 80046e4:	f108 008c 	add.w	r0, r8, #140	; 0x8c
 80046e8:	2201      	movs	r2, #1
 80046ea:	f7fc fc33 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 80046ee:	4659      	mov	r1, fp
 80046f0:	4623      	mov	r3, r4
 80046f2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80046f6:	9702      	str	r7, [sp, #8]
 80046f8:	e9cd 5400 	strd	r5, r4, [sp]
 80046fc:	f108 00a8 	add.w	r0, r8, #168	; 0xa8
 8004700:	2201      	movs	r2, #1
 8004702:	f7fc fc27 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 8004706:	f106 0138 	add.w	r1, r6, #56	; 0x38
 800470a:	9500      	str	r5, [sp, #0]
 800470c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004710:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8004714:	4623      	mov	r3, r4
 8004716:	f108 00c4 	add.w	r0, r8, #196	; 0xc4
 800471a:	2201      	movs	r2, #1
 800471c:	f7fc fc1a 	bl	8000f54 <_ZN13Address_fieldC1EP8RegisterhbcmmPmm>
 8004720:	b007      	add	sp, #28
 8004722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004726:	bf00      	nop
 8004728:	20001924 	.word	0x20001924
 800472c:	20001ab0 	.word	0x20001ab0
 8004730:	20001a94 	.word	0x20001a94
 8004734:	20001b20 	.word	0x20001b20
 8004738:	20001b04 	.word	0x20001b04
 800473c:	20001b3c 	.word	0x20001b3c
 8004740:	20001ae8 	.word	0x20001ae8
 8004744:	20001ba8 	.word	0x20001ba8
 8004748:	20001b68 	.word	0x20001b68
 800474c:	2000197c 	.word	0x2000197c
 8004750:	20001a78 	.word	0x20001a78
 8004754:	20001acc 	.word	0x20001acc
 8004758:	20001b58 	.word	0x20001b58
 800475c:	20001bb0 	.word	0x20001bb0
 8004760:	20001998 	.word	0x20001998

08004764 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8004764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004768:	2a0a      	cmp	r2, #10
 800476a:	4617      	mov	r7, r2
 800476c:	b086      	sub	sp, #24
 800476e:	bf28      	it	cs
 8004770:	270a      	movcs	r7, #10
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 80b9 	beq.w	80048ea <bme280_set_regs+0x186>
 8004778:	685c      	ldr	r4, [r3, #4]
 800477a:	2c00      	cmp	r4, #0
 800477c:	f000 80b5 	beq.w	80048ea <bme280_set_regs+0x186>
 8004780:	689e      	ldr	r6, [r3, #8]
 8004782:	2e00      	cmp	r6, #0
 8004784:	f000 80b1 	beq.w	80048ea <bme280_set_regs+0x186>
 8004788:	68dc      	ldr	r4, [r3, #12]
 800478a:	2c00      	cmp	r4, #0
 800478c:	f000 80ad 	beq.w	80048ea <bme280_set_regs+0x186>
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8004790:	2800      	cmp	r0, #0
 8004792:	f000 80aa 	beq.w	80048ea <bme280_set_regs+0x186>
 8004796:	2900      	cmp	r1, #0
 8004798:	f000 80a7 	beq.w	80048ea <bme280_set_regs+0x186>
		if (len != 0) {
 800479c:	2a00      	cmp	r2, #0
 800479e:	f000 80a7 	beq.w	80048f0 <bme280_set_regs+0x18c>
			if (dev->intf != BME280_I2C_INTF) {
 80047a2:	789c      	ldrb	r4, [r3, #2]
			temp_buff[0] = reg_data[0];
 80047a4:	780d      	ldrb	r5, [r1, #0]
			if (dev->intf != BME280_I2C_INTF) {
 80047a6:	2c01      	cmp	r4, #1
			temp_buff[0] = reg_data[0];
 80047a8:	f88d 5004 	strb.w	r5, [sp, #4]
			if (dev->intf != BME280_I2C_INTF) {
 80047ac:	d06e      	beq.n	800488c <bme280_set_regs+0x128>
 80047ae:	4245      	negs	r5, r0
 80047b0:	f005 0503 	and.w	r5, r5, #3
 80047b4:	1e7c      	subs	r4, r7, #1
 80047b6:	1cee      	adds	r6, r5, #3
 80047b8:	b2e4      	uxtb	r4, r4
 80047ba:	42b4      	cmp	r4, r6
 80047bc:	fa5f f887 	uxtb.w	r8, r7
 80047c0:	f0c0 8091 	bcc.w	80048e6 <bme280_set_regs+0x182>
 80047c4:	2d00      	cmp	r5, #0
 80047c6:	f000 8086 	beq.w	80048d6 <bme280_set_regs+0x172>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80047ca:	7804      	ldrb	r4, [r0, #0]
 80047cc:	2d01      	cmp	r5, #1
 80047ce:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80047d2:	7004      	strb	r4, [r0, #0]
 80047d4:	f000 8085 	beq.w	80048e2 <bme280_set_regs+0x17e>
 80047d8:	7844      	ldrb	r4, [r0, #1]
 80047da:	2d03      	cmp	r5, #3
 80047dc:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80047e0:	7044      	strb	r4, [r0, #1]
 80047e2:	d17b      	bne.n	80048dc <bme280_set_regs+0x178>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80047e4:	46ae      	mov	lr, r5
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80047e6:	7884      	ldrb	r4, [r0, #2]
 80047e8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80047ec:	7084      	strb	r4, [r0, #2]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80047ee:	2600      	movs	r6, #0
 80047f0:	eba8 0805 	sub.w	r8, r8, r5
 80047f4:	fa5f f888 	uxtb.w	r8, r8
 80047f8:	4405      	add	r5, r0
 80047fa:	ea4f 0a98 	mov.w	sl, r8, lsr #2
 80047fe:	f1a5 0c04 	sub.w	ip, r5, #4
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8004802:	f85c 4f04 	ldr.w	r4, [ip, #4]!
 8004806:	3601      	adds	r6, #1
 8004808:	fa5f f986 	uxtb.w	r9, r6
 800480c:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 8004810:	45ca      	cmp	sl, r9
 8004812:	f845 4b04 	str.w	r4, [r5], #4
 8004816:	d8f4      	bhi.n	8004802 <bme280_set_regs+0x9e>
 8004818:	f008 05fc 	and.w	r5, r8, #252	; 0xfc
 800481c:	eb0e 0405 	add.w	r4, lr, r5
 8004820:	45a8      	cmp	r8, r5
 8004822:	b2e4      	uxtb	r4, r4
 8004824:	d031      	beq.n	800488a <bme280_set_regs+0x126>
 8004826:	5d06      	ldrb	r6, [r0, r4]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8004828:	1c65      	adds	r5, r4, #1
 800482a:	b2ed      	uxtb	r5, r5
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800482c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8004830:	42bd      	cmp	r5, r7
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8004832:	5506      	strb	r6, [r0, r4]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8004834:	d229      	bcs.n	800488a <bme280_set_regs+0x126>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8004836:	f810 c005 	ldrb.w	ip, [r0, r5]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800483a:	1ca6      	adds	r6, r4, #2
 800483c:	b2f6      	uxtb	r6, r6
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800483e:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8004842:	42b7      	cmp	r7, r6
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8004844:	f800 c005 	strb.w	ip, [r0, r5]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8004848:	d91f      	bls.n	800488a <bme280_set_regs+0x126>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800484a:	f810 c006 	ldrb.w	ip, [r0, r6]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800484e:	1ce5      	adds	r5, r4, #3
 8004850:	b2ed      	uxtb	r5, r5
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8004852:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8004856:	42af      	cmp	r7, r5
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8004858:	f800 c006 	strb.w	ip, [r0, r6]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800485c:	d915      	bls.n	800488a <bme280_set_regs+0x126>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800485e:	f810 c005 	ldrb.w	ip, [r0, r5]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8004862:	1d26      	adds	r6, r4, #4
 8004864:	b2f6      	uxtb	r6, r6
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8004866:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800486a:	42b7      	cmp	r7, r6
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800486c:	f800 c005 	strb.w	ip, [r0, r5]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8004870:	d90b      	bls.n	800488a <bme280_set_regs+0x126>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8004872:	5d85      	ldrb	r5, [r0, r6]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8004874:	3405      	adds	r4, #5
 8004876:	b2e4      	uxtb	r4, r4
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8004878:	f005 057f 	and.w	r5, r5, #127	; 0x7f
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800487c:	42a7      	cmp	r7, r4
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800487e:	5585      	strb	r5, [r0, r6]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8004880:	d903      	bls.n	800488a <bme280_set_regs+0x126>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8004882:	5d05      	ldrb	r5, [r0, r4]
 8004884:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8004888:	5505      	strb	r5, [r0, r4]
 800488a:	689e      	ldr	r6, [r3, #8]
			if (len > 1) {
 800488c:	2a01      	cmp	r2, #1
 800488e:	d01f      	beq.n	80048d0 <bme280_set_regs+0x16c>
 8004890:	aa01      	add	r2, sp, #4
 8004892:	4615      	mov	r5, r2
 8004894:	4684      	mov	ip, r0
 8004896:	2401      	movs	r4, #1
 8004898:	3401      	adds	r4, #1
		temp_buff[(index * 2) - 1] = reg_addr[index];
 800489a:	f81c 9f01 	ldrb.w	r9, [ip, #1]!
		temp_buff[index * 2] = reg_data[index];
 800489e:	f811 8f01 	ldrb.w	r8, [r1, #1]!
	for (index = 1; index < len; index++) {
 80048a2:	fa5f fe84 	uxtb.w	lr, r4
 80048a6:	4577      	cmp	r7, lr
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80048a8:	f885 9001 	strb.w	r9, [r5, #1]
		temp_buff[index * 2] = reg_data[index];
 80048ac:	f805 8f02 	strb.w	r8, [r5, #2]!
	for (index = 1; index < len; index++) {
 80048b0:	d8f2      	bhi.n	8004898 <bme280_set_regs+0x134>
				temp_len = ((len * 2) - 1);
 80048b2:	007f      	lsls	r7, r7, #1
 80048b4:	3f01      	subs	r7, #1
 80048b6:	b2bf      	uxth	r7, r7
 80048b8:	461c      	mov	r4, r3
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80048ba:	7801      	ldrb	r1, [r0, #0]
 80048bc:	463b      	mov	r3, r7
 80048be:	7860      	ldrb	r0, [r4, #1]
 80048c0:	47b0      	blx	r6
				rslt = BME280_E_COMM_FAIL;
 80048c2:	2800      	cmp	r0, #0
 80048c4:	bf18      	it	ne
 80048c6:	f06f 0003 	mvnne.w	r0, #3
}
 80048ca:	b006      	add	sp, #24
 80048cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				temp_len = len;
 80048d0:	4617      	mov	r7, r2
 80048d2:	aa01      	add	r2, sp, #4
 80048d4:	e7f0      	b.n	80048b8 <bme280_set_regs+0x154>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80048d6:	f04f 0e00 	mov.w	lr, #0
 80048da:	e788      	b.n	80047ee <bme280_set_regs+0x8a>
 80048dc:	f04f 0e02 	mov.w	lr, #2
 80048e0:	e785      	b.n	80047ee <bme280_set_regs+0x8a>
 80048e2:	46ae      	mov	lr, r5
 80048e4:	e783      	b.n	80047ee <bme280_set_regs+0x8a>
 80048e6:	2400      	movs	r4, #0
 80048e8:	e79d      	b.n	8004826 <bme280_set_regs+0xc2>
		rslt = BME280_E_NULL_PTR;
 80048ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048ee:	e7ec      	b.n	80048ca <bme280_set_regs+0x166>
			rslt = BME280_E_INVALID_LEN;
 80048f0:	f06f 0002 	mvn.w	r0, #2
 80048f4:	e7e9      	b.n	80048ca <bme280_set_regs+0x166>
 80048f6:	bf00      	nop

080048f8 <put_device_to_sleep>:
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80048f8:	2800      	cmp	r0, #0
 80048fa:	f000 80ba 	beq.w	8004a72 <put_device_to_sleep+0x17a>
{
 80048fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004902:	6845      	ldr	r5, [r0, #4]
{
 8004904:	b089      	sub	sp, #36	; 0x24
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004906:	2d00      	cmp	r5, #0
 8004908:	f000 808b 	beq.w	8004a22 <put_device_to_sleep+0x12a>
 800490c:	6883      	ldr	r3, [r0, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 8087 	beq.w	8004a22 <put_device_to_sleep+0x12a>
 8004914:	68c3      	ldr	r3, [r0, #12]
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 8083 	beq.w	8004a22 <put_device_to_sleep+0x12a>
 800491c:	4604      	mov	r4, r0
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800491e:	2304      	movs	r3, #4
 8004920:	aa02      	add	r2, sp, #8
 8004922:	21f2      	movs	r1, #242	; 0xf2
 8004924:	7840      	ldrb	r0, [r0, #1]
 8004926:	47a8      	blx	r5
		if (rslt != BME280_OK)
 8004928:	2800      	cmp	r0, #0
 800492a:	d17f      	bne.n	8004a2c <put_device_to_sleep+0x134>
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 800492c:	6863      	ldr	r3, [r4, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d077      	beq.n	8004a22 <put_device_to_sleep+0x12a>
 8004932:	68a7      	ldr	r7, [r4, #8]
 8004934:	2f00      	cmp	r7, #0
 8004936:	d074      	beq.n	8004a22 <put_device_to_sleep+0x12a>
 8004938:	68e3      	ldr	r3, [r4, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d071      	beq.n	8004a22 <put_device_to_sleep+0x12a>
			temp_buff[0] = reg_data[0];
 800493e:	22b6      	movs	r2, #182	; 0xb6
			if (dev->intf != BME280_I2C_INTF) {
 8004940:	78a3      	ldrb	r3, [r4, #2]
			temp_buff[0] = reg_data[0];
 8004942:	ad08      	add	r5, sp, #32
	uint8_t reg_addr = BME280_RESET_ADDR;
 8004944:	2b01      	cmp	r3, #1
			temp_buff[0] = reg_data[0];
 8004946:	f805 2d14 	strb.w	r2, [r5, #-20]!
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 800494a:	f04f 0301 	mov.w	r3, #1
 800494e:	462a      	mov	r2, r5
 8004950:	bf14      	ite	ne
 8004952:	2160      	movne	r1, #96	; 0x60
 8004954:	21e0      	moveq	r1, #224	; 0xe0
 8004956:	7860      	ldrb	r0, [r4, #1]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8004958:	f89d 6008 	ldrb.w	r6, [sp, #8]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 800495c:	f89d 900a 	ldrb.w	r9, [sp, #10]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8004960:	f89d 800b 	ldrb.w	r8, [sp, #11]
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8004964:	47b8      	blx	r7
		dev->delay_ms(2);
 8004966:	68e3      	ldr	r3, [r4, #12]
			if (rslt != BME280_OK)
 8004968:	2800      	cmp	r0, #0
 800496a:	d17d      	bne.n	8004a68 <put_device_to_sleep+0x170>
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800496c:	27f2      	movs	r7, #242	; 0xf2
		dev->delay_ms(2);
 800496e:	2002      	movs	r0, #2
 8004970:	4798      	blx	r3
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8004972:	f006 0307 	and.w	r3, r6, #7
	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8004976:	a908      	add	r1, sp, #32
 8004978:	f801 3d1a 	strb.w	r3, [r1, #-26]!
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800497c:	2201      	movs	r2, #1
 800497e:	4623      	mov	r3, r4
 8004980:	4628      	mov	r0, r5
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8004982:	f88d 700c 	strb.w	r7, [sp, #12]
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8004986:	f7ff feed 	bl	8004764 <bme280_set_regs>
	if (rslt == BME280_OK) {
 800498a:	2800      	cmp	r0, #0
 800498c:	d051      	beq.n	8004a32 <put_device_to_sleep+0x13a>
 800498e:	6866      	ldr	r6, [r4, #4]
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8004990:	21f4      	movs	r1, #244	; 0xf4
 8004992:	f88d 1007 	strb.w	r1, [sp, #7]
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004996:	2e00      	cmp	r6, #0
 8004998:	d043      	beq.n	8004a22 <put_device_to_sleep+0x12a>
 800499a:	68a3      	ldr	r3, [r4, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d040      	beq.n	8004a22 <put_device_to_sleep+0x12a>
 80049a0:	68e3      	ldr	r3, [r4, #12]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d03d      	beq.n	8004a22 <put_device_to_sleep+0x12a>
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80049a6:	2301      	movs	r3, #1
 80049a8:	462a      	mov	r2, r5
 80049aa:	7860      	ldrb	r0, [r4, #1]
 80049ac:	47b0      	blx	r6
		if (rslt != BME280_OK)
 80049ae:	2800      	cmp	r0, #0
 80049b0:	d13c      	bne.n	8004a2c <put_device_to_sleep+0x134>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80049b2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80049b6:	f009 021c 	and.w	r2, r9, #28
 80049ba:	f003 0303 	and.w	r3, r3, #3
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 80049be:	4313      	orrs	r3, r2
 80049c0:	f009 09e0 	and.w	r9, r9, #224	; 0xe0
 80049c4:	ea43 0909 	orr.w	r9, r3, r9
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80049c8:	f10d 0007 	add.w	r0, sp, #7
 80049cc:	4623      	mov	r3, r4
 80049ce:	2201      	movs	r2, #1
 80049d0:	4629      	mov	r1, r5
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 80049d2:	f88d 900c 	strb.w	r9, [sp, #12]
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80049d6:	f7ff fec5 	bl	8004764 <bme280_set_regs>
	if (rslt == BME280_OK)
 80049da:	bb20      	cbnz	r0, 8004a26 <put_device_to_sleep+0x12e>
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 80049dc:	21f5      	movs	r1, #245	; 0xf5
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80049de:	6866      	ldr	r6, [r4, #4]
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 80049e0:	f88d 1007 	strb.w	r1, [sp, #7]
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80049e4:	b1ee      	cbz	r6, 8004a22 <put_device_to_sleep+0x12a>
 80049e6:	68a3      	ldr	r3, [r4, #8]
 80049e8:	b1db      	cbz	r3, 8004a22 <put_device_to_sleep+0x12a>
 80049ea:	68e3      	ldr	r3, [r4, #12]
 80049ec:	b1cb      	cbz	r3, 8004a22 <put_device_to_sleep+0x12a>
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80049ee:	2301      	movs	r3, #1
 80049f0:	462a      	mov	r2, r5
 80049f2:	7860      	ldrb	r0, [r4, #1]
 80049f4:	47b0      	blx	r6
		if (rslt != BME280_OK)
 80049f6:	b9c8      	cbnz	r0, 8004a2c <put_device_to_sleep+0x134>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80049f8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80049fc:	f008 031c 	and.w	r3, r8, #28
 8004a00:	f002 0203 	and.w	r2, r2, #3
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8004a04:	431a      	orrs	r2, r3
 8004a06:	f008 08e0 	and.w	r8, r8, #224	; 0xe0
 8004a0a:	ea42 0808 	orr.w	r8, r2, r8
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8004a0e:	4623      	mov	r3, r4
 8004a10:	4629      	mov	r1, r5
 8004a12:	f10d 0007 	add.w	r0, sp, #7
 8004a16:	2201      	movs	r2, #1
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8004a18:	f88d 800c 	strb.w	r8, [sp, #12]
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8004a1c:	f7ff fea2 	bl	8004764 <bme280_set_regs>
 8004a20:	e001      	b.n	8004a26 <put_device_to_sleep+0x12e>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8004a22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004a26:	b009      	add	sp, #36	; 0x24
 8004a28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			rslt = BME280_E_COMM_FAIL;
 8004a2c:	f06f 0003 	mvn.w	r0, #3
	return rslt;
 8004a30:	e7f9      	b.n	8004a26 <put_device_to_sleep+0x12e>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8004a32:	21f4      	movs	r1, #244	; 0xf4
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004a34:	6866      	ldr	r6, [r4, #4]
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8004a36:	f88d 100c 	strb.w	r1, [sp, #12]
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004a3a:	2e00      	cmp	r6, #0
 8004a3c:	d0a8      	beq.n	8004990 <put_device_to_sleep+0x98>
 8004a3e:	68a3      	ldr	r3, [r4, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0a5      	beq.n	8004990 <put_device_to_sleep+0x98>
 8004a44:	68e3      	ldr	r3, [r4, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0a2      	beq.n	8004990 <put_device_to_sleep+0x98>
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8004a4a:	f10d 0207 	add.w	r2, sp, #7
 8004a4e:	2301      	movs	r3, #1
 8004a50:	7860      	ldrb	r0, [r4, #1]
 8004a52:	47b0      	blx	r6
		if (rslt != BME280_OK)
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d19a      	bne.n	800498e <put_device_to_sleep+0x96>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8004a58:	f10d 0107 	add.w	r1, sp, #7
 8004a5c:	4623      	mov	r3, r4
 8004a5e:	2201      	movs	r2, #1
 8004a60:	4628      	mov	r0, r5
 8004a62:	f7ff fe7f 	bl	8004764 <bme280_set_regs>
 8004a66:	e792      	b.n	800498e <put_device_to_sleep+0x96>
		dev->delay_ms(2);
 8004a68:	2002      	movs	r0, #2
 8004a6a:	4798      	blx	r3
				rslt = BME280_E_COMM_FAIL;
 8004a6c:	f06f 0003 	mvn.w	r0, #3
 8004a70:	e7d9      	b.n	8004a26 <put_device_to_sleep+0x12e>
		rslt = BME280_E_NULL_PTR;
 8004a72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004a76:	4770      	bx	lr

08004a78 <bme280_init>:
	uint8_t chip_id = 0;
 8004a78:	2300      	movs	r3, #0
{
 8004a7a:	b570      	push	{r4, r5, r6, lr}
 8004a7c:	b088      	sub	sp, #32
	uint8_t chip_id = 0;
 8004a7e:	f88d 3002 	strb.w	r3, [sp, #2]
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004a82:	2800      	cmp	r0, #0
 8004a84:	f000 80ed 	beq.w	8004c62 <bme280_init+0x1ea>
 8004a88:	6846      	ldr	r6, [r0, #4]
 8004a8a:	2e00      	cmp	r6, #0
 8004a8c:	f000 80e9 	beq.w	8004c62 <bme280_init+0x1ea>
 8004a90:	6883      	ldr	r3, [r0, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 80e5 	beq.w	8004c62 <bme280_init+0x1ea>
 8004a98:	68c3      	ldr	r3, [r0, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 80e1 	beq.w	8004c62 <bme280_init+0x1ea>
 8004aa0:	4604      	mov	r4, r0
 8004aa2:	2505      	movs	r5, #5
 8004aa4:	b176      	cbz	r6, 8004ac4 <bme280_init+0x4c>
 8004aa6:	68a2      	ldr	r2, [r4, #8]
 8004aa8:	b162      	cbz	r2, 8004ac4 <bme280_init+0x4c>
 8004aaa:	b15b      	cbz	r3, 8004ac4 <bme280_init+0x4c>
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8004aac:	2301      	movs	r3, #1
 8004aae:	f10d 0202 	add.w	r2, sp, #2
 8004ab2:	21d0      	movs	r1, #208	; 0xd0
 8004ab4:	7860      	ldrb	r0, [r4, #1]
 8004ab6:	47b0      	blx	r6
		if (rslt != BME280_OK)
 8004ab8:	b918      	cbnz	r0, 8004ac2 <bme280_init+0x4a>
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8004aba:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8004abe:	2b60      	cmp	r3, #96	; 0x60
 8004ac0:	d00e      	beq.n	8004ae0 <bme280_init+0x68>
 8004ac2:	68e3      	ldr	r3, [r4, #12]
			dev->delay_ms(1);
 8004ac4:	2001      	movs	r0, #1
 8004ac6:	4798      	blx	r3
 8004ac8:	1e6b      	subs	r3, r5, #1
		while (try_count) {
 8004aca:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
 8004ace:	d002      	beq.n	8004ad6 <bme280_init+0x5e>
 8004ad0:	6866      	ldr	r6, [r4, #4]
 8004ad2:	68e3      	ldr	r3, [r4, #12]
 8004ad4:	e7e6      	b.n	8004aa4 <bme280_init+0x2c>
			rslt = BME280_E_DEV_NOT_FOUND;
 8004ad6:	f06f 0501 	mvn.w	r5, #1
}
 8004ada:	4628      	mov	r0, r5
 8004adc:	b008      	add	sp, #32
 8004ade:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t reg_addr = BME280_RESET_ADDR;
 8004ae0:	20e0      	movs	r0, #224	; 0xe0
	uint8_t soft_rst_cmd = 0xB6;
 8004ae2:	21b6      	movs	r1, #182	; 0xb6
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004ae4:	6862      	ldr	r2, [r4, #4]
				dev->chip_id = chip_id;
 8004ae6:	7023      	strb	r3, [r4, #0]
	uint8_t reg_addr = BME280_RESET_ADDR;
 8004ae8:	f88d 0003 	strb.w	r0, [sp, #3]
	uint8_t soft_rst_cmd = 0xB6;
 8004aec:	f88d 1004 	strb.w	r1, [sp, #4]
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004af0:	2a00      	cmp	r2, #0
 8004af2:	f000 80b6 	beq.w	8004c62 <bme280_init+0x1ea>
 8004af6:	68a3      	ldr	r3, [r4, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 80b2 	beq.w	8004c62 <bme280_init+0x1ea>
 8004afe:	68e3      	ldr	r3, [r4, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 80ae 	beq.w	8004c62 <bme280_init+0x1ea>
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8004b06:	4623      	mov	r3, r4
 8004b08:	a901      	add	r1, sp, #4
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f10d 0003 	add.w	r0, sp, #3
 8004b10:	f7ff fe28 	bl	8004764 <bme280_set_regs>
 8004b14:	4606      	mov	r6, r0
		dev->delay_ms(2);
 8004b16:	68e3      	ldr	r3, [r4, #12]
 8004b18:	2002      	movs	r0, #2
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8004b1a:	4635      	mov	r5, r6
		dev->delay_ms(2);
 8004b1c:	4798      	blx	r3
				if (rslt == BME280_OK) {
 8004b1e:	2e00      	cmp	r6, #0
 8004b20:	d1db      	bne.n	8004ada <bme280_init+0x62>
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004b22:	6865      	ldr	r5, [r4, #4]
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8004b24:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8004b28:	e9cd 6603 	strd	r6, r6, [sp, #12]
 8004b2c:	e9cd 6605 	strd	r6, r6, [sp, #20]
 8004b30:	f8ad 601c 	strh.w	r6, [sp, #28]
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004b34:	2d00      	cmp	r5, #0
 8004b36:	f000 8094 	beq.w	8004c62 <bme280_init+0x1ea>
 8004b3a:	68a3      	ldr	r3, [r4, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 8090 	beq.w	8004c62 <bme280_init+0x1ea>
 8004b42:	68e3      	ldr	r3, [r4, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 808c 	beq.w	8004c62 <bme280_init+0x1ea>
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8004b4a:	231a      	movs	r3, #26
 8004b4c:	aa01      	add	r2, sp, #4
 8004b4e:	2188      	movs	r1, #136	; 0x88
 8004b50:	7860      	ldrb	r0, [r4, #1]
 8004b52:	47a8      	blx	r5
		if (rslt != BME280_OK)
 8004b54:	2800      	cmp	r0, #0
 8004b56:	f040 8087 	bne.w	8004c68 <bme280_init+0x1f0>
	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004b5a:	f89d 0005 	ldrb.w	r0, [sp, #5]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8004b5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004b62:	f89d 1004 	ldrb.w	r1, [sp, #4]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8004b66:	f89d 2006 	ldrb.w	r2, [sp, #6]
	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004b6a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8004b6e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8004b72:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8004b76:	f89d 3008 	ldrb.w	r3, [sp, #8]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8004b7a:	f89d 500b 	ldrb.w	r5, [sp, #11]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8004b7e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8004b82:	f89d 000a 	ldrb.w	r0, [sp, #10]
	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004b86:	8221      	strh	r1, [r4, #16]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8004b88:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8004b8c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004b90:	f89d 500d 	ldrb.w	r5, [sp, #13]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8004b94:	8262      	strh	r2, [r4, #18]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8004b96:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8004b9a:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8004b9e:	f89d 500f 	ldrb.w	r5, [sp, #15]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8004ba2:	82a3      	strh	r3, [r4, #20]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8004ba4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8004ba8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8004bac:	f89d 5011 	ldrb.w	r5, [sp, #17]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8004bb0:	82e0      	strh	r0, [r4, #22]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8004bb2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8004bb6:	f89d 0012 	ldrb.w	r0, [sp, #18]
 8004bba:	f89d 5013 	ldrb.w	r5, [sp, #19]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8004bbe:	8321      	strh	r1, [r4, #24]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8004bc0:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8004bc4:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8004bc8:	f89d 5015 	ldrb.w	r5, [sp, #21]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8004bcc:	8362      	strh	r2, [r4, #26]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8004bce:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8004bd2:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8004bd6:	f89d 5017 	ldrb.w	r5, [sp, #23]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8004bda:	83a3      	strh	r3, [r4, #28]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8004bdc:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8004be0:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004be4:	f89d 5019 	ldrb.w	r5, [sp, #25]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8004be8:	8421      	strh	r1, [r4, #32]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8004bea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8004bee:	8462      	strh	r2, [r4, #34]	; 0x22
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8004bf0:	83e0      	strh	r0, [r4, #30]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8004bf2:	84a3      	strh	r3, [r4, #36]	; 0x24
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8004bf4:	f89d 101b 	ldrb.w	r1, [sp, #27]
 8004bf8:	f89d 301a 	ldrb.w	r3, [sp, #26]
	calib_data->dig_H1 = reg_data[25];
 8004bfc:	f89d 201d 	ldrb.w	r2, [sp, #29]
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004c00:	6865      	ldr	r5, [r4, #4]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8004c02:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004c06:	84e3      	strh	r3, [r4, #38]	; 0x26
	calib_data->dig_H1 = reg_data[25];
 8004c08:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004c0c:	b34d      	cbz	r5, 8004c62 <bme280_init+0x1ea>
 8004c0e:	68a3      	ldr	r3, [r4, #8]
 8004c10:	b33b      	cbz	r3, 8004c62 <bme280_init+0x1ea>
 8004c12:	68e3      	ldr	r3, [r4, #12]
 8004c14:	b32b      	cbz	r3, 8004c62 <bme280_init+0x1ea>
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8004c16:	aa01      	add	r2, sp, #4
 8004c18:	2307      	movs	r3, #7
 8004c1a:	21e1      	movs	r1, #225	; 0xe1
 8004c1c:	7860      	ldrb	r0, [r4, #1]
 8004c1e:	47a8      	blx	r5
		if (rslt != BME280_OK)
 8004c20:	4605      	mov	r5, r0
 8004c22:	bb08      	cbnz	r0, 8004c68 <bme280_init+0x1f0>
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8004c24:	f89d 3008 	ldrb.w	r3, [sp, #8]
	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8004c28:	f99d 0007 	ldrsb.w	r0, [sp, #7]
	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8004c2c:	f99d 2009 	ldrsb.w	r2, [sp, #9]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8004c30:	f003 010f 	and.w	r1, r3, #15
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8004c34:	091b      	lsrs	r3, r3, #4
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8004c36:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8004c3a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004c3e:	f89d 6005 	ldrb.w	r6, [sp, #5]
 8004c42:	f89d 2004 	ldrb.w	r2, [sp, #4]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8004c46:	85e1      	strh	r1, [r4, #46]	; 0x2e
	calib_data->dig_H3 = reg_data[2];
 8004c48:	f89d 0006 	ldrb.w	r0, [sp, #6]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 8004c4c:	f89d 100a 	ldrb.w	r1, [sp, #10]
	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004c50:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8004c54:	8623      	strh	r3, [r4, #48]	; 0x30
	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004c56:	8562      	strh	r2, [r4, #42]	; 0x2a
	calib_data->dig_H3 = reg_data[2];
 8004c58:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
	calib_data->dig_H6 = (int8_t)reg_data[6];
 8004c5c:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
 8004c60:	e73b      	b.n	8004ada <bme280_init+0x62>
		rslt = BME280_E_NULL_PTR;
 8004c62:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004c66:	e738      	b.n	8004ada <bme280_init+0x62>
			rslt = BME280_E_COMM_FAIL;
 8004c68:	f06f 0503 	mvn.w	r5, #3
 8004c6c:	e735      	b.n	8004ada <bme280_init+0x62>
 8004c6e:	bf00      	nop

08004c70 <bme280_set_sensor_settings>:
{
 8004c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c74:	b082      	sub	sp, #8
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004c76:	2900      	cmp	r1, #0
 8004c78:	f000 80e5 	beq.w	8004e46 <bme280_set_sensor_settings+0x1d6>
 8004c7c:	684e      	ldr	r6, [r1, #4]
 8004c7e:	2e00      	cmp	r6, #0
 8004c80:	f000 80e1 	beq.w	8004e46 <bme280_set_sensor_settings+0x1d6>
 8004c84:	688b      	ldr	r3, [r1, #8]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 80dd 	beq.w	8004e46 <bme280_set_sensor_settings+0x1d6>
 8004c8c:	68cb      	ldr	r3, [r1, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 80d9 	beq.w	8004e46 <bme280_set_sensor_settings+0x1d6>
 8004c94:	460c      	mov	r4, r1
 8004c96:	4605      	mov	r5, r0
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8004c98:	2301      	movs	r3, #1
 8004c9a:	aa01      	add	r2, sp, #4
 8004c9c:	21f4      	movs	r1, #244	; 0xf4
 8004c9e:	7860      	ldrb	r0, [r4, #1]
 8004ca0:	47b0      	blx	r6
		if (rslt != BME280_OK)
 8004ca2:	4606      	mov	r6, r0
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	f040 80d3 	bne.w	8004e50 <bme280_set_sensor_settings+0x1e0>
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8004caa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	f88d 3004 	strb.w	r3, [sp, #4]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8004cb6:	b983      	cbnz	r3, 8004cda <bme280_set_sensor_settings+0x6a>
	if (sub_settings & desired_settings) {
 8004cb8:	076a      	lsls	r2, r5, #29
 8004cba:	d106      	bne.n	8004cca <bme280_set_sensor_settings+0x5a>
 8004cbc:	f015 0f18 	tst.w	r5, #24
 8004cc0:	d115      	bne.n	8004cee <bme280_set_sensor_settings+0x7e>
}
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	b002      	add	sp, #8
 8004cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (desired_settings & BME280_OSR_HUM_SEL)
 8004cca:	076b      	lsls	r3, r5, #29
 8004ccc:	f005 0703 	and.w	r7, r5, #3
 8004cd0:	d448      	bmi.n	8004d64 <bme280_set_sensor_settings+0xf4>
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8004cd2:	2f00      	cmp	r7, #0
 8004cd4:	d177      	bne.n	8004dc6 <bme280_set_sensor_settings+0x156>
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8004cd6:	2601      	movs	r6, #1
 8004cd8:	e7f3      	b.n	8004cc2 <bme280_set_sensor_settings+0x52>
			rslt = put_device_to_sleep(dev);
 8004cda:	4620      	mov	r0, r4
 8004cdc:	f7ff fe0c 	bl	80048f8 <put_device_to_sleep>
		if (rslt == BME280_OK) {
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	d0e9      	beq.n	8004cb8 <bme280_set_sensor_settings+0x48>
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8004ce4:	4606      	mov	r6, r0
}
 8004ce6:	4630      	mov	r0, r6
 8004ce8:	b002      	add	sp, #8
 8004cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8004cee:	21f5      	movs	r1, #245	; 0xf5
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004cf0:	6866      	ldr	r6, [r4, #4]
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8004cf2:	f88d 1006 	strb.w	r1, [sp, #6]
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004cf6:	2e00      	cmp	r6, #0
 8004cf8:	f000 80a5 	beq.w	8004e46 <bme280_set_sensor_settings+0x1d6>
 8004cfc:	68a3      	ldr	r3, [r4, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 80a1 	beq.w	8004e46 <bme280_set_sensor_settings+0x1d6>
 8004d04:	68e3      	ldr	r3, [r4, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 809d 	beq.w	8004e46 <bme280_set_sensor_settings+0x1d6>
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8004d0c:	f10d 0707 	add.w	r7, sp, #7
 8004d10:	463a      	mov	r2, r7
 8004d12:	2301      	movs	r3, #1
 8004d14:	7860      	ldrb	r0, [r4, #1]
 8004d16:	47b0      	blx	r6
		if (rslt != BME280_OK)
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	f040 8099 	bne.w	8004e50 <bme280_set_sensor_settings+0x1e0>
		if (desired_settings & BME280_FILTER_SEL)
 8004d1e:	072a      	lsls	r2, r5, #28
 8004d20:	d50b      	bpl.n	8004d3a <bme280_set_sensor_settings+0xca>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8004d22:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 8004d26:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	f003 031c 	and.w	r3, r3, #28
 8004d30:	f022 021c 	bic.w	r2, r2, #28
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f88d 3007 	strb.w	r3, [sp, #7]
		if (desired_settings & BME280_STANDBY_SEL)
 8004d3a:	06eb      	lsls	r3, r5, #27
 8004d3c:	d509      	bpl.n	8004d52 <bme280_set_sensor_settings+0xe2>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8004d3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004d42:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8004d46:	f003 031f 	and.w	r3, r3, #31
 8004d4a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8004d4e:	f88d 3007 	strb.w	r3, [sp, #7]
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8004d52:	4623      	mov	r3, r4
 8004d54:	4639      	mov	r1, r7
 8004d56:	2201      	movs	r2, #1
 8004d58:	f10d 0006 	add.w	r0, sp, #6
 8004d5c:	f7ff fd02 	bl	8004764 <bme280_set_regs>
 8004d60:	4606      	mov	r6, r0
 8004d62:	e7ae      	b.n	8004cc2 <bme280_set_sensor_settings+0x52>
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8004d64:	f04f 0cf2 	mov.w	ip, #242	; 0xf2
		rslt = set_osr_humidity_settings(settings, dev);
 8004d68:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8004d6c:	a902      	add	r1, sp, #8
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	f801 3d03 	strb.w	r3, [r1, #-3]!
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8004d76:	f10d 0007 	add.w	r0, sp, #7
 8004d7a:	4623      	mov	r3, r4
 8004d7c:	2201      	movs	r2, #1
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8004d7e:	f88d c007 	strb.w	ip, [sp, #7]
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8004d82:	f7ff fcef 	bl	8004764 <bme280_set_regs>
	if (rslt == BME280_OK) {
 8004d86:	2800      	cmp	r0, #0
 8004d88:	d14a      	bne.n	8004e20 <bme280_set_sensor_settings+0x1b0>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8004d8a:	21f4      	movs	r1, #244	; 0xf4
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004d8c:	f8d4 8004 	ldr.w	r8, [r4, #4]
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8004d90:	f88d 1007 	strb.w	r1, [sp, #7]
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004d94:	f1b8 0f00 	cmp.w	r8, #0
 8004d98:	d053      	beq.n	8004e42 <bme280_set_sensor_settings+0x1d2>
 8004d9a:	68a3      	ldr	r3, [r4, #8]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d050      	beq.n	8004e42 <bme280_set_sensor_settings+0x1d2>
 8004da0:	68e3      	ldr	r3, [r4, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d04d      	beq.n	8004e42 <bme280_set_sensor_settings+0x1d2>
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8004da6:	f10d 0206 	add.w	r2, sp, #6
 8004daa:	2301      	movs	r3, #1
 8004dac:	7860      	ldrb	r0, [r4, #1]
 8004dae:	47c0      	blx	r8
		if (rslt != BME280_OK)
 8004db0:	2800      	cmp	r0, #0
 8004db2:	d14b      	bne.n	8004e4c <bme280_set_sensor_settings+0x1dc>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8004db4:	f10d 0106 	add.w	r1, sp, #6
 8004db8:	f10d 0007 	add.w	r0, sp, #7
 8004dbc:	4623      	mov	r3, r4
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f7ff fcd0 	bl	8004764 <bme280_set_regs>
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8004dc4:	b33f      	cbz	r7, 8004e16 <bme280_set_sensor_settings+0x1a6>
 8004dc6:	f8d4 8004 	ldr.w	r8, [r4, #4]
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8004dca:	21f4      	movs	r1, #244	; 0xf4
 8004dcc:	f88d 1006 	strb.w	r1, [sp, #6]
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004dd0:	f1b8 0f00 	cmp.w	r8, #0
 8004dd4:	d037      	beq.n	8004e46 <bme280_set_sensor_settings+0x1d6>
 8004dd6:	68a3      	ldr	r3, [r4, #8]
 8004dd8:	b3ab      	cbz	r3, 8004e46 <bme280_set_sensor_settings+0x1d6>
 8004dda:	68e3      	ldr	r3, [r4, #12]
 8004ddc:	b39b      	cbz	r3, 8004e46 <bme280_set_sensor_settings+0x1d6>
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8004dde:	f10d 0707 	add.w	r7, sp, #7
 8004de2:	463a      	mov	r2, r7
 8004de4:	2301      	movs	r3, #1
 8004de6:	7860      	ldrb	r0, [r4, #1]
 8004de8:	47c0      	blx	r8
		if (rslt != BME280_OK)
 8004dea:	bb88      	cbnz	r0, 8004e50 <bme280_set_sensor_settings+0x1e0>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8004dec:	07e8      	lsls	r0, r5, #31
 8004dee:	d41b      	bmi.n	8004e28 <bme280_set_sensor_settings+0x1b8>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 8004df0:	07a9      	lsls	r1, r5, #30
 8004df2:	d509      	bpl.n	8004e08 <bme280_set_sensor_settings+0x198>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8004df4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004df8:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8004dfc:	f003 031f 	and.w	r3, r3, #31
 8004e00:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8004e04:	f88d 3007 	strb.w	r3, [sp, #7]
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8004e08:	4639      	mov	r1, r7
 8004e0a:	4623      	mov	r3, r4
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f10d 0006 	add.w	r0, sp, #6
 8004e12:	f7ff fca7 	bl	8004764 <bme280_set_regs>
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8004e16:	2800      	cmp	r0, #0
 8004e18:	f43f af50 	beq.w	8004cbc <bme280_set_sensor_settings+0x4c>
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8004e1c:	4606      	mov	r6, r0
 8004e1e:	e762      	b.n	8004ce6 <bme280_set_sensor_settings+0x76>
 8004e20:	2f00      	cmp	r7, #0
 8004e22:	d1d0      	bne.n	8004dc6 <bme280_set_sensor_settings+0x156>
 8004e24:	4606      	mov	r6, r0
 8004e26:	e75e      	b.n	8004ce6 <bme280_set_sensor_settings+0x76>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8004e28:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8004e2c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	f003 031c 	and.w	r3, r3, #28
 8004e36:	f022 021c 	bic.w	r2, r2, #28
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f88d 3007 	strb.w	r3, [sp, #7]
 8004e40:	e7d6      	b.n	8004df0 <bme280_set_sensor_settings+0x180>
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8004e42:	2f00      	cmp	r7, #0
 8004e44:	d1c1      	bne.n	8004dca <bme280_set_sensor_settings+0x15a>
		rslt = BME280_E_NULL_PTR;
 8004e46:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8004e4a:	e73a      	b.n	8004cc2 <bme280_set_sensor_settings+0x52>
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8004e4c:	2f00      	cmp	r7, #0
 8004e4e:	d1ba      	bne.n	8004dc6 <bme280_set_sensor_settings+0x156>
			rslt = BME280_E_COMM_FAIL;
 8004e50:	f06f 0603 	mvn.w	r6, #3
 8004e54:	e735      	b.n	8004cc2 <bme280_set_sensor_settings+0x52>
 8004e56:	bf00      	nop

08004e58 <bme280_set_sensor_mode>:
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004e58:	2900      	cmp	r1, #0
 8004e5a:	d04a      	beq.n	8004ef2 <bme280_set_sensor_mode+0x9a>
{
 8004e5c:	b570      	push	{r4, r5, r6, lr}
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004e5e:	684d      	ldr	r5, [r1, #4]
{
 8004e60:	b082      	sub	sp, #8
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004e62:	2d00      	cmp	r5, #0
 8004e64:	d03f      	beq.n	8004ee6 <bme280_set_sensor_mode+0x8e>
 8004e66:	688b      	ldr	r3, [r1, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d03c      	beq.n	8004ee6 <bme280_set_sensor_mode+0x8e>
 8004e6c:	68cb      	ldr	r3, [r1, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d039      	beq.n	8004ee6 <bme280_set_sensor_mode+0x8e>
 8004e72:	460c      	mov	r4, r1
 8004e74:	4606      	mov	r6, r0
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8004e76:	2301      	movs	r3, #1
 8004e78:	f10d 0205 	add.w	r2, sp, #5
 8004e7c:	21f4      	movs	r1, #244	; 0xf4
 8004e7e:	7860      	ldrb	r0, [r4, #1]
 8004e80:	47a8      	blx	r5
		if (rslt != BME280_OK)
 8004e82:	bb98      	cbnz	r0, 8004eec <bme280_set_sensor_mode+0x94>
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8004e84:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004e88:	f003 0303 	and.w	r3, r3, #3
 8004e8c:	f88d 3005 	strb.w	r3, [sp, #5]
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8004e90:	bb13      	cbnz	r3, 8004ed8 <bme280_set_sensor_mode+0x80>
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8004e92:	21f4      	movs	r1, #244	; 0xf4
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004e94:	6865      	ldr	r5, [r4, #4]
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8004e96:	f88d 1006 	strb.w	r1, [sp, #6]
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004e9a:	b325      	cbz	r5, 8004ee6 <bme280_set_sensor_mode+0x8e>
 8004e9c:	68a3      	ldr	r3, [r4, #8]
 8004e9e:	b313      	cbz	r3, 8004ee6 <bme280_set_sensor_mode+0x8e>
 8004ea0:	68e3      	ldr	r3, [r4, #12]
 8004ea2:	b303      	cbz	r3, 8004ee6 <bme280_set_sensor_mode+0x8e>
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8004ea4:	f10d 0207 	add.w	r2, sp, #7
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	7860      	ldrb	r0, [r4, #1]
 8004eac:	47a8      	blx	r5
		if (rslt != BME280_OK)
 8004eae:	b9e8      	cbnz	r0, 8004eec <bme280_set_sensor_mode+0x94>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8004eb0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004eb4:	f006 0003 	and.w	r0, r6, #3
 8004eb8:	f022 0203 	bic.w	r2, r2, #3
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8004ebc:	4623      	mov	r3, r4
 8004ebe:	f10d 0107 	add.w	r1, sp, #7
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8004ec2:	ea42 0400 	orr.w	r4, r2, r0
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f10d 0006 	add.w	r0, sp, #6
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8004ecc:	f88d 4007 	strb.w	r4, [sp, #7]
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8004ed0:	f7ff fc48 	bl	8004764 <bme280_set_regs>
}
 8004ed4:	b002      	add	sp, #8
 8004ed6:	bd70      	pop	{r4, r5, r6, pc}
			rslt = put_device_to_sleep(dev);
 8004ed8:	4620      	mov	r0, r4
 8004eda:	f7ff fd0d 	bl	80048f8 <put_device_to_sleep>
		if (rslt == BME280_OK)
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	d0d7      	beq.n	8004e92 <bme280_set_sensor_mode+0x3a>
}
 8004ee2:	b002      	add	sp, #8
 8004ee4:	bd70      	pop	{r4, r5, r6, pc}
		rslt = BME280_E_NULL_PTR;
 8004ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004eea:	e7f3      	b.n	8004ed4 <bme280_set_sensor_mode+0x7c>
			rslt = BME280_E_COMM_FAIL;
 8004eec:	f06f 0003 	mvn.w	r0, #3
 8004ef0:	e7f0      	b.n	8004ed4 <bme280_set_sensor_mode+0x7c>
		rslt = BME280_E_NULL_PTR;
 8004ef2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004ef6:	4770      	bx	lr

08004ef8 <bme280_get_sensor_data>:
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8004ef8:	2300      	movs	r3, #0
{
 8004efa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004efe:	b091      	sub	sp, #68	; 0x44
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8004f00:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004f04:	2a00      	cmp	r2, #0
 8004f06:	f000 8247 	beq.w	8005398 <bme280_get_sensor_data+0x4a0>
 8004f0a:	6854      	ldr	r4, [r2, #4]
 8004f0c:	2c00      	cmp	r4, #0
 8004f0e:	f000 8243 	beq.w	8005398 <bme280_get_sensor_data+0x4a0>
 8004f12:	6893      	ldr	r3, [r2, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 823f 	beq.w	8005398 <bme280_get_sensor_data+0x4a0>
 8004f1a:	68d3      	ldr	r3, [r2, #12]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 823b 	beq.w	8005398 <bme280_get_sensor_data+0x4a0>
	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8004f22:	2900      	cmp	r1, #0
 8004f24:	f000 8238 	beq.w	8005398 <bme280_get_sensor_data+0x4a0>
 8004f28:	4615      	mov	r5, r2
 8004f2a:	468a      	mov	sl, r1
 8004f2c:	4683      	mov	fp, r0
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8004f2e:	aa0e      	add	r2, sp, #56	; 0x38
 8004f30:	2308      	movs	r3, #8
 8004f32:	21f7      	movs	r1, #247	; 0xf7
 8004f34:	7868      	ldrb	r0, [r5, #1]
 8004f36:	47a0      	blx	r4
		if (rslt != BME280_OK)
 8004f38:	4604      	mov	r4, r0
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	f040 822f 	bne.w	800539e <bme280_get_sensor_data+0x4a6>
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8004f40:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		comp_data->pressure = 0;
 8004f44:	e9ca 0000 	strd	r0, r0, [sl]
		comp_data->humidity = 0;
 8004f48:	f8ca 0008 	str.w	r0, [sl, #8]
 8004f4c:	f8bd 003e 	ldrh.w	r0, [sp, #62]	; 0x3e
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8004f50:	f01b 0f07 	tst.w	fp, #7
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8004f54:	9302      	str	r3, [sp, #8]
	data_msb = (uint32_t)reg_data[0] << 12;
 8004f56:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
	data_lsb = (uint32_t)reg_data[1] << 4;
 8004f5a:	f89d c039 	ldrb.w	ip, [sp, #57]	; 0x39
	data_msb = (uint32_t)reg_data[3] << 12;
 8004f5e:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
	data_lsb = (uint32_t)reg_data[4] << 4;
 8004f62:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8004f66:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8004f6a:	9001      	str	r0, [sp, #4]
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8004f6c:	f040 81db 	bne.w	8005326 <bme280_get_sensor_data+0x42e>
		if (sensor_comp & BME280_PRESS) {
 8004f70:	f01b 0f01 	tst.w	fp, #1
 8004f74:	f000 8173 	beq.w	800525e <bme280_get_sensor_data+0x366>
	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8004f78:	6b6a      	ldr	r2, [r5, #52]	; 0x34
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8004f7a:	f9b5 001a 	ldrsh.w	r0, [r5, #26]
	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8004f7e:	f5b2 36fa 	subs.w	r6, r2, #128000	; 0x1f400
 8004f82:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8004f86:	f143 37ff 	adc.w	r7, r3, #4294967295	; 0xffffffff
 8004f8a:	46b8      	mov	r8, r7
 8004f8c:	4637      	mov	r7, r6
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8004f8e:	fba7 2307 	umull	r2, r3, r7, r7
 8004f92:	e9cd 7806 	strd	r7, r8, [sp, #24]
 8004f96:	fb06 f608 	mul.w	r6, r6, r8
 8004f9a:	4698      	mov	r8, r3
 8004f9c:	4617      	mov	r7, r2
 8004f9e:	eb08 0646 	add.w	r6, r8, r6, lsl #1
 8004fa2:	e9cd 7804 	strd	r7, r8, [sp, #16]
 8004fa6:	9605      	str	r6, [sp, #20]
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8004fa8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004fac:	464e      	mov	r6, r9
 8004fae:	fb00 f606 	mul.w	r6, r0, r6
 8004fb2:	17c1      	asrs	r1, r0, #31
 8004fb4:	fb08 6601 	mla	r6, r8, r1, r6
 8004fb8:	fba0 0108 	umull	r0, r1, r0, r8
 8004fbc:	f9b5 2018 	ldrsh.w	r2, [r5, #24]
 8004fc0:	4431      	add	r1, r6
 8004fc2:	9e07      	ldr	r6, [sp, #28]
 8004fc4:	9f06      	ldr	r7, [sp, #24]
 8004fc6:	fb02 f606 	mul.w	r6, r2, r6
 8004fca:	17d3      	asrs	r3, r2, #31
 8004fcc:	fb07 6603 	mla	r6, r7, r3, r6
 8004fd0:	fba2 2307 	umull	r2, r3, r2, r7
 8004fd4:	4433      	add	r3, r6
 8004fd6:	031e      	lsls	r6, r3, #12
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	ea4f 3302 	mov.w	r3, r2, lsl #12
 8004fde:	ea46 5612 	orr.w	r6, r6, r2, lsr #20
 8004fe2:	4698      	mov	r8, r3
 8004fe4:	f171 0300 	sbcs.w	r3, r1, #0
 8004fe8:	46b1      	mov	r9, r6
 8004fea:	da02      	bge.n	8004ff2 <bme280_get_sensor_data+0xfa>
 8004fec:	30ff      	adds	r0, #255	; 0xff
 8004fee:	f141 0100 	adc.w	r1, r1, #0
 8004ff2:	0a02      	lsrs	r2, r0, #8
 8004ff4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004ff8:	eb18 0002 	adds.w	r0, r8, r2
 8004ffc:	ea4f 2321 	mov.w	r3, r1, asr #8
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8005000:	8aee      	ldrh	r6, [r5, #22]
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8005002:	eb49 0103 	adc.w	r1, r9, r3
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8005006:	f110 0800 	adds.w	r8, r0, #0
 800500a:	f541 4900 	adc.w	r9, r1, #32768	; 0x8000
 800500e:	fba8 0106 	umull	r0, r1, r8, r6
 8005012:	fb06 1109 	mla	r1, r6, r9, r1
 8005016:	2800      	cmp	r0, #0
 8005018:	f171 0300 	sbcs.w	r3, r1, #0
 800501c:	da03      	bge.n	8005026 <bme280_get_sensor_data+0x12e>
 800501e:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8005022:	f141 0101 	adc.w	r1, r1, #1
 8005026:	104b      	asrs	r3, r1, #1
 8005028:	9308      	str	r3, [sp, #32]
 800502a:	17cb      	asrs	r3, r1, #31
 800502c:	9309      	str	r3, [sp, #36]	; 0x24
	if (var1 != 0) {
 800502e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005032:	4313      	orrs	r3, r2
 8005034:	f000 81ae 	beq.w	8005394 <bme280_get_sensor_data+0x49c>
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8005038:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800503c:	2000      	movs	r0, #0
 800503e:	2100      	movs	r1, #0
 8005040:	f9b5 201e 	ldrsh.w	r2, [r5, #30]
 8005044:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8005048:	f9b5 001c 	ldrsh.w	r0, [r5, #28]
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 800504c:	17d3      	asrs	r3, r2, #31
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 800504e:	00c1      	lsls	r1, r0, #3
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8005050:	fb02 f009 	mul.w	r0, r2, r9
 8005054:	fb08 0003 	mla	r0, r8, r3, r0
 8005058:	fba2 8908 	umull	r8, r9, r2, r8
 800505c:	4481      	add	r9, r0
 800505e:	ea4f 4349 	mov.w	r3, r9, lsl #17
 8005062:	930b      	str	r3, [sp, #44]	; 0x2c
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8005064:	910d      	str	r1, [sp, #52]	; 0x34
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8005066:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800506a:	4613      	mov	r3, r2
 800506c:	f9b5 6020 	ldrsh.w	r6, [r5, #32]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8005070:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8005074:	fb06 f303 	mul.w	r3, r6, r3
 8005078:	17f7      	asrs	r7, r6, #31
 800507a:	fb01 3307 	mla	r3, r1, r7, r3
 800507e:	9904      	ldr	r1, [sp, #16]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8005080:	ea4c 3e0e 	orr.w	lr, ip, lr, lsl #12
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8005084:	fba6 6701 	umull	r6, r7, r6, r1
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8005088:	990b      	ldr	r1, [sp, #44]	; 0x2c
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 800508a:	441f      	add	r7, r3
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 800508c:	ea41 31d8 	orr.w	r1, r1, r8, lsr #15
 8005090:	910b      	str	r1, [sp, #44]	; 0x2c
 8005092:	ea4f 4148 	mov.w	r1, r8, lsl #17
 8005096:	910a      	str	r1, [sp, #40]	; 0x28
 8005098:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800509c:	1989      	adds	r1, r1, r6
 800509e:	460e      	mov	r6, r1
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 80050a0:	f04f 0100 	mov.w	r1, #0
 80050a4:	910c      	str	r1, [sp, #48]	; 0x30
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 80050a6:	417a      	adcs	r2, r7
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 80050a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050ac:	1980      	adds	r0, r0, r6
 80050ae:	4151      	adcs	r1, r2
 80050b0:	460f      	mov	r7, r1
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80050b2:	9902      	ldr	r1, [sp, #8]
 80050b4:	ea4e 1811 	orr.w	r8, lr, r1, lsr #4
		var4 = 1048576 - uncomp_data->pressure;
 80050b8:	f5c8 1880 	rsb	r8, r8, #1048576	; 0x100000
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 80050bc:	ea4f 72c8 	mov.w	r2, r8, lsl #31
 80050c0:	1a12      	subs	r2, r2, r0
 80050c2:	ea4f 0358 	mov.w	r3, r8, lsr #1
 80050c6:	eb63 0307 	sbc.w	r3, r3, r7
 80050ca:	4690      	mov	r8, r2
 80050cc:	4699      	mov	r9, r3
 80050ce:	1892      	adds	r2, r2, r2
 80050d0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80050d4:	415b      	adcs	r3, r3
 80050d6:	eb18 0802 	adds.w	r8, r8, r2
 80050da:	eb49 0903 	adc.w	r9, r9, r3
 80050de:	ea4f 1088 	mov.w	r0, r8, lsl #6
 80050e2:	ea4f 1189 	mov.w	r1, r9, lsl #6
 80050e6:	eb10 0608 	adds.w	r6, r0, r8
 80050ea:	ea41 6198 	orr.w	r1, r1, r8, lsr #26
 80050ee:	eb41 0709 	adc.w	r7, r1, r9
 80050f2:	00b2      	lsls	r2, r6, #2
 80050f4:	00bb      	lsls	r3, r7, #2
 80050f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050fa:	ea43 7396 	orr.w	r3, r3, r6, lsr #30
 80050fe:	eb10 0802 	adds.w	r8, r0, r2
 8005102:	eb41 0903 	adc.w	r9, r1, r3
 8005106:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800510a:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800510e:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8005112:	4690      	mov	r8, r2
 8005114:	4699      	mov	r9, r3
 8005116:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800511a:	eb10 0008 	adds.w	r0, r0, r8
 800511e:	eb41 0109 	adc.w	r1, r1, r9
 8005122:	f7fb fcf1 	bl	8000b08 <__aeabi_ldivmod>
 8005126:	460b      	mov	r3, r1
 8005128:	4602      	mov	r2, r0
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 800512a:	2800      	cmp	r0, #0
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 800512c:	e9cd 2302 	strd	r2, r3, [sp, #8]
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8005130:	f173 0300 	sbcs.w	r3, r3, #0
 8005134:	da04      	bge.n	8005140 <bme280_get_sensor_data+0x248>
 8005136:	f641 76ff 	movw	r6, #8191	; 0x1fff
 800513a:	2700      	movs	r7, #0
 800513c:	1980      	adds	r0, r0, r6
 800513e:	4179      	adcs	r1, r7
 8005140:	f9b5 2026 	ldrsh.w	r2, [r5, #38]	; 0x26
 8005144:	ea4f 3e61 	mov.w	lr, r1, asr #13
 8005148:	fb02 f80e 	mul.w	r8, r2, lr
 800514c:	ea4f 3c50 	mov.w	ip, r0, lsr #13
 8005150:	ea4c 4cc1 	orr.w	ip, ip, r1, lsl #19
 8005154:	17d3      	asrs	r3, r2, #31
 8005156:	fb0c 8603 	mla	r6, ip, r3, r8
 800515a:	fba2 230c 	umull	r2, r3, r2, ip
 800515e:	fb02 fe0e 	mul.w	lr, r2, lr
 8005162:	4433      	add	r3, r6
 8005164:	fba2 670c 	umull	r6, r7, r2, ip
 8005168:	fb0c ec03 	mla	ip, ip, r3, lr
 800516c:	4467      	add	r7, ip
 800516e:	463b      	mov	r3, r7
 8005170:	2e00      	cmp	r6, #0
 8005172:	f173 0300 	sbcs.w	r3, r3, #0
 8005176:	46b0      	mov	r8, r6
 8005178:	46b9      	mov	r9, r7
 800517a:	da07      	bge.n	800518c <bme280_get_sensor_data+0x294>
 800517c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8005180:	2300      	movs	r3, #0
 8005182:	18b0      	adds	r0, r6, r2
 8005184:	eb47 0103 	adc.w	r1, r7, r3
 8005188:	4680      	mov	r8, r0
 800518a:	4689      	mov	r9, r1
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 800518c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8005190:	4641      	mov	r1, r8
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8005192:	f9b5 2024 	ldrsh.w	r2, [r5, #36]	; 0x24
 8005196:	fb02 fc07 	mul.w	ip, r2, r7
 800519a:	17d3      	asrs	r3, r2, #31
 800519c:	fb06 cc03 	mla	ip, r6, r3, ip
 80051a0:	fba2 2306 	umull	r2, r3, r2, r6
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 80051a4:	0e4e      	lsrs	r6, r1, #25
 80051a6:	4649      	mov	r1, r9
 80051a8:	ea46 16c9 	orr.w	r6, r6, r9, lsl #7
 80051ac:	164f      	asrs	r7, r1, #25
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 80051ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051b2:	1980      	adds	r0, r0, r6
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 80051b4:	4463      	add	r3, ip
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 80051b6:	4179      	adcs	r1, r7
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 80051b8:	2a00      	cmp	r2, #0
 80051ba:	f173 0600 	sbcs.w	r6, r3, #0
 80051be:	da03      	bge.n	80051c8 <bme280_get_sensor_data+0x2d0>
 80051c0:	2700      	movs	r7, #0
 80051c2:	4e78      	ldr	r6, [pc, #480]	; (80053a4 <bme280_get_sensor_data+0x4ac>)
 80051c4:	1992      	adds	r2, r2, r6
 80051c6:	417b      	adcs	r3, r7
 80051c8:	0cd6      	lsrs	r6, r2, #19
 80051ca:	ea46 3643 	orr.w	r6, r6, r3, lsl #13
 80051ce:	14df      	asrs	r7, r3, #19
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 80051d0:	eb10 0806 	adds.w	r8, r0, r6
 80051d4:	eb41 0907 	adc.w	r9, r1, r7
 80051d8:	f1b8 0f00 	cmp.w	r8, #0
 80051dc:	f179 0300 	sbcs.w	r3, r9, #0
 80051e0:	da03      	bge.n	80051ea <bme280_get_sensor_data+0x2f2>
 80051e2:	f118 08ff 	adds.w	r8, r8, #255	; 0xff
 80051e6:	f149 0900 	adc.w	r9, r9, #0
 80051ea:	2610      	movs	r6, #16
 80051ec:	ea4f 2718 	mov.w	r7, r8, lsr #8
 80051f0:	f9b5 0022 	ldrsh.w	r0, [r5, #34]	; 0x22
 80051f4:	ea47 6209 	orr.w	r2, r7, r9, lsl #24
 80051f8:	ea4f 2329 	mov.w	r3, r9, asr #8
 80051fc:	fbc0 2306 	smlal	r2, r3, r0, r6
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 8005200:	0fd9      	lsrs	r1, r3, #31
 8005202:	1852      	adds	r2, r2, r1
 8005204:	f143 0300 	adc.w	r3, r3, #0
 8005208:	105b      	asrs	r3, r3, #1
 800520a:	ea4f 0232 	mov.w	r2, r2, rrx
 800520e:	1890      	adds	r0, r2, r2
 8005210:	eb43 0103 	adc.w	r1, r3, r3
 8005214:	eb10 0802 	adds.w	r8, r0, r2
 8005218:	eb41 0903 	adc.w	r9, r1, r3
 800521c:	ea4f 1648 	mov.w	r6, r8, lsl #5
 8005220:	ea4f 1749 	mov.w	r7, r9, lsl #5
 8005224:	ea47 67d8 	orr.w	r7, r7, r8, lsr #27
 8005228:	eb18 0006 	adds.w	r0, r8, r6
 800522c:	eb49 0107 	adc.w	r1, r9, r7
 8005230:	1816      	adds	r6, r2, r0
 8005232:	eb43 0701 	adc.w	r7, r3, r1
 8005236:	2e00      	cmp	r6, #0
 8005238:	f177 0300 	sbcs.w	r3, r7, #0
 800523c:	da02      	bge.n	8005244 <bme280_get_sensor_data+0x34c>
 800523e:	367f      	adds	r6, #127	; 0x7f
 8005240:	f147 0700 	adc.w	r7, r7, #0
 8005244:	09f2      	lsrs	r2, r6, #7
 8005246:	4958      	ldr	r1, [pc, #352]	; (80053a8 <bme280_get_sensor_data+0x4b0>)
 8005248:	ea42 6347 	orr.w	r3, r2, r7, lsl #25
 800524c:	428b      	cmp	r3, r1
 800524e:	bf28      	it	cs
 8005250:	460b      	movcs	r3, r1
 8005252:	4a56      	ldr	r2, [pc, #344]	; (80053ac <bme280_get_sensor_data+0x4b4>)
 8005254:	4293      	cmp	r3, r2
 8005256:	bf38      	it	cc
 8005258:	4613      	movcc	r3, r2
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 800525a:	f8ca 3000 	str.w	r3, [sl]
		if (sensor_comp & BME280_HUM) {
 800525e:	f01b 0f04 	tst.w	fp, #4
 8005262:	d05c      	beq.n	800531e <bme280_get_sensor_data+0x426>
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 8005264:	9b01      	ldr	r3, [sp, #4]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8005266:	f9b5 002e 	ldrsh.w	r0, [r5, #46]	; 0x2e
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 800526a:	ba59      	rev16	r1, r3
	var1 = calib_data->t_fine - ((int32_t)76800);
 800526c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 800526e:	0500      	lsls	r0, r0, #20
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 8005270:	f9b5 2030 	ldrsh.w	r2, [r5, #48]	; 0x30
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 8005274:	b289      	uxth	r1, r1
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8005276:	ebc0 3181 	rsb	r1, r0, r1, lsl #14
	var1 = calib_data->t_fine - ((int32_t)76800);
 800527a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 800527e:	fb03 1212 	mls	r2, r3, r2, r1
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8005282:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8005286:	f995 0032 	ldrsb.w	r0, [r5, #50]	; 0x32
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 800528a:	fb03 f101 	mul.w	r1, r3, r1
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 800528e:	fb03 f300 	mul.w	r3, r3, r0
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8005292:	f512 4280 	adds.w	r2, r2, #16384	; 0x4000
 8005296:	bf44      	itt	mi
 8005298:	f502 42ff 	addmi.w	r2, r2, #32640	; 0x7f80
 800529c:	327f      	addmi	r2, #127	; 0x7f
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 800529e:	2900      	cmp	r1, #0
 80052a0:	bfb8      	it	lt
 80052a2:	f201 71ff 	addwlt	r1, r1, #2047	; 0x7ff
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	bfb8      	it	lt
 80052aa:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 80052ae:	12c9      	asrs	r1, r1, #11
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 80052b0:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 80052b4:	129b      	asrs	r3, r3, #10
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 80052b6:	fb03 f301 	mul.w	r3, r3, r1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	bfb8      	it	lt
 80052be:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 80052c2:	f9b5 102a 	ldrsh.w	r1, [r5, #42]	; 0x2a
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 80052c6:	129b      	asrs	r3, r3, #10
 80052c8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 80052cc:	fb01 f303 	mul.w	r3, r1, r3
 80052d0:	f513 5300 	adds.w	r3, r3, #8192	; 0x2000
 80052d4:	bf44      	itt	mi
 80052d6:	f503 537f 	addmi.w	r3, r3, #16320	; 0x3fc0
 80052da:	333f      	addmi	r3, #63	; 0x3f
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 80052dc:	13d2      	asrs	r2, r2, #15
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 80052de:	139b      	asrs	r3, r3, #14
	var3 = var5 * var2;
 80052e0:	fb02 f303 	mul.w	r3, r2, r3
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 80052e4:	461a      	mov	r2, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	bfbc      	itt	lt
 80052ea:	f503 42ff 	addlt.w	r2, r3, #32640	; 0x7f80
 80052ee:	327f      	addlt	r2, #127	; 0x7f
 80052f0:	13d2      	asrs	r2, r2, #15
 80052f2:	fb02 f202 	mul.w	r2, r2, r2
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 80052f6:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 80052fa:	11d2      	asrs	r2, r2, #7
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 80052fc:	fb01 f202 	mul.w	r2, r1, r2
 8005300:	2a00      	cmp	r2, #0
 8005302:	bfb8      	it	lt
 8005304:	320f      	addlt	r2, #15
 8005306:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	var5 = (var5 < 0 ? 0 : var5);
 800530a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	var5 = (var5 > 419430400 ? 419430400 : var5);
 800530e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8005312:	bfa8      	it	ge
 8005314:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
	humidity = (uint32_t)(var5 / 4096);
 8005318:	131b      	asrs	r3, r3, #12
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 800531a:	f8ca 3008 	str.w	r3, [sl, #8]
}
 800531e:	4620      	mov	r0, r4
 8005320:	b011      	add	sp, #68	; 0x44
 8005322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	data_lsb = (uint32_t)reg_data[4] << 4;
 8005326:	011b      	lsls	r3, r3, #4
	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 8005328:	8a28      	ldrh	r0, [r5, #16]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800532a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800532e:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8005332:	ebc0 1113 	rsb	r1, r0, r3, lsr #4
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8005336:	fb01 f101 	mul.w	r1, r1, r1
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 800533a:	f9b5 2012 	ldrsh.w	r2, [r5, #18]
	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 800533e:	0040      	lsls	r0, r0, #1
 8005340:	ebc0 03d3 	rsb	r3, r0, r3, lsr #3
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8005344:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8005348:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 800534c:	1309      	asrs	r1, r1, #12
 800534e:	fb02 f201 	mul.w	r2, r2, r1
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8005352:	2b00      	cmp	r3, #0
 8005354:	bfb8      	it	lt
 8005356:	f203 73ff 	addwlt	r3, r3, #2047	; 0x7ff
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 800535a:	2a00      	cmp	r2, #0
 800535c:	bfbc      	itt	lt
 800535e:	f502 527f 	addlt.w	r2, r2, #16320	; 0x3fc0
 8005362:	323f      	addlt	r2, #63	; 0x3f
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8005364:	12db      	asrs	r3, r3, #11
	calib_data->t_fine = var1 + var2;
 8005366:	eb03 33a2 	add.w	r3, r3, r2, asr #14
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 800536a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
	calib_data->t_fine = var1 + var2;
 800536e:	636b      	str	r3, [r5, #52]	; 0x34
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8005370:	f112 0380 	adds.w	r3, r2, #128	; 0x80
 8005374:	bf48      	it	mi
 8005376:	f202 137f 	addwmi	r3, r2, #383	; 0x17f
 800537a:	f242 1234 	movw	r2, #8500	; 0x2134
 800537e:	121b      	asrs	r3, r3, #8
 8005380:	4293      	cmp	r3, r2
 8005382:	bfa8      	it	ge
 8005384:	4613      	movge	r3, r2
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8005386:	4a0a      	ldr	r2, [pc, #40]	; (80053b0 <bme280_get_sensor_data+0x4b8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	bfb8      	it	lt
 800538c:	4613      	movlt	r3, r2
 800538e:	f8ca 3004 	str.w	r3, [sl, #4]
 8005392:	e5ed      	b.n	8004f70 <bme280_get_sensor_data+0x78>
		pressure = pressure_min;
 8005394:	4b05      	ldr	r3, [pc, #20]	; (80053ac <bme280_get_sensor_data+0x4b4>)
 8005396:	e760      	b.n	800525a <bme280_get_sensor_data+0x362>
		rslt = BME280_E_NULL_PTR;
 8005398:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800539c:	e7bf      	b.n	800531e <bme280_get_sensor_data+0x426>
			rslt = BME280_E_COMM_FAIL;
 800539e:	f06f 0403 	mvn.w	r4, #3
 80053a2:	e7bc      	b.n	800531e <bme280_get_sensor_data+0x426>
 80053a4:	0007ffff 	.word	0x0007ffff
 80053a8:	00a7d8c0 	.word	0x00a7d8c0
 80053ac:	002dc6c0 	.word	0x002dc6c0
 80053b0:	fffff060 	.word	0xfffff060

080053b4 <TSL2561_setPowerUp>:
	return false;
}

bool TSL2561_WriteByte(uint8_t regAdr, uint8_t value) {
	uint8_t data[2] = {0, 0};
	data[0] = ((regAdr & 0x0F) | TSL2561_CMD);
 80053b4:	f44f 7160 	mov.w	r1, #896	; 0x380
	data[1] = value;
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, data, 2, 1000) == HAL_OK) {
 80053b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
bool TSL2561_setPowerUp(void) {
 80053bc:	b500      	push	{lr}
 80053be:	b085      	sub	sp, #20
	data[0] = ((regAdr & 0x0F) | TSL2561_CMD);
 80053c0:	aa04      	add	r2, sp, #16
 80053c2:	f822 1d04 	strh.w	r1, [r2, #-4]!
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, data, 2, 1000) == HAL_OK) {
 80053c6:	4806      	ldr	r0, [pc, #24]	; (80053e0 <TSL2561_setPowerUp+0x2c>)
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	2152      	movs	r1, #82	; 0x52
 80053cc:	2302      	movs	r3, #2
 80053ce:	f001 f95b 	bl	8006688 <HAL_I2C_Master_Transmit>
}
 80053d2:	fab0 f080 	clz	r0, r0
 80053d6:	0940      	lsrs	r0, r0, #5
 80053d8:	b005      	add	sp, #20
 80053da:	f85d fb04 	ldr.w	pc, [sp], #4
 80053de:	bf00      	nop
 80053e0:	20003c90 	.word	0x20003c90

080053e4 <TSL2561_setTiming_ms>:
bool TSL2561_setTiming_ms(bool gain, uint8_t time, unsigned int *ms) {
 80053e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (time) {
 80053e6:	2901      	cmp	r1, #1
bool TSL2561_setTiming_ms(bool gain, uint8_t time, unsigned int *ms) {
 80053e8:	b085      	sub	sp, #20
 80053ea:	460c      	mov	r4, r1
 80053ec:	4607      	mov	r7, r0
	switch (time) {
 80053ee:	d048      	beq.n	8005482 <TSL2561_setTiming_ms+0x9e>
 80053f0:	d344      	bcc.n	800547c <TSL2561_setTiming_ms+0x98>
 80053f2:	2902      	cmp	r1, #2
 80053f4:	d012      	beq.n	800541c <TSL2561_setTiming_ms+0x38>
		default: *ms = 0;
 80053f6:	2300      	movs	r3, #0
 80053f8:	6013      	str	r3, [r2, #0]
		return false;
	}
}

bool TSL2561_ReadByte(uint8_t regAdr, uint8_t *value) {
	uint8_t data = ((regAdr & 0x0F) | TSL2561_CMD);
 80053fa:	2381      	movs	r3, #129	; 0x81
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK) {
 80053fc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	uint8_t data = ((regAdr & 0x0F) | TSL2561_CMD);
 8005400:	ad04      	add	r5, sp, #16
 8005402:	f805 3d04 	strb.w	r3, [r5, #-4]!
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK) {
 8005406:	462a      	mov	r2, r5
 8005408:	9600      	str	r6, [sp, #0]
 800540a:	2301      	movs	r3, #1
 800540c:	2152      	movs	r1, #82	; 0x52
 800540e:	481e      	ldr	r0, [pc, #120]	; (8005488 <TSL2561_setTiming_ms+0xa4>)
 8005410:	f001 f93a 	bl	8006688 <HAL_I2C_Master_Transmit>
 8005414:	b130      	cbz	r0, 8005424 <TSL2561_setTiming_ms+0x40>
	return false;
 8005416:	2000      	movs	r0, #0
}
 8005418:	b005      	add	sp, #20
 800541a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		case 2:  *ms = 402; break;
 800541c:	f44f 73c9 	mov.w	r3, #402	; 0x192
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	e7ea      	b.n	80053fa <TSL2561_setTiming_ms+0x16>
		if(HAL_I2C_Master_Receive(&hi2c1, (uint16_t) TSL2561_ADDR, value, 1, 1000) == HAL_OK) {
 8005424:	9600      	str	r6, [sp, #0]
 8005426:	2301      	movs	r3, #1
 8005428:	f10d 020b 	add.w	r2, sp, #11
 800542c:	2152      	movs	r1, #82	; 0x52
 800542e:	4816      	ldr	r0, [pc, #88]	; (8005488 <TSL2561_setTiming_ms+0xa4>)
 8005430:	f001 faac 	bl	800698c <HAL_I2C_Master_Receive>
 8005434:	2800      	cmp	r0, #0
 8005436:	d1ee      	bne.n	8005416 <TSL2561_setTiming_ms+0x32>
 8005438:	f89d 300b 	ldrb.w	r3, [sp, #11]
		if (gain)
 800543c:	b1df      	cbz	r7, 8005476 <TSL2561_setTiming_ms+0x92>
			timing |= 0x10;
 800543e:	f043 0310 	orr.w	r3, r3, #16
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, data, 2, 1000) == HAL_OK) {
 8005442:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	data[0] = ((regAdr & 0x0F) | TSL2561_CMD);
 8005446:	2681      	movs	r6, #129	; 0x81
		timing &= ~0x03;
 8005448:	f023 0303 	bic.w	r3, r3, #3
		timing |= (time & 0x03);
 800544c:	f004 0403 	and.w	r4, r4, #3
 8005450:	431c      	orrs	r4, r3
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, data, 2, 1000) == HAL_OK) {
 8005452:	9100      	str	r1, [sp, #0]
 8005454:	462a      	mov	r2, r5
 8005456:	2302      	movs	r3, #2
 8005458:	2152      	movs	r1, #82	; 0x52
 800545a:	480b      	ldr	r0, [pc, #44]	; (8005488 <TSL2561_setTiming_ms+0xa4>)
		timing |= (time & 0x03);
 800545c:	f88d 400b 	strb.w	r4, [sp, #11]
	data[1] = value;
 8005460:	f88d 400d 	strb.w	r4, [sp, #13]
	data[0] = ((regAdr & 0x0F) | TSL2561_CMD);
 8005464:	f88d 600c 	strb.w	r6, [sp, #12]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, data, 2, 1000) == HAL_OK) {
 8005468:	f001 f90e 	bl	8006688 <HAL_I2C_Master_Transmit>
			return true;
 800546c:	fab0 f080 	clz	r0, r0
 8005470:	0940      	lsrs	r0, r0, #5
}
 8005472:	b005      	add	sp, #20
 8005474:	bdf0      	pop	{r4, r5, r6, r7, pc}
			timing &= ~0x10;
 8005476:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800547a:	e7e2      	b.n	8005442 <TSL2561_setTiming_ms+0x5e>
		case 0:  *ms = 14; break;
 800547c:	230e      	movs	r3, #14
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	e7bb      	b.n	80053fa <TSL2561_setTiming_ms+0x16>
		case 1:  *ms = 101; break;
 8005482:	2365      	movs	r3, #101	; 0x65
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	e7b8      	b.n	80053fa <TSL2561_setTiming_ms+0x16>
 8005488:	20003c90 	.word	0x20003c90

0800548c <TSL2561_getData>:
bool TSL2561_getData(unsigned int *data0, unsigned int *data1) {
 800548c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
bool TSL2561_readUInt(uint8_t address, unsigned int *value) {
	char high, low;
	// Set up command byte for read
	uint8_t data = ((address & 0x0F) | TSL2561_CMD);
	uint8_t tmpValue[2] = {0, 0};
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK) {
 8005490:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	uint8_t data = ((address & 0x0F) | TSL2561_CMD);
 8005494:	268c      	movs	r6, #140	; 0x8c
	uint8_t tmpValue[2] = {0, 0};
 8005496:	2500      	movs	r5, #0
bool TSL2561_getData(unsigned int *data0, unsigned int *data1) {
 8005498:	b084      	sub	sp, #16
 800549a:	4607      	mov	r7, r0
 800549c:	4688      	mov	r8, r1
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK) {
 800549e:	9400      	str	r4, [sp, #0]
 80054a0:	f10d 020b 	add.w	r2, sp, #11
 80054a4:	2301      	movs	r3, #1
 80054a6:	2152      	movs	r1, #82	; 0x52
 80054a8:	481b      	ldr	r0, [pc, #108]	; (8005518 <TSL2561_getData+0x8c>)
	uint8_t data = ((address & 0x0F) | TSL2561_CMD);
 80054aa:	f88d 600b 	strb.w	r6, [sp, #11]
	uint8_t tmpValue[2] = {0, 0};
 80054ae:	f8ad 500c 	strh.w	r5, [sp, #12]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK) {
 80054b2:	f001 f8e9 	bl	8006688 <HAL_I2C_Master_Transmit>
 80054b6:	b118      	cbz	r0, 80054c0 <TSL2561_getData+0x34>
 80054b8:	2000      	movs	r0, #0
}
 80054ba:	b004      	add	sp, #16
 80054bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(HAL_I2C_Master_Receive(&hi2c1, (uint16_t) TSL2561_ADDR, tmpValue, 2, 1000) == HAL_OK) {
 80054c0:	9400      	str	r4, [sp, #0]
 80054c2:	aa03      	add	r2, sp, #12
 80054c4:	2302      	movs	r3, #2
 80054c6:	2152      	movs	r1, #82	; 0x52
 80054c8:	4813      	ldr	r0, [pc, #76]	; (8005518 <TSL2561_getData+0x8c>)
 80054ca:	f001 fa5f 	bl	800698c <HAL_I2C_Master_Receive>
 80054ce:	4605      	mov	r5, r0
 80054d0:	2800      	cmp	r0, #0
 80054d2:	d1f1      	bne.n	80054b8 <TSL2561_getData+0x2c>
	uint8_t data = ((address & 0x0F) | TSL2561_CMD);
 80054d4:	208e      	movs	r0, #142	; 0x8e
			low = tmpValue[0];
			high = tmpValue[1];
			// Combine bytes into unsigned int
			*value = high << 8 |  low;
 80054d6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK) {
 80054da:	9400      	str	r4, [sp, #0]
	uint8_t data = ((address & 0x0F) | TSL2561_CMD);
 80054dc:	f88d 000b 	strb.w	r0, [sp, #11]
			*value = high << 8 |  low;
 80054e0:	603b      	str	r3, [r7, #0]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK) {
 80054e2:	f10d 020b 	add.w	r2, sp, #11
 80054e6:	2301      	movs	r3, #1
 80054e8:	2152      	movs	r1, #82	; 0x52
 80054ea:	480b      	ldr	r0, [pc, #44]	; (8005518 <TSL2561_getData+0x8c>)
	uint8_t tmpValue[2] = {0, 0};
 80054ec:	f8ad 500c 	strh.w	r5, [sp, #12]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK) {
 80054f0:	f001 f8ca 	bl	8006688 <HAL_I2C_Master_Transmit>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	d1df      	bne.n	80054b8 <TSL2561_getData+0x2c>
		if(HAL_I2C_Master_Receive(&hi2c1, (uint16_t) TSL2561_ADDR, tmpValue, 2, 1000) == HAL_OK) {
 80054f8:	9400      	str	r4, [sp, #0]
 80054fa:	aa03      	add	r2, sp, #12
 80054fc:	2302      	movs	r3, #2
 80054fe:	2152      	movs	r1, #82	; 0x52
 8005500:	4805      	ldr	r0, [pc, #20]	; (8005518 <TSL2561_getData+0x8c>)
 8005502:	f001 fa43 	bl	800698c <HAL_I2C_Master_Receive>
 8005506:	2800      	cmp	r0, #0
 8005508:	d1d6      	bne.n	80054b8 <TSL2561_getData+0x2c>
			*value = high << 8 |  low;
 800550a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800550e:	2001      	movs	r0, #1
 8005510:	f8c8 3000 	str.w	r3, [r8]
 8005514:	e7d1      	b.n	80054ba <TSL2561_getData+0x2e>
 8005516:	bf00      	nop
 8005518:	20003c90 	.word	0x20003c90
 800551c:	00000000 	.word	0x00000000

08005520 <TSL2561_getLux>:
bool TSL2561_getLux(unsigned char gain, unsigned int ms, unsigned int CH0, unsigned int CH1, double *lux) {
 8005520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((CH0 == 0xFFFF) || (CH1 == 0xFFFF)) {
 8005524:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8005528:	42a2      	cmp	r2, r4
bool TSL2561_getLux(unsigned char gain, unsigned int ms, unsigned int CH0, unsigned int CH1, double *lux) {
 800552a:	b083      	sub	sp, #12
	if ((CH0 == 0xFFFF) || (CH1 == 0xFFFF)) {
 800552c:	d069      	beq.n	8005602 <TSL2561_getLux+0xe2>
 800552e:	42a3      	cmp	r3, r4
 8005530:	d067      	beq.n	8005602 <TSL2561_getLux+0xe2>
 8005532:	9001      	str	r0, [sp, #4]
 8005534:	4610      	mov	r0, r2
 8005536:	461c      	mov	r4, r3
 8005538:	4688      	mov	r8, r1
	d0 = CH0; d1 = CH1;
 800553a:	f7fa ff4b 	bl	80003d4 <__aeabi_ui2d>
 800553e:	4606      	mov	r6, r0
 8005540:	460f      	mov	r7, r1
 8005542:	4620      	mov	r0, r4
 8005544:	f7fa ff46 	bl	80003d4 <__aeabi_ui2d>
	ratio = d1 / d0;
 8005548:	4632      	mov	r2, r6
 800554a:	463b      	mov	r3, r7
	d0 = CH0; d1 = CH1;
 800554c:	4682      	mov	sl, r0
 800554e:	468b      	mov	fp, r1
	ratio = d1 / d0;
 8005550:	f7fb f8e4 	bl	800071c <__aeabi_ddiv>
 8005554:	4604      	mov	r4, r0
	d0 *= (402.0/ms);
 8005556:	4640      	mov	r0, r8
	ratio = d1 / d0;
 8005558:	460d      	mov	r5, r1
	d0 *= (402.0/ms);
 800555a:	f7fa ff3b 	bl	80003d4 <__aeabi_ui2d>
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	a157      	add	r1, pc, #348	; (adr r1, 80056c0 <TSL2561_getLux+0x1a0>)
 8005564:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005568:	f7fb f8d8 	bl	800071c <__aeabi_ddiv>
 800556c:	4632      	mov	r2, r6
 800556e:	463b      	mov	r3, r7
 8005570:	4680      	mov	r8, r0
 8005572:	4689      	mov	r9, r1
 8005574:	f7fa ffa8 	bl	80004c8 <__aeabi_dmul>
	d1 *= (402.0/ms);
 8005578:	465b      	mov	r3, fp
	d0 *= (402.0/ms);
 800557a:	4606      	mov	r6, r0
 800557c:	460f      	mov	r7, r1
	d1 *= (402.0/ms);
 800557e:	4640      	mov	r0, r8
 8005580:	4649      	mov	r1, r9
 8005582:	4652      	mov	r2, sl
 8005584:	f7fa ffa0 	bl	80004c8 <__aeabi_dmul>
	if (!gain) {
 8005588:	9b01      	ldr	r3, [sp, #4]
	d1 *= (402.0/ms);
 800558a:	4680      	mov	r8, r0
 800558c:	4689      	mov	r9, r1
	if (!gain) {
 800558e:	b97b      	cbnz	r3, 80055b0 <TSL2561_getLux+0x90>
		d0 *= 16;
 8005590:	4630      	mov	r0, r6
 8005592:	4639      	mov	r1, r7
 8005594:	2200      	movs	r2, #0
 8005596:	4b64      	ldr	r3, [pc, #400]	; (8005728 <TSL2561_getLux+0x208>)
 8005598:	f7fa ff96 	bl	80004c8 <__aeabi_dmul>
		d1 *= 16;
 800559c:	2200      	movs	r2, #0
		d0 *= 16;
 800559e:	4606      	mov	r6, r0
 80055a0:	460f      	mov	r7, r1
		d1 *= 16;
 80055a2:	4640      	mov	r0, r8
 80055a4:	4649      	mov	r1, r9
 80055a6:	4b60      	ldr	r3, [pc, #384]	; (8005728 <TSL2561_getLux+0x208>)
 80055a8:	f7fa ff8e 	bl	80004c8 <__aeabi_dmul>
 80055ac:	4680      	mov	r8, r0
 80055ae:	4689      	mov	r9, r1
	if (ratio < 0.5) {
 80055b0:	2200      	movs	r2, #0
 80055b2:	4b5e      	ldr	r3, [pc, #376]	; (800572c <TSL2561_getLux+0x20c>)
 80055b4:	4620      	mov	r0, r4
 80055b6:	4629      	mov	r1, r5
 80055b8:	f7fb f9f8 	bl	80009ac <__aeabi_dcmplt>
 80055bc:	2800      	cmp	r0, #0
 80055be:	d148      	bne.n	8005652 <TSL2561_getLux+0x132>
	if (ratio < 0.61) {
 80055c0:	a341      	add	r3, pc, #260	; (adr r3, 80056c8 <TSL2561_getLux+0x1a8>)
 80055c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c6:	4620      	mov	r0, r4
 80055c8:	4629      	mov	r1, r5
 80055ca:	f7fb f9ef 	bl	80009ac <__aeabi_dcmplt>
 80055ce:	bb10      	cbnz	r0, 8005616 <TSL2561_getLux+0xf6>
	if (ratio < 0.80) {
 80055d0:	a33f      	add	r3, pc, #252	; (adr r3, 80056d0 <TSL2561_getLux+0x1b0>)
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	4620      	mov	r0, r4
 80055d8:	4629      	mov	r1, r5
 80055da:	f7fb f9e7 	bl	80009ac <__aeabi_dcmplt>
 80055de:	2800      	cmp	r0, #0
 80055e0:	d153      	bne.n	800568a <TSL2561_getLux+0x16a>
	if (ratio < 1.30) {
 80055e2:	a33d      	add	r3, pc, #244	; (adr r3, 80056d8 <TSL2561_getLux+0x1b8>)
 80055e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e8:	4620      	mov	r0, r4
 80055ea:	4629      	mov	r1, r5
 80055ec:	f7fb f9de 	bl	80009ac <__aeabi_dcmplt>
 80055f0:	2800      	cmp	r0, #0
 80055f2:	d157      	bne.n	80056a4 <TSL2561_getLux+0x184>
	*lux = 0.0;
 80055f4:	2000      	movs	r0, #0
 80055f6:	2100      	movs	r1, #0
 80055f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	return true;
 80055fa:	2301      	movs	r3, #1
	*lux = 0.0;
 80055fc:	e9c2 0100 	strd	r0, r1, [r2]
	return true;
 8005600:	e005      	b.n	800560e <TSL2561_getLux+0xee>
		*lux = 0.0;
 8005602:	2000      	movs	r0, #0
 8005604:	2100      	movs	r1, #0
		return false;
 8005606:	2300      	movs	r3, #0
		*lux = 0.0;
 8005608:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800560a:	e9c2 0100 	strd	r0, r1, [r2]
}
 800560e:	4618      	mov	r0, r3
 8005610:	b003      	add	sp, #12
 8005612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*lux = 0.0224 * d0 - 0.031 * d1;
 8005616:	a332      	add	r3, pc, #200	; (adr r3, 80056e0 <TSL2561_getLux+0x1c0>)
 8005618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561c:	4630      	mov	r0, r6
 800561e:	4639      	mov	r1, r7
 8005620:	f7fa ff52 	bl	80004c8 <__aeabi_dmul>
 8005624:	a330      	add	r3, pc, #192	; (adr r3, 80056e8 <TSL2561_getLux+0x1c8>)
 8005626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562a:	4604      	mov	r4, r0
 800562c:	460d      	mov	r5, r1
 800562e:	4640      	mov	r0, r8
 8005630:	4649      	mov	r1, r9
 8005632:	f7fa ff49 	bl	80004c8 <__aeabi_dmul>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	4620      	mov	r0, r4
 800563c:	4629      	mov	r1, r5
 800563e:	f7fa fd8b 	bl	8000158 <__aeabi_dsub>
		return true;
 8005642:	2301      	movs	r3, #1
		*lux = 0.0224 * d0 - 0.031 * d1;
 8005644:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005646:	e9c2 0100 	strd	r0, r1, [r2]
}
 800564a:	4618      	mov	r0, r3
 800564c:	b003      	add	sp, #12
 800564e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*lux = 0.0304 * d0 - 0.062 * d0 * pow(ratio,1.4);
 8005652:	a327      	add	r3, pc, #156	; (adr r3, 80056f0 <TSL2561_getLux+0x1d0>)
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	4620      	mov	r0, r4
 800565a:	4629      	mov	r1, r5
 800565c:	f005 fa7c 	bl	800ab58 <pow>
 8005660:	a325      	add	r3, pc, #148	; (adr r3, 80056f8 <TSL2561_getLux+0x1d8>)
 8005662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005666:	4680      	mov	r8, r0
 8005668:	4689      	mov	r9, r1
 800566a:	4630      	mov	r0, r6
 800566c:	4639      	mov	r1, r7
 800566e:	f7fa ff2b 	bl	80004c8 <__aeabi_dmul>
 8005672:	a323      	add	r3, pc, #140	; (adr r3, 8005700 <TSL2561_getLux+0x1e0>)
 8005674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005678:	4604      	mov	r4, r0
 800567a:	460d      	mov	r5, r1
 800567c:	4630      	mov	r0, r6
 800567e:	4639      	mov	r1, r7
 8005680:	f7fa ff22 	bl	80004c8 <__aeabi_dmul>
 8005684:	4642      	mov	r2, r8
 8005686:	464b      	mov	r3, r9
 8005688:	e7d3      	b.n	8005632 <TSL2561_getLux+0x112>
		*lux = 0.0128 * d0 - 0.0153 * d1;
 800568a:	a31f      	add	r3, pc, #124	; (adr r3, 8005708 <TSL2561_getLux+0x1e8>)
 800568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005690:	4630      	mov	r0, r6
 8005692:	4639      	mov	r1, r7
 8005694:	f7fa ff18 	bl	80004c8 <__aeabi_dmul>
 8005698:	a31d      	add	r3, pc, #116	; (adr r3, 8005710 <TSL2561_getLux+0x1f0>)
 800569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569e:	4604      	mov	r4, r0
 80056a0:	460d      	mov	r5, r1
 80056a2:	e7c4      	b.n	800562e <TSL2561_getLux+0x10e>
		*lux = 0.00146 * d0 - 0.00112 * d1;
 80056a4:	a31c      	add	r3, pc, #112	; (adr r3, 8005718 <TSL2561_getLux+0x1f8>)
 80056a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056aa:	4630      	mov	r0, r6
 80056ac:	4639      	mov	r1, r7
 80056ae:	f7fa ff0b 	bl	80004c8 <__aeabi_dmul>
 80056b2:	a31b      	add	r3, pc, #108	; (adr r3, 8005720 <TSL2561_getLux+0x200>)
 80056b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b8:	4604      	mov	r4, r0
 80056ba:	460d      	mov	r5, r1
 80056bc:	e7b7      	b.n	800562e <TSL2561_getLux+0x10e>
 80056be:	bf00      	nop
 80056c0:	00000000 	.word	0x00000000
 80056c4:	40792000 	.word	0x40792000
 80056c8:	b851eb85 	.word	0xb851eb85
 80056cc:	3fe3851e 	.word	0x3fe3851e
 80056d0:	9999999a 	.word	0x9999999a
 80056d4:	3fe99999 	.word	0x3fe99999
 80056d8:	cccccccd 	.word	0xcccccccd
 80056dc:	3ff4cccc 	.word	0x3ff4cccc
 80056e0:	8db8bac7 	.word	0x8db8bac7
 80056e4:	3f96f006 	.word	0x3f96f006
 80056e8:	c8b43958 	.word	0xc8b43958
 80056ec:	3f9fbe76 	.word	0x3f9fbe76
 80056f0:	66666666 	.word	0x66666666
 80056f4:	3ff66666 	.word	0x3ff66666
 80056f8:	77318fc5 	.word	0x77318fc5
 80056fc:	3f9f212d 	.word	0x3f9f212d
 8005700:	c8b43958 	.word	0xc8b43958
 8005704:	3fafbe76 	.word	0x3fafbe76
 8005708:	eb1c432d 	.word	0xeb1c432d
 800570c:	3f8a36e2 	.word	0x3f8a36e2
 8005710:	3d07c84b 	.word	0x3d07c84b
 8005714:	3f8f559b 	.word	0x3f8f559b
 8005718:	102363b2 	.word	0x102363b2
 800571c:	3f57ebaf 	.word	0x3f57ebaf
 8005720:	d7c6fbd2 	.word	0xd7c6fbd2
 8005724:	3f52599e 	.word	0x3f52599e
 8005728:	40300000 	.word	0x40300000
 800572c:	3fe00000 	.word	0x3fe00000

08005730 <configureTimerForRunTimeStats>:
/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{

}
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop

08005734 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
return 0;
}
 8005734:	2000      	movs	r0, #0
 8005736:	4770      	bx	lr

08005738 <user_i2c_read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8005738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 800573c:	260a      	movs	r6, #10
{
 800573e:	b084      	sub	sp, #16
 8005740:	ac04      	add	r4, sp, #16
 8005742:	f804 1d01 	strb.w	r1, [r4, #-1]!
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8005746:	0045      	lsls	r5, r0, #1
{
 8005748:	4617      	mov	r7, r2
 800574a:	4698      	mov	r8, r3
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 800574c:	4622      	mov	r2, r4
 800574e:	4629      	mov	r1, r5
 8005750:	9600      	str	r6, [sp, #0]
 8005752:	2301      	movs	r3, #1
 8005754:	480a      	ldr	r0, [pc, #40]	; (8005780 <user_i2c_read+0x48>)
 8005756:	f000 ff97 	bl	8006688 <HAL_I2C_Master_Transmit>
 800575a:	b970      	cbnz	r0, 800577a <user_i2c_read+0x42>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 800575c:	9600      	str	r6, [sp, #0]
 800575e:	4643      	mov	r3, r8
 8005760:	463a      	mov	r2, r7
 8005762:	f045 0101 	orr.w	r1, r5, #1
 8005766:	4806      	ldr	r0, [pc, #24]	; (8005780 <user_i2c_read+0x48>)
 8005768:	f001 f910 	bl	800698c <HAL_I2C_Master_Receive>
 800576c:	3000      	adds	r0, #0
 800576e:	bf18      	it	ne
 8005770:	2001      	movne	r0, #1
 8005772:	4240      	negs	r0, r0

  return 0;
}
 8005774:	b004      	add	sp, #16
 8005776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 800577a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800577e:	e7f9      	b.n	8005774 <user_i2c_read+0x3c>
 8005780:	20003c90 	.word	0x20003c90

08005784 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
  HAL_Delay(period);
 8005784:	f000 bcf6 	b.w	8006174 <HAL_Delay>

08005788 <user_i2c_write>:
}

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8005788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int8_t *buf;
  buf = malloc(len +1);
 800578c:	1c5e      	adds	r6, r3, #1
{
 800578e:	b082      	sub	sp, #8
 8005790:	4604      	mov	r4, r0
  buf = malloc(len +1);
 8005792:	4630      	mov	r0, r6
{
 8005794:	461f      	mov	r7, r3
 8005796:	468a      	mov	sl, r1
 8005798:	4691      	mov	r9, r2
  buf = malloc(len +1);
 800579a:	f006 fa35 	bl	800bc08 <malloc>
  buf[0] = reg_addr;
  memcpy(buf +1, data, len);
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 800579e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  buf = malloc(len +1);
 80057a2:	4605      	mov	r5, r0
  memcpy(buf +1, data, len);
 80057a4:	463a      	mov	r2, r7
 80057a6:	4649      	mov	r1, r9
  buf[0] = reg_addr;
 80057a8:	f800 ab01 	strb.w	sl, [r0], #1
  memcpy(buf +1, data, len);
 80057ac:	f006 fa3c 	bl	800bc28 <memcpy>
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 80057b0:	b2b3      	uxth	r3, r6
 80057b2:	0061      	lsls	r1, r4, #1
 80057b4:	462a      	mov	r2, r5
 80057b6:	f8cd 8000 	str.w	r8, [sp]
 80057ba:	4807      	ldr	r0, [pc, #28]	; (80057d8 <user_i2c_write+0x50>)
 80057bc:	f000 ff64 	bl	8006688 <HAL_I2C_Master_Transmit>
 80057c0:	b938      	cbnz	r0, 80057d2 <user_i2c_write+0x4a>
 80057c2:	4604      	mov	r4, r0
  free(buf);
 80057c4:	4628      	mov	r0, r5
 80057c6:	f006 fa27 	bl	800bc18 <free>
  return 0;
 80057ca:	4620      	mov	r0, r4
}
 80057cc:	b002      	add	sp, #8
 80057ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 80057d2:	4640      	mov	r0, r8
 80057d4:	e7fa      	b.n	80057cc <user_i2c_write+0x44>
 80057d6:	bf00      	nop
 80057d8:	20003c90 	.word	0x20003c90

080057dc <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8005840 <StartTask01+0x64>
 80057e4:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8005844 <StartTask01+0x68>
 80057e8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8005848 <StartTask01+0x6c>
	if (TSL2561_getData(&data0, &data1))
	{
		double lux;
		TSL2561_getLux(gain, ms, data0, data1, &lux);
		sensors_data.lux = lux;
		lora_sensor_set_data(&illumination_sensor,(float)lux);
 80057ec:	4f13      	ldr	r7, [pc, #76]	; (800583c <StartTask01+0x60>)
 80057ee:	ae04      	add	r6, sp, #16
 80057f0:	e003      	b.n	80057fa <StartTask01+0x1e>
	}
	osDelay(1000);
 80057f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80057f6:	f003 fac5 	bl	8008d84 <osDelay>
	if (TSL2561_getData(&data0, &data1))
 80057fa:	a903      	add	r1, sp, #12
 80057fc:	a802      	add	r0, sp, #8
 80057fe:	f7ff fe45 	bl	800548c <TSL2561_getData>
 8005802:	2800      	cmp	r0, #0
 8005804:	d0f5      	beq.n	80057f2 <StartTask01+0x16>
		TSL2561_getLux(gain, ms, data0, data1, &lux);
 8005806:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800580a:	f8da 1000 	ldr.w	r1, [sl]
 800580e:	f899 0000 	ldrb.w	r0, [r9]
 8005812:	9600      	str	r6, [sp, #0]
 8005814:	f7ff fe84 	bl	8005520 <TSL2561_getLux>
		sensors_data.lux = lux;
 8005818:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800581c:	4629      	mov	r1, r5
 800581e:	4620      	mov	r0, r4
 8005820:	f7fb f902 	bl	8000a28 <__aeabi_d2uiz>
		lora_sensor_set_data(&illumination_sensor,(float)lux);
 8005824:	4629      	mov	r1, r5
		sensors_data.lux = lux;
 8005826:	f8a8 0000 	strh.w	r0, [r8]
		lora_sensor_set_data(&illumination_sensor,(float)lux);
 800582a:	4620      	mov	r0, r4
 800582c:	f7fb f91c 	bl	8000a68 <__aeabi_d2f>
 8005830:	4601      	mov	r1, r0
 8005832:	4638      	mov	r0, r7
 8005834:	f000 fc24 	bl	8006080 <lora_sensor_set_data>
 8005838:	e7db      	b.n	80057f2 <StartTask01+0x16>
 800583a:	bf00      	nop
 800583c:	20003cf4 	.word	0x20003cf4
 8005840:	20001bd4 	.word	0x20001bd4
 8005844:	20001bd0 	.word	0x20001bd0
 8005848:	20003da8 	.word	0x20003da8
 800584c:	00000000 	.word	0x00000000

08005850 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8005850:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8005914 <StartTask02+0xc4>
 8005854:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8005918 <StartTask02+0xc8>
 8005858:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
	if(rslt == BME280_OK)
	{
		sensors_data.temperature = comp_data.temperature / 100.0;      /* C  */
		sensors_data.humidity = comp_data.humidity / 1024.0;           /* %   */
		sensors_data.pressure = comp_data.pressure / 10000.0 / 1.333;  /* hPa or mmhg */
 800585c:	a726      	add	r7, pc, #152	; (adr r7, 80058f8 <StartTask02+0xa8>)
 800585e:	e9d7 6700 	ldrd	r6, r7, [r7]
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8005862:	4655      	mov	r5, sl
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8005864:	46c3      	mov	fp, r8
 8005866:	4c28      	ldr	r4, [pc, #160]	; (8005908 <StartTask02+0xb8>)
 8005868:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800591c <StartTask02+0xcc>
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 800586c:	4629      	mov	r1, r5
 800586e:	2003      	movs	r0, #3
 8005870:	f7ff faf2 	bl	8004e58 <bme280_set_sensor_mode>
	dev.delay_ms(40);
 8005874:	f8da 300c 	ldr.w	r3, [sl, #12]
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8005878:	7020      	strb	r0, [r4, #0]
	dev.delay_ms(40);
 800587a:	2028      	movs	r0, #40	; 0x28
 800587c:	4798      	blx	r3
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 800587e:	462a      	mov	r2, r5
 8005880:	4659      	mov	r1, fp
 8005882:	2007      	movs	r0, #7
 8005884:	f7ff fb38 	bl	8004ef8 <bme280_get_sensor_data>
 8005888:	7020      	strb	r0, [r4, #0]
	if(rslt == BME280_OK)
 800588a:	bb40      	cbnz	r0, 80058de <StartTask02+0x8e>
		sensors_data.temperature = comp_data.temperature / 100.0;      /* C  */
 800588c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005890:	f7fa fdb0 	bl	80003f4 <__aeabi_i2d>
 8005894:	2200      	movs	r2, #0
 8005896:	4b1d      	ldr	r3, [pc, #116]	; (800590c <StartTask02+0xbc>)
 8005898:	f7fa ff40 	bl	800071c <__aeabi_ddiv>
 800589c:	f7fb f8c4 	bl	8000a28 <__aeabi_d2uiz>
 80058a0:	f8a9 0002 	strh.w	r0, [r9, #2]
		sensors_data.humidity = comp_data.humidity / 1024.0;           /* %   */
 80058a4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80058a8:	f7fa fd94 	bl	80003d4 <__aeabi_ui2d>
 80058ac:	2200      	movs	r2, #0
 80058ae:	4b18      	ldr	r3, [pc, #96]	; (8005910 <StartTask02+0xc0>)
 80058b0:	f7fa fe0a 	bl	80004c8 <__aeabi_dmul>
 80058b4:	f7fb f8b8 	bl	8000a28 <__aeabi_d2uiz>
 80058b8:	f8a9 0004 	strh.w	r0, [r9, #4]
		sensors_data.pressure = comp_data.pressure / 10000.0 / 1.333;  /* hPa or mmhg */
 80058bc:	f8d8 0000 	ldr.w	r0, [r8]
 80058c0:	f7fa fd88 	bl	80003d4 <__aeabi_ui2d>
 80058c4:	4632      	mov	r2, r6
 80058c6:	463b      	mov	r3, r7
 80058c8:	f7fa ff28 	bl	800071c <__aeabi_ddiv>
 80058cc:	a30c      	add	r3, pc, #48	; (adr r3, 8005900 <StartTask02+0xb0>)
 80058ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d2:	f7fa ff23 	bl	800071c <__aeabi_ddiv>
 80058d6:	f7fb f8a7 	bl	8000a28 <__aeabi_d2uiz>
 80058da:	f8a9 0006 	strh.w	r0, [r9, #6]
	}
	rslt = bme280_set_sensor_mode(BME280_SLEEP_MODE, &dev);
 80058de:	4629      	mov	r1, r5
 80058e0:	2000      	movs	r0, #0
 80058e2:	f7ff fab9 	bl	8004e58 <bme280_set_sensor_mode>
 80058e6:	7020      	strb	r0, [r4, #0]
    osDelay(1000);
 80058e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058ec:	f003 fa4a 	bl	8008d84 <osDelay>
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 80058f0:	e7bc      	b.n	800586c <StartTask02+0x1c>
 80058f2:	bf00      	nop
 80058f4:	f3af 8000 	nop.w
 80058f8:	00000000 	.word	0x00000000
 80058fc:	40c38800 	.word	0x40c38800
 8005900:	ced91687 	.word	0xced91687
 8005904:	3ff553f7 	.word	0x3ff553f7
 8005908:	20003c8c 	.word	0x20003c8c
 800590c:	40590000 	.word	0x40590000
 8005910:	3f500000 	.word	0x3f500000
 8005914:	20000018 	.word	0x20000018
 8005918:	20003ce4 	.word	0x20003ce4
 800591c:	20003da8 	.word	0x20003da8

08005920 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8005920:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	//lora_module_introduce(&lora_module, &sensors_data);
	lora_module_send_packet_read_data(&lora_module);
 8005922:	4c04      	ldr	r4, [pc, #16]	; (8005934 <StartTask03+0x14>)
 8005924:	4620      	mov	r0, r4
 8005926:	f000 fb27 	bl	8005f78 <lora_module_send_packet_read_data>
    osDelay(1000);
 800592a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800592e:	f003 fa29 	bl	8008d84 <osDelay>
 8005932:	e7f7      	b.n	8005924 <StartTask03+0x4>
 8005934:	20000058 	.word	0x20000058

08005938 <SystemClock_Config>:
{
 8005938:	b510      	push	{r4, lr}
 800593a:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800593c:	2224      	movs	r2, #36	; 0x24
 800593e:	2100      	movs	r1, #0
 8005940:	a807      	add	r0, sp, #28
 8005942:	f006 f995 	bl	800bc70 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005946:	2402      	movs	r4, #2
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005948:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800594a:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800594c:	2210      	movs	r2, #16
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800594e:	a806      	add	r0, sp, #24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005950:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8005954:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005958:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800595c:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005960:	f002 fa98 	bl	8007e94 <HAL_RCC_OscConfig>
 8005964:	b108      	cbz	r0, 800596a <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005966:	b672      	cpsid	i
 8005968:	e7fe      	b.n	8005968 <SystemClock_Config+0x30>
 800596a:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800596c:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800596e:	a801      	add	r0, sp, #4
 8005970:	4619      	mov	r1, r3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005972:	e9cd 3302 	strd	r3, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005976:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800597a:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800597c:	f002 fc82 	bl	8008284 <HAL_RCC_ClockConfig>
 8005980:	b108      	cbz	r0, 8005986 <SystemClock_Config+0x4e>
 8005982:	b672      	cpsid	i
 8005984:	e7fe      	b.n	8005984 <SystemClock_Config+0x4c>
}
 8005986:	b010      	add	sp, #64	; 0x40
 8005988:	bd10      	pop	{r4, pc}
 800598a:	bf00      	nop
 800598c:	0000      	movs	r0, r0
	...

08005990 <main>:
{
 8005990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005994:	2400      	movs	r4, #0
{
 8005996:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8005998:	f000 fbc8 	bl	800612c <HAL_Init>
  SystemClock_Config();
 800599c:	f7ff ffcc 	bl	8005938 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059a0:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 80059a4:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80059a8:	4b95      	ldr	r3, [pc, #596]	; (8005c00 <main+0x270>)
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin, GPIO_PIN_RESET);
 80059aa:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80059ac:	6999      	ldr	r1, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059ae:	2602      	movs	r6, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80059b0:	f041 0120 	orr.w	r1, r1, #32
 80059b4:	6199      	str	r1, [r3, #24]
 80059b6:	6998      	ldr	r0, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin, GPIO_PIN_RESET);
 80059b8:	f641 4110 	movw	r1, #7184	; 0x1c10
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80059bc:	f000 0020 	and.w	r0, r0, #32
 80059c0:	9007      	str	r0, [sp, #28]
 80059c2:	9807      	ldr	r0, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80059c4:	699d      	ldr	r5, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin, GPIO_PIN_RESET);
 80059c6:	488f      	ldr	r0, [pc, #572]	; (8005c04 <main+0x274>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80059c8:	f045 0504 	orr.w	r5, r5, #4
 80059cc:	619d      	str	r5, [r3, #24]
 80059ce:	699d      	ldr	r5, [r3, #24]
 80059d0:	f005 0504 	and.w	r5, r5, #4
 80059d4:	9508      	str	r5, [sp, #32]
 80059d6:	9d08      	ldr	r5, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80059d8:	699d      	ldr	r5, [r3, #24]
 80059da:	f045 0508 	orr.w	r5, r5, #8
 80059de:	619d      	str	r5, [r3, #24]
 80059e0:	699b      	ldr	r3, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059e2:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80059e4:	f003 0308 	and.w	r3, r3, #8
 80059e8:	9309      	str	r3, [sp, #36]	; 0x24
 80059ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin, GPIO_PIN_RESET);
 80059ec:	f000 fd7a 	bl	80064e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LORA_RESET_Pin|CO2_WAKE_UP_Pin, GPIO_PIN_RESET);
 80059f0:	4622      	mov	r2, r4
 80059f2:	f44f 6101 	mov.w	r1, #2064	; 0x810
 80059f6:	4884      	ldr	r0, [pc, #528]	; (8005c08 <main+0x278>)
 80059f8:	f000 fd74 	bl	80064e4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin;
 80059fc:	f641 4310 	movw	r3, #7184	; 0x1c10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a00:	a90a      	add	r1, sp, #40	; 0x28
 8005a02:	4880      	ldr	r0, [pc, #512]	; (8005c04 <main+0x274>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a04:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a08:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a0a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a0c:	f000 fc6a 	bl	80062e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LORA_DIO1_Pin|LORA_DIO0_Pin;
 8005a10:	f240 4204 	movw	r2, #1028	; 0x404
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005a14:	4b7d      	ldr	r3, [pc, #500]	; (8005c0c <main+0x27c>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a16:	a90a      	add	r1, sp, #40	; 0x28
 8005a18:	487b      	ldr	r0, [pc, #492]	; (8005c08 <main+0x278>)
  GPIO_InitStruct.Pin = LORA_DIO1_Pin|LORA_DIO0_Pin;
 8005a1a:	920a      	str	r2, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005a1c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a1e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a20:	f000 fc60 	bl	80062e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LORA_RESET_Pin|CO2_WAKE_UP_Pin;
 8005a24:	f44f 6301 	mov.w	r3, #2064	; 0x810
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a28:	a90a      	add	r1, sp, #40	; 0x28
 8005a2a:	4877      	ldr	r0, [pc, #476]	; (8005c08 <main+0x278>)
  GPIO_InitStruct.Pin = LORA_RESET_Pin|CO2_WAKE_UP_Pin;
 8005a2c:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a2e:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a30:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a34:	f000 fc56 	bl	80062e4 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8005a38:	4622      	mov	r2, r4
 8005a3a:	2105      	movs	r1, #5
 8005a3c:	2008      	movs	r0, #8
 8005a3e:	f000 fbbd 	bl	80061bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005a42:	2008      	movs	r0, #8
 8005a44:	f000 fbf0 	bl	8006228 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8005a48:	4622      	mov	r2, r4
 8005a4a:	2105      	movs	r1, #5
 8005a4c:	2028      	movs	r0, #40	; 0x28
 8005a4e:	f000 fbb5 	bl	80061bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005a52:	2028      	movs	r0, #40	; 0x28
 8005a54:	f000 fbe8 	bl	8006228 <HAL_NVIC_EnableIRQ>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005a58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Instance = I2C1;
 8005a5c:	4b6c      	ldr	r3, [pc, #432]	; (8005c10 <main+0x280>)
 8005a5e:	4e6d      	ldr	r6, [pc, #436]	; (8005c14 <main+0x284>)
  hi2c1.Init.ClockSpeed = 400000;
 8005a60:	496d      	ldr	r1, [pc, #436]	; (8005c18 <main+0x288>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005a62:	4618      	mov	r0, r3
  hi2c1.Init.OwnAddress1 = 0;
 8005a64:	e9c3 4402 	strd	r4, r4, [r3, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8005a68:	e9c3 4405 	strd	r4, r4, [r3, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005a6c:	e9c3 4407 	strd	r4, r4, [r3, #28]
  hi2c1.Init.ClockSpeed = 400000;
 8005a70:	e9c3 6100 	strd	r6, r1, [r3]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005a74:	611a      	str	r2, [r3, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005a76:	f000 fd47 	bl	8006508 <HAL_I2C_Init>
 8005a7a:	b108      	cbz	r0, 8005a80 <main+0xf0>
 8005a7c:	b672      	cpsid	i
 8005a7e:	e7fe      	b.n	8005a7e <main+0xee>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005a80:	f44f 7782 	mov.w	r7, #260	; 0x104
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005a84:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005a88:	2220      	movs	r2, #32
  hspi1.Init.CRCPolynomial = 10;
 8005a8a:	230a      	movs	r3, #10
  hspi1.Instance = SPI1;
 8005a8c:	4c63      	ldr	r4, [pc, #396]	; (8005c1c <main+0x28c>)
 8005a8e:	4e64      	ldr	r6, [pc, #400]	; (8005c20 <main+0x290>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005a90:	e9c4 7001 	strd	r7, r0, [r4, #4]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a94:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005a98:	6160      	str	r0, [r4, #20]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005a9a:	e9c4 0008 	strd	r0, r0, [r4, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a9e:	62a0      	str	r0, [r4, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005aa0:	4620      	mov	r0, r4
  hspi1.Instance = SPI1;
 8005aa2:	6026      	str	r6, [r4, #0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005aa4:	e9c4 1206 	strd	r1, r2, [r4, #24]
  hspi1.Init.CRCPolynomial = 10;
 8005aa8:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005aaa:	f002 fd47 	bl	800853c <HAL_SPI_Init>
 8005aae:	b108      	cbz	r0, 8005ab4 <main+0x124>
 8005ab0:	b672      	cpsid	i
 8005ab2:	e7fe      	b.n	8005ab2 <main+0x122>
  LoRa_init(&hspi1);
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	f000 faf3 	bl	80060a0 <LoRa_init>
  result = LoRa_begin(BAND, true, 14, 7, 250E3, 0x4A);
 8005aba:	a14f      	add	r1, pc, #316	; (adr r1, 8005bf8 <main+0x268>)
 8005abc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ac0:	224a      	movs	r2, #74	; 0x4a
 8005ac2:	2307      	movs	r3, #7
 8005ac4:	2700      	movs	r7, #0
 8005ac6:	4e57      	ldr	r6, [pc, #348]	; (8005c24 <main+0x294>)
 8005ac8:	9204      	str	r2, [sp, #16]
 8005aca:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	462a      	mov	r2, r5
 8005ad2:	230e      	movs	r3, #14
 8005ad4:	f000 faea 	bl	80060ac <LoRa_begin>
 8005ad8:	4e53      	ldr	r6, [pc, #332]	; (8005c28 <main+0x298>)
 8005ada:	4604      	mov	r4, r0
 8005adc:	7030      	strb	r0, [r6, #0]
  if(result == 0) {
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	d033      	beq.n	8005b4a <main+0x1ba>
  lora_sensor_init(&illumination_sensor, 6 , 0);
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	2106      	movs	r1, #6
 8005ae6:	4851      	ldr	r0, [pc, #324]	; (8005c2c <main+0x29c>)
 8005ae8:	f000 fac0 	bl	800606c <lora_sensor_init>
  TSL2561_setTiming_ms (gain, time, & ms);
 8005aec:	4b50      	ldr	r3, [pc, #320]	; (8005c30 <main+0x2a0>)
  rslt = bme280_init(&dev);
 8005aee:	4c51      	ldr	r4, [pc, #324]	; (8005c34 <main+0x2a4>)
  TSL2561_setTiming_ms (gain, time, & ms);
 8005af0:	4a51      	ldr	r2, [pc, #324]	; (8005c38 <main+0x2a8>)
 8005af2:	7818      	ldrb	r0, [r3, #0]
 8005af4:	2102      	movs	r1, #2
 8005af6:	f7ff fc75 	bl	80053e4 <TSL2561_setTiming_ms>
  TSL2561_setPowerUp ();
 8005afa:	f7ff fc5b 	bl	80053b4 <TSL2561_setPowerUp>
  rslt = bme280_init(&dev);
 8005afe:	4620      	mov	r0, r4
 8005b00:	f7fe ffba 	bl	8004a78 <bme280_init>
 8005b04:	4d4d      	ldr	r5, [pc, #308]	; (8005c3c <main+0x2ac>)
  dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8005b06:	4b4e      	ldr	r3, [pc, #312]	; (8005c40 <main+0x2b0>)
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8005b08:	4621      	mov	r1, r4
  dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8005b0a:	63a3      	str	r3, [r4, #56]	; 0x38
  rslt = bme280_init(&dev);
 8005b0c:	7028      	strb	r0, [r5, #0]
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8005b0e:	200f      	movs	r0, #15
 8005b10:	f7ff f8ae 	bl	8004c70 <bme280_set_sensor_settings>
 8005b14:	7028      	strb	r0, [r5, #0]
  osKernelInitialize();
 8005b16:	f003 f89f 	bl	8008c58 <osKernelInitialize>
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 8005b1a:	4a4a      	ldr	r2, [pc, #296]	; (8005c44 <main+0x2b4>)
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	484a      	ldr	r0, [pc, #296]	; (8005c48 <main+0x2b8>)
 8005b20:	f003 f8d6 	bl	8008cd0 <osThreadNew>
 8005b24:	4b49      	ldr	r3, [pc, #292]	; (8005c4c <main+0x2bc>)
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8005b26:	4a4a      	ldr	r2, [pc, #296]	; (8005c50 <main+0x2c0>)
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 8005b28:	6018      	str	r0, [r3, #0]
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	4849      	ldr	r0, [pc, #292]	; (8005c54 <main+0x2c4>)
 8005b2e:	f003 f8cf 	bl	8008cd0 <osThreadNew>
 8005b32:	4b49      	ldr	r3, [pc, #292]	; (8005c58 <main+0x2c8>)
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 8005b34:	4a49      	ldr	r2, [pc, #292]	; (8005c5c <main+0x2cc>)
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8005b36:	6018      	str	r0, [r3, #0]
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 8005b38:	2100      	movs	r1, #0
 8005b3a:	4849      	ldr	r0, [pc, #292]	; (8005c60 <main+0x2d0>)
 8005b3c:	f003 f8c8 	bl	8008cd0 <osThreadNew>
 8005b40:	4b48      	ldr	r3, [pc, #288]	; (8005c64 <main+0x2d4>)
 8005b42:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8005b44:	f003 f8a2 	bl	8008c8c <osKernelStart>
 8005b48:	e7fe      	b.n	8005b48 <main+0x1b8>
	  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 8005b4a:	462a      	mov	r2, r5
 8005b4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b50:	482c      	ldr	r0, [pc, #176]	; (8005c04 <main+0x274>)
 8005b52:	f000 fcc7 	bl	80064e4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_SET);
 8005b56:	462a      	mov	r2, r5
 8005b58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005b5c:	4829      	ldr	r0, [pc, #164]	; (8005c04 <main+0x274>)
 8005b5e:	f000 fcc1 	bl	80064e4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_SET);
 8005b62:	462a      	mov	r2, r5
 8005b64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b68:	4826      	ldr	r0, [pc, #152]	; (8005c04 <main+0x274>)
 8005b6a:	f000 fcbb 	bl	80064e4 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8005b6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005b72:	f000 faff 	bl	8006174 <HAL_Delay>
	  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_RESET);
 8005b76:	4622      	mov	r2, r4
 8005b78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b7c:	4821      	ldr	r0, [pc, #132]	; (8005c04 <main+0x274>)
 8005b7e:	f000 fcb1 	bl	80064e4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_RESET);
 8005b82:	4622      	mov	r2, r4
 8005b84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005b88:	481e      	ldr	r0, [pc, #120]	; (8005c04 <main+0x274>)
 8005b8a:	f000 fcab 	bl	80064e4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_RESET);
 8005b8e:	4622      	mov	r2, r4
 8005b90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b94:	481b      	ldr	r0, [pc, #108]	; (8005c04 <main+0x274>)
 8005b96:	f000 fca5 	bl	80064e4 <HAL_GPIO_WritePin>
	  while(result != 0) {
 8005b9a:	7833      	ldrb	r3, [r6, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0a0      	beq.n	8005ae2 <main+0x152>
		  result = LoRa_begin(BAND, true, 14, 11, 125E3, 0x4A);
 8005ba0:	f20f 0954 	addw	r9, pc, #84	; 0x54
 8005ba4:	e9d9 8900 	ldrd	r8, r9, [r9]
 8005ba8:	2500      	movs	r5, #0
 8005baa:	4c2f      	ldr	r4, [pc, #188]	; (8005c68 <main+0x2d8>)
			  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 8005bac:	4f15      	ldr	r7, [pc, #84]	; (8005c04 <main+0x274>)
		  result = LoRa_begin(BAND, true, 14, 11, 125E3, 0x4A);
 8005bae:	224a      	movs	r2, #74	; 0x4a
 8005bb0:	230b      	movs	r3, #11
 8005bb2:	9204      	str	r2, [sp, #16]
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	230e      	movs	r3, #14
 8005bba:	4649      	mov	r1, r9
 8005bbc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005bc0:	4640      	mov	r0, r8
 8005bc2:	f000 fa73 	bl	80060ac <LoRa_begin>
			  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 8005bc6:	2201      	movs	r2, #1
		  result = LoRa_begin(BAND, true, 14, 11, 125E3, 0x4A);
 8005bc8:	7030      	strb	r0, [r6, #0]
			  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 8005bca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005bce:	4638      	mov	r0, r7
 8005bd0:	f000 fc88 	bl	80064e4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_RESET);
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005bda:	4638      	mov	r0, r7
 8005bdc:	f000 fc82 	bl	80064e4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_RESET);
 8005be0:	2200      	movs	r2, #0
 8005be2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005be6:	4638      	mov	r0, r7
 8005be8:	f000 fc7c 	bl	80064e4 <HAL_GPIO_WritePin>
	  while(result != 0) {
 8005bec:	7833      	ldrb	r3, [r6, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1dd      	bne.n	8005bae <main+0x21e>
 8005bf2:	e776      	b.n	8005ae2 <main+0x152>
 8005bf4:	f3af 8000 	nop.w
 8005bf8:	19d2ded0 	.word	0x19d2ded0
 8005bfc:	00000000 	.word	0x00000000
 8005c00:	40021000 	.word	0x40021000
 8005c04:	40010800 	.word	0x40010800
 8005c08:	40010c00 	.word	0x40010c00
 8005c0c:	10110000 	.word	0x10110000
 8005c10:	20003c90 	.word	0x20003c90
 8005c14:	40005400 	.word	0x40005400
 8005c18:	00061a80 	.word	0x00061a80
 8005c1c:	20003d08 	.word	0x20003d08
 8005c20:	40013000 	.word	0x40013000
 8005c24:	0003d090 	.word	0x0003d090
 8005c28:	20003d00 	.word	0x20003d00
 8005c2c:	20003cf4 	.word	0x20003cf4
 8005c30:	20001bd0 	.word	0x20001bd0
 8005c34:	20000018 	.word	0x20000018
 8005c38:	20001bd4 	.word	0x20001bd4
 8005c3c:	20003c8c 	.word	0x20003c8c
 8005c40:	04010205 	.word	0x04010205
 8005c44:	0800bebc 	.word	0x0800bebc
 8005c48:	080057dd 	.word	0x080057dd
 8005c4c:	20003cf0 	.word	0x20003cf0
 8005c50:	0800bee0 	.word	0x0800bee0
 8005c54:	08005851 	.word	0x08005851
 8005c58:	20003c88 	.word	0x20003c88
 8005c5c:	0800bf04 	.word	0x0800bf04
 8005c60:	08005921 	.word	0x08005921
 8005c64:	20003d04 	.word	0x20003d04
 8005c68:	0001e848 	.word	0x0001e848

08005c6c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8005c6c:	6802      	ldr	r2, [r0, #0]
 8005c6e:	4b03      	ldr	r3, [pc, #12]	; (8005c7c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d000      	beq.n	8005c76 <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005c74:	4770      	bx	lr
    HAL_IncTick();
 8005c76:	f000 ba6b 	b.w	8006150 <HAL_IncTick>
 8005c7a:	bf00      	nop
 8005c7c:	40000800 	.word	0x40000800

08005c80 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005c80:	4b11      	ldr	r3, [pc, #68]	; (8005cc8 <HAL_MspInit+0x48>)
{
 8005c82:	b510      	push	{r4, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005c84:	6998      	ldr	r0, [r3, #24]
{
 8005c86:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005c88:	f040 0001 	orr.w	r0, r0, #1
 8005c8c:	6198      	str	r0, [r3, #24]
 8005c8e:	699c      	ldr	r4, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005c90:	2200      	movs	r2, #0
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005c92:	f004 0401 	and.w	r4, r4, #1
 8005c96:	9400      	str	r4, [sp, #0]
 8005c98:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c9a:	69dc      	ldr	r4, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005c9c:	210f      	movs	r1, #15
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c9e:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8005ca2:	61dc      	str	r4, [r3, #28]
 8005ca4:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005ca6:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8005caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cae:	9301      	str	r3, [sp, #4]
 8005cb0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005cb2:	f000 fa83 	bl	80061bc <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005cb6:	4a05      	ldr	r2, [pc, #20]	; (8005ccc <HAL_MspInit+0x4c>)
 8005cb8:	6853      	ldr	r3, [r2, #4]
 8005cba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005cbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005cc2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005cc4:	b002      	add	sp, #8
 8005cc6:	bd10      	pop	{r4, pc}
 8005cc8:	40021000 	.word	0x40021000
 8005ccc:	40010000 	.word	0x40010000

08005cd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005cd0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cd2:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 8005cd4:	6802      	ldr	r2, [r0, #0]
 8005cd6:	4b20      	ldr	r3, [pc, #128]	; (8005d58 <HAL_I2C_MspInit+0x88>)
{
 8005cd8:	b086      	sub	sp, #24
  if(hi2c->Instance==I2C1)
 8005cda:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cdc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8005ce0:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hi2c->Instance==I2C1)
 8005ce4:	d001      	beq.n	8005cea <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005ce6:	b006      	add	sp, #24
 8005ce8:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005cea:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005cee:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005cf0:	2612      	movs	r6, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cf2:	4d1a      	ldr	r5, [pc, #104]	; (8005d5c <HAL_I2C_MspInit+0x8c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cf4:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cf6:	69ab      	ldr	r3, [r5, #24]
 8005cf8:	f043 0308 	orr.w	r3, r3, #8
 8005cfc:	61ab      	str	r3, [r5, #24]
 8005cfe:	69ab      	ldr	r3, [r5, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005d00:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d02:	f003 0308 	and.w	r3, r3, #8
 8005d06:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d08:	4815      	ldr	r0, [pc, #84]	; (8005d60 <HAL_I2C_MspInit+0x90>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d0a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005d0c:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005d0e:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d10:	f000 fae8 	bl	80062e4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8005d14:	4813      	ldr	r0, [pc, #76]	; (8005d64 <HAL_I2C_MspInit+0x94>)
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8005d16:	4622      	mov	r2, r4
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8005d18:	6843      	ldr	r3, [r0, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8005d1a:	2105      	movs	r1, #5
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8005d1c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005d20:	f043 0302 	orr.w	r3, r3, #2
 8005d24:	6043      	str	r3, [r0, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005d26:	69eb      	ldr	r3, [r5, #28]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8005d28:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005d2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d2e:	61eb      	str	r3, [r5, #28]
 8005d30:	69eb      	ldr	r3, [r5, #28]
 8005d32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d36:	9301      	str	r3, [sp, #4]
 8005d38:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8005d3a:	f000 fa3f 	bl	80061bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005d3e:	201f      	movs	r0, #31
 8005d40:	f000 fa72 	bl	8006228 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8005d44:	4622      	mov	r2, r4
 8005d46:	2105      	movs	r1, #5
 8005d48:	2020      	movs	r0, #32
 8005d4a:	f000 fa37 	bl	80061bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005d4e:	2020      	movs	r0, #32
 8005d50:	f000 fa6a 	bl	8006228 <HAL_NVIC_EnableIRQ>
}
 8005d54:	b006      	add	sp, #24
 8005d56:	bd70      	pop	{r4, r5, r6, pc}
 8005d58:	40005400 	.word	0x40005400
 8005d5c:	40021000 	.word	0x40021000
 8005d60:	40010c00 	.word	0x40010c00
 8005d64:	40010000 	.word	0x40010000

08005d68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005d68:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d6a:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 8005d6c:	6802      	ldr	r2, [r0, #0]
 8005d6e:	4b1d      	ldr	r3, [pc, #116]	; (8005de4 <HAL_SPI_MspInit+0x7c>)
{
 8005d70:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 8005d72:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d74:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8005d78:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hspi->Instance==SPI1)
 8005d7c:	d001      	beq.n	8005d82 <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005d7e:	b006      	add	sp, #24
 8005d80:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005d82:	21a0      	movs	r1, #160	; 0xa0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d84:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005d86:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005d88:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8005d8c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d8e:	4816      	ldr	r0, [pc, #88]	; (8005de8 <HAL_SPI_MspInit+0x80>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005d90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d94:	619a      	str	r2, [r3, #24]
 8005d96:	699a      	ldr	r2, [r3, #24]
 8005d98:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005d9c:	9200      	str	r2, [sp, #0]
 8005d9e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005da0:	699a      	ldr	r2, [r3, #24]
 8005da2:	f042 0204 	orr.w	r2, r2, #4
 8005da6:	619a      	str	r2, [r3, #24]
 8005da8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005daa:	9102      	str	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005db2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005db4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005db6:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005db8:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dba:	f000 fa93 	bl	80062e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005dbe:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dc0:	a902      	add	r1, sp, #8
 8005dc2:	4809      	ldr	r0, [pc, #36]	; (8005de8 <HAL_SPI_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005dc4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dc6:	e9cd 4403 	strd	r4, r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dca:	f000 fa8b 	bl	80062e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8005dce:	4622      	mov	r2, r4
 8005dd0:	2105      	movs	r1, #5
 8005dd2:	2023      	movs	r0, #35	; 0x23
 8005dd4:	f000 f9f2 	bl	80061bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005dd8:	2023      	movs	r0, #35	; 0x23
 8005dda:	f000 fa25 	bl	8006228 <HAL_NVIC_EnableIRQ>
}
 8005dde:	b006      	add	sp, #24
 8005de0:	bd70      	pop	{r4, r5, r6, pc}
 8005de2:	bf00      	nop
 8005de4:	40013000 	.word	0x40013000
 8005de8:	40010800 	.word	0x40010800

08005dec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005dec:	b510      	push	{r4, lr}
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8005dee:	4601      	mov	r1, r0
{
 8005df0:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8005df2:	2200      	movs	r2, #0
 8005df4:	201e      	movs	r0, #30
 8005df6:	f000 f9e1 	bl	80061bc <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005dfa:	201e      	movs	r0, #30
 8005dfc:	f000 fa14 	bl	8006228 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8005e00:	4b15      	ldr	r3, [pc, #84]	; (8005e58 <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005e02:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM4_CLK_ENABLE();
 8005e04:	69da      	ldr	r2, [r3, #28]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005e06:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 8005e08:	f042 0204 	orr.w	r2, r2, #4
 8005e0c:	61da      	str	r2, [r3, #28]
 8005e0e:	69db      	ldr	r3, [r3, #28]
  uwTimclock = HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8005e10:	4c12      	ldr	r4, [pc, #72]	; (8005e5c <HAL_InitTick+0x70>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 8005e12:	f003 0304 	and.w	r3, r3, #4
 8005e16:	9302      	str	r3, [sp, #8]
 8005e18:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005e1a:	f002 fb0f 	bl	800843c <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005e1e:	f002 fafd 	bl	800841c <HAL_RCC_GetPCLK1Freq>
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8005e22:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim4.Init.Prescaler = uwPrescalerValue;
  htim4.Init.ClockDivision = 0;
 8005e26:	2200      	movs	r2, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005e28:	4b0d      	ldr	r3, [pc, #52]	; (8005e60 <HAL_InitTick+0x74>)
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8005e2a:	60e1      	str	r1, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005e2c:	fba3 1300 	umull	r1, r3, r3, r0
  htim4.Instance = TIM4;
 8005e30:	490c      	ldr	r1, [pc, #48]	; (8005e64 <HAL_InitTick+0x78>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005e32:	0c9b      	lsrs	r3, r3, #18
 8005e34:	3b01      	subs	r3, #1
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8005e36:	4620      	mov	r0, r4
  htim4.Instance = TIM4;
 8005e38:	e9c4 1300 	strd	r1, r3, [r4]
  htim4.Init.ClockDivision = 0;
 8005e3c:	6122      	str	r2, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e3e:	60a2      	str	r2, [r4, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8005e40:	f002 fdc8 	bl	80089d4 <HAL_TIM_Base_Init>
 8005e44:	b110      	cbz	r0, 8005e4c <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
  }

  /* Return function status */
  return HAL_ERROR;
 8005e46:	2001      	movs	r0, #1
}
 8005e48:	b008      	add	sp, #32
 8005e4a:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim4);
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	f002 fe21 	bl	8008a94 <HAL_TIM_Base_Start_IT>
}
 8005e52:	b008      	add	sp, #32
 8005e54:	bd10      	pop	{r4, pc}
 8005e56:	bf00      	nop
 8005e58:	40021000 	.word	0x40021000
 8005e5c:	20003db4 	.word	0x20003db4
 8005e60:	431bde83 	.word	0x431bde83
 8005e64:	40000800 	.word	0x40000800

08005e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e68:	e7fe      	b.n	8005e68 <NMI_Handler>
 8005e6a:	bf00      	nop

08005e6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e6c:	e7fe      	b.n	8005e6c <HardFault_Handler>
 8005e6e:	bf00      	nop

08005e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e70:	e7fe      	b.n	8005e70 <MemManage_Handler>
 8005e72:	bf00      	nop

08005e74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e74:	e7fe      	b.n	8005e74 <BusFault_Handler>
 8005e76:	bf00      	nop

08005e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e78:	e7fe      	b.n	8005e78 <UsageFault_Handler>
 8005e7a:	bf00      	nop

08005e7c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop

08005e80 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005e80:	2004      	movs	r0, #4
 8005e82:	f000 bb35 	b.w	80064f0 <HAL_GPIO_EXTI_IRQHandler>
 8005e86:	bf00      	nop

08005e88 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005e88:	4801      	ldr	r0, [pc, #4]	; (8005e90 <TIM4_IRQHandler+0x8>)
 8005e8a:	f002 be37 	b.w	8008afc <HAL_TIM_IRQHandler>
 8005e8e:	bf00      	nop
 8005e90:	20003db4 	.word	0x20003db4

08005e94 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005e94:	4801      	ldr	r0, [pc, #4]	; (8005e9c <I2C1_EV_IRQHandler+0x8>)
 8005e96:	f001 b90b 	b.w	80070b0 <HAL_I2C_EV_IRQHandler>
 8005e9a:	bf00      	nop
 8005e9c:	20003c90 	.word	0x20003c90

08005ea0 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005ea0:	4801      	ldr	r0, [pc, #4]	; (8005ea8 <I2C1_ER_IRQHandler+0x8>)
 8005ea2:	f001 be79 	b.w	8007b98 <HAL_I2C_ER_IRQHandler>
 8005ea6:	bf00      	nop
 8005ea8:	20003c90 	.word	0x20003c90

08005eac <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005eac:	4801      	ldr	r0, [pc, #4]	; (8005eb4 <SPI1_IRQHandler+0x8>)
 8005eae:	f002 bcfb 	b.w	80088a8 <HAL_SPI_IRQHandler>
 8005eb2:	bf00      	nop
 8005eb4:	20003d08 	.word	0x20003d08

08005eb8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005eb8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005ebc:	f000 bb18 	b.w	80064f0 <HAL_GPIO_EXTI_IRQHandler>

08005ec0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8005ec0:	2001      	movs	r0, #1
 8005ec2:	4770      	bx	lr

08005ec4 <_kill>:

int _kill(int pid, int sig)
{
 8005ec4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8005ec6:	f005 fe75 	bl	800bbb4 <__errno>
 8005eca:	2316      	movs	r3, #22
 8005ecc:	6003      	str	r3, [r0, #0]
	return -1;
}
 8005ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ed2:	bd08      	pop	{r3, pc}

08005ed4 <_exit>:

void _exit (int status)
{
 8005ed4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8005ed6:	f005 fe6d 	bl	800bbb4 <__errno>
 8005eda:	2316      	movs	r3, #22
 8005edc:	6003      	str	r3, [r0, #0]
 8005ede:	e7fe      	b.n	8005ede <_exit+0xa>

08005ee0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ee0:	490d      	ldr	r1, [pc, #52]	; (8005f18 <_sbrk+0x38>)
{
 8005ee2:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ee4:	4a0d      	ldr	r2, [pc, #52]	; (8005f1c <_sbrk+0x3c>)
 8005ee6:	4c0e      	ldr	r4, [pc, #56]	; (8005f20 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8005ee8:	680b      	ldr	r3, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005eea:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8005eec:	b12b      	cbz	r3, 8005efa <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005eee:	4418      	add	r0, r3
 8005ef0:	4290      	cmp	r0, r2
 8005ef2:	d808      	bhi.n	8005f06 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8005ef4:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8005efa:	4c0a      	ldr	r4, [pc, #40]	; (8005f24 <_sbrk+0x44>)
 8005efc:	4623      	mov	r3, r4
  if (__sbrk_heap_end + incr > max_heap)
 8005efe:	4418      	add	r0, r3
 8005f00:	4290      	cmp	r0, r2
    __sbrk_heap_end = &_end;
 8005f02:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8005f04:	d9f6      	bls.n	8005ef4 <_sbrk+0x14>
    errno = ENOMEM;
 8005f06:	f005 fe55 	bl	800bbb4 <__errno>
 8005f0a:	220c      	movs	r2, #12
    return (void *)-1;
 8005f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    errno = ENOMEM;
 8005f10:	6002      	str	r2, [r0, #0]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	bd10      	pop	{r4, pc}
 8005f16:	bf00      	nop
 8005f18:	20001bd8 	.word	0x20001bd8
 8005f1c:	20005000 	.word	0x20005000
 8005f20:	00000400 	.word	0x00000400
 8005f24:	20003e48 	.word	0x20003e48

08005f28 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop

08005f2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005f2c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005f2e:	e003      	b.n	8005f38 <LoopCopyDataInit>

08005f30 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005f30:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005f32:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005f34:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005f36:	3104      	adds	r1, #4

08005f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005f38:	480a      	ldr	r0, [pc, #40]	; (8005f64 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005f3a:	4b0b      	ldr	r3, [pc, #44]	; (8005f68 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005f3c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005f3e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005f40:	d3f6      	bcc.n	8005f30 <CopyDataInit>
  ldr r2, =_sbss
 8005f42:	4a0a      	ldr	r2, [pc, #40]	; (8005f6c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005f44:	e002      	b.n	8005f4c <LoopFillZerobss>

08005f46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005f46:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005f48:	f842 3b04 	str.w	r3, [r2], #4

08005f4c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005f4c:	4b08      	ldr	r3, [pc, #32]	; (8005f70 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005f4e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005f50:	d3f9      	bcc.n	8005f46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005f52:	f7ff ffe9 	bl	8005f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f56:	f005 fe33 	bl	800bbc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005f5a:	f7ff fd19 	bl	8005990 <main>
  bx lr
 8005f5e:	4770      	bx	lr
  ldr r3, =_sidata
 8005f60:	0800bfd8 	.word	0x0800bfd8
  ldr r0, =_sdata
 8005f64:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005f68:	20000100 	.word	0x20000100
  ldr r2, =_sbss
 8005f6c:	20000100 	.word	0x20000100
  ldr r3, = _ebss
 8005f70:	20003e44 	.word	0x20003e44

08005f74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005f74:	e7fe      	b.n	8005f74 <ADC1_2_IRQHandler>
	...

08005f78 <lora_module_send_packet_read_data>:
    // отправка пакета
    lora_module_send_packet(module);
}

void lora_module_send_packet_read_data(struct LoRa_module* module) {
    for(int i = 0; i < module->amt_sensors; ++i) {
 8005f78:	7d03      	ldrb	r3, [r0, #20]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d075      	beq.n	800606a <lora_module_send_packet_read_data+0xf2>
void lora_module_send_packet_read_data(struct LoRa_module* module) {
 8005f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for(int i = 0; i < module->amt_sensors; ++i) {
 8005f82:	2700      	movs	r7, #0
 8005f84:	4604      	mov	r4, r0
 8005f86:	46b8      	mov	r8, r7
 8005f88:	f100 0520 	add.w	r5, r0, #32
		packet_set_len(&(module->packet), 14);
 8005f8c:	210e      	movs	r1, #14
 8005f8e:	4628      	mov	r0, r5
 8005f90:	f000 f8ac 	bl	80060ec <packet_set_len>
	    // отправка адреса управляющего модуля
	    for(int i = 0; i < 3; ++i) {
	    	packet_data_add(&(module->packet), module->esp_adr[i]);
 8005f94:	78e1      	ldrb	r1, [r4, #3]
 8005f96:	4628      	mov	r0, r5
 8005f98:	f000 f8c0 	bl	800611c <packet_data_add>
 8005f9c:	7921      	ldrb	r1, [r4, #4]
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	f000 f8bc 	bl	800611c <packet_data_add>
 8005fa4:	7961      	ldrb	r1, [r4, #5]
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	f000 f8b8 	bl	800611c <packet_data_add>
	    }
	    // отправка своего адреса
	    for(int i = 0; i < 3; ++i) {
	    	packet_data_add(&(module->packet), module->my_adr[i]);
 8005fac:	7821      	ldrb	r1, [r4, #0]
 8005fae:	4628      	mov	r0, r5
 8005fb0:	f000 f8b4 	bl	800611c <packet_data_add>
 8005fb4:	7861      	ldrb	r1, [r4, #1]
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	f000 f8b0 	bl	800611c <packet_data_add>
 8005fbc:	78a1      	ldrb	r1, [r4, #2]
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	f000 f8ac 	bl	800611c <packet_data_add>
	    }
	    // отправка типа пакета
		packet_data_add(&(module->packet), 0x01);
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	f000 f8a8 	bl	800611c <packet_data_add>
	    // отправка номера пакета
		packet_data_add(&(module->packet), ((module->num_packet >> 8) & 0xFF));
 8005fcc:	8921      	ldrh	r1, [r4, #8]
 8005fce:	4628      	mov	r0, r5
 8005fd0:	0a09      	lsrs	r1, r1, #8
 8005fd2:	f000 f8a3 	bl	800611c <packet_data_add>
		packet_data_add(&(module->packet), ((module->num_packet) & 0xFF));
 8005fd6:	7a21      	ldrb	r1, [r4, #8]
 8005fd8:	4628      	mov	r0, r5
 8005fda:	f000 f89f 	bl	800611c <packet_data_add>
        // отправка типа устройства
		packet_data_add(&(module->packet), (uint8_t)(module->sensors[i].type));
 8005fde:	6923      	ldr	r3, [r4, #16]
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	5dd9      	ldrb	r1, [r3, r7]
 8005fe4:	f000 f89a 	bl	800611c <packet_data_add>
        // отправка данных
        uint32_t data = module->sensors[i].data;
 8005fe8:	6923      	ldr	r3, [r4, #16]
    	packet_data_add(&(module->packet), ((data >> 24) & 0xFF));
 8005fea:	4628      	mov	r0, r5
        uint32_t data = module->sensors[i].data;
 8005fec:	443b      	add	r3, r7
 8005fee:	685e      	ldr	r6, [r3, #4]
    	packet_data_add(&(module->packet), ((data >> 24) & 0xFF));
 8005ff0:	0e31      	lsrs	r1, r6, #24
 8005ff2:	f000 f893 	bl	800611c <packet_data_add>
    	packet_data_add(&(module->packet), ((data >> 16) & 0xFF));
 8005ff6:	f3c6 4107 	ubfx	r1, r6, #16, #8
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	f000 f88e 	bl	800611c <packet_data_add>
    	packet_data_add(&(module->packet), ((data >> 8) & 0xFF));
 8006000:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8006004:	4628      	mov	r0, r5
 8006006:	f000 f889 	bl	800611c <packet_data_add>
    	packet_data_add(&(module->packet), (data & 0xFF));
 800600a:	b2f1      	uxtb	r1, r6
 800600c:	4628      	mov	r0, r5
 800600e:	f000 f885 	bl	800611c <packet_data_add>
	if(module->led)
 8006012:	7aa3      	ldrb	r3, [r4, #10]
 8006014:	b993      	cbnz	r3, 800603c <lora_module_send_packet_read_data+0xc4>
	LoRa_sender_packet(module->packet._data, module->packet._len, 2000);
 8006016:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800601a:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 800601e:	6a20      	ldr	r0, [r4, #32]
 8006020:	f000 f85c 	bl	80060dc <LoRa_sender_packet>
    ++(module->num_packet);
 8006024:	8923      	ldrh	r3, [r4, #8]
    for(int i = 0; i < module->amt_sensors; ++i) {
 8006026:	7d22      	ldrb	r2, [r4, #20]
 8006028:	f108 0801 	add.w	r8, r8, #1
    ++(module->num_packet);
 800602c:	3301      	adds	r3, #1
    for(int i = 0; i < module->amt_sensors; ++i) {
 800602e:	4542      	cmp	r2, r8
 8006030:	f107 070c 	add.w	r7, r7, #12
    ++(module->num_packet);
 8006034:	8123      	strh	r3, [r4, #8]
    for(int i = 0; i < module->amt_sensors; ++i) {
 8006036:	dca9      	bgt.n	8005f8c <lora_module_send_packet_read_data+0x14>
        // отправка пакета
        lora_module_send_packet(module);
    }
}
 8006038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		lora_led_struct_set_OUT(module->packet._len);
 800603c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8006040:	f000 f822 	bl	8006088 <lora_led_struct_set_OUT>
	LoRa_sender_packet(module->packet._data, module->packet._len, 2000);
 8006044:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006048:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 800604c:	6a20      	ldr	r0, [r4, #32]
 800604e:	f000 f845 	bl	80060dc <LoRa_sender_packet>
    ++(module->num_packet);
 8006052:	8923      	ldrh	r3, [r4, #8]
    for(int i = 0; i < module->amt_sensors; ++i) {
 8006054:	7d22      	ldrb	r2, [r4, #20]
 8006056:	f108 0801 	add.w	r8, r8, #1
    ++(module->num_packet);
 800605a:	3301      	adds	r3, #1
    for(int i = 0; i < module->amt_sensors; ++i) {
 800605c:	4590      	cmp	r8, r2
 800605e:	f107 070c 	add.w	r7, r7, #12
    ++(module->num_packet);
 8006062:	8123      	strh	r3, [r4, #8]
    for(int i = 0; i < module->amt_sensors; ++i) {
 8006064:	db92      	blt.n	8005f8c <lora_module_send_packet_read_data+0x14>
}
 8006066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800606a:	4770      	bx	lr

0800606c <lora_sensor_init>:
//	enum Type_sensor_t type;
//	uint8_t id;
//	uint32_t data;
//};

void lora_sensor_init(LoRa_sensor* sensor, enum Type_sensor_t type, uint8_t id) {
 800606c:	b410      	push	{r4}
	sensor->type = type;
	sensor->id = id;
	sensor->data = 0;
	sensor->idata = 0;
 800606e:	2300      	movs	r3, #0
	sensor->data = 0;
 8006070:	2400      	movs	r4, #0
	sensor->type = type;
 8006072:	7001      	strb	r1, [r0, #0]
	sensor->data = 0;
 8006074:	6044      	str	r4, [r0, #4]
	sensor->id = id;
 8006076:	7042      	strb	r2, [r0, #1]
	sensor->idata = 0;
 8006078:	6083      	str	r3, [r0, #8]
}
 800607a:	bc10      	pop	{r4}
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop

08006080 <lora_sensor_set_data>:

void lora_sensor_set_data(LoRa_sensor* sensor, float value) {
	sensor->idata = value;
 8006080:	6081      	str	r1, [r0, #8]
	uint32_t *data = (uint32_t*)(&value);
	sensor->data = *data;
 8006082:	6041      	str	r1, [r0, #4]
}
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop

08006088 <lora_led_struct_set_OUT>:

void lora_led_struct_set_IN(uint8_t signalIN) {
	LoRa_led_struct.ledIN.time = HAL_GetTick() - LoRa_led_struct.wait_time;
	LoRa_led_struct.ledIN.amt_signal = signalIN;
}
void lora_led_struct_set_OUT(uint8_t signalOUT) {
 8006088:	b510      	push	{r4, lr}
 800608a:	4604      	mov	r4, r0
	LoRa_led_struct.ledOUT.time = HAL_GetTick() - LoRa_led_struct.wait_time;
 800608c:	f000 f86c 	bl	8006168 <HAL_GetTick>
 8006090:	4b02      	ldr	r3, [pc, #8]	; (800609c <lora_led_struct_set_OUT+0x14>)
 8006092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	LoRa_led_struct.ledOUT.amt_signal = signalOUT;
 8006094:	771c      	strb	r4, [r3, #28]
	LoRa_led_struct.ledOUT.time = HAL_GetTick() - LoRa_led_struct.wait_time;
 8006096:	1a80      	subs	r0, r0, r2
 8006098:	6218      	str	r0, [r3, #32]
}
 800609a:	bd10      	pop	{r4, pc}
 800609c:	20003d60 	.word	0x20003d60

080060a0 <LoRa_init>:
extern class LoRa_class LoRa;

extern "C" {

void LoRa_init(SPI_HandleTypeDef *spi) {
	return LoRa.init(spi);
 80060a0:	4601      	mov	r1, r0
 80060a2:	4801      	ldr	r0, [pc, #4]	; (80060a8 <LoRa_init+0x8>)
 80060a4:	f7fb b946 	b.w	8001334 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef>
 80060a8:	20000120 	.word	0x20000120

080060ac <LoRa_begin>:
	return LoRa.field_get(field, value, read);
}
uint8_t LoRa_field_get(Address_field* fields, uint32_t* values, uint8_t amt, bool read) {
	return LoRa.field_get(fields, values, amt, read);
}
uint8_t LoRa_begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 80060ac:	b530      	push	{r4, r5, lr}
 80060ae:	b089      	sub	sp, #36	; 0x24
 80060b0:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80060b4:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
	return LoRa.begin(frequency, paboost, signal_power, SF, SBW, sync_word);
 80060b8:	e9cd 2300 	strd	r2, r3, [sp]
 80060bc:	9502      	str	r5, [sp, #8]
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
uint8_t LoRa_begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 80060c2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
	return LoRa.begin(frequency, paboost, signal_power, SF, SBW, sync_word);
 80060c6:	9406      	str	r4, [sp, #24]
 80060c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060cc:	4802      	ldr	r0, [pc, #8]	; (80060d8 <LoRa_begin+0x2c>)
 80060ce:	f7fb fb11 	bl	80016f4 <_ZN10LoRa_class5beginEybhhyh>
}
 80060d2:	b009      	add	sp, #36	; 0x24
 80060d4:	bd30      	pop	{r4, r5, pc}
 80060d6:	bf00      	nop
 80060d8:	20000120 	.word	0x20000120

080060dc <LoRa_sender_packet>:
}
float LoRa_packet_snr() {
	return LoRa.packet_snr();
}
bool LoRa_sender_packet(uint8_t* packet, uint8_t len, uint32_t wait) {
	return LoRa.sender_packet(packet, len, wait);
 80060dc:	4613      	mov	r3, r2
 80060de:	460a      	mov	r2, r1
 80060e0:	4601      	mov	r1, r0
 80060e2:	4801      	ldr	r0, [pc, #4]	; (80060e8 <LoRa_sender_packet+0xc>)
 80060e4:	f7fb bcbc 	b.w	8001a60 <_ZN10LoRa_class13sender_packetEPhhm>
 80060e8:	20000120 	.word	0x20000120

080060ec <packet_set_len>:
	packet->_snr = 0;
	packet->_num = 0;
	packet->_crc_error = false;
}

void packet_set_len(struct lora_packet* packet, uint8_t len) {
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	4604      	mov	r4, r0
	if(packet->_data != nullptr) {
 80060f0:	6800      	ldr	r0, [r0, #0]
void packet_set_len(struct lora_packet* packet, uint8_t len) {
 80060f2:	460d      	mov	r5, r1
	if(packet->_data != nullptr) {
 80060f4:	b118      	cbz	r0, 80060fe <packet_set_len+0x12>
		delete[] packet->_data;
 80060f6:	f004 fd09 	bl	800ab0c <_ZdaPv>
		packet->_data = nullptr;
 80060fa:	2300      	movs	r3, #0
 80060fc:	6023      	str	r3, [r4, #0]
	packet->_rssi = 0;
 80060fe:	2300      	movs	r3, #0
	packet->_snr = 0;
 8006100:	2200      	movs	r2, #0
	packet_delete(packet);
	packet->_len = len;
 8006102:	7125      	strb	r5, [r4, #4]
	packet->_rssi = 0;
 8006104:	7163      	strb	r3, [r4, #5]
	packet->_num = 0;
 8006106:	71a3      	strb	r3, [r4, #6]
	packet->_crc_error = false;
 8006108:	7323      	strb	r3, [r4, #12]
	packet->_snr = 0;
 800610a:	60a2      	str	r2, [r4, #8]
	if(len != 0) {
 800610c:	b905      	cbnz	r5, 8006110 <packet_set_len+0x24>
		packet->_data = new uint8_t[len];
	}
}
 800610e:	bd38      	pop	{r3, r4, r5, pc}
		packet->_data = new uint8_t[len];
 8006110:	4628      	mov	r0, r5
 8006112:	f004 fcfd 	bl	800ab10 <_Znaj>
 8006116:	6020      	str	r0, [r4, #0]
}
 8006118:	bd38      	pop	{r3, r4, r5, pc}
 800611a:	bf00      	nop

0800611c <packet_data_add>:
	for(int i = 0; i < len; ++i)
		packet->_data[i] = data[i];
}

void packet_data_add(struct lora_packet* packet, uint8_t data_byte) {
	packet->_data[packet->_num] = data_byte;
 800611c:	7983      	ldrb	r3, [r0, #6]
 800611e:	6802      	ldr	r2, [r0, #0]
 8006120:	54d1      	strb	r1, [r2, r3]
	++(packet->_num);
 8006122:	7983      	ldrb	r3, [r0, #6]
 8006124:	3301      	adds	r3, #1
 8006126:	7183      	strb	r3, [r0, #6]
}
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop

0800612c <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800612c:	4a07      	ldr	r2, [pc, #28]	; (800614c <HAL_Init+0x20>)
{
 800612e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006130:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006132:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006134:	f043 0310 	orr.w	r3, r3, #16
 8006138:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800613a:	f000 f82d 	bl	8006198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800613e:	2000      	movs	r0, #0
 8006140:	f7ff fe54 	bl	8005dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006144:	f7ff fd9c 	bl	8005c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8006148:	2000      	movs	r0, #0
 800614a:	bd08      	pop	{r3, pc}
 800614c:	40022000 	.word	0x40022000

08006150 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8006150:	4a03      	ldr	r2, [pc, #12]	; (8006160 <HAL_IncTick+0x10>)
 8006152:	4b04      	ldr	r3, [pc, #16]	; (8006164 <HAL_IncTick+0x14>)
 8006154:	6811      	ldr	r1, [r2, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	440b      	add	r3, r1
 800615a:	6013      	str	r3, [r2, #0]
}
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	20003dfc 	.word	0x20003dfc
 8006164:	2000008c 	.word	0x2000008c

08006168 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006168:	4b01      	ldr	r3, [pc, #4]	; (8006170 <HAL_GetTick+0x8>)
 800616a:	6818      	ldr	r0, [r3, #0]
}
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	20003dfc 	.word	0x20003dfc

08006174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006174:	b538      	push	{r3, r4, r5, lr}
 8006176:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006178:	f7ff fff6 	bl	8006168 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800617c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800617e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8006180:	d002      	beq.n	8006188 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8006182:	4b04      	ldr	r3, [pc, #16]	; (8006194 <HAL_Delay+0x20>)
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006188:	f7ff ffee 	bl	8006168 <HAL_GetTick>
 800618c:	1b40      	subs	r0, r0, r5
 800618e:	42a0      	cmp	r0, r4
 8006190:	d3fa      	bcc.n	8006188 <HAL_Delay+0x14>
  {
  }
}
 8006192:	bd38      	pop	{r3, r4, r5, pc}
 8006194:	2000008c 	.word	0x2000008c

08006198 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006198:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800619c:	4a06      	ldr	r2, [pc, #24]	; (80061b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800619e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061a0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80061a2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061a6:	400b      	ands	r3, r1
 80061a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80061b0:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80061b2:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	e000ed00 	.word	0xe000ed00

080061bc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061bc:	4b18      	ldr	r3, [pc, #96]	; (8006220 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80061be:	b430      	push	{r4, r5}
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061c6:	f1c3 0507 	rsb	r5, r3, #7
 80061ca:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061cc:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061d0:	bf28      	it	cs
 80061d2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061d4:	2c06      	cmp	r4, #6
 80061d6:	d919      	bls.n	800620c <HAL_NVIC_SetPriority+0x50>
 80061d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80061dc:	3b03      	subs	r3, #3
 80061de:	409c      	lsls	r4, r3
 80061e0:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061e8:	40aa      	lsls	r2, r5
 80061ea:	ea21 0102 	bic.w	r1, r1, r2
 80061ee:	fa01 f203 	lsl.w	r2, r1, r3
 80061f2:	4322      	orrs	r2, r4
 80061f4:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 80061f6:	2800      	cmp	r0, #0
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	db0a      	blt.n	8006212 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061fc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006200:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006204:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006208:	bc30      	pop	{r4, r5}
 800620a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800620c:	2400      	movs	r4, #0
 800620e:	4623      	mov	r3, r4
 8006210:	e7e8      	b.n	80061e4 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006212:	4b04      	ldr	r3, [pc, #16]	; (8006224 <HAL_NVIC_SetPriority+0x68>)
 8006214:	f000 000f 	and.w	r0, r0, #15
 8006218:	4403      	add	r3, r0
 800621a:	761a      	strb	r2, [r3, #24]
 800621c:	bc30      	pop	{r4, r5}
 800621e:	4770      	bx	lr
 8006220:	e000ed00 	.word	0xe000ed00
 8006224:	e000ecfc 	.word	0xe000ecfc

08006228 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006228:	2800      	cmp	r0, #0
 800622a:	db07      	blt.n	800623c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800622c:	2301      	movs	r3, #1
 800622e:	f000 011f 	and.w	r1, r0, #31
 8006232:	4a03      	ldr	r2, [pc, #12]	; (8006240 <HAL_NVIC_EnableIRQ+0x18>)
 8006234:	408b      	lsls	r3, r1
 8006236:	0940      	lsrs	r0, r0, #5
 8006238:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	e000e100 	.word	0xe000e100

08006244 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006244:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006246:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800624a:	2b02      	cmp	r3, #2
 800624c:	d004      	beq.n	8006258 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800624e:	2204      	movs	r2, #4
        
    status = HAL_ERROR;
 8006250:	2401      	movs	r4, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006252:	6382      	str	r2, [r0, #56]	; 0x38
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8006254:	4620      	mov	r0, r4
 8006256:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006258:	6803      	ldr	r3, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800625a:	491d      	ldr	r1, [pc, #116]	; (80062d0 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800625c:	681a      	ldr	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800625e:	428b      	cmp	r3, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006260:	f022 020e 	bic.w	r2, r2, #14
 8006264:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	f022 0201 	bic.w	r2, r2, #1
 800626c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800626e:	d021      	beq.n	80062b4 <HAL_DMA_Abort_IT+0x70>
 8006270:	4a18      	ldr	r2, [pc, #96]	; (80062d4 <HAL_DMA_Abort_IT+0x90>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d01c      	beq.n	80062b0 <HAL_DMA_Abort_IT+0x6c>
 8006276:	3214      	adds	r2, #20
 8006278:	4293      	cmp	r3, r2
 800627a:	d01d      	beq.n	80062b8 <HAL_DMA_Abort_IT+0x74>
 800627c:	3214      	adds	r2, #20
 800627e:	4293      	cmp	r3, r2
 8006280:	d01d      	beq.n	80062be <HAL_DMA_Abort_IT+0x7a>
 8006282:	3214      	adds	r2, #20
 8006284:	4293      	cmp	r3, r2
 8006286:	d01d      	beq.n	80062c4 <HAL_DMA_Abort_IT+0x80>
 8006288:	3214      	adds	r2, #20
 800628a:	4293      	cmp	r3, r2
 800628c:	bf0c      	ite	eq
 800628e:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8006292:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
    hdma->State = HAL_DMA_STATE_READY;
 8006296:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8006298:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800629a:	4d0f      	ldr	r5, [pc, #60]	; (80062d8 <HAL_DMA_Abort_IT+0x94>)
    if(hdma->XferAbortCallback != NULL)
 800629c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800629e:	606b      	str	r3, [r5, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80062a0:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80062a4:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80062a8:	b17a      	cbz	r2, 80062ca <HAL_DMA_Abort_IT+0x86>
      hdma->XferAbortCallback(hdma);
 80062aa:	4790      	blx	r2
}
 80062ac:	4620      	mov	r0, r4
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80062b0:	2310      	movs	r3, #16
 80062b2:	e7f0      	b.n	8006296 <HAL_DMA_Abort_IT+0x52>
 80062b4:	2301      	movs	r3, #1
 80062b6:	e7ee      	b.n	8006296 <HAL_DMA_Abort_IT+0x52>
 80062b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062bc:	e7eb      	b.n	8006296 <HAL_DMA_Abort_IT+0x52>
 80062be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062c2:	e7e8      	b.n	8006296 <HAL_DMA_Abort_IT+0x52>
 80062c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062c8:	e7e5      	b.n	8006296 <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 80062ca:	4614      	mov	r4, r2
 80062cc:	e7c2      	b.n	8006254 <HAL_DMA_Abort_IT+0x10>
 80062ce:	bf00      	nop
 80062d0:	40020008 	.word	0x40020008
 80062d4:	4002001c 	.word	0x4002001c
 80062d8:	40020000 	.word	0x40020000

080062dc <HAL_DMA_GetState>:
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
}
 80062dc:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop

080062e4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062e4:	680a      	ldr	r2, [r1, #0]
 80062e6:	2a00      	cmp	r2, #0
 80062e8:	f000 80db 	beq.w	80064a2 <HAL_GPIO_Init+0x1be>
{
 80062ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
 80062f0:	f04f 0a00 	mov.w	sl, #0
{
 80062f4:	b085      	sub	sp, #20
  uint32_t position = 0x00u;
 80062f6:	4655      	mov	r5, sl
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80062f8:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 80064cc <HAL_GPIO_Init+0x1e8>
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80062fc:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 80064d0 <HAL_GPIO_Init+0x1ec>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006300:	4f6d      	ldr	r7, [pc, #436]	; (80064b8 <HAL_GPIO_Init+0x1d4>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006302:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 80064d4 <HAL_GPIO_Init+0x1f0>
 8006306:	e003      	b.n	8006310 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8006308:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800630a:	fa32 f305 	lsrs.w	r3, r2, r5
 800630e:	d078      	beq.n	8006402 <HAL_GPIO_Init+0x11e>
    ioposition = (0x01uL << position);
 8006310:	2301      	movs	r3, #1
 8006312:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006314:	ea02 0403 	and.w	r4, r2, r3
    if (iocurrent == ioposition)
 8006318:	42a3      	cmp	r3, r4
 800631a:	d1f5      	bne.n	8006308 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 800631c:	684a      	ldr	r2, [r1, #4]
 800631e:	2a12      	cmp	r2, #18
 8006320:	f000 809e 	beq.w	8006460 <HAL_GPIO_Init+0x17c>
 8006324:	f200 8087 	bhi.w	8006436 <HAL_GPIO_Init+0x152>
 8006328:	2a02      	cmp	r2, #2
 800632a:	f000 809d 	beq.w	8006468 <HAL_GPIO_Init+0x184>
 800632e:	d97c      	bls.n	800642a <HAL_GPIO_Init+0x146>
 8006330:	2a03      	cmp	r2, #3
 8006332:	d069      	beq.n	8006408 <HAL_GPIO_Init+0x124>
 8006334:	2a11      	cmp	r2, #17
 8006336:	d102      	bne.n	800633e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006338:	68cb      	ldr	r3, [r1, #12]
 800633a:	f103 0a04 	add.w	sl, r3, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800633e:	2cff      	cmp	r4, #255	; 0xff
 8006340:	d866      	bhi.n	8006410 <HAL_GPIO_Init+0x12c>
 8006342:	4681      	mov	r9, r0
 8006344:	6803      	ldr	r3, [r0, #0]
 8006346:	00aa      	lsls	r2, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006348:	260f      	movs	r6, #15
 800634a:	fa06 fb02 	lsl.w	fp, r6, r2
 800634e:	ea23 030b 	bic.w	r3, r3, fp
 8006352:	fa0a f202 	lsl.w	r2, sl, r2
 8006356:	4313      	orrs	r3, r2
 8006358:	f8c9 3000 	str.w	r3, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800635c:	684a      	ldr	r2, [r1, #4]
 800635e:	00d3      	lsls	r3, r2, #3
 8006360:	d561      	bpl.n	8006426 <HAL_GPIO_Init+0x142>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006362:	f8dc 9018 	ldr.w	r9, [ip, #24]
 8006366:	f025 0303 	bic.w	r3, r5, #3
 800636a:	f049 0901 	orr.w	r9, r9, #1
 800636e:	f8cc 9018 	str.w	r9, [ip, #24]
 8006372:	f8dc 9018 	ldr.w	r9, [ip, #24]
 8006376:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800637a:	f009 0901 	and.w	r9, r9, #1
 800637e:	f8cd 900c 	str.w	r9, [sp, #12]
 8006382:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006386:	f005 0903 	and.w	r9, r5, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800638a:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800638e:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8006392:	f8d3 b008 	ldr.w	fp, [r3, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006396:	fa06 f609 	lsl.w	r6, r6, r9
 800639a:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800639e:	4570      	cmp	r0, lr
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80063a0:	9601      	str	r6, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80063a2:	d011      	beq.n	80063c8 <HAL_GPIO_Init+0xe4>
 80063a4:	4540      	cmp	r0, r8
 80063a6:	d063      	beq.n	8006470 <HAL_GPIO_Init+0x18c>
 80063a8:	4e44      	ldr	r6, [pc, #272]	; (80064bc <HAL_GPIO_Init+0x1d8>)
 80063aa:	42b0      	cmp	r0, r6
 80063ac:	d07a      	beq.n	80064a4 <HAL_GPIO_Init+0x1c0>
 80063ae:	4e44      	ldr	r6, [pc, #272]	; (80064c0 <HAL_GPIO_Init+0x1dc>)
 80063b0:	42b0      	cmp	r0, r6
 80063b2:	bf0c      	ite	eq
 80063b4:	f04f 0b03 	moveq.w	fp, #3
 80063b8:	f04f 0b04 	movne.w	fp, #4
 80063bc:	9e01      	ldr	r6, [sp, #4]
 80063be:	fa0b f909 	lsl.w	r9, fp, r9
 80063c2:	ea46 0609 	orr.w	r6, r6, r9
 80063c6:	9601      	str	r6, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 80063c8:	609e      	str	r6, [r3, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80063ca:	683b      	ldr	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80063cc:	03d6      	lsls	r6, r2, #15
          SET_BIT(EXTI->IMR, iocurrent);
 80063ce:	bf4c      	ite	mi
 80063d0:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80063d2:	43a3      	bicpl	r3, r4
 80063d4:	603b      	str	r3, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80063d6:	687b      	ldr	r3, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80063d8:	0396      	lsls	r6, r2, #14
          SET_BIT(EXTI->EMR, iocurrent);
 80063da:	bf4c      	ite	mi
 80063dc:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80063de:	43a3      	bicpl	r3, r4
 80063e0:	607b      	str	r3, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80063e2:	68bb      	ldr	r3, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80063e4:	02d6      	lsls	r6, r2, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 80063e6:	bf4c      	ite	mi
 80063e8:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80063ea:	43a3      	bicpl	r3, r4
 80063ec:	60bb      	str	r3, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80063ee:	0292      	lsls	r2, r2, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 80063f0:	68fb      	ldr	r3, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80063f2:	d515      	bpl.n	8006420 <HAL_GPIO_Init+0x13c>
          SET_BIT(EXTI->FTSR, iocurrent);
 80063f4:	431c      	orrs	r4, r3
 80063f6:	60fc      	str	r4, [r7, #12]
 80063f8:	680a      	ldr	r2, [r1, #0]
	position++;
 80063fa:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063fc:	fa32 f305 	lsrs.w	r3, r2, r5
 8006400:	d186      	bne.n	8006310 <HAL_GPIO_Init+0x2c>
  }
}
 8006402:	b005      	add	sp, #20
 8006404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006408:	2cff      	cmp	r4, #255	; 0xff
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800640a:	f04f 0a00 	mov.w	sl, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800640e:	d998      	bls.n	8006342 <HAL_GPIO_Init+0x5e>
 8006410:	f105 4280 	add.w	r2, r5, #1073741824	; 0x40000000
 8006414:	3a08      	subs	r2, #8
 8006416:	6843      	ldr	r3, [r0, #4]
 8006418:	0092      	lsls	r2, r2, #2
 800641a:	f100 0904 	add.w	r9, r0, #4
 800641e:	e793      	b.n	8006348 <HAL_GPIO_Init+0x64>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006420:	ea23 0404 	bic.w	r4, r3, r4
 8006424:	60fc      	str	r4, [r7, #12]
 8006426:	680a      	ldr	r2, [r1, #0]
 8006428:	e76e      	b.n	8006308 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 800642a:	b1a2      	cbz	r2, 8006456 <HAL_GPIO_Init+0x172>
 800642c:	2a01      	cmp	r2, #1
 800642e:	d186      	bne.n	800633e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006430:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8006434:	e783      	b.n	800633e <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8006436:	4e23      	ldr	r6, [pc, #140]	; (80064c4 <HAL_GPIO_Init+0x1e0>)
 8006438:	42b2      	cmp	r2, r6
 800643a:	d00c      	beq.n	8006456 <HAL_GPIO_Init+0x172>
 800643c:	d920      	bls.n	8006480 <HAL_GPIO_Init+0x19c>
 800643e:	4e22      	ldr	r6, [pc, #136]	; (80064c8 <HAL_GPIO_Init+0x1e4>)
 8006440:	42b2      	cmp	r2, r6
 8006442:	d008      	beq.n	8006456 <HAL_GPIO_Init+0x172>
 8006444:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8006448:	42b2      	cmp	r2, r6
 800644a:	d004      	beq.n	8006456 <HAL_GPIO_Init+0x172>
 800644c:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8006450:	42b2      	cmp	r2, r6
 8006452:	f47f af74 	bne.w	800633e <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006456:	688a      	ldr	r2, [r1, #8]
 8006458:	b9e2      	cbnz	r2, 8006494 <HAL_GPIO_Init+0x1b0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800645a:	f04f 0a04 	mov.w	sl, #4
 800645e:	e76e      	b.n	800633e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006460:	68cb      	ldr	r3, [r1, #12]
 8006462:	f103 0a0c 	add.w	sl, r3, #12
          break;
 8006466:	e76a      	b.n	800633e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006468:	68cb      	ldr	r3, [r1, #12]
 800646a:	f103 0a08 	add.w	sl, r3, #8
          break;
 800646e:	e766      	b.n	800633e <HAL_GPIO_Init+0x5a>
 8006470:	f04f 0b01 	mov.w	fp, #1
 8006474:	fa0b f909 	lsl.w	r9, fp, r9
 8006478:	ea46 0609 	orr.w	r6, r6, r9
 800647c:	9601      	str	r6, [sp, #4]
 800647e:	e7a3      	b.n	80063c8 <HAL_GPIO_Init+0xe4>
      switch (GPIO_Init->Mode)
 8006480:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8006484:	42b2      	cmp	r2, r6
 8006486:	d0e6      	beq.n	8006456 <HAL_GPIO_Init+0x172>
 8006488:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800648c:	42b2      	cmp	r2, r6
 800648e:	f47f af56 	bne.w	800633e <HAL_GPIO_Init+0x5a>
 8006492:	e7e0      	b.n	8006456 <HAL_GPIO_Init+0x172>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006494:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8006496:	bf0c      	ite	eq
 8006498:	6103      	streq	r3, [r0, #16]
            GPIOx->BRR = ioposition;
 800649a:	6143      	strne	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800649c:	f04f 0a08 	mov.w	sl, #8
 80064a0:	e74d      	b.n	800633e <HAL_GPIO_Init+0x5a>
 80064a2:	4770      	bx	lr
 80064a4:	f04f 0b02 	mov.w	fp, #2
 80064a8:	9e01      	ldr	r6, [sp, #4]
 80064aa:	fa0b f909 	lsl.w	r9, fp, r9
 80064ae:	ea46 0609 	orr.w	r6, r6, r9
 80064b2:	9601      	str	r6, [sp, #4]
 80064b4:	e788      	b.n	80063c8 <HAL_GPIO_Init+0xe4>
 80064b6:	bf00      	nop
 80064b8:	40010400 	.word	0x40010400
 80064bc:	40011000 	.word	0x40011000
 80064c0:	40011400 	.word	0x40011400
 80064c4:	10210000 	.word	0x10210000
 80064c8:	10310000 	.word	0x10310000
 80064cc:	40021000 	.word	0x40021000
 80064d0:	40010800 	.word	0x40010800
 80064d4:	40010c00 	.word	0x40010c00

080064d8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80064d8:	6883      	ldr	r3, [r0, #8]
 80064da:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80064dc:	bf14      	ite	ne
 80064de:	2001      	movne	r0, #1
 80064e0:	2000      	moveq	r0, #0
 80064e2:	4770      	bx	lr

080064e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80064e4:	b902      	cbnz	r2, 80064e8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80064e6:	0409      	lsls	r1, r1, #16
 80064e8:	6101      	str	r1, [r0, #16]
  }
}
 80064ea:	4770      	bx	lr

080064ec <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop

080064f0 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80064f0:	4a04      	ldr	r2, [pc, #16]	; (8006504 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80064f2:	6951      	ldr	r1, [r2, #20]
 80064f4:	4201      	tst	r1, r0
 80064f6:	d100      	bne.n	80064fa <HAL_GPIO_EXTI_IRQHandler+0xa>
 80064f8:	4770      	bx	lr
{
 80064fa:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064fc:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80064fe:	f7ff fff5 	bl	80064ec <HAL_GPIO_EXTI_Callback>
}
 8006502:	bd08      	pop	{r3, pc}
 8006504:	40010400 	.word	0x40010400

08006508 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006508:	2800      	cmp	r0, #0
 800650a:	f000 809f 	beq.w	800664c <HAL_I2C_Init+0x144>
{
 800650e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006510:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006514:	4604      	mov	r4, r0
 8006516:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 808f 	beq.w	800663e <HAL_I2C_Init+0x136>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006520:	2224      	movs	r2, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006522:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006524:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	f022 0201 	bic.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006536:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800653e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006540:	f001 ff6c 	bl	800841c <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006544:	6862      	ldr	r2, [r4, #4]
 8006546:	4b4b      	ldr	r3, [pc, #300]	; (8006674 <HAL_I2C_Init+0x16c>)
 8006548:	429a      	cmp	r2, r3
 800654a:	d84b      	bhi.n	80065e4 <HAL_I2C_Init+0xdc>
 800654c:	4b4a      	ldr	r3, [pc, #296]	; (8006678 <HAL_I2C_Init+0x170>)
 800654e:	4298      	cmp	r0, r3
 8006550:	d97a      	bls.n	8006648 <HAL_I2C_Init+0x140>
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006552:	1e43      	subs	r3, r0, #1
 8006554:	0052      	lsls	r2, r2, #1
 8006556:	fbb3 f2f2 	udiv	r2, r3, r2
  freqrange = I2C_FREQRANGE(pclk1);
 800655a:	4948      	ldr	r1, [pc, #288]	; (800667c <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800655c:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800655e:	fba1 1000 	umull	r1, r0, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006562:	6859      	ldr	r1, [r3, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8006564:	0c80      	lsrs	r0, r0, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006566:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800656a:	4301      	orrs	r1, r0
 800656c:	6059      	str	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800656e:	6a19      	ldr	r1, [r3, #32]
 8006570:	3001      	adds	r0, #1
 8006572:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8006576:	4308      	orrs	r0, r1
 8006578:	6218      	str	r0, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800657a:	1c50      	adds	r0, r2, #1
 800657c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8006580:	2804      	cmp	r0, #4
 8006582:	bf38      	it	cc
 8006584:	2004      	movcc	r0, #4
 8006586:	69d9      	ldr	r1, [r3, #28]
 8006588:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800658c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006590:	2500      	movs	r5, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8006592:	2620      	movs	r6, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006594:	4308      	orrs	r0, r1
 8006596:	61d8      	str	r0, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006598:	6819      	ldr	r1, [r3, #0]
 800659a:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 800659e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80065a2:	4302      	orrs	r2, r0
 80065a4:	430a      	orrs	r2, r1
 80065a6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80065a8:	6899      	ldr	r1, [r3, #8]
 80065aa:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 80065ae:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80065b2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80065b6:	4302      	orrs	r2, r0
 80065b8:	430a      	orrs	r2, r1
 80065ba:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80065bc:	68d9      	ldr	r1, [r3, #12]
 80065be:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 80065c2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80065c6:	4302      	orrs	r2, r0
 80065c8:	430a      	orrs	r2, r1
 80065ca:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 80065cc:	681a      	ldr	r2, [r3, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 80065ce:	4628      	mov	r0, r5
  __HAL_I2C_ENABLE(hi2c);
 80065d0:	f042 0201 	orr.w	r2, r2, #1
 80065d4:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065d6:	6425      	str	r5, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80065d8:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80065dc:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065de:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 80065e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80065e4:	4b26      	ldr	r3, [pc, #152]	; (8006680 <HAL_I2C_Init+0x178>)
 80065e6:	4298      	cmp	r0, r3
 80065e8:	d92e      	bls.n	8006648 <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80065ea:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80065ee:	4d23      	ldr	r5, [pc, #140]	; (800667c <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80065f0:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80065f2:	fba5 6500 	umull	r6, r5, r5, r0
 80065f6:	0cad      	lsrs	r5, r5, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80065f8:	fb01 f105 	mul.w	r1, r1, r5
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80065fc:	685e      	ldr	r6, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80065fe:	4f21      	ldr	r7, [pc, #132]	; (8006684 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006600:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006604:	fba7 7101 	umull	r7, r1, r7, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006608:	4335      	orrs	r5, r6
 800660a:	605d      	str	r5, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800660c:	6a1d      	ldr	r5, [r3, #32]
 800660e:	0989      	lsrs	r1, r1, #6
 8006610:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8006614:	3101      	adds	r1, #1
 8006616:	4329      	orrs	r1, r5
 8006618:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800661a:	69d9      	ldr	r1, [r3, #28]
 800661c:	68a5      	ldr	r5, [r4, #8]
 800661e:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8006622:	3801      	subs	r0, #1
 8006624:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006628:	b995      	cbnz	r5, 8006650 <HAL_I2C_Init+0x148>
 800662a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800662e:	fbb0 f0f2 	udiv	r0, r0, r2
 8006632:	3001      	adds	r0, #1
 8006634:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8006638:	b9c0      	cbnz	r0, 800666c <HAL_I2C_Init+0x164>
 800663a:	2001      	movs	r0, #1
 800663c:	e7a8      	b.n	8006590 <HAL_I2C_Init+0x88>
    hi2c->Lock = HAL_UNLOCKED;
 800663e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8006642:	f7ff fb45 	bl	8005cd0 <HAL_I2C_MspInit>
 8006646:	e76b      	b.n	8006520 <HAL_I2C_Init+0x18>
    return HAL_ERROR;
 8006648:	2001      	movs	r0, #1
}
 800664a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800664c:	2001      	movs	r0, #1
}
 800664e:	4770      	bx	lr
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006650:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006654:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006658:	fbb0 f0f2 	udiv	r0, r0, r2
 800665c:	3001      	adds	r0, #1
 800665e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8006662:	2800      	cmp	r0, #0
 8006664:	d0e9      	beq.n	800663a <HAL_I2C_Init+0x132>
 8006666:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 800666a:	e791      	b.n	8006590 <HAL_I2C_Init+0x88>
 800666c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8006670:	e78e      	b.n	8006590 <HAL_I2C_Init+0x88>
 8006672:	bf00      	nop
 8006674:	000186a0 	.word	0x000186a0
 8006678:	001e847f 	.word	0x001e847f
 800667c:	431bde83 	.word	0x431bde83
 8006680:	003d08ff 	.word	0x003d08ff
 8006684:	10624dd3 	.word	0x10624dd3

08006688 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800668c:	4604      	mov	r4, r0
 800668e:	b082      	sub	sp, #8
 8006690:	4699      	mov	r9, r3
 8006692:	460f      	mov	r7, r1
 8006694:	4690      	mov	r8, r2
 8006696:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006698:	f7ff fd66 	bl	8006168 <HAL_GetTick>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800669c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80066a0:	2b20      	cmp	r3, #32
 80066a2:	d003      	beq.n	80066ac <HAL_I2C_Master_Transmit+0x24>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
    {
      return HAL_BUSY;
 80066a4:	2002      	movs	r0, #2
  }
  else
  {
    return HAL_BUSY;
  }
}
 80066a6:	b002      	add	sp, #8
 80066a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ac:	4606      	mov	r6, r0
 80066ae:	e005      	b.n	80066bc <HAL_I2C_Master_Transmit+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b0:	f7ff fd5a 	bl	8006168 <HAL_GetTick>
 80066b4:	1b80      	subs	r0, r0, r6
 80066b6:	2819      	cmp	r0, #25
 80066b8:	f200 80e3 	bhi.w	8006882 <HAL_I2C_Master_Transmit+0x1fa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	699a      	ldr	r2, [r3, #24]
 80066c0:	43d2      	mvns	r2, r2
 80066c2:	f012 0a02 	ands.w	sl, r2, #2
 80066c6:	d0f3      	beq.n	80066b0 <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 80066c8:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80066cc:	2a01      	cmp	r2, #1
 80066ce:	d0e9      	beq.n	80066a4 <HAL_I2C_Master_Transmit+0x1c>
 80066d0:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80066d2:	681a      	ldr	r2, [r3, #0]
    __HAL_LOCK(hi2c);
 80066d4:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80066d8:	07d2      	lsls	r2, r2, #31
 80066da:	d402      	bmi.n	80066e2 <HAL_I2C_Master_Transmit+0x5a>
      __HAL_I2C_ENABLE(hi2c);
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	601a      	str	r2, [r3, #0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80066e2:	2100      	movs	r1, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80066e4:	f04f 0c21 	mov.w	ip, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80066e8:	2010      	movs	r0, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066f0:	601a      	str	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066f2:	4aa5      	ldr	r2, [pc, #660]	; (8006988 <HAL_I2C_Master_Transmit+0x300>)
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80066f4:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80066f8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80066fc:	6421      	str	r1, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80066fe:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006702:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006704:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006706:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8006708:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800670c:	2a08      	cmp	r2, #8
    hi2c->XferSize    = hi2c->XferCount;
 800670e:	8521      	strh	r1, [r4, #40]	; 0x28
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006710:	d072      	beq.n	80067f8 <HAL_I2C_Master_Transmit+0x170>
 8006712:	2a01      	cmp	r2, #1
 8006714:	d070      	beq.n	80067f8 <HAL_I2C_Master_Transmit+0x170>
 8006716:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800671a:	d06d      	beq.n	80067f8 <HAL_I2C_Master_Transmit+0x170>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800671c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800671e:	2a12      	cmp	r2, #18
 8006720:	d06a      	beq.n	80067f8 <HAL_I2C_Master_Transmit+0x170>
 8006722:	1c68      	adds	r0, r5, #1
 8006724:	f040 808b 	bne.w	800683e <HAL_I2C_Master_Transmit+0x1b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006728:	695a      	ldr	r2, [r3, #20]
 800672a:	07d1      	lsls	r1, r2, #31
 800672c:	d5fc      	bpl.n	8006728 <HAL_I2C_Master_Transmit+0xa0>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800672e:	6922      	ldr	r2, [r4, #16]
 8006730:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8006734:	f040 80c9 	bne.w	80068ca <HAL_I2C_Master_Transmit+0x242>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006738:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 800673c:	611f      	str	r7, [r3, #16]
 800673e:	1c6f      	adds	r7, r5, #1
 8006740:	d004      	beq.n	800674c <HAL_I2C_Master_Transmit+0xc4>
 8006742:	e0e9      	b.n	8006918 <HAL_I2C_Master_Transmit+0x290>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006744:	695a      	ldr	r2, [r3, #20]
 8006746:	0551      	lsls	r1, r2, #21
 8006748:	f100 80a9 	bmi.w	800689e <HAL_I2C_Master_Transmit+0x216>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800674c:	695a      	ldr	r2, [r3, #20]
 800674e:	0790      	lsls	r0, r2, #30
 8006750:	d5f8      	bpl.n	8006744 <HAL_I2C_Master_Transmit+0xbc>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006752:	2200      	movs	r2, #0
 8006754:	9201      	str	r2, [sp, #4]
 8006756:	695a      	ldr	r2, [r3, #20]
 8006758:	9201      	str	r2, [sp, #4]
 800675a:	699a      	ldr	r2, [r3, #24]
 800675c:	9201      	str	r2, [sp, #4]
 800675e:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8006760:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006762:	2a00      	cmp	r2, #0
 8006764:	f000 80e7 	beq.w	8006936 <HAL_I2C_Master_Transmit+0x2ae>
 8006768:	1c68      	adds	r0, r5, #1
 800676a:	d003      	beq.n	8006774 <HAL_I2C_Master_Transmit+0xec>
 800676c:	e049      	b.n	8006802 <HAL_I2C_Master_Transmit+0x17a>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800676e:	695a      	ldr	r2, [r3, #20]
 8006770:	0552      	lsls	r2, r2, #21
 8006772:	d42a      	bmi.n	80067ca <HAL_I2C_Master_Transmit+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006774:	695a      	ldr	r2, [r3, #20]
 8006776:	0611      	lsls	r1, r2, #24
 8006778:	d5f9      	bpl.n	800676e <HAL_I2C_Master_Transmit+0xe6>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800677a:	6a67      	ldr	r7, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800677c:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006780:	4638      	mov	r0, r7
 8006782:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 8006786:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800678a:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 800678c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800678e:	b289      	uxth	r1, r1
      hi2c->XferCount--;
 8006790:	3a01      	subs	r2, #1
 8006792:	b292      	uxth	r2, r2
 8006794:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006796:	695a      	ldr	r2, [r3, #20]
      hi2c->pBuffPtr++;
 8006798:	6260      	str	r0, [r4, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800679a:	0750      	lsls	r0, r2, #29
      hi2c->XferSize--;
 800679c:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800679e:	d50c      	bpl.n	80067ba <HAL_I2C_Master_Transmit+0x132>
 80067a0:	b159      	cbz	r1, 80067ba <HAL_I2C_Master_Transmit+0x132>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067a2:	787a      	ldrb	r2, [r7, #1]
        hi2c->XferSize--;
 80067a4:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067a8:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 80067aa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 80067ac:	3702      	adds	r7, #2
        hi2c->XferCount--;
 80067ae:	3a01      	subs	r2, #1
 80067b0:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 80067b2:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 80067b6:	6267      	str	r7, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80067b8:	8562      	strh	r2, [r4, #42]	; 0x2a
 80067ba:	1c6f      	adds	r7, r5, #1
 80067bc:	d130      	bne.n	8006820 <HAL_I2C_Master_Transmit+0x198>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067be:	695a      	ldr	r2, [r3, #20]
 80067c0:	0750      	lsls	r0, r2, #29
 80067c2:	d4cd      	bmi.n	8006760 <HAL_I2C_Master_Transmit+0xd8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067c4:	695a      	ldr	r2, [r3, #20]
 80067c6:	0551      	lsls	r1, r2, #21
 80067c8:	d5f9      	bpl.n	80067be <HAL_I2C_Master_Transmit+0x136>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067ca:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067cc:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80067d0:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067d2:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80067d4:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067d6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067da:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067de:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067e0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067e4:	f043 0304 	orr.w	r3, r3, #4
 80067e8:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067ec:	2b04      	cmp	r3, #4
 80067ee:	d07e      	beq.n	80068ee <HAL_I2C_Master_Transmit+0x266>
      return HAL_ERROR;
 80067f0:	2001      	movs	r0, #1
}
 80067f2:	b002      	add	sp, #8
 80067f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	e78f      	b.n	8006722 <HAL_I2C_Master_Transmit+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006802:	695a      	ldr	r2, [r3, #20]
 8006804:	0617      	lsls	r7, r2, #24
 8006806:	d4b8      	bmi.n	800677a <HAL_I2C_Master_Transmit+0xf2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006808:	695a      	ldr	r2, [r3, #20]
 800680a:	0557      	lsls	r7, r2, #21
 800680c:	d4dd      	bmi.n	80067ca <HAL_I2C_Master_Transmit+0x142>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800680e:	f7ff fcab 	bl	8006168 <HAL_GetTick>
 8006812:	1b80      	subs	r0, r0, r6
 8006814:	4285      	cmp	r5, r0
 8006816:	d371      	bcc.n	80068fc <HAL_I2C_Master_Transmit+0x274>
 8006818:	2d00      	cmp	r5, #0
 800681a:	d06f      	beq.n	80068fc <HAL_I2C_Master_Transmit+0x274>
 800681c:	6823      	ldr	r3, [r4, #0]
 800681e:	e7a3      	b.n	8006768 <HAL_I2C_Master_Transmit+0xe0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006820:	695a      	ldr	r2, [r3, #20]
 8006822:	0752      	lsls	r2, r2, #29
 8006824:	d49c      	bmi.n	8006760 <HAL_I2C_Master_Transmit+0xd8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006826:	695a      	ldr	r2, [r3, #20]
 8006828:	0552      	lsls	r2, r2, #21
 800682a:	d4ce      	bmi.n	80067ca <HAL_I2C_Master_Transmit+0x142>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800682c:	f7ff fc9c 	bl	8006168 <HAL_GetTick>
 8006830:	1b80      	subs	r0, r0, r6
 8006832:	4285      	cmp	r5, r0
 8006834:	d362      	bcc.n	80068fc <HAL_I2C_Master_Transmit+0x274>
 8006836:	2d00      	cmp	r5, #0
 8006838:	d060      	beq.n	80068fc <HAL_I2C_Master_Transmit+0x274>
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	e7bd      	b.n	80067ba <HAL_I2C_Master_Transmit+0x132>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800683e:	695a      	ldr	r2, [r3, #20]
 8006840:	07d2      	lsls	r2, r2, #31
 8006842:	f53f af74 	bmi.w	800672e <HAL_I2C_Master_Transmit+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006846:	f7ff fc8f 	bl	8006168 <HAL_GetTick>
 800684a:	1b80      	subs	r0, r0, r6
 800684c:	4285      	cmp	r5, r0
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	d302      	bcc.n	8006858 <HAL_I2C_Master_Transmit+0x1d0>
 8006852:	2d00      	cmp	r5, #0
 8006854:	f47f af65 	bne.w	8006722 <HAL_I2C_Master_Transmit+0x9a>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006858:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800685a:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800685c:	6321      	str	r1, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800685e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006862:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006866:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006868:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800686c:	f042 0220 	orr.w	r2, r2, #32
 8006870:	6422      	str	r2, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	05dd      	lsls	r5, r3, #23
 8006876:	d5bb      	bpl.n	80067f0 <HAL_I2C_Master_Transmit+0x168>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006878:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 800687c:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800687e:	6423      	str	r3, [r4, #64]	; 0x40
 8006880:	e711      	b.n	80066a6 <HAL_I2C_Master_Transmit+0x1e>
        hi2c->State             = HAL_I2C_STATE_READY;
 8006882:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006884:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006888:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800688c:	f884 a03e 	strb.w	sl, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006890:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006892:	f884 a03c 	strb.w	sl, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006896:	f043 0320 	orr.w	r3, r3, #32
 800689a:	6423      	str	r3, [r4, #64]	; 0x40
 800689c:	e702      	b.n	80066a4 <HAL_I2C_Master_Transmit+0x1c>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800689e:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80068a0:	2020      	movs	r0, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068a2:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068a6:	6819      	ldr	r1, [r3, #0]
 80068a8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80068ac:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068ae:	615d      	str	r5, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80068b0:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068b2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068b6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80068bc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068c0:	f043 0304 	orr.w	r3, r3, #4
 80068c4:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80068c6:	2001      	movs	r0, #1
 80068c8:	e6ed      	b.n	80066a6 <HAL_I2C_Master_Transmit+0x1e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80068ca:	11fa      	asrs	r2, r7, #7
 80068cc:	f002 0206 	and.w	r2, r2, #6
 80068d0:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 80068d4:	611a      	str	r2, [r3, #16]
 80068d6:	1c69      	adds	r1, r5, #1
 80068d8:	d003      	beq.n	80068e2 <HAL_I2C_Master_Transmit+0x25a>
 80068da:	e039      	b.n	8006950 <HAL_I2C_Master_Transmit+0x2c8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068dc:	695a      	ldr	r2, [r3, #20]
 80068de:	0550      	lsls	r0, r2, #21
 80068e0:	d4dd      	bmi.n	800689e <HAL_I2C_Master_Transmit+0x216>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068e2:	695a      	ldr	r2, [r3, #20]
 80068e4:	0712      	lsls	r2, r2, #28
 80068e6:	d5f9      	bpl.n	80068dc <HAL_I2C_Master_Transmit+0x254>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80068e8:	b2ff      	uxtb	r7, r7
 80068ea:	611f      	str	r7, [r3, #16]
 80068ec:	e727      	b.n	800673e <HAL_I2C_Master_Transmit+0xb6>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ee:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR;
 80068f0:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f2:	6813      	ldr	r3, [r2, #0]
 80068f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068f8:	6013      	str	r3, [r2, #0]
 80068fa:	e6d4      	b.n	80066a6 <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80068fc:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80068fe:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006900:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006902:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006906:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800690a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800690c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006910:	f043 0320 	orr.w	r3, r3, #32
 8006914:	6423      	str	r3, [r4, #64]	; 0x40
 8006916:	e768      	b.n	80067ea <HAL_I2C_Master_Transmit+0x162>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006918:	695a      	ldr	r2, [r3, #20]
 800691a:	0792      	lsls	r2, r2, #30
 800691c:	f53f af19 	bmi.w	8006752 <HAL_I2C_Master_Transmit+0xca>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006920:	695a      	ldr	r2, [r3, #20]
 8006922:	0552      	lsls	r2, r2, #21
 8006924:	d4bb      	bmi.n	800689e <HAL_I2C_Master_Transmit+0x216>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006926:	f7ff fc1f 	bl	8006168 <HAL_GetTick>
 800692a:	1b80      	subs	r0, r0, r6
 800692c:	4285      	cmp	r5, r0
 800692e:	d31d      	bcc.n	800696c <HAL_I2C_Master_Transmit+0x2e4>
 8006930:	b1e5      	cbz	r5, 800696c <HAL_I2C_Master_Transmit+0x2e4>
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	e703      	b.n	800673e <HAL_I2C_Master_Transmit+0xb6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006936:	2520      	movs	r5, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006938:	6819      	ldr	r1, [r3, #0]
    return HAL_OK;
 800693a:	4610      	mov	r0, r2
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800693c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006940:	6019      	str	r1, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006942:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8006946:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800694a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    return HAL_OK;
 800694e:	e6aa      	b.n	80066a6 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006950:	695a      	ldr	r2, [r3, #20]
 8006952:	0711      	lsls	r1, r2, #28
 8006954:	d4c8      	bmi.n	80068e8 <HAL_I2C_Master_Transmit+0x260>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006956:	695a      	ldr	r2, [r3, #20]
 8006958:	0550      	lsls	r0, r2, #21
 800695a:	d4a0      	bmi.n	800689e <HAL_I2C_Master_Transmit+0x216>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800695c:	f7ff fc04 	bl	8006168 <HAL_GetTick>
 8006960:	1b80      	subs	r0, r0, r6
 8006962:	4285      	cmp	r5, r0
 8006964:	d302      	bcc.n	800696c <HAL_I2C_Master_Transmit+0x2e4>
 8006966:	b10d      	cbz	r5, 800696c <HAL_I2C_Master_Transmit+0x2e4>
 8006968:	6823      	ldr	r3, [r4, #0]
 800696a:	e7b4      	b.n	80068d6 <HAL_I2C_Master_Transmit+0x24e>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800696c:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800696e:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006970:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006972:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006976:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800697a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800697c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006980:	f043 0320 	orr.w	r3, r3, #32
 8006984:	6423      	str	r3, [r4, #64]	; 0x40
 8006986:	e733      	b.n	80067f0 <HAL_I2C_Master_Transmit+0x168>
 8006988:	ffff0000 	.word	0xffff0000

0800698c <HAL_I2C_Master_Receive>:
{
 800698c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006990:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8006992:	2000      	movs	r0, #0
{
 8006994:	b086      	sub	sp, #24
 8006996:	4699      	mov	r9, r3
 8006998:	460f      	mov	r7, r1
 800699a:	4690      	mov	r8, r2
  __IO uint32_t count = 0U;
 800699c:	9000      	str	r0, [sp, #0]
{
 800699e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 80069a0:	f7ff fbe2 	bl	8006168 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80069a4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80069a8:	2b20      	cmp	r3, #32
 80069aa:	d003      	beq.n	80069b4 <HAL_I2C_Master_Receive+0x28>
      return HAL_BUSY;
 80069ac:	2002      	movs	r0, #2
}
 80069ae:	b006      	add	sp, #24
 80069b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b4:	4605      	mov	r5, r0
 80069b6:	e005      	b.n	80069c4 <HAL_I2C_Master_Receive+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069b8:	f7ff fbd6 	bl	8006168 <HAL_GetTick>
 80069bc:	1b40      	subs	r0, r0, r5
 80069be:	2819      	cmp	r0, #25
 80069c0:	f200 808a 	bhi.w	8006ad8 <HAL_I2C_Master_Receive+0x14c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069c4:	6822      	ldr	r2, [r4, #0]
 80069c6:	6993      	ldr	r3, [r2, #24]
 80069c8:	43db      	mvns	r3, r3
 80069ca:	f013 0a02 	ands.w	sl, r3, #2
 80069ce:	d0f3      	beq.n	80069b8 <HAL_I2C_Master_Receive+0x2c>
    __HAL_LOCK(hi2c);
 80069d0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d0e9      	beq.n	80069ac <HAL_I2C_Master_Receive+0x20>
 80069d8:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069da:	6813      	ldr	r3, [r2, #0]
    __HAL_LOCK(hi2c);
 80069dc:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069e0:	07db      	lsls	r3, r3, #31
 80069e2:	d402      	bmi.n	80069ea <HAL_I2C_Master_Receive+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80069e4:	6813      	ldr	r3, [r2, #0]
 80069e6:	430b      	orrs	r3, r1
 80069e8:	6013      	str	r3, [r2, #0]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80069ea:	2010      	movs	r0, #16
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80069ec:	2100      	movs	r1, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80069ee:	f04f 0c22 	mov.w	ip, #34	; 0x22
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069f2:	6813      	ldr	r3, [r2, #0]
 80069f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069f8:	6013      	str	r3, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069fa:	4b9f      	ldr	r3, [pc, #636]	; (8006c78 <HAL_I2C_Master_Receive+0x2ec>)
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80069fc:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006a00:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006a04:	6421      	str	r1, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8006a06:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a0a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a0c:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006a0e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a10:	6813      	ldr	r3, [r2, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006a12:	2908      	cmp	r1, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    hi2c->pBuffPtr    = pData;
 8006a18:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8006a1c:	8520      	strh	r0, [r4, #40]	; 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a1e:	6013      	str	r3, [r2, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006a20:	d035      	beq.n	8006a8e <HAL_I2C_Master_Receive+0x102>
 8006a22:	2901      	cmp	r1, #1
 8006a24:	d033      	beq.n	8006a8e <HAL_I2C_Master_Receive+0x102>
 8006a26:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8006a2a:	d030      	beq.n	8006a8e <HAL_I2C_Master_Receive+0x102>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006a2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006a2e:	2b11      	cmp	r3, #17
 8006a30:	d02d      	beq.n	8006a8e <HAL_I2C_Master_Receive+0x102>
 8006a32:	1c71      	adds	r1, r6, #1
 8006a34:	d130      	bne.n	8006a98 <HAL_I2C_Master_Receive+0x10c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a36:	6953      	ldr	r3, [r2, #20]
 8006a38:	07db      	lsls	r3, r3, #31
 8006a3a:	d5fc      	bpl.n	8006a36 <HAL_I2C_Master_Receive+0xaa>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a3c:	6923      	ldr	r3, [r4, #16]
 8006a3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a42:	f040 81a8 	bne.w	8006d96 <HAL_I2C_Master_Receive+0x40a>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a46:	f047 0701 	orr.w	r7, r7, #1
 8006a4a:	b2ff      	uxtb	r7, r7
 8006a4c:	6117      	str	r7, [r2, #16]
 8006a4e:	1c71      	adds	r1, r6, #1
 8006a50:	d003      	beq.n	8006a5a <HAL_I2C_Master_Receive+0xce>
 8006a52:	e1d1      	b.n	8006df8 <HAL_I2C_Master_Receive+0x46c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a54:	6953      	ldr	r3, [r2, #20]
 8006a56:	055f      	lsls	r7, r3, #21
 8006a58:	d44c      	bmi.n	8006af4 <HAL_I2C_Master_Receive+0x168>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a5a:	6953      	ldr	r3, [r2, #20]
 8006a5c:	079b      	lsls	r3, r3, #30
 8006a5e:	d5f9      	bpl.n	8006a54 <HAL_I2C_Master_Receive+0xc8>
    if (hi2c->XferSize == 0U)
 8006a60:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d15e      	bne.n	8006b24 <HAL_I2C_Master_Receive+0x198>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a66:	9301      	str	r3, [sp, #4]
 8006a68:	6953      	ldr	r3, [r2, #20]
 8006a6a:	9301      	str	r3, [sp, #4]
 8006a6c:	6993      	ldr	r3, [r2, #24]
 8006a6e:	9301      	str	r3, [sp, #4]
 8006a70:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a72:	6813      	ldr	r3, [r2, #0]
 8006a74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a78:	6013      	str	r3, [r2, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a7a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8006a7c:	2220      	movs	r2, #32
    return HAL_OK;
 8006a7e:	4618      	mov	r0, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8006a80:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8006a84:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a88:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8006a8c:	e78f      	b.n	80069ae <HAL_I2C_Master_Receive+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a8e:	6813      	ldr	r3, [r2, #0]
 8006a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	e7cc      	b.n	8006a32 <HAL_I2C_Master_Receive+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a98:	6953      	ldr	r3, [r2, #20]
 8006a9a:	07d8      	lsls	r0, r3, #31
 8006a9c:	d4ce      	bmi.n	8006a3c <HAL_I2C_Master_Receive+0xb0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a9e:	f7ff fb63 	bl	8006168 <HAL_GetTick>
 8006aa2:	1b40      	subs	r0, r0, r5
 8006aa4:	4286      	cmp	r6, r0
 8006aa6:	6822      	ldr	r2, [r4, #0]
 8006aa8:	d301      	bcc.n	8006aae <HAL_I2C_Master_Receive+0x122>
 8006aaa:	2e00      	cmp	r6, #0
 8006aac:	d1c1      	bne.n	8006a32 <HAL_I2C_Master_Receive+0xa6>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006aae:	2100      	movs	r1, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ab0:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006ab2:	6321      	str	r1, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ab4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ab8:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006abc:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006abe:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ac2:	f043 0320 	orr.w	r3, r3, #32
 8006ac6:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ac8:	6813      	ldr	r3, [r2, #0]
 8006aca:	05d8      	lsls	r0, r3, #23
 8006acc:	d526      	bpl.n	8006b1c <HAL_I2C_Master_Receive+0x190>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ace:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 8006ad2:	2001      	movs	r0, #1
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ad4:	6423      	str	r3, [r4, #64]	; 0x40
 8006ad6:	e76a      	b.n	80069ae <HAL_I2C_Master_Receive+0x22>
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ad8:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006ada:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ade:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ae2:	f884 a03e 	strb.w	sl, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ae6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006ae8:	f884 a03c 	strb.w	sl, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006aec:	f043 0320 	orr.w	r3, r3, #32
 8006af0:	6423      	str	r3, [r4, #64]	; 0x40
 8006af2:	e75b      	b.n	80069ac <HAL_I2C_Master_Receive+0x20>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006af4:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006af6:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8006afa:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006afc:	6813      	ldr	r3, [r2, #0]
 8006afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b02:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b04:	6155      	str	r5, [r2, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b06:	6321      	str	r1, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b08:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b0c:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b10:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006b12:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b16:	f043 0304 	orr.w	r3, r3, #4
 8006b1a:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006b1c:	2001      	movs	r0, #1
}
 8006b1e:	b006      	add	sp, #24
 8006b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (hi2c->XferSize == 1U)
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	f000 8091 	beq.w	8006c4c <HAL_I2C_Master_Receive+0x2c0>
    else if (hi2c->XferSize == 2U)
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	f000 818f 	beq.w	8006e4e <HAL_I2C_Master_Receive+0x4c2>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b30:	2000      	movs	r0, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b32:	6811      	ldr	r1, [r2, #0]
 8006b34:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8006b38:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b3a:	9004      	str	r0, [sp, #16]
 8006b3c:	6951      	ldr	r1, [r2, #20]
 8006b3e:	9104      	str	r1, [sp, #16]
 8006b40:	6992      	ldr	r2, [r2, #24]
 8006b42:	9204      	str	r2, [sp, #16]
 8006b44:	9a04      	ldr	r2, [sp, #16]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006b46:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8006c80 <HAL_I2C_Master_Receive+0x2f4>
 8006b4a:	4f4c      	ldr	r7, [pc, #304]	; (8006c7c <HAL_I2C_Master_Receive+0x2f0>)
    while (hi2c->XferSize > 0U)
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d094      	beq.n	8006a7a <HAL_I2C_Master_Receive+0xee>
      if (hi2c->XferSize <= 3U)
 8006b50:	2b03      	cmp	r3, #3
 8006b52:	f200 808f 	bhi.w	8006c74 <HAL_I2C_Master_Receive+0x2e8>
        if (hi2c->XferSize == 1U)
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	f000 80ea 	beq.w	8006d30 <HAL_I2C_Master_Receive+0x3a4>
        else if (hi2c->XferSize == 2U)
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d136      	bne.n	8006bce <HAL_I2C_Master_Receive+0x242>
 8006b60:	1c71      	adds	r1, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b62:	6822      	ldr	r2, [r4, #0]
 8006b64:	f040 80d7 	bne.w	8006d16 <HAL_I2C_Master_Receive+0x38a>
 8006b68:	6953      	ldr	r3, [r2, #20]
 8006b6a:	075b      	lsls	r3, r3, #29
 8006b6c:	d5fc      	bpl.n	8006b68 <HAL_I2C_Master_Receive+0x1dc>
 8006b6e:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b70:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b72:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b7a:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8006b80:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006b82:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006b84:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006b86:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8006b88:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8006b8a:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8006b8c:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8006b8e:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006b90:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006b92:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006b94:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b96:	6822      	ldr	r2, [r4, #0]
 8006b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b9a:	6912      	ldr	r2, [r2, #16]
 8006b9c:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8006b9e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8006ba0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8006ba2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8006ba4:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 8006ba6:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8006ba8:	3101      	adds	r1, #1
          hi2c->XferCount--;
 8006baa:	b292      	uxth	r2, r2
          hi2c->XferSize--;
 8006bac:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8006bae:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8006bb0:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8006bb2:	8523      	strh	r3, [r4, #40]	; 0x28
 8006bb4:	e7ca      	b.n	8006b4c <HAL_I2C_Master_Receive+0x1c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bb6:	6953      	ldr	r3, [r2, #20]
 8006bb8:	0758      	lsls	r0, r3, #29
 8006bba:	d40e      	bmi.n	8006bda <HAL_I2C_Master_Receive+0x24e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bbc:	f7ff fad4 	bl	8006168 <HAL_GetTick>
 8006bc0:	1b40      	subs	r0, r0, r5
 8006bc2:	4286      	cmp	r6, r0
 8006bc4:	f0c0 8096 	bcc.w	8006cf4 <HAL_I2C_Master_Receive+0x368>
 8006bc8:	2e00      	cmp	r6, #0
 8006bca:	f000 8093 	beq.w	8006cf4 <HAL_I2C_Master_Receive+0x368>
 8006bce:	1c71      	adds	r1, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bd0:	6822      	ldr	r2, [r4, #0]
 8006bd2:	d1f0      	bne.n	8006bb6 <HAL_I2C_Master_Receive+0x22a>
 8006bd4:	6953      	ldr	r3, [r2, #20]
 8006bd6:	075b      	lsls	r3, r3, #29
 8006bd8:	d5fc      	bpl.n	8006bd4 <HAL_I2C_Master_Receive+0x248>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bda:	6813      	ldr	r3, [r2, #0]
 8006bdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006be0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006be2:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006be4:	6822      	ldr	r2, [r4, #0]
 8006be6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006be8:	6912      	ldr	r2, [r2, #16]
 8006bea:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006bec:	f8d8 3000 	ldr.w	r3, [r8]
          hi2c->XferCount--;
 8006bf0:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006bf2:	08db      	lsrs	r3, r3, #3
 8006bf4:	fba7 2303 	umull	r2, r3, r7, r3
          hi2c->XferSize--;
 8006bf8:	8d20      	ldrh	r0, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8006bfa:	6a62      	ldr	r2, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006bfc:	0a1b      	lsrs	r3, r3, #8
          hi2c->XferCount--;
 8006bfe:	3901      	subs	r1, #1
 8006c00:	b289      	uxth	r1, r1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006c02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
          hi2c->XferCount--;
 8006c06:	8561      	strh	r1, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8006c08:	3801      	subs	r0, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006c0a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
          hi2c->pBuffPtr++;
 8006c0e:	1c51      	adds	r1, r2, #1
 8006c10:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006c12:	8520      	strh	r0, [r4, #40]	; 0x28
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	e004      	b.n	8006c22 <HAL_I2C_Master_Receive+0x296>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	6959      	ldr	r1, [r3, #20]
 8006c1c:	0749      	lsls	r1, r1, #29
 8006c1e:	f100 8099 	bmi.w	8006d54 <HAL_I2C_Master_Receive+0x3c8>
            count--;
 8006c22:	9b00      	ldr	r3, [sp, #0]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	9300      	str	r3, [sp, #0]
            if (count == 0U)
 8006c28:	9b00      	ldr	r3, [sp, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1f4      	bne.n	8006c18 <HAL_I2C_Master_Receive+0x28c>
              hi2c->State               = HAL_I2C_STATE_READY;
 8006c2e:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006c30:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006c32:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c36:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c3a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006c3c:	f042 0220 	orr.w	r2, r2, #32
 8006c40:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006c42:	b662      	cpsie	i
              return HAL_ERROR;
 8006c44:	2001      	movs	r0, #1
              __HAL_UNLOCK(hi2c);
 8006c46:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8006c4a:	e6b0      	b.n	80069ae <HAL_I2C_Master_Receive+0x22>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c4c:	6813      	ldr	r3, [r2, #0]
 8006c4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c52:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006c54:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c56:	2200      	movs	r2, #0
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	9202      	str	r2, [sp, #8]
 8006c5c:	695a      	ldr	r2, [r3, #20]
 8006c5e:	9202      	str	r2, [sp, #8]
 8006c60:	699a      	ldr	r2, [r3, #24]
 8006c62:	9202      	str	r2, [sp, #8]
 8006c64:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006c6e:	b662      	cpsie	i
 8006c70:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006c72:	e768      	b.n	8006b46 <HAL_I2C_Master_Receive+0x1ba>
 8006c74:	b976      	cbnz	r6, 8006c94 <HAL_I2C_Master_Receive+0x308>
 8006c76:	e034      	b.n	8006ce2 <HAL_I2C_Master_Receive+0x356>
 8006c78:	ffff0000 	.word	0xffff0000
 8006c7c:	14f8b589 	.word	0x14f8b589
 8006c80:	20000088 	.word	0x20000088
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c84:	695a      	ldr	r2, [r3, #20]
 8006c86:	06d1      	lsls	r1, r2, #27
 8006c88:	d475      	bmi.n	8006d76 <HAL_I2C_Master_Receive+0x3ea>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c8a:	f7ff fa6d 	bl	8006168 <HAL_GetTick>
 8006c8e:	1b40      	subs	r0, r0, r5
 8006c90:	4286      	cmp	r6, r0
 8006c92:	d32f      	bcc.n	8006cf4 <HAL_I2C_Master_Receive+0x368>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	695a      	ldr	r2, [r3, #20]
 8006c98:	0650      	lsls	r0, r2, #25
 8006c9a:	d5f3      	bpl.n	8006c84 <HAL_I2C_Master_Receive+0x2f8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c9c:	691a      	ldr	r2, [r3, #16]
 8006c9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ca0:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8006ca2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ca4:	6821      	ldr	r1, [r4, #0]
        hi2c->XferCount--;
 8006ca6:	3a01      	subs	r2, #1
 8006ca8:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 8006caa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8006cac:	8562      	strh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006cae:	6948      	ldr	r0, [r1, #20]
        hi2c->pBuffPtr++;
 8006cb0:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8006cb6:	f102 0c01 	add.w	ip, r2, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006cba:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 8006cbc:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8006cbe:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006cc2:	f57f af43 	bpl.w	8006b4c <HAL_I2C_Master_Receive+0x1c0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cc6:	690b      	ldr	r3, [r1, #16]
 8006cc8:	7053      	strb	r3, [r2, #1]
          hi2c->XferSize--;
 8006cca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006ccc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006cce:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006cd0:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 8006cd2:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 8006cd4:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 8006cd6:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 8006cd8:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8006cda:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006cdc:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006cde:	6261      	str	r1, [r4, #36]	; 0x24
 8006ce0:	e734      	b.n	8006b4c <HAL_I2C_Master_Receive+0x1c0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	695a      	ldr	r2, [r3, #20]
 8006ce6:	0652      	lsls	r2, r2, #25
 8006ce8:	d4d8      	bmi.n	8006c9c <HAL_I2C_Master_Receive+0x310>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006cea:	695a      	ldr	r2, [r3, #20]
 8006cec:	06d5      	lsls	r5, r2, #27
 8006cee:	d442      	bmi.n	8006d76 <HAL_I2C_Master_Receive+0x3ea>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cf0:	f7ff fa3a 	bl	8006168 <HAL_GetTick>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006cf4:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006cf6:	2320      	movs	r3, #32
          return HAL_ERROR;
 8006cf8:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006cfa:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006cfc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d00:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d04:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006d06:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d0a:	f043 0320 	orr.w	r3, r3, #32
 8006d0e:	6423      	str	r3, [r4, #64]	; 0x40
}
 8006d10:	b006      	add	sp, #24
 8006d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d16:	6953      	ldr	r3, [r2, #20]
 8006d18:	0758      	lsls	r0, r3, #29
 8006d1a:	f53f af28 	bmi.w	8006b6e <HAL_I2C_Master_Receive+0x1e2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d1e:	f7ff fa23 	bl	8006168 <HAL_GetTick>
 8006d22:	1b40      	subs	r0, r0, r5
 8006d24:	4286      	cmp	r6, r0
 8006d26:	d3e5      	bcc.n	8006cf4 <HAL_I2C_Master_Receive+0x368>
 8006d28:	2e00      	cmp	r6, #0
 8006d2a:	f47f af19 	bne.w	8006b60 <HAL_I2C_Master_Receive+0x1d4>
 8006d2e:	e7e1      	b.n	8006cf4 <HAL_I2C_Master_Receive+0x368>
 8006d30:	b946      	cbnz	r6, 8006d44 <HAL_I2C_Master_Receive+0x3b8>
 8006d32:	e086      	b.n	8006e42 <HAL_I2C_Master_Receive+0x4b6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d34:	695a      	ldr	r2, [r3, #20]
 8006d36:	06d2      	lsls	r2, r2, #27
 8006d38:	d41d      	bmi.n	8006d76 <HAL_I2C_Master_Receive+0x3ea>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d3a:	f7ff fa15 	bl	8006168 <HAL_GetTick>
 8006d3e:	1b40      	subs	r0, r0, r5
 8006d40:	4286      	cmp	r6, r0
 8006d42:	d3d7      	bcc.n	8006cf4 <HAL_I2C_Master_Receive+0x368>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d44:	6823      	ldr	r3, [r4, #0]
 8006d46:	695a      	ldr	r2, [r3, #20]
 8006d48:	0651      	lsls	r1, r2, #25
 8006d4a:	d5f3      	bpl.n	8006d34 <HAL_I2C_Master_Receive+0x3a8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d4c:	691a      	ldr	r2, [r3, #16]
 8006d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d50:	701a      	strb	r2, [r3, #0]
 8006d52:	e7ba      	b.n	8006cca <HAL_I2C_Master_Receive+0x33e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d54:	6819      	ldr	r1, [r3, #0]
 8006d56:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006d5a:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	7053      	strb	r3, [r2, #1]
          hi2c->XferCount--;
 8006d60:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006d62:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006d64:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006d66:	3b01      	subs	r3, #1
 8006d68:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8006d6a:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8006d6c:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8006d6e:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006d70:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006d72:	8522      	strh	r2, [r4, #40]	; 0x28
 8006d74:	e70e      	b.n	8006b94 <HAL_I2C_Master_Receive+0x208>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d76:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d78:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d7c:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d7e:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d80:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d82:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d86:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006d8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006d8c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006d90:	6423      	str	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8006d92:	2001      	movs	r0, #1
 8006d94:	e60b      	b.n	80069ae <HAL_I2C_Master_Receive+0x22>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006d96:	ea4f 18e7 	mov.w	r8, r7, asr #7
 8006d9a:	f008 0806 	and.w	r8, r8, #6
 8006d9e:	f048 03f0 	orr.w	r3, r8, #240	; 0xf0
 8006da2:	6113      	str	r3, [r2, #16]
 8006da4:	1c73      	adds	r3, r6, #1
 8006da6:	d004      	beq.n	8006db2 <HAL_I2C_Master_Receive+0x426>
 8006da8:	e039      	b.n	8006e1e <HAL_I2C_Master_Receive+0x492>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006daa:	6953      	ldr	r3, [r2, #20]
 8006dac:	0559      	lsls	r1, r3, #21
 8006dae:	f53f aea1 	bmi.w	8006af4 <HAL_I2C_Master_Receive+0x168>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006db2:	6953      	ldr	r3, [r2, #20]
 8006db4:	0718      	lsls	r0, r3, #28
 8006db6:	d5f8      	bpl.n	8006daa <HAL_I2C_Master_Receive+0x41e>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006db8:	b2ff      	uxtb	r7, r7
 8006dba:	6117      	str	r7, [r2, #16]
 8006dbc:	1c70      	adds	r0, r6, #1
 8006dbe:	d004      	beq.n	8006dca <HAL_I2C_Master_Receive+0x43e>
 8006dc0:	e059      	b.n	8006e76 <HAL_I2C_Master_Receive+0x4ea>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dc2:	6953      	ldr	r3, [r2, #20]
 8006dc4:	055b      	lsls	r3, r3, #21
 8006dc6:	f53f ae95 	bmi.w	8006af4 <HAL_I2C_Master_Receive+0x168>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006dca:	6953      	ldr	r3, [r2, #20]
 8006dcc:	0799      	lsls	r1, r3, #30
 8006dce:	d5f8      	bpl.n	8006dc2 <HAL_I2C_Master_Receive+0x436>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	9305      	str	r3, [sp, #20]
 8006dd4:	6953      	ldr	r3, [r2, #20]
 8006dd6:	9305      	str	r3, [sp, #20]
 8006dd8:	6993      	ldr	r3, [r2, #24]
 8006dda:	9305      	str	r3, [sp, #20]
 8006ddc:	9b05      	ldr	r3, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006dde:	6813      	ldr	r3, [r2, #0]
 8006de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006de4:	6013      	str	r3, [r2, #0]
 8006de6:	1c71      	adds	r1, r6, #1
 8006de8:	d157      	bne.n	8006e9a <HAL_I2C_Master_Receive+0x50e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006dea:	6953      	ldr	r3, [r2, #20]
 8006dec:	07db      	lsls	r3, r3, #31
 8006dee:	d5fc      	bpl.n	8006dea <HAL_I2C_Master_Receive+0x45e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006df0:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8006df4:	6113      	str	r3, [r2, #16]
 8006df6:	e62a      	b.n	8006a4e <HAL_I2C_Master_Receive+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006df8:	6953      	ldr	r3, [r2, #20]
 8006dfa:	0798      	lsls	r0, r3, #30
 8006dfc:	f53f ae30 	bmi.w	8006a60 <HAL_I2C_Master_Receive+0xd4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e00:	6953      	ldr	r3, [r2, #20]
 8006e02:	0558      	lsls	r0, r3, #21
 8006e04:	f53f ae76 	bmi.w	8006af4 <HAL_I2C_Master_Receive+0x168>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e08:	f7ff f9ae 	bl	8006168 <HAL_GetTick>
 8006e0c:	1b40      	subs	r0, r0, r5
 8006e0e:	4286      	cmp	r6, r0
 8006e10:	f4ff af70 	bcc.w	8006cf4 <HAL_I2C_Master_Receive+0x368>
 8006e14:	2e00      	cmp	r6, #0
 8006e16:	f43f af6d 	beq.w	8006cf4 <HAL_I2C_Master_Receive+0x368>
 8006e1a:	6822      	ldr	r2, [r4, #0]
 8006e1c:	e617      	b.n	8006a4e <HAL_I2C_Master_Receive+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e1e:	6953      	ldr	r3, [r2, #20]
 8006e20:	071b      	lsls	r3, r3, #28
 8006e22:	d4c9      	bmi.n	8006db8 <HAL_I2C_Master_Receive+0x42c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e24:	6953      	ldr	r3, [r2, #20]
 8006e26:	0559      	lsls	r1, r3, #21
 8006e28:	f53f ae64 	bmi.w	8006af4 <HAL_I2C_Master_Receive+0x168>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e2c:	f7ff f99c 	bl	8006168 <HAL_GetTick>
 8006e30:	1b40      	subs	r0, r0, r5
 8006e32:	4286      	cmp	r6, r0
 8006e34:	f4ff af5e 	bcc.w	8006cf4 <HAL_I2C_Master_Receive+0x368>
 8006e38:	2e00      	cmp	r6, #0
 8006e3a:	f43f af5b 	beq.w	8006cf4 <HAL_I2C_Master_Receive+0x368>
 8006e3e:	6822      	ldr	r2, [r4, #0]
 8006e40:	e7b0      	b.n	8006da4 <HAL_I2C_Master_Receive+0x418>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	695a      	ldr	r2, [r3, #20]
 8006e46:	0650      	lsls	r0, r2, #25
 8006e48:	f57f af4f 	bpl.w	8006cea <HAL_I2C_Master_Receive+0x35e>
 8006e4c:	e77e      	b.n	8006d4c <HAL_I2C_Master_Receive+0x3c0>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e4e:	6813      	ldr	r3, [r2, #0]
 8006e50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006e54:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e56:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e58:	2200      	movs	r2, #0
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	9203      	str	r2, [sp, #12]
 8006e5e:	695a      	ldr	r2, [r3, #20]
 8006e60:	9203      	str	r2, [sp, #12]
 8006e62:	699a      	ldr	r2, [r3, #24]
 8006e64:	9203      	str	r2, [sp, #12]
 8006e66:	9a03      	ldr	r2, [sp, #12]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006e70:	b662      	cpsie	i
 8006e72:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006e74:	e667      	b.n	8006b46 <HAL_I2C_Master_Receive+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e76:	6953      	ldr	r3, [r2, #20]
 8006e78:	079f      	lsls	r7, r3, #30
 8006e7a:	d4a9      	bmi.n	8006dd0 <HAL_I2C_Master_Receive+0x444>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e7c:	6953      	ldr	r3, [r2, #20]
 8006e7e:	055f      	lsls	r7, r3, #21
 8006e80:	f53f ae38 	bmi.w	8006af4 <HAL_I2C_Master_Receive+0x168>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e84:	f7ff f970 	bl	8006168 <HAL_GetTick>
 8006e88:	1b40      	subs	r0, r0, r5
 8006e8a:	4286      	cmp	r6, r0
 8006e8c:	f4ff af32 	bcc.w	8006cf4 <HAL_I2C_Master_Receive+0x368>
 8006e90:	2e00      	cmp	r6, #0
 8006e92:	f43f af2f 	beq.w	8006cf4 <HAL_I2C_Master_Receive+0x368>
 8006e96:	6822      	ldr	r2, [r4, #0]
 8006e98:	e790      	b.n	8006dbc <HAL_I2C_Master_Receive+0x430>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e9a:	6953      	ldr	r3, [r2, #20]
 8006e9c:	07df      	lsls	r7, r3, #31
 8006e9e:	d4a7      	bmi.n	8006df0 <HAL_I2C_Master_Receive+0x464>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea0:	f7ff f962 	bl	8006168 <HAL_GetTick>
 8006ea4:	1b40      	subs	r0, r0, r5
 8006ea6:	4286      	cmp	r6, r0
 8006ea8:	d315      	bcc.n	8006ed6 <HAL_I2C_Master_Receive+0x54a>
 8006eaa:	6822      	ldr	r2, [r4, #0]
 8006eac:	4611      	mov	r1, r2
 8006eae:	2e00      	cmp	r6, #0
 8006eb0:	d199      	bne.n	8006de6 <HAL_I2C_Master_Receive+0x45a>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006eb2:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006eb4:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006eb6:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006eb8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ebc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ec0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006ec2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ec6:	f043 0320 	orr.w	r3, r3, #32
 8006eca:	6423      	str	r3, [r4, #64]	; 0x40
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ecc:	680b      	ldr	r3, [r1, #0]
 8006ece:	05d8      	lsls	r0, r3, #23
 8006ed0:	f53f adfd 	bmi.w	8006ace <HAL_I2C_Master_Receive+0x142>
 8006ed4:	e622      	b.n	8006b1c <HAL_I2C_Master_Receive+0x190>
 8006ed6:	6821      	ldr	r1, [r4, #0]
 8006ed8:	e7eb      	b.n	8006eb2 <HAL_I2C_Master_Receive+0x526>
 8006eda:	bf00      	nop

08006edc <HAL_I2C_MasterTxCpltCallback>:
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop

08006ee0 <HAL_I2C_MasterRxCpltCallback>:
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop

08006ee4 <HAL_I2C_SlaveTxCpltCallback>:
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop

08006ee8 <HAL_I2C_SlaveRxCpltCallback>:
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop

08006eec <HAL_I2C_AddrCallback>:
}
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop

08006ef0 <HAL_I2C_ListenCpltCallback>:
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop

08006ef4 <HAL_I2C_MemTxCpltCallback>:
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop

08006ef8 <I2C_MemoryTransmit_TXE_BTF>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ef8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 8006efc:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8006efe:	b538      	push	{r3, r4, r5, lr}
 8006f00:	4603      	mov	r3, r0
  if (hi2c->EventCount == 0U)
 8006f02:	b959      	cbnz	r1, 8006f1c <I2C_MemoryTransmit_TXE_BTF+0x24>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006f04:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8006f06:	6801      	ldr	r1, [r0, #0]
 8006f08:	2a01      	cmp	r2, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006f0a:	6c82      	ldr	r2, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006f0c:	d02a      	beq.n	8006f64 <I2C_MemoryTransmit_TXE_BTF+0x6c>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006f0e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8006f12:	610a      	str	r2, [r1, #16]
      hi2c->EventCount++;
 8006f14:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8006f16:	3201      	adds	r2, #1
 8006f18:	6502      	str	r2, [r0, #80]	; 0x50
}
 8006f1a:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->EventCount == 1U)
 8006f1c:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8006f1e:	2901      	cmp	r1, #1
 8006f20:	d026      	beq.n	8006f70 <I2C_MemoryTransmit_TXE_BTF+0x78>
  else if (hi2c->EventCount == 2U)
 8006f22:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8006f24:	2902      	cmp	r1, #2
 8006f26:	d1f8      	bne.n	8006f1a <I2C_MemoryTransmit_TXE_BTF+0x22>
 8006f28:	b2d2      	uxtb	r2, r2
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006f2a:	2a22      	cmp	r2, #34	; 0x22
 8006f2c:	d02c      	beq.n	8006f88 <I2C_MemoryTransmit_TXE_BTF+0x90>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006f2e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8006f30:	b289      	uxth	r1, r1
 8006f32:	bb29      	cbnz	r1, 8006f80 <I2C_MemoryTransmit_TXE_BTF+0x88>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006f34:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8006f36:	b289      	uxth	r1, r1
 8006f38:	2900      	cmp	r1, #0
 8006f3a:	d1ee      	bne.n	8006f1a <I2C_MemoryTransmit_TXE_BTF+0x22>
 8006f3c:	2a21      	cmp	r2, #33	; 0x21
 8006f3e:	d1ec      	bne.n	8006f1a <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->State = HAL_I2C_STATE_READY;
 8006f40:	2520      	movs	r5, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f42:	6802      	ldr	r2, [r0, #0]
 8006f44:	6854      	ldr	r4, [r2, #4]
 8006f46:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 8006f4a:	6054      	str	r4, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f4c:	6814      	ldr	r4, [r2, #0]
 8006f4e:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8006f52:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f54:	6301      	str	r1, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006f56:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f5a:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006f5e:	f7ff ffc9 	bl	8006ef4 <HAL_I2C_MemTxCpltCallback>
}
 8006f62:	bd38      	pop	{r3, r4, r5, pc}
 8006f64:	b2d2      	uxtb	r2, r2
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006f66:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 8006f68:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8006f6a:	3202      	adds	r2, #2
 8006f6c:	6502      	str	r2, [r0, #80]	; 0x50
}
 8006f6e:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006f70:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006f72:	6801      	ldr	r1, [r0, #0]
 8006f74:	b2d2      	uxtb	r2, r2
 8006f76:	610a      	str	r2, [r1, #16]
    hi2c->EventCount++;
 8006f78:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8006f7a:	3201      	adds	r2, #1
 8006f7c:	6502      	str	r2, [r0, #80]	; 0x50
}
 8006f7e:	bd38      	pop	{r3, r4, r5, pc}
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006f80:	2a21      	cmp	r2, #33	; 0x21
 8006f82:	d007      	beq.n	8006f94 <I2C_MemoryTransmit_TXE_BTF+0x9c>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
}
 8006f86:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006f88:	6802      	ldr	r2, [r0, #0]
 8006f8a:	6813      	ldr	r3, [r2, #0]
 8006f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f90:	6013      	str	r3, [r2, #0]
}
 8006f92:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f94:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8006f96:	6802      	ldr	r2, [r0, #0]
 8006f98:	f811 0b01 	ldrb.w	r0, [r1], #1
 8006f9c:	6110      	str	r0, [r2, #16]
      hi2c->XferCount--;
 8006f9e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8006fa0:	6259      	str	r1, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006fa2:	3a01      	subs	r2, #1
 8006fa4:	b292      	uxth	r2, r2
 8006fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006fa8:	bd38      	pop	{r3, r4, r5, pc}
 8006faa:	bf00      	nop

08006fac <HAL_I2C_MemRxCpltCallback>:
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop

08006fb0 <HAL_I2C_ErrorCallback>:
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop

08006fb4 <HAL_I2C_AbortCpltCallback>:
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop

08006fb8 <I2C_DMAAbort>:
{
 8006fb8:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t count = 0U;
 8006fba:	2400      	movs	r4, #0
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006fbc:	4b3a      	ldr	r3, [pc, #232]	; (80070a8 <I2C_DMAAbort+0xf0>)
 8006fbe:	4d3b      	ldr	r5, [pc, #236]	; (80070ac <I2C_DMAAbort+0xf4>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
{
 8006fc2:	b082      	sub	sp, #8
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006fc4:	08db      	lsrs	r3, r3, #3
 8006fc6:	fba5 2303 	umull	r2, r3, r5, r3
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006fca:	6a41      	ldr	r1, [r0, #36]	; 0x24
  __IO uint32_t count = 0U;
 8006fcc:	9401      	str	r4, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006fce:	0a1b      	lsrs	r3, r3, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006fd0:	f891 003d 	ldrb.w	r0, [r1, #61]	; 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006fd4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006fd8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006fdc:	680a      	ldr	r2, [r1, #0]
 8006fde:	9301      	str	r3, [sp, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006fe0:	b2c0      	uxtb	r0, r0
 8006fe2:	e005      	b.n	8006ff0 <I2C_DMAAbort+0x38>
    count--;
 8006fe4:	9b01      	ldr	r3, [sp, #4]
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006fea:	6813      	ldr	r3, [r2, #0]
 8006fec:	059b      	lsls	r3, r3, #22
 8006fee:	d506      	bpl.n	8006ffe <I2C_DMAAbort+0x46>
    if (count == 0U)
 8006ff0:	9b01      	ldr	r3, [sp, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1f6      	bne.n	8006fe4 <I2C_DMAAbort+0x2c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ff6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ff8:	f043 0320 	orr.w	r3, r3, #32
 8006ffc:	640b      	str	r3, [r1, #64]	; 0x40
 8006ffe:	e9d1 430d 	ldrd	r4, r3, [r1, #52]	; 0x34
  if (hi2c->hdmatx != NULL)
 8007002:	b34c      	cbz	r4, 8007058 <I2C_DMAAbort+0xa0>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007004:	2500      	movs	r5, #0
 8007006:	62a5      	str	r5, [r4, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8007008:	b1fb      	cbz	r3, 800704a <I2C_DMAAbort+0x92>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800700a:	6816      	ldr	r6, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 800700c:	629d      	str	r5, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800700e:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
 8007012:	6016      	str	r6, [r2, #0]
  hi2c->XferCount = 0U;
 8007014:	854d      	strh	r5, [r1, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007016:	6365      	str	r5, [r4, #52]	; 0x34
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007018:	2400      	movs	r4, #0
 800701a:	635c      	str	r4, [r3, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 800701c:	6813      	ldr	r3, [r2, #0]
 800701e:	f023 0301 	bic.w	r3, r3, #1
 8007022:	6013      	str	r3, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007024:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
 8007028:	2b60      	cmp	r3, #96	; 0x60
 800702a:	d02a      	beq.n	8007082 <I2C_DMAAbort+0xca>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800702c:	f000 0028 	and.w	r0, r0, #40	; 0x28
 8007030:	2828      	cmp	r0, #40	; 0x28
 8007032:	d019      	beq.n	8007068 <I2C_DMAAbort+0xb0>
      hi2c->State = HAL_I2C_STATE_READY;
 8007034:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007036:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8007038:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800703c:	f881 303e 	strb.w	r3, [r1, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007040:	4608      	mov	r0, r1
 8007042:	f7ff ffb5 	bl	8006fb0 <HAL_I2C_ErrorCallback>
}
 8007046:	b002      	add	sp, #8
 8007048:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800704a:	6815      	ldr	r5, [r2, #0]
 800704c:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8007050:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8007052:	854b      	strh	r3, [r1, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007054:	6363      	str	r3, [r4, #52]	; 0x34
 8007056:	e7e1      	b.n	800701c <I2C_DMAAbort+0x64>
  if (hi2c->hdmarx != NULL)
 8007058:	b1fb      	cbz	r3, 800709a <I2C_DMAAbort+0xe2>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800705a:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 800705c:	629c      	str	r4, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800705e:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8007062:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8007064:	854c      	strh	r4, [r1, #42]	; 0x2a
 8007066:	e7d7      	b.n	8007018 <I2C_DMAAbort+0x60>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007068:	2400      	movs	r4, #0
      __HAL_I2C_ENABLE(hi2c);
 800706a:	6813      	ldr	r3, [r2, #0]
 800706c:	f043 0301 	orr.w	r3, r3, #1
 8007070:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007072:	6813      	ldr	r3, [r2, #0]
 8007074:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007078:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800707a:	630c      	str	r4, [r1, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800707c:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
 8007080:	e7de      	b.n	8007040 <I2C_DMAAbort+0x88>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007082:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8007084:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 8007086:	4608      	mov	r0, r1
    hi2c->State         = HAL_I2C_STATE_READY;
 8007088:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800708c:	f881 303e 	strb.w	r3, [r1, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007090:	640b      	str	r3, [r1, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8007092:	f7ff ff8f 	bl	8006fb4 <HAL_I2C_AbortCpltCallback>
}
 8007096:	b002      	add	sp, #8
 8007098:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800709a:	6814      	ldr	r4, [r2, #0]
 800709c:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80070a0:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 80070a2:	854b      	strh	r3, [r1, #42]	; 0x2a
 80070a4:	e7ba      	b.n	800701c <I2C_DMAAbort+0x64>
 80070a6:	bf00      	nop
 80070a8:	20000088 	.word	0x20000088
 80070ac:	14f8b589 	.word	0x14f8b589

080070b0 <HAL_I2C_EV_IRQHandler>:
{
 80070b0:	b570      	push	{r4, r5, r6, lr}
 80070b2:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80070b4:	6803      	ldr	r3, [r0, #0]
{
 80070b6:	b08e      	sub	sp, #56	; 0x38
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80070b8:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80070ba:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80070bc:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070c0:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80070c4:	b2d2      	uxtb	r2, r2
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80070c6:	2a10      	cmp	r2, #16
 80070c8:	d020      	beq.n	800710c <HAL_I2C_EV_IRQHandler+0x5c>
 80070ca:	2a40      	cmp	r2, #64	; 0x40
 80070cc:	d01e      	beq.n	800710c <HAL_I2C_EV_IRQHandler+0x5c>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80070ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80070d0:	b2c9      	uxtb	r1, r1
 80070d2:	2a00      	cmp	r2, #0
 80070d4:	f000 80bb 	beq.w	800724e <HAL_I2C_EV_IRQHandler+0x19e>
  uint32_t sr2itflags               = 0U;
 80070d8:	2600      	movs	r6, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80070da:	695a      	ldr	r2, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070dc:	f3c2 0540 	ubfx	r5, r2, #1, #1
 80070e0:	2d00      	cmp	r5, #0
 80070e2:	d078      	beq.n	80071d6 <HAL_I2C_EV_IRQHandler+0x126>
 80070e4:	0585      	lsls	r5, r0, #22
 80070e6:	d57b      	bpl.n	80071e0 <HAL_I2C_EV_IRQHandler+0x130>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80070e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80070ea:	b102      	cbz	r2, 80070ee <HAL_I2C_EV_IRQHandler+0x3e>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80070ec:	699e      	ldr	r6, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80070ee:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80070f2:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80070f6:	2a28      	cmp	r2, #40	; 0x28
 80070f8:	f000 8216 	beq.w	8007528 <HAL_I2C_EV_IRQHandler+0x478>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80070fc:	f06f 0102 	mvn.w	r1, #2
    __HAL_UNLOCK(hi2c);
 8007100:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007102:	6159      	str	r1, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8007104:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8007108:	b00e      	add	sp, #56	; 0x38
 800710a:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800710c:	699e      	ldr	r6, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800710e:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007110:	f011 0f01 	tst.w	r1, #1
 8007114:	d139      	bne.n	800718a <HAL_I2C_EV_IRQHandler+0xda>
 8007116:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 800711a:	d0f5      	beq.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
 800711c:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8007120:	d0f2      	beq.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007122:	070d      	lsls	r5, r1, #28
 8007124:	f140 8099 	bpl.w	800725a <HAL_I2C_EV_IRQHandler+0x1aa>
 8007128:	0585      	lsls	r5, r0, #22
 800712a:	f100 81ee 	bmi.w	800750a <HAL_I2C_EV_IRQHandler+0x45a>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800712e:	0776      	lsls	r6, r6, #29
 8007130:	f140 8100 	bpl.w	8007334 <HAL_I2C_EV_IRQHandler+0x284>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007134:	685d      	ldr	r5, [r3, #4]
 8007136:	052d      	lsls	r5, r5, #20
 8007138:	d4e6      	bmi.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
 800713a:	f3c1 0580 	ubfx	r5, r1, #2, #1
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800713e:	0609      	lsls	r1, r1, #24
 8007140:	f140 81a2 	bpl.w	8007488 <HAL_I2C_EV_IRQHandler+0x3d8>
 8007144:	0546      	lsls	r6, r0, #21
 8007146:	f140 819f 	bpl.w	8007488 <HAL_I2C_EV_IRQHandler+0x3d8>
 800714a:	2d00      	cmp	r5, #0
 800714c:	f040 819f 	bne.w	800748e <HAL_I2C_EV_IRQHandler+0x3de>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007150:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007154:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007156:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800715a:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800715c:	b2c9      	uxtb	r1, r1
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800715e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007160:	2800      	cmp	r0, #0
 8007162:	f040 837d 	bne.w	8007860 <HAL_I2C_EV_IRQHandler+0x7b0>
 8007166:	2a21      	cmp	r2, #33	; 0x21
 8007168:	f000 842d 	beq.w	80079c6 <HAL_I2C_EV_IRQHandler+0x916>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800716c:	2940      	cmp	r1, #64	; 0x40
 800716e:	d1cb      	bne.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007170:	2a22      	cmp	r2, #34	; 0x22
 8007172:	d1c9      	bne.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
    if (hi2c->XferCount == 0U)
 8007174:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007176:	b292      	uxth	r2, r2
 8007178:	2a00      	cmp	r2, #0
 800717a:	f000 8445 	beq.w	8007a08 <HAL_I2C_EV_IRQHandler+0x958>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800717e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8007182:	2a40      	cmp	r2, #64	; 0x40
 8007184:	f040 80b6 	bne.w	80072f4 <HAL_I2C_EV_IRQHandler+0x244>
 8007188:	e187      	b.n	800749a <HAL_I2C_EV_IRQHandler+0x3ea>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800718a:	0585      	lsls	r5, r0, #22
 800718c:	d562      	bpl.n	8007254 <HAL_I2C_EV_IRQHandler+0x1a4>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800718e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007190:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8007194:	f000 81e3 	beq.w	800755e <HAL_I2C_EV_IRQHandler+0x4ae>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007198:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800719a:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800719e:	bf04      	itt	eq
 80071a0:	2208      	moveq	r2, #8
 80071a2:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80071a4:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80071a8:	2a40      	cmp	r2, #64	; 0x40
 80071aa:	f000 81d1 	beq.w	8007550 <HAL_I2C_EV_IRQHandler+0x4a0>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071ae:	6922      	ldr	r2, [r4, #16]
 80071b0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80071b4:	f000 8191 	beq.w	80074da <HAL_I2C_EV_IRQHandler+0x42a>
      if (hi2c->EventCount == 0U)
 80071b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80071ba:	2a00      	cmp	r2, #0
 80071bc:	f000 81d2 	beq.w	8007564 <HAL_I2C_EV_IRQHandler+0x4b4>
      else if (hi2c->EventCount == 1U)
 80071c0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80071c2:	2a01      	cmp	r2, #1
 80071c4:	d1a0      	bne.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80071c6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80071c8:	11d2      	asrs	r2, r2, #7
 80071ca:	f002 0206 	and.w	r2, r2, #6
 80071ce:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 80071d2:	611a      	str	r2, [r3, #16]
 80071d4:	e798      	b.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071d6:	06d6      	lsls	r6, r2, #27
 80071d8:	d502      	bpl.n	80071e0 <HAL_I2C_EV_IRQHandler+0x130>
 80071da:	0586      	lsls	r6, r0, #22
 80071dc:	f100 80d8 	bmi.w	8007390 <HAL_I2C_EV_IRQHandler+0x2e0>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80071e0:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 80071e4:	2921      	cmp	r1, #33	; 0x21
 80071e6:	f3c2 0580 	ubfx	r5, r2, #2, #1
 80071ea:	d04e      	beq.n	800728a <HAL_I2C_EV_IRQHandler+0x1da>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80071ec:	0651      	lsls	r1, r2, #25
 80071ee:	f140 808b 	bpl.w	8007308 <HAL_I2C_EV_IRQHandler+0x258>
 80071f2:	0542      	lsls	r2, r0, #21
 80071f4:	f140 8088 	bpl.w	8007308 <HAL_I2C_EV_IRQHandler+0x258>
 80071f8:	2d00      	cmp	r5, #0
 80071fa:	f040 8088 	bne.w	800730e <HAL_I2C_EV_IRQHandler+0x25e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071fe:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8007202:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007204:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8007206:	b292      	uxth	r2, r2
 8007208:	2a00      	cmp	r2, #0
 800720a:	f43f af7d 	beq.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800720e:	691a      	ldr	r2, [r3, #16]
 8007210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007212:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8007214:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8007216:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8007218:	3b01      	subs	r3, #1
 800721a:	b29b      	uxth	r3, r3
 800721c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800721e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8007220:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007222:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8007224:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007226:	2b00      	cmp	r3, #0
 8007228:	f47f af6e 	bne.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
 800722c:	292a      	cmp	r1, #42	; 0x2a
 800722e:	f47f af6b 	bne.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007232:	2522      	movs	r5, #34	; 0x22
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007234:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007236:	6822      	ldr	r2, [r4, #0]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007238:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800723a:	6853      	ldr	r3, [r2, #4]
 800723c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007240:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007242:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007244:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007248:	f7ff fe4e 	bl	8006ee8 <HAL_I2C_SlaveRxCpltCallback>
 800724c:	e75c      	b.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800724e:	699e      	ldr	r6, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007250:	695a      	ldr	r2, [r3, #20]
 8007252:	e743      	b.n	80070dc <HAL_I2C_EV_IRQHandler+0x2c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007254:	070d      	lsls	r5, r1, #28
 8007256:	f53f af6a 	bmi.w	800712e <HAL_I2C_EV_IRQHandler+0x7e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800725a:	078d      	lsls	r5, r1, #30
 800725c:	f57f af67 	bpl.w	800712e <HAL_I2C_EV_IRQHandler+0x7e>
 8007260:	0585      	lsls	r5, r0, #22
 8007262:	f57f af64 	bpl.w	800712e <HAL_I2C_EV_IRQHandler+0x7e>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007266:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800726a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 800726c:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800726e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007272:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007274:	2922      	cmp	r1, #34	; 0x22
 8007276:	f000 820d 	beq.w	8007694 <HAL_I2C_EV_IRQHandler+0x5e4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800727a:	2200      	movs	r2, #0
 800727c:	920b      	str	r2, [sp, #44]	; 0x2c
 800727e:	695a      	ldr	r2, [r3, #20]
 8007280:	920b      	str	r2, [sp, #44]	; 0x2c
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	930b      	str	r3, [sp, #44]	; 0x2c
 8007286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007288:	e73e      	b.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800728a:	0612      	lsls	r2, r2, #24
 800728c:	d527      	bpl.n	80072de <HAL_I2C_EV_IRQHandler+0x22e>
 800728e:	0546      	lsls	r6, r0, #21
 8007290:	d525      	bpl.n	80072de <HAL_I2C_EV_IRQHandler+0x22e>
 8007292:	bb3d      	cbnz	r5, 80072e4 <HAL_I2C_EV_IRQHandler+0x234>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007294:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8007298:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800729a:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 800729c:	b292      	uxth	r2, r2
 800729e:	2a00      	cmp	r2, #0
 80072a0:	f43f af32 	beq.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072a4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80072a6:	f815 2b01 	ldrb.w	r2, [r5], #1
 80072aa:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 80072ac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80072ae:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80072b0:	3a01      	subs	r2, #1
 80072b2:	b292      	uxth	r2, r2
 80072b4:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80072b6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80072b8:	b292      	uxth	r2, r2
 80072ba:	2a00      	cmp	r2, #0
 80072bc:	f47f af24 	bne.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
 80072c0:	2829      	cmp	r0, #41	; 0x29
 80072c2:	f47f af21 	bne.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80072c6:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072c8:	685a      	ldr	r2, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80072ca:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072d0:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80072d2:	6321      	str	r1, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80072d4:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80072d8:	f7ff fe04 	bl	8006ee4 <HAL_I2C_SlaveTxCpltCallback>
 80072dc:	e714      	b.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80072de:	2d00      	cmp	r5, #0
 80072e0:	f43f af12 	beq.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
 80072e4:	0580      	lsls	r0, r0, #22
 80072e6:	f57f af0f 	bpl.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
  if (hi2c->XferCount != 0U)
 80072ea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80072ec:	b292      	uxth	r2, r2
 80072ee:	2a00      	cmp	r2, #0
 80072f0:	f43f af0a 	beq.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80072f6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80072fa:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 80072fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80072fe:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8007300:	3b01      	subs	r3, #1
 8007302:	b29b      	uxth	r3, r3
 8007304:	8563      	strh	r3, [r4, #42]	; 0x2a
 8007306:	e6ff      	b.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007308:	2d00      	cmp	r5, #0
 800730a:	f43f aefd 	beq.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
 800730e:	0586      	lsls	r6, r0, #22
 8007310:	f57f aefa 	bpl.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
  if (hi2c->XferCount != 0U)
 8007314:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007316:	b292      	uxth	r2, r2
 8007318:	2a00      	cmp	r2, #0
 800731a:	f43f aef5 	beq.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800731e:	691a      	ldr	r2, [r3, #16]
 8007320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007322:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8007324:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8007326:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8007328:	3b01      	subs	r3, #1
 800732a:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 800732c:	3201      	adds	r2, #1
    hi2c->XferCount--;
 800732e:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8007330:	6262      	str	r2, [r4, #36]	; 0x24
 8007332:	e6e9      	b.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	0516      	lsls	r6, r2, #20
 8007338:	f53f aee6 	bmi.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800733c:	064d      	lsls	r5, r1, #25
 800733e:	f3c1 0280 	ubfx	r2, r1, #2, #1
 8007342:	f140 80b0 	bpl.w	80074a6 <HAL_I2C_EV_IRQHandler+0x3f6>
 8007346:	0541      	lsls	r1, r0, #21
 8007348:	f140 80ad 	bpl.w	80074a6 <HAL_I2C_EV_IRQHandler+0x3f6>
 800734c:	2a00      	cmp	r2, #0
 800734e:	f040 80ad 	bne.w	80074ac <HAL_I2C_EV_IRQHandler+0x3fc>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007352:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8007356:	2922      	cmp	r1, #34	; 0x22
 8007358:	f47f aed6 	bne.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
    tmp = hi2c->XferCount;
 800735c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800735e:	b289      	uxth	r1, r1
    if (tmp > 3U)
 8007360:	2903      	cmp	r1, #3
 8007362:	f240 82ef 	bls.w	8007944 <HAL_I2C_EV_IRQHandler+0x894>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007366:	691a      	ldr	r2, [r3, #16]
 8007368:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800736a:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800736c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800736e:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007370:	3b01      	subs	r3, #1
 8007372:	b29b      	uxth	r3, r3
 8007374:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8007376:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8007378:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 800737a:	b29b      	uxth	r3, r3
 800737c:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 800737e:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 8007380:	f47f aec2 	bne.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007384:	6822      	ldr	r2, [r4, #0]
 8007386:	6853      	ldr	r3, [r2, #4]
 8007388:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800738c:	6053      	str	r3, [r2, #4]
 800738e:	e6bb      	b.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007390:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007394:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007396:	b2f6      	uxtb	r6, r6
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007398:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800739c:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800739e:	950d      	str	r5, [sp, #52]	; 0x34
 80073a0:	695a      	ldr	r2, [r3, #20]
 80073a2:	920d      	str	r2, [sp, #52]	; 0x34
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	f042 0201 	orr.w	r2, r2, #1
 80073aa:	601a      	str	r2, [r3, #0]
 80073ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073b4:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	0510      	lsls	r0, r2, #20
 80073ba:	d522      	bpl.n	8007402 <HAL_I2C_EV_IRQHandler+0x352>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80073bc:	f006 02f7 	and.w	r2, r6, #247	; 0xf7
 80073c0:	2a22      	cmp	r2, #34	; 0x22
 80073c2:	f000 8140 	beq.w	8007646 <HAL_I2C_EV_IRQHandler+0x596>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80073c6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80073c8:	6802      	ldr	r2, [r0, #0]
 80073ca:	6852      	ldr	r2, [r2, #4]
 80073cc:	b292      	uxth	r2, r2
 80073ce:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80073d0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80073d2:	b292      	uxth	r2, r2
 80073d4:	b11a      	cbz	r2, 80073de <HAL_I2C_EV_IRQHandler+0x32e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80073d8:	f042 0204 	orr.w	r2, r2, #4
 80073dc:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073e4:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80073e6:	f7fe ff79 	bl	80062dc <HAL_DMA_GetState>
 80073ea:	2801      	cmp	r0, #1
 80073ec:	d009      	beq.n	8007402 <HAL_I2C_EV_IRQHandler+0x352>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80073ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073f0:	4aa6      	ldr	r2, [pc, #664]	; (800768c <HAL_I2C_EV_IRQHandler+0x5dc>)
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80073f2:	4618      	mov	r0, r3
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80073f4:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80073f6:	f7fe ff25 	bl	8006244 <HAL_DMA_Abort_IT>
 80073fa:	b110      	cbz	r0, 8007402 <HAL_I2C_EV_IRQHandler+0x352>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80073fc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80073fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007400:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8007402:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007404:	b29b      	uxth	r3, r3
 8007406:	b313      	cbz	r3, 800744e <HAL_I2C_EV_IRQHandler+0x39e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007408:	6823      	ldr	r3, [r4, #0]
 800740a:	695a      	ldr	r2, [r3, #20]
 800740c:	0751      	lsls	r1, r2, #29
 800740e:	d50a      	bpl.n	8007426 <HAL_I2C_EV_IRQHandler+0x376>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007410:	691a      	ldr	r2, [r3, #16]
 8007412:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007414:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8007416:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8007418:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800741a:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800741c:	1c59      	adds	r1, r3, #1
      hi2c->XferCount--;
 800741e:	b292      	uxth	r2, r2
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8007424:	6261      	str	r1, [r4, #36]	; 0x24
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007426:	695a      	ldr	r2, [r3, #20]
 8007428:	0652      	lsls	r2, r2, #25
 800742a:	d509      	bpl.n	8007440 <HAL_I2C_EV_IRQHandler+0x390>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800742c:	691a      	ldr	r2, [r3, #16]
 800742e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007430:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8007432:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8007434:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007436:	3b01      	subs	r3, #1
 8007438:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 800743a:	3201      	adds	r2, #1
      hi2c->XferCount--;
 800743c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800743e:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount != 0U)
 8007440:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007442:	b29b      	uxth	r3, r3
 8007444:	b11b      	cbz	r3, 800744e <HAL_I2C_EV_IRQHandler+0x39e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007446:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007448:	f043 0304 	orr.w	r3, r3, #4
 800744c:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800744e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007450:	2b00      	cmp	r3, #0
 8007452:	f040 8095 	bne.w	8007580 <HAL_I2C_EV_IRQHandler+0x4d0>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007456:	2e2a      	cmp	r6, #42	; 0x2a
 8007458:	f000 815c 	beq.w	8007714 <HAL_I2C_EV_IRQHandler+0x664>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800745c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8007460:	2b28      	cmp	r3, #40	; 0x28
 8007462:	f000 80de 	beq.w	8007622 <HAL_I2C_EV_IRQHandler+0x572>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007466:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007468:	2b22      	cmp	r3, #34	; 0x22
 800746a:	d002      	beq.n	8007472 <HAL_I2C_EV_IRQHandler+0x3c2>
 800746c:	2e22      	cmp	r6, #34	; 0x22
 800746e:	f47f ae4b 	bne.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007472:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8007474:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8007476:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007478:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 800747a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800747e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007482:	f7ff fd31 	bl	8006ee8 <HAL_I2C_SlaveRxCpltCallback>
 8007486:	e63f      	b.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007488:	2d00      	cmp	r5, #0
 800748a:	f43f ae3d 	beq.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
 800748e:	0581      	lsls	r1, r0, #22
 8007490:	f57f ae3a 	bpl.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8007494:	2a10      	cmp	r2, #16
 8007496:	f000 8145 	beq.w	8007724 <HAL_I2C_EV_IRQHandler+0x674>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800749a:	4620      	mov	r0, r4
}
 800749c:	b00e      	add	sp, #56	; 0x38
 800749e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80074a2:	f7ff bd29 	b.w	8006ef8 <I2C_MemoryTransmit_TXE_BTF>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80074a6:	2a00      	cmp	r2, #0
 80074a8:	f43f ae2e 	beq.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
 80074ac:	0586      	lsls	r6, r0, #22
 80074ae:	f57f ae2b 	bpl.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80074b2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 80074b4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80074b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80074b8:	b292      	uxth	r2, r2
 80074ba:	2a04      	cmp	r2, #4
 80074bc:	f000 8185 	beq.w	80077ca <HAL_I2C_EV_IRQHandler+0x71a>
  else if (hi2c->XferCount == 3U)
 80074c0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80074c2:	b292      	uxth	r2, r2
 80074c4:	2a03      	cmp	r2, #3
 80074c6:	f000 8187 	beq.w	80077d8 <HAL_I2C_EV_IRQHandler+0x728>
  else if (hi2c->XferCount == 2U)
 80074ca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80074cc:	b292      	uxth	r2, r2
 80074ce:	2a02      	cmp	r2, #2
 80074d0:	f000 8200 	beq.w	80078d4 <HAL_I2C_EV_IRQHandler+0x824>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	700b      	strb	r3, [r1, #0]
 80074d8:	e724      	b.n	8007324 <HAL_I2C_EV_IRQHandler+0x274>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80074da:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80074de:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80074e0:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80074e2:	bf16      	itet	ne
 80074e4:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80074e8:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80074ec:	b2d2      	uxtbne	r2, r2
 80074ee:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80074f0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80074f2:	2a00      	cmp	r2, #0
 80074f4:	f000 80eb 	beq.w	80076ce <HAL_I2C_EV_IRQHandler+0x61e>
 80074f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80074fa:	2a00      	cmp	r2, #0
 80074fc:	f000 80e7 	beq.w	80076ce <HAL_I2C_EV_IRQHandler+0x61e>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007506:	605a      	str	r2, [r3, #4]
 8007508:	e5fe      	b.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800750a:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800750c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800750e:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007510:	611a      	str	r2, [r3, #16]
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8007512:	2900      	cmp	r1, #0
 8007514:	f000 8092 	beq.w	800763c <HAL_I2C_EV_IRQHandler+0x58c>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8007518:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800751a:	2a00      	cmp	r2, #0
 800751c:	d1f0      	bne.n	8007500 <HAL_I2C_EV_IRQHandler+0x450>
 800751e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007520:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007522:	2a00      	cmp	r2, #0
 8007524:	d1ec      	bne.n	8007500 <HAL_I2C_EV_IRQHandler+0x450>
 8007526:	e5ef      	b.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007528:	685a      	ldr	r2, [r3, #4]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800752a:	ea6f 0196 	mvn.w	r1, r6, lsr #2
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800752e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007532:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007534:	0633      	lsls	r3, r6, #24
    __HAL_UNLOCK(hi2c);
 8007536:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800753a:	f001 0101 	and.w	r1, r1, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800753e:	bf54      	ite	pl
 8007540:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007542:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8007544:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007548:	4620      	mov	r0, r4
 800754a:	f7ff fccf 	bl	8006eec <HAL_I2C_AddrCallback>
 800754e:	e5db      	b.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
    if (hi2c->EventCount == 0U)
 8007550:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007552:	b97a      	cbnz	r2, 8007574 <HAL_I2C_EV_IRQHandler+0x4c4>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007554:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007556:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800755a:	611a      	str	r2, [r3, #16]
 800755c:	e5d4      	b.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800755e:	2201      	movs	r2, #1
 8007560:	62e2      	str	r2, [r4, #44]	; 0x2c
 8007562:	e61f      	b.n	80071a4 <HAL_I2C_EV_IRQHandler+0xf4>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007564:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007566:	11d2      	asrs	r2, r2, #7
 8007568:	f002 0206 	and.w	r2, r2, #6
 800756c:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8007570:	611a      	str	r2, [r3, #16]
 8007572:	e5c9      	b.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007574:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007576:	f042 0201 	orr.w	r2, r2, #1
 800757a:	b2d2      	uxtb	r2, r2
 800757c:	611a      	str	r2, [r3, #16]
 800757e:	e5c3      	b.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007580:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007584:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007588:	b2c9      	uxtb	r1, r1
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800758a:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800758c:	2a10      	cmp	r2, #16
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	f000 80a2 	beq.w	80076d8 <HAL_I2C_EV_IRQHandler+0x628>
 8007594:	2a40      	cmp	r2, #64	; 0x40
 8007596:	f000 809f 	beq.w	80076d8 <HAL_I2C_EV_IRQHandler+0x628>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800759a:	f001 0228 	and.w	r2, r1, #40	; 0x28
 800759e:	2a28      	cmp	r2, #40	; 0x28
 80075a0:	f000 80e6 	beq.w	8007770 <HAL_I2C_EV_IRQHandler+0x6c0>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80075a4:	685a      	ldr	r2, [r3, #4]
 80075a6:	0510      	lsls	r0, r2, #20
 80075a8:	d407      	bmi.n	80075ba <HAL_I2C_EV_IRQHandler+0x50a>
 80075aa:	2960      	cmp	r1, #96	; 0x60
 80075ac:	d005      	beq.n	80075ba <HAL_I2C_EV_IRQHandler+0x50a>
      hi2c->State = HAL_I2C_STATE_READY;
 80075ae:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075b0:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80075b2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075b6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 80075ba:	2200      	movs	r2, #0
 80075bc:	6322      	str	r2, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80075be:	685a      	ldr	r2, [r3, #4]
 80075c0:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80075c4:	f000 8094 	beq.w	80076f0 <HAL_I2C_EV_IRQHandler+0x640>
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80075c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80075ca:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80075cc:	f891 0021 	ldrb.w	r0, [r1, #33]	; 0x21
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80075d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80075d4:	2801      	cmp	r0, #1
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80075d6:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80075d8:	f000 810d 	beq.w	80077f6 <HAL_I2C_EV_IRQHandler+0x746>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80075dc:	4b2b      	ldr	r3, [pc, #172]	; (800768c <HAL_I2C_EV_IRQHandler+0x5dc>)
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80075de:	4608      	mov	r0, r1
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80075e0:	634b      	str	r3, [r1, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80075e2:	f7fe fe2f 	bl	8006244 <HAL_DMA_Abort_IT>
 80075e6:	b150      	cbz	r0, 80075fe <HAL_I2C_EV_IRQHandler+0x54e>
        hi2c->State = HAL_I2C_STATE_READY;
 80075e8:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE(hi2c);
 80075ea:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80075ec:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 80075ee:	6813      	ldr	r3, [r2, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80075f0:	6b41      	ldr	r1, [r0, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 80075f2:	f023 0301 	bic.w	r3, r3, #1
 80075f6:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80075f8:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80075fc:	4788      	blx	r1
  CurrentError = hi2c->ErrorCode;
 80075fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007600:	0718      	lsls	r0, r3, #28
 8007602:	d004      	beq.n	800760e <HAL_I2C_EV_IRQHandler+0x55e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007604:	6822      	ldr	r2, [r4, #0]
 8007606:	6853      	ldr	r3, [r2, #4]
 8007608:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800760c:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 800760e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007612:	6c22      	ldr	r2, [r4, #64]	; 0x40
  CurrentState = hi2c->State;
 8007614:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007616:	0751      	lsls	r1, r2, #29
 8007618:	f57f ad76 	bpl.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
 800761c:	2b28      	cmp	r3, #40	; 0x28
 800761e:	f47f ad73 	bne.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007622:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8007624:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007626:	491a      	ldr	r1, [pc, #104]	; (8007690 <HAL_I2C_EV_IRQHandler+0x5e0>)
      HAL_I2C_ListenCpltCallback(hi2c);
 8007628:	4620      	mov	r0, r4
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800762a:	62e1      	str	r1, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800762c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800762e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007632:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007636:	f7ff fc5b 	bl	8006ef0 <HAL_I2C_ListenCpltCallback>
 800763a:	e565      	b.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800763c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800763e:	2a00      	cmp	r2, #0
 8007640:	f47f af6a 	bne.w	8007518 <HAL_I2C_EV_IRQHandler+0x468>
 8007644:	e560      	b.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007646:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007648:	6802      	ldr	r2, [r0, #0]
 800764a:	6852      	ldr	r2, [r2, #4]
 800764c:	b292      	uxth	r2, r2
 800764e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8007650:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007652:	b292      	uxth	r2, r2
 8007654:	b11a      	cbz	r2, 800765e <HAL_I2C_EV_IRQHandler+0x5ae>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007656:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007658:	f042 0204 	orr.w	r2, r2, #4
 800765c:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007664:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007666:	f7fe fe39 	bl	80062dc <HAL_DMA_GetState>
 800766a:	2801      	cmp	r0, #1
 800766c:	f43f aec9 	beq.w	8007402 <HAL_I2C_EV_IRQHandler+0x352>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007670:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007672:	4a06      	ldr	r2, [pc, #24]	; (800768c <HAL_I2C_EV_IRQHandler+0x5dc>)
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007674:	4618      	mov	r0, r3
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007676:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007678:	f7fe fde4 	bl	8006244 <HAL_DMA_Abort_IT>
 800767c:	2800      	cmp	r0, #0
 800767e:	f43f aec0 	beq.w	8007402 <HAL_I2C_EV_IRQHandler+0x352>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007682:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007684:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007686:	4798      	blx	r3
 8007688:	e6bb      	b.n	8007402 <HAL_I2C_EV_IRQHandler+0x352>
 800768a:	bf00      	nop
 800768c:	08006fb9 	.word	0x08006fb9
 8007690:	ffff0000 	.word	0xffff0000
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007694:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007696:	b911      	cbnz	r1, 800769e <HAL_I2C_EV_IRQHandler+0x5ee>
 8007698:	2a40      	cmp	r2, #64	; 0x40
 800769a:	f000 80e5 	beq.w	8007868 <HAL_I2C_EV_IRQHandler+0x7b8>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800769e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80076a0:	b922      	cbnz	r2, 80076ac <HAL_I2C_EV_IRQHandler+0x5fc>
 80076a2:	6921      	ldr	r1, [r4, #16]
 80076a4:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 80076a8:	f000 80e5 	beq.w	8007876 <HAL_I2C_EV_IRQHandler+0x7c6>
      if (hi2c->XferCount == 0U)
 80076ac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80076ae:	b292      	uxth	r2, r2
 80076b0:	2a00      	cmp	r2, #0
 80076b2:	d162      	bne.n	800777a <HAL_I2C_EV_IRQHandler+0x6ca>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076b4:	9203      	str	r2, [sp, #12]
 80076b6:	695a      	ldr	r2, [r3, #20]
 80076b8:	9203      	str	r2, [sp, #12]
 80076ba:	699a      	ldr	r2, [r3, #24]
 80076bc:	9203      	str	r2, [sp, #12]
 80076be:	9a03      	ldr	r2, [sp, #12]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076c6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	6523      	str	r3, [r4, #80]	; 0x50
 80076cc:	e51c      	b.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80076ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80076d0:	2a00      	cmp	r2, #0
 80076d2:	f47f af25 	bne.w	8007520 <HAL_I2C_EV_IRQHandler+0x470>
 80076d6:	e517      	b.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80076d8:	2922      	cmp	r1, #34	; 0x22
 80076da:	f47f af5e 	bne.w	800759a <HAL_I2C_EV_IRQHandler+0x4ea>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076e4:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80076e6:	685a      	ldr	r2, [r3, #4]
 80076e8:	0515      	lsls	r5, r2, #20
 80076ea:	f53f af66 	bmi.w	80075ba <HAL_I2C_EV_IRQHandler+0x50a>
 80076ee:	e75e      	b.n	80075ae <HAL_I2C_EV_IRQHandler+0x4fe>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80076f0:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80076f4:	2960      	cmp	r1, #96	; 0x60
 80076f6:	f000 809d 	beq.w	8007834 <HAL_I2C_EV_IRQHandler+0x784>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80076fa:	695a      	ldr	r2, [r3, #20]
 80076fc:	0655      	lsls	r5, r2, #25
 80076fe:	d505      	bpl.n	800770c <HAL_I2C_EV_IRQHandler+0x65c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007700:	691a      	ldr	r2, [r3, #16]
 8007702:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007704:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8007706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007708:	3301      	adds	r3, #1
 800770a:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 800770c:	4620      	mov	r0, r4
 800770e:	f7ff fc4f 	bl	8006fb0 <HAL_I2C_ErrorCallback>
 8007712:	e774      	b.n	80075fe <HAL_I2C_EV_IRQHandler+0x54e>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007714:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 8007716:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007718:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800771a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800771e:	f7ff fbe3 	bl	8006ee8 <HAL_I2C_SlaveRxCpltCallback>
 8007722:	e69b      	b.n	800745c <HAL_I2C_EV_IRQHandler+0x3ac>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007724:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007726:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800772a:	2a21      	cmp	r2, #33	; 0x21
 800772c:	f47f acec 	bne.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
    if (hi2c->XferCount != 0U)
 8007730:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007732:	b292      	uxth	r2, r2
 8007734:	2a00      	cmp	r2, #0
 8007736:	f47f addd 	bne.w	80072f4 <HAL_I2C_EV_IRQHandler+0x244>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800773a:	2908      	cmp	r1, #8
 800773c:	d005      	beq.n	800774a <HAL_I2C_EV_IRQHandler+0x69a>
 800773e:	2920      	cmp	r1, #32
 8007740:	d003      	beq.n	800774a <HAL_I2C_EV_IRQHandler+0x69a>
 8007742:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8007746:	f040 81e8 	bne.w	8007b1a <HAL_I2C_EV_IRQHandler+0xa6a>
        hi2c->PreviousState = I2C_STATE_NONE;
 800774a:	2100      	movs	r1, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800774c:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800774e:	685a      	ldr	r2, [r3, #4]
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007750:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007752:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007756:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800775e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007760:	6321      	str	r1, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007762:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007766:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800776a:	f7ff fbb7 	bl	8006edc <HAL_I2C_MasterTxCpltCallback>
 800776e:	e4cb      	b.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007770:	2100      	movs	r1, #0
 8007772:	6321      	str	r1, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007774:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8007778:	e721      	b.n	80075be <HAL_I2C_EV_IRQHandler+0x50e>
      else if (hi2c->XferCount == 1U)
 800777a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800777c:	b292      	uxth	r2, r2
 800777e:	2a01      	cmp	r2, #1
 8007780:	f000 8087 	beq.w	8007892 <HAL_I2C_EV_IRQHandler+0x7e2>
      else if (hi2c->XferCount == 2U)
 8007784:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007786:	b292      	uxth	r2, r2
 8007788:	2a02      	cmp	r2, #2
 800778a:	f000 8143 	beq.w	8007a14 <HAL_I2C_EV_IRQHandler+0x964>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007794:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	0511      	lsls	r1, r2, #20
 800779a:	d50e      	bpl.n	80077ba <HAL_I2C_EV_IRQHandler+0x70a>
 800779c:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80077a0:	d007      	beq.n	80077b2 <HAL_I2C_EV_IRQHandler+0x702>
 80077a2:	3801      	subs	r0, #1
 80077a4:	281f      	cmp	r0, #31
 80077a6:	d808      	bhi.n	80077ba <HAL_I2C_EV_IRQHandler+0x70a>
 80077a8:	4aad      	ldr	r2, [pc, #692]	; (8007a60 <HAL_I2C_EV_IRQHandler+0x9b0>)
 80077aa:	fa22 f000 	lsr.w	r0, r2, r0
 80077ae:	07c2      	lsls	r2, r0, #31
 80077b0:	d503      	bpl.n	80077ba <HAL_I2C_EV_IRQHandler+0x70a>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80077b8:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077ba:	2200      	movs	r2, #0
 80077bc:	920a      	str	r2, [sp, #40]	; 0x28
 80077be:	695a      	ldr	r2, [r3, #20]
 80077c0:	920a      	str	r2, [sp, #40]	; 0x28
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	930a      	str	r3, [sp, #40]	; 0x28
 80077c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077c8:	e77e      	b.n	80076c8 <HAL_I2C_EV_IRQHandler+0x618>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80077ca:	685a      	ldr	r2, [r3, #4]
 80077cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077d0:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	700b      	strb	r3, [r1, #0]
 80077d6:	e5a5      	b.n	8007324 <HAL_I2C_EV_IRQHandler+0x274>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80077d8:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80077da:	2804      	cmp	r0, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80077dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077e0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80077e2:	f43f ae77 	beq.w	80074d4 <HAL_I2C_EV_IRQHandler+0x424>
 80077e6:	2802      	cmp	r0, #2
 80077e8:	f43f ae74 	beq.w	80074d4 <HAL_I2C_EV_IRQHandler+0x424>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	e66e      	b.n	80074d4 <HAL_I2C_EV_IRQHandler+0x424>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80077f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80077f8:	4a9a      	ldr	r2, [pc, #616]	; (8007a64 <HAL_I2C_EV_IRQHandler+0x9b4>)
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80077fa:	4618      	mov	r0, r3
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80077fc:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80077fe:	f7fe fd21 	bl	8006244 <HAL_DMA_Abort_IT>
 8007802:	2800      	cmp	r0, #0
 8007804:	f43f aefb 	beq.w	80075fe <HAL_I2C_EV_IRQHandler+0x54e>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	695a      	ldr	r2, [r3, #20]
 800780c:	0652      	lsls	r2, r2, #25
 800780e:	d506      	bpl.n	800781e <HAL_I2C_EV_IRQHandler+0x76e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007810:	691a      	ldr	r2, [r3, #16]
 8007812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007814:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8007816:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	3201      	adds	r2, #1
 800781c:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 800781e:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8007820:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007822:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8007824:	f022 0201 	bic.w	r2, r2, #1
 8007828:	601a      	str	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800782a:	6b43      	ldr	r3, [r0, #52]	; 0x34
        hi2c->State = HAL_I2C_STATE_READY;
 800782c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007830:	4798      	blx	r3
 8007832:	e6e4      	b.n	80075fe <HAL_I2C_EV_IRQHandler+0x54e>
    hi2c->State = HAL_I2C_STATE_READY;
 8007834:	2120      	movs	r1, #32
 8007836:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800783a:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800783c:	695a      	ldr	r2, [r3, #20]
 800783e:	0656      	lsls	r6, r2, #25
 8007840:	d506      	bpl.n	8007850 <HAL_I2C_EV_IRQHandler+0x7a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007842:	691a      	ldr	r2, [r3, #16]
 8007844:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007846:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8007848:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800784a:	6823      	ldr	r3, [r4, #0]
 800784c:	3201      	adds	r2, #1
 800784e:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8007850:	681a      	ldr	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8007852:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8007854:	f022 0201 	bic.w	r2, r2, #1
 8007858:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800785a:	f7ff fbab 	bl	8006fb4 <HAL_I2C_AbortCpltCallback>
 800785e:	e6ce      	b.n	80075fe <HAL_I2C_EV_IRQHandler+0x54e>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007860:	2a21      	cmp	r2, #33	; 0x21
 8007862:	f43f ac87 	beq.w	8007174 <HAL_I2C_EV_IRQHandler+0xc4>
 8007866:	e481      	b.n	800716c <HAL_I2C_EV_IRQHandler+0xbc>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007868:	9101      	str	r1, [sp, #4]
 800786a:	695a      	ldr	r2, [r3, #20]
 800786c:	9201      	str	r2, [sp, #4]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	9301      	str	r3, [sp, #4]
 8007872:	9b01      	ldr	r3, [sp, #4]
 8007874:	e448      	b.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007876:	9202      	str	r2, [sp, #8]
 8007878:	695a      	ldr	r2, [r3, #20]
 800787a:	9202      	str	r2, [sp, #8]
 800787c:	699a      	ldr	r2, [r3, #24]
 800787e:	9202      	str	r2, [sp, #8]
 8007880:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007888:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800788a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800788c:	3301      	adds	r3, #1
 800788e:	6523      	str	r3, [r4, #80]	; 0x50
 8007890:	e43a      	b.n	8007108 <HAL_I2C_EV_IRQHandler+0x58>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007892:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8007896:	f000 810f 	beq.w	8007ab8 <HAL_I2C_EV_IRQHandler+0xa08>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800789a:	2808      	cmp	r0, #8
 800789c:	f000 80fc 	beq.w	8007a98 <HAL_I2C_EV_IRQHandler+0x9e8>
 80078a0:	2820      	cmp	r0, #32
 80078a2:	f000 80f9 	beq.w	8007a98 <HAL_I2C_EV_IRQHandler+0x9e8>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80078a6:	2d12      	cmp	r5, #18
 80078a8:	f000 80f3 	beq.w	8007a92 <HAL_I2C_EV_IRQHandler+0x9e2>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80078ac:	2810      	cmp	r0, #16
 80078ae:	d805      	bhi.n	80078bc <HAL_I2C_EV_IRQHandler+0x80c>
 80078b0:	4a6d      	ldr	r2, [pc, #436]	; (8007a68 <HAL_I2C_EV_IRQHandler+0x9b8>)
 80078b2:	fa22 f000 	lsr.w	r0, r2, r0
 80078b6:	07c6      	lsls	r6, r0, #31
 80078b8:	f100 812a 	bmi.w	8007b10 <HAL_I2C_EV_IRQHandler+0xa60>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078c2:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078c4:	2200      	movs	r2, #0
 80078c6:	9206      	str	r2, [sp, #24]
 80078c8:	695a      	ldr	r2, [r3, #20]
 80078ca:	9206      	str	r2, [sp, #24]
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	9306      	str	r3, [sp, #24]
 80078d0:	9b06      	ldr	r3, [sp, #24]
 80078d2:	e6f9      	b.n	80076c8 <HAL_I2C_EV_IRQHandler+0x618>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80078d4:	2801      	cmp	r0, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078d6:	681a      	ldr	r2, [r3, #0]
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80078d8:	d071      	beq.n	80079be <HAL_I2C_EV_IRQHandler+0x90e>
 80078da:	2810      	cmp	r0, #16
 80078dc:	d06f      	beq.n	80079be <HAL_I2C_EV_IRQHandler+0x90e>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80078de:	2804      	cmp	r0, #4
 80078e0:	f000 8107 	beq.w	8007af2 <HAL_I2C_EV_IRQHandler+0xa42>
 80078e4:	2802      	cmp	r0, #2
 80078e6:	f000 8104 	beq.w	8007af2 <HAL_I2C_EV_IRQHandler+0xa42>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078ee:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80078f0:	2020      	movs	r0, #32
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 80078f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078f8:	6822      	ldr	r2, [r4, #0]
    hi2c->XferCount--;
 80078fa:	3b01      	subs	r3, #1
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8007900:	6a63      	ldr	r3, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007902:	6912      	ldr	r2, [r2, #16]
    hi2c->pBuffPtr++;
 8007904:	1c59      	adds	r1, r3, #1
 8007906:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007908:	705a      	strb	r2, [r3, #1]
    hi2c->XferCount--;
 800790a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800790c:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 800790e:	3b01      	subs	r3, #1
 8007910:	b29b      	uxth	r3, r3
 8007912:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007914:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 8007916:	6a62      	ldr	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->pBuffPtr++;
 800791c:	3201      	adds	r2, #1
 800791e:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007920:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007922:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007926:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800792a:	2b40      	cmp	r3, #64	; 0x40
 800792c:	f000 80d8 	beq.w	8007ae0 <HAL_I2C_EV_IRQHandler+0xa30>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007930:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007932:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007934:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007938:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800793a:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800793c:	f7ff fad0 	bl	8006ee0 <HAL_I2C_MasterRxCpltCallback>
 8007940:	f7ff bbe2 	b.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007944:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007946:	2802      	cmp	r0, #2
 8007948:	f43f abde 	beq.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
 800794c:	2901      	cmp	r1, #1
 800794e:	f63f abdb 	bhi.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007952:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8007956:	4845      	ldr	r0, [pc, #276]	; (8007a6c <HAL_I2C_EV_IRQHandler+0x9bc>)
  __IO uint32_t count = 0U;
 8007958:	920c      	str	r2, [sp, #48]	; 0x30
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800795a:	6802      	ldr	r2, [r0, #0]
 800795c:	fbb2 f2f1 	udiv	r2, r2, r1
 8007960:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007964:	920c      	str	r2, [sp, #48]	; 0x30
    count--;
 8007966:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007968:	3a01      	subs	r2, #1
 800796a:	920c      	str	r2, [sp, #48]	; 0x30
    if (count == 0U)
 800796c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800796e:	2900      	cmp	r1, #0
 8007970:	f000 80f5 	beq.w	8007b5e <HAL_I2C_EV_IRQHandler+0xaae>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 800797a:	d1f4      	bne.n	8007966 <HAL_I2C_EV_IRQHandler+0x8b6>
        hi2c->State = HAL_I2C_STATE_READY;
 800797c:	2020      	movs	r0, #32
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800797e:	6819      	ldr	r1, [r3, #0]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007980:	6a65      	ldr	r5, [r4, #36]	; 0x24
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007982:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007986:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007988:	6859      	ldr	r1, [r3, #4]
 800798a:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800798e:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	702b      	strb	r3, [r5, #0]
        hi2c->XferCount--;
 8007994:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8007996:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8007998:	3b01      	subs	r3, #1
 800799a:	b29b      	uxth	r3, r3
 800799c:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800799e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80079a2:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->pBuffPtr++;
 80079a6:	3101      	adds	r1, #1
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80079a8:	2b40      	cmp	r3, #64	; 0x40
        hi2c->pBuffPtr++;
 80079aa:	6261      	str	r1, [r4, #36]	; 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80079ac:	d1c1      	bne.n	8007932 <HAL_I2C_EV_IRQHandler+0x882>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80079ae:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          HAL_I2C_MemRxCpltCallback(hi2c);
 80079b2:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_NONE;
 80079b4:	6322      	str	r2, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80079b6:	f7ff faf9 	bl	8006fac <HAL_I2C_MemRxCpltCallback>
 80079ba:	f7ff bba5 	b.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	e794      	b.n	80078f0 <HAL_I2C_EV_IRQHandler+0x840>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80079c6:	2d08      	cmp	r5, #8
 80079c8:	d005      	beq.n	80079d6 <HAL_I2C_EV_IRQHandler+0x926>
 80079ca:	2d20      	cmp	r5, #32
 80079cc:	d003      	beq.n	80079d6 <HAL_I2C_EV_IRQHandler+0x926>
 80079ce:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 80079d2:	f040 80b3 	bne.w	8007b3c <HAL_I2C_EV_IRQHandler+0xa8c>
      hi2c->PreviousState = I2C_STATE_NONE;
 80079d6:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80079d8:	2020      	movs	r0, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80079da:	6859      	ldr	r1, [r3, #4]
 80079dc:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80079e0:	6059      	str	r1, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079e2:	6819      	ldr	r1, [r3, #0]
 80079e4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80079e8:	6019      	str	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80079ea:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80079ec:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80079f0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 80079f4:	4620      	mov	r0, r4
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80079f6:	2b40      	cmp	r3, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079f8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80079fc:	f000 809a 	beq.w	8007b34 <HAL_I2C_EV_IRQHandler+0xa84>
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007a00:	f7ff fa6c 	bl	8006edc <HAL_I2C_MasterTxCpltCallback>
 8007a04:	f7ff bb80 	b.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a08:	685a      	ldr	r2, [r3, #4]
 8007a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a0e:	605a      	str	r2, [r3, #4]
 8007a10:	f7ff bb7a 	b.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007a14:	2810      	cmp	r0, #16
 8007a16:	d92b      	bls.n	8007a70 <HAL_I2C_EV_IRQHandler+0x9c0>
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a18:	2100      	movs	r1, #0
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a20:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a22:	9108      	str	r1, [sp, #32]
 8007a24:	695a      	ldr	r2, [r3, #20]
 8007a26:	9208      	str	r2, [sp, #32]
 8007a28:	699a      	ldr	r2, [r3, #24]
 8007a2a:	9208      	str	r2, [sp, #32]
 8007a2c:	9a08      	ldr	r2, [sp, #32]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a34:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	0515      	lsls	r5, r2, #20
 8007a3a:	f57f ae45 	bpl.w	80076c8 <HAL_I2C_EV_IRQHandler+0x618>
 8007a3e:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8007a42:	d008      	beq.n	8007a56 <HAL_I2C_EV_IRQHandler+0x9a6>
 8007a44:	3801      	subs	r0, #1
 8007a46:	281f      	cmp	r0, #31
 8007a48:	f63f ae3e 	bhi.w	80076c8 <HAL_I2C_EV_IRQHandler+0x618>
 8007a4c:	4a04      	ldr	r2, [pc, #16]	; (8007a60 <HAL_I2C_EV_IRQHandler+0x9b0>)
 8007a4e:	40c2      	lsrs	r2, r0
 8007a50:	07d0      	lsls	r0, r2, #31
 8007a52:	f57f ae39 	bpl.w	80076c8 <HAL_I2C_EV_IRQHandler+0x618>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007a56:	685a      	ldr	r2, [r3, #4]
 8007a58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a5c:	605a      	str	r2, [r3, #4]
 8007a5e:	e633      	b.n	80076c8 <HAL_I2C_EV_IRQHandler+0x618>
 8007a60:	80008081 	.word	0x80008081
 8007a64:	08006fb9 	.word	0x08006fb9
 8007a68:	00010014 	.word	0x00010014
 8007a6c:	20000088 	.word	0x20000088
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007a70:	4a48      	ldr	r2, [pc, #288]	; (8007b94 <HAL_I2C_EV_IRQHandler+0xae4>)
 8007a72:	40c2      	lsrs	r2, r0
 8007a74:	43d2      	mvns	r2, r2
 8007a76:	f012 0201 	ands.w	r2, r2, #1
 8007a7a:	d1cd      	bne.n	8007a18 <HAL_I2C_EV_IRQHandler+0x968>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a7c:	6819      	ldr	r1, [r3, #0]
 8007a7e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8007a82:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a84:	9209      	str	r2, [sp, #36]	; 0x24
 8007a86:	695a      	ldr	r2, [r3, #20]
 8007a88:	9209      	str	r2, [sp, #36]	; 0x24
 8007a8a:	699a      	ldr	r2, [r3, #24]
 8007a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8007a8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a90:	e7d1      	b.n	8007a36 <HAL_I2C_EV_IRQHandler+0x986>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007a92:	2801      	cmp	r0, #1
 8007a94:	f43f af12 	beq.w	80078bc <HAL_I2C_EV_IRQHandler+0x80c>
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a98:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aa0:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007aa2:	9107      	str	r1, [sp, #28]
 8007aa4:	695a      	ldr	r2, [r3, #20]
 8007aa6:	9207      	str	r2, [sp, #28]
 8007aa8:	699a      	ldr	r2, [r3, #24]
 8007aaa:	9207      	str	r2, [sp, #28]
 8007aac:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ab4:	601a      	str	r2, [r3, #0]
 8007ab6:	e607      	b.n	80076c8 <HAL_I2C_EV_IRQHandler+0x618>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007abe:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007ac0:	685a      	ldr	r2, [r3, #4]
 8007ac2:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8007ac6:	d018      	beq.n	8007afa <HAL_I2C_EV_IRQHandler+0xa4a>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ac8:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ad0:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ad2:	9104      	str	r1, [sp, #16]
 8007ad4:	695a      	ldr	r2, [r3, #20]
 8007ad6:	9204      	str	r2, [sp, #16]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	9304      	str	r3, [sp, #16]
 8007adc:	9b04      	ldr	r3, [sp, #16]
 8007ade:	e5f3      	b.n	80076c8 <HAL_I2C_EV_IRQHandler+0x618>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ae0:	2300      	movs	r3, #0
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007ae2:	4620      	mov	r0, r4
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ae4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007ae8:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007aea:	f7ff fa5f 	bl	8006fac <HAL_I2C_MemRxCpltCallback>
 8007aee:	f7ff bb0b 	b.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007af2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007af6:	601a      	str	r2, [r3, #0]
 8007af8:	e6fa      	b.n	80078f0 <HAL_I2C_EV_IRQHandler+0x840>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007afa:	9205      	str	r2, [sp, #20]
 8007afc:	695a      	ldr	r2, [r3, #20]
 8007afe:	9205      	str	r2, [sp, #20]
 8007b00:	699a      	ldr	r2, [r3, #24]
 8007b02:	9205      	str	r2, [sp, #20]
 8007b04:	9a05      	ldr	r2, [sp, #20]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b0c:	601a      	str	r2, [r3, #0]
 8007b0e:	e5db      	b.n	80076c8 <HAL_I2C_EV_IRQHandler+0x618>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	e6d4      	b.n	80078c4 <HAL_I2C_EV_IRQHandler+0x814>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007b1a:	2611      	movs	r6, #17
        hi2c->State = HAL_I2C_STATE_READY;
 8007b1c:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b1e:	6859      	ldr	r1, [r3, #4]
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007b20:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b22:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8007b26:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007b28:	6326      	str	r6, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b2a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007b2e:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
 8007b32:	e765      	b.n	8007a00 <HAL_I2C_EV_IRQHandler+0x950>
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007b34:	f7ff f9de 	bl	8006ef4 <HAL_I2C_MemTxCpltCallback>
 8007b38:	f7ff bae6 	b.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007b3c:	2611      	movs	r6, #17
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b3e:	2500      	movs	r5, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8007b40:	2120      	movs	r1, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b42:	685a      	ldr	r2, [r3, #4]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007b44:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b4a:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007b4c:	6326      	str	r6, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b4e:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007b52:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007b56:	f7ff f9c1 	bl	8006edc <HAL_I2C_MasterTxCpltCallback>
 8007b5a:	f7ff bad5 	b.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
        hi2c->State = HAL_I2C_STATE_READY;
 8007b5e:	2520      	movs	r5, #32
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b60:	6c22      	ldr	r2, [r4, #64]	; 0x40
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b62:	6a66      	ldr	r6, [r4, #36]	; 0x24
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b64:	432a      	orrs	r2, r5
 8007b66:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b68:	685a      	ldr	r2, [r3, #4]
        HAL_I2C_ErrorCallback(hi2c);
 8007b6a:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b70:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	7033      	strb	r3, [r6, #0]
        hi2c->XferCount--;
 8007b76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8007b78:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8007b7e:	3201      	adds	r2, #1
        hi2c->XferCount--;
 8007b80:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8007b82:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 8007b84:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b88:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007b8c:	f7ff fa10 	bl	8006fb0 <HAL_I2C_ErrorCallback>
 8007b90:	f7ff baba 	b.w	8007108 <HAL_I2C_EV_IRQHandler+0x58>
 8007b94:	00010014 	.word	0x00010014

08007b98 <HAL_I2C_ER_IRQHandler>:
{
 8007b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007b9a:	6803      	ldr	r3, [r0, #0]
{
 8007b9c:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007b9e:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007ba0:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007ba2:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007ba6:	469c      	mov	ip, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007ba8:	b2cf      	uxtb	r7, r1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007baa:	05e9      	lsls	r1, r5, #23
 8007bac:	f3c5 2040 	ubfx	r0, r5, #9, #1
 8007bb0:	f140 8085 	bpl.w	8007cbe <HAL_I2C_ER_IRQHandler+0x126>
 8007bb4:	0a11      	lsrs	r1, r2, #8
 8007bb6:	07ce      	lsls	r6, r1, #31
 8007bb8:	f140 8081 	bpl.w	8007cbe <HAL_I2C_ER_IRQHandler+0x126>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007bbc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007bc0:	615a      	str	r2, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bc8:	601a      	str	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	f040 8086 	bne.w	8007cdc <HAL_I2C_ER_IRQHandler+0x144>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007bd0:	0568      	lsls	r0, r5, #21
 8007bd2:	f140 80db 	bpl.w	8007d8c <HAL_I2C_ER_IRQHandler+0x1f4>
    error |= HAL_I2C_ERROR_BERR;
 8007bd6:	2601      	movs	r6, #1
    tmp2 = hi2c->XferCount;
 8007bd8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8007bda:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007bde:	2f20      	cmp	r7, #32
    tmp2 = hi2c->XferCount;
 8007be0:	b292      	uxth	r2, r2
    tmp3 = hi2c->State;
 8007be2:	b2c9      	uxtb	r1, r1
    tmp4 = hi2c->PreviousState;
 8007be4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007be6:	f000 80b0 	beq.w	8007d4a <HAL_I2C_ER_IRQHandler+0x1b2>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007bee:	2f10      	cmp	r7, #16
      error |= HAL_I2C_ERROR_AF;
 8007bf0:	f046 0604 	orr.w	r6, r6, #4
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bf4:	615a      	str	r2, [r3, #20]
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007bf6:	d001      	beq.n	8007bfc <HAL_I2C_ER_IRQHandler+0x64>
 8007bf8:	2f40      	cmp	r7, #64	; 0x40
 8007bfa:	d103      	bne.n	8007c04 <HAL_I2C_ER_IRQHandler+0x6c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c02:	601a      	str	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007c04:	052f      	lsls	r7, r5, #20
 8007c06:	469c      	mov	ip, r3
 8007c08:	d505      	bpl.n	8007c16 <HAL_I2C_ER_IRQHandler+0x7e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007c0a:	f46f 6300 	mvn.w	r3, #2048	; 0x800
    error |= HAL_I2C_ERROR_OVR;
 8007c0e:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007c12:	f8cc 3014 	str.w	r3, [ip, #20]
    hi2c->ErrorCode |= error;
 8007c16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c18:	431e      	orrs	r6, r3
 8007c1a:	6426      	str	r6, [r4, #64]	; 0x40
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c1c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007c20:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c24:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007c26:	b2db      	uxtb	r3, r3
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007c28:	2b10      	cmp	r3, #16
 8007c2a:	d069      	beq.n	8007d00 <HAL_I2C_ER_IRQHandler+0x168>
 8007c2c:	2b40      	cmp	r3, #64	; 0x40
 8007c2e:	d067      	beq.n	8007d00 <HAL_I2C_ER_IRQHandler+0x168>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c30:	f002 0328 	and.w	r3, r2, #40	; 0x28
 8007c34:	2b28      	cmp	r3, #40	; 0x28
 8007c36:	f000 8083 	beq.w	8007d40 <HAL_I2C_ER_IRQHandler+0x1a8>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007c3a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8007c3e:	051f      	lsls	r7, r3, #20
 8007c40:	d407      	bmi.n	8007c52 <HAL_I2C_ER_IRQHandler+0xba>
 8007c42:	2a60      	cmp	r2, #96	; 0x60
 8007c44:	d005      	beq.n	8007c52 <HAL_I2C_ER_IRQHandler+0xba>
      hi2c->State = HAL_I2C_STATE_READY;
 8007c46:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c48:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8007c4a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c4e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c52:	2300      	movs	r3, #0
 8007c54:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007c56:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8007c5a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8007c5e:	d05c      	beq.n	8007d1a <HAL_I2C_ER_IRQHandler+0x182>
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007c60:	6b62      	ldr	r2, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007c62:	f8dc 3004 	ldr.w	r3, [ip, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007c66:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007c6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007c6e:	2901      	cmp	r1, #1
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007c70:	f8cc 3004 	str.w	r3, [ip, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007c74:	f000 80ac 	beq.w	8007dd0 <HAL_I2C_ER_IRQHandler+0x238>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007c78:	4b84      	ldr	r3, [pc, #528]	; (8007e8c <HAL_I2C_ER_IRQHandler+0x2f4>)
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007c7a:	4610      	mov	r0, r2
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007c7c:	6353      	str	r3, [r2, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007c7e:	f7fe fae1 	bl	8006244 <HAL_DMA_Abort_IT>
 8007c82:	b150      	cbz	r0, 8007c9a <HAL_I2C_ER_IRQHandler+0x102>
        hi2c->State = HAL_I2C_STATE_READY;
 8007c84:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE(hi2c);
 8007c86:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007c88:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8007c8a:	6813      	ldr	r3, [r2, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007c8c:	6b41      	ldr	r1, [r0, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8007c8e:	f023 0301 	bic.w	r3, r3, #1
 8007c92:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8007c94:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007c98:	4788      	blx	r1
  CurrentError = hi2c->ErrorCode;
 8007c9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007c9c:	0719      	lsls	r1, r3, #28
 8007c9e:	d004      	beq.n	8007caa <HAL_I2C_ER_IRQHandler+0x112>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ca0:	6822      	ldr	r2, [r4, #0]
 8007ca2:	6853      	ldr	r3, [r2, #4]
 8007ca4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007ca8:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8007caa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007cae:	6c22      	ldr	r2, [r4, #64]	; 0x40
  CurrentState = hi2c->State;
 8007cb0:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007cb2:	0752      	lsls	r2, r2, #29
 8007cb4:	d502      	bpl.n	8007cbc <HAL_I2C_ER_IRQHandler+0x124>
 8007cb6:	2b28      	cmp	r3, #40	; 0x28
 8007cb8:	f000 80a9 	beq.w	8007e0e <HAL_I2C_ER_IRQHandler+0x276>
}
 8007cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007cbe:	b110      	cbz	r0, 8007cc6 <HAL_I2C_ER_IRQHandler+0x12e>
 8007cc0:	0a11      	lsrs	r1, r2, #8
 8007cc2:	07c8      	lsls	r0, r1, #31
 8007cc4:	d41a      	bmi.n	8007cfc <HAL_I2C_ER_IRQHandler+0x164>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007cc6:	f3c5 2680 	ubfx	r6, r5, #10, #1
 8007cca:	b11e      	cbz	r6, 8007cd4 <HAL_I2C_ER_IRQHandler+0x13c>
 8007ccc:	05d0      	lsls	r0, r2, #23
 8007cce:	d5f5      	bpl.n	8007cbc <HAL_I2C_ER_IRQHandler+0x124>
 8007cd0:	2600      	movs	r6, #0
 8007cd2:	e781      	b.n	8007bd8 <HAL_I2C_ER_IRQHandler+0x40>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007cd4:	0529      	lsls	r1, r5, #20
 8007cd6:	d5f1      	bpl.n	8007cbc <HAL_I2C_ER_IRQHandler+0x124>
 8007cd8:	0a11      	lsrs	r1, r2, #8
 8007cda:	e008      	b.n	8007cee <HAL_I2C_ER_IRQHandler+0x156>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007cdc:	2603      	movs	r6, #3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007cde:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007ce2:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007ce4:	056a      	lsls	r2, r5, #21
 8007ce6:	f53f af77 	bmi.w	8007bd8 <HAL_I2C_ER_IRQHandler+0x40>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007cea:	052a      	lsls	r2, r5, #20
 8007cec:	d504      	bpl.n	8007cf8 <HAL_I2C_ER_IRQHandler+0x160>
 8007cee:	07ca      	lsls	r2, r1, #31
 8007cf0:	d48b      	bmi.n	8007c0a <HAL_I2C_ER_IRQHandler+0x72>
  if (error != HAL_I2C_ERROR_NONE)
 8007cf2:	2e00      	cmp	r6, #0
 8007cf4:	d0e2      	beq.n	8007cbc <HAL_I2C_ER_IRQHandler+0x124>
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	469c      	mov	ip, r3
 8007cfa:	e78c      	b.n	8007c16 <HAL_I2C_ER_IRQHandler+0x7e>
 8007cfc:	2602      	movs	r6, #2
 8007cfe:	e7ee      	b.n	8007cde <HAL_I2C_ER_IRQHandler+0x146>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007d00:	2a22      	cmp	r2, #34	; 0x22
 8007d02:	d195      	bne.n	8007c30 <HAL_I2C_ER_IRQHandler+0x98>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007d04:	f8dc 3000 	ldr.w	r3, [ip]
 8007d08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d0c:	f8cc 3000 	str.w	r3, [ip]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007d10:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8007d14:	051b      	lsls	r3, r3, #20
 8007d16:	d49c      	bmi.n	8007c52 <HAL_I2C_ER_IRQHandler+0xba>
 8007d18:	e795      	b.n	8007c46 <HAL_I2C_ER_IRQHandler+0xae>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007d1a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8007d1e:	2a60      	cmp	r2, #96	; 0x60
 8007d20:	d03b      	beq.n	8007d9a <HAL_I2C_ER_IRQHandler+0x202>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007d22:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8007d26:	0658      	lsls	r0, r3, #25
 8007d28:	d506      	bpl.n	8007d38 <HAL_I2C_ER_IRQHandler+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d2c:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8007d30:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8007d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d34:	3301      	adds	r3, #1
 8007d36:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f7ff f939 	bl	8006fb0 <HAL_I2C_ErrorCallback>
 8007d3e:	e7ac      	b.n	8007c9a <HAL_I2C_ER_IRQHandler+0x102>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d40:	2200      	movs	r2, #0
 8007d42:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8007d48:	e785      	b.n	8007c56 <HAL_I2C_ER_IRQHandler+0xbe>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007d4a:	b9ca      	cbnz	r2, 8007d80 <HAL_I2C_ER_IRQHandler+0x1e8>
 8007d4c:	f001 02f7 	and.w	r2, r1, #247	; 0xf7
 8007d50:	2a21      	cmp	r2, #33	; 0x21
 8007d52:	d003      	beq.n	8007d5c <HAL_I2C_ER_IRQHandler+0x1c4>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007d54:	2928      	cmp	r1, #40	; 0x28
 8007d56:	d113      	bne.n	8007d80 <HAL_I2C_ER_IRQHandler+0x1e8>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007d58:	2821      	cmp	r0, #33	; 0x21
 8007d5a:	d111      	bne.n	8007d80 <HAL_I2C_ER_IRQHandler+0x1e8>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d5c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007d60:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d62:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007d64:	2908      	cmp	r1, #8
 8007d66:	d05f      	beq.n	8007e28 <HAL_I2C_ER_IRQHandler+0x290>
 8007d68:	2920      	cmp	r1, #32
 8007d6a:	d05d      	beq.n	8007e28 <HAL_I2C_ER_IRQHandler+0x290>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007d6c:	2a21      	cmp	r2, #33	; 0x21
 8007d6e:	d074      	beq.n	8007e5a <HAL_I2C_ER_IRQHandler+0x2c2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d74:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007d76:	052d      	lsls	r5, r5, #20
 8007d78:	d5bb      	bpl.n	8007cf2 <HAL_I2C_ER_IRQHandler+0x15a>
 8007d7a:	f8d4 c000 	ldr.w	ip, [r4]
 8007d7e:	e744      	b.n	8007c0a <HAL_I2C_ER_IRQHandler+0x72>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
      error |= HAL_I2C_ERROR_AF;
 8007d84:	f046 0604 	orr.w	r6, r6, #4
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d88:	615a      	str	r2, [r3, #20]
 8007d8a:	e73b      	b.n	8007c04 <HAL_I2C_ER_IRQHandler+0x6c>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007d8c:	0529      	lsls	r1, r5, #20
    error |= HAL_I2C_ERROR_BERR;
 8007d8e:	f04f 0601 	mov.w	r6, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007d92:	f53f af3a 	bmi.w	8007c0a <HAL_I2C_ER_IRQHandler+0x72>
 8007d96:	469c      	mov	ip, r3
 8007d98:	e73d      	b.n	8007c16 <HAL_I2C_ER_IRQHandler+0x7e>
    hi2c->State = HAL_I2C_STATE_READY;
 8007d9a:	2220      	movs	r2, #32
 8007d9c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007da0:	6423      	str	r3, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007da2:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8007da6:	065d      	lsls	r5, r3, #25
 8007da8:	d508      	bpl.n	8007dbc <HAL_I2C_ER_IRQHandler+0x224>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007daa:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8007dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007db0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8007db2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007db4:	f8d4 c000 	ldr.w	ip, [r4]
 8007db8:	3301      	adds	r3, #1
 8007dba:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8007dbc:	f8dc 3000 	ldr.w	r3, [ip]
    HAL_I2C_AbortCpltCallback(hi2c);
 8007dc0:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8007dc2:	f023 0301 	bic.w	r3, r3, #1
 8007dc6:	f8cc 3000 	str.w	r3, [ip]
    HAL_I2C_AbortCpltCallback(hi2c);
 8007dca:	f7ff f8f3 	bl	8006fb4 <HAL_I2C_AbortCpltCallback>
 8007dce:	e764      	b.n	8007c9a <HAL_I2C_ER_IRQHandler+0x102>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007dd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007dd2:	4a2e      	ldr	r2, [pc, #184]	; (8007e8c <HAL_I2C_ER_IRQHandler+0x2f4>)
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007dd4:	4618      	mov	r0, r3
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007dd6:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007dd8:	f7fe fa34 	bl	8006244 <HAL_DMA_Abort_IT>
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	f43f af5c 	beq.w	8007c9a <HAL_I2C_ER_IRQHandler+0x102>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	695a      	ldr	r2, [r3, #20]
 8007de6:	0656      	lsls	r6, r2, #25
 8007de8:	d506      	bpl.n	8007df8 <HAL_I2C_ER_IRQHandler+0x260>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dea:	691a      	ldr	r2, [r3, #16]
 8007dec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dee:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8007df0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007df2:	6823      	ldr	r3, [r4, #0]
 8007df4:	3201      	adds	r2, #1
 8007df6:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 8007df8:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8007dfa:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007dfc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8007dfe:	f022 0201 	bic.w	r2, r2, #1
 8007e02:	601a      	str	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007e04:	6b43      	ldr	r3, [r0, #52]	; 0x34
        hi2c->State = HAL_I2C_STATE_READY;
 8007e06:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007e0a:	4798      	blx	r3
 8007e0c:	e745      	b.n	8007c9a <HAL_I2C_ER_IRQHandler+0x102>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e0e:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e10:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007e12:	491f      	ldr	r1, [pc, #124]	; (8007e90 <HAL_I2C_ER_IRQHandler+0x2f8>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8007e14:	4620      	mov	r0, r4
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007e16:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e18:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e1a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e1e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8007e22:	f7ff f865 	bl	8006ef0 <HAL_I2C_ListenCpltCallback>
}
 8007e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007e28:	2a28      	cmp	r2, #40	; 0x28
 8007e2a:	d19f      	bne.n	8007d6c <HAL_I2C_ER_IRQHandler+0x1d4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e2c:	f46f 6780 	mvn.w	r7, #1024	; 0x400
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e30:	2100      	movs	r1, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e32:	2020      	movs	r0, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e34:	4a16      	ldr	r2, [pc, #88]	; (8007e90 <HAL_I2C_ER_IRQHandler+0x2f8>)
 8007e36:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e3e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e40:	615f      	str	r7, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	403a      	ands	r2, r7
 8007e46:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e48:	6321      	str	r1, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e4a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    HAL_I2C_ListenCpltCallback(hi2c);
 8007e4e:	4620      	mov	r0, r4
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e50:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8007e54:	f7ff f84c 	bl	8006ef0 <HAL_I2C_ListenCpltCallback>
 8007e58:	e78d      	b.n	8007d76 <HAL_I2C_ER_IRQHandler+0x1de>
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e5a:	2720      	movs	r7, #32
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e5c:	2000      	movs	r0, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e5e:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007e62:	f8df c02c 	ldr.w	ip, [pc, #44]	; 8007e90 <HAL_I2C_ER_IRQHandler+0x2f8>
 8007e66:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e6a:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e6c:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e70:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e74:	685a      	ldr	r2, [r3, #4]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007e76:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e7c:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e7e:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	400a      	ands	r2, r1
 8007e84:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007e86:	f7ff f82d 	bl	8006ee4 <HAL_I2C_SlaveTxCpltCallback>
 8007e8a:	e774      	b.n	8007d76 <HAL_I2C_ER_IRQHandler+0x1de>
 8007e8c:	08006fb9 	.word	0x08006fb9
 8007e90:	ffff0000 	.word	0xffff0000

08007e94 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e94:	2800      	cmp	r0, #0
 8007e96:	f000 8155 	beq.w	8008144 <HAL_RCC_OscConfig+0x2b0>
{
 8007e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e9e:	6803      	ldr	r3, [r0, #0]
{
 8007ea0:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ea2:	07dd      	lsls	r5, r3, #31
 8007ea4:	4604      	mov	r4, r0
 8007ea6:	d535      	bpl.n	8007f14 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007ea8:	49a8      	ldr	r1, [pc, #672]	; (800814c <HAL_RCC_OscConfig+0x2b8>)
 8007eaa:	684a      	ldr	r2, [r1, #4]
 8007eac:	f002 020c 	and.w	r2, r2, #12
 8007eb0:	2a04      	cmp	r2, #4
 8007eb2:	f000 8105 	beq.w	80080c0 <HAL_RCC_OscConfig+0x22c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007eb6:	684a      	ldr	r2, [r1, #4]
 8007eb8:	f002 020c 	and.w	r2, r2, #12
 8007ebc:	2a08      	cmp	r2, #8
 8007ebe:	f000 80fb 	beq.w	80080b8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ec2:	6863      	ldr	r3, [r4, #4]
 8007ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ec8:	d010      	beq.n	8007eec <HAL_RCC_OscConfig+0x58>
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 8120 	beq.w	8008110 <HAL_RCC_OscConfig+0x27c>
 8007ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ed4:	f000 8178 	beq.w	80081c8 <HAL_RCC_OscConfig+0x334>
 8007ed8:	4b9c      	ldr	r3, [pc, #624]	; (800814c <HAL_RCC_OscConfig+0x2b8>)
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007ee0:	601a      	str	r2, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007ee8:	601a      	str	r2, [r3, #0]
 8007eea:	e004      	b.n	8007ef6 <HAL_RCC_OscConfig+0x62>
 8007eec:	4a97      	ldr	r2, [pc, #604]	; (800814c <HAL_RCC_OscConfig+0x2b8>)
 8007eee:	6813      	ldr	r3, [r2, #0]
 8007ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ef4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ef6:	f7fe f937 	bl	8006168 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007efa:	4d94      	ldr	r5, [pc, #592]	; (800814c <HAL_RCC_OscConfig+0x2b8>)
        tickstart = HAL_GetTick();
 8007efc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007efe:	e005      	b.n	8007f0c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f00:	f7fe f932 	bl	8006168 <HAL_GetTick>
 8007f04:	1b80      	subs	r0, r0, r6
 8007f06:	2864      	cmp	r0, #100	; 0x64
 8007f08:	f200 80f5 	bhi.w	80080f6 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f0c:	682b      	ldr	r3, [r5, #0]
 8007f0e:	039a      	lsls	r2, r3, #14
 8007f10:	d5f6      	bpl.n	8007f00 <HAL_RCC_OscConfig+0x6c>
 8007f12:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f14:	079f      	lsls	r7, r3, #30
 8007f16:	d44d      	bmi.n	8007fb4 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f18:	071a      	lsls	r2, r3, #28
 8007f1a:	d522      	bpl.n	8007f62 <HAL_RCC_OscConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007f1c:	69a3      	ldr	r3, [r4, #24]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 80ba 	beq.w	8008098 <HAL_RCC_OscConfig+0x204>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f24:	2201      	movs	r2, #1
 8007f26:	4b8a      	ldr	r3, [pc, #552]	; (8008150 <HAL_RCC_OscConfig+0x2bc>)

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f28:	4d88      	ldr	r5, [pc, #544]	; (800814c <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_ENABLE();
 8007f2a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8007f2c:	f7fe f91c 	bl	8006168 <HAL_GetTick>
 8007f30:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f32:	e005      	b.n	8007f40 <HAL_RCC_OscConfig+0xac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f34:	f7fe f918 	bl	8006168 <HAL_GetTick>
 8007f38:	1b80      	subs	r0, r0, r6
 8007f3a:	2802      	cmp	r0, #2
 8007f3c:	f200 80db 	bhi.w	80080f6 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f40:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f42:	079b      	lsls	r3, r3, #30
 8007f44:	d5f6      	bpl.n	8007f34 <HAL_RCC_OscConfig+0xa0>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007f46:	4b83      	ldr	r3, [pc, #524]	; (8008154 <HAL_RCC_OscConfig+0x2c0>)
 8007f48:	4a83      	ldr	r2, [pc, #524]	; (8008158 <HAL_RCC_OscConfig+0x2c4>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f50:	0a5b      	lsrs	r3, r3, #9
 8007f52:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8007f54:	bf00      	nop
  }
  while (Delay --);
 8007f56:	9b01      	ldr	r3, [sp, #4]
 8007f58:	1e5a      	subs	r2, r3, #1
 8007f5a:	9201      	str	r2, [sp, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1f9      	bne.n	8007f54 <HAL_RCC_OscConfig+0xc0>
 8007f60:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f62:	075d      	lsls	r5, r3, #29
 8007f64:	d569      	bpl.n	800803a <HAL_RCC_OscConfig+0x1a6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f66:	4b79      	ldr	r3, [pc, #484]	; (800814c <HAL_RCC_OscConfig+0x2b8>)
 8007f68:	69da      	ldr	r2, [r3, #28]
 8007f6a:	00d0      	lsls	r0, r2, #3
 8007f6c:	f100 80ec 	bmi.w	8008148 <HAL_RCC_OscConfig+0x2b4>
      pwrclkchanged = SET;
 8007f70:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f72:	69da      	ldr	r2, [r3, #28]
 8007f74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007f78:	61da      	str	r2, [r3, #28]
 8007f7a:	69db      	ldr	r3, [r3, #28]
 8007f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f80:	9300      	str	r3, [sp, #0]
 8007f82:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f84:	4b75      	ldr	r3, [pc, #468]	; (800815c <HAL_RCC_OscConfig+0x2c8>)
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	05d1      	lsls	r1, r2, #23
 8007f8a:	f140 80a3 	bpl.w	80080d4 <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f8e:	68e3      	ldr	r3, [r4, #12]
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d037      	beq.n	8008004 <HAL_RCC_OscConfig+0x170>
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f000 80e7 	beq.w	8008168 <HAL_RCC_OscConfig+0x2d4>
 8007f9a:	2b05      	cmp	r3, #5
 8007f9c:	4b6b      	ldr	r3, [pc, #428]	; (800814c <HAL_RCC_OscConfig+0x2b8>)
 8007f9e:	6a1a      	ldr	r2, [r3, #32]
 8007fa0:	f000 811f 	beq.w	80081e2 <HAL_RCC_OscConfig+0x34e>
 8007fa4:	f022 0201 	bic.w	r2, r2, #1
 8007fa8:	621a      	str	r2, [r3, #32]
 8007faa:	6a1a      	ldr	r2, [r3, #32]
 8007fac:	f022 0204 	bic.w	r2, r2, #4
 8007fb0:	621a      	str	r2, [r3, #32]
 8007fb2:	e02c      	b.n	800800e <HAL_RCC_OscConfig+0x17a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007fb4:	4a65      	ldr	r2, [pc, #404]	; (800814c <HAL_RCC_OscConfig+0x2b8>)
 8007fb6:	6851      	ldr	r1, [r2, #4]
 8007fb8:	f011 0f0c 	tst.w	r1, #12
 8007fbc:	d061      	beq.n	8008082 <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007fbe:	6851      	ldr	r1, [r2, #4]
 8007fc0:	f001 010c 	and.w	r1, r1, #12
 8007fc4:	2908      	cmp	r1, #8
 8007fc6:	d059      	beq.n	800807c <HAL_RCC_OscConfig+0x1e8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007fc8:	6923      	ldr	r3, [r4, #16]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f000 80eb 	beq.w	80081a6 <HAL_RCC_OscConfig+0x312>
        __HAL_RCC_HSI_ENABLE();
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	4b63      	ldr	r3, [pc, #396]	; (8008160 <HAL_RCC_OscConfig+0x2cc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fd4:	4d5d      	ldr	r5, [pc, #372]	; (800814c <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_ENABLE();
 8007fd6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007fd8:	f7fe f8c6 	bl	8006168 <HAL_GetTick>
 8007fdc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fde:	e005      	b.n	8007fec <HAL_RCC_OscConfig+0x158>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fe0:	f7fe f8c2 	bl	8006168 <HAL_GetTick>
 8007fe4:	1b80      	subs	r0, r0, r6
 8007fe6:	2802      	cmp	r0, #2
 8007fe8:	f200 8085 	bhi.w	80080f6 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fec:	682b      	ldr	r3, [r5, #0]
 8007fee:	0798      	lsls	r0, r3, #30
 8007ff0:	d5f6      	bpl.n	8007fe0 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ff2:	682b      	ldr	r3, [r5, #0]
 8007ff4:	6962      	ldr	r2, [r4, #20]
 8007ff6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007ffa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007ffe:	602b      	str	r3, [r5, #0]
 8008000:	6823      	ldr	r3, [r4, #0]
 8008002:	e789      	b.n	8007f18 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008004:	4a51      	ldr	r2, [pc, #324]	; (800814c <HAL_RCC_OscConfig+0x2b8>)
 8008006:	6a13      	ldr	r3, [r2, #32]
 8008008:	f043 0301 	orr.w	r3, r3, #1
 800800c:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800800e:	f7fe f8ab 	bl	8006168 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008012:	4e4e      	ldr	r6, [pc, #312]	; (800814c <HAL_RCC_OscConfig+0x2b8>)
      tickstart = HAL_GetTick();
 8008014:	4680      	mov	r8, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008016:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800801a:	e005      	b.n	8008028 <HAL_RCC_OscConfig+0x194>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800801c:	f7fe f8a4 	bl	8006168 <HAL_GetTick>
 8008020:	eba0 0008 	sub.w	r0, r0, r8
 8008024:	42b8      	cmp	r0, r7
 8008026:	d866      	bhi.n	80080f6 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008028:	6a33      	ldr	r3, [r6, #32]
 800802a:	079b      	lsls	r3, r3, #30
 800802c:	d5f6      	bpl.n	800801c <HAL_RCC_OscConfig+0x188>
    if (pwrclkchanged == SET)
 800802e:	b125      	cbz	r5, 800803a <HAL_RCC_OscConfig+0x1a6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008030:	4a46      	ldr	r2, [pc, #280]	; (800814c <HAL_RCC_OscConfig+0x2b8>)
 8008032:	69d3      	ldr	r3, [r2, #28]
 8008034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008038:	61d3      	str	r3, [r2, #28]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800803a:	69e0      	ldr	r0, [r4, #28]
 800803c:	b1d0      	cbz	r0, 8008074 <HAL_RCC_OscConfig+0x1e0>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800803e:	4d43      	ldr	r5, [pc, #268]	; (800814c <HAL_RCC_OscConfig+0x2b8>)
 8008040:	686a      	ldr	r2, [r5, #4]
 8008042:	f002 020c 	and.w	r2, r2, #12
 8008046:	2a08      	cmp	r2, #8
 8008048:	f000 80d3 	beq.w	80081f2 <HAL_RCC_OscConfig+0x35e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800804c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800804e:	f04f 0100 	mov.w	r1, #0
 8008052:	4a44      	ldr	r2, [pc, #272]	; (8008164 <HAL_RCC_OscConfig+0x2d0>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008054:	f000 80de 	beq.w	8008214 <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_PLL_DISABLE();
 8008058:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 800805a:	f7fe f885 	bl	8006168 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800805e:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8008060:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008062:	e004      	b.n	800806e <HAL_RCC_OscConfig+0x1da>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008064:	f7fe f880 	bl	8006168 <HAL_GetTick>
 8008068:	1b40      	subs	r0, r0, r5
 800806a:	2802      	cmp	r0, #2
 800806c:	d843      	bhi.n	80080f6 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	019b      	lsls	r3, r3, #6
 8008072:	d4f7      	bmi.n	8008064 <HAL_RCC_OscConfig+0x1d0>
  return HAL_OK;
 8008074:	2000      	movs	r0, #0
}
 8008076:	b002      	add	sp, #8
 8008078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800807c:	6852      	ldr	r2, [r2, #4]
 800807e:	03d6      	lsls	r6, r2, #15
 8008080:	d4a2      	bmi.n	8007fc8 <HAL_RCC_OscConfig+0x134>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008082:	4a32      	ldr	r2, [pc, #200]	; (800814c <HAL_RCC_OscConfig+0x2b8>)
 8008084:	6812      	ldr	r2, [r2, #0]
 8008086:	0795      	lsls	r5, r2, #30
 8008088:	d539      	bpl.n	80080fe <HAL_RCC_OscConfig+0x26a>
 800808a:	6922      	ldr	r2, [r4, #16]
 800808c:	2a01      	cmp	r2, #1
 800808e:	d036      	beq.n	80080fe <HAL_RCC_OscConfig+0x26a>
        return HAL_ERROR;
 8008090:	2001      	movs	r0, #1
}
 8008092:	b002      	add	sp, #8
 8008094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8008098:	4a2d      	ldr	r2, [pc, #180]	; (8008150 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800809a:	4d2c      	ldr	r5, [pc, #176]	; (800814c <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_DISABLE();
 800809c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800809e:	f7fe f863 	bl	8006168 <HAL_GetTick>
 80080a2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080a4:	e004      	b.n	80080b0 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080a6:	f7fe f85f 	bl	8006168 <HAL_GetTick>
 80080aa:	1b80      	subs	r0, r0, r6
 80080ac:	2802      	cmp	r0, #2
 80080ae:	d822      	bhi.n	80080f6 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80080b2:	079f      	lsls	r7, r3, #30
 80080b4:	d4f7      	bmi.n	80080a6 <HAL_RCC_OscConfig+0x212>
 80080b6:	e753      	b.n	8007f60 <HAL_RCC_OscConfig+0xcc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80080b8:	684a      	ldr	r2, [r1, #4]
 80080ba:	03d0      	lsls	r0, r2, #15
 80080bc:	f57f af01 	bpl.w	8007ec2 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080c0:	4a22      	ldr	r2, [pc, #136]	; (800814c <HAL_RCC_OscConfig+0x2b8>)
 80080c2:	6812      	ldr	r2, [r2, #0]
 80080c4:	0391      	lsls	r1, r2, #14
 80080c6:	f57f af25 	bpl.w	8007f14 <HAL_RCC_OscConfig+0x80>
 80080ca:	6862      	ldr	r2, [r4, #4]
 80080cc:	2a00      	cmp	r2, #0
 80080ce:	f47f af21 	bne.w	8007f14 <HAL_RCC_OscConfig+0x80>
 80080d2:	e7dd      	b.n	8008090 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80080d4:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080d6:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80080d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080dc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80080de:	f7fe f843 	bl	8006168 <HAL_GetTick>
 80080e2:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080e4:	6833      	ldr	r3, [r6, #0]
 80080e6:	05da      	lsls	r2, r3, #23
 80080e8:	f53f af51 	bmi.w	8007f8e <HAL_RCC_OscConfig+0xfa>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080ec:	f7fe f83c 	bl	8006168 <HAL_GetTick>
 80080f0:	1bc0      	subs	r0, r0, r7
 80080f2:	2864      	cmp	r0, #100	; 0x64
 80080f4:	d9f6      	bls.n	80080e4 <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 80080f6:	2003      	movs	r0, #3
}
 80080f8:	b002      	add	sp, #8
 80080fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080fe:	4913      	ldr	r1, [pc, #76]	; (800814c <HAL_RCC_OscConfig+0x2b8>)
 8008100:	6960      	ldr	r0, [r4, #20]
 8008102:	680a      	ldr	r2, [r1, #0]
 8008104:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8008108:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800810c:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800810e:	e703      	b.n	8007f18 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008110:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008114:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008118:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800811a:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800811c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008128:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800812a:	f7fe f81d 	bl	8006168 <HAL_GetTick>
 800812e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008130:	e004      	b.n	800813c <HAL_RCC_OscConfig+0x2a8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008132:	f7fe f819 	bl	8006168 <HAL_GetTick>
 8008136:	1b80      	subs	r0, r0, r6
 8008138:	2864      	cmp	r0, #100	; 0x64
 800813a:	d8dc      	bhi.n	80080f6 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800813c:	682b      	ldr	r3, [r5, #0]
 800813e:	039b      	lsls	r3, r3, #14
 8008140:	d4f7      	bmi.n	8008132 <HAL_RCC_OscConfig+0x29e>
 8008142:	e6e6      	b.n	8007f12 <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 8008144:	2001      	movs	r0, #1
}
 8008146:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8008148:	2500      	movs	r5, #0
 800814a:	e71b      	b.n	8007f84 <HAL_RCC_OscConfig+0xf0>
 800814c:	40021000 	.word	0x40021000
 8008150:	42420480 	.word	0x42420480
 8008154:	20000088 	.word	0x20000088
 8008158:	10624dd3 	.word	0x10624dd3
 800815c:	40007000 	.word	0x40007000
 8008160:	42420000 	.word	0x42420000
 8008164:	42420060 	.word	0x42420060
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008168:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800816c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008170:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008172:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008174:	f022 0201 	bic.w	r2, r2, #1
 8008178:	621a      	str	r2, [r3, #32]
 800817a:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800817c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008180:	f022 0204 	bic.w	r2, r2, #4
 8008184:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 8008186:	f7fd ffef 	bl	8006168 <HAL_GetTick>
 800818a:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800818c:	e004      	b.n	8008198 <HAL_RCC_OscConfig+0x304>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800818e:	f7fd ffeb 	bl	8006168 <HAL_GetTick>
 8008192:	1bc0      	subs	r0, r0, r7
 8008194:	4540      	cmp	r0, r8
 8008196:	d8ae      	bhi.n	80080f6 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008198:	6a33      	ldr	r3, [r6, #32]
 800819a:	0798      	lsls	r0, r3, #30
 800819c:	d4f7      	bmi.n	800818e <HAL_RCC_OscConfig+0x2fa>
    if (pwrclkchanged == SET)
 800819e:	2d00      	cmp	r5, #0
 80081a0:	f43f af4b 	beq.w	800803a <HAL_RCC_OscConfig+0x1a6>
 80081a4:	e744      	b.n	8008030 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_DISABLE();
 80081a6:	4a34      	ldr	r2, [pc, #208]	; (8008278 <HAL_RCC_OscConfig+0x3e4>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081a8:	4d34      	ldr	r5, [pc, #208]	; (800827c <HAL_RCC_OscConfig+0x3e8>)
        __HAL_RCC_HSI_DISABLE();
 80081aa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80081ac:	f7fd ffdc 	bl	8006168 <HAL_GetTick>
 80081b0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081b2:	e004      	b.n	80081be <HAL_RCC_OscConfig+0x32a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081b4:	f7fd ffd8 	bl	8006168 <HAL_GetTick>
 80081b8:	1b80      	subs	r0, r0, r6
 80081ba:	2802      	cmp	r0, #2
 80081bc:	d89b      	bhi.n	80080f6 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081be:	682b      	ldr	r3, [r5, #0]
 80081c0:	0799      	lsls	r1, r3, #30
 80081c2:	d4f7      	bmi.n	80081b4 <HAL_RCC_OscConfig+0x320>
 80081c4:	6823      	ldr	r3, [r4, #0]
 80081c6:	e6a7      	b.n	8007f18 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80081cc:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80081de:	601a      	str	r2, [r3, #0]
 80081e0:	e689      	b.n	8007ef6 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081e2:	f042 0204 	orr.w	r2, r2, #4
 80081e6:	621a      	str	r2, [r3, #32]
 80081e8:	6a1a      	ldr	r2, [r3, #32]
 80081ea:	f042 0201 	orr.w	r2, r2, #1
 80081ee:	621a      	str	r2, [r3, #32]
 80081f0:	e70d      	b.n	800800e <HAL_RCC_OscConfig+0x17a>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80081f2:	2801      	cmp	r0, #1
 80081f4:	f43f af4d 	beq.w	8008092 <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 80081f8:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081fa:	6a22      	ldr	r2, [r4, #32]
 80081fc:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8008200:	4291      	cmp	r1, r2
 8008202:	f47f af45 	bne.w	8008090 <HAL_RCC_OscConfig+0x1fc>
 8008206:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008208:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 800820c:	1a18      	subs	r0, r3, r0
 800820e:	bf18      	it	ne
 8008210:	2001      	movne	r0, #1
 8008212:	e73e      	b.n	8008092 <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_PLL_DISABLE();
 8008214:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8008216:	f7fd ffa7 	bl	8006168 <HAL_GetTick>
 800821a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800821c:	e005      	b.n	800822a <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800821e:	f7fd ffa3 	bl	8006168 <HAL_GetTick>
 8008222:	1b80      	subs	r0, r0, r6
 8008224:	2802      	cmp	r0, #2
 8008226:	f63f af66 	bhi.w	80080f6 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800822a:	682b      	ldr	r3, [r5, #0]
 800822c:	0199      	lsls	r1, r3, #6
 800822e:	d4f6      	bmi.n	800821e <HAL_RCC_OscConfig+0x38a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008230:	6a22      	ldr	r2, [r4, #32]
 8008232:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008236:	d105      	bne.n	8008244 <HAL_RCC_OscConfig+0x3b0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008238:	686b      	ldr	r3, [r5, #4]
 800823a:	68a1      	ldr	r1, [r4, #8]
 800823c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008240:	430b      	orrs	r3, r1
 8008242:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8008244:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008246:	4b0d      	ldr	r3, [pc, #52]	; (800827c <HAL_RCC_OscConfig+0x3e8>)
 8008248:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800824a:	6859      	ldr	r1, [r3, #4]
 800824c:	4302      	orrs	r2, r0
 800824e:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8008252:	480b      	ldr	r0, [pc, #44]	; (8008280 <HAL_RCC_OscConfig+0x3ec>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008254:	430a      	orrs	r2, r1
 8008256:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8008258:	6005      	str	r5, [r0, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800825a:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 800825c:	f7fd ff84 	bl	8006168 <HAL_GetTick>
 8008260:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008262:	e005      	b.n	8008270 <HAL_RCC_OscConfig+0x3dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008264:	f7fd ff80 	bl	8006168 <HAL_GetTick>
 8008268:	1b40      	subs	r0, r0, r5
 800826a:	2802      	cmp	r0, #2
 800826c:	f63f af43 	bhi.w	80080f6 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	019a      	lsls	r2, r3, #6
 8008274:	d5f6      	bpl.n	8008264 <HAL_RCC_OscConfig+0x3d0>
 8008276:	e6fd      	b.n	8008074 <HAL_RCC_OscConfig+0x1e0>
 8008278:	42420000 	.word	0x42420000
 800827c:	40021000 	.word	0x40021000
 8008280:	42420060 	.word	0x42420060

08008284 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8008284:	b178      	cbz	r0, 80082a6 <HAL_RCC_ClockConfig+0x22>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008286:	4a5d      	ldr	r2, [pc, #372]	; (80083fc <HAL_RCC_ClockConfig+0x178>)
 8008288:	6813      	ldr	r3, [r2, #0]
 800828a:	f003 0307 	and.w	r3, r3, #7
 800828e:	428b      	cmp	r3, r1
 8008290:	d20b      	bcs.n	80082aa <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008292:	6813      	ldr	r3, [r2, #0]
 8008294:	f023 0307 	bic.w	r3, r3, #7
 8008298:	430b      	orrs	r3, r1
 800829a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800829c:	6813      	ldr	r3, [r2, #0]
 800829e:	f003 0307 	and.w	r3, r3, #7
 80082a2:	428b      	cmp	r3, r1
 80082a4:	d001      	beq.n	80082aa <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 80082a6:	2001      	movs	r0, #1
}
 80082a8:	4770      	bx	lr
{
 80082aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082ae:	6803      	ldr	r3, [r0, #0]
{
 80082b0:	b086      	sub	sp, #24
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082b2:	079d      	lsls	r5, r3, #30
 80082b4:	d514      	bpl.n	80082e0 <HAL_RCC_ClockConfig+0x5c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082b6:	075c      	lsls	r4, r3, #29
 80082b8:	d504      	bpl.n	80082c4 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082ba:	4c51      	ldr	r4, [pc, #324]	; (8008400 <HAL_RCC_ClockConfig+0x17c>)
 80082bc:	6862      	ldr	r2, [r4, #4]
 80082be:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80082c2:	6062      	str	r2, [r4, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082c4:	071a      	lsls	r2, r3, #28
 80082c6:	d504      	bpl.n	80082d2 <HAL_RCC_ClockConfig+0x4e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80082c8:	4c4d      	ldr	r4, [pc, #308]	; (8008400 <HAL_RCC_ClockConfig+0x17c>)
 80082ca:	6862      	ldr	r2, [r4, #4]
 80082cc:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80082d0:	6062      	str	r2, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082d2:	4c4b      	ldr	r4, [pc, #300]	; (8008400 <HAL_RCC_ClockConfig+0x17c>)
 80082d4:	6885      	ldr	r5, [r0, #8]
 80082d6:	6862      	ldr	r2, [r4, #4]
 80082d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80082dc:	432a      	orrs	r2, r5
 80082de:	6062      	str	r2, [r4, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082e0:	07db      	lsls	r3, r3, #31
 80082e2:	4604      	mov	r4, r0
 80082e4:	460d      	mov	r5, r1
 80082e6:	d520      	bpl.n	800832a <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082e8:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082ea:	4b45      	ldr	r3, [pc, #276]	; (8008400 <HAL_RCC_ClockConfig+0x17c>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082ec:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082ee:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082f0:	d06f      	beq.n	80083d2 <HAL_RCC_ClockConfig+0x14e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80082f2:	2a02      	cmp	r2, #2
 80082f4:	d07e      	beq.n	80083f4 <HAL_RCC_ClockConfig+0x170>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082f6:	0798      	lsls	r0, r3, #30
 80082f8:	d527      	bpl.n	800834a <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082fa:	4e41      	ldr	r6, [pc, #260]	; (8008400 <HAL_RCC_ClockConfig+0x17c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082fc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008300:	6873      	ldr	r3, [r6, #4]
 8008302:	f023 0303 	bic.w	r3, r3, #3
 8008306:	4313      	orrs	r3, r2
 8008308:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800830a:	f7fd ff2d 	bl	8006168 <HAL_GetTick>
 800830e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008310:	e004      	b.n	800831c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008312:	f7fd ff29 	bl	8006168 <HAL_GetTick>
 8008316:	1bc0      	subs	r0, r0, r7
 8008318:	4540      	cmp	r0, r8
 800831a:	d869      	bhi.n	80083f0 <HAL_RCC_ClockConfig+0x16c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800831c:	6873      	ldr	r3, [r6, #4]
 800831e:	6862      	ldr	r2, [r4, #4]
 8008320:	f003 030c 	and.w	r3, r3, #12
 8008324:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008328:	d1f3      	bne.n	8008312 <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800832a:	4a34      	ldr	r2, [pc, #208]	; (80083fc <HAL_RCC_ClockConfig+0x178>)
 800832c:	6813      	ldr	r3, [r2, #0]
 800832e:	f003 0307 	and.w	r3, r3, #7
 8008332:	42ab      	cmp	r3, r5
 8008334:	d90d      	bls.n	8008352 <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008336:	6813      	ldr	r3, [r2, #0]
 8008338:	f023 0307 	bic.w	r3, r3, #7
 800833c:	432b      	orrs	r3, r5
 800833e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008340:	6813      	ldr	r3, [r2, #0]
 8008342:	f003 0307 	and.w	r3, r3, #7
 8008346:	42ab      	cmp	r3, r5
 8008348:	d003      	beq.n	8008352 <HAL_RCC_ClockConfig+0xce>
    return HAL_ERROR;
 800834a:	2001      	movs	r0, #1
}
 800834c:	b006      	add	sp, #24
 800834e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008352:	6823      	ldr	r3, [r4, #0]
 8008354:	0759      	lsls	r1, r3, #29
 8008356:	d506      	bpl.n	8008366 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008358:	4929      	ldr	r1, [pc, #164]	; (8008400 <HAL_RCC_ClockConfig+0x17c>)
 800835a:	68e0      	ldr	r0, [r4, #12]
 800835c:	684a      	ldr	r2, [r1, #4]
 800835e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008362:	4302      	orrs	r2, r0
 8008364:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008366:	071a      	lsls	r2, r3, #28
 8008368:	d507      	bpl.n	800837a <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800836a:	4a25      	ldr	r2, [pc, #148]	; (8008400 <HAL_RCC_ClockConfig+0x17c>)
 800836c:	6921      	ldr	r1, [r4, #16]
 800836e:	6853      	ldr	r3, [r2, #4]
 8008370:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8008374:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008378:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800837a:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800837e:	4b21      	ldr	r3, [pc, #132]	; (8008404 <HAL_RCC_ClockConfig+0x180>)
 8008380:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008382:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008386:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008388:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 800838c:	491c      	ldr	r1, [pc, #112]	; (8008400 <HAL_RCC_ClockConfig+0x17c>)
 800838e:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8008390:	f002 030c 	and.w	r3, r2, #12
 8008394:	2b08      	cmp	r3, #8
 8008396:	d11a      	bne.n	80083ce <HAL_RCC_ClockConfig+0x14a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008398:	f3c2 4383 	ubfx	r3, r2, #18, #4
 800839c:	4423      	add	r3, r4
 800839e:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80083a2:	03d3      	lsls	r3, r2, #15
 80083a4:	d418      	bmi.n	80083d8 <HAL_RCC_ClockConfig+0x154>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80083a6:	4b18      	ldr	r3, [pc, #96]	; (8008408 <HAL_RCC_ClockConfig+0x184>)
 80083a8:	fb03 f300 	mul.w	r3, r3, r0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80083ac:	4a14      	ldr	r2, [pc, #80]	; (8008400 <HAL_RCC_ClockConfig+0x17c>)
 80083ae:	4817      	ldr	r0, [pc, #92]	; (800840c <HAL_RCC_ClockConfig+0x188>)
 80083b0:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 80083b2:	4917      	ldr	r1, [pc, #92]	; (8008410 <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80083b4:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80083b8:	5c80      	ldrb	r0, [r0, r2]
 80083ba:	4a16      	ldr	r2, [pc, #88]	; (8008414 <HAL_RCC_ClockConfig+0x190>)
 80083bc:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 80083be:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80083c0:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 80083c2:	f7fd fd13 	bl	8005dec <HAL_InitTick>
  return HAL_OK;
 80083c6:	2000      	movs	r0, #0
}
 80083c8:	b006      	add	sp, #24
 80083ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSE_VALUE;
 80083ce:	4b12      	ldr	r3, [pc, #72]	; (8008418 <HAL_RCC_ClockConfig+0x194>)
 80083d0:	e7ec      	b.n	80083ac <HAL_RCC_ClockConfig+0x128>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083d2:	039f      	lsls	r7, r3, #14
 80083d4:	d491      	bmi.n	80082fa <HAL_RCC_ClockConfig+0x76>
 80083d6:	e7b8      	b.n	800834a <HAL_RCC_ClockConfig+0xc6>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80083d8:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80083da:	4b0f      	ldr	r3, [pc, #60]	; (8008418 <HAL_RCC_ClockConfig+0x194>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80083dc:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80083e0:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80083e4:	4422      	add	r2, r4
 80083e6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80083ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80083ee:	e7dd      	b.n	80083ac <HAL_RCC_ClockConfig+0x128>
        return HAL_TIMEOUT;
 80083f0:	2003      	movs	r0, #3
 80083f2:	e7ab      	b.n	800834c <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083f4:	019e      	lsls	r6, r3, #6
 80083f6:	d480      	bmi.n	80082fa <HAL_RCC_ClockConfig+0x76>
 80083f8:	e7a7      	b.n	800834a <HAL_RCC_ClockConfig+0xc6>
 80083fa:	bf00      	nop
 80083fc:	40022000 	.word	0x40022000
 8008400:	40021000 	.word	0x40021000
 8008404:	0800be90 	.word	0x0800be90
 8008408:	003d0900 	.word	0x003d0900
 800840c:	0800bf40 	.word	0x0800bf40
 8008410:	20000090 	.word	0x20000090
 8008414:	20000088 	.word	0x20000088
 8008418:	007a1200 	.word	0x007a1200

0800841c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800841c:	4b04      	ldr	r3, [pc, #16]	; (8008430 <HAL_RCC_GetPCLK1Freq+0x14>)
 800841e:	4905      	ldr	r1, [pc, #20]	; (8008434 <HAL_RCC_GetPCLK1Freq+0x18>)
 8008420:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8008422:	4a05      	ldr	r2, [pc, #20]	; (8008438 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008424:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008428:	5ccb      	ldrb	r3, [r1, r3]
 800842a:	6810      	ldr	r0, [r2, #0]
}
 800842c:	40d8      	lsrs	r0, r3
 800842e:	4770      	bx	lr
 8008430:	40021000 	.word	0x40021000
 8008434:	0800bf50 	.word	0x0800bf50
 8008438:	20000088 	.word	0x20000088

0800843c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800843c:	220f      	movs	r2, #15
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800843e:	4b0d      	ldr	r3, [pc, #52]	; (8008474 <HAL_RCC_GetClockConfig+0x38>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008440:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008442:	685a      	ldr	r2, [r3, #4]
{
 8008444:	b410      	push	{r4}
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008446:	f002 0203 	and.w	r2, r2, #3
 800844a:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800844c:	685a      	ldr	r2, [r3, #4]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800844e:	4c0a      	ldr	r4, [pc, #40]	; (8008478 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008450:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8008454:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800845c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	08db      	lsrs	r3, r3, #3
 8008462:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008466:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008468:	6823      	ldr	r3, [r4, #0]
}
 800846a:	bc10      	pop	{r4}
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800846c:	f003 0307 	and.w	r3, r3, #7
 8008470:	600b      	str	r3, [r1, #0]
}
 8008472:	4770      	bx	lr
 8008474:	40021000 	.word	0x40021000
 8008478:	40022000 	.word	0x40022000

0800847c <SPI_WaitFlagStateUntilTimeout.constprop.8>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800847c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008480:	461d      	mov	r5, r3
 8008482:	b082      	sub	sp, #8
 8008484:	4616      	mov	r6, r2
 8008486:	460c      	mov	r4, r1
 8008488:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800848a:	f7fd fe6d 	bl	8006168 <HAL_GetTick>
 800848e:	4435      	add	r5, r6
 8008490:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8008492:	f7fd fe69 	bl	8006168 <HAL_GetTick>
 8008496:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008498:	4b27      	ldr	r3, [pc, #156]	; (8008538 <SPI_WaitFlagStateUntilTimeout.constprop.8+0xbc>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80084a0:	fb05 f303 	mul.w	r3, r5, r3
 80084a4:	9301      	str	r3, [sp, #4]
 80084a6:	1c73      	adds	r3, r6, #1

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	d107      	bne.n	80084bc <SPI_WaitFlagStateUntilTimeout.constprop.8+0x40>
 80084ac:	6893      	ldr	r3, [r2, #8]
 80084ae:	ea34 0303 	bics.w	r3, r4, r3
 80084b2:	d0fb      	beq.n	80084ac <SPI_WaitFlagStateUntilTimeout.constprop.8+0x30>
      }
      count--;
    }
  }

  return HAL_OK;
 80084b4:	2000      	movs	r0, #0
}
 80084b6:	b002      	add	sp, #8
 80084b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084bc:	6893      	ldr	r3, [r2, #8]
 80084be:	ea34 0303 	bics.w	r3, r4, r3
 80084c2:	d1f7      	bne.n	80084b4 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80084c4:	f7fd fe50 	bl	8006168 <HAL_GetTick>
 80084c8:	eba0 0008 	sub.w	r0, r0, r8
 80084cc:	42a8      	cmp	r0, r5
 80084ce:	d208      	bcs.n	80084e2 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x66>
      if(count == 0U)
 80084d0:	9a01      	ldr	r2, [sp, #4]
      count--;
 80084d2:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80084d4:	2a00      	cmp	r2, #0
      count--;
 80084d6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 80084da:	bf08      	it	eq
 80084dc:	2500      	moveq	r5, #0
      count--;
 80084de:	9301      	str	r3, [sp, #4]
 80084e0:	e7e1      	b.n	80084a6 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x2a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084e2:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084e6:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084e8:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80084f0:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084f2:	d014      	beq.n	800851e <SPI_WaitFlagStateUntilTimeout.constprop.8+0xa2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084f6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80084fa:	d007      	beq.n	800850c <SPI_WaitFlagStateUntilTimeout.constprop.8+0x90>
        hspi->State = HAL_SPI_STATE_READY;
 80084fc:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80084fe:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8008500:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8008504:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8008508:	2003      	movs	r0, #3
 800850a:	e7d4      	b.n	80084b6 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x3a>
          SPI_RESET_CRC(hspi);
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800851a:	601a      	str	r2, [r3, #0]
 800851c:	e7ee      	b.n	80084fc <SPI_WaitFlagStateUntilTimeout.constprop.8+0x80>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008524:	d002      	beq.n	800852c <SPI_WaitFlagStateUntilTimeout.constprop.8+0xb0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008526:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800852a:	d1e3      	bne.n	80084f4 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x78>
          __HAL_SPI_DISABLE(hspi);
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	e7de      	b.n	80084f4 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x78>
 8008536:	bf00      	nop
 8008538:	20000088 	.word	0x20000088

0800853c <HAL_SPI_Init>:
  if (hspi == NULL)
 800853c:	2800      	cmp	r0, #0
 800853e:	d04c      	beq.n	80085da <HAL_SPI_Init+0x9e>
{
 8008540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008542:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008544:	2b00      	cmp	r3, #0
 8008546:	d042      	beq.n	80085ce <HAL_SPI_Init+0x92>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008548:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800854a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800854e:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8008550:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
 8008554:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008556:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8008558:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 800855c:	2900      	cmp	r1, #0
 800855e:	d03e      	beq.n	80085de <HAL_SPI_Init+0xa2>
 8008560:	461a      	mov	r2, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008562:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8008566:	2702      	movs	r7, #2
  hspi->State     = HAL_SPI_STATE_READY;
 8008568:	2601      	movs	r6, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800856a:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800856c:	68e1      	ldr	r1, [r4, #12]
 800856e:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8008572:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8008576:	4303      	orrs	r3, r0
 8008578:	6920      	ldr	r0, [r4, #16]
 800857a:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 800857e:	4038      	ands	r0, r7
 8008580:	430b      	orrs	r3, r1
 8008582:	6961      	ldr	r1, [r4, #20]
 8008584:	4303      	orrs	r3, r0
 8008586:	69a0      	ldr	r0, [r4, #24]
 8008588:	4031      	ands	r1, r6
 800858a:	430b      	orrs	r3, r1
 800858c:	f400 7100 	and.w	r1, r0, #512	; 0x200
 8008590:	430b      	orrs	r3, r1
 8008592:	69e1      	ldr	r1, [r4, #28]
  hspi->State = HAL_SPI_STATE_BUSY;
 8008594:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008598:	6a27      	ldr	r7, [r4, #32]
 800859a:	f001 0138 	and.w	r1, r1, #56	; 0x38
 800859e:	430b      	orrs	r3, r1
 80085a0:	f007 0780 	and.w	r7, r7, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 80085a4:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80085a6:	433b      	orrs	r3, r7
 80085a8:	4313      	orrs	r3, r2
  __HAL_SPI_DISABLE(hspi);
 80085aa:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80085ac:	0c00      	lsrs	r0, r0, #16
 80085ae:	f000 0004 	and.w	r0, r0, #4
  __HAL_SPI_DISABLE(hspi);
 80085b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085b6:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80085b8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80085ba:	6048      	str	r0, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80085bc:	69cb      	ldr	r3, [r1, #28]
  return HAL_OK;
 80085be:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80085c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085c4:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80085c6:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80085c8:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
}
 80085cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085ce:	6842      	ldr	r2, [r0, #4]
 80085d0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80085d4:	d0bb      	beq.n	800854e <HAL_SPI_Init+0x12>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80085d6:	61c3      	str	r3, [r0, #28]
 80085d8:	e7b9      	b.n	800854e <HAL_SPI_Init+0x12>
    return HAL_ERROR;
 80085da:	2001      	movs	r0, #1
}
 80085dc:	4770      	bx	lr
    hspi->Lock = HAL_UNLOCKED;
 80085de:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80085e2:	f7fd fbc1 	bl	8005d68 <HAL_SPI_MspInit>
 80085e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80085e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80085ec:	e7b9      	b.n	8008562 <HAL_SPI_Init+0x26>
 80085ee:	bf00      	nop

080085f0 <HAL_SPI_TransmitReceive>:
{
 80085f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hspi);
 80085f4:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
{
 80085f8:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 80085fa:	2c01      	cmp	r4, #1
 80085fc:	f000 8090 	beq.w	8008720 <HAL_SPI_TransmitReceive+0x130>
 8008600:	461e      	mov	r6, r3
 8008602:	2301      	movs	r3, #1
 8008604:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 8008608:	4604      	mov	r4, r0
 800860a:	4617      	mov	r7, r2
 800860c:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 800860e:	f7fd fdab 	bl	8006168 <HAL_GetTick>
 8008612:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8008614:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8008618:	6863      	ldr	r3, [r4, #4]
  tmp_state           = hspi->State;
 800861a:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800861c:	2801      	cmp	r0, #1
 800861e:	d011      	beq.n	8008644 <HAL_SPI_TransmitReceive+0x54>
 8008620:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008624:	d009      	beq.n	800863a <HAL_SPI_TransmitReceive+0x4a>
    errorcode = HAL_BUSY;
 8008626:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8008628:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800862a:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800862c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008630:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8008634:	b002      	add	sp, #8
 8008636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800863a:	68a2      	ldr	r2, [r4, #8]
 800863c:	2a00      	cmp	r2, #0
 800863e:	d1f2      	bne.n	8008626 <HAL_SPI_TransmitReceive+0x36>
 8008640:	2804      	cmp	r0, #4
 8008642:	d1f0      	bne.n	8008626 <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008644:	2d00      	cmp	r5, #0
 8008646:	d06f      	beq.n	8008728 <HAL_SPI_TransmitReceive+0x138>
 8008648:	2f00      	cmp	r7, #0
 800864a:	d06d      	beq.n	8008728 <HAL_SPI_TransmitReceive+0x138>
 800864c:	2e00      	cmp	r6, #0
 800864e:	d06b      	beq.n	8008728 <HAL_SPI_TransmitReceive+0x138>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008650:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008654:	6820      	ldr	r0, [r4, #0]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008656:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008658:	bf1c      	itt	ne
 800865a:	2205      	movne	r2, #5
 800865c:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008660:	2200      	movs	r2, #0
 8008662:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 8008664:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8008666:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008668:	6801      	ldr	r1, [r0, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800866a:	63a7      	str	r7, [r4, #56]	; 0x38
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800866c:	064f      	lsls	r7, r1, #25
  hspi->RxXferSize  = Size;
 800866e:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008670:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008672:	86a6      	strh	r6, [r4, #52]	; 0x34
  hspi->TxISR       = NULL;
 8008674:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008678:	d403      	bmi.n	8008682 <HAL_SPI_TransmitReceive+0x92>
    __HAL_SPI_ENABLE(hspi);
 800867a:	6802      	ldr	r2, [r0, #0]
 800867c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008680:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008682:	68e2      	ldr	r2, [r4, #12]
 8008684:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8008688:	f000 8085 	beq.w	8008796 <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 80ea 	beq.w	8008866 <HAL_SPI_TransmitReceive+0x276>
 8008692:	2e01      	cmp	r6, #1
 8008694:	f000 80e7 	beq.w	8008866 <HAL_SPI_TransmitReceive+0x276>
 8008698:	9b08      	ldr	r3, [sp, #32]
        txallowed = 1U;
 800869a:	2501      	movs	r5, #1
 800869c:	3301      	adds	r3, #1
 800869e:	d027      	beq.n	80086f0 <HAL_SPI_TransmitReceive+0x100>
 80086a0:	e044      	b.n	800872c <HAL_SPI_TransmitReceive+0x13c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80086a2:	6823      	ldr	r3, [r4, #0]
 80086a4:	689a      	ldr	r2, [r3, #8]
 80086a6:	0796      	lsls	r6, r2, #30
 80086a8:	d50f      	bpl.n	80086ca <HAL_SPI_TransmitReceive+0xda>
 80086aa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80086ac:	b292      	uxth	r2, r2
 80086ae:	b162      	cbz	r2, 80086ca <HAL_SPI_TransmitReceive+0xda>
 80086b0:	b15d      	cbz	r5, 80086ca <HAL_SPI_TransmitReceive+0xda>
        txallowed = 0U;
 80086b2:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80086b4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80086b6:	7812      	ldrb	r2, [r2, #0]
 80086b8:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80086ba:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80086bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80086be:	3a01      	subs	r2, #1
        hspi->pTxBuffPtr++;
 80086c0:	1c59      	adds	r1, r3, #1
        hspi->TxXferCount--;
 80086c2:	b292      	uxth	r2, r2
 80086c4:	6823      	ldr	r3, [r4, #0]
 80086c6:	86e2      	strh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80086c8:	6321      	str	r1, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80086ca:	689a      	ldr	r2, [r3, #8]
 80086cc:	07d0      	lsls	r0, r2, #31
 80086ce:	d50d      	bpl.n	80086ec <HAL_SPI_TransmitReceive+0xfc>
 80086d0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80086d2:	b292      	uxth	r2, r2
 80086d4:	b152      	cbz	r2, 80086ec <HAL_SPI_TransmitReceive+0xfc>
        txallowed = 1U;
 80086d6:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80086d8:	68da      	ldr	r2, [r3, #12]
 80086da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80086dc:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 80086de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 80086e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80086e2:	3b01      	subs	r3, #1
 80086e4:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 80086e6:	442a      	add	r2, r5
        hspi->RxXferCount--;
 80086e8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 80086ea:	63a2      	str	r2, [r4, #56]	; 0x38
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80086ec:	f7fd fd3c 	bl	8006168 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086f0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1d4      	bne.n	80086a2 <HAL_SPI_TransmitReceive+0xb2>
 80086f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1d0      	bne.n	80086a2 <HAL_SPI_TransmitReceive+0xb2>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008700:	4643      	mov	r3, r8
 8008702:	9a08      	ldr	r2, [sp, #32]
 8008704:	2180      	movs	r1, #128	; 0x80
 8008706:	4620      	mov	r0, r4
 8008708:	f7ff feb8 	bl	800847c <SPI_WaitFlagStateUntilTimeout.constprop.8>
 800870c:	2800      	cmp	r0, #0
 800870e:	f000 80bd 	beq.w	800888c <HAL_SPI_TransmitReceive+0x29c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008712:	2220      	movs	r2, #32
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008714:	6d63      	ldr	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8008716:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008718:	4313      	orrs	r3, r2
 800871a:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800871c:	6562      	str	r2, [r4, #84]	; 0x54
 800871e:	e783      	b.n	8008628 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8008720:	2002      	movs	r0, #2
}
 8008722:	b002      	add	sp, #8
 8008724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errorcode = HAL_ERROR;
 8008728:	2001      	movs	r0, #1
 800872a:	e77d      	b.n	8008628 <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800872c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800872e:	b29b      	uxth	r3, r3
 8008730:	b91b      	cbnz	r3, 800873a <HAL_SPI_TransmitReceive+0x14a>
 8008732:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008734:	b29b      	uxth	r3, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	d0e2      	beq.n	8008700 <HAL_SPI_TransmitReceive+0x110>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800873a:	6823      	ldr	r3, [r4, #0]
 800873c:	689a      	ldr	r2, [r3, #8]
 800873e:	0791      	lsls	r1, r2, #30
 8008740:	d50f      	bpl.n	8008762 <HAL_SPI_TransmitReceive+0x172>
 8008742:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8008744:	b292      	uxth	r2, r2
 8008746:	b162      	cbz	r2, 8008762 <HAL_SPI_TransmitReceive+0x172>
 8008748:	b15d      	cbz	r5, 8008762 <HAL_SPI_TransmitReceive+0x172>
        txallowed = 0U;
 800874a:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800874c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800874e:	7812      	ldrb	r2, [r2, #0]
 8008750:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8008752:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8008754:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8008756:	3a01      	subs	r2, #1
        hspi->pTxBuffPtr++;
 8008758:	1c59      	adds	r1, r3, #1
        hspi->TxXferCount--;
 800875a:	b292      	uxth	r2, r2
 800875c:	6823      	ldr	r3, [r4, #0]
 800875e:	86e2      	strh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8008760:	6321      	str	r1, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008762:	689a      	ldr	r2, [r3, #8]
 8008764:	07d2      	lsls	r2, r2, #31
 8008766:	d50d      	bpl.n	8008784 <HAL_SPI_TransmitReceive+0x194>
 8008768:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800876a:	b292      	uxth	r2, r2
 800876c:	b152      	cbz	r2, 8008784 <HAL_SPI_TransmitReceive+0x194>
        txallowed = 1U;
 800876e:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008770:	68da      	ldr	r2, [r3, #12]
 8008772:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008774:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8008776:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8008778:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800877a:	3b01      	subs	r3, #1
 800877c:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 800877e:	442a      	add	r2, r5
        hspi->RxXferCount--;
 8008780:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8008782:	63a2      	str	r2, [r4, #56]	; 0x38
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008784:	f7fd fcf0 	bl	8006168 <HAL_GetTick>
 8008788:	9b08      	ldr	r3, [sp, #32]
 800878a:	eba0 0008 	sub.w	r0, r0, r8
 800878e:	4283      	cmp	r3, r0
 8008790:	d8cc      	bhi.n	800872c <HAL_SPI_TransmitReceive+0x13c>
        errorcode = HAL_TIMEOUT;
 8008792:	2003      	movs	r0, #3
 8008794:	e748      	b.n	8008628 <HAL_SPI_TransmitReceive+0x38>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008796:	2b00      	cmp	r3, #0
 8008798:	d06f      	beq.n	800887a <HAL_SPI_TransmitReceive+0x28a>
 800879a:	2e01      	cmp	r6, #1
 800879c:	d06d      	beq.n	800887a <HAL_SPI_TransmitReceive+0x28a>
 800879e:	9b08      	ldr	r3, [sp, #32]
{
 80087a0:	2501      	movs	r5, #1
 80087a2:	3301      	adds	r3, #1
 80087a4:	d024      	beq.n	80087f0 <HAL_SPI_TransmitReceive+0x200>
 80087a6:	e02c      	b.n	8008802 <HAL_SPI_TransmitReceive+0x212>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80087a8:	6823      	ldr	r3, [r4, #0]
 80087aa:	689a      	ldr	r2, [r3, #8]
 80087ac:	0790      	lsls	r0, r2, #30
 80087ae:	d50d      	bpl.n	80087cc <HAL_SPI_TransmitReceive+0x1dc>
 80087b0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80087b2:	b292      	uxth	r2, r2
 80087b4:	b152      	cbz	r2, 80087cc <HAL_SPI_TransmitReceive+0x1dc>
 80087b6:	b14d      	cbz	r5, 80087cc <HAL_SPI_TransmitReceive+0x1dc>
        txallowed = 0U;
 80087b8:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80087bc:	f831 2b02 	ldrh.w	r2, [r1], #2
 80087c0:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80087c2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80087c4:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80087c6:	3a01      	subs	r2, #1
 80087c8:	b292      	uxth	r2, r2
 80087ca:	86e2      	strh	r2, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80087cc:	689a      	ldr	r2, [r3, #8]
 80087ce:	07d1      	lsls	r1, r2, #31
 80087d0:	d50c      	bpl.n	80087ec <HAL_SPI_TransmitReceive+0x1fc>
 80087d2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80087d4:	b292      	uxth	r2, r2
 80087d6:	b14a      	cbz	r2, 80087ec <HAL_SPI_TransmitReceive+0x1fc>
        txallowed = 1U;
 80087d8:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80087de:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 80087e2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80087e4:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80087e6:	3b01      	subs	r3, #1
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80087ec:	f7fd fcbc 	bl	8006168 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087f0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1d7      	bne.n	80087a8 <HAL_SPI_TransmitReceive+0x1b8>
 80087f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1d3      	bne.n	80087a8 <HAL_SPI_TransmitReceive+0x1b8>
 8008800:	e77e      	b.n	8008700 <HAL_SPI_TransmitReceive+0x110>
 8008802:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008804:	b29b      	uxth	r3, r3
 8008806:	b923      	cbnz	r3, 8008812 <HAL_SPI_TransmitReceive+0x222>
 8008808:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800880a:	b29b      	uxth	r3, r3
 800880c:	2b00      	cmp	r3, #0
 800880e:	f43f af77 	beq.w	8008700 <HAL_SPI_TransmitReceive+0x110>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	689a      	ldr	r2, [r3, #8]
 8008816:	0792      	lsls	r2, r2, #30
 8008818:	d50d      	bpl.n	8008836 <HAL_SPI_TransmitReceive+0x246>
 800881a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800881c:	b292      	uxth	r2, r2
 800881e:	b152      	cbz	r2, 8008836 <HAL_SPI_TransmitReceive+0x246>
 8008820:	b14d      	cbz	r5, 8008836 <HAL_SPI_TransmitReceive+0x246>
        txallowed = 0U;
 8008822:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008824:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008826:	f831 2b02 	ldrh.w	r2, [r1], #2
 800882a:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800882c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800882e:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8008830:	3a01      	subs	r2, #1
 8008832:	b292      	uxth	r2, r2
 8008834:	86e2      	strh	r2, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008836:	689a      	ldr	r2, [r3, #8]
 8008838:	07d7      	lsls	r7, r2, #31
 800883a:	d50c      	bpl.n	8008856 <HAL_SPI_TransmitReceive+0x266>
 800883c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800883e:	b292      	uxth	r2, r2
 8008840:	b14a      	cbz	r2, 8008856 <HAL_SPI_TransmitReceive+0x266>
        txallowed = 1U;
 8008842:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008848:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 800884c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800884e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8008850:	3b01      	subs	r3, #1
 8008852:	b29b      	uxth	r3, r3
 8008854:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008856:	f7fd fc87 	bl	8006168 <HAL_GetTick>
 800885a:	9b08      	ldr	r3, [sp, #32]
 800885c:	eba0 0008 	sub.w	r0, r0, r8
 8008860:	4283      	cmp	r3, r0
 8008862:	d8ce      	bhi.n	8008802 <HAL_SPI_TransmitReceive+0x212>
 8008864:	e795      	b.n	8008792 <HAL_SPI_TransmitReceive+0x1a2>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008866:	782b      	ldrb	r3, [r5, #0]
 8008868:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 800886a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800886c:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800886e:	3b01      	subs	r3, #1
 8008870:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008872:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8008874:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008876:	6322      	str	r2, [r4, #48]	; 0x30
 8008878:	e70e      	b.n	8008698 <HAL_SPI_TransmitReceive+0xa8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800887a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800887e:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8008880:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008882:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8008884:	3b01      	subs	r3, #1
 8008886:	b29b      	uxth	r3, r3
 8008888:	86e3      	strh	r3, [r4, #54]	; 0x36
 800888a:	e788      	b.n	800879e <HAL_SPI_TransmitReceive+0x1ae>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800888c:	68a3      	ldr	r3, [r4, #8]
 800888e:	2b00      	cmp	r3, #0
 8008890:	f47f aeca 	bne.w	8008628 <HAL_SPI_TransmitReceive+0x38>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	9001      	str	r0, [sp, #4]
 8008898:	68da      	ldr	r2, [r3, #12]
 800889a:	9201      	str	r2, [sp, #4]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	9301      	str	r3, [sp, #4]
 80088a0:	9b01      	ldr	r3, [sp, #4]
 80088a2:	e6c1      	b.n	8008628 <HAL_SPI_TransmitReceive+0x38>

080088a4 <HAL_SPI_ErrorCallback>:
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop

080088a8 <HAL_SPI_IRQHandler>:
{
 80088a8:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = hspi->Instance->CR2;
 80088aa:	6805      	ldr	r5, [r0, #0]
{
 80088ac:	b084      	sub	sp, #16
  uint32_t itsource = hspi->Instance->CR2;
 80088ae:	686e      	ldr	r6, [r5, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80088b0:	68ab      	ldr	r3, [r5, #8]
{
 80088b2:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80088b4:	f3c3 1180 	ubfx	r1, r3, #6, #1
 80088b8:	b941      	cbnz	r1, 80088cc <HAL_SPI_IRQHandler+0x24>
 80088ba:	07da      	lsls	r2, r3, #31
 80088bc:	d506      	bpl.n	80088cc <HAL_SPI_IRQHandler+0x24>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80088be:	0672      	lsls	r2, r6, #25
 80088c0:	d504      	bpl.n	80088cc <HAL_SPI_IRQHandler+0x24>
    hspi->RxISR(hspi);
 80088c2:	6c03      	ldr	r3, [r0, #64]	; 0x40
}
 80088c4:	b004      	add	sp, #16
 80088c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hspi->TxISR(hspi);
 80088ca:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80088cc:	0798      	lsls	r0, r3, #30
 80088ce:	d507      	bpl.n	80088e0 <HAL_SPI_IRQHandler+0x38>
 80088d0:	0632      	lsls	r2, r6, #24
 80088d2:	d505      	bpl.n	80088e0 <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 80088d4:	4620      	mov	r0, r4
 80088d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
}
 80088d8:	b004      	add	sp, #16
 80088da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hspi->TxISR(hspi);
 80088de:	4718      	bx	r3
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80088e0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d13a      	bne.n	800895e <HAL_SPI_IRQHandler+0xb6>
 80088e8:	2900      	cmp	r1, #0
 80088ea:	d036      	beq.n	800895a <HAL_SPI_IRQHandler+0xb2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80088ec:	06b2      	lsls	r2, r6, #26
 80088ee:	d534      	bpl.n	800895a <HAL_SPI_IRQHandler+0xb2>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80088f0:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 80088f4:	2903      	cmp	r1, #3
 80088f6:	d043      	beq.n	8008980 <HAL_SPI_IRQHandler+0xd8>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80088f8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80088fa:	f041 0104 	orr.w	r1, r1, #4
 80088fe:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008900:	9301      	str	r3, [sp, #4]
 8008902:	68eb      	ldr	r3, [r5, #12]
 8008904:	9301      	str	r3, [sp, #4]
 8008906:	68ab      	ldr	r3, [r5, #8]
 8008908:	9301      	str	r3, [sp, #4]
 800890a:	9b01      	ldr	r3, [sp, #4]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800890c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800890e:	b323      	cbz	r3, 800895a <HAL_SPI_IRQHandler+0xb2>
      hspi->State = HAL_SPI_STATE_READY;
 8008910:	2201      	movs	r2, #1
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008912:	686b      	ldr	r3, [r5, #4]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008914:	07b1      	lsls	r1, r6, #30
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008916:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800891a:	606b      	str	r3, [r5, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800891c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008920:	d036      	beq.n	8008990 <HAL_SPI_IRQHandler+0xe8>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008922:	686b      	ldr	r3, [r5, #4]
        if (hspi->hdmarx != NULL)
 8008924:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008926:	f023 0303 	bic.w	r3, r3, #3
 800892a:	606b      	str	r3, [r5, #4]
        if (hspi->hdmarx != NULL)
 800892c:	b14a      	cbz	r2, 8008942 <HAL_SPI_IRQHandler+0x9a>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800892e:	4b22      	ldr	r3, [pc, #136]	; (80089b8 <HAL_SPI_IRQHandler+0x110>)
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008930:	4610      	mov	r0, r2
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008932:	6353      	str	r3, [r2, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008934:	f7fd fc86 	bl	8006244 <HAL_DMA_Abort_IT>
 8008938:	b118      	cbz	r0, 8008942 <HAL_SPI_IRQHandler+0x9a>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800893a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800893c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008940:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008942:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008944:	b14b      	cbz	r3, 800895a <HAL_SPI_IRQHandler+0xb2>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008946:	4a1c      	ldr	r2, [pc, #112]	; (80089b8 <HAL_SPI_IRQHandler+0x110>)
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008948:	4618      	mov	r0, r3
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800894a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800894c:	f7fd fc7a 	bl	8006244 <HAL_DMA_Abort_IT>
 8008950:	b118      	cbz	r0, 800895a <HAL_SPI_IRQHandler+0xb2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008952:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008958:	6563      	str	r3, [r4, #84]	; 0x54
}
 800895a:	b004      	add	sp, #16
 800895c:	bd70      	pop	{r4, r5, r6, pc}
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800895e:	06b0      	lsls	r0, r6, #26
 8008960:	d5fb      	bpl.n	800895a <HAL_SPI_IRQHandler+0xb2>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008962:	b9c9      	cbnz	r1, 8008998 <HAL_SPI_IRQHandler+0xf0>
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008964:	2100      	movs	r1, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008966:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008968:	f043 0301 	orr.w	r3, r3, #1
 800896c:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800896e:	9103      	str	r1, [sp, #12]
 8008970:	68ab      	ldr	r3, [r5, #8]
 8008972:	9303      	str	r3, [sp, #12]
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800897a:	602b      	str	r3, [r5, #0]
 800897c:	9b03      	ldr	r3, [sp, #12]
 800897e:	e7c5      	b.n	800890c <HAL_SPI_IRQHandler+0x64>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008980:	2300      	movs	r3, #0
 8008982:	9302      	str	r3, [sp, #8]
 8008984:	68eb      	ldr	r3, [r5, #12]
 8008986:	9302      	str	r3, [sp, #8]
 8008988:	68ab      	ldr	r3, [r5, #8]
 800898a:	9302      	str	r3, [sp, #8]
 800898c:	9b02      	ldr	r3, [sp, #8]
        return;
 800898e:	e7e4      	b.n	800895a <HAL_SPI_IRQHandler+0xb2>
        HAL_SPI_ErrorCallback(hspi);
 8008990:	4620      	mov	r0, r4
 8008992:	f7ff ff87 	bl	80088a4 <HAL_SPI_ErrorCallback>
 8008996:	e7e0      	b.n	800895a <HAL_SPI_IRQHandler+0xb2>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008998:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800899c:	2b03      	cmp	r3, #3
 800899e:	d0ef      	beq.n	8008980 <HAL_SPI_IRQHandler+0xd8>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089a0:	2100      	movs	r1, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80089a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80089a4:	f043 0304 	orr.w	r3, r3, #4
 80089a8:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089aa:	9101      	str	r1, [sp, #4]
 80089ac:	68eb      	ldr	r3, [r5, #12]
 80089ae:	9301      	str	r3, [sp, #4]
 80089b0:	68ab      	ldr	r3, [r5, #8]
 80089b2:	9301      	str	r3, [sp, #4]
 80089b4:	9b01      	ldr	r3, [sp, #4]
 80089b6:	e7d5      	b.n	8008964 <HAL_SPI_IRQHandler+0xbc>
 80089b8:	080089bd 	.word	0x080089bd

080089bc <SPI_DMAAbortOnError>:
  hspi->RxXferCount = 0U;
 80089bc:	2200      	movs	r2, #0
{
 80089be:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80089c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 80089c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 80089c4:	4618      	mov	r0, r3
  hspi->TxXferCount = 0U;
 80089c6:	86da      	strh	r2, [r3, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 80089c8:	f7ff ff6c 	bl	80088a4 <HAL_SPI_ErrorCallback>
}
 80089cc:	bd08      	pop	{r3, pc}
 80089ce:	bf00      	nop

080089d0 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop

080089d4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d048      	beq.n	8008a6a <HAL_TIM_Base_Init+0x96>
  if (htim->State == HAL_TIM_STATE_RESET)
 80089d8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80089dc:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80089de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80089e2:	4604      	mov	r4, r0
 80089e4:	b39b      	cbz	r3, 8008a4e <HAL_TIM_Base_Init+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 80089e6:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089e8:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089ea:	4e29      	ldr	r6, [pc, #164]	; (8008a90 <HAL_TIM_Base_Init+0xbc>)
  htim->State = HAL_TIM_STATE_BUSY;
 80089ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089f0:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 80089f2:	6813      	ldr	r3, [r2, #0]
 80089f4:	69a5      	ldr	r5, [r4, #24]
 80089f6:	68e0      	ldr	r0, [r4, #12]
 80089f8:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089fa:	d038      	beq.n	8008a6e <HAL_TIM_Base_Init+0x9a>
 80089fc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008a00:	d02a      	beq.n	8008a58 <HAL_TIM_Base_Init+0x84>
 8008a02:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8008a06:	42b2      	cmp	r2, r6
 8008a08:	d026      	beq.n	8008a58 <HAL_TIM_Base_Init+0x84>
 8008a0a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008a0e:	42b2      	cmp	r2, r6
 8008a10:	d022      	beq.n	8008a58 <HAL_TIM_Base_Init+0x84>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a16:	432b      	orrs	r3, r5

  TIMx->CR1 = tmpcr1;
 8008a18:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a1a:	62d0      	str	r0, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a1c:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a1e:	2301      	movs	r3, #1
  return HAL_OK;
 8008a20:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8008a22:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a24:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a28:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008a2c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008a30:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008a34:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a40:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008a44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8008a48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8008a4c:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8008a4e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008a52:	f7ff ffbd 	bl	80089d0 <HAL_TIM_Base_MspInit>
 8008a56:	e7c6      	b.n	80089e6 <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8008a58:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008a5e:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a60:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a66:	4333      	orrs	r3, r6
 8008a68:	e7d3      	b.n	8008a12 <HAL_TIM_Base_Init+0x3e>
    return HAL_ERROR;
 8008a6a:	2001      	movs	r0, #1
}
 8008a6c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8008a6e:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008a74:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a76:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a7c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a82:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8008a84:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a86:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008a88:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8008a8a:	6963      	ldr	r3, [r4, #20]
 8008a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8008a8e:	e7c6      	b.n	8008a1e <HAL_TIM_Base_Init+0x4a>
 8008a90:	40012c00 	.word	0x40012c00

08008a94 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8008a94:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d001      	beq.n	8008aa0 <HAL_TIM_Base_Start_IT+0xc>
    return HAL_ERROR;
 8008a9c:	2001      	movs	r0, #1
 8008a9e:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 8008aa0:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008aa2:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8008aa4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008aa8:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008aaa:	490e      	ldr	r1, [pc, #56]	; (8008ae4 <HAL_TIM_Base_Start_IT+0x50>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008aac:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ab0:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ab2:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ab4:	d00f      	beq.n	8008ad6 <HAL_TIM_Base_Start_IT+0x42>
 8008ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aba:	d00c      	beq.n	8008ad6 <HAL_TIM_Base_Start_IT+0x42>
 8008abc:	4a0a      	ldr	r2, [pc, #40]	; (8008ae8 <HAL_TIM_Base_Start_IT+0x54>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d009      	beq.n	8008ad6 <HAL_TIM_Base_Start_IT+0x42>
 8008ac2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d005      	beq.n	8008ad6 <HAL_TIM_Base_Start_IT+0x42>
    __HAL_TIM_ENABLE(htim);
 8008aca:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8008acc:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8008ace:	f042 0201 	orr.w	r2, r2, #1
 8008ad2:	601a      	str	r2, [r3, #0]
 8008ad4:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ad6:	689a      	ldr	r2, [r3, #8]
 8008ad8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008adc:	2a06      	cmp	r2, #6
 8008ade:	d1f4      	bne.n	8008aca <HAL_TIM_Base_Start_IT+0x36>
  return HAL_OK;
 8008ae0:	2000      	movs	r0, #0
}
 8008ae2:	4770      	bx	lr
 8008ae4:	40012c00 	.word	0x40012c00
 8008ae8:	40000400 	.word	0x40000400

08008aec <HAL_TIM_OC_DelayElapsedCallback>:
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop

08008af0 <HAL_TIM_IC_CaptureCallback>:
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop

08008af4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <HAL_TIM_TriggerCallback>:
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop

08008afc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008afc:	6803      	ldr	r3, [r0, #0]
{
 8008afe:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b00:	691a      	ldr	r2, [r3, #16]
{
 8008b02:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b04:	0791      	lsls	r1, r2, #30
 8008b06:	d502      	bpl.n	8008b0e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b08:	68da      	ldr	r2, [r3, #12]
 8008b0a:	0792      	lsls	r2, r2, #30
 8008b0c:	d45f      	bmi.n	8008bce <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b0e:	691a      	ldr	r2, [r3, #16]
 8008b10:	0750      	lsls	r0, r2, #29
 8008b12:	d502      	bpl.n	8008b1a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b14:	68da      	ldr	r2, [r3, #12]
 8008b16:	0751      	lsls	r1, r2, #29
 8008b18:	d446      	bmi.n	8008ba8 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b1a:	691a      	ldr	r2, [r3, #16]
 8008b1c:	0712      	lsls	r2, r2, #28
 8008b1e:	d502      	bpl.n	8008b26 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b20:	68da      	ldr	r2, [r3, #12]
 8008b22:	0710      	lsls	r0, r2, #28
 8008b24:	d42e      	bmi.n	8008b84 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b26:	691a      	ldr	r2, [r3, #16]
 8008b28:	06d2      	lsls	r2, r2, #27
 8008b2a:	d502      	bpl.n	8008b32 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b2c:	68da      	ldr	r2, [r3, #12]
 8008b2e:	06d0      	lsls	r0, r2, #27
 8008b30:	d418      	bmi.n	8008b64 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b32:	691a      	ldr	r2, [r3, #16]
 8008b34:	07d1      	lsls	r1, r2, #31
 8008b36:	d502      	bpl.n	8008b3e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b38:	68da      	ldr	r2, [r3, #12]
 8008b3a:	07d2      	lsls	r2, r2, #31
 8008b3c:	d45d      	bmi.n	8008bfa <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b3e:	691a      	ldr	r2, [r3, #16]
 8008b40:	0610      	lsls	r0, r2, #24
 8008b42:	d502      	bpl.n	8008b4a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b44:	68da      	ldr	r2, [r3, #12]
 8008b46:	0611      	lsls	r1, r2, #24
 8008b48:	d45f      	bmi.n	8008c0a <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b4a:	691a      	ldr	r2, [r3, #16]
 8008b4c:	0652      	lsls	r2, r2, #25
 8008b4e:	d502      	bpl.n	8008b56 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b50:	68da      	ldr	r2, [r3, #12]
 8008b52:	0650      	lsls	r0, r2, #25
 8008b54:	d461      	bmi.n	8008c1a <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b56:	691a      	ldr	r2, [r3, #16]
 8008b58:	0691      	lsls	r1, r2, #26
 8008b5a:	d502      	bpl.n	8008b62 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b5c:	68da      	ldr	r2, [r3, #12]
 8008b5e:	0692      	lsls	r2, r2, #26
 8008b60:	d443      	bmi.n	8008bea <HAL_TIM_IRQHandler+0xee>
}
 8008b62:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b64:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b68:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b6a:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b6c:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8008b6e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b70:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b74:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b76:	d064      	beq.n	8008c42 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8008b78:	f7ff ffba 	bl	8008af0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	6823      	ldr	r3, [r4, #0]
 8008b80:	7722      	strb	r2, [r4, #28]
 8008b82:	e7d6      	b.n	8008b32 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b84:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b88:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b8a:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b8c:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8008b8e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b90:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b92:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b94:	d152      	bne.n	8008c3c <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b96:	f7ff ffa9 	bl	8008aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f7ff ffaa 	bl	8008af4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	6823      	ldr	r3, [r4, #0]
 8008ba4:	7722      	strb	r2, [r4, #28]
 8008ba6:	e7be      	b.n	8008b26 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ba8:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008bac:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008bae:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008bb0:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8008bb2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008bb4:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008bb8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008bba:	d13c      	bne.n	8008c36 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bbc:	f7ff ff96 	bl	8008aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f7ff ff97 	bl	8008af4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	6823      	ldr	r3, [r4, #0]
 8008bca:	7722      	strb	r2, [r4, #28]
 8008bcc:	e7a5      	b.n	8008b1a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bce:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bd2:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bd4:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bd6:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bd8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bda:	079b      	lsls	r3, r3, #30
 8008bdc:	d025      	beq.n	8008c2a <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8008bde:	f7ff ff87 	bl	8008af0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008be2:	2200      	movs	r2, #0
 8008be4:	6823      	ldr	r3, [r4, #0]
 8008be6:	7722      	strb	r2, [r4, #28]
 8008be8:	e791      	b.n	8008b0e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008bea:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8008bee:	4620      	mov	r0, r4
}
 8008bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008bf4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008bf6:	f000 b82b 	b.w	8008c50 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008bfa:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8008bfe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c00:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c02:	f7fd f833 	bl	8005c6c <HAL_TIM_PeriodElapsedCallback>
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	e799      	b.n	8008b3e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8008c0e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c10:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008c12:	f000 f81f 	bl	8008c54 <HAL_TIMEx_BreakCallback>
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	e797      	b.n	8008b4a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8008c1e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c20:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008c22:	f7ff ff69 	bl	8008af8 <HAL_TIM_TriggerCallback>
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	e795      	b.n	8008b56 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c2a:	f7ff ff5f 	bl	8008aec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f7ff ff60 	bl	8008af4 <HAL_TIM_PWM_PulseFinishedCallback>
 8008c34:	e7d5      	b.n	8008be2 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8008c36:	f7ff ff5b 	bl	8008af0 <HAL_TIM_IC_CaptureCallback>
 8008c3a:	e7c4      	b.n	8008bc6 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8008c3c:	f7ff ff58 	bl	8008af0 <HAL_TIM_IC_CaptureCallback>
 8008c40:	e7ae      	b.n	8008ba0 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c42:	f7ff ff53 	bl	8008aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c46:	4620      	mov	r0, r4
 8008c48:	f7ff ff54 	bl	8008af4 <HAL_TIM_PWM_PulseFinishedCallback>
 8008c4c:	e796      	b.n	8008b7c <HAL_TIM_IRQHandler+0x80>
 8008c4e:	bf00      	nop

08008c50 <HAL_TIMEx_CommutCallback>:
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop

08008c54 <HAL_TIMEx_BreakCallback>:
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop

08008c58 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c58:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c5c:	b983      	cbnz	r3, 8008c80 <osKernelInitialize+0x28>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8008c62:	b96b      	cbnz	r3, 8008c80 <osKernelInitialize+0x28>
 8008c64:	4b08      	ldr	r3, [pc, #32]	; (8008c88 <osKernelInitialize+0x30>)
 8008c66:	6818      	ldr	r0, [r3, #0]
 8008c68:	2802      	cmp	r0, #2
 8008c6a:	d003      	beq.n	8008c74 <osKernelInitialize+0x1c>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8008c6c:	b928      	cbnz	r0, 8008c7a <osKernelInitialize+0x22>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8008c6e:	2201      	movs	r2, #1
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c74:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8008c78:	b913      	cbnz	r3, 8008c80 <osKernelInitialize+0x28>
      stat = osOK;
    } else {
      stat = osError;
 8008c7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  }

  return (stat);
}
 8008c7e:	4770      	bx	lr
    stat = osErrorISR;
 8008c80:	f06f 0005 	mvn.w	r0, #5
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	20001e40 	.word	0x20001e40

08008c8c <osKernelStart>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c8c:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c90:	b9c3      	cbnz	r3, 8008cc4 <osKernelStart+0x38>
osStatus_t osKernelStart (void) {
 8008c92:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c94:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 8008c98:	b98c      	cbnz	r4, 8008cbe <osKernelStart+0x32>
 8008c9a:	4b0c      	ldr	r3, [pc, #48]	; (8008ccc <osKernelStart+0x40>)
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	2a02      	cmp	r2, #2
 8008ca0:	d007      	beq.n	8008cb2 <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8008ca2:	2a01      	cmp	r2, #1
 8008ca4:	d108      	bne.n	8008cb8 <osKernelStart+0x2c>
      KernelState = osKernelRunning;
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008caa:	f000 ff8b 	bl	8009bc4 <vTaskStartScheduler>
      stat = osOK;
 8008cae:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8008cb0:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008cb2:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8008cb6:	b913      	cbnz	r3, 8008cbe <osKernelStart+0x32>
      stat = osError;
 8008cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8008cbc:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8008cbe:	f06f 0005 	mvn.w	r0, #5
}
 8008cc2:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8008cc4:	f06f 0005 	mvn.w	r0, #5
}
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	20001e40 	.word	0x20001e40

08008cd0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008cd2:	2400      	movs	r4, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008cd4:	b087      	sub	sp, #28
  hTask = NULL;
 8008cd6:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cd8:	f3ef 8505 	mrs	r5, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8008cdc:	2d00      	cmp	r5, #0
 8008cde:	d135      	bne.n	8008d4c <osThreadNew+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d138      	bne.n	8008d5a <osThreadNew+0x8a>
 8008ce8:	4b25      	ldr	r3, [pc, #148]	; (8008d80 <osThreadNew+0xb0>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d030      	beq.n	8008d52 <osThreadNew+0x82>
 8008cf0:	b398      	cbz	r0, 8008d5a <osThreadNew+0x8a>
 8008cf2:	460b      	mov	r3, r1
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	f88d 1013 	strb.w	r1, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8008cfa:	b1e2      	cbz	r2, 8008d36 <osThreadNew+0x66>
      if (attr->name != NULL) {
 8008cfc:	6811      	ldr	r1, [r2, #0]
 8008cfe:	b399      	cbz	r1, 8008d68 <osThreadNew+0x98>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8008d00:	6994      	ldr	r4, [r2, #24]
 8008d02:	b36c      	cbz	r4, 8008d60 <osThreadNew+0x90>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008d04:	1e65      	subs	r5, r4, #1
 8008d06:	2d37      	cmp	r5, #55	; 0x37
 8008d08:	d820      	bhi.n	8008d4c <osThreadNew+0x7c>
 8008d0a:	6855      	ldr	r5, [r2, #4]
 8008d0c:	07ed      	lsls	r5, r5, #31
 8008d0e:	d41d      	bmi.n	8008d4c <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8008d10:	6955      	ldr	r5, [r2, #20]
 8008d12:	bb3d      	cbnz	r5, 8008d64 <osThreadNew+0x94>
    stack = configMINIMAL_STACK_SIZE;
 8008d14:	2780      	movs	r7, #128	; 0x80
 8008d16:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d1a:	b346      	cbz	r6, 8008d6e <osThreadNew+0x9e>
 8008d1c:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
 8008d20:	d91b      	bls.n	8008d5a <osThreadNew+0x8a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d22:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d24:	b1ca      	cbz	r2, 8008d5a <osThreadNew+0x8a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d26:	b1c5      	cbz	r5, 8008d5a <osThreadNew+0x8a>
    else {
      mem = 0;
    }

    if (mem == 1) {
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d28:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8008d2c:	9400      	str	r4, [sp, #0]
 8008d2e:	463a      	mov	r2, r7
 8008d30:	f000 fe60 	bl	80099f4 <xTaskCreateStatic>
 8008d34:	e00b      	b.n	8008d4e <osThreadNew+0x7e>
 8008d36:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
 8008d38:	2418      	movs	r4, #24
    name  = &empty;
 8008d3a:	f10d 0113 	add.w	r1, sp, #19
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008d3e:	ad05      	add	r5, sp, #20
 8008d40:	e9cd 4500 	strd	r4, r5, [sp]
 8008d44:	f000 fe8e 	bl	8009a64 <xTaskCreate>
 8008d48:	2801      	cmp	r0, #1
 8008d4a:	d006      	beq.n	8008d5a <osThreadNew+0x8a>
        return (NULL);
 8008d4c:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 8008d4e:	b007      	add	sp, #28
 8008d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d52:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d0ca      	beq.n	8008cf0 <osThreadNew+0x20>
 8008d5a:	9805      	ldr	r0, [sp, #20]
}
 8008d5c:	b007      	add	sp, #28
 8008d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    prio  = (UBaseType_t)osPriorityNormal;
 8008d60:	2418      	movs	r4, #24
 8008d62:	e7d2      	b.n	8008d0a <osThreadNew+0x3a>
        stack = attr->stack_size / sizeof(StackType_t);
 8008d64:	08af      	lsrs	r7, r5, #2
 8008d66:	e7d6      	b.n	8008d16 <osThreadNew+0x46>
    name  = &empty;
 8008d68:	f10d 0113 	add.w	r1, sp, #19
 8008d6c:	e7c8      	b.n	8008d00 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008d6e:	f1bc 0f00 	cmp.w	ip, #0
 8008d72:	d1f2      	bne.n	8008d5a <osThreadNew+0x8a>
 8008d74:	6912      	ldr	r2, [r2, #16]
 8008d76:	2a00      	cmp	r2, #0
 8008d78:	d1ef      	bne.n	8008d5a <osThreadNew+0x8a>
 8008d7a:	b2ba      	uxth	r2, r7
 8008d7c:	e7df      	b.n	8008d3e <osThreadNew+0x6e>
 8008d7e:	bf00      	nop
 8008d80:	20001e40 	.word	0x20001e40

08008d84 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008d84:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d86:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d8a:	b983      	cbnz	r3, 8008dae <osDelay+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8008d90:	b96b      	cbnz	r3, 8008dae <osDelay+0x2a>
 8008d92:	4b08      	ldr	r3, [pc, #32]	; (8008db4 <osDelay+0x30>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	d005      	beq.n	8008da6 <osDelay+0x22>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8008d9a:	b900      	cbnz	r0, 8008d9e <osDelay+0x1a>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8008d9c:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8008d9e:	f001 f8bb 	bl	8009f18 <vTaskDelay>
    stat = osOK;
 8008da2:	2000      	movs	r0, #0
}
 8008da4:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008da6:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d0f5      	beq.n	8008d9a <osDelay+0x16>
    stat = osErrorISR;
 8008dae:	f06f 0005 	mvn.w	r0, #5
}
 8008db2:	bd08      	pop	{r3, pc}
 8008db4:	20001e40 	.word	0x20001e40

08008db8 <vApplicationGetIdleTaskMemory>:
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008db8:	2380      	movs	r3, #128	; 0x80
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008dba:	b430      	push	{r4, r5}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008dbc:	4d03      	ldr	r5, [pc, #12]	; (8008dcc <vApplicationGetIdleTaskMemory+0x14>)
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008dbe:	4c04      	ldr	r4, [pc, #16]	; (8008dd0 <vApplicationGetIdleTaskMemory+0x18>)
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008dc0:	6005      	str	r5, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008dc2:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008dc4:	6013      	str	r3, [r2, #0]
}
 8008dc6:	bc30      	pop	{r4, r5}
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	20001ddc 	.word	0x20001ddc
 8008dd0:	20001bdc 	.word	0x20001bdc

08008dd4 <vApplicationGetTimerTaskMemory>:
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008dd4:	f44f 7380 	mov.w	r3, #256	; 0x100
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008dd8:	b430      	push	{r4, r5}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008dda:	4d03      	ldr	r5, [pc, #12]	; (8008de8 <vApplicationGetTimerTaskMemory+0x14>)
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008ddc:	4c03      	ldr	r4, [pc, #12]	; (8008dec <vApplicationGetTimerTaskMemory+0x18>)
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008dde:	6005      	str	r5, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008de0:	600c      	str	r4, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008de2:	6013      	str	r3, [r2, #0]
}
 8008de4:	bc30      	pop	{r4, r5}
 8008de6:	4770      	bx	lr
 8008de8:	20002244 	.word	0x20002244
 8008dec:	20001e44 	.word	0x20001e44

08008df0 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008df0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008df4:	2200      	movs	r2, #0
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008df6:	f100 0308 	add.w	r3, r0, #8
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008dfa:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008dfc:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008dfe:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e00:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop

08008e08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop

08008e10 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008e10:	6843      	ldr	r3, [r0, #4]
{
 8008e12:	b410      	push	{r4}

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008e14:	689c      	ldr	r4, [r3, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8008e16:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008e18:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008e1a:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8008e1c:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 8008e1e:	604b      	str	r3, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008e20:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008e22:	6099      	str	r1, [r3, #8]
}
 8008e24:	bc10      	pop	{r4}
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008e26:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008e28:	6002      	str	r2, [r0, #0]
}
 8008e2a:	4770      	bx	lr

08008e2c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e2c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e2e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e30:	1c6b      	adds	r3, r5, #1
 8008e32:	d011      	beq.n	8008e58 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e34:	f100 0208 	add.w	r2, r0, #8
 8008e38:	e000      	b.n	8008e3c <vListInsert+0x10>
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	6853      	ldr	r3, [r2, #4]
 8008e3e:	681c      	ldr	r4, [r3, #0]
 8008e40:	42ac      	cmp	r4, r5
 8008e42:	d9fa      	bls.n	8008e3a <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8008e44:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8008e46:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8008e48:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e4a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008e4c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008e4e:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008e50:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008e52:	6004      	str	r4, [r0, #0]
}
 8008e54:	bc30      	pop	{r4, r5}
 8008e56:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8008e58:	6902      	ldr	r2, [r0, #16]
 8008e5a:	6853      	ldr	r3, [r2, #4]
 8008e5c:	e7f2      	b.n	8008e44 <vListInsert+0x18>
 8008e5e:	bf00      	nop

08008e60 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008e60:	6903      	ldr	r3, [r0, #16]
{
 8008e62:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008e64:	e9d0 2101 	ldrd	r2, r1, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008e68:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008e6a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008e6c:	6881      	ldr	r1, [r0, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8008e6e:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008e70:	604a      	str	r2, [r1, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008e72:	bf08      	it	eq
 8008e74:	6059      	streq	r1, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008e76:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8008e78:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pvContainer = NULL;
 8008e7a:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008e7c:	3a01      	subs	r2, #1
 8008e7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008e80:	6818      	ldr	r0, [r3, #0]
}
 8008e82:	bc10      	pop	{r4}
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop

08008e88 <xQueueGenericReset>:

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8008e88:	b1e8      	cbz	r0, 8008ec6 <xQueueGenericReset+0x3e>
{
 8008e8a:	b570      	push	{r4, r5, r6, lr}
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008e90:	2600      	movs	r6, #0
	taskENTER_CRITICAL();
 8008e92:	f001 fc5f 	bl	800a754 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008e96:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->cRxLock = queueUNLOCKED;
 8008e9a:	20ff      	movs	r0, #255	; 0xff
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008e9c:	fb03 f302 	mul.w	r3, r3, r2
 8008ea0:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008ea2:	1a9a      	subs	r2, r3, r2
 8008ea4:	440a      	add	r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008ea6:	440b      	add	r3, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008ea8:	63a6      	str	r6, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008eaa:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008eac:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008eb0:	e9c4 3101 	strd	r3, r1, [r4, #4]
		pxQueue->cTxLock = queueUNLOCKED;
 8008eb4:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008eb8:	b975      	cbnz	r5, 8008ed8 <xQueueGenericReset+0x50>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008eba:	6923      	ldr	r3, [r4, #16]
 8008ebc:	b9ab      	cbnz	r3, 8008eea <xQueueGenericReset+0x62>
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
 8008ebe:	f001 fc6b 	bl	800a798 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8008ec2:	2001      	movs	r0, #1
 8008ec4:	bd70      	pop	{r4, r5, r6, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eca:	f383 8811 	msr	BASEPRI, r3
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	e7fe      	b.n	8008ed6 <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008ed8:	f104 0010 	add.w	r0, r4, #16
 8008edc:	f7ff ff88 	bl	8008df0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008ee0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008ee4:	f7ff ff84 	bl	8008df0 <vListInitialise>
 8008ee8:	e7e9      	b.n	8008ebe <xQueueGenericReset+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008eea:	f104 0010 	add.w	r0, r4, #16
 8008eee:	f001 f915 	bl	800a11c <xTaskRemoveFromEventList>
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	d0e3      	beq.n	8008ebe <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8008ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008efa:	4b03      	ldr	r3, [pc, #12]	; (8008f08 <xQueueGenericReset+0x80>)
 8008efc:	601a      	str	r2, [r3, #0]
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	f3bf 8f6f 	isb	sy
 8008f06:	e7da      	b.n	8008ebe <xQueueGenericReset+0x36>
 8008f08:	e000ed04 	.word	0xe000ed04

08008f0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008f0c:	b530      	push	{r4, r5, lr}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	f89d 5018 	ldrb.w	r5, [sp, #24]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f14:	b940      	cbnz	r0, 8008f28 <xQueueGenericCreateStatic+0x1c>
 8008f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1a:	f383 8811 	msr	BASEPRI, r3
 8008f1e:	f3bf 8f6f 	isb	sy
 8008f22:	f3bf 8f4f 	dsb	sy
 8008f26:	e7fe      	b.n	8008f26 <xQueueGenericCreateStatic+0x1a>
 8008f28:	461c      	mov	r4, r3

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008f2a:	b17b      	cbz	r3, 8008f4c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008f2c:	b37a      	cbz	r2, 8008f8e <xQueueGenericCreateStatic+0x82>
 8008f2e:	b1b1      	cbz	r1, 8008f5e <xQueueGenericCreateStatic+0x52>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008f30:	2350      	movs	r3, #80	; 0x50
 8008f32:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008f34:	9b01      	ldr	r3, [sp, #4]
 8008f36:	2b50      	cmp	r3, #80	; 0x50
 8008f38:	d01a      	beq.n	8008f70 <xQueueGenericCreateStatic+0x64>
 8008f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3e:	f383 8811 	msr	BASEPRI, r3
 8008f42:	f3bf 8f6f 	isb	sy
 8008f46:	f3bf 8f4f 	dsb	sy
 8008f4a:	e7fe      	b.n	8008f4a <xQueueGenericCreateStatic+0x3e>
 8008f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	e7fe      	b.n	8008f5c <xQueueGenericCreateStatic+0x50>
 8008f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f62:	f383 8811 	msr	BASEPRI, r3
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	f3bf 8f4f 	dsb	sy
 8008f6e:	e7fe      	b.n	8008f6e <xQueueGenericCreateStatic+0x62>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f70:	2301      	movs	r3, #1
 8008f72:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
	pxNewQueue->uxItemSize = uxItemSize;
 8008f76:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
 8008f7a:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008f7c:	2101      	movs	r1, #1
 8008f7e:	4620      	mov	r0, r4
 8008f80:	f7ff ff82 	bl	8008e88 <xQueueGenericReset>
	}
 8008f84:	4620      	mov	r0, r4

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008f86:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
	}
 8008f8a:	b003      	add	sp, #12
 8008f8c:	bd30      	pop	{r4, r5, pc}
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008f8e:	b141      	cbz	r1, 8008fa2 <xQueueGenericCreateStatic+0x96>
 8008f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f94:	f383 8811 	msr	BASEPRI, r3
 8008f98:	f3bf 8f6f 	isb	sy
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	e7fe      	b.n	8008fa0 <xQueueGenericCreateStatic+0x94>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008fa2:	2350      	movs	r3, #80	; 0x50
 8008fa4:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008fa6:	9b01      	ldr	r3, [sp, #4]
 8008fa8:	2b50      	cmp	r3, #80	; 0x50
 8008faa:	d1c6      	bne.n	8008f3a <xQueueGenericCreateStatic+0x2e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008fac:	2301      	movs	r3, #1
 8008fae:	4622      	mov	r2, r4
 8008fb0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008fb4:	e7df      	b.n	8008f76 <xQueueGenericCreateStatic+0x6a>
 8008fb6:	bf00      	nop

08008fb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fbc:	b085      	sub	sp, #20
 8008fbe:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	f000 8125 	beq.w	8009210 <xQueueGenericSend+0x258>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fc6:	2900      	cmp	r1, #0
 8008fc8:	f000 8115 	beq.w	80091f6 <xQueueGenericSend+0x23e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d10b      	bne.n	8008fe8 <xQueueGenericSend+0x30>
 8008fd0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008fd2:	2a01      	cmp	r2, #1
 8008fd4:	d008      	beq.n	8008fe8 <xQueueGenericSend+0x30>
 8008fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fda:	f383 8811 	msr	BASEPRI, r3
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	e7fe      	b.n	8008fe6 <xQueueGenericSend+0x2e>
 8008fe8:	4604      	mov	r4, r0
 8008fea:	461f      	mov	r7, r3
 8008fec:	460e      	mov	r6, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008fee:	f001 f933 	bl	800a258 <xTaskGetSchedulerState>
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	f040 80fc 	bne.w	80091f0 <xQueueGenericSend+0x238>
 8008ff8:	9b01      	ldr	r3, [sp, #4]
 8008ffa:	b143      	cbz	r3, 800900e <xQueueGenericSend+0x56>
 8008ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009000:	f383 8811 	msr	BASEPRI, r3
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	e7fe      	b.n	800900c <xQueueGenericSend+0x54>
 800900e:	469a      	mov	sl, r3
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009010:	f001 fba0 	bl	800a754 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009014:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009016:	6be3      	ldr	r3, [r4, #60]	; 0x3c

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8009018:	f04f 0800 	mov.w	r8, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800901c:	429a      	cmp	r2, r3
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 800901e:	f8df 932c 	ldr.w	r9, [pc, #812]	; 800934c <xQueueGenericSend+0x394>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009022:	d375      	bcc.n	8009110 <xQueueGenericSend+0x158>
 8009024:	2f02      	cmp	r7, #2
 8009026:	f000 80fc 	beq.w	8009222 <xQueueGenericSend+0x26a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800902a:	9d01      	ldr	r5, [sp, #4]
 800902c:	2d00      	cmp	r5, #0
 800902e:	f000 8161 	beq.w	80092f4 <xQueueGenericSend+0x33c>
				else if( xEntryTimeSet == pdFALSE )
 8009032:	f1ba 0f00 	cmp.w	sl, #0
 8009036:	d102      	bne.n	800903e <xQueueGenericSend+0x86>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009038:	a802      	add	r0, sp, #8
 800903a:	f001 f8b5 	bl	800a1a8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800903e:	f001 fbab 	bl	800a798 <vPortExitCritical>
		vTaskSuspendAll();
 8009042:	f000 fe31 	bl	8009ca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009046:	f001 fb85 	bl	800a754 <vPortEnterCritical>
 800904a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800904e:	2bff      	cmp	r3, #255	; 0xff
 8009050:	bf08      	it	eq
 8009052:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8009056:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800905a:	2bff      	cmp	r3, #255	; 0xff
 800905c:	bf08      	it	eq
 800905e:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8009062:	f001 fb99 	bl	800a798 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009066:	a901      	add	r1, sp, #4
 8009068:	a802      	add	r0, sp, #8
 800906a:	f001 f8a9 	bl	800a1c0 <xTaskCheckForTimeOut>
 800906e:	2800      	cmp	r0, #0
 8009070:	f040 8126 	bne.w	80092c0 <xQueueGenericSend+0x308>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009074:	f001 fb6e 	bl	800a754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009078:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800907a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800907c:	429a      	cmp	r2, r3
 800907e:	d06a      	beq.n	8009156 <xQueueGenericSend+0x19e>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8009080:	f001 fb8a 	bl	800a798 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009084:	f001 fb66 	bl	800a754 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009088:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800908c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800908e:	2d00      	cmp	r5, #0
 8009090:	dd11      	ble.n	80090b6 <xQueueGenericSend+0xfe>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009092:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009094:	b17b      	cbz	r3, 80090b6 <xQueueGenericSend+0xfe>
 8009096:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 800909a:	e001      	b.n	80090a0 <xQueueGenericSend+0xe8>
 800909c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800909e:	b153      	cbz	r3, 80090b6 <xQueueGenericSend+0xfe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090a0:	4650      	mov	r0, sl
 80090a2:	f001 f83b 	bl	800a11c <xTaskRemoveFromEventList>
 80090a6:	b108      	cbz	r0, 80090ac <xQueueGenericSend+0xf4>
						vTaskMissedYield();
 80090a8:	f001 f8d0 	bl	800a24c <vTaskMissedYield>
 80090ac:	3d01      	subs	r5, #1
 80090ae:	b2eb      	uxtb	r3, r5
 80090b0:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1f2      	bne.n	800909c <xQueueGenericSend+0xe4>
		pxQueue->cTxLock = queueUNLOCKED;
 80090b6:	23ff      	movs	r3, #255	; 0xff
 80090b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80090bc:	f001 fb6c 	bl	800a798 <vPortExitCritical>
	taskENTER_CRITICAL();
 80090c0:	f001 fb48 	bl	800a754 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80090c4:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80090c8:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090ca:	2d00      	cmp	r5, #0
 80090cc:	dd11      	ble.n	80090f2 <xQueueGenericSend+0x13a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090ce:	6923      	ldr	r3, [r4, #16]
 80090d0:	b17b      	cbz	r3, 80090f2 <xQueueGenericSend+0x13a>
 80090d2:	f104 0a10 	add.w	sl, r4, #16
 80090d6:	e001      	b.n	80090dc <xQueueGenericSend+0x124>
 80090d8:	6923      	ldr	r3, [r4, #16]
 80090da:	b153      	cbz	r3, 80090f2 <xQueueGenericSend+0x13a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090dc:	4650      	mov	r0, sl
 80090de:	f001 f81d 	bl	800a11c <xTaskRemoveFromEventList>
 80090e2:	b108      	cbz	r0, 80090e8 <xQueueGenericSend+0x130>
					vTaskMissedYield();
 80090e4:	f001 f8b2 	bl	800a24c <vTaskMissedYield>
 80090e8:	3d01      	subs	r5, #1
 80090ea:	b2eb      	uxtb	r3, r5
 80090ec:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1f2      	bne.n	80090d8 <xQueueGenericSend+0x120>
		pxQueue->cRxLock = queueUNLOCKED;
 80090f2:	23ff      	movs	r3, #255	; 0xff
 80090f4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80090f8:	f001 fb4e 	bl	800a798 <vPortExitCritical>
				( void ) xTaskResumeAll();
 80090fc:	f000 fe86 	bl	8009e0c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8009100:	f001 fb28 	bl	800a754 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009104:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009106:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009108:	f04f 0a01 	mov.w	sl, #1
 800910c:	429a      	cmp	r2, r3
 800910e:	d289      	bcs.n	8009024 <xQueueGenericSend+0x6c>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009110:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009112:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009114:	2a00      	cmp	r2, #0
 8009116:	f000 8087 	beq.w	8009228 <xQueueGenericSend+0x270>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800911a:	4631      	mov	r1, r6
	else if( xPosition == queueSEND_TO_BACK )
 800911c:	2f00      	cmp	r7, #0
 800911e:	f040 80bb 	bne.w	8009298 <xQueueGenericSend+0x2e0>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009122:	68a0      	ldr	r0, [r4, #8]
 8009124:	f002 fd80 	bl	800bc28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009128:	68a3      	ldr	r3, [r4, #8]
 800912a:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800912c:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800912e:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009130:	4293      	cmp	r3, r2
 8009132:	f105 0501 	add.w	r5, r5, #1
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009136:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009138:	d379      	bcc.n	800922e <xQueueGenericSend+0x276>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800913a:	63a5      	str	r5, [r4, #56]	; 0x38
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800913c:	6822      	ldr	r2, [r4, #0]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800913e:	6a63      	ldr	r3, [r4, #36]	; 0x24
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009140:	60a2      	str	r2, [r4, #8]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009142:	2b00      	cmp	r3, #0
 8009144:	d077      	beq.n	8009236 <xQueueGenericSend+0x27e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009146:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800914a:	f000 ffe7 	bl	800a11c <xTaskRemoveFromEventList>
 800914e:	2800      	cmp	r0, #0
 8009150:	f040 8082 	bne.w	8009258 <xQueueGenericSend+0x2a0>
 8009154:	e06f      	b.n	8009236 <xQueueGenericSend+0x27e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009156:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
 800915a:	f001 fb1d 	bl	800a798 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800915e:	4650      	mov	r0, sl
 8009160:	9901      	ldr	r1, [sp, #4]
 8009162:	f000 ff4d 	bl	800a000 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8009166:	f001 faf5 	bl	800a754 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800916a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800916e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009170:	2d00      	cmp	r5, #0
 8009172:	dd11      	ble.n	8009198 <xQueueGenericSend+0x1e0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009174:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009176:	b17b      	cbz	r3, 8009198 <xQueueGenericSend+0x1e0>
 8009178:	f104 0b24 	add.w	fp, r4, #36	; 0x24
 800917c:	e001      	b.n	8009182 <xQueueGenericSend+0x1ca>
 800917e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009180:	b153      	cbz	r3, 8009198 <xQueueGenericSend+0x1e0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009182:	4658      	mov	r0, fp
 8009184:	f000 ffca 	bl	800a11c <xTaskRemoveFromEventList>
 8009188:	b108      	cbz	r0, 800918e <xQueueGenericSend+0x1d6>
						vTaskMissedYield();
 800918a:	f001 f85f 	bl	800a24c <vTaskMissedYield>
 800918e:	3d01      	subs	r5, #1
 8009190:	b2eb      	uxtb	r3, r5
 8009192:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009194:	2b00      	cmp	r3, #0
 8009196:	d1f2      	bne.n	800917e <xQueueGenericSend+0x1c6>
		pxQueue->cTxLock = queueUNLOCKED;
 8009198:	23ff      	movs	r3, #255	; 0xff
 800919a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800919e:	f001 fafb 	bl	800a798 <vPortExitCritical>
	taskENTER_CRITICAL();
 80091a2:	f001 fad7 	bl	800a754 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80091a6:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80091aa:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091ac:	2d00      	cmp	r5, #0
 80091ae:	dc0a      	bgt.n	80091c6 <xQueueGenericSend+0x20e>
 80091b0:	e00c      	b.n	80091cc <xQueueGenericSend+0x214>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091b2:	4650      	mov	r0, sl
 80091b4:	f000 ffb2 	bl	800a11c <xTaskRemoveFromEventList>
 80091b8:	b108      	cbz	r0, 80091be <xQueueGenericSend+0x206>
					vTaskMissedYield();
 80091ba:	f001 f847 	bl	800a24c <vTaskMissedYield>
 80091be:	3d01      	subs	r5, #1
 80091c0:	b2eb      	uxtb	r3, r5
 80091c2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091c4:	b113      	cbz	r3, 80091cc <xQueueGenericSend+0x214>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091c6:	6923      	ldr	r3, [r4, #16]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1f2      	bne.n	80091b2 <xQueueGenericSend+0x1fa>
		pxQueue->cRxLock = queueUNLOCKED;
 80091cc:	23ff      	movs	r3, #255	; 0xff
 80091ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80091d2:	f001 fae1 	bl	800a798 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 80091d6:	f000 fe19 	bl	8009e0c <xTaskResumeAll>
 80091da:	2800      	cmp	r0, #0
 80091dc:	d190      	bne.n	8009100 <xQueueGenericSend+0x148>
					portYIELD_WITHIN_API();
 80091de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091e2:	f8c9 3000 	str.w	r3, [r9]
 80091e6:	f3bf 8f4f 	dsb	sy
 80091ea:	f3bf 8f6f 	isb	sy
 80091ee:	e787      	b.n	8009100 <xQueueGenericSend+0x148>
 80091f0:	f04f 0a00 	mov.w	sl, #0
 80091f4:	e70c      	b.n	8009010 <xQueueGenericSend+0x58>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091f6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80091f8:	2a00      	cmp	r2, #0
 80091fa:	f43f aee7 	beq.w	8008fcc <xQueueGenericSend+0x14>
 80091fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	e7fe      	b.n	800920e <xQueueGenericSend+0x256>
 8009210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009214:	f383 8811 	msr	BASEPRI, r3
 8009218:	f3bf 8f6f 	isb	sy
 800921c:	f3bf 8f4f 	dsb	sy
 8009220:	e7fe      	b.n	8009220 <xQueueGenericSend+0x268>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009222:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009224:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009226:	bb02      	cbnz	r2, 800926a <xQueueGenericSend+0x2b2>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009228:	6826      	ldr	r6, [r4, #0]
 800922a:	3501      	adds	r5, #1
 800922c:	b14e      	cbz	r6, 8009242 <xQueueGenericSend+0x28a>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800922e:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009232:	2b00      	cmp	r3, #0
 8009234:	d187      	bne.n	8009146 <xQueueGenericSend+0x18e>
				taskEXIT_CRITICAL();
 8009236:	f001 faaf 	bl	800a798 <vPortExitCritical>
				return pdPASS;
 800923a:	2001      	movs	r0, #1
}
 800923c:	b005      	add	sp, #20
 800923e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009242:	6860      	ldr	r0, [r4, #4]
 8009244:	f001 f818 	bl	800a278 <xTaskPriorityDisinherit>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009248:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800924a:	6a63      	ldr	r3, [r4, #36]	; 0x24
				pxQueue->pxMutexHolder = NULL;
 800924c:	6066      	str	r6, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800924e:	2b00      	cmp	r3, #0
 8009250:	f47f af79 	bne.w	8009146 <xQueueGenericSend+0x18e>
					else if( xYieldRequired != pdFALSE )
 8009254:	2800      	cmp	r0, #0
 8009256:	d0ee      	beq.n	8009236 <xQueueGenericSend+0x27e>
						queueYIELD_IF_USING_PREEMPTION();
 8009258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800925c:	4b3b      	ldr	r3, [pc, #236]	; (800934c <xQueueGenericSend+0x394>)
 800925e:	601a      	str	r2, [r3, #0]
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	e7e5      	b.n	8009236 <xQueueGenericSend+0x27e>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800926a:	4631      	mov	r1, r6
 800926c:	68e0      	ldr	r0, [r4, #12]
 800926e:	f002 fcdb 	bl	800bc28 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009272:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009274:	68e2      	ldr	r2, [r4, #12]
 8009276:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009278:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800927a:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800927c:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800927e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009280:	d216      	bcs.n	80092b0 <xQueueGenericSend+0x2f8>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009282:	6862      	ldr	r2, [r4, #4]
 8009284:	4413      	add	r3, r2
 8009286:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8009288:	2f02      	cmp	r7, #2
 800928a:	d011      	beq.n	80092b0 <xQueueGenericSend+0x2f8>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800928c:	3501      	adds	r5, #1
 800928e:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009290:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009292:	2b00      	cmp	r3, #0
 8009294:	d0cf      	beq.n	8009236 <xQueueGenericSend+0x27e>
 8009296:	e756      	b.n	8009146 <xQueueGenericSend+0x18e>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009298:	68e0      	ldr	r0, [r4, #12]
 800929a:	f002 fcc5 	bl	800bc28 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800929e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092a0:	68e2      	ldr	r2, [r4, #12]
 80092a2:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092a4:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80092a6:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092a8:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80092aa:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092ac:	d2ec      	bcs.n	8009288 <xQueueGenericSend+0x2d0>
 80092ae:	e7e8      	b.n	8009282 <xQueueGenericSend+0x2ca>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092b0:	2d00      	cmp	r5, #0
 80092b2:	d1bc      	bne.n	800922e <xQueueGenericSend+0x276>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80092b4:	2301      	movs	r3, #1
 80092b6:	63a3      	str	r3, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d0bb      	beq.n	8009236 <xQueueGenericSend+0x27e>
 80092be:	e742      	b.n	8009146 <xQueueGenericSend+0x18e>
	taskENTER_CRITICAL();
 80092c0:	f001 fa48 	bl	800a754 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80092c4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80092c8:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80092ca:	2d00      	cmp	r5, #0
 80092cc:	dd16      	ble.n	80092fc <xQueueGenericSend+0x344>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092d0:	b1a3      	cbz	r3, 80092fc <xQueueGenericSend+0x344>
 80092d2:	f104 0624 	add.w	r6, r4, #36	; 0x24
 80092d6:	e005      	b.n	80092e4 <xQueueGenericSend+0x32c>
 80092d8:	3d01      	subs	r5, #1
 80092da:	b2eb      	uxtb	r3, r5
 80092dc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80092de:	b16b      	cbz	r3, 80092fc <xQueueGenericSend+0x344>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092e2:	b15b      	cbz	r3, 80092fc <xQueueGenericSend+0x344>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092e4:	4630      	mov	r0, r6
 80092e6:	f000 ff19 	bl	800a11c <xTaskRemoveFromEventList>
 80092ea:	2800      	cmp	r0, #0
 80092ec:	d0f4      	beq.n	80092d8 <xQueueGenericSend+0x320>
						vTaskMissedYield();
 80092ee:	f000 ffad 	bl	800a24c <vTaskMissedYield>
 80092f2:	e7f1      	b.n	80092d8 <xQueueGenericSend+0x320>
					taskEXIT_CRITICAL();
 80092f4:	f001 fa50 	bl	800a798 <vPortExitCritical>
					return errQUEUE_FULL;
 80092f8:	4628      	mov	r0, r5
 80092fa:	e79f      	b.n	800923c <xQueueGenericSend+0x284>
		pxQueue->cTxLock = queueUNLOCKED;
 80092fc:	23ff      	movs	r3, #255	; 0xff
 80092fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009302:	f001 fa49 	bl	800a798 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009306:	f001 fa25 	bl	800a754 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800930a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800930e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009310:	2d00      	cmp	r5, #0
 8009312:	dd12      	ble.n	800933a <xQueueGenericSend+0x382>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009314:	6923      	ldr	r3, [r4, #16]
 8009316:	b183      	cbz	r3, 800933a <xQueueGenericSend+0x382>
 8009318:	f104 0610 	add.w	r6, r4, #16
 800931c:	e005      	b.n	800932a <xQueueGenericSend+0x372>
 800931e:	3d01      	subs	r5, #1
 8009320:	b2eb      	uxtb	r3, r5
 8009322:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009324:	b14b      	cbz	r3, 800933a <xQueueGenericSend+0x382>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009326:	6923      	ldr	r3, [r4, #16]
 8009328:	b13b      	cbz	r3, 800933a <xQueueGenericSend+0x382>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800932a:	4630      	mov	r0, r6
 800932c:	f000 fef6 	bl	800a11c <xTaskRemoveFromEventList>
 8009330:	2800      	cmp	r0, #0
 8009332:	d0f4      	beq.n	800931e <xQueueGenericSend+0x366>
					vTaskMissedYield();
 8009334:	f000 ff8a 	bl	800a24c <vTaskMissedYield>
 8009338:	e7f1      	b.n	800931e <xQueueGenericSend+0x366>
		pxQueue->cRxLock = queueUNLOCKED;
 800933a:	23ff      	movs	r3, #255	; 0xff
 800933c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8009340:	f001 fa2a 	bl	800a798 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8009344:	f000 fd62 	bl	8009e0c <xTaskResumeAll>
			return errQUEUE_FULL;
 8009348:	2000      	movs	r0, #0
 800934a:	e777      	b.n	800923c <xQueueGenericSend+0x284>
 800934c:	e000ed04 	.word	0xe000ed04

08009350 <xQueueReceive>:
{
 8009350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009354:	b084      	sub	sp, #16
 8009356:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009358:	2800      	cmp	r0, #0
 800935a:	f000 8143 	beq.w	80095e4 <xQueueReceive+0x294>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800935e:	2900      	cmp	r1, #0
 8009360:	f000 8133 	beq.w	80095ca <xQueueReceive+0x27a>
 8009364:	4604      	mov	r4, r0
 8009366:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009368:	f000 ff76 	bl	800a258 <xTaskGetSchedulerState>
 800936c:	b950      	cbnz	r0, 8009384 <xQueueReceive+0x34>
 800936e:	9b01      	ldr	r3, [sp, #4]
 8009370:	b143      	cbz	r3, 8009384 <xQueueReceive+0x34>
 8009372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	e7fe      	b.n	8009382 <xQueueReceive+0x32>
		taskENTER_CRITICAL();
 8009384:	f001 f9e6 	bl	800a754 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009388:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800938a:	2d00      	cmp	r5, #0
 800938c:	f040 80ba 	bne.w	8009504 <xQueueReceive+0x1b4>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009390:	9b01      	ldr	r3, [sp, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d06a      	beq.n	800946c <xQueueReceive+0x11c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009396:	a802      	add	r0, sp, #8
		prvLockQueue( pxQueue );
 8009398:	46a8      	mov	r8, r5
					vTaskInternalSetTimeOutState( &xTimeOut );
 800939a:	f000 ff05 	bl	800a1a8 <vTaskInternalSetTimeOutState>
					portYIELD_WITHIN_API();
 800939e:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8009614 <xQueueReceive+0x2c4>
 80093a2:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 80093a6:	f001 f9f7 	bl	800a798 <vPortExitCritical>
		vTaskSuspendAll();
 80093aa:	f000 fc7d 	bl	8009ca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093ae:	f001 f9d1 	bl	800a754 <vPortEnterCritical>
 80093b2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80093b6:	2bff      	cmp	r3, #255	; 0xff
 80093b8:	bf08      	it	eq
 80093ba:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80093be:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80093c2:	2bff      	cmp	r3, #255	; 0xff
 80093c4:	bf08      	it	eq
 80093c6:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80093ca:	f001 f9e5 	bl	800a798 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093ce:	a901      	add	r1, sp, #4
 80093d0:	a802      	add	r0, sp, #8
 80093d2:	f000 fef5 	bl	800a1c0 <xTaskCheckForTimeOut>
 80093d6:	2800      	cmp	r0, #0
 80093d8:	d14e      	bne.n	8009478 <xQueueReceive+0x128>
	taskENTER_CRITICAL();
 80093da:	f001 f9bb 	bl	800a754 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80093de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f000 80a8 	beq.w	8009536 <xQueueReceive+0x1e6>
	taskEXIT_CRITICAL();
 80093e6:	f001 f9d7 	bl	800a798 <vPortExitCritical>
	taskENTER_CRITICAL();
 80093ea:	f001 f9b3 	bl	800a754 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80093ee:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80093f2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093f4:	2d00      	cmp	r5, #0
 80093f6:	dc0a      	bgt.n	800940e <xQueueReceive+0xbe>
 80093f8:	e00c      	b.n	8009414 <xQueueReceive+0xc4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093fa:	4630      	mov	r0, r6
 80093fc:	f000 fe8e 	bl	800a11c <xTaskRemoveFromEventList>
 8009400:	b108      	cbz	r0, 8009406 <xQueueReceive+0xb6>
						vTaskMissedYield();
 8009402:	f000 ff23 	bl	800a24c <vTaskMissedYield>
 8009406:	3d01      	subs	r5, #1
 8009408:	b2eb      	uxtb	r3, r5
 800940a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800940c:	b113      	cbz	r3, 8009414 <xQueueReceive+0xc4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800940e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1f2      	bne.n	80093fa <xQueueReceive+0xaa>
		pxQueue->cTxLock = queueUNLOCKED;
 8009414:	23ff      	movs	r3, #255	; 0xff
 8009416:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800941a:	f001 f9bd 	bl	800a798 <vPortExitCritical>
	taskENTER_CRITICAL();
 800941e:	f001 f999 	bl	800a754 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009422:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8009426:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009428:	2d00      	cmp	r5, #0
 800942a:	dd10      	ble.n	800944e <xQueueReceive+0xfe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800942c:	6923      	ldr	r3, [r4, #16]
 800942e:	b173      	cbz	r3, 800944e <xQueueReceive+0xfe>
 8009430:	f104 0a10 	add.w	sl, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009434:	4650      	mov	r0, sl
 8009436:	f000 fe71 	bl	800a11c <xTaskRemoveFromEventList>
 800943a:	b108      	cbz	r0, 8009440 <xQueueReceive+0xf0>
					vTaskMissedYield();
 800943c:	f000 ff06 	bl	800a24c <vTaskMissedYield>
 8009440:	3d01      	subs	r5, #1
 8009442:	b2eb      	uxtb	r3, r5
 8009444:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009446:	b113      	cbz	r3, 800944e <xQueueReceive+0xfe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009448:	6923      	ldr	r3, [r4, #16]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1f2      	bne.n	8009434 <xQueueReceive+0xe4>
		pxQueue->cRxLock = queueUNLOCKED;
 800944e:	23ff      	movs	r3, #255	; 0xff
 8009450:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8009454:	f001 f9a0 	bl	800a798 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8009458:	f000 fcd8 	bl	8009e0c <xTaskResumeAll>
		taskENTER_CRITICAL();
 800945c:	f001 f97a 	bl	800a754 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009460:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009462:	2d00      	cmp	r5, #0
 8009464:	d14e      	bne.n	8009504 <xQueueReceive+0x1b4>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009466:	9b01      	ldr	r3, [sp, #4]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d19c      	bne.n	80093a6 <xQueueReceive+0x56>
					taskEXIT_CRITICAL();
 800946c:	f001 f994 	bl	800a798 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009470:	2000      	movs	r0, #0
}
 8009472:	b004      	add	sp, #16
 8009474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskENTER_CRITICAL();
 8009478:	f001 f96c 	bl	800a754 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800947c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8009480:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009482:	2d00      	cmp	r5, #0
 8009484:	dc0a      	bgt.n	800949c <xQueueReceive+0x14c>
 8009486:	e00c      	b.n	80094a2 <xQueueReceive+0x152>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009488:	4630      	mov	r0, r6
 800948a:	f000 fe47 	bl	800a11c <xTaskRemoveFromEventList>
 800948e:	b108      	cbz	r0, 8009494 <xQueueReceive+0x144>
						vTaskMissedYield();
 8009490:	f000 fedc 	bl	800a24c <vTaskMissedYield>
 8009494:	3d01      	subs	r5, #1
 8009496:	b2eb      	uxtb	r3, r5
 8009498:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800949a:	b113      	cbz	r3, 80094a2 <xQueueReceive+0x152>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800949c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1f2      	bne.n	8009488 <xQueueReceive+0x138>
		pxQueue->cTxLock = queueUNLOCKED;
 80094a2:	23ff      	movs	r3, #255	; 0xff
 80094a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80094a8:	f001 f976 	bl	800a798 <vPortExitCritical>
	taskENTER_CRITICAL();
 80094ac:	f001 f952 	bl	800a754 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80094b0:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80094b4:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094b6:	2d00      	cmp	r5, #0
 80094b8:	dd11      	ble.n	80094de <xQueueReceive+0x18e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094ba:	6923      	ldr	r3, [r4, #16]
 80094bc:	b17b      	cbz	r3, 80094de <xQueueReceive+0x18e>
 80094be:	f104 0a10 	add.w	sl, r4, #16
 80094c2:	e001      	b.n	80094c8 <xQueueReceive+0x178>
 80094c4:	6923      	ldr	r3, [r4, #16]
 80094c6:	b153      	cbz	r3, 80094de <xQueueReceive+0x18e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094c8:	4650      	mov	r0, sl
 80094ca:	f000 fe27 	bl	800a11c <xTaskRemoveFromEventList>
 80094ce:	b108      	cbz	r0, 80094d4 <xQueueReceive+0x184>
					vTaskMissedYield();
 80094d0:	f000 febc 	bl	800a24c <vTaskMissedYield>
 80094d4:	3d01      	subs	r5, #1
 80094d6:	b2eb      	uxtb	r3, r5
 80094d8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1f2      	bne.n	80094c4 <xQueueReceive+0x174>
		pxQueue->cRxLock = queueUNLOCKED;
 80094de:	23ff      	movs	r3, #255	; 0xff
 80094e0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80094e4:	f001 f958 	bl	800a798 <vPortExitCritical>
			( void ) xTaskResumeAll();
 80094e8:	f000 fc90 	bl	8009e0c <xTaskResumeAll>
	taskENTER_CRITICAL();
 80094ec:	f001 f932 	bl	800a754 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80094f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d0ba      	beq.n	800946c <xQueueReceive+0x11c>
	taskEXIT_CRITICAL();
 80094f6:	f001 f94f 	bl	800a798 <vPortExitCritical>
		taskENTER_CRITICAL();
 80094fa:	f001 f92b 	bl	800a754 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094fe:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009500:	2d00      	cmp	r5, #0
 8009502:	d0b0      	beq.n	8009466 <xQueueReceive+0x116>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009504:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009506:	b15a      	cbz	r2, 8009520 <xQueueReceive+0x1d0>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009508:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800950a:	6863      	ldr	r3, [r4, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800950c:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800950e:	4299      	cmp	r1, r3
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009510:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009512:	d302      	bcc.n	800951a <xQueueReceive+0x1ca>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009514:	6823      	ldr	r3, [r4, #0]
 8009516:	4619      	mov	r1, r3
 8009518:	60e3      	str	r3, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800951a:	4638      	mov	r0, r7
 800951c:	f002 fb84 	bl	800bc28 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009520:	3d01      	subs	r5, #1
 8009522:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009524:	6923      	ldr	r3, [r4, #16]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d165      	bne.n	80095f6 <xQueueReceive+0x2a6>
				taskEXIT_CRITICAL();
 800952a:	f001 f935 	bl	800a798 <vPortExitCritical>
				return pdPASS;
 800952e:	2001      	movs	r0, #1
}
 8009530:	b004      	add	sp, #16
 8009532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 8009536:	f001 f92f 	bl	800a798 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800953a:	9901      	ldr	r1, [sp, #4]
 800953c:	4630      	mov	r0, r6
 800953e:	f000 fd5f 	bl	800a000 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8009542:	f001 f907 	bl	800a754 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009546:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800954a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800954c:	2d00      	cmp	r5, #0
 800954e:	dc0a      	bgt.n	8009566 <xQueueReceive+0x216>
 8009550:	e00c      	b.n	800956c <xQueueReceive+0x21c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009552:	4630      	mov	r0, r6
 8009554:	f000 fde2 	bl	800a11c <xTaskRemoveFromEventList>
 8009558:	b108      	cbz	r0, 800955e <xQueueReceive+0x20e>
						vTaskMissedYield();
 800955a:	f000 fe77 	bl	800a24c <vTaskMissedYield>
 800955e:	3d01      	subs	r5, #1
 8009560:	b2eb      	uxtb	r3, r5
 8009562:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009564:	b113      	cbz	r3, 800956c <xQueueReceive+0x21c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1f2      	bne.n	8009552 <xQueueReceive+0x202>
		pxQueue->cTxLock = queueUNLOCKED;
 800956c:	23ff      	movs	r3, #255	; 0xff
 800956e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009572:	f001 f911 	bl	800a798 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009576:	f001 f8ed 	bl	800a754 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800957a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800957e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009580:	2d00      	cmp	r5, #0
 8009582:	dd10      	ble.n	80095a6 <xQueueReceive+0x256>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009584:	6923      	ldr	r3, [r4, #16]
 8009586:	b173      	cbz	r3, 80095a6 <xQueueReceive+0x256>
 8009588:	f104 0a10 	add.w	sl, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800958c:	4650      	mov	r0, sl
 800958e:	f000 fdc5 	bl	800a11c <xTaskRemoveFromEventList>
 8009592:	b108      	cbz	r0, 8009598 <xQueueReceive+0x248>
					vTaskMissedYield();
 8009594:	f000 fe5a 	bl	800a24c <vTaskMissedYield>
 8009598:	3d01      	subs	r5, #1
 800959a:	b2eb      	uxtb	r3, r5
 800959c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800959e:	b113      	cbz	r3, 80095a6 <xQueueReceive+0x256>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095a0:	6923      	ldr	r3, [r4, #16]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d1f2      	bne.n	800958c <xQueueReceive+0x23c>
		pxQueue->cRxLock = queueUNLOCKED;
 80095a6:	23ff      	movs	r3, #255	; 0xff
 80095a8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80095ac:	f001 f8f4 	bl	800a798 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 80095b0:	f000 fc2c 	bl	8009e0c <xTaskResumeAll>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d1a0      	bne.n	80094fa <xQueueReceive+0x1aa>
					portYIELD_WITHIN_API();
 80095b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80095bc:	f8c9 3000 	str.w	r3, [r9]
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	e797      	b.n	80094fa <xQueueReceive+0x1aa>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f43f aec9 	beq.w	8009364 <xQueueReceive+0x14>
 80095d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	e7fe      	b.n	80095e2 <xQueueReceive+0x292>
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	e7fe      	b.n	80095f4 <xQueueReceive+0x2a4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095f6:	f104 0010 	add.w	r0, r4, #16
 80095fa:	f000 fd8f 	bl	800a11c <xTaskRemoveFromEventList>
 80095fe:	2800      	cmp	r0, #0
 8009600:	d093      	beq.n	800952a <xQueueReceive+0x1da>
						queueYIELD_IF_USING_PREEMPTION();
 8009602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009606:	4b03      	ldr	r3, [pc, #12]	; (8009614 <xQueueReceive+0x2c4>)
 8009608:	601a      	str	r2, [r3, #0]
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	e78a      	b.n	800952a <xQueueReceive+0x1da>
 8009614:	e000ed04 	.word	0xe000ed04

08009618 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009618:	4b13      	ldr	r3, [pc, #76]	; (8009668 <vQueueAddToRegistry+0x50>)
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	b17a      	cbz	r2, 800963e <vQueueAddToRegistry+0x26>
 800961e:	689a      	ldr	r2, [r3, #8]
 8009620:	b1aa      	cbz	r2, 800964e <vQueueAddToRegistry+0x36>
 8009622:	691a      	ldr	r2, [r3, #16]
 8009624:	b1aa      	cbz	r2, 8009652 <vQueueAddToRegistry+0x3a>
 8009626:	699a      	ldr	r2, [r3, #24]
 8009628:	b1aa      	cbz	r2, 8009656 <vQueueAddToRegistry+0x3e>
 800962a:	6a1a      	ldr	r2, [r3, #32]
 800962c:	b1aa      	cbz	r2, 800965a <vQueueAddToRegistry+0x42>
 800962e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009630:	b1aa      	cbz	r2, 800965e <vQueueAddToRegistry+0x46>
 8009632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009634:	b112      	cbz	r2, 800963c <vQueueAddToRegistry+0x24>
 8009636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009638:	b19a      	cbz	r2, 8009662 <vQueueAddToRegistry+0x4a>
 800963a:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800963c:	2206      	movs	r2, #6
	{
 800963e:	b410      	push	{r4}
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009640:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
 8009644:	6060      	str	r0, [r4, #4]
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009646:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800964a:	bc10      	pop	{r4}
 800964c:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800964e:	2201      	movs	r2, #1
 8009650:	e7f5      	b.n	800963e <vQueueAddToRegistry+0x26>
 8009652:	2202      	movs	r2, #2
 8009654:	e7f3      	b.n	800963e <vQueueAddToRegistry+0x26>
 8009656:	2203      	movs	r2, #3
 8009658:	e7f1      	b.n	800963e <vQueueAddToRegistry+0x26>
 800965a:	2204      	movs	r2, #4
 800965c:	e7ef      	b.n	800963e <vQueueAddToRegistry+0x26>
 800965e:	2205      	movs	r2, #5
 8009660:	e7ed      	b.n	800963e <vQueueAddToRegistry+0x26>
 8009662:	2207      	movs	r2, #7
 8009664:	e7eb      	b.n	800963e <vQueueAddToRegistry+0x26>
 8009666:	bf00      	nop
 8009668:	20003e00 	.word	0x20003e00

0800966c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800966c:	b570      	push	{r4, r5, r6, lr}
 800966e:	4605      	mov	r5, r0
 8009670:	460c      	mov	r4, r1
 8009672:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009674:	f001 f86e 	bl	800a754 <vPortEnterCritical>
 8009678:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 800967c:	2bff      	cmp	r3, #255	; 0xff
 800967e:	bf04      	itt	eq
 8009680:	2300      	moveq	r3, #0
 8009682:	f885 3044 	strbeq.w	r3, [r5, #68]	; 0x44
 8009686:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800968a:	2bff      	cmp	r3, #255	; 0xff
 800968c:	bf04      	itt	eq
 800968e:	2300      	moveq	r3, #0
 8009690:	f885 3045 	strbeq.w	r3, [r5, #69]	; 0x45
 8009694:	f001 f880 	bl	800a798 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009698:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800969a:	b92b      	cbnz	r3, 80096a8 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800969c:	4632      	mov	r2, r6
 800969e:	4621      	mov	r1, r4
 80096a0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80096a4:	f000 fcf0 	bl	800a088 <vTaskPlaceOnEventListRestricted>
	taskENTER_CRITICAL();
 80096a8:	f001 f854 	bl	800a754 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80096ac:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80096b0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096b2:	2c00      	cmp	r4, #0
 80096b4:	dd16      	ble.n	80096e4 <vQueueWaitForMessageRestricted+0x78>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80096b8:	b1a3      	cbz	r3, 80096e4 <vQueueWaitForMessageRestricted+0x78>
 80096ba:	f105 0624 	add.w	r6, r5, #36	; 0x24
 80096be:	e005      	b.n	80096cc <vQueueWaitForMessageRestricted+0x60>
 80096c0:	3c01      	subs	r4, #1
 80096c2:	b2e3      	uxtb	r3, r4
 80096c4:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096c6:	b16b      	cbz	r3, 80096e4 <vQueueWaitForMessageRestricted+0x78>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80096ca:	b15b      	cbz	r3, 80096e4 <vQueueWaitForMessageRestricted+0x78>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096cc:	4630      	mov	r0, r6
 80096ce:	f000 fd25 	bl	800a11c <xTaskRemoveFromEventList>
 80096d2:	2800      	cmp	r0, #0
 80096d4:	d0f4      	beq.n	80096c0 <vQueueWaitForMessageRestricted+0x54>
 80096d6:	3c01      	subs	r4, #1
						vTaskMissedYield();
 80096d8:	f000 fdb8 	bl	800a24c <vTaskMissedYield>
 80096dc:	b2e3      	uxtb	r3, r4
 80096de:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1f1      	bne.n	80096c8 <vQueueWaitForMessageRestricted+0x5c>
		pxQueue->cTxLock = queueUNLOCKED;
 80096e4:	23ff      	movs	r3, #255	; 0xff
 80096e6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80096ea:	f001 f855 	bl	800a798 <vPortExitCritical>
	taskENTER_CRITICAL();
 80096ee:	f001 f831 	bl	800a754 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80096f2:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80096f6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80096f8:	2c00      	cmp	r4, #0
 80096fa:	dd16      	ble.n	800972a <vQueueWaitForMessageRestricted+0xbe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096fc:	692b      	ldr	r3, [r5, #16]
 80096fe:	b1a3      	cbz	r3, 800972a <vQueueWaitForMessageRestricted+0xbe>
 8009700:	f105 0610 	add.w	r6, r5, #16
 8009704:	e005      	b.n	8009712 <vQueueWaitForMessageRestricted+0xa6>
 8009706:	3c01      	subs	r4, #1
 8009708:	b2e3      	uxtb	r3, r4
 800970a:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800970c:	b16b      	cbz	r3, 800972a <vQueueWaitForMessageRestricted+0xbe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800970e:	692b      	ldr	r3, [r5, #16]
 8009710:	b15b      	cbz	r3, 800972a <vQueueWaitForMessageRestricted+0xbe>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009712:	4630      	mov	r0, r6
 8009714:	f000 fd02 	bl	800a11c <xTaskRemoveFromEventList>
 8009718:	2800      	cmp	r0, #0
 800971a:	d0f4      	beq.n	8009706 <vQueueWaitForMessageRestricted+0x9a>
 800971c:	3c01      	subs	r4, #1
					vTaskMissedYield();
 800971e:	f000 fd95 	bl	800a24c <vTaskMissedYield>
 8009722:	b2e3      	uxtb	r3, r4
 8009724:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1f1      	bne.n	800970e <vQueueWaitForMessageRestricted+0xa2>
		pxQueue->cRxLock = queueUNLOCKED;
 800972a:	23ff      	movs	r3, #255	; 0xff
 800972c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 8009730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8009734:	f001 b830 	b.w	800a798 <vPortExitCritical>

08009738 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800973c:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800973e:	f001 f809 	bl	800a754 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009742:	4a33      	ldr	r2, [pc, #204]	; (8009810 <prvAddNewTaskToReadyList+0xd8>)
		if( pxCurrentTCB == NULL )
 8009744:	4e33      	ldr	r6, [pc, #204]	; (8009814 <prvAddNewTaskToReadyList+0xdc>)
		uxCurrentNumberOfTasks++;
 8009746:	6813      	ldr	r3, [r2, #0]
 8009748:	3301      	adds	r3, #1
 800974a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800974c:	6833      	ldr	r3, [r6, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d031      	beq.n	80097b6 <prvAddNewTaskToReadyList+0x7e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009752:	4c31      	ldr	r4, [pc, #196]	; (8009818 <prvAddNewTaskToReadyList+0xe0>)
 8009754:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8009756:	6823      	ldr	r3, [r4, #0]
 8009758:	b333      	cbz	r3, 80097a8 <prvAddNewTaskToReadyList+0x70>
 800975a:	4f30      	ldr	r7, [pc, #192]	; (800981c <prvAddNewTaskToReadyList+0xe4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800975c:	4930      	ldr	r1, [pc, #192]	; (8009820 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 800975e:	4a31      	ldr	r2, [pc, #196]	; (8009824 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 8009760:	f8d1 c000 	ldr.w	ip, [r1]
		uxTaskNumber++;
 8009764:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8009766:	4584      	cmp	ip, r0
		uxTaskNumber++;
 8009768:	f103 0301 	add.w	r3, r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 800976c:	bf38      	it	cc
 800976e:	6008      	strcc	r0, [r1, #0]
 8009770:	eb00 0080 	add.w	r0, r0, r0, lsl #2
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009774:	64ab      	str	r3, [r5, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 8009776:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800977a:	1d29      	adds	r1, r5, #4
		uxTaskNumber++;
 800977c:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800977e:	f7ff fb47 	bl	8008e10 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009782:	f001 f809 	bl	800a798 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009786:	6823      	ldr	r3, [r4, #0]
 8009788:	b163      	cbz	r3, 80097a4 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800978a:	6832      	ldr	r2, [r6, #0]
 800978c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800978e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009790:	429a      	cmp	r2, r3
 8009792:	d207      	bcs.n	80097a4 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009798:	4b23      	ldr	r3, [pc, #140]	; (8009828 <prvAddNewTaskToReadyList+0xf0>)
 800979a:	601a      	str	r2, [r3, #0]
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80097a8:	6833      	ldr	r3, [r6, #0]
 80097aa:	4f1c      	ldr	r7, [pc, #112]	; (800981c <prvAddNewTaskToReadyList+0xe4>)
 80097ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ae:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 80097b0:	bf98      	it	ls
 80097b2:	6035      	strls	r5, [r6, #0]
 80097b4:	e7d2      	b.n	800975c <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 80097b6:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80097b8:	6813      	ldr	r3, [r2, #0]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d003      	beq.n	80097c6 <prvAddNewTaskToReadyList+0x8e>
 80097be:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80097c0:	4f16      	ldr	r7, [pc, #88]	; (800981c <prvAddNewTaskToReadyList+0xe4>)
 80097c2:	4c15      	ldr	r4, [pc, #84]	; (8009818 <prvAddNewTaskToReadyList+0xe0>)
 80097c4:	e7ca      	b.n	800975c <prvAddNewTaskToReadyList+0x24>
 80097c6:	4f15      	ldr	r7, [pc, #84]	; (800981c <prvAddNewTaskToReadyList+0xe4>)
 80097c8:	463c      	mov	r4, r7
 80097ca:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80097ce:	4620      	mov	r0, r4
 80097d0:	3414      	adds	r4, #20
 80097d2:	f7ff fb0d 	bl	8008df0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097d6:	45a0      	cmp	r8, r4
 80097d8:	d1f9      	bne.n	80097ce <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
 80097da:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8009844 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList2 );
 80097de:	4c13      	ldr	r4, [pc, #76]	; (800982c <prvAddNewTaskToReadyList+0xf4>)
	vListInitialise( &xDelayedTaskList1 );
 80097e0:	4640      	mov	r0, r8
 80097e2:	f7ff fb05 	bl	8008df0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80097e6:	4620      	mov	r0, r4
 80097e8:	f7ff fb02 	bl	8008df0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80097ec:	4810      	ldr	r0, [pc, #64]	; (8009830 <prvAddNewTaskToReadyList+0xf8>)
 80097ee:	f7ff faff 	bl	8008df0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80097f2:	4810      	ldr	r0, [pc, #64]	; (8009834 <prvAddNewTaskToReadyList+0xfc>)
 80097f4:	f7ff fafc 	bl	8008df0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80097f8:	480f      	ldr	r0, [pc, #60]	; (8009838 <prvAddNewTaskToReadyList+0x100>)
 80097fa:	f7ff faf9 	bl	8008df0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80097fe:	4a0f      	ldr	r2, [pc, #60]	; (800983c <prvAddNewTaskToReadyList+0x104>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009800:	4b0f      	ldr	r3, [pc, #60]	; (8009840 <prvAddNewTaskToReadyList+0x108>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8009802:	f8c2 8000 	str.w	r8, [r2]
 8009806:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009808:	601c      	str	r4, [r3, #0]
 800980a:	4c03      	ldr	r4, [pc, #12]	; (8009818 <prvAddNewTaskToReadyList+0xe0>)
 800980c:	e7a6      	b.n	800975c <prvAddNewTaskToReadyList+0x24>
 800980e:	bf00      	nop
 8009810:	20002718 	.word	0x20002718
 8009814:	200022a8 	.word	0x200022a8
 8009818:	20002774 	.word	0x20002774
 800981c:	200022b4 	.word	0x200022b4
 8009820:	2000272c 	.word	0x2000272c
 8009824:	20002728 	.word	0x20002728
 8009828:	e000ed04 	.word	0xe000ed04
 800982c:	20002744 	.word	0x20002744
 8009830:	20002760 	.word	0x20002760
 8009834:	2000278c 	.word	0x2000278c
 8009838:	20002778 	.word	0x20002778
 800983c:	200022ac 	.word	0x200022ac
 8009840:	200022b0 	.word	0x200022b0
 8009844:	20002730 	.word	0x20002730

08009848 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800984c:	468a      	mov	sl, r1
 800984e:	e9dd 570a 	ldrd	r5, r7, [sp, #40]	; 0x28
 8009852:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009854:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8009858:	465a      	mov	r2, fp
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800985a:	4680      	mov	r8, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800985c:	21a5      	movs	r1, #165	; 0xa5
 800985e:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009860:	4699      	mov	r9, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009862:	f002 fa05 	bl	800bc70 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009866:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8009868:	f1ab 0b04 	sub.w	fp, fp, #4
 800986c:	445e      	add	r6, fp
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800986e:	f026 0607 	bic.w	r6, r6, #7
 8009872:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8009876:	6466      	str	r6, [r4, #68]	; 0x44
 8009878:	f10a 0a0f 	add.w	sl, sl, #15
 800987c:	f104 0234 	add.w	r2, r4, #52	; 0x34
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009880:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8009884:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8009888:	7819      	ldrb	r1, [r3, #0]
 800988a:	b109      	cbz	r1, 8009890 <prvInitialiseNewTask.isra.2+0x48>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800988c:	4553      	cmp	r3, sl
 800988e:	d1f7      	bne.n	8009880 <prvInitialiseNewTask.isra.2+0x38>
 8009890:	2d37      	cmp	r5, #55	; 0x37
 8009892:	bf28      	it	cs
 8009894:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009896:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 800989a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800989c:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800989e:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80098a0:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80098a4:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80098a8:	f7ff faae 	bl	8008e08 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098ac:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80098b0:	f104 0018 	add.w	r0, r4, #24
 80098b4:	f7ff faa8 	bl	8008e08 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80098b8:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098bc:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulRunTimeCounter = 0UL;
 80098be:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80098c2:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80098c6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80098c8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80098ca:	464a      	mov	r2, r9
 80098cc:	4641      	mov	r1, r8
 80098ce:	4630      	mov	r0, r6
 80098d0:	f000 ff18 	bl	800a704 <pxPortInitialiseStack>
 80098d4:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80098d6:	b107      	cbz	r7, 80098da <prvInitialiseNewTask.isra.2+0x92>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80098d8:	603c      	str	r4, [r7, #0]
}
 80098da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080098e0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80098e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e2:	4605      	mov	r5, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80098e4:	4b15      	ldr	r3, [pc, #84]	; (800993c <prvAddCurrentTaskToDelayedList+0x5c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098e6:	4e16      	ldr	r6, [pc, #88]	; (8009940 <prvAddCurrentTaskToDelayedList+0x60>)
const TickType_t xConstTickCount = xTickCount;
 80098e8:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098ea:	6830      	ldr	r0, [r6, #0]
{
 80098ec:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098ee:	3004      	adds	r0, #4
 80098f0:	f7ff fab6 	bl	8008e60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80098f4:	1c6b      	adds	r3, r5, #1
 80098f6:	4633      	mov	r3, r6
 80098f8:	d107      	bne.n	800990a <prvAddCurrentTaskToDelayedList+0x2a>
 80098fa:	b137      	cbz	r7, 800990a <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098fc:	6831      	ldr	r1, [r6, #0]
 80098fe:	4811      	ldr	r0, [pc, #68]	; (8009944 <prvAddCurrentTaskToDelayedList+0x64>)
 8009900:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009902:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009906:	f7ff ba83 	b.w	8008e10 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	1964      	adds	r4, r4, r5
 800990e:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8009910:	d307      	bcc.n	8009922 <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009912:	4a0d      	ldr	r2, [pc, #52]	; (8009948 <prvAddCurrentTaskToDelayedList+0x68>)
 8009914:	6810      	ldr	r0, [r2, #0]
 8009916:	6819      	ldr	r1, [r3, #0]
}
 8009918:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800991c:	3104      	adds	r1, #4
 800991e:	f7ff ba85 	b.w	8008e2c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009922:	4a0a      	ldr	r2, [pc, #40]	; (800994c <prvAddCurrentTaskToDelayedList+0x6c>)
 8009924:	6810      	ldr	r0, [r2, #0]
 8009926:	6819      	ldr	r1, [r3, #0]
 8009928:	3104      	adds	r1, #4
 800992a:	f7ff fa7f 	bl	8008e2c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800992e:	4b08      	ldr	r3, [pc, #32]	; (8009950 <prvAddCurrentTaskToDelayedList+0x70>)
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8009934:	bf88      	it	hi
 8009936:	601c      	strhi	r4, [r3, #0]
}
 8009938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800993a:	bf00      	nop
 800993c:	200027a0 	.word	0x200027a0
 8009940:	200022a8 	.word	0x200022a8
 8009944:	20002778 	.word	0x20002778
 8009948:	200022b0 	.word	0x200022b0
 800994c:	200022ac 	.word	0x200022ac
 8009950:	20002758 	.word	0x20002758

08009954 <prvIdleTask>:
{
 8009954:	b580      	push	{r7, lr}
				taskYIELD();
 8009956:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 800995a:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80099e8 <prvIdleTask+0x94>
 800995e:	4e20      	ldr	r6, [pc, #128]	; (80099e0 <prvIdleTask+0x8c>)
 8009960:	4d20      	ldr	r5, [pc, #128]	; (80099e4 <prvIdleTask+0x90>)
 8009962:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80099ec <prvIdleTask+0x98>
 8009966:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80099f0 <prvIdleTask+0x9c>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800996a:	682b      	ldr	r3, [r5, #0]
 800996c:	b343      	cbz	r3, 80099c0 <prvIdleTask+0x6c>
			taskENTER_CRITICAL();
 800996e:	f000 fef1 	bl	800a754 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009972:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009976:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009978:	1d20      	adds	r0, r4, #4
 800997a:	f7ff fa71 	bl	8008e60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800997e:	6833      	ldr	r3, [r6, #0]
 8009980:	3b01      	subs	r3, #1
 8009982:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009984:	682b      	ldr	r3, [r5, #0]
 8009986:	3b01      	subs	r3, #1
 8009988:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 800998a:	f000 ff05 	bl	800a798 <vPortExitCritical>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800998e:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8009992:	b163      	cbz	r3, 80099ae <prvIdleTask+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009994:	2b01      	cmp	r3, #1
 8009996:	d01e      	beq.n	80099d6 <prvIdleTask+0x82>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009998:	2b02      	cmp	r3, #2
 800999a:	d0e6      	beq.n	800996a <prvIdleTask+0x16>
 800999c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a0:	f383 8811 	msr	BASEPRI, r3
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	f3bf 8f4f 	dsb	sy
 80099ac:	e7fe      	b.n	80099ac <prvIdleTask+0x58>
				vPortFree( pxTCB->pxStack );
 80099ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80099b0:	f001 f874 	bl	800aa9c <vPortFree>
				vPortFree( pxTCB );
 80099b4:	4620      	mov	r0, r4
 80099b6:	f001 f871 	bl	800aa9c <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099ba:	682b      	ldr	r3, [r5, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1d6      	bne.n	800996e <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80099c0:	f8d9 3000 	ldr.w	r3, [r9]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d9d0      	bls.n	800996a <prvIdleTask+0x16>
				taskYIELD();
 80099c8:	f8c8 7000 	str.w	r7, [r8]
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	f3bf 8f6f 	isb	sy
 80099d4:	e7c9      	b.n	800996a <prvIdleTask+0x16>
				vPortFree( pxTCB );
 80099d6:	4620      	mov	r0, r4
 80099d8:	f001 f860 	bl	800aa9c <vPortFree>
 80099dc:	e7c5      	b.n	800996a <prvIdleTask+0x16>
 80099de:	bf00      	nop
 80099e0:	20002718 	.word	0x20002718
 80099e4:	2000271c 	.word	0x2000271c
 80099e8:	2000278c 	.word	0x2000278c
 80099ec:	200022b4 	.word	0x200022b4
 80099f0:	e000ed04 	.word	0xe000ed04

080099f4 <xTaskCreateStatic>:
	{
 80099f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099f6:	b087      	sub	sp, #28
 80099f8:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 80099fc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		configASSERT( puxStackBuffer != NULL );
 80099fe:	b1bd      	cbz	r5, 8009a30 <xTaskCreateStatic+0x3c>
		configASSERT( pxTaskBuffer != NULL );
 8009a00:	b16c      	cbz	r4, 8009a1e <xTaskCreateStatic+0x2a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8009a02:	2764      	movs	r7, #100	; 0x64
 8009a04:	9704      	str	r7, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009a06:	9f04      	ldr	r7, [sp, #16]
 8009a08:	2f64      	cmp	r7, #100	; 0x64
 8009a0a:	d01a      	beq.n	8009a42 <xTaskCreateStatic+0x4e>
 8009a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a10:	f383 8811 	msr	BASEPRI, r3
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	e7fe      	b.n	8009a1c <xTaskCreateStatic+0x28>
 8009a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	e7fe      	b.n	8009a2e <xTaskCreateStatic+0x3a>
 8009a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a34:	f383 8811 	msr	BASEPRI, r3
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	e7fe      	b.n	8009a40 <xTaskCreateStatic+0x4c>
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009a42:	2702      	movs	r7, #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009a44:	6325      	str	r5, [r4, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009a46:	ad05      	add	r5, sp, #20
 8009a48:	9402      	str	r4, [sp, #8]
 8009a4a:	9600      	str	r6, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009a4c:	f884 7061 	strb.w	r7, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009a50:	9501      	str	r5, [sp, #4]
 8009a52:	f7ff fef9 	bl	8009848 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a56:	4620      	mov	r0, r4
 8009a58:	f7ff fe6e 	bl	8009738 <prvAddNewTaskToReadyList>
	}
 8009a5c:	9805      	ldr	r0, [sp, #20]
 8009a5e:	b007      	add	sp, #28
 8009a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a62:	bf00      	nop

08009a64 <xTaskCreate>:
	{
 8009a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a68:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8009a6c:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a6e:	4650      	mov	r0, sl
	{
 8009a70:	460d      	mov	r5, r1
 8009a72:	4699      	mov	r9, r3
 8009a74:	9f09      	ldr	r7, [sp, #36]	; 0x24
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a76:	f000 ff7d 	bl	800a974 <pvPortMalloc>
			if( pxStack != NULL )
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	f000 809f 	beq.w	8009bbe <xTaskCreate+0x15a>
 8009a80:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009a82:	2064      	movs	r0, #100	; 0x64
 8009a84:	f000 ff76 	bl	800a974 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009a88:	4604      	mov	r4, r0
 8009a8a:	2800      	cmp	r0, #0
 8009a8c:	f000 8090 	beq.w	8009bb0 <xTaskCreate+0x14c>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009a90:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8009a92:	6306      	str	r6, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009a94:	4652      	mov	r2, sl
 8009a96:	4630      	mov	r0, r6
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009a98:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009a9c:	21a5      	movs	r1, #165	; 0xa5
 8009a9e:	f002 f8e7 	bl	800bc70 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009aa2:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8009aa4:	f1aa 0a04 	sub.w	sl, sl, #4
 8009aa8:	4456      	add	r6, sl
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009aaa:	f026 0607 	bic.w	r6, r6, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8009aae:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009ab0:	782b      	ldrb	r3, [r5, #0]
 8009ab2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8009ab6:	782b      	ldrb	r3, [r5, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d04d      	beq.n	8009b58 <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009abc:	786b      	ldrb	r3, [r5, #1]
 8009abe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 8009ac2:	786b      	ldrb	r3, [r5, #1]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d047      	beq.n	8009b58 <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009ac8:	78ab      	ldrb	r3, [r5, #2]
 8009aca:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 8009ace:	78ab      	ldrb	r3, [r5, #2]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d041      	beq.n	8009b58 <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009ad4:	78eb      	ldrb	r3, [r5, #3]
 8009ad6:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 8009ada:	78eb      	ldrb	r3, [r5, #3]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d03b      	beq.n	8009b58 <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009ae0:	792b      	ldrb	r3, [r5, #4]
 8009ae2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 8009ae6:	792b      	ldrb	r3, [r5, #4]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d035      	beq.n	8009b58 <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009aec:	796b      	ldrb	r3, [r5, #5]
 8009aee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 8009af2:	796b      	ldrb	r3, [r5, #5]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d02f      	beq.n	8009b58 <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009af8:	79ab      	ldrb	r3, [r5, #6]
 8009afa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 8009afe:	79ab      	ldrb	r3, [r5, #6]
 8009b00:	b353      	cbz	r3, 8009b58 <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b02:	79eb      	ldrb	r3, [r5, #7]
 8009b04:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 8009b08:	79eb      	ldrb	r3, [r5, #7]
 8009b0a:	b32b      	cbz	r3, 8009b58 <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b0c:	7a2b      	ldrb	r3, [r5, #8]
 8009b0e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 8009b12:	7a2b      	ldrb	r3, [r5, #8]
 8009b14:	b303      	cbz	r3, 8009b58 <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b16:	7a6b      	ldrb	r3, [r5, #9]
 8009b18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 8009b1c:	7a6b      	ldrb	r3, [r5, #9]
 8009b1e:	b1db      	cbz	r3, 8009b58 <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b20:	7aab      	ldrb	r3, [r5, #10]
 8009b22:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 8009b26:	7aab      	ldrb	r3, [r5, #10]
 8009b28:	b1b3      	cbz	r3, 8009b58 <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b2a:	7aeb      	ldrb	r3, [r5, #11]
 8009b2c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 8009b30:	7aeb      	ldrb	r3, [r5, #11]
 8009b32:	b18b      	cbz	r3, 8009b58 <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b34:	7b2b      	ldrb	r3, [r5, #12]
 8009b36:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 8009b3a:	7b2b      	ldrb	r3, [r5, #12]
 8009b3c:	b163      	cbz	r3, 8009b58 <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b3e:	7b6b      	ldrb	r3, [r5, #13]
 8009b40:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 8009b44:	7b6b      	ldrb	r3, [r5, #13]
 8009b46:	b13b      	cbz	r3, 8009b58 <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b48:	7bab      	ldrb	r3, [r5, #14]
 8009b4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		if( pcName[ x ] == 0x00 )
 8009b4e:	7bab      	ldrb	r3, [r5, #14]
 8009b50:	b113      	cbz	r3, 8009b58 <xTaskCreate+0xf4>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b52:	7beb      	ldrb	r3, [r5, #15]
 8009b54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b58:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b5a:	f04f 0a00 	mov.w	sl, #0
 8009b5e:	2d37      	cmp	r5, #55	; 0x37
 8009b60:	bf28      	it	cs
 8009b62:	2537      	movcs	r5, #55	; 0x37
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b64:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8009b66:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8009b68:	6525      	str	r5, [r4, #80]	; 0x50
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b6a:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8009b6e:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b72:	f7ff f949 	bl	8008e08 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b76:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009b7a:	f104 0018 	add.w	r0, r4, #24
 8009b7e:	f7ff f943 	bl	8008e08 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8009b82:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b86:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009b88:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b8c:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009b90:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009b92:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009b94:	464a      	mov	r2, r9
 8009b96:	4641      	mov	r1, r8
 8009b98:	4630      	mov	r0, r6
 8009b9a:	f000 fdb3 	bl	800a704 <pxPortInitialiseStack>
 8009b9e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8009ba0:	b107      	cbz	r7, 8009ba4 <xTaskCreate+0x140>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009ba2:	603c      	str	r4, [r7, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	f7ff fdc7 	bl	8009738 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009baa:	2001      	movs	r0, #1
	}
 8009bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					vPortFree( pxStack );
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	f000 ff73 	bl	800aa9c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009bb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 8009bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009bbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8009bc2:	e7f3      	b.n	8009bac <xTaskCreate+0x148>

08009bc4 <vTaskStartScheduler>:
{
 8009bc4:	b530      	push	{r4, r5, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009bc6:	2400      	movs	r4, #0
{
 8009bc8:	b08b      	sub	sp, #44	; 0x2c
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009bca:	aa07      	add	r2, sp, #28
 8009bcc:	a906      	add	r1, sp, #24
 8009bce:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009bd0:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009bd4:	f7ff f8f0 	bl	8008db8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009bd8:	e9dd 5305 	ldrd	r5, r3, [sp, #20]
		configASSERT( puxStackBuffer != NULL );
 8009bdc:	b1c3      	cbz	r3, 8009c10 <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
 8009bde:	b175      	cbz	r5, 8009bfe <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8009be0:	2264      	movs	r2, #100	; 0x64
 8009be2:	9208      	str	r2, [sp, #32]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009be4:	9908      	ldr	r1, [sp, #32]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009be6:	9a07      	ldr	r2, [sp, #28]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009be8:	2964      	cmp	r1, #100	; 0x64
 8009bea:	d01a      	beq.n	8009c22 <vTaskStartScheduler+0x5e>
 8009bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf0:	f383 8811 	msr	BASEPRI, r3
 8009bf4:	f3bf 8f6f 	isb	sy
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	e7fe      	b.n	8009bfc <vTaskStartScheduler+0x38>
 8009bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	e7fe      	b.n	8009c0e <vTaskStartScheduler+0x4a>
 8009c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	e7fe      	b.n	8009c20 <vTaskStartScheduler+0x5c>
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009c22:	2002      	movs	r0, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009c24:	a909      	add	r1, sp, #36	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009c26:	632b      	str	r3, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009c28:	f885 0061 	strb.w	r0, [r5, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009c2c:	4623      	mov	r3, r4
 8009c2e:	e9cd 4100 	strd	r4, r1, [sp]
 8009c32:	4818      	ldr	r0, [pc, #96]	; (8009c94 <vTaskStartScheduler+0xd0>)
 8009c34:	4918      	ldr	r1, [pc, #96]	; (8009c98 <vTaskStartScheduler+0xd4>)
 8009c36:	9502      	str	r5, [sp, #8]
 8009c38:	f7ff fe06 	bl	8009848 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	f7ff fd7b 	bl	8009738 <prvAddNewTaskToReadyList>
		return xReturn;
 8009c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
		if( xIdleTaskHandle != NULL )
 8009c44:	b12b      	cbz	r3, 8009c52 <vTaskStartScheduler+0x8e>
			xReturn = xTimerCreateTimerTask();
 8009c46:	f000 fccf 	bl	800a5e8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8009c4a:	2801      	cmp	r0, #1
 8009c4c:	d00c      	beq.n	8009c68 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c4e:	3001      	adds	r0, #1
 8009c50:	d001      	beq.n	8009c56 <vTaskStartScheduler+0x92>
}
 8009c52:	b00b      	add	sp, #44	; 0x2c
 8009c54:	bd30      	pop	{r4, r5, pc}
 8009c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5a:	f383 8811 	msr	BASEPRI, r3
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f3bf 8f4f 	dsb	sy
 8009c66:	e7fe      	b.n	8009c66 <vTaskStartScheduler+0xa2>
 8009c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6c:	f383 8811 	msr	BASEPRI, r3
 8009c70:	f3bf 8f6f 	isb	sy
 8009c74:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c78:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009c7c:	4907      	ldr	r1, [pc, #28]	; (8009c9c <vTaskStartScheduler+0xd8>)
		xSchedulerRunning = pdTRUE;
 8009c7e:	4a08      	ldr	r2, [pc, #32]	; (8009ca0 <vTaskStartScheduler+0xdc>)
		xTickCount = ( TickType_t ) 0U;
 8009c80:	4b08      	ldr	r3, [pc, #32]	; (8009ca4 <vTaskStartScheduler+0xe0>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c82:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8009c84:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 8009c86:	601c      	str	r4, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8009c88:	f7fb fd52 	bl	8005730 <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 8009c8c:	f000 fdee 	bl	800a86c <xPortStartScheduler>
 8009c90:	e7df      	b.n	8009c52 <vTaskStartScheduler+0x8e>
 8009c92:	bf00      	nop
 8009c94:	08009955 	.word	0x08009955
 8009c98:	0800bf58 	.word	0x0800bf58
 8009c9c:	20002758 	.word	0x20002758
 8009ca0:	20002774 	.word	0x20002774
 8009ca4:	200027a0 	.word	0x200027a0

08009ca8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009ca8:	4a02      	ldr	r2, [pc, #8]	; (8009cb4 <vTaskSuspendAll+0xc>)
 8009caa:	6813      	ldr	r3, [r2, #0]
 8009cac:	3301      	adds	r3, #1
 8009cae:	6013      	str	r3, [r2, #0]
}
 8009cb0:	4770      	bx	lr
 8009cb2:	bf00      	nop
 8009cb4:	20002724 	.word	0x20002724

08009cb8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009cb8:	4b01      	ldr	r3, [pc, #4]	; (8009cc0 <xTaskGetTickCount+0x8>)
 8009cba:	6818      	ldr	r0, [r3, #0]
}
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	200027a0 	.word	0x200027a0

08009cc4 <xTaskIncrementTick>:
{
 8009cc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cc8:	4b45      	ldr	r3, [pc, #276]	; (8009de0 <xTaskIncrementTick+0x11c>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	b9cb      	cbnz	r3, 8009d02 <xTaskIncrementTick+0x3e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009cce:	4b45      	ldr	r3, [pc, #276]	; (8009de4 <xTaskIncrementTick+0x120>)
 8009cd0:	681f      	ldr	r7, [r3, #0]
 8009cd2:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 8009cd4:	601f      	str	r7, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009cd6:	b30f      	cbz	r7, 8009d1c <xTaskIncrementTick+0x58>
 8009cd8:	4e43      	ldr	r6, [pc, #268]	; (8009de8 <xTaskIncrementTick+0x124>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009cda:	6833      	ldr	r3, [r6, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8009cdc:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009cde:	42bb      	cmp	r3, r7
 8009ce0:	d92a      	bls.n	8009d38 <xTaskIncrementTick+0x74>
 8009ce2:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8009e04 <xTaskIncrementTick+0x140>
 8009ce6:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8009e08 <xTaskIncrementTick+0x144>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009cea:	f8d9 3000 	ldr.w	r3, [r9]
 8009cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	f858 3003 	ldr.w	r3, [r8, r3]
				xSwitchRequired = pdTRUE;
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	bf28      	it	cs
 8009cfe:	2501      	movcs	r5, #1
 8009d00:	e004      	b.n	8009d0c <xTaskIncrementTick+0x48>
BaseType_t xSwitchRequired = pdFALSE;
 8009d02:	2500      	movs	r5, #0
		++uxPendedTicks;
 8009d04:	4a39      	ldr	r2, [pc, #228]	; (8009dec <xTaskIncrementTick+0x128>)
 8009d06:	6813      	ldr	r3, [r2, #0]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 8009d0c:	4b38      	ldr	r3, [pc, #224]	; (8009df0 <xTaskIncrementTick+0x12c>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8009d10:	2b00      	cmp	r3, #0
}
 8009d12:	bf0c      	ite	eq
 8009d14:	4628      	moveq	r0, r5
 8009d16:	2001      	movne	r0, #1
 8009d18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8009d1c:	4c35      	ldr	r4, [pc, #212]	; (8009df4 <xTaskIncrementTick+0x130>)
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d044      	beq.n	8009db0 <xTaskIncrementTick+0xec>
 8009d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2a:	f383 8811 	msr	BASEPRI, r3
 8009d2e:	f3bf 8f6f 	isb	sy
 8009d32:	f3bf 8f4f 	dsb	sy
 8009d36:	e7fe      	b.n	8009d36 <xTaskIncrementTick+0x72>
 8009d38:	4c2e      	ldr	r4, [pc, #184]	; (8009df4 <xTaskIncrementTick+0x130>)
 8009d3a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8009e04 <xTaskIncrementTick+0x140>
 8009d3e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8009e08 <xTaskIncrementTick+0x144>
 8009d42:	e02b      	b.n	8009d9c <xTaskIncrementTick+0xd8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009d44:	6823      	ldr	r3, [r4, #0]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	f8d3 a00c 	ldr.w	sl, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d4c:	f8da 2004 	ldr.w	r2, [sl, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d50:	f10a 0b04 	add.w	fp, sl, #4
					if( xConstTickCount < xItemValue )
 8009d54:	4297      	cmp	r7, r2
 8009d56:	d329      	bcc.n	8009dac <xTaskIncrementTick+0xe8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d58:	4658      	mov	r0, fp
 8009d5a:	f7ff f881 	bl	8008e60 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d5e:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d62:	f10a 0018 	add.w	r0, sl, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d66:	b10a      	cbz	r2, 8009d6c <xTaskIncrementTick+0xa8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d68:	f7ff f87a 	bl	8008e60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d6c:	4b22      	ldr	r3, [pc, #136]	; (8009df8 <xTaskIncrementTick+0x134>)
 8009d6e:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	bf88      	it	hi
 8009d7c:	4b1e      	ldrhi	r3, [pc, #120]	; (8009df8 <xTaskIncrementTick+0x134>)
 8009d7e:	4659      	mov	r1, fp
 8009d80:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8009d84:	bf88      	it	hi
 8009d86:	601a      	strhi	r2, [r3, #0]
 8009d88:	f7ff f842 	bl	8008e10 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d8c:	f8d9 1000 	ldr.w	r1, [r9]
 8009d90:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 8009d94:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8009d96:	429a      	cmp	r2, r3
 8009d98:	bf28      	it	cs
 8009d9a:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d9c:	6823      	ldr	r3, [r4, #0]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1cf      	bne.n	8009d44 <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009da4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009da8:	6033      	str	r3, [r6, #0]
					break;
 8009daa:	e79e      	b.n	8009cea <xTaskIncrementTick+0x26>
						xNextTaskUnblockTime = xItemValue;
 8009dac:	6032      	str	r2, [r6, #0]
						break;
 8009dae:	e79c      	b.n	8009cea <xTaskIncrementTick+0x26>
			taskSWITCH_DELAYED_LISTS();
 8009db0:	4b12      	ldr	r3, [pc, #72]	; (8009dfc <xTaskIncrementTick+0x138>)
 8009db2:	6821      	ldr	r1, [r4, #0]
 8009db4:	6818      	ldr	r0, [r3, #0]
 8009db6:	4a12      	ldr	r2, [pc, #72]	; (8009e00 <xTaskIncrementTick+0x13c>)
 8009db8:	6020      	str	r0, [r4, #0]
 8009dba:	6019      	str	r1, [r3, #0]
 8009dbc:	6813      	ldr	r3, [r2, #0]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dc2:	6823      	ldr	r3, [r4, #0]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	b923      	cbnz	r3, 8009dd2 <xTaskIncrementTick+0x10e>
		xNextTaskUnblockTime = portMAX_DELAY;
 8009dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dcc:	4e06      	ldr	r6, [pc, #24]	; (8009de8 <xTaskIncrementTick+0x124>)
 8009dce:	6033      	str	r3, [r6, #0]
 8009dd0:	e783      	b.n	8009cda <xTaskIncrementTick+0x16>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009dd2:	6823      	ldr	r3, [r4, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009dd4:	4e04      	ldr	r6, [pc, #16]	; (8009de8 <xTaskIncrementTick+0x124>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009dd6:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	6033      	str	r3, [r6, #0]
 8009dde:	e77c      	b.n	8009cda <xTaskIncrementTick+0x16>
 8009de0:	20002724 	.word	0x20002724
 8009de4:	200027a0 	.word	0x200027a0
 8009de8:	20002758 	.word	0x20002758
 8009dec:	20002720 	.word	0x20002720
 8009df0:	200027a4 	.word	0x200027a4
 8009df4:	200022ac 	.word	0x200022ac
 8009df8:	2000272c 	.word	0x2000272c
 8009dfc:	200022b0 	.word	0x200022b0
 8009e00:	2000275c 	.word	0x2000275c
 8009e04:	200022b4 	.word	0x200022b4
 8009e08:	200022a8 	.word	0x200022a8

08009e0c <xTaskResumeAll>:
{
 8009e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	configASSERT( uxSchedulerSuspended );
 8009e10:	4c36      	ldr	r4, [pc, #216]	; (8009eec <xTaskResumeAll+0xe0>)
 8009e12:	6823      	ldr	r3, [r4, #0]
 8009e14:	b943      	cbnz	r3, 8009e28 <xTaskResumeAll+0x1c>
 8009e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1a:	f383 8811 	msr	BASEPRI, r3
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	e7fe      	b.n	8009e26 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8009e28:	f000 fc94 	bl	800a754 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009e2c:	6823      	ldr	r3, [r4, #0]
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e32:	6824      	ldr	r4, [r4, #0]
 8009e34:	bb5c      	cbnz	r4, 8009e8e <xTaskResumeAll+0x82>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009e36:	4b2e      	ldr	r3, [pc, #184]	; (8009ef0 <xTaskResumeAll+0xe4>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	b343      	cbz	r3, 8009e8e <xTaskResumeAll+0x82>
 8009e3c:	4e2d      	ldr	r6, [pc, #180]	; (8009ef4 <xTaskResumeAll+0xe8>)
 8009e3e:	4f2e      	ldr	r7, [pc, #184]	; (8009ef8 <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 8009e40:	4d2e      	ldr	r5, [pc, #184]	; (8009efc <xTaskResumeAll+0xf0>)
 8009e42:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8009f10 <xTaskResumeAll+0x104>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e46:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8009f14 <xTaskResumeAll+0x108>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	b32b      	cbz	r3, 8009e9a <xTaskResumeAll+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e52:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e56:	f104 0018 	add.w	r0, r4, #24
 8009e5a:	f7ff f801 	bl	8008e60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e5e:	4640      	mov	r0, r8
 8009e60:	f7fe fffe 	bl	8008e60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009e66:	682a      	ldr	r2, [r5, #0]
 8009e68:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	4641      	mov	r1, r8
 8009e70:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8009e74:	bf88      	it	hi
 8009e76:	602b      	strhi	r3, [r5, #0]
 8009e78:	f7fe ffca 	bl	8008e10 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e7c:	f8d9 3000 	ldr.w	r3, [r9]
 8009e80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d3e0      	bcc.n	8009e4a <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	6033      	str	r3, [r6, #0]
 8009e8c:	e7dd      	b.n	8009e4a <xTaskResumeAll+0x3e>
BaseType_t xAlreadyYielded = pdFALSE;
 8009e8e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009e90:	f000 fc82 	bl	800a798 <vPortExitCritical>
}
 8009e94:	4620      	mov	r0, r4
 8009e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if( pxTCB != NULL )
 8009e9a:	b13c      	cbz	r4, 8009eac <xTaskResumeAll+0xa0>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e9c:	4b18      	ldr	r3, [pc, #96]	; (8009f00 <xTaskResumeAll+0xf4>)
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	6812      	ldr	r2, [r2, #0]
 8009ea2:	b9da      	cbnz	r2, 8009edc <xTaskResumeAll+0xd0>
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ea8:	4b16      	ldr	r3, [pc, #88]	; (8009f04 <xTaskResumeAll+0xf8>)
 8009eaa:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009eac:	4d16      	ldr	r5, [pc, #88]	; (8009f08 <xTaskResumeAll+0xfc>)
 8009eae:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009eb0:	b13c      	cbz	r4, 8009ec2 <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
 8009eb2:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8009eb4:	f7ff ff06 	bl	8009cc4 <xTaskIncrementTick>
 8009eb8:	b100      	cbz	r0, 8009ebc <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8009eba:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009ebc:	3c01      	subs	r4, #1
 8009ebe:	d1f9      	bne.n	8009eb4 <xTaskResumeAll+0xa8>
						uxPendedTicks = 0;
 8009ec0:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8009ec2:	6833      	ldr	r3, [r6, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d0e2      	beq.n	8009e8e <xTaskResumeAll+0x82>
					taskYIELD_IF_USING_PREEMPTION();
 8009ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ecc:	4b0f      	ldr	r3, [pc, #60]	; (8009f0c <xTaskResumeAll+0x100>)
 8009ece:	601a      	str	r2, [r3, #0]
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009ed8:	2401      	movs	r4, #1
 8009eda:	e7d9      	b.n	8009e90 <xTaskResumeAll+0x84>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009edc:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ede:	4b09      	ldr	r3, [pc, #36]	; (8009f04 <xTaskResumeAll+0xf8>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009ee0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ee2:	68d2      	ldr	r2, [r2, #12]
 8009ee4:	6852      	ldr	r2, [r2, #4]
 8009ee6:	601a      	str	r2, [r3, #0]
 8009ee8:	e7e0      	b.n	8009eac <xTaskResumeAll+0xa0>
 8009eea:	bf00      	nop
 8009eec:	20002724 	.word	0x20002724
 8009ef0:	20002718 	.word	0x20002718
 8009ef4:	200027a4 	.word	0x200027a4
 8009ef8:	20002760 	.word	0x20002760
 8009efc:	2000272c 	.word	0x2000272c
 8009f00:	200022ac 	.word	0x200022ac
 8009f04:	20002758 	.word	0x20002758
 8009f08:	20002720 	.word	0x20002720
 8009f0c:	e000ed04 	.word	0xe000ed04
 8009f10:	200022b4 	.word	0x200022b4
 8009f14:	200022a8 	.word	0x200022a8

08009f18 <vTaskDelay>:
	{
 8009f18:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009f1a:	b198      	cbz	r0, 8009f44 <vTaskDelay+0x2c>
			configASSERT( uxSchedulerSuspended == 0 );
 8009f1c:	4b0e      	ldr	r3, [pc, #56]	; (8009f58 <vTaskDelay+0x40>)
 8009f1e:	6819      	ldr	r1, [r3, #0]
 8009f20:	b141      	cbz	r1, 8009f34 <vTaskDelay+0x1c>
 8009f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f26:	f383 8811 	msr	BASEPRI, r3
 8009f2a:	f3bf 8f6f 	isb	sy
 8009f2e:	f3bf 8f4f 	dsb	sy
 8009f32:	e7fe      	b.n	8009f32 <vTaskDelay+0x1a>
	++uxSchedulerSuspended;
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	3201      	adds	r2, #1
 8009f38:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009f3a:	f7ff fcd1 	bl	80098e0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8009f3e:	f7ff ff65 	bl	8009e0c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009f42:	b938      	cbnz	r0, 8009f54 <vTaskDelay+0x3c>
			portYIELD_WITHIN_API();
 8009f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f48:	4b04      	ldr	r3, [pc, #16]	; (8009f5c <vTaskDelay+0x44>)
 8009f4a:	601a      	str	r2, [r3, #0]
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	f3bf 8f6f 	isb	sy
	}
 8009f54:	bd08      	pop	{r3, pc}
 8009f56:	bf00      	nop
 8009f58:	20002724 	.word	0x20002724
 8009f5c:	e000ed04 	.word	0xe000ed04

08009f60 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f60:	4b21      	ldr	r3, [pc, #132]	; (8009fe8 <vTaskSwitchContext+0x88>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	b11b      	cbz	r3, 8009f6e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8009f66:	2201      	movs	r2, #1
 8009f68:	4b20      	ldr	r3, [pc, #128]	; (8009fec <vTaskSwitchContext+0x8c>)
 8009f6a:	601a      	str	r2, [r3, #0]
 8009f6c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8009f6e:	4a1f      	ldr	r2, [pc, #124]	; (8009fec <vTaskSwitchContext+0x8c>)
{
 8009f70:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
 8009f72:	6013      	str	r3, [r2, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009f74:	f7fb fbde 	bl	8005734 <getRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009f78:	491d      	ldr	r1, [pc, #116]	; (8009ff0 <vTaskSwitchContext+0x90>)
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009f7a:	4d1e      	ldr	r5, [pc, #120]	; (8009ff4 <vTaskSwitchContext+0x94>)
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009f7c:	680c      	ldr	r4, [r1, #0]
 8009f7e:	42a0      	cmp	r0, r4
 8009f80:	d904      	bls.n	8009f8c <vTaskSwitchContext+0x2c>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009f82:	682a      	ldr	r2, [r5, #0]
 8009f84:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009f86:	1b1b      	subs	r3, r3, r4
 8009f88:	4403      	add	r3, r0
 8009f8a:	6593      	str	r3, [r2, #88]	; 0x58
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009f8c:	4e1a      	ldr	r6, [pc, #104]	; (8009ff8 <vTaskSwitchContext+0x98>)
 8009f8e:	4c1b      	ldr	r4, [pc, #108]	; (8009ffc <vTaskSwitchContext+0x9c>)
 8009f90:	6832      	ldr	r2, [r6, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
 8009f92:	6008      	str	r0, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009f94:	0093      	lsls	r3, r2, #2
 8009f96:	1899      	adds	r1, r3, r2
 8009f98:	0089      	lsls	r1, r1, #2
 8009f9a:	5861      	ldr	r1, [r4, r1]
 8009f9c:	b939      	cbnz	r1, 8009fae <vTaskSwitchContext+0x4e>
 8009f9e:	b1a2      	cbz	r2, 8009fca <vTaskSwitchContext+0x6a>
 8009fa0:	3a01      	subs	r2, #1
 8009fa2:	0093      	lsls	r3, r2, #2
 8009fa4:	1899      	adds	r1, r3, r2
 8009fa6:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8009faa:	2900      	cmp	r1, #0
 8009fac:	d0f7      	beq.n	8009f9e <vTaskSwitchContext+0x3e>
 8009fae:	4413      	add	r3, r2
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	18e0      	adds	r0, r4, r3
 8009fb4:	6841      	ldr	r1, [r0, #4]
 8009fb6:	3308      	adds	r3, #8
 8009fb8:	6849      	ldr	r1, [r1, #4]
 8009fba:	4423      	add	r3, r4
 8009fbc:	4299      	cmp	r1, r3
 8009fbe:	6041      	str	r1, [r0, #4]
 8009fc0:	d00c      	beq.n	8009fdc <vTaskSwitchContext+0x7c>
 8009fc2:	68cb      	ldr	r3, [r1, #12]
 8009fc4:	602b      	str	r3, [r5, #0]
 8009fc6:	6032      	str	r2, [r6, #0]
}
 8009fc8:	bd70      	pop	{r4, r5, r6, pc}
 8009fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fce:	f383 8811 	msr	BASEPRI, r3
 8009fd2:	f3bf 8f6f 	isb	sy
 8009fd6:	f3bf 8f4f 	dsb	sy
 8009fda:	e7fe      	b.n	8009fda <vTaskSwitchContext+0x7a>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009fdc:	2314      	movs	r3, #20
 8009fde:	fb03 4402 	mla	r4, r3, r2, r4
 8009fe2:	6849      	ldr	r1, [r1, #4]
 8009fe4:	6061      	str	r1, [r4, #4]
 8009fe6:	e7ec      	b.n	8009fc2 <vTaskSwitchContext+0x62>
 8009fe8:	20002724 	.word	0x20002724
 8009fec:	200027a4 	.word	0x200027a4
 8009ff0:	20002714 	.word	0x20002714
 8009ff4:	200022a8 	.word	0x200022a8
 8009ff8:	2000272c 	.word	0x2000272c
 8009ffc:	200022b4 	.word	0x200022b4

0800a000 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800a000:	b940      	cbnz	r0, 800a014 <vTaskPlaceOnEventList+0x14>
 800a002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	e7fe      	b.n	800a012 <vTaskPlaceOnEventList+0x12>
{
 800a014:	b570      	push	{r4, r5, r6, lr}
 800a016:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a018:	4d15      	ldr	r5, [pc, #84]	; (800a070 <vTaskPlaceOnEventList+0x70>)
 800a01a:	6829      	ldr	r1, [r5, #0]
 800a01c:	3118      	adds	r1, #24
 800a01e:	f7fe ff05 	bl	8008e2c <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 800a022:	4b14      	ldr	r3, [pc, #80]	; (800a074 <vTaskPlaceOnEventList+0x74>)
 800a024:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a026:	6828      	ldr	r0, [r5, #0]
 800a028:	3004      	adds	r0, #4
 800a02a:	f7fe ff19 	bl	8008e60 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a02e:	1c63      	adds	r3, r4, #1
 800a030:	d00f      	beq.n	800a052 <vTaskPlaceOnEventList+0x52>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a032:	682b      	ldr	r3, [r5, #0]
 800a034:	19a4      	adds	r4, r4, r6
 800a036:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a038:	d212      	bcs.n	800a060 <vTaskPlaceOnEventList+0x60>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a03a:	4b0f      	ldr	r3, [pc, #60]	; (800a078 <vTaskPlaceOnEventList+0x78>)
 800a03c:	6818      	ldr	r0, [r3, #0]
 800a03e:	6829      	ldr	r1, [r5, #0]
 800a040:	3104      	adds	r1, #4
 800a042:	f7fe fef3 	bl	8008e2c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a046:	4b0d      	ldr	r3, [pc, #52]	; (800a07c <vTaskPlaceOnEventList+0x7c>)
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800a04c:	bf38      	it	cc
 800a04e:	601c      	strcc	r4, [r3, #0]
}
 800a050:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a052:	6829      	ldr	r1, [r5, #0]
 800a054:	480a      	ldr	r0, [pc, #40]	; (800a080 <vTaskPlaceOnEventList+0x80>)
 800a056:	3104      	adds	r1, #4
}
 800a058:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a05c:	f7fe bed8 	b.w	8008e10 <vListInsertEnd>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a060:	4b08      	ldr	r3, [pc, #32]	; (800a084 <vTaskPlaceOnEventList+0x84>)
 800a062:	6818      	ldr	r0, [r3, #0]
 800a064:	6829      	ldr	r1, [r5, #0]
}
 800a066:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a06a:	3104      	adds	r1, #4
 800a06c:	f7fe bede 	b.w	8008e2c <vListInsert>
 800a070:	200022a8 	.word	0x200022a8
 800a074:	200027a0 	.word	0x200027a0
 800a078:	200022ac 	.word	0x200022ac
 800a07c:	20002758 	.word	0x20002758
 800a080:	20002778 	.word	0x20002778
 800a084:	200022b0 	.word	0x200022b0

0800a088 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
 800a088:	b1a8      	cbz	r0, 800a0b6 <vTaskPlaceOnEventListRestricted+0x2e>
	{
 800a08a:	b570      	push	{r4, r5, r6, lr}
 800a08c:	4616      	mov	r6, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a08e:	4d1d      	ldr	r5, [pc, #116]	; (800a104 <vTaskPlaceOnEventListRestricted+0x7c>)
 800a090:	460c      	mov	r4, r1
 800a092:	6829      	ldr	r1, [r5, #0]
 800a094:	3118      	adds	r1, #24
 800a096:	f7fe febb 	bl	8008e10 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 800a09a:	4b1b      	ldr	r3, [pc, #108]	; (800a108 <vTaskPlaceOnEventListRestricted+0x80>)
		if( xWaitIndefinitely != pdFALSE )
 800a09c:	b1a6      	cbz	r6, 800a0c8 <vTaskPlaceOnEventListRestricted+0x40>
const TickType_t xConstTickCount = xTickCount;
 800a09e:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0a0:	6828      	ldr	r0, [r5, #0]
 800a0a2:	3004      	adds	r0, #4
 800a0a4:	f7fe fedc 	bl	8008e60 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0a8:	6829      	ldr	r1, [r5, #0]
 800a0aa:	4818      	ldr	r0, [pc, #96]	; (800a10c <vTaskPlaceOnEventListRestricted+0x84>)
 800a0ac:	3104      	adds	r1, #4
	}
 800a0ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0b2:	f7fe bead 	b.w	8008e10 <vListInsertEnd>
 800a0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ba:	f383 8811 	msr	BASEPRI, r3
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f3bf 8f4f 	dsb	sy
 800a0c6:	e7fe      	b.n	800a0c6 <vTaskPlaceOnEventListRestricted+0x3e>
const TickType_t xConstTickCount = xTickCount;
 800a0c8:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0ca:	6828      	ldr	r0, [r5, #0]
 800a0cc:	3004      	adds	r0, #4
 800a0ce:	f7fe fec7 	bl	8008e60 <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a0d2:	682b      	ldr	r3, [r5, #0]
 800a0d4:	19a4      	adds	r4, r4, r6
 800a0d6:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a0d8:	d20b      	bcs.n	800a0f2 <vTaskPlaceOnEventListRestricted+0x6a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0da:	4b0d      	ldr	r3, [pc, #52]	; (800a110 <vTaskPlaceOnEventListRestricted+0x88>)
 800a0dc:	6818      	ldr	r0, [r3, #0]
 800a0de:	6829      	ldr	r1, [r5, #0]
 800a0e0:	3104      	adds	r1, #4
 800a0e2:	f7fe fea3 	bl	8008e2c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a0e6:	4b0b      	ldr	r3, [pc, #44]	; (800a114 <vTaskPlaceOnEventListRestricted+0x8c>)
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800a0ec:	bf38      	it	cc
 800a0ee:	601c      	strcc	r4, [r3, #0]
	}
 800a0f0:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0f2:	4b09      	ldr	r3, [pc, #36]	; (800a118 <vTaskPlaceOnEventListRestricted+0x90>)
 800a0f4:	6818      	ldr	r0, [r3, #0]
 800a0f6:	6829      	ldr	r1, [r5, #0]
	}
 800a0f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0fc:	3104      	adds	r1, #4
 800a0fe:	f7fe be95 	b.w	8008e2c <vListInsert>
 800a102:	bf00      	nop
 800a104:	200022a8 	.word	0x200022a8
 800a108:	200027a0 	.word	0x200027a0
 800a10c:	20002778 	.word	0x20002778
 800a110:	200022ac 	.word	0x200022ac
 800a114:	20002758 	.word	0x20002758
 800a118:	200022b0 	.word	0x200022b0

0800a11c <xTaskRemoveFromEventList>:
{
 800a11c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a11e:	68c3      	ldr	r3, [r0, #12]
 800a120:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800a122:	b34c      	cbz	r4, 800a178 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a124:	f104 0518 	add.w	r5, r4, #24
 800a128:	4628      	mov	r0, r5
 800a12a:	f7fe fe99 	bl	8008e60 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a12e:	4b18      	ldr	r3, [pc, #96]	; (800a190 <xTaskRemoveFromEventList+0x74>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	b9e3      	cbnz	r3, 800a16e <xTaskRemoveFromEventList+0x52>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a134:	1d25      	adds	r5, r4, #4
 800a136:	4628      	mov	r0, r5
 800a138:	f7fe fe92 	bl	8008e60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a13c:	4a15      	ldr	r2, [pc, #84]	; (800a194 <xTaskRemoveFromEventList+0x78>)
 800a13e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a140:	6811      	ldr	r1, [r2, #0]
 800a142:	4815      	ldr	r0, [pc, #84]	; (800a198 <xTaskRemoveFromEventList+0x7c>)
 800a144:	428b      	cmp	r3, r1
 800a146:	bf88      	it	hi
 800a148:	6013      	strhi	r3, [r2, #0]
 800a14a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a14e:	4629      	mov	r1, r5
 800a150:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800a154:	f7fe fe5c 	bl	8008e10 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a158:	4b10      	ldr	r3, [pc, #64]	; (800a19c <xTaskRemoveFromEventList+0x80>)
 800a15a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a160:	429a      	cmp	r2, r3
 800a162:	d912      	bls.n	800a18a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800a164:	2301      	movs	r3, #1
 800a166:	4a0e      	ldr	r2, [pc, #56]	; (800a1a0 <xTaskRemoveFromEventList+0x84>)
		xReturn = pdTRUE;
 800a168:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 800a16a:	6013      	str	r3, [r2, #0]
}
 800a16c:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a16e:	4629      	mov	r1, r5
 800a170:	480c      	ldr	r0, [pc, #48]	; (800a1a4 <xTaskRemoveFromEventList+0x88>)
 800a172:	f7fe fe4d 	bl	8008e10 <vListInsertEnd>
 800a176:	e7ef      	b.n	800a158 <xTaskRemoveFromEventList+0x3c>
 800a178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17c:	f383 8811 	msr	BASEPRI, r3
 800a180:	f3bf 8f6f 	isb	sy
 800a184:	f3bf 8f4f 	dsb	sy
 800a188:	e7fe      	b.n	800a188 <xTaskRemoveFromEventList+0x6c>
		xReturn = pdFALSE;
 800a18a:	2000      	movs	r0, #0
}
 800a18c:	bd38      	pop	{r3, r4, r5, pc}
 800a18e:	bf00      	nop
 800a190:	20002724 	.word	0x20002724
 800a194:	2000272c 	.word	0x2000272c
 800a198:	200022b4 	.word	0x200022b4
 800a19c:	200022a8 	.word	0x200022a8
 800a1a0:	200027a4 	.word	0x200027a4
 800a1a4:	20002760 	.word	0x20002760

0800a1a8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a1a8:	4a03      	ldr	r2, [pc, #12]	; (800a1b8 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a1aa:	4b04      	ldr	r3, [pc, #16]	; (800a1bc <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a1ac:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	e9c0 2300 	strd	r2, r3, [r0]
}
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	2000275c 	.word	0x2000275c
 800a1bc:	200027a0 	.word	0x200027a0

0800a1c0 <xTaskCheckForTimeOut>:
{
 800a1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800a1c2:	b340      	cbz	r0, 800a216 <xTaskCheckForTimeOut+0x56>
	configASSERT( pxTicksToWait );
 800a1c4:	b1f1      	cbz	r1, 800a204 <xTaskCheckForTimeOut+0x44>
 800a1c6:	460d      	mov	r5, r1
 800a1c8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800a1ca:	f000 fac3 	bl	800a754 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800a1ce:	f8df c078 	ldr.w	ip, [pc, #120]	; 800a248 <xTaskCheckForTimeOut+0x88>
			if( *pxTicksToWait == portMAX_DELAY )
 800a1d2:	682b      	ldr	r3, [r5, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a1d4:	6867      	ldr	r7, [r4, #4]
		const TickType_t xConstTickCount = xTickCount;
 800a1d6:	f8dc 6000 	ldr.w	r6, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 800a1da:	1c59      	adds	r1, r3, #1
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a1dc:	eba6 0207 	sub.w	r2, r6, r7
			if( *pxTicksToWait == portMAX_DELAY )
 800a1e0:	d022      	beq.n	800a228 <xTaskCheckForTimeOut+0x68>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1e2:	4818      	ldr	r0, [pc, #96]	; (800a244 <xTaskCheckForTimeOut+0x84>)
 800a1e4:	6821      	ldr	r1, [r4, #0]
 800a1e6:	f8d0 e000 	ldr.w	lr, [r0]
 800a1ea:	4571      	cmp	r1, lr
 800a1ec:	d001      	beq.n	800a1f2 <xTaskCheckForTimeOut+0x32>
 800a1ee:	42b7      	cmp	r7, r6
 800a1f0:	d925      	bls.n	800a23e <xTaskCheckForTimeOut+0x7e>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d81a      	bhi.n	800a22c <xTaskCheckForTimeOut+0x6c>
			*pxTicksToWait = 0;
 800a1f6:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 800a1f8:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 800a1fa:	602b      	str	r3, [r5, #0]
	taskEXIT_CRITICAL();
 800a1fc:	f000 facc 	bl	800a798 <vPortExitCritical>
}
 800a200:	4630      	mov	r0, r6
 800a202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a208:	f383 8811 	msr	BASEPRI, r3
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	f3bf 8f4f 	dsb	sy
 800a214:	e7fe      	b.n	800a214 <xTaskCheckForTimeOut+0x54>
 800a216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21a:	f383 8811 	msr	BASEPRI, r3
 800a21e:	f3bf 8f6f 	isb	sy
 800a222:	f3bf 8f4f 	dsb	sy
 800a226:	e7fe      	b.n	800a226 <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
 800a228:	2600      	movs	r6, #0
 800a22a:	e7e7      	b.n	800a1fc <xTaskCheckForTimeOut+0x3c>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a22c:	6800      	ldr	r0, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a22e:	f8dc 1000 	ldr.w	r1, [ip]
			*pxTicksToWait -= xElapsedTime;
 800a232:	1a9b      	subs	r3, r3, r2
 800a234:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
 800a236:	2600      	movs	r6, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a238:	e9c4 0100 	strd	r0, r1, [r4]
 800a23c:	e7de      	b.n	800a1fc <xTaskCheckForTimeOut+0x3c>
			xReturn = pdTRUE;
 800a23e:	2601      	movs	r6, #1
 800a240:	e7dc      	b.n	800a1fc <xTaskCheckForTimeOut+0x3c>
 800a242:	bf00      	nop
 800a244:	2000275c 	.word	0x2000275c
 800a248:	200027a0 	.word	0x200027a0

0800a24c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800a24c:	2201      	movs	r2, #1
 800a24e:	4b01      	ldr	r3, [pc, #4]	; (800a254 <vTaskMissedYield+0x8>)
 800a250:	601a      	str	r2, [r3, #0]
}
 800a252:	4770      	bx	lr
 800a254:	200027a4 	.word	0x200027a4

0800a258 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800a258:	4b05      	ldr	r3, [pc, #20]	; (800a270 <xTaskGetSchedulerState+0x18>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	b133      	cbz	r3, 800a26c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a25e:	4b05      	ldr	r3, [pc, #20]	; (800a274 <xTaskGetSchedulerState+0x1c>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800a264:	bf0c      	ite	eq
 800a266:	2002      	moveq	r0, #2
 800a268:	2000      	movne	r0, #0
 800a26a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a26c:	2001      	movs	r0, #1
	}
 800a26e:	4770      	bx	lr
 800a270:	20002774 	.word	0x20002774
 800a274:	20002724 	.word	0x20002724

0800a278 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800a278:	b168      	cbz	r0, 800a296 <xTaskPriorityDisinherit+0x1e>
	{
 800a27a:	b538      	push	{r3, r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 800a27c:	4b1c      	ldr	r3, [pc, #112]	; (800a2f0 <xTaskPriorityDisinherit+0x78>)
 800a27e:	681c      	ldr	r4, [r3, #0]
 800a280:	4284      	cmp	r4, r0
 800a282:	d00a      	beq.n	800a29a <xTaskPriorityDisinherit+0x22>
 800a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	e7fe      	b.n	800a294 <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 800a296:	2000      	movs	r0, #0
	}
 800a298:	4770      	bx	lr
			configASSERT( pxTCB->uxMutexesHeld );
 800a29a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a29c:	b943      	cbnz	r3, 800a2b0 <xTaskPriorityDisinherit+0x38>
 800a29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a2:	f383 8811 	msr	BASEPRI, r3
 800a2a6:	f3bf 8f6f 	isb	sy
 800a2aa:	f3bf 8f4f 	dsb	sy
 800a2ae:	e7fe      	b.n	800a2ae <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2b0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a2b2:	6d22      	ldr	r2, [r4, #80]	; 0x50
			( pxTCB->uxMutexesHeld )--;
 800a2b4:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2b6:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800a2b8:	6563      	str	r3, [r4, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2ba:	d000      	beq.n	800a2be <xTaskPriorityDisinherit+0x46>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a2bc:	b10b      	cbz	r3, 800a2c2 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800a2be:	2000      	movs	r0, #0
	}
 800a2c0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2c2:	1d25      	adds	r5, r4, #4
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	f7fe fdcb 	bl	8008e60 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a2ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
					prvAddTaskToReadyList( pxTCB );
 800a2cc:	4a09      	ldr	r2, [pc, #36]	; (800a2f4 <xTaskPriorityDisinherit+0x7c>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2ce:	f1c3 0038 	rsb	r0, r3, #56	; 0x38
 800a2d2:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800a2d4:	2014      	movs	r0, #20
 800a2d6:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a2d8:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800a2da:	428b      	cmp	r3, r1
 800a2dc:	bf88      	it	hi
 800a2de:	6013      	strhi	r3, [r2, #0]
 800a2e0:	4a05      	ldr	r2, [pc, #20]	; (800a2f8 <xTaskPriorityDisinherit+0x80>)
 800a2e2:	4629      	mov	r1, r5
 800a2e4:	fb00 2003 	mla	r0, r0, r3, r2
 800a2e8:	f7fe fd92 	bl	8008e10 <vListInsertEnd>
					xReturn = pdTRUE;
 800a2ec:	2001      	movs	r0, #1
	}
 800a2ee:	bd38      	pop	{r3, r4, r5, pc}
 800a2f0:	200022a8 	.word	0x200022a8
 800a2f4:	2000272c 	.word	0x2000272c
 800a2f8:	200022b4 	.word	0x200022b4

0800a2fc <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a2fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a300:	4e20      	ldr	r6, [pc, #128]	; (800a384 <prvSwitchTimerLists+0x88>)
 800a302:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 800a304:	4f20      	ldr	r7, [pc, #128]	; (800a388 <prvSwitchTimerLists+0x8c>)
		xMessage.xMessageID = xCommandID;
 800a306:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a30a:	e00d      	b.n	800a328 <prvSwitchTimerLists+0x2c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a30c:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a30e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a310:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a314:	1d25      	adds	r5, r4, #4
 800a316:	4628      	mov	r0, r5
 800a318:	f7fe fda2 	bl	8008e60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a31c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a31e:	4620      	mov	r0, r4
 800a320:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a322:	69e3      	ldr	r3, [r4, #28]
 800a324:	2b01      	cmp	r3, #1
 800a326:	d00a      	beq.n	800a33e <prvSwitchTimerLists+0x42>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a328:	6833      	ldr	r3, [r6, #0]
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	2a00      	cmp	r2, #0
 800a32e:	d1ed      	bne.n	800a30c <prvSwitchTimerLists+0x10>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 800a330:	4a16      	ldr	r2, [pc, #88]	; (800a38c <prvSwitchTimerLists+0x90>)
 800a332:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a334:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800a336:	6031      	str	r1, [r6, #0]
}
 800a338:	b005      	add	sp, #20
 800a33a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a33e:	69a3      	ldr	r3, [r4, #24]
 800a340:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800a342:	4599      	cmp	r9, r3
 800a344:	d317      	bcc.n	800a376 <prvSwitchTimerLists+0x7a>
	if( xTimerQueue != NULL )
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	b163      	cbz	r3, 800a364 <prvSwitchTimerLists+0x68>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a34a:	e9cd 8900 	strd	r8, r9, [sp]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a34e:	9402      	str	r4, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a350:	f7ff ff82 	bl	800a258 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a354:	2300      	movs	r3, #0
 800a356:	4669      	mov	r1, sp
 800a358:	461a      	mov	r2, r3
 800a35a:	6838      	ldr	r0, [r7, #0]
 800a35c:	f7fe fe2c 	bl	8008fb8 <xQueueGenericSend>
				configASSERT( xResult );
 800a360:	2800      	cmp	r0, #0
 800a362:	d1e1      	bne.n	800a328 <prvSwitchTimerLists+0x2c>
 800a364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a368:	f383 8811 	msr	BASEPRI, r3
 800a36c:	f3bf 8f6f 	isb	sy
 800a370:	f3bf 8f4f 	dsb	sy
 800a374:	e7fe      	b.n	800a374 <prvSwitchTimerLists+0x78>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a376:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a378:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a37a:	4629      	mov	r1, r5
 800a37c:	6830      	ldr	r0, [r6, #0]
 800a37e:	f7fe fd55 	bl	8008e2c <vListInsert>
 800a382:	e7d1      	b.n	800a328 <prvSwitchTimerLists+0x2c>
 800a384:	200027a8 	.word	0x200027a8
 800a388:	200028cc 	.word	0x200028cc
 800a38c:	200027ac 	.word	0x200027ac

0800a390 <prvTimerTask>:
{
 800a390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a394:	f04f 0a01 	mov.w	sl, #1
 800a398:	4f8e      	ldr	r7, [pc, #568]	; (800a5d4 <prvTimerTask+0x244>)
 800a39a:	4e8f      	ldr	r6, [pc, #572]	; (800a5d8 <prvTimerTask+0x248>)
 800a39c:	f8df 9244 	ldr.w	r9, [pc, #580]	; 800a5e4 <prvTimerTask+0x254>
 800a3a0:	4d8e      	ldr	r5, [pc, #568]	; (800a5dc <prvTimerTask+0x24c>)
 800a3a2:	b08b      	sub	sp, #44	; 0x2c
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	681c      	ldr	r4, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a3a8:	2c00      	cmp	r4, #0
 800a3aa:	d052      	beq.n	800a452 <prvTimerTask+0xc2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 800a3b0:	f7ff fc7a 	bl	8009ca8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800a3b4:	f7ff fc80 	bl	8009cb8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800a3b8:	6832      	ldr	r2, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 800a3ba:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 800a3bc:	4290      	cmp	r0, r2
 800a3be:	d359      	bcc.n	800a474 <prvTimerTask+0xe4>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a3c0:	4284      	cmp	r4, r0
	xLastTime = xTimeNow;
 800a3c2:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a3c4:	d973      	bls.n	800a4ae <prvTimerTask+0x11e>
 800a3c6:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a3c8:	eba4 010b 	sub.w	r1, r4, fp
 800a3cc:	6828      	ldr	r0, [r5, #0]
 800a3ce:	f7ff f94d 	bl	800966c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a3d2:	f7ff fd1b 	bl	8009e0c <xTaskResumeAll>
 800a3d6:	b938      	cbnz	r0, 800a3e8 <prvTimerTask+0x58>
					portYIELD_WITHIN_API();
 800a3d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a3dc:	4a80      	ldr	r2, [pc, #512]	; (800a5e0 <prvTimerTask+0x250>)
 800a3de:	6013      	str	r3, [r2, #0]
 800a3e0:	f3bf 8f4f 	dsb	sy
 800a3e4:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3e8:	f04f 0800 	mov.w	r8, #0
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	a902      	add	r1, sp, #8
 800a3f0:	6828      	ldr	r0, [r5, #0]
 800a3f2:	f7fe ffad 	bl	8009350 <xQueueReceive>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	d0d4      	beq.n	800a3a4 <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a3fa:	9b02      	ldr	r3, [sp, #8]
 800a3fc:	9c04      	ldr	r4, [sp, #16]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	da07      	bge.n	800a412 <prvTimerTask+0x82>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a402:	9b03      	ldr	r3, [sp, #12]
 800a404:	4620      	mov	r0, r4
 800a406:	9905      	ldr	r1, [sp, #20]
 800a408:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a40a:	9b02      	ldr	r3, [sp, #8]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	dbed      	blt.n	800a3ec <prvTimerTask+0x5c>
 800a410:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a412:	6963      	ldr	r3, [r4, #20]
 800a414:	b113      	cbz	r3, 800a41c <prvTimerTask+0x8c>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a416:	1d20      	adds	r0, r4, #4
 800a418:	f7fe fd22 	bl	8008e60 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800a41c:	f7ff fc4c 	bl	8009cb8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800a420:	6833      	ldr	r3, [r6, #0]
 800a422:	4298      	cmp	r0, r3
 800a424:	d32d      	bcc.n	800a482 <prvTimerTask+0xf2>
 800a426:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 800a428:	6030      	str	r0, [r6, #0]
 800a42a:	2b09      	cmp	r3, #9
 800a42c:	d8de      	bhi.n	800a3ec <prvTimerTask+0x5c>
 800a42e:	fa0a f303 	lsl.w	r3, sl, r3
 800a432:	f413 7f04 	tst.w	r3, #528	; 0x210
 800a436:	d129      	bne.n	800a48c <prvTimerTask+0xfc>
 800a438:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 800a43c:	d14d      	bne.n	800a4da <prvTimerTask+0x14a>
 800a43e:	069b      	lsls	r3, r3, #26
 800a440:	d5d4      	bpl.n	800a3ec <prvTimerTask+0x5c>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a442:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1d0      	bne.n	800a3ec <prvTimerTask+0x5c>
							vPortFree( pxTimer );
 800a44a:	4620      	mov	r0, r4
 800a44c:	f000 fb26 	bl	800aa9c <vPortFree>
 800a450:	e7cc      	b.n	800a3ec <prvTimerTask+0x5c>
	vTaskSuspendAll();
 800a452:	f7ff fc29 	bl	8009ca8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800a456:	f7ff fc2f 	bl	8009cb8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800a45a:	6832      	ldr	r2, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 800a45c:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 800a45e:	4282      	cmp	r2, r0
 800a460:	d808      	bhi.n	800a474 <prvTimerTask+0xe4>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a462:	f8d9 2000 	ldr.w	r2, [r9]
	xLastTime = xTimeNow;
 800a466:	f8c6 b000 	str.w	fp, [r6]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a46a:	6812      	ldr	r2, [r2, #0]
 800a46c:	fab2 f282 	clz	r2, r2
 800a470:	0952      	lsrs	r2, r2, #5
 800a472:	e7a9      	b.n	800a3c8 <prvTimerTask+0x38>
		prvSwitchTimerLists();
 800a474:	f7ff ff42 	bl	800a2fc <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800a478:	f8c6 b000 	str.w	fp, [r6]
			( void ) xTaskResumeAll();
 800a47c:	f7ff fcc6 	bl	8009e0c <xTaskResumeAll>
 800a480:	e7b2      	b.n	800a3e8 <prvTimerTask+0x58>
 800a482:	9001      	str	r0, [sp, #4]
		prvSwitchTimerLists();
 800a484:	f7ff ff3a 	bl	800a2fc <prvSwitchTimerLists>
 800a488:	9801      	ldr	r0, [sp, #4]
 800a48a:	e7cc      	b.n	800a426 <prvTimerTask+0x96>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a48c:	9b03      	ldr	r3, [sp, #12]
 800a48e:	61a3      	str	r3, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a490:	2b00      	cmp	r3, #0
 800a492:	d064      	beq.n	800a55e <prvTimerTask+0x1ce>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a494:	4403      	add	r3, r0
	if( xNextExpiryTime <= xTimeNow )
 800a496:	4283      	cmp	r3, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a498:	6063      	str	r3, [r4, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a49a:	6124      	str	r4, [r4, #16]
 800a49c:	f104 0104 	add.w	r1, r4, #4
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a4a0:	bf94      	ite	ls
 800a4a2:	f8d9 0000 	ldrls.w	r0, [r9]
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a4a6:	6838      	ldrhi	r0, [r7, #0]
 800a4a8:	f7fe fcc0 	bl	8008e2c <vListInsert>
 800a4ac:	e79e      	b.n	800a3ec <prvTimerTask+0x5c>
				( void ) xTaskResumeAll();
 800a4ae:	f7ff fcad 	bl	8009e0c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a4b2:	683a      	ldr	r2, [r7, #0]
 800a4b4:	68d2      	ldr	r2, [r2, #12]
 800a4b6:	f8d2 800c 	ldr.w	r8, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4ba:	f108 0104 	add.w	r1, r8, #4
 800a4be:	4608      	mov	r0, r1
 800a4c0:	9101      	str	r1, [sp, #4]
 800a4c2:	f7fe fccd 	bl	8008e60 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a4c6:	f8d8 201c 	ldr.w	r2, [r8, #28]
 800a4ca:	9901      	ldr	r1, [sp, #4]
 800a4cc:	2a01      	cmp	r2, #1
 800a4ce:	d04f      	beq.n	800a570 <prvTimerTask+0x1e0>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4d0:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800a4d4:	4640      	mov	r0, r8
 800a4d6:	4798      	blx	r3
 800a4d8:	e786      	b.n	800a3e8 <prvTimerTask+0x58>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a4da:	9b03      	ldr	r3, [sp, #12]
 800a4dc:	69a2      	ldr	r2, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4de:	6124      	str	r4, [r4, #16]
 800a4e0:	1899      	adds	r1, r3, r2
 800a4e2:	bf2c      	ite	cs
 800a4e4:	f04f 0c01 	movcs.w	ip, #1
 800a4e8:	f04f 0c00 	movcc.w	ip, #0
	if( xNextExpiryTime <= xTimeNow )
 800a4ec:	4281      	cmp	r1, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a4ee:	6061      	str	r1, [r4, #4]
	if( xNextExpiryTime <= xTimeNow )
 800a4f0:	d825      	bhi.n	800a53e <prvTimerTask+0x1ae>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4f2:	1ac3      	subs	r3, r0, r3
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d82c      	bhi.n	800a552 <prvTimerTask+0x1c2>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a4fe:	69e3      	ldr	r3, [r4, #28]
 800a500:	2b01      	cmp	r3, #1
 800a502:	f47f af73 	bne.w	800a3ec <prvTimerTask+0x5c>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a506:	9b03      	ldr	r3, [sp, #12]
 800a508:	69a1      	ldr	r1, [r4, #24]
	if( xTimerQueue != NULL )
 800a50a:	682a      	ldr	r2, [r5, #0]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a50c:	440b      	add	r3, r1
	if( xTimerQueue != NULL )
 800a50e:	b16a      	cbz	r2, 800a52c <prvTimerTask+0x19c>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a510:	e9cd 8306 	strd	r8, r3, [sp, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a514:	9408      	str	r4, [sp, #32]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a516:	f7ff fe9f 	bl	800a258 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a51a:	2300      	movs	r3, #0
 800a51c:	a906      	add	r1, sp, #24
 800a51e:	461a      	mov	r2, r3
 800a520:	6828      	ldr	r0, [r5, #0]
 800a522:	f7fe fd49 	bl	8008fb8 <xQueueGenericSend>
							configASSERT( xResult );
 800a526:	2800      	cmp	r0, #0
 800a528:	f47f af60 	bne.w	800a3ec <prvTimerTask+0x5c>
 800a52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a530:	f383 8811 	msr	BASEPRI, r3
 800a534:	f3bf 8f6f 	isb	sy
 800a538:	f3bf 8f4f 	dsb	sy
 800a53c:	e7fe      	b.n	800a53c <prvTimerTask+0x1ac>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a53e:	4283      	cmp	r3, r0
 800a540:	d902      	bls.n	800a548 <prvTimerTask+0x1b8>
 800a542:	f1bc 0f00 	cmp.w	ip, #0
 800a546:	d0d7      	beq.n	800a4f8 <prvTimerTask+0x168>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a548:	1d21      	adds	r1, r4, #4
 800a54a:	6838      	ldr	r0, [r7, #0]
 800a54c:	f7fe fc6e 	bl	8008e2c <vListInsert>
 800a550:	e74c      	b.n	800a3ec <prvTimerTask+0x5c>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a552:	1d21      	adds	r1, r4, #4
 800a554:	f8d9 0000 	ldr.w	r0, [r9]
 800a558:	f7fe fc68 	bl	8008e2c <vListInsert>
 800a55c:	e746      	b.n	800a3ec <prvTimerTask+0x5c>
 800a55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	e7fe      	b.n	800a56e <prvTimerTask+0x1de>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a570:	f8d8 2018 	ldr.w	r2, [r8, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a574:	f8c8 8010 	str.w	r8, [r8, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a578:	18a0      	adds	r0, r4, r2
	if( xNextExpiryTime <= xTimeNow )
 800a57a:	4583      	cmp	fp, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a57c:	f8c8 0004 	str.w	r0, [r8, #4]
	if( xNextExpiryTime <= xTimeNow )
 800a580:	d323      	bcc.n	800a5ca <prvTimerTask+0x23a>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a582:	ebab 0304 	sub.w	r3, fp, r4
 800a586:	429a      	cmp	r2, r3
 800a588:	d81a      	bhi.n	800a5c0 <prvTimerTask+0x230>
	if( xTimerQueue != NULL )
 800a58a:	682b      	ldr	r3, [r5, #0]
 800a58c:	b17b      	cbz	r3, 800a5ae <prvTimerTask+0x21e>
		xMessage.xMessageID = xCommandID;
 800a58e:	f04f 0b00 	mov.w	fp, #0
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a592:	e9cd 4807 	strd	r4, r8, [sp, #28]
		xMessage.xMessageID = xCommandID;
 800a596:	f8cd b018 	str.w	fp, [sp, #24]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a59a:	f7ff fe5d 	bl	800a258 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a59e:	465b      	mov	r3, fp
 800a5a0:	465a      	mov	r2, fp
 800a5a2:	a906      	add	r1, sp, #24
 800a5a4:	6828      	ldr	r0, [r5, #0]
 800a5a6:	f7fe fd07 	bl	8008fb8 <xQueueGenericSend>
			configASSERT( xResult );
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	d190      	bne.n	800a4d0 <prvTimerTask+0x140>
 800a5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	e7fe      	b.n	800a5be <prvTimerTask+0x22e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a5c0:	f8d9 0000 	ldr.w	r0, [r9]
 800a5c4:	f7fe fc32 	bl	8008e2c <vListInsert>
 800a5c8:	e782      	b.n	800a4d0 <prvTimerTask+0x140>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5ca:	6838      	ldr	r0, [r7, #0]
 800a5cc:	f7fe fc2e 	bl	8008e2c <vListInsert>
 800a5d0:	e77e      	b.n	800a4d0 <prvTimerTask+0x140>
 800a5d2:	bf00      	nop
 800a5d4:	200027a8 	.word	0x200027a8
 800a5d8:	20002878 	.word	0x20002878
 800a5dc:	200028cc 	.word	0x200028cc
 800a5e0:	e000ed04 	.word	0xe000ed04
 800a5e4:	200027ac 	.word	0x200027ac

0800a5e8 <xTimerCreateTimerTask>:
{
 800a5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800a5ea:	4c23      	ldr	r4, [pc, #140]	; (800a678 <xTimerCreateTimerTask+0x90>)
{
 800a5ec:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
 800a5ee:	f000 f8b1 	bl	800a754 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800a5f2:	6827      	ldr	r7, [r4, #0]
 800a5f4:	b32f      	cbz	r7, 800a642 <xTimerCreateTimerTask+0x5a>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a5f6:	f000 f8cf 	bl	800a798 <vPortExitCritical>
	if( xTimerQueue != NULL )
 800a5fa:	6823      	ldr	r3, [r4, #0]
 800a5fc:	b1c3      	cbz	r3, 800a630 <xTimerCreateTimerTask+0x48>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a5fe:	2400      	movs	r4, #0
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a600:	2502      	movs	r5, #2
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a602:	aa07      	add	r2, sp, #28
 800a604:	a906      	add	r1, sp, #24
 800a606:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a608:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a60c:	f7fe fbe2 	bl	8008dd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a610:	a805      	add	r0, sp, #20
 800a612:	c807      	ldmia	r0, {r0, r1, r2}
 800a614:	4623      	mov	r3, r4
 800a616:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800a61a:	9500      	str	r5, [sp, #0]
 800a61c:	4917      	ldr	r1, [pc, #92]	; (800a67c <xTimerCreateTimerTask+0x94>)
 800a61e:	4818      	ldr	r0, [pc, #96]	; (800a680 <xTimerCreateTimerTask+0x98>)
 800a620:	f7ff f9e8 	bl	80099f4 <xTaskCreateStatic>
 800a624:	4b17      	ldr	r3, [pc, #92]	; (800a684 <xTimerCreateTimerTask+0x9c>)
 800a626:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800a628:	b110      	cbz	r0, 800a630 <xTimerCreateTimerTask+0x48>
}
 800a62a:	2001      	movs	r0, #1
 800a62c:	b009      	add	sp, #36	; 0x24
 800a62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a634:	f383 8811 	msr	BASEPRI, r3
 800a638:	f3bf 8f6f 	isb	sy
 800a63c:	f3bf 8f4f 	dsb	sy
 800a640:	e7fe      	b.n	800a640 <xTimerCreateTimerTask+0x58>
			vListInitialise( &xActiveTimerList1 );
 800a642:	4e11      	ldr	r6, [pc, #68]	; (800a688 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 800a644:	4d11      	ldr	r5, [pc, #68]	; (800a68c <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 800a646:	4630      	mov	r0, r6
 800a648:	f7fe fbd2 	bl	8008df0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a64c:	4628      	mov	r0, r5
 800a64e:	f7fe fbcf 	bl	8008df0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a652:	4a0f      	ldr	r2, [pc, #60]	; (800a690 <xTimerCreateTimerTask+0xa8>)
			pxOverflowTimerList = &xActiveTimerList2;
 800a654:	480f      	ldr	r0, [pc, #60]	; (800a694 <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a656:	9700      	str	r7, [sp, #0]
 800a658:	4b0f      	ldr	r3, [pc, #60]	; (800a698 <xTimerCreateTimerTask+0xb0>)
			pxCurrentTimerList = &xActiveTimerList1;
 800a65a:	6016      	str	r6, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a65c:	6005      	str	r5, [r0, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a65e:	4a0f      	ldr	r2, [pc, #60]	; (800a69c <xTimerCreateTimerTask+0xb4>)
 800a660:	2110      	movs	r1, #16
 800a662:	200a      	movs	r0, #10
 800a664:	f7fe fc52 	bl	8008f0c <xQueueGenericCreateStatic>
 800a668:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800a66a:	2800      	cmp	r0, #0
 800a66c:	d0c3      	beq.n	800a5f6 <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a66e:	490c      	ldr	r1, [pc, #48]	; (800a6a0 <xTimerCreateTimerTask+0xb8>)
 800a670:	f7fe ffd2 	bl	8009618 <vQueueAddToRegistry>
 800a674:	e7bf      	b.n	800a5f6 <xTimerCreateTimerTask+0xe>
 800a676:	bf00      	nop
 800a678:	200028cc 	.word	0x200028cc
 800a67c:	0800bf68 	.word	0x0800bf68
 800a680:	0800a391 	.word	0x0800a391
 800a684:	200028d0 	.word	0x200028d0
 800a688:	20002850 	.word	0x20002850
 800a68c:	20002864 	.word	0x20002864
 800a690:	200027a8 	.word	0x200027a8
 800a694:	200027ac 	.word	0x200027ac
 800a698:	2000287c 	.word	0x2000287c
 800a69c:	200027b0 	.word	0x200027b0
 800a6a0:	0800bf60 	.word	0x0800bf60

0800a6a4 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 800a6a4:	2200      	movs	r2, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a6a6:	4b0e      	ldr	r3, [pc, #56]	; (800a6e0 <prvTaskExitError+0x3c>)
{
 800a6a8:	b082      	sub	sp, #8
	configASSERT( uxCriticalNesting == ~0UL );
 800a6aa:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0UL;
 800a6ac:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	d008      	beq.n	800a6c4 <prvTaskExitError+0x20>
 800a6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	e7fe      	b.n	800a6c2 <prvTaskExitError+0x1e>
 800a6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c8:	f383 8811 	msr	BASEPRI, r3
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a6d4:	9b01      	ldr	r3, [sp, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d0fc      	beq.n	800a6d4 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a6da:	b002      	add	sp, #8
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	20000094 	.word	0x20000094

0800a6e4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a6e4:	4806      	ldr	r0, [pc, #24]	; (800a700 <prvPortStartFirstTask+0x1c>)
 800a6e6:	6800      	ldr	r0, [r0, #0]
 800a6e8:	6800      	ldr	r0, [r0, #0]
 800a6ea:	f380 8808 	msr	MSP, r0
 800a6ee:	b662      	cpsie	i
 800a6f0:	b661      	cpsie	f
 800a6f2:	f3bf 8f4f 	dsb	sy
 800a6f6:	f3bf 8f6f 	isb	sy
 800a6fa:	df00      	svc	0
 800a6fc:	bf00      	nop
 800a6fe:	0000      	.short	0x0000
 800a700:	e000ed08 	.word	0xe000ed08

0800a704 <pxPortInitialiseStack>:
{
 800a704:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a706:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a70a:	4b06      	ldr	r3, [pc, #24]	; (800a724 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a70c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a710:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a714:	e940 1402 	strd	r1, r4, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a718:	f840 3c0c 	str.w	r3, [r0, #-12]
}
 800a71c:	bc10      	pop	{r4}
 800a71e:	3840      	subs	r0, #64	; 0x40
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	0800a6a5 	.word	0x0800a6a5
	...

0800a730 <SVC_Handler>:
	__asm volatile (
 800a730:	4b07      	ldr	r3, [pc, #28]	; (800a750 <pxCurrentTCBConst2>)
 800a732:	6819      	ldr	r1, [r3, #0]
 800a734:	6808      	ldr	r0, [r1, #0]
 800a736:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a73a:	f380 8809 	msr	PSP, r0
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f04f 0000 	mov.w	r0, #0
 800a746:	f380 8811 	msr	BASEPRI, r0
 800a74a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a74e:	4770      	bx	lr

0800a750 <pxCurrentTCBConst2>:
 800a750:	200022a8 	.word	0x200022a8

0800a754 <vPortEnterCritical>:
 800a754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a758:	f383 8811 	msr	BASEPRI, r3
 800a75c:	f3bf 8f6f 	isb	sy
 800a760:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a764:	4a0a      	ldr	r2, [pc, #40]	; (800a790 <vPortEnterCritical+0x3c>)
 800a766:	6813      	ldr	r3, [r2, #0]
 800a768:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a76a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800a76c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800a76e:	d000      	beq.n	800a772 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800a770:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a772:	4b08      	ldr	r3, [pc, #32]	; (800a794 <vPortEnterCritical+0x40>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a77a:	d0f9      	beq.n	800a770 <vPortEnterCritical+0x1c>
 800a77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a780:	f383 8811 	msr	BASEPRI, r3
 800a784:	f3bf 8f6f 	isb	sy
 800a788:	f3bf 8f4f 	dsb	sy
 800a78c:	e7fe      	b.n	800a78c <vPortEnterCritical+0x38>
 800a78e:	bf00      	nop
 800a790:	20000094 	.word	0x20000094
 800a794:	e000ed04 	.word	0xe000ed04

0800a798 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 800a798:	4a08      	ldr	r2, [pc, #32]	; (800a7bc <vPortExitCritical+0x24>)
 800a79a:	6813      	ldr	r3, [r2, #0]
 800a79c:	b943      	cbnz	r3, 800a7b0 <vPortExitCritical+0x18>
 800a79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	e7fe      	b.n	800a7ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a7b4:	b90b      	cbnz	r3, 800a7ba <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a7b6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a7ba:	4770      	bx	lr
 800a7bc:	20000094 	.word	0x20000094

0800a7c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a7c0:	f3ef 8009 	mrs	r0, PSP
 800a7c4:	f3bf 8f6f 	isb	sy
 800a7c8:	4b0d      	ldr	r3, [pc, #52]	; (800a800 <pxCurrentTCBConst>)
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a7d0:	6010      	str	r0, [r2, #0]
 800a7d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a7d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a7da:	f380 8811 	msr	BASEPRI, r0
 800a7de:	f7ff fbbf 	bl	8009f60 <vTaskSwitchContext>
 800a7e2:	f04f 0000 	mov.w	r0, #0
 800a7e6:	f380 8811 	msr	BASEPRI, r0
 800a7ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a7ee:	6819      	ldr	r1, [r3, #0]
 800a7f0:	6808      	ldr	r0, [r1, #0]
 800a7f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a7f6:	f380 8809 	msr	PSP, r0
 800a7fa:	f3bf 8f6f 	isb	sy
 800a7fe:	4770      	bx	lr

0800a800 <pxCurrentTCBConst>:
 800a800:	200022a8 	.word	0x200022a8

0800a804 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a804:	b508      	push	{r3, lr}
	__asm volatile
 800a806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80a:	f383 8811 	msr	BASEPRI, r3
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a816:	f7ff fa55 	bl	8009cc4 <xTaskIncrementTick>
 800a81a:	b118      	cbz	r0, 800a824 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a81c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a820:	4b02      	ldr	r3, [pc, #8]	; (800a82c <SysTick_Handler+0x28>)
 800a822:	601a      	str	r2, [r3, #0]
	__asm volatile
 800a824:	2300      	movs	r3, #0
 800a826:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a82a:	bd08      	pop	{r3, pc}
 800a82c:	e000ed04 	.word	0xe000ed04

0800a830 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a830:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a832:	2107      	movs	r1, #7
{
 800a834:	b410      	push	{r4}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a836:	4a08      	ldr	r2, [pc, #32]	; (800a858 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a838:	4c08      	ldr	r4, [pc, #32]	; (800a85c <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a83a:	4809      	ldr	r0, [pc, #36]	; (800a860 <vPortSetupTimerInterrupt+0x30>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a83c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a83e:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a840:	6803      	ldr	r3, [r0, #0]
 800a842:	4c08      	ldr	r4, [pc, #32]	; (800a864 <vPortSetupTimerInterrupt+0x34>)
 800a844:	4808      	ldr	r0, [pc, #32]	; (800a868 <vPortSetupTimerInterrupt+0x38>)
 800a846:	fba4 4303 	umull	r4, r3, r4, r3
 800a84a:	099b      	lsrs	r3, r3, #6
 800a84c:	3b01      	subs	r3, #1
 800a84e:	6003      	str	r3, [r0, #0]
}
 800a850:	bc10      	pop	{r4}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a852:	6011      	str	r1, [r2, #0]
}
 800a854:	4770      	bx	lr
 800a856:	bf00      	nop
 800a858:	e000e010 	.word	0xe000e010
 800a85c:	e000e018 	.word	0xe000e018
 800a860:	20000088 	.word	0x20000088
 800a864:	10624dd3 	.word	0x10624dd3
 800a868:	e000e014 	.word	0xe000e014

0800a86c <xPortStartScheduler>:
{
 800a86c:	b530      	push	{r4, r5, lr}
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a86e:	25ff      	movs	r5, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a870:	2407      	movs	r4, #7
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a872:	4b27      	ldr	r3, [pc, #156]	; (800a910 <xPortStartScheduler+0xa4>)
{
 800a874:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a876:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a878:	4926      	ldr	r1, [pc, #152]	; (800a914 <xPortStartScheduler+0xa8>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a87a:	b2d2      	uxtb	r2, r2
 800a87c:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a87e:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a880:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a882:	4825      	ldr	r0, [pc, #148]	; (800a918 <xPortStartScheduler+0xac>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a884:	b2db      	uxtb	r3, r3
 800a886:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a88a:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a88e:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a892:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a896:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a898:	0611      	lsls	r1, r2, #24
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a89a:	6004      	str	r4, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a89c:	d510      	bpl.n	800a8c0 <xPortStartScheduler+0x54>
 800a89e:	2306      	movs	r3, #6
 800a8a0:	e000      	b.n	800a8a4 <xPortStartScheduler+0x38>
 800a8a2:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a8a4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800a8a8:	1e59      	subs	r1, r3, #1
 800a8aa:	0052      	lsls	r2, r2, #1
 800a8ac:	b2d2      	uxtb	r2, r2
 800a8ae:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8b2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800a8b6:	0612      	lsls	r2, r2, #24
 800a8b8:	d4f3      	bmi.n	800a8a2 <xPortStartScheduler+0x36>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a8ba:	2b03      	cmp	r3, #3
 800a8bc:	6003      	str	r3, [r0, #0]
 800a8be:	d008      	beq.n	800a8d2 <xPortStartScheduler+0x66>
	__asm volatile
 800a8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c4:	f383 8811 	msr	BASEPRI, r3
 800a8c8:	f3bf 8f6f 	isb	sy
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	e7fe      	b.n	800a8d0 <xPortStartScheduler+0x64>
	uxCriticalNesting = 0;
 800a8d2:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8d4:	9901      	ldr	r1, [sp, #4]
 800a8d6:	4d0e      	ldr	r5, [pc, #56]	; (800a910 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a8d8:	021b      	lsls	r3, r3, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a8da:	4a10      	ldr	r2, [pc, #64]	; (800a91c <xPortStartScheduler+0xb0>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8dc:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a8de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8e2:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8e4:	7029      	strb	r1, [r5, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a8e6:	6813      	ldr	r3, [r2, #0]
 800a8e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a8ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a8ee:	6813      	ldr	r3, [r2, #0]
 800a8f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a8f4:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 800a8f6:	f7ff ff9b 	bl	800a830 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800a8fa:	4b09      	ldr	r3, [pc, #36]	; (800a920 <xPortStartScheduler+0xb4>)
 800a8fc:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 800a8fe:	f7ff fef1 	bl	800a6e4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800a902:	f7ff fb2d 	bl	8009f60 <vTaskSwitchContext>
	prvTaskExitError();
 800a906:	f7ff fecd 	bl	800a6a4 <prvTaskExitError>
}
 800a90a:	4620      	mov	r0, r4
 800a90c:	b003      	add	sp, #12
 800a90e:	bd30      	pop	{r4, r5, pc}
 800a910:	e000e400 	.word	0xe000e400
 800a914:	200028d4 	.word	0x200028d4
 800a918:	200028d8 	.word	0x200028d8
 800a91c:	e000ed20 	.word	0xe000ed20
 800a920:	20000094 	.word	0x20000094

0800a924 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a924:	b430      	push	{r4, r5}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a926:	4b11      	ldr	r3, [pc, #68]	; (800a96c <prvInsertBlockIntoFreeList+0x48>)
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	4282      	cmp	r2, r0
 800a92c:	d201      	bcs.n	800a932 <prvInsertBlockIntoFreeList+0xe>
 800a92e:	4613      	mov	r3, r2
 800a930:	e7fa      	b.n	800a928 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a932:	685c      	ldr	r4, [r3, #4]
 800a934:	1919      	adds	r1, r3, r4
 800a936:	4288      	cmp	r0, r1
 800a938:	d103      	bne.n	800a942 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a93a:	6841      	ldr	r1, [r0, #4]
 800a93c:	4618      	mov	r0, r3
 800a93e:	4421      	add	r1, r4
 800a940:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a942:	6844      	ldr	r4, [r0, #4]
 800a944:	1901      	adds	r1, r0, r4
 800a946:	428a      	cmp	r2, r1
 800a948:	d109      	bne.n	800a95e <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a94a:	4909      	ldr	r1, [pc, #36]	; (800a970 <prvInsertBlockIntoFreeList+0x4c>)
 800a94c:	6809      	ldr	r1, [r1, #0]
 800a94e:	428a      	cmp	r2, r1
 800a950:	d005      	beq.n	800a95e <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a952:	e9d2 5100 	ldrd	r5, r1, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a956:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a958:	e9c0 5100 	strd	r5, r1, [r0]
 800a95c:	e000      	b.n	800a960 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a95e:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a960:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a962:	bf18      	it	ne
 800a964:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a966:	bc30      	pop	{r4, r5}
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	20003c74 	.word	0x20003c74
 800a970:	200028dc 	.word	0x200028dc

0800a974 <pvPortMalloc>:
{
 800a974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 800a978:	4f41      	ldr	r7, [pc, #260]	; (800aa80 <pvPortMalloc+0x10c>)
{
 800a97a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800a97c:	f7ff f994 	bl	8009ca8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800a980:	683a      	ldr	r2, [r7, #0]
 800a982:	2a00      	cmp	r2, #0
 800a984:	d05a      	beq.n	800aa3c <pvPortMalloc+0xc8>
 800a986:	4b3f      	ldr	r3, [pc, #252]	; (800aa84 <pvPortMalloc+0x110>)
 800a988:	681e      	ldr	r6, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a98a:	4234      	tst	r4, r6
 800a98c:	d150      	bne.n	800aa30 <pvPortMalloc+0xbc>
			if( xWantedSize > 0 )
 800a98e:	2c00      	cmp	r4, #0
 800a990:	d04e      	beq.n	800aa30 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 800a992:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a996:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a998:	bf1c      	itt	ne
 800a99a:	f023 0307 	bicne.w	r3, r3, #7
 800a99e:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d045      	beq.n	800aa30 <pvPortMalloc+0xbc>
 800a9a4:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800aa98 <pvPortMalloc+0x124>
 800a9a8:	f8d8 5000 	ldr.w	r5, [r8]
 800a9ac:	429d      	cmp	r5, r3
 800a9ae:	d33f      	bcc.n	800aa30 <pvPortMalloc+0xbc>
				pxBlock = xStart.pxNextFreeBlock;
 800a9b0:	4835      	ldr	r0, [pc, #212]	; (800aa88 <pvPortMalloc+0x114>)
 800a9b2:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9b4:	e006      	b.n	800a9c4 <pvPortMalloc+0x50>
 800a9b6:	f8d4 c000 	ldr.w	ip, [r4]
 800a9ba:	f1bc 0f00 	cmp.w	ip, #0
 800a9be:	d004      	beq.n	800a9ca <pvPortMalloc+0x56>
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	4664      	mov	r4, ip
 800a9c4:	6861      	ldr	r1, [r4, #4]
 800a9c6:	4299      	cmp	r1, r3
 800a9c8:	d3f5      	bcc.n	800a9b6 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 800a9ca:	4294      	cmp	r4, r2
 800a9cc:	d030      	beq.n	800aa30 <pvPortMalloc+0xbc>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a9ce:	1aca      	subs	r2, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a9d0:	6827      	ldr	r7, [r4, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a9d2:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a9d4:	6007      	str	r7, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a9d6:	d910      	bls.n	800a9fa <pvPortMalloc+0x86>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a9d8:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9da:	0741      	lsls	r1, r0, #29
 800a9dc:	d008      	beq.n	800a9f0 <pvPortMalloc+0x7c>
 800a9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e2:	f383 8811 	msr	BASEPRI, r3
 800a9e6:	f3bf 8f6f 	isb	sy
 800a9ea:	f3bf 8f4f 	dsb	sy
 800a9ee:	e7fe      	b.n	800a9ee <pvPortMalloc+0x7a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a9f0:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a9f2:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a9f4:	f7ff ff96 	bl	800a924 <prvInsertBlockIntoFreeList>
 800a9f8:	6861      	ldr	r1, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a9fa:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a9fc:	4a23      	ldr	r2, [pc, #140]	; (800aa8c <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a9fe:	1a6d      	subs	r5, r5, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa00:	6810      	ldr	r0, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa02:	4331      	orrs	r1, r6
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa04:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
 800aa06:	e9c4 3100 	strd	r3, r1, [r4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa0a:	f104 0408 	add.w	r4, r4, #8
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aa0e:	bf38      	it	cc
 800aa10:	6015      	strcc	r5, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa12:	f8c8 5000 	str.w	r5, [r8]
	( void ) xTaskResumeAll();
 800aa16:	f7ff f9f9 	bl	8009e0c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa1a:	0763      	lsls	r3, r4, #29
 800aa1c:	d00b      	beq.n	800aa36 <pvPortMalloc+0xc2>
 800aa1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa22:	f383 8811 	msr	BASEPRI, r3
 800aa26:	f3bf 8f6f 	isb	sy
 800aa2a:	f3bf 8f4f 	dsb	sy
 800aa2e:	e7fe      	b.n	800aa2e <pvPortMalloc+0xba>
	( void ) xTaskResumeAll();
 800aa30:	f7ff f9ec 	bl	8009e0c <xTaskResumeAll>
 800aa34:	2400      	movs	r4, #0
}
 800aa36:	4620      	mov	r0, r4
 800aa38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uxAddress = ( size_t ) ucHeap;
 800aa3c:	4b14      	ldr	r3, [pc, #80]	; (800aa90 <pvPortMalloc+0x11c>)
	xStart.xBlockSize = ( size_t ) 0;
 800aa3e:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aa40:	075d      	lsls	r5, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aa42:	bf1c      	itt	ne
 800aa44:	3307      	addne	r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa46:	f023 0307 	bicne.w	r3, r3, #7
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aa4a:	4619      	mov	r1, r3
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa4c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	uxAddress -= xHeapStructSize;
 800aa50:	4a10      	ldr	r2, [pc, #64]	; (800aa94 <pvPortMalloc+0x120>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aa52:	f8df c034 	ldr.w	ip, [pc, #52]	; 800aa88 <pvPortMalloc+0x114>
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa56:	f022 0207 	bic.w	r2, r2, #7
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aa5a:	1ad3      	subs	r3, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 800aa5c:	f8cc 0004 	str.w	r0, [ip, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aa60:	f8cc 1000 	str.w	r1, [ip]
	pxEnd = ( void * ) uxAddress;
 800aa64:	603a      	str	r2, [r7, #0]
	pxEnd->pxNextFreeBlock = NULL;
 800aa66:	e9c2 0000 	strd	r0, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa6a:	4f08      	ldr	r7, [pc, #32]	; (800aa8c <pvPortMalloc+0x118>)
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa6c:	e9c1 2300 	strd	r2, r3, [r1]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa70:	4809      	ldr	r0, [pc, #36]	; (800aa98 <pvPortMalloc+0x124>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa72:	4904      	ldr	r1, [pc, #16]	; (800aa84 <pvPortMalloc+0x110>)
 800aa74:	462e      	mov	r6, r5
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa76:	603b      	str	r3, [r7, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa78:	6003      	str	r3, [r0, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa7a:	600d      	str	r5, [r1, #0]
 800aa7c:	e785      	b.n	800a98a <pvPortMalloc+0x16>
 800aa7e:	bf00      	nop
 800aa80:	200028dc 	.word	0x200028dc
 800aa84:	20003c68 	.word	0x20003c68
 800aa88:	20003c74 	.word	0x20003c74
 800aa8c:	20003c70 	.word	0x20003c70
 800aa90:	200028e0 	.word	0x200028e0
 800aa94:	20003c60 	.word	0x20003c60
 800aa98:	20003c6c 	.word	0x20003c6c

0800aa9c <vPortFree>:
	if( pv != NULL )
 800aa9c:	b1d0      	cbz	r0, 800aad4 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aa9e:	4a19      	ldr	r2, [pc, #100]	; (800ab04 <vPortFree+0x68>)
 800aaa0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800aaa4:	6812      	ldr	r2, [r2, #0]
 800aaa6:	4213      	tst	r3, r2
 800aaa8:	d108      	bne.n	800aabc <vPortFree+0x20>
 800aaaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaae:	f383 8811 	msr	BASEPRI, r3
 800aab2:	f3bf 8f6f 	isb	sy
 800aab6:	f3bf 8f4f 	dsb	sy
 800aaba:	e7fe      	b.n	800aaba <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aabc:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800aac0:	b149      	cbz	r1, 800aad6 <vPortFree+0x3a>
 800aac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac6:	f383 8811 	msr	BASEPRI, r3
 800aaca:	f3bf 8f6f 	isb	sy
 800aace:	f3bf 8f4f 	dsb	sy
 800aad2:	e7fe      	b.n	800aad2 <vPortFree+0x36>
 800aad4:	4770      	bx	lr
{
 800aad6:	b510      	push	{r4, lr}
 800aad8:	4604      	mov	r4, r0
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aada:	ea23 0302 	bic.w	r3, r3, r2
 800aade:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800aae2:	f7ff f8e1 	bl	8009ca8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aae6:	4a08      	ldr	r2, [pc, #32]	; (800ab08 <vPortFree+0x6c>)
 800aae8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800aaec:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aaee:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aaf2:	440b      	add	r3, r1
 800aaf4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aaf6:	f7ff ff15 	bl	800a924 <prvInsertBlockIntoFreeList>
}
 800aafa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800aafe:	f7ff b985 	b.w	8009e0c <xTaskResumeAll>
 800ab02:	bf00      	nop
 800ab04:	20003c68 	.word	0x20003c68
 800ab08:	20003c6c 	.word	0x20003c6c

0800ab0c <_ZdaPv>:
 800ab0c:	f000 b81e 	b.w	800ab4c <_ZdlPv>

0800ab10 <_Znaj>:
 800ab10:	f000 b802 	b.w	800ab18 <_Znwj>

0800ab14 <_ZdlPvj>:
 800ab14:	f000 b81a 	b.w	800ab4c <_ZdlPv>

0800ab18 <_Znwj>:
 800ab18:	b510      	push	{r4, lr}
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	bf14      	ite	ne
 800ab1e:	4604      	movne	r4, r0
 800ab20:	2401      	moveq	r4, #1
 800ab22:	4620      	mov	r0, r4
 800ab24:	f001 f870 	bl	800bc08 <malloc>
 800ab28:	b930      	cbnz	r0, 800ab38 <_Znwj+0x20>
 800ab2a:	f000 f807 	bl	800ab3c <_ZSt15get_new_handlerv>
 800ab2e:	b908      	cbnz	r0, 800ab34 <_Znwj+0x1c>
 800ab30:	f001 f839 	bl	800bba6 <abort>
 800ab34:	4780      	blx	r0
 800ab36:	e7f4      	b.n	800ab22 <_Znwj+0xa>
 800ab38:	bd10      	pop	{r4, pc}
	...

0800ab3c <_ZSt15get_new_handlerv>:
 800ab3c:	4b02      	ldr	r3, [pc, #8]	; (800ab48 <_ZSt15get_new_handlerv+0xc>)
 800ab3e:	6818      	ldr	r0, [r3, #0]
 800ab40:	f3bf 8f5b 	dmb	ish
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop
 800ab48:	20003c7c 	.word	0x20003c7c

0800ab4c <_ZdlPv>:
 800ab4c:	f001 b864 	b.w	800bc18 <free>

0800ab50 <_ZSt20__throw_length_errorPKc>:
 800ab50:	b508      	push	{r3, lr}
 800ab52:	f001 f828 	bl	800bba6 <abort>
	...

0800ab58 <pow>:
 800ab58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab5c:	b08f      	sub	sp, #60	; 0x3c
 800ab5e:	461d      	mov	r5, r3
 800ab60:	4680      	mov	r8, r0
 800ab62:	4689      	mov	r9, r1
 800ab64:	4614      	mov	r4, r2
 800ab66:	f000 f953 	bl	800ae10 <__ieee754_pow>
 800ab6a:	4fa1      	ldr	r7, [pc, #644]	; (800adf0 <pow+0x298>)
 800ab6c:	e9cd 0100 	strd	r0, r1, [sp]
 800ab70:	f997 3000 	ldrsb.w	r3, [r7]
 800ab74:	463e      	mov	r6, r7
 800ab76:	9302      	str	r3, [sp, #8]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	d05f      	beq.n	800ac3c <pow+0xe4>
 800ab7c:	4622      	mov	r2, r4
 800ab7e:	462b      	mov	r3, r5
 800ab80:	4620      	mov	r0, r4
 800ab82:	4629      	mov	r1, r5
 800ab84:	f7f5 ff3a 	bl	80009fc <__aeabi_dcmpun>
 800ab88:	4682      	mov	sl, r0
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	d156      	bne.n	800ac3c <pow+0xe4>
 800ab8e:	4642      	mov	r2, r8
 800ab90:	464b      	mov	r3, r9
 800ab92:	4640      	mov	r0, r8
 800ab94:	4649      	mov	r1, r9
 800ab96:	f7f5 ff31 	bl	80009fc <__aeabi_dcmpun>
 800ab9a:	9003      	str	r0, [sp, #12]
 800ab9c:	b1e8      	cbz	r0, 800abda <pow+0x82>
 800ab9e:	2200      	movs	r2, #0
 800aba0:	2300      	movs	r3, #0
 800aba2:	4620      	mov	r0, r4
 800aba4:	4629      	mov	r1, r5
 800aba6:	f7f5 fef7 	bl	8000998 <__aeabi_dcmpeq>
 800abaa:	2800      	cmp	r0, #0
 800abac:	d046      	beq.n	800ac3c <pow+0xe4>
 800abae:	2301      	movs	r3, #1
 800abb0:	2200      	movs	r2, #0
 800abb2:	9304      	str	r3, [sp, #16]
 800abb4:	4b8f      	ldr	r3, [pc, #572]	; (800adf4 <pow+0x29c>)
 800abb6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800abba:	9305      	str	r3, [sp, #20]
 800abbc:	4b8e      	ldr	r3, [pc, #568]	; (800adf8 <pow+0x2a0>)
 800abbe:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800abc2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800abc6:	9b02      	ldr	r3, [sp, #8]
 800abc8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800abcc:	2b02      	cmp	r3, #2
 800abce:	d031      	beq.n	800ac34 <pow+0xdc>
 800abd0:	a804      	add	r0, sp, #16
 800abd2:	f000 fedd 	bl	800b990 <matherr>
 800abd6:	bb38      	cbnz	r0, 800ac28 <pow+0xd0>
 800abd8:	e058      	b.n	800ac8c <pow+0x134>
 800abda:	f04f 0a00 	mov.w	sl, #0
 800abde:	f04f 0b00 	mov.w	fp, #0
 800abe2:	4652      	mov	r2, sl
 800abe4:	465b      	mov	r3, fp
 800abe6:	4640      	mov	r0, r8
 800abe8:	4649      	mov	r1, r9
 800abea:	f7f5 fed5 	bl	8000998 <__aeabi_dcmpeq>
 800abee:	2800      	cmp	r0, #0
 800abf0:	d051      	beq.n	800ac96 <pow+0x13e>
 800abf2:	4652      	mov	r2, sl
 800abf4:	465b      	mov	r3, fp
 800abf6:	4620      	mov	r0, r4
 800abf8:	4629      	mov	r1, r5
 800abfa:	f7f5 fecd 	bl	8000998 <__aeabi_dcmpeq>
 800abfe:	4606      	mov	r6, r0
 800ac00:	b308      	cbz	r0, 800ac46 <pow+0xee>
 800ac02:	2301      	movs	r3, #1
 800ac04:	9304      	str	r3, [sp, #16]
 800ac06:	4b7b      	ldr	r3, [pc, #492]	; (800adf4 <pow+0x29c>)
 800ac08:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800ac0c:	9305      	str	r3, [sp, #20]
 800ac0e:	9b03      	ldr	r3, [sp, #12]
 800ac10:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800ac14:	930c      	str	r3, [sp, #48]	; 0x30
 800ac16:	9b02      	ldr	r3, [sp, #8]
 800ac18:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d0d7      	beq.n	800abd0 <pow+0x78>
 800ac20:	2200      	movs	r2, #0
 800ac22:	4b75      	ldr	r3, [pc, #468]	; (800adf8 <pow+0x2a0>)
 800ac24:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ac28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac2a:	b11b      	cbz	r3, 800ac34 <pow+0xdc>
 800ac2c:	f000 ffc2 	bl	800bbb4 <__errno>
 800ac30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac32:	6003      	str	r3, [r0, #0]
 800ac34:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800ac38:	e9cd 3400 	strd	r3, r4, [sp]
 800ac3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac40:	b00f      	add	sp, #60	; 0x3c
 800ac42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac46:	4620      	mov	r0, r4
 800ac48:	4629      	mov	r1, r5
 800ac4a:	f000 fe9b 	bl	800b984 <finite>
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	d0f4      	beq.n	800ac3c <pow+0xe4>
 800ac52:	4652      	mov	r2, sl
 800ac54:	465b      	mov	r3, fp
 800ac56:	4620      	mov	r0, r4
 800ac58:	4629      	mov	r1, r5
 800ac5a:	f7f5 fea7 	bl	80009ac <__aeabi_dcmplt>
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	d0ec      	beq.n	800ac3c <pow+0xe4>
 800ac62:	2301      	movs	r3, #1
 800ac64:	9304      	str	r3, [sp, #16]
 800ac66:	4b63      	ldr	r3, [pc, #396]	; (800adf4 <pow+0x29c>)
 800ac68:	960c      	str	r6, [sp, #48]	; 0x30
 800ac6a:	9305      	str	r3, [sp, #20]
 800ac6c:	f997 3000 	ldrsb.w	r3, [r7]
 800ac70:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800ac74:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800ac78:	b913      	cbnz	r3, 800ac80 <pow+0x128>
 800ac7a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800ac7e:	e7a7      	b.n	800abd0 <pow+0x78>
 800ac80:	2000      	movs	r0, #0
 800ac82:	495e      	ldr	r1, [pc, #376]	; (800adfc <pow+0x2a4>)
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ac8a:	d1a1      	bne.n	800abd0 <pow+0x78>
 800ac8c:	f000 ff92 	bl	800bbb4 <__errno>
 800ac90:	2321      	movs	r3, #33	; 0x21
 800ac92:	6003      	str	r3, [r0, #0]
 800ac94:	e7c8      	b.n	800ac28 <pow+0xd0>
 800ac96:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac9a:	f000 fe73 	bl	800b984 <finite>
 800ac9e:	9002      	str	r0, [sp, #8]
 800aca0:	2800      	cmp	r0, #0
 800aca2:	d177      	bne.n	800ad94 <pow+0x23c>
 800aca4:	4640      	mov	r0, r8
 800aca6:	4649      	mov	r1, r9
 800aca8:	f000 fe6c 	bl	800b984 <finite>
 800acac:	2800      	cmp	r0, #0
 800acae:	d071      	beq.n	800ad94 <pow+0x23c>
 800acb0:	4620      	mov	r0, r4
 800acb2:	4629      	mov	r1, r5
 800acb4:	f000 fe66 	bl	800b984 <finite>
 800acb8:	2800      	cmp	r0, #0
 800acba:	d06b      	beq.n	800ad94 <pow+0x23c>
 800acbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acc0:	4619      	mov	r1, r3
 800acc2:	4610      	mov	r0, r2
 800acc4:	f7f5 fe9a 	bl	80009fc <__aeabi_dcmpun>
 800acc8:	f997 7000 	ldrsb.w	r7, [r7]
 800accc:	4b49      	ldr	r3, [pc, #292]	; (800adf4 <pow+0x29c>)
 800acce:	b1a0      	cbz	r0, 800acfa <pow+0x1a2>
 800acd0:	2201      	movs	r2, #1
 800acd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800acd6:	9b02      	ldr	r3, [sp, #8]
 800acd8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800acdc:	930c      	str	r3, [sp, #48]	; 0x30
 800acde:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800ace2:	2f00      	cmp	r7, #0
 800ace4:	d0c9      	beq.n	800ac7a <pow+0x122>
 800ace6:	4652      	mov	r2, sl
 800ace8:	465b      	mov	r3, fp
 800acea:	4650      	mov	r0, sl
 800acec:	4659      	mov	r1, fp
 800acee:	f7f5 fd15 	bl	800071c <__aeabi_ddiv>
 800acf2:	2f02      	cmp	r7, #2
 800acf4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800acf8:	e7c7      	b.n	800ac8a <pow+0x132>
 800acfa:	2203      	movs	r2, #3
 800acfc:	900c      	str	r0, [sp, #48]	; 0x30
 800acfe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ad02:	4620      	mov	r0, r4
 800ad04:	4629      	mov	r1, r5
 800ad06:	2200      	movs	r2, #0
 800ad08:	4b3d      	ldr	r3, [pc, #244]	; (800ae00 <pow+0x2a8>)
 800ad0a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800ad0e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800ad12:	f7f5 fbd9 	bl	80004c8 <__aeabi_dmul>
 800ad16:	4604      	mov	r4, r0
 800ad18:	460d      	mov	r5, r1
 800ad1a:	bb17      	cbnz	r7, 800ad62 <pow+0x20a>
 800ad1c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ad20:	4b38      	ldr	r3, [pc, #224]	; (800ae04 <pow+0x2ac>)
 800ad22:	4640      	mov	r0, r8
 800ad24:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ad28:	4649      	mov	r1, r9
 800ad2a:	4652      	mov	r2, sl
 800ad2c:	465b      	mov	r3, fp
 800ad2e:	f7f5 fe3d 	bl	80009ac <__aeabi_dcmplt>
 800ad32:	2800      	cmp	r0, #0
 800ad34:	d054      	beq.n	800ade0 <pow+0x288>
 800ad36:	4620      	mov	r0, r4
 800ad38:	4629      	mov	r1, r5
 800ad3a:	f000 fe31 	bl	800b9a0 <rint>
 800ad3e:	4622      	mov	r2, r4
 800ad40:	462b      	mov	r3, r5
 800ad42:	f7f5 fe29 	bl	8000998 <__aeabi_dcmpeq>
 800ad46:	b920      	cbnz	r0, 800ad52 <pow+0x1fa>
 800ad48:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ad4c:	4b2e      	ldr	r3, [pc, #184]	; (800ae08 <pow+0x2b0>)
 800ad4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ad52:	f996 3000 	ldrsb.w	r3, [r6]
 800ad56:	2b02      	cmp	r3, #2
 800ad58:	d142      	bne.n	800ade0 <pow+0x288>
 800ad5a:	f000 ff2b 	bl	800bbb4 <__errno>
 800ad5e:	2322      	movs	r3, #34	; 0x22
 800ad60:	e797      	b.n	800ac92 <pow+0x13a>
 800ad62:	2200      	movs	r2, #0
 800ad64:	4b29      	ldr	r3, [pc, #164]	; (800ae0c <pow+0x2b4>)
 800ad66:	4640      	mov	r0, r8
 800ad68:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ad6c:	4649      	mov	r1, r9
 800ad6e:	4652      	mov	r2, sl
 800ad70:	465b      	mov	r3, fp
 800ad72:	f7f5 fe1b 	bl	80009ac <__aeabi_dcmplt>
 800ad76:	2800      	cmp	r0, #0
 800ad78:	d0eb      	beq.n	800ad52 <pow+0x1fa>
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	f000 fe0f 	bl	800b9a0 <rint>
 800ad82:	4622      	mov	r2, r4
 800ad84:	462b      	mov	r3, r5
 800ad86:	f7f5 fe07 	bl	8000998 <__aeabi_dcmpeq>
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	d1e1      	bne.n	800ad52 <pow+0x1fa>
 800ad8e:	2200      	movs	r2, #0
 800ad90:	4b1a      	ldr	r3, [pc, #104]	; (800adfc <pow+0x2a4>)
 800ad92:	e7dc      	b.n	800ad4e <pow+0x1f6>
 800ad94:	2200      	movs	r2, #0
 800ad96:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	f7f5 fdfc 	bl	8000998 <__aeabi_dcmpeq>
 800ada0:	2800      	cmp	r0, #0
 800ada2:	f43f af4b 	beq.w	800ac3c <pow+0xe4>
 800ada6:	4640      	mov	r0, r8
 800ada8:	4649      	mov	r1, r9
 800adaa:	f000 fdeb 	bl	800b984 <finite>
 800adae:	2800      	cmp	r0, #0
 800adb0:	f43f af44 	beq.w	800ac3c <pow+0xe4>
 800adb4:	4620      	mov	r0, r4
 800adb6:	4629      	mov	r1, r5
 800adb8:	f000 fde4 	bl	800b984 <finite>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	f43f af3d 	beq.w	800ac3c <pow+0xe4>
 800adc2:	2304      	movs	r3, #4
 800adc4:	9304      	str	r3, [sp, #16]
 800adc6:	4b0b      	ldr	r3, [pc, #44]	; (800adf4 <pow+0x29c>)
 800adc8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800adcc:	9305      	str	r3, [sp, #20]
 800adce:	2300      	movs	r3, #0
 800add0:	2400      	movs	r4, #0
 800add2:	930c      	str	r3, [sp, #48]	; 0x30
 800add4:	2300      	movs	r3, #0
 800add6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800adda:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800adde:	e7b8      	b.n	800ad52 <pow+0x1fa>
 800ade0:	a804      	add	r0, sp, #16
 800ade2:	f000 fdd5 	bl	800b990 <matherr>
 800ade6:	2800      	cmp	r0, #0
 800ade8:	f47f af1e 	bne.w	800ac28 <pow+0xd0>
 800adec:	e7b5      	b.n	800ad5a <pow+0x202>
 800adee:	bf00      	nop
 800adf0:	20000098 	.word	0x20000098
 800adf4:	0800bf70 	.word	0x0800bf70
 800adf8:	3ff00000 	.word	0x3ff00000
 800adfc:	fff00000 	.word	0xfff00000
 800ae00:	3fe00000 	.word	0x3fe00000
 800ae04:	47efffff 	.word	0x47efffff
 800ae08:	c7efffff 	.word	0xc7efffff
 800ae0c:	7ff00000 	.word	0x7ff00000

0800ae10 <__ieee754_pow>:
 800ae10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae14:	b091      	sub	sp, #68	; 0x44
 800ae16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae1a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800ae1e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800ae22:	ea55 0302 	orrs.w	r3, r5, r2
 800ae26:	4607      	mov	r7, r0
 800ae28:	4688      	mov	r8, r1
 800ae2a:	f000 84b7 	beq.w	800b79c <__ieee754_pow+0x98c>
 800ae2e:	4b80      	ldr	r3, [pc, #512]	; (800b030 <__ieee754_pow+0x220>)
 800ae30:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800ae34:	429c      	cmp	r4, r3
 800ae36:	4689      	mov	r9, r1
 800ae38:	4682      	mov	sl, r0
 800ae3a:	dc09      	bgt.n	800ae50 <__ieee754_pow+0x40>
 800ae3c:	d103      	bne.n	800ae46 <__ieee754_pow+0x36>
 800ae3e:	b938      	cbnz	r0, 800ae50 <__ieee754_pow+0x40>
 800ae40:	42a5      	cmp	r5, r4
 800ae42:	dc0d      	bgt.n	800ae60 <__ieee754_pow+0x50>
 800ae44:	e001      	b.n	800ae4a <__ieee754_pow+0x3a>
 800ae46:	429d      	cmp	r5, r3
 800ae48:	dc02      	bgt.n	800ae50 <__ieee754_pow+0x40>
 800ae4a:	429d      	cmp	r5, r3
 800ae4c:	d10e      	bne.n	800ae6c <__ieee754_pow+0x5c>
 800ae4e:	b16a      	cbz	r2, 800ae6c <__ieee754_pow+0x5c>
 800ae50:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ae54:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ae58:	ea54 030a 	orrs.w	r3, r4, sl
 800ae5c:	f000 849e 	beq.w	800b79c <__ieee754_pow+0x98c>
 800ae60:	4874      	ldr	r0, [pc, #464]	; (800b034 <__ieee754_pow+0x224>)
 800ae62:	b011      	add	sp, #68	; 0x44
 800ae64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae68:	f000 bd94 	b.w	800b994 <nan>
 800ae6c:	f1b9 0f00 	cmp.w	r9, #0
 800ae70:	da53      	bge.n	800af1a <__ieee754_pow+0x10a>
 800ae72:	4b71      	ldr	r3, [pc, #452]	; (800b038 <__ieee754_pow+0x228>)
 800ae74:	429d      	cmp	r5, r3
 800ae76:	dc4e      	bgt.n	800af16 <__ieee754_pow+0x106>
 800ae78:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ae7c:	429d      	cmp	r5, r3
 800ae7e:	dd4c      	ble.n	800af1a <__ieee754_pow+0x10a>
 800ae80:	152b      	asrs	r3, r5, #20
 800ae82:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ae86:	2b14      	cmp	r3, #20
 800ae88:	dd28      	ble.n	800aedc <__ieee754_pow+0xcc>
 800ae8a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ae8e:	fa22 f103 	lsr.w	r1, r2, r3
 800ae92:	fa01 f303 	lsl.w	r3, r1, r3
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d13f      	bne.n	800af1a <__ieee754_pow+0x10a>
 800ae9a:	f001 0101 	and.w	r1, r1, #1
 800ae9e:	f1c1 0302 	rsb	r3, r1, #2
 800aea2:	9300      	str	r3, [sp, #0]
 800aea4:	2a00      	cmp	r2, #0
 800aea6:	d15c      	bne.n	800af62 <__ieee754_pow+0x152>
 800aea8:	4b61      	ldr	r3, [pc, #388]	; (800b030 <__ieee754_pow+0x220>)
 800aeaa:	429d      	cmp	r5, r3
 800aeac:	d126      	bne.n	800aefc <__ieee754_pow+0xec>
 800aeae:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800aeb2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800aeb6:	ea53 030a 	orrs.w	r3, r3, sl
 800aeba:	f000 846f 	beq.w	800b79c <__ieee754_pow+0x98c>
 800aebe:	4b5f      	ldr	r3, [pc, #380]	; (800b03c <__ieee754_pow+0x22c>)
 800aec0:	429c      	cmp	r4, r3
 800aec2:	dd2c      	ble.n	800af1e <__ieee754_pow+0x10e>
 800aec4:	2e00      	cmp	r6, #0
 800aec6:	f280 846f 	bge.w	800b7a8 <__ieee754_pow+0x998>
 800aeca:	f04f 0b00 	mov.w	fp, #0
 800aece:	f04f 0c00 	mov.w	ip, #0
 800aed2:	4658      	mov	r0, fp
 800aed4:	4661      	mov	r1, ip
 800aed6:	b011      	add	sp, #68	; 0x44
 800aed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aedc:	2a00      	cmp	r2, #0
 800aede:	d13e      	bne.n	800af5e <__ieee754_pow+0x14e>
 800aee0:	f1c3 0314 	rsb	r3, r3, #20
 800aee4:	fa45 f103 	asr.w	r1, r5, r3
 800aee8:	fa01 f303 	lsl.w	r3, r1, r3
 800aeec:	42ab      	cmp	r3, r5
 800aeee:	f040 8463 	bne.w	800b7b8 <__ieee754_pow+0x9a8>
 800aef2:	f001 0101 	and.w	r1, r1, #1
 800aef6:	f1c1 0302 	rsb	r3, r1, #2
 800aefa:	9300      	str	r3, [sp, #0]
 800aefc:	4b50      	ldr	r3, [pc, #320]	; (800b040 <__ieee754_pow+0x230>)
 800aefe:	429d      	cmp	r5, r3
 800af00:	d114      	bne.n	800af2c <__ieee754_pow+0x11c>
 800af02:	2e00      	cmp	r6, #0
 800af04:	f280 8454 	bge.w	800b7b0 <__ieee754_pow+0x9a0>
 800af08:	463a      	mov	r2, r7
 800af0a:	4643      	mov	r3, r8
 800af0c:	2000      	movs	r0, #0
 800af0e:	494c      	ldr	r1, [pc, #304]	; (800b040 <__ieee754_pow+0x230>)
 800af10:	f7f5 fc04 	bl	800071c <__aeabi_ddiv>
 800af14:	e013      	b.n	800af3e <__ieee754_pow+0x12e>
 800af16:	2302      	movs	r3, #2
 800af18:	e7c3      	b.n	800aea2 <__ieee754_pow+0x92>
 800af1a:	2300      	movs	r3, #0
 800af1c:	e7c1      	b.n	800aea2 <__ieee754_pow+0x92>
 800af1e:	2e00      	cmp	r6, #0
 800af20:	dad3      	bge.n	800aeca <__ieee754_pow+0xba>
 800af22:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800af26:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800af2a:	e7d2      	b.n	800aed2 <__ieee754_pow+0xc2>
 800af2c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800af30:	d108      	bne.n	800af44 <__ieee754_pow+0x134>
 800af32:	463a      	mov	r2, r7
 800af34:	4643      	mov	r3, r8
 800af36:	4638      	mov	r0, r7
 800af38:	4641      	mov	r1, r8
 800af3a:	f7f5 fac5 	bl	80004c8 <__aeabi_dmul>
 800af3e:	4683      	mov	fp, r0
 800af40:	468c      	mov	ip, r1
 800af42:	e7c6      	b.n	800aed2 <__ieee754_pow+0xc2>
 800af44:	4b3f      	ldr	r3, [pc, #252]	; (800b044 <__ieee754_pow+0x234>)
 800af46:	429e      	cmp	r6, r3
 800af48:	d10b      	bne.n	800af62 <__ieee754_pow+0x152>
 800af4a:	f1b9 0f00 	cmp.w	r9, #0
 800af4e:	db08      	blt.n	800af62 <__ieee754_pow+0x152>
 800af50:	4638      	mov	r0, r7
 800af52:	4641      	mov	r1, r8
 800af54:	b011      	add	sp, #68	; 0x44
 800af56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af5a:	f000 bc63 	b.w	800b824 <__ieee754_sqrt>
 800af5e:	2300      	movs	r3, #0
 800af60:	9300      	str	r3, [sp, #0]
 800af62:	4638      	mov	r0, r7
 800af64:	4641      	mov	r1, r8
 800af66:	f000 fd09 	bl	800b97c <fabs>
 800af6a:	4683      	mov	fp, r0
 800af6c:	468c      	mov	ip, r1
 800af6e:	f1ba 0f00 	cmp.w	sl, #0
 800af72:	d12b      	bne.n	800afcc <__ieee754_pow+0x1bc>
 800af74:	b124      	cbz	r4, 800af80 <__ieee754_pow+0x170>
 800af76:	4b32      	ldr	r3, [pc, #200]	; (800b040 <__ieee754_pow+0x230>)
 800af78:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d125      	bne.n	800afcc <__ieee754_pow+0x1bc>
 800af80:	2e00      	cmp	r6, #0
 800af82:	da07      	bge.n	800af94 <__ieee754_pow+0x184>
 800af84:	465a      	mov	r2, fp
 800af86:	4663      	mov	r3, ip
 800af88:	2000      	movs	r0, #0
 800af8a:	492d      	ldr	r1, [pc, #180]	; (800b040 <__ieee754_pow+0x230>)
 800af8c:	f7f5 fbc6 	bl	800071c <__aeabi_ddiv>
 800af90:	4683      	mov	fp, r0
 800af92:	468c      	mov	ip, r1
 800af94:	f1b9 0f00 	cmp.w	r9, #0
 800af98:	da9b      	bge.n	800aed2 <__ieee754_pow+0xc2>
 800af9a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800af9e:	9b00      	ldr	r3, [sp, #0]
 800afa0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800afa4:	4323      	orrs	r3, r4
 800afa6:	d108      	bne.n	800afba <__ieee754_pow+0x1aa>
 800afa8:	465a      	mov	r2, fp
 800afaa:	4663      	mov	r3, ip
 800afac:	4658      	mov	r0, fp
 800afae:	4661      	mov	r1, ip
 800afb0:	f7f5 f8d2 	bl	8000158 <__aeabi_dsub>
 800afb4:	4602      	mov	r2, r0
 800afb6:	460b      	mov	r3, r1
 800afb8:	e7aa      	b.n	800af10 <__ieee754_pow+0x100>
 800afba:	9b00      	ldr	r3, [sp, #0]
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d188      	bne.n	800aed2 <__ieee754_pow+0xc2>
 800afc0:	4658      	mov	r0, fp
 800afc2:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800afc6:	4683      	mov	fp, r0
 800afc8:	469c      	mov	ip, r3
 800afca:	e782      	b.n	800aed2 <__ieee754_pow+0xc2>
 800afcc:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 800afd0:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800afd4:	930d      	str	r3, [sp, #52]	; 0x34
 800afd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800afd8:	9b00      	ldr	r3, [sp, #0]
 800afda:	4313      	orrs	r3, r2
 800afdc:	d104      	bne.n	800afe8 <__ieee754_pow+0x1d8>
 800afde:	463a      	mov	r2, r7
 800afe0:	4643      	mov	r3, r8
 800afe2:	4638      	mov	r0, r7
 800afe4:	4641      	mov	r1, r8
 800afe6:	e7e3      	b.n	800afb0 <__ieee754_pow+0x1a0>
 800afe8:	4b17      	ldr	r3, [pc, #92]	; (800b048 <__ieee754_pow+0x238>)
 800afea:	429d      	cmp	r5, r3
 800afec:	f340 80fe 	ble.w	800b1ec <__ieee754_pow+0x3dc>
 800aff0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800aff4:	429d      	cmp	r5, r3
 800aff6:	dd0b      	ble.n	800b010 <__ieee754_pow+0x200>
 800aff8:	4b10      	ldr	r3, [pc, #64]	; (800b03c <__ieee754_pow+0x22c>)
 800affa:	429c      	cmp	r4, r3
 800affc:	dc0e      	bgt.n	800b01c <__ieee754_pow+0x20c>
 800affe:	2e00      	cmp	r6, #0
 800b000:	f6bf af63 	bge.w	800aeca <__ieee754_pow+0xba>
 800b004:	a308      	add	r3, pc, #32	; (adr r3, 800b028 <__ieee754_pow+0x218>)
 800b006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00a:	4610      	mov	r0, r2
 800b00c:	4619      	mov	r1, r3
 800b00e:	e794      	b.n	800af3a <__ieee754_pow+0x12a>
 800b010:	4b0e      	ldr	r3, [pc, #56]	; (800b04c <__ieee754_pow+0x23c>)
 800b012:	429c      	cmp	r4, r3
 800b014:	ddf3      	ble.n	800affe <__ieee754_pow+0x1ee>
 800b016:	4b0a      	ldr	r3, [pc, #40]	; (800b040 <__ieee754_pow+0x230>)
 800b018:	429c      	cmp	r4, r3
 800b01a:	dd19      	ble.n	800b050 <__ieee754_pow+0x240>
 800b01c:	2e00      	cmp	r6, #0
 800b01e:	dcf1      	bgt.n	800b004 <__ieee754_pow+0x1f4>
 800b020:	e753      	b.n	800aeca <__ieee754_pow+0xba>
 800b022:	bf00      	nop
 800b024:	f3af 8000 	nop.w
 800b028:	8800759c 	.word	0x8800759c
 800b02c:	7e37e43c 	.word	0x7e37e43c
 800b030:	7ff00000 	.word	0x7ff00000
 800b034:	0800bf73 	.word	0x0800bf73
 800b038:	433fffff 	.word	0x433fffff
 800b03c:	3fefffff 	.word	0x3fefffff
 800b040:	3ff00000 	.word	0x3ff00000
 800b044:	3fe00000 	.word	0x3fe00000
 800b048:	41e00000 	.word	0x41e00000
 800b04c:	3feffffe 	.word	0x3feffffe
 800b050:	4661      	mov	r1, ip
 800b052:	2200      	movs	r2, #0
 800b054:	4b60      	ldr	r3, [pc, #384]	; (800b1d8 <__ieee754_pow+0x3c8>)
 800b056:	4658      	mov	r0, fp
 800b058:	f7f5 f87e 	bl	8000158 <__aeabi_dsub>
 800b05c:	a354      	add	r3, pc, #336	; (adr r3, 800b1b0 <__ieee754_pow+0x3a0>)
 800b05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b062:	4604      	mov	r4, r0
 800b064:	460d      	mov	r5, r1
 800b066:	f7f5 fa2f 	bl	80004c8 <__aeabi_dmul>
 800b06a:	a353      	add	r3, pc, #332	; (adr r3, 800b1b8 <__ieee754_pow+0x3a8>)
 800b06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b070:	4606      	mov	r6, r0
 800b072:	460f      	mov	r7, r1
 800b074:	4620      	mov	r0, r4
 800b076:	4629      	mov	r1, r5
 800b078:	f7f5 fa26 	bl	80004c8 <__aeabi_dmul>
 800b07c:	2200      	movs	r2, #0
 800b07e:	4682      	mov	sl, r0
 800b080:	468b      	mov	fp, r1
 800b082:	4b56      	ldr	r3, [pc, #344]	; (800b1dc <__ieee754_pow+0x3cc>)
 800b084:	4620      	mov	r0, r4
 800b086:	4629      	mov	r1, r5
 800b088:	f7f5 fa1e 	bl	80004c8 <__aeabi_dmul>
 800b08c:	4602      	mov	r2, r0
 800b08e:	460b      	mov	r3, r1
 800b090:	a14b      	add	r1, pc, #300	; (adr r1, 800b1c0 <__ieee754_pow+0x3b0>)
 800b092:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b096:	f7f5 f85f 	bl	8000158 <__aeabi_dsub>
 800b09a:	4622      	mov	r2, r4
 800b09c:	462b      	mov	r3, r5
 800b09e:	f7f5 fa13 	bl	80004c8 <__aeabi_dmul>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	2000      	movs	r0, #0
 800b0a8:	494d      	ldr	r1, [pc, #308]	; (800b1e0 <__ieee754_pow+0x3d0>)
 800b0aa:	f7f5 f855 	bl	8000158 <__aeabi_dsub>
 800b0ae:	4622      	mov	r2, r4
 800b0b0:	462b      	mov	r3, r5
 800b0b2:	4680      	mov	r8, r0
 800b0b4:	4689      	mov	r9, r1
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	4629      	mov	r1, r5
 800b0ba:	f7f5 fa05 	bl	80004c8 <__aeabi_dmul>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	4640      	mov	r0, r8
 800b0c4:	4649      	mov	r1, r9
 800b0c6:	f7f5 f9ff 	bl	80004c8 <__aeabi_dmul>
 800b0ca:	a33f      	add	r3, pc, #252	; (adr r3, 800b1c8 <__ieee754_pow+0x3b8>)
 800b0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d0:	f7f5 f9fa 	bl	80004c8 <__aeabi_dmul>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	4650      	mov	r0, sl
 800b0da:	4659      	mov	r1, fp
 800b0dc:	f7f5 f83c 	bl	8000158 <__aeabi_dsub>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	4604      	mov	r4, r0
 800b0e6:	460d      	mov	r5, r1
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	4639      	mov	r1, r7
 800b0ec:	f7f5 f836 	bl	800015c <__adddf3>
 800b0f0:	2000      	movs	r0, #0
 800b0f2:	468b      	mov	fp, r1
 800b0f4:	4682      	mov	sl, r0
 800b0f6:	4632      	mov	r2, r6
 800b0f8:	463b      	mov	r3, r7
 800b0fa:	f7f5 f82d 	bl	8000158 <__aeabi_dsub>
 800b0fe:	4602      	mov	r2, r0
 800b100:	460b      	mov	r3, r1
 800b102:	4620      	mov	r0, r4
 800b104:	4629      	mov	r1, r5
 800b106:	f7f5 f827 	bl	8000158 <__aeabi_dsub>
 800b10a:	9b00      	ldr	r3, [sp, #0]
 800b10c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b10e:	3b01      	subs	r3, #1
 800b110:	4313      	orrs	r3, r2
 800b112:	f04f 0300 	mov.w	r3, #0
 800b116:	bf0c      	ite	eq
 800b118:	4c32      	ldreq	r4, [pc, #200]	; (800b1e4 <__ieee754_pow+0x3d4>)
 800b11a:	4c2f      	ldrne	r4, [pc, #188]	; (800b1d8 <__ieee754_pow+0x3c8>)
 800b11c:	4606      	mov	r6, r0
 800b11e:	e9cd 3400 	strd	r3, r4, [sp]
 800b122:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b126:	2400      	movs	r4, #0
 800b128:	460f      	mov	r7, r1
 800b12a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b12e:	4622      	mov	r2, r4
 800b130:	462b      	mov	r3, r5
 800b132:	f7f5 f811 	bl	8000158 <__aeabi_dsub>
 800b136:	4652      	mov	r2, sl
 800b138:	465b      	mov	r3, fp
 800b13a:	f7f5 f9c5 	bl	80004c8 <__aeabi_dmul>
 800b13e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b142:	4680      	mov	r8, r0
 800b144:	4689      	mov	r9, r1
 800b146:	4630      	mov	r0, r6
 800b148:	4639      	mov	r1, r7
 800b14a:	f7f5 f9bd 	bl	80004c8 <__aeabi_dmul>
 800b14e:	4602      	mov	r2, r0
 800b150:	460b      	mov	r3, r1
 800b152:	4640      	mov	r0, r8
 800b154:	4649      	mov	r1, r9
 800b156:	f7f5 f801 	bl	800015c <__adddf3>
 800b15a:	4622      	mov	r2, r4
 800b15c:	462b      	mov	r3, r5
 800b15e:	4680      	mov	r8, r0
 800b160:	4689      	mov	r9, r1
 800b162:	4650      	mov	r0, sl
 800b164:	4659      	mov	r1, fp
 800b166:	f7f5 f9af 	bl	80004c8 <__aeabi_dmul>
 800b16a:	4604      	mov	r4, r0
 800b16c:	460d      	mov	r5, r1
 800b16e:	460b      	mov	r3, r1
 800b170:	4602      	mov	r2, r0
 800b172:	4649      	mov	r1, r9
 800b174:	4640      	mov	r0, r8
 800b176:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b17a:	f7f4 ffef 	bl	800015c <__adddf3>
 800b17e:	4b1a      	ldr	r3, [pc, #104]	; (800b1e8 <__ieee754_pow+0x3d8>)
 800b180:	4682      	mov	sl, r0
 800b182:	4299      	cmp	r1, r3
 800b184:	460f      	mov	r7, r1
 800b186:	460e      	mov	r6, r1
 800b188:	f340 82e1 	ble.w	800b74e <__ieee754_pow+0x93e>
 800b18c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b190:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b194:	4303      	orrs	r3, r0
 800b196:	f000 81db 	beq.w	800b550 <__ieee754_pow+0x740>
 800b19a:	a30d      	add	r3, pc, #52	; (adr r3, 800b1d0 <__ieee754_pow+0x3c0>)
 800b19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1a4:	f7f5 f990 	bl	80004c8 <__aeabi_dmul>
 800b1a8:	a309      	add	r3, pc, #36	; (adr r3, 800b1d0 <__ieee754_pow+0x3c0>)
 800b1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ae:	e6c4      	b.n	800af3a <__ieee754_pow+0x12a>
 800b1b0:	60000000 	.word	0x60000000
 800b1b4:	3ff71547 	.word	0x3ff71547
 800b1b8:	f85ddf44 	.word	0xf85ddf44
 800b1bc:	3e54ae0b 	.word	0x3e54ae0b
 800b1c0:	55555555 	.word	0x55555555
 800b1c4:	3fd55555 	.word	0x3fd55555
 800b1c8:	652b82fe 	.word	0x652b82fe
 800b1cc:	3ff71547 	.word	0x3ff71547
 800b1d0:	8800759c 	.word	0x8800759c
 800b1d4:	7e37e43c 	.word	0x7e37e43c
 800b1d8:	3ff00000 	.word	0x3ff00000
 800b1dc:	3fd00000 	.word	0x3fd00000
 800b1e0:	3fe00000 	.word	0x3fe00000
 800b1e4:	bff00000 	.word	0xbff00000
 800b1e8:	408fffff 	.word	0x408fffff
 800b1ec:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b1f0:	f04f 0200 	mov.w	r2, #0
 800b1f4:	da08      	bge.n	800b208 <__ieee754_pow+0x3f8>
 800b1f6:	4658      	mov	r0, fp
 800b1f8:	4bcd      	ldr	r3, [pc, #820]	; (800b530 <__ieee754_pow+0x720>)
 800b1fa:	4661      	mov	r1, ip
 800b1fc:	f7f5 f964 	bl	80004c8 <__aeabi_dmul>
 800b200:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b204:	4683      	mov	fp, r0
 800b206:	460c      	mov	r4, r1
 800b208:	1523      	asrs	r3, r4, #20
 800b20a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b20e:	4413      	add	r3, r2
 800b210:	930c      	str	r3, [sp, #48]	; 0x30
 800b212:	4bc8      	ldr	r3, [pc, #800]	; (800b534 <__ieee754_pow+0x724>)
 800b214:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b218:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b21c:	429c      	cmp	r4, r3
 800b21e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b222:	dd08      	ble.n	800b236 <__ieee754_pow+0x426>
 800b224:	4bc4      	ldr	r3, [pc, #784]	; (800b538 <__ieee754_pow+0x728>)
 800b226:	429c      	cmp	r4, r3
 800b228:	f340 815b 	ble.w	800b4e2 <__ieee754_pow+0x6d2>
 800b22c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b22e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b232:	3301      	adds	r3, #1
 800b234:	930c      	str	r3, [sp, #48]	; 0x30
 800b236:	f04f 0800 	mov.w	r8, #0
 800b23a:	4658      	mov	r0, fp
 800b23c:	4629      	mov	r1, r5
 800b23e:	4bbf      	ldr	r3, [pc, #764]	; (800b53c <__ieee754_pow+0x72c>)
 800b240:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800b244:	444b      	add	r3, r9
 800b246:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b24a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b24e:	461a      	mov	r2, r3
 800b250:	4623      	mov	r3, r4
 800b252:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b256:	f7f4 ff7f 	bl	8000158 <__aeabi_dsub>
 800b25a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b25e:	4606      	mov	r6, r0
 800b260:	460f      	mov	r7, r1
 800b262:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b266:	f7f4 ff79 	bl	800015c <__adddf3>
 800b26a:	4602      	mov	r2, r0
 800b26c:	460b      	mov	r3, r1
 800b26e:	2000      	movs	r0, #0
 800b270:	49b3      	ldr	r1, [pc, #716]	; (800b540 <__ieee754_pow+0x730>)
 800b272:	f7f5 fa53 	bl	800071c <__aeabi_ddiv>
 800b276:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b27a:	4602      	mov	r2, r0
 800b27c:	460b      	mov	r3, r1
 800b27e:	4630      	mov	r0, r6
 800b280:	4639      	mov	r1, r7
 800b282:	f7f5 f921 	bl	80004c8 <__aeabi_dmul>
 800b286:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b28a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b28e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b292:	2300      	movs	r3, #0
 800b294:	2200      	movs	r2, #0
 800b296:	106d      	asrs	r5, r5, #1
 800b298:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b29c:	9304      	str	r3, [sp, #16]
 800b29e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b2a2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b2a6:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800b2aa:	4650      	mov	r0, sl
 800b2ac:	4659      	mov	r1, fp
 800b2ae:	4614      	mov	r4, r2
 800b2b0:	461d      	mov	r5, r3
 800b2b2:	f7f5 f909 	bl	80004c8 <__aeabi_dmul>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	4639      	mov	r1, r7
 800b2be:	f7f4 ff4b 	bl	8000158 <__aeabi_dsub>
 800b2c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b2c6:	4606      	mov	r6, r0
 800b2c8:	460f      	mov	r7, r1
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	4629      	mov	r1, r5
 800b2ce:	f7f4 ff43 	bl	8000158 <__aeabi_dsub>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b2da:	f7f4 ff3d 	bl	8000158 <__aeabi_dsub>
 800b2de:	4652      	mov	r2, sl
 800b2e0:	465b      	mov	r3, fp
 800b2e2:	f7f5 f8f1 	bl	80004c8 <__aeabi_dmul>
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	4630      	mov	r0, r6
 800b2ec:	4639      	mov	r1, r7
 800b2ee:	f7f4 ff33 	bl	8000158 <__aeabi_dsub>
 800b2f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b2f6:	f7f5 f8e7 	bl	80004c8 <__aeabi_dmul>
 800b2fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b2fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b302:	4610      	mov	r0, r2
 800b304:	4619      	mov	r1, r3
 800b306:	f7f5 f8df 	bl	80004c8 <__aeabi_dmul>
 800b30a:	a377      	add	r3, pc, #476	; (adr r3, 800b4e8 <__ieee754_pow+0x6d8>)
 800b30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b310:	4604      	mov	r4, r0
 800b312:	460d      	mov	r5, r1
 800b314:	f7f5 f8d8 	bl	80004c8 <__aeabi_dmul>
 800b318:	a375      	add	r3, pc, #468	; (adr r3, 800b4f0 <__ieee754_pow+0x6e0>)
 800b31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31e:	f7f4 ff1d 	bl	800015c <__adddf3>
 800b322:	4622      	mov	r2, r4
 800b324:	462b      	mov	r3, r5
 800b326:	f7f5 f8cf 	bl	80004c8 <__aeabi_dmul>
 800b32a:	a373      	add	r3, pc, #460	; (adr r3, 800b4f8 <__ieee754_pow+0x6e8>)
 800b32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b330:	f7f4 ff14 	bl	800015c <__adddf3>
 800b334:	4622      	mov	r2, r4
 800b336:	462b      	mov	r3, r5
 800b338:	f7f5 f8c6 	bl	80004c8 <__aeabi_dmul>
 800b33c:	a370      	add	r3, pc, #448	; (adr r3, 800b500 <__ieee754_pow+0x6f0>)
 800b33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b342:	f7f4 ff0b 	bl	800015c <__adddf3>
 800b346:	4622      	mov	r2, r4
 800b348:	462b      	mov	r3, r5
 800b34a:	f7f5 f8bd 	bl	80004c8 <__aeabi_dmul>
 800b34e:	a36e      	add	r3, pc, #440	; (adr r3, 800b508 <__ieee754_pow+0x6f8>)
 800b350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b354:	f7f4 ff02 	bl	800015c <__adddf3>
 800b358:	4622      	mov	r2, r4
 800b35a:	462b      	mov	r3, r5
 800b35c:	f7f5 f8b4 	bl	80004c8 <__aeabi_dmul>
 800b360:	a36b      	add	r3, pc, #428	; (adr r3, 800b510 <__ieee754_pow+0x700>)
 800b362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b366:	f7f4 fef9 	bl	800015c <__adddf3>
 800b36a:	4622      	mov	r2, r4
 800b36c:	4606      	mov	r6, r0
 800b36e:	460f      	mov	r7, r1
 800b370:	462b      	mov	r3, r5
 800b372:	4620      	mov	r0, r4
 800b374:	4629      	mov	r1, r5
 800b376:	f7f5 f8a7 	bl	80004c8 <__aeabi_dmul>
 800b37a:	4602      	mov	r2, r0
 800b37c:	460b      	mov	r3, r1
 800b37e:	4630      	mov	r0, r6
 800b380:	4639      	mov	r1, r7
 800b382:	f7f5 f8a1 	bl	80004c8 <__aeabi_dmul>
 800b386:	4604      	mov	r4, r0
 800b388:	460d      	mov	r5, r1
 800b38a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b38e:	4652      	mov	r2, sl
 800b390:	465b      	mov	r3, fp
 800b392:	f7f4 fee3 	bl	800015c <__adddf3>
 800b396:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b39a:	f7f5 f895 	bl	80004c8 <__aeabi_dmul>
 800b39e:	4622      	mov	r2, r4
 800b3a0:	462b      	mov	r3, r5
 800b3a2:	f7f4 fedb 	bl	800015c <__adddf3>
 800b3a6:	4652      	mov	r2, sl
 800b3a8:	4606      	mov	r6, r0
 800b3aa:	460f      	mov	r7, r1
 800b3ac:	465b      	mov	r3, fp
 800b3ae:	4650      	mov	r0, sl
 800b3b0:	4659      	mov	r1, fp
 800b3b2:	f7f5 f889 	bl	80004c8 <__aeabi_dmul>
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	4b62      	ldr	r3, [pc, #392]	; (800b544 <__ieee754_pow+0x734>)
 800b3ba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b3be:	f7f4 fecd 	bl	800015c <__adddf3>
 800b3c2:	4632      	mov	r2, r6
 800b3c4:	463b      	mov	r3, r7
 800b3c6:	f7f4 fec9 	bl	800015c <__adddf3>
 800b3ca:	9804      	ldr	r0, [sp, #16]
 800b3cc:	460d      	mov	r5, r1
 800b3ce:	4604      	mov	r4, r0
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	4650      	mov	r0, sl
 800b3d6:	4659      	mov	r1, fp
 800b3d8:	f7f5 f876 	bl	80004c8 <__aeabi_dmul>
 800b3dc:	2200      	movs	r2, #0
 800b3de:	4682      	mov	sl, r0
 800b3e0:	468b      	mov	fp, r1
 800b3e2:	4b58      	ldr	r3, [pc, #352]	; (800b544 <__ieee754_pow+0x734>)
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	4629      	mov	r1, r5
 800b3e8:	f7f4 feb6 	bl	8000158 <__aeabi_dsub>
 800b3ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b3f0:	f7f4 feb2 	bl	8000158 <__aeabi_dsub>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	4630      	mov	r0, r6
 800b3fa:	4639      	mov	r1, r7
 800b3fc:	f7f4 feac 	bl	8000158 <__aeabi_dsub>
 800b400:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b404:	f7f5 f860 	bl	80004c8 <__aeabi_dmul>
 800b408:	4622      	mov	r2, r4
 800b40a:	4606      	mov	r6, r0
 800b40c:	460f      	mov	r7, r1
 800b40e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b412:	462b      	mov	r3, r5
 800b414:	f7f5 f858 	bl	80004c8 <__aeabi_dmul>
 800b418:	4602      	mov	r2, r0
 800b41a:	460b      	mov	r3, r1
 800b41c:	4630      	mov	r0, r6
 800b41e:	4639      	mov	r1, r7
 800b420:	f7f4 fe9c 	bl	800015c <__adddf3>
 800b424:	4606      	mov	r6, r0
 800b426:	460f      	mov	r7, r1
 800b428:	4602      	mov	r2, r0
 800b42a:	460b      	mov	r3, r1
 800b42c:	4650      	mov	r0, sl
 800b42e:	4659      	mov	r1, fp
 800b430:	f7f4 fe94 	bl	800015c <__adddf3>
 800b434:	a338      	add	r3, pc, #224	; (adr r3, 800b518 <__ieee754_pow+0x708>)
 800b436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43a:	9804      	ldr	r0, [sp, #16]
 800b43c:	460d      	mov	r5, r1
 800b43e:	4604      	mov	r4, r0
 800b440:	f7f5 f842 	bl	80004c8 <__aeabi_dmul>
 800b444:	4652      	mov	r2, sl
 800b446:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b44a:	465b      	mov	r3, fp
 800b44c:	4620      	mov	r0, r4
 800b44e:	4629      	mov	r1, r5
 800b450:	f7f4 fe82 	bl	8000158 <__aeabi_dsub>
 800b454:	4602      	mov	r2, r0
 800b456:	460b      	mov	r3, r1
 800b458:	4630      	mov	r0, r6
 800b45a:	4639      	mov	r1, r7
 800b45c:	f7f4 fe7c 	bl	8000158 <__aeabi_dsub>
 800b460:	a32f      	add	r3, pc, #188	; (adr r3, 800b520 <__ieee754_pow+0x710>)
 800b462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b466:	f7f5 f82f 	bl	80004c8 <__aeabi_dmul>
 800b46a:	a32f      	add	r3, pc, #188	; (adr r3, 800b528 <__ieee754_pow+0x718>)
 800b46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b470:	4606      	mov	r6, r0
 800b472:	460f      	mov	r7, r1
 800b474:	4620      	mov	r0, r4
 800b476:	4629      	mov	r1, r5
 800b478:	f7f5 f826 	bl	80004c8 <__aeabi_dmul>
 800b47c:	4602      	mov	r2, r0
 800b47e:	460b      	mov	r3, r1
 800b480:	4630      	mov	r0, r6
 800b482:	4639      	mov	r1, r7
 800b484:	f7f4 fe6a 	bl	800015c <__adddf3>
 800b488:	4b2f      	ldr	r3, [pc, #188]	; (800b548 <__ieee754_pow+0x738>)
 800b48a:	444b      	add	r3, r9
 800b48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b490:	f7f4 fe64 	bl	800015c <__adddf3>
 800b494:	4604      	mov	r4, r0
 800b496:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b498:	460d      	mov	r5, r1
 800b49a:	f7f4 ffab 	bl	80003f4 <__aeabi_i2d>
 800b49e:	4606      	mov	r6, r0
 800b4a0:	460f      	mov	r7, r1
 800b4a2:	4b2a      	ldr	r3, [pc, #168]	; (800b54c <__ieee754_pow+0x73c>)
 800b4a4:	4622      	mov	r2, r4
 800b4a6:	444b      	add	r3, r9
 800b4a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4ac:	462b      	mov	r3, r5
 800b4ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4b2:	f7f4 fe53 	bl	800015c <__adddf3>
 800b4b6:	4642      	mov	r2, r8
 800b4b8:	464b      	mov	r3, r9
 800b4ba:	f7f4 fe4f 	bl	800015c <__adddf3>
 800b4be:	4632      	mov	r2, r6
 800b4c0:	463b      	mov	r3, r7
 800b4c2:	f7f4 fe4b 	bl	800015c <__adddf3>
 800b4c6:	9804      	ldr	r0, [sp, #16]
 800b4c8:	4632      	mov	r2, r6
 800b4ca:	463b      	mov	r3, r7
 800b4cc:	4682      	mov	sl, r0
 800b4ce:	468b      	mov	fp, r1
 800b4d0:	f7f4 fe42 	bl	8000158 <__aeabi_dsub>
 800b4d4:	4642      	mov	r2, r8
 800b4d6:	464b      	mov	r3, r9
 800b4d8:	f7f4 fe3e 	bl	8000158 <__aeabi_dsub>
 800b4dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4e0:	e60b      	b.n	800b0fa <__ieee754_pow+0x2ea>
 800b4e2:	f04f 0801 	mov.w	r8, #1
 800b4e6:	e6a8      	b.n	800b23a <__ieee754_pow+0x42a>
 800b4e8:	4a454eef 	.word	0x4a454eef
 800b4ec:	3fca7e28 	.word	0x3fca7e28
 800b4f0:	93c9db65 	.word	0x93c9db65
 800b4f4:	3fcd864a 	.word	0x3fcd864a
 800b4f8:	a91d4101 	.word	0xa91d4101
 800b4fc:	3fd17460 	.word	0x3fd17460
 800b500:	518f264d 	.word	0x518f264d
 800b504:	3fd55555 	.word	0x3fd55555
 800b508:	db6fabff 	.word	0xdb6fabff
 800b50c:	3fdb6db6 	.word	0x3fdb6db6
 800b510:	33333303 	.word	0x33333303
 800b514:	3fe33333 	.word	0x3fe33333
 800b518:	e0000000 	.word	0xe0000000
 800b51c:	3feec709 	.word	0x3feec709
 800b520:	dc3a03fd 	.word	0xdc3a03fd
 800b524:	3feec709 	.word	0x3feec709
 800b528:	145b01f5 	.word	0x145b01f5
 800b52c:	be3e2fe0 	.word	0xbe3e2fe0
 800b530:	43400000 	.word	0x43400000
 800b534:	0003988e 	.word	0x0003988e
 800b538:	000bb679 	.word	0x000bb679
 800b53c:	0800bf78 	.word	0x0800bf78
 800b540:	3ff00000 	.word	0x3ff00000
 800b544:	40080000 	.word	0x40080000
 800b548:	0800bf98 	.word	0x0800bf98
 800b54c:	0800bf88 	.word	0x0800bf88
 800b550:	a39b      	add	r3, pc, #620	; (adr r3, 800b7c0 <__ieee754_pow+0x9b0>)
 800b552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b556:	4640      	mov	r0, r8
 800b558:	4649      	mov	r1, r9
 800b55a:	f7f4 fdff 	bl	800015c <__adddf3>
 800b55e:	4622      	mov	r2, r4
 800b560:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b564:	462b      	mov	r3, r5
 800b566:	4650      	mov	r0, sl
 800b568:	4639      	mov	r1, r7
 800b56a:	f7f4 fdf5 	bl	8000158 <__aeabi_dsub>
 800b56e:	4602      	mov	r2, r0
 800b570:	460b      	mov	r3, r1
 800b572:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b576:	f7f5 fa37 	bl	80009e8 <__aeabi_dcmpgt>
 800b57a:	2800      	cmp	r0, #0
 800b57c:	f47f ae0d 	bne.w	800b19a <__ieee754_pow+0x38a>
 800b580:	4aa3      	ldr	r2, [pc, #652]	; (800b810 <__ieee754_pow+0xa00>)
 800b582:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800b586:	4293      	cmp	r3, r2
 800b588:	f340 8103 	ble.w	800b792 <__ieee754_pow+0x982>
 800b58c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b590:	2000      	movs	r0, #0
 800b592:	151b      	asrs	r3, r3, #20
 800b594:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b598:	fa4a f303 	asr.w	r3, sl, r3
 800b59c:	4433      	add	r3, r6
 800b59e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b5a2:	4f9c      	ldr	r7, [pc, #624]	; (800b814 <__ieee754_pow+0xa04>)
 800b5a4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b5a8:	4117      	asrs	r7, r2
 800b5aa:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b5ae:	ea23 0107 	bic.w	r1, r3, r7
 800b5b2:	f1c2 0214 	rsb	r2, r2, #20
 800b5b6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b5ba:	fa4a fa02 	asr.w	sl, sl, r2
 800b5be:	2e00      	cmp	r6, #0
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	4629      	mov	r1, r5
 800b5c8:	bfb8      	it	lt
 800b5ca:	f1ca 0a00 	rsblt	sl, sl, #0
 800b5ce:	f7f4 fdc3 	bl	8000158 <__aeabi_dsub>
 800b5d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5da:	4642      	mov	r2, r8
 800b5dc:	464b      	mov	r3, r9
 800b5de:	f7f4 fdbd 	bl	800015c <__adddf3>
 800b5e2:	a379      	add	r3, pc, #484	; (adr r3, 800b7c8 <__ieee754_pow+0x9b8>)
 800b5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e8:	2000      	movs	r0, #0
 800b5ea:	460d      	mov	r5, r1
 800b5ec:	4604      	mov	r4, r0
 800b5ee:	f7f4 ff6b 	bl	80004c8 <__aeabi_dmul>
 800b5f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5f6:	4606      	mov	r6, r0
 800b5f8:	460f      	mov	r7, r1
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	4629      	mov	r1, r5
 800b5fe:	f7f4 fdab 	bl	8000158 <__aeabi_dsub>
 800b602:	4602      	mov	r2, r0
 800b604:	460b      	mov	r3, r1
 800b606:	4640      	mov	r0, r8
 800b608:	4649      	mov	r1, r9
 800b60a:	f7f4 fda5 	bl	8000158 <__aeabi_dsub>
 800b60e:	a370      	add	r3, pc, #448	; (adr r3, 800b7d0 <__ieee754_pow+0x9c0>)
 800b610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b614:	f7f4 ff58 	bl	80004c8 <__aeabi_dmul>
 800b618:	a36f      	add	r3, pc, #444	; (adr r3, 800b7d8 <__ieee754_pow+0x9c8>)
 800b61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61e:	4680      	mov	r8, r0
 800b620:	4689      	mov	r9, r1
 800b622:	4620      	mov	r0, r4
 800b624:	4629      	mov	r1, r5
 800b626:	f7f4 ff4f 	bl	80004c8 <__aeabi_dmul>
 800b62a:	4602      	mov	r2, r0
 800b62c:	460b      	mov	r3, r1
 800b62e:	4640      	mov	r0, r8
 800b630:	4649      	mov	r1, r9
 800b632:	f7f4 fd93 	bl	800015c <__adddf3>
 800b636:	4604      	mov	r4, r0
 800b638:	460d      	mov	r5, r1
 800b63a:	4602      	mov	r2, r0
 800b63c:	460b      	mov	r3, r1
 800b63e:	4630      	mov	r0, r6
 800b640:	4639      	mov	r1, r7
 800b642:	f7f4 fd8b 	bl	800015c <__adddf3>
 800b646:	4632      	mov	r2, r6
 800b648:	463b      	mov	r3, r7
 800b64a:	4680      	mov	r8, r0
 800b64c:	4689      	mov	r9, r1
 800b64e:	f7f4 fd83 	bl	8000158 <__aeabi_dsub>
 800b652:	4602      	mov	r2, r0
 800b654:	460b      	mov	r3, r1
 800b656:	4620      	mov	r0, r4
 800b658:	4629      	mov	r1, r5
 800b65a:	f7f4 fd7d 	bl	8000158 <__aeabi_dsub>
 800b65e:	4642      	mov	r2, r8
 800b660:	4606      	mov	r6, r0
 800b662:	460f      	mov	r7, r1
 800b664:	464b      	mov	r3, r9
 800b666:	4640      	mov	r0, r8
 800b668:	4649      	mov	r1, r9
 800b66a:	f7f4 ff2d 	bl	80004c8 <__aeabi_dmul>
 800b66e:	a35c      	add	r3, pc, #368	; (adr r3, 800b7e0 <__ieee754_pow+0x9d0>)
 800b670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b674:	4604      	mov	r4, r0
 800b676:	460d      	mov	r5, r1
 800b678:	f7f4 ff26 	bl	80004c8 <__aeabi_dmul>
 800b67c:	a35a      	add	r3, pc, #360	; (adr r3, 800b7e8 <__ieee754_pow+0x9d8>)
 800b67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b682:	f7f4 fd69 	bl	8000158 <__aeabi_dsub>
 800b686:	4622      	mov	r2, r4
 800b688:	462b      	mov	r3, r5
 800b68a:	f7f4 ff1d 	bl	80004c8 <__aeabi_dmul>
 800b68e:	a358      	add	r3, pc, #352	; (adr r3, 800b7f0 <__ieee754_pow+0x9e0>)
 800b690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b694:	f7f4 fd62 	bl	800015c <__adddf3>
 800b698:	4622      	mov	r2, r4
 800b69a:	462b      	mov	r3, r5
 800b69c:	f7f4 ff14 	bl	80004c8 <__aeabi_dmul>
 800b6a0:	a355      	add	r3, pc, #340	; (adr r3, 800b7f8 <__ieee754_pow+0x9e8>)
 800b6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a6:	f7f4 fd57 	bl	8000158 <__aeabi_dsub>
 800b6aa:	4622      	mov	r2, r4
 800b6ac:	462b      	mov	r3, r5
 800b6ae:	f7f4 ff0b 	bl	80004c8 <__aeabi_dmul>
 800b6b2:	a353      	add	r3, pc, #332	; (adr r3, 800b800 <__ieee754_pow+0x9f0>)
 800b6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b8:	f7f4 fd50 	bl	800015c <__adddf3>
 800b6bc:	4622      	mov	r2, r4
 800b6be:	462b      	mov	r3, r5
 800b6c0:	f7f4 ff02 	bl	80004c8 <__aeabi_dmul>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	4640      	mov	r0, r8
 800b6ca:	4649      	mov	r1, r9
 800b6cc:	f7f4 fd44 	bl	8000158 <__aeabi_dsub>
 800b6d0:	4604      	mov	r4, r0
 800b6d2:	460d      	mov	r5, r1
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	4640      	mov	r0, r8
 800b6da:	4649      	mov	r1, r9
 800b6dc:	f7f4 fef4 	bl	80004c8 <__aeabi_dmul>
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	4629      	mov	r1, r5
 800b6ee:	f7f4 fd33 	bl	8000158 <__aeabi_dsub>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6fa:	f7f5 f80f 	bl	800071c <__aeabi_ddiv>
 800b6fe:	4632      	mov	r2, r6
 800b700:	4604      	mov	r4, r0
 800b702:	460d      	mov	r5, r1
 800b704:	463b      	mov	r3, r7
 800b706:	4640      	mov	r0, r8
 800b708:	4649      	mov	r1, r9
 800b70a:	f7f4 fedd 	bl	80004c8 <__aeabi_dmul>
 800b70e:	4632      	mov	r2, r6
 800b710:	463b      	mov	r3, r7
 800b712:	f7f4 fd23 	bl	800015c <__adddf3>
 800b716:	4602      	mov	r2, r0
 800b718:	460b      	mov	r3, r1
 800b71a:	4620      	mov	r0, r4
 800b71c:	4629      	mov	r1, r5
 800b71e:	f7f4 fd1b 	bl	8000158 <__aeabi_dsub>
 800b722:	4642      	mov	r2, r8
 800b724:	464b      	mov	r3, r9
 800b726:	f7f4 fd17 	bl	8000158 <__aeabi_dsub>
 800b72a:	4602      	mov	r2, r0
 800b72c:	460b      	mov	r3, r1
 800b72e:	2000      	movs	r0, #0
 800b730:	4939      	ldr	r1, [pc, #228]	; (800b818 <__ieee754_pow+0xa08>)
 800b732:	f7f4 fd11 	bl	8000158 <__aeabi_dsub>
 800b736:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b73a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b73e:	da2b      	bge.n	800b798 <__ieee754_pow+0x988>
 800b740:	4652      	mov	r2, sl
 800b742:	f000 f9b9 	bl	800bab8 <scalbn>
 800b746:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b74a:	f7ff bbf6 	b.w	800af3a <__ieee754_pow+0x12a>
 800b74e:	4b33      	ldr	r3, [pc, #204]	; (800b81c <__ieee754_pow+0xa0c>)
 800b750:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b754:	429f      	cmp	r7, r3
 800b756:	f77f af13 	ble.w	800b580 <__ieee754_pow+0x770>
 800b75a:	4b31      	ldr	r3, [pc, #196]	; (800b820 <__ieee754_pow+0xa10>)
 800b75c:	440b      	add	r3, r1
 800b75e:	4303      	orrs	r3, r0
 800b760:	d00b      	beq.n	800b77a <__ieee754_pow+0x96a>
 800b762:	a329      	add	r3, pc, #164	; (adr r3, 800b808 <__ieee754_pow+0x9f8>)
 800b764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b768:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b76c:	f7f4 feac 	bl	80004c8 <__aeabi_dmul>
 800b770:	a325      	add	r3, pc, #148	; (adr r3, 800b808 <__ieee754_pow+0x9f8>)
 800b772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b776:	f7ff bbe0 	b.w	800af3a <__ieee754_pow+0x12a>
 800b77a:	4622      	mov	r2, r4
 800b77c:	462b      	mov	r3, r5
 800b77e:	f7f4 fceb 	bl	8000158 <__aeabi_dsub>
 800b782:	4642      	mov	r2, r8
 800b784:	464b      	mov	r3, r9
 800b786:	f7f5 f925 	bl	80009d4 <__aeabi_dcmpge>
 800b78a:	2800      	cmp	r0, #0
 800b78c:	f43f aef8 	beq.w	800b580 <__ieee754_pow+0x770>
 800b790:	e7e7      	b.n	800b762 <__ieee754_pow+0x952>
 800b792:	f04f 0a00 	mov.w	sl, #0
 800b796:	e71e      	b.n	800b5d6 <__ieee754_pow+0x7c6>
 800b798:	4621      	mov	r1, r4
 800b79a:	e7d4      	b.n	800b746 <__ieee754_pow+0x936>
 800b79c:	f04f 0b00 	mov.w	fp, #0
 800b7a0:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b818 <__ieee754_pow+0xa08>
 800b7a4:	f7ff bb95 	b.w	800aed2 <__ieee754_pow+0xc2>
 800b7a8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800b7ac:	f7ff bb91 	b.w	800aed2 <__ieee754_pow+0xc2>
 800b7b0:	4638      	mov	r0, r7
 800b7b2:	4641      	mov	r1, r8
 800b7b4:	f7ff bbc3 	b.w	800af3e <__ieee754_pow+0x12e>
 800b7b8:	9200      	str	r2, [sp, #0]
 800b7ba:	f7ff bb9f 	b.w	800aefc <__ieee754_pow+0xec>
 800b7be:	bf00      	nop
 800b7c0:	652b82fe 	.word	0x652b82fe
 800b7c4:	3c971547 	.word	0x3c971547
 800b7c8:	00000000 	.word	0x00000000
 800b7cc:	3fe62e43 	.word	0x3fe62e43
 800b7d0:	fefa39ef 	.word	0xfefa39ef
 800b7d4:	3fe62e42 	.word	0x3fe62e42
 800b7d8:	0ca86c39 	.word	0x0ca86c39
 800b7dc:	be205c61 	.word	0xbe205c61
 800b7e0:	72bea4d0 	.word	0x72bea4d0
 800b7e4:	3e663769 	.word	0x3e663769
 800b7e8:	c5d26bf1 	.word	0xc5d26bf1
 800b7ec:	3ebbbd41 	.word	0x3ebbbd41
 800b7f0:	af25de2c 	.word	0xaf25de2c
 800b7f4:	3f11566a 	.word	0x3f11566a
 800b7f8:	16bebd93 	.word	0x16bebd93
 800b7fc:	3f66c16c 	.word	0x3f66c16c
 800b800:	5555553e 	.word	0x5555553e
 800b804:	3fc55555 	.word	0x3fc55555
 800b808:	c2f8f359 	.word	0xc2f8f359
 800b80c:	01a56e1f 	.word	0x01a56e1f
 800b810:	3fe00000 	.word	0x3fe00000
 800b814:	000fffff 	.word	0x000fffff
 800b818:	3ff00000 	.word	0x3ff00000
 800b81c:	4090cbff 	.word	0x4090cbff
 800b820:	3f6f3400 	.word	0x3f6f3400

0800b824 <__ieee754_sqrt>:
 800b824:	4b54      	ldr	r3, [pc, #336]	; (800b978 <__ieee754_sqrt+0x154>)
 800b826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b82a:	438b      	bics	r3, r1
 800b82c:	4606      	mov	r6, r0
 800b82e:	460d      	mov	r5, r1
 800b830:	460a      	mov	r2, r1
 800b832:	460c      	mov	r4, r1
 800b834:	d10f      	bne.n	800b856 <__ieee754_sqrt+0x32>
 800b836:	4602      	mov	r2, r0
 800b838:	460b      	mov	r3, r1
 800b83a:	f7f4 fe45 	bl	80004c8 <__aeabi_dmul>
 800b83e:	4602      	mov	r2, r0
 800b840:	460b      	mov	r3, r1
 800b842:	4630      	mov	r0, r6
 800b844:	4629      	mov	r1, r5
 800b846:	f7f4 fc89 	bl	800015c <__adddf3>
 800b84a:	4606      	mov	r6, r0
 800b84c:	460d      	mov	r5, r1
 800b84e:	4630      	mov	r0, r6
 800b850:	4629      	mov	r1, r5
 800b852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b856:	2900      	cmp	r1, #0
 800b858:	4607      	mov	r7, r0
 800b85a:	4603      	mov	r3, r0
 800b85c:	dc0e      	bgt.n	800b87c <__ieee754_sqrt+0x58>
 800b85e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b862:	ea5c 0707 	orrs.w	r7, ip, r7
 800b866:	d0f2      	beq.n	800b84e <__ieee754_sqrt+0x2a>
 800b868:	b141      	cbz	r1, 800b87c <__ieee754_sqrt+0x58>
 800b86a:	4602      	mov	r2, r0
 800b86c:	460b      	mov	r3, r1
 800b86e:	f7f4 fc73 	bl	8000158 <__aeabi_dsub>
 800b872:	4602      	mov	r2, r0
 800b874:	460b      	mov	r3, r1
 800b876:	f7f4 ff51 	bl	800071c <__aeabi_ddiv>
 800b87a:	e7e6      	b.n	800b84a <__ieee754_sqrt+0x26>
 800b87c:	1512      	asrs	r2, r2, #20
 800b87e:	d074      	beq.n	800b96a <__ieee754_sqrt+0x146>
 800b880:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b884:	07d5      	lsls	r5, r2, #31
 800b886:	f04f 0500 	mov.w	r5, #0
 800b88a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b88e:	bf48      	it	mi
 800b890:	0fd9      	lsrmi	r1, r3, #31
 800b892:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800b896:	bf44      	itt	mi
 800b898:	005b      	lslmi	r3, r3, #1
 800b89a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800b89e:	1051      	asrs	r1, r2, #1
 800b8a0:	0fda      	lsrs	r2, r3, #31
 800b8a2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	2216      	movs	r2, #22
 800b8aa:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800b8ae:	005b      	lsls	r3, r3, #1
 800b8b0:	1987      	adds	r7, r0, r6
 800b8b2:	42a7      	cmp	r7, r4
 800b8b4:	bfde      	ittt	le
 800b8b6:	19b8      	addle	r0, r7, r6
 800b8b8:	1be4      	suble	r4, r4, r7
 800b8ba:	19ad      	addle	r5, r5, r6
 800b8bc:	0fdf      	lsrs	r7, r3, #31
 800b8be:	3a01      	subs	r2, #1
 800b8c0:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800b8c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b8c8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b8cc:	d1f0      	bne.n	800b8b0 <__ieee754_sqrt+0x8c>
 800b8ce:	f04f 0c20 	mov.w	ip, #32
 800b8d2:	4696      	mov	lr, r2
 800b8d4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b8d8:	4284      	cmp	r4, r0
 800b8da:	eb06 070e 	add.w	r7, r6, lr
 800b8de:	dc02      	bgt.n	800b8e6 <__ieee754_sqrt+0xc2>
 800b8e0:	d112      	bne.n	800b908 <__ieee754_sqrt+0xe4>
 800b8e2:	429f      	cmp	r7, r3
 800b8e4:	d810      	bhi.n	800b908 <__ieee754_sqrt+0xe4>
 800b8e6:	2f00      	cmp	r7, #0
 800b8e8:	eb07 0e06 	add.w	lr, r7, r6
 800b8ec:	da42      	bge.n	800b974 <__ieee754_sqrt+0x150>
 800b8ee:	f1be 0f00 	cmp.w	lr, #0
 800b8f2:	db3f      	blt.n	800b974 <__ieee754_sqrt+0x150>
 800b8f4:	f100 0801 	add.w	r8, r0, #1
 800b8f8:	1a24      	subs	r4, r4, r0
 800b8fa:	4640      	mov	r0, r8
 800b8fc:	429f      	cmp	r7, r3
 800b8fe:	bf88      	it	hi
 800b900:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 800b904:	1bdb      	subs	r3, r3, r7
 800b906:	4432      	add	r2, r6
 800b908:	0064      	lsls	r4, r4, #1
 800b90a:	f1bc 0c01 	subs.w	ip, ip, #1
 800b90e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800b912:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b916:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b91a:	d1dd      	bne.n	800b8d8 <__ieee754_sqrt+0xb4>
 800b91c:	4323      	orrs	r3, r4
 800b91e:	d006      	beq.n	800b92e <__ieee754_sqrt+0x10a>
 800b920:	1c54      	adds	r4, r2, #1
 800b922:	bf0b      	itete	eq
 800b924:	4662      	moveq	r2, ip
 800b926:	3201      	addne	r2, #1
 800b928:	3501      	addeq	r5, #1
 800b92a:	f022 0201 	bicne.w	r2, r2, #1
 800b92e:	106b      	asrs	r3, r5, #1
 800b930:	0852      	lsrs	r2, r2, #1
 800b932:	07e8      	lsls	r0, r5, #31
 800b934:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b938:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b93c:	bf48      	it	mi
 800b93e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b942:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800b946:	4616      	mov	r6, r2
 800b948:	e781      	b.n	800b84e <__ieee754_sqrt+0x2a>
 800b94a:	0adc      	lsrs	r4, r3, #11
 800b94c:	3915      	subs	r1, #21
 800b94e:	055b      	lsls	r3, r3, #21
 800b950:	2c00      	cmp	r4, #0
 800b952:	d0fa      	beq.n	800b94a <__ieee754_sqrt+0x126>
 800b954:	02e6      	lsls	r6, r4, #11
 800b956:	d50a      	bpl.n	800b96e <__ieee754_sqrt+0x14a>
 800b958:	f1c2 0020 	rsb	r0, r2, #32
 800b95c:	fa23 f000 	lsr.w	r0, r3, r0
 800b960:	1e55      	subs	r5, r2, #1
 800b962:	4093      	lsls	r3, r2
 800b964:	4304      	orrs	r4, r0
 800b966:	1b4a      	subs	r2, r1, r5
 800b968:	e78a      	b.n	800b880 <__ieee754_sqrt+0x5c>
 800b96a:	4611      	mov	r1, r2
 800b96c:	e7f0      	b.n	800b950 <__ieee754_sqrt+0x12c>
 800b96e:	0064      	lsls	r4, r4, #1
 800b970:	3201      	adds	r2, #1
 800b972:	e7ef      	b.n	800b954 <__ieee754_sqrt+0x130>
 800b974:	4680      	mov	r8, r0
 800b976:	e7bf      	b.n	800b8f8 <__ieee754_sqrt+0xd4>
 800b978:	7ff00000 	.word	0x7ff00000

0800b97c <fabs>:
 800b97c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b980:	4619      	mov	r1, r3
 800b982:	4770      	bx	lr

0800b984 <finite>:
 800b984:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800b988:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800b98c:	0fc0      	lsrs	r0, r0, #31
 800b98e:	4770      	bx	lr

0800b990 <matherr>:
 800b990:	2000      	movs	r0, #0
 800b992:	4770      	bx	lr

0800b994 <nan>:
 800b994:	2000      	movs	r0, #0
 800b996:	4901      	ldr	r1, [pc, #4]	; (800b99c <nan+0x8>)
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop
 800b99c:	7ff80000 	.word	0x7ff80000

0800b9a0 <rint>:
 800b9a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b9a6:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800b9aa:	f1bc 0f13 	cmp.w	ip, #19
 800b9ae:	4604      	mov	r4, r0
 800b9b0:	460d      	mov	r5, r1
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	4606      	mov	r6, r0
 800b9b6:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800b9ba:	dc5a      	bgt.n	800ba72 <rint+0xd2>
 800b9bc:	f1bc 0f00 	cmp.w	ip, #0
 800b9c0:	da2b      	bge.n	800ba1a <rint+0x7a>
 800b9c2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b9c6:	4302      	orrs	r2, r0
 800b9c8:	d023      	beq.n	800ba12 <rint+0x72>
 800b9ca:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800b9ce:	4302      	orrs	r2, r0
 800b9d0:	4256      	negs	r6, r2
 800b9d2:	4316      	orrs	r6, r2
 800b9d4:	0c4b      	lsrs	r3, r1, #17
 800b9d6:	0b36      	lsrs	r6, r6, #12
 800b9d8:	4934      	ldr	r1, [pc, #208]	; (800baac <rint+0x10c>)
 800b9da:	045b      	lsls	r3, r3, #17
 800b9dc:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 800b9e0:	ea46 0503 	orr.w	r5, r6, r3
 800b9e4:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	462b      	mov	r3, r5
 800b9ec:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	4629      	mov	r1, r5
 800b9f4:	f7f4 fbb2 	bl	800015c <__adddf3>
 800b9f8:	e9cd 0100 	strd	r0, r1, [sp]
 800b9fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba00:	462b      	mov	r3, r5
 800ba02:	4622      	mov	r2, r4
 800ba04:	f7f4 fba8 	bl	8000158 <__aeabi_dsub>
 800ba08:	4604      	mov	r4, r0
 800ba0a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ba0e:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800ba12:	4620      	mov	r0, r4
 800ba14:	4629      	mov	r1, r5
 800ba16:	b003      	add	sp, #12
 800ba18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba1a:	4a25      	ldr	r2, [pc, #148]	; (800bab0 <rint+0x110>)
 800ba1c:	fa42 f20c 	asr.w	r2, r2, ip
 800ba20:	4011      	ands	r1, r2
 800ba22:	4301      	orrs	r1, r0
 800ba24:	d0f5      	beq.n	800ba12 <rint+0x72>
 800ba26:	0852      	lsrs	r2, r2, #1
 800ba28:	ea05 0102 	and.w	r1, r5, r2
 800ba2c:	ea50 0601 	orrs.w	r6, r0, r1
 800ba30:	d00c      	beq.n	800ba4c <rint+0xac>
 800ba32:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ba36:	f1bc 0f13 	cmp.w	ip, #19
 800ba3a:	bf0c      	ite	eq
 800ba3c:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800ba40:	2600      	movne	r6, #0
 800ba42:	ea25 0202 	bic.w	r2, r5, r2
 800ba46:	fa43 f30c 	asr.w	r3, r3, ip
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	4917      	ldr	r1, [pc, #92]	; (800baac <rint+0x10c>)
 800ba4e:	4632      	mov	r2, r6
 800ba50:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800ba54:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ba58:	4620      	mov	r0, r4
 800ba5a:	4629      	mov	r1, r5
 800ba5c:	f7f4 fb7e 	bl	800015c <__adddf3>
 800ba60:	e9cd 0100 	strd	r0, r1, [sp]
 800ba64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba68:	4622      	mov	r2, r4
 800ba6a:	462b      	mov	r3, r5
 800ba6c:	f7f4 fb74 	bl	8000158 <__aeabi_dsub>
 800ba70:	e008      	b.n	800ba84 <rint+0xe4>
 800ba72:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800ba76:	dd08      	ble.n	800ba8a <rint+0xea>
 800ba78:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800ba7c:	d1c9      	bne.n	800ba12 <rint+0x72>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	f7f4 fb6c 	bl	800015c <__adddf3>
 800ba84:	4604      	mov	r4, r0
 800ba86:	460d      	mov	r5, r1
 800ba88:	e7c3      	b.n	800ba12 <rint+0x72>
 800ba8a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800ba8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba92:	40ca      	lsrs	r2, r1
 800ba94:	4210      	tst	r0, r2
 800ba96:	d0bc      	beq.n	800ba12 <rint+0x72>
 800ba98:	0852      	lsrs	r2, r2, #1
 800ba9a:	4210      	tst	r0, r2
 800ba9c:	bf1f      	itttt	ne
 800ba9e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800baa2:	ea20 0202 	bicne.w	r2, r0, r2
 800baa6:	410e      	asrne	r6, r1
 800baa8:	4316      	orrne	r6, r2
 800baaa:	e7cf      	b.n	800ba4c <rint+0xac>
 800baac:	0800bfa8 	.word	0x0800bfa8
 800bab0:	000fffff 	.word	0x000fffff
 800bab4:	00000000 	.word	0x00000000

0800bab8 <scalbn>:
 800bab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baba:	4616      	mov	r6, r2
 800babc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bac0:	4604      	mov	r4, r0
 800bac2:	460d      	mov	r5, r1
 800bac4:	460b      	mov	r3, r1
 800bac6:	b982      	cbnz	r2, 800baea <scalbn+0x32>
 800bac8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bacc:	4303      	orrs	r3, r0
 800bace:	d034      	beq.n	800bb3a <scalbn+0x82>
 800bad0:	4b2d      	ldr	r3, [pc, #180]	; (800bb88 <scalbn+0xd0>)
 800bad2:	2200      	movs	r2, #0
 800bad4:	f7f4 fcf8 	bl	80004c8 <__aeabi_dmul>
 800bad8:	4b2c      	ldr	r3, [pc, #176]	; (800bb8c <scalbn+0xd4>)
 800bada:	4604      	mov	r4, r0
 800badc:	429e      	cmp	r6, r3
 800bade:	460d      	mov	r5, r1
 800bae0:	da0d      	bge.n	800bafe <scalbn+0x46>
 800bae2:	a325      	add	r3, pc, #148	; (adr r3, 800bb78 <scalbn+0xc0>)
 800bae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae8:	e01c      	b.n	800bb24 <scalbn+0x6c>
 800baea:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800baee:	42ba      	cmp	r2, r7
 800baf0:	d109      	bne.n	800bb06 <scalbn+0x4e>
 800baf2:	4602      	mov	r2, r0
 800baf4:	f7f4 fb32 	bl	800015c <__adddf3>
 800baf8:	4604      	mov	r4, r0
 800bafa:	460d      	mov	r5, r1
 800bafc:	e01d      	b.n	800bb3a <scalbn+0x82>
 800bafe:	460b      	mov	r3, r1
 800bb00:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bb04:	3a36      	subs	r2, #54	; 0x36
 800bb06:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bb0a:	4432      	add	r2, r6
 800bb0c:	428a      	cmp	r2, r1
 800bb0e:	dd0c      	ble.n	800bb2a <scalbn+0x72>
 800bb10:	4622      	mov	r2, r4
 800bb12:	462b      	mov	r3, r5
 800bb14:	a11a      	add	r1, pc, #104	; (adr r1, 800bb80 <scalbn+0xc8>)
 800bb16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb1a:	f000 f83b 	bl	800bb94 <copysign>
 800bb1e:	a318      	add	r3, pc, #96	; (adr r3, 800bb80 <scalbn+0xc8>)
 800bb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb24:	f7f4 fcd0 	bl	80004c8 <__aeabi_dmul>
 800bb28:	e7e6      	b.n	800baf8 <scalbn+0x40>
 800bb2a:	2a00      	cmp	r2, #0
 800bb2c:	dd08      	ble.n	800bb40 <scalbn+0x88>
 800bb2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bb32:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb36:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	4629      	mov	r1, r5
 800bb3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb40:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bb44:	da0b      	bge.n	800bb5e <scalbn+0xa6>
 800bb46:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bb4a:	429e      	cmp	r6, r3
 800bb4c:	4622      	mov	r2, r4
 800bb4e:	462b      	mov	r3, r5
 800bb50:	dce0      	bgt.n	800bb14 <scalbn+0x5c>
 800bb52:	a109      	add	r1, pc, #36	; (adr r1, 800bb78 <scalbn+0xc0>)
 800bb54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb58:	f000 f81c 	bl	800bb94 <copysign>
 800bb5c:	e7c1      	b.n	800bae2 <scalbn+0x2a>
 800bb5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bb62:	3236      	adds	r2, #54	; 0x36
 800bb64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb68:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	4629      	mov	r1, r5
 800bb70:	2200      	movs	r2, #0
 800bb72:	4b07      	ldr	r3, [pc, #28]	; (800bb90 <scalbn+0xd8>)
 800bb74:	e7d6      	b.n	800bb24 <scalbn+0x6c>
 800bb76:	bf00      	nop
 800bb78:	c2f8f359 	.word	0xc2f8f359
 800bb7c:	01a56e1f 	.word	0x01a56e1f
 800bb80:	8800759c 	.word	0x8800759c
 800bb84:	7e37e43c 	.word	0x7e37e43c
 800bb88:	43500000 	.word	0x43500000
 800bb8c:	ffff3cb0 	.word	0xffff3cb0
 800bb90:	3c900000 	.word	0x3c900000

0800bb94 <copysign>:
 800bb94:	b530      	push	{r4, r5, lr}
 800bb96:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800bb9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb9e:	ea42 0503 	orr.w	r5, r2, r3
 800bba2:	4629      	mov	r1, r5
 800bba4:	bd30      	pop	{r4, r5, pc}

0800bba6 <abort>:
 800bba6:	b508      	push	{r3, lr}
 800bba8:	2006      	movs	r0, #6
 800bbaa:	f000 f947 	bl	800be3c <raise>
 800bbae:	2001      	movs	r0, #1
 800bbb0:	f7fa f990 	bl	8005ed4 <_exit>

0800bbb4 <__errno>:
 800bbb4:	4b01      	ldr	r3, [pc, #4]	; (800bbbc <__errno+0x8>)
 800bbb6:	6818      	ldr	r0, [r3, #0]
 800bbb8:	4770      	bx	lr
 800bbba:	bf00      	nop
 800bbbc:	2000009c 	.word	0x2000009c

0800bbc0 <__libc_init_array>:
 800bbc0:	b570      	push	{r4, r5, r6, lr}
 800bbc2:	2500      	movs	r5, #0
 800bbc4:	4e0c      	ldr	r6, [pc, #48]	; (800bbf8 <__libc_init_array+0x38>)
 800bbc6:	4c0d      	ldr	r4, [pc, #52]	; (800bbfc <__libc_init_array+0x3c>)
 800bbc8:	1ba4      	subs	r4, r4, r6
 800bbca:	10a4      	asrs	r4, r4, #2
 800bbcc:	42a5      	cmp	r5, r4
 800bbce:	d109      	bne.n	800bbe4 <__libc_init_array+0x24>
 800bbd0:	f000 f952 	bl	800be78 <_init>
 800bbd4:	2500      	movs	r5, #0
 800bbd6:	4e0a      	ldr	r6, [pc, #40]	; (800bc00 <__libc_init_array+0x40>)
 800bbd8:	4c0a      	ldr	r4, [pc, #40]	; (800bc04 <__libc_init_array+0x44>)
 800bbda:	1ba4      	subs	r4, r4, r6
 800bbdc:	10a4      	asrs	r4, r4, #2
 800bbde:	42a5      	cmp	r5, r4
 800bbe0:	d105      	bne.n	800bbee <__libc_init_array+0x2e>
 800bbe2:	bd70      	pop	{r4, r5, r6, pc}
 800bbe4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bbe8:	4798      	blx	r3
 800bbea:	3501      	adds	r5, #1
 800bbec:	e7ee      	b.n	800bbcc <__libc_init_array+0xc>
 800bbee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bbf2:	4798      	blx	r3
 800bbf4:	3501      	adds	r5, #1
 800bbf6:	e7f2      	b.n	800bbde <__libc_init_array+0x1e>
 800bbf8:	0800bfc0 	.word	0x0800bfc0
 800bbfc:	0800bfc0 	.word	0x0800bfc0
 800bc00:	0800bfc0 	.word	0x0800bfc0
 800bc04:	0800bfd0 	.word	0x0800bfd0

0800bc08 <malloc>:
 800bc08:	4b02      	ldr	r3, [pc, #8]	; (800bc14 <malloc+0xc>)
 800bc0a:	4601      	mov	r1, r0
 800bc0c:	6818      	ldr	r0, [r3, #0]
 800bc0e:	f000 b883 	b.w	800bd18 <_malloc_r>
 800bc12:	bf00      	nop
 800bc14:	2000009c 	.word	0x2000009c

0800bc18 <free>:
 800bc18:	4b02      	ldr	r3, [pc, #8]	; (800bc24 <free+0xc>)
 800bc1a:	4601      	mov	r1, r0
 800bc1c:	6818      	ldr	r0, [r3, #0]
 800bc1e:	f000 b82f 	b.w	800bc80 <_free_r>
 800bc22:	bf00      	nop
 800bc24:	2000009c 	.word	0x2000009c

0800bc28 <memcpy>:
 800bc28:	b510      	push	{r4, lr}
 800bc2a:	1e43      	subs	r3, r0, #1
 800bc2c:	440a      	add	r2, r1
 800bc2e:	4291      	cmp	r1, r2
 800bc30:	d100      	bne.n	800bc34 <memcpy+0xc>
 800bc32:	bd10      	pop	{r4, pc}
 800bc34:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc38:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc3c:	e7f7      	b.n	800bc2e <memcpy+0x6>

0800bc3e <memmove>:
 800bc3e:	4288      	cmp	r0, r1
 800bc40:	b510      	push	{r4, lr}
 800bc42:	eb01 0302 	add.w	r3, r1, r2
 800bc46:	d807      	bhi.n	800bc58 <memmove+0x1a>
 800bc48:	1e42      	subs	r2, r0, #1
 800bc4a:	4299      	cmp	r1, r3
 800bc4c:	d00a      	beq.n	800bc64 <memmove+0x26>
 800bc4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc52:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bc56:	e7f8      	b.n	800bc4a <memmove+0xc>
 800bc58:	4283      	cmp	r3, r0
 800bc5a:	d9f5      	bls.n	800bc48 <memmove+0xa>
 800bc5c:	1881      	adds	r1, r0, r2
 800bc5e:	1ad2      	subs	r2, r2, r3
 800bc60:	42d3      	cmn	r3, r2
 800bc62:	d100      	bne.n	800bc66 <memmove+0x28>
 800bc64:	bd10      	pop	{r4, pc}
 800bc66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc6a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bc6e:	e7f7      	b.n	800bc60 <memmove+0x22>

0800bc70 <memset>:
 800bc70:	4603      	mov	r3, r0
 800bc72:	4402      	add	r2, r0
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d100      	bne.n	800bc7a <memset+0xa>
 800bc78:	4770      	bx	lr
 800bc7a:	f803 1b01 	strb.w	r1, [r3], #1
 800bc7e:	e7f9      	b.n	800bc74 <memset+0x4>

0800bc80 <_free_r>:
 800bc80:	b538      	push	{r3, r4, r5, lr}
 800bc82:	4605      	mov	r5, r0
 800bc84:	2900      	cmp	r1, #0
 800bc86:	d043      	beq.n	800bd10 <_free_r+0x90>
 800bc88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc8c:	1f0c      	subs	r4, r1, #4
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	bfb8      	it	lt
 800bc92:	18e4      	addlt	r4, r4, r3
 800bc94:	f000 f8ee 	bl	800be74 <__malloc_lock>
 800bc98:	4a1e      	ldr	r2, [pc, #120]	; (800bd14 <_free_r+0x94>)
 800bc9a:	6813      	ldr	r3, [r2, #0]
 800bc9c:	4610      	mov	r0, r2
 800bc9e:	b933      	cbnz	r3, 800bcae <_free_r+0x2e>
 800bca0:	6063      	str	r3, [r4, #4]
 800bca2:	6014      	str	r4, [r2, #0]
 800bca4:	4628      	mov	r0, r5
 800bca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcaa:	f000 b8e4 	b.w	800be76 <__malloc_unlock>
 800bcae:	42a3      	cmp	r3, r4
 800bcb0:	d90b      	bls.n	800bcca <_free_r+0x4a>
 800bcb2:	6821      	ldr	r1, [r4, #0]
 800bcb4:	1862      	adds	r2, r4, r1
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	bf01      	itttt	eq
 800bcba:	681a      	ldreq	r2, [r3, #0]
 800bcbc:	685b      	ldreq	r3, [r3, #4]
 800bcbe:	1852      	addeq	r2, r2, r1
 800bcc0:	6022      	streq	r2, [r4, #0]
 800bcc2:	6063      	str	r3, [r4, #4]
 800bcc4:	6004      	str	r4, [r0, #0]
 800bcc6:	e7ed      	b.n	800bca4 <_free_r+0x24>
 800bcc8:	4613      	mov	r3, r2
 800bcca:	685a      	ldr	r2, [r3, #4]
 800bccc:	b10a      	cbz	r2, 800bcd2 <_free_r+0x52>
 800bcce:	42a2      	cmp	r2, r4
 800bcd0:	d9fa      	bls.n	800bcc8 <_free_r+0x48>
 800bcd2:	6819      	ldr	r1, [r3, #0]
 800bcd4:	1858      	adds	r0, r3, r1
 800bcd6:	42a0      	cmp	r0, r4
 800bcd8:	d10b      	bne.n	800bcf2 <_free_r+0x72>
 800bcda:	6820      	ldr	r0, [r4, #0]
 800bcdc:	4401      	add	r1, r0
 800bcde:	1858      	adds	r0, r3, r1
 800bce0:	4282      	cmp	r2, r0
 800bce2:	6019      	str	r1, [r3, #0]
 800bce4:	d1de      	bne.n	800bca4 <_free_r+0x24>
 800bce6:	6810      	ldr	r0, [r2, #0]
 800bce8:	6852      	ldr	r2, [r2, #4]
 800bcea:	4401      	add	r1, r0
 800bcec:	6019      	str	r1, [r3, #0]
 800bcee:	605a      	str	r2, [r3, #4]
 800bcf0:	e7d8      	b.n	800bca4 <_free_r+0x24>
 800bcf2:	d902      	bls.n	800bcfa <_free_r+0x7a>
 800bcf4:	230c      	movs	r3, #12
 800bcf6:	602b      	str	r3, [r5, #0]
 800bcf8:	e7d4      	b.n	800bca4 <_free_r+0x24>
 800bcfa:	6820      	ldr	r0, [r4, #0]
 800bcfc:	1821      	adds	r1, r4, r0
 800bcfe:	428a      	cmp	r2, r1
 800bd00:	bf01      	itttt	eq
 800bd02:	6811      	ldreq	r1, [r2, #0]
 800bd04:	6852      	ldreq	r2, [r2, #4]
 800bd06:	1809      	addeq	r1, r1, r0
 800bd08:	6021      	streq	r1, [r4, #0]
 800bd0a:	6062      	str	r2, [r4, #4]
 800bd0c:	605c      	str	r4, [r3, #4]
 800bd0e:	e7c9      	b.n	800bca4 <_free_r+0x24>
 800bd10:	bd38      	pop	{r3, r4, r5, pc}
 800bd12:	bf00      	nop
 800bd14:	20003c80 	.word	0x20003c80

0800bd18 <_malloc_r>:
 800bd18:	b570      	push	{r4, r5, r6, lr}
 800bd1a:	1ccd      	adds	r5, r1, #3
 800bd1c:	f025 0503 	bic.w	r5, r5, #3
 800bd20:	3508      	adds	r5, #8
 800bd22:	2d0c      	cmp	r5, #12
 800bd24:	bf38      	it	cc
 800bd26:	250c      	movcc	r5, #12
 800bd28:	2d00      	cmp	r5, #0
 800bd2a:	4606      	mov	r6, r0
 800bd2c:	db01      	blt.n	800bd32 <_malloc_r+0x1a>
 800bd2e:	42a9      	cmp	r1, r5
 800bd30:	d903      	bls.n	800bd3a <_malloc_r+0x22>
 800bd32:	230c      	movs	r3, #12
 800bd34:	6033      	str	r3, [r6, #0]
 800bd36:	2000      	movs	r0, #0
 800bd38:	bd70      	pop	{r4, r5, r6, pc}
 800bd3a:	f000 f89b 	bl	800be74 <__malloc_lock>
 800bd3e:	4a21      	ldr	r2, [pc, #132]	; (800bdc4 <_malloc_r+0xac>)
 800bd40:	6814      	ldr	r4, [r2, #0]
 800bd42:	4621      	mov	r1, r4
 800bd44:	b991      	cbnz	r1, 800bd6c <_malloc_r+0x54>
 800bd46:	4c20      	ldr	r4, [pc, #128]	; (800bdc8 <_malloc_r+0xb0>)
 800bd48:	6823      	ldr	r3, [r4, #0]
 800bd4a:	b91b      	cbnz	r3, 800bd54 <_malloc_r+0x3c>
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	f000 f83d 	bl	800bdcc <_sbrk_r>
 800bd52:	6020      	str	r0, [r4, #0]
 800bd54:	4629      	mov	r1, r5
 800bd56:	4630      	mov	r0, r6
 800bd58:	f000 f838 	bl	800bdcc <_sbrk_r>
 800bd5c:	1c43      	adds	r3, r0, #1
 800bd5e:	d124      	bne.n	800bdaa <_malloc_r+0x92>
 800bd60:	230c      	movs	r3, #12
 800bd62:	4630      	mov	r0, r6
 800bd64:	6033      	str	r3, [r6, #0]
 800bd66:	f000 f886 	bl	800be76 <__malloc_unlock>
 800bd6a:	e7e4      	b.n	800bd36 <_malloc_r+0x1e>
 800bd6c:	680b      	ldr	r3, [r1, #0]
 800bd6e:	1b5b      	subs	r3, r3, r5
 800bd70:	d418      	bmi.n	800bda4 <_malloc_r+0x8c>
 800bd72:	2b0b      	cmp	r3, #11
 800bd74:	d90f      	bls.n	800bd96 <_malloc_r+0x7e>
 800bd76:	600b      	str	r3, [r1, #0]
 800bd78:	18cc      	adds	r4, r1, r3
 800bd7a:	50cd      	str	r5, [r1, r3]
 800bd7c:	4630      	mov	r0, r6
 800bd7e:	f000 f87a 	bl	800be76 <__malloc_unlock>
 800bd82:	f104 000b 	add.w	r0, r4, #11
 800bd86:	1d23      	adds	r3, r4, #4
 800bd88:	f020 0007 	bic.w	r0, r0, #7
 800bd8c:	1ac3      	subs	r3, r0, r3
 800bd8e:	d0d3      	beq.n	800bd38 <_malloc_r+0x20>
 800bd90:	425a      	negs	r2, r3
 800bd92:	50e2      	str	r2, [r4, r3]
 800bd94:	e7d0      	b.n	800bd38 <_malloc_r+0x20>
 800bd96:	684b      	ldr	r3, [r1, #4]
 800bd98:	428c      	cmp	r4, r1
 800bd9a:	bf16      	itet	ne
 800bd9c:	6063      	strne	r3, [r4, #4]
 800bd9e:	6013      	streq	r3, [r2, #0]
 800bda0:	460c      	movne	r4, r1
 800bda2:	e7eb      	b.n	800bd7c <_malloc_r+0x64>
 800bda4:	460c      	mov	r4, r1
 800bda6:	6849      	ldr	r1, [r1, #4]
 800bda8:	e7cc      	b.n	800bd44 <_malloc_r+0x2c>
 800bdaa:	1cc4      	adds	r4, r0, #3
 800bdac:	f024 0403 	bic.w	r4, r4, #3
 800bdb0:	42a0      	cmp	r0, r4
 800bdb2:	d005      	beq.n	800bdc0 <_malloc_r+0xa8>
 800bdb4:	1a21      	subs	r1, r4, r0
 800bdb6:	4630      	mov	r0, r6
 800bdb8:	f000 f808 	bl	800bdcc <_sbrk_r>
 800bdbc:	3001      	adds	r0, #1
 800bdbe:	d0cf      	beq.n	800bd60 <_malloc_r+0x48>
 800bdc0:	6025      	str	r5, [r4, #0]
 800bdc2:	e7db      	b.n	800bd7c <_malloc_r+0x64>
 800bdc4:	20003c80 	.word	0x20003c80
 800bdc8:	20003c84 	.word	0x20003c84

0800bdcc <_sbrk_r>:
 800bdcc:	b538      	push	{r3, r4, r5, lr}
 800bdce:	2300      	movs	r3, #0
 800bdd0:	4c05      	ldr	r4, [pc, #20]	; (800bde8 <_sbrk_r+0x1c>)
 800bdd2:	4605      	mov	r5, r0
 800bdd4:	4608      	mov	r0, r1
 800bdd6:	6023      	str	r3, [r4, #0]
 800bdd8:	f7fa f882 	bl	8005ee0 <_sbrk>
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	d102      	bne.n	800bde6 <_sbrk_r+0x1a>
 800bde0:	6823      	ldr	r3, [r4, #0]
 800bde2:	b103      	cbz	r3, 800bde6 <_sbrk_r+0x1a>
 800bde4:	602b      	str	r3, [r5, #0]
 800bde6:	bd38      	pop	{r3, r4, r5, pc}
 800bde8:	20003e40 	.word	0x20003e40

0800bdec <_raise_r>:
 800bdec:	291f      	cmp	r1, #31
 800bdee:	b538      	push	{r3, r4, r5, lr}
 800bdf0:	4604      	mov	r4, r0
 800bdf2:	460d      	mov	r5, r1
 800bdf4:	d904      	bls.n	800be00 <_raise_r+0x14>
 800bdf6:	2316      	movs	r3, #22
 800bdf8:	6003      	str	r3, [r0, #0]
 800bdfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdfe:	bd38      	pop	{r3, r4, r5, pc}
 800be00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800be02:	b112      	cbz	r2, 800be0a <_raise_r+0x1e>
 800be04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be08:	b94b      	cbnz	r3, 800be1e <_raise_r+0x32>
 800be0a:	4620      	mov	r0, r4
 800be0c:	f000 f830 	bl	800be70 <_getpid_r>
 800be10:	462a      	mov	r2, r5
 800be12:	4601      	mov	r1, r0
 800be14:	4620      	mov	r0, r4
 800be16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be1a:	f000 b817 	b.w	800be4c <_kill_r>
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d00a      	beq.n	800be38 <_raise_r+0x4c>
 800be22:	1c59      	adds	r1, r3, #1
 800be24:	d103      	bne.n	800be2e <_raise_r+0x42>
 800be26:	2316      	movs	r3, #22
 800be28:	6003      	str	r3, [r0, #0]
 800be2a:	2001      	movs	r0, #1
 800be2c:	e7e7      	b.n	800bdfe <_raise_r+0x12>
 800be2e:	2400      	movs	r4, #0
 800be30:	4628      	mov	r0, r5
 800be32:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be36:	4798      	blx	r3
 800be38:	2000      	movs	r0, #0
 800be3a:	e7e0      	b.n	800bdfe <_raise_r+0x12>

0800be3c <raise>:
 800be3c:	4b02      	ldr	r3, [pc, #8]	; (800be48 <raise+0xc>)
 800be3e:	4601      	mov	r1, r0
 800be40:	6818      	ldr	r0, [r3, #0]
 800be42:	f7ff bfd3 	b.w	800bdec <_raise_r>
 800be46:	bf00      	nop
 800be48:	2000009c 	.word	0x2000009c

0800be4c <_kill_r>:
 800be4c:	b538      	push	{r3, r4, r5, lr}
 800be4e:	2300      	movs	r3, #0
 800be50:	4c06      	ldr	r4, [pc, #24]	; (800be6c <_kill_r+0x20>)
 800be52:	4605      	mov	r5, r0
 800be54:	4608      	mov	r0, r1
 800be56:	4611      	mov	r1, r2
 800be58:	6023      	str	r3, [r4, #0]
 800be5a:	f7fa f833 	bl	8005ec4 <_kill>
 800be5e:	1c43      	adds	r3, r0, #1
 800be60:	d102      	bne.n	800be68 <_kill_r+0x1c>
 800be62:	6823      	ldr	r3, [r4, #0]
 800be64:	b103      	cbz	r3, 800be68 <_kill_r+0x1c>
 800be66:	602b      	str	r3, [r5, #0]
 800be68:	bd38      	pop	{r3, r4, r5, pc}
 800be6a:	bf00      	nop
 800be6c:	20003e40 	.word	0x20003e40

0800be70 <_getpid_r>:
 800be70:	f7fa b826 	b.w	8005ec0 <_getpid>

0800be74 <__malloc_lock>:
 800be74:	4770      	bx	lr

0800be76 <__malloc_unlock>:
 800be76:	4770      	bx	lr

0800be78 <_init>:
 800be78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be7a:	bf00      	nop
 800be7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be7e:	bc08      	pop	{r3}
 800be80:	469e      	mov	lr, r3
 800be82:	4770      	bx	lr

0800be84 <_fini>:
 800be84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be86:	bf00      	nop
 800be88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be8a:	bc08      	pop	{r3}
 800be8c:	469e      	mov	lr, r3
 800be8e:	4770      	bx	lr
