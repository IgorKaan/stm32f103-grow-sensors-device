
stm32f103-sensors-device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a558  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800a668  0800a668  0001a668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a734  0800a734  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a734  0800a734  0001a734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a73c  0800a73c  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000001c  0800a73c  0800a73c  0001a73c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  0800a758  0800a758  0001a758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0800a768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002560  200000d8  0800a840  000200d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002638  0800a840  00022638  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00075dc7  00000000  00000000  00020101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000aa9b  00000000  00000000  00095ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00029aa9  00000000  00000000  000a0963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001aa8  00000000  00000000  000ca410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003c70  00000000  00000000  000cbeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022614  00000000  00000000  000cfb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000355b7  00000000  00000000  000f213c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b042c  00000000  00000000  001276f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001d7b1f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c38  00000000  00000000  001d7b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000d8 	.word	0x200000d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a650 	.word	0x0800a650

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000dc 	.word	0x200000dc
 800014c:	0800a650 	.word	0x0800a650

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__gesf2>:
 8000a9c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000aa0:	e006      	b.n	8000ab0 <__cmpsf2+0x4>
 8000aa2:	bf00      	nop

08000aa4 <__lesf2>:
 8000aa4:	f04f 0c01 	mov.w	ip, #1
 8000aa8:	e002      	b.n	8000ab0 <__cmpsf2+0x4>
 8000aaa:	bf00      	nop

08000aac <__cmpsf2>:
 8000aac:	f04f 0c01 	mov.w	ip, #1
 8000ab0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ab4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ab8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000abc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ac0:	bf18      	it	ne
 8000ac2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ac6:	d011      	beq.n	8000aec <__cmpsf2+0x40>
 8000ac8:	b001      	add	sp, #4
 8000aca:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ace:	bf18      	it	ne
 8000ad0:	ea90 0f01 	teqne	r0, r1
 8000ad4:	bf58      	it	pl
 8000ad6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ada:	bf88      	it	hi
 8000adc:	17c8      	asrhi	r0, r1, #31
 8000ade:	bf38      	it	cc
 8000ae0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ae4:	bf18      	it	ne
 8000ae6:	f040 0001 	orrne.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000af0:	d102      	bne.n	8000af8 <__cmpsf2+0x4c>
 8000af2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000af6:	d105      	bne.n	8000b04 <__cmpsf2+0x58>
 8000af8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000afc:	d1e4      	bne.n	8000ac8 <__cmpsf2+0x1c>
 8000afe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b02:	d0e1      	beq.n	8000ac8 <__cmpsf2+0x1c>
 8000b04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cfrcmple>:
 8000b0c:	4684      	mov	ip, r0
 8000b0e:	4608      	mov	r0, r1
 8000b10:	4661      	mov	r1, ip
 8000b12:	e7ff      	b.n	8000b14 <__aeabi_cfcmpeq>

08000b14 <__aeabi_cfcmpeq>:
 8000b14:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b16:	f7ff ffc9 	bl	8000aac <__cmpsf2>
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	bf48      	it	mi
 8000b1e:	f110 0f00 	cmnmi.w	r0, #0
 8000b22:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b24 <__aeabi_fcmpeq>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff fff4 	bl	8000b14 <__aeabi_cfcmpeq>
 8000b2c:	bf0c      	ite	eq
 8000b2e:	2001      	moveq	r0, #1
 8000b30:	2000      	movne	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_fcmplt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffea 	bl	8000b14 <__aeabi_cfcmpeq>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_fcmple>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffe0 	bl	8000b14 <__aeabi_cfcmpeq>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fcmpge>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffd2 	bl	8000b0c <__aeabi_cfrcmple>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_fcmpgt>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffc8 	bl	8000b0c <__aeabi_cfrcmple>
 8000b7c:	bf34      	ite	cc
 8000b7e:	2001      	movcc	r0, #1
 8000b80:	2000      	movcs	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_ldivmod>:
 8000b88:	b97b      	cbnz	r3, 8000baa <__aeabi_ldivmod+0x22>
 8000b8a:	b972      	cbnz	r2, 8000baa <__aeabi_ldivmod+0x22>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bfbe      	ittt	lt
 8000b90:	2000      	movlt	r0, #0
 8000b92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b96:	e006      	blt.n	8000ba6 <__aeabi_ldivmod+0x1e>
 8000b98:	bf08      	it	eq
 8000b9a:	2800      	cmpeq	r0, #0
 8000b9c:	bf1c      	itt	ne
 8000b9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ba2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ba6:	f000 b9b9 	b.w	8000f1c <__aeabi_idiv0>
 8000baa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb2:	2900      	cmp	r1, #0
 8000bb4:	db09      	blt.n	8000bca <__aeabi_ldivmod+0x42>
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	db1a      	blt.n	8000bf0 <__aeabi_ldivmod+0x68>
 8000bba:	f000 f84d 	bl	8000c58 <__udivmoddi4>
 8000bbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc6:	b004      	add	sp, #16
 8000bc8:	4770      	bx	lr
 8000bca:	4240      	negs	r0, r0
 8000bcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	db1b      	blt.n	8000c0c <__aeabi_ldivmod+0x84>
 8000bd4:	f000 f840 	bl	8000c58 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4240      	negs	r0, r0
 8000be4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be8:	4252      	negs	r2, r2
 8000bea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bee:	4770      	bx	lr
 8000bf0:	4252      	negs	r2, r2
 8000bf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf6:	f000 f82f 	bl	8000c58 <__udivmoddi4>
 8000bfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c02:	b004      	add	sp, #16
 8000c04:	4240      	negs	r0, r0
 8000c06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c0a:	4770      	bx	lr
 8000c0c:	4252      	negs	r2, r2
 8000c0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c12:	f000 f821 	bl	8000c58 <__udivmoddi4>
 8000c16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c1e:	b004      	add	sp, #16
 8000c20:	4252      	negs	r2, r2
 8000c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c3c:	f000 b96e 	b.w	8000f1c <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	460d      	mov	r5, r1
 8000c60:	4604      	mov	r4, r0
 8000c62:	468e      	mov	lr, r1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f040 8083 	bne.w	8000d70 <__udivmoddi4+0x118>
 8000c6a:	428a      	cmp	r2, r1
 8000c6c:	4617      	mov	r7, r2
 8000c6e:	d947      	bls.n	8000d00 <__udivmoddi4+0xa8>
 8000c70:	fab2 f382 	clz	r3, r2
 8000c74:	b14b      	cbz	r3, 8000c8a <__udivmoddi4+0x32>
 8000c76:	f1c3 0120 	rsb	r1, r3, #32
 8000c7a:	fa05 fe03 	lsl.w	lr, r5, r3
 8000c7e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c82:	409f      	lsls	r7, r3
 8000c84:	ea41 0e0e 	orr.w	lr, r1, lr
 8000c88:	409c      	lsls	r4, r3
 8000c8a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c8e:	fbbe fcf8 	udiv	ip, lr, r8
 8000c92:	fa1f f987 	uxth.w	r9, r7
 8000c96:	fb08 e21c 	mls	r2, r8, ip, lr
 8000c9a:	fb0c f009 	mul.w	r0, ip, r9
 8000c9e:	0c21      	lsrs	r1, r4, #16
 8000ca0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000ca4:	4290      	cmp	r0, r2
 8000ca6:	d90a      	bls.n	8000cbe <__udivmoddi4+0x66>
 8000ca8:	18ba      	adds	r2, r7, r2
 8000caa:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000cae:	f080 8118 	bcs.w	8000ee2 <__udivmoddi4+0x28a>
 8000cb2:	4290      	cmp	r0, r2
 8000cb4:	f240 8115 	bls.w	8000ee2 <__udivmoddi4+0x28a>
 8000cb8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cbc:	443a      	add	r2, r7
 8000cbe:	1a12      	subs	r2, r2, r0
 8000cc0:	fbb2 f0f8 	udiv	r0, r2, r8
 8000cc4:	fb08 2210 	mls	r2, r8, r0, r2
 8000cc8:	fb00 f109 	mul.w	r1, r0, r9
 8000ccc:	b2a4      	uxth	r4, r4
 8000cce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cd2:	42a1      	cmp	r1, r4
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x92>
 8000cd6:	193c      	adds	r4, r7, r4
 8000cd8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cdc:	f080 8103 	bcs.w	8000ee6 <__udivmoddi4+0x28e>
 8000ce0:	42a1      	cmp	r1, r4
 8000ce2:	f240 8100 	bls.w	8000ee6 <__udivmoddi4+0x28e>
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	443c      	add	r4, r7
 8000cea:	1a64      	subs	r4, r4, r1
 8000cec:	2100      	movs	r1, #0
 8000cee:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf2:	b11e      	cbz	r6, 8000cfc <__udivmoddi4+0xa4>
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	40dc      	lsrs	r4, r3
 8000cf8:	e9c6 4200 	strd	r4, r2, [r6]
 8000cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xac>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f382 	clz	r3, r2
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d14f      	bne.n	8000dac <__udivmoddi4+0x154>
 8000d0c:	1a8d      	subs	r5, r1, r2
 8000d0e:	2101      	movs	r1, #1
 8000d10:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000d14:	fa1f f882 	uxth.w	r8, r2
 8000d18:	fbb5 fcfe 	udiv	ip, r5, lr
 8000d1c:	fb0e 551c 	mls	r5, lr, ip, r5
 8000d20:	fb08 f00c 	mul.w	r0, r8, ip
 8000d24:	0c22      	lsrs	r2, r4, #16
 8000d26:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000d2a:	42a8      	cmp	r0, r5
 8000d2c:	d907      	bls.n	8000d3e <__udivmoddi4+0xe6>
 8000d2e:	197d      	adds	r5, r7, r5
 8000d30:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0xe4>
 8000d36:	42a8      	cmp	r0, r5
 8000d38:	f200 80e9 	bhi.w	8000f0e <__udivmoddi4+0x2b6>
 8000d3c:	4694      	mov	ip, r2
 8000d3e:	1a2d      	subs	r5, r5, r0
 8000d40:	fbb5 f0fe 	udiv	r0, r5, lr
 8000d44:	fb0e 5510 	mls	r5, lr, r0, r5
 8000d48:	fb08 f800 	mul.w	r8, r8, r0
 8000d4c:	b2a4      	uxth	r4, r4
 8000d4e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d52:	45a0      	cmp	r8, r4
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x10e>
 8000d56:	193c      	adds	r4, r7, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x10c>
 8000d5e:	45a0      	cmp	r8, r4
 8000d60:	f200 80d9 	bhi.w	8000f16 <__udivmoddi4+0x2be>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 0408 	sub.w	r4, r4, r8
 8000d6a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6e:	e7c0      	b.n	8000cf2 <__udivmoddi4+0x9a>
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x12e>
 8000d74:	2e00      	cmp	r6, #0
 8000d76:	f000 80b1 	beq.w	8000edc <__udivmoddi4+0x284>
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	e9c6 0500 	strd	r0, r5, [r6]
 8000d80:	4608      	mov	r0, r1
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f183 	clz	r1, r3
 8000d8a:	2900      	cmp	r1, #0
 8000d8c:	d14b      	bne.n	8000e26 <__udivmoddi4+0x1ce>
 8000d8e:	42ab      	cmp	r3, r5
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0x140>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80b9 	bhi.w	8000f0a <__udivmoddi4+0x2b2>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb65 0303 	sbc.w	r3, r5, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	469e      	mov	lr, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0aa      	beq.n	8000cfc <__udivmoddi4+0xa4>
 8000da6:	e9c6 4e00 	strd	r4, lr, [r6]
 8000daa:	e7a7      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000dac:	409f      	lsls	r7, r3
 8000dae:	f1c3 0220 	rsb	r2, r3, #32
 8000db2:	40d1      	lsrs	r1, r2
 8000db4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dbc:	fa1f f887 	uxth.w	r8, r7
 8000dc0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc4:	fa24 f202 	lsr.w	r2, r4, r2
 8000dc8:	409d      	lsls	r5, r3
 8000dca:	fb00 fc08 	mul.w	ip, r0, r8
 8000dce:	432a      	orrs	r2, r5
 8000dd0:	0c15      	lsrs	r5, r2, #16
 8000dd2:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000dd6:	45ac      	cmp	ip, r5
 8000dd8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x19a>
 8000dde:	197d      	adds	r5, r7, r5
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000de4:	f080 808f 	bcs.w	8000f06 <__udivmoddi4+0x2ae>
 8000de8:	45ac      	cmp	ip, r5
 8000dea:	f240 808c 	bls.w	8000f06 <__udivmoddi4+0x2ae>
 8000dee:	3802      	subs	r0, #2
 8000df0:	443d      	add	r5, r7
 8000df2:	eba5 050c 	sub.w	r5, r5, ip
 8000df6:	fbb5 f1fe 	udiv	r1, r5, lr
 8000dfa:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000dfe:	fb01 f908 	mul.w	r9, r1, r8
 8000e02:	b295      	uxth	r5, r2
 8000e04:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000e08:	45a9      	cmp	r9, r5
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x1c4>
 8000e0c:	197d      	adds	r5, r7, r5
 8000e0e:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8000e12:	d274      	bcs.n	8000efe <__udivmoddi4+0x2a6>
 8000e14:	45a9      	cmp	r9, r5
 8000e16:	d972      	bls.n	8000efe <__udivmoddi4+0x2a6>
 8000e18:	3902      	subs	r1, #2
 8000e1a:	443d      	add	r5, r7
 8000e1c:	eba5 0509 	sub.w	r5, r5, r9
 8000e20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e24:	e778      	b.n	8000d18 <__udivmoddi4+0xc0>
 8000e26:	f1c1 0720 	rsb	r7, r1, #32
 8000e2a:	408b      	lsls	r3, r1
 8000e2c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e30:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e34:	fa25 f407 	lsr.w	r4, r5, r7
 8000e38:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e3c:	fbb4 f9fe 	udiv	r9, r4, lr
 8000e40:	fa1f f88c 	uxth.w	r8, ip
 8000e44:	fb0e 4419 	mls	r4, lr, r9, r4
 8000e48:	fa20 f307 	lsr.w	r3, r0, r7
 8000e4c:	fb09 fa08 	mul.w	sl, r9, r8
 8000e50:	408d      	lsls	r5, r1
 8000e52:	431d      	orrs	r5, r3
 8000e54:	0c2b      	lsrs	r3, r5, #16
 8000e56:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	fa02 f201 	lsl.w	r2, r2, r1
 8000e60:	fa00 f301 	lsl.w	r3, r0, r1
 8000e64:	d909      	bls.n	8000e7a <__udivmoddi4+0x222>
 8000e66:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e6e:	d248      	bcs.n	8000f02 <__udivmoddi4+0x2aa>
 8000e70:	45a2      	cmp	sl, r4
 8000e72:	d946      	bls.n	8000f02 <__udivmoddi4+0x2aa>
 8000e74:	f1a9 0902 	sub.w	r9, r9, #2
 8000e78:	4464      	add	r4, ip
 8000e7a:	eba4 040a 	sub.w	r4, r4, sl
 8000e7e:	fbb4 f0fe 	udiv	r0, r4, lr
 8000e82:	fb0e 4410 	mls	r4, lr, r0, r4
 8000e86:	fb00 fa08 	mul.w	sl, r0, r8
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e90:	45a2      	cmp	sl, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x24e>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e9c:	d22d      	bcs.n	8000efa <__udivmoddi4+0x2a2>
 8000e9e:	45a2      	cmp	sl, r4
 8000ea0:	d92b      	bls.n	8000efa <__udivmoddi4+0x2a2>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	4464      	add	r4, ip
 8000ea6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eaa:	fba0 8902 	umull	r8, r9, r0, r2
 8000eae:	eba4 040a 	sub.w	r4, r4, sl
 8000eb2:	454c      	cmp	r4, r9
 8000eb4:	46c6      	mov	lr, r8
 8000eb6:	464d      	mov	r5, r9
 8000eb8:	d319      	bcc.n	8000eee <__udivmoddi4+0x296>
 8000eba:	d016      	beq.n	8000eea <__udivmoddi4+0x292>
 8000ebc:	b15e      	cbz	r6, 8000ed6 <__udivmoddi4+0x27e>
 8000ebe:	ebb3 020e 	subs.w	r2, r3, lr
 8000ec2:	eb64 0405 	sbc.w	r4, r4, r5
 8000ec6:	fa04 f707 	lsl.w	r7, r4, r7
 8000eca:	fa22 f301 	lsr.w	r3, r2, r1
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	40cc      	lsrs	r4, r1
 8000ed2:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000edc:	4631      	mov	r1, r6
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e70c      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000ee2:	468c      	mov	ip, r1
 8000ee4:	e6eb      	b.n	8000cbe <__udivmoddi4+0x66>
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	e6ff      	b.n	8000cea <__udivmoddi4+0x92>
 8000eea:	4543      	cmp	r3, r8
 8000eec:	d2e6      	bcs.n	8000ebc <__udivmoddi4+0x264>
 8000eee:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ef2:	eb69 050c 	sbc.w	r5, r9, ip
 8000ef6:	3801      	subs	r0, #1
 8000ef8:	e7e0      	b.n	8000ebc <__udivmoddi4+0x264>
 8000efa:	4628      	mov	r0, r5
 8000efc:	e7d3      	b.n	8000ea6 <__udivmoddi4+0x24e>
 8000efe:	4611      	mov	r1, r2
 8000f00:	e78c      	b.n	8000e1c <__udivmoddi4+0x1c4>
 8000f02:	4681      	mov	r9, r0
 8000f04:	e7b9      	b.n	8000e7a <__udivmoddi4+0x222>
 8000f06:	4608      	mov	r0, r1
 8000f08:	e773      	b.n	8000df2 <__udivmoddi4+0x19a>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e749      	b.n	8000da2 <__udivmoddi4+0x14a>
 8000f0e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f12:	443d      	add	r5, r7
 8000f14:	e713      	b.n	8000d3e <__udivmoddi4+0xe6>
 8000f16:	3802      	subs	r0, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	e724      	b.n	8000d66 <__udivmoddi4+0x10e>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <Erase_flash>:
//////////////////////// ОЧИСТКА ПАМЯТИ /////////////////////////////
void Erase_flash(void)
{
	static FLASH_EraseInitTypeDef EraseInitStruct;     // структура для очистки флеша

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // постраничная очистка, FLASH_TYPEERASE_MASSERASE - очистка всего флеша
 8000f20:	2300      	movs	r3, #0
	EraseInitStruct.PageAddress = STARTADDR;
	EraseInitStruct.NbPages = PAGES;
 8000f22:	2201      	movs	r2, #1
{
 8000f24:	b513      	push	{r0, r1, r4, lr}
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // постраничная очистка, FLASH_TYPEERASE_MASSERASE - очистка всего флеша
 8000f26:	4c08      	ldr	r4, [pc, #32]	; (8000f48 <Erase_flash+0x28>)
	EraseInitStruct.NbPages = PAGES;
 8000f28:	4908      	ldr	r1, [pc, #32]	; (8000f4c <Erase_flash+0x2c>)
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // постраничная очистка, FLASH_TYPEERASE_MASSERASE - очистка всего флеша
 8000f2a:	6023      	str	r3, [r4, #0]
	EraseInitStruct.NbPages = PAGES;
 8000f2c:	e9c4 1202 	strd	r1, r2, [r4, #8]
	//EraseInitStruct.Banks = FLASH_BANK_1; // FLASH_BANK_2 - банк №2, FLASH_BANK_BOTH - оба банка
	uint32_t page_error = 0; // переменная, в которую запишется адрес страницы при неудачном стирании
 8000f30:	9301      	str	r3, [sp, #4]

	HAL_FLASH_Unlock(); // разблокировать флеш
 8000f32:	f006 fd7d 	bl	8007a30 <HAL_FLASH_Unlock>

	if(HAL_FLASHEx_Erase(&EraseInitStruct, &page_error) != HAL_OK)
 8000f36:	a901      	add	r1, sp, #4
 8000f38:	4620      	mov	r0, r4
 8000f3a:	f006 fe35 	bl	8007ba8 <HAL_FLASHEx_Erase>
	else
	{

	}

	HAL_FLASH_Lock();
 8000f3e:	f006 fd89 	bl	8007a54 <HAL_FLASH_Lock>
}
 8000f42:	b002      	add	sp, #8
 8000f44:	bd10      	pop	{r4, pc}
 8000f46:	bf00      	nop
 8000f48:	200000f4 	.word	0x200000f4
 8000f4c:	0801fc00 	.word	0x0801fc00

08000f50 <Flash_search_adress>:

//////////////////////// ПОИСК СВОБОДНЫХ ЯЧЕЕК /////////////////////////////
uint32_t Flash_search_adress(uint32_t address, uint16_t cnt)
{
	uint16_t count_byte = cnt;
 8000f50:	460b      	mov	r3, r1
{
 8000f52:	b510      	push	{r4, lr}
	while(count_byte)
	{
		if(0xFF == *(uint8_t*)address++) count_byte--;
		else count_byte = cnt;

		if(address == ENDMEMORY - 1) // если достигнут конец флеша
 8000f54:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <Flash_search_adress+0x28>)
	while(count_byte)
 8000f56:	b90b      	cbnz	r3, 8000f5c <Flash_search_adress+0xc>
			Erase_flash();        // тогда очищаем память
			return STARTADDR;     // устанавливаем адрес для записи с самого начала
		}
	}

	return address -= cnt;
 8000f58:	1a40      	subs	r0, r0, r1
 8000f5a:	e00c      	b.n	8000f76 <Flash_search_adress+0x26>
		if(0xFF == *(uint8_t*)address++) count_byte--;
 8000f5c:	7804      	ldrb	r4, [r0, #0]
 8000f5e:	3001      	adds	r0, #1
 8000f60:	2cff      	cmp	r4, #255	; 0xff
 8000f62:	bf0a      	itet	eq
 8000f64:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
		else count_byte = cnt;
 8000f68:	460b      	movne	r3, r1
		if(0xFF == *(uint8_t*)address++) count_byte--;
 8000f6a:	b29b      	uxtheq	r3, r3
		if(address == ENDMEMORY - 1) // если достигнут конец флеша
 8000f6c:	4290      	cmp	r0, r2
 8000f6e:	d1f2      	bne.n	8000f56 <Flash_search_adress+0x6>
			Erase_flash();        // тогда очищаем память
 8000f70:	f7ff ffd6 	bl	8000f20 <Erase_flash>
			return STARTADDR;     // устанавливаем адрес для записи с самого начала
 8000f74:	4801      	ldr	r0, [pc, #4]	; (8000f7c <Flash_search_adress+0x2c>)
}
 8000f76:	bd10      	pop	{r4, pc}
 8000f78:	0801ffff 	.word	0x0801ffff
 8000f7c:	0801fc00 	.word	0x0801fc00

08000f80 <Write_to_flash>:

//////////////////////// ЗАПИСЬ ДАННЫХ /////////////////////////////
void Write_to_flash(uint32_t *buff)
{
 8000f80:	b570      	push	{r4, r5, r6, lr}
	res_addr = Flash_search_adress(res_addr, BUFFSIZE * DATAWIDTH); // ищем свободные ячейки начиная с последнего известного адреса
 8000f82:	4c0f      	ldr	r4, [pc, #60]	; (8000fc0 <Write_to_flash+0x40>)
{
 8000f84:	4605      	mov	r5, r0
	res_addr = Flash_search_adress(res_addr, BUFFSIZE * DATAWIDTH); // ищем свободные ячейки начиная с последнего известного адреса
 8000f86:	2108      	movs	r1, #8
 8000f88:	6820      	ldr	r0, [r4, #0]
 8000f8a:	f7ff ffe1 	bl	8000f50 <Flash_search_adress>
	//////////////////////// ЗАПИСЬ ////////////////////////////
	HAL_FLASH_Unlock(); // разблокировать флеш

	for(uint16_t i = 0; i < BUFFSIZE; i++)
	{
		if(HAL_FLASH_Program(WIDTHWRITE, res_addr, buff[i]) != HAL_OK)
 8000f8e:	2600      	movs	r6, #0
	res_addr = Flash_search_adress(res_addr, BUFFSIZE * DATAWIDTH); // ищем свободные ячейки начиная с последнего известного адреса
 8000f90:	6020      	str	r0, [r4, #0]
	HAL_FLASH_Unlock(); // разблокировать флеш
 8000f92:	f006 fd4d 	bl	8007a30 <HAL_FLASH_Unlock>
		if(HAL_FLASH_Program(WIDTHWRITE, res_addr, buff[i]) != HAL_OK)
 8000f96:	4633      	mov	r3, r6
 8000f98:	682a      	ldr	r2, [r5, #0]
 8000f9a:	6821      	ldr	r1, [r4, #0]
 8000f9c:	2002      	movs	r0, #2
 8000f9e:	f006 fd8d 	bl	8007abc <HAL_FLASH_Program>
		{
			//uint32_t er = HAL_FLASH_GetError();
		}

		res_addr = res_addr + DATAWIDTH;
 8000fa2:	6821      	ldr	r1, [r4, #0]
		if(HAL_FLASH_Program(WIDTHWRITE, res_addr, buff[i]) != HAL_OK)
 8000fa4:	4633      	mov	r3, r6
 8000fa6:	686a      	ldr	r2, [r5, #4]
		res_addr = res_addr + DATAWIDTH;
 8000fa8:	3104      	adds	r1, #4
		if(HAL_FLASH_Program(WIDTHWRITE, res_addr, buff[i]) != HAL_OK)
 8000faa:	2002      	movs	r0, #2
		res_addr = res_addr + DATAWIDTH;
 8000fac:	6021      	str	r1, [r4, #0]
		if(HAL_FLASH_Program(WIDTHWRITE, res_addr, buff[i]) != HAL_OK)
 8000fae:	f006 fd85 	bl	8007abc <HAL_FLASH_Program>
		res_addr = res_addr + DATAWIDTH;
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	6023      	str	r3, [r4, #0]
//	if(sum1 != sum2) // если суммы записанного и прочитанного не равны, тогда что-то пошло не так
//	{
//		return;
//	}
	//////////////////////// конец проверки записанного ////////////////////////
}
 8000fb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_FLASH_Lock(); // заблокировать флеш
 8000fbc:	f006 bd4a 	b.w	8007a54 <HAL_FLASH_Lock>
 8000fc0:	20002454 	.word	0x20002454

08000fc4 <Read_last_data_in_flash>:

//////////////////////// ЧТЕНИЕ ПОСЛЕДНИХ ДАННЫХ /////////////////////////////
void Read_last_data_in_flash(uint32_t *buff)
{
	if(res_addr == STARTADDR)
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <Read_last_data_in_flash+0x18>)
 8000fc6:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <Read_last_data_in_flash+0x1c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4293      	cmp	r3, r2

	uint32_t adr = res_addr - BUFFSIZE * DATAWIDTH; // сдвигаемся на начало последних данных

	for(uint16_t i = 0; i < BUFFSIZE; i++)
	{
		buff[i] = *(uint32_t*)adr; // читаем
 8000fcc:	bf1f      	itttt	ne
 8000fce:	f853 2c08 	ldrne.w	r2, [r3, #-8]
 8000fd2:	6002      	strne	r2, [r0, #0]
 8000fd4:	f853 3c04 	ldrne.w	r3, [r3, #-4]
 8000fd8:	6043      	strne	r3, [r0, #4]
		adr = adr + DATAWIDTH;
	}
}
 8000fda:	4770      	bx	lr
 8000fdc:	20002454 	.word	0x20002454
 8000fe0:	0801fc00 	.word	0x0801fc00

08000fe4 <Read_control_module_info_from_flash>:
void Read_control_module_info_from_flash(uint32_t *buff) {
 8000fe4:	b510      	push	{r4, lr}
	  res_addr = Flash_search_adress(STARTADDR, BUFFSIZE * DATAWIDTH);
 8000fe6:	2108      	movs	r1, #8
void Read_control_module_info_from_flash(uint32_t *buff) {
 8000fe8:	4604      	mov	r4, r0
	  res_addr = Flash_search_adress(STARTADDR, BUFFSIZE * DATAWIDTH);
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <Read_control_module_info_from_flash+0x1c>)
 8000fec:	f7ff ffb0 	bl	8000f50 <Flash_search_adress>
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <Read_control_module_info_from_flash+0x20>)
 8000ff2:	6018      	str	r0, [r3, #0]
	  Read_last_data_in_flash(buff);
 8000ff4:	4620      	mov	r0, r4
}
 8000ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  Read_last_data_in_flash(buff);
 8000ffa:	f7ff bfe3 	b.w	8000fc4 <Read_last_data_in_flash>
 8000ffe:	bf00      	nop
 8001000:	0801fc00 	.word	0x0801fc00
 8001004:	20002454 	.word	0x20002454

08001008 <_ZN11Grow_sensor13set_system_idESt5arrayIhLj12EE>:
        }
}

// --- Поля класса-платы ---

void Grow_sensor::set_system_id(std::array<uint8_t, AMT_BYTES_SYSTEM_ID> system_id) {
 8001008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800100a:	4604      	mov	r4, r0
 800100c:	a801      	add	r0, sp, #4
 800100e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    system_id_ = system_id;
 8001012:	c807      	ldmia	r0, {r0, r1, r2}
 8001014:	e884 000b 	stmia.w	r4, {r0, r1, r3}
}
 8001018:	b004      	add	sp, #16
 800101a:	bd10      	pop	{r4, pc}

0800101c <_ZNK11Grow_sensor13get_system_idEv>:
std::array<uint8_t, AMT_BYTES_SYSTEM_ID> Grow_sensor::get_system_id() const {
 800101c:	4602      	mov	r2, r0
    return system_id_;
 800101e:	460b      	mov	r3, r1
 8001020:	cb03      	ldmia	r3!, {r0, r1}
 8001022:	6010      	str	r0, [r2, #0]
 8001024:	6818      	ldr	r0, [r3, #0]
 8001026:	6051      	str	r1, [r2, #4]
 8001028:	6090      	str	r0, [r2, #8]
}
 800102a:	4610      	mov	r0, r2
 800102c:	4770      	bx	lr

0800102e <_ZN11Grow_sensor10set_activeEh>:

void Grow_sensor::set_active(uint8_t active) {
    if(active < 3)
 800102e:	2902      	cmp	r1, #2
        active_ = active;
 8001030:	bf98      	it	ls
 8001032:	f880 102d 	strbls.w	r1, [r0, #45]	; 0x2d
}
 8001036:	4770      	bx	lr

08001038 <_ZNK11Grow_sensor10get_activeEv>:

uint8_t Grow_sensor::get_active() const {
    return active_;
}
 8001038:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 800103c:	4770      	bx	lr

0800103e <_ZN11Grow_sensor26set_address_control_moduleE12LoRa_address>:
uint16_t Grow_sensor::get_address() const {
    return address_;
}

#if !defined( ESP32 )
bool Grow_sensor::set_address_control_module(LoRa_address address) {
 800103e:	4603      	mov	r3, r0
	if(address.branch != 0)
 8001040:	0c08      	lsrs	r0, r1, #16
		return true;
 8001042:	bf18      	it	ne
 8001044:	2001      	movne	r0, #1
bool Grow_sensor::set_address_control_module(LoRa_address address) {
 8001046:	b082      	sub	sp, #8
	address_control_module_ = address;
 8001048:	bf08      	it	eq
 800104a:	61d9      	streq	r1, [r3, #28]
	return false;
}
 800104c:	b002      	add	sp, #8
 800104e:	4770      	bx	lr

08001050 <_ZNK11Grow_sensor26get_address_control_moduleEv>:
LoRa_address Grow_sensor::get_address_control_module() const {
	return address_control_module_;
 8001050:	69c3      	ldr	r3, [r0, #28]
 8001052:	2000      	movs	r0, #0
 8001054:	b29a      	uxth	r2, r3
 8001056:	f362 000f 	bfi	r0, r2, #0, #16
 800105a:	0c1b      	lsrs	r3, r3, #16
LoRa_address Grow_sensor::get_address_control_module() const {
 800105c:	b082      	sub	sp, #8
	return address_control_module_;
 800105e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001062:	b002      	add	sp, #8
 8001064:	4770      	bx	lr

08001066 <_ZNK11Grow_sensor11get_settingEv>:
void Grow_sensor::set_setting(uint8_t setting) {
    setting_ = setting;
}
uint8_t Grow_sensor::get_setting() const {
    return setting_;
}
 8001066:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
 800106a:	4770      	bx	lr

0800106c <_ZNK11Grow_sensor8get_typeEhRh>:
    if(get_count_component() <= num)
        return true;
    result = component_[num].get_type();
    return false;
}
bool Grow_sensor::get_type(uint8_t num, uint8_t &result) const {
 800106c:	b510      	push	{r4, lr}
 800106e:	4614      	mov	r4, r2

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001070:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8001074:	1a9b      	subs	r3, r3, r2
    if(get_count_component() <= num)
 8001076:	f3c3 03c7 	ubfx	r3, r3, #3, #8
 800107a:	4299      	cmp	r1, r3
 800107c:	d206      	bcs.n	800108c <_ZNK11Grow_sensor8get_typeEhRh+0x20>
        return true;
    result = component_[num].get_type();
 800107e:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 8001082:	f000 fbec 	bl	800185e <_ZNK21Grow_sensor_component8get_typeEv>
 8001086:	7020      	strb	r0, [r4, #0]
    return false;
 8001088:	2000      	movs	r0, #0
}
 800108a:	bd10      	pop	{r4, pc}
        return true;
 800108c:	2001      	movs	r0, #1
 800108e:	e7fc      	b.n	800108a <_ZNK11Grow_sensor8get_typeEhRh+0x1e>

08001090 <_ZNK11Grow_sensor6get_idEhRh>:
    std::vector<enum Type_sensor> type_sensor;
    for(int i = 0; i < get_count_component(); ++i)
        type_sensor.push_back(component_[i].get_type());
    return type_sensor;
}
bool Grow_sensor::get_id(uint8_t num, uint8_t &result) const {
 8001090:	b510      	push	{r4, lr}
 8001092:	4614      	mov	r4, r2
 8001094:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8001098:	1a9b      	subs	r3, r3, r2
    if(get_count_component() <= num)
 800109a:	f3c3 03c7 	ubfx	r3, r3, #3, #8
 800109e:	4299      	cmp	r1, r3
 80010a0:	d206      	bcs.n	80010b0 <_ZNK11Grow_sensor6get_idEhRh+0x20>
        return true;
    result = component_[num].get_id();
 80010a2:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 80010a6:	f000 fbdc 	bl	8001862 <_ZNK21Grow_sensor_component6get_idEv>
 80010aa:	7020      	strb	r0, [r4, #0]
    return false;
 80010ac:	2000      	movs	r0, #0
}
 80010ae:	bd10      	pop	{r4, pc}
        return true;
 80010b0:	2001      	movs	r0, #1
 80010b2:	e7fc      	b.n	80010ae <_ZNK11Grow_sensor6get_idEhRh+0x1e>

080010b4 <_ZN11Grow_sensor9set_valueEhf>:
    for(int i = 0; i < get_count_component(); ++i)
        id.push_back(component_[i].get_id());
    return id;
}

bool Grow_sensor::set_value(uint8_t num, float value) {
 80010b4:	b510      	push	{r4, lr}
 80010b6:	4604      	mov	r4, r0
 80010b8:	4608      	mov	r0, r1
 80010ba:	4611      	mov	r1, r2
 80010bc:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80010c0:	1a9b      	subs	r3, r3, r2
    if(get_count_component() <= num)
 80010c2:	f3c3 03c7 	ubfx	r3, r3, #3, #8
 80010c6:	4298      	cmp	r0, r3
 80010c8:	d208      	bcs.n	80010dc <_ZN11Grow_sensor9set_valueEhf+0x28>
        return true;
    component_[num].set_value(value);
 80010ca:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80010ce:	f000 fbcc 	bl	800186a <_ZN21Grow_sensor_component9set_valueEf>
    change_value_ = true;
 80010d2:	2301      	movs	r3, #1
    return false;
 80010d4:	2000      	movs	r0, #0
    change_value_ = true;
 80010d6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 80010da:	bd10      	pop	{r4, pc}
        return true;
 80010dc:	2001      	movs	r0, #1
 80010de:	e7fc      	b.n	80010da <_ZN11Grow_sensor9set_valueEhf+0x26>

080010e0 <_ZN11Grow_sensor9get_valueEhRf>:
bool Grow_sensor::get_value(uint8_t num, float &result) {
 80010e0:	b510      	push	{r4, lr}
 80010e2:	4614      	mov	r4, r2
 80010e4:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 80010e8:	1a9b      	subs	r3, r3, r2
    if(get_count_component() <= num)
 80010ea:	f3c3 03c7 	ubfx	r3, r3, #3, #8
 80010ee:	4299      	cmp	r1, r3
 80010f0:	d206      	bcs.n	8001100 <_ZN11Grow_sensor9get_valueEhRf+0x20>
        return true;
    result = component_[num].get_value();
 80010f2:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 80010f6:	f000 fbb6 	bl	8001866 <_ZNK21Grow_sensor_component9get_valueEv>
 80010fa:	6020      	str	r0, [r4, #0]
    return false;
 80010fc:	2000      	movs	r0, #0
}
 80010fe:	bd10      	pop	{r4, pc}
        return true;
 8001100:	2001      	movs	r0, #1
 8001102:	e7fc      	b.n	80010fe <_ZN11Grow_sensor9get_valueEhRf+0x1e>

08001104 <_ZNK11Grow_sensor19get_count_componentEv>:
 8001104:	6943      	ldr	r3, [r0, #20]
 8001106:	6900      	ldr	r0, [r0, #16]
 8001108:	1a18      	subs	r0, r3, r0
}
// --- Информации о компонентах ---

uint8_t Grow_sensor::get_count_component() const {
    return component_.size();
}
 800110a:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 800110e:	4770      	bx	lr

08001110 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8001110:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001114:	e9d0 9a00 	ldrd	r9, sl, [r0]
 8001118:	4693      	mov	fp, r2

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 800111a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800111e:	4688      	mov	r8, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001120:	ebaa 0109 	sub.w	r1, sl, r9
	if (max_size() - size() < __n)
 8001124:	ebb2 0fe1 	cmp.w	r2, r1, asr #3
 8001128:	4607      	mov	r7, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800112a:	ea4f 03e1 	mov.w	r3, r1, asr #3
	if (max_size() - size() < __n)
 800112e:	d102      	bne.n	8001136 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8001130:	4823      	ldr	r0, [pc, #140]	; (80011c0 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb0>)
 8001132:	f009 f914 	bl	800a35e <_ZSt20__throw_length_errorPKc>
 8001136:	2b01      	cmp	r3, #1
 8001138:	461c      	mov	r4, r3
 800113a:	bf38      	it	cc
 800113c:	2401      	movcc	r4, #1
 800113e:	18e4      	adds	r4, r4, r3
 8001140:	eba8 0609 	sub.w	r6, r8, r9

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001144:	d23a      	bcs.n	80011bc <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xac>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001146:	b13c      	cbz	r4, 8001158 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x48>
 8001148:	4294      	cmp	r4, r2
 800114a:	bf28      	it	cs
 800114c:	4614      	movcs	r4, r2
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800114e:	00e0      	lsls	r0, r4, #3
 8001150:	f009 f8f2 	bl	800a338 <_Znwj>
 8001154:	4605      	mov	r5, r0
 8001156:	e000      	b.n	800115a <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
 8001158:	4625      	mov	r5, r4
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800115a:	e89b 0003 	ldmia.w	fp, {r0, r1}
 800115e:	19ab      	adds	r3, r5, r6
 8001160:	e883 0003 	stmia.w	r3, {r0, r1}
 8001164:	2300      	movs	r3, #0
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
 8001166:	eb09 0203 	add.w	r2, r9, r3
 800116a:	4590      	cmp	r8, r2
 800116c:	d10e      	bne.n	800118c <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7c>
 800116e:	2300      	movs	r3, #0
 8001170:	3608      	adds	r6, #8
 8001172:	442e      	add	r6, r5
 8001174:	eb03 0208 	add.w	r2, r3, r8
 8001178:	4592      	cmp	sl, r2
 800117a:	d00f      	beq.n	800119c <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
 800117c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001180:	eb06 0c03 	add.w	ip, r6, r3
 8001184:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001188:	3308      	adds	r3, #8
 800118a:	e7f3      	b.n	8001174 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x64>
 800118c:	eb05 0c03 	add.w	ip, r5, r3
 8001190:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001194:	3308      	adds	r3, #8
 8001196:	e88c 0003 	stmia.w	ip, {r0, r1}
 800119a:	e7e4      	b.n	8001166 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x56>
 800119c:	ebaa 0808 	sub.w	r8, sl, r8
 80011a0:	4446      	add	r6, r8
	if (__p)
 80011a2:	f1b9 0f00 	cmp.w	r9, #0
 80011a6:	d002      	beq.n	80011ae <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
	::operator delete(__p);
 80011a8:	4648      	mov	r0, r9
 80011aa:	f009 f8bf 	bl	800a32c <_ZdlPv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80011ae:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
 80011b2:	e9c7 5600 	strd	r5, r6, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80011b6:	60bc      	str	r4, [r7, #8]
    }
 80011b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80011bc:	4614      	mov	r4, r2
 80011be:	e7c6      	b.n	800114e <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
 80011c0:	0800a668 	.word	0x0800a668

080011c4 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 80011c4:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80011c6:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 80011ca:	428b      	cmp	r3, r1
      vector<_Tp, _Alloc>::
 80011cc:	b510      	push	{r4, lr}
 80011ce:	4604      	mov	r4, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80011d0:	d006      	beq.n	80011e0 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80011d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011d6:	e883 0003 	stmia.w	r3, {r0, r1}
	    ++this->_M_impl._M_finish;
 80011da:	3308      	adds	r3, #8
 80011dc:	6063      	str	r3, [r4, #4]
      }
 80011de:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80011e0:	4619      	mov	r1, r3
 80011e2:	f7ff ff95 	bl	8001110 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 80011e6:	e7fa      	b.n	80011de <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x1a>

080011e8 <_ZN11Grow_sensorC1EhP11Type_sensor>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 80011e8:	2300      	movs	r3, #0
Grow_sensor::Grow_sensor(uint8_t amt_component, enum Type_sensor* type_sensor) {
 80011ea:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80011ee:	4617      	mov	r7, r2
class LoRa_address {
public:
    uint16_t group = 0xFFFF;  // Адрес группы
    uint16_t branch = 0xFFFF; // Адрес ветви
public:
    LoRa_address() = default;
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011f4:	4604      	mov	r4, r0
 80011f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80011fa:	4689      	mov	r9, r1
 80011fc:	61c2      	str	r2, [r0, #28]
 80011fe:	f100 0810 	add.w	r8, r0, #16
 8001202:	6183      	str	r3, [r0, #24]
 8001204:	1882      	adds	r2, r0, r2
 8001206:	f100 010b 	add.w	r1, r0, #11
        system_id_[i] = 0;
 800120a:	f802 3f01 	strb.w	r3, [r2, #1]!
    for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
 800120e:	428a      	cmp	r2, r1
 8001210:	d1fb      	bne.n	800120a <_ZN11Grow_sensorC1EhP11Type_sensor+0x22>
    address_ = 0xFFFF;
 8001212:	f64f 72ff 	movw	r2, #65535	; 0xffff
    active_ = false;
 8001216:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    change_value_ = false;
 800121a:	85e3      	strh	r3, [r4, #46]	; 0x2e
    for(int i = 0; i < COUNT_TYPE_SENSOR; ++i)
 800121c:	2300      	movs	r3, #0
 800121e:	4d15      	ldr	r5, [pc, #84]	; (8001274 <_ZN11Grow_sensorC1EhP11Type_sensor+0x8c>)
    address_ = 0xFFFF;
 8001220:	81a2      	strh	r2, [r4, #12]
    for(int i = 0; i < COUNT_TYPE_SENSOR; ++i)
 8001222:	46aa      	mov	sl, r5
    change_value_ = false;
 8001224:	462a      	mov	r2, r5
        id_mas_sensors[i] = 0;
 8001226:	4619      	mov	r1, r3
    for(int i = 0; i < COUNT_TYPE_SENSOR; ++i)
 8001228:	3301      	adds	r3, #1
 800122a:	2b0d      	cmp	r3, #13
        id_mas_sensors[i] = 0;
 800122c:	f802 1b01 	strb.w	r1, [r2], #1
    for(int i = 0; i < COUNT_TYPE_SENSOR; ++i)
 8001230:	d1fa      	bne.n	8001228 <_ZN11Grow_sensorC1EhP11Type_sensor+0x40>
    for(int i = 0; i < amt_component; ++i)
 8001232:	2600      	movs	r6, #0
 8001234:	45b1      	cmp	r9, r6
 8001236:	dd0e      	ble.n	8001256 <_ZN11Grow_sensorC1EhP11Type_sensor+0x6e>
        component_.push_back(Grow_sensor_component(type_sensor[i], (id_mas_sensors[type_sensor[i]]++)));
 8001238:	5db9      	ldrb	r1, [r7, r6]
 800123a:	4668      	mov	r0, sp
 800123c:	f81a 2001 	ldrb.w	r2, [sl, r1]
    for(int i = 0; i < amt_component; ++i)
 8001240:	3601      	adds	r6, #1
        component_.push_back(Grow_sensor_component(type_sensor[i], (id_mas_sensors[type_sensor[i]]++)));
 8001242:	1c53      	adds	r3, r2, #1
 8001244:	f80a 3001 	strb.w	r3, [sl, r1]
 8001248:	f000 fb04 	bl	8001854 <_ZN21Grow_sensor_componentC1E11Type_sensorh>
      { emplace_back(std::move(__x)); }
 800124c:	4669      	mov	r1, sp
 800124e:	4640      	mov	r0, r8
 8001250:	f7ff ffb8 	bl	80011c4 <_ZNSt6vectorI21Grow_sensor_componentSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
    for(int i = 0; i < amt_component; ++i)
 8001254:	e7ee      	b.n	8001234 <_ZN11Grow_sensorC1EhP11Type_sensor+0x4c>
    for (int i = 0; i < COUNT_TYPE_SENSOR; ++i)
 8001256:	2300      	movs	r3, #0
            setting_ = 0x04; // 0000.0100 - бит индивидуального номера, в случае наличия повторов
 8001258:	2204      	movs	r2, #4
        if(id_mas_sensors[i] > 1) {
 800125a:	f815 1b01 	ldrb.w	r1, [r5], #1
    for (int i = 0; i < COUNT_TYPE_SENSOR; ++i)
 800125e:	3301      	adds	r3, #1
        if(id_mas_sensors[i] > 1) {
 8001260:	2901      	cmp	r1, #1
            setting_ = 0x04; // 0000.0100 - бит индивидуального номера, в случае наличия повторов
 8001262:	bf88      	it	hi
 8001264:	f884 202f 	strbhi.w	r2, [r4, #47]	; 0x2f
    for (int i = 0; i < COUNT_TYPE_SENSOR; ++i)
 8001268:	2b0d      	cmp	r3, #13
 800126a:	d1f6      	bne.n	800125a <_ZN11Grow_sensorC1EhP11Type_sensor+0x72>
}
 800126c:	4620      	mov	r0, r4
 800126e:	b002      	add	sp, #8
 8001270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001274:	20000104 	.word	0x20000104

08001278 <_ZN21Grow_sensor_interface9load_dataER11Grow_sensorR17LoRa_contact_datamm>:

uint8_t data[50];
uint8_t size;

// --- Сохранение в энергонезависимую память ---
void Grow_sensor_interface::load_data(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data, uint32_t adr, uint32_t channel) {
 8001278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800127a:	4615      	mov	r5, r2
 800127c:	460c      	mov	r4, r1
    LoRa_address address(adr);
 800127e:	a801      	add	r0, sp, #4
 8001280:	4619      	mov	r1, r3
 8001282:	f004 f9dc 	bl	800563e <_ZN12LoRa_addressC1Em>
    contact_data.set_my_adr(address);
 8001286:	9901      	ldr	r1, [sp, #4]
 8001288:	4628      	mov	r0, r5
 800128a:	f000 fb51 	bl	8001930 <_ZN17LoRa_contact_data10set_my_adrE12LoRa_address>
    address.branch = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	f8ad 3006 	strh.w	r3, [sp, #6]
    grow_sensor.set_address_control_module(address);
 8001294:	9901      	ldr	r1, [sp, #4]
 8001296:	4620      	mov	r0, r4
 8001298:	f7ff fed1 	bl	800103e <_ZN11Grow_sensor26set_address_control_moduleE12LoRa_address>
    contact_data.set_channel(channel);
 800129c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80012a0:	4628      	mov	r0, r5
 80012a2:	f000 fb55 	bl	8001950 <_ZN17LoRa_contact_data11set_channelEt>
    grow_sensor.set_active(2);
 80012a6:	2102      	movs	r1, #2
 80012a8:	4620      	mov	r0, r4
 80012aa:	f7ff fec0 	bl	800102e <_ZN11Grow_sensor10set_activeEh>
}
 80012ae:	b003      	add	sp, #12
 80012b0:	bd30      	pop	{r4, r5, pc}

080012b2 <_ZN21Grow_sensor_interface9save_dataERK11Grow_sensorRK17LoRa_contact_dataRmS6_>:
bool Grow_sensor_interface::save_data(const Grow_sensor &grow_sensor, const LoRa_contact_data& contact_data, uint32_t &adr, uint32_t &channel) {
 80012b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(grow_sensor.get_active() != 2)
 80012b4:	4608      	mov	r0, r1
bool Grow_sensor_interface::save_data(const Grow_sensor &grow_sensor, const LoRa_contact_data& contact_data, uint32_t &adr, uint32_t &channel) {
 80012b6:	4614      	mov	r4, r2
 80012b8:	461e      	mov	r6, r3
    if(grow_sensor.get_active() != 2)
 80012ba:	f7ff febd 	bl	8001038 <_ZNK11Grow_sensor10get_activeEv>
 80012be:	2802      	cmp	r0, #2
 80012c0:	d111      	bne.n	80012e6 <_ZN21Grow_sensor_interface9save_dataERK11Grow_sensorRK17LoRa_contact_dataRmS6_+0x34>
        return true;
    adr = (contact_data.get_my_adr().group << 16 | contact_data.get_my_adr().branch);
 80012c2:	4620      	mov	r0, r4
 80012c4:	f000 fb39 	bl	800193a <_ZNK17LoRa_contact_data10get_my_adrEv>
 80012c8:	0405      	lsls	r5, r0, #16
 80012ca:	4620      	mov	r0, r4
 80012cc:	f000 fb35 	bl	800193a <_ZNK17LoRa_contact_data10get_my_adrEv>
 80012d0:	ea45 4510 	orr.w	r5, r5, r0, lsr #16
 80012d4:	6035      	str	r5, [r6, #0]
    channel = contact_data.get_channel();
 80012d6:	4620      	mov	r0, r4
 80012d8:	f000 fb41 	bl	800195e <_ZNK17LoRa_contact_data11get_channelEv>
 80012dc:	9b06      	ldr	r3, [sp, #24]
 80012de:	6018      	str	r0, [r3, #0]
 80012e0:	2000      	movs	r0, #0
    return false;
}
 80012e2:	b002      	add	sp, #8
 80012e4:	bd70      	pop	{r4, r5, r6, pc}
        return true;
 80012e6:	2001      	movs	r0, #1
 80012e8:	e7fb      	b.n	80012e2 <_ZN21Grow_sensor_interface9save_dataERK11Grow_sensorRK17LoRa_contact_dataRmS6_+0x30>
	...

080012ec <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data>:

// --- LoRa-соединение ---
void Grow_sensor_interface::send_registration_packet(const Grow_sensor &grow_sensor, LoRa_contact_data& contact_data) {
 80012ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012f0:	b088      	sub	sp, #32
 80012f2:	460e      	mov	r6, r1
    LoRa_packet packet;
 80012f4:	a803      	add	r0, sp, #12
void Grow_sensor_interface::send_registration_packet(const Grow_sensor &grow_sensor, LoRa_contact_data& contact_data) {
 80012f6:	4617      	mov	r7, r2
    LoRa_packet packet;
 80012f8:	f003 f870 	bl	80043dc <_ZN11LoRa_packetC1Ev>
    uint8_t com = 0;
 80012fc:	2300      	movs	r3, #0
    uint8_t len = grow_sensor.get_count_component();
 80012fe:	4630      	mov	r0, r6
 8001300:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80013cc <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xe0>
    uint8_t com = 0;
 8001304:	f88d 300a 	strb.w	r3, [sp, #10]
    uint8_t len = grow_sensor.get_count_component();
 8001308:	f10d 0a14 	add.w	sl, sp, #20
 800130c:	f7ff fefa 	bl	8001104 <_ZNK11Grow_sensor19get_count_componentEv>
 8001310:	240c      	movs	r4, #12
 8001312:	4655      	mov	r5, sl
 8001314:	46c8      	mov	r8, r9
 8001316:	f88d 000b 	strb.w	r0, [sp, #11]
    uint8_t num_byte = 0;
    // Формирование данных пакета: ID, Type module, Count component, Type all component
    for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
        data[num_byte++] = grow_sensor.get_system_id()[i];
 800131a:	4631      	mov	r1, r6
 800131c:	4628      	mov	r0, r5
 800131e:	f7ff fe7d 	bl	800101c <_ZNK11Grow_sensor13get_system_idEv>
 8001322:	f81a 3b01 	ldrb.w	r3, [sl], #1
    for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
 8001326:	3c01      	subs	r4, #1
        data[num_byte++] = grow_sensor.get_system_id()[i];
 8001328:	f809 3b01 	strb.w	r3, [r9], #1
    for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
 800132c:	d1f5      	bne.n	800131a <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0x2e>
    data[num_byte++] = len;  // Length = grow_sensor.get_count_component();
 800132e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001332:	f888 300c 	strb.w	r3, [r8, #12]
    data[num_byte++] = 0x01; // Type = sensors
 8001336:	2301      	movs	r3, #1
 8001338:	f888 300d 	strb.w	r3, [r8, #13]
    for(int i = 0; i < len; ++i)
 800133c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001340:	b2e1      	uxtb	r1, r4
 8001342:	f101 020e 	add.w	r2, r1, #14
 8001346:	42a3      	cmp	r3, r4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	dd05      	ble.n	8001358 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0x6c>
        grow_sensor.get_type(i, data[num_byte++]);
 800134c:	4630      	mov	r0, r6
 800134e:	4442      	add	r2, r8
 8001350:	f7ff fe8c 	bl	800106c <_ZNK11Grow_sensor8get_typeEhRh>
    for(int i = 0; i < len; ++i)
 8001354:	3401      	adds	r4, #1
 8001356:	e7f1      	b.n	800133c <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0x50>
    // Формирование пакета
    packet_system.set_dest_adr(packet, LORA_GLOBAL_ADDRESS);
 8001358:	4628      	mov	r0, r5
 800135a:	491a      	ldr	r1, [pc, #104]	; (80013c4 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xd8>)
 800135c:	f004 f96f 	bl	800563e <_ZN12LoRa_addressC1Em>
 8001360:	9a05      	ldr	r2, [sp, #20]
 8001362:	a903      	add	r1, sp, #12
 8001364:	4818      	ldr	r0, [pc, #96]	; (80013c8 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xdc>)
 8001366:	f004 f9f6 	bl	8005756 <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address>
    packet_system.set_sour_adr(packet, LORA_GLOBAL_ADDRESS);
 800136a:	4628      	mov	r0, r5
 800136c:	4915      	ldr	r1, [pc, #84]	; (80013c4 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xd8>)
 800136e:	f004 f966 	bl	800563e <_ZN12LoRa_addressC1Em>
 8001372:	9a05      	ldr	r2, [sp, #20]
 8001374:	a903      	add	r1, sp, #12
 8001376:	4814      	ldr	r0, [pc, #80]	; (80013c8 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xdc>)
 8001378:	f004 fa20 	bl	80057bc <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address>
    packet_system.set_packet_type(packet, Packet_Type::SYSTEM);
 800137c:	a903      	add	r1, sp, #12
 800137e:	2203      	movs	r2, #3
 8001380:	4811      	ldr	r0, [pc, #68]	; (80013c8 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xdc>)
 8001382:	f004 fa3a 	bl	80057fa <_ZN15Packet_analyzer15set_packet_typeER11LoRa_packet11Packet_Type>
    packet_system.set_packet_data(packet, &com, data, &len);
 8001386:	f10d 030b 	add.w	r3, sp, #11
 800138a:	f10d 020a 	add.w	r2, sp, #10
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	a903      	add	r1, sp, #12
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xe0>)
 8001394:	480c      	ldr	r0, [pc, #48]	; (80013c8 <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data+0xdc>)
 8001396:	f004 fc8d 	bl	8005cb4 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_>
    // Отправка пакета
    contact_data.add_packet(std::move(packet));
 800139a:	a903      	add	r1, sp, #12
 800139c:	4628      	mov	r0, r5
 800139e:	f003 f898 	bl	80044d2 <_ZN11LoRa_packetC1EOS_>
 80013a2:	4629      	mov	r1, r5
 80013a4:	4638      	mov	r0, r7
 80013a6:	f000 fadd 	bl	8001964 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet>
 80013aa:	4628      	mov	r0, r5
 80013ac:	f003 f81e 	bl	80043ec <_ZN11LoRa_packetD1Ev>
    contact_data.broadcast_send();
 80013b0:	2100      	movs	r1, #0
 80013b2:	4638      	mov	r0, r7
 80013b4:	f000 fffb 	bl	80023ae <_ZN17LoRa_contact_data14broadcast_sendEb>
    LoRa_packet packet;
 80013b8:	a803      	add	r0, sp, #12
 80013ba:	f003 f817 	bl	80043ec <_ZN11LoRa_packetD1Ev>
}
 80013be:	b008      	add	sp, #32
 80013c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013c4:	01ff7fff 	.word	0x01ff7fff
 80013c8:	20002414 	.word	0x20002414
 80013cc:	2000018d 	.word	0x2000018d

080013d0 <_ZN21Grow_sensor_interface19check_contact_errorER11Grow_sensorR17LoRa_contact_data>:

bool Grow_sensor_interface::check_contact_error(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data) {
 80013d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(grow_sensor.get_active() != 1)
 80013d2:	4608      	mov	r0, r1
bool Grow_sensor_interface::check_contact_error(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data) {
 80013d4:	460d      	mov	r5, r1
 80013d6:	4616      	mov	r6, r2
    if(grow_sensor.get_active() != 1)
 80013d8:	f7ff fe2e 	bl	8001038 <_ZNK11Grow_sensor10get_activeEv>
 80013dc:	2801      	cmp	r0, #1
 80013de:	4604      	mov	r4, r0
 80013e0:	d116      	bne.n	8001410 <_ZN21Grow_sensor_interface19check_contact_errorER11Grow_sensorR17LoRa_contact_data+0x40>
        return false;
    grow_sensor.set_address_control_module(LORA_GLOBAL_ADDRESS);
 80013e2:	490c      	ldr	r1, [pc, #48]	; (8001414 <_ZN21Grow_sensor_interface19check_contact_errorER11Grow_sensorR17LoRa_contact_data+0x44>)
 80013e4:	a801      	add	r0, sp, #4
 80013e6:	f004 f92a 	bl	800563e <_ZN12LoRa_addressC1Em>
 80013ea:	9901      	ldr	r1, [sp, #4]
 80013ec:	4628      	mov	r0, r5
 80013ee:	f7ff fe26 	bl	800103e <_ZN11Grow_sensor26set_address_control_moduleE12LoRa_address>
    contact_data.set_my_adr(LORA_GLOBAL_ADDRESS);
 80013f2:	4908      	ldr	r1, [pc, #32]	; (8001414 <_ZN21Grow_sensor_interface19check_contact_errorER11Grow_sensorR17LoRa_contact_data+0x44>)
 80013f4:	a801      	add	r0, sp, #4
 80013f6:	f004 f922 	bl	800563e <_ZN12LoRa_addressC1Em>
 80013fa:	9901      	ldr	r1, [sp, #4]
 80013fc:	4630      	mov	r0, r6
 80013fe:	f000 fa97 	bl	8001930 <_ZN17LoRa_contact_data10set_my_adrE12LoRa_address>
    grow_sensor.set_active(0);
 8001402:	4628      	mov	r0, r5
 8001404:	2100      	movs	r1, #0
 8001406:	f7ff fe12 	bl	800102e <_ZN11Grow_sensor10set_activeEh>
    return true;
 800140a:	4620      	mov	r0, r4
}
 800140c:	b002      	add	sp, #8
 800140e:	bd70      	pop	{r4, r5, r6, pc}
        return false;
 8001410:	2000      	movs	r0, #0
 8001412:	e7fb      	b.n	800140c <_ZN21Grow_sensor_interface19check_contact_errorER11Grow_sensorR17LoRa_contact_data+0x3c>
 8001414:	01ff7fff 	.word	0x01ff7fff

08001418 <_ZNSt5arrayI11LoRa_packetLj15EED1Ev>:
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  N  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
 8001418:	b538      	push	{r3, r4, r5, lr}
 800141a:	4605      	mov	r5, r0
 800141c:	f100 0478 	add.w	r4, r0, #120	; 0x78
 8001420:	42ac      	cmp	r4, r5
 8001422:	d004      	beq.n	800142e <_ZNSt5arrayI11LoRa_packetLj15EED1Ev+0x16>
 8001424:	3c08      	subs	r4, #8
 8001426:	4620      	mov	r0, r4
 8001428:	f002 ffe0 	bl	80043ec <_ZN11LoRa_packetD1Ev>
 800142c:	e7f8      	b.n	8001420 <_ZNSt5arrayI11LoRa_packetLj15EED1Ev+0x8>
 800142e:	4620      	mov	r0, r4
 8001430:	bd38      	pop	{r3, r4, r5, pc}

08001432 <_ZNSt5arrayI11LoRa_packetLj15EEaSEOS1_>:
 8001432:	b570      	push	{r4, r5, r6, lr}
 8001434:	4605      	mov	r5, r0
 8001436:	460e      	mov	r6, r1
 8001438:	2400      	movs	r4, #0
 800143a:	1931      	adds	r1, r6, r4
 800143c:	1928      	adds	r0, r5, r4
 800143e:	3408      	adds	r4, #8
 8001440:	f003 f838 	bl	80044b4 <_ZN11LoRa_packetaSEOS_>
 8001444:	2c78      	cmp	r4, #120	; 0x78
 8001446:	d1f8      	bne.n	800143a <_ZNSt5arrayI11LoRa_packetLj15EEaSEOS1_+0x8>
 8001448:	4628      	mov	r0, r5
 800144a:	bd70      	pop	{r4, r5, r6, pc}

0800144c <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data>:

bool Grow_sensor_interface::check_regist_packet(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data) {
 800144c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001450:	4616      	mov	r6, r2
 8001452:	b0a7      	sub	sp, #156	; 0x9c
    all_packets = contact_data.get_all_packet(all_packets_len);
 8001454:	4a38      	ldr	r2, [pc, #224]	; (8001538 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xec>)
 8001456:	a808      	add	r0, sp, #32
bool Grow_sensor_interface::check_regist_packet(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data) {
 8001458:	460c      	mov	r4, r1
    all_packets = contact_data.get_all_packet(all_packets_len);
 800145a:	4631      	mov	r1, r6
 800145c:	f000 facc 	bl	80019f8 <_ZN17LoRa_contact_data14get_all_packetERh>
 8001460:	a908      	add	r1, sp, #32
 8001462:	4836      	ldr	r0, [pc, #216]	; (800153c <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xf0>)
 8001464:	f7ff ffe5 	bl	8001432 <_ZNSt5arrayI11LoRa_packetLj15EEaSEOS1_>
 8001468:	a808      	add	r0, sp, #32
 800146a:	f7ff ffd5 	bl	8001418 <_ZNSt5arrayI11LoRa_packetLj15EED1Ev>
    // (!) ----- сделать сброс в 0 при отсутствии контакта в течении времени
    // проверить на то является ли пакет подтверждением регистрации, если да, то произвести попытку регистрации
    for(int i = 0; i < all_packets_len; ++i) {
 800146e:	2500      	movs	r5, #0
 8001470:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8001538 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xec>
 8001474:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800153c <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xf0>
        if(packet_analyzer.get_packet_type(all_packets[i]) == Packet_Type::SYSTEM) {
 8001478:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 800154c <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x100>
    for(int i = 0; i < all_packets_len; ++i) {
 800147c:	f898 3000 	ldrb.w	r3, [r8]
 8001480:	42ab      	cmp	r3, r5
 8001482:	dd56      	ble.n	8001532 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xe6>
        if(packet_analyzer.get_packet_type(all_packets[i]) == Packet_Type::SYSTEM) {
 8001484:	eb09 07c5 	add.w	r7, r9, r5, lsl #3
 8001488:	4639      	mov	r1, r7
 800148a:	4650      	mov	r0, sl
 800148c:	f004 f942 	bl	8005714 <_ZN15Packet_analyzer15get_packet_typeERK11LoRa_packet>
 8001490:	2803      	cmp	r0, #3
 8001492:	d14c      	bne.n	800152e <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xe2>
            uint8_t err = 0;
            err = packet_system.get_size_by_packet(all_packets[i], size);
 8001494:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8001550 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x104>
 8001498:	4639      	mov	r1, r7
 800149a:	465a      	mov	r2, fp
 800149c:	4828      	ldr	r0, [pc, #160]	; (8001540 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xf4>)
 800149e:	f004 fcd5 	bl	8005e4c <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh>
            if((err != 0) || (size != (3+AMT_BYTES_SYSTEM_ID)))
 80014a2:	2800      	cmp	r0, #0
 80014a4:	d143      	bne.n	800152e <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xe2>
 80014a6:	f89b 3000 	ldrb.w	r3, [fp]
 80014aa:	2b0f      	cmp	r3, #15
 80014ac:	d13f      	bne.n	800152e <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xe2>
                continue;
            uint8_t com = 0x00;
            uint8_t len = 0;
            packet_system.get_packet_data(all_packets[i], &com, data, &len);
 80014ae:	f10d 030f 	add.w	r3, sp, #15
            uint8_t com = 0x00;
 80014b2:	f88d 000e 	strb.w	r0, [sp, #14]
            uint8_t len = 0;
 80014b6:	f88d 000f 	strb.w	r0, [sp, #15]
            packet_system.get_packet_data(all_packets[i], &com, data, &len);
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	4639      	mov	r1, r7
 80014be:	4b21      	ldr	r3, [pc, #132]	; (8001544 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xf8>)
 80014c0:	481f      	ldr	r0, [pc, #124]	; (8001540 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xf4>)
 80014c2:	f10d 020e 	add.w	r2, sp, #14
 80014c6:	f004 fc5f 	bl	8005d88 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_>
            if(com != 0x01)
 80014ca:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d12d      	bne.n	800152e <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xe2>
 80014d2:	aa05      	add	r2, sp, #20
 80014d4:	230c      	movs	r3, #12
 80014d6:	4693      	mov	fp, r2
 80014d8:	491a      	ldr	r1, [pc, #104]	; (8001544 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xf8>)
                continue;
            uint8_t num_byte = 0;
            std::array<uint8_t, AMT_BYTES_SYSTEM_ID> sensor_id;
            for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
                sensor_id[i]= data[num_byte++];
 80014da:	f811 0b01 	ldrb.w	r0, [r1], #1
            for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
 80014de:	3b01      	subs	r3, #1
                sensor_id[i]= data[num_byte++];
 80014e0:	f802 0b01 	strb.w	r0, [r2], #1
            for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
 80014e4:	d1f9      	bne.n	80014da <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x8e>
            if(sensor_id != grow_sensor.get_system_id())
 80014e6:	4621      	mov	r1, r4
 80014e8:	a808      	add	r0, sp, #32
 80014ea:	f7ff fd97 	bl	800101c <_ZNK11Grow_sensor13get_system_idEv>
      template<typename _Tp>
	static bool
	equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
	{
	  if (const size_t __len = (__last1 - __first1))
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 80014ee:	220c      	movs	r2, #12
 80014f0:	4658      	mov	r0, fp
 80014f2:	a908      	add	r1, sp, #32
 80014f4:	f008 ff80 	bl	800a3f8 <memcmp>
 80014f8:	b9c8      	cbnz	r0, 800152e <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xe2>
                continue;
            grow_sensor.set_address_control_module(packet_system.get_sour_adr(all_packets[i]));
 80014fa:	4639      	mov	r1, r7
 80014fc:	4810      	ldr	r0, [pc, #64]	; (8001540 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xf4>)
 80014fe:	f004 f8fb 	bl	80056f8 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>
 8001502:	4601      	mov	r1, r0
 8001504:	9008      	str	r0, [sp, #32]
 8001506:	4620      	mov	r0, r4
 8001508:	f7ff fd99 	bl	800103e <_ZN11Grow_sensor26set_address_control_moduleE12LoRa_address>
            contact_data.set_my_adr(LoRa_address(&data[num_byte]));
 800150c:	2203      	movs	r2, #3
 800150e:	490e      	ldr	r1, [pc, #56]	; (8001548 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xfc>)
 8001510:	a804      	add	r0, sp, #16
 8001512:	f004 f879 	bl	8005608 <_ZN12LoRa_addressC1EPKhh>
 8001516:	9904      	ldr	r1, [sp, #16]
 8001518:	4630      	mov	r0, r6
 800151a:	f000 fa09 	bl	8001930 <_ZN17LoRa_contact_data10set_my_adrE12LoRa_address>
            num_byte += 3;
            grow_sensor.set_active(1);
 800151e:	4620      	mov	r0, r4
 8001520:	2101      	movs	r1, #1
 8001522:	f7ff fd84 	bl	800102e <_ZN11Grow_sensor10set_activeEh>
            return true;
 8001526:	2001      	movs	r0, #1
        }
    }
    return false;
}
 8001528:	b027      	add	sp, #156	; 0x9c
 800152a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(int i = 0; i < all_packets_len; ++i) {
 800152e:	3501      	adds	r5, #1
 8001530:	e7a4      	b.n	800147c <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0x30>
    return false;
 8001532:	2000      	movs	r0, #0
 8001534:	e7f8      	b.n	8001528 <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data+0xdc>
 8001536:	bf00      	nop
 8001538:	2000018c 	.word	0x2000018c
 800153c:	20000114 	.word	0x20000114
 8001540:	20002414 	.word	0x20002414
 8001544:	2000018d 	.word	0x2000018d
 8001548:	20000199 	.word	0x20000199
 800154c:	20002398 	.word	0x20002398
 8001550:	200001c0 	.word	0x200001c0

08001554 <_ZN21Grow_sensor_interface23contact_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet>:
    return 0;
}



uint8_t Grow_sensor_interface::contact_package_handler(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data, LoRa_packet& packet) {
 8001554:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001556:	4619      	mov	r1, r3
    uint8_t err = 0;
    uint8_t com = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8_t len = 0;
 800155e:	f88d 300f 	strb.w	r3, [sp, #15]
    err = packet_connection.get_packet_data(packet, &com, data, &len);
 8001562:	f10d 030f 	add.w	r3, sp, #15
 8001566:	f10d 020e 	add.w	r2, sp, #14
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	4806      	ldr	r0, [pc, #24]	; (8001588 <_ZN21Grow_sensor_interface23contact_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0x34>)
 800156e:	4b07      	ldr	r3, [pc, #28]	; (800158c <_ZN21Grow_sensor_interface23contact_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0x38>)
 8001570:	f004 faaa 	bl	8005ac8 <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
    switch(com) {
 8001574:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8001578:	2b0c      	cmp	r3, #12
 800157a:	bf8e      	itee	hi
 800157c:	2001      	movhi	r0, #1
 800157e:	4a04      	ldrls	r2, [pc, #16]	; (8001590 <_ZN21Grow_sensor_interface23contact_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0x3c>)
 8001580:	5cd0      	ldrbls	r0, [r2, r3]
    // 0 - нет ошибки, пакет обработан
    // 1 - не распознан тип пакета
    // 2 - неверный тип пакета (пакет не может прийти при контакте)
    // 3 - нереализованна обработка
    return err;
}
 8001582:	b005      	add	sp, #20
 8001584:	f85d fb04 	ldr.w	pc, [sp], #4
 8001588:	200023b4 	.word	0x200023b4
 800158c:	2000018d 	.word	0x2000018d
 8001590:	0800a682 	.word	0x0800a682

08001594 <_GLOBAL__sub_I_grow_sensor_interface>:
    // 1 - не распознан тип пакета
    // 2 - неверный тип пакета (пакет не может прийти при контакте)
    // 3 - нереализованна обработка
    // 4 - ошибка пакета
    return err;
}
 8001594:	b538      	push	{r3, r4, r5, lr}
 8001596:	2400      	movs	r4, #0
 8001598:	4d03      	ldr	r5, [pc, #12]	; (80015a8 <_GLOBAL__sub_I_grow_sensor_interface+0x14>)
 800159a:	1928      	adds	r0, r5, r4
 800159c:	3408      	adds	r4, #8
 800159e:	f002 ff1d 	bl	80043dc <_ZN11LoRa_packetC1Ev>
 80015a2:	2c78      	cmp	r4, #120	; 0x78
 80015a4:	d1f9      	bne.n	800159a <_GLOBAL__sub_I_grow_sensor_interface+0x6>
 80015a6:	bd38      	pop	{r3, r4, r5, pc}
 80015a8:	20000114 	.word	0x20000114

080015ac <_GLOBAL__sub_D_grow_sensor_interface>:
 80015ac:	b508      	push	{r3, lr}
static std::array<LoRa_packet, CONTACT_DATA_MAX_PACKET> all_packets;
 80015ae:	4802      	ldr	r0, [pc, #8]	; (80015b8 <_GLOBAL__sub_D_grow_sensor_interface+0xc>)
 80015b0:	f7ff ff32 	bl	8001418 <_ZNSt5arrayI11LoRa_packetLj15EED1Ev>
}
 80015b4:	bd08      	pop	{r3, pc}
 80015b6:	bf00      	nop
 80015b8:	20000114 	.word	0x20000114

080015bc <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data>:
uint8_t Grow_sensor_interface::build_data_packet(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data) {
 80015bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015c0:	4616      	mov	r6, r2
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c6:	4b48      	ldr	r3, [pc, #288]	; (80016e8 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x12c>)
 80015c8:	460d      	mov	r5, r1
 80015ca:	b08b      	sub	sp, #44	; 0x2c
 80015cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80015d4:	f3bf 8f6f 	isb	sy
 80015d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
 80015dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80015e0:	f3bf 8f6f 	isb	sy
    if(grow_sensor.get_active() == 2) {
 80015e4:	4608      	mov	r0, r1
 80015e6:	f7ff fd27 	bl	8001038 <_ZNK11Grow_sensor10get_activeEv>
 80015ea:	2802      	cmp	r0, #2
 80015ec:	d009      	beq.n	8001602 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x46>
    int i = 0;
 80015ee:	2400      	movs	r4, #0
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f4:	4b3c      	ldr	r3, [pc, #240]	; (80016e8 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x12c>)
}
 80015f6:	b2e0      	uxtb	r0, r4
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	b00b      	add	sp, #44	; 0x2c
 80015fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(!contact_data.get_signal_start_connect()) {
 8001602:	4630      	mov	r0, r6
 8001604:	f000 fa54 	bl	8001ab0 <_ZN17LoRa_contact_data24get_signal_start_connectEv>
 8001608:	4604      	mov	r4, r0
 800160a:	2800      	cmp	r0, #0
 800160c:	d1ef      	bne.n	80015ee <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x32>
            contact_data.end_contact();
 800160e:	4630      	mov	r0, r6
 8001610:	f000 fe48 	bl	80022a4 <_ZN17LoRa_contact_data11end_contactEv>
            contact_data.clear_send_packet();
 8001614:	4630      	mov	r0, r6
 8001616:	f000 f9dd 	bl	80019d4 <_ZN17LoRa_contact_data17clear_send_packetEv>
            uint8_t amt = grow_sensor.get_count_component();
 800161a:	4628      	mov	r0, r5
 800161c:	f7ff fd72 	bl	8001104 <_ZNK11Grow_sensor19get_count_componentEv>
 8001620:	4681      	mov	r9, r0
            packet_sensor.set_setting(grow_sensor.get_setting());
 8001622:	4628      	mov	r0, r5
 8001624:	f7ff fd1f 	bl	8001066 <_ZNK11Grow_sensor11get_settingEv>
 8001628:	4601      	mov	r1, r0
 800162a:	4830      	ldr	r0, [pc, #192]	; (80016ec <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x130>)
 800162c:	f003 ffe4 	bl	80055f8 <_ZN13Packet_Sensor11set_settingEh>
                packet_sensor.set_dest_adr(packet, grow_sensor.get_address_control_module());
 8001630:	4f2e      	ldr	r7, [pc, #184]	; (80016ec <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x130>)
            for(i = 0; i < amt; ++i) {
 8001632:	45a1      	cmp	r9, r4
 8001634:	fa5f f884 	uxtb.w	r8, r4
 8001638:	dd4c      	ble.n	80016d4 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x118>
                LoRa_packet packet;
 800163a:	a806      	add	r0, sp, #24
 800163c:	f002 fece 	bl	80043dc <_ZN11LoRa_packetC1Ev>
                packet_sensor.set_dest_adr(packet, grow_sensor.get_address_control_module());
 8001640:	4628      	mov	r0, r5
 8001642:	f7ff fd05 	bl	8001050 <_ZNK11Grow_sensor26get_address_control_moduleEv>
 8001646:	a906      	add	r1, sp, #24
 8001648:	4602      	mov	r2, r0
 800164a:	4638      	mov	r0, r7
 800164c:	f004 f883 	bl	8005756 <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address>
                packet_sensor.set_sour_adr(packet, contact_data.get_my_adr());
 8001650:	4630      	mov	r0, r6
 8001652:	f000 f972 	bl	800193a <_ZNK17LoRa_contact_data10get_my_adrEv>
 8001656:	a906      	add	r1, sp, #24
 8001658:	4602      	mov	r2, r0
 800165a:	4638      	mov	r0, r7
 800165c:	f004 f8ae 	bl	80057bc <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address>
                err = grow_sensor.get_type(i, param);
 8001660:	4641      	mov	r1, r8
 8001662:	4628      	mov	r0, r5
 8001664:	f10d 020a 	add.w	r2, sp, #10
 8001668:	f7ff fd00 	bl	800106c <_ZNK11Grow_sensor8get_typeEhRh>
                if(err) break;
 800166c:	bb78      	cbnz	r0, 80016ce <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x112>
                err = grow_sensor.get_id(i, id);
 800166e:	f10d 0a0b 	add.w	sl, sp, #11
 8001672:	4652      	mov	r2, sl
 8001674:	4641      	mov	r1, r8
 8001676:	4628      	mov	r0, r5
 8001678:	f7ff fd0a 	bl	8001090 <_ZNK11Grow_sensor6get_idEhRh>
                if(err) break;
 800167c:	bb38      	cbnz	r0, 80016ce <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x112>
                err = grow_sensor.get_value(i, *reinterpret_cast<float*>(&value));
 800167e:	f10d 0b0c 	add.w	fp, sp, #12
 8001682:	4641      	mov	r1, r8
 8001684:	465a      	mov	r2, fp
 8001686:	4628      	mov	r0, r5
 8001688:	f7ff fd2a 	bl	80010e0 <_ZN11Grow_sensor9get_valueEhRf>
                if(err) break;
 800168c:	4680      	mov	r8, r0
 800168e:	b9f0      	cbnz	r0, 80016ce <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x112>
                packet_sensor.set_packet_type(packet, Packet_Type::SENSOR);
 8001690:	2201      	movs	r2, #1
 8001692:	a906      	add	r1, sp, #24
 8001694:	4638      	mov	r0, r7
 8001696:	f004 f8b0 	bl	80057fa <_ZN15Packet_analyzer15set_packet_typeER11LoRa_packet11Packet_Type>
                err = packet_sensor.set_packet_data(packet, nullptr, &param, &id, &value);
 800169a:	4642      	mov	r2, r8
 800169c:	4638      	mov	r0, r7
 800169e:	e9cd ab00 	strd	sl, fp, [sp]
 80016a2:	f10d 030a 	add.w	r3, sp, #10
 80016a6:	a906      	add	r1, sp, #24
 80016a8:	f004 fa68 	bl	8005b7c <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm>
                if(err) break;
 80016ac:	b978      	cbnz	r0, 80016ce <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x112>
                contact_data.add_packet(std::move(packet));
 80016ae:	a906      	add	r1, sp, #24
 80016b0:	a808      	add	r0, sp, #32
 80016b2:	f002 ff0e 	bl	80044d2 <_ZN11LoRa_packetC1EOS_>
 80016b6:	a908      	add	r1, sp, #32
 80016b8:	4630      	mov	r0, r6
 80016ba:	f000 f953 	bl	8001964 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet>
 80016be:	a808      	add	r0, sp, #32
 80016c0:	f002 fe94 	bl	80043ec <_ZN11LoRa_packetD1Ev>
                LoRa_packet packet;
 80016c4:	a806      	add	r0, sp, #24
 80016c6:	f002 fe91 	bl	80043ec <_ZN11LoRa_packetD1Ev>
            for(i = 0; i < amt; ++i) {
 80016ca:	3401      	adds	r4, #1
 80016cc:	e7b1      	b.n	8001632 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x76>
                LoRa_packet packet;
 80016ce:	a806      	add	r0, sp, #24
 80016d0:	f002 fe8c 	bl	80043ec <_ZN11LoRa_packetD1Ev>
            contact_data.wait_recipient(grow_sensor.get_address_control_module());
 80016d4:	4628      	mov	r0, r5
 80016d6:	f7ff fcbb 	bl	8001050 <_ZNK11Grow_sensor26get_address_control_moduleEv>
 80016da:	4601      	mov	r1, r0
 80016dc:	9008      	str	r0, [sp, #32]
 80016de:	4630      	mov	r0, r6
 80016e0:	f000 fd20 	bl	8002124 <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>
 80016e4:	e784      	b.n	80015f0 <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data+0x34>
 80016e6:	bf00      	nop
 80016e8:	e000e100 	.word	0xe000e100
 80016ec:	200023f4 	.word	0x200023f4

080016f0 <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet>:
uint8_t Grow_sensor_interface::system_package_handler(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data, LoRa_packet& packet) {
 80016f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016f4:	460d      	mov	r5, r1
 80016f6:	4619      	mov	r1, r3
    uint8_t com = 0;
 80016f8:	2300      	movs	r3, #0
uint8_t Grow_sensor_interface::system_package_handler(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data, LoRa_packet& packet) {
 80016fa:	b089      	sub	sp, #36	; 0x24
    err = packet_system.get_packet_data(packet, &com, data, &len);
 80016fc:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800179c <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0xac>
    uint8_t com = 0;
 8001700:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8_t len = 0;
 8001704:	f88d 300f 	strb.w	r3, [sp, #15]
    err = packet_system.get_packet_data(packet, &com, data, &len);
 8001708:	f10d 030f 	add.w	r3, sp, #15
 800170c:	9300      	str	r3, [sp, #0]
uint8_t Grow_sensor_interface::system_package_handler(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data, LoRa_packet& packet) {
 800170e:	4607      	mov	r7, r0
    err = packet_system.get_packet_data(packet, &com, data, &len);
 8001710:	4643      	mov	r3, r8
uint8_t Grow_sensor_interface::system_package_handler(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data, LoRa_packet& packet) {
 8001712:	4616      	mov	r6, r2
    err = packet_system.get_packet_data(packet, &com, data, &len);
 8001714:	481f      	ldr	r0, [pc, #124]	; (8001794 <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0xa4>)
 8001716:	f10d 020e 	add.w	r2, sp, #14
 800171a:	f004 fb35 	bl	8005d88 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_>
    switch(com) {
 800171e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    err = packet_system.get_packet_data(packet, &com, data, &len);
 8001722:	4604      	mov	r4, r0
    switch(com) {
 8001724:	2b07      	cmp	r3, #7
 8001726:	d82e      	bhi.n	8001786 <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0x96>
 8001728:	2b02      	cmp	r3, #2
 800172a:	d82e      	bhi.n	800178a <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0x9a>
 800172c:	d12f      	bne.n	800178e <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0x9e>
        if(len != 2) {
 800172e:	f89d 900f 	ldrb.w	r9, [sp, #15]
 8001732:	f1b9 0f02 	cmp.w	r9, #2
 8001736:	d124      	bne.n	8001782 <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0x92>
        channel = (channel << 8) | data[1];
 8001738:	f898 3001 	ldrb.w	r3, [r8, #1]
 800173c:	f898 1000 	ldrb.w	r1, [r8]
        contact_data.set_channel(channel);
 8001740:	4630      	mov	r0, r6
 8001742:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8001746:	f000 f903 	bl	8001950 <_ZN17LoRa_contact_data11set_channelEt>
        grow_sensor.set_active(2);
 800174a:	4649      	mov	r1, r9
 800174c:	4628      	mov	r0, r5
 800174e:	f7ff fc6e 	bl	800102e <_ZN11Grow_sensor10set_activeEh>
        build_data_packet(grow_sensor, contact_data);
 8001752:	4632      	mov	r2, r6
 8001754:	4629      	mov	r1, r5
 8001756:	4638      	mov	r0, r7
 8001758:	f7ff ff30 	bl	80015bc <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data>
        grow_sensor_interface.save_data(grow_sensor, contact_data, save_adr, save_channel);
 800175c:	ab05      	add	r3, sp, #20
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	4632      	mov	r2, r6
 8001762:	ab04      	add	r3, sp, #16
 8001764:	4629      	mov	r1, r5
 8001766:	480c      	ldr	r0, [pc, #48]	; (8001798 <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0xa8>)
 8001768:	f7ff fda3 	bl	80012b2 <_ZN21Grow_sensor_interface9save_dataERK11Grow_sensorRK17LoRa_contact_dataRmS6_>
        uint32_t control_module_id_and_channel[BUFFSIZE] = {save_adr, save_channel};
 800176c:	9b04      	ldr	r3, [sp, #16]
        Write_to_flash(control_module_id_and_channel);
 800176e:	a806      	add	r0, sp, #24
        uint32_t control_module_id_and_channel[BUFFSIZE] = {save_adr, save_channel};
 8001770:	9306      	str	r3, [sp, #24]
 8001772:	9b05      	ldr	r3, [sp, #20]
 8001774:	9307      	str	r3, [sp, #28]
        Write_to_flash(control_module_id_and_channel);
 8001776:	f7ff fc03 	bl	8000f80 <Write_to_flash>
}
 800177a:	4620      	mov	r0, r4
 800177c:	b009      	add	sp, #36	; 0x24
 800177e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            err = 4;
 8001782:	2404      	movs	r4, #4
 8001784:	e7f9      	b.n	800177a <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0x8a>
        err = 1;
 8001786:	2401      	movs	r4, #1
 8001788:	e7f7      	b.n	800177a <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0x8a>
    switch(com) {
 800178a:	2403      	movs	r4, #3
 800178c:	e7f5      	b.n	800177a <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0x8a>
    case 0x01: err = 2; break;
 800178e:	2402      	movs	r4, #2
 8001790:	e7f3      	b.n	800177a <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet+0x8a>
 8001792:	bf00      	nop
 8001794:	20002414 	.word	0x20002414
 8001798:	200001bf 	.word	0x200001bf
 800179c:	2000018d 	.word	0x2000018d

080017a0 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data>:
uint8_t Grow_sensor_interface::read_received_data_packets(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data) {
 80017a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017a4:	4680      	mov	r8, r0
 80017a6:	b09f      	sub	sp, #124	; 0x7c
    if(grow_sensor.get_active() == 0)
 80017a8:	4608      	mov	r0, r1
uint8_t Grow_sensor_interface::read_received_data_packets(Grow_sensor &grow_sensor, LoRa_contact_data& contact_data) {
 80017aa:	460c      	mov	r4, r1
 80017ac:	4615      	mov	r5, r2
    if(grow_sensor.get_active() == 0)
 80017ae:	f7ff fc43 	bl	8001038 <_ZNK11Grow_sensor10get_activeEv>
 80017b2:	2800      	cmp	r0, #0
 80017b4:	d03d      	beq.n	8001832 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0x92>
    all_packets = contact_data.get_all_packet(all_packets_len);
 80017b6:	4a21      	ldr	r2, [pc, #132]	; (800183c <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0x9c>)
 80017b8:	4629      	mov	r1, r5
 80017ba:	4668      	mov	r0, sp
 80017bc:	f000 f91c 	bl	80019f8 <_ZN17LoRa_contact_data14get_all_packetERh>
 80017c0:	4669      	mov	r1, sp
 80017c2:	481f      	ldr	r0, [pc, #124]	; (8001840 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0xa0>)
 80017c4:	f7ff fe35 	bl	8001432 <_ZNSt5arrayI11LoRa_packetLj15EEaSEOS1_>
 80017c8:	4668      	mov	r0, sp
 80017ca:	f7ff fe25 	bl	8001418 <_ZNSt5arrayI11LoRa_packetLj15EED1Ev>
    for(int i = 0; i < all_packets_len; ++i) {
 80017ce:	2700      	movs	r7, #0
 80017d0:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800183c <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0x9c>
 80017d4:	f8df a068 	ldr.w	sl, [pc, #104]	; 8001840 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0xa0>
        Packet_Type type_packet = packet_analyzer.get_packet_type(all_packets[i]);
 80017d8:	f8df b074 	ldr.w	fp, [pc, #116]	; 8001850 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0xb0>
    for(int i = 0; i < all_packets_len; ++i) {
 80017dc:	f899 3000 	ldrb.w	r3, [r9]
 80017e0:	42bb      	cmp	r3, r7
 80017e2:	dd26      	ble.n	8001832 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0x92>
        Packet_Type type_packet = packet_analyzer.get_packet_type(all_packets[i]);
 80017e4:	eb0a 06c7 	add.w	r6, sl, r7, lsl #3
 80017e8:	4631      	mov	r1, r6
 80017ea:	4658      	mov	r0, fp
 80017ec:	f003 ff92 	bl	8005714 <_ZN15Packet_analyzer15get_packet_typeERK11LoRa_packet>
        switch (type_packet) {
 80017f0:	b118      	cbz	r0, 80017fa <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0x5a>
 80017f2:	2803      	cmp	r0, #3
 80017f4:	d00f      	beq.n	8001816 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0x76>
    for(int i = 0; i < all_packets_len; ++i) {
 80017f6:	3701      	adds	r7, #1
 80017f8:	e7f0      	b.n	80017dc <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0x3c>
            err = packet_connection.get_size_by_packet(all_packets[i], size);
 80017fa:	4631      	mov	r1, r6
 80017fc:	4a11      	ldr	r2, [pc, #68]	; (8001844 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0xa4>)
 80017fe:	4812      	ldr	r0, [pc, #72]	; (8001848 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0xa8>)
 8001800:	f004 f976 	bl	8005af0 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh>
            if(err != 0)
 8001804:	2800      	cmp	r0, #0
 8001806:	d1f6      	bne.n	80017f6 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0x56>
            err = contact_package_handler(grow_sensor, contact_data, all_packets[i]);
 8001808:	4633      	mov	r3, r6
 800180a:	462a      	mov	r2, r5
 800180c:	4621      	mov	r1, r4
 800180e:	4640      	mov	r0, r8
 8001810:	f7ff fea0 	bl	8001554 <_ZN21Grow_sensor_interface23contact_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet>
            if(err == 0) {
 8001814:	e7ef      	b.n	80017f6 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0x56>
            err = packet_system.get_size_by_packet(all_packets[i], size);
 8001816:	4631      	mov	r1, r6
 8001818:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0xa4>)
 800181a:	480c      	ldr	r0, [pc, #48]	; (800184c <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0xac>)
 800181c:	f004 fb16 	bl	8005e4c <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh>
            if(err != 0)
 8001820:	2800      	cmp	r0, #0
 8001822:	d1e8      	bne.n	80017f6 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0x56>
            err = system_package_handler(grow_sensor, contact_data, all_packets[i]);
 8001824:	4633      	mov	r3, r6
 8001826:	462a      	mov	r2, r5
 8001828:	4621      	mov	r1, r4
 800182a:	4640      	mov	r0, r8
 800182c:	f7ff ff60 	bl	80016f0 <_ZN21Grow_sensor_interface22system_package_handlerER11Grow_sensorR17LoRa_contact_dataR11LoRa_packet>
            if(err == 0) {
 8001830:	e7e1      	b.n	80017f6 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data+0x56>
}
 8001832:	2000      	movs	r0, #0
 8001834:	b01f      	add	sp, #124	; 0x7c
 8001836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800183a:	bf00      	nop
 800183c:	2000018c 	.word	0x2000018c
 8001840:	20000114 	.word	0x20000114
 8001844:	200001c0 	.word	0x200001c0
 8001848:	200023b4 	.word	0x200023b4
 800184c:	20002414 	.word	0x20002414
 8001850:	20002398 	.word	0x20002398

08001854 <_ZN21Grow_sensor_componentC1E11Type_sensorh>:
#include "Grow_sensor_component.h"

Grow_sensor_component::Grow_sensor_component(Type_sensor type_sensor, uint8_t id) {
    type_sensor_ = type_sensor;
    id_ = id;
 8001854:	7042      	strb	r2, [r0, #1]
    value_.f_val = 0;
 8001856:	2200      	movs	r2, #0
    type_sensor_ = type_sensor;
 8001858:	7001      	strb	r1, [r0, #0]
    value_.f_val = 0;
 800185a:	6042      	str	r2, [r0, #4]
}
 800185c:	4770      	bx	lr

0800185e <_ZNK21Grow_sensor_component8get_typeEv>:

enum Type_sensor Grow_sensor_component::get_type() const {
    return type_sensor_;
}
 800185e:	7800      	ldrb	r0, [r0, #0]
 8001860:	4770      	bx	lr

08001862 <_ZNK21Grow_sensor_component6get_idEv>:
uint8_t Grow_sensor_component::get_id() const {
    return id_;
}
 8001862:	7840      	ldrb	r0, [r0, #1]
 8001864:	4770      	bx	lr

08001866 <_ZNK21Grow_sensor_component9get_valueEv>:
void Grow_sensor_component::set_id(uint8_t id) {
    id_ = id;
}
float Grow_sensor_component::get_value() const {
    return value_.f_val;
}
 8001866:	6840      	ldr	r0, [r0, #4]
 8001868:	4770      	bx	lr

0800186a <_ZN21Grow_sensor_component9set_valueEf>:
uint32_t Grow_sensor_component::get_value_uint() const {
    return value_.u_val;
}
bool Grow_sensor_component::set_value(float value) {
 800186a:	b538      	push	{r3, r4, r5, lr}
 800186c:	4604      	mov	r4, r0
    if(value_.f_val == value)
 800186e:	6840      	ldr	r0, [r0, #4]
bool Grow_sensor_component::set_value(float value) {
 8001870:	460d      	mov	r5, r1
    if(value_.f_val == value)
 8001872:	f7ff f957 	bl	8000b24 <__aeabi_fcmpeq>
 8001876:	b910      	cbnz	r0, 800187e <_ZN21Grow_sensor_component9set_valueEf+0x14>
        return false;
    value_.f_val = value;
    return true;
 8001878:	2001      	movs	r0, #1
    value_.f_val = value;
 800187a:	6065      	str	r5, [r4, #4]
}
 800187c:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800187e:	2000      	movs	r0, #0
 8001880:	e7fc      	b.n	800187c <_ZN21Grow_sensor_component9set_valueEf+0x12>

08001882 <_ZNSt5arrayI11LoRa_packetLj15EEC1Ev>:
 8001882:	b570      	push	{r4, r5, r6, lr}
 8001884:	4604      	mov	r4, r0
 8001886:	4605      	mov	r5, r0
 8001888:	f100 0678 	add.w	r6, r0, #120	; 0x78
 800188c:	4628      	mov	r0, r5
 800188e:	3508      	adds	r5, #8
 8001890:	f002 fda4 	bl	80043dc <_ZN11LoRa_packetC1Ev>
 8001894:	42ae      	cmp	r6, r5
 8001896:	d1f9      	bne.n	800188c <_ZNSt5arrayI11LoRa_packetLj15EEC1Ev+0xa>
 8001898:	4620      	mov	r0, r4
 800189a:	bd70      	pop	{r4, r5, r6, pc}

0800189c <_ZN17LoRa_contact_dataD1Ev>:
LoRa_contact_data::LoRa_contact_data(LoRa_address adr) {
    // (-) ----- добавить стандартный конструктор
    clear();
    set_my_adr(adr);
}
LoRa_contact_data::~LoRa_contact_data() {
 800189c:	b570      	push	{r4, r5, r6, lr}
 800189e:	4604      	mov	r4, r0
 80018a0:	f500 759a 	add.w	r5, r0, #308	; 0x134
 80018a4:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
 80018a8:	42ae      	cmp	r6, r5
 80018aa:	d004      	beq.n	80018b6 <_ZN17LoRa_contact_dataD1Ev+0x1a>
 80018ac:	3d08      	subs	r5, #8
 80018ae:	4628      	mov	r0, r5
 80018b0:	f002 fd9c 	bl	80043ec <_ZN11LoRa_packetD1Ev>
 80018b4:	e7f8      	b.n	80018a8 <_ZN17LoRa_contact_dataD1Ev+0xc>
 80018b6:	f104 05ac 	add.w	r5, r4, #172	; 0xac
 80018ba:	f104 0634 	add.w	r6, r4, #52	; 0x34
 80018be:	42ae      	cmp	r6, r5
 80018c0:	d004      	beq.n	80018cc <_ZN17LoRa_contact_dataD1Ev+0x30>
 80018c2:	3d08      	subs	r5, #8
 80018c4:	4628      	mov	r0, r5
 80018c6:	f002 fd91 	bl	80043ec <_ZN11LoRa_packetD1Ev>
 80018ca:	e7f8      	b.n	80018be <_ZN17LoRa_contact_dataD1Ev+0x22>
 80018cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80018d0:	f002 fd8c 	bl	80043ec <_ZN11LoRa_packetD1Ev>
 80018d4:	f104 0020 	add.w	r0, r4, #32
 80018d8:	f002 fd88 	bl	80043ec <_ZN11LoRa_packetD1Ev>

}
 80018dc:	4620      	mov	r0, r4
 80018de:	bd70      	pop	{r4, r5, r6, pc}

080018e0 <_ZN17LoRa_contact_data16init_lora_moduleEP19__SPI_HandleTypeDef>:
        return false;
    }
    return true;
}
#else
bool LoRa_contact_data::init_lora_module(SPI_HandleTypeDef *spi) {
 80018e0:	b510      	push	{r4, lr}
 80018e2:	4604      	mov	r4, r0
	LoRa.init(spi);
 80018e4:	4803      	ldr	r0, [pc, #12]	; (80018f4 <_ZN17LoRa_contact_data16init_lora_moduleEP19__SPI_HandleTypeDef+0x14>)
 80018e6:	f001 fe7b 	bl	80035e0 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef>
	lora_init_ = true;
 80018ea:	2301      	movs	r3, #1
	return false;
}
 80018ec:	2000      	movs	r0, #0
	lora_init_ = true;
 80018ee:	7023      	strb	r3, [r4, #0]
}
 80018f0:	bd10      	pop	{r4, pc}
 80018f2:	bf00      	nop
 80018f4:	20000370 	.word	0x20000370

080018f8 <_ZN17LoRa_contact_data17begin_lora_moduleEmbhhmh>:
#endif
// Функция запуска работы системы и LoRa-модуля
uint8_t LoRa_contact_data::begin_lora_module(ulong frequency, bool paboost,
          uint8_t signal_power, uint8_t SF, ulong SBW, uint8_t sync_word) {
 80018f8:	b530      	push	{r4, r5, lr}
 80018fa:	4604      	mov	r4, r0
 80018fc:	4618      	mov	r0, r3
#if defined ( ESP32 )
    uint8_t err = lora_.begin(frequency, paboost, signal_power, SF, SBW, sync_word);
#else
    uint8_t err = LoRa.begin(frequency, paboost, signal_power, SF, SBW, sync_word);
 80018fe:	2300      	movs	r3, #0
          uint8_t signal_power, uint8_t SF, ulong SBW, uint8_t sync_word) {
 8001900:	b089      	sub	sp, #36	; 0x24
    uint8_t err = LoRa.begin(frequency, paboost, signal_power, SF, SBW, sync_word);
 8001902:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8001906:	9200      	str	r2, [sp, #0]
 8001908:	9506      	str	r5, [sp, #24]
 800190a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800190c:	460a      	mov	r2, r1
 800190e:	e9cd 5304 	strd	r5, r3, [sp, #16]
 8001912:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8001916:	e9cd 0501 	strd	r0, r5, [sp, #4]
 800191a:	4804      	ldr	r0, [pc, #16]	; (800192c <_ZN17LoRa_contact_data17begin_lora_moduleEmbhhmh+0x34>)
 800191c:	f002 f910 	bl	8003b40 <_ZN10LoRa_class5beginEybhhyh>
#endif
    if(err == 0) {
 8001920:	b908      	cbnz	r0, 8001926 <_ZN17LoRa_contact_data17begin_lora_moduleEmbhhmh+0x2e>
        lora_begin_ = true;
 8001922:	2301      	movs	r3, #1
 8001924:	7063      	strb	r3, [r4, #1]
    }
    return err;
}
 8001926:	b009      	add	sp, #36	; 0x24
 8001928:	bd30      	pop	{r4, r5, pc}
 800192a:	bf00      	nop
 800192c:	20000370 	.word	0x20000370

08001930 <_ZN17LoRa_contact_data10set_my_adrE12LoRa_address>:

// Установка адреса этого модуля
bool LoRa_contact_data::set_my_adr(LoRa_address adr) {
    // (-) ----- проверка на ошибку
    my_adr_ = adr;
 8001930:	6041      	str	r1, [r0, #4]
    return false;
}
 8001932:	2000      	movs	r0, #0
bool LoRa_contact_data::set_my_adr(LoRa_address adr) {
 8001934:	b082      	sub	sp, #8
}
 8001936:	b002      	add	sp, #8
 8001938:	4770      	bx	lr

0800193a <_ZNK17LoRa_contact_data10get_my_adrEv>:
// Получаение адреса этого модуля
LoRa_address LoRa_contact_data::get_my_adr() const {
    return my_adr_;
 800193a:	6843      	ldr	r3, [r0, #4]
 800193c:	2000      	movs	r0, #0
 800193e:	b29a      	uxth	r2, r3
 8001940:	f362 000f 	bfi	r0, r2, #0, #16
 8001944:	0c1b      	lsrs	r3, r3, #16
LoRa_address LoRa_contact_data::get_my_adr() const {
 8001946:	b082      	sub	sp, #8
    return my_adr_;
 8001948:	f363 401f 	bfi	r0, r3, #16, #16
}
 800194c:	b002      	add	sp, #8
 800194e:	4770      	bx	lr

08001950 <_ZN17LoRa_contact_data11set_channelEt>:
}

// Установка канала связи
bool LoRa_contact_data::set_channel(uint16_t channel) {
    // (-) ----- скорректировать проверку канала и добавить настройку LoRa-модуля в зависимости от канала
    if((channel < 1) || (channel > 240))
 8001950:	1e4b      	subs	r3, r1, #1
 8001952:	2bef      	cmp	r3, #239	; 0xef
        return true;
    channel_ = channel;
 8001954:	bf9a      	itte	ls
 8001956:	8041      	strhls	r1, [r0, #2]
    return false;
 8001958:	2000      	movls	r0, #0
        return true;
 800195a:	2001      	movhi	r0, #1
}
 800195c:	4770      	bx	lr

0800195e <_ZNK17LoRa_contact_data11get_channelEv>:
// Получаение канала связи
uint16_t LoRa_contact_data::get_channel() const {
    return channel_;
}
 800195e:	8840      	ldrh	r0, [r0, #2]
 8001960:	4770      	bx	lr
	...

08001964 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet>:

bool LoRa_contact_data::add_packet(LoRa_packet packet) {

    // if((!_init) || (packet.len < MINIMAL_PACKET_SIZE) || (send_packet_.size() >= 250)) // проверка на инициализацию только в 1 сторону (?) -----

    if(init_) {
 8001964:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
bool LoRa_contact_data::add_packet(LoRa_packet packet) {
 8001968:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800196a:	4604      	mov	r4, r0
 800196c:	460d      	mov	r5, r1
    if(init_) {
 800196e:	bb13      	cbnz	r3, 80019b6 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet+0x52>
        // if((packet_analyzer.get_dest_adr_group(packet) != connect_adr_.group) ||
        //    (packet_analyzer.get_dest_adr_branch(packet) != connect_adr_.branch))
        if(packet_analyzer.get_dest_adr(packet)!= connect_adr_)
            return true;
    }
    packet_analyzer.set_packet_number(packet, num_end_packet_++);
 8001970:	8a22      	ldrh	r2, [r4, #16]
 8001972:	4629      	mov	r1, r5
 8001974:	1c53      	adds	r3, r2, #1
 8001976:	8223      	strh	r3, [r4, #16]
 8001978:	4815      	ldr	r0, [pc, #84]	; (80019d0 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet+0x6c>)
 800197a:	f003 ff48 	bl	800580e <_ZN15Packet_analyzer17set_packet_numberER11LoRa_packett>
#if defined ( USE_VECTOR )
    send_packet_.push_back(std::move(packet));
    send_flag_.push_back(true);
    amt_packet_ = send_packet_.size();
#else
    if(send_packet_len == CONTACT_DATA_MAX_PACKET ||
 800197e:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
      { return const_cast<_Tp&>(__t[__n]); }
 8001982:	f104 0034 	add.w	r0, r4, #52	; 0x34
        send_flag_len == CONTACT_DATA_MAX_PACKET) {
        // (-) ----- (!) ----- ERRROR
    }
    send_packet_[send_packet_len++] = std::move(packet);
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	f884 2134 	strb.w	r2, [r4, #308]	; 0x134
 800198c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8001990:	4629      	mov	r1, r5
 8001992:	f002 fd8f 	bl	80044b4 <_ZN11LoRa_packetaSEOS_>
    send_flag_[send_flag_len++] = true;
 8001996:	f894 3136 	ldrb.w	r3, [r4, #310]	; 0x136
    amt_packet_ = send_packet_len;
#endif
    return false;
 800199a:	2000      	movs	r0, #0
    send_flag_[send_flag_len++] = true;
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	f884 2136 	strb.w	r2, [r4, #310]	; 0x136
 80019a2:	2201      	movs	r2, #1
 80019a4:	4423      	add	r3, r4
 80019a6:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    amt_packet_ = send_packet_len;
 80019aa:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 80019ae:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 80019b2:	b003      	add	sp, #12
 80019b4:	bd30      	pop	{r4, r5, pc}
        if(packet_analyzer.get_dest_adr(packet)!= connect_adr_)
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet+0x6c>)
 80019b8:	f003 fe80 	bl	80056bc <_ZN15Packet_analyzer12get_dest_adrERK11LoRa_packet>
 80019bc:	f104 0108 	add.w	r1, r4, #8
 80019c0:	9001      	str	r0, [sp, #4]
 80019c2:	a801      	add	r0, sp, #4
 80019c4:	f003 fe4d 	bl	8005662 <_ZneRK12LoRa_addressS1_>
 80019c8:	2800      	cmp	r0, #0
 80019ca:	d0d1      	beq.n	8001970 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet+0xc>
 80019cc:	e7f1      	b.n	80019b2 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet+0x4e>
 80019ce:	bf00      	nop
 80019d0:	20002398 	.word	0x20002398

080019d4 <_ZN17LoRa_contact_data17clear_send_packetEv>:
    if(send_packet_.size() == 0)
        return true;
    num_end_packet_ -= send_packet_.size();
    send_packet_.clear();
#else
    if(send_packet_len == 0)
 80019d4:	f890 2134 	ldrb.w	r2, [r0, #308]	; 0x134
 80019d8:	b14a      	cbz	r2, 80019ee <_ZN17LoRa_contact_data17clear_send_packetEv+0x1a>
        return true;
    num_end_packet_ -= send_packet_len;
 80019da:	8a03      	ldrh	r3, [r0, #16]
 80019dc:	1a9b      	subs	r3, r3, r2
 80019de:	8203      	strh	r3, [r0, #16]
    send_packet_len = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f880 3134 	strb.w	r3, [r0, #308]	; 0x134
    send_flag_len = 0;
 80019e6:	f880 3136 	strb.w	r3, [r0, #310]	; 0x136
#endif
    return false;
 80019ea:	4618      	mov	r0, r3
 80019ec:	4770      	bx	lr
        return true;
 80019ee:	2001      	movs	r0, #1
}
 80019f0:	4770      	bx	lr

080019f2 <_ZN17LoRa_contact_data17get_state_contactEv>:
}

// Получить текущую стадию контакта/трансляции
int8_t LoRa_contact_data::get_state_contact() {
    return (int8_t) current_stage_.stade_communication;
}
 80019f2:	f990 0014 	ldrsb.w	r0, [r0, #20]
 80019f6:	4770      	bx	lr

080019f8 <_ZN17LoRa_contact_data14get_all_packetERh>:
}


// Выдаёт сигнал, если текущая стадия SC_COMPLETE 
bool LoRa_contact_data::get_signal_complete() {
    return (current_stage_.stade_communication == SC_COMPLETE);
 80019f8:	7d0b      	ldrb	r3, [r1, #20]
std::array<LoRa_packet, CONTACT_DATA_MAX_PACKET> LoRa_contact_data::get_all_packet(uint8_t& count) {
 80019fa:	b570      	push	{r4, r5, r6, lr}
    if((!get_signal_complete()) && (current_stage_.stade_communication != SC_PACKET_ACCEPTED))
 80019fc:	2b04      	cmp	r3, #4
std::array<LoRa_packet, CONTACT_DATA_MAX_PACKET> LoRa_contact_data::get_all_packet(uint8_t& count) {
 80019fe:	4604      	mov	r4, r0
    if((!get_signal_complete()) && (current_stage_.stade_communication != SC_PACKET_ACCEPTED))
 8001a00:	d03d      	beq.n	8001a7e <_ZN17LoRa_contact_data14get_all_packetERh+0x86>
 8001a02:	2b07      	cmp	r3, #7
 8001a04:	d04d      	beq.n	8001aa2 <_ZN17LoRa_contact_data14get_all_packetERh+0xaa>
        return {};
 8001a06:	f002 fce9 	bl	80043dc <_ZN11LoRa_packetC1Ev>
 8001a0a:	f104 0008 	add.w	r0, r4, #8
 8001a0e:	f002 fce5 	bl	80043dc <_ZN11LoRa_packetC1Ev>
 8001a12:	f104 0010 	add.w	r0, r4, #16
 8001a16:	f002 fce1 	bl	80043dc <_ZN11LoRa_packetC1Ev>
 8001a1a:	f104 0018 	add.w	r0, r4, #24
 8001a1e:	f002 fcdd 	bl	80043dc <_ZN11LoRa_packetC1Ev>
 8001a22:	f104 0020 	add.w	r0, r4, #32
 8001a26:	f002 fcd9 	bl	80043dc <_ZN11LoRa_packetC1Ev>
 8001a2a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8001a2e:	f002 fcd5 	bl	80043dc <_ZN11LoRa_packetC1Ev>
 8001a32:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001a36:	f002 fcd1 	bl	80043dc <_ZN11LoRa_packetC1Ev>
 8001a3a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8001a3e:	f002 fccd 	bl	80043dc <_ZN11LoRa_packetC1Ev>
 8001a42:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8001a46:	f002 fcc9 	bl	80043dc <_ZN11LoRa_packetC1Ev>
 8001a4a:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8001a4e:	f002 fcc5 	bl	80043dc <_ZN11LoRa_packetC1Ev>
 8001a52:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8001a56:	f002 fcc1 	bl	80043dc <_ZN11LoRa_packetC1Ev>
 8001a5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001a5e:	f002 fcbd 	bl	80043dc <_ZN11LoRa_packetC1Ev>
 8001a62:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8001a66:	f002 fcb9 	bl	80043dc <_ZN11LoRa_packetC1Ev>
 8001a6a:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001a6e:	f002 fcb5 	bl	80043dc <_ZN11LoRa_packetC1Ev>
 8001a72:	f104 0070 	add.w	r0, r4, #112	; 0x70
 8001a76:	f002 fcb1 	bl	80043dc <_ZN11LoRa_packetC1Ev>
}
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	bd70      	pop	{r4, r5, r6, pc}
        current_stage_.stade_communication = SC_DOWNTIME;
 8001a7e:	2300      	movs	r3, #0
    reciev_packet_len = 0;
 8001a80:	2600      	movs	r6, #0
 8001a82:	750b      	strb	r3, [r1, #20]
    count = reciev_packet_len;
 8001a84:	f891 3135 	ldrb.w	r3, [r1, #309]	; 0x135
    struct array
 8001a88:	f101 05bc 	add.w	r5, r1, #188	; 0xbc
 8001a8c:	7013      	strb	r3, [r2, #0]
    reciev_packet_len = 0;
 8001a8e:	f881 6135 	strb.w	r6, [r1, #309]	; 0x135
 8001a92:	19a9      	adds	r1, r5, r6
 8001a94:	19a0      	adds	r0, r4, r6
 8001a96:	3608      	adds	r6, #8
 8001a98:	f002 fd1b 	bl	80044d2 <_ZN11LoRa_packetC1EOS_>
 8001a9c:	2e78      	cmp	r6, #120	; 0x78
 8001a9e:	d1f8      	bne.n	8001a92 <_ZN17LoRa_contact_data14get_all_packetERh+0x9a>
 8001aa0:	e7eb      	b.n	8001a7a <_ZN17LoRa_contact_data14get_all_packetERh+0x82>
        current_stage_.stade_communication = SC_WAITING;
 8001aa2:	2306      	movs	r3, #6
 8001aa4:	e7ec      	b.n	8001a80 <_ZN17LoRa_contact_data14get_all_packetERh+0x88>

08001aa6 <_ZN17LoRa_contact_data19get_signal_completeEv>:
    return (current_stage_.stade_communication == SC_COMPLETE);
 8001aa6:	7d00      	ldrb	r0, [r0, #20]
}
 8001aa8:	1f03      	subs	r3, r0, #4
 8001aaa:	4258      	negs	r0, r3
 8001aac:	4158      	adcs	r0, r3
 8001aae:	4770      	bx	lr

08001ab0 <_ZN17LoRa_contact_data24get_signal_start_connectEv>:

bool LoRa_contact_data::get_signal_start_connect() {
    return start_connect_;
}
 8001ab0:	f890 0137 	ldrb.w	r0, [r0, #311]	; 0x137
 8001ab4:	4770      	bx	lr

08001ab6 <_ZN17LoRa_contact_data5clearEv>:
#if defined ( USE_VECTOR )
    send_packet_.clear();
    send_flag_.clear();
    reciev_packet_.clear();
#else
    send_packet_len = 0;
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
    send_flag_len = 0;
 8001abc:	f880 2136 	strb.w	r2, [r0, #310]	; 0x136
    reciev_packet_len = 0;
#endif
    current_stage_.type_communication = TC_INITIATOR;
    current_stage_.stade_communication = SC_DOWNTIME;
 8001ac0:	6142      	str	r2, [r0, #20]
    current_stage_.type_communication = TC_INITIATOR;
 8001ac2:	74c2      	strb	r2, [r0, #19]
    current_stage_.connection = C_EXPECTATION;
    current_stage_.exchange = E_BOARDCAST;
    current_stage_.disconnect = D_WAITING_CONNECTION_BREAK;
    past_stage_ = current_stage_;
 8001ac4:	4602      	mov	r2, r0
void LoRa_contact_data::clear() {
 8001ac6:	4603      	mov	r3, r0
    past_stage_ = current_stage_;
 8001ac8:	f852 0f13 	ldr.w	r0, [r2, #19]!
 8001acc:	6198      	str	r0, [r3, #24]
 8001ace:	7912      	ldrb	r2, [r2, #4]
 8001ad0:	771a      	strb	r2, [r3, #28]
}
 8001ad2:	4770      	bx	lr

08001ad4 <_ZN17LoRa_contact_dataC1Ev>:
LoRa_contact_data::LoRa_contact_data() {
 8001ad4:	b570      	push	{r4, r5, r6, lr}
 8001ad6:	2500      	movs	r5, #0
 8001ad8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8001adc:	4604      	mov	r4, r0
 8001ade:	e9c0 5600 	strd	r5, r6, [r0]
 8001ae2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001ae6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001aea:	3008      	adds	r0, #8
 8001aec:	f003 fda4 	bl	8005638 <_ZN12LoRa_addressC1Ett>
 8001af0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001af4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001af8:	f104 000c 	add.w	r0, r4, #12
 8001afc:	f003 fd9c 	bl	8005638 <_ZN12LoRa_addressC1Ett>
 8001b00:	8225      	strh	r5, [r4, #16]
 8001b02:	7765      	strb	r5, [r4, #29]
 8001b04:	f104 0020 	add.w	r0, r4, #32
 8001b08:	f002 fc68 	bl	80043dc <_ZN11LoRa_packetC1Ev>
 8001b0c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8001b10:	f002 fc64 	bl	80043dc <_ZN11LoRa_packetC1Ev>
 8001b14:	8625      	strh	r5, [r4, #48]	; 0x30
 8001b16:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8001b1a:	f7ff feb2 	bl	8001882 <_ZNSt5arrayI11LoRa_packetLj15EEC1Ev>
 8001b1e:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8001b22:	f7ff feae 	bl	8001882 <_ZNSt5arrayI11LoRa_packetLj15EEC1Ev>
    clear();
 8001b26:	4620      	mov	r0, r4
LoRa_contact_data::LoRa_contact_data() {
 8001b28:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8001b2c:	f8a4 5138 	strh.w	r5, [r4, #312]	; 0x138
 8001b30:	f884 513a 	strb.w	r5, [r4, #314]	; 0x13a
    clear();
 8001b34:	f7ff ffbf 	bl	8001ab6 <_ZN17LoRa_contact_data5clearEv>
    time_constraints_.I_connect  = 1000;    // Ответа на запрос об установке соединения
 8001b38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    time_constraints_.R_data_pack  = 3500;  // Пакетов данных (после отправляется пакет с количеством пришедших пакетов)
 8001b3c:	f640 12c4 	movw	r2, #2500	; 0x9c4
    time_constraints_.I_wait_connect = -1;  // Отложенного соединения
 8001b40:	e9c4 3651 	strd	r3, r6, [r4, #324]	; 0x144
    time_constraints_.I_num_pack = 1000;    // Ответа с номерами принятых пакетов
 8001b44:	e9c4 3353 	strd	r3, r3, [r4, #332]	; 0x14c
    time_constraints_.R_data_pack  = 3500;  // Пакетов данных (после отправляется пакет с количеством пришедших пакетов)
 8001b48:	f640 53ac 	movw	r3, #3500	; 0xdac
 8001b4c:	e9c4 2355 	strd	r2, r3, [r4, #340]	; 0x154
    time_constraints_.R_correct_pack = 3500;// Результатов подтверждения
 8001b50:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
    time_constraints_.R_disconnect = 1500;  // Разрыва соединения
 8001b54:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001b58:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    packet_constraints_.I_connect  =  5;     // Запрос на установку соединения
 8001b5c:	2305      	movs	r3, #5
 8001b5e:	f884 3165 	strb.w	r3, [r4, #357]	; 0x165
    packet_constraints_.I_amt_pack = 10;     // Запрос о количестве принятых пакетов
 8001b62:	f640 730a 	movw	r3, #3850	; 0xf0a
 8001b66:	f8a4 3166 	strh.w	r3, [r4, #358]	; 0x166
    packet_constraints_.R_wait_connect = 3;  // Сбросов ожидания (отложенного соединения)
 8001b6a:	f240 3303 	movw	r3, #771	; 0x303
}
 8001b6e:	4620      	mov	r0, r4
    packet_constraints_.R_wait_connect = 3;  // Сбросов ожидания (отложенного соединения)
 8001b70:	f8a4 3168 	strh.w	r3, [r4, #360]	; 0x168
}
 8001b74:	bd70      	pop	{r4, r5, r6, pc}
	...

08001b78 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>:

// --- функции создания пакетов ---


// создание основы пакета
void LoRa_contact_data::create_packet(uint8_t size, Packet_Type type_packet) {
 8001b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	4617      	mov	r7, r2
    // last_send_packet_.creat_packet(size, type_packet);
    // last_send_packet_.packet->set_dest_adr(connect_adr_);
    // last_send_packet_.packet->set_sour_adr(my_adr_);
    // last_send_packet_.packet->set_packet_type(type_packet);
    // last_send_packet_.packet->set_packet_number(num_end_packet_++);
    last_send_packet_.clear_packet();
 8001b7e:	f100 0528 	add.w	r5, r0, #40	; 0x28
    packet_analyzer.set_dest_adr(last_send_packet_, connect_adr_);
 8001b82:	4e0e      	ldr	r6, [pc, #56]	; (8001bbc <_ZN17LoRa_contact_data13create_packetEh11Packet_Type+0x44>)
    last_send_packet_.clear_packet();
 8001b84:	4628      	mov	r0, r5
 8001b86:	f002 fc5d 	bl	8004444 <_ZN11LoRa_packet12clear_packetEv>
    packet_analyzer.set_dest_adr(last_send_packet_, connect_adr_);
 8001b8a:	4629      	mov	r1, r5
 8001b8c:	68a2      	ldr	r2, [r4, #8]
 8001b8e:	4630      	mov	r0, r6
 8001b90:	f003 fde1 	bl	8005756 <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address>
    packet_analyzer.set_sour_adr(last_send_packet_, my_adr_);
 8001b94:	4629      	mov	r1, r5
 8001b96:	6862      	ldr	r2, [r4, #4]
 8001b98:	4630      	mov	r0, r6
 8001b9a:	f003 fe0f 	bl	80057bc <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address>
    packet_analyzer.set_packet_type(last_send_packet_, type_packet);
 8001b9e:	463a      	mov	r2, r7
 8001ba0:	4629      	mov	r1, r5
 8001ba2:	4630      	mov	r0, r6
 8001ba4:	f003 fe29 	bl	80057fa <_ZN15Packet_analyzer15set_packet_typeER11LoRa_packet11Packet_Type>
    packet_analyzer.set_packet_number(last_send_packet_, (num_end_packet_++));
 8001ba8:	8a22      	ldrh	r2, [r4, #16]
 8001baa:	4629      	mov	r1, r5
 8001bac:	1c53      	adds	r3, r2, #1
 8001bae:	4630      	mov	r0, r6
 8001bb0:	8223      	strh	r3, [r4, #16]
}
 8001bb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    packet_analyzer.set_packet_number(last_send_packet_, (num_end_packet_++));
 8001bb6:	f003 be2a 	b.w	800580e <_ZN15Packet_analyzer17set_packet_numberER11LoRa_packett>
 8001bba:	bf00      	nop
 8001bbc:	20002398 	.word	0x20002398

08001bc0 <_ZN17LoRa_contact_data21create_connect_packetEhb>:
// создание пакета установки соединения (num = count_pack) или ответа на
//   запрос соединения (3 реакции +, +num и -wait) (и при замене инициативы)
bool LoRa_contact_data::create_connect_packet(uint8_t amt_packet, bool swap_type) {
    bool err = false;
    uint8_t size = 11;
    uint8_t com = 0x01;
 8001bc0:	2301      	movs	r3, #1
bool LoRa_contact_data::create_connect_packet(uint8_t amt_packet, bool swap_type) {
 8001bc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bc6:	b085      	sub	sp, #20
    uint8_t com = 0x01;
 8001bc8:	f88d 300a 	strb.w	r3, [sp, #10]
    uint8_t len;
    uint8_t data[2] = {0, 0};
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f8ad 300c 	strh.w	r3, [sp, #12]
    // switch (current_stage_.type_communication) {
    switch ((use_past_stage)?(past_stage_.type_communication):(current_stage_.type_communication)) {
 8001bd2:	7f43      	ldrb	r3, [r0, #29]
bool LoRa_contact_data::create_connect_packet(uint8_t amt_packet, bool swap_type) {
 8001bd4:	4606      	mov	r6, r0
 8001bd6:	460d      	mov	r5, r1
 8001bd8:	4614      	mov	r4, r2
    switch ((use_past_stage)?(past_stage_.type_communication):(current_stage_.type_communication)) {
 8001bda:	b163      	cbz	r3, 8001bf6 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x36>
 8001bdc:	f890 9018 	ldrb.w	r9, [r0, #24]
 8001be0:	f1b9 0f00 	cmp.w	r9, #0
 8001be4:	d00a      	beq.n	8001bfc <_ZN17LoRa_contact_data21create_connect_packetEhb+0x3c>
 8001be6:	f1b9 0f01 	cmp.w	r9, #1
 8001bea:	d01f      	beq.n	8001c2c <_ZN17LoRa_contact_data21create_connect_packetEhb+0x6c>
 8001bec:	2401      	movs	r4, #1
    default:
        err = true;
        break;
    }
    return err;
}
 8001bee:	4620      	mov	r0, r4
 8001bf0:	b005      	add	sp, #20
 8001bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch ((use_past_stage)?(past_stage_.type_communication):(current_stage_.type_communication)) {
 8001bf6:	f890 9013 	ldrb.w	r9, [r0, #19]
 8001bfa:	e7f1      	b.n	8001be0 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x20>
        create_packet(size, Packet_Type::CONNECTION);
 8001bfc:	464a      	mov	r2, r9
 8001bfe:	210b      	movs	r1, #11
 8001c00:	4630      	mov	r0, r6
        com = 0x00;
 8001c02:	f88d 900a 	strb.w	r9, [sp, #10]
        len = 0;
 8001c06:	f88d 900b 	strb.w	r9, [sp, #11]
        data[0] = amt_packet;
 8001c0a:	f88d 500c 	strb.w	r5, [sp, #12]
        create_packet(size, Packet_Type::CONNECTION);
 8001c0e:	f7ff ffb3 	bl	8001b78 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001c12:	f10d 030b 	add.w	r3, sp, #11
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	4826      	ldr	r0, [pc, #152]	; (8001cb4 <_ZN17LoRa_contact_data21create_connect_packetEhb+0xf4>)
 8001c1a:	ab03      	add	r3, sp, #12
 8001c1c:	f10d 020a 	add.w	r2, sp, #10
 8001c20:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8001c24:	f003 fec2 	bl	80059ac <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    bool err = false;
 8001c28:	464c      	mov	r4, r9
        break;
 8001c2a:	e7e0      	b.n	8001bee <_ZN17LoRa_contact_data21create_connect_packetEhb+0x2e>
        connect_adr_ = packet_analyzer.get_sour_adr(last_receive_packet_);
 8001c2c:	4822      	ldr	r0, [pc, #136]	; (8001cb8 <_ZN17LoRa_contact_data21create_connect_packetEhb+0xf8>)
 8001c2e:	f106 0120 	add.w	r1, r6, #32
 8001c32:	f003 fd61 	bl	80056f8 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>
        if(amt_packet != 255) {
 8001c36:	2dff      	cmp	r5, #255	; 0xff
        connect_adr_ = packet_analyzer.get_sour_adr(last_receive_packet_);
 8001c38:	60b0      	str	r0, [r6, #8]
        if(amt_packet != 255) {
 8001c3a:	f106 0728 	add.w	r7, r6, #40	; 0x28
                com = 0x01;
 8001c3e:	f88d 900a 	strb.w	r9, [sp, #10]
 8001c42:	f10d 080b 	add.w	r8, sp, #11
        if(amt_packet != 255) {
 8001c46:	d01e      	beq.n	8001c86 <_ZN17LoRa_contact_data21create_connect_packetEhb+0xc6>
            if(!swap_type) {
 8001c48:	b994      	cbnz	r4, 8001c70 <_ZN17LoRa_contact_data21create_connect_packetEhb+0xb0>
                create_packet(size, Packet_Type::CONNECTION);
 8001c4a:	4622      	mov	r2, r4
 8001c4c:	210b      	movs	r1, #11
                data[1] = 0;
 8001c4e:	f88d 400d 	strb.w	r4, [sp, #13]
                len = 1;
 8001c52:	f88d 900b 	strb.w	r9, [sp, #11]
                create_packet(size, Packet_Type::CONNECTION);
 8001c56:	4630      	mov	r0, r6
 8001c58:	f7ff ff8e 	bl	8001b78 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
                packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001c5c:	4639      	mov	r1, r7
 8001c5e:	f8cd 8000 	str.w	r8, [sp]
 8001c62:	ab03      	add	r3, sp, #12
 8001c64:	f10d 020a 	add.w	r2, sp, #10
 8001c68:	4812      	ldr	r0, [pc, #72]	; (8001cb4 <_ZN17LoRa_contact_data21create_connect_packetEhb+0xf4>)
 8001c6a:	f003 fe9f 	bl	80059ac <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
 8001c6e:	e7be      	b.n	8001bee <_ZN17LoRa_contact_data21create_connect_packetEhb+0x2e>
                data[0] = 0;
 8001c70:	2400      	movs	r4, #0
                len = 2;
 8001c72:	2302      	movs	r3, #2
                create_packet(size, Packet_Type::CONNECTION);
 8001c74:	4622      	mov	r2, r4
 8001c76:	210c      	movs	r1, #12
                data[0] = 0;
 8001c78:	f88d 400c 	strb.w	r4, [sp, #12]
                data[1] = amt_packet;
 8001c7c:	f88d 500d 	strb.w	r5, [sp, #13]
                len = 2;
 8001c80:	f88d 300b 	strb.w	r3, [sp, #11]
                create_packet(size, Packet_Type::CONNECTION);
 8001c84:	e7e7      	b.n	8001c56 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x96>
            len = 0;
 8001c86:	2500      	movs	r5, #0
            size = 11 + (uint8_t)swap_type;
 8001c88:	f104 010b 	add.w	r1, r4, #11
            create_packet(size, Packet_Type::CONNECTION);
 8001c8c:	462a      	mov	r2, r5
 8001c8e:	4630      	mov	r0, r6
 8001c90:	b2c9      	uxtb	r1, r1
            len = 0;
 8001c92:	f88d 500b 	strb.w	r5, [sp, #11]
            data[0] = 1;
 8001c96:	f88d 900c 	strb.w	r9, [sp, #12]
            create_packet(size, Packet_Type::CONNECTION);
 8001c9a:	f7ff ff6d 	bl	8001b78 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
            packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001c9e:	4639      	mov	r1, r7
 8001ca0:	4804      	ldr	r0, [pc, #16]	; (8001cb4 <_ZN17LoRa_contact_data21create_connect_packetEhb+0xf4>)
 8001ca2:	f8cd 8000 	str.w	r8, [sp]
 8001ca6:	ab03      	add	r3, sp, #12
 8001ca8:	f10d 020a 	add.w	r2, sp, #10
 8001cac:	f003 fe7e 	bl	80059ac <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    bool err = false;
 8001cb0:	462c      	mov	r4, r5
 8001cb2:	e79c      	b.n	8001bee <_ZN17LoRa_contact_data21create_connect_packetEhb+0x2e>
 8001cb4:	200023b4 	.word	0x200023b4
 8001cb8:	20002398 	.word	0x20002398

08001cbc <_ZN17LoRa_contact_data18create_data_packetEv>:


// создание пакета на основе номера из списка
bool LoRa_contact_data::create_data_packet() {
 8001cbc:	b570      	push	{r4, r5, r6, lr}
    bool err = true;
    switch (current_stage_.type_communication) {
 8001cbe:	7cc4      	ldrb	r4, [r0, #19]
bool LoRa_contact_data::create_data_packet() {
 8001cc0:	4605      	mov	r5, r0
    switch (current_stage_.type_communication) {
 8001cc2:	f014 04fd 	ands.w	r4, r4, #253	; 0xfd
 8001cc6:	d11b      	bne.n	8001d00 <_ZN17LoRa_contact_data18create_data_packetEv+0x44>
    // Инициатор
    case TC_INITIATOR:
    case TC_BROADCAST: {
        last_send_packet_.clear_packet();
 8001cc8:	f100 0628 	add.w	r6, r0, #40	; 0x28
 8001ccc:	4630      	mov	r0, r6
 8001cce:	f002 fbb9 	bl	8004444 <_ZN11LoRa_packet12clear_packetEv>
#if defined ( USE_VECTOR )
        for(int i = 0; i < send_packet_.size(); ++i)
#else
        for(unsigned int i = 0; i < send_packet_len; ++i)
 8001cd2:	f895 2134 	ldrb.w	r2, [r5, #308]	; 0x134
 8001cd6:	f105 03ac 	add.w	r3, r5, #172	; 0xac
 8001cda:	42a2      	cmp	r2, r4
 8001cdc:	d910      	bls.n	8001d00 <_ZN17LoRa_contact_data18create_data_packetEv+0x44>
#endif
        {
            if(send_flag_[i]) {
 8001cde:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001ce2:	b159      	cbz	r1, 8001cfc <_ZN17LoRa_contact_data18create_data_packetEv+0x40>
      { return const_cast<_Tp&>(__t[__n]); }
 8001ce4:	f105 0134 	add.w	r1, r5, #52	; 0x34
                // last_send_packet_.set_packet(send_packet_[i]);
                last_send_packet_ = send_packet_[i];
 8001ce8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8001cec:	4630      	mov	r0, r6
 8001cee:	f002 fbc2 	bl	8004476 <_ZN11LoRa_packetaSERKS_>
                send_flag_[i] = false;
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	442c      	add	r4, r5
 8001cf6:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
        break;
    }
    default: break;
    }
    return err;
}
 8001cfa:	bd70      	pop	{r4, r5, r6, pc}
        for(unsigned int i = 0; i < send_packet_len; ++i)
 8001cfc:	3401      	adds	r4, #1
 8001cfe:	e7ec      	b.n	8001cda <_ZN17LoRa_contact_data18create_data_packetEv+0x1e>
    bool err = true;
 8001d00:	2001      	movs	r0, #1
 8001d02:	e7fa      	b.n	8001cfa <_ZN17LoRa_contact_data18create_data_packetEv+0x3e>

08001d04 <_ZN17LoRa_contact_data17create_amt_packetEv>:

// создание пакета количества пакетов
bool LoRa_contact_data::create_amt_packet() {
 8001d04:	b530      	push	{r4, r5, lr}
    bool err = false;
    switch (current_stage_.type_communication) {
 8001d06:	7cc4      	ldrb	r4, [r0, #19]
bool LoRa_contact_data::create_amt_packet() {
 8001d08:	4605      	mov	r5, r0
 8001d0a:	b085      	sub	sp, #20
    switch (current_stage_.type_communication) {
 8001d0c:	b124      	cbz	r4, 8001d18 <_ZN17LoRa_contact_data17create_amt_packetEv+0x14>
 8001d0e:	2c01      	cmp	r4, #1
 8001d10:	d018      	beq.n	8001d44 <_ZN17LoRa_contact_data17create_amt_packetEv+0x40>
 8001d12:	2001      	movs	r0, #1
    default:
        err = true;
        break;
    }
    return err;
}
 8001d14:	b005      	add	sp, #20
 8001d16:	bd30      	pop	{r4, r5, pc}
        uint8_t com = 0x03;
 8001d18:	2303      	movs	r3, #3
        create_packet(size, Packet_Type::CONNECTION);
 8001d1a:	4622      	mov	r2, r4
 8001d1c:	210a      	movs	r1, #10
        uint8_t com = 0x03;
 8001d1e:	f88d 300e 	strb.w	r3, [sp, #14]
        uint8_t len = 0;
 8001d22:	f88d 400f 	strb.w	r4, [sp, #15]
        create_packet(size, Packet_Type::CONNECTION);
 8001d26:	f7ff ff27 	bl	8001b78 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, nullptr, &len);
 8001d2a:	f10d 030f 	add.w	r3, sp, #15
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	4623      	mov	r3, r4
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001d32:	480d      	ldr	r0, [pc, #52]	; (8001d68 <_ZN17LoRa_contact_data17create_amt_packetEv+0x64>)
 8001d34:	f10d 020e 	add.w	r2, sp, #14
 8001d38:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8001d3c:	f003 fe36 	bl	80059ac <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    return err;
 8001d40:	2000      	movs	r0, #0
 8001d42:	e7e7      	b.n	8001d14 <_ZN17LoRa_contact_data17create_amt_packetEv+0x10>
        uint8_t com = 0x04;
 8001d44:	2304      	movs	r3, #4
 8001d46:	f88d 300e 	strb.w	r3, [sp, #14]
        uint8_t data[1] = {amt_packet_};
 8001d4a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
        create_packet(size, Packet_Type::CONNECTION);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	210b      	movs	r1, #11
        uint8_t data[1] = {amt_packet_};
 8001d52:	f88d 300c 	strb.w	r3, [sp, #12]
        uint8_t len = 1;
 8001d56:	f88d 400f 	strb.w	r4, [sp, #15]
        create_packet(size, Packet_Type::CONNECTION);
 8001d5a:	f7ff ff0d 	bl	8001b78 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001d5e:	f10d 030f 	add.w	r3, sp, #15
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	ab03      	add	r3, sp, #12
 8001d66:	e7e4      	b.n	8001d32 <_ZN17LoRa_contact_data17create_amt_packetEv+0x2e>
 8001d68:	200023b4 	.word	0x200023b4

08001d6c <_ZN17LoRa_contact_data20create_number_packetEv>:

// Создание пакета номеров пришедших пакетов
bool LoRa_contact_data::create_number_packet() {
 8001d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bool err = false;
    switch (current_stage_.type_communication) {
 8001d70:	7cc4      	ldrb	r4, [r0, #19]
bool LoRa_contact_data::create_number_packet() {
 8001d72:	4605      	mov	r5, r0
 8001d74:	b086      	sub	sp, #24
    switch (current_stage_.type_communication) {
 8001d76:	b12c      	cbz	r4, 8001d84 <_ZN17LoRa_contact_data20create_number_packetEv+0x18>
 8001d78:	2c01      	cmp	r4, #1
 8001d7a:	d018      	beq.n	8001dae <_ZN17LoRa_contact_data20create_number_packetEv+0x42>
 8001d7c:	2001      	movs	r0, #1
    default:
        err = true;
        break;
    }
    return err;
}
 8001d7e:	b006      	add	sp, #24
 8001d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        uint8_t com = 0x05;
 8001d84:	2305      	movs	r3, #5
        create_packet(size, Packet_Type::CONNECTION);
 8001d86:	4622      	mov	r2, r4
 8001d88:	210a      	movs	r1, #10
        uint8_t com = 0x05;
 8001d8a:	f88d 300f 	strb.w	r3, [sp, #15]
        uint8_t len = 0;
 8001d8e:	f88d 4010 	strb.w	r4, [sp, #16]
        create_packet(size, Packet_Type::CONNECTION);
 8001d92:	f7ff fef1 	bl	8001b78 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, nullptr, &len);
 8001d96:	ab04      	add	r3, sp, #16
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	482c      	ldr	r0, [pc, #176]	; (8001e4c <_ZN17LoRa_contact_data20create_number_packetEv+0xe0>)
 8001d9c:	4623      	mov	r3, r4
 8001d9e:	f10d 020f 	add.w	r2, sp, #15
 8001da2:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8001da6:	f003 fe01 	bl	80059ac <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    return err;
 8001daa:	2000      	movs	r0, #0
 8001dac:	e7e7      	b.n	8001d7e <_ZN17LoRa_contact_data20create_number_packetEv+0x12>
        LoRa_packet packet;
 8001dae:	a804      	add	r0, sp, #16
 8001db0:	f002 fb14 	bl	80043dc <_ZN11LoRa_packetC1Ev>
        uint8_t com = 0x06;
 8001db4:	2306      	movs	r3, #6
        uint8_t len = reciev_packet_len * 2;
 8001db6:	f895 4135 	ldrb.w	r4, [r5, #309]	; 0x135
        uint8_t com = 0x06;
 8001dba:	f88d 300e 	strb.w	r3, [sp, #14]
        uint8_t len = reciev_packet_len * 2;
 8001dbe:	0064      	lsls	r4, r4, #1
 8001dc0:	b2e0      	uxtb	r0, r4
        uint8_t size = 11 + len;
 8001dc2:	f100 070b 	add.w	r7, r0, #11
        uint8_t len = reciev_packet_len * 2;
 8001dc6:	f88d 000f 	strb.w	r0, [sp, #15]
        uint8_t size = 11 + len;
 8001dca:	b2ff      	uxtb	r7, r7
        if(len != 0)
 8001dcc:	b308      	cbz	r0, 8001e12 <_ZN17LoRa_contact_data20create_number_packetEv+0xa6>
            data = new uint8_t[len];
 8001dce:	f008 fac4 	bl	800a35a <_Znaj>
        for(int i = 0; i < (len / 2); ++i) {
 8001dd2:	f04f 0a00 	mov.w	sl, #0
            data = new uint8_t[len];
 8001dd6:	4604      	mov	r4, r0
        for(int i = 0; i < (len / 2); ++i) {
 8001dd8:	4606      	mov	r6, r0
            number = packet_analyzer.get_packet_number(packet);
 8001dda:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8001e50 <_ZN17LoRa_contact_data20create_number_packetEv+0xe4>
 8001dde:	f105 08bc 	add.w	r8, r5, #188	; 0xbc
        for(int i = 0; i < (len / 2); ++i) {
 8001de2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001de6:	3602      	adds	r6, #2
 8001de8:	ebba 0f53 	cmp.w	sl, r3, lsr #1
 8001dec:	da12      	bge.n	8001e14 <_ZN17LoRa_contact_data20create_number_packetEv+0xa8>
            packet = reciev_packet_[i];
 8001dee:	4641      	mov	r1, r8
 8001df0:	a804      	add	r0, sp, #16
 8001df2:	f002 fb40 	bl	8004476 <_ZN11LoRa_packetaSERKS_>
            number = packet_analyzer.get_packet_number(packet);
 8001df6:	4648      	mov	r0, r9
 8001df8:	a904      	add	r1, sp, #16
 8001dfa:	f003 fc90 	bl	800571e <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>
            data[i * 2] = (number >> 8) & 0xFF;
 8001dfe:	0a03      	lsrs	r3, r0, #8
 8001e00:	f806 3c02 	strb.w	r3, [r6, #-2]
            data[(i * 2) + 1] = number & 0xFF;
 8001e04:	f806 0c01 	strb.w	r0, [r6, #-1]
        for(int i = 0; i < (len / 2); ++i) {
 8001e08:	f10a 0a01 	add.w	sl, sl, #1
 8001e0c:	f108 0808 	add.w	r8, r8, #8
 8001e10:	e7e7      	b.n	8001de2 <_ZN17LoRa_contact_data20create_number_packetEv+0x76>
        uint8_t *data = nullptr;
 8001e12:	4604      	mov	r4, r0
        create_packet(size, Packet_Type::CONNECTION);
 8001e14:	2200      	movs	r2, #0
 8001e16:	4639      	mov	r1, r7
 8001e18:	4628      	mov	r0, r5
 8001e1a:	f7ff fead 	bl	8001b78 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001e1e:	f10d 030f 	add.w	r3, sp, #15
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	4809      	ldr	r0, [pc, #36]	; (8001e4c <_ZN17LoRa_contact_data20create_number_packetEv+0xe0>)
 8001e26:	4623      	mov	r3, r4
 8001e28:	f10d 020e 	add.w	r2, sp, #14
 8001e2c:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8001e30:	f003 fdbc 	bl	80059ac <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
        if(len != 0)
 8001e34:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001e38:	b11b      	cbz	r3, 8001e42 <_ZN17LoRa_contact_data20create_number_packetEv+0xd6>
            delete[] data;
 8001e3a:	b114      	cbz	r4, 8001e42 <_ZN17LoRa_contact_data20create_number_packetEv+0xd6>
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	f008 fa79 	bl	800a334 <_ZdaPv>
        LoRa_packet packet;
 8001e42:	a804      	add	r0, sp, #16
 8001e44:	f002 fad2 	bl	80043ec <_ZN11LoRa_packetD1Ev>
 8001e48:	e7af      	b.n	8001daa <_ZN17LoRa_contact_data20create_number_packetEv+0x3e>
 8001e4a:	bf00      	nop
 8001e4c:	200023b4 	.word	0x200023b4
 8001e50:	20002398 	.word	0x20002398

08001e54 <_ZN17LoRa_contact_data23create_disconnet_packetEb>:
        break;
    }
    return err;
}
// Создание пакета разрыва соединения // err переменная класса? 
bool LoRa_contact_data::create_disconnet_packet(bool error) {
 8001e54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    bool err = false;
    init_ = false;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f880 3138 	strb.w	r3, [r0, #312]	; 0x138
    switch (current_stage_.type_communication) {
 8001e5c:	7cc3      	ldrb	r3, [r0, #19]
bool LoRa_contact_data::create_disconnet_packet(bool error) {
 8001e5e:	4604      	mov	r4, r0
    switch (current_stage_.type_communication) {
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	f04f 0001 	mov.w	r0, #1
 8001e66:	d818      	bhi.n	8001e9a <_ZN17LoRa_contact_data23create_disconnet_packetEb+0x46>
    case TC_INITIATOR:
    // Получатель
    case TC_RECIPIENT: {
        // Создание пакета
        uint8_t size = 11;
        uint8_t com = 0x08;
 8001e68:	2308      	movs	r3, #8
        uint8_t len = 1;
 8001e6a:	f88d 000f 	strb.w	r0, [sp, #15]
        uint8_t com = 0x08;
 8001e6e:	f88d 300e 	strb.w	r3, [sp, #14]
        uint8_t data[1] = {0};
        if(error)
 8001e72:	b9a1      	cbnz	r1, 8001e9e <_ZN17LoRa_contact_data23create_disconnet_packetEb+0x4a>
        uint8_t data[1] = {0};
 8001e74:	f88d 100c 	strb.w	r1, [sp, #12]
            data[0] = 2;
        create_packet(size, Packet_Type::CONNECTION);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	210b      	movs	r1, #11
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	f7ff fe7b 	bl	8001b78 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        // static_cast<Packet_Connection*>(last_send_packet_.packet)->set_packet_data(&com, data, nullptr);
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001e82:	f10d 030f 	add.w	r3, sp, #15
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	4807      	ldr	r0, [pc, #28]	; (8001ea8 <_ZN17LoRa_contact_data23create_disconnet_packetEb+0x54>)
 8001e8a:	ab03      	add	r3, sp, #12
 8001e8c:	f10d 020e 	add.w	r2, sp, #14
 8001e90:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8001e94:	f003 fd8a 	bl	80059ac <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    }
    default:
        err = true;
        break;
    }
    return err;
 8001e98:	2000      	movs	r0, #0
}
 8001e9a:	b004      	add	sp, #16
 8001e9c:	bd10      	pop	{r4, pc}
            data[0] = 2;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	f88d 300c 	strb.w	r3, [sp, #12]
 8001ea4:	e7e8      	b.n	8001e78 <_ZN17LoRa_contact_data23create_disconnet_packetEb+0x24>
 8001ea6:	bf00      	nop
 8001ea8:	200023b4 	.word	0x200023b4

08001eac <_ZN17LoRa_contact_data19packet_dont_correctEbb>:

// --- функции обработки пакетов ---

// Проверка пакета на "пришёл" и "мой|глобальный", и от того, кого
//   я жду | от всех (при глобальном адресе ожидания - тоже все)
bool LoRa_contact_data::packet_dont_correct(bool global_adr, bool all_adr_sendler) {
 8001eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    // Проверка размера пакета
    if(last_receive_packet_.get_len() < PACKET_HEADER_SIZE)
 8001eae:	f100 0620 	add.w	r6, r0, #32
bool LoRa_contact_data::packet_dont_correct(bool global_adr, bool all_adr_sendler) {
 8001eb2:	4604      	mov	r4, r0
    if(last_receive_packet_.get_len() < PACKET_HEADER_SIZE)
 8001eb4:	4630      	mov	r0, r6
bool LoRa_contact_data::packet_dont_correct(bool global_adr, bool all_adr_sendler) {
 8001eb6:	460f      	mov	r7, r1
 8001eb8:	4615      	mov	r5, r2
    if(last_receive_packet_.get_len() < PACKET_HEADER_SIZE)
 8001eba:	f002 face 	bl	800445a <_ZNK11LoRa_packet7get_lenEv>
 8001ebe:	2808      	cmp	r0, #8
 8001ec0:	d90a      	bls.n	8001ed8 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x2c>
        return false;
    // Проверка "пакет отправлен мне"
    // if(last_receive_packet_.packet->get_dest_adr() != my_adr_) {
    if(packet_analyzer.get_dest_adr(last_receive_packet_) != my_adr_) {
 8001ec2:	4631      	mov	r1, r6
 8001ec4:	4815      	ldr	r0, [pc, #84]	; (8001f1c <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x70>)
 8001ec6:	f003 fbf9 	bl	80056bc <_ZN15Packet_analyzer12get_dest_adrERK11LoRa_packet>
 8001eca:	1d21      	adds	r1, r4, #4
 8001ecc:	9001      	str	r0, [sp, #4]
 8001ece:	a801      	add	r0, sp, #4
 8001ed0:	f003 fbc7 	bl	8005662 <_ZneRK12LoRa_addressS1_>
 8001ed4:	b160      	cbz	r0, 8001ef0 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x44>
        // Проверка "пакет отправлен всем"
        // if(!(global_adr && (last_receive_packet_.packet->get_dest_adr().global()))) {
        if(!(global_adr && (packet_analyzer.get_dest_adr(last_receive_packet_).global()))) {
 8001ed6:	b90f      	cbnz	r7, 8001edc <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x30>
        return false;
 8001ed8:	2000      	movs	r0, #0
 8001eda:	e01b      	b.n	8001f14 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x68>
        if(!(global_adr && (packet_analyzer.get_dest_adr(last_receive_packet_).global()))) {
 8001edc:	4631      	mov	r1, r6
 8001ede:	480f      	ldr	r0, [pc, #60]	; (8001f1c <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x70>)
 8001ee0:	f003 fbec 	bl	80056bc <_ZN15Packet_analyzer12get_dest_adrERK11LoRa_packet>
 8001ee4:	9001      	str	r0, [sp, #4]
 8001ee6:	a801      	add	r0, sp, #4
 8001ee8:	f003 fbad 	bl	8005646 <_ZN12LoRa_address6globalEv>
 8001eec:	2800      	cmp	r0, #0
 8001eee:	d0f3      	beq.n	8001ed8 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x2c>
            return false;
        }
    }
    // Проверка "мне не важно кто отправлял"
    if(!((connect_adr_.global()) || all_adr_sendler))
 8001ef0:	3408      	adds	r4, #8
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f003 fba7 	bl	8005646 <_ZN12LoRa_address6globalEv>
 8001ef8:	b960      	cbnz	r0, 8001f14 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x68>
 8001efa:	b96d      	cbnz	r5, 8001f18 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x6c>
        // Проверка "мне важно кто отправил"
        // if(last_receive_packet_.packet->get_sour_adr() != connect_adr_)
        if(packet_analyzer.get_sour_adr(last_receive_packet_) != connect_adr_)
 8001efc:	4631      	mov	r1, r6
 8001efe:	4807      	ldr	r0, [pc, #28]	; (8001f1c <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x70>)
 8001f00:	f003 fbfa 	bl	80056f8 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>
 8001f04:	4621      	mov	r1, r4
 8001f06:	9001      	str	r0, [sp, #4]
 8001f08:	a801      	add	r0, sp, #4
 8001f0a:	f003 fbaa 	bl	8005662 <_ZneRK12LoRa_addressS1_>
 8001f0e:	f080 0001 	eor.w	r0, r0, #1
 8001f12:	b2c0      	uxtb	r0, r0
            return false;
    return true;
}
 8001f14:	b003      	add	sp, #12
 8001f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return true;
 8001f18:	4628      	mov	r0, r5
 8001f1a:	e7fb      	b.n	8001f14 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x68>
 8001f1c:	20002398 	.word	0x20002398

08001f20 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type>:
        if(last_receive_packet_[9] == subtype_packet[i])
            return true;
    return false;
}
#else
bool LoRa_contact_data::check_packet_type(Packet_Type type_packet) {
 8001f20:	b510      	push	{r4, lr}
 8001f22:	460c      	mov	r4, r1
    return (packet_analyzer.get_packet_type(last_receive_packet_) == type_packet);
 8001f24:	f100 0120 	add.w	r1, r0, #32
 8001f28:	4803      	ldr	r0, [pc, #12]	; (8001f38 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type+0x18>)
 8001f2a:	f003 fbf3 	bl	8005714 <_ZN15Packet_analyzer15get_packet_typeERK11LoRa_packet>
}
 8001f2e:	1b03      	subs	r3, r0, r4
 8001f30:	4258      	negs	r0, r3
 8001f32:	4158      	adcs	r0, r3
 8001f34:	bd10      	pop	{r4, pc}
 8001f36:	bf00      	nop
 8001f38:	20002398 	.word	0x20002398

08001f3c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>:
bool LoRa_contact_data::check_packet_type(Packet_Type type_packet, const uint8_t& subtype_packet) {
 8001f3c:	b570      	push	{r4, r5, r6, lr}
    if(packet_analyzer.get_packet_type(last_receive_packet_) != type_packet)
 8001f3e:	f100 0420 	add.w	r4, r0, #32
bool LoRa_contact_data::check_packet_type(Packet_Type type_packet, const uint8_t& subtype_packet) {
 8001f42:	460e      	mov	r6, r1
    if(packet_analyzer.get_packet_type(last_receive_packet_) != type_packet)
 8001f44:	4809      	ldr	r0, [pc, #36]	; (8001f6c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh+0x30>)
 8001f46:	4621      	mov	r1, r4
bool LoRa_contact_data::check_packet_type(Packet_Type type_packet, const uint8_t& subtype_packet) {
 8001f48:	4615      	mov	r5, r2
    if(packet_analyzer.get_packet_type(last_receive_packet_) != type_packet)
 8001f4a:	f003 fbe3 	bl	8005714 <_ZN15Packet_analyzer15get_packet_typeERK11LoRa_packet>
 8001f4e:	42b0      	cmp	r0, r6
 8001f50:	d109      	bne.n	8001f66 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh+0x2a>
        return false;
    if(last_receive_packet_[9] == subtype_packet)
 8001f52:	2109      	movs	r1, #9
 8001f54:	4620      	mov	r0, r4
 8001f56:	f002 fa86 	bl	8004466 <_ZN11LoRa_packetixEi>
 8001f5a:	782b      	ldrb	r3, [r5, #0]
 8001f5c:	7800      	ldrb	r0, [r0, #0]
 8001f5e:	1ac3      	subs	r3, r0, r3
 8001f60:	4258      	negs	r0, r3
 8001f62:	4158      	adcs	r0, r3
        return true;
    return false;
}
 8001f64:	bd70      	pop	{r4, r5, r6, pc}
        return false;
 8001f66:	2000      	movs	r0, #0
 8001f68:	e7fc      	b.n	8001f64 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh+0x28>
 8001f6a:	bf00      	nop
 8001f6c:	20002398 	.word	0x20002398

08001f70 <_ZN17LoRa_contact_data17search_num_packetEt>:
#endif

// поиск номера в send_packet_
int16_t LoRa_contact_data::search_num_packet(uint16_t number) {
 8001f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f74:	4605      	mov	r5, r0
 8001f76:	460e      	mov	r6, r1
 8001f78:	2400      	movs	r4, #0
#else
    for(uint16_t i = 0; i < send_packet_len; ++i)
#endif
    {
        // packet.set_packet(send_packet_[i]);
        if(number == packet_analyzer.get_packet_number(send_packet_[i]))
 8001f7a:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8001fb0 <_ZN17LoRa_contact_data17search_num_packetEt+0x40>
 8001f7e:	f100 0734 	add.w	r7, r0, #52	; 0x34
    for(uint16_t i = 0; i < send_packet_len; ++i)
 8001f82:	f895 2134 	ldrb.w	r2, [r5, #308]	; 0x134
 8001f86:	b2a3      	uxth	r3, r4
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d90e      	bls.n	8001faa <_ZN17LoRa_contact_data17search_num_packetEt+0x3a>
        if(number == packet_analyzer.get_packet_number(send_packet_[i]))
 8001f8c:	4639      	mov	r1, r7
 8001f8e:	4640      	mov	r0, r8
 8001f90:	f003 fbc5 	bl	800571e <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>
 8001f94:	42b0      	cmp	r0, r6
 8001f96:	f104 0301 	add.w	r3, r4, #1
 8001f9a:	f107 0708 	add.w	r7, r7, #8
 8001f9e:	d102      	bne.n	8001fa6 <_ZN17LoRa_contact_data17search_num_packetEt+0x36>
            return i;
 8001fa0:	b220      	sxth	r0, r4
        // if(packet.packet->get_packet_number() == number)
        //     return i;

    }
    return -1;
}
 8001fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fa6:	461c      	mov	r4, r3
 8001fa8:	e7eb      	b.n	8001f82 <_ZN17LoRa_contact_data17search_num_packetEt+0x12>
    return -1;
 8001faa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fae:	e7f8      	b.n	8001fa2 <_ZN17LoRa_contact_data17search_num_packetEt+0x32>
 8001fb0:	20002398 	.word	0x20002398

08001fb4 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh>:
    for(int j = 0; j < amt_packet_; ++j)
        send_flag_.push_back(true);
    return i;
}
#else
uint8_t LoRa_contact_data::pop_num_packet(const std::array<uint16_t, CONTACT_DATA_MAX_PACKET>& number, uint8_t len) {
 8001fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(len > send_packet_len)
 8001fb8:	f890 3134 	ldrb.w	r3, [r0, #308]	; 0x134
uint8_t LoRa_contact_data::pop_num_packet(const std::array<uint16_t, CONTACT_DATA_MAX_PACKET>& number, uint8_t len) {
 8001fbc:	4604      	mov	r4, r0
    if(len > send_packet_len)
 8001fbe:	4293      	cmp	r3, r2
uint8_t LoRa_contact_data::pop_num_packet(const std::array<uint16_t, CONTACT_DATA_MAX_PACKET>& number, uint8_t len) {
 8001fc0:	4688      	mov	r8, r1
 8001fc2:	4617      	mov	r7, r2
    if(len > send_packet_len)
 8001fc4:	d335      	bcc.n	8002032 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x7e>
        return 0;
    int i;
    for(i = 0; i < len; ++i) {
 8001fc6:	2600      	movs	r6, #0
 8001fc8:	f100 0934 	add.w	r9, r0, #52	; 0x34
 8001fcc:	42b7      	cmp	r7, r6
 8001fce:	dd19      	ble.n	8002004 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x50>
        int16_t search = search_num_packet(number[i]);
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	f838 1016 	ldrh.w	r1, [r8, r6, lsl #1]
 8001fd6:	f7ff ffcb 	bl	8001f70 <_ZN17LoRa_contact_data17search_num_packetEt>
        if(search == -1)
 8001fda:	1c43      	adds	r3, r0, #1
        int16_t search = search_num_packet(number[i]);
 8001fdc:	4605      	mov	r5, r0
        if(search == -1)
 8001fde:	d011      	beq.n	8002004 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x50>
            break;
        for(int j = search; j < send_packet_len - 1; ++j) {
 8001fe0:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	42ab      	cmp	r3, r5
 8001fe8:	dd08      	ble.n	8001ffc <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x48>
        	send_packet_[j] = std::move(send_packet_[j+1]);
 8001fea:	00e8      	lsls	r0, r5, #3
 8001fec:	f100 0108 	add.w	r1, r0, #8
 8001ff0:	4449      	add	r1, r9
 8001ff2:	4448      	add	r0, r9
 8001ff4:	3501      	adds	r5, #1
 8001ff6:	f002 fa5d 	bl	80044b4 <_ZN11LoRa_packetaSEOS_>
        for(int j = search; j < send_packet_len - 1; ++j) {
 8001ffa:	e7f1      	b.n	8001fe0 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x2c>
        }
		--send_packet_len;
 8001ffc:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
    for(i = 0; i < len; ++i) {
 8002000:	3601      	adds	r6, #1
 8002002:	e7e3      	b.n	8001fcc <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x18>
    }
    amt_packet_ = send_packet_len;
    send_flag_len = send_packet_len;
    for(int j = 0; j < send_flag_len; ++j) {
 8002004:	f06f 00ab 	mvn.w	r0, #171	; 0xab
        send_flag_[j] = true;
 8002008:	2101      	movs	r1, #1
    amt_packet_ = send_packet_len;
 800200a:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
    for(int j = 0; j < send_flag_len; ++j) {
 800200e:	1b00      	subs	r0, r0, r4
    amt_packet_ = send_packet_len;
 8002010:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    send_flag_len = send_packet_len;
 8002014:	f884 3136 	strb.w	r3, [r4, #310]	; 0x136
    for(int j = 0; j < send_flag_len; ++j) {
 8002018:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 800201c:	f894 5136 	ldrb.w	r5, [r4, #310]	; 0x136
 8002020:	18c2      	adds	r2, r0, r3
 8002022:	42aa      	cmp	r2, r5
 8002024:	da02      	bge.n	800202c <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x78>
        send_flag_[j] = true;
 8002026:	f803 1b01 	strb.w	r1, [r3], #1
    for(int j = 0; j < send_flag_len; ++j) {
 800202a:	e7f7      	b.n	800201c <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x68>
    }
    return i;
 800202c:	b2f0      	uxtb	r0, r6
}
 800202e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return 0;
 8002032:	2000      	movs	r0, #0
 8002034:	e7fb      	b.n	800202e <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x7a>
	...

08002038 <_ZN17LoRa_contact_data15sort_num_packetEv>:
#endif

// сортировка reciev_packet_
void LoRa_contact_data::sort_num_packet() {
 8002038:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800203c:	4606      	mov	r6, r0
    uint16_t number1, number2;
    bool swap;
#if defined ( USE_VECTOR )
    for(unsigned int i = 0; (i < (reciev_packet_.size() - 1)) && (reciev_packet_.size() != 0);)
#else
    for(uint8_t i = 0; (i < (reciev_packet_len - 1)) && (reciev_packet_len != 0);)
 800203e:	2400      	movs	r4, #0
        // packet.set_packet(reciev_packet_[i]);
        // number1 = packet.packet->get_packet_number();
        // packet.set_packet(reciev_packet_[i+1]);
        // number2 = packet.packet->get_packet_number();

        number1 = packet_analyzer.get_packet_number(reciev_packet_[i]);
 8002040:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80020bc <_ZN17LoRa_contact_data15sort_num_packetEv+0x84>
 8002044:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
    for(uint8_t i = 0; (i < (reciev_packet_len - 1)) && (reciev_packet_len != 0);)
 8002048:	f896 3135 	ldrb.w	r3, [r6, #309]	; 0x135
 800204c:	1e5a      	subs	r2, r3, #1
 800204e:	4294      	cmp	r4, r2
 8002050:	da30      	bge.n	80020b4 <_ZN17LoRa_contact_data15sort_num_packetEv+0x7c>
 8002052:	b37b      	cbz	r3, 80020b4 <_ZN17LoRa_contact_data15sort_num_packetEv+0x7c>
 8002054:	eb07 0ac4 	add.w	sl, r7, r4, lsl #3
        number1 = packet_analyzer.get_packet_number(reciev_packet_[i]);
 8002058:	4651      	mov	r1, sl
 800205a:	4640      	mov	r0, r8
 800205c:	f003 fb5f 	bl	800571e <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>
 8002060:	4605      	mov	r5, r0
        number2 = packet_analyzer.get_packet_number(reciev_packet_[i+1]);
 8002062:	f104 0b01 	add.w	fp, r4, #1
 8002066:	eb07 09cb 	add.w	r9, r7, fp, lsl #3
 800206a:	4649      	mov	r1, r9
 800206c:	4640      	mov	r0, r8
 800206e:	f003 fb56 	bl	800571e <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>

        if(number1 == 0) {
 8002072:	b92d      	cbnz	r5, 8002080 <_ZN17LoRa_contact_data15sort_num_packetEv+0x48>
            if(0xFF00 <= number2)
 8002074:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 8002078:	d205      	bcs.n	8002086 <_ZN17LoRa_contact_data15sort_num_packetEv+0x4e>

            if(i != 0)
                --i;
        }
        else
            ++i;
 800207a:	fa5f f48b 	uxtb.w	r4, fp
 800207e:	e7e3      	b.n	8002048 <_ZN17LoRa_contact_data15sort_num_packetEv+0x10>
        else if (number2 == 0) {
 8002080:	b9a8      	cbnz	r0, 80020ae <_ZN17LoRa_contact_data15sort_num_packetEv+0x76>
            if(number1 <= 0x00FF)
 8002082:	2dff      	cmp	r5, #255	; 0xff
 8002084:	d8f9      	bhi.n	800207a <_ZN17LoRa_contact_data15sort_num_packetEv+0x42>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002086:	4651      	mov	r1, sl
 8002088:	4668      	mov	r0, sp
 800208a:	f002 fa22 	bl	80044d2 <_ZN11LoRa_packetC1EOS_>
      __a = _GLIBCXX_MOVE(__b);
 800208e:	4649      	mov	r1, r9
 8002090:	4650      	mov	r0, sl
 8002092:	f002 fa0f 	bl	80044b4 <_ZN11LoRa_packetaSEOS_>
      __b = _GLIBCXX_MOVE(__tmp);
 8002096:	4669      	mov	r1, sp
 8002098:	4648      	mov	r0, r9
 800209a:	f002 fa0b 	bl	80044b4 <_ZN11LoRa_packetaSEOS_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800209e:	4668      	mov	r0, sp
 80020a0:	f002 f9a4 	bl	80043ec <_ZN11LoRa_packetD1Ev>
            if(i != 0)
 80020a4:	2c00      	cmp	r4, #0
 80020a6:	d0cf      	beq.n	8002048 <_ZN17LoRa_contact_data15sort_num_packetEv+0x10>
                --i;
 80020a8:	3c01      	subs	r4, #1
 80020aa:	b2e4      	uxtb	r4, r4
 80020ac:	e7cc      	b.n	8002048 <_ZN17LoRa_contact_data15sort_num_packetEv+0x10>
            if(number2 < number1)
 80020ae:	4285      	cmp	r5, r0
 80020b0:	d9e3      	bls.n	800207a <_ZN17LoRa_contact_data15sort_num_packetEv+0x42>
 80020b2:	e7e8      	b.n	8002086 <_ZN17LoRa_contact_data15sort_num_packetEv+0x4e>
    }
}
 80020b4:	b003      	add	sp, #12
 80020b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020ba:	bf00      	nop
 80020bc:	20002398 	.word	0x20002398

080020c0 <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control>:
    //   (стадия _connection = C_AWAITING_REQUEST)
    // - Сброс ожидания определённого модуля => отправить пакет сброса
    //   (стадия _connection = C_AWAITING_REQUEST)
    // ----- ---- -----
    // Проверка состояние модуля
    switch (module_state_) {
 80020c0:	7c82      	ldrb	r2, [r0, #18]
uint32_t LoRa_contact_data::recip_connection_queue_check(Stage_control& use_stage) {
 80020c2:	4603      	mov	r3, r0
    switch (module_state_) {
 80020c4:	2a01      	cmp	r2, #1
 80020c6:	d115      	bne.n	80020f4 <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control+0x34>
			//     create_reset_wait_packet();
			//     set_LoRa_mode_send();
        }
#endif
        else {
            connect_adr_ = wait_adr_;
 80020c8:	68c2      	ldr	r2, [r0, #12]
 80020ca:	f103 0118 	add.w	r1, r3, #24
 80020ce:	6082      	str	r2, [r0, #8]
        }
        if(!use_past_stage)
 80020d0:	7f40      	ldrb	r0, [r0, #29]
 80020d2:	f103 0213 	add.w	r2, r3, #19
 80020d6:	b938      	cbnz	r0, 80020e8 <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control+0x28>
            past_stage_ = current_stage_;
 80020d8:	6810      	ldr	r0, [r2, #0]
 80020da:	6198      	str	r0, [r3, #24]
 80020dc:	7912      	ldrb	r2, [r2, #4]
 80020de:	710a      	strb	r2, [r1, #4]
        else
            current_stage_ = past_stage_;
        current_stage_.connection = C_AWAITING_REQUEST;
 80020e0:	2201      	movs	r2, #1
 80020e2:	2000      	movs	r0, #0
 80020e4:	755a      	strb	r2, [r3, #21]
    }
    default:
        error = 211;
        break;
    }
    return error;
 80020e6:	4770      	bx	lr
            current_stage_ = past_stage_;
 80020e8:	6998      	ldr	r0, [r3, #24]
 80020ea:	7909      	ldrb	r1, [r1, #4]
 80020ec:	f8c3 0013 	str.w	r0, [r3, #19]
 80020f0:	7111      	strb	r1, [r2, #4]
 80020f2:	e7f5      	b.n	80020e0 <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control+0x20>
        error = 211;
 80020f4:	20d3      	movs	r0, #211	; 0xd3
}
 80020f6:	4770      	bx	lr

080020f8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>:
    current_stage_.stade_communication = SC_COMPLETE;
    past_stage_ = current_stage_;
    start_connect_ = false;
    set_LoRa_mode_sleep();
}
void LoRa_contact_data::set_LoRa_mode_receive() {
 80020f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    module_state_ = MS_LoRa_RECIEVE;
 80020fa:	2302      	movs	r3, #2
#if defined ( ESP32 )
    lora_.mode_sleep();
    // delay(1);
    lora_.receiver_packet(1, 0);
#else
    LoRa.mode_sleep();
 80020fc:	4c08      	ldr	r4, [pc, #32]	; (8002120 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv+0x28>)
    module_state_ = MS_LoRa_RECIEVE;
 80020fe:	7483      	strb	r3, [r0, #18]
    LoRa.mode_sleep();
 8002100:	4620      	mov	r0, r4
 8002102:	f001 fb2d 	bl	8003760 <_ZN10LoRa_class10mode_sleepEv>
    //HAL_Delay(1);
    LoRa.receiver_packet(1, 0);
 8002106:	2300      	movs	r3, #0
 8002108:	2201      	movs	r2, #1
 800210a:	4621      	mov	r1, r4
 800210c:	e9cd 3300 	strd	r3, r3, [sp]
 8002110:	a802      	add	r0, sp, #8
 8002112:	f001 fea5 	bl	8003e60 <_ZN10LoRa_class15receiver_packetEhmbb>
 8002116:	a802      	add	r0, sp, #8
 8002118:	f002 f968 	bl	80043ec <_ZN11LoRa_packetD1Ev>
#endif
}
 800211c:	b004      	add	sp, #16
 800211e:	bd10      	pop	{r4, pc}
 8002120:	20000370 	.word	0x20000370

08002124 <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>:
bool LoRa_contact_data::wait_recipient(LoRa_address address) {
 8002124:	b507      	push	{r0, r1, r2, lr}
    current_stage_.type_communication = TC_RECIPIENT;
 8002126:	2201      	movs	r2, #1
bool LoRa_contact_data::wait_recipient(LoRa_address address) {
 8002128:	9101      	str	r1, [sp, #4]
    current_stage_.type_communication = TC_RECIPIENT;
 800212a:	74c2      	strb	r2, [r0, #19]
    current_stage_.stade_communication = SC_CONNECTION;
 800212c:	f240 1201 	movw	r2, #257	; 0x101
 8002130:	8282      	strh	r2, [r0, #20]
    past_stage_ = current_stage_;
 8002132:	4602      	mov	r2, r0
bool LoRa_contact_data::wait_recipient(LoRa_address address) {
 8002134:	4603      	mov	r3, r0
    wait_adr_ = address;
 8002136:	60c1      	str	r1, [r0, #12]
    past_stage_ = current_stage_;
 8002138:	f852 0f13 	ldr.w	r0, [r2, #19]!
 800213c:	6198      	str	r0, [r3, #24]
 800213e:	7912      	ldrb	r2, [r2, #4]
    set_LoRa_mode_receive();
 8002140:	4618      	mov	r0, r3
    past_stage_ = current_stage_;
 8002142:	771a      	strb	r2, [r3, #28]
    set_LoRa_mode_receive();
 8002144:	f7ff ffd8 	bl	80020f8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
}
 8002148:	2000      	movs	r0, #0
 800214a:	b003      	add	sp, #12
 800214c:	f85d fb04 	ldr.w	pc, [sp], #4

08002150 <_ZN17LoRa_contact_data17broadcast_receiveE12LoRa_address>:
uint16_t LoRa_contact_data::broadcast_receive(LoRa_address address) {
 8002150:	b513      	push	{r0, r1, r4, lr}
 8002152:	4604      	mov	r4, r0
 8002154:	9101      	str	r1, [sp, #4]
    clear();
 8002156:	f7ff fcae 	bl	8001ab6 <_ZN17LoRa_contact_data5clearEv>
    wait_adr_ = address;
 800215a:	9b01      	ldr	r3, [sp, #4]
 800215c:	60e3      	str	r3, [r4, #12]
    current_stage_.type_communication = TC_BROADCAST;
 800215e:	2302      	movs	r3, #2
 8002160:	74e3      	strb	r3, [r4, #19]
    current_stage_.stade_communication = SC_WAITING;
 8002162:	2306      	movs	r3, #6
 8002164:	7523      	strb	r3, [r4, #20]
    past_stage_ = current_stage_;
 8002166:	4623      	mov	r3, r4
 8002168:	f853 0f13 	ldr.w	r0, [r3, #19]!
 800216c:	61a0      	str	r0, [r4, #24]
 800216e:	791b      	ldrb	r3, [r3, #4]
    set_LoRa_mode_receive();
 8002170:	4620      	mov	r0, r4
    past_stage_ = current_stage_;
 8002172:	7723      	strb	r3, [r4, #28]
    set_LoRa_mode_receive();
 8002174:	f7ff ffc0 	bl	80020f8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
}
 8002178:	2000      	movs	r0, #0
 800217a:	b002      	add	sp, #8
 800217c:	bd10      	pop	{r4, pc}

0800217e <_ZN17LoRa_contact_data21broadcast_wait_packetEv>:
uint32_t LoRa_contact_data::broadcast_wait_packet() {
 800217e:	b538      	push	{r3, r4, r5, lr}
    switch (module_state_) {
 8002180:	7c83      	ldrb	r3, [r0, #18]
uint32_t LoRa_contact_data::broadcast_wait_packet() {
 8002182:	4604      	mov	r4, r0
    switch (module_state_) {
 8002184:	2b01      	cmp	r3, #1
 8002186:	d00a      	beq.n	800219e <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x20>
 8002188:	2b02      	cmp	r3, #2
 800218a:	d002      	beq.n	8002192 <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x14>
 800218c:	f44f 709b 	mov.w	r0, #310	; 0x136
}
 8002190:	bd38      	pop	{r3, r4, r5, pc}
        if(!packet_dont_correct(true, true)) {
 8002192:	2201      	movs	r2, #1
 8002194:	4611      	mov	r1, r2
 8002196:	f7ff fe89 	bl	8001eac <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 800219a:	b920      	cbnz	r0, 80021a6 <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x28>
            set_LoRa_mode_receive();
 800219c:	4620      	mov	r0, r4
 800219e:	f7ff ffab 	bl	80020f8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
 80021a2:	2000      	movs	r0, #0
    return error;
 80021a4:	e7f4      	b.n	8002190 <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x12>
			if(reciev_packet_len == CONTACT_DATA_MAX_PACKET) {
 80021a6:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 80021aa:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
			reciev_packet_[reciev_packet_len++] = last_receive_packet_;
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80021b4:	f884 2135 	strb.w	r2, [r4, #309]	; 0x135
 80021b8:	f104 0120 	add.w	r1, r4, #32
 80021bc:	f002 f95b 	bl	8004476 <_ZN11LoRa_packetaSERKS_>
            current_stage_.stade_communication = SC_PACKET_ACCEPTED;
 80021c0:	2307      	movs	r3, #7
 80021c2:	7523      	strb	r3, [r4, #20]
 80021c4:	e7ea      	b.n	800219c <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x1e>
	...

080021c8 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>:
void LoRa_contact_data::set_LoRa_mode_send(bool first) {
    module_state_ = MS_LoRa_SEND;
 80021c8:	2301      	movs	r3, #1
void LoRa_contact_data::set_LoRa_mode_send(bool first) {
 80021ca:	b570      	push	{r4, r5, r6, lr}
    module_state_ = MS_LoRa_SEND;
 80021cc:	7483      	strb	r3, [r0, #18]
void LoRa_contact_data::set_LoRa_mode_send(bool first) {
 80021ce:	4604      	mov	r4, r0
 80021d0:	460d      	mov	r5, r1
#if defined ( ESP32 )
    time_last_packet_ = millis();
#else
    time_last_packet_ = HAL_GetTick();
 80021d2:	f005 f96d 	bl	80074b0 <HAL_GetTick>
 80021d6:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
#endif
    if(first)
 80021da:	b10d      	cbz	r5, 80021e0 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x18>
        time_first_packet_ = time_last_packet_;
 80021dc:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c

                                                            #if defined ( ALL_SAVE_PACKET )
                                                            all_packet.push_back(pack(last_send_packet_.get_data(), true));
                                                            #endif
#else
    LoRa.mode_sleep();
 80021e0:	4810      	ldr	r0, [pc, #64]	; (8002224 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x5c>)
 80021e2:	f001 fabd 	bl	8003760 <_ZN10LoRa_class10mode_sleepEv>
 80021e6:	f243 03d4 	movw	r3, #12500	; 0x30d4
    for(int i = 0; i < 12500; i++) __NOP(); // HAL_Delay(3);
 80021ea:	bf00      	nop
 80021ec:	3b01      	subs	r3, #1
 80021ee:	d1fc      	bne.n	80021ea <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x22>
    LoRa.mode_FSTX();
 80021f0:	480c      	ldr	r0, [pc, #48]	; (8002224 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x5c>)
 80021f2:	f001 fad9 	bl	80037a8 <_ZN10LoRa_class9mode_FSTXEv>
 80021f6:	f243 05d4 	movw	r5, #12500	; 0x30d4
    for(int i = 0; i < 12500; i++) __NOP(); // HAL_Delay(3);
 80021fa:	bf00      	nop
 80021fc:	3d01      	subs	r5, #1
 80021fe:	d1fc      	bne.n	80021fa <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x32>
    LoRa.sender_packet(&last_send_packet_[0], last_send_packet_.get_len(), false);
 8002200:	3428      	adds	r4, #40	; 0x28
 8002202:	4629      	mov	r1, r5
 8002204:	4620      	mov	r0, r4
 8002206:	f002 f92e 	bl	8004466 <_ZN11LoRa_packetixEi>
 800220a:	4606      	mov	r6, r0
 800220c:	4620      	mov	r0, r4
 800220e:	f002 f924 	bl	800445a <_ZNK11LoRa_packet7get_lenEv>
 8002212:	462b      	mov	r3, r5
 8002214:	4602      	mov	r2, r0
 8002216:	4631      	mov	r1, r6
#endif
}
 8002218:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LoRa.sender_packet(&last_send_packet_[0], last_send_packet_.get_len(), false);
 800221c:	4801      	ldr	r0, [pc, #4]	; (8002224 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x5c>)
 800221e:	f002 b83f 	b.w	80042a0 <_ZN10LoRa_class13sender_packetEPhhm>
 8002222:	bf00      	nop
 8002224:	20000370 	.word	0x20000370

08002228 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control>:
    switch (module_state_) {
 8002228:	7c83      	ldrb	r3, [r0, #18]
uint32_t LoRa_contact_data::init_exchange_boardcast(Stage_control& use_stage) {
 800222a:	b510      	push	{r4, lr}
    switch (module_state_) {
 800222c:	2b01      	cmp	r3, #1
uint32_t LoRa_contact_data::init_exchange_boardcast(Stage_control& use_stage) {
 800222e:	4604      	mov	r4, r0
    switch (module_state_) {
 8002230:	d117      	bne.n	8002262 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x3a>
        for(unsigned int i = 0; i < send_flag_len; ++i)
 8002232:	f890 1136 	ldrb.w	r1, [r0, #310]	; 0x136
 8002236:	f100 03ac 	add.w	r3, r0, #172	; 0xac
 800223a:	f06f 00ab 	mvn.w	r0, #171	; 0xab
 800223e:	1b00      	subs	r0, r0, r4
 8002240:	18c2      	adds	r2, r0, r3
 8002242:	4291      	cmp	r1, r2
 8002244:	d90f      	bls.n	8002266 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x3e>
            if(send_flag_[i] == true) {
 8002246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800224a:	2a00      	cmp	r2, #0
 800224c:	d0f8      	beq.n	8002240 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x18>
            create_data_packet();
 800224e:	4620      	mov	r0, r4
 8002250:	f7ff fd34 	bl	8001cbc <_ZN17LoRa_contact_data18create_data_packetEv>
 8002254:	e017      	b.n	8002286 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x5e>
                current_stage_ = past_stage_;
 8002256:	69a0      	ldr	r0, [r4, #24]
 8002258:	7912      	ldrb	r2, [r2, #4]
 800225a:	f8c4 0013 	str.w	r0, [r4, #19]
 800225e:	711a      	strb	r2, [r3, #4]
 8002260:	e00c      	b.n	800227c <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x54>
        error = 121;
 8002262:	2079      	movs	r0, #121	; 0x79
}
 8002264:	bd10      	pop	{r4, pc}
            if(!use_past_stage)
 8002266:	7f61      	ldrb	r1, [r4, #29]
 8002268:	f104 0218 	add.w	r2, r4, #24
 800226c:	f104 0313 	add.w	r3, r4, #19
 8002270:	2900      	cmp	r1, #0
 8002272:	d1f0      	bne.n	8002256 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x2e>
                past_stage_ = current_stage_;
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	61a0      	str	r0, [r4, #24]
 8002278:	791b      	ldrb	r3, [r3, #4]
 800227a:	7113      	strb	r3, [r2, #4]
            current_stage_.exchange = E_WAITING_CONFIRMATION;
 800227c:	2301      	movs	r3, #1
            create_amt_packet();
 800227e:	4620      	mov	r0, r4
            current_stage_.exchange = E_WAITING_CONFIRMATION;
 8002280:	75a3      	strb	r3, [r4, #22]
            create_amt_packet();
 8002282:	f7ff fd3f 	bl	8001d04 <_ZN17LoRa_contact_data17create_amt_packetEv>
            set_LoRa_mode_send();
 8002286:	4620      	mov	r0, r4
 8002288:	2100      	movs	r1, #0
 800228a:	f7ff ff9d 	bl	80021c8 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 800228e:	2000      	movs	r0, #0
 8002290:	e7e8      	b.n	8002264 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x3c>
	...

08002294 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>:
void LoRa_contact_data::set_LoRa_mode_sleep() {
    module_state_ = MS_LoRa_SLEEP;
 8002294:	2300      	movs	r3, #0
 8002296:	7483      	strb	r3, [r0, #18]
    // lora mode
#if defined ( ESP32 )
    lora_.mode_sleep();
#else
    LoRa.mode_sleep();
 8002298:	4801      	ldr	r0, [pc, #4]	; (80022a0 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv+0xc>)
 800229a:	f001 ba61 	b.w	8003760 <_ZN10LoRa_class10mode_sleepEv>
 800229e:	bf00      	nop
 80022a0:	20000370 	.word	0x20000370

080022a4 <_ZN17LoRa_contact_data11end_contactEv>:
bool LoRa_contact_data::end_contact() {
 80022a4:	b538      	push	{r3, r4, r5, lr}
 80022a6:	4604      	mov	r4, r0
    set_LoRa_mode_sleep();
 80022a8:	f7ff fff4 	bl	8002294 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>
    if((current_stage_.stade_communication != SC_DOWNTIME) &&
 80022ac:	7d23      	ldrb	r3, [r4, #20]
 80022ae:	f104 0518 	add.w	r5, r4, #24
 80022b2:	f104 0113 	add.w	r1, r4, #19
 80022b6:	b17b      	cbz	r3, 80022d8 <_ZN17LoRa_contact_data11end_contactEv+0x34>
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d102      	bne.n	80022c2 <_ZN17LoRa_contact_data11end_contactEv+0x1e>
      ((current_stage_.stade_communication != SC_CONNECTION) || (current_stage_.type_communication != TC_RECIPIENT))) {
 80022bc:	7ce3      	ldrb	r3, [r4, #19]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d00a      	beq.n	80022d8 <_ZN17LoRa_contact_data11end_contactEv+0x34>
        clear();
 80022c2:	4620      	mov	r0, r4
 80022c4:	f7ff fbf7 	bl	8001ab6 <_ZN17LoRa_contact_data5clearEv>
        current_stage_.stade_communication = SC_DOWNTIME;
 80022c8:	2300      	movs	r3, #0
 80022ca:	7523      	strb	r3, [r4, #20]
        past_stage_ = current_stage_;
 80022cc:	6808      	ldr	r0, [r1, #0]
 80022ce:	61a0      	str	r0, [r4, #24]
        return true;
 80022d0:	2001      	movs	r0, #1
        past_stage_ = current_stage_;
 80022d2:	790b      	ldrb	r3, [r1, #4]
 80022d4:	712b      	strb	r3, [r5, #4]
}
 80022d6:	bd38      	pop	{r3, r4, r5, pc}
    current_stage_.stade_communication = SC_DOWNTIME;
 80022d8:	2300      	movs	r3, #0
 80022da:	7523      	strb	r3, [r4, #20]
    past_stage_ = current_stage_;
 80022dc:	6808      	ldr	r0, [r1, #0]
 80022de:	61a0      	str	r0, [r4, #24]
 80022e0:	790a      	ldrb	r2, [r1, #4]
    return false;
 80022e2:	4618      	mov	r0, r3
    past_stage_ = current_stage_;
 80022e4:	712a      	strb	r2, [r5, #4]
    return false;
 80022e6:	e7f6      	b.n	80022d6 <_ZN17LoRa_contact_data11end_contactEv+0x32>

080022e8 <_ZN17LoRa_contact_data16contact_completeEv>:
    current_stage_.stade_communication = SC_COMPLETE;
 80022e8:	2204      	movs	r2, #4
 80022ea:	7502      	strb	r2, [r0, #20]
    past_stage_ = current_stage_;
 80022ec:	4602      	mov	r2, r0
void LoRa_contact_data::contact_complete() {
 80022ee:	4603      	mov	r3, r0
    past_stage_ = current_stage_;
 80022f0:	f852 0f13 	ldr.w	r0, [r2, #19]!
 80022f4:	6198      	str	r0, [r3, #24]
 80022f6:	7912      	ldrb	r2, [r2, #4]
    set_LoRa_mode_sleep();
 80022f8:	4618      	mov	r0, r3
    past_stage_ = current_stage_;
 80022fa:	771a      	strb	r2, [r3, #28]
    start_connect_ = false;
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
    set_LoRa_mode_sleep();
 8002302:	f7ff bfc7 	b.w	8002294 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>

08002306 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control>:
uint32_t LoRa_contact_data::recip_disconnect(Stage_control& use_stage) {
 8002306:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (use_stage.disconnect) {
 8002308:	790e      	ldrb	r6, [r1, #4]
uint32_t LoRa_contact_data::recip_disconnect(Stage_control& use_stage) {
 800230a:	4605      	mov	r5, r0
    switch (use_stage.disconnect) {
 800230c:	2e00      	cmp	r6, #0
 800230e:	d14c      	bne.n	80023aa <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0xa4>
        switch (module_state_) {
 8002310:	7c83      	ldrb	r3, [r0, #18]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d004      	beq.n	8002320 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x1a>
 8002316:	2b02      	cmp	r3, #2
 8002318:	d006      	beq.n	8002328 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x22>
 800231a:	20e7      	movs	r0, #231	; 0xe7
}
 800231c:	b002      	add	sp, #8
 800231e:	bd70      	pop	{r4, r5, r6, pc}
            set_LoRa_mode_receive();
 8002320:	f7ff feea 	bl	80020f8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002324:	4630      	mov	r0, r6
 8002326:	e7f9      	b.n	800231c <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x16>
            if(!packet_dont_correct()) {
 8002328:	4632      	mov	r2, r6
 800232a:	4631      	mov	r1, r6
 800232c:	f7ff fdbe 	bl	8001eac <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002330:	4604      	mov	r4, r0
 8002332:	bb40      	cbnz	r0, 8002386 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x80>
                if(HAL_GetTick() - time_last_packet_ < time_constraints_.R_disconnect)
 8002334:	f005 f8bc 	bl	80074b0 <HAL_GetTick>
 8002338:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 800233c:	1ac0      	subs	r0, r0, r3
 800233e:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
 8002342:	4298      	cmp	r0, r3
 8002344:	d204      	bcs.n	8002350 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x4a>
                    set_LoRa_mode_receive();
 8002346:	4628      	mov	r0, r5
 8002348:	f7ff fed6 	bl	80020f8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
                    set_LoRa_mode_send(true);
 800234c:	4620      	mov	r0, r4
 800234e:	e7e5      	b.n	800231c <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x16>
                    if(!use_past_stage)
 8002350:	7f69      	ldrb	r1, [r5, #29]
 8002352:	f105 0218 	add.w	r2, r5, #24
 8002356:	f105 0313 	add.w	r3, r5, #19
 800235a:	b971      	cbnz	r1, 800237a <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x74>
                        past_stage_ = current_stage_;
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	61a8      	str	r0, [r5, #24]
 8002360:	791b      	ldrb	r3, [r3, #4]
 8002362:	7113      	strb	r3, [r2, #4]
                    current_stage_.stade_communication = SC_DOWNTIME;
 8002364:	2400      	movs	r4, #0
                    create_disconnet_packet(true);
 8002366:	2101      	movs	r1, #1
 8002368:	4628      	mov	r0, r5
                    current_stage_.stade_communication = SC_DOWNTIME;
 800236a:	752c      	strb	r4, [r5, #20]
                    create_disconnet_packet(true);
 800236c:	f7ff fd72 	bl	8001e54 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 8002370:	2101      	movs	r1, #1
 8002372:	4628      	mov	r0, r5
 8002374:	f7ff ff28 	bl	80021c8 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 8002378:	e7e8      	b.n	800234c <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x46>
                        current_stage_ = past_stage_;
 800237a:	69a8      	ldr	r0, [r5, #24]
 800237c:	7912      	ldrb	r2, [r2, #4]
 800237e:	f8c5 0013 	str.w	r0, [r5, #19]
 8002382:	711a      	strb	r2, [r3, #4]
 8002384:	e7ee      	b.n	8002364 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x5e>
                if(check_packet_type(Packet_Type::CONNECTION, {0x08})) {
 8002386:	2308      	movs	r3, #8
 8002388:	4631      	mov	r1, r6
 800238a:	4628      	mov	r0, r5
 800238c:	f10d 0207 	add.w	r2, sp, #7
 8002390:	f88d 3007 	strb.w	r3, [sp, #7]
 8002394:	f7ff fdd2 	bl	8001f3c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002398:	2800      	cmp	r0, #0
 800239a:	d0bf      	beq.n	800231c <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x16>
                    sort_num_packet();
 800239c:	4628      	mov	r0, r5
 800239e:	f7ff fe4b 	bl	8002038 <_ZN17LoRa_contact_data15sort_num_packetEv>
                    contact_complete();
 80023a2:	4628      	mov	r0, r5
 80023a4:	f7ff ffa0 	bl	80022e8 <_ZN17LoRa_contact_data16contact_completeEv>
 80023a8:	e7bc      	b.n	8002324 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x1e>
        error = 230;
 80023aa:	20e6      	movs	r0, #230	; 0xe6
 80023ac:	e7b6      	b.n	800231c <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x16>

080023ae <_ZN17LoRa_contact_data14broadcast_sendEb>:
uint16_t LoRa_contact_data::broadcast_send(bool reply) {
 80023ae:	b538      	push	{r3, r4, r5, lr}
    if(send_packet_len == 0)
 80023b0:	f890 3134 	ldrb.w	r3, [r0, #308]	; 0x134
uint16_t LoRa_contact_data::broadcast_send(bool reply) {
 80023b4:	4604      	mov	r4, r0
 80023b6:	460d      	mov	r5, r1
    if(send_packet_len == 0)
 80023b8:	b1bb      	cbz	r3, 80023ea <_ZN17LoRa_contact_data14broadcast_sendEb+0x3c>
    set_LoRa_mode_sleep();
 80023ba:	f7ff ff6b 	bl	8002294 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>
    current_stage_.type_communication = TC_BROADCAST;
 80023be:	2302      	movs	r3, #2
    if(reply)
 80023c0:	2d00      	cmp	r5, #0
    current_stage_.type_communication = TC_BROADCAST;
 80023c2:	74e3      	strb	r3, [r4, #19]
        current_stage_.stade_communication = SC_BROADCASTING;
 80023c4:	bf14      	ite	ne
 80023c6:	2308      	movne	r3, #8
 80023c8:	2305      	moveq	r3, #5
 80023ca:	7523      	strb	r3, [r4, #20]
    past_stage_ = current_stage_;
 80023cc:	4623      	mov	r3, r4
 80023ce:	f853 0f13 	ldr.w	r0, [r3, #19]!
 80023d2:	61a0      	str	r0, [r4, #24]
 80023d4:	791b      	ldrb	r3, [r3, #4]
    create_data_packet();
 80023d6:	4620      	mov	r0, r4
    past_stage_ = current_stage_;
 80023d8:	7723      	strb	r3, [r4, #28]
    create_data_packet();
 80023da:	f7ff fc6f 	bl	8001cbc <_ZN17LoRa_contact_data18create_data_packetEv>
    set_LoRa_mode_send();
 80023de:	4620      	mov	r0, r4
 80023e0:	2100      	movs	r1, #0
 80023e2:	f7ff fef1 	bl	80021c8 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    return 0;
 80023e6:	2000      	movs	r0, #0
}
 80023e8:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 80023ea:	2001      	movs	r0, #1
 80023ec:	e7fc      	b.n	80023e8 <_ZN17LoRa_contact_data14broadcast_sendEb+0x3a>

080023ee <_ZN17LoRa_contact_data21broadcast_send_packetEv>:
uint32_t LoRa_contact_data::broadcast_send_packet() {
 80023ee:	b538      	push	{r3, r4, r5, lr}
    switch (module_state_) {
 80023f0:	7c83      	ldrb	r3, [r0, #18]
uint32_t LoRa_contact_data::broadcast_send_packet() {
 80023f2:	4604      	mov	r4, r0
    switch (module_state_) {
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d120      	bne.n	800243a <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x4c>
        for(unsigned int i = 0; i < send_flag_len; ++i)
 80023f8:	f890 1136 	ldrb.w	r1, [r0, #310]	; 0x136
 80023fc:	f100 03ac 	add.w	r3, r0, #172	; 0xac
 8002400:	f06f 00ab 	mvn.w	r0, #171	; 0xab
 8002404:	1b00      	subs	r0, r0, r4
 8002406:	18c2      	adds	r2, r0, r3
 8002408:	4291      	cmp	r1, r2
 800240a:	d919      	bls.n	8002440 <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x52>
            if(send_flag_[i] == true) {
 800240c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002410:	2a00      	cmp	r2, #0
 8002412:	d0f8      	beq.n	8002406 <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x18>
            create_data_packet();
 8002414:	4620      	mov	r0, r4
 8002416:	f7ff fc51 	bl	8001cbc <_ZN17LoRa_contact_data18create_data_packetEv>
            set_LoRa_mode_send();
 800241a:	2100      	movs	r1, #0
 800241c:	4620      	mov	r0, r4
 800241e:	f7ff fed3 	bl	80021c8 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 8002422:	e01a      	b.n	800245a <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x6c>
                if(reciev_packet_len == 0)
 8002424:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
                set_LoRa_mode_receive();
 8002428:	4620      	mov	r0, r4
                    current_stage_.stade_communication = SC_PACKET_ACCEPTED;
 800242a:	2b00      	cmp	r3, #0
 800242c:	bf0c      	ite	eq
 800242e:	2306      	moveq	r3, #6
 8002430:	2307      	movne	r3, #7
 8002432:	7523      	strb	r3, [r4, #20]
                set_LoRa_mode_receive();
 8002434:	f7ff fe60 	bl	80020f8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
 8002438:	e00f      	b.n	800245a <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x6c>
        error = 320;
 800243a:	f44f 70a0 	mov.w	r0, #320	; 0x140
}
 800243e:	bd38      	pop	{r3, r4, r5, pc}
            send_packet_len = 0;
 8002440:	2500      	movs	r5, #0
            if(current_stage_.stade_communication == SC_BROADCASTING) {
 8002442:	7d23      	ldrb	r3, [r4, #20]
            send_packet_len = 0;
 8002444:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
            if(current_stage_.stade_communication == SC_BROADCASTING) {
 8002448:	2b05      	cmp	r3, #5
			send_flag_len = 0;
 800244a:	f884 5136 	strb.w	r5, [r4, #310]	; 0x136
            if(current_stage_.stade_communication == SC_BROADCASTING) {
 800244e:	d1e9      	bne.n	8002424 <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x36>
                current_stage_.stade_communication = SC_COMPLETE;
 8002450:	2304      	movs	r3, #4
                set_LoRa_mode_sleep();
 8002452:	4620      	mov	r0, r4
                current_stage_.stade_communication = SC_COMPLETE;
 8002454:	7523      	strb	r3, [r4, #20]
                set_LoRa_mode_sleep();
 8002456:	f7ff ff1d 	bl	8002294 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>
            set_LoRa_mode_send();
 800245a:	2000      	movs	r0, #0
 800245c:	e7ef      	b.n	800243e <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x50>
	...

08002460 <_ZN17LoRa_contact_data19work_contact_systemEv>:
uint32_t LoRa_contact_data::work_contact_system() {
 8002460:	b530      	push	{r4, r5, lr}
 8002462:	4604      	mov	r4, r0
    if(((in_processing_) || (!lora_init_) || (!lora_begin_) || (current_stage_.stade_communication == SC_DOWNTIME) || (current_stage_.stade_communication == SC_COMPLETE)) && !use_past_stage)
 8002464:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
 8002468:	7f40      	ldrb	r0, [r0, #29]
uint32_t LoRa_contact_data::work_contact_system() {
 800246a:	b085      	sub	sp, #20
    if(((in_processing_) || (!lora_init_) || (!lora_begin_) || (current_stage_.stade_communication == SC_DOWNTIME) || (current_stage_.stade_communication == SC_COMPLETE)) && !use_past_stage)
 800246c:	b93b      	cbnz	r3, 800247e <_ZN17LoRa_contact_data19work_contact_systemEv+0x1e>
 800246e:	7823      	ldrb	r3, [r4, #0]
 8002470:	b12b      	cbz	r3, 800247e <_ZN17LoRa_contact_data19work_contact_systemEv+0x1e>
 8002472:	7863      	ldrb	r3, [r4, #1]
 8002474:	b11b      	cbz	r3, 800247e <_ZN17LoRa_contact_data19work_contact_systemEv+0x1e>
 8002476:	7d23      	ldrb	r3, [r4, #20]
 8002478:	f013 0ffb 	tst.w	r3, #251	; 0xfb
 800247c:	d103      	bne.n	8002486 <_ZN17LoRa_contact_data19work_contact_systemEv+0x26>
 800247e:	2800      	cmp	r0, #0
 8002480:	d146      	bne.n	8002510 <_ZN17LoRa_contact_data19work_contact_systemEv+0xb0>
}
 8002482:	b005      	add	sp, #20
 8002484:	bd30      	pop	{r4, r5, pc}
    if(!use_past_stage) {
 8002486:	2800      	cmp	r0, #0
 8002488:	d142      	bne.n	8002510 <_ZN17LoRa_contact_data19work_contact_systemEv+0xb0>
        in_processing_ = true;
 800248a:	2301      	movs	r3, #1
 800248c:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
        if(module_state_ == MS_LoRa_RECIEVE) {
 8002490:	7ca3      	ldrb	r3, [r4, #18]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d119      	bne.n	80024ca <_ZN17LoRa_contact_data19work_contact_systemEv+0x6a>
            class LoRa_packet read_packet = LoRa.receiver_packet(0, 0);
 8002496:	4603      	mov	r3, r0
 8002498:	4602      	mov	r2, r0
 800249a:	e9cd 0000 	strd	r0, r0, [sp]
 800249e:	4939      	ldr	r1, [pc, #228]	; (8002584 <_ZN17LoRa_contact_data19work_contact_systemEv+0x124>)
 80024a0:	a802      	add	r0, sp, #8
 80024a2:	f001 fcdd 	bl	8003e60 <_ZN10LoRa_class15receiver_packetEhmbb>
            if(!((read_packet.get_len() < PACKET_HEADER_SIZE) || (read_packet.get_crc_error()))) {
 80024a6:	a802      	add	r0, sp, #8
 80024a8:	f001 ffd7 	bl	800445a <_ZNK11LoRa_packet7get_lenEv>
 80024ac:	2808      	cmp	r0, #8
 80024ae:	f104 0520 	add.w	r5, r4, #32
 80024b2:	d929      	bls.n	8002508 <_ZN17LoRa_contact_data19work_contact_systemEv+0xa8>
 80024b4:	a802      	add	r0, sp, #8
 80024b6:	f001 ffd4 	bl	8004462 <_ZNK11LoRa_packet13get_crc_errorEv>
 80024ba:	bb28      	cbnz	r0, 8002508 <_ZN17LoRa_contact_data19work_contact_systemEv+0xa8>
                last_receive_packet_ = read_packet;
 80024bc:	4628      	mov	r0, r5
 80024be:	a902      	add	r1, sp, #8
 80024c0:	f001 ffd9 	bl	8004476 <_ZN11LoRa_packetaSERKS_>
            class LoRa_packet read_packet = LoRa.receiver_packet(0, 0);
 80024c4:	a802      	add	r0, sp, #8
 80024c6:	f001 ff91 	bl	80043ec <_ZN11LoRa_packetD1Ev>
        use_stage = &current_stage_;
 80024ca:	f104 0113 	add.w	r1, r4, #19
    switch (use_stage->type_communication) {
 80024ce:	780b      	ldrb	r3, [r1, #0]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d02a      	beq.n	800252a <_ZN17LoRa_contact_data19work_contact_systemEv+0xca>
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d03b      	beq.n	8002550 <_ZN17LoRa_contact_data19work_contact_systemEv+0xf0>
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d14c      	bne.n	8002576 <_ZN17LoRa_contact_data19work_contact_systemEv+0x116>
        switch (use_stage->stade_communication) {
 80024dc:	784b      	ldrb	r3, [r1, #1]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d019      	beq.n	8002516 <_ZN17LoRa_contact_data19work_contact_systemEv+0xb6>
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d01b      	beq.n	800251e <_ZN17LoRa_contact_data19work_contact_systemEv+0xbe>
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d148      	bne.n	800257c <_ZN17LoRa_contact_data19work_contact_systemEv+0x11c>
            error = init_connection(*use_stage);
 80024ea:	4620      	mov	r0, r4
 80024ec:	f000 f96e 	bl	80027cc <_ZN17LoRa_contact_data15init_connectionER13Stage_control>
    if(!use_past_stage)
 80024f0:	7f63      	ldrb	r3, [r4, #29]
 80024f2:	b90b      	cbnz	r3, 80024f8 <_ZN17LoRa_contact_data19work_contact_systemEv+0x98>
        in_processing_ = false;
 80024f4:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
    if(error != 0) {
 80024f8:	2800      	cmp	r0, #0
 80024fa:	d0c2      	beq.n	8002482 <_ZN17LoRa_contact_data19work_contact_systemEv+0x22>
        start_connect_ = false;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f884 3137 	strb.w	r3, [r4, #311]	; 0x137
        init_ = false;
 8002502:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8002506:	e7bc      	b.n	8002482 <_ZN17LoRa_contact_data19work_contact_systemEv+0x22>
                last_receive_packet_.clear_packet();
 8002508:	4628      	mov	r0, r5
 800250a:	f001 ff9b 	bl	8004444 <_ZN11LoRa_packet12clear_packetEv>
 800250e:	e7d9      	b.n	80024c4 <_ZN17LoRa_contact_data19work_contact_systemEv+0x64>
        use_stage = &past_stage_;
 8002510:	f104 0118 	add.w	r1, r4, #24
 8002514:	e7db      	b.n	80024ce <_ZN17LoRa_contact_data19work_contact_systemEv+0x6e>
            error = init_exchange(*use_stage);
 8002516:	4620      	mov	r0, r4
 8002518:	f000 fac6 	bl	8002aa8 <_ZN17LoRa_contact_data13init_exchangeER13Stage_control>
            break;
 800251c:	e7e8      	b.n	80024f0 <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
    switch (module_state_) {
 800251e:	7ca3      	ldrb	r3, [r4, #18]
        error = 131;
 8002520:	2b01      	cmp	r3, #1
 8002522:	bf0c      	ite	eq
 8002524:	2000      	moveq	r0, #0
 8002526:	2083      	movne	r0, #131	; 0x83
 8002528:	e7e2      	b.n	80024f0 <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
        switch (use_stage->stade_communication) {
 800252a:	784b      	ldrb	r3, [r1, #1]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d007      	beq.n	8002540 <_ZN17LoRa_contact_data19work_contact_systemEv+0xe0>
 8002530:	2b03      	cmp	r3, #3
 8002532:	d009      	beq.n	8002548 <_ZN17LoRa_contact_data19work_contact_systemEv+0xe8>
 8002534:	2b01      	cmp	r3, #1
 8002536:	d123      	bne.n	8002580 <_ZN17LoRa_contact_data19work_contact_systemEv+0x120>
            error = recip_connection(*use_stage);
 8002538:	4620      	mov	r0, r4
 800253a:	f000 fb87 	bl	8002c4c <_ZN17LoRa_contact_data16recip_connectionER13Stage_control>
            break;
 800253e:	e7d7      	b.n	80024f0 <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
            error = recip_exchange(*use_stage);
 8002540:	4620      	mov	r0, r4
 8002542:	f000 fcb3 	bl	8002eac <_ZN17LoRa_contact_data14recip_exchangeER13Stage_control>
            break;
 8002546:	e7d3      	b.n	80024f0 <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
            error = recip_disconnect(*use_stage);
 8002548:	4620      	mov	r0, r4
 800254a:	f7ff fedc 	bl	8002306 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control>
            break;
 800254e:	e7cf      	b.n	80024f0 <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
        switch (use_stage->stade_communication) {
 8002550:	784b      	ldrb	r3, [r1, #1]
 8002552:	2b07      	cmp	r3, #7
 8002554:	d805      	bhi.n	8002562 <_ZN17LoRa_contact_data19work_contact_systemEv+0x102>
 8002556:	2b05      	cmp	r3, #5
 8002558:	d805      	bhi.n	8002566 <_ZN17LoRa_contact_data19work_contact_systemEv+0x106>
 800255a:	d008      	beq.n	800256e <_ZN17LoRa_contact_data19work_contact_systemEv+0x10e>
 800255c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002560:	e7c6      	b.n	80024f0 <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
 8002562:	2b08      	cmp	r3, #8
 8002564:	e7f9      	b.n	800255a <_ZN17LoRa_contact_data19work_contact_systemEv+0xfa>
            error = broadcast_wait_packet();
 8002566:	4620      	mov	r0, r4
 8002568:	f7ff fe09 	bl	800217e <_ZN17LoRa_contact_data21broadcast_wait_packetEv>
            break;
 800256c:	e7c0      	b.n	80024f0 <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
            error = broadcast_send_packet();
 800256e:	4620      	mov	r0, r4
 8002570:	f7ff ff3d 	bl	80023ee <_ZN17LoRa_contact_data21broadcast_send_packetEv>
            break;
 8002574:	e7bc      	b.n	80024f0 <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
    switch (use_stage->type_communication) {
 8002576:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800257a:	e7b9      	b.n	80024f0 <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
 800257c:	2064      	movs	r0, #100	; 0x64
 800257e:	e7b7      	b.n	80024f0 <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
 8002580:	20c8      	movs	r0, #200	; 0xc8
 8002582:	e7b5      	b.n	80024f0 <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
 8002584:	20000370 	.word	0x20000370

08002588 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control>:
uint32_t LoRa_contact_data::init_connection_expect(Stage_control& use_stage) {
 8002588:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    switch (module_state_) {
 800258a:	7c86      	ldrb	r6, [r0, #18]
uint32_t LoRa_contact_data::init_connection_expect(Stage_control& use_stage) {
 800258c:	4604      	mov	r4, r0
    switch (module_state_) {
 800258e:	2e01      	cmp	r6, #1
 8002590:	d014      	beq.n	80025bc <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x34>
 8002592:	2e02      	cmp	r6, #2
 8002594:	d002      	beq.n	800259c <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x14>
 8002596:	206f      	movs	r0, #111	; 0x6f
}
 8002598:	b004      	add	sp, #16
 800259a:	bd70      	pop	{r4, r5, r6, pc}
        if(!packet_dont_correct()) {
 800259c:	2200      	movs	r2, #0
 800259e:	4611      	mov	r1, r2
 80025a0:	f7ff fc84 	bl	8001eac <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 80025a4:	4605      	mov	r5, r0
 80025a6:	bbc8      	cbnz	r0, 800261c <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x94>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.I_connect) {
 80025a8:	f004 ff82 	bl	80074b0 <HAL_GetTick>
 80025ac:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80025b0:	1ac0      	subs	r0, r0, r3
 80025b2:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 80025b6:	4298      	cmp	r0, r3
 80025b8:	d203      	bcs.n	80025c2 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x3a>
                    set_LoRa_mode_receive();
 80025ba:	4620      	mov	r0, r4
 80025bc:	f7ff fd9c 	bl	80020f8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
 80025c0:	e00c      	b.n	80025dc <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x54>
                if(send_packet_amt_ < packet_constraints_.I_connect) {
 80025c2:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 80025c6:	f894 2165 	ldrb.w	r2, [r4, #357]	; 0x165
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d908      	bls.n	80025e0 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x58>
                    set_LoRa_mode_send();
 80025ce:	4629      	mov	r1, r5
                    ++send_packet_amt_;
 80025d0:	3301      	adds	r3, #1
 80025d2:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                        set_LoRa_mode_send(true);
 80025d6:	4620      	mov	r0, r4
 80025d8:	f7ff fdf6 	bl	80021c8 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 80025dc:	2000      	movs	r0, #0
 80025de:	e7db      	b.n	8002598 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x10>
                    if(!use_past_stage)
 80025e0:	7f61      	ldrb	r1, [r4, #29]
                    send_packet_amt_ = 0;
 80025e2:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                    if(!use_past_stage)
 80025e6:	f104 0218 	add.w	r2, r4, #24
 80025ea:	f104 0313 	add.w	r3, r4, #19
 80025ee:	b979      	cbnz	r1, 8002610 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x88>
                        past_stage_ = current_stage_;
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	61a0      	str	r0, [r4, #24]
 80025f4:	791b      	ldrb	r3, [r3, #4]
 80025f6:	7113      	strb	r3, [r2, #4]
                    current_stage_.stade_communication = SC_DOWNTIME;
 80025f8:	2300      	movs	r3, #0
                    create_disconnet_packet(true);
 80025fa:	2101      	movs	r1, #1
                    current_stage_.stade_communication = SC_DOWNTIME;
 80025fc:	7523      	strb	r3, [r4, #20]
                    create_disconnet_packet(true);
 80025fe:	4620      	mov	r0, r4
 8002600:	f7ff fc28 	bl	8001e54 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 8002604:	4620      	mov	r0, r4
 8002606:	2101      	movs	r1, #1
 8002608:	f7ff fdde 	bl	80021c8 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    error = 112;
 800260c:	2070      	movs	r0, #112	; 0x70
 800260e:	e7c3      	b.n	8002598 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x10>
                        current_stage_ = past_stage_;
 8002610:	69a0      	ldr	r0, [r4, #24]
 8002612:	7912      	ldrb	r2, [r2, #4]
 8002614:	f8c4 0013 	str.w	r0, [r4, #19]
 8002618:	711a      	strb	r2, [r3, #4]
 800261a:	e7ed      	b.n	80025f8 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x70>
            if(check_packet_type(Packet_Type::CONNECTION, {0x01})) {
 800261c:	2501      	movs	r5, #1
 800261e:	2100      	movs	r1, #0
 8002620:	4620      	mov	r0, r4
 8002622:	aa03      	add	r2, sp, #12
 8002624:	f88d 500c 	strb.w	r5, [sp, #12]
 8002628:	f7ff fc88 	bl	8001f3c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 800262c:	2800      	cmp	r0, #0
 800262e:	d062      	beq.n	80026f6 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x16e>
                send_packet_amt_ = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                uint8_t data[2] = {0, 0};
 8002636:	f8ad 300c 	strh.w	r3, [sp, #12]
                if(amt_packet_ == 0xFF)
 800263a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                uint8_t com = 0x01;
 800263e:	f88d 500a 	strb.w	r5, [sp, #10]
                    len = 2;
 8002642:	2bff      	cmp	r3, #255	; 0xff
 8002644:	bf08      	it	eq
 8002646:	4635      	moveq	r5, r6
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 8002648:	f10d 030b 	add.w	r3, sp, #11
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	f10d 020a 	add.w	r2, sp, #10
 8002652:	ab03      	add	r3, sp, #12
 8002654:	f104 0120 	add.w	r1, r4, #32
 8002658:	482c      	ldr	r0, [pc, #176]	; (800270c <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x184>)
                    len = 2;
 800265a:	f88d 500b 	strb.w	r5, [sp, #11]
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 800265e:	f003 fa33 	bl	8005ac8 <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
                if(data[0] == 0) {
 8002662:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002666:	7f61      	ldrb	r1, [r4, #29]
 8002668:	f104 0218 	add.w	r2, r4, #24
 800266c:	f104 0313 	add.w	r3, r4, #19
 8002670:	bb98      	cbnz	r0, 80026da <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x152>
                    if(amt_packet_ == 0xFF) {
 8002672:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8002676:	28ff      	cmp	r0, #255	; 0xff
 8002678:	d11c      	bne.n	80026b4 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x12c>
                        if(!use_past_stage)
 800267a:	b9a9      	cbnz	r1, 80026a8 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x120>
                            past_stage_ = current_stage_;
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	61a0      	str	r0, [r4, #24]
 8002680:	791b      	ldrb	r3, [r3, #4]
 8002682:	7113      	strb	r3, [r2, #4]
                        current_stage_.stade_communication = SC_EXCHANGE;
 8002684:	2302      	movs	r3, #2
                        current_stage_.type_communication = TC_RECIPIENT;
 8002686:	2501      	movs	r5, #1
                        current_stage_.exchange = E_BOARDCAST;
 8002688:	2100      	movs	r1, #0
                        current_stage_.stade_communication = SC_EXCHANGE;
 800268a:	7523      	strb	r3, [r4, #20]
                        expected_amt_packet_ = data[1];
 800268c:	f89d 300d 	ldrb.w	r3, [sp, #13]
                        create_connect_packet(0, true); // уже не инициатор
 8002690:	462a      	mov	r2, r5
 8002692:	4620      	mov	r0, r4
                        current_stage_.type_communication = TC_RECIPIENT;
 8002694:	74e5      	strb	r5, [r4, #19]
                        current_stage_.exchange = E_BOARDCAST;
 8002696:	75a1      	strb	r1, [r4, #22]
                        expected_amt_packet_ = data[1];
 8002698:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
                        amt_packet_ = 0;
 800269c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
                        create_connect_packet(0, true); // уже не инициатор
 80026a0:	f7ff fa8e 	bl	8001bc0 <_ZN17LoRa_contact_data21create_connect_packetEhb>
                        set_LoRa_mode_send(true);
 80026a4:	2101      	movs	r1, #1
 80026a6:	e796      	b.n	80025d6 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x4e>
                            current_stage_ = past_stage_;
 80026a8:	69a0      	ldr	r0, [r4, #24]
 80026aa:	7912      	ldrb	r2, [r2, #4]
 80026ac:	f8c4 0013 	str.w	r0, [r4, #19]
 80026b0:	711a      	strb	r2, [r3, #4]
 80026b2:	e7e7      	b.n	8002684 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0xfc>
                        if(!use_past_stage)
 80026b4:	b959      	cbnz	r1, 80026ce <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x146>
                            past_stage_ = current_stage_;
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	61a0      	str	r0, [r4, #24]
 80026ba:	791b      	ldrb	r3, [r3, #4]
 80026bc:	7113      	strb	r3, [r2, #4]
                        current_stage_.exchange = E_BOARDCAST;
 80026be:	2300      	movs	r3, #0
 80026c0:	75a3      	strb	r3, [r4, #22]
                        current_stage_.stade_communication = SC_EXCHANGE;
 80026c2:	2302      	movs	r3, #2
                        create_data_packet();
 80026c4:	4620      	mov	r0, r4
                        current_stage_.stade_communication = SC_EXCHANGE;
 80026c6:	7523      	strb	r3, [r4, #20]
                        create_data_packet();
 80026c8:	f7ff faf8 	bl	8001cbc <_ZN17LoRa_contact_data18create_data_packetEv>
 80026cc:	e7ea      	b.n	80026a4 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x11c>
                            current_stage_ = past_stage_;
 80026ce:	69a0      	ldr	r0, [r4, #24]
 80026d0:	7912      	ldrb	r2, [r2, #4]
 80026d2:	f8c4 0013 	str.w	r0, [r4, #19]
 80026d6:	711a      	strb	r2, [r3, #4]
 80026d8:	e7f1      	b.n	80026be <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x136>
                    if(!use_past_stage)
 80026da:	b931      	cbnz	r1, 80026ea <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x162>
                        past_stage_ = current_stage_;
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	61a0      	str	r0, [r4, #24]
 80026e0:	791b      	ldrb	r3, [r3, #4]
 80026e2:	7113      	strb	r3, [r2, #4]
                    current_stage_.connection = C_WAIT_RESET;
 80026e4:	2301      	movs	r3, #1
 80026e6:	7563      	strb	r3, [r4, #21]
 80026e8:	e767      	b.n	80025ba <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x32>
                        current_stage_ = past_stage_;
 80026ea:	69a0      	ldr	r0, [r4, #24]
 80026ec:	7912      	ldrb	r2, [r2, #4]
 80026ee:	f8c4 0013 	str.w	r0, [r4, #19]
 80026f2:	711a      	strb	r2, [r3, #4]
 80026f4:	e7f6      	b.n	80026e4 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x15c>
                if(!use_past_stage) {
 80026f6:	7f66      	ldrb	r6, [r4, #29]
 80026f8:	2e00      	cmp	r6, #0
 80026fa:	f47f af5e 	bne.w	80025ba <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x32>
                    error = work_contact_system();
 80026fe:	4620      	mov	r0, r4
                    use_past_stage = true;
 8002700:	7765      	strb	r5, [r4, #29]
                    error = work_contact_system();
 8002702:	f7ff fead 	bl	8002460 <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8002706:	7766      	strb	r6, [r4, #29]
    return error;
 8002708:	e746      	b.n	8002598 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x10>
 800270a:	bf00      	nop
 800270c:	200023b4 	.word	0x200023b4

08002710 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control>:
uint32_t LoRa_contact_data::init_connection_wait(Stage_control& use_stage) {
 8002710:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (module_state_) {
 8002712:	7c85      	ldrb	r5, [r0, #18]
uint32_t LoRa_contact_data::init_connection_wait(Stage_control& use_stage) {
 8002714:	4604      	mov	r4, r0
    switch (module_state_) {
 8002716:	2d01      	cmp	r5, #1
 8002718:	d013      	beq.n	8002742 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x32>
 800271a:	2d02      	cmp	r5, #2
 800271c:	d002      	beq.n	8002724 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x14>
 800271e:	2071      	movs	r0, #113	; 0x71
}
 8002720:	b003      	add	sp, #12
 8002722:	bd30      	pop	{r4, r5, pc}
        if(!packet_dont_correct()) {
 8002724:	2200      	movs	r2, #0
 8002726:	4611      	mov	r1, r2
 8002728:	f7ff fbc0 	bl	8001eac <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 800272c:	bb48      	cbnz	r0, 8002782 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x72>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.I_wait_connect) {
 800272e:	f004 febf 	bl	80074b0 <HAL_GetTick>
 8002732:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002736:	1ac0      	subs	r0, r0, r3
 8002738:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800273c:	4298      	cmp	r0, r3
 800273e:	d204      	bcs.n	800274a <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x3a>
                set_LoRa_mode_receive();
 8002740:	4620      	mov	r0, r4
 8002742:	f7ff fcd9 	bl	80020f8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002746:	2000      	movs	r0, #0
 8002748:	e7ea      	b.n	8002720 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x10>
                if(!use_past_stage)
 800274a:	7f61      	ldrb	r1, [r4, #29]
 800274c:	f104 0218 	add.w	r2, r4, #24
 8002750:	f104 0313 	add.w	r3, r4, #19
 8002754:	b979      	cbnz	r1, 8002776 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x66>
                    past_stage_ = current_stage_;
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	61a0      	str	r0, [r4, #24]
 800275a:	791b      	ldrb	r3, [r3, #4]
 800275c:	7113      	strb	r3, [r2, #4]
                current_stage_.stade_communication = SC_DOWNTIME;
 800275e:	2300      	movs	r3, #0
                create_disconnet_packet(true);
 8002760:	2101      	movs	r1, #1
                current_stage_.stade_communication = SC_DOWNTIME;
 8002762:	7523      	strb	r3, [r4, #20]
                create_disconnet_packet(true);
 8002764:	4620      	mov	r0, r4
 8002766:	f7ff fb75 	bl	8001e54 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                set_LoRa_mode_send(true);
 800276a:	4620      	mov	r0, r4
 800276c:	2101      	movs	r1, #1
 800276e:	f7ff fd2b 	bl	80021c8 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                error = 114;
 8002772:	2072      	movs	r0, #114	; 0x72
 8002774:	e7d4      	b.n	8002720 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x10>
                    current_stage_ = past_stage_;
 8002776:	69a0      	ldr	r0, [r4, #24]
 8002778:	7912      	ldrb	r2, [r2, #4]
 800277a:	f8c4 0013 	str.w	r0, [r4, #19]
 800277e:	711a      	strb	r2, [r3, #4]
 8002780:	e7ed      	b.n	800275e <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x4e>
            if(check_packet_type(Packet_Type::CONNECTION, {0x02})) {
 8002782:	2100      	movs	r1, #0
 8002784:	4620      	mov	r0, r4
 8002786:	f10d 0207 	add.w	r2, sp, #7
 800278a:	f88d 5007 	strb.w	r5, [sp, #7]
 800278e:	f7ff fbd5 	bl	8001f3c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002792:	7f65      	ldrb	r5, [r4, #29]
 8002794:	b188      	cbz	r0, 80027ba <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0xaa>
                if(!use_past_stage)
 8002796:	f104 0218 	add.w	r2, r4, #24
 800279a:	f104 0313 	add.w	r3, r4, #19
 800279e:	b935      	cbnz	r5, 80027ae <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x9e>
                    past_stage_ = current_stage_;
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	61a0      	str	r0, [r4, #24]
 80027a4:	791b      	ldrb	r3, [r3, #4]
 80027a6:	7113      	strb	r3, [r2, #4]
                current_stage_.connection = C_EXPECTATION; // ??? (?) -----
 80027a8:	2000      	movs	r0, #0
 80027aa:	7560      	strb	r0, [r4, #21]
 80027ac:	e7b8      	b.n	8002720 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x10>
                    current_stage_ = past_stage_;
 80027ae:	69a0      	ldr	r0, [r4, #24]
 80027b0:	7912      	ldrb	r2, [r2, #4]
 80027b2:	f8c4 0013 	str.w	r0, [r4, #19]
 80027b6:	711a      	strb	r2, [r3, #4]
 80027b8:	e7f6      	b.n	80027a8 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x98>
                if(!use_past_stage) {
 80027ba:	2d00      	cmp	r5, #0
 80027bc:	d1c0      	bne.n	8002740 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x30>
                    use_past_stage = true;
 80027be:	2301      	movs	r3, #1
                    error = work_contact_system();
 80027c0:	4620      	mov	r0, r4
                    use_past_stage = true;
 80027c2:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 80027c4:	f7ff fe4c 	bl	8002460 <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 80027c8:	7765      	strb	r5, [r4, #29]
    return error;
 80027ca:	e7a9      	b.n	8002720 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x10>

080027cc <_ZN17LoRa_contact_data15init_connectionER13Stage_control>:
    switch (use_stage.connection) {
 80027cc:	788b      	ldrb	r3, [r1, #2]
 80027ce:	b11b      	cbz	r3, 80027d8 <_ZN17LoRa_contact_data15init_connectionER13Stage_control+0xc>
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d003      	beq.n	80027dc <_ZN17LoRa_contact_data15init_connectionER13Stage_control+0x10>
}
 80027d4:	206e      	movs	r0, #110	; 0x6e
 80027d6:	4770      	bx	lr
        error = init_connection_expect(use_stage);
 80027d8:	f7ff bed6 	b.w	8002588 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control>
        error = init_connection_wait(use_stage);
 80027dc:	f7ff bf98 	b.w	8002710 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control>

080027e0 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control>:
uint32_t LoRa_contact_data::init_exchange_wait_confirmation(Stage_control& use_stage) {
 80027e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch (module_state_) {
 80027e2:	7c83      	ldrb	r3, [r0, #18]
uint32_t LoRa_contact_data::init_exchange_wait_confirmation(Stage_control& use_stage) {
 80027e4:	4604      	mov	r4, r0
    switch (module_state_) {
 80027e6:	2b01      	cmp	r3, #1
uint32_t LoRa_contact_data::init_exchange_wait_confirmation(Stage_control& use_stage) {
 80027e8:	b085      	sub	sp, #20
    switch (module_state_) {
 80027ea:	d014      	beq.n	8002816 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x36>
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d002      	beq.n	80027f6 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x16>
 80027f0:	207a      	movs	r0, #122	; 0x7a
}
 80027f2:	b005      	add	sp, #20
 80027f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(!packet_dont_correct()) {
 80027f6:	2200      	movs	r2, #0
 80027f8:	4611      	mov	r1, r2
 80027fa:	f7ff fb57 	bl	8001eac <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 80027fe:	4605      	mov	r5, r0
 8002800:	bbb0      	cbnz	r0, 8002870 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x90>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.I_amt_pack) {
 8002802:	f004 fe55 	bl	80074b0 <HAL_GetTick>
 8002806:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 800280a:	1ac0      	subs	r0, r0, r3
 800280c:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 8002810:	4298      	cmp	r0, r3
 8002812:	d204      	bcs.n	800281e <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x3e>
                set_LoRa_mode_receive();
 8002814:	4620      	mov	r0, r4
 8002816:	f7ff fc6f 	bl	80020f8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 800281a:	2000      	movs	r0, #0
 800281c:	e7e9      	b.n	80027f2 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x12>
                if(send_packet_amt_ < packet_constraints_.I_amt_pack) {
 800281e:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 8002822:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
 8002826:	429a      	cmp	r2, r3
 8002828:	d904      	bls.n	8002834 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x54>
                    ++send_packet_amt_;
 800282a:	3301      	adds	r3, #1
 800282c:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    set_LoRa_mode_send();
 8002830:	2100      	movs	r1, #0
 8002832:	e04a      	b.n	80028ca <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0xea>
                    if(!use_past_stage)
 8002834:	7f61      	ldrb	r1, [r4, #29]
                    send_packet_amt_ = 0;
 8002836:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                    if(!use_past_stage)
 800283a:	f104 0218 	add.w	r2, r4, #24
 800283e:	f104 0313 	add.w	r3, r4, #19
 8002842:	b979      	cbnz	r1, 8002864 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x84>
                        past_stage_ = current_stage_;
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	61a0      	str	r0, [r4, #24]
 8002848:	791b      	ldrb	r3, [r3, #4]
 800284a:	7113      	strb	r3, [r2, #4]
                    current_stage_.stade_communication = SC_DOWNTIME;
 800284c:	2300      	movs	r3, #0
                    create_disconnet_packet(true);
 800284e:	2101      	movs	r1, #1
                    current_stage_.stade_communication = SC_DOWNTIME;
 8002850:	7523      	strb	r3, [r4, #20]
                    create_disconnet_packet(true);
 8002852:	4620      	mov	r0, r4
 8002854:	f7ff fafe 	bl	8001e54 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 8002858:	4620      	mov	r0, r4
 800285a:	2101      	movs	r1, #1
 800285c:	f7ff fcb4 	bl	80021c8 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    error = 123;
 8002860:	207b      	movs	r0, #123	; 0x7b
 8002862:	e7c6      	b.n	80027f2 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x12>
                        current_stage_ = past_stage_;
 8002864:	69a0      	ldr	r0, [r4, #24]
 8002866:	7912      	ldrb	r2, [r2, #4]
 8002868:	f8c4 0013 	str.w	r0, [r4, #19]
 800286c:	711a      	strb	r2, [r3, #4]
 800286e:	e7ed      	b.n	800284c <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x6c>
            if(check_packet_type(Packet_Type::CONNECTION, {0x04})) {
 8002870:	2604      	movs	r6, #4
 8002872:	f10d 070f 	add.w	r7, sp, #15
 8002876:	463a      	mov	r2, r7
 8002878:	2100      	movs	r1, #0
 800287a:	4620      	mov	r0, r4
 800287c:	f88d 600f 	strb.w	r6, [sp, #15]
 8002880:	f7ff fb5c 	bl	8001f3c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002884:	2800      	cmp	r0, #0
 8002886:	d03a      	beq.n	80028fe <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x11e>
                send_packet_amt_ = 0;
 8002888:	2500      	movs	r5, #0
                uint8_t com = 0x04;
 800288a:	f88d 600e 	strb.w	r6, [sp, #14]
                uint8_t len = 1;
 800288e:	2601      	movs	r6, #1
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 8002890:	ab03      	add	r3, sp, #12
 8002892:	f10d 020e 	add.w	r2, sp, #14
 8002896:	481f      	ldr	r0, [pc, #124]	; (8002914 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x134>)
                send_packet_amt_ = 0;
 8002898:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 800289c:	9700      	str	r7, [sp, #0]
 800289e:	f104 0120 	add.w	r1, r4, #32
                uint8_t data[1] = {0};
 80028a2:	f88d 500c 	strb.w	r5, [sp, #12]
                uint8_t len = 1;
 80028a6:	f88d 600f 	strb.w	r6, [sp, #15]
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 80028aa:	f003 f90d 	bl	8005ac8 <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
                if(data[0] == amt_packet_) {
 80028ae:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80028b2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d10b      	bne.n	80028d2 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0xf2>
                    contact_complete();
 80028ba:	4620      	mov	r0, r4
 80028bc:	f7ff fd14 	bl	80022e8 <_ZN17LoRa_contact_data16contact_completeEv>
                    create_disconnet_packet();
 80028c0:	4629      	mov	r1, r5
 80028c2:	4620      	mov	r0, r4
 80028c4:	f7ff fac6 	bl	8001e54 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 80028c8:	4631      	mov	r1, r6
                    set_LoRa_mode_send();
 80028ca:	4620      	mov	r0, r4
 80028cc:	f7ff fc7c 	bl	80021c8 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 80028d0:	e7a3      	b.n	800281a <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x3a>
                    if(!use_past_stage)
 80028d2:	7f61      	ldrb	r1, [r4, #29]
 80028d4:	f104 0218 	add.w	r2, r4, #24
 80028d8:	f104 0313 	add.w	r3, r4, #19
 80028dc:	b949      	cbnz	r1, 80028f2 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x112>
                        past_stage_ = current_stage_;
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	61a0      	str	r0, [r4, #24]
 80028e2:	791b      	ldrb	r3, [r3, #4]
 80028e4:	7113      	strb	r3, [r2, #4]
                    current_stage_.exchange = E_WAITING_NUMBERS;
 80028e6:	2302      	movs	r3, #2
                    create_number_packet();
 80028e8:	4620      	mov	r0, r4
                    current_stage_.exchange = E_WAITING_NUMBERS;
 80028ea:	75a3      	strb	r3, [r4, #22]
                    create_number_packet();
 80028ec:	f7ff fa3e 	bl	8001d6c <_ZN17LoRa_contact_data20create_number_packetEv>
 80028f0:	e79e      	b.n	8002830 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x50>
                        current_stage_ = past_stage_;
 80028f2:	69a0      	ldr	r0, [r4, #24]
 80028f4:	7912      	ldrb	r2, [r2, #4]
 80028f6:	f8c4 0013 	str.w	r0, [r4, #19]
 80028fa:	711a      	strb	r2, [r3, #4]
 80028fc:	e7f3      	b.n	80028e6 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x106>
                if(!use_past_stage) {
 80028fe:	7f65      	ldrb	r5, [r4, #29]
 8002900:	2d00      	cmp	r5, #0
 8002902:	d187      	bne.n	8002814 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x34>
                    use_past_stage = true;
 8002904:	2301      	movs	r3, #1
                    error = work_contact_system();
 8002906:	4620      	mov	r0, r4
                    use_past_stage = true;
 8002908:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 800290a:	f7ff fda9 	bl	8002460 <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 800290e:	7765      	strb	r5, [r4, #29]
    return error;
 8002910:	e76f      	b.n	80027f2 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x12>
 8002912:	bf00      	nop
 8002914:	200023b4 	.word	0x200023b4

08002918 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control>:
uint32_t LoRa_contact_data::init_exchange_wait_numbers(Stage_control& use_stage) {
 8002918:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch (module_state_) {
 800291a:	7c83      	ldrb	r3, [r0, #18]
uint32_t LoRa_contact_data::init_exchange_wait_numbers(Stage_control& use_stage) {
 800291c:	4604      	mov	r4, r0
    switch (module_state_) {
 800291e:	2b01      	cmp	r3, #1
uint32_t LoRa_contact_data::init_exchange_wait_numbers(Stage_control& use_stage) {
 8002920:	b08d      	sub	sp, #52	; 0x34
    switch (module_state_) {
 8002922:	d014      	beq.n	800294e <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x36>
 8002924:	2b02      	cmp	r3, #2
 8002926:	d002      	beq.n	800292e <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x16>
 8002928:	207c      	movs	r0, #124	; 0x7c
}
 800292a:	b00d      	add	sp, #52	; 0x34
 800292c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(!packet_dont_correct()) {
 800292e:	2200      	movs	r2, #0
 8002930:	4611      	mov	r1, r2
 8002932:	f7ff fabb 	bl	8001eac <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002936:	4605      	mov	r5, r0
 8002938:	bbc8      	cbnz	r0, 80029ae <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x96>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.I_num_pack) {
 800293a:	f004 fdb9 	bl	80074b0 <HAL_GetTick>
 800293e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002942:	1ac0      	subs	r0, r0, r3
 8002944:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8002948:	4298      	cmp	r0, r3
 800294a:	d204      	bcs.n	8002956 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x3e>
                set_LoRa_mode_receive();
 800294c:	4620      	mov	r0, r4
 800294e:	f7ff fbd3 	bl	80020f8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002952:	2000      	movs	r0, #0
 8002954:	e7e9      	b.n	800292a <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x12>
                if(send_packet_amt_ < packet_constraints_.I_num_pack) {
 8002956:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 800295a:	f894 2167 	ldrb.w	r2, [r4, #359]	; 0x167
 800295e:	429a      	cmp	r2, r3
 8002960:	d907      	bls.n	8002972 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x5a>
                    set_LoRa_mode_send();
 8002962:	4629      	mov	r1, r5
                    ++send_packet_amt_;
 8002964:	3301      	adds	r3, #1
 8002966:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    set_LoRa_mode_send(true);
 800296a:	4620      	mov	r0, r4
 800296c:	f7ff fc2c 	bl	80021c8 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 8002970:	e7ef      	b.n	8002952 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x3a>
                    if(!use_past_stage)
 8002972:	7f61      	ldrb	r1, [r4, #29]
                    send_packet_amt_ = 0;
 8002974:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                    if(!use_past_stage)
 8002978:	f104 0218 	add.w	r2, r4, #24
 800297c:	f104 0313 	add.w	r3, r4, #19
 8002980:	b979      	cbnz	r1, 80029a2 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x8a>
                        past_stage_ = current_stage_;
 8002982:	6818      	ldr	r0, [r3, #0]
 8002984:	61a0      	str	r0, [r4, #24]
 8002986:	791b      	ldrb	r3, [r3, #4]
 8002988:	7113      	strb	r3, [r2, #4]
                    current_stage_.stade_communication = SC_DOWNTIME;
 800298a:	2300      	movs	r3, #0
                    create_disconnet_packet(true);
 800298c:	2101      	movs	r1, #1
                    current_stage_.stade_communication = SC_DOWNTIME;
 800298e:	7523      	strb	r3, [r4, #20]
                    create_disconnet_packet(true);
 8002990:	4620      	mov	r0, r4
 8002992:	f7ff fa5f 	bl	8001e54 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 8002996:	4620      	mov	r0, r4
 8002998:	2101      	movs	r1, #1
 800299a:	f7ff fc15 	bl	80021c8 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    error = 125;
 800299e:	207d      	movs	r0, #125	; 0x7d
 80029a0:	e7c3      	b.n	800292a <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x12>
                        current_stage_ = past_stage_;
 80029a2:	69a0      	ldr	r0, [r4, #24]
 80029a4:	7912      	ldrb	r2, [r2, #4]
 80029a6:	f8c4 0013 	str.w	r0, [r4, #19]
 80029aa:	711a      	strb	r2, [r3, #4]
 80029ac:	e7ed      	b.n	800298a <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x72>
            if(check_packet_type(Packet_Type::CONNECTION, {0x06})) {
 80029ae:	2306      	movs	r3, #6
 80029b0:	ae04      	add	r6, sp, #16
 80029b2:	4632      	mov	r2, r6
 80029b4:	2100      	movs	r1, #0
 80029b6:	4620      	mov	r0, r4
 80029b8:	f88d 3010 	strb.w	r3, [sp, #16]
 80029bc:	f7ff fabe 	bl	8001f3c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 80029c0:	7f65      	ldrb	r5, [r4, #29]
 80029c2:	2800      	cmp	r0, #0
 80029c4:	d064      	beq.n	8002a90 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x178>
                if(!use_past_stage)
 80029c6:	f104 0218 	add.w	r2, r4, #24
 80029ca:	f104 0313 	add.w	r3, r4, #19
 80029ce:	2d00      	cmp	r5, #0
 80029d0:	d13b      	bne.n	8002a4a <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x132>
                    past_stage_ = current_stage_;
 80029d2:	6818      	ldr	r0, [r3, #0]
 80029d4:	61a0      	str	r0, [r4, #24]
 80029d6:	791b      	ldrb	r3, [r3, #4]
 80029d8:	7113      	strb	r3, [r2, #4]
                current_stage_.exchange = E_BOARDCAST;
 80029da:	2300      	movs	r3, #0
                packet_connection.get_size_by_packet(last_receive_packet_, size);
 80029dc:	f104 0720 	add.w	r7, r4, #32
 80029e0:	4639      	mov	r1, r7
 80029e2:	4830      	ldr	r0, [pc, #192]	; (8002aa4 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x18c>)
                current_stage_.exchange = E_BOARDCAST;
 80029e4:	75a3      	strb	r3, [r4, #22]
                send_packet_amt_ = 0;
 80029e6:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                packet_connection.get_size_by_packet(last_receive_packet_, size);
 80029ea:	f10d 020d 	add.w	r2, sp, #13
                uint8_t size = 0;
 80029ee:	f88d 300d 	strb.w	r3, [sp, #13]
                packet_connection.get_size_by_packet(last_receive_packet_, size);
 80029f2:	f003 f87d 	bl	8005af0 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh>
                if(size != 0)
 80029f6:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80029fa:	b108      	cbz	r0, 8002a00 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0xe8>
                    data = new uint8_t[size];
 80029fc:	f007 fcad 	bl	800a35a <_Znaj>
                uint8_t com = 0xFF;
 8002a00:	23ff      	movs	r3, #255	; 0xff
 8002a02:	f88d 300e 	strb.w	r3, [sp, #14]
                uint8_t len = 0xFF;
 8002a06:	f88d 300f 	strb.w	r3, [sp, #15]
                packet_connection.get_packet_data(last_receive_packet_, &com, data, &len);
 8002a0a:	f10d 030f 	add.w	r3, sp, #15
 8002a0e:	9300      	str	r3, [sp, #0]
                uint8_t *data = nullptr;
 8002a10:	4605      	mov	r5, r0
                packet_connection.get_packet_data(last_receive_packet_, &com, data, &len);
 8002a12:	4603      	mov	r3, r0
 8002a14:	4639      	mov	r1, r7
 8002a16:	4823      	ldr	r0, [pc, #140]	; (8002aa4 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x18c>)
 8002a18:	f10d 020e 	add.w	r2, sp, #14
 8002a1c:	f003 f854 	bl	8005ac8 <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
                if (com != 0x06) {
 8002a20:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002a24:	2b06      	cmp	r3, #6
 8002a26:	d116      	bne.n	8002a56 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x13e>
					for(int i = 0; i < len/2; ++i) {
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f89d 200f 	ldrb.w	r2, [sp, #15]
						pack_num[pack_num_len++] = (((uint16_t)data[i*2]) << 8) | (data[i*2+1]);
 8002a2e:	1c6f      	adds	r7, r5, #1
					for(int i = 0; i < len/2; ++i) {
 8002a30:	0852      	lsrs	r2, r2, #1
 8002a32:	429a      	cmp	r2, r3
 8002a34:	dd1f      	ble.n	8002a76 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x15e>
						pack_num[pack_num_len++] = (((uint16_t)data[i*2]) << 8) | (data[i*2+1]);
 8002a36:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
 8002a3a:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
 8002a3e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002a42:	f826 1013 	strh.w	r1, [r6, r3, lsl #1]
					for(int i = 0; i < len/2; ++i) {
 8002a46:	3301      	adds	r3, #1
 8002a48:	e7f3      	b.n	8002a32 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x11a>
                    current_stage_ = past_stage_;
 8002a4a:	69a0      	ldr	r0, [r4, #24]
 8002a4c:	7912      	ldrb	r2, [r2, #4]
 8002a4e:	f8c4 0013 	str.w	r0, [r4, #19]
 8002a52:	711a      	strb	r2, [r3, #4]
 8002a54:	e7c1      	b.n	80029da <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0xc2>
                    if(data != nullptr)
 8002a56:	b115      	cbz	r5, 8002a5e <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x146>
                        delete[] data;
 8002a58:	4628      	mov	r0, r5
 8002a5a:	f007 fc6b 	bl	800a334 <_ZdaPv>
                    current_stage_.stade_communication = SC_DOWNTIME;
 8002a5e:	2300      	movs	r3, #0
                    create_disconnet_packet(true);
 8002a60:	2101      	movs	r1, #1
                    current_stage_.stade_communication = SC_DOWNTIME;
 8002a62:	7523      	strb	r3, [r4, #20]
                    create_disconnet_packet(true);
 8002a64:	4620      	mov	r0, r4
 8002a66:	f7ff f9f5 	bl	8001e54 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	f7ff fbab 	bl	80021c8 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    error = 126;
 8002a72:	207e      	movs	r0, #126	; 0x7e
 8002a74:	e759      	b.n	800292a <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x12>
                    pop_num_packet(pack_num, pack_num_len);
 8002a76:	4631      	mov	r1, r6
 8002a78:	4620      	mov	r0, r4
 8002a7a:	f7ff fa9b 	bl	8001fb4 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh>
                    if(data != nullptr)
 8002a7e:	b115      	cbz	r5, 8002a86 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x16e>
                        delete[] data;
 8002a80:	4628      	mov	r0, r5
 8002a82:	f007 fc57 	bl	800a334 <_ZdaPv>
                    create_data_packet();
 8002a86:	4620      	mov	r0, r4
 8002a88:	f7ff f918 	bl	8001cbc <_ZN17LoRa_contact_data18create_data_packetEv>
                    set_LoRa_mode_send(true);
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	e76c      	b.n	800296a <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x52>
                if(!use_past_stage) {
 8002a90:	2d00      	cmp	r5, #0
 8002a92:	f47f af5b 	bne.w	800294c <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x34>
                    use_past_stage = true;
 8002a96:	2301      	movs	r3, #1
                    error = work_contact_system();
 8002a98:	4620      	mov	r0, r4
                    use_past_stage = true;
 8002a9a:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 8002a9c:	f7ff fce0 	bl	8002460 <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8002aa0:	7765      	strb	r5, [r4, #29]
    return error;
 8002aa2:	e742      	b.n	800292a <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x12>
 8002aa4:	200023b4 	.word	0x200023b4

08002aa8 <_ZN17LoRa_contact_data13init_exchangeER13Stage_control>:
    switch (use_stage.exchange) {
 8002aa8:	78cb      	ldrb	r3, [r1, #3]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d004      	beq.n	8002ab8 <_ZN17LoRa_contact_data13init_exchangeER13Stage_control+0x10>
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d004      	beq.n	8002abc <_ZN17LoRa_contact_data13init_exchangeER13Stage_control+0x14>
 8002ab2:	b92b      	cbnz	r3, 8002ac0 <_ZN17LoRa_contact_data13init_exchangeER13Stage_control+0x18>
        error = init_exchange_boardcast(use_stage);
 8002ab4:	f7ff bbb8 	b.w	8002228 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control>
        error = init_exchange_wait_confirmation(use_stage);
 8002ab8:	f7ff be92 	b.w	80027e0 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control>
        error = init_exchange_wait_numbers(use_stage);
 8002abc:	f7ff bf2c 	b.w	8002918 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control>
}
 8002ac0:	2078      	movs	r0, #120	; 0x78
 8002ac2:	4770      	bx	lr

08002ac4 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control>:
uint32_t LoRa_contact_data::recip_connection_wait_request(Stage_control& use_stage) {
 8002ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    switch (module_state_) {
 8002ac8:	7c83      	ldrb	r3, [r0, #18]
uint32_t LoRa_contact_data::recip_connection_wait_request(Stage_control& use_stage) {
 8002aca:	4604      	mov	r4, r0
    switch (module_state_) {
 8002acc:	2b01      	cmp	r3, #1
uint32_t LoRa_contact_data::recip_connection_wait_request(Stage_control& use_stage) {
 8002ace:	b085      	sub	sp, #20
    switch (module_state_) {
 8002ad0:	d01f      	beq.n	8002b12 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x4e>
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d003      	beq.n	8002ade <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1a>
 8002ad6:	20d4      	movs	r0, #212	; 0xd4
}
 8002ad8:	b005      	add	sp, #20
 8002ada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(!packet_dont_correct(true)) {
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	f7ff f9e3 	bl	8001eac <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002ae6:	2800      	cmp	r0, #0
 8002ae8:	d13b      	bne.n	8002b62 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x9e>
            if(!packet_dont_correct(true, true)) {
 8002aea:	2201      	movs	r2, #1
 8002aec:	4620      	mov	r0, r4
 8002aee:	4611      	mov	r1, r2
 8002af0:	f7ff f9dc 	bl	8001eac <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002af4:	4605      	mov	r5, r0
 8002af6:	b958      	cbnz	r0, 8002b10 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x4c>
                if (send_wait_reset_packet_)
 8002af8:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
 8002afc:	b143      	cbz	r3, 8002b10 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x4c>
                    if(HAL_GetTick() - time_last_packet_ < time_constraints_.R_connect) {
 8002afe:	f004 fcd7 	bl	80074b0 <HAL_GetTick>
 8002b02:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002b06:	1ac0      	subs	r0, r0, r3
 8002b08:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8002b0c:	4298      	cmp	r0, r3
 8002b0e:	d204      	bcs.n	8002b1a <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x56>
                        set_LoRa_mode_receive();
 8002b10:	4620      	mov	r0, r4
 8002b12:	f7ff faf1 	bl	80020f8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002b16:	2000      	movs	r0, #0
 8002b18:	e7de      	b.n	8002ad8 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x14>
                        if(send_packet_amt_ < packet_constraints_.R_wait_connect) {
 8002b1a:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 8002b1e:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d907      	bls.n	8002b36 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x72>
                            ++send_packet_amt_;
 8002b26:	3301      	adds	r3, #1
 8002b28:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    set_LoRa_mode_send();
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f7ff fb4a 	bl	80021c8 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 8002b34:	e7ef      	b.n	8002b16 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x52>
                            if(!use_past_stage)
 8002b36:	7f61      	ldrb	r1, [r4, #29]
                            send_packet_amt_ = 0;
 8002b38:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                            if(!use_past_stage)
 8002b3c:	f104 0218 	add.w	r2, r4, #24
 8002b40:	f104 0313 	add.w	r3, r4, #19
 8002b44:	b939      	cbnz	r1, 8002b56 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x92>
                                past_stage_ = current_stage_;
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	61a0      	str	r0, [r4, #24]
 8002b4a:	791b      	ldrb	r3, [r3, #4]
 8002b4c:	7113      	strb	r3, [r2, #4]
                            current_stage_.connection = C_QUEUE_CHECK;
 8002b4e:	2300      	movs	r3, #0
                            error = 213;
 8002b50:	20d5      	movs	r0, #213	; 0xd5
                            current_stage_.connection = C_QUEUE_CHECK;
 8002b52:	7563      	strb	r3, [r4, #21]
 8002b54:	e7c0      	b.n	8002ad8 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x14>
                                current_stage_ = past_stage_;
 8002b56:	69a0      	ldr	r0, [r4, #24]
 8002b58:	7912      	ldrb	r2, [r2, #4]
 8002b5a:	f8c4 0013 	str.w	r0, [r4, #19]
 8002b5e:	711a      	strb	r2, [r3, #4]
 8002b60:	e7f5      	b.n	8002b4e <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x8a>
            if(check_packet_type(Packet_Type::CONNECTION, {0x00})) {
 8002b62:	2500      	movs	r5, #0
 8002b64:	f10d 060f 	add.w	r6, sp, #15
 8002b68:	4632      	mov	r2, r6
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f88d 500f 	strb.w	r5, [sp, #15]
 8002b72:	f7ff f9e3 	bl	8001f3c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002b76:	2800      	cmp	r0, #0
 8002b78:	d059      	beq.n	8002c2e <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x16a>
                uint8_t len = 1;
 8002b7a:	f04f 0801 	mov.w	r8, #1
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 8002b7e:	f104 0920 	add.w	r9, r4, #32
 8002b82:	9600      	str	r6, [sp, #0]
 8002b84:	ab03      	add	r3, sp, #12
 8002b86:	4649      	mov	r1, r9
 8002b88:	482e      	ldr	r0, [pc, #184]	; (8002c44 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x180>)
                send_packet_amt_ = 0;
 8002b8a:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                send_wait_reset_packet_ = false;
 8002b8e:	f884 5139 	strb.w	r5, [r4, #313]	; 0x139
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 8002b92:	f10d 020e 	add.w	r2, sp, #14
                uint8_t data[1] = {0};
 8002b96:	f88d 500c 	strb.w	r5, [sp, #12]
                uint8_t com = 0x00;
 8002b9a:	f88d 500e 	strb.w	r5, [sp, #14]
                uint8_t len = 1;
 8002b9e:	f88d 800f 	strb.w	r8, [sp, #15]
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 8002ba2:	f002 ff91 	bl	8005ac8 <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
                if(data[0] == 0xFF) {
 8002ba6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002baa:	f104 0718 	add.w	r7, r4, #24
 8002bae:	2bff      	cmp	r3, #255	; 0xff
 8002bb0:	f104 0613 	add.w	r6, r4, #19
 8002bb4:	d121      	bne.n	8002bfa <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x136>
                    connect_adr_ = packet_analyzer.get_sour_adr(last_receive_packet_); // (?) -----
 8002bb6:	4649      	mov	r1, r9
 8002bb8:	4823      	ldr	r0, [pc, #140]	; (8002c48 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x184>)
					start_connect_ = true;
 8002bba:	f884 8137 	strb.w	r8, [r4, #311]	; 0x137
                    connect_adr_ = packet_analyzer.get_sour_adr(last_receive_packet_); // (?) -----
 8002bbe:	f002 fd9b 	bl	80056f8 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>
                    create_connect_packet(send_packet_len, true);
 8002bc2:	4642      	mov	r2, r8
 8002bc4:	f894 1134 	ldrb.w	r1, [r4, #308]	; 0x134
                    connect_adr_ = packet_analyzer.get_sour_adr(last_receive_packet_); // (?) -----
 8002bc8:	60a0      	str	r0, [r4, #8]
                    create_connect_packet(send_packet_len, true);
 8002bca:	4620      	mov	r0, r4
 8002bcc:	f7fe fff8 	bl	8001bc0 <_ZN17LoRa_contact_data21create_connect_packetEhb>
                    set_LoRa_mode_send();
 8002bd0:	4629      	mov	r1, r5
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	f7ff faf8 	bl	80021c8 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    if(!use_past_stage)
 8002bd8:	7f63      	ldrb	r3, [r4, #29]
 8002bda:	b943      	cbnz	r3, 8002bee <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x12a>
                        past_stage_ = current_stage_;
 8002bdc:	6830      	ldr	r0, [r6, #0]
 8002bde:	61a0      	str	r0, [r4, #24]
 8002be0:	7933      	ldrb	r3, [r6, #4]
 8002be2:	713b      	strb	r3, [r7, #4]
                    current_stage_.type_communication = TC_INITIATOR;
 8002be4:	2300      	movs	r3, #0
 8002be6:	74e3      	strb	r3, [r4, #19]
                    current_stage_.stade_communication = SC_CONNECTION;
 8002be8:	2301      	movs	r3, #1
 8002bea:	82a3      	strh	r3, [r4, #20]
 8002bec:	e793      	b.n	8002b16 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x52>
                        current_stage_ = past_stage_;
 8002bee:	69a0      	ldr	r0, [r4, #24]
 8002bf0:	793b      	ldrb	r3, [r7, #4]
 8002bf2:	f8c4 0013 	str.w	r0, [r4, #19]
 8002bf6:	7133      	strb	r3, [r6, #4]
 8002bf8:	e7f4      	b.n	8002be4 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x120>
                    if(!use_past_stage)
 8002bfa:	7f62      	ldrb	r2, [r4, #29]
 8002bfc:	b98a      	cbnz	r2, 8002c22 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x15e>
                        past_stage_ = current_stage_;
 8002bfe:	6830      	ldr	r0, [r6, #0]
 8002c00:	61a0      	str	r0, [r4, #24]
 8002c02:	7932      	ldrb	r2, [r6, #4]
 8002c04:	713a      	strb	r2, [r7, #4]
                    current_stage_.exchange = E_EXPECTATION;
 8002c06:	2500      	movs	r5, #0
                    current_stage_.stade_communication = SC_EXCHANGE;
 8002c08:	2202      	movs	r2, #2
                    create_connect_packet();
 8002c0a:	4629      	mov	r1, r5
                    current_stage_.stade_communication = SC_EXCHANGE;
 8002c0c:	7522      	strb	r2, [r4, #20]
                    create_connect_packet();
 8002c0e:	4620      	mov	r0, r4
 8002c10:	462a      	mov	r2, r5
                    current_stage_.exchange = E_EXPECTATION;
 8002c12:	75a5      	strb	r5, [r4, #22]
                    expected_amt_packet_ = data[0];
 8002c14:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
                    amt_packet_ = 0;
 8002c18:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
                    create_connect_packet();
 8002c1c:	f7fe ffd0 	bl	8001bc0 <_ZN17LoRa_contact_data21create_connect_packetEhb>
 8002c20:	e784      	b.n	8002b2c <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x68>
                        current_stage_ = past_stage_;
 8002c22:	69a0      	ldr	r0, [r4, #24]
 8002c24:	793a      	ldrb	r2, [r7, #4]
 8002c26:	f8c4 0013 	str.w	r0, [r4, #19]
 8002c2a:	7132      	strb	r2, [r6, #4]
 8002c2c:	e7eb      	b.n	8002c06 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x142>
                if(!use_past_stage) {
 8002c2e:	7f65      	ldrb	r5, [r4, #29]
 8002c30:	2d00      	cmp	r5, #0
 8002c32:	f47f af6d 	bne.w	8002b10 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x4c>
                    use_past_stage = true;
 8002c36:	2301      	movs	r3, #1
                    error = work_contact_system();
 8002c38:	4620      	mov	r0, r4
                    use_past_stage = true;
 8002c3a:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 8002c3c:	f7ff fc10 	bl	8002460 <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8002c40:	7765      	strb	r5, [r4, #29]
    return error;
 8002c42:	e749      	b.n	8002ad8 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x14>
 8002c44:	200023b4 	.word	0x200023b4
 8002c48:	20002398 	.word	0x20002398

08002c4c <_ZN17LoRa_contact_data16recip_connectionER13Stage_control>:
    switch (use_stage.connection) {
 8002c4c:	788b      	ldrb	r3, [r1, #2]
 8002c4e:	b11b      	cbz	r3, 8002c58 <_ZN17LoRa_contact_data16recip_connectionER13Stage_control+0xc>
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d003      	beq.n	8002c5c <_ZN17LoRa_contact_data16recip_connectionER13Stage_control+0x10>
}
 8002c54:	20d2      	movs	r0, #210	; 0xd2
 8002c56:	4770      	bx	lr
        error = recip_connection_queue_check(use_stage);
 8002c58:	f7ff ba32 	b.w	80020c0 <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control>
        error = recip_connection_wait_request(use_stage);
 8002c5c:	f7ff bf32 	b.w	8002ac4 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control>

08002c60 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control>:
uint32_t LoRa_contact_data::recip_exchange_expect(Stage_control& use_stage) {
 8002c60:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (module_state_) {
 8002c62:	7c85      	ldrb	r5, [r0, #18]
uint32_t LoRa_contact_data::recip_exchange_expect(Stage_control& use_stage) {
 8002c64:	4604      	mov	r4, r0
    switch (module_state_) {
 8002c66:	2d01      	cmp	r5, #1
 8002c68:	d013      	beq.n	8002c92 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x32>
 8002c6a:	2d02      	cmp	r5, #2
 8002c6c:	d002      	beq.n	8002c74 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x14>
 8002c6e:	20dd      	movs	r0, #221	; 0xdd
}
 8002c70:	b002      	add	sp, #8
 8002c72:	bd70      	pop	{r4, r5, r6, pc}
        if(!packet_dont_correct()) {
 8002c74:	2200      	movs	r2, #0
 8002c76:	4611      	mov	r1, r2
 8002c78:	f7ff f918 	bl	8001eac <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002c7c:	bb38      	cbnz	r0, 8002cce <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x6e>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.R_data_pack) {
 8002c7e:	f004 fc17 	bl	80074b0 <HAL_GetTick>
 8002c82:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002c86:	1ac0      	subs	r0, r0, r3
 8002c88:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
 8002c8c:	4298      	cmp	r0, r3
 8002c8e:	d203      	bcs.n	8002c98 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x38>
                set_LoRa_mode_receive();
 8002c90:	4620      	mov	r0, r4
 8002c92:	f7ff fa31 	bl	80020f8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
 8002c96:	e037      	b.n	8002d08 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xa8>
                if(!use_past_stage)
 8002c98:	7f61      	ldrb	r1, [r4, #29]
 8002c9a:	f104 0218 	add.w	r2, r4, #24
 8002c9e:	f104 0313 	add.w	r3, r4, #19
 8002ca2:	b971      	cbnz	r1, 8002cc2 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x62>
                    past_stage_ = current_stage_;
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	61a0      	str	r0, [r4, #24]
 8002ca8:	791b      	ldrb	r3, [r3, #4]
 8002caa:	7113      	strb	r3, [r2, #4]
                current_stage_.stade_communication = SC_DOWNTIME;
 8002cac:	2500      	movs	r5, #0
                create_disconnet_packet(true);
 8002cae:	2101      	movs	r1, #1
 8002cb0:	4620      	mov	r0, r4
                current_stage_.stade_communication = SC_DOWNTIME;
 8002cb2:	7525      	strb	r5, [r4, #20]
                create_disconnet_packet(true);
 8002cb4:	f7ff f8ce 	bl	8001e54 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                set_LoRa_mode_send(true);
 8002cb8:	2101      	movs	r1, #1
                    set_LoRa_mode_send();
 8002cba:	4620      	mov	r0, r4
 8002cbc:	f7ff fa84 	bl	80021c8 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 8002cc0:	e022      	b.n	8002d08 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xa8>
                    current_stage_ = past_stage_;
 8002cc2:	69a0      	ldr	r0, [r4, #24]
 8002cc4:	7912      	ldrb	r2, [r2, #4]
 8002cc6:	f8c4 0013 	str.w	r0, [r4, #19]
 8002cca:	711a      	strb	r2, [r3, #4]
 8002ccc:	e7ee      	b.n	8002cac <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x4c>
            if(check_packet_type(Packet_Type::CONNECTION, {0x03})) {
 8002cce:	2603      	movs	r6, #3
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f10d 0207 	add.w	r2, sp, #7
 8002cd8:	f88d 6007 	strb.w	r6, [sp, #7]
 8002cdc:	f7ff f92e 	bl	8001f3c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002ce0:	b1d0      	cbz	r0, 8002d18 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xb8>
                create_amt_packet();
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	f7ff f80e 	bl	8001d04 <_ZN17LoRa_contact_data17create_amt_packetEv>
                set_LoRa_mode_send();
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4620      	mov	r0, r4
 8002cec:	f7ff fa6c 	bl	80021c8 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                if(!use_past_stage)
 8002cf0:	7f61      	ldrb	r1, [r4, #29]
 8002cf2:	f104 0218 	add.w	r2, r4, #24
 8002cf6:	f104 0313 	add.w	r3, r4, #19
 8002cfa:	b939      	cbnz	r1, 8002d0c <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xac>
                    past_stage_ = current_stage_;
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	61a0      	str	r0, [r4, #24]
 8002d00:	791b      	ldrb	r3, [r3, #4]
 8002d02:	7113      	strb	r3, [r2, #4]
                current_stage_.exchange = E_WAITING_REACTION;
 8002d04:	2301      	movs	r3, #1
 8002d06:	75a3      	strb	r3, [r4, #22]
    uint32_t error = 0;
 8002d08:	2000      	movs	r0, #0
 8002d0a:	e7b1      	b.n	8002c70 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x10>
                    current_stage_ = past_stage_;
 8002d0c:	69a0      	ldr	r0, [r4, #24]
 8002d0e:	7912      	ldrb	r2, [r2, #4]
 8002d10:	f8c4 0013 	str.w	r0, [r4, #19]
 8002d14:	711a      	strb	r2, [r3, #4]
 8002d16:	e7f5      	b.n	8002d04 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xa4>
            else if(check_packet_type(Packet_Type::DEVICE) ||
 8002d18:	4629      	mov	r1, r5
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	f7ff f900 	bl	8001f20 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type>
                    check_packet_type(Packet_Type::SENSOR) ||
 8002d20:	b190      	cbz	r0, 8002d48 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xe8>
                if(reciev_packet_len == CONTACT_DATA_MAX_PACKET) {
 8002d22:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8002d26:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
				reciev_packet_[reciev_packet_len++] = last_receive_packet_;
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8002d30:	f884 2135 	strb.w	r2, [r4, #309]	; 0x135
 8002d34:	f104 0120 	add.w	r1, r4, #32
 8002d38:	f001 fb9d 	bl	8004476 <_ZN11LoRa_packetaSERKS_>
                ++amt_packet_;
 8002d3c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8002d40:	3301      	adds	r3, #1
 8002d42:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8002d46:	e7a3      	b.n	8002c90 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x30>
                    check_packet_type(Packet_Type::SENSOR) ||
 8002d48:	2101      	movs	r1, #1
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	f7ff f8e8 	bl	8001f20 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type>
            else if(check_packet_type(Packet_Type::DEVICE) ||
 8002d50:	2800      	cmp	r0, #0
 8002d52:	d1e6      	bne.n	8002d22 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xc2>
                    check_packet_type(Packet_Type::SYSTEM)) {
 8002d54:	4631      	mov	r1, r6
 8002d56:	4620      	mov	r0, r4
 8002d58:	f7ff f8e2 	bl	8001f20 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type>
                    check_packet_type(Packet_Type::SENSOR) ||
 8002d5c:	2800      	cmp	r0, #0
 8002d5e:	d1e0      	bne.n	8002d22 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xc2>
                if(past_stage_.type_communication == TC_INITIATOR) {
 8002d60:	7e25      	ldrb	r5, [r4, #24]
 8002d62:	b90d      	cbnz	r5, 8002d68 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x108>
                    set_LoRa_mode_send();
 8002d64:	4629      	mov	r1, r5
 8002d66:	e7a8      	b.n	8002cba <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x5a>
                    if(!use_past_stage) {
 8002d68:	7f65      	ldrb	r5, [r4, #29]
 8002d6a:	2d00      	cmp	r5, #0
 8002d6c:	d190      	bne.n	8002c90 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x30>
                        use_past_stage = true;
 8002d6e:	2301      	movs	r3, #1
                        error = work_contact_system();
 8002d70:	4620      	mov	r0, r4
                        use_past_stage = true;
 8002d72:	7763      	strb	r3, [r4, #29]
                        error = work_contact_system();
 8002d74:	f7ff fb74 	bl	8002460 <_ZN17LoRa_contact_data19work_contact_systemEv>
                        use_past_stage = false;
 8002d78:	7765      	strb	r5, [r4, #29]
    return error;
 8002d7a:	e779      	b.n	8002c70 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x10>

08002d7c <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control>:
    switch (module_state_) {
 8002d7c:	7c83      	ldrb	r3, [r0, #18]
uint32_t LoRa_contact_data::recip_exchange_wait_reaction(Stage_control& use_stage) {
 8002d7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (module_state_) {
 8002d80:	2b01      	cmp	r3, #1
uint32_t LoRa_contact_data::recip_exchange_wait_reaction(Stage_control& use_stage) {
 8002d82:	4604      	mov	r4, r0
    switch (module_state_) {
 8002d84:	d015      	beq.n	8002db2 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x36>
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d002      	beq.n	8002d90 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x14>
 8002d8a:	20de      	movs	r0, #222	; 0xde
}
 8002d8c:	b003      	add	sp, #12
 8002d8e:	bd30      	pop	{r4, r5, pc}
        if(!packet_dont_correct()) {
 8002d90:	2200      	movs	r2, #0
 8002d92:	4611      	mov	r1, r2
 8002d94:	f7ff f88a 	bl	8001eac <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002d98:	4605      	mov	r5, r0
 8002d9a:	2800      	cmp	r0, #0
 8002d9c:	d13f      	bne.n	8002e1e <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0xa2>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.R_correct_pack) {
 8002d9e:	f004 fb87 	bl	80074b0 <HAL_GetTick>
 8002da2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002da6:	1ac0      	subs	r0, r0, r3
 8002da8:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
 8002dac:	4298      	cmp	r0, r3
 8002dae:	d204      	bcs.n	8002dba <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x3e>
                set_LoRa_mode_receive();
 8002db0:	4620      	mov	r0, r4
 8002db2:	f7ff f9a1 	bl	80020f8 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002db6:	2000      	movs	r0, #0
 8002db8:	e7e8      	b.n	8002d8c <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x10>
                if(send_packet_amt_ < packet_constraints_.R_correct_pack) {
 8002dba:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 8002dbe:	f894 2169 	ldrb.w	r2, [r4, #361]	; 0x169
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d907      	bls.n	8002dd6 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x5a>
                    ++send_packet_amt_;
 8002dc6:	3301      	adds	r3, #1
                    set_LoRa_mode_send();
 8002dc8:	4629      	mov	r1, r5
 8002dca:	4620      	mov	r0, r4
                    ++send_packet_amt_;
 8002dcc:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    set_LoRa_mode_send();
 8002dd0:	f7ff f9fa 	bl	80021c8 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 8002dd4:	e7ef      	b.n	8002db6 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x3a>
                    if(expected_amt_packet_ != reciev_packet_len)
 8002dd6:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8002dda:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d053      	beq.n	8002e8a <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x10e>
                        if(!use_past_stage)
 8002de2:	7f61      	ldrb	r1, [r4, #29]
                        send_packet_amt_ = 0;
 8002de4:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                        if(!use_past_stage)
 8002de8:	f104 0218 	add.w	r2, r4, #24
 8002dec:	f104 0313 	add.w	r3, r4, #19
 8002df0:	b979      	cbnz	r1, 8002e12 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x96>
                            past_stage_ = current_stage_;
 8002df2:	6818      	ldr	r0, [r3, #0]
 8002df4:	61a0      	str	r0, [r4, #24]
 8002df6:	791b      	ldrb	r3, [r3, #4]
 8002df8:	7113      	strb	r3, [r2, #4]
                        current_stage_.stade_communication = SC_DOWNTIME;
 8002dfa:	2300      	movs	r3, #0
                        create_disconnet_packet(true);
 8002dfc:	2101      	movs	r1, #1
                        current_stage_.stade_communication = SC_DOWNTIME;
 8002dfe:	7523      	strb	r3, [r4, #20]
                        create_disconnet_packet(true);
 8002e00:	4620      	mov	r0, r4
 8002e02:	f7ff f827 	bl	8001e54 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                        set_LoRa_mode_send(true);
 8002e06:	4620      	mov	r0, r4
 8002e08:	2101      	movs	r1, #1
 8002e0a:	f7ff f9dd 	bl	80021c8 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                        error = 223;
 8002e0e:	20df      	movs	r0, #223	; 0xdf
 8002e10:	e7bc      	b.n	8002d8c <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x10>
                            current_stage_ = past_stage_;
 8002e12:	69a0      	ldr	r0, [r4, #24]
 8002e14:	7912      	ldrb	r2, [r2, #4]
 8002e16:	f8c4 0013 	str.w	r0, [r4, #19]
 8002e1a:	711a      	strb	r2, [r3, #4]
 8002e1c:	e7ed      	b.n	8002dfa <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x7e>
            if(check_packet_type(Packet_Type::CONNECTION, {0x05})) {
 8002e1e:	2305      	movs	r3, #5
 8002e20:	2100      	movs	r1, #0
 8002e22:	4620      	mov	r0, r4
 8002e24:	f10d 0207 	add.w	r2, sp, #7
 8002e28:	f88d 3007 	strb.w	r3, [sp, #7]
 8002e2c:	f7ff f886 	bl	8001f3c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002e30:	4605      	mov	r5, r0
 8002e32:	b1f0      	cbz	r0, 8002e72 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0xf6>
                send_packet_amt_ = 0;
 8002e34:	2500      	movs	r5, #0
                create_number_packet();
 8002e36:	4620      	mov	r0, r4
                send_packet_amt_ = 0;
 8002e38:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                create_number_packet();
 8002e3c:	f7fe ff96 	bl	8001d6c <_ZN17LoRa_contact_data20create_number_packetEv>
                set_LoRa_mode_send();
 8002e40:	4629      	mov	r1, r5
 8002e42:	4620      	mov	r0, r4
 8002e44:	f7ff f9c0 	bl	80021c8 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                if(!use_past_stage)
 8002e48:	7f61      	ldrb	r1, [r4, #29]
                amt_packet_ = 0;
 8002e4a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
                if(!use_past_stage)
 8002e4e:	f104 0218 	add.w	r2, r4, #24
 8002e52:	f104 0313 	add.w	r3, r4, #19
 8002e56:	b931      	cbnz	r1, 8002e66 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0xea>
                    past_stage_ = current_stage_;
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	61a0      	str	r0, [r4, #24]
 8002e5c:	791b      	ldrb	r3, [r3, #4]
 8002e5e:	7113      	strb	r3, [r2, #4]
                current_stage_.exchange = E_EXPECTATION;
 8002e60:	2000      	movs	r0, #0
 8002e62:	75a0      	strb	r0, [r4, #22]
 8002e64:	e792      	b.n	8002d8c <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x10>
                    current_stage_ = past_stage_;
 8002e66:	69a0      	ldr	r0, [r4, #24]
 8002e68:	7912      	ldrb	r2, [r2, #4]
 8002e6a:	f8c4 0013 	str.w	r0, [r4, #19]
 8002e6e:	711a      	strb	r2, [r3, #4]
 8002e70:	e7f6      	b.n	8002e60 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0xe4>
            else if(check_packet_type(Packet_Type::CONNECTION, {0x08})) {
 8002e72:	2308      	movs	r3, #8
 8002e74:	4601      	mov	r1, r0
 8002e76:	f10d 0207 	add.w	r2, sp, #7
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	f88d 3007 	strb.w	r3, [sp, #7]
 8002e80:	f7ff f85c 	bl	8001f3c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002e84:	b140      	cbz	r0, 8002e98 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x11c>
                send_packet_amt_ = 0;
 8002e86:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                sort_num_packet();
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f7ff f8d4 	bl	8002038 <_ZN17LoRa_contact_data15sort_num_packetEv>
                contact_complete();
 8002e90:	4620      	mov	r0, r4
 8002e92:	f7ff fa29 	bl	80022e8 <_ZN17LoRa_contact_data16contact_completeEv>
 8002e96:	e78e      	b.n	8002db6 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x3a>
                if(!use_past_stage) {
 8002e98:	7f65      	ldrb	r5, [r4, #29]
 8002e9a:	2d00      	cmp	r5, #0
 8002e9c:	d188      	bne.n	8002db0 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x34>
                    use_past_stage = true;
 8002e9e:	2301      	movs	r3, #1
                    error = work_contact_system();
 8002ea0:	4620      	mov	r0, r4
                    use_past_stage = true;
 8002ea2:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 8002ea4:	f7ff fadc 	bl	8002460 <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8002ea8:	7765      	strb	r5, [r4, #29]
    return error;
 8002eaa:	e76f      	b.n	8002d8c <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x10>

08002eac <_ZN17LoRa_contact_data14recip_exchangeER13Stage_control>:
    switch (use_stage.exchange) {
 8002eac:	78cb      	ldrb	r3, [r1, #3]
 8002eae:	b11b      	cbz	r3, 8002eb8 <_ZN17LoRa_contact_data14recip_exchangeER13Stage_control+0xc>
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d003      	beq.n	8002ebc <_ZN17LoRa_contact_data14recip_exchangeER13Stage_control+0x10>
}
 8002eb4:	20dc      	movs	r0, #220	; 0xdc
 8002eb6:	4770      	bx	lr
        error = recip_exchange_expect(use_stage);
 8002eb8:	f7ff bed2 	b.w	8002c60 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control>
        error = recip_exchange_wait_reaction(use_stage);
 8002ebc:	f7ff bf5e 	b.w	8002d7c <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control>

08002ec0 <Get_control_module_info_from_main>:


extern "C" {

void Get_control_module_info_from_main(uint32_t* id_main) {
	control_module_adr = id_main[0];
 8002ec0:	6802      	ldr	r2, [r0, #0]
 8002ec2:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <Get_control_module_info_from_main+0x10>)
 8002ec4:	601a      	str	r2, [r3, #0]
	control_module_channel = id_main[1];
 8002ec6:	6842      	ldr	r2, [r0, #4]
 8002ec8:	4b02      	ldr	r3, [pc, #8]	; (8002ed4 <Get_control_module_info_from_main+0x14>)
 8002eca:	601a      	str	r2, [r3, #0]
}
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	20000334 	.word	0x20000334
 8002ed4:	20000338 	.word	0x20000338

08002ed8 <Send_registration_packet>:

void Send_registration_packet() {
	grow_sensor_interface.send_registration_packet(grow_sensor, contact_data);
 8002ed8:	4a02      	ldr	r2, [pc, #8]	; (8002ee4 <Send_registration_packet+0xc>)
 8002eda:	4903      	ldr	r1, [pc, #12]	; (8002ee8 <Send_registration_packet+0x10>)
 8002edc:	4803      	ldr	r0, [pc, #12]	; (8002eec <Send_registration_packet+0x14>)
 8002ede:	f7fe ba05 	b.w	80012ec <_ZN21Grow_sensor_interface24send_registration_packetERK11Grow_sensorR17LoRa_contact_data>
 8002ee2:	bf00      	nop
 8002ee4:	200001c4 	.word	0x200001c4
 8002ee8:	20000340 	.word	0x20000340
 8002eec:	200001bf 	.word	0x200001bf

08002ef0 <Init_lora_module>:
}

bool Init_lora_module(SPI_HandleTypeDef *spi) {
 8002ef0:	4601      	mov	r1, r0
	return contact_data.init_lora_module(spi);
 8002ef2:	4801      	ldr	r0, [pc, #4]	; (8002ef8 <Init_lora_module+0x8>)
 8002ef4:	f7fe bcf4 	b.w	80018e0 <_ZN17LoRa_contact_data16init_lora_moduleEP19__SPI_HandleTypeDef>
 8002ef8:	200001c4 	.word	0x200001c4

08002efc <Begin_lora_module>:
}
uint8_t Begin_lora_module(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8002efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002efe:	4604      	mov	r4, r0
 8002f00:	4615      	mov	r5, r2
 8002f02:	461e      	mov	r6, r3
	grow_sensor.set_system_id(MODULE_ID);
 8002f04:	4b18      	ldr	r3, [pc, #96]	; (8002f68 <Begin_lora_module+0x6c>)
uint8_t Begin_lora_module(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8002f06:	b087      	sub	sp, #28
	grow_sensor.set_system_id(MODULE_ID);
 8002f08:	6819      	ldr	r1, [r3, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	4817      	ldr	r0, [pc, #92]	; (8002f6c <Begin_lora_module+0x70>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
uint8_t Begin_lora_module(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8002f10:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	grow_sensor.set_system_id(MODULE_ID);
 8002f12:	f7fe f879 	bl	8001008 <_ZN11Grow_sensor13set_system_idESt5arrayIhLj12EE>
	contact_data.begin_lora_module(frequency, paboost, signal_power, SF, SBW, sync_word);
 8002f16:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8002f20:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8002f24:	462a      	mov	r2, r5
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	4811      	ldr	r0, [pc, #68]	; (8002f70 <Begin_lora_module+0x74>)
 8002f2a:	4633      	mov	r3, r6
 8002f2c:	f7fe fce4 	bl	80018f8 <_ZN17LoRa_contact_data17begin_lora_moduleEmbhhmh>
	if (control_module_adr == 0x00000000) {
 8002f30:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <Begin_lora_module+0x78>)
 8002f32:	4c11      	ldr	r4, [pc, #68]	; (8002f78 <Begin_lora_module+0x7c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	b92b      	cbnz	r3, 8002f44 <Begin_lora_module+0x48>
		current_mode = REGISTRATION_MODE;
 8002f38:	7023      	strb	r3, [r4, #0]
		Send_registration_packet();
 8002f3a:	f7ff ffcd 	bl	8002ed8 <Send_registration_packet>
		grow_sensor_interface.load_data(grow_sensor, contact_data, control_module_adr, control_module_channel);
		current_mode = WORKING_MODE;
		contact_data.wait_recipient(grow_sensor.get_address_control_module());
	}
	return 0;
}
 8002f3e:	2000      	movs	r0, #0
 8002f40:	b007      	add	sp, #28
 8002f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		grow_sensor_interface.load_data(grow_sensor, contact_data, control_module_adr, control_module_channel);
 8002f44:	4a0d      	ldr	r2, [pc, #52]	; (8002f7c <Begin_lora_module+0x80>)
 8002f46:	4909      	ldr	r1, [pc, #36]	; (8002f6c <Begin_lora_module+0x70>)
 8002f48:	6812      	ldr	r2, [r2, #0]
 8002f4a:	480d      	ldr	r0, [pc, #52]	; (8002f80 <Begin_lora_module+0x84>)
 8002f4c:	9200      	str	r2, [sp, #0]
 8002f4e:	4a08      	ldr	r2, [pc, #32]	; (8002f70 <Begin_lora_module+0x74>)
 8002f50:	f7fe f992 	bl	8001278 <_ZN21Grow_sensor_interface9load_dataER11Grow_sensorR17LoRa_contact_datamm>
		current_mode = WORKING_MODE;
 8002f54:	2301      	movs	r3, #1
		contact_data.wait_recipient(grow_sensor.get_address_control_module());
 8002f56:	4805      	ldr	r0, [pc, #20]	; (8002f6c <Begin_lora_module+0x70>)
		current_mode = WORKING_MODE;
 8002f58:	7023      	strb	r3, [r4, #0]
		contact_data.wait_recipient(grow_sensor.get_address_control_module());
 8002f5a:	f7fe f879 	bl	8001050 <_ZNK11Grow_sensor26get_address_control_moduleEv>
 8002f5e:	4601      	mov	r1, r0
 8002f60:	4803      	ldr	r0, [pc, #12]	; (8002f70 <Begin_lora_module+0x74>)
 8002f62:	f7ff f8df 	bl	8002124 <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>
 8002f66:	e7ea      	b.n	8002f3e <Begin_lora_module+0x42>
 8002f68:	0800a68f 	.word	0x0800a68f
 8002f6c:	20000340 	.word	0x20000340
 8002f70:	200001c4 	.word	0x200001c4
 8002f74:	20000334 	.word	0x20000334
 8002f78:	2000033c 	.word	0x2000033c
 8002f7c:	20000338 	.word	0x20000338
 8002f80:	200001bf 	.word	0x200001bf

08002f84 <Main_cpp>:

void Main_cpp(SensorsDataTypeDef* sensors_data) {
 8002f84:	b538      	push	{r3, r4, r5, lr}
 8002f86:	4604      	mov	r4, r0
//	grow_sensor.set_value(2, sensors_data->water_temperature);
//	grow_sensor.set_value(3, sensors_data->lux);
//	grow_sensor.set_value(4, sensors_data->CO2);
//	grow_sensor_interface.build_data_packet(grow_sensor, contact_data);

	grow_sensor.set_value(0, sensors_data->humidity);
 8002f88:	4d0b      	ldr	r5, [pc, #44]	; (8002fb8 <Main_cpp+0x34>)
 8002f8a:	6882      	ldr	r2, [r0, #8]
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4628      	mov	r0, r5
 8002f90:	f7fe f890 	bl	80010b4 <_ZN11Grow_sensor9set_valueEhf>
	grow_sensor.set_value(1, sensors_data->temperature);
 8002f94:	6862      	ldr	r2, [r4, #4]
 8002f96:	2101      	movs	r1, #1
 8002f98:	4628      	mov	r0, r5
 8002f9a:	f7fe f88b 	bl	80010b4 <_ZN11Grow_sensor9set_valueEhf>
	grow_sensor.set_value(2, sensors_data->CO2);
 8002f9e:	6922      	ldr	r2, [r4, #16]
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	4628      	mov	r0, r5
 8002fa4:	f7fe f886 	bl	80010b4 <_ZN11Grow_sensor9set_valueEhf>
	grow_sensor_interface.build_data_packet(grow_sensor, contact_data);
 8002fa8:	4629      	mov	r1, r5
}
 8002faa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	grow_sensor_interface.build_data_packet(grow_sensor, contact_data);
 8002fae:	4a03      	ldr	r2, [pc, #12]	; (8002fbc <Main_cpp+0x38>)
 8002fb0:	4803      	ldr	r0, [pc, #12]	; (8002fc0 <Main_cpp+0x3c>)
 8002fb2:	f7fe bb03 	b.w	80015bc <_ZN21Grow_sensor_interface17build_data_packetER11Grow_sensorR17LoRa_contact_data>
 8002fb6:	bf00      	nop
 8002fb8:	20000340 	.word	0x20000340
 8002fbc:	200001c4 	.word	0x200001c4
 8002fc0:	200001bf 	.word	0x200001bf

08002fc4 <LoRa_sleep>:

void LoRa_sleep() {
 8002fc4:	b538      	push	{r3, r4, r5, lr}
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fc6:	f44f 7580 	mov.w	r5, #256	; 0x100
 8002fca:	4c09      	ldr	r4, [pc, #36]	; (8002ff0 <LoRa_sleep+0x2c>)
 8002fcc:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002fd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
 8002fdc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002fe0:	f3bf 8f6f 	isb	sy
	// sleep LoRa module
    NVIC_DisableIRQ(EXTI15_10_IRQn);
    NVIC_DisableIRQ(EXTI2_IRQn);
    contact_data.end_contact();
 8002fe4:	4803      	ldr	r0, [pc, #12]	; (8002ff4 <LoRa_sleep+0x30>)
 8002fe6:	f7ff f95d 	bl	80022a4 <_ZN17LoRa_contact_data11end_contactEv>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fea:	6025      	str	r5, [r4, #0]
 8002fec:	6065      	str	r5, [r4, #4]
    NVIC_EnableIRQ(EXTI2_IRQn);
    NVIC_EnableIRQ(EXTI15_10_IRQn);
	// Sleep STM
}
 8002fee:	bd38      	pop	{r3, r4, r5, pc}
 8002ff0:	e000e100 	.word	0xe000e100
 8002ff4:	200001c4 	.word	0x200001c4

08002ff8 <Contact_group_control_module>:

void Contact_group_control_module() {
 8002ff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	contact_status = contact_data.work_contact_system();
 8002ffa:	482e      	ldr	r0, [pc, #184]	; (80030b4 <Contact_group_control_module+0xbc>)
 8002ffc:	f7ff fa30 	bl	8002460 <_ZN17LoRa_contact_data19work_contact_systemEv>
	switch (current_mode) {
 8003000:	4c2d      	ldr	r4, [pc, #180]	; (80030b8 <Contact_group_control_module+0xc0>)
	contact_status = contact_data.work_contact_system();
 8003002:	4b2e      	ldr	r3, [pc, #184]	; (80030bc <Contact_group_control_module+0xc4>)
 8003004:	4625      	mov	r5, r4
 8003006:	6018      	str	r0, [r3, #0]
	switch (current_mode) {
 8003008:	7823      	ldrb	r3, [r4, #0]
 800300a:	b11b      	cbz	r3, 8003014 <Contact_group_control_module+0x1c>
 800300c:	2b01      	cmp	r3, #1
 800300e:	d026      	beq.n	800305e <Contact_group_control_module+0x66>
	        	end_contact = true;
	            //contact_data.wait_recipient(grow_sensor.get_address_control_module());
	        }
		}
	}
}
 8003010:	b003      	add	sp, #12
 8003012:	bd30      	pop	{r4, r5, pc}
			if(contact_data.get_signal_complete()) {
 8003014:	4827      	ldr	r0, [pc, #156]	; (80030b4 <Contact_group_control_module+0xbc>)
 8003016:	f7fe fd46 	bl	8001aa6 <_ZN17LoRa_contact_data19get_signal_completeEv>
 800301a:	b150      	cbz	r0, 8003032 <Contact_group_control_module+0x3a>
				contact_data.broadcast_receive(); // Ожидаем ответа на запрос или ошибку запроса
 800301c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003020:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003024:	a801      	add	r0, sp, #4
 8003026:	f002 fb07 	bl	8005638 <_ZN12LoRa_addressC1Ett>
 800302a:	9901      	ldr	r1, [sp, #4]
 800302c:	4821      	ldr	r0, [pc, #132]	; (80030b4 <Contact_group_control_module+0xbc>)
 800302e:	f7ff f88f 	bl	8002150 <_ZN17LoRa_contact_data17broadcast_receiveE12LoRa_address>
			if(contact_data.get_state_contact() == SC_PACKET_ACCEPTED) {
 8003032:	4820      	ldr	r0, [pc, #128]	; (80030b4 <Contact_group_control_module+0xbc>)
 8003034:	f7fe fcdd 	bl	80019f2 <_ZN17LoRa_contact_data17get_state_contactEv>
 8003038:	2807      	cmp	r0, #7
 800303a:	d1e9      	bne.n	8003010 <Contact_group_control_module+0x18>
				if(grow_sensor_interface.check_regist_packet(grow_sensor, contact_data)) {
 800303c:	4a1d      	ldr	r2, [pc, #116]	; (80030b4 <Contact_group_control_module+0xbc>)
 800303e:	4920      	ldr	r1, [pc, #128]	; (80030c0 <Contact_group_control_module+0xc8>)
 8003040:	4820      	ldr	r0, [pc, #128]	; (80030c4 <Contact_group_control_module+0xcc>)
 8003042:	f7fe fa03 	bl	800144c <_ZN21Grow_sensor_interface19check_regist_packetER11Grow_sensorR17LoRa_contact_data>
 8003046:	2800      	cmp	r0, #0
 8003048:	d0e2      	beq.n	8003010 <Contact_group_control_module+0x18>
					current_mode = WORKING_MODE;
 800304a:	2301      	movs	r3, #1
					contact_data.wait_recipient(grow_sensor.get_address_control_module()); // Начинаем слушать на наличие управляющих пакетов
 800304c:	481c      	ldr	r0, [pc, #112]	; (80030c0 <Contact_group_control_module+0xc8>)
					current_mode = WORKING_MODE;
 800304e:	702b      	strb	r3, [r5, #0]
					contact_data.wait_recipient(grow_sensor.get_address_control_module()); // Начинаем слушать на наличие управляющих пакетов
 8003050:	f7fd fffe 	bl	8001050 <_ZNK11Grow_sensor26get_address_control_moduleEv>
 8003054:	4601      	mov	r1, r0
 8003056:	4817      	ldr	r0, [pc, #92]	; (80030b4 <Contact_group_control_module+0xbc>)
 8003058:	f7ff f864 	bl	8002124 <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>
					break;
 800305c:	e7d8      	b.n	8003010 <Contact_group_control_module+0x18>
	        if(contact_status != 0) {
 800305e:	b190      	cbz	r0, 8003086 <Contact_group_control_module+0x8e>
	        	if(grow_sensor_interface.check_contact_error(grow_sensor, contact_data)) {
 8003060:	4a14      	ldr	r2, [pc, #80]	; (80030b4 <Contact_group_control_module+0xbc>)
 8003062:	4917      	ldr	r1, [pc, #92]	; (80030c0 <Contact_group_control_module+0xc8>)
 8003064:	4817      	ldr	r0, [pc, #92]	; (80030c4 <Contact_group_control_module+0xcc>)
 8003066:	f7fe f9b3 	bl	80013d0 <_ZN21Grow_sensor_interface19check_contact_errorER11Grow_sensorR17LoRa_contact_data>
 800306a:	b1d0      	cbz	r0, 80030a2 <Contact_group_control_module+0xaa>
					current_mode = REGISTRATION_MODE;
 800306c:	2300      	movs	r3, #0
	        		contact_data.broadcast_receive();
 800306e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003072:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003076:	a801      	add	r0, sp, #4
					current_mode = REGISTRATION_MODE;
 8003078:	7023      	strb	r3, [r4, #0]
	        		contact_data.broadcast_receive();
 800307a:	f002 fadd 	bl	8005638 <_ZN12LoRa_addressC1Ett>
 800307e:	9901      	ldr	r1, [sp, #4]
 8003080:	480c      	ldr	r0, [pc, #48]	; (80030b4 <Contact_group_control_module+0xbc>)
 8003082:	f7ff f865 	bl	8002150 <_ZN17LoRa_contact_data17broadcast_receiveE12LoRa_address>
	        if(contact_data.get_signal_complete()) {
 8003086:	480b      	ldr	r0, [pc, #44]	; (80030b4 <Contact_group_control_module+0xbc>)
 8003088:	f7fe fd0d 	bl	8001aa6 <_ZN17LoRa_contact_data19get_signal_completeEv>
 800308c:	2800      	cmp	r0, #0
 800308e:	d0bf      	beq.n	8003010 <Contact_group_control_module+0x18>
	        	grow_sensor_interface.read_received_data_packets(grow_sensor, contact_data);
 8003090:	4a08      	ldr	r2, [pc, #32]	; (80030b4 <Contact_group_control_module+0xbc>)
 8003092:	490b      	ldr	r1, [pc, #44]	; (80030c0 <Contact_group_control_module+0xc8>)
 8003094:	480b      	ldr	r0, [pc, #44]	; (80030c4 <Contact_group_control_module+0xcc>)
 8003096:	f7fe fb83 	bl	80017a0 <_ZN21Grow_sensor_interface26read_received_data_packetsER11Grow_sensorR17LoRa_contact_data>
	        	end_contact = true;
 800309a:	2201      	movs	r2, #1
 800309c:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <Contact_group_control_module+0xd0>)
 800309e:	701a      	strb	r2, [r3, #0]
}
 80030a0:	e7b6      	b.n	8003010 <Contact_group_control_module+0x18>
	        		contact_data.wait_recipient(grow_sensor.get_address_control_module());
 80030a2:	4807      	ldr	r0, [pc, #28]	; (80030c0 <Contact_group_control_module+0xc8>)
 80030a4:	f7fd ffd4 	bl	8001050 <_ZNK11Grow_sensor26get_address_control_moduleEv>
 80030a8:	4601      	mov	r1, r0
 80030aa:	9001      	str	r0, [sp, #4]
 80030ac:	4801      	ldr	r0, [pc, #4]	; (80030b4 <Contact_group_control_module+0xbc>)
 80030ae:	f7ff f839 	bl	8002124 <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>
 80030b2:	e7e8      	b.n	8003086 <Contact_group_control_module+0x8e>
 80030b4:	200001c4 	.word	0x200001c4
 80030b8:	2000033c 	.word	0x2000033c
 80030bc:	20000330 	.word	0x20000330
 80030c0:	20000340 	.word	0x20000340
 80030c4:	200001bf 	.word	0x200001bf
 80030c8:	2000243c 	.word	0x2000243c

080030cc <_GLOBAL__sub_I_sensor_array>:

} // extern "C"
 80030cc:	b508      	push	{r3, lr}
LoRa_contact_data contact_data;
 80030ce:	4805      	ldr	r0, [pc, #20]	; (80030e4 <_GLOBAL__sub_I_sensor_array+0x18>)
 80030d0:	f7fe fd00 	bl	8001ad4 <_ZN17LoRa_contact_dataC1Ev>
} // extern "C"
 80030d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Grow_sensor grow_sensor(AMT_COMPONENT, sensor_array);
 80030d8:	2103      	movs	r1, #3
 80030da:	4a03      	ldr	r2, [pc, #12]	; (80030e8 <_GLOBAL__sub_I_sensor_array+0x1c>)
 80030dc:	4803      	ldr	r0, [pc, #12]	; (80030ec <_GLOBAL__sub_I_sensor_array+0x20>)
 80030de:	f7fe b883 	b.w	80011e8 <_ZN11Grow_sensorC1EhP11Type_sensor>
 80030e2:	bf00      	nop
 80030e4:	200001c4 	.word	0x200001c4
 80030e8:	20000000 	.word	0x20000000
 80030ec:	20000340 	.word	0x20000340

080030f0 <_GLOBAL__sub_D_sensor_array>:
} // extern "C"
 80030f0:	b508      	push	{r3, lr}
	_M_deallocate(_M_impl._M_start,
 80030f2:	4b05      	ldr	r3, [pc, #20]	; (8003108 <_GLOBAL__sub_D_sensor_array+0x18>)
 80030f4:	6918      	ldr	r0, [r3, #16]
	if (__p)
 80030f6:	b108      	cbz	r0, 80030fc <_GLOBAL__sub_D_sensor_array+0xc>
	::operator delete(__p);
 80030f8:	f007 f918 	bl	800a32c <_ZdlPv>
 80030fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
LoRa_contact_data contact_data;
 8003100:	4802      	ldr	r0, [pc, #8]	; (800310c <_GLOBAL__sub_D_sensor_array+0x1c>)
 8003102:	f7fe bbcb 	b.w	800189c <_ZN17LoRa_contact_dataD1Ev>
 8003106:	bf00      	nop
 8003108:	20000340 	.word	0x20000340
 800310c:	200001c4 	.word	0x200001c4

08003110 <_ZN8RegisterC1Ethh>:

//   ----- ----- ----- ---- ----- ----- -----
// ----- ----- ----- Register ----- ----- -----
//   ----- ----- ----- ---- ----- ----- -----

Register::Register(uint16_t address, uint8_t bit_count, uint8_t bit_bias): address_(address), bit_count_(bit_count), bit_bias_(bit_bias) {
 8003110:	2a08      	cmp	r2, #8
 8003112:	7082      	strb	r2, [r0, #2]
 8003114:	bf28      	it	cs
 8003116:	2208      	movcs	r2, #8
 8003118:	2a01      	cmp	r2, #1
 800311a:	bf38      	it	cc
 800311c:	2201      	movcc	r2, #1
 800311e:	b530      	push	{r4, r5, lr}
    uint8_t bit_in_reg = 8;
    bit_count = value_range(bit_count, 1, bit_in_reg);
    bit_bias = value_range(bit_bias, 0, (bit_in_reg - bit_count));
 8003120:	2400      	movs	r4, #0
 8003122:	f1c2 0508 	rsb	r5, r2, #8
 8003126:	b2ed      	uxtb	r5, r5
Register::Register(uint16_t address, uint8_t bit_count, uint8_t bit_bias): address_(address), bit_count_(bit_count), bit_bias_(bit_bias) {
 8003128:	8001      	strh	r1, [r0, #0]
 800312a:	70c3      	strb	r3, [r0, #3]
    uint32_t mask = 0x00;
 800312c:	4621      	mov	r1, r4
    for (uint8_t i = 0; i < bit_in_reg; ++i) {
        if (i < bit_count)
            mask = (mask << 1) + 1;
        else
            if (i < (bit_count + bit_bias))
 800312e:	429d      	cmp	r5, r3
 8003130:	bf94      	ite	ls
 8003132:	1953      	addls	r3, r2, r5
 8003134:	18d3      	addhi	r3, r2, r3
        if (i < bit_count)
 8003136:	b2e5      	uxtb	r5, r4
 8003138:	42aa      	cmp	r2, r5
 800313a:	d906      	bls.n	800314a <_ZN8RegisterC1Ethh+0x3a>
            mask = (mask << 1) + 1;
 800313c:	0049      	lsls	r1, r1, #1
 800313e:	3101      	adds	r1, #1
    for (uint8_t i = 0; i < bit_in_reg; ++i) {
 8003140:	3401      	adds	r4, #1
 8003142:	2c08      	cmp	r4, #8
 8003144:	d1f7      	bne.n	8003136 <_ZN8RegisterC1Ethh+0x26>
                mask <<= 1;
    }
    mask_ = mask;
 8003146:	6041      	str	r1, [r0, #4]
}
 8003148:	bd30      	pop	{r4, r5, pc}
            if (i < (bit_count + bit_bias))
 800314a:	42a3      	cmp	r3, r4
                mask <<= 1;
 800314c:	bfc8      	it	gt
 800314e:	0049      	lslgt	r1, r1, #1
 8003150:	e7f6      	b.n	8003140 <_ZN8RegisterC1Ethh+0x30>

08003152 <_ZNK8Register7addressEv>:

uint16_t Register::address() const {
    return address_;
}
 8003152:	8800      	ldrh	r0, [r0, #0]
 8003154:	4770      	bx	lr

08003156 <_ZNK8Register4maskEv>:
uint8_t Register::bit_bias() const {
    return bit_bias_;
}
uint32_t Register::mask() const {
    return mask_;
}
 8003156:	6840      	ldr	r0, [r0, #4]
 8003158:	4770      	bx	lr

0800315a <_ZeqRK8RegisterS1_>:

bool operator==(const Register& left, const Register& right) {
    if(left.address_ != right.address_)
 800315a:	8802      	ldrh	r2, [r0, #0]
 800315c:	880b      	ldrh	r3, [r1, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d10d      	bne.n	800317e <_ZeqRK8RegisterS1_+0x24>
        return false;
    if(left.bit_count_ != right.bit_count_)
 8003162:	7882      	ldrb	r2, [r0, #2]
 8003164:	788b      	ldrb	r3, [r1, #2]
 8003166:	429a      	cmp	r2, r3
 8003168:	d109      	bne.n	800317e <_ZeqRK8RegisterS1_+0x24>
        return false;
    if(left.bit_bias_ != right.bit_bias_)
 800316a:	78c2      	ldrb	r2, [r0, #3]
 800316c:	78cb      	ldrb	r3, [r1, #3]
 800316e:	429a      	cmp	r2, r3
 8003170:	d105      	bne.n	800317e <_ZeqRK8RegisterS1_+0x24>
        return false;
    if(left.mask_ != right.mask_)
 8003172:	6840      	ldr	r0, [r0, #4]
 8003174:	684b      	ldr	r3, [r1, #4]
 8003176:	1ac3      	subs	r3, r0, r3
 8003178:	4258      	negs	r0, r3
 800317a:	4158      	adcs	r0, r3
 800317c:	4770      	bx	lr
        return false;
 800317e:	2000      	movs	r0, #0
        return false;
    return true;
}
 8003180:	4770      	bx	lr

08003182 <_ZneRK8RegisterS1_>:

bool operator!=(const Register& left, const Register& right) {
 8003182:	b508      	push	{r3, lr}
    return !(left == right);
 8003184:	f7ff ffe9 	bl	800315a <_ZeqRK8RegisterS1_>
 8003188:	f080 0001 	eor.w	r0, r0, #1
}
 800318c:	b2c0      	uxtb	r0, r0
 800318e:	bd08      	pop	{r3, pc}

08003190 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm>:
                             const uint32_t max_value, const uint32_t *reserved_value, const uint32_t reserv_count) {
    init_address_field(registers, reg_count, reg_revers, mode, min_value, max_value, reserved_value, reserv_count);
}

bool Address_field::init_address_field(const Register *registers, const uint8_t reg_count, const bool reg_revers, const char mode, const uint32_t min_value,
                                       const uint32_t max_value, const uint32_t *reserved_value, const uint32_t reserv_count) {
 8003190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003194:	f89d c018 	ldrb.w	ip, [sp, #24]
 8003198:	4604      	mov	r4, r0
 800319a:	e9dd 5707 	ldrd	r5, r7, [sp, #28]
    if ((mode != 'r') && (mode != 'w') && (mode != 'c'))
 800319e:	f1ac 0063 	sub.w	r0, ip, #99	; 0x63
 80031a2:	b2c6      	uxtb	r6, r0
 80031a4:	2e14      	cmp	r6, #20
 80031a6:	d838      	bhi.n	800321a <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x8a>
 80031a8:	481d      	ldr	r0, [pc, #116]	; (8003220 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x90>)
 80031aa:	40f0      	lsrs	r0, r6
 80031ac:	43c0      	mvns	r0, r0
 80031ae:	f010 0001 	ands.w	r0, r0, #1
 80031b2:	d130      	bne.n	8003216 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x86>
    uint8_t bit_count = 0;
    uint32_t value = 0;
    mode_ = mode;
    registers_ = registers;
    reg_count_ = reg_count;
    reg_revers_ = reg_revers;
 80031b4:	7163      	strb	r3, [r4, #5]
    reserved_value_ = reserved_value;
 80031b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    uint8_t bit_count = 0;
 80031b8:	4606      	mov	r6, r0
    reserved_value_ = reserved_value;
 80031ba:	6123      	str	r3, [r4, #16]
    reserv_count_ = reserv_count;
 80031bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    mode_ = mode;
 80031be:	f884 c018 	strb.w	ip, [r4, #24]
    reserv_count_ = reserv_count;
 80031c2:	6163      	str	r3, [r4, #20]
    max_address_ = 0;
    for (int i = 0; i < reg_count_; ++i) {
 80031c4:	4603      	mov	r3, r0
    registers_ = registers;
 80031c6:	6021      	str	r1, [r4, #0]
    reg_count_ = reg_count;
 80031c8:	7122      	strb	r2, [r4, #4]
    max_address_ = 0;
 80031ca:	80e0      	strh	r0, [r4, #6]
    return bit_count_;
 80031cc:	f101 0e02 	add.w	lr, r1, #2
    for (int i = 0; i < reg_count_; ++i) {
 80031d0:	429a      	cmp	r2, r3
 80031d2:	dd0d      	ble.n	80031f0 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x60>
        bit_count += registers_[i].bit_count();
 80031d4:	f81e c033 	ldrb.w	ip, [lr, r3, lsl #3]
        if (max_address_ < registers_[i].address())
 80031d8:	f8b4 8006 	ldrh.w	r8, [r4, #6]
        bit_count += registers_[i].bit_count();
 80031dc:	4466      	add	r6, ip
    return address_;
 80031de:	f831 c033 	ldrh.w	ip, [r1, r3, lsl #3]
        bit_count += registers_[i].bit_count();
 80031e2:	b2f6      	uxtb	r6, r6
        if (max_address_ < registers_[i].address())
 80031e4:	45e0      	cmp	r8, ip
            max_address_ = registers_[i].address();
 80031e6:	bf38      	it	cc
 80031e8:	f8a4 c006 	strhcc.w	ip, [r4, #6]
    for (int i = 0; i < reg_count_; ++i) {
 80031ec:	3301      	adds	r3, #1
 80031ee:	e7ef      	b.n	80031d0 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x40>
    }
    for (int i = 0; i < bit_count; ++i)
 80031f0:	2200      	movs	r2, #0
    uint32_t value = 0;
 80031f2:	4613      	mov	r3, r2
    for (int i = 0; i < bit_count; ++i)
 80031f4:	4296      	cmp	r6, r2
 80031f6:	dd03      	ble.n	8003200 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x70>
        value = (value << 1) + 1;
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	3301      	adds	r3, #1
    for (int i = 0; i < bit_count; ++i)
 80031fc:	3201      	adds	r2, #1
 80031fe:	e7f9      	b.n	80031f4 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x64>
    min_value_ = value_range(min_value, 0, value);
 8003200:	429d      	cmp	r5, r3
 8003202:	bf94      	ite	ls
 8003204:	60a5      	strls	r5, [r4, #8]
 8003206:	60a3      	strhi	r3, [r4, #8]
    if (value < min_value)
 8003208:	42bd      	cmp	r5, r7
 800320a:	d803      	bhi.n	8003214 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x84>
    if (value > max_value)
 800320c:	429f      	cmp	r7, r3
 800320e:	463d      	mov	r5, r7
 8003210:	bf28      	it	cs
 8003212:	461d      	movcs	r5, r3
    max_value_ = value_range(max_value, min_value, value);
 8003214:	60e5      	str	r5, [r4, #12]
    return false;
}
 8003216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return true;
 800321a:	2001      	movs	r0, #1
 800321c:	e7fb      	b.n	8003216 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x86>
 800321e:	bf00      	nop
 8003220:	00108001 	.word	0x00108001

08003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>:
Address_field::Address_field(const Register* registers, const uint8_t reg_count, const bool reg_revers, const char mode, const uint32_t min_value,
 8003224:	b530      	push	{r4, r5, lr}
 8003226:	4604      	mov	r4, r0
 8003228:	b087      	sub	sp, #28
    init_address_field(registers, reg_count, reg_revers, mode, min_value, max_value, reserved_value, reserv_count);
 800322a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800322c:	9504      	str	r5, [sp, #16]
 800322e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003230:	9503      	str	r5, [sp, #12]
 8003232:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003234:	9502      	str	r5, [sp, #8]
 8003236:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003238:	9501      	str	r5, [sp, #4]
 800323a:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 800323e:	9500      	str	r5, [sp, #0]
 8003240:	f7ff ffa6 	bl	8003190 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm>
}
 8003244:	4620      	mov	r0, r4
 8003246:	b007      	add	sp, #28
 8003248:	bd30      	pop	{r4, r5, pc}

0800324a <_ZNK13Address_field9get_valueEPKhi>:


uint32_t Address_field::get_value(const uint8_t *register_value, int register_count) const {
    if (register_count < (max_address_ + 1))
 800324a:	88c3      	ldrh	r3, [r0, #6]
uint32_t Address_field::get_value(const uint8_t *register_value, int register_count) const {
 800324c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (register_count < (max_address_ + 1))
 800324e:	4293      	cmp	r3, r2
uint32_t Address_field::get_value(const uint8_t *register_value, int register_count) const {
 8003250:	4604      	mov	r4, r0
    if (register_count < (max_address_ + 1))
 8003252:	da27      	bge.n	80032a4 <_ZNK13Address_field9get_valueEPKhi+0x5a>
        return -1;
    uint32_t value = 0;
    if(reg_revers_) {
 8003254:	7902      	ldrb	r2, [r0, #4]
 8003256:	7940      	ldrb	r0, [r0, #5]
 8003258:	b198      	cbz	r0, 8003282 <_ZNK13Address_field9get_valueEPKhi+0x38>
        for (int i = 0; i < reg_count_; ++i) {
 800325a:	2500      	movs	r5, #0
    uint32_t value = 0;
 800325c:	4628      	mov	r0, r5
        for (int i = 0; i < reg_count_; ++i) {
 800325e:	4295      	cmp	r5, r2
 8003260:	da22      	bge.n	80032a8 <_ZNK13Address_field9get_valueEPKhi+0x5e>
            value <<= registers_[i].bit_count();
 8003262:	6827      	ldr	r7, [r4, #0]
 8003264:	eb07 06c5 	add.w	r6, r7, r5, lsl #3
 8003268:	78b3      	ldrb	r3, [r6, #2]
 800326a:	fa00 f303 	lsl.w	r3, r0, r3
            value |= (register_value[registers_[i].address()] & registers_[i].mask()) >> registers_[i].bit_bias();
 800326e:	f837 0035 	ldrh.w	r0, [r7, r5, lsl #3]
 8003272:	6877      	ldr	r7, [r6, #4]
 8003274:	5c08      	ldrb	r0, [r1, r0]
 8003276:	78f6      	ldrb	r6, [r6, #3]
 8003278:	4038      	ands	r0, r7
 800327a:	40f0      	lsrs	r0, r6
 800327c:	4318      	orrs	r0, r3
        for (int i = 0; i < reg_count_; ++i) {
 800327e:	3501      	adds	r5, #1
 8003280:	e7ed      	b.n	800325e <_ZNK13Address_field9get_valueEPKhi+0x14>
        }
    }
    else {
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 8003282:	3a01      	subs	r2, #1
 8003284:	d310      	bcc.n	80032a8 <_ZNK13Address_field9get_valueEPKhi+0x5e>
            value <<= registers_[i].bit_count();
 8003286:	6826      	ldr	r6, [r4, #0]
 8003288:	eb06 05c2 	add.w	r5, r6, r2, lsl #3
 800328c:	78ab      	ldrb	r3, [r5, #2]
 800328e:	fa00 f303 	lsl.w	r3, r0, r3
            value |= (register_value[registers_[i].address()] & registers_[i].mask()) >> registers_[i].bit_bias();
 8003292:	f836 0032 	ldrh.w	r0, [r6, r2, lsl #3]
 8003296:	686e      	ldr	r6, [r5, #4]
 8003298:	5c08      	ldrb	r0, [r1, r0]
 800329a:	78ed      	ldrb	r5, [r5, #3]
 800329c:	4030      	ands	r0, r6
 800329e:	40e8      	lsrs	r0, r5
 80032a0:	4318      	orrs	r0, r3
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 80032a2:	e7ee      	b.n	8003282 <_ZNK13Address_field9get_valueEPKhi+0x38>
        return -1;
 80032a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
    }
    return value;
}
 80032a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032aa <_ZNK13Address_field9set_valueEmPhi>:

bool Address_field::set_value(uint32_t value, uint8_t *register_value, int register_count) const {
 80032aa:	b570      	push	{r4, r5, r6, lr}
    if ((register_count < (max_address_ + 1)) || (mode_ == 'r') ||
 80032ac:	88c4      	ldrh	r4, [r0, #6]
 80032ae:	429c      	cmp	r4, r3
 80032b0:	da58      	bge.n	8003364 <_ZNK13Address_field9set_valueEmPhi+0xba>
 80032b2:	7e03      	ldrb	r3, [r0, #24]
 80032b4:	2b72      	cmp	r3, #114	; 0x72
 80032b6:	d055      	beq.n	8003364 <_ZNK13Address_field9set_valueEmPhi+0xba>
 80032b8:	6883      	ldr	r3, [r0, #8]
 80032ba:	428b      	cmp	r3, r1
 80032bc:	d852      	bhi.n	8003364 <_ZNK13Address_field9set_valueEmPhi+0xba>
                (value < min_value_) || (value > max_value_))
 80032be:	68c3      	ldr	r3, [r0, #12]
 80032c0:	428b      	cmp	r3, r1
 80032c2:	d34f      	bcc.n	8003364 <_ZNK13Address_field9set_valueEmPhi+0xba>
        return true;
    for (uint32_t i = 0; i < reserv_count_; ++i)
 80032c4:	2300      	movs	r3, #0
 80032c6:	6944      	ldr	r4, [r0, #20]
 80032c8:	429c      	cmp	r4, r3
 80032ca:	d006      	beq.n	80032da <_ZNK13Address_field9set_valueEmPhi+0x30>
        if (value == reserved_value_[i])
 80032cc:	6905      	ldr	r5, [r0, #16]
 80032ce:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 80032d2:	428d      	cmp	r5, r1
 80032d4:	d046      	beq.n	8003364 <_ZNK13Address_field9set_valueEmPhi+0xba>
    for (uint32_t i = 0; i < reserv_count_; ++i)
 80032d6:	3301      	adds	r3, #1
 80032d8:	e7f6      	b.n	80032c8 <_ZNK13Address_field9set_valueEmPhi+0x1e>
            return true;
    if(reg_revers_) {
 80032da:	7943      	ldrb	r3, [r0, #5]
 80032dc:	b30b      	cbz	r3, 8003322 <_ZNK13Address_field9set_valueEmPhi+0x78>
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 80032de:	7903      	ldrb	r3, [r0, #4]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	d201      	bcs.n	80032e8 <_ZNK13Address_field9set_valueEmPhi+0x3e>
            register_value[registers_[i].address()] &= ~registers_[i].mask();
            register_value[registers_[i].address()] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
            value >>= registers_[i].bit_count();
        }
    }
    return false;
 80032e4:	2000      	movs	r0, #0
}
 80032e6:	bd70      	pop	{r4, r5, r6, pc}
            register_value[registers_[i].address()] &= ~registers_[i].mask();
 80032e8:	6804      	ldr	r4, [r0, #0]
 80032ea:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 80032ee:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
 80032f2:	6876      	ldr	r6, [r6, #4]
 80032f4:	5d54      	ldrb	r4, [r2, r5]
 80032f6:	ea24 0406 	bic.w	r4, r4, r6
 80032fa:	5554      	strb	r4, [r2, r5]
            register_value[registers_[i].address()] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
 80032fc:	6805      	ldr	r5, [r0, #0]
 80032fe:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 8003302:	78e6      	ldrb	r6, [r4, #3]
 8003304:	6864      	ldr	r4, [r4, #4]
 8003306:	f835 5033 	ldrh.w	r5, [r5, r3, lsl #3]
 800330a:	40f4      	lsrs	r4, r6
 800330c:	400c      	ands	r4, r1
 800330e:	40b4      	lsls	r4, r6
 8003310:	5d56      	ldrb	r6, [r2, r5]
 8003312:	4334      	orrs	r4, r6
 8003314:	5554      	strb	r4, [r2, r5]
    return bit_count_;
 8003316:	6804      	ldr	r4, [r0, #0]
 8003318:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
            value >>= registers_[i].bit_count();
 800331c:	78a4      	ldrb	r4, [r4, #2]
 800331e:	40e1      	lsrs	r1, r4
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 8003320:	e7de      	b.n	80032e0 <_ZNK13Address_field9set_valueEmPhi+0x36>
        for (int i = 0; i < reg_count_; ++i) {
 8003322:	7904      	ldrb	r4, [r0, #4]
 8003324:	429c      	cmp	r4, r3
 8003326:	dddd      	ble.n	80032e4 <_ZNK13Address_field9set_valueEmPhi+0x3a>
            register_value[registers_[i].address()] &= ~registers_[i].mask();
 8003328:	6804      	ldr	r4, [r0, #0]
 800332a:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 800332e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
 8003332:	6876      	ldr	r6, [r6, #4]
 8003334:	5d54      	ldrb	r4, [r2, r5]
 8003336:	ea24 0406 	bic.w	r4, r4, r6
 800333a:	5554      	strb	r4, [r2, r5]
            register_value[registers_[i].address()] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
 800333c:	6805      	ldr	r5, [r0, #0]
 800333e:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 8003342:	78e6      	ldrb	r6, [r4, #3]
 8003344:	6864      	ldr	r4, [r4, #4]
 8003346:	f835 5033 	ldrh.w	r5, [r5, r3, lsl #3]
 800334a:	40f4      	lsrs	r4, r6
 800334c:	400c      	ands	r4, r1
 800334e:	40b4      	lsls	r4, r6
 8003350:	5d56      	ldrb	r6, [r2, r5]
 8003352:	4334      	orrs	r4, r6
 8003354:	5554      	strb	r4, [r2, r5]
    return bit_count_;
 8003356:	6804      	ldr	r4, [r0, #0]
 8003358:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
            value >>= registers_[i].bit_count();
 800335c:	78a4      	ldrb	r4, [r4, #2]
        for (int i = 0; i < reg_count_; ++i) {
 800335e:	3301      	adds	r3, #1
            value >>= registers_[i].bit_count();
 8003360:	40e1      	lsrs	r1, r4
        for (int i = 0; i < reg_count_; ++i) {
 8003362:	e7de      	b.n	8003322 <_ZNK13Address_field9set_valueEmPhi+0x78>
        return true;
 8003364:	2001      	movs	r0, #1
 8003366:	e7be      	b.n	80032e6 <_ZNK13Address_field9set_valueEmPhi+0x3c>

08003368 <_ZNK13Address_field9get_valueERK11LoRa_packeth>:

#if defined( ADD_LORA_PACKET_CODE )
uint32_t Address_field::get_value(const class LoRa_packet& packet, uint8_t bias) const {
 8003368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if ((SIZE_LORA_PACKET_MAX_LEN - bias) < ((uint32_t)max_address_ + 1))
 800336c:	88c3      	ldrh	r3, [r0, #6]
uint32_t Address_field::get_value(const class LoRa_packet& packet, uint8_t bias) const {
 800336e:	4616      	mov	r6, r2
    if ((SIZE_LORA_PACKET_MAX_LEN - bias) < ((uint32_t)max_address_ + 1))
 8003370:	3301      	adds	r3, #1
 8003372:	f1c2 0232 	rsb	r2, r2, #50	; 0x32
 8003376:	429a      	cmp	r2, r3
uint32_t Address_field::get_value(const class LoRa_packet& packet, uint8_t bias) const {
 8003378:	4604      	mov	r4, r0
 800337a:	460d      	mov	r5, r1
    if ((SIZE_LORA_PACKET_MAX_LEN - bias) < ((uint32_t)max_address_ + 1))
 800337c:	d33c      	bcc.n	80033f8 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0x90>
        return -1;
    uint32_t value = 0;
    if(reg_revers_) {
 800337e:	7940      	ldrb	r0, [r0, #5]
 8003380:	b1f0      	cbz	r0, 80033c0 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0x58>
        for (int i = 0; i < reg_count_; ++i) {
 8003382:	2700      	movs	r7, #0
    uint32_t value = 0;
 8003384:	4638      	mov	r0, r7
        for (int i = 0; i < reg_count_; ++i) {
 8003386:	7923      	ldrb	r3, [r4, #4]
 8003388:	42bb      	cmp	r3, r7
 800338a:	dd37      	ble.n	80033fc <_ZNK13Address_field9get_valueERK11LoRa_packeth+0x94>
            value <<= registers_[i].bit_count();
 800338c:	6823      	ldr	r3, [r4, #0]
 800338e:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 8003392:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
            value |= (packet[registers_[i].address() + bias] & registers_[i].mask()) >> registers_[i].bit_bias();
 8003396:	f833 1037 	ldrh.w	r1, [r3, r7, lsl #3]
            value <<= registers_[i].bit_count();
 800339a:	f892 8002 	ldrb.w	r8, [r2, #2]
            value |= (packet[registers_[i].address() + bias] & registers_[i].mask()) >> registers_[i].bit_bias();
 800339e:	4431      	add	r1, r6
            value <<= registers_[i].bit_count();
 80033a0:	fa00 f808 	lsl.w	r8, r0, r8
            value |= (packet[registers_[i].address() + bias] & registers_[i].mask()) >> registers_[i].bit_bias();
 80033a4:	4628      	mov	r0, r5
 80033a6:	f001 f862 	bl	800446e <_ZNK11LoRa_packetixEi>
 80033aa:	6822      	ldr	r2, [r4, #0]
 80033ac:	7803      	ldrb	r3, [r0, #0]
 80033ae:	444a      	add	r2, r9
 80033b0:	6850      	ldr	r0, [r2, #4]
        for (int i = 0; i < reg_count_; ++i) {
 80033b2:	3701      	adds	r7, #1
            value |= (packet[registers_[i].address() + bias] & registers_[i].mask()) >> registers_[i].bit_bias();
 80033b4:	4003      	ands	r3, r0
 80033b6:	78d0      	ldrb	r0, [r2, #3]
 80033b8:	40c3      	lsrs	r3, r0
 80033ba:	ea43 0008 	orr.w	r0, r3, r8
        for (int i = 0; i < reg_count_; ++i) {
 80033be:	e7e2      	b.n	8003386 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0x1e>
        }
    }
    else {
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 80033c0:	7927      	ldrb	r7, [r4, #4]
 80033c2:	3f01      	subs	r7, #1
 80033c4:	d31a      	bcc.n	80033fc <_ZNK13Address_field9get_valueERK11LoRa_packeth+0x94>
            value <<= registers_[i].bit_count();
 80033c6:	6823      	ldr	r3, [r4, #0]
 80033c8:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 80033cc:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
 80033d0:	f892 8002 	ldrb.w	r8, [r2, #2]
            value |= (packet[registers_[i].address() + bias] & registers_[i].mask()) >> registers_[i].bit_bias();
 80033d4:	f833 1037 	ldrh.w	r1, [r3, r7, lsl #3]
            value <<= registers_[i].bit_count();
 80033d8:	fa00 f808 	lsl.w	r8, r0, r8
            value |= (packet[registers_[i].address() + bias] & registers_[i].mask()) >> registers_[i].bit_bias();
 80033dc:	4431      	add	r1, r6
 80033de:	4628      	mov	r0, r5
 80033e0:	f001 f845 	bl	800446e <_ZNK11LoRa_packetixEi>
 80033e4:	6822      	ldr	r2, [r4, #0]
 80033e6:	7803      	ldrb	r3, [r0, #0]
 80033e8:	444a      	add	r2, r9
 80033ea:	6850      	ldr	r0, [r2, #4]
 80033ec:	4003      	ands	r3, r0
 80033ee:	78d0      	ldrb	r0, [r2, #3]
 80033f0:	40c3      	lsrs	r3, r0
 80033f2:	ea43 0008 	orr.w	r0, r3, r8
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 80033f6:	e7e4      	b.n	80033c2 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0x5a>
        return -1;
 80033f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
    }
    return value;
}
 80033fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003400 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>:
bool Address_field::set_value(uint32_t value, class LoRa_packet& packet, uint8_t bias) const {
 8003400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003404:	4617      	mov	r7, r2
 8003406:	4698      	mov	r8, r3
    if (((SIZE_LORA_PACKET_MAX_LEN - bias) < ((uint32_t)max_address_ + 1)) || (mode_ == 'r') ||
 8003408:	f1c3 0232 	rsb	r2, r3, #50	; 0x32
 800340c:	88c3      	ldrh	r3, [r0, #6]
bool Address_field::set_value(uint32_t value, class LoRa_packet& packet, uint8_t bias) const {
 800340e:	4604      	mov	r4, r0
    if (((SIZE_LORA_PACKET_MAX_LEN - bias) < ((uint32_t)max_address_ + 1)) || (mode_ == 'r') ||
 8003410:	3301      	adds	r3, #1
 8003412:	429a      	cmp	r2, r3
bool Address_field::set_value(uint32_t value, class LoRa_packet& packet, uint8_t bias) const {
 8003414:	460d      	mov	r5, r1
    if (((SIZE_LORA_PACKET_MAX_LEN - bias) < ((uint32_t)max_address_ + 1)) || (mode_ == 'r') ||
 8003416:	f0c0 8092 	bcc.w	800353e <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x13e>
 800341a:	7e03      	ldrb	r3, [r0, #24]
 800341c:	2b72      	cmp	r3, #114	; 0x72
 800341e:	f000 808e 	beq.w	800353e <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x13e>
 8003422:	6883      	ldr	r3, [r0, #8]
 8003424:	428b      	cmp	r3, r1
 8003426:	f200 808a 	bhi.w	800353e <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x13e>
                (value < min_value_) || (value > max_value_))
 800342a:	68c3      	ldr	r3, [r0, #12]
 800342c:	428b      	cmp	r3, r1
 800342e:	f0c0 8086 	bcc.w	800353e <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x13e>
        return true;
    for (uint32_t i = 0; i < reserv_count_; ++i)
 8003432:	2300      	movs	r3, #0
 8003434:	6942      	ldr	r2, [r0, #20]
 8003436:	429a      	cmp	r2, r3
 8003438:	d006      	beq.n	8003448 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x48>
        if (value == reserved_value_[i])
 800343a:	6921      	ldr	r1, [r4, #16]
 800343c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003440:	42a9      	cmp	r1, r5
 8003442:	d07c      	beq.n	800353e <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x13e>
    for (uint32_t i = 0; i < reserv_count_; ++i)
 8003444:	3301      	adds	r3, #1
 8003446:	e7f6      	b.n	8003436 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x36>
            return true;

    // while(packet.get_len() < max_address_ + bias)
    //     packet.add_packet_data(0);
    packet.add_packet_data(&packet[packet.get_len()-1], max_address_ + bias - packet.get_len() + 1);
 8003448:	4638      	mov	r0, r7
 800344a:	f001 f806 	bl	800445a <_ZNK11LoRa_packet7get_lenEv>
 800344e:	1e41      	subs	r1, r0, #1
 8003450:	4638      	mov	r0, r7
 8003452:	f001 f808 	bl	8004466 <_ZN11LoRa_packetixEi>
 8003456:	4681      	mov	r9, r0
 8003458:	4638      	mov	r0, r7
 800345a:	79a6      	ldrb	r6, [r4, #6]
 800345c:	f000 fffd 	bl	800445a <_ZNK11LoRa_packet7get_lenEv>
 8003460:	4446      	add	r6, r8
 8003462:	b2f6      	uxtb	r6, r6
 8003464:	3601      	adds	r6, #1
 8003466:	1a36      	subs	r6, r6, r0
 8003468:	b2f2      	uxtb	r2, r6
 800346a:	4649      	mov	r1, r9
 800346c:	4638      	mov	r0, r7
 800346e:	f000 ffc5 	bl	80043fc <_ZN11LoRa_packet15add_packet_dataEPKhh>

    if(reg_revers_) {
 8003472:	7966      	ldrb	r6, [r4, #5]
 8003474:	b396      	cbz	r6, 80034dc <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0xdc>
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 8003476:	7926      	ldrb	r6, [r4, #4]
 8003478:	3e01      	subs	r6, #1
 800347a:	d202      	bcs.n	8003482 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x82>
            packet[registers_[i].address() + bias] &= ~registers_[i].mask();
            packet[registers_[i].address() + bias] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
            value >>= registers_[i].bit_count();
        }
    }
    return false;
 800347c:	2000      	movs	r0, #0
}
 800347e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            packet[registers_[i].address() + bias] &= ~registers_[i].mask();
 8003482:	6822      	ldr	r2, [r4, #0]
 8003484:	4638      	mov	r0, r7
 8003486:	f832 1036 	ldrh.w	r1, [r2, r6, lsl #3]
 800348a:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	4441      	add	r1, r8
 8003492:	ea6f 0903 	mvn.w	r9, r3
 8003496:	f000 ffe6 	bl	8004466 <_ZN11LoRa_packetixEi>
 800349a:	7803      	ldrb	r3, [r0, #0]
 800349c:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
 80034a0:	ea03 0309 	and.w	r3, r3, r9
 80034a4:	7003      	strb	r3, [r0, #0]
            packet[registers_[i].address() + bias] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
 80034a6:	6822      	ldr	r2, [r4, #0]
 80034a8:	4638      	mov	r0, r7
 80034aa:	eb02 030a 	add.w	r3, r2, sl
 80034ae:	78d9      	ldrb	r1, [r3, #3]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	fa23 f901 	lsr.w	r9, r3, r1
 80034b6:	ea09 0905 	and.w	r9, r9, r5
 80034ba:	fa09 f901 	lsl.w	r9, r9, r1
 80034be:	f832 1036 	ldrh.w	r1, [r2, r6, lsl #3]
 80034c2:	4441      	add	r1, r8
 80034c4:	f000 ffcf 	bl	8004466 <_ZN11LoRa_packetixEi>
 80034c8:	7803      	ldrb	r3, [r0, #0]
 80034ca:	ea43 0909 	orr.w	r9, r3, r9
 80034ce:	f880 9000 	strb.w	r9, [r0]
    return bit_count_;
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	4453      	add	r3, sl
            value >>= registers_[i].bit_count();
 80034d6:	789b      	ldrb	r3, [r3, #2]
 80034d8:	40dd      	lsrs	r5, r3
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 80034da:	e7cd      	b.n	8003478 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x78>
        for (int i = 0; i < reg_count_; ++i) {
 80034dc:	7923      	ldrb	r3, [r4, #4]
 80034de:	42b3      	cmp	r3, r6
 80034e0:	ddcc      	ble.n	800347c <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x7c>
            packet[registers_[i].address() + bias] &= ~registers_[i].mask();
 80034e2:	6822      	ldr	r2, [r4, #0]
 80034e4:	4638      	mov	r0, r7
 80034e6:	f832 1036 	ldrh.w	r1, [r2, r6, lsl #3]
 80034ea:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	4441      	add	r1, r8
 80034f2:	ea6f 0903 	mvn.w	r9, r3
 80034f6:	f000 ffb6 	bl	8004466 <_ZN11LoRa_packetixEi>
 80034fa:	7803      	ldrb	r3, [r0, #0]
 80034fc:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
 8003500:	ea03 0309 	and.w	r3, r3, r9
 8003504:	7003      	strb	r3, [r0, #0]
            packet[registers_[i].address() + bias] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
 8003506:	6822      	ldr	r2, [r4, #0]
 8003508:	4638      	mov	r0, r7
 800350a:	eb02 030a 	add.w	r3, r2, sl
 800350e:	78d9      	ldrb	r1, [r3, #3]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	fa23 f901 	lsr.w	r9, r3, r1
 8003516:	ea09 0905 	and.w	r9, r9, r5
 800351a:	fa09 f901 	lsl.w	r9, r9, r1
 800351e:	f832 1036 	ldrh.w	r1, [r2, r6, lsl #3]
        for (int i = 0; i < reg_count_; ++i) {
 8003522:	3601      	adds	r6, #1
            packet[registers_[i].address() + bias] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
 8003524:	4441      	add	r1, r8
 8003526:	f000 ff9e 	bl	8004466 <_ZN11LoRa_packetixEi>
 800352a:	7803      	ldrb	r3, [r0, #0]
 800352c:	ea43 0909 	orr.w	r9, r3, r9
 8003530:	f880 9000 	strb.w	r9, [r0]
    return bit_count_;
 8003534:	6823      	ldr	r3, [r4, #0]
 8003536:	4453      	add	r3, sl
            value >>= registers_[i].bit_count();
 8003538:	789b      	ldrb	r3, [r3, #2]
 800353a:	40dd      	lsrs	r5, r3
        for (int i = 0; i < reg_count_; ++i) {
 800353c:	e7ce      	b.n	80034dc <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0xdc>
        return true;
 800353e:	2001      	movs	r0, #1
 8003540:	e79d      	b.n	800347e <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x7e>

08003542 <_ZNK13Address_field13get_registersEv>:
#endif

const Register *Address_field::get_registers() const {
    return registers_;
}
 8003542:	6800      	ldr	r0, [r0, #0]
 8003544:	4770      	bx	lr

08003546 <_ZNK13Address_field13get_reg_countEv>:
uint8_t Address_field::get_reg_count() const {
    return reg_count_;
}
 8003546:	7900      	ldrb	r0, [r0, #4]
 8003548:	4770      	bx	lr

0800354a <_ZeqRK13Address_fieldS1_>:
}
char Address_field::get_mode() const {
    return mode_;
}

bool operator==(const Address_field& left, const Address_field& right) {
 800354a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(left.reg_count_ != right.reg_count_)
 800354e:	f890 8004 	ldrb.w	r8, [r0, #4]
 8003552:	790b      	ldrb	r3, [r1, #4]
bool operator==(const Address_field& left, const Address_field& right) {
 8003554:	4604      	mov	r4, r0
    if(left.reg_count_ != right.reg_count_)
 8003556:	4543      	cmp	r3, r8
bool operator==(const Address_field& left, const Address_field& right) {
 8003558:	460d      	mov	r5, r1
    if(left.reg_count_ != right.reg_count_)
 800355a:	d131      	bne.n	80035c0 <_ZeqRK13Address_fieldS1_+0x76>
        return false;
    if(left.max_address_ != right.max_address_)
 800355c:	88c2      	ldrh	r2, [r0, #6]
 800355e:	88cb      	ldrh	r3, [r1, #6]
 8003560:	429a      	cmp	r2, r3
 8003562:	d12d      	bne.n	80035c0 <_ZeqRK13Address_fieldS1_+0x76>
        return false;
    if(left.min_value_ != right.min_value_)
 8003564:	6882      	ldr	r2, [r0, #8]
 8003566:	688b      	ldr	r3, [r1, #8]
 8003568:	429a      	cmp	r2, r3
 800356a:	d129      	bne.n	80035c0 <_ZeqRK13Address_fieldS1_+0x76>
        return false;
    if(left.max_value_ != right.max_value_)
 800356c:	68c2      	ldr	r2, [r0, #12]
 800356e:	68cb      	ldr	r3, [r1, #12]
 8003570:	429a      	cmp	r2, r3
 8003572:	d125      	bne.n	80035c0 <_ZeqRK13Address_fieldS1_+0x76>
        return false;
    if(left.reserv_count_ != right.reserv_count_)
 8003574:	6947      	ldr	r7, [r0, #20]
 8003576:	694b      	ldr	r3, [r1, #20]
 8003578:	429f      	cmp	r7, r3
 800357a:	d121      	bne.n	80035c0 <_ZeqRK13Address_fieldS1_+0x76>
        return false;
    if(left.mode_ != right.mode_)
 800357c:	7e02      	ldrb	r2, [r0, #24]
 800357e:	7e0b      	ldrb	r3, [r1, #24]
 8003580:	429a      	cmp	r2, r3
 8003582:	d11d      	bne.n	80035c0 <_ZeqRK13Address_fieldS1_+0x76>
        return false;
    for(int i = 0; i < left.reg_count_; ++i) {
 8003584:	2600      	movs	r6, #0
 8003586:	45b0      	cmp	r8, r6
 8003588:	dd0a      	ble.n	80035a0 <_ZeqRK13Address_fieldS1_+0x56>
        if(left.registers_[i] != right.registers_[i])
 800358a:	6829      	ldr	r1, [r5, #0]
 800358c:	6820      	ldr	r0, [r4, #0]
 800358e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8003592:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8003596:	f7ff fdf4 	bl	8003182 <_ZneRK8RegisterS1_>
 800359a:	b988      	cbnz	r0, 80035c0 <_ZeqRK13Address_fieldS1_+0x76>
    for(int i = 0; i < left.reg_count_; ++i) {
 800359c:	3601      	adds	r6, #1
 800359e:	e7f2      	b.n	8003586 <_ZeqRK13Address_fieldS1_+0x3c>
            return false;
    }
    for(uint32_t i = 0; i < left.reserv_count_; ++i) {
 80035a0:	2300      	movs	r3, #0
 80035a2:	429f      	cmp	r7, r3
 80035a4:	d009      	beq.n	80035ba <_ZeqRK13Address_fieldS1_+0x70>
        if(left.reserved_value_[i] != right.reserved_value_[i])
 80035a6:	6921      	ldr	r1, [r4, #16]
 80035a8:	692a      	ldr	r2, [r5, #16]
 80035aa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80035ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80035b2:	4291      	cmp	r1, r2
 80035b4:	d104      	bne.n	80035c0 <_ZeqRK13Address_fieldS1_+0x76>
    for(uint32_t i = 0; i < left.reserv_count_; ++i) {
 80035b6:	3301      	adds	r3, #1
 80035b8:	e7f3      	b.n	80035a2 <_ZeqRK13Address_fieldS1_+0x58>
            return false;
    }
    return true;
 80035ba:	2001      	movs	r0, #1
}
 80035bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return false;
 80035c0:	2000      	movs	r0, #0
 80035c2:	e7fb      	b.n	80035bc <_ZeqRK13Address_fieldS1_+0x72>

080035c4 <_ZN10LoRa_classD1Ev>:
	init(nullptr);
}
LoRa_class::LoRa_class(SPI_HandleTypeDef *spi) {
	init(spi);
}
LoRa_class::~LoRa_class() {
 80035c4:	b510      	push	{r4, lr}
 80035c6:	4604      	mov	r4, r0
    if(_spi != nullptr)
 80035c8:	6800      	ldr	r0, [r0, #0]
 80035ca:	b110      	cbz	r0, 80035d2 <_ZN10LoRa_classD1Ev+0xe>
        delete _spi;
 80035cc:	2158      	movs	r1, #88	; 0x58
 80035ce:	f006 feaf 	bl	800a330 <_ZdlPvj>
LoRa_class::~LoRa_class() {
 80035d2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80035d6:	f000 ff93 	bl	8004500 <_ZN13LoRa_registerD1Ev>
}
 80035da:	4620      	mov	r0, r4
 80035dc:	bd10      	pop	{r4, pc}
	...

080035e0 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef>:

void LoRa_class::init(SPI_HandleTypeDef *spi) {
 80035e0:	b4f0      	push	{r4, r5, r6, r7}
	_reset_pin = LORA_RESET_Pin;
 80035e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
	_reset_port = LORA_RESET_GPIO_Port;
	_nss_pin = LORA_NSS_Pin;
	_nss_port = LORA_NSS_GPIO_Port;
#ifdef LoRa_DIO0_Pin
	_dio0_pin = LORA_DIO0_Pin;
 80035e6:	f44f 6580 	mov.w	r5, #1024	; 0x400
	_reset_port = LORA_RESET_GPIO_Port;
 80035ea:	4c0c      	ldr	r4, [pc, #48]	; (800361c <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef+0x3c>)
#else
	_dio3_pin = 0;
	_dio3_port = 0;
#endif
	_spi = spi;
	_frequency = 0;
 80035ec:	2600      	movs	r6, #0
	_reset_port = LORA_RESET_GPIO_Port;
 80035ee:	6084      	str	r4, [r0, #8]
	_dio0_port = LORA_DIO0_GPIO_Port;
 80035f0:	6184      	str	r4, [r0, #24]
	_dio1_port = LORA_DIO1_GPIO_Port;
 80035f2:	6204      	str	r4, [r0, #32]
	_dio3_pin = 0;
 80035f4:	2400      	movs	r4, #0
	_frequency = 0;
 80035f6:	2700      	movs	r7, #0
	_reset_pin = LORA_RESET_Pin;
 80035f8:	8083      	strh	r3, [r0, #4]
	_dio0_pin = LORA_DIO0_Pin;
 80035fa:	8285      	strh	r5, [r0, #20]
	_nss_pin = LORA_NSS_Pin;
 80035fc:	2310      	movs	r3, #16
	_dio1_pin = LORA_DIO1_Pin;
 80035fe:	2504      	movs	r5, #4
	_nss_port = LORA_NSS_GPIO_Port;
 8003600:	4a07      	ldr	r2, [pc, #28]	; (8003620 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef+0x40>)
	_FifoTxBaseAddr = 0;
 8003602:	8704      	strh	r4, [r0, #56]	; 0x38
	_frequency = 0;
 8003604:	e9c0 670c 	strd	r6, r7, [r0, #48]	; 0x30
	_dio1_pin = LORA_DIO1_Pin;
 8003608:	8385      	strh	r5, [r0, #28]
	_dio3_pin = 0;
 800360a:	8484      	strh	r4, [r0, #36]	; 0x24
	_dio3_port = 0;
 800360c:	6284      	str	r4, [r0, #40]	; 0x28
	_nss_pin = LORA_NSS_Pin;
 800360e:	8183      	strh	r3, [r0, #12]
	_nss_port = LORA_NSS_GPIO_Port;
 8003610:	6102      	str	r2, [r0, #16]
	_spi = spi;
 8003612:	6001      	str	r1, [r0, #0]
	_packet_length = 0;
	_reg_field.init(spi, _nss_port, _nss_pin);
}
 8003614:	bcf0      	pop	{r4, r5, r6, r7}
	_reg_field.init(spi, _nss_port, _nss_pin);
 8003616:	303c      	adds	r0, #60	; 0x3c
 8003618:	f000 bf73 	b.w	8004502 <_ZN13LoRa_register4initEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 800361c:	40010c00 	.word	0x40010c00
 8003620:	40010800 	.word	0x40010800

08003624 <_ZN10LoRa_classC1Ev>:
LoRa_class::LoRa_class(/* args */) {
 8003624:	b510      	push	{r4, lr}
 8003626:	4604      	mov	r4, r0
 8003628:	303c      	adds	r0, #60	; 0x3c
 800362a:	f000 ff7d 	bl	8004528 <_ZN13LoRa_registerC1Ev>
	init(nullptr);
 800362e:	4620      	mov	r0, r4
 8003630:	2100      	movs	r1, #0
 8003632:	f7ff ffd5 	bl	80035e0 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef>
}
 8003636:	4620      	mov	r0, r4
 8003638:	bd10      	pop	{r4, pc}

0800363a <_ZN10LoRa_class9field_setE13Address_fieldmb>:

uint8_t LoRa_class::field_set(Address_field field, uint32_t value, bool write) {
 800363a:	b084      	sub	sp, #16
 800363c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800363e:	b087      	sub	sp, #28
 8003640:	ac0d      	add	r4, sp, #52	; 0x34
 8003642:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    uint8_t result;
    result = _reg_field.set_field_value(field, value);
 8003646:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003648:	ad10      	add	r5, sp, #64	; 0x40
 800364a:	9304      	str	r3, [sp, #16]
 800364c:	f100 063c 	add.w	r6, r0, #60	; 0x3c
 8003650:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003654:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
uint8_t LoRa_class::field_set(Address_field field, uint32_t value, bool write) {
 8003658:	f89d 7054 	ldrb.w	r7, [sp, #84]	; 0x54
    result = _reg_field.set_field_value(field, value);
 800365c:	4630      	mov	r0, r6
 800365e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003662:	f001 f97d 	bl	8004960 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
    if(write) {
 8003666:	b15f      	cbz	r7, 8003680 <_ZN10LoRa_class9field_setE13Address_fieldmb+0x46>
        result = _reg_field.register_write(field, true, true);
 8003668:	2301      	movs	r3, #1
 800366a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800366e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003672:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003676:	4630      	mov	r0, r6
 8003678:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800367c:	f001 f9b8 	bl	80049f0 <_ZN13LoRa_register14register_writeE13Address_fieldbb>
    }
    return result;
}
 8003680:	b007      	add	sp, #28
 8003682:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003686:	b004      	add	sp, #16
 8003688:	4770      	bx	lr

0800368a <_ZN10LoRa_class9field_setEP13Address_fieldPmhb>:
uint8_t LoRa_class::field_set(Address_field* fields, uint32_t* values, uint8_t amt, bool write) {
 800368a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t result;
    result = _reg_field.set_field_value(fields, values, amt);
 800368e:	f100 043c 	add.w	r4, r0, #60	; 0x3c
uint8_t LoRa_class::field_set(Address_field* fields, uint32_t* values, uint8_t amt, bool write) {
 8003692:	f89d 7018 	ldrb.w	r7, [sp, #24]
    result = _reg_field.set_field_value(fields, values, amt);
 8003696:	4620      	mov	r0, r4
uint8_t LoRa_class::field_set(Address_field* fields, uint32_t* values, uint8_t amt, bool write) {
 8003698:	460d      	mov	r5, r1
 800369a:	461e      	mov	r6, r3
    result = _reg_field.set_field_value(fields, values, amt);
 800369c:	f001 f91c 	bl	80048d8 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
    if(write) {
 80036a0:	b147      	cbz	r7, 80036b4 <_ZN10LoRa_class9field_setEP13Address_fieldPmhb+0x2a>
        result = _reg_field.register_write(fields, amt, true, true);
 80036a2:	2301      	movs	r3, #1
 80036a4:	4632      	mov	r2, r6
 80036a6:	4629      	mov	r1, r5
 80036a8:	4620      	mov	r0, r4
 80036aa:	9306      	str	r3, [sp, #24]
    }
    return result;
}
 80036ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        result = _reg_field.register_write(fields, amt, true, true);
 80036b0:	f001 b968 	b.w	8004984 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
}
 80036b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080036b8 <_ZN10LoRa_class9field_getE13Address_fieldPmb>:

uint8_t LoRa_class::field_get(Address_field field, uint32_t* value, bool read) {
 80036b8:	b084      	sub	sp, #16
 80036ba:	b530      	push	{r4, r5, lr}
 80036bc:	4605      	mov	r5, r0
 80036be:	b087      	sub	sp, #28
 80036c0:	ac0b      	add	r4, sp, #44	; 0x2c
 80036c2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return _reg_field.get_field_value(field, value, read);
 80036c6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80036ca:	9305      	str	r3, [sp, #20]
 80036cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80036ce:	9304      	str	r3, [sp, #16]
 80036d0:	ab0e      	add	r3, sp, #56	; 0x38
 80036d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036d4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80036d8:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 80036dc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80036e0:	f001 f8e7 	bl	80048b2 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>
}
 80036e4:	b007      	add	sp, #28
 80036e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80036ea:	b004      	add	sp, #16
 80036ec:	4770      	bx	lr

080036ee <_ZN10LoRa_class9field_getEP13Address_fieldPmhb>:
uint8_t LoRa_class::field_get(Address_field fields[], uint32_t* values, uint8_t amt, bool read) {
 80036ee:	b410      	push	{r4}
 80036f0:	f89d 4004 	ldrb.w	r4, [sp, #4]
    return _reg_field.get_field_value(fields, values, amt, read);
 80036f4:	303c      	adds	r0, #60	; 0x3c
 80036f6:	9401      	str	r4, [sp, #4]
}
 80036f8:	bc10      	pop	{r4}
    return _reg_field.get_field_value(fields, values, amt, read);
 80036fa:	f001 b8b2 	b.w	8004862 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb>
	...

08003700 <_ZN10LoRa_class8set_modeEh>:
    // переход в режим сна
    mode_sleep();
}


uint8_t LoRa_class::set_mode(uint8_t mode) {
 8003700:	b5f0      	push	{r4, r5, r6, r7, lr}
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8003702:	4d14      	ldr	r5, [pc, #80]	; (8003754 <_ZN10LoRa_class8set_modeEh+0x54>)
uint8_t LoRa_class::set_mode(uint8_t mode) {
 8003704:	b09b      	sub	sp, #108	; 0x6c
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8003706:	ac05      	add	r4, sp, #20
uint8_t LoRa_class::set_mode(uint8_t mode) {
 8003708:	4606      	mov	r6, r0
 800370a:	460f      	mov	r7, r1
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 800370c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800370e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003710:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003714:	4d10      	ldr	r5, [pc, #64]	; (8003758 <_ZN10LoRa_class8set_modeEh+0x58>)
 8003716:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800371a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800371c:	ac0c      	add	r4, sp, #48	; 0x30
 800371e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003720:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003724:	4d0d      	ldr	r5, [pc, #52]	; (800375c <_ZN10LoRa_class8set_modeEh+0x5c>)
 8003726:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800372a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800372c:	ac13      	add	r4, sp, #76	; 0x4c
 800372e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003730:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    uint32_t values[3] = {1, 0, mode};
 8003734:	2301      	movs	r3, #1
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8003736:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    uint32_t values[3] = {1, 0, mode};
 800373a:	2200      	movs	r2, #0
    return field_set(fields, values, 3);
 800373c:	9300      	str	r3, [sp, #0]
    uint32_t values[3] = {1, 0, mode};
 800373e:	e9cd 3202 	strd	r3, r2, [sp, #8]
    return field_set(fields, values, 3);
 8003742:	4630      	mov	r0, r6
 8003744:	2303      	movs	r3, #3
 8003746:	aa02      	add	r2, sp, #8
 8003748:	a905      	add	r1, sp, #20
    uint32_t values[3] = {1, 0, mode};
 800374a:	9704      	str	r7, [sp, #16]
    return field_set(fields, values, 3);
 800374c:	f7ff ff9d 	bl	800368a <_ZN10LoRa_class9field_setEP13Address_fieldPmhb>
}
 8003750:	b01b      	add	sp, #108	; 0x6c
 8003752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003754:	20001d34 	.word	0x20001d34
 8003758:	20001d6c 	.word	0x20001d6c
 800375c:	20001da4 	.word	0x20001da4

08003760 <_ZN10LoRa_class10mode_sleepEv>:
// Режим сна/настройки
uint8_t LoRa_class::mode_sleep() {
    return set_mode(MODE_SLEEP);
 8003760:	2100      	movs	r1, #0
 8003762:	f7ff bfcd 	b.w	8003700 <_ZN10LoRa_class8set_modeEh>

08003766 <_ZN10LoRa_class10mode_STDBYEv>:
}
// Режим ожидания
uint8_t LoRa_class::mode_STDBY() {
    return set_mode(MODE_STDBY);
 8003766:	2101      	movs	r1, #1
 8003768:	f7ff bfca 	b.w	8003700 <_ZN10LoRa_class8set_modeEh>

0800376c <_ZN10LoRa_class7mode_TXEb>:
}
// Режим отправки
uint8_t LoRa_class::mode_TX(bool set_dio) {
 800376c:	b530      	push	{r4, r5, lr}
    if (set_dio & (_dio0_pin != 0))
 800376e:	8a83      	ldrh	r3, [r0, #20]
uint8_t LoRa_class::mode_TX(bool set_dio) {
 8003770:	4604      	mov	r4, r0
 8003772:	b087      	sub	sp, #28
    if (set_dio & (_dio0_pin != 0))
 8003774:	b173      	cbz	r3, 8003794 <_ZN10LoRa_class7mode_TXEb+0x28>
 8003776:	b169      	cbz	r1, 8003794 <_ZN10LoRa_class7mode_TXEb+0x28>
        field_set(Dio0Mapping, 1);
 8003778:	2301      	movs	r3, #1
 800377a:	4d0a      	ldr	r5, [pc, #40]	; (80037a4 <_ZN10LoRa_class7mode_TXEb+0x38>)
 800377c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003780:	f105 030c 	add.w	r3, r5, #12
 8003784:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003786:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800378a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800378e:	4620      	mov	r0, r4
 8003790:	f7ff ff53 	bl	800363a <_ZN10LoRa_class9field_setE13Address_fieldmb>
    return set_mode(MODE_TX);
 8003794:	2103      	movs	r1, #3
 8003796:	4620      	mov	r0, r4
}
 8003798:	b007      	add	sp, #28
 800379a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return set_mode(MODE_TX);
 800379e:	f7ff bfaf 	b.w	8003700 <_ZN10LoRa_class8set_modeEh>
 80037a2:	bf00      	nop
 80037a4:	20001c00 	.word	0x20001c00

080037a8 <_ZN10LoRa_class9mode_FSTXEv>:
uint8_t LoRa_class::mode_FSTX() {
    return set_mode(MODE_FSTX);
 80037a8:	2102      	movs	r1, #2
 80037aa:	f7ff bfa9 	b.w	8003700 <_ZN10LoRa_class8set_modeEh>
	...

080037b0 <_ZN10LoRa_class14mode_RX_singleEb>:
        field_set(Dio1Mapping, 0);
    }
    return set_mode(MODE_RX_CONTINUOUS);
}
// Режим единичного приёма
uint8_t LoRa_class::mode_RX_single(bool set_dio) {
 80037b0:	b570      	push	{r4, r5, r6, lr}
    if (set_dio & ((_dio0_pin != 0) || (_dio1_pin != 0))) {
 80037b2:	8a83      	ldrh	r3, [r0, #20]
uint8_t LoRa_class::mode_RX_single(bool set_dio) {
 80037b4:	4606      	mov	r6, r0
 80037b6:	b08e      	sub	sp, #56	; 0x38
    if (set_dio & ((_dio0_pin != 0) || (_dio1_pin != 0))) {
 80037b8:	b90b      	cbnz	r3, 80037be <_ZN10LoRa_class14mode_RX_singleEb+0xe>
 80037ba:	8b83      	ldrh	r3, [r0, #28]
 80037bc:	b31b      	cbz	r3, 8003806 <_ZN10LoRa_class14mode_RX_singleEb+0x56>
 80037be:	b311      	cbz	r1, 8003806 <_ZN10LoRa_class14mode_RX_singleEb+0x56>
        field_set(Dio0Mapping, 0, false);
 80037c0:	4d14      	ldr	r5, [pc, #80]	; (8003814 <_ZN10LoRa_class14mode_RX_singleEb+0x64>)
 80037c2:	ac07      	add	r4, sp, #28
 80037c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    result = _reg_field.set_field_value(field, value);
 80037cc:	2500      	movs	r5, #0
 80037ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80037d2:	ab0e      	add	r3, sp, #56	; 0x38
 80037d4:	9504      	str	r5, [sp, #16]
 80037d6:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80037da:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80037de:	ab07      	add	r3, sp, #28
 80037e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037e2:	f106 003c 	add.w	r0, r6, #60	; 0x3c
 80037e6:	f001 f8bb 	bl	8004960 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
        field_set(Dio1Mapping, 0);
 80037ea:	2301      	movs	r3, #1
 80037ec:	4c0a      	ldr	r4, [pc, #40]	; (8003818 <_ZN10LoRa_class14mode_RX_singleEb+0x68>)
 80037ee:	e9cd 5304 	strd	r5, r3, [sp, #16]
 80037f2:	f104 030c 	add.w	r3, r4, #12
 80037f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037f8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80037fc:	4630      	mov	r0, r6
 80037fe:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003802:	f7ff ff1a 	bl	800363a <_ZN10LoRa_class9field_setE13Address_fieldmb>
    }
    return set_mode(MODE_RX_SINGLE);
 8003806:	2106      	movs	r1, #6
 8003808:	4630      	mov	r0, r6
}
 800380a:	b00e      	add	sp, #56	; 0x38
 800380c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return set_mode(MODE_RX_SINGLE);
 8003810:	f7ff bf76 	b.w	8003700 <_ZN10LoRa_class8set_modeEh>
 8003814:	20001c00 	.word	0x20001c00
 8003818:	20001c1c 	.word	0x20001c1c

0800381c <_ZN10LoRa_class12set_TX_powerEhbh>:
    return set_mode(MODE_CAD);
}


// Установка силы отправляемого пакета
uint8_t LoRa_class::set_TX_power(uint8_t power, bool paboost, uint8_t max_power) {
 800381c:	469c      	mov	ip, r3
 800381e:	f1bc 0f07 	cmp.w	ip, #7
 8003822:	bf28      	it	cs
 8003824:	f04f 0c07 	movcs.w	ip, #7
 8003828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Address_field fields[4] = {PaDac, PaSelect, MaxPower, OutputPower};
 800382c:	4e2f      	ldr	r6, [pc, #188]	; (80038ec <_ZN10LoRa_class12set_TX_powerEhbh+0xd0>)
uint8_t LoRa_class::set_TX_power(uint8_t power, bool paboost, uint8_t max_power) {
 800382e:	b0a2      	sub	sp, #136	; 0x88
    Address_field fields[4] = {PaDac, PaSelect, MaxPower, OutputPower};
 8003830:	ad06      	add	r5, sp, #24
uint8_t LoRa_class::set_TX_power(uint8_t power, bool paboost, uint8_t max_power) {
 8003832:	4607      	mov	r7, r0
 8003834:	4690      	mov	r8, r2
 8003836:	460c      	mov	r4, r1
    Address_field fields[4] = {PaDac, PaSelect, MaxPower, OutputPower};
 8003838:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800383a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800383c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003840:	4e2b      	ldr	r6, [pc, #172]	; (80038f0 <_ZN10LoRa_class12set_TX_powerEhbh+0xd4>)
 8003842:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003846:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003848:	ad0d      	add	r5, sp, #52	; 0x34
 800384a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800384c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003850:	4e28      	ldr	r6, [pc, #160]	; (80038f4 <_ZN10LoRa_class12set_TX_powerEhbh+0xd8>)
 8003852:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003856:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003858:	ad14      	add	r5, sp, #80	; 0x50
 800385a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800385c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003860:	4e25      	ldr	r6, [pc, #148]	; (80038f8 <_ZN10LoRa_class12set_TX_powerEhbh+0xdc>)
 8003862:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003866:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003868:	ad1b      	add	r5, sp, #108	; 0x6c
 800386a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800386c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003870:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    uint32_t pa_dac, pa_select;
    int16_t power_adjustment, min_power_value, max_power_value;
    if (max_power < 0x01)
 8003874:	4665      	mov	r5, ip
        max_power = 0x01;
    else if (max_power > 0x07)
        max_power = 0x07;
    _reg_field.register_read(fields, 4);
 8003876:	2301      	movs	r3, #1
 8003878:	2d01      	cmp	r5, #1
 800387a:	f04f 0204 	mov.w	r2, #4
 800387e:	a906      	add	r1, sp, #24
 8003880:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003884:	bf38      	it	cc
 8003886:	2501      	movcc	r5, #1
 8003888:	f000 ffbb 	bl	8004802 <_ZN13LoRa_register13register_readEP13Address_fieldhb>
    // Изменение бита PABOOST
    if (paboost) {
 800388c:	f1b8 0f00 	cmp.w	r8, #0
 8003890:	d025      	beq.n	80038de <_ZN10LoRa_class12set_TX_powerEhbh+0xc2>
        pa_select = 1;
        min_power_value = 2;
        max_power_value = 20;
 8003892:	2c11      	cmp	r4, #17
 8003894:	f04f 0314 	mov.w	r3, #20
 8003898:	f04f 0002 	mov.w	r0, #2
 800389c:	bf8c      	ite	hi
 800389e:	f06f 0104 	mvnhi.w	r1, #4
 80038a2:	f06f 0101 	mvnls.w	r1, #1
 80038a6:	2201      	movs	r2, #1
        min_power_value = -1;
        max_power_value = 14;
        power_adjustment = 1;
    }
    // Проверка выхода силы сигнала за диапазон
    if (power < min_power_value)
 80038a8:	4284      	cmp	r4, r0
        power = min_power_value;
 80038aa:	bfb8      	it	lt
 80038ac:	b2c4      	uxtblt	r4, r0
    if (power > max_power_value)
 80038ae:	429c      	cmp	r4, r3
        power = max_power_value;
 80038b0:	bfc8      	it	gt
 80038b2:	b2dc      	uxtbgt	r4, r3
    // Корректировка параметра
    power += power_adjustment;
 80038b4:	440c      	add	r4, r1
 80038b6:	b2e4      	uxtb	r4, r4
    // Настройка флага высокого сигнала
    if (power > 17)
        pa_dac = RF_PADAC_20DBM_ON;
    else
        pa_dac = RF_PADAC_20DBM_OFF;
 80038b8:	2c11      	cmp	r4, #17
 80038ba:	bf8c      	ite	hi
 80038bc:	2307      	movhi	r3, #7
 80038be:	2304      	movls	r3, #4
    // Передача настроек
    uint32_t values[4] = {pa_dac, pa_select, max_power, power};
 80038c0:	e9cd 3202 	strd	r3, r2, [sp, #8]
    return field_set(fields, values, 4);
 80038c4:	2301      	movs	r3, #1
 80038c6:	4638      	mov	r0, r7
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	aa02      	add	r2, sp, #8
 80038cc:	2304      	movs	r3, #4
 80038ce:	a906      	add	r1, sp, #24
    uint32_t values[4] = {pa_dac, pa_select, max_power, power};
 80038d0:	e9cd 5404 	strd	r5, r4, [sp, #16]
    return field_set(fields, values, 4);
 80038d4:	f7ff fed9 	bl	800368a <_ZN10LoRa_class9field_setEP13Address_fieldPmhb>
}
 80038d8:	b022      	add	sp, #136	; 0x88
 80038da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        max_power_value = 14;
 80038de:	230e      	movs	r3, #14
        min_power_value = -1;
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        power_adjustment = 1;
 80038e4:	2101      	movs	r1, #1
        pa_select = 0;
 80038e6:	4642      	mov	r2, r8
 80038e8:	e7de      	b.n	80038a8 <_ZN10LoRa_class12set_TX_powerEhbh+0x8c>
 80038ea:	bf00      	nop
 80038ec:	20001ddc 	.word	0x20001ddc
 80038f0:	20001df8 	.word	0x20001df8
 80038f4:	20001d88 	.word	0x20001d88
 80038f8:	20001dc0 	.word	0x20001dc0

080038fc <_ZN10LoRa_class13set_frequencyEy>:

// Установка частоты радиосигнала
uint8_t LoRa_class::set_frequency(uint64_t frequency) {
 80038fc:	b570      	push	{r4, r5, r6, lr}
    _frequency = frequency;
 80038fe:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
uint8_t LoRa_class::set_frequency(uint64_t frequency) {
 8003902:	4615      	mov	r5, r2
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
    return field_set(Frf, frf);
 8003904:	2201      	movs	r2, #1
uint8_t LoRa_class::set_frequency(uint64_t frequency) {
 8003906:	b086      	sub	sp, #24
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
 8003908:	04d9      	lsls	r1, r3, #19
uint8_t LoRa_class::set_frequency(uint64_t frequency) {
 800390a:	4604      	mov	r4, r0
    return field_set(Frf, frf);
 800390c:	9205      	str	r2, [sp, #20]
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
 800390e:	2300      	movs	r3, #0
 8003910:	4a09      	ldr	r2, [pc, #36]	; (8003938 <_ZN10LoRa_class13set_frequencyEy+0x3c>)
 8003912:	04e8      	lsls	r0, r5, #19
 8003914:	ea41 3155 	orr.w	r1, r1, r5, lsr #13
 8003918:	f7fd f986 	bl	8000c28 <__aeabi_uldivmod>
    return field_set(Frf, frf);
 800391c:	4e07      	ldr	r6, [pc, #28]	; (800393c <_ZN10LoRa_class13set_frequencyEy+0x40>)
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
 800391e:	9004      	str	r0, [sp, #16]
    return field_set(Frf, frf);
 8003920:	f106 030c 	add.w	r3, r6, #12
 8003924:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003926:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800392a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800392e:	4620      	mov	r0, r4
 8003930:	f7ff fe83 	bl	800363a <_ZN10LoRa_class9field_setE13Address_fieldmb>
}
 8003934:	b006      	add	sp, #24
 8003936:	bd70      	pop	{r4, r5, r6, pc}
 8003938:	01e84800 	.word	0x01e84800
 800393c:	20001cfc 	.word	0x20001cfc

08003940 <_ZN10LoRa_class20set_spreading_factorEh>:

// Установка силы коэффициента распространения SF
uint8_t LoRa_class::set_spreading_factor(uint8_t SF) {
 8003940:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t detection_optimize, detection_threshold;
    if (SF < 6)
 8003942:	2905      	cmp	r1, #5
uint8_t LoRa_class::set_spreading_factor(uint8_t SF) {
 8003944:	4607      	mov	r7, r0
 8003946:	460e      	mov	r6, r1
 8003948:	b09b      	sub	sp, #108	; 0x6c
    if (SF < 6)
 800394a:	d930      	bls.n	80039ae <_ZN10LoRa_class20set_spreading_factorEh+0x6e>
        SF = 6;
    else if (SF > 12)
 800394c:	290c      	cmp	r1, #12
 800394e:	d834      	bhi.n	80039ba <_ZN10LoRa_class20set_spreading_factorEh+0x7a>
        SF = 12;
    if (SF == 6) {
 8003950:	2906      	cmp	r1, #6
        detection_optimize = DO_SF6;
        detection_threshold = DT_SF6;
    }
    else {
        detection_optimize = DO_SF7_12;
        detection_threshold = DT_SF7_12;
 8003952:	bf0b      	itete	eq
 8003954:	f04f 0c0c 	moveq.w	ip, #12
 8003958:	f04f 0c0a 	movne.w	ip, #10
 800395c:	f04f 0e05 	moveq.w	lr, #5
 8003960:	f04f 0e03 	movne.w	lr, #3
    }
    Address_field fields[3] = {DetectionOptimize, DetectionThreshold, SpreadingFactor};
 8003964:	4d18      	ldr	r5, [pc, #96]	; (80039c8 <_ZN10LoRa_class20set_spreading_factorEh+0x88>)
 8003966:	ac05      	add	r4, sp, #20
 8003968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800396a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800396c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003970:	4d16      	ldr	r5, [pc, #88]	; (80039cc <_ZN10LoRa_class20set_spreading_factorEh+0x8c>)
 8003972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003978:	ac0c      	add	r4, sp, #48	; 0x30
 800397a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800397c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003980:	4d13      	ldr	r5, [pc, #76]	; (80039d0 <_ZN10LoRa_class20set_spreading_factorEh+0x90>)
 8003982:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003988:	ac13      	add	r4, sp, #76	; 0x4c
 800398a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800398c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    uint32_t values[3] = {detection_optimize, detection_threshold, SF};
    return field_set(fields, values, 3);
 8003990:	2301      	movs	r3, #1
    Address_field fields[3] = {DetectionOptimize, DetectionThreshold, SpreadingFactor};
 8003992:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return field_set(fields, values, 3);
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	4638      	mov	r0, r7
 800399a:	2303      	movs	r3, #3
 800399c:	aa02      	add	r2, sp, #8
 800399e:	a905      	add	r1, sp, #20
    uint32_t values[3] = {detection_optimize, detection_threshold, SF};
 80039a0:	e9cd ec02 	strd	lr, ip, [sp, #8]
 80039a4:	9604      	str	r6, [sp, #16]
    return field_set(fields, values, 3);
 80039a6:	f7ff fe70 	bl	800368a <_ZN10LoRa_class9field_setEP13Address_fieldPmhb>
}
 80039aa:	b01b      	add	sp, #108	; 0x6c
 80039ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SF = 6;
 80039ae:	2606      	movs	r6, #6
        detection_threshold = DT_SF6;
 80039b0:	f04f 0c0c 	mov.w	ip, #12
        detection_optimize = DO_SF6;
 80039b4:	f04f 0e05 	mov.w	lr, #5
 80039b8:	e7d4      	b.n	8003964 <_ZN10LoRa_class20set_spreading_factorEh+0x24>
        SF = 12;
 80039ba:	260c      	movs	r6, #12
        detection_threshold = DT_SF7_12;
 80039bc:	f04f 0c0a 	mov.w	ip, #10
        detection_optimize = DO_SF7_12;
 80039c0:	f04f 0e03 	mov.w	lr, #3
 80039c4:	e7ce      	b.n	8003964 <_ZN10LoRa_class20set_spreading_factorEh+0x24>
 80039c6:	bf00      	nop
 80039c8:	20001bc8 	.word	0x20001bc8
 80039cc:	20001be4 	.word	0x20001be4
 80039d0:	20001ef4 	.word	0x20001ef4
 80039d4:	00000000 	.word	0x00000000

080039d8 <_ZN10LoRa_class20set_signal_bandwidthEy>:

// Установка пропускной способности
uint8_t LoRa_class::set_signal_bandwidth(uint64_t sbw) {
 80039d8:	b570      	push	{r4, r5, r6, lr}
    uint8_t bw;
    if (sbw <= 7.8E3)        bw = 0;
 80039da:	4619      	mov	r1, r3
uint8_t LoRa_class::set_signal_bandwidth(uint64_t sbw) {
 80039dc:	b086      	sub	sp, #24
 80039de:	4606      	mov	r6, r0
    if (sbw <= 7.8E3)        bw = 0;
 80039e0:	4610      	mov	r0, r2
 80039e2:	f7fc fd3b 	bl	800045c <__aeabi_ul2d>
 80039e6:	a338      	add	r3, pc, #224	; (adr r3, 8003ac8 <_ZN10LoRa_class20set_signal_bandwidthEy+0xf0>)
 80039e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ec:	4604      	mov	r4, r0
 80039ee:	460d      	mov	r5, r1
 80039f0:	f7fc ffe6 	bl	80009c0 <__aeabi_dcmple>
 80039f4:	2800      	cmp	r0, #0
 80039f6:	d156      	bne.n	8003aa6 <_ZN10LoRa_class20set_signal_bandwidthEy+0xce>
    else if (sbw <= 10.4E3)  bw = 1;
 80039f8:	a335      	add	r3, pc, #212	; (adr r3, 8003ad0 <_ZN10LoRa_class20set_signal_bandwidthEy+0xf8>)
 80039fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fe:	4620      	mov	r0, r4
 8003a00:	4629      	mov	r1, r5
 8003a02:	f7fc ffdd 	bl	80009c0 <__aeabi_dcmple>
 8003a06:	2800      	cmp	r0, #0
 8003a08:	d14f      	bne.n	8003aaa <_ZN10LoRa_class20set_signal_bandwidthEy+0xd2>
    else if (sbw <= 15.6E3)  bw = 2;
 8003a0a:	a333      	add	r3, pc, #204	; (adr r3, 8003ad8 <_ZN10LoRa_class20set_signal_bandwidthEy+0x100>)
 8003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a10:	4620      	mov	r0, r4
 8003a12:	4629      	mov	r1, r5
 8003a14:	f7fc ffd4 	bl	80009c0 <__aeabi_dcmple>
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	d148      	bne.n	8003aae <_ZN10LoRa_class20set_signal_bandwidthEy+0xd6>
    else if (sbw <= 20.8E3)  bw = 3;
 8003a1c:	a330      	add	r3, pc, #192	; (adr r3, 8003ae0 <_ZN10LoRa_class20set_signal_bandwidthEy+0x108>)
 8003a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a22:	4620      	mov	r0, r4
 8003a24:	4629      	mov	r1, r5
 8003a26:	f7fc ffcb 	bl	80009c0 <__aeabi_dcmple>
 8003a2a:	2800      	cmp	r0, #0
 8003a2c:	d141      	bne.n	8003ab2 <_ZN10LoRa_class20set_signal_bandwidthEy+0xda>
    else if (sbw <= 31.25E3) bw = 4;
 8003a2e:	a32e      	add	r3, pc, #184	; (adr r3, 8003ae8 <_ZN10LoRa_class20set_signal_bandwidthEy+0x110>)
 8003a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a34:	4620      	mov	r0, r4
 8003a36:	4629      	mov	r1, r5
 8003a38:	f7fc ffc2 	bl	80009c0 <__aeabi_dcmple>
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d13a      	bne.n	8003ab6 <_ZN10LoRa_class20set_signal_bandwidthEy+0xde>
    else if (sbw <= 41.7E3)  bw = 5;
 8003a40:	a32b      	add	r3, pc, #172	; (adr r3, 8003af0 <_ZN10LoRa_class20set_signal_bandwidthEy+0x118>)
 8003a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a46:	4620      	mov	r0, r4
 8003a48:	4629      	mov	r1, r5
 8003a4a:	f7fc ffb9 	bl	80009c0 <__aeabi_dcmple>
 8003a4e:	bba0      	cbnz	r0, 8003aba <_ZN10LoRa_class20set_signal_bandwidthEy+0xe2>
    else if (sbw <= 62.5E3)  bw = 6;
 8003a50:	a329      	add	r3, pc, #164	; (adr r3, 8003af8 <_ZN10LoRa_class20set_signal_bandwidthEy+0x120>)
 8003a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a56:	4620      	mov	r0, r4
 8003a58:	4629      	mov	r1, r5
 8003a5a:	f7fc ffb1 	bl	80009c0 <__aeabi_dcmple>
 8003a5e:	bb70      	cbnz	r0, 8003abe <_ZN10LoRa_class20set_signal_bandwidthEy+0xe6>
    else if (sbw <= 125E3)   bw = 7;
 8003a60:	a327      	add	r3, pc, #156	; (adr r3, 8003b00 <_ZN10LoRa_class20set_signal_bandwidthEy+0x128>)
 8003a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a66:	4620      	mov	r0, r4
 8003a68:	4629      	mov	r1, r5
 8003a6a:	f7fc ffa9 	bl	80009c0 <__aeabi_dcmple>
 8003a6e:	bb40      	cbnz	r0, 8003ac2 <_ZN10LoRa_class20set_signal_bandwidthEy+0xea>
    else if (sbw <= 250E3)   bw = 8;
 8003a70:	a325      	add	r3, pc, #148	; (adr r3, 8003b08 <_ZN10LoRa_class20set_signal_bandwidthEy+0x130>)
 8003a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a76:	4620      	mov	r0, r4
 8003a78:	4629      	mov	r1, r5
 8003a7a:	f7fc ffa1 	bl	80009c0 <__aeabi_dcmple>
    else                     bw = 9;
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	bf14      	ite	ne
 8003a82:	2308      	movne	r3, #8
 8003a84:	2309      	moveq	r3, #9
    return field_set(Bw, bw);
 8003a86:	2201      	movs	r2, #1
 8003a88:	4c21      	ldr	r4, [pc, #132]	; (8003b10 <_ZN10LoRa_class20set_signal_bandwidthEy+0x138>)
 8003a8a:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8003a8e:	f104 030c 	add.w	r3, r4, #12
 8003a92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a94:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003a98:	4630      	mov	r0, r6
 8003a9a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003a9e:	f7ff fdcc 	bl	800363a <_ZN10LoRa_class9field_setE13Address_fieldmb>
}
 8003aa2:	b006      	add	sp, #24
 8003aa4:	bd70      	pop	{r4, r5, r6, pc}
    if (sbw <= 7.8E3)        bw = 0;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	e7ed      	b.n	8003a86 <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 10.4E3)  bw = 1;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e7eb      	b.n	8003a86 <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 15.6E3)  bw = 2;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e7e9      	b.n	8003a86 <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 20.8E3)  bw = 3;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e7e7      	b.n	8003a86 <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 31.25E3) bw = 4;
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	e7e5      	b.n	8003a86 <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 41.7E3)  bw = 5;
 8003aba:	2305      	movs	r3, #5
 8003abc:	e7e3      	b.n	8003a86 <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 62.5E3)  bw = 6;
 8003abe:	2306      	movs	r3, #6
 8003ac0:	e7e1      	b.n	8003a86 <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 125E3)   bw = 7;
 8003ac2:	2307      	movs	r3, #7
 8003ac4:	e7df      	b.n	8003a86 <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
 8003ac6:	bf00      	nop
 8003ac8:	00000000 	.word	0x00000000
 8003acc:	40be7800 	.word	0x40be7800
 8003ad0:	00000000 	.word	0x00000000
 8003ad4:	40c45000 	.word	0x40c45000
 8003ad8:	00000000 	.word	0x00000000
 8003adc:	40ce7800 	.word	0x40ce7800
 8003ae0:	00000000 	.word	0x00000000
 8003ae4:	40d45000 	.word	0x40d45000
 8003ae8:	00000000 	.word	0x00000000
 8003aec:	40de8480 	.word	0x40de8480
 8003af0:	00000000 	.word	0x00000000
 8003af4:	40e45c80 	.word	0x40e45c80
 8003af8:	00000000 	.word	0x00000000
 8003afc:	40ee8480 	.word	0x40ee8480
 8003b00:	00000000 	.word	0x00000000
 8003b04:	40fe8480 	.word	0x40fe8480
 8003b08:	00000000 	.word	0x00000000
 8003b0c:	410e8480 	.word	0x410e8480
 8003b10:	20001b74 	.word	0x20001b74

08003b14 <_ZN10LoRa_class10crc_enableEv>:
    return field_set(SyncWord, SW);
}

// Включение CRC на LoRa-модуле
uint8_t LoRa_class::crc_enable() {
    return field_set(RxPayloadCrcOn, 1);
 8003b14:	2301      	movs	r3, #1
uint8_t LoRa_class::crc_enable() {
 8003b16:	b530      	push	{r4, r5, lr}
 8003b18:	4605      	mov	r5, r0
 8003b1a:	b087      	sub	sp, #28
    return field_set(RxPayloadCrcOn, 1);
 8003b1c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003b20:	4c06      	ldr	r4, [pc, #24]	; (8003b3c <_ZN10LoRa_class10crc_enableEv+0x28>)
 8003b22:	f104 030c 	add.w	r3, r4, #12
 8003b26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b28:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003b2c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003b30:	4628      	mov	r0, r5
 8003b32:	f7ff fd82 	bl	800363a <_ZN10LoRa_class9field_setE13Address_fieldmb>
}
 8003b36:	b007      	add	sp, #28
 8003b38:	bd30      	pop	{r4, r5, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20001ebc 	.word	0x20001ebc

08003b40 <_ZN10LoRa_class5beginEybhhyh>:
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8003b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b44:	4604      	mov	r4, r0
    uint32_t result = 0;
 8003b46:	2700      	movs	r7, #0
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8003b48:	b08e      	sub	sp, #56	; 0x38
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 8003b4a:	8881      	ldrh	r1, [r0, #4]
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8003b4c:	4692      	mov	sl, r2
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 8003b4e:	6880      	ldr	r0, [r0, #8]
 8003b50:	2201      	movs	r2, #1
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8003b52:	4699      	mov	r9, r3
    uint32_t result = 0;
 8003b54:	9706      	str	r7, [sp, #24]
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 8003b56:	f004 f955 	bl	8007e04 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_RESET);
 8003b5a:	463a      	mov	r2, r7
 8003b5c:	88a1      	ldrh	r1, [r4, #4]
 8003b5e:	68a0      	ldr	r0, [r4, #8]
 8003b60:	f004 f950 	bl	8007e04 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8003b64:	2014      	movs	r0, #20
 8003b66:	f003 fca9 	bl	80074bc <HAL_Delay>
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 8003b6a:	4e6a      	ldr	r6, [pc, #424]	; (8003d14 <_ZN10LoRa_class5beginEybhhyh+0x1d4>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	88a1      	ldrh	r1, [r4, #4]
 8003b70:	68a0      	ldr	r0, [r4, #8]
 8003b72:	f004 f947 	bl	8007e04 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8003b76:	ad07      	add	r5, sp, #28
 8003b78:	2032      	movs	r0, #50	; 0x32
 8003b7a:	f003 fc9f 	bl	80074bc <HAL_Delay>
    amt = field_get(Version, &result);
 8003b7e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b82:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003b86:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    return _reg_field.get_field_value(field, value, read);
 8003b8a:	ab06      	add	r3, sp, #24
 8003b8c:	9304      	str	r3, [sp, #16]
 8003b8e:	9705      	str	r7, [sp, #20]
 8003b90:	ab0e      	add	r3, sp, #56	; 0x38
 8003b92:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8003b96:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003b9a:	ab07      	add	r3, sp, #28
 8003b9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b9e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8003ba2:	f000 fe86 	bl	80048b2 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>
    if ((result != 0x12) || (amt != 1)) return 2;
 8003ba6:	9b06      	ldr	r3, [sp, #24]
 8003ba8:	2b12      	cmp	r3, #18
 8003baa:	f040 8098 	bne.w	8003cde <_ZN10LoRa_class5beginEybhhyh+0x19e>
 8003bae:	2801      	cmp	r0, #1
 8003bb0:	f040 8095 	bne.w	8003cde <_ZN10LoRa_class5beginEybhhyh+0x19e>
    if(mode_sleep() != 1) return 3;
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	f7ff fdd3 	bl	8003760 <_ZN10LoRa_class10mode_sleepEv>
 8003bba:	2801      	cmp	r0, #1
 8003bbc:	4680      	mov	r8, r0
 8003bbe:	f040 8090 	bne.w	8003ce2 <_ZN10LoRa_class5beginEybhhyh+0x1a2>
    if(set_frequency(frequency) != 3) return 4;
 8003bc2:	4652      	mov	r2, sl
 8003bc4:	464b      	mov	r3, r9
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	f7ff fe98 	bl	80038fc <_ZN10LoRa_class13set_frequencyEy>
 8003bcc:	2803      	cmp	r0, #3
 8003bce:	4606      	mov	r6, r0
 8003bd0:	f040 8089 	bne.w	8003ce6 <_ZN10LoRa_class5beginEybhhyh+0x1a6>
    if(field_set(FifoRxBaseAddr, 0x00) != 1) return 5;
 8003bd4:	e9cd 7804 	strd	r7, r8, [sp, #16]
 8003bd8:	4d4f      	ldr	r5, [pc, #316]	; (8003d18 <_ZN10LoRa_class5beginEybhhyh+0x1d8>)
 8003bda:	f105 030c 	add.w	r3, r5, #12
 8003bde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003be0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003be4:	4620      	mov	r0, r4
 8003be6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003bea:	f7ff fd26 	bl	800363a <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8003bee:	2801      	cmp	r0, #1
 8003bf0:	d17b      	bne.n	8003cea <_ZN10LoRa_class5beginEybhhyh+0x1aa>
    if(field_set(FifoTxBaseAddr, _FifoTxBaseAddr) != 1) return 6;
 8003bf2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003bf6:	4d49      	ldr	r5, [pc, #292]	; (8003d1c <_ZN10LoRa_class5beginEybhhyh+0x1dc>)
 8003bf8:	9304      	str	r3, [sp, #16]
 8003bfa:	9005      	str	r0, [sp, #20]
 8003bfc:	f105 030c 	add.w	r3, r5, #12
 8003c00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c02:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003c06:	4620      	mov	r0, r4
 8003c08:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003c0c:	f7ff fd15 	bl	800363a <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8003c10:	2801      	cmp	r0, #1
 8003c12:	d16c      	bne.n	8003cee <_ZN10LoRa_class5beginEybhhyh+0x1ae>
    if(field_set(LnaBoostHf, 0x03) != 1) return 7;
 8003c14:	e9cd 6004 	strd	r6, r0, [sp, #16]
 8003c18:	4d41      	ldr	r5, [pc, #260]	; (8003d20 <_ZN10LoRa_class5beginEybhhyh+0x1e0>)
 8003c1a:	f105 030c 	add.w	r3, r5, #12
 8003c1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c20:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003c24:	4620      	mov	r0, r4
 8003c26:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003c2a:	f7ff fd06 	bl	800363a <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8003c2e:	2801      	cmp	r0, #1
 8003c30:	d15f      	bne.n	8003cf2 <_ZN10LoRa_class5beginEybhhyh+0x1b2>
    if(field_set(LowDataRateOptimize, 0) != 1) return 8;
 8003c32:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8003c36:	4d3b      	ldr	r5, [pc, #236]	; (8003d24 <_ZN10LoRa_class5beginEybhhyh+0x1e4>)
 8003c38:	f105 030c 	add.w	r3, r5, #12
 8003c3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c3e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003c42:	4620      	mov	r0, r4
 8003c44:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003c48:	f7ff fcf7 	bl	800363a <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8003c4c:	2801      	cmp	r0, #1
 8003c4e:	d152      	bne.n	8003cf6 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(field_set(AgcAutoOn, 1) != 1) return 9;
 8003c50:	e9cd 0004 	strd	r0, r0, [sp, #16]
 8003c54:	4d34      	ldr	r5, [pc, #208]	; (8003d28 <_ZN10LoRa_class5beginEybhhyh+0x1e8>)
 8003c56:	f105 030c 	add.w	r3, r5, #12
 8003c5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c5c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003c60:	4620      	mov	r0, r4
 8003c62:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003c66:	f7ff fce8 	bl	800363a <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8003c6a:	2801      	cmp	r0, #1
 8003c6c:	d145      	bne.n	8003cfa <_ZN10LoRa_class5beginEybhhyh+0x1ba>
    if(set_TX_power(signal_power, paboost) != 2) return 10;
 8003c6e:	2307      	movs	r3, #7
 8003c70:	4620      	mov	r0, r4
 8003c72:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8003c76:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 8003c7a:	f7ff fdcf 	bl	800381c <_ZN10LoRa_class12set_TX_powerEhbh>
 8003c7e:	2802      	cmp	r0, #2
 8003c80:	d13d      	bne.n	8003cfe <_ZN10LoRa_class5beginEybhhyh+0x1be>
    if(set_spreading_factor(SF) != 3) return 11;
 8003c82:	4620      	mov	r0, r4
 8003c84:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
 8003c88:	f7ff fe5a 	bl	8003940 <_ZN10LoRa_class20set_spreading_factorEh>
 8003c8c:	2803      	cmp	r0, #3
 8003c8e:	d138      	bne.n	8003d02 <_ZN10LoRa_class5beginEybhhyh+0x1c2>
    if(set_signal_bandwidth(SBW) != 1) return 12;
 8003c90:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8003c94:	4620      	mov	r0, r4
 8003c96:	f7ff fe9f 	bl	80039d8 <_ZN10LoRa_class20set_signal_bandwidthEy>
 8003c9a:	2801      	cmp	r0, #1
 8003c9c:	d133      	bne.n	8003d06 <_ZN10LoRa_class5beginEybhhyh+0x1c6>
    if(field_set(SyncWord, sync_word) != 1) return 13;
 8003c9e:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 8003ca2:	4d22      	ldr	r5, [pc, #136]	; (8003d2c <_ZN10LoRa_class5beginEybhhyh+0x1ec>)
 8003ca4:	9304      	str	r3, [sp, #16]
 8003ca6:	9005      	str	r0, [sp, #20]
 8003ca8:	f105 030c 	add.w	r3, r5, #12
 8003cac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cae:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003cb8:	f7ff fcbf 	bl	800363a <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8003cbc:	2801      	cmp	r0, #1
 8003cbe:	d124      	bne.n	8003d0a <_ZN10LoRa_class5beginEybhhyh+0x1ca>
    if(crc_enable() != 1) return 14;
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	f7ff ff27 	bl	8003b14 <_ZN10LoRa_class10crc_enableEv>
 8003cc6:	2801      	cmp	r0, #1
 8003cc8:	d121      	bne.n	8003d0e <_ZN10LoRa_class5beginEybhhyh+0x1ce>
    if(mode_STDBY() != 1) return 15;
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f7ff fd4b 	bl	8003766 <_ZN10LoRa_class10mode_STDBYEv>
 8003cd0:	2801      	cmp	r0, #1
 8003cd2:	bf0c      	ite	eq
 8003cd4:	4638      	moveq	r0, r7
 8003cd6:	200f      	movne	r0, #15
}
 8003cd8:	b00e      	add	sp, #56	; 0x38
 8003cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((result != 0x12) || (amt != 1)) return 2;
 8003cde:	2002      	movs	r0, #2
 8003ce0:	e7fa      	b.n	8003cd8 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(mode_sleep() != 1) return 3;
 8003ce2:	2003      	movs	r0, #3
 8003ce4:	e7f8      	b.n	8003cd8 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(set_frequency(frequency) != 3) return 4;
 8003ce6:	2004      	movs	r0, #4
 8003ce8:	e7f6      	b.n	8003cd8 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(field_set(FifoRxBaseAddr, 0x00) != 1) return 5;
 8003cea:	2005      	movs	r0, #5
 8003cec:	e7f4      	b.n	8003cd8 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(field_set(FifoTxBaseAddr, _FifoTxBaseAddr) != 1) return 6;
 8003cee:	2006      	movs	r0, #6
 8003cf0:	e7f2      	b.n	8003cd8 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(field_set(LnaBoostHf, 0x03) != 1) return 7;
 8003cf2:	2007      	movs	r0, #7
 8003cf4:	e7f0      	b.n	8003cd8 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(field_set(LowDataRateOptimize, 0) != 1) return 8;
 8003cf6:	2008      	movs	r0, #8
 8003cf8:	e7ee      	b.n	8003cd8 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(field_set(AgcAutoOn, 1) != 1) return 9;
 8003cfa:	2009      	movs	r0, #9
 8003cfc:	e7ec      	b.n	8003cd8 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(set_TX_power(signal_power, paboost) != 2) return 10;
 8003cfe:	200a      	movs	r0, #10
 8003d00:	e7ea      	b.n	8003cd8 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(set_spreading_factor(SF) != 3) return 11;
 8003d02:	200b      	movs	r0, #11
 8003d04:	e7e8      	b.n	8003cd8 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(set_signal_bandwidth(SBW) != 1) return 12;
 8003d06:	200c      	movs	r0, #12
 8003d08:	e7e6      	b.n	8003cd8 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(field_set(SyncWord, sync_word) != 1) return 13;
 8003d0a:	200d      	movs	r0, #13
 8003d0c:	e7e4      	b.n	8003cd8 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(crc_enable() != 1) return 14;
 8003d0e:	200e      	movs	r0, #14
 8003d10:	e7e2      	b.n	8003cd8 <_ZN10LoRa_class5beginEybhhyh+0x198>
 8003d12:	bf00      	nop
 8003d14:	20001f64 	.word	0x20001f64
 8003d18:	20001c8c 	.word	0x20001c8c
 8003d1c:	20001ce0 	.word	0x20001ce0
 8003d20:	20001d18 	.word	0x20001d18
 8003d24:	20001d50 	.word	0x20001d50
 8003d28:	20001b58 	.word	0x20001b58
 8003d2c:	20001f10 	.word	0x20001f10

08003d30 <_ZN10LoRa_class11packet_rssiEv>:
    return send_packet;
}

// RSSI последнего принятого пакета
uint8_t LoRa_class::packet_rssi() {
    uint32_t rssi = 0;
 8003d30:	2300      	movs	r3, #0
uint8_t LoRa_class::packet_rssi() {
 8003d32:	b530      	push	{r4, r5, lr}
 8003d34:	b089      	sub	sp, #36	; 0x24
    uint32_t rssi = 0;
 8003d36:	9307      	str	r3, [sp, #28]
    field_get(PacketRssi, &rssi, true);
 8003d38:	2301      	movs	r3, #1
uint8_t LoRa_class::packet_rssi() {
 8003d3a:	4604      	mov	r4, r0
    field_get(PacketRssi, &rssi, true);
 8003d3c:	4d12      	ldr	r5, [pc, #72]	; (8003d88 <_ZN10LoRa_class11packet_rssiEv+0x58>)
 8003d3e:	9305      	str	r3, [sp, #20]
 8003d40:	ab07      	add	r3, sp, #28
 8003d42:	9304      	str	r3, [sp, #16]
 8003d44:	f105 030c 	add.w	r3, r5, #12
 8003d48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d4a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003d4e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003d52:	4620      	mov	r0, r4
 8003d54:	f7ff fcb0 	bl	80036b8 <_ZN10LoRa_class9field_getE13Address_fieldPmb>
    if (_frequency < 868E6)
 8003d58:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 8003d5c:	f7fc fb7e 	bl	800045c <__aeabi_ul2d>
 8003d60:	a307      	add	r3, pc, #28	; (adr r3, 8003d80 <_ZN10LoRa_class11packet_rssiEv+0x50>)
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	f7fc fe21 	bl	80009ac <__aeabi_dcmplt>
 8003d6a:	9b07      	ldr	r3, [sp, #28]
 8003d6c:	b118      	cbz	r0, 8003d76 <_ZN10LoRa_class11packet_rssiEv+0x46>
        rssi -= 164;
 8003d6e:	3ba4      	subs	r3, #164	; 0xa4
    else
        rssi -= 157;
    return rssi;
}
 8003d70:	b2d8      	uxtb	r0, r3
 8003d72:	b009      	add	sp, #36	; 0x24
 8003d74:	bd30      	pop	{r4, r5, pc}
        rssi -= 157;
 8003d76:	3b9d      	subs	r3, #157	; 0x9d
 8003d78:	e7fa      	b.n	8003d70 <_ZN10LoRa_class11packet_rssiEv+0x40>
 8003d7a:	bf00      	nop
 8003d7c:	f3af 8000 	nop.w
 8003d80:	80000000 	.word	0x80000000
 8003d84:	41c9de50 	.word	0x41c9de50
 8003d88:	20001e14 	.word	0x20001e14

08003d8c <_ZN10LoRa_class16read_packet_dataEbbb>:
class LoRa_packet LoRa_class::read_packet_data(bool crc_err, bool f_rssi, bool f_snr) {
 8003d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d90:	4607      	mov	r7, r0
 8003d92:	460d      	mov	r5, r1
 8003d94:	4690      	mov	r8, r2
    if (f_rssi)
 8003d96:	461c      	mov	r4, r3
class LoRa_packet LoRa_class::read_packet_data(bool crc_err, bool f_rssi, bool f_snr) {
 8003d98:	b08b      	sub	sp, #44	; 0x2c
    if (f_rssi)
 8003d9a:	b11b      	cbz	r3, 8003da4 <_ZN10LoRa_class16read_packet_dataEbbb+0x18>
        rssi = packet_rssi();
 8003d9c:	4608      	mov	r0, r1
 8003d9e:	f7ff ffc7 	bl	8003d30 <_ZN10LoRa_class11packet_rssiEv>
 8003da2:	4604      	mov	r4, r0
    field_get(FifoRxBytesNb, &length, true);
 8003da4:	2601      	movs	r6, #1
 8003da6:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8003e50 <_ZN10LoRa_class16read_packet_dataEbbb+0xc4>
 8003daa:	ab07      	add	r3, sp, #28
 8003dac:	9304      	str	r3, [sp, #16]
 8003dae:	9605      	str	r6, [sp, #20]
 8003db0:	f10c 030c 	add.w	r3, ip, #12
 8003db4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003db6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003dba:	4628      	mov	r0, r5
 8003dbc:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
 8003dc0:	f7ff fc7a 	bl	80036b8 <_ZN10LoRa_class9field_getE13Address_fieldPmb>
    field_get(FifoRxCurrentAddr, &adr, true);
 8003dc4:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8003e54 <_ZN10LoRa_class16read_packet_dataEbbb+0xc8>
 8003dc8:	ab08      	add	r3, sp, #32
 8003dca:	9304      	str	r3, [sp, #16]
 8003dcc:	9605      	str	r6, [sp, #20]
 8003dce:	f10c 030c 	add.w	r3, ip, #12
 8003dd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dd4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003dd8:	4628      	mov	r0, r5
 8003dda:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
 8003dde:	f7ff fc6b 	bl	80036b8 <_ZN10LoRa_class9field_getE13Address_fieldPmb>
    field_set(FifoAddrPtr, adr);
 8003de2:	f8df c074 	ldr.w	ip, [pc, #116]	; 8003e58 <_ZN10LoRa_class16read_packet_dataEbbb+0xcc>
 8003de6:	9b08      	ldr	r3, [sp, #32]
 8003de8:	9605      	str	r6, [sp, #20]
 8003dea:	9304      	str	r3, [sp, #16]
 8003dec:	f10c 030c 	add.w	r3, ip, #12
 8003df0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003df2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003df6:	4628      	mov	r0, r5
 8003df8:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
 8003dfc:	f7ff fc1d 	bl	800363a <_ZN10LoRa_class9field_setE13Address_fieldmb>
    class LoRa_packet send_packet(nullptr, 0, crc_err, rssi);
 8003e00:	2200      	movs	r2, #0
 8003e02:	9400      	str	r4, [sp, #0]
    uint32_t data32 = 0;
 8003e04:	2400      	movs	r4, #0
        field_get(Fifo, &data32, true);
 8003e06:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8003e5c <_ZN10LoRa_class16read_packet_dataEbbb+0xd0>
    class LoRa_packet send_packet(nullptr, 0, crc_err, rssi);
 8003e0a:	4643      	mov	r3, r8
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	4638      	mov	r0, r7
 8003e10:	f000 fb03 	bl	800441a <_ZN11LoRa_packetC1EPKhhbh>
        field_get(Fifo, &data32, true);
 8003e14:	f109 080c 	add.w	r8, r9, #12
    uint32_t data32 = 0;
 8003e18:	9409      	str	r4, [sp, #36]	; 0x24
    for(unsigned int i = 0; i < length; ++i) {
 8003e1a:	9b07      	ldr	r3, [sp, #28]
 8003e1c:	42a3      	cmp	r3, r4
 8003e1e:	d912      	bls.n	8003e46 <_ZN10LoRa_class16read_packet_dataEbbb+0xba>
        field_get(Fifo, &data32, true);
 8003e20:	ab09      	add	r3, sp, #36	; 0x24
 8003e22:	9605      	str	r6, [sp, #20]
 8003e24:	9304      	str	r3, [sp, #16]
 8003e26:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8003e2a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003e2e:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 8003e32:	4628      	mov	r0, r5
 8003e34:	f7ff fc40 	bl	80036b8 <_ZN10LoRa_class9field_getE13Address_fieldPmb>
        send_packet.add_packet_data(data32);
 8003e38:	4638      	mov	r0, r7
 8003e3a:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 8003e3e:	f000 fada 	bl	80043f6 <_ZN11LoRa_packet15add_packet_dataEh>
    for(unsigned int i = 0; i < length; ++i) {
 8003e42:	3401      	adds	r4, #1
 8003e44:	e7e9      	b.n	8003e1a <_ZN10LoRa_class16read_packet_dataEbbb+0x8e>
}
 8003e46:	4638      	mov	r0, r7
 8003e48:	b00b      	add	sp, #44	; 0x2c
 8003e4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e4e:	bf00      	nop
 8003e50:	20001ca8 	.word	0x20001ca8
 8003e54:	20001cc4 	.word	0x20001cc4
 8003e58:	20001c70 	.word	0x20001c70
 8003e5c:	20001c54 	.word	0x20001c54

08003e60 <_ZN10LoRa_class15receiver_packetEhmbb>:
class LoRa_packet LoRa_class::receiver_packet(uint8_t count, ulong wait, bool rssi, bool snr) {
 8003e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e64:	b0bf      	sub	sp, #252	; 0xfc
 8003e66:	4690      	mov	r8, r2
 8003e68:	460c      	mov	r4, r1
 8003e6a:	461d      	mov	r5, r3
 8003e6c:	4683      	mov	fp, r0
    class LoRa_packet send_packet;
 8003e6e:	f000 fab5 	bl	80043dc <_ZN11LoRa_packetC1Ev>
    Address_field fields[3] = {RxTimeout, RxDone, PayloadCrcError};
 8003e72:	f8df c2c4 	ldr.w	ip, [pc, #708]	; 8004138 <_ZN10LoRa_class15receiver_packetEhmbb+0x2d8>
 8003e76:	ae14      	add	r6, sp, #80	; 0x50
 8003e78:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003e7c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003e7e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003e82:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003e86:	4ea7      	ldr	r6, [pc, #668]	; (8004124 <_ZN10LoRa_class15receiver_packetEhmbb+0x2c4>)
 8003e88:	af1b      	add	r7, sp, #108	; 0x6c
 8003e8a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003e8c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003e8e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003e92:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8003e96:	4fa4      	ldr	r7, [pc, #656]	; (8004128 <_ZN10LoRa_class15receiver_packetEhmbb+0x2c8>)
 8003e98:	f10d 0e88 	add.w	lr, sp, #136	; 0x88
 8003e9c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003e9e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003ea2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    Address_field flags[3] = {RxDone, ValidHeader, PayloadCrcError};
 8003ea6:	f1a6 0910 	sub.w	r9, r6, #16
    Address_field fields[3] = {RxTimeout, RxDone, PayloadCrcError};
 8003eaa:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    Address_field flags[3] = {RxDone, ValidHeader, PayloadCrcError};
 8003eae:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8003eb2:	f10d 0ea4 	add.w	lr, sp, #164	; 0xa4
 8003eb6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003eba:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003ebe:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800413c <_ZN10LoRa_class15receiver_packetEhmbb+0x2dc>
 8003ec2:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8003ec6:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8003eca:	f10d 0ec0 	add.w	lr, sp, #192	; 0xc0
 8003ece:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003ed2:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003ed6:	f1a7 0910 	sub.w	r9, r7, #16
 8003eda:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8003ede:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8003ee2:	f10d 0edc 	add.w	lr, sp, #220	; 0xdc
 8003ee6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003eea:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003eee:	f1ac 0310 	sub.w	r3, ip, #16
 8003ef2:	9308      	str	r3, [sp, #32]
    if(count <= 1) {
 8003ef4:	f1b8 0f01 	cmp.w	r8, #1
 8003ef8:	f1a6 0310 	sub.w	r3, r6, #16
    Address_field flags[3] = {RxDone, ValidHeader, PayloadCrcError};
 8003efc:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    if(count <= 1) {
 8003f00:	9309      	str	r3, [sp, #36]	; 0x24
 8003f02:	d875      	bhi.n	8003ff0 <_ZN10LoRa_class15receiver_packetEhmbb+0x190>
        if(count == 1)
 8003f04:	d103      	bne.n	8003f0e <_ZN10LoRa_class15receiver_packetEhmbb+0xae>
            mode_RX_single();
 8003f06:	4641      	mov	r1, r8
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f7ff fc51 	bl	80037b0 <_ZN10LoRa_class14mode_RX_singleEb>
        uint32_t values[3] = {0, 0, 0};
 8003f0e:	2300      	movs	r3, #0
        rx_done = rx_timeout = crc_err = 0;
 8003f10:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
        uint32_t values[3] = {0, 0, 0};
 8003f14:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
        rx_done = rx_timeout = crc_err = 0;
 8003f18:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
        uint32_t values[3] = {0, 0, 0};
 8003f1c:	9313      	str	r3, [sp, #76]	; 0x4c
        rx_done = rx_timeout = crc_err = 0;
 8003f1e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
        if(wait == 0)
 8003f22:	b325      	cbz	r5, 8003f6e <_ZN10LoRa_class15receiver_packetEhmbb+0x10e>
            time = HAL_GetTick();
 8003f24:	f003 fac4 	bl	80074b0 <HAL_GetTick>
 8003f28:	4681      	mov	r9, r0
        bool signal = false;
 8003f2a:	2700      	movs	r7, #0
 8003f2c:	4e7f      	ldr	r6, [pc, #508]	; (800412c <_ZN10LoRa_class15receiver_packetEhmbb+0x2cc>)
        for(start_time = time, read_time = time; (wait == 0) || (HAL_GetTick() - time < wait);) {
 8003f2e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003f32:	2d00      	cmp	r5, #0
 8003f34:	d066      	beq.n	8004004 <_ZN10LoRa_class15receiver_packetEhmbb+0x1a4>
 8003f36:	f003 fabb 	bl	80074b0 <HAL_GetTick>
 8003f3a:	eba0 0009 	sub.w	r0, r0, r9
 8003f3e:	42a8      	cmp	r0, r5
 8003f40:	d35a      	bcc.n	8003ff8 <_ZN10LoRa_class15receiver_packetEhmbb+0x198>
        if((rx_done > 0) /*&& (crc_err == 0)*/) {
 8003f42:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8003f46:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 8003f4a:	f003 07ff 	and.w	r7, r3, #255	; 0xff
 8003f4e:	bb0b      	cbnz	r3, 8003f94 <_ZN10LoRa_class15receiver_packetEhmbb+0x134>
            field_get(fields, values, 3, true);
 8003f50:	2301      	movs	r3, #1
 8003f52:	aa11      	add	r2, sp, #68	; 0x44
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	a914      	add	r1, sp, #80	; 0x50
 8003f58:	2303      	movs	r3, #3
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	f7ff fbc7 	bl	80036ee <_ZN10LoRa_class9field_getEP13Address_fieldPmhb>
            _reg_field.clear_flags(flags, 3);
 8003f60:	463b      	mov	r3, r7
 8003f62:	2203      	movs	r2, #3
 8003f64:	4630      	mov	r0, r6
 8003f66:	a929      	add	r1, sp, #164	; 0xa4
 8003f68:	f000 fd56 	bl	8004a18 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb>
 8003f6c:	e03c      	b.n	8003fe8 <_ZN10LoRa_class15receiver_packetEhmbb+0x188>
            time = 0;
 8003f6e:	46a9      	mov	r9, r5
 8003f70:	e7db      	b.n	8003f2a <_ZN10LoRa_class15receiver_packetEhmbb+0xca>
                        pin_crc_err = GPIO_PIN_RESET;
 8003f72:	910e      	str	r1, [sp, #56]	; 0x38
 8003f74:	e05d      	b.n	8004032 <_ZN10LoRa_class15receiver_packetEhmbb+0x1d2>
                        signal = true;
 8003f76:	461f      	mov	r7, r3
 8003f78:	e065      	b.n	8004046 <_ZN10LoRa_class15receiver_packetEhmbb+0x1e6>
                    	if(rx_timeout + rx_done + crc_err != 0) {
 8003f7a:	42d3      	cmn	r3, r2
                    		work_read_flag[2]++; // -
 8003f7c:	bf15      	itete	ne
 8003f7e:	68b3      	ldrne	r3, [r6, #8]
                    		work_read_flag[3]++; // +
 8003f80:	68f3      	ldreq	r3, [r6, #12]
                    		work_read_flag[2]++; // -
 8003f82:	3301      	addne	r3, #1
                    		work_read_flag[3]++; // +
 8003f84:	3301      	addeq	r3, #1
                    		work_read_flag[2]++; // -
 8003f86:	bf14      	ite	ne
 8003f88:	60b3      	strne	r3, [r6, #8]
                    		work_read_flag[3]++; // +
 8003f8a:	60f3      	streq	r3, [r6, #12]
 8003f8c:	e095      	b.n	80040ba <_ZN10LoRa_class15receiver_packetEhmbb+0x25a>
                if(wait == 0) {
 8003f8e:	2d00      	cmp	r5, #0
 8003f90:	d1d1      	bne.n	8003f36 <_ZN10LoRa_class15receiver_packetEhmbb+0xd6>
 8003f92:	e7d6      	b.n	8003f42 <_ZN10LoRa_class15receiver_packetEhmbb+0xe2>
            _reg_field.clear_flags(RxDone);
 8003f94:	2700      	movs	r7, #0
 8003f96:	4b66      	ldr	r3, [pc, #408]	; (8004130 <_ZN10LoRa_class15receiver_packetEhmbb+0x2d0>)
 8003f98:	9704      	str	r7, [sp, #16]
 8003f9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f9c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fa2:	4630      	mov	r0, r6
 8003fa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fa6:	f000 fd8b 	bl	8004ac0 <_ZN13LoRa_register11clear_flagsE13Address_fieldb>
            _reg_field.clear_flags(RxTimeout);
 8003faa:	4b62      	ldr	r3, [pc, #392]	; (8004134 <_ZN10LoRa_class15receiver_packetEhmbb+0x2d4>)
 8003fac:	9704      	str	r7, [sp, #16]
 8003fae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fb0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003fb4:	9b08      	ldr	r3, [sp, #32]
 8003fb6:	4630      	mov	r0, r6
 8003fb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fba:	f000 fd81 	bl	8004ac0 <_ZN13LoRa_register11clear_flagsE13Address_fieldb>
            send_packet = read_packet_data(crc_err, rssi, snr);
 8003fbe:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8003fc2:	f89d 3124 	ldrb.w	r3, [sp, #292]	; 0x124
 8003fc6:	1bd2      	subs	r2, r2, r7
 8003fc8:	bf18      	it	ne
 8003fca:	2201      	movne	r2, #1
 8003fcc:	4621      	mov	r1, r4
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	a80f      	add	r0, sp, #60	; 0x3c
 8003fd2:	f89d 3120 	ldrb.w	r3, [sp, #288]	; 0x120
 8003fd6:	f7ff fed9 	bl	8003d8c <_ZN10LoRa_class16read_packet_dataEbbb>
 8003fda:	4658      	mov	r0, fp
 8003fdc:	a90f      	add	r1, sp, #60	; 0x3c
 8003fde:	f000 fa69 	bl	80044b4 <_ZN11LoRa_packetaSEOS_>
 8003fe2:	a80f      	add	r0, sp, #60	; 0x3c
 8003fe4:	f000 fa02 	bl	80043ec <_ZN11LoRa_packetD1Ev>
        if(wait != 0)
 8003fe8:	b115      	cbz	r5, 8003ff0 <_ZN10LoRa_class15receiver_packetEhmbb+0x190>
            mode_sleep();
 8003fea:	4620      	mov	r0, r4
 8003fec:	f7ff fbb8 	bl	8003760 <_ZN10LoRa_class10mode_sleepEv>
}
 8003ff0:	4658      	mov	r0, fp
 8003ff2:	b03f      	add	sp, #252	; 0xfc
 8003ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if((wait == 0) || (HAL_GetTick() - read_time > 10U)) {
 8003ff8:	f003 fa5a 	bl	80074b0 <HAL_GetTick>
 8003ffc:	eba0 0009 	sub.w	r0, r0, r9
 8004000:	280a      	cmp	r0, #10
 8004002:	d996      	bls.n	8003f32 <_ZN10LoRa_class15receiver_packetEhmbb+0xd2>
            	if ((_dio0_pin != 0) && (_dio1_pin != 0)) {
 8004004:	8aa1      	ldrh	r1, [r4, #20]
 8004006:	2900      	cmp	r1, #0
 8004008:	f000 8087 	beq.w	800411a <_ZN10LoRa_class15receiver_packetEhmbb+0x2ba>
 800400c:	8ba3      	ldrh	r3, [r4, #28]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d07d      	beq.n	800410e <_ZN10LoRa_class15receiver_packetEhmbb+0x2ae>
                	pin_done = HAL_GPIO_ReadPin(_dio0_port, _dio0_pin);
 8004012:	69a0      	ldr	r0, [r4, #24]
 8004014:	f003 fef0 	bl	8007df8 <HAL_GPIO_ReadPin>
                	pin_timeout = HAL_GPIO_ReadPin(_dio1_port, _dio1_pin);
 8004018:	8ba1      	ldrh	r1, [r4, #28]
                	pin_done = HAL_GPIO_ReadPin(_dio0_port, _dio0_pin);
 800401a:	900c      	str	r0, [sp, #48]	; 0x30
                	pin_timeout = HAL_GPIO_ReadPin(_dio1_port, _dio1_pin);
 800401c:	6a20      	ldr	r0, [r4, #32]
 800401e:	f003 feeb 	bl	8007df8 <HAL_GPIO_ReadPin>
                    if (_dio3_pin != 0) {
 8004022:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
                	pin_timeout = HAL_GPIO_ReadPin(_dio1_port, _dio1_pin);
 8004024:	900d      	str	r0, [sp, #52]	; 0x34
                    if (_dio3_pin != 0) {
 8004026:	2900      	cmp	r1, #0
 8004028:	d0a3      	beq.n	8003f72 <_ZN10LoRa_class15receiver_packetEhmbb+0x112>
                    	pin_crc_err = HAL_GPIO_ReadPin(_dio3_port, _dio3_pin);
 800402a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800402c:	f003 fee4 	bl	8007df8 <HAL_GPIO_ReadPin>
 8004030:	900e      	str	r0, [sp, #56]	; 0x38
                    if ((pin_done == GPIO_PIN_SET) || (pin_timeout == GPIO_PIN_SET) || (pin_crc_err == GPIO_PIN_SET)) {
 8004032:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004034:	2b01      	cmp	r3, #1
 8004036:	d09e      	beq.n	8003f76 <_ZN10LoRa_class15receiver_packetEhmbb+0x116>
 8004038:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800403a:	2b01      	cmp	r3, #1
 800403c:	d09b      	beq.n	8003f76 <_ZN10LoRa_class15receiver_packetEhmbb+0x116>
 800403e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                        signal = true;
 8004040:	2b01      	cmp	r3, #1
 8004042:	bf08      	it	eq
 8004044:	2701      	moveq	r7, #1
                if (((count == 0) && (wait == 0)) || (_dio0_pin == 0) || (_dio1_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 8004046:	f1b8 0f00 	cmp.w	r8, #0
 800404a:	d100      	bne.n	800404e <_ZN10LoRa_class15receiver_packetEhmbb+0x1ee>
 800404c:	b15d      	cbz	r5, 8004066 <_ZN10LoRa_class15receiver_packetEhmbb+0x206>
 800404e:	8aa3      	ldrh	r3, [r4, #20]
 8004050:	b14b      	cbz	r3, 8004066 <_ZN10LoRa_class15receiver_packetEhmbb+0x206>
 8004052:	8ba3      	ldrh	r3, [r4, #28]
 8004054:	b13b      	cbz	r3, 8004066 <_ZN10LoRa_class15receiver_packetEhmbb+0x206>
 8004056:	f003 fa2b 	bl	80074b0 <HAL_GetTick>
 800405a:	9b07      	ldr	r3, [sp, #28]
 800405c:	1ac0      	subs	r0, r0, r3
 800405e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8004062:	d800      	bhi.n	8004066 <_ZN10LoRa_class15receiver_packetEhmbb+0x206>
 8004064:	b34f      	cbz	r7, 80040ba <_ZN10LoRa_class15receiver_packetEhmbb+0x25a>
    return _reg_field.get_field_value(fields, values, amt, read);
 8004066:	2301      	movs	r3, #1
 8004068:	aa11      	add	r2, sp, #68	; 0x44
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	a914      	add	r1, sp, #80	; 0x50
 800406e:	2303      	movs	r3, #3
 8004070:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8004074:	f000 fbf5 	bl	8004862 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb>
                    if(amt == 3) {
 8004078:	2803      	cmp	r0, #3
 800407a:	d10b      	bne.n	8004094 <_ZN10LoRa_class15receiver_packetEhmbb+0x234>
                        rx_timeout = values[0];
 800407c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8004080:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
                        rx_done = values[1];
 8004084:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8004088:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                        crc_err = values[2];
 800408c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8004090:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                    	if(rx_timeout + rx_done + crc_err != 0) {
 8004094:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8004098:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
 800409c:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 80040a0:	440b      	add	r3, r1
                    if(signal) {
 80040a2:	2f00      	cmp	r7, #0
 80040a4:	f43f af69 	beq.w	8003f7a <_ZN10LoRa_class15receiver_packetEhmbb+0x11a>
                    	if(rx_timeout + rx_done + crc_err != 0) {
 80040a8:	42d3      	cmn	r3, r2
                    		work_read_flag[0]++; // +
 80040aa:	bf15      	itete	ne
 80040ac:	6833      	ldrne	r3, [r6, #0]
                    		work_read_flag[1]++; // -
 80040ae:	6873      	ldreq	r3, [r6, #4]
                    		work_read_flag[0]++; // +
 80040b0:	3301      	addne	r3, #1
                    		work_read_flag[1]++; // -
 80040b2:	3301      	addeq	r3, #1
                    		work_read_flag[0]++; // +
 80040b4:	bf14      	ite	ne
 80040b6:	6033      	strne	r3, [r6, #0]
                    		work_read_flag[1]++; // -
 80040b8:	6073      	streq	r3, [r6, #4]
                if(rx_done != 0) {
 80040ba:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80040be:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f47f af3d 	bne.w	8003f42 <_ZN10LoRa_class15receiver_packetEhmbb+0xe2>
                if(rx_timeout != 0) {
 80040c8:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f43f af5e 	beq.w	8003f8e <_ZN10LoRa_class15receiver_packetEhmbb+0x12e>
                    _reg_field.clear_flags(RxTimeout);
 80040d2:	4b18      	ldr	r3, [pc, #96]	; (8004134 <_ZN10LoRa_class15receiver_packetEhmbb+0x2d4>)
 80040d4:	f8cd a010 	str.w	sl, [sp, #16]
 80040d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040da:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80040de:	4b16      	ldr	r3, [pc, #88]	; (8004138 <_ZN10LoRa_class15receiver_packetEhmbb+0x2d8>)
 80040e0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80040e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040e6:	f000 fceb 	bl	8004ac0 <_ZN13LoRa_register11clear_flagsE13Address_fieldb>
                    mode_RX_single(false);
 80040ea:	4651      	mov	r1, sl
 80040ec:	4620      	mov	r0, r4
 80040ee:	f7ff fb5f 	bl	80037b0 <_ZN10LoRa_class14mode_RX_singleEb>
                    rx_done = rx_timeout = crc_err = 0;
 80040f2:	f88d a02f 	strb.w	sl, [sp, #47]	; 0x2f
 80040f6:	f88d a02e 	strb.w	sl, [sp, #46]	; 0x2e
 80040fa:	f88d a02d 	strb.w	sl, [sp, #45]	; 0x2d
                    if(wait != 0)
 80040fe:	2d00      	cmp	r5, #0
 8004100:	f43f af1f 	beq.w	8003f42 <_ZN10LoRa_class15receiver_packetEhmbb+0xe2>
                        start_time = HAL_GetTick();
 8004104:	f003 f9d4 	bl	80074b0 <HAL_GetTick>
                    signal = false;
 8004108:	4657      	mov	r7, sl
                        start_time = HAL_GetTick();
 800410a:	9007      	str	r0, [sp, #28]
                if(wait == 0) {
 800410c:	e711      	b.n	8003f32 <_ZN10LoRa_class15receiver_packetEhmbb+0xd2>
                if (((count == 0) && (wait == 0)) || (_dio0_pin == 0) || (_dio1_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 800410e:	f1b8 0f00 	cmp.w	r8, #0
 8004112:	d1a8      	bne.n	8004066 <_ZN10LoRa_class15receiver_packetEhmbb+0x206>
 8004114:	2d00      	cmp	r5, #0
 8004116:	d0a6      	beq.n	8004066 <_ZN10LoRa_class15receiver_packetEhmbb+0x206>
 8004118:	e79b      	b.n	8004052 <_ZN10LoRa_class15receiver_packetEhmbb+0x1f2>
 800411a:	f1b8 0f00 	cmp.w	r8, #0
 800411e:	d095      	beq.n	800404c <_ZN10LoRa_class15receiver_packetEhmbb+0x1ec>
 8004120:	e7a1      	b.n	8004066 <_ZN10LoRa_class15receiver_packetEhmbb+0x206>
 8004122:	bf00      	nop
 8004124:	20001ea0 	.word	0x20001ea0
 8004128:	20001e4c 	.word	0x20001e4c
 800412c:	200006c0 	.word	0x200006c0
 8004130:	20001eac 	.word	0x20001eac
 8004134:	20001ee4 	.word	0x20001ee4
 8004138:	20001ed8 	.word	0x20001ed8
 800413c:	20001f48 	.word	0x20001f48

08004140 <_ZN10LoRa_class12packet_beginEv>:
    if (packet_end(wait))
        return true;
    return false;
}
// Объявление пакета
bool LoRa_class::packet_begin() {
 8004140:	b570      	push	{r4, r5, r6, lr}
 8004142:	4604      	mov	r4, r0
    mode_STDBY();
    field_set(FifoAddrPtr, _FifoTxBaseAddr);
 8004144:	2601      	movs	r6, #1
bool LoRa_class::packet_begin() {
 8004146:	b086      	sub	sp, #24
    mode_STDBY();
 8004148:	f7ff fb0d 	bl	8003766 <_ZN10LoRa_class10mode_STDBYEv>
    field_set(FifoAddrPtr, _FifoTxBaseAddr);
 800414c:	4d0a      	ldr	r5, [pc, #40]	; (8004178 <_ZN10LoRa_class12packet_beginEv+0x38>)
 800414e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8004152:	9605      	str	r6, [sp, #20]
 8004154:	9304      	str	r3, [sp, #16]
 8004156:	f105 030c 	add.w	r3, r5, #12
 800415a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800415c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8004160:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8004164:	4620      	mov	r0, r4
 8004166:	f7ff fa68 	bl	800363a <_ZN10LoRa_class9field_setE13Address_fieldmb>
    _packet_length = 0;
 800416a:	2300      	movs	r3, #0
    return true;
}
 800416c:	4630      	mov	r0, r6
    _packet_length = 0;
 800416e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8004172:	b006      	add	sp, #24
 8004174:	bd70      	pop	{r4, r5, r6, pc}
 8004176:	bf00      	nop
 8004178:	20001c70 	.word	0x20001c70

0800417c <_ZN10LoRa_class12packet_writeEPhh>:
// Отправка данных в пакет buffer, size=None? (len)
bool LoRa_class::packet_write(uint8_t* packet, uint8_t len) {
 800417c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len + _packet_length > 255)
 8004180:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
bool LoRa_class::packet_write(uint8_t* packet, uint8_t len) {
 8004184:	4604      	mov	r4, r0
    if (len + _packet_length > 255)
 8004186:	4413      	add	r3, r2
 8004188:	2bff      	cmp	r3, #255	; 0xff
bool LoRa_class::packet_write(uint8_t* packet, uint8_t len) {
 800418a:	4689      	mov	r9, r1
 800418c:	4690      	mov	r8, r2
 800418e:	b086      	sub	sp, #24
    if (len + _packet_length > 255)
 8004190:	dc2d      	bgt.n	80041ee <_ZN10LoRa_class12packet_writeEPhh+0x72>
        return true;
    _packet_length += len;
    for(int i = 0; i < len; ++i)
 8004192:	2500      	movs	r5, #0
 8004194:	f04f 0a01 	mov.w	sl, #1
        field_set(Fifo, packet[i]);
 8004198:	4e16      	ldr	r6, [pc, #88]	; (80041f4 <_ZN10LoRa_class12packet_writeEPhh+0x78>)
    _packet_length += len;
 800419a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
        field_set(Fifo, packet[i]);
 800419e:	f106 070c 	add.w	r7, r6, #12
    for(int i = 0; i < len; ++i)
 80041a2:	45a8      	cmp	r8, r5
 80041a4:	dd0f      	ble.n	80041c6 <_ZN10LoRa_class12packet_writeEPhh+0x4a>
        field_set(Fifo, packet[i]);
 80041a6:	f819 3005 	ldrb.w	r3, [r9, r5]
 80041aa:	f8cd a014 	str.w	sl, [sp, #20]
 80041ae:	9304      	str	r3, [sp, #16]
 80041b0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80041b4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80041b8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80041bc:	4620      	mov	r0, r4
 80041be:	f7ff fa3c 	bl	800363a <_ZN10LoRa_class9field_setE13Address_fieldmb>
    for(int i = 0; i < len; ++i)
 80041c2:	3501      	adds	r5, #1
 80041c4:	e7ed      	b.n	80041a2 <_ZN10LoRa_class12packet_writeEPhh+0x26>
    field_set(PayloadLength, _packet_length);
 80041c6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80041ca:	4d0b      	ldr	r5, [pc, #44]	; (80041f8 <_ZN10LoRa_class12packet_writeEPhh+0x7c>)
 80041cc:	9304      	str	r3, [sp, #16]
 80041ce:	f8cd a014 	str.w	sl, [sp, #20]
 80041d2:	f105 030c 	add.w	r3, r5, #12
 80041d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041d8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80041dc:	4620      	mov	r0, r4
 80041de:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80041e2:	f7ff fa2a 	bl	800363a <_ZN10LoRa_class9field_setE13Address_fieldmb>
 80041e6:	2000      	movs	r0, #0
    return false;
}
 80041e8:	b006      	add	sp, #24
 80041ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return true;
 80041ee:	2001      	movs	r0, #1
 80041f0:	e7fa      	b.n	80041e8 <_ZN10LoRa_class12packet_writeEPhh+0x6c>
 80041f2:	bf00      	nop
 80041f4:	20001c54 	.word	0x20001c54
 80041f8:	20001e68 	.word	0x20001e68

080041fc <_ZN10LoRa_class10packet_endEmb>:
    field_set(PayloadLength, _packet_length);
    return false;
}

// Отправка пакета
bool LoRa_class::packet_end(uint32_t wait, bool sleep) {
 80041fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004200:	4688      	mov	r8, r1
 8004202:	b089      	sub	sp, #36	; 0x24
    mode_TX();
 8004204:	2101      	movs	r1, #1
bool LoRa_class::packet_end(uint32_t wait, bool sleep) {
 8004206:	4604      	mov	r4, r0
 8004208:	4617      	mov	r7, r2
    mode_TX();
 800420a:	f7ff faaf 	bl	800376c <_ZN10LoRa_class7mode_TXEb>
    bool result = false;
    if(wait > 0) {
 800420e:	f1b8 0f00 	cmp.w	r8, #0
 8004212:	d03f      	beq.n	8004294 <_ZN10LoRa_class10packet_endEmb+0x98>
        uint32_t tx_done = 0;
 8004214:	2500      	movs	r5, #0
 8004216:	9507      	str	r5, [sp, #28]
        bool signal = false;
        uint32_t time, start_time, read_time;
        int pin_done;
        tx_done = 0;
        for(time = HAL_GetTick(), start_time = time, read_time = time; HAL_GetTick() - time < wait;) {
 8004218:	f003 f94a 	bl	80074b0 <HAL_GetTick>
                        signal = true;
                    }
                }
                // Если неработают DIO выходы, был signal или превышено время ожидания
                if ((_dio0_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
                    field_get(TxDone, &tx_done, true);
 800421c:	f04f 0b01 	mov.w	fp, #1
        for(time = HAL_GetTick(), start_time = time, read_time = time; HAL_GetTick() - time < wait;) {
 8004220:	4606      	mov	r6, r0
                    field_get(TxDone, &tx_done, true);
 8004222:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800429c <_ZN10LoRa_class10packet_endEmb+0xa0>
 8004226:	f109 0a0c 	add.w	sl, r9, #12
        for(time = HAL_GetTick(), start_time = time, read_time = time; HAL_GetTick() - time < wait;) {
 800422a:	f003 f941 	bl	80074b0 <HAL_GetTick>
 800422e:	1b80      	subs	r0, r0, r6
 8004230:	4580      	cmp	r8, r0
 8004232:	d929      	bls.n	8004288 <_ZN10LoRa_class10packet_endEmb+0x8c>
            if(HAL_GetTick() - read_time > 10) {
 8004234:	f003 f93c 	bl	80074b0 <HAL_GetTick>
 8004238:	1b80      	subs	r0, r0, r6
 800423a:	280a      	cmp	r0, #10
 800423c:	d9f5      	bls.n	800422a <_ZN10LoRa_class10packet_endEmb+0x2e>
                if (_dio0_pin != 0) {
 800423e:	8aa1      	ldrh	r1, [r4, #20]
 8004240:	b129      	cbz	r1, 800424e <_ZN10LoRa_class10packet_endEmb+0x52>
                	pin_done = HAL_GPIO_ReadPin(_dio0_port, _dio0_pin);
 8004242:	69a0      	ldr	r0, [r4, #24]
 8004244:	f003 fdd8 	bl	8007df8 <HAL_GPIO_ReadPin>
                        signal = true;
 8004248:	2801      	cmp	r0, #1
 800424a:	bf08      	it	eq
 800424c:	2501      	moveq	r5, #1
                if ((_dio0_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 800424e:	8aa3      	ldrh	r3, [r4, #20]
 8004250:	b98b      	cbnz	r3, 8004276 <_ZN10LoRa_class10packet_endEmb+0x7a>
                    field_get(TxDone, &tx_done, true);
 8004252:	ab07      	add	r3, sp, #28
 8004254:	f8cd b014 	str.w	fp, [sp, #20]
 8004258:	9304      	str	r3, [sp, #16]
 800425a:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 800425e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8004262:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 8004266:	4620      	mov	r0, r4
 8004268:	f7ff fa26 	bl	80036b8 <_ZN10LoRa_class9field_getE13Address_fieldPmb>
                }
                if(tx_done != 0) {
 800426c:	9b07      	ldr	r3, [sp, #28]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0db      	beq.n	800422a <_ZN10LoRa_class10packet_endEmb+0x2e>
                    break;
                }
            }
        }
        if(sleep && (tx_done != 0)) {
 8004272:	b967      	cbnz	r7, 800428e <_ZN10LoRa_class10packet_endEmb+0x92>
 8004274:	e00e      	b.n	8004294 <_ZN10LoRa_class10packet_endEmb+0x98>
                if ((_dio0_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 8004276:	f003 f91b 	bl	80074b0 <HAL_GetTick>
 800427a:	1b80      	subs	r0, r0, r6
 800427c:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8004280:	d8e7      	bhi.n	8004252 <_ZN10LoRa_class10packet_endEmb+0x56>
 8004282:	2d00      	cmp	r5, #0
 8004284:	d1e5      	bne.n	8004252 <_ZN10LoRa_class10packet_endEmb+0x56>
 8004286:	e7f1      	b.n	800426c <_ZN10LoRa_class10packet_endEmb+0x70>
        if(sleep && (tx_done != 0)) {
 8004288:	b127      	cbz	r7, 8004294 <_ZN10LoRa_class10packet_endEmb+0x98>
 800428a:	9b07      	ldr	r3, [sp, #28]
 800428c:	b113      	cbz	r3, 8004294 <_ZN10LoRa_class10packet_endEmb+0x98>
            mode_sleep();
 800428e:	4620      	mov	r0, r4
 8004290:	f7ff fa66 	bl	8003760 <_ZN10LoRa_class10mode_sleepEv>
        }
    }
    return result;
}
 8004294:	2000      	movs	r0, #0
 8004296:	b009      	add	sp, #36	; 0x24
 8004298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800429c:	20001f2c 	.word	0x20001f2c

080042a0 <_ZN10LoRa_class13sender_packetEPhhm>:
bool LoRa_class::sender_packet(uint8_t* packet, uint8_t len, uint32_t wait) {
 80042a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a2:	4604      	mov	r4, r0
 80042a4:	460e      	mov	r6, r1
 80042a6:	4617      	mov	r7, r2
 80042a8:	461d      	mov	r5, r3
    packet_begin();
 80042aa:	f7ff ff49 	bl	8004140 <_ZN10LoRa_class12packet_beginEv>
    if (packet_write(packet, len))
 80042ae:	463a      	mov	r2, r7
 80042b0:	4631      	mov	r1, r6
 80042b2:	4620      	mov	r0, r4
 80042b4:	f7ff ff62 	bl	800417c <_ZN10LoRa_class12packet_writeEPhh>
 80042b8:	4602      	mov	r2, r0
 80042ba:	b928      	cbnz	r0, 80042c8 <_ZN10LoRa_class13sender_packetEPhhm+0x28>
    if (packet_end(wait))
 80042bc:	4629      	mov	r1, r5
 80042be:	4620      	mov	r0, r4
}
 80042c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if (packet_end(wait))
 80042c4:	f7ff bf9a 	b.w	80041fc <_ZN10LoRa_class10packet_endEmb>
}
 80042c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080042cc <_GLOBAL__sub_I_LoRa>:
class LoRa_class LoRa;
 80042cc:	4801      	ldr	r0, [pc, #4]	; (80042d4 <_GLOBAL__sub_I_LoRa+0x8>)
 80042ce:	f7ff b9a9 	b.w	8003624 <_ZN10LoRa_classC1Ev>
 80042d2:	bf00      	nop
 80042d4:	20000370 	.word	0x20000370

080042d8 <_GLOBAL__sub_D_LoRa>:
 80042d8:	4801      	ldr	r0, [pc, #4]	; (80042e0 <_GLOBAL__sub_D_LoRa+0x8>)
 80042da:	f7ff b973 	b.w	80035c4 <_ZN10LoRa_classD1Ev>
 80042de:	bf00      	nop
 80042e0:	20000370 	.word	0x20000370

080042e4 <_ZN16LoRa_packet_data8add_dataEh>:
LoRa_packet_data lora_packet_data[SIZE_LORA_PACKET_BUFFER];
#endif


bool LoRa_packet_data::add_data(uint8_t data_byte) {
    if(len >= SIZE_LORA_PACKET_MAX_LEN)
 80042e4:	7843      	ldrb	r3, [r0, #1]
 80042e6:	2b31      	cmp	r3, #49	; 0x31
        return true;
    data[len++] = data_byte;
 80042e8:	bf9f      	itttt	ls
 80042ea:	1c5a      	addls	r2, r3, #1
 80042ec:	7042      	strbls	r2, [r0, #1]
 80042ee:	18c0      	addls	r0, r0, r3
 80042f0:	7081      	strbls	r1, [r0, #2]
    return false;
 80042f2:	bf94      	ite	ls
 80042f4:	2000      	movls	r0, #0
        return true;
 80042f6:	2001      	movhi	r0, #1
}
 80042f8:	4770      	bx	lr

080042fa <_ZN16LoRa_packet_data8add_dataEPKhh>:
bool LoRa_packet_data::add_data(const uint8_t* data_byte, uint8_t amt_byte) {
 80042fa:	b570      	push	{r4, r5, r6, lr}
    if((len + amt_byte) > SIZE_LORA_PACKET_MAX_LEN)
 80042fc:	7843      	ldrb	r3, [r0, #1]
 80042fe:	189d      	adds	r5, r3, r2
 8004300:	2d32      	cmp	r5, #50	; 0x32
 8004302:	dc0c      	bgt.n	800431e <_ZN16LoRa_packet_data8add_dataEPKhh+0x24>
        return true;
    for(size_t i = 0; i < amt_byte; ++i)
 8004304:	2400      	movs	r4, #0
 8004306:	3302      	adds	r3, #2
 8004308:	4403      	add	r3, r0
 800430a:	42a2      	cmp	r2, r4
 800430c:	d904      	bls.n	8004318 <_ZN16LoRa_packet_data8add_dataEPKhh+0x1e>
        data[i+len] = data_byte[i];
 800430e:	5d0e      	ldrb	r6, [r1, r4]
    for(size_t i = 0; i < amt_byte; ++i)
 8004310:	3401      	adds	r4, #1
        data[i+len] = data_byte[i];
 8004312:	f803 6b01 	strb.w	r6, [r3], #1
    for(size_t i = 0; i < amt_byte; ++i)
 8004316:	e7f8      	b.n	800430a <_ZN16LoRa_packet_data8add_dataEPKhh+0x10>
    len += amt_byte;
 8004318:	7045      	strb	r5, [r0, #1]
    return false;
 800431a:	2000      	movs	r0, #0
}
 800431c:	bd70      	pop	{r4, r5, r6, pc}
        return true;
 800431e:	2001      	movs	r0, #1
 8004320:	e7fc      	b.n	800431c <_ZN16LoRa_packet_data8add_dataEPKhh+0x22>

08004322 <_ZN16LoRa_packet_data8set_dataEPKhh>:

bool LoRa_packet_data::set_data(const uint8_t* set_data, uint8_t set_len) {
    if(set_len > SIZE_LORA_PACKET_MAX_LEN)
 8004322:	2a32      	cmp	r2, #50	; 0x32
bool LoRa_packet_data::set_data(const uint8_t* set_data, uint8_t set_len) {
 8004324:	b510      	push	{r4, lr}
    if(set_len > SIZE_LORA_PACKET_MAX_LEN)
 8004326:	d80f      	bhi.n	8004348 <_ZN16LoRa_packet_data8set_dataEPKhh+0x26>
        return true;
    if((set_data != nullptr) && (set_len != 0)){
 8004328:	b159      	cbz	r1, 8004342 <_ZN16LoRa_packet_data8set_dataEPKhh+0x20>
 800432a:	b152      	cbz	r2, 8004342 <_ZN16LoRa_packet_data8set_dataEPKhh+0x20>
        len = set_len;
        for(int i = 0; i < set_len; ++i)
 800432c:	2300      	movs	r3, #0
        len = set_len;
 800432e:	7042      	strb	r2, [r0, #1]
        for(int i = 0; i < set_len; ++i)
 8004330:	3002      	adds	r0, #2
            data[i] = set_data[i];
 8004332:	5ccc      	ldrb	r4, [r1, r3]
        for(int i = 0; i < set_len; ++i)
 8004334:	3301      	adds	r3, #1
 8004336:	429a      	cmp	r2, r3
            data[i] = set_data[i];
 8004338:	f800 4b01 	strb.w	r4, [r0], #1
        for(int i = 0; i < set_len; ++i)
 800433c:	dcf9      	bgt.n	8004332 <_ZN16LoRa_packet_data8set_dataEPKhh+0x10>
 800433e:	2000      	movs	r0, #0
 8004340:	e003      	b.n	800434a <_ZN16LoRa_packet_data8set_dataEPKhh+0x28>
    }
    else
        len = 0;
 8004342:	2300      	movs	r3, #0
 8004344:	7043      	strb	r3, [r0, #1]
 8004346:	e7fa      	b.n	800433e <_ZN16LoRa_packet_data8set_dataEPKhh+0x1c>
        return true;
 8004348:	2001      	movs	r0, #1
    return false;
}
 800434a:	bd10      	pop	{r4, pc}

0800434c <_ZN11LoRa_packet11search_dataEv>:
    return *this;
}


// ----- LoRa_packet -----
bool LoRa_packet::search_data() {
 800434c:	4601      	mov	r1, r0
 800434e:	2014      	movs	r0, #20
 8004350:	b510      	push	{r4, lr}
 8004352:	4a20      	ldr	r2, [pc, #128]	; (80043d4 <_ZN11LoRa_packet11search_dataEv+0x88>)
      typename iterator_traits<_RandomAccessIterator>::difference_type
	__trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
	{
	  if (__pred(__first))
 8004354:	7813      	ldrb	r3, [r2, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d13a      	bne.n	80043d0 <_ZN11LoRa_packet11search_dataEv+0x84>
	    return __first;
	  ++__first;

	  if (__pred(__first))
 800435a:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 800435e:	b16b      	cbz	r3, 800437c <_ZN11LoRa_packet11search_dataEv+0x30>
	  ++__first;
 8004360:	f102 0334 	add.w	r3, r2, #52	; 0x34
 8004364:	2000      	movs	r0, #0
#if defined( USE_STANDARD_ARRAY )
    packet_data = std::find_if(lora_packet_data.begin(), lora_packet_data.end(),
                        [](const LoRa_packet_data &data){return data.free();} );
    if(packet_data == lora_packet_data.end()) {
 8004366:	4a1c      	ldr	r2, [pc, #112]	; (80043d8 <_ZN11LoRa_packet11search_dataEv+0x8c>)
    packet_data = std::find_if(lora_packet_data.begin(), lora_packet_data.end(),
 8004368:	600b      	str	r3, [r1, #0]
    if(packet_data == lora_packet_data.end()) {
 800436a:	4293      	cmp	r3, r2
        Serial.println("!lora_packet_data memory error!");
#endif
        return true;
    }
    packet_data->free_object_ = false;
    packet_data->len = 0;
 800436c:	bf15      	itete	ne
 800436e:	7058      	strbne	r0, [r3, #1]
        packet_data = nullptr;
 8004370:	6008      	streq	r0, [r1, #0]
    packet_data->free_object_ = false;
 8004372:	7018      	strbne	r0, [r3, #0]
        return true;
 8004374:	2001      	moveq	r0, #1
        }
    }
    packet_data = nullptr;
    return true;
#endif
}
 8004376:	bd10      	pop	{r4, pc}
 8004378:	461a      	mov	r2, r3
 800437a:	e7eb      	b.n	8004354 <_ZN11LoRa_packet11search_dataEv+0x8>
	    return __first;
	  ++__first;

	  if (__pred(__first))
 800437c:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 8004380:	b113      	cbz	r3, 8004388 <_ZN11LoRa_packet11search_dataEv+0x3c>
	  ++__first;
 8004382:	f102 0368 	add.w	r3, r2, #104	; 0x68
 8004386:	e7ed      	b.n	8004364 <_ZN11LoRa_packet11search_dataEv+0x18>
	    return __first;
	  ++__first;

	  if (__pred(__first))
 8004388:	f892 309c 	ldrb.w	r3, [r2, #156]	; 0x9c
 800438c:	b113      	cbz	r3, 8004394 <_ZN11LoRa_packet11search_dataEv+0x48>
	  ++__first;
 800438e:	f102 039c 	add.w	r3, r2, #156	; 0x9c
 8004392:	e7e7      	b.n	8004364 <_ZN11LoRa_packet11search_dataEv+0x18>
      for (; __trip_count > 0; --__trip_count)
 8004394:	3801      	subs	r0, #1
 8004396:	f102 03d0 	add.w	r3, r2, #208	; 0xd0
 800439a:	d1ed      	bne.n	8004378 <_ZN11LoRa_packet11search_dataEv+0x2c>
	    return __first;
	  ++__first;
	}

      switch (__last - __first)
 800439c:	4c0e      	ldr	r4, [pc, #56]	; (80043d8 <_ZN11LoRa_packet11search_dataEv+0x8c>)
 800439e:	1ae0      	subs	r0, r4, r3
 80043a0:	2868      	cmp	r0, #104	; 0x68
 80043a2:	d00b      	beq.n	80043bc <_ZN11LoRa_packet11search_dataEv+0x70>
 80043a4:	289c      	cmp	r0, #156	; 0x9c
 80043a6:	d003      	beq.n	80043b0 <_ZN11LoRa_packet11search_dataEv+0x64>
 80043a8:	2834      	cmp	r0, #52	; 0x34
 80043aa:	d00b      	beq.n	80043c4 <_ZN11LoRa_packet11search_dataEv+0x78>
 80043ac:	4623      	mov	r3, r4
 80043ae:	e7d9      	b.n	8004364 <_ZN11LoRa_packet11search_dataEv+0x18>
	{
	case 3:
	  if (__pred(__first))
 80043b0:	f892 00d0 	ldrb.w	r0, [r2, #208]	; 0xd0
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d1d5      	bne.n	8004364 <_ZN11LoRa_packet11search_dataEv+0x18>
	    return __first;
	  ++__first;
 80043b8:	f502 7382 	add.w	r3, r2, #260	; 0x104
	case 2:
	  if (__pred(__first))
 80043bc:	781a      	ldrb	r2, [r3, #0]
 80043be:	2a00      	cmp	r2, #0
 80043c0:	d1d0      	bne.n	8004364 <_ZN11LoRa_packet11search_dataEv+0x18>
	    return __first;
	  ++__first;
 80043c2:	3334      	adds	r3, #52	; 0x34
	case 1:
	  if (__pred(__first))
 80043c4:	7818      	ldrb	r0, [r3, #0]
	    return __first;
	  ++__first;
	case 0:
	default:
	  return __last;
 80043c6:	4a04      	ldr	r2, [pc, #16]	; (80043d8 <_ZN11LoRa_packet11search_dataEv+0x8c>)
 80043c8:	2800      	cmp	r0, #0
 80043ca:	bf08      	it	eq
 80043cc:	4613      	moveq	r3, r2
 80043ce:	e7c9      	b.n	8004364 <_ZN11LoRa_packet11search_dataEv+0x18>
 80043d0:	4613      	mov	r3, r2
 80043d2:	e7c7      	b.n	8004364 <_ZN11LoRa_packet11search_dataEv+0x18>
 80043d4:	200006d0 	.word	0x200006d0
 80043d8:	20001710 	.word	0x20001710

080043dc <_ZN11LoRa_packetC1Ev>:


LoRa_packet::LoRa_packet() {
 80043dc:	2300      	movs	r3, #0
 80043de:	b510      	push	{r4, lr}
 80043e0:	4604      	mov	r4, r0
 80043e2:	8083      	strh	r3, [r0, #4]
    search_data();
 80043e4:	f7ff ffb2 	bl	800434c <_ZN11LoRa_packet11search_dataEv>
}
 80043e8:	4620      	mov	r0, r4
 80043ea:	bd10      	pop	{r4, pc}

080043ec <_ZN11LoRa_packetD1Ev>:
    packet_data = nullptr;
    *this = std::move(right);
}

LoRa_packet::~LoRa_packet() {
    if(packet_data != nullptr)
 80043ec:	6803      	ldr	r3, [r0, #0]
 80043ee:	b10b      	cbz	r3, 80043f4 <_ZN11LoRa_packetD1Ev+0x8>
        packet_data->free_object_ = true;
 80043f0:	2201      	movs	r2, #1
 80043f2:	701a      	strb	r2, [r3, #0]
}
 80043f4:	4770      	bx	lr

080043f6 <_ZN11LoRa_packet15add_packet_dataEh>:

bool LoRa_packet::add_packet_data(uint8_t data) {
    return packet_data->add_data(data);
 80043f6:	6800      	ldr	r0, [r0, #0]
 80043f8:	f7ff bf74 	b.w	80042e4 <_ZN16LoRa_packet_data8add_dataEh>

080043fc <_ZN11LoRa_packet15add_packet_dataEPKhh>:
}
bool LoRa_packet::add_packet_data(const  uint8_t* data, uint8_t len) {
    return packet_data->add_data(data, len);
 80043fc:	6800      	ldr	r0, [r0, #0]
 80043fe:	f7ff bf7c 	b.w	80042fa <_ZN16LoRa_packet_data8add_dataEPKhh>

08004402 <_ZN11LoRa_packet10set_packetEPKhhbh>:
}
bool LoRa_packet::set_packet(const uint8_t* data, uint8_t len, bool crc_error, uint8_t rssi) {
 8004402:	b538      	push	{r3, r4, r5, lr}
 8004404:	4604      	mov	r4, r0
    if(packet_data->set_data(data, len))
 8004406:	6800      	ldr	r0, [r0, #0]
bool LoRa_packet::set_packet(const uint8_t* data, uint8_t len, bool crc_error, uint8_t rssi) {
 8004408:	461d      	mov	r5, r3
    if(packet_data->set_data(data, len))
 800440a:	f7ff ff8a 	bl	8004322 <_ZN16LoRa_packet_data8set_dataEPKhh>
 800440e:	b918      	cbnz	r0, 8004418 <_ZN11LoRa_packet10set_packetEPKhhbh+0x16>
        return true;
    crc_error_ = crc_error;
    rssi_ = rssi;
 8004410:	f89d 3010 	ldrb.w	r3, [sp, #16]
    crc_error_ = crc_error;
 8004414:	7165      	strb	r5, [r4, #5]
    rssi_ = rssi;
 8004416:	7123      	strb	r3, [r4, #4]
    return false;
}
 8004418:	bd38      	pop	{r3, r4, r5, pc}

0800441a <_ZN11LoRa_packetC1EPKhhbh>:
LoRa_packet::LoRa_packet(const uint8_t* data, uint8_t len, bool crc_error, uint8_t rssi) {
 800441a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800441c:	461f      	mov	r7, r3
 800441e:	2300      	movs	r3, #0
 8004420:	4604      	mov	r4, r0
 8004422:	460d      	mov	r5, r1
 8004424:	4616      	mov	r6, r2
 8004426:	8083      	strh	r3, [r0, #4]
    search_data();
 8004428:	f7ff ff90 	bl	800434c <_ZN11LoRa_packet11search_dataEv>
    set_packet(data, len, crc_error, rssi);
 800442c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8004430:	4632      	mov	r2, r6
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	4629      	mov	r1, r5
 8004436:	463b      	mov	r3, r7
 8004438:	4620      	mov	r0, r4
 800443a:	f7ff ffe2 	bl	8004402 <_ZN11LoRa_packet10set_packetEPKhhbh>
}
 800443e:	4620      	mov	r0, r4
 8004440:	b003      	add	sp, #12
 8004442:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004444 <_ZN11LoRa_packet12clear_packetEv>:
    crc_error_ = crc_error;
    rssi_ = rssi;
    return false;
}

void LoRa_packet::clear_packet() {
 8004444:	b538      	push	{r3, r4, r5, lr}
    if(packet_data == nullptr)
 8004446:	6803      	ldr	r3, [r0, #0]
void LoRa_packet::clear_packet() {
 8004448:	4604      	mov	r4, r0
 800444a:	2500      	movs	r5, #0
    if(packet_data == nullptr)
 800444c:	b91b      	cbnz	r3, 8004456 <_ZN11LoRa_packet12clear_packetEv+0x12>
        search_data();
 800444e:	f7ff ff7d 	bl	800434c <_ZN11LoRa_packet11search_dataEv>
    else
        packet_data->len = 0;
    rssi_ = 0;
 8004452:	80a5      	strh	r5, [r4, #4]
    crc_error_  = false;
}
 8004454:	bd38      	pop	{r3, r4, r5, pc}
        packet_data->len = 0;
 8004456:	705d      	strb	r5, [r3, #1]
 8004458:	e7fb      	b.n	8004452 <_ZN11LoRa_packet12clear_packetEv+0xe>

0800445a <_ZNK11LoRa_packet7get_lenEv>:
}
uint8_t LoRa_packet::get_data(int num) const {
    return packet_data->data[num];
}
uint8_t LoRa_packet::get_len() const {
    if(packet_data == nullptr)
 800445a:	6800      	ldr	r0, [r0, #0]
 800445c:	b100      	cbz	r0, 8004460 <_ZNK11LoRa_packet7get_lenEv+0x6>
        return 0;
    return packet_data->len;
 800445e:	7840      	ldrb	r0, [r0, #1]
}
 8004460:	4770      	bx	lr

08004462 <_ZNK11LoRa_packet13get_crc_errorEv>:
bool LoRa_packet::get_crc_error() const {
    return crc_error_;
}
 8004462:	7940      	ldrb	r0, [r0, #5]
 8004464:	4770      	bx	lr

08004466 <_ZN11LoRa_packetixEi>:
 8004466:	6803      	ldr	r3, [r0, #0]
 8004468:	3302      	adds	r3, #2
uint8_t LoRa_packet::get_rssi() const {
    return rssi_;
}
uint8_t& LoRa_packet::operator[] (const int index) {
    return packet_data->data[index];
}
 800446a:	1858      	adds	r0, r3, r1
 800446c:	4770      	bx	lr

0800446e <_ZNK11LoRa_packetixEi>:
 800446e:	6803      	ldr	r3, [r0, #0]
 8004470:	3302      	adds	r3, #2
 8004472:	1858      	adds	r0, r3, r1
 8004474:	4770      	bx	lr

08004476 <_ZN11LoRa_packetaSERKS_>:
const uint8_t& LoRa_packet::operator[](const int index) const {
    return packet_data->data[index];
}
class LoRa_packet& LoRa_packet::operator=(const class LoRa_packet& right) {
    // Проверка на самоприсваивание
    if (this == &right)
 8004476:	4288      	cmp	r0, r1
class LoRa_packet& LoRa_packet::operator=(const class LoRa_packet& right) {
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	4604      	mov	r4, r0
 800447c:	460d      	mov	r5, r1
    if (this == &right)
 800447e:	d017      	beq.n	80044b0 <_ZN11LoRa_packetaSERKS_+0x3a>
        return *this;
    // Проверка на пустой объект
    if(packet_data == nullptr)
 8004480:	6803      	ldr	r3, [r0, #0]
 8004482:	b90b      	cbnz	r3, 8004488 <_ZN11LoRa_packetaSERKS_+0x12>
        search_data();
 8004484:	f7ff ff62 	bl	800434c <_ZN11LoRa_packet11search_dataEv>
    // Перенос значений
    packet_data->len = right.packet_data->len;
 8004488:	682a      	ldr	r2, [r5, #0]
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	7852      	ldrb	r2, [r2, #1]
 800448e:	705a      	strb	r2, [r3, #1]
    crc_error_ = right.crc_error_;
 8004490:	796b      	ldrb	r3, [r5, #5]
 8004492:	7163      	strb	r3, [r4, #5]
    rssi_ = right.rssi_;
 8004494:	792b      	ldrb	r3, [r5, #4]
 8004496:	7123      	strb	r3, [r4, #4]
    for(int i = 0; i < packet_data->len; ++i)
 8004498:	2300      	movs	r3, #0
 800449a:	6822      	ldr	r2, [r4, #0]
 800449c:	7851      	ldrb	r1, [r2, #1]
 800449e:	4299      	cmp	r1, r3
 80044a0:	dd06      	ble.n	80044b0 <_ZN11LoRa_packetaSERKS_+0x3a>
        packet_data->data[i] = right.packet_data->data[i];
 80044a2:	6829      	ldr	r1, [r5, #0]
 80044a4:	441a      	add	r2, r3
 80044a6:	4419      	add	r1, r3
 80044a8:	7889      	ldrb	r1, [r1, #2]
    for(int i = 0; i < packet_data->len; ++i)
 80044aa:	3301      	adds	r3, #1
        packet_data->data[i] = right.packet_data->data[i];
 80044ac:	7091      	strb	r1, [r2, #2]
    for(int i = 0; i < packet_data->len; ++i)
 80044ae:	e7f4      	b.n	800449a <_ZN11LoRa_packetaSERKS_+0x24>
    return *this;
}
 80044b0:	4620      	mov	r0, r4
 80044b2:	bd38      	pop	{r3, r4, r5, pc}

080044b4 <_ZN11LoRa_packetaSEOS_>:

class LoRa_packet& LoRa_packet::operator=(class LoRa_packet&& right) {
    // Проверка на самоприсваивание
    if (this == &right)
 80044b4:	4288      	cmp	r0, r1
 80044b6:	d00b      	beq.n	80044d0 <_ZN11LoRa_packetaSEOS_+0x1c>
        return *this;
    // Перенос значений
    if(packet_data != nullptr) {
 80044b8:	6803      	ldr	r3, [r0, #0]
 80044ba:	b10b      	cbz	r3, 80044c0 <_ZN11LoRa_packetaSEOS_+0xc>
        packet_data->free_object_=true;
 80044bc:	2201      	movs	r2, #1
 80044be:	701a      	strb	r2, [r3, #0]
    }
    packet_data = right.packet_data;
 80044c0:	680b      	ldr	r3, [r1, #0]
 80044c2:	6003      	str	r3, [r0, #0]
    crc_error_ = right.crc_error_;
 80044c4:	794b      	ldrb	r3, [r1, #5]
 80044c6:	7143      	strb	r3, [r0, #5]
    rssi_ = right.rssi_;
 80044c8:	790b      	ldrb	r3, [r1, #4]
 80044ca:	7103      	strb	r3, [r0, #4]
    right.packet_data = nullptr;
 80044cc:	2300      	movs	r3, #0
 80044ce:	600b      	str	r3, [r1, #0]
    return *this;
}
 80044d0:	4770      	bx	lr

080044d2 <_ZN11LoRa_packetC1EOS_>:
    packet_data = nullptr;
 80044d2:	2300      	movs	r3, #0
LoRa_packet::LoRa_packet(LoRa_packet&& right) {
 80044d4:	b510      	push	{r4, lr}
 80044d6:	4604      	mov	r4, r0
    packet_data = nullptr;
 80044d8:	6003      	str	r3, [r0, #0]
LoRa_packet::LoRa_packet(LoRa_packet&& right) {
 80044da:	8083      	strh	r3, [r0, #4]
    *this = std::move(right);
 80044dc:	f7ff ffea 	bl	80044b4 <_ZN11LoRa_packetaSEOS_>
}
 80044e0:	4620      	mov	r0, r4
 80044e2:	bd10      	pop	{r4, pc}

080044e4 <_GLOBAL__sub_I_lora_packet_data>:
}
 80044e4:	2250      	movs	r2, #80	; 0x50
    std::array<uint8_t, SIZE_LORA_PACKET_MAX_LEN> data;
#else
    uint8_t data[SIZE_LORA_PACKET_MAX_LEN]; // Байты
#endif

    LoRa_packet_data() = default;
 80044e6:	2001      	movs	r0, #1
 80044e8:	2100      	movs	r1, #0
    struct array
 80044ea:	4b04      	ldr	r3, [pc, #16]	; (80044fc <_GLOBAL__sub_I_lora_packet_data+0x18>)
 80044ec:	3a01      	subs	r2, #1
 80044ee:	7018      	strb	r0, [r3, #0]
 80044f0:	7059      	strb	r1, [r3, #1]
 80044f2:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80044f6:	d1f9      	bne.n	80044ec <_GLOBAL__sub_I_lora_packet_data+0x8>
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	200006d0 	.word	0x200006d0

08004500 <_ZN13LoRa_registerD1Ev>:
    init(spi, nss_port, nss_pin);
}
#endif

LoRa_register::~LoRa_register() {
}
 8004500:	4770      	bx	lr

08004502 <_ZN13LoRa_register4initEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
    pinMode(_nss, OUTPUT);
    digitalWrite(_nss, HIGH);
}
#else
void LoRa_register::init(SPI_HandleTypeDef* spi, GPIO_TypeDef* nss_port, uint16_t nss_pin) {
    _spi = spi;
 8004502:	6001      	str	r1, [r0, #0]
    _nss_port = nss_port;
 8004504:	6082      	str	r2, [r0, #8]
	_nss_pin = nss_pin;
 8004506:	8083      	strh	r3, [r0, #4]
}
 8004508:	4770      	bx	lr

0800450a <_ZN13LoRa_register5clearEv>:



void LoRa_register::clear() {
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
        _registers_data[i] = 0;
 800450a:	2200      	movs	r2, #0
 800450c:	f100 030c 	add.w	r3, r0, #12
 8004510:	f100 017c 	add.w	r1, r0, #124	; 0x7c
 8004514:	f803 2b01 	strb.w	r2, [r3], #1
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8004518:	428b      	cmp	r3, r1
        _registers_state[i] = false;
 800451a:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 800451e:	d1f9      	bne.n	8004514 <_ZN13LoRa_register5clearEv+0xa>
    }
    _send = false;
 8004520:	f880 20ec 	strb.w	r2, [r0, #236]	; 0xec
}
 8004524:	4770      	bx	lr
	...

08004528 <_ZN13LoRa_registerC1Ev>:
LoRa_register::LoRa_register() {
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	4604      	mov	r4, r0
 800452c:	4e27      	ldr	r6, [pc, #156]	; (80045cc <_ZN13LoRa_registerC1Ev+0xa4>)
 800452e:	f100 05f0 	add.w	r5, r0, #240	; 0xf0
 8004532:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004536:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800453a:	4e25      	ldr	r6, [pc, #148]	; (80045d0 <_ZN13LoRa_registerC1Ev+0xa8>)
 800453c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004540:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004542:	f504 7586 	add.w	r5, r4, #268	; 0x10c
 8004546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004548:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800454c:	4e21      	ldr	r6, [pc, #132]	; (80045d4 <_ZN13LoRa_registerC1Ev+0xac>)
 800454e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004552:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004554:	f504 7594 	add.w	r5, r4, #296	; 0x128
 8004558:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800455a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800455e:	4e1e      	ldr	r6, [pc, #120]	; (80045d8 <_ZN13LoRa_registerC1Ev+0xb0>)
 8004560:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004564:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004566:	f504 75a2 	add.w	r5, r4, #324	; 0x144
 800456a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800456c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004570:	4e1a      	ldr	r6, [pc, #104]	; (80045dc <_ZN13LoRa_registerC1Ev+0xb4>)
 8004572:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004576:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004578:	f504 75b0 	add.w	r5, r4, #352	; 0x160
 800457c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800457e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004582:	4e17      	ldr	r6, [pc, #92]	; (80045e0 <_ZN13LoRa_registerC1Ev+0xb8>)
 8004584:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004588:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800458a:	f504 75be 	add.w	r5, r4, #380	; 0x17c
 800458e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004590:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004594:	4e13      	ldr	r6, [pc, #76]	; (80045e4 <_ZN13LoRa_registerC1Ev+0xbc>)
 8004596:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800459a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800459c:	f504 75cc 	add.w	r5, r4, #408	; 0x198
 80045a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045a2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80045a6:	4e10      	ldr	r6, [pc, #64]	; (80045e8 <_ZN13LoRa_registerC1Ev+0xc0>)
 80045a8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80045ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80045ae:	f504 75da 	add.w	r5, r4, #436	; 0x1b4
 80045b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045b4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    _send = false;
 80045b8:	2300      	movs	r3, #0
LoRa_register::LoRa_register() {
 80045ba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    clear();
 80045be:	4620      	mov	r0, r4
    _send = false;
 80045c0:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    clear();
 80045c4:	f7ff ffa1 	bl	800450a <_ZN13LoRa_register5clearEv>
}
 80045c8:	bd70      	pop	{r4, r5, r6, pc}
 80045ca:	bf00      	nop
 80045cc:	20001ed8 	.word	0x20001ed8
 80045d0:	20001ea0 	.word	0x20001ea0
 80045d4:	20001e4c 	.word	0x20001e4c
 80045d8:	20001f48 	.word	0x20001f48
 80045dc:	20001f2c 	.word	0x20001f2c
 80045e0:	20001bac 	.word	0x20001bac
 80045e4:	20001c38 	.word	0x20001c38
 80045e8:	20001b90 	.word	0x20001b90

080045ec <_ZN13LoRa_register15field_registersEP13Address_fieldh>:
        result_field_registers_data[result_field_registers_len++] = ((uint8_t)(field.get_registers()[i].address() & 0xFF));
    }
    return result_field_registers_len;
}
uint8_t LoRa_register::field_registers(Address_field* fields, uint8_t amt_fields) {
    result_field_registers_len = 0;
 80045ec:	2300      	movs	r3, #0
uint8_t LoRa_register::field_registers(Address_field* fields, uint8_t amt_fields) {
 80045ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f2:	4605      	mov	r5, r0
 80045f4:	4614      	mov	r4, r2
    bool reg_add[LORA_DATA_SIZE];
    uint8_t adr;
    if((fields == nullptr) || (amt_fields == 0))
 80045f6:	460e      	mov	r6, r1
uint8_t LoRa_register::field_registers(Address_field* fields, uint8_t amt_fields) {
 80045f8:	b09d      	sub	sp, #116	; 0x74
    result_field_registers_len = 0;
 80045fa:	f880 3220 	strb.w	r3, [r0, #544]	; 0x220
    if((fields == nullptr) || (amt_fields == 0))
 80045fe:	b3d1      	cbz	r1, 8004676 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x8a>
 8004600:	b3aa      	cbz	r2, 800466e <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x82>
 8004602:	466a      	mov	r2, sp
        return result_field_registers_len;
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
        reg_add[i] = false;
 8004604:	4619      	mov	r1, r3
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8004606:	3301      	adds	r3, #1
 8004608:	2b70      	cmp	r3, #112	; 0x70
        reg_add[i] = false;
 800460a:	f802 1b01 	strb.w	r1, [r2], #1
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 800460e:	d1fa      	bne.n	8004606 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x1a>
    }
    for(int i = 0; i < amt_fields; ++i) {
 8004610:	2700      	movs	r7, #0
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8004612:	f04f 091c 	mov.w	r9, #28
 8004616:	46b8      	mov	r8, r7
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
            if(reg_add[adr] == false) {
                result_field_registers_data[result_field_registers_len++] = adr;
                reg_add[adr] = true;
 8004618:	f04f 0a01 	mov.w	sl, #1
 800461c:	e001      	b.n	8004622 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x36>
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 800461e:	f04f 0800 	mov.w	r8, #0
 8004622:	fb09 6b07 	mla	fp, r9, r7, r6
 8004626:	4658      	mov	r0, fp
 8004628:	f7fe ff8d 	bl	8003546 <_ZNK13Address_field13get_reg_countEv>
 800462c:	4540      	cmp	r0, r8
 800462e:	dd19      	ble.n	8004664 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x78>
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 8004630:	4658      	mov	r0, fp
 8004632:	f7fe ff86 	bl	8003542 <_ZNK13Address_field13get_registersEv>
 8004636:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 800463a:	f7fe fd8a 	bl	8003152 <_ZNK8Register7addressEv>
            if(reg_add[adr] == false) {
 800463e:	ab1c      	add	r3, sp, #112	; 0x70
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 8004640:	b2c0      	uxtb	r0, r0
            if(reg_add[adr] == false) {
 8004642:	181a      	adds	r2, r3, r0
 8004644:	f812 3c70 	ldrb.w	r3, [r2, #-112]
 8004648:	b94b      	cbnz	r3, 800465e <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x72>
                result_field_registers_data[result_field_registers_len++] = adr;
 800464a:	f895 3220 	ldrb.w	r3, [r5, #544]	; 0x220
                reg_add[adr] = true;
 800464e:	f802 ac70 	strb.w	sl, [r2, #-112]
                result_field_registers_data[result_field_registers_len++] = adr;
 8004652:	1c59      	adds	r1, r3, #1
 8004654:	442b      	add	r3, r5
 8004656:	f885 1220 	strb.w	r1, [r5, #544]	; 0x220
 800465a:	f883 01d0 	strb.w	r0, [r3, #464]	; 0x1d0
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 800465e:	f108 0801 	add.w	r8, r8, #1
 8004662:	e7de      	b.n	8004622 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x36>
 8004664:	3701      	adds	r7, #1
    for(int i = 0; i < amt_fields; ++i) {
 8004666:	42bc      	cmp	r4, r7
 8004668:	dcd9      	bgt.n	800461e <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x32>
            }
        }
    }
    return result_field_registers_len;
 800466a:	f895 4220 	ldrb.w	r4, [r5, #544]	; 0x220
}
 800466e:	4620      	mov	r0, r4
 8004670:	b01d      	add	sp, #116	; 0x74
 8004672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return result_field_registers_len;
 8004676:	460c      	mov	r4, r1
 8004678:	e7f9      	b.n	800466e <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x82>

0800467a <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>:
            result_check_missing_register_data[result_check_missing_register_len++] = result_field_registers_data[i];
        }
    }
    return result_check_missing_register_len;
}
uint8_t LoRa_register::check_missing_register(Address_field* fields, uint8_t amt_fields) {
 800467a:	b538      	push	{r3, r4, r5, lr}
    result_check_missing_register_len = 0;
 800467c:	2500      	movs	r5, #0
uint8_t LoRa_register::check_missing_register(Address_field* fields, uint8_t amt_fields) {
 800467e:	4604      	mov	r4, r0
 8004680:	4613      	mov	r3, r2
    result_check_missing_register_len = 0;
 8004682:	f880 5271 	strb.w	r5, [r0, #625]	; 0x271
    if((fields == nullptr) || (amt_fields == 0))
 8004686:	b1c9      	cbz	r1, 80046bc <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x42>
 8004688:	b1ca      	cbz	r2, 80046be <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x44>
        return result_check_missing_register_len;
    field_registers(fields, amt_fields);
 800468a:	f7ff ffaf 	bl	80045ec <_ZN13LoRa_register15field_registersEP13Address_fieldh>
    for(int i = result_field_registers_len - 1; i >= 0; --i) {
 800468e:	f894 2220 	ldrb.w	r2, [r4, #544]	; 0x220
 8004692:	4422      	add	r2, r4
 8004694:	42a2      	cmp	r2, r4
 8004696:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 800469a:	d010      	beq.n	80046be <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x44>
        if(_registers_state[result_field_registers_data[i]] == false) {
 800469c:	f892 11cf 	ldrb.w	r1, [r2, #463]	; 0x1cf
 80046a0:	4421      	add	r1, r4
 80046a2:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
 80046a6:	b939      	cbnz	r1, 80046b8 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x3e>
            result_check_missing_register_data[result_check_missing_register_len++] = result_field_registers_data[i];
 80046a8:	1c59      	adds	r1, r3, #1
 80046aa:	f884 1271 	strb.w	r1, [r4, #625]	; 0x271
 80046ae:	f892 11cf 	ldrb.w	r1, [r2, #463]	; 0x1cf
 80046b2:	4423      	add	r3, r4
 80046b4:	f883 1221 	strb.w	r1, [r3, #545]	; 0x221
    for(int i = result_field_registers_len - 1; i >= 0; --i) {
 80046b8:	3a01      	subs	r2, #1
 80046ba:	e7eb      	b.n	8004694 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x1a>
        return result_check_missing_register_len;
 80046bc:	460b      	mov	r3, r1
        }
    }
    return result_check_missing_register_len;
}
 80046be:	4618      	mov	r0, r3
 80046c0:	bd38      	pop	{r3, r4, r5, pc}

080046c2 <_ZN13LoRa_register10check_readEP13Address_fieldh>:
    return false;
}
bool LoRa_register::check_read(Address_field* fields, uint8_t amt_fields) {
    bool check_reg_read = false;
    uint8_t reg_bit[LORA_DATA_SIZE];
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 80046c2:	2300      	movs	r3, #0
bool LoRa_register::check_read(Address_field* fields, uint8_t amt_fields) {
 80046c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c8:	b0a1      	sub	sp, #132	; 0x84
 80046ca:	f10d 0810 	add.w	r8, sp, #16
 80046ce:	4604      	mov	r4, r0
 80046d0:	e9cd 1202 	strd	r1, r2, [sp, #8]
        reg_bit[i] = 0;
 80046d4:	4618      	mov	r0, r3
bool LoRa_register::check_read(Address_field* fields, uint8_t amt_fields) {
 80046d6:	4641      	mov	r1, r8
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 80046d8:	3301      	adds	r3, #1
 80046da:	2b70      	cmp	r3, #112	; 0x70
        reg_bit[i] = 0;
 80046dc:	f801 0b01 	strb.w	r0, [r1], #1
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 80046e0:	d1fa      	bne.n	80046d8 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x16>
    }
    // Достаём из полей значения битов регистров
    uint8_t adr;
    for(int i = 0; i < amt_fields; ++i) {
 80046e2:	2600      	movs	r6, #0
 80046e4:	f04f 0a1c 	mov.w	sl, #28
 80046e8:	46b1      	mov	r9, r6
 80046ea:	9b03      	ldr	r3, [sp, #12]
 80046ec:	42b3      	cmp	r3, r6
 80046ee:	dd28      	ble.n	8004742 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x80>
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 80046f0:	f04f 0b00 	mov.w	fp, #0
 80046f4:	9b02      	ldr	r3, [sp, #8]
 80046f6:	fb0a 3706 	mla	r7, sl, r6, r3
 80046fa:	4638      	mov	r0, r7
 80046fc:	f7fe ff23 	bl	8003546 <_ZNK13Address_field13get_reg_countEv>
 8004700:	4558      	cmp	r0, fp
 8004702:	dd1c      	ble.n	800473e <_ZN13LoRa_register10check_readEP13Address_fieldh+0x7c>
            adr = fields[i].get_registers()[j].address();
 8004704:	4638      	mov	r0, r7
 8004706:	f7fe ff1c 	bl	8003542 <_ZNK13Address_field13get_registersEv>
 800470a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800470e:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
 8004712:	9301      	str	r3, [sp, #4]
 8004714:	f7fe fd1d 	bl	8003152 <_ZNK8Register7addressEv>
 8004718:	4605      	mov	r5, r0
            reg_bit[adr] |= fields[i].get_registers()[j].mask();
 800471a:	4638      	mov	r0, r7
 800471c:	f7fe ff11 	bl	8003542 <_ZNK13Address_field13get_registersEv>
 8004720:	9b01      	ldr	r3, [sp, #4]
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8004722:	f10b 0b01 	add.w	fp, fp, #1
            reg_bit[adr] |= fields[i].get_registers()[j].mask();
 8004726:	4418      	add	r0, r3
 8004728:	f7fe fd15 	bl	8003156 <_ZNK8Register4maskEv>
 800472c:	b2eb      	uxtb	r3, r5
 800472e:	aa20      	add	r2, sp, #128	; 0x80
 8004730:	4413      	add	r3, r2
 8004732:	f813 5c70 	ldrb.w	r5, [r3, #-112]
 8004736:	4305      	orrs	r5, r0
 8004738:	f803 5c70 	strb.w	r5, [r3, #-112]
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 800473c:	e7dd      	b.n	80046fa <_ZN13LoRa_register10check_readEP13Address_fieldh+0x38>
    for(int i = 0; i < amt_fields; ++i) {
 800473e:	3601      	adds	r6, #1
 8004740:	e7d3      	b.n	80046ea <_ZN13LoRa_register10check_readEP13Address_fieldh+0x28>
    }

    reg_read_len = 0;
    reg_not_read_len = 0;

    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8004742:	2300      	movs	r3, #0
    bool check_reg_read = false;
 8004744:	4618      	mov	r0, r3
    reg_read_len = 0;
 8004746:	f884 92c2 	strb.w	r9, [r4, #706]	; 0x2c2
    reg_not_read_len = 0;
 800474a:	f884 9313 	strb.w	r9, [r4, #787]	; 0x313
        if (reg_bit[i] != 0x00) {
            if ((reg_bit[i] == 0xFF) || (_registers_state[i] == true)) {
 800474e:	f104 067c 	add.w	r6, r4, #124	; 0x7c
        if (reg_bit[i] != 0x00) {
 8004752:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004756:	b161      	cbz	r1, 8004772 <_ZN13LoRa_register10check_readEP13Address_fieldh+0xb0>
            if ((reg_bit[i] == 0xFF) || (_registers_state[i] == true)) {
 8004758:	29ff      	cmp	r1, #255	; 0xff
 800475a:	b2dd      	uxtb	r5, r3
 800475c:	d001      	beq.n	8004762 <_ZN13LoRa_register10check_readEP13Address_fieldh+0xa0>
 800475e:	5cf1      	ldrb	r1, [r6, r3]
 8004760:	b169      	cbz	r1, 800477e <_ZN13LoRa_register10check_readEP13Address_fieldh+0xbc>
                // Если биты занимают всё пространство регистра, то можно не считывать, или если он был считан ранее
                reg_not_read[reg_not_read_len++] = i;
 8004762:	f894 1313 	ldrb.w	r1, [r4, #787]	; 0x313
 8004766:	1c4f      	adds	r7, r1, #1
 8004768:	4421      	add	r1, r4
 800476a:	f884 7313 	strb.w	r7, [r4, #787]	; 0x313
 800476e:	f881 52c3 	strb.w	r5, [r1, #707]	; 0x2c3
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8004772:	3301      	adds	r3, #1
 8004774:	2b70      	cmp	r3, #112	; 0x70
 8004776:	d1ec      	bne.n	8004752 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x90>
            }
        }
    }
    return check_reg_read; // Наличие хоть одного регистра, который нужно будет считать

}
 8004778:	b021      	add	sp, #132	; 0x84
 800477a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                reg_read[reg_read_len++] = i;
 800477e:	f894 12c2 	ldrb.w	r1, [r4, #706]	; 0x2c2
 8004782:	1c48      	adds	r0, r1, #1
 8004784:	4421      	add	r1, r4
 8004786:	f884 02c2 	strb.w	r0, [r4, #706]	; 0x2c2
                check_reg_read = true;
 800478a:	2001      	movs	r0, #1
                reg_read[reg_read_len++] = i;
 800478c:	f881 5272 	strb.w	r5, [r1, #626]	; 0x272
                check_reg_read = true;
 8004790:	e7ef      	b.n	8004772 <_ZN13LoRa_register10check_readEP13Address_fieldh+0xb0>

08004792 <_ZN13LoRa_register16_single_transferEhh>:
    return _single_transfer(address & 0x7f, 0x00);
}
void LoRa_register::_write_register(uint8_t address, uint8_t value) {
    _single_transfer(address | 0x80, value);
}
uint8_t LoRa_register::_single_transfer(uint8_t address, uint8_t value) {
 8004792:	b510      	push	{r4, lr}
 8004794:	b086      	sub	sp, #24
 8004796:	4604      	mov	r4, r0
 8004798:	f88d 100f 	strb.w	r1, [sp, #15]
 800479c:	f88d 200e 	strb.w	r2, [sp, #14]
    _spi->endTransaction();
    // Прекращение NSS сигнала
    digitalWrite(_nss, HIGH);
#else
    // Подача NSS сигнала
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 80047a0:	8881      	ldrh	r1, [r0, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	6880      	ldr	r0, [r0, #8]
 80047a6:	f003 fb2d 	bl	8007e04 <HAL_GPIO_WritePin>
    // Отправка бита действия и 7 бит адреса
    HAL_SPI_TransmitReceive(_spi, &address, &response, 1, 1000);
 80047aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047ae:	6820      	ldr	r0, [r4, #0]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	f10d 0217 	add.w	r2, sp, #23
 80047b6:	2301      	movs	r3, #1
 80047b8:	f10d 010f 	add.w	r1, sp, #15
 80047bc:	f005 f9fe 	bl	8009bbc <HAL_SPI_TransmitReceive>
 80047c0:	2332      	movs	r3, #50	; 0x32
    for(int i = 0; i < 50; i++) __NOP();
 80047c2:	bf00      	nop
 80047c4:	3b01      	subs	r3, #1
 80047c6:	d1fc      	bne.n	80047c2 <_ZN13LoRa_register16_single_transferEhh+0x30>
    // Отправка/приём байта значения
    HAL_SPI_TransmitReceive(_spi, &value, &response, 1, 1000);
 80047c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047cc:	6820      	ldr	r0, [r4, #0]
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	f10d 0217 	add.w	r2, sp, #23
 80047d4:	2301      	movs	r3, #1
 80047d6:	f10d 010e 	add.w	r1, sp, #14
 80047da:	f005 f9ef 	bl	8009bbc <HAL_SPI_TransmitReceive>
 80047de:	2314      	movs	r3, #20
    for(int i = 0; i < 20; i++) __NOP();
 80047e0:	bf00      	nop
 80047e2:	3b01      	subs	r3, #1
 80047e4:	d1fc      	bne.n	80047e0 <_ZN13LoRa_register16_single_transferEhh+0x4e>
    // Прекращение NSS сигнала
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_SET);
 80047e6:	68a0      	ldr	r0, [r4, #8]
 80047e8:	2201      	movs	r2, #1
 80047ea:	88a1      	ldrh	r1, [r4, #4]
 80047ec:	f003 fb0a 	bl	8007e04 <HAL_GPIO_WritePin>
#endif
    return response;
}
 80047f0:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80047f4:	b006      	add	sp, #24
 80047f6:	bd10      	pop	{r4, pc}

080047f8 <_ZN13LoRa_register14_read_registerEh>:
    return _single_transfer(address & 0x7f, 0x00);
 80047f8:	2200      	movs	r2, #0
 80047fa:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80047fe:	f7ff bfc8 	b.w	8004792 <_ZN13LoRa_register16_single_transferEhh>

08004802 <_ZN13LoRa_register13register_readEP13Address_fieldhb>:
uint8_t LoRa_register::register_read(Address_field* fields, uint8_t amt_fields, bool update) {
 8004802:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004806:	461f      	mov	r7, r3
    if (_send)
 8004808:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
uint8_t LoRa_register::register_read(Address_field* fields, uint8_t amt_fields, bool update) {
 800480c:	4604      	mov	r4, r0
 800480e:	460d      	mov	r5, r1
 8004810:	4616      	mov	r6, r2
    if (_send)
 8004812:	b10b      	cbz	r3, 8004818 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x16>
        clear();
 8004814:	f7ff fe79 	bl	800450a <_ZN13LoRa_register5clearEv>
        field_registers(fields, amt_fields);
 8004818:	4632      	mov	r2, r6
 800481a:	4629      	mov	r1, r5
 800481c:	4620      	mov	r0, r4
    if (update) {
 800481e:	b1b7      	cbz	r7, 800484e <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x4c>
        field_registers(fields, amt_fields);
 8004820:	f7ff fee4 	bl	80045ec <_ZN13LoRa_register15field_registersEP13Address_fieldh>
        len = result_field_registers_len;
 8004824:	f894 7220 	ldrb.w	r7, [r4, #544]	; 0x220
        registers = &result_field_registers_data;
 8004828:	f504 78e8 	add.w	r8, r4, #464	; 0x1d0
    for(int i = 0; i < amt_read; ++i) {
 800482c:	2600      	movs	r6, #0
        _registers_state[adr] = true;
 800482e:	f04f 0901 	mov.w	r9, #1
    for(int i = 0; i < amt_read; ++i) {
 8004832:	42b7      	cmp	r7, r6
 8004834:	dd12      	ble.n	800485c <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x5a>
        adr = (*registers)[i];
 8004836:	f818 5006 	ldrb.w	r5, [r8, r6]
        _registers_data[adr] = _read_register(adr);
 800483a:	4620      	mov	r0, r4
 800483c:	4629      	mov	r1, r5
 800483e:	f7ff ffdb 	bl	80047f8 <_ZN13LoRa_register14_read_registerEh>
 8004842:	4425      	add	r5, r4
 8004844:	7328      	strb	r0, [r5, #12]
        _registers_state[adr] = true;
 8004846:	f885 907c 	strb.w	r9, [r5, #124]	; 0x7c
    for(int i = 0; i < amt_read; ++i) {
 800484a:	3601      	adds	r6, #1
 800484c:	e7f1      	b.n	8004832 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x30>
        check_missing_register(fields, amt_fields);
 800484e:	f7ff ff14 	bl	800467a <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
        registers = &result_check_missing_register_data;
 8004852:	f204 2821 	addw	r8, r4, #545	; 0x221
        len = result_check_missing_register_len;
 8004856:	f894 7271 	ldrb.w	r7, [r4, #625]	; 0x271
 800485a:	e7e7      	b.n	800482c <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x2a>
}
 800485c:	4638      	mov	r0, r7
 800485e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004862 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb>:
uint8_t LoRa_register::get_field_value(Address_field* fields, uint32_t* values, uint8_t amt, bool read) {
 8004862:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004866:	4604      	mov	r4, r0
 8004868:	4690      	mov	r8, r2
    check_missing_register(fields, amt);
 800486a:	461a      	mov	r2, r3
uint8_t LoRa_register::get_field_value(Address_field* fields, uint32_t* values, uint8_t amt, bool read) {
 800486c:	461e      	mov	r6, r3
 800486e:	460f      	mov	r7, r1
 8004870:	f89d 5020 	ldrb.w	r5, [sp, #32]
    check_missing_register(fields, amt);
 8004874:	f7ff ff01 	bl	800467a <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
    if((result_check_missing_register_len != 0) || read) {
 8004878:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 800487c:	b903      	cbnz	r3, 8004880 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x1e>
 800487e:	b12d      	cbz	r5, 800488c <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x2a>
        register_read(fields, amt, read);
 8004880:	462b      	mov	r3, r5
 8004882:	4632      	mov	r2, r6
 8004884:	4639      	mov	r1, r7
 8004886:	4620      	mov	r0, r4
 8004888:	f7ff ffbb 	bl	8004802 <_ZN13LoRa_register13register_readEP13Address_fieldhb>
uint8_t LoRa_register::get_field_value(Address_field* fields, uint32_t* values, uint8_t amt, bool read) {
 800488c:	2500      	movs	r5, #0
        values[i] = fields[i].get_value(_registers_data, LORA_DATA_SIZE);
 800488e:	f04f 091c 	mov.w	r9, #28
 8004892:	340c      	adds	r4, #12
    for(int i = 0; i < amt; ++i)
 8004894:	42ae      	cmp	r6, r5
 8004896:	dd09      	ble.n	80048ac <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x4a>
        values[i] = fields[i].get_value(_registers_data, LORA_DATA_SIZE);
 8004898:	fb09 7005 	mla	r0, r9, r5, r7
 800489c:	2270      	movs	r2, #112	; 0x70
 800489e:	4621      	mov	r1, r4
 80048a0:	f7fe fcd3 	bl	800324a <_ZNK13Address_field9get_valueEPKhi>
 80048a4:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
    for(int i = 0; i < amt; ++i)
 80048a8:	3501      	adds	r5, #1
 80048aa:	e7f3      	b.n	8004894 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x32>
}
 80048ac:	4630      	mov	r0, r6
 80048ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080048b2 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>:
uint8_t LoRa_register::get_field_value(Address_field field, uint32_t* value, bool read) {
 80048b2:	b084      	sub	sp, #16
 80048b4:	b513      	push	{r0, r1, r4, lr}
 80048b6:	ac05      	add	r4, sp, #20
 80048b8:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return get_field_value(&field, value, 1, read);
 80048bc:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 80048c0:	4621      	mov	r1, r4
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048c6:	2301      	movs	r3, #1
 80048c8:	f7ff ffcb 	bl	8004862 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb>
}
 80048cc:	b002      	add	sp, #8
 80048ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048d2:	b004      	add	sp, #16
 80048d4:	4770      	bx	lr
	...

080048d8 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>:
uint8_t LoRa_register::set_field_value(Address_field* fields, uint32_t* values, uint8_t amt) {
 80048d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048dc:	4604      	mov	r4, r0
 80048de:	4690      	mov	r8, r2
    check_missing_register(fields, amt);
 80048e0:	461a      	mov	r2, r3
uint8_t LoRa_register::set_field_value(Address_field* fields, uint32_t* values, uint8_t amt) {
 80048e2:	461e      	mov	r6, r3
 80048e4:	460f      	mov	r7, r1
    check_missing_register(fields, amt);
 80048e6:	f7ff fec8 	bl	800467a <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
    if(result_check_missing_register_len > 0) {
 80048ea:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 80048ee:	b1f3      	cbz	r3, 800492e <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x56>
        read_fields = check_read(fields, amt);
 80048f0:	4632      	mov	r2, r6
 80048f2:	4639      	mov	r1, r7
 80048f4:	4620      	mov	r0, r4
 80048f6:	f7ff fee4 	bl	80046c2 <_ZN13LoRa_register10check_readEP13Address_fieldh>
            _registers_state[reg_not_read[i]] = true;
 80048fa:	2101      	movs	r1, #1
        for(int i = 0; i < reg_not_read_len; ++i) {
 80048fc:	f8df c05c 	ldr.w	ip, [pc, #92]	; 800495c <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x84>
 8004900:	f894 5313 	ldrb.w	r5, [r4, #787]	; 0x313
 8004904:	f204 22c3 	addw	r2, r4, #707	; 0x2c3
 8004908:	ebac 0c04 	sub.w	ip, ip, r4
 800490c:	eb0c 0302 	add.w	r3, ip, r2
 8004910:	429d      	cmp	r5, r3
 8004912:	dd05      	ble.n	8004920 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x48>
            _registers_state[reg_not_read[i]] = true;
 8004914:	f812 3b01 	ldrb.w	r3, [r2], #1
 8004918:	4423      	add	r3, r4
 800491a:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
        for(int i = 0; i < reg_not_read_len; ++i) {
 800491e:	e7f5      	b.n	800490c <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x34>
        if(read_fields) {
 8004920:	b128      	cbz	r0, 800492e <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x56>
            register_read(fields, amt, false);
 8004922:	2300      	movs	r3, #0
 8004924:	4632      	mov	r2, r6
 8004926:	4639      	mov	r1, r7
 8004928:	4620      	mov	r0, r4
 800492a:	f7ff ff6a 	bl	8004802 <_ZN13LoRa_register13register_readEP13Address_fieldhb>
uint8_t LoRa_register::set_field_value(Address_field* fields, uint32_t* values, uint8_t amt) {
 800492e:	2500      	movs	r5, #0
        result = fields[i].set_value(values[i], _registers_data, LORA_DATA_SIZE);
 8004930:	f04f 0a1c 	mov.w	sl, #28
 8004934:	340c      	adds	r4, #12
    for(int i = 0; i < amt; ++i) {
 8004936:	42ae      	cmp	r6, r5
 8004938:	fa5f f985 	uxtb.w	r9, r5
 800493c:	dd0a      	ble.n	8004954 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x7c>
        result = fields[i].set_value(values[i], _registers_data, LORA_DATA_SIZE);
 800493e:	2370      	movs	r3, #112	; 0x70
 8004940:	4622      	mov	r2, r4
 8004942:	fb0a 7005 	mla	r0, sl, r5, r7
 8004946:	f858 1025 	ldr.w	r1, [r8, r5, lsl #2]
 800494a:	f7fe fcae 	bl	80032aa <_ZNK13Address_field9set_valueEmPhi>
        if(result)
 800494e:	b908      	cbnz	r0, 8004954 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x7c>
    for(int i = 0; i < amt; ++i) {
 8004950:	3501      	adds	r5, #1
 8004952:	e7f0      	b.n	8004936 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x5e>
}
 8004954:	4648      	mov	r0, r9
 8004956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800495a:	bf00      	nop
 800495c:	fffffd3d 	.word	0xfffffd3d

08004960 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>:
uint8_t LoRa_register::set_field_value(Address_field field, uint32_t value) {
 8004960:	b084      	sub	sp, #16
 8004962:	b510      	push	{r4, lr}
 8004964:	ac03      	add	r4, sp, #12
 8004966:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return set_field_value(&field, &value, 1);
 800496a:	4621      	mov	r1, r4
 800496c:	aa0a      	add	r2, sp, #40	; 0x28
 800496e:	2301      	movs	r3, #1
 8004970:	f7ff ffb2 	bl	80048d8 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
}
 8004974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004978:	b004      	add	sp, #16
 800497a:	4770      	bx	lr

0800497c <_ZN13LoRa_register15_write_registerEhh>:
    _single_transfer(address | 0x80, value);
 800497c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004980:	f7ff bf07 	b.w	8004792 <_ZN13LoRa_register16_single_transferEhh>

08004984 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>:
uint8_t LoRa_register::register_write(Address_field* fields, uint8_t amt_fields, bool fl_clear, bool error_clear) {
 8004984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004988:	4604      	mov	r4, r0
 800498a:	460f      	mov	r7, r1
 800498c:	4690      	mov	r8, r2
 800498e:	461e      	mov	r6, r3
 8004990:	f89d 5018 	ldrb.w	r5, [sp, #24]
    if(check_missing_register(fields, amt_fields) != 0) {
 8004994:	f7ff fe71 	bl	800467a <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
 8004998:	b130      	cbz	r0, 80049a8 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x24>
        if(error_clear)
 800499a:	b32d      	cbz	r5, 80049e8 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x64>
            clear();
 800499c:	4620      	mov	r0, r4
 800499e:	f7ff fdb4 	bl	800450a <_ZN13LoRa_register5clearEv>
        return 0;
 80049a2:	2000      	movs	r0, #0
}
 80049a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    field_registers(fields, amt_fields);
 80049a8:	4639      	mov	r1, r7
 80049aa:	4642      	mov	r2, r8
 80049ac:	4620      	mov	r0, r4
 80049ae:	f7ff fe1d 	bl	80045ec <_ZN13LoRa_register15field_registersEP13Address_fieldh>
    for(int i = 0; i < result_field_registers_len; ++i) {
 80049b2:	4f0e      	ldr	r7, [pc, #56]	; (80049ec <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x68>)
 80049b4:	f504 75e8 	add.w	r5, r4, #464	; 0x1d0
 80049b8:	1b3f      	subs	r7, r7, r4
 80049ba:	f894 2220 	ldrb.w	r2, [r4, #544]	; 0x220
 80049be:	197b      	adds	r3, r7, r5
 80049c0:	4293      	cmp	r3, r2
 80049c2:	da07      	bge.n	80049d4 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x50>
        _write_register(result_field_registers_data[i], _registers_data[result_field_registers_data[i]]);
 80049c4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80049c8:	4620      	mov	r0, r4
 80049ca:	1863      	adds	r3, r4, r1
 80049cc:	7b1a      	ldrb	r2, [r3, #12]
 80049ce:	f7ff ffd5 	bl	800497c <_ZN13LoRa_register15_write_registerEhh>
    for(int i = 0; i < result_field_registers_len; ++i) {
 80049d2:	e7f2      	b.n	80049ba <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x36>
    _send = true;
 80049d4:	2301      	movs	r3, #1
 80049d6:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    if (fl_clear) {
 80049da:	b116      	cbz	r6, 80049e2 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x5e>
        clear();
 80049dc:	4620      	mov	r0, r4
 80049de:	f7ff fd94 	bl	800450a <_ZN13LoRa_register5clearEv>
    return result_field_registers_len;
 80049e2:	f894 0220 	ldrb.w	r0, [r4, #544]	; 0x220
 80049e6:	e7dd      	b.n	80049a4 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x20>
        return 0;
 80049e8:	4628      	mov	r0, r5
 80049ea:	e7db      	b.n	80049a4 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x20>
 80049ec:	fffffe30 	.word	0xfffffe30

080049f0 <_ZN13LoRa_register14register_writeE13Address_fieldbb>:
uint8_t LoRa_register::register_write(Address_field field, bool fl_clear, bool error_clear) {
 80049f0:	b084      	sub	sp, #16
 80049f2:	b513      	push	{r0, r1, r4, lr}
 80049f4:	ac05      	add	r4, sp, #20
 80049f6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return register_write(&field, 1, fl_clear, error_clear);
 80049fa:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 80049fe:	2201      	movs	r2, #1
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	4621      	mov	r1, r4
 8004a04:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8004a08:	f7ff ffbc 	bl	8004984 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
}
 8004a0c:	b002      	add	sp, #8
 8004a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a12:	b004      	add	sp, #16
 8004a14:	4770      	bx	lr
	...

08004a18 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb>:
uint8_t LoRa_register::clear_flags(Address_field* flags, uint8_t amt_flags, bool back_value) {
 8004a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a1c:	b085      	sub	sp, #20
 8004a1e:	9301      	str	r3, [sp, #4]
    if(_registers_state[REG_IRQ_FLAGS] == false) {
 8004a20:	4b25      	ldr	r3, [pc, #148]	; (8004ab8 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0xa0>)
uint8_t LoRa_register::clear_flags(Address_field* flags, uint8_t amt_flags, bool back_value) {
 8004a22:	4605      	mov	r5, r0
    if(_registers_state[REG_IRQ_FLAGS] == false) {
 8004a24:	f893 a000 	ldrb.w	sl, [r3]
uint8_t LoRa_register::clear_flags(Address_field* flags, uint8_t amt_flags, bool back_value) {
 8004a28:	460f      	mov	r7, r1
    if(_registers_state[REG_IRQ_FLAGS] == false) {
 8004a2a:	eb00 060a 	add.w	r6, r0, sl
 8004a2e:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
uint8_t LoRa_register::clear_flags(Address_field* flags, uint8_t amt_flags, bool back_value) {
 8004a32:	4614      	mov	r4, r2
    if(_registers_state[REG_IRQ_FLAGS] == false) {
 8004a34:	b923      	cbnz	r3, 8004a40 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x28>
        return 0; // флаги не считаны
 8004a36:	2400      	movs	r4, #0
}
 8004a38:	4620      	mov	r0, r4
 8004a3a:	b005      	add	sp, #20
 8004a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(int i = 0; i < amt_flags; ++i) {
 8004a40:	f04f 0800 	mov.w	r8, #0
 8004a44:	f04f 0b1c 	mov.w	fp, #28
 8004a48:	f500 79e8 	add.w	r9, r0, #464	; 0x1d0
 8004a4c:	4544      	cmp	r4, r8
 8004a4e:	dd0f      	ble.n	8004a70 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x58>
 8004a50:	fb0b 7208 	mla	r2, fp, r8, r7
 8004a54:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
            if(flags[i] == _flags[j]) {
 8004a58:	4610      	mov	r0, r2
 8004a5a:	9103      	str	r1, [sp, #12]
 8004a5c:	9202      	str	r2, [sp, #8]
 8004a5e:	f7fe fd74 	bl	800354a <_ZeqRK13Address_fieldS1_>
 8004a62:	bb28      	cbnz	r0, 8004ab0 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x98>
        for(int j = 0; j < AMT_FLAGS; ++j) {
 8004a64:	9903      	ldr	r1, [sp, #12]
 8004a66:	9a02      	ldr	r2, [sp, #8]
 8004a68:	311c      	adds	r1, #28
 8004a6a:	4549      	cmp	r1, r9
 8004a6c:	d1f4      	bne.n	8004a58 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x40>
 8004a6e:	e7e2      	b.n	8004a36 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x1e>
    _registers_data[REG_IRQ_FLAGS] = 0;
 8004a70:	2200      	movs	r2, #0
        _values_clear_flags_[i] = 1;
 8004a72:	2101      	movs	r1, #1
 8004a74:	4b11      	ldr	r3, [pc, #68]	; (8004abc <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0xa4>)
    uint8_t data = _registers_data[REG_IRQ_FLAGS];
 8004a76:	f896 800c 	ldrb.w	r8, [r6, #12]
    _registers_data[REG_IRQ_FLAGS] = 0;
 8004a7a:	7332      	strb	r2, [r6, #12]
    for(int i = 0; i < amt_flags; ++i)
 8004a7c:	4294      	cmp	r4, r2
 8004a7e:	d003      	beq.n	8004a88 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x70>
        _values_clear_flags_[i] = 1;
 8004a80:	f843 1b04 	str.w	r1, [r3], #4
    for(int i = 0; i < amt_flags; ++i)
 8004a84:	3201      	adds	r2, #1
 8004a86:	e7f9      	b.n	8004a7c <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x64>
    set_field_value(flags, _values_clear_flags_, amt_flags);
 8004a88:	4623      	mov	r3, r4
 8004a8a:	4639      	mov	r1, r7
 8004a8c:	4a0b      	ldr	r2, [pc, #44]	; (8004abc <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0xa4>)
 8004a8e:	4628      	mov	r0, r5
 8004a90:	f7ff ff22 	bl	80048d8 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
    _write_register(REG_IRQ_FLAGS, _registers_data[REG_IRQ_FLAGS]);
 8004a94:	4651      	mov	r1, sl
 8004a96:	4628      	mov	r0, r5
 8004a98:	7b32      	ldrb	r2, [r6, #12]
 8004a9a:	f7ff ff6f 	bl	800497c <_ZN13LoRa_register15_write_registerEhh>
    if(back_value) {
 8004a9e:	9b01      	ldr	r3, [sp, #4]
 8004aa0:	b113      	cbz	r3, 8004aa8 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x90>
        _registers_data[REG_IRQ_FLAGS] = data | ~_registers_data[REG_IRQ_FLAGS];
 8004aa2:	f886 800c 	strb.w	r8, [r6, #12]
 8004aa6:	e7c7      	b.n	8004a38 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x20>
 8004aa8:	7b33      	ldrb	r3, [r6, #12]
 8004aaa:	ea68 0803 	orn	r8, r8, r3
 8004aae:	e7f8      	b.n	8004aa2 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x8a>
    for(int i = 0; i < amt_flags; ++i) {
 8004ab0:	f108 0801 	add.w	r8, r8, #1
 8004ab4:	e7ca      	b.n	8004a4c <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x34>
 8004ab6:	bf00      	nop
 8004ab8:	0800a69b 	.word	0x0800a69b
 8004abc:	20001710 	.word	0x20001710

08004ac0 <_ZN13LoRa_register11clear_flagsE13Address_fieldb>:
uint8_t LoRa_register::clear_flags(Address_field flag, bool back_value) {
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	b510      	push	{r4, lr}
 8004ac4:	ac03      	add	r4, sp, #12
 8004ac6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return clear_flags(&flag, 1, back_value);
 8004aca:	4621      	mov	r1, r4
 8004acc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f7ff ffa1 	bl	8004a18 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb>
}
 8004ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ada:	b004      	add	sp, #16
 8004adc:	4770      	bx	lr
	...

08004ae0 <_GLOBAL__sub_I_REG_FIFO>:
// ----- ----- ----- Регистры ----- ----- -----
//   ----- ----- ----- - - - - - - ----- ----- -----
const Register
// --- --- --- Регистр очереди --- --- ---
// - REG_FIFO -
reg_fifo[1] = {Register(REG_FIFO, 8, 0)},
 8004ae0:	2300      	movs	r3, #0
    // Dio2Mapping, Dio3Mapping, Dio4Mapping, Dio5Mapping,
    Version,
    // FastHopOn, TcxoInputOn,
    PaDac
    // FormerTemp, BitRateFrac, AgcReferenceLevel, AgcStep1, AgcStep2, AgcStep3, AgcStep4, AgcStep5, PllBandwidth
};
 8004ae2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
reg_fifo[1] = {Register(REG_FIFO, 8, 0)},
 8004ae6:	4cda      	ldr	r4, [pc, #872]	; (8004e50 <_GLOBAL__sub_I_REG_FIFO+0x370>)
};
 8004ae8:	b087      	sub	sp, #28
reg_fifo[1] = {Register(REG_FIFO, 8, 0)},
 8004aea:	4619      	mov	r1, r3
 8004aec:	2208      	movs	r2, #8
 8004aee:	4620      	mov	r0, r4
 8004af0:	f7fe fb0e 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_long_range_mode[1] = {Register(REG_OP_MODE, 1, 7)},
 8004af4:	2201      	movs	r2, #1
 8004af6:	f8df b41c 	ldr.w	fp, [pc, #1052]	; 8004f14 <_GLOBAL__sub_I_REG_FIFO+0x434>
 8004afa:	4611      	mov	r1, r2
 8004afc:	2307      	movs	r3, #7
 8004afe:	4658      	mov	r0, fp
 8004b00:	f7fe fb06 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_low_frequency_mode_on[1] = {Register(REG_OP_MODE, 1, 3)},
 8004b04:	2201      	movs	r2, #1
 8004b06:	f8df a410 	ldr.w	sl, [pc, #1040]	; 8004f18 <_GLOBAL__sub_I_REG_FIFO+0x438>
reg_mode[1] = {Register(REG_OP_MODE, 3, 0)},
 8004b0a:	f8df 9410 	ldr.w	r9, [pc, #1040]	; 8004f1c <_GLOBAL__sub_I_REG_FIFO+0x43c>
reg_low_frequency_mode_on[1] = {Register(REG_OP_MODE, 1, 3)},
 8004b0e:	4611      	mov	r1, r2
 8004b10:	2303      	movs	r3, #3
 8004b12:	4650      	mov	r0, sl
 8004b14:	f7fe fafc 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_mode[1] = {Register(REG_OP_MODE, 3, 0)},
 8004b18:	2300      	movs	r3, #0
 8004b1a:	2203      	movs	r2, #3
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	4648      	mov	r0, r9
 8004b20:	f7fe faf6 	bl	8003110 <_ZN8RegisterC1Ethh>
              Register(REG_FRF_MSB, 8, 0)},
 8004b24:	2208      	movs	r2, #8
 8004b26:	f8df 83f8 	ldr.w	r8, [pc, #1016]	; 8004f20 <_GLOBAL__sub_I_REG_FIFO+0x440>
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	4640      	mov	r0, r8
 8004b30:	f7fe faee 	bl	8003110 <_ZN8RegisterC1Ethh>
 8004b34:	2208      	movs	r2, #8
 8004b36:	2300      	movs	r3, #0
 8004b38:	eb08 0002 	add.w	r0, r8, r2
 8004b3c:	2107      	movs	r1, #7
 8004b3e:	f7fe fae7 	bl	8003110 <_ZN8RegisterC1Ethh>
 8004b42:	2300      	movs	r3, #0
 8004b44:	2208      	movs	r2, #8
 8004b46:	2106      	movs	r1, #6
 8004b48:	f108 0010 	add.w	r0, r8, #16
 8004b4c:	f7fe fae0 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_pa_select[1] = {Register(REG_PA_CONFIG, 1, 7)},
 8004b50:	2307      	movs	r3, #7
 8004b52:	2201      	movs	r2, #1
 8004b54:	2109      	movs	r1, #9
 8004b56:	48bf      	ldr	r0, [pc, #764]	; (8004e54 <_GLOBAL__sub_I_REG_FIFO+0x374>)
 8004b58:	f7fe fada 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_max_power[1] = {Register(REG_PA_CONFIG, 3, 4)},
 8004b5c:	2304      	movs	r3, #4
 8004b5e:	2203      	movs	r2, #3
 8004b60:	2109      	movs	r1, #9
 8004b62:	48bd      	ldr	r0, [pc, #756]	; (8004e58 <_GLOBAL__sub_I_REG_FIFO+0x378>)
 8004b64:	f7fe fad4 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_output_power[1] = {Register(REG_PA_CONFIG, 4, 0)},
 8004b68:	2300      	movs	r3, #0
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	2109      	movs	r1, #9
 8004b6e:	48bb      	ldr	r0, [pc, #748]	; (8004e5c <_GLOBAL__sub_I_REG_FIFO+0x37c>)
 8004b70:	f7fe face 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_lna_boost_hf[1] = {Register(REG_LNA, 2, 0)},
 8004b74:	2300      	movs	r3, #0
 8004b76:	2202      	movs	r2, #2
 8004b78:	210c      	movs	r1, #12
 8004b7a:	48b9      	ldr	r0, [pc, #740]	; (8004e60 <_GLOBAL__sub_I_REG_FIFO+0x380>)
 8004b7c:	f7fe fac8 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_fifo_addr_ptr[1] = {Register(REG_FIFO_ADDR_PTR, 8, 0)},
 8004b80:	2300      	movs	r3, #0
 8004b82:	2208      	movs	r2, #8
 8004b84:	210d      	movs	r1, #13
 8004b86:	48b7      	ldr	r0, [pc, #732]	; (8004e64 <_GLOBAL__sub_I_REG_FIFO+0x384>)
 8004b88:	f7fe fac2 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_fifo_tx_base_addr[1] = {Register(REG_FIFO_TX_BASE_ADDR, 8, 0)},
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	2208      	movs	r2, #8
 8004b90:	210e      	movs	r1, #14
 8004b92:	48b5      	ldr	r0, [pc, #724]	; (8004e68 <_GLOBAL__sub_I_REG_FIFO+0x388>)
 8004b94:	f7fe fabc 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_fifo_rx_base_addr[1] = {Register(REG_FIFO_RX_BASE_ADDR, 8, 0)},
 8004b98:	2300      	movs	r3, #0
 8004b9a:	2208      	movs	r2, #8
 8004b9c:	210f      	movs	r1, #15
 8004b9e:	48b3      	ldr	r0, [pc, #716]	; (8004e6c <_GLOBAL__sub_I_REG_FIFO+0x38c>)
 8004ba0:	f7fe fab6 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_fifo_rx_current_addr[1] = {Register(REG_FIFO_RX_CURRENT_ADDR, 8, 0)},
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	2208      	movs	r2, #8
 8004ba8:	2110      	movs	r1, #16
 8004baa:	48b1      	ldr	r0, [pc, #708]	; (8004e70 <_GLOBAL__sub_I_REG_FIFO+0x390>)
 8004bac:	f7fe fab0 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_rx_timeout[1] = {Register(REG_IRQ_FLAGS, 1, 7)},
 8004bb0:	2307      	movs	r3, #7
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	2112      	movs	r1, #18
 8004bb6:	48af      	ldr	r0, [pc, #700]	; (8004e74 <_GLOBAL__sub_I_REG_FIFO+0x394>)
 8004bb8:	f7fe faaa 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_rx_done[1] = {Register(REG_IRQ_FLAGS, 1, 6)},
 8004bbc:	2306      	movs	r3, #6
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	2112      	movs	r1, #18
 8004bc2:	48ad      	ldr	r0, [pc, #692]	; (8004e78 <_GLOBAL__sub_I_REG_FIFO+0x398>)
 8004bc4:	f7fe faa4 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_payload_crc_error[1] = {Register(REG_IRQ_FLAGS, 1, 5)},
 8004bc8:	2305      	movs	r3, #5
 8004bca:	2201      	movs	r2, #1
 8004bcc:	2112      	movs	r1, #18
 8004bce:	48ab      	ldr	r0, [pc, #684]	; (8004e7c <_GLOBAL__sub_I_REG_FIFO+0x39c>)
 8004bd0:	f7fe fa9e 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_valid_header[1] = {Register(REG_IRQ_FLAGS, 1, 4)},
 8004bd4:	2304      	movs	r3, #4
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	2112      	movs	r1, #18
 8004bda:	48a9      	ldr	r0, [pc, #676]	; (8004e80 <_GLOBAL__sub_I_REG_FIFO+0x3a0>)
 8004bdc:	f7fe fa98 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_tx_done[1] = {Register(REG_IRQ_FLAGS, 1, 3)},
 8004be0:	2303      	movs	r3, #3
 8004be2:	2201      	movs	r2, #1
 8004be4:	2112      	movs	r1, #18
 8004be6:	48a7      	ldr	r0, [pc, #668]	; (8004e84 <_GLOBAL__sub_I_REG_FIFO+0x3a4>)
 8004be8:	f7fe fa92 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_cad_done[1] = {Register(REG_IRQ_FLAGS, 1, 2)},
 8004bec:	2302      	movs	r3, #2
 8004bee:	2201      	movs	r2, #1
 8004bf0:	2112      	movs	r1, #18
 8004bf2:	48a5      	ldr	r0, [pc, #660]	; (8004e88 <_GLOBAL__sub_I_REG_FIFO+0x3a8>)
 8004bf4:	f7fe fa8c 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_fhss_change_channel[1] = {Register(REG_IRQ_FLAGS, 1, 1)},
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	2112      	movs	r1, #18
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	48a3      	ldr	r0, [pc, #652]	; (8004e8c <_GLOBAL__sub_I_REG_FIFO+0x3ac>)
 8004c00:	f7fe fa86 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_cad_detected[1] = {Register(REG_IRQ_FLAGS, 1, 0)},
 8004c04:	2300      	movs	r3, #0
 8004c06:	2201      	movs	r2, #1
 8004c08:	2112      	movs	r1, #18
 8004c0a:	48a1      	ldr	r0, [pc, #644]	; (8004e90 <_GLOBAL__sub_I_REG_FIFO+0x3b0>)
 8004c0c:	f7fe fa80 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_fifo_rx_bytes_nb[1] = {Register(REG_RX_NB_BYTES, 8, 0)},
 8004c10:	2300      	movs	r3, #0
 8004c12:	2208      	movs	r2, #8
 8004c14:	2113      	movs	r1, #19
 8004c16:	489f      	ldr	r0, [pc, #636]	; (8004e94 <_GLOBAL__sub_I_REG_FIFO+0x3b4>)
 8004c18:	f7fe fa7a 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_packet_snr[1] = {Register(REG_PKT_SNR_VALUE, 8, 0)},
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	2208      	movs	r2, #8
 8004c20:	2119      	movs	r1, #25
 8004c22:	489d      	ldr	r0, [pc, #628]	; (8004e98 <_GLOBAL__sub_I_REG_FIFO+0x3b8>)
 8004c24:	f7fe fa74 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_packet_rssi[1] = {Register(REG_PKT_RSSI_VALUE, 8, 0)},
 8004c28:	2300      	movs	r3, #0
 8004c2a:	2208      	movs	r2, #8
 8004c2c:	211a      	movs	r1, #26
 8004c2e:	489b      	ldr	r0, [pc, #620]	; (8004e9c <_GLOBAL__sub_I_REG_FIFO+0x3bc>)
 8004c30:	f7fe fa6e 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_bw[1] = {Register(REG_MODEM_CONFIG_1, 4, 4)},
 8004c34:	2304      	movs	r3, #4
 8004c36:	211d      	movs	r1, #29
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4899      	ldr	r0, [pc, #612]	; (8004ea0 <_GLOBAL__sub_I_REG_FIFO+0x3c0>)
 8004c3c:	f7fe fa68 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_spreading_factor[1] = {Register(REG_MODEM_CONFIG_2, 4, 4)},
 8004c40:	2304      	movs	r3, #4
 8004c42:	211e      	movs	r1, #30
 8004c44:	461a      	mov	r2, r3
 8004c46:	4897      	ldr	r0, [pc, #604]	; (8004ea4 <_GLOBAL__sub_I_REG_FIFO+0x3c4>)
 8004c48:	f7fe fa62 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_rx_payload_crc_on[1] = {Register(REG_MODEM_CONFIG_2, 1, 2)},
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	2201      	movs	r2, #1
 8004c50:	211e      	movs	r1, #30
 8004c52:	4895      	ldr	r0, [pc, #596]	; (8004ea8 <_GLOBAL__sub_I_REG_FIFO+0x3c8>)
 8004c54:	f7fe fa5c 	bl	8003110 <_ZN8RegisterC1Ethh>
                          Register(REG_PREAMBLE_MSB, 8, 0)},
 8004c58:	2300      	movs	r3, #0
 8004c5a:	2208      	movs	r2, #8
 8004c5c:	2121      	movs	r1, #33	; 0x21
 8004c5e:	4893      	ldr	r0, [pc, #588]	; (8004eac <_GLOBAL__sub_I_REG_FIFO+0x3cc>)
 8004c60:	f7fe fa56 	bl	8003110 <_ZN8RegisterC1Ethh>
 8004c64:	2208      	movs	r2, #8
 8004c66:	4891      	ldr	r0, [pc, #580]	; (8004eac <_GLOBAL__sub_I_REG_FIFO+0x3cc>)
 8004c68:	2300      	movs	r3, #0
 8004c6a:	2120      	movs	r1, #32
 8004c6c:	4410      	add	r0, r2
 8004c6e:	f7fe fa4f 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_payload_length[1] = {Register(REG_PAYLOAD_LENGTH, 8, 0)},
 8004c72:	2300      	movs	r3, #0
 8004c74:	2208      	movs	r2, #8
 8004c76:	2122      	movs	r1, #34	; 0x22
 8004c78:	488d      	ldr	r0, [pc, #564]	; (8004eb0 <_GLOBAL__sub_I_REG_FIFO+0x3d0>)
 8004c7a:	f7fe fa49 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_low_data_rate_optimize[1] = {Register(REG_MODEM_CONFIG_3, 1, 3)},
 8004c7e:	2303      	movs	r3, #3
 8004c80:	2201      	movs	r2, #1
 8004c82:	2126      	movs	r1, #38	; 0x26
 8004c84:	488b      	ldr	r0, [pc, #556]	; (8004eb4 <_GLOBAL__sub_I_REG_FIFO+0x3d4>)
 8004c86:	f7fe fa43 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_agc_auto_on[1] = {Register(REG_MODEM_CONFIG_3, 1, 2)},
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	2126      	movs	r1, #38	; 0x26
 8004c90:	4889      	ldr	r0, [pc, #548]	; (8004eb8 <_GLOBAL__sub_I_REG_FIFO+0x3d8>)
 8004c92:	f7fe fa3d 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_detection_optimize[1] = {Register(REG_DETECTION_OPTIMIZE, 3, 0)},
 8004c96:	2300      	movs	r3, #0
 8004c98:	2203      	movs	r2, #3
 8004c9a:	2131      	movs	r1, #49	; 0x31
 8004c9c:	4887      	ldr	r0, [pc, #540]	; (8004ebc <_GLOBAL__sub_I_REG_FIFO+0x3dc>)
 8004c9e:	f7fe fa37 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_detection_threshold[1] = {Register(REG_DETECTION_THRESHOLD, 8, 0)},
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	2208      	movs	r2, #8
 8004ca6:	2137      	movs	r1, #55	; 0x37
 8004ca8:	4885      	ldr	r0, [pc, #532]	; (8004ec0 <_GLOBAL__sub_I_REG_FIFO+0x3e0>)
 8004caa:	f7fe fa31 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_sync_word[1] = {Register(REG_SYNC_WORD, 8, 0)},  // , reserved_value=[0x34])
 8004cae:	2300      	movs	r3, #0
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	2139      	movs	r1, #57	; 0x39
 8004cb4:	4883      	ldr	r0, [pc, #524]	; (8004ec4 <_GLOBAL__sub_I_REG_FIFO+0x3e4>)
 8004cb6:	f7fe fa2b 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_dio0_mapping[1] = {Register(REG_DIO_MAPPING_1, 2, 6)},
 8004cba:	2306      	movs	r3, #6
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	2140      	movs	r1, #64	; 0x40
 8004cc0:	4881      	ldr	r0, [pc, #516]	; (8004ec8 <_GLOBAL__sub_I_REG_FIFO+0x3e8>)
 8004cc2:	f7fe fa25 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_dio1_mapping[1] = {Register(REG_DIO_MAPPING_1, 2, 4)},
 8004cc6:	2304      	movs	r3, #4
 8004cc8:	2202      	movs	r2, #2
 8004cca:	2140      	movs	r1, #64	; 0x40
 8004ccc:	487f      	ldr	r0, [pc, #508]	; (8004ecc <_GLOBAL__sub_I_REG_FIFO+0x3ec>)
 8004cce:	f7fe fa1f 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_map_preamble_detect[1] = {Register(REG_DIO_MAPPING_2, 1, 0)},
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	2141      	movs	r1, #65	; 0x41
 8004cd8:	487d      	ldr	r0, [pc, #500]	; (8004ed0 <_GLOBAL__sub_I_REG_FIFO+0x3f0>)
 8004cda:	f7fe fa19 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_version[1] = {Register(REG_VERSION, 8, 0)},
 8004cde:	2300      	movs	r3, #0
 8004ce0:	2208      	movs	r2, #8
 8004ce2:	2142      	movs	r1, #66	; 0x42
 8004ce4:	487b      	ldr	r0, [pc, #492]	; (8004ed4 <_GLOBAL__sub_I_REG_FIFO+0x3f4>)
Fifo(reg_fifo, 1, false, 'w', 0x00, 0xFF),
 8004ce6:	2700      	movs	r7, #0
 8004ce8:	2577      	movs	r5, #119	; 0x77
 8004cea:	26ff      	movs	r6, #255	; 0xff
reg_version[1] = {Register(REG_VERSION, 8, 0)},
 8004cec:	f7fe fa10 	bl	8003110 <_ZN8RegisterC1Ethh>
reg_pa_dac[1] = {Register(REG_PA_DAC, 3, 0)}//,
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	2203      	movs	r2, #3
 8004cf4:	214d      	movs	r1, #77	; 0x4d
 8004cf6:	4878      	ldr	r0, [pc, #480]	; (8004ed8 <_GLOBAL__sub_I_REG_FIFO+0x3f8>)
 8004cf8:	f7fe fa0a 	bl	8003110 <_ZN8RegisterC1Ethh>
Fifo(reg_fifo, 1, false, 'w', 0x00, 0xFF),
 8004cfc:	4621      	mov	r1, r4
LongRangeMode(reg_long_range_mode, 1, false, 'w', 0x00, 0x01),
 8004cfe:	2401      	movs	r4, #1
Fifo(reg_fifo, 1, false, 'w', 0x00, 0xFF),
 8004d00:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8004d04:	463b      	mov	r3, r7
 8004d06:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004d0a:	9500      	str	r5, [sp, #0]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	4873      	ldr	r0, [pc, #460]	; (8004edc <_GLOBAL__sub_I_REG_FIFO+0x3fc>)
 8004d10:	f7fe fa88 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
LongRangeMode(reg_long_range_mode, 1, false, 'w', 0x00, 0x01),
 8004d14:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004d18:	463b      	mov	r3, r7
 8004d1a:	4622      	mov	r2, r4
 8004d1c:	4659      	mov	r1, fp
 8004d1e:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004d22:	9500      	str	r5, [sp, #0]
 8004d24:	486e      	ldr	r0, [pc, #440]	; (8004ee0 <_GLOBAL__sub_I_REG_FIFO+0x400>)
 8004d26:	f7fe fa7d 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
LowFrequencyModeOn(reg_low_frequency_mode_on, 1, false, 'w', 0x00, 0x01),
 8004d2a:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004d2e:	463b      	mov	r3, r7
 8004d30:	4622      	mov	r2, r4
 8004d32:	4651      	mov	r1, sl
 8004d34:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004d38:	9500      	str	r5, [sp, #0]
 8004d3a:	486a      	ldr	r0, [pc, #424]	; (8004ee4 <_GLOBAL__sub_I_REG_FIFO+0x404>)
 8004d3c:	f7fe fa72 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Mode(reg_mode, 1, false, 'w', 0x00, 0x07),
 8004d40:	2307      	movs	r3, #7
 8004d42:	4622      	mov	r2, r4
 8004d44:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8004d48:	4649      	mov	r1, r9
 8004d4a:	463b      	mov	r3, r7
 8004d4c:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004d50:	9500      	str	r5, [sp, #0]
 8004d52:	4865      	ldr	r0, [pc, #404]	; (8004ee8 <_GLOBAL__sub_I_REG_FIFO+0x408>)
 8004d54:	f7fe fa66 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Frf(reg_frf, 3, false, 'w', 0x000000, 0xFFFFFF),
 8004d58:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8004d5c:	463b      	mov	r3, r7
 8004d5e:	e9cd 7201 	strd	r7, r2, [sp, #4]
 8004d62:	4641      	mov	r1, r8
 8004d64:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004d68:	9500      	str	r5, [sp, #0]
 8004d6a:	2203      	movs	r2, #3
 8004d6c:	485f      	ldr	r0, [pc, #380]	; (8004eec <_GLOBAL__sub_I_REG_FIFO+0x40c>)
 8004d6e:	f7fe fa59 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PaSelect(reg_pa_select, 1, false, 'w', 0x00, 0x01),
 8004d72:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004d76:	463b      	mov	r3, r7
 8004d78:	4622      	mov	r2, r4
 8004d7a:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004d7e:	9500      	str	r5, [sp, #0]
 8004d80:	4934      	ldr	r1, [pc, #208]	; (8004e54 <_GLOBAL__sub_I_REG_FIFO+0x374>)
 8004d82:	485b      	ldr	r0, [pc, #364]	; (8004ef0 <_GLOBAL__sub_I_REG_FIFO+0x410>)
 8004d84:	f7fe fa4e 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
MaxPower(reg_max_power, 1, false, 'w', 0x00, 0x07),
 8004d88:	2307      	movs	r3, #7
 8004d8a:	4622      	mov	r2, r4
 8004d8c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8004d90:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004d94:	463b      	mov	r3, r7
 8004d96:	9500      	str	r5, [sp, #0]
 8004d98:	492f      	ldr	r1, [pc, #188]	; (8004e58 <_GLOBAL__sub_I_REG_FIFO+0x378>)
 8004d9a:	4856      	ldr	r0, [pc, #344]	; (8004ef4 <_GLOBAL__sub_I_REG_FIFO+0x414>)
 8004d9c:	f7fe fa42 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
OutputPower(reg_output_power, 1, false, 'w', 0x00, 0x0F),
 8004da0:	220f      	movs	r2, #15
LnaBoostHf(reg_lna_boost_hf, 1, false, 'w', 0x00, 0x03, reserv_lna_boost_hf, 2),
 8004da2:	f04f 0b03 	mov.w	fp, #3
 8004da6:	f04f 0902 	mov.w	r9, #2
FifoRxCurrentAddr(reg_fifo_rx_current_addr, 1, false, 'r', 0x00, 0xFF),
 8004daa:	f04f 0a72 	mov.w	sl, #114	; 0x72
RxTimeout(reg_rx_timeout, 1, false, 'c', 0x00, 0x01),
 8004dae:	f04f 0863 	mov.w	r8, #99	; 0x63
OutputPower(reg_output_power, 1, false, 'w', 0x00, 0x0F),
 8004db2:	e9cd 7201 	strd	r7, r2, [sp, #4]
 8004db6:	463b      	mov	r3, r7
 8004db8:	4622      	mov	r2, r4
 8004dba:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004dbe:	9500      	str	r5, [sp, #0]
 8004dc0:	4926      	ldr	r1, [pc, #152]	; (8004e5c <_GLOBAL__sub_I_REG_FIFO+0x37c>)
 8004dc2:	484d      	ldr	r0, [pc, #308]	; (8004ef8 <_GLOBAL__sub_I_REG_FIFO+0x418>)
 8004dc4:	f7fe fa2e 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
LnaBoostHf(reg_lna_boost_hf, 1, false, 'w', 0x00, 0x03, reserv_lna_boost_hf, 2),
 8004dc8:	4a4c      	ldr	r2, [pc, #304]	; (8004efc <_GLOBAL__sub_I_REG_FIFO+0x41c>)
 8004dca:	e9cd 7b01 	strd	r7, fp, [sp, #4]
 8004dce:	463b      	mov	r3, r7
 8004dd0:	f8cd 9010 	str.w	r9, [sp, #16]
 8004dd4:	9203      	str	r2, [sp, #12]
 8004dd6:	9500      	str	r5, [sp, #0]
 8004dd8:	4622      	mov	r2, r4
 8004dda:	4921      	ldr	r1, [pc, #132]	; (8004e60 <_GLOBAL__sub_I_REG_FIFO+0x380>)
 8004ddc:	4848      	ldr	r0, [pc, #288]	; (8004f00 <_GLOBAL__sub_I_REG_FIFO+0x420>)
 8004dde:	f7fe fa21 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FifoAddrPtr(reg_fifo_addr_ptr, 1, false, 'w', 0x00, 0xFF),
 8004de2:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8004de6:	463b      	mov	r3, r7
 8004de8:	4622      	mov	r2, r4
 8004dea:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004dee:	9500      	str	r5, [sp, #0]
 8004df0:	491c      	ldr	r1, [pc, #112]	; (8004e64 <_GLOBAL__sub_I_REG_FIFO+0x384>)
 8004df2:	4844      	ldr	r0, [pc, #272]	; (8004f04 <_GLOBAL__sub_I_REG_FIFO+0x424>)
 8004df4:	f7fe fa16 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FifoTxBaseAddr(reg_fifo_tx_base_addr, 1, false, 'w', 0x00, 0xFF),
 8004df8:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8004dfc:	463b      	mov	r3, r7
 8004dfe:	4622      	mov	r2, r4
 8004e00:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004e04:	9500      	str	r5, [sp, #0]
 8004e06:	4918      	ldr	r1, [pc, #96]	; (8004e68 <_GLOBAL__sub_I_REG_FIFO+0x388>)
 8004e08:	483f      	ldr	r0, [pc, #252]	; (8004f08 <_GLOBAL__sub_I_REG_FIFO+0x428>)
 8004e0a:	f7fe fa0b 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FifoRxBaseAddr(reg_fifo_rx_base_addr, 1, false, 'w', 0x00, 0xFF),
 8004e0e:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8004e12:	463b      	mov	r3, r7
 8004e14:	4622      	mov	r2, r4
 8004e16:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004e1a:	9500      	str	r5, [sp, #0]
 8004e1c:	4913      	ldr	r1, [pc, #76]	; (8004e6c <_GLOBAL__sub_I_REG_FIFO+0x38c>)
 8004e1e:	483b      	ldr	r0, [pc, #236]	; (8004f0c <_GLOBAL__sub_I_REG_FIFO+0x42c>)
 8004e20:	f7fe fa00 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FifoRxCurrentAddr(reg_fifo_rx_current_addr, 1, false, 'r', 0x00, 0xFF),
 8004e24:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8004e28:	463b      	mov	r3, r7
 8004e2a:	4622      	mov	r2, r4
 8004e2c:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004e30:	490f      	ldr	r1, [pc, #60]	; (8004e70 <_GLOBAL__sub_I_REG_FIFO+0x390>)
 8004e32:	f8cd a000 	str.w	sl, [sp]
 8004e36:	4836      	ldr	r0, [pc, #216]	; (8004f10 <_GLOBAL__sub_I_REG_FIFO+0x430>)
 8004e38:	f7fe f9f4 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
RxTimeout(reg_rx_timeout, 1, false, 'c', 0x00, 0x01),
 8004e3c:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004e40:	463b      	mov	r3, r7
 8004e42:	4622      	mov	r2, r4
 8004e44:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004e48:	f8cd 8000 	str.w	r8, [sp]
 8004e4c:	e06a      	b.n	8004f24 <_GLOBAL__sub_I_REG_FIFO+0x444>
 8004e4e:	bf00      	nop
 8004e50:	200020dc 	.word	0x200020dc
 8004e54:	20001fb0 	.word	0x20001fb0
 8004e58:	20001fa8 	.word	0x20001fa8
 8004e5c:	20002000 	.word	0x20002000
 8004e60:	20001ff8 	.word	0x20001ff8
 8004e64:	2000202c 	.word	0x2000202c
 8004e68:	2000206c 	.word	0x2000206c
 8004e6c:	20002064 	.word	0x20002064
 8004e70:	200020a4 	.word	0x200020a4
 8004e74:	20001fc8 	.word	0x20001fc8
 8004e78:	20001f88 	.word	0x20001f88
 8004e7c:	20002074 	.word	0x20002074
 8004e80:	20002008 	.word	0x20002008
 8004e84:	20001f90 	.word	0x20001f90
 8004e88:	20001fa0 	.word	0x20001fa0
 8004e8c:	20002094 	.word	0x20002094
 8004e90:	20001fe0 	.word	0x20001fe0
 8004e94:	20002054 	.word	0x20002054
 8004e98:	20001fc0 	.word	0x20001fc0
 8004e9c:	20001fd8 	.word	0x20001fd8
 8004ea0:	200020bc 	.word	0x200020bc
 8004ea4:	2000205c 	.word	0x2000205c
 8004ea8:	2000207c 	.word	0x2000207c
 8004eac:	20002044 	.word	0x20002044
 8004eb0:	20002034 	.word	0x20002034
 8004eb4:	200020b4 	.word	0x200020b4
 8004eb8:	20001fd0 	.word	0x20001fd0
 8004ebc:	20002084 	.word	0x20002084
 8004ec0:	2000208c 	.word	0x2000208c
 8004ec4:	20001fb8 	.word	0x20001fb8
 8004ec8:	20001fe8 	.word	0x20001fe8
 8004ecc:	20001ff0 	.word	0x20001ff0
 8004ed0:	2000209c 	.word	0x2000209c
 8004ed4:	20001f98 	.word	0x20001f98
 8004ed8:	20001f80 	.word	0x20001f80
 8004edc:	20001c54 	.word	0x20001c54
 8004ee0:	20001d34 	.word	0x20001d34
 8004ee4:	20001d6c 	.word	0x20001d6c
 8004ee8:	20001da4 	.word	0x20001da4
 8004eec:	20001cfc 	.word	0x20001cfc
 8004ef0:	20001df8 	.word	0x20001df8
 8004ef4:	20001d88 	.word	0x20001d88
 8004ef8:	20001dc0 	.word	0x20001dc0
 8004efc:	0800a6a4 	.word	0x0800a6a4
 8004f00:	20001d18 	.word	0x20001d18
 8004f04:	20001c70 	.word	0x20001c70
 8004f08:	20001ce0 	.word	0x20001ce0
 8004f0c:	20001c8c 	.word	0x20001c8c
 8004f10:	20001cc4 	.word	0x20001cc4
 8004f14:	2000203c 	.word	0x2000203c
 8004f18:	200020ac 	.word	0x200020ac
 8004f1c:	200020e4 	.word	0x200020e4
 8004f20:	200020c4 	.word	0x200020c4
 8004f24:	49ce      	ldr	r1, [pc, #824]	; (8005260 <_GLOBAL__sub_I_REG_FIFO+0x780>)
 8004f26:	48cf      	ldr	r0, [pc, #828]	; (8005264 <_GLOBAL__sub_I_REG_FIFO+0x784>)
 8004f28:	f7fe f97c 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
RxDone(reg_rx_done, 1, false, 'c', 0x00, 0x01),
 8004f2c:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004f30:	463b      	mov	r3, r7
 8004f32:	4622      	mov	r2, r4
 8004f34:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004f38:	f8cd 8000 	str.w	r8, [sp]
 8004f3c:	49ca      	ldr	r1, [pc, #808]	; (8005268 <_GLOBAL__sub_I_REG_FIFO+0x788>)
 8004f3e:	48cb      	ldr	r0, [pc, #812]	; (800526c <_GLOBAL__sub_I_REG_FIFO+0x78c>)
 8004f40:	f7fe f970 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PayloadCrcError(reg_payload_crc_error, 1, false, 'c', 0x00, 0x01),
 8004f44:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004f48:	463b      	mov	r3, r7
 8004f4a:	4622      	mov	r2, r4
 8004f4c:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004f50:	f8cd 8000 	str.w	r8, [sp]
 8004f54:	49c6      	ldr	r1, [pc, #792]	; (8005270 <_GLOBAL__sub_I_REG_FIFO+0x790>)
 8004f56:	48c7      	ldr	r0, [pc, #796]	; (8005274 <_GLOBAL__sub_I_REG_FIFO+0x794>)
 8004f58:	f7fe f964 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
ValidHeader(reg_valid_header, 1, false, 'c', 0x00, 0x01),
 8004f5c:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004f60:	463b      	mov	r3, r7
 8004f62:	4622      	mov	r2, r4
 8004f64:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004f68:	f8cd 8000 	str.w	r8, [sp]
 8004f6c:	49c2      	ldr	r1, [pc, #776]	; (8005278 <_GLOBAL__sub_I_REG_FIFO+0x798>)
 8004f6e:	48c3      	ldr	r0, [pc, #780]	; (800527c <_GLOBAL__sub_I_REG_FIFO+0x79c>)
 8004f70:	f7fe f958 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
TxDone(reg_tx_done, 1, false, 'c', 0x00, 0x01),
 8004f74:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004f78:	463b      	mov	r3, r7
 8004f7a:	4622      	mov	r2, r4
 8004f7c:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004f80:	f8cd 8000 	str.w	r8, [sp]
 8004f84:	49be      	ldr	r1, [pc, #760]	; (8005280 <_GLOBAL__sub_I_REG_FIFO+0x7a0>)
 8004f86:	48bf      	ldr	r0, [pc, #764]	; (8005284 <_GLOBAL__sub_I_REG_FIFO+0x7a4>)
 8004f88:	f7fe f94c 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
CadDone(reg_cad_done, 1, false, 'c', 0x00, 0x01),
 8004f8c:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004f90:	463b      	mov	r3, r7
 8004f92:	4622      	mov	r2, r4
 8004f94:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004f98:	f8cd 8000 	str.w	r8, [sp]
 8004f9c:	49ba      	ldr	r1, [pc, #744]	; (8005288 <_GLOBAL__sub_I_REG_FIFO+0x7a8>)
 8004f9e:	48bb      	ldr	r0, [pc, #748]	; (800528c <_GLOBAL__sub_I_REG_FIFO+0x7ac>)
 8004fa0:	f7fe f940 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FhssChangeChannel(reg_fhss_change_channel, 1, false, 'c', 0x00, 0x01),
 8004fa4:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004fa8:	463b      	mov	r3, r7
 8004faa:	4622      	mov	r2, r4
 8004fac:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004fb0:	f8cd 8000 	str.w	r8, [sp]
 8004fb4:	49b6      	ldr	r1, [pc, #728]	; (8005290 <_GLOBAL__sub_I_REG_FIFO+0x7b0>)
 8004fb6:	48b7      	ldr	r0, [pc, #732]	; (8005294 <_GLOBAL__sub_I_REG_FIFO+0x7b4>)
 8004fb8:	f7fe f934 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
CadDetected(reg_cad_detected, 1, false, 'c', 0x00, 0x01),
 8004fbc:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004fc0:	463b      	mov	r3, r7
 8004fc2:	4622      	mov	r2, r4
 8004fc4:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004fc8:	f8cd 8000 	str.w	r8, [sp]
 8004fcc:	49b2      	ldr	r1, [pc, #712]	; (8005298 <_GLOBAL__sub_I_REG_FIFO+0x7b8>)
 8004fce:	48b3      	ldr	r0, [pc, #716]	; (800529c <_GLOBAL__sub_I_REG_FIFO+0x7bc>)
 8004fd0:	f7fe f928 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FifoRxBytesNb(reg_fifo_rx_bytes_nb, 1, false, 'r', 0x00, 0xFF),
 8004fd4:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8004fd8:	463b      	mov	r3, r7
 8004fda:	4622      	mov	r2, r4
 8004fdc:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004fe0:	49af      	ldr	r1, [pc, #700]	; (80052a0 <_GLOBAL__sub_I_REG_FIFO+0x7c0>)
 8004fe2:	f8cd a000 	str.w	sl, [sp]
 8004fe6:	48af      	ldr	r0, [pc, #700]	; (80052a4 <_GLOBAL__sub_I_REG_FIFO+0x7c4>)
 8004fe8:	f7fe f91c 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PacketSnr(reg_packet_snr, 1, false, 'r', 0x00, 0xFF),
 8004fec:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8004ff0:	463b      	mov	r3, r7
 8004ff2:	4622      	mov	r2, r4
 8004ff4:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004ff8:	49ab      	ldr	r1, [pc, #684]	; (80052a8 <_GLOBAL__sub_I_REG_FIFO+0x7c8>)
 8004ffa:	f8cd a000 	str.w	sl, [sp]
 8004ffe:	48ab      	ldr	r0, [pc, #684]	; (80052ac <_GLOBAL__sub_I_REG_FIFO+0x7cc>)
 8005000:	f7fe f910 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PacketRssi(reg_packet_rssi, 1, false, 'r', 0x00, 0xFF),
 8005004:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8005008:	463b      	mov	r3, r7
 800500a:	4622      	mov	r2, r4
 800500c:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8005010:	49a7      	ldr	r1, [pc, #668]	; (80052b0 <_GLOBAL__sub_I_REG_FIFO+0x7d0>)
 8005012:	f8cd a000 	str.w	sl, [sp]
 8005016:	48a7      	ldr	r0, [pc, #668]	; (80052b4 <_GLOBAL__sub_I_REG_FIFO+0x7d4>)
 8005018:	f7fe f904 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Bw(reg_bw, 1, false, 'w', 0x00, 0x09),
 800501c:	2209      	movs	r2, #9
 800501e:	463b      	mov	r3, r7
 8005020:	e9cd 7201 	strd	r7, r2, [sp, #4]
 8005024:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8005028:	4622      	mov	r2, r4
 800502a:	9500      	str	r5, [sp, #0]
 800502c:	49a2      	ldr	r1, [pc, #648]	; (80052b8 <_GLOBAL__sub_I_REG_FIFO+0x7d8>)
 800502e:	48a3      	ldr	r0, [pc, #652]	; (80052bc <_GLOBAL__sub_I_REG_FIFO+0x7dc>)
 8005030:	f7fe f8f8 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
SpreadingFactor(reg_spreading_factor, 1, false, 'w', 0x06, 0x0C),
 8005034:	f04f 080c 	mov.w	r8, #12
 8005038:	2206      	movs	r2, #6
 800503a:	463b      	mov	r3, r7
 800503c:	e9cd 2801 	strd	r2, r8, [sp, #4]
 8005040:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8005044:	4622      	mov	r2, r4
 8005046:	9500      	str	r5, [sp, #0]
 8005048:	499d      	ldr	r1, [pc, #628]	; (80052c0 <_GLOBAL__sub_I_REG_FIFO+0x7e0>)
 800504a:	489e      	ldr	r0, [pc, #632]	; (80052c4 <_GLOBAL__sub_I_REG_FIFO+0x7e4>)
 800504c:	f7fe f8ea 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
RxPayloadCrcOn(reg_rx_payload_crc_on, 1, false, 'w', 0x00, 0x01),
 8005050:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8005054:	463b      	mov	r3, r7
 8005056:	4622      	mov	r2, r4
 8005058:	e9cd 7703 	strd	r7, r7, [sp, #12]
 800505c:	9500      	str	r5, [sp, #0]
 800505e:	499a      	ldr	r1, [pc, #616]	; (80052c8 <_GLOBAL__sub_I_REG_FIFO+0x7e8>)
 8005060:	489a      	ldr	r0, [pc, #616]	; (80052cc <_GLOBAL__sub_I_REG_FIFO+0x7ec>)
 8005062:	f7fe f8df 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PreambleLength(reg_preamble_length, 2, false, 'w', 0x0000, 0xFFFF),
 8005066:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800506a:	463b      	mov	r3, r7
 800506c:	e9cd 7201 	strd	r7, r2, [sp, #4]
 8005070:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8005074:	464a      	mov	r2, r9
 8005076:	9500      	str	r5, [sp, #0]
 8005078:	4995      	ldr	r1, [pc, #596]	; (80052d0 <_GLOBAL__sub_I_REG_FIFO+0x7f0>)
 800507a:	4896      	ldr	r0, [pc, #600]	; (80052d4 <_GLOBAL__sub_I_REG_FIFO+0x7f4>)
 800507c:	f7fe f8d2 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PayloadLength(reg_payload_length, 1, false, 'w', 0x01, 0xFF),
 8005080:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005084:	463b      	mov	r3, r7
 8005086:	4622      	mov	r2, r4
 8005088:	e9cd 7703 	strd	r7, r7, [sp, #12]
 800508c:	9500      	str	r5, [sp, #0]
 800508e:	4992      	ldr	r1, [pc, #584]	; (80052d8 <_GLOBAL__sub_I_REG_FIFO+0x7f8>)
 8005090:	4892      	ldr	r0, [pc, #584]	; (80052dc <_GLOBAL__sub_I_REG_FIFO+0x7fc>)
 8005092:	f7fe f8c7 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
LowDataRateOptimize(reg_low_data_rate_optimize, 1, false, 'w', 0x00, 0x01),
 8005096:	e9cd 7401 	strd	r7, r4, [sp, #4]
 800509a:	463b      	mov	r3, r7
 800509c:	4622      	mov	r2, r4
 800509e:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80050a2:	9500      	str	r5, [sp, #0]
 80050a4:	498e      	ldr	r1, [pc, #568]	; (80052e0 <_GLOBAL__sub_I_REG_FIFO+0x800>)
 80050a6:	488f      	ldr	r0, [pc, #572]	; (80052e4 <_GLOBAL__sub_I_REG_FIFO+0x804>)
 80050a8:	f7fe f8bc 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
AgcAutoOn(reg_agc_auto_on, 1, false, 'w', 0x00, 0x01),
 80050ac:	e9cd 7401 	strd	r7, r4, [sp, #4]
 80050b0:	463b      	mov	r3, r7
 80050b2:	4622      	mov	r2, r4
 80050b4:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80050b8:	9500      	str	r5, [sp, #0]
 80050ba:	498b      	ldr	r1, [pc, #556]	; (80052e8 <_GLOBAL__sub_I_REG_FIFO+0x808>)
 80050bc:	488b      	ldr	r0, [pc, #556]	; (80052ec <_GLOBAL__sub_I_REG_FIFO+0x80c>)
 80050be:	f7fe f8b1 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
DetectionOptimize(reg_detection_optimize, 1, false, 'w', 0x03, 0x05, reserv_detection_optimize, 1),
 80050c2:	4a8b      	ldr	r2, [pc, #556]	; (80052f0 <_GLOBAL__sub_I_REG_FIFO+0x810>)
 80050c4:	463b      	mov	r3, r7
 80050c6:	9203      	str	r2, [sp, #12]
 80050c8:	2205      	movs	r2, #5
 80050ca:	9404      	str	r4, [sp, #16]
 80050cc:	e9cd b201 	strd	fp, r2, [sp, #4]
 80050d0:	9500      	str	r5, [sp, #0]
 80050d2:	4622      	mov	r2, r4
 80050d4:	4987      	ldr	r1, [pc, #540]	; (80052f4 <_GLOBAL__sub_I_REG_FIFO+0x814>)
 80050d6:	4888      	ldr	r0, [pc, #544]	; (80052f8 <_GLOBAL__sub_I_REG_FIFO+0x818>)
 80050d8:	f7fe f8a4 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
DetectionThreshold(reg_detection_threshold, 1, false, 'w', 0x0A, 0x0C, reserv_detection_threshold, 1),
 80050dc:	4a87      	ldr	r2, [pc, #540]	; (80052fc <_GLOBAL__sub_I_REG_FIFO+0x81c>)
 80050de:	463b      	mov	r3, r7
 80050e0:	e9cd 8202 	strd	r8, r2, [sp, #8]
 80050e4:	220a      	movs	r2, #10
 80050e6:	9404      	str	r4, [sp, #16]
 80050e8:	e9cd 5200 	strd	r5, r2, [sp]
 80050ec:	4984      	ldr	r1, [pc, #528]	; (8005300 <_GLOBAL__sub_I_REG_FIFO+0x820>)
 80050ee:	4622      	mov	r2, r4
 80050f0:	4884      	ldr	r0, [pc, #528]	; (8005304 <_GLOBAL__sub_I_REG_FIFO+0x824>)
 80050f2:	f7fe f897 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Dio1Mapping(reg_dio1_mapping, 1, false, 'w', 0x00, 0x03),
 80050f6:	f8df 8270 	ldr.w	r8, [pc, #624]	; 8005368 <_GLOBAL__sub_I_REG_FIFO+0x888>
SyncWord(reg_sync_word, 1, false, 'w', 0x00, 0xFF),  // , reserv_sync_word, 1),
 80050fa:	e9cd 7601 	strd	r7, r6, [sp, #4]
 80050fe:	463b      	mov	r3, r7
 8005100:	4622      	mov	r2, r4
 8005102:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8005106:	9500      	str	r5, [sp, #0]
 8005108:	497f      	ldr	r1, [pc, #508]	; (8005308 <_GLOBAL__sub_I_REG_FIFO+0x828>)
 800510a:	4880      	ldr	r0, [pc, #512]	; (800530c <_GLOBAL__sub_I_REG_FIFO+0x82c>)
 800510c:	f7fe f88a 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Dio0Mapping(reg_dio0_mapping, 1, false, 'w', 0x00, 0x03),
 8005110:	e9cd 7b01 	strd	r7, fp, [sp, #4]
 8005114:	463b      	mov	r3, r7
 8005116:	4622      	mov	r2, r4
 8005118:	e9cd 7703 	strd	r7, r7, [sp, #12]
 800511c:	9500      	str	r5, [sp, #0]
 800511e:	497c      	ldr	r1, [pc, #496]	; (8005310 <_GLOBAL__sub_I_REG_FIFO+0x830>)
 8005120:	487c      	ldr	r0, [pc, #496]	; (8005314 <_GLOBAL__sub_I_REG_FIFO+0x834>)
 8005122:	f7fe f87f 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Dio1Mapping(reg_dio1_mapping, 1, false, 'w', 0x00, 0x03),
 8005126:	e9cd 7b01 	strd	r7, fp, [sp, #4]
 800512a:	463b      	mov	r3, r7
 800512c:	4622      	mov	r2, r4
 800512e:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8005132:	9500      	str	r5, [sp, #0]
 8005134:	4640      	mov	r0, r8
 8005136:	4978      	ldr	r1, [pc, #480]	; (8005318 <_GLOBAL__sub_I_REG_FIFO+0x838>)
 8005138:	f7fe f874 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
MapPreambleDetect(reg_map_preamble_detect, 1, false, 'w', 0x00, 0x01),
 800513c:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8005140:	463b      	mov	r3, r7
 8005142:	4622      	mov	r2, r4
 8005144:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8005148:	9500      	str	r5, [sp, #0]
 800514a:	4974      	ldr	r1, [pc, #464]	; (800531c <_GLOBAL__sub_I_REG_FIFO+0x83c>)
 800514c:	4874      	ldr	r0, [pc, #464]	; (8005320 <_GLOBAL__sub_I_REG_FIFO+0x840>)
 800514e:	f7fe f869 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Version(reg_version, 1, false, 'r', 0x00, 0xFF),
 8005152:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8005156:	463b      	mov	r3, r7
 8005158:	4622      	mov	r2, r4
 800515a:	e9cd 7703 	strd	r7, r7, [sp, #12]
 800515e:	4971      	ldr	r1, [pc, #452]	; (8005324 <_GLOBAL__sub_I_REG_FIFO+0x844>)
 8005160:	f8cd a000 	str.w	sl, [sp]
 8005164:	4870      	ldr	r0, [pc, #448]	; (8005328 <_GLOBAL__sub_I_REG_FIFO+0x848>)
 8005166:	f7fe f85d 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PaDac(reg_pa_dac, 1, false, 'w', 0x04, 0x07, reserv_pa_dac, 2) //,
 800516a:	4a70      	ldr	r2, [pc, #448]	; (800532c <_GLOBAL__sub_I_REG_FIFO+0x84c>)
 800516c:	2307      	movs	r3, #7
 800516e:	9203      	str	r2, [sp, #12]
 8005170:	2204      	movs	r2, #4
 8005172:	4e6f      	ldr	r6, [pc, #444]	; (8005330 <_GLOBAL__sub_I_REG_FIFO+0x850>)
 8005174:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005178:	4622      	mov	r2, r4
};
 800517a:	4c6e      	ldr	r4, [pc, #440]	; (8005334 <_GLOBAL__sub_I_REG_FIFO+0x854>)
PaDac(reg_pa_dac, 1, false, 'w', 0x04, 0x07, reserv_pa_dac, 2) //,
 800517c:	463b      	mov	r3, r7
 800517e:	f8cd 9010 	str.w	r9, [sp, #16]
 8005182:	9500      	str	r5, [sp, #0]
 8005184:	4630      	mov	r0, r6
 8005186:	496c      	ldr	r1, [pc, #432]	; (8005338 <_GLOBAL__sub_I_REG_FIFO+0x858>)
 8005188:	f7fe f84c 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
};
 800518c:	46a4      	mov	ip, r4
 800518e:	4d6b      	ldr	r5, [pc, #428]	; (800533c <_GLOBAL__sub_I_REG_FIFO+0x85c>)
 8005190:	f8df b178 	ldr.w	fp, [pc, #376]	; 800530c <_GLOBAL__sub_I_REG_FIFO+0x82c>
 8005194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005196:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800519a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800519e:	4d68      	ldr	r5, [pc, #416]	; (8005340 <_GLOBAL__sub_I_REG_FIFO+0x860>)
 80051a0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80051a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051a6:	f104 0c1c 	add.w	ip, r4, #28
 80051aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80051ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80051b2:	4d64      	ldr	r5, [pc, #400]	; (8005344 <_GLOBAL__sub_I_REG_FIFO+0x864>)
 80051b4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80051b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051ba:	f104 0c38 	add.w	ip, r4, #56	; 0x38
 80051be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80051c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80051c6:	4d60      	ldr	r5, [pc, #384]	; (8005348 <_GLOBAL__sub_I_REG_FIFO+0x868>)
 80051c8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80051cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051ce:	f104 0c54 	add.w	ip, r4, #84	; 0x54
 80051d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80051d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80051da:	4d5c      	ldr	r5, [pc, #368]	; (800534c <_GLOBAL__sub_I_REG_FIFO+0x86c>)
 80051dc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80051e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051e2:	f104 0c70 	add.w	ip, r4, #112	; 0x70
 80051e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80051ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80051ee:	4d58      	ldr	r5, [pc, #352]	; (8005350 <_GLOBAL__sub_I_REG_FIFO+0x870>)
 80051f0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80051f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051f6:	f104 0c8c 	add.w	ip, r4, #140	; 0x8c
 80051fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80051fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005202:	4d54      	ldr	r5, [pc, #336]	; (8005354 <_GLOBAL__sub_I_REG_FIFO+0x874>)
 8005204:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800520a:	f104 0ca8 	add.w	ip, r4, #168	; 0xa8
 800520e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005212:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005216:	4d50      	ldr	r5, [pc, #320]	; (8005358 <_GLOBAL__sub_I_REG_FIFO+0x878>)
 8005218:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800521c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800521e:	f104 0cc4 	add.w	ip, r4, #196	; 0xc4
 8005222:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005226:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800522a:	4d4c      	ldr	r5, [pc, #304]	; (800535c <_GLOBAL__sub_I_REG_FIFO+0x87c>)
 800522c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005232:	f104 0ce0 	add.w	ip, r4, #224	; 0xe0
 8005236:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800523a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800523e:	4d48      	ldr	r5, [pc, #288]	; (8005360 <_GLOBAL__sub_I_REG_FIFO+0x880>)
 8005240:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005246:	f104 0cfc 	add.w	ip, r4, #252	; 0xfc
 800524a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800524e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005252:	4d44      	ldr	r5, [pc, #272]	; (8005364 <_GLOBAL__sub_I_REG_FIFO+0x884>)
 8005254:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800525a:	f504 7c8c 	add.w	ip, r4, #280	; 0x118
 800525e:	e085      	b.n	800536c <_GLOBAL__sub_I_REG_FIFO+0x88c>
 8005260:	20001fc8 	.word	0x20001fc8
 8005264:	20001ed8 	.word	0x20001ed8
 8005268:	20001f88 	.word	0x20001f88
 800526c:	20001ea0 	.word	0x20001ea0
 8005270:	20002074 	.word	0x20002074
 8005274:	20001e4c 	.word	0x20001e4c
 8005278:	20002008 	.word	0x20002008
 800527c:	20001f48 	.word	0x20001f48
 8005280:	20001f90 	.word	0x20001f90
 8005284:	20001f2c 	.word	0x20001f2c
 8005288:	20001fa0 	.word	0x20001fa0
 800528c:	20001bac 	.word	0x20001bac
 8005290:	20002094 	.word	0x20002094
 8005294:	20001c38 	.word	0x20001c38
 8005298:	20001fe0 	.word	0x20001fe0
 800529c:	20001b90 	.word	0x20001b90
 80052a0:	20002054 	.word	0x20002054
 80052a4:	20001ca8 	.word	0x20001ca8
 80052a8:	20001fc0 	.word	0x20001fc0
 80052ac:	20001e30 	.word	0x20001e30
 80052b0:	20001fd8 	.word	0x20001fd8
 80052b4:	20001e14 	.word	0x20001e14
 80052b8:	200020bc 	.word	0x200020bc
 80052bc:	20001b74 	.word	0x20001b74
 80052c0:	2000205c 	.word	0x2000205c
 80052c4:	20001ef4 	.word	0x20001ef4
 80052c8:	2000207c 	.word	0x2000207c
 80052cc:	20001ebc 	.word	0x20001ebc
 80052d0:	20002044 	.word	0x20002044
 80052d4:	20001e84 	.word	0x20001e84
 80052d8:	20002034 	.word	0x20002034
 80052dc:	20001e68 	.word	0x20001e68
 80052e0:	200020b4 	.word	0x200020b4
 80052e4:	20001d50 	.word	0x20001d50
 80052e8:	20001fd0 	.word	0x20001fd0
 80052ec:	20001b58 	.word	0x20001b58
 80052f0:	0800a6ac 	.word	0x0800a6ac
 80052f4:	20002084 	.word	0x20002084
 80052f8:	20001bc8 	.word	0x20001bc8
 80052fc:	0800a6b0 	.word	0x0800a6b0
 8005300:	2000208c 	.word	0x2000208c
 8005304:	20001be4 	.word	0x20001be4
 8005308:	20001fb8 	.word	0x20001fb8
 800530c:	20001f10 	.word	0x20001f10
 8005310:	20001fe8 	.word	0x20001fe8
 8005314:	20001c00 	.word	0x20001c00
 8005318:	20001ff0 	.word	0x20001ff0
 800531c:	2000209c 	.word	0x2000209c
 8005320:	20002010 	.word	0x20002010
 8005324:	20001f98 	.word	0x20001f98
 8005328:	20001f64 	.word	0x20001f64
 800532c:	0800a69c 	.word	0x0800a69c
 8005330:	20001ddc 	.word	0x20001ddc
 8005334:	20001730 	.word	0x20001730
 8005338:	20001f80 	.word	0x20001f80
 800533c:	20001c54 	.word	0x20001c54
 8005340:	20001d34 	.word	0x20001d34
 8005344:	20001d6c 	.word	0x20001d6c
 8005348:	20001da4 	.word	0x20001da4
 800534c:	20001cfc 	.word	0x20001cfc
 8005350:	20001df8 	.word	0x20001df8
 8005354:	20001d88 	.word	0x20001d88
 8005358:	20001dc0 	.word	0x20001dc0
 800535c:	20001d18 	.word	0x20001d18
 8005360:	20001c70 	.word	0x20001c70
 8005364:	20001ce0 	.word	0x20001ce0
 8005368:	20001c1c 	.word	0x20001c1c
 800536c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005370:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005374:	4d87      	ldr	r5, [pc, #540]	; (8005594 <_GLOBAL__sub_I_REG_FIFO+0xab4>)
 8005376:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800537a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800537c:	f504 7c9a 	add.w	ip, r4, #308	; 0x134
 8005380:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005384:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005388:	4d83      	ldr	r5, [pc, #524]	; (8005598 <_GLOBAL__sub_I_REG_FIFO+0xab8>)
 800538a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800538e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005390:	f504 7ca8 	add.w	ip, r4, #336	; 0x150
 8005394:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005398:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800539c:	4d7f      	ldr	r5, [pc, #508]	; (800559c <_GLOBAL__sub_I_REG_FIFO+0xabc>)
 800539e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80053a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053a4:	f504 7cb6 	add.w	ip, r4, #364	; 0x16c
 80053a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80053ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80053b0:	4d7b      	ldr	r5, [pc, #492]	; (80055a0 <_GLOBAL__sub_I_REG_FIFO+0xac0>)
 80053b2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80053b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053b8:	f504 7cc4 	add.w	ip, r4, #392	; 0x188
 80053bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80053c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80053c4:	4d77      	ldr	r5, [pc, #476]	; (80055a4 <_GLOBAL__sub_I_REG_FIFO+0xac4>)
 80053c6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80053ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053cc:	f504 7cd2 	add.w	ip, r4, #420	; 0x1a4
 80053d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80053d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80053d8:	4d73      	ldr	r5, [pc, #460]	; (80055a8 <_GLOBAL__sub_I_REG_FIFO+0xac8>)
 80053da:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80053de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053e0:	f504 7ce0 	add.w	ip, r4, #448	; 0x1c0
 80053e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80053e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80053ec:	4d6f      	ldr	r5, [pc, #444]	; (80055ac <_GLOBAL__sub_I_REG_FIFO+0xacc>)
 80053ee:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80053f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053f4:	f504 7cee 	add.w	ip, r4, #476	; 0x1dc
 80053f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80053fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005400:	4d6b      	ldr	r5, [pc, #428]	; (80055b0 <_GLOBAL__sub_I_REG_FIFO+0xad0>)
 8005402:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005408:	f504 7cfc 	add.w	ip, r4, #504	; 0x1f8
 800540c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005410:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005414:	4d67      	ldr	r5, [pc, #412]	; (80055b4 <_GLOBAL__sub_I_REG_FIFO+0xad4>)
 8005416:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800541a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800541c:	f504 7c05 	add.w	ip, r4, #532	; 0x214
 8005420:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005424:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005428:	4d63      	ldr	r5, [pc, #396]	; (80055b8 <_GLOBAL__sub_I_REG_FIFO+0xad8>)
 800542a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800542e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005430:	f504 7c0c 	add.w	ip, r4, #560	; 0x230
 8005434:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005438:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800543c:	4d5f      	ldr	r5, [pc, #380]	; (80055bc <_GLOBAL__sub_I_REG_FIFO+0xadc>)
 800543e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005442:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005444:	f504 7c13 	add.w	ip, r4, #588	; 0x24c
 8005448:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800544c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005450:	4d5b      	ldr	r5, [pc, #364]	; (80055c0 <_GLOBAL__sub_I_REG_FIFO+0xae0>)
 8005452:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005456:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005458:	f504 7c1a 	add.w	ip, r4, #616	; 0x268
 800545c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005460:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005464:	4d57      	ldr	r5, [pc, #348]	; (80055c4 <_GLOBAL__sub_I_REG_FIFO+0xae4>)
 8005466:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800546a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800546c:	f504 7c21 	add.w	ip, r4, #644	; 0x284
 8005470:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005474:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005478:	4d53      	ldr	r5, [pc, #332]	; (80055c8 <_GLOBAL__sub_I_REG_FIFO+0xae8>)
 800547a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800547e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005480:	f504 7c28 	add.w	ip, r4, #672	; 0x2a0
 8005484:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005488:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800548c:	4d4f      	ldr	r5, [pc, #316]	; (80055cc <_GLOBAL__sub_I_REG_FIFO+0xaec>)
 800548e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005492:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005494:	f504 7c2f 	add.w	ip, r4, #700	; 0x2bc
 8005498:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800549c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80054a0:	4d4b      	ldr	r5, [pc, #300]	; (80055d0 <_GLOBAL__sub_I_REG_FIFO+0xaf0>)
 80054a2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80054a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054a8:	f504 7c36 	add.w	ip, r4, #728	; 0x2d8
 80054ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80054b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80054b4:	4d47      	ldr	r5, [pc, #284]	; (80055d4 <_GLOBAL__sub_I_REG_FIFO+0xaf4>)
 80054b6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80054ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054bc:	f504 7c3d 	add.w	ip, r4, #756	; 0x2f4
 80054c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80054c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80054c8:	4d43      	ldr	r5, [pc, #268]	; (80055d8 <_GLOBAL__sub_I_REG_FIFO+0xaf8>)
 80054ca:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80054ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054d0:	f504 7c44 	add.w	ip, r4, #784	; 0x310
 80054d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80054d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80054dc:	4d3f      	ldr	r5, [pc, #252]	; (80055dc <_GLOBAL__sub_I_REG_FIFO+0xafc>)
 80054de:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80054e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054e4:	f504 7c4b 	add.w	ip, r4, #812	; 0x32c
 80054e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80054ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80054f0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80054f4:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 80055ec <_GLOBAL__sub_I_REG_FIFO+0xb0c>
 80054f8:	f504 7552 	add.w	r5, r4, #840	; 0x348
 80054fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005502:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8005506:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800550a:	4d35      	ldr	r5, [pc, #212]	; (80055e0 <_GLOBAL__sub_I_REG_FIFO+0xb00>)
 800550c:	f504 7c59 	add.w	ip, r4, #868	; 0x364
 8005510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005512:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005516:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800551a:	4d32      	ldr	r5, [pc, #200]	; (80055e4 <_GLOBAL__sub_I_REG_FIFO+0xb04>)
 800551c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005522:	f504 7c60 	add.w	ip, r4, #896	; 0x380
 8005526:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800552a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800552e:	f504 7567 	add.w	r5, r4, #924	; 0x39c
 8005532:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005536:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800553a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800553c:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 8005540:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80055f0 <_GLOBAL__sub_I_REG_FIFO+0xb10>
 8005544:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005548:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800554c:	f504 756e 	add.w	r5, r4, #952	; 0x3b8
 8005550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005552:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8005556:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800555a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800555e:	f504 7575 	add.w	r5, r4, #980	; 0x3d4
 8005562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005564:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8005568:	4f1f      	ldr	r7, [pc, #124]	; (80055e8 <_GLOBAL__sub_I_REG_FIFO+0xb08>)
 800556a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800556e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005570:	f504 757c 	add.w	r5, r4, #1008	; 0x3f0
 8005574:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005576:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800557a:	f204 440c 	addw	r4, r4, #1036	; 0x40c
 800557e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005582:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005586:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800558a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800558e:	b007      	add	sp, #28
 8005590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005594:	20001c8c 	.word	0x20001c8c
 8005598:	20001cc4 	.word	0x20001cc4
 800559c:	20001ed8 	.word	0x20001ed8
 80055a0:	20001ea0 	.word	0x20001ea0
 80055a4:	20001e4c 	.word	0x20001e4c
 80055a8:	20001f48 	.word	0x20001f48
 80055ac:	20001f2c 	.word	0x20001f2c
 80055b0:	20001bac 	.word	0x20001bac
 80055b4:	20001c38 	.word	0x20001c38
 80055b8:	20001b90 	.word	0x20001b90
 80055bc:	20001ca8 	.word	0x20001ca8
 80055c0:	20001e30 	.word	0x20001e30
 80055c4:	20001e14 	.word	0x20001e14
 80055c8:	20001b74 	.word	0x20001b74
 80055cc:	20001ef4 	.word	0x20001ef4
 80055d0:	20001ebc 	.word	0x20001ebc
 80055d4:	20001e84 	.word	0x20001e84
 80055d8:	20001e68 	.word	0x20001e68
 80055dc:	20001d50 	.word	0x20001d50
 80055e0:	20001bc8 	.word	0x20001bc8
 80055e4:	20001be4 	.word	0x20001be4
 80055e8:	20001f64 	.word	0x20001f64
 80055ec:	20001b58 	.word	0x20001b58
 80055f0:	20001c00 	.word	0x20001c00

080055f4 <_ZN15Packet_analyzer11set_settingEh>:
    // return field_header_[num_number]->set_value(num, &(packet[0]));
}

bool Packet_analyzer::set_setting(uint8_t setting) {
    return false; // настройки индивидуальны, у общего класса их нет
}
 80055f4:	2000      	movs	r0, #0
 80055f6:	4770      	bx	lr

080055f8 <_ZN13Packet_Sensor11set_settingEh>:
// ----- ----- ----- ----- -----  Packet_Sensor  ----- ----- ----- ----- -----
//   ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----

bool Packet_Sensor::set_setting(uint8_t setting) {
    // if по типам
    setting_ = setting;
 80055f8:	7401      	strb	r1, [r0, #16]
    return false;
}
 80055fa:	2000      	movs	r0, #0
 80055fc:	4770      	bx	lr

080055fe <_ZN13Packet_Device11set_settingEh>:
//   ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----


bool Packet_Device::set_setting(uint8_t setting) {
    // if по типам
    setting_ = setting;
 80055fe:	7401      	strb	r1, [r0, #16]
    return false;
}
 8005600:	2000      	movs	r0, #0
 8005602:	4770      	bx	lr

08005604 <_ZN13Packet_System11set_settingEh>:


bool Packet_System::set_setting(uint8_t setting) {
    // if по типам
    return true; // не реализованы
}
 8005604:	2001      	movs	r0, #1
 8005606:	4770      	bx	lr

08005608 <_ZN12LoRa_addressC1EPKhh>:
LoRa_address::LoRa_address(const uint8_t* bytes, const uint8_t len) {
 8005608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	4604      	mov	r4, r0
 8005610:	8003      	strh	r3, [r0, #0]
 8005612:	8043      	strh	r3, [r0, #2]
	group = field_dest_adr_group.get_value(bytes, len);
 8005614:	4806      	ldr	r0, [pc, #24]	; (8005630 <_ZN12LoRa_addressC1EPKhh+0x28>)
LoRa_address::LoRa_address(const uint8_t* bytes, const uint8_t len) {
 8005616:	460d      	mov	r5, r1
 8005618:	4616      	mov	r6, r2
	group = field_dest_adr_group.get_value(bytes, len);
 800561a:	f7fd fe16 	bl	800324a <_ZNK13Address_field9get_valueEPKhi>
	branch = field_dest_adr_branch.get_value(bytes, len);
 800561e:	4632      	mov	r2, r6
	group = field_dest_adr_group.get_value(bytes, len);
 8005620:	8020      	strh	r0, [r4, #0]
	branch = field_dest_adr_branch.get_value(bytes, len);
 8005622:	4629      	mov	r1, r5
 8005624:	4803      	ldr	r0, [pc, #12]	; (8005634 <_ZN12LoRa_addressC1EPKhh+0x2c>)
 8005626:	f7fd fe10 	bl	800324a <_ZNK13Address_field9get_valueEPKhi>
 800562a:	8060      	strh	r0, [r4, #2]
}
 800562c:	4620      	mov	r0, r4
 800562e:	bd70      	pop	{r4, r5, r6, pc}
 8005630:	200021d4 	.word	0x200021d4
 8005634:	2000220c 	.word	0x2000220c

08005638 <_ZN12LoRa_addressC1Ett>:
LoRa_address::LoRa_address(const uint16_t group, const uint16_t branch):group(group),branch(branch){}
 8005638:	8001      	strh	r1, [r0, #0]
 800563a:	8042      	strh	r2, [r0, #2]
 800563c:	4770      	bx	lr

0800563e <_ZN12LoRa_addressC1Em>:
LoRa_address::LoRa_address(const uint32_t adr):group((uint16_t)(adr >> 16)),branch((uint16_t)(adr)){}
 800563e:	0c0a      	lsrs	r2, r1, #16
 8005640:	8002      	strh	r2, [r0, #0]
 8005642:	8041      	strh	r1, [r0, #2]
 8005644:	4770      	bx	lr

08005646 <_ZN12LoRa_address6globalEv>:
    return ((group == LORA_GLOBAL_ADR_GROUP) && (branch == LORA_GLOBAL_ADR_BRANCH));
 8005646:	f240 13ff 	movw	r3, #511	; 0x1ff
 800564a:	8802      	ldrh	r2, [r0, #0]
 800564c:	429a      	cmp	r2, r3
 800564e:	d106      	bne.n	800565e <_ZN12LoRa_address6globalEv+0x18>
 8005650:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005654:	8840      	ldrh	r0, [r0, #2]
 8005656:	1ac3      	subs	r3, r0, r3
 8005658:	4258      	negs	r0, r3
 800565a:	4158      	adcs	r0, r3
 800565c:	4770      	bx	lr
 800565e:	2000      	movs	r0, #0
}
 8005660:	4770      	bx	lr

08005662 <_ZneRK12LoRa_addressS1_>:
    return ((left.group != right.group) || (left.branch != right.branch));
 8005662:	8802      	ldrh	r2, [r0, #0]
 8005664:	880b      	ldrh	r3, [r1, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d105      	bne.n	8005676 <_ZneRK12LoRa_addressS1_+0x14>
 800566a:	8840      	ldrh	r0, [r0, #2]
 800566c:	884b      	ldrh	r3, [r1, #2]
 800566e:	1ac0      	subs	r0, r0, r3
 8005670:	bf18      	it	ne
 8005672:	2001      	movne	r0, #1
 8005674:	4770      	bx	lr
 8005676:	2001      	movs	r0, #1
}
 8005678:	4770      	bx	lr
	...

0800567c <_ZN15Packet_analyzerC1Ev>:
Packet_analyzer::Packet_analyzer() {
 800567c:	4a05      	ldr	r2, [pc, #20]	; (8005694 <_ZN15Packet_analyzerC1Ev+0x18>)
    field_header_ = field_packet_header;
 800567e:	4906      	ldr	r1, [pc, #24]	; (8005698 <_ZN15Packet_analyzerC1Ev+0x1c>)
Packet_analyzer::Packet_analyzer() {
 8005680:	6002      	str	r2, [r0, #0]
 8005682:	2200      	movs	r2, #0
 8005684:	e9c0 2205 	strd	r2, r2, [r0, #20]
    field_packet_ = nullptr;
 8005688:	e9c0 1201 	strd	r1, r2, [r0, #4]
    amt_field_header_ = count_field_packet_header;
 800568c:	2206      	movs	r2, #6
 800568e:	60c2      	str	r2, [r0, #12]
}
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	0800a704 	.word	0x0800a704
 8005698:	20000004 	.word	0x20000004

0800569c <_ZN15Packet_analyzer18get_dest_adr_groupERK11LoRa_packet>:
uint16_t Packet_analyzer::get_dest_adr_group(const LoRa_packet& packet) {
 800569c:	b508      	push	{r3, lr}
    return field_header_[num_dest_adr_group]->get_value(packet);
 800569e:	6843      	ldr	r3, [r0, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	6818      	ldr	r0, [r3, #0]
 80056a4:	f7fd fe60 	bl	8003368 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 80056a8:	b280      	uxth	r0, r0
 80056aa:	bd08      	pop	{r3, pc}

080056ac <_ZN15Packet_analyzer19get_dest_adr_branchERK11LoRa_packet>:
uint16_t Packet_analyzer::get_dest_adr_branch(const LoRa_packet& packet) {
 80056ac:	b508      	push	{r3, lr}
    return field_header_[num_dest_adr_branch]->get_value(packet);
 80056ae:	6843      	ldr	r3, [r0, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	6858      	ldr	r0, [r3, #4]
 80056b4:	f7fd fe58 	bl	8003368 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 80056b8:	b280      	uxth	r0, r0
 80056ba:	bd08      	pop	{r3, pc}

080056bc <_ZN15Packet_analyzer12get_dest_adrERK11LoRa_packet>:
LoRa_address Packet_analyzer::get_dest_adr(const LoRa_packet& packet) {
 80056bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056be:	4605      	mov	r5, r0
 80056c0:	460e      	mov	r6, r1
    return {get_dest_adr_group(packet), get_dest_adr_branch(packet)};
 80056c2:	f7ff ffeb 	bl	800569c <_ZN15Packet_analyzer18get_dest_adr_groupERK11LoRa_packet>
 80056c6:	4631      	mov	r1, r6
 80056c8:	4604      	mov	r4, r0
 80056ca:	4628      	mov	r0, r5
 80056cc:	f7ff ffee 	bl	80056ac <_ZN15Packet_analyzer19get_dest_adr_branchERK11LoRa_packet>
}
 80056d0:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
 80056d4:	b002      	add	sp, #8
 80056d6:	bd70      	pop	{r4, r5, r6, pc}

080056d8 <_ZN15Packet_analyzer18get_sour_adr_groupERK11LoRa_packet>:
uint16_t Packet_analyzer::get_sour_adr_group(const LoRa_packet& packet) {
 80056d8:	b508      	push	{r3, lr}
    return field_header_[num_sour_adr_group]->get_value(packet);
 80056da:	6843      	ldr	r3, [r0, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	6898      	ldr	r0, [r3, #8]
 80056e0:	f7fd fe42 	bl	8003368 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 80056e4:	b280      	uxth	r0, r0
 80056e6:	bd08      	pop	{r3, pc}

080056e8 <_ZN15Packet_analyzer19get_sour_adr_branchERK11LoRa_packet>:
uint16_t Packet_analyzer::get_sour_adr_branch(const LoRa_packet& packet) {
 80056e8:	b508      	push	{r3, lr}
    return field_header_[num_sour_adr_branch]->get_value(packet);
 80056ea:	6843      	ldr	r3, [r0, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	68d8      	ldr	r0, [r3, #12]
 80056f0:	f7fd fe3a 	bl	8003368 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 80056f4:	b280      	uxth	r0, r0
 80056f6:	bd08      	pop	{r3, pc}

080056f8 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>:
LoRa_address Packet_analyzer::get_sour_adr(const LoRa_packet& packet) {
 80056f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056fa:	4605      	mov	r5, r0
 80056fc:	460e      	mov	r6, r1
    return {get_sour_adr_group(packet), get_sour_adr_branch(packet)};
 80056fe:	f7ff ffeb 	bl	80056d8 <_ZN15Packet_analyzer18get_sour_adr_groupERK11LoRa_packet>
 8005702:	4631      	mov	r1, r6
 8005704:	4604      	mov	r4, r0
 8005706:	4628      	mov	r0, r5
 8005708:	f7ff ffee 	bl	80056e8 <_ZN15Packet_analyzer19get_sour_adr_branchERK11LoRa_packet>
}
 800570c:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
 8005710:	b002      	add	sp, #8
 8005712:	bd70      	pop	{r4, r5, r6, pc}

08005714 <_ZN15Packet_analyzer15get_packet_typeERK11LoRa_packet>:
    return (Packet_Type)field_header_[num_type]->get_value(packet);
 8005714:	6843      	ldr	r3, [r0, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	6918      	ldr	r0, [r3, #16]
 800571a:	f7fd be25 	b.w	8003368 <_ZNK13Address_field9get_valueERK11LoRa_packeth>

0800571e <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>:
uint16_t Packet_analyzer::get_packet_number(const LoRa_packet& packet) {
 800571e:	b508      	push	{r3, lr}
    return field_header_[num_number]->get_value(packet);
 8005720:	6843      	ldr	r3, [r0, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	6958      	ldr	r0, [r3, #20]
 8005726:	f7fd fe1f 	bl	8003368 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 800572a:	b280      	uxth	r0, r0
 800572c:	bd08      	pop	{r3, pc}

0800572e <_ZN15Packet_analyzer18set_dest_adr_groupER11LoRa_packett>:
bool Packet_analyzer::set_dest_adr_group(LoRa_packet& packet, uint16_t adr) {
 800572e:	b410      	push	{r4}
 8005730:	460c      	mov	r4, r1
    return field_header_[num_dest_adr_group]->set_value(adr, packet);
 8005732:	6840      	ldr	r0, [r0, #4]
bool Packet_analyzer::set_dest_adr_group(LoRa_packet& packet, uint16_t adr) {
 8005734:	4611      	mov	r1, r2
    return field_header_[num_dest_adr_group]->set_value(adr, packet);
 8005736:	2300      	movs	r3, #0
 8005738:	4622      	mov	r2, r4
 800573a:	6800      	ldr	r0, [r0, #0]
}
 800573c:	bc10      	pop	{r4}
    return field_header_[num_dest_adr_group]->set_value(adr, packet);
 800573e:	f7fd be5f 	b.w	8003400 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>

08005742 <_ZN15Packet_analyzer19set_dest_adr_branchER11LoRa_packett>:
bool Packet_analyzer::set_dest_adr_branch(LoRa_packet& packet, uint16_t adr) {
 8005742:	b410      	push	{r4}
 8005744:	460c      	mov	r4, r1
    return field_header_[num_dest_adr_branch]->set_value(adr, packet);
 8005746:	6840      	ldr	r0, [r0, #4]
bool Packet_analyzer::set_dest_adr_branch(LoRa_packet& packet, uint16_t adr) {
 8005748:	4611      	mov	r1, r2
    return field_header_[num_dest_adr_branch]->set_value(adr, packet);
 800574a:	2300      	movs	r3, #0
 800574c:	4622      	mov	r2, r4
 800574e:	6840      	ldr	r0, [r0, #4]
}
 8005750:	bc10      	pop	{r4}
    return field_header_[num_dest_adr_branch]->set_value(adr, packet);
 8005752:	f7fd be55 	b.w	8003400 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>

08005756 <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address>:
bool Packet_analyzer::set_dest_adr(LoRa_packet& packet, LoRa_address adr) {
 8005756:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005758:	4605      	mov	r5, r0
 800575a:	460e      	mov	r6, r1
 800575c:	9201      	str	r2, [sp, #4]
    uint16_t buffer = get_dest_adr_group(packet);
 800575e:	f7ff ff9d 	bl	800569c <_ZN15Packet_analyzer18get_dest_adr_groupERK11LoRa_packet>
    if(set_dest_adr_group(packet, adr.group))
 8005762:	4631      	mov	r1, r6
    uint16_t buffer = get_dest_adr_group(packet);
 8005764:	4607      	mov	r7, r0
    if(set_dest_adr_group(packet, adr.group))
 8005766:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800576a:	4628      	mov	r0, r5
 800576c:	f7ff ffdf 	bl	800572e <_ZN15Packet_analyzer18set_dest_adr_groupER11LoRa_packett>
 8005770:	4604      	mov	r4, r0
 8005772:	b960      	cbnz	r0, 800578e <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address+0x38>
    if(set_dest_adr_branch(packet, adr.branch)) {
 8005774:	4631      	mov	r1, r6
 8005776:	4628      	mov	r0, r5
 8005778:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800577c:	f7ff ffe1 	bl	8005742 <_ZN15Packet_analyzer19set_dest_adr_branchER11LoRa_packett>
 8005780:	4604      	mov	r4, r0
 8005782:	b120      	cbz	r0, 800578e <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address+0x38>
        set_dest_adr_group(packet, buffer);
 8005784:	463a      	mov	r2, r7
 8005786:	4631      	mov	r1, r6
 8005788:	4628      	mov	r0, r5
 800578a:	f7ff ffd0 	bl	800572e <_ZN15Packet_analyzer18set_dest_adr_groupER11LoRa_packett>
}
 800578e:	4620      	mov	r0, r4
 8005790:	b003      	add	sp, #12
 8005792:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005794 <_ZN15Packet_analyzer18set_sour_adr_groupER11LoRa_packett>:
bool Packet_analyzer::set_sour_adr_group(LoRa_packet& packet, uint16_t adr) {
 8005794:	b410      	push	{r4}
 8005796:	460c      	mov	r4, r1
    return field_header_[num_sour_adr_group]->set_value(adr, packet);
 8005798:	6840      	ldr	r0, [r0, #4]
bool Packet_analyzer::set_sour_adr_group(LoRa_packet& packet, uint16_t adr) {
 800579a:	4611      	mov	r1, r2
    return field_header_[num_sour_adr_group]->set_value(adr, packet);
 800579c:	2300      	movs	r3, #0
 800579e:	4622      	mov	r2, r4
 80057a0:	6880      	ldr	r0, [r0, #8]
}
 80057a2:	bc10      	pop	{r4}
    return field_header_[num_sour_adr_group]->set_value(adr, packet);
 80057a4:	f7fd be2c 	b.w	8003400 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>

080057a8 <_ZN15Packet_analyzer19set_sour_adr_branchER11LoRa_packett>:
bool Packet_analyzer::set_sour_adr_branch(LoRa_packet& packet, uint16_t adr) {
 80057a8:	b410      	push	{r4}
 80057aa:	460c      	mov	r4, r1
    return field_header_[num_sour_adr_branch]->set_value(adr, packet);
 80057ac:	6840      	ldr	r0, [r0, #4]
bool Packet_analyzer::set_sour_adr_branch(LoRa_packet& packet, uint16_t adr) {
 80057ae:	4611      	mov	r1, r2
    return field_header_[num_sour_adr_branch]->set_value(adr, packet);
 80057b0:	2300      	movs	r3, #0
 80057b2:	4622      	mov	r2, r4
 80057b4:	68c0      	ldr	r0, [r0, #12]
}
 80057b6:	bc10      	pop	{r4}
    return field_header_[num_sour_adr_branch]->set_value(adr, packet);
 80057b8:	f7fd be22 	b.w	8003400 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>

080057bc <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address>:
bool Packet_analyzer::set_sour_adr(LoRa_packet& packet, LoRa_address adr) {
 80057bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057be:	4605      	mov	r5, r0
 80057c0:	460e      	mov	r6, r1
 80057c2:	9201      	str	r2, [sp, #4]
    uint16_t buffer = get_sour_adr_group(packet);
 80057c4:	f7ff ff88 	bl	80056d8 <_ZN15Packet_analyzer18get_sour_adr_groupERK11LoRa_packet>
    if(set_sour_adr_group(packet, adr.group))
 80057c8:	4631      	mov	r1, r6
    uint16_t buffer = get_sour_adr_group(packet);
 80057ca:	4607      	mov	r7, r0
    if(set_sour_adr_group(packet, adr.group))
 80057cc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80057d0:	4628      	mov	r0, r5
 80057d2:	f7ff ffdf 	bl	8005794 <_ZN15Packet_analyzer18set_sour_adr_groupER11LoRa_packett>
 80057d6:	4604      	mov	r4, r0
 80057d8:	b960      	cbnz	r0, 80057f4 <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address+0x38>
    if(set_sour_adr_branch(packet, adr.branch)) {
 80057da:	4631      	mov	r1, r6
 80057dc:	4628      	mov	r0, r5
 80057de:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80057e2:	f7ff ffe1 	bl	80057a8 <_ZN15Packet_analyzer19set_sour_adr_branchER11LoRa_packett>
 80057e6:	4604      	mov	r4, r0
 80057e8:	b120      	cbz	r0, 80057f4 <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address+0x38>
        set_sour_adr_group(packet, buffer);
 80057ea:	463a      	mov	r2, r7
 80057ec:	4631      	mov	r1, r6
 80057ee:	4628      	mov	r0, r5
 80057f0:	f7ff ffd0 	bl	8005794 <_ZN15Packet_analyzer18set_sour_adr_groupER11LoRa_packett>
}
 80057f4:	4620      	mov	r0, r4
 80057f6:	b003      	add	sp, #12
 80057f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057fa <_ZN15Packet_analyzer15set_packet_typeER11LoRa_packet11Packet_Type>:
bool Packet_analyzer::set_packet_type(LoRa_packet& packet, Packet_Type pac_type) {
 80057fa:	b410      	push	{r4}
 80057fc:	460c      	mov	r4, r1
    return  field_header_[num_type]->set_value((uint32_t)pac_type, packet);
 80057fe:	6840      	ldr	r0, [r0, #4]
bool Packet_analyzer::set_packet_type(LoRa_packet& packet, Packet_Type pac_type) {
 8005800:	4611      	mov	r1, r2
    return  field_header_[num_type]->set_value((uint32_t)pac_type, packet);
 8005802:	2300      	movs	r3, #0
 8005804:	4622      	mov	r2, r4
 8005806:	6900      	ldr	r0, [r0, #16]
}
 8005808:	bc10      	pop	{r4}
    return  field_header_[num_type]->set_value((uint32_t)pac_type, packet);
 800580a:	f7fd bdf9 	b.w	8003400 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>

0800580e <_ZN15Packet_analyzer17set_packet_numberER11LoRa_packett>:
bool Packet_analyzer::set_packet_number(LoRa_packet& packet, uint16_t num) {
 800580e:	b410      	push	{r4}
 8005810:	460c      	mov	r4, r1
    return field_header_[num_number]->set_value(num, packet);
 8005812:	6840      	ldr	r0, [r0, #4]
bool Packet_analyzer::set_packet_number(LoRa_packet& packet, uint16_t num) {
 8005814:	4611      	mov	r1, r2
    return field_header_[num_number]->set_value(num, packet);
 8005816:	2300      	movs	r3, #0
 8005818:	4622      	mov	r2, r4
 800581a:	6940      	ldr	r0, [r0, #20]
}
 800581c:	bc10      	pop	{r4}
    return field_header_[num_number]->set_value(num, packet);
 800581e:	f7fd bdef 	b.w	8003400 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
	...

08005824 <_ZN17Packet_Connection11set_commandER11LoRa_packeth>:
    if (!(com < CONNECT_COMMAND_DATA))
 8005824:	2a0c      	cmp	r2, #12
uint8_t Packet_Connection::set_command(LoRa_packet& packet, uint8_t com) {
 8005826:	b510      	push	{r4, lr}
 8005828:	4604      	mov	r4, r0
 800582a:	4608      	mov	r0, r1
 800582c:	4611      	mov	r1, r2
    if (!(com < CONNECT_COMMAND_DATA))
 800582e:	d80b      	bhi.n	8005848 <_ZN17Packet_Connection11set_commandER11LoRa_packeth+0x24>
    last_filled_byte = PACKET_HEADER_SIZE; // Команда всегда находится сразу после шапки
 8005830:	2309      	movs	r3, #9
    command_ = com;
 8005832:	7722      	strb	r2, [r4, #28]
    last_filled_byte = PACKET_HEADER_SIZE; // Команда всегда находится сразу после шапки
 8005834:	6163      	str	r3, [r4, #20]
    error = field_byte.set_value(command_, packet, last_filled_byte);
 8005836:	4602      	mov	r2, r0
 8005838:	4805      	ldr	r0, [pc, #20]	; (8005850 <_ZN17Packet_Connection11set_commandER11LoRa_packeth+0x2c>)
 800583a:	f7fd fde1 	bl	8003400 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
    if (error)
 800583e:	b928      	cbnz	r0, 800584c <_ZN17Packet_Connection11set_commandER11LoRa_packeth+0x28>
    ++last_filled_byte;
 8005840:	6963      	ldr	r3, [r4, #20]
 8005842:	3301      	adds	r3, #1
 8005844:	6163      	str	r3, [r4, #20]
}
 8005846:	bd10      	pop	{r4, pc}
        return 1;
 8005848:	2001      	movs	r0, #1
 800584a:	e7fc      	b.n	8005846 <_ZN17Packet_Connection11set_commandER11LoRa_packeth+0x22>
        return 2;
 800584c:	2002      	movs	r0, #2
 800584e:	e7fa      	b.n	8005846 <_ZN17Packet_Connection11set_commandER11LoRa_packeth+0x22>
 8005850:	200020ec 	.word	0x200020ec

08005854 <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh>:
uint8_t Packet_Connection::get_command(const LoRa_packet& packet, uint8_t *com) {
 8005854:	b538      	push	{r3, r4, r5, lr}
 8005856:	4615      	mov	r5, r2
    last_read_byte = PACKET_HEADER_SIZE; // Команда всегда находится сразу после шапки
 8005858:	2209      	movs	r2, #9
uint8_t Packet_Connection::get_command(const LoRa_packet& packet, uint8_t *com) {
 800585a:	4604      	mov	r4, r0
    last_read_byte = PACKET_HEADER_SIZE; // Команда всегда находится сразу после шапки
 800585c:	6182      	str	r2, [r0, #24]
    if(com == nullptr)
 800585e:	b18d      	cbz	r5, 8005884 <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh+0x30>
    command_ = field_byte.get_value(packet, last_read_byte);
 8005860:	4809      	ldr	r0, [pc, #36]	; (8005888 <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh+0x34>)
 8005862:	f7fd fd81 	bl	8003368 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
    ++last_read_byte;
 8005866:	69a3      	ldr	r3, [r4, #24]
    command_ = field_byte.get_value(packet, last_read_byte);
 8005868:	b2c0      	uxtb	r0, r0
    if (!(command_ < CONNECT_COMMAND_DATA)) {
 800586a:	280c      	cmp	r0, #12
    ++last_read_byte;
 800586c:	f103 0301 	add.w	r3, r3, #1
 8005870:	61a3      	str	r3, [r4, #24]
        command_ = 0xFF;
 8005872:	bf88      	it	hi
 8005874:	23ff      	movhi	r3, #255	; 0xff
    command_ = field_byte.get_value(packet, last_read_byte);
 8005876:	7720      	strb	r0, [r4, #28]
    *com = command_;
 8005878:	bf95      	itete	ls
 800587a:	7028      	strbls	r0, [r5, #0]
        return 2;
 800587c:	2002      	movhi	r0, #2
    return 0;
 800587e:	2000      	movls	r0, #0
        command_ = 0xFF;
 8005880:	7723      	strbhi	r3, [r4, #28]
}
 8005882:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 8005884:	2001      	movs	r0, #1
 8005886:	e7fc      	b.n	8005882 <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh+0x2e>
 8005888:	200020ec 	.word	0x200020ec

0800588c <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>:
    size_data = 0;
 800588c:	2000      	movs	r0, #0
uint8_t Packet_Connection::get_size_by_data(const uint8_t *com, const uint8_t *len, uint8_t &size_data) {
 800588e:	b510      	push	{r4, lr}
    size_data = 0;
 8005890:	7018      	strb	r0, [r3, #0]
    if (!(*com < CONNECT_COMMAND_DATA)) {
 8005892:	7809      	ldrb	r1, [r1, #0]
 8005894:	290c      	cmp	r1, #12
 8005896:	d81c      	bhi.n	80058d2 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x46>
    if (connect_com_data[*com] != 0xFF) {
 8005898:	4c11      	ldr	r4, [pc, #68]	; (80058e0 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x54>)
 800589a:	5c64      	ldrb	r4, [r4, r1]
 800589c:	2cff      	cmp	r4, #255	; 0xff
 800589e:	d001      	beq.n	80058a4 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x18>
        size_data = connect_com_data[*com];
 80058a0:	701c      	strb	r4, [r3, #0]
}
 80058a2:	bd10      	pop	{r4, pc}
        if(len == nullptr)
 80058a4:	b1ba      	cbz	r2, 80058d6 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x4a>
        switch (*com)
 80058a6:	3901      	subs	r1, #1
 80058a8:	290b      	cmp	r1, #11
 80058aa:	d807      	bhi.n	80058bc <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x30>
 80058ac:	e8df f001 	tbb	[pc, r1]
 80058b0:	06060608 	.word	0x06060608
 80058b4:	06060f06 	.word	0x06060f06
 80058b8:	0f060d0d 	.word	0x0f060d0d
        if(len == nullptr)
 80058bc:	2004      	movs	r0, #4
 80058be:	e7f0      	b.n	80058a2 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x16>
            if ((*len != 1) && (*len != 2))
 80058c0:	7812      	ldrb	r2, [r2, #0]
 80058c2:	1e51      	subs	r1, r2, #1
 80058c4:	2901      	cmp	r1, #1
 80058c6:	d808      	bhi.n	80058da <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x4e>
            size_data = *len;
 80058c8:	701a      	strb	r2, [r3, #0]
    return 0;
 80058ca:	2000      	movs	r0, #0
            break;
 80058cc:	e7e9      	b.n	80058a2 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x16>
            size_data = *len;
 80058ce:	7812      	ldrb	r2, [r2, #0]
 80058d0:	e7fa      	b.n	80058c8 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x3c>
        return 1;
 80058d2:	2001      	movs	r0, #1
 80058d4:	e7e5      	b.n	80058a2 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x16>
            return 2;
 80058d6:	2002      	movs	r0, #2
 80058d8:	e7e3      	b.n	80058a2 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x16>
                return 3;
 80058da:	2003      	movs	r0, #3
 80058dc:	e7e1      	b.n	80058a2 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x16>
 80058de:	bf00      	nop
 80058e0:	0800a6bc 	.word	0x0800a6bc

080058e4 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh>:
uint8_t Packet_Connection::set_data(LoRa_packet& packet, uint8_t *data, uint8_t len) {
 80058e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058e8:	b085      	sub	sp, #20
 80058ea:	f88d 3007 	strb.w	r3, [sp, #7]
 80058ee:	460f      	mov	r7, r1
 80058f0:	4690      	mov	r8, r2
    error = get_size_by_data(&command_, &len, len_data);
 80058f2:	f10d 030f 	add.w	r3, sp, #15
 80058f6:	f10d 0207 	add.w	r2, sp, #7
 80058fa:	f100 011c 	add.w	r1, r0, #28
uint8_t Packet_Connection::set_data(LoRa_packet& packet, uint8_t *data, uint8_t len) {
 80058fe:	4604      	mov	r4, r0
    error = get_size_by_data(&command_, &len, len_data);
 8005900:	f7ff ffc4 	bl	800588c <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
    if(error)
 8005904:	4605      	mov	r5, r0
 8005906:	2800      	cmp	r0, #0
 8005908:	d145      	bne.n	8005996 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xb2>
    if (connect_com_data[command_] == 0xFF) {
 800590a:	7f23      	ldrb	r3, [r4, #28]
 800590c:	4a25      	ldr	r2, [pc, #148]	; (80059a4 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xc0>)
 800590e:	5cd2      	ldrb	r2, [r2, r3]
 8005910:	2aff      	cmp	r2, #255	; 0xff
 8005912:	d013      	beq.n	800593c <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0x58>
uint8_t Packet_Connection::set_data(LoRa_packet& packet, uint8_t *data, uint8_t len) {
 8005914:	2600      	movs	r6, #0
        error = field_byte.set_value(data[i], packet, last_filled_byte);
 8005916:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80059a8 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xc4>
    for (int i = 0; i < len_data; ++i) {
 800591a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800591e:	42b3      	cmp	r3, r6
 8005920:	dd39      	ble.n	8005996 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xb2>
        error = field_byte.set_value(data[i], packet, last_filled_byte);
 8005922:	7d23      	ldrb	r3, [r4, #20]
 8005924:	463a      	mov	r2, r7
 8005926:	4648      	mov	r0, r9
 8005928:	f818 1006 	ldrb.w	r1, [r8, r6]
 800592c:	f7fd fd68 	bl	8003400 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
        ++last_filled_byte;
 8005930:	6963      	ldr	r3, [r4, #20]
 8005932:	3301      	adds	r3, #1
 8005934:	6163      	str	r3, [r4, #20]
        if (error)
 8005936:	bb90      	cbnz	r0, 800599e <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xba>
    for (int i = 0; i < len_data; ++i) {
 8005938:	3601      	adds	r6, #1
 800593a:	e7ee      	b.n	800591a <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0x36>
        switch (command_) {
 800593c:	3b01      	subs	r3, #1
 800593e:	2b0b      	cmp	r3, #11
 8005940:	d828      	bhi.n	8005994 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xb0>
 8005942:	a201      	add	r2, pc, #4	; (adr r2, 8005948 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0x64>)
 8005944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005948:	08005915 	.word	0x08005915
 800594c:	08005995 	.word	0x08005995
 8005950:	08005995 	.word	0x08005995
 8005954:	08005995 	.word	0x08005995
 8005958:	08005995 	.word	0x08005995
 800595c:	08005979 	.word	0x08005979
 8005960:	08005995 	.word	0x08005995
 8005964:	08005995 	.word	0x08005995
 8005968:	08005915 	.word	0x08005915
 800596c:	08005915 	.word	0x08005915
 8005970:	08005995 	.word	0x08005995
 8005974:	08005979 	.word	0x08005979
            error = field_byte.set_value(len, packet, last_filled_byte);
 8005978:	7d23      	ldrb	r3, [r4, #20]
 800597a:	463a      	mov	r2, r7
 800597c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005980:	4809      	ldr	r0, [pc, #36]	; (80059a8 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xc4>)
 8005982:	f7fd fd3d 	bl	8003400 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            ++last_filled_byte;
 8005986:	6963      	ldr	r3, [r4, #20]
 8005988:	3301      	adds	r3, #1
 800598a:	6163      	str	r3, [r4, #20]
            if (error)
 800598c:	2800      	cmp	r0, #0
 800598e:	d0c1      	beq.n	8005914 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0x30>
                return 4;
 8005990:	2504      	movs	r5, #4
 8005992:	e000      	b.n	8005996 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xb2>
    if (connect_com_data[command_] == 0xFF) {
 8005994:	2506      	movs	r5, #6
}
 8005996:	4628      	mov	r0, r5
 8005998:	b005      	add	sp, #20
 800599a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return 8;
 800599e:	2508      	movs	r5, #8
 80059a0:	e7f9      	b.n	8005996 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xb2>
 80059a2:	bf00      	nop
 80059a4:	0800a6bc 	.word	0x0800a6bc
 80059a8:	200020ec 	.word	0x200020ec

080059ac <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>:
uint8_t Packet_Connection::set_packet_data(LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 80059ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    error = set_command(packet, *com);
 80059b0:	7812      	ldrb	r2, [r2, #0]
uint8_t Packet_Connection::set_packet_data(LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 80059b2:	4604      	mov	r4, r0
 80059b4:	460d      	mov	r5, r1
 80059b6:	461e      	mov	r6, r3
 80059b8:	9f06      	ldr	r7, [sp, #24]
    error = set_command(packet, *com);
 80059ba:	f7ff ff33 	bl	8005824 <_ZN17Packet_Connection11set_commandER11LoRa_packeth>
    if(error)
 80059be:	b938      	cbnz	r0, 80059d0 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_+0x24>
    error = set_data(packet, data, *len);
 80059c0:	4632      	mov	r2, r6
 80059c2:	4629      	mov	r1, r5
 80059c4:	4620      	mov	r0, r4
 80059c6:	783b      	ldrb	r3, [r7, #0]
}
 80059c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    error = set_data(packet, data, *len);
 80059cc:	f7ff bf8a 	b.w	80058e4 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh>
}
 80059d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080059d4 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_>:
uint8_t Packet_Connection::get_data(const LoRa_packet& packet, uint8_t *data, uint8_t *len) {
 80059d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80059d8:	4604      	mov	r4, r0
 80059da:	460f      	mov	r7, r1
 80059dc:	4690      	mov	r8, r2
    if(len == nullptr)
 80059de:	461e      	mov	r6, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d06c      	beq.n	8005abe <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xea>
    error = get_size_by_data(&command_, nullptr, len_data);
 80059e4:	f100 091c 	add.w	r9, r0, #28
 80059e8:	2200      	movs	r2, #0
 80059ea:	4649      	mov	r1, r9
 80059ec:	f10d 0307 	add.w	r3, sp, #7
 80059f0:	f7ff ff4c 	bl	800588c <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
    if(error == 2) {
 80059f4:	2802      	cmp	r0, #2
    error = get_size_by_data(&command_, nullptr, len_data);
 80059f6:	4605      	mov	r5, r0
    if(error == 2) {
 80059f8:	d125      	bne.n	8005a46 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x72>
        if(command_ == 0x01) {
 80059fa:	7f23      	ldrb	r3, [r4, #28]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d109      	bne.n	8005a14 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x40>
            error = get_size_by_data(&command_, len, len_data);
 8005a00:	4632      	mov	r2, r6
 8005a02:	4649      	mov	r1, r9
 8005a04:	4620      	mov	r0, r4
 8005a06:	f10d 0307 	add.w	r3, sp, #7
 8005a0a:	f7ff ff3f 	bl	800588c <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
 8005a0e:	4605      	mov	r5, r0
    if(error)
 8005a10:	b35d      	cbz	r5, 8005a6a <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x96>
 8005a12:	e036      	b.n	8005a82 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xae>
            *len = field_byte.get_value(packet, last_read_byte);
 8005a14:	4639      	mov	r1, r7
 8005a16:	7e22      	ldrb	r2, [r4, #24]
 8005a18:	482a      	ldr	r0, [pc, #168]	; (8005ac4 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xf0>)
 8005a1a:	f7fd fca5 	bl	8003368 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005a1e:	7030      	strb	r0, [r6, #0]
            ++last_read_byte;
 8005a20:	69a3      	ldr	r3, [r4, #24]
            error = get_size_by_data(&command_, len, len_data);
 8005a22:	4632      	mov	r2, r6
            ++last_read_byte;
 8005a24:	3301      	adds	r3, #1
 8005a26:	61a3      	str	r3, [r4, #24]
            error = get_size_by_data(&command_, len, len_data);
 8005a28:	4649      	mov	r1, r9
 8005a2a:	f10d 0307 	add.w	r3, sp, #7
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f7ff ff2c 	bl	800588c <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
            if (command_ == 0x06) {
 8005a34:	7f23      	ldrb	r3, [r4, #28]
            error = get_size_by_data(&command_, len, len_data);
 8005a36:	4605      	mov	r5, r0
            if (command_ == 0x06) {
 8005a38:	2b06      	cmp	r3, #6
 8005a3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005a3e:	d100      	bne.n	8005a42 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x6e>
                *len = len_data/2;
 8005a40:	085b      	lsrs	r3, r3, #1
        *len = len_data;
 8005a42:	7033      	strb	r3, [r6, #0]
 8005a44:	e7e4      	b.n	8005a10 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x3c>
    else if(error == 3) {
 8005a46:	2803      	cmp	r0, #3
 8005a48:	d11f      	bne.n	8005a8a <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xb6>
        if (((packet.get_len() - last_read_byte) == 1) || ((packet.get_len() - last_read_byte) == 2)) {
 8005a4a:	4638      	mov	r0, r7
 8005a4c:	f7fe fd05 	bl	800445a <_ZNK11LoRa_packet7get_lenEv>
 8005a50:	69a3      	ldr	r3, [r4, #24]
 8005a52:	1ac0      	subs	r0, r0, r3
 8005a54:	2801      	cmp	r0, #1
 8005a56:	d10d      	bne.n	8005a74 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xa0>
            len_data = packet.get_len() - last_read_byte;
 8005a58:	4638      	mov	r0, r7
 8005a5a:	f7fe fcfe 	bl	800445a <_ZNK11LoRa_packet7get_lenEv>
 8005a5e:	69a3      	ldr	r3, [r4, #24]
 8005a60:	1ac0      	subs	r0, r0, r3
 8005a62:	b2c0      	uxtb	r0, r0
 8005a64:	f88d 0007 	strb.w	r0, [sp, #7]
            *len = len_data;
 8005a68:	7030      	strb	r0, [r6, #0]
    if(len_data > 0) {
 8005a6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005a6e:	b97b      	cbnz	r3, 8005a90 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xbc>
    return 0;
 8005a70:	2500      	movs	r5, #0
 8005a72:	e006      	b.n	8005a82 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xae>
        if (((packet.get_len() - last_read_byte) == 1) || ((packet.get_len() - last_read_byte) == 2)) {
 8005a74:	4638      	mov	r0, r7
 8005a76:	f7fe fcf0 	bl	800445a <_ZNK11LoRa_packet7get_lenEv>
 8005a7a:	69a3      	ldr	r3, [r4, #24]
 8005a7c:	1ac0      	subs	r0, r0, r3
 8005a7e:	2802      	cmp	r0, #2
 8005a80:	d0ea      	beq.n	8005a58 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x84>
}
 8005a82:	4628      	mov	r0, r5
 8005a84:	b003      	add	sp, #12
 8005a86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *len = len_data;
 8005a8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005a8e:	e7d8      	b.n	8005a42 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x6e>
        if(data == nullptr)
 8005a90:	f1b8 0f00 	cmp.w	r8, #0
 8005a94:	d011      	beq.n	8005aba <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xe6>
        for (int i = 0; i < len_data; ++i) {
 8005a96:	2500      	movs	r5, #0
            data[i] = field_byte.get_value(packet, last_read_byte);
 8005a98:	4e0a      	ldr	r6, [pc, #40]	; (8005ac4 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xf0>)
        for (int i = 0; i < len_data; ++i) {
 8005a9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005a9e:	42ab      	cmp	r3, r5
 8005aa0:	dde6      	ble.n	8005a70 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x9c>
            data[i] = field_byte.get_value(packet, last_read_byte);
 8005aa2:	4639      	mov	r1, r7
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	7e22      	ldrb	r2, [r4, #24]
 8005aa8:	f7fd fc5e 	bl	8003368 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005aac:	f808 0005 	strb.w	r0, [r8, r5]
            ++last_read_byte;
 8005ab0:	69a3      	ldr	r3, [r4, #24]
        for (int i = 0; i < len_data; ++i) {
 8005ab2:	3501      	adds	r5, #1
            ++last_read_byte;
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	61a3      	str	r3, [r4, #24]
        for (int i = 0; i < len_data; ++i) {
 8005ab8:	e7ef      	b.n	8005a9a <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xc6>
            return 6;
 8005aba:	2506      	movs	r5, #6
 8005abc:	e7e1      	b.n	8005a82 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xae>
        return 1;
 8005abe:	2501      	movs	r5, #1
 8005ac0:	e7df      	b.n	8005a82 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xae>
 8005ac2:	bf00      	nop
 8005ac4:	200020ec 	.word	0x200020ec

08005ac8 <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>:
uint8_t Packet_Connection::get_packet_data(const LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 8005ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005acc:	9f06      	ldr	r7, [sp, #24]
 8005ace:	4604      	mov	r4, r0
 8005ad0:	460d      	mov	r5, r1
 8005ad2:	461e      	mov	r6, r3
    error = get_command(packet, com);
 8005ad4:	f7ff febe 	bl	8005854 <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh>
    if(error)
 8005ad8:	b938      	cbnz	r0, 8005aea <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_+0x22>
    error = get_data(packet, data, len);
 8005ada:	463b      	mov	r3, r7
 8005adc:	4632      	mov	r2, r6
 8005ade:	4629      	mov	r1, r5
 8005ae0:	4620      	mov	r0, r4
}
 8005ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    error = get_data(packet, data, len);
 8005ae6:	f7ff bf75 	b.w	80059d4 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_>
}
 8005aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005af0 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh>:
uint8_t Packet_Connection::get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data) {
 8005af0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    error = get_command(packet, &command_);
 8005af4:	f100 081c 	add.w	r8, r0, #28
uint8_t Packet_Connection::get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data) {
 8005af8:	4617      	mov	r7, r2
    error = get_command(packet, &command_);
 8005afa:	4642      	mov	r2, r8
uint8_t Packet_Connection::get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data) {
 8005afc:	4605      	mov	r5, r0
 8005afe:	460e      	mov	r6, r1
    error = get_command(packet, &command_);
 8005b00:	f7ff fea8 	bl	8005854 <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh>
    if(error)
 8005b04:	4602      	mov	r2, r0
 8005b06:	bba0      	cbnz	r0, 8005b72 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x82>
    error = get_size_by_data(&command_, nullptr, size_data);
 8005b08:	463b      	mov	r3, r7
 8005b0a:	4641      	mov	r1, r8
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	f7ff febd 	bl	800588c <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
    if(error == 2) {
 8005b12:	2802      	cmp	r0, #2
    error = get_size_by_data(&command_, nullptr, size_data);
 8005b14:	4604      	mov	r4, r0
    if(error == 2) {
 8005b16:	d110      	bne.n	8005b3a <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x4a>
        uint8_t len = field_byte.get_value(packet, last_read_byte);
 8005b18:	4631      	mov	r1, r6
 8005b1a:	7e2a      	ldrb	r2, [r5, #24]
 8005b1c:	4816      	ldr	r0, [pc, #88]	; (8005b78 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x88>)
 8005b1e:	f7fd fc23 	bl	8003368 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
        error = get_size_by_data(&command_, &len, size_data);
 8005b22:	463b      	mov	r3, r7
        uint8_t len = field_byte.get_value(packet, last_read_byte);
 8005b24:	f88d 0007 	strb.w	r0, [sp, #7]
        error = get_size_by_data(&command_, &len, size_data);
 8005b28:	4641      	mov	r1, r8
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	f10d 0207 	add.w	r2, sp, #7
 8005b30:	f7ff feac 	bl	800588c <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
        last_read_byte = PACKET_HEADER_SIZE + 1;
 8005b34:	230a      	movs	r3, #10
        error = get_size_by_data(&command_, &len, size_data);
 8005b36:	4604      	mov	r4, r0
        last_read_byte = PACKET_HEADER_SIZE + 1;
 8005b38:	61ab      	str	r3, [r5, #24]
    if(error == 3) {
 8005b3a:	2c03      	cmp	r4, #3
 8005b3c:	d10d      	bne.n	8005b5a <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x6a>
        if (((packet.get_len() - last_read_byte) == 1) || ((packet.get_len() - last_read_byte) == 2)) {
 8005b3e:	4630      	mov	r0, r6
 8005b40:	f7fe fc8b 	bl	800445a <_ZNK11LoRa_packet7get_lenEv>
 8005b44:	69ab      	ldr	r3, [r5, #24]
 8005b46:	1ac0      	subs	r0, r0, r3
 8005b48:	2801      	cmp	r0, #1
 8005b4a:	d10a      	bne.n	8005b62 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x72>
            size_data = packet.get_len() - last_read_byte;
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	f7fe fc84 	bl	800445a <_ZNK11LoRa_packet7get_lenEv>
            error = 0;
 8005b52:	2400      	movs	r4, #0
            size_data = packet.get_len() - last_read_byte;
 8005b54:	69ab      	ldr	r3, [r5, #24]
 8005b56:	1ac0      	subs	r0, r0, r3
 8005b58:	7038      	strb	r0, [r7, #0]
}
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	b002      	add	sp, #8
 8005b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (((packet.get_len() - last_read_byte) == 1) || ((packet.get_len() - last_read_byte) == 2)) {
 8005b62:	4630      	mov	r0, r6
 8005b64:	f7fe fc79 	bl	800445a <_ZNK11LoRa_packet7get_lenEv>
 8005b68:	69ab      	ldr	r3, [r5, #24]
 8005b6a:	1ac0      	subs	r0, r0, r3
 8005b6c:	2802      	cmp	r0, #2
 8005b6e:	d1f4      	bne.n	8005b5a <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x6a>
 8005b70:	e7ec      	b.n	8005b4c <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x5c>
 8005b72:	4604      	mov	r4, r0
 8005b74:	e7f1      	b.n	8005b5a <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x6a>
 8005b76:	bf00      	nop
 8005b78:	200020ec 	.word	0x200020ec

08005b7c <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm>:
uint8_t Packet_Sensor::set_packet_data(LoRa_packet& packet, uint8_t* amt, uint8_t* param, uint8_t* id, uint32_t* data) {
 8005b7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b80:	9301      	str	r3, [sp, #4]
    last_filled_byte = PACKET_HEADER_SIZE;
 8005b82:	2309      	movs	r3, #9
    if (field_bit[0].get_value(&setting_) != 0) {
 8005b84:	f100 0710 	add.w	r7, r0, #16
uint8_t Packet_Sensor::set_packet_data(LoRa_packet& packet, uint8_t* amt, uint8_t* param, uint8_t* id, uint32_t* data) {
 8005b88:	4604      	mov	r4, r0
 8005b8a:	460e      	mov	r6, r1
 8005b8c:	4615      	mov	r5, r2
    last_filled_byte = PACKET_HEADER_SIZE;
 8005b8e:	6143      	str	r3, [r0, #20]
    if (field_bit[0].get_value(&setting_) != 0) {
 8005b90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b94:	4639      	mov	r1, r7
 8005b96:	4841      	ldr	r0, [pc, #260]	; (8005c9c <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x120>)
 8005b98:	f7fd fb57 	bl	800324a <_ZNK13Address_field9get_valueEPKhi>
 8005b9c:	b1e8      	cbz	r0, 8005bda <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x5e>
        field_byte.set_value(*amt, packet, last_filled_byte);
 8005b9e:	7d23      	ldrb	r3, [r4, #20]
 8005ba0:	4632      	mov	r2, r6
 8005ba2:	7829      	ldrb	r1, [r5, #0]
 8005ba4:	483e      	ldr	r0, [pc, #248]	; (8005ca0 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x124>)
 8005ba6:	f7fd fc2b 	bl	8003400 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
        ++last_filled_byte;
 8005baa:	6963      	ldr	r3, [r4, #20]
        count = *amt;
 8005bac:	f895 9000 	ldrb.w	r9, [r5]
        ++last_filled_byte;
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	6163      	str	r3, [r4, #20]
    for (int i = 0; i < count; ++i) {
 8005bb4:	2500      	movs	r5, #0
        if (field_bit[1].get_value(&setting_) != 1) {
 8005bb6:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8005cb0 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x134>
            error = field_byte.set_value(param_, packet, last_filled_byte);
 8005bba:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8005ca0 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x124>
        if (field_bit[2].get_value(&setting_) != 0) {
 8005bbe:	f10a 0b1c 	add.w	fp, sl, #28
    for (int i = 0; i < count; ++i) {
 8005bc2:	45a9      	cmp	r9, r5
 8005bc4:	dd65      	ble.n	8005c92 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x116>
        if (!(param[i] < SENSOR_PARAM_DATA)) {
 8005bc6:	9b01      	ldr	r3, [sp, #4]
 8005bc8:	5d5b      	ldrb	r3, [r3, r5]
 8005bca:	2b0c      	cmp	r3, #12
 8005bcc:	d908      	bls.n	8005be0 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x64>
            param_ = 0xFF;
 8005bce:	23ff      	movs	r3, #255	; 0xff
            return 2;
 8005bd0:	2002      	movs	r0, #2
            param_ = 0xFF;
 8005bd2:	7723      	strb	r3, [r4, #28]
}
 8005bd4:	b003      	add	sp, #12
 8005bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t count = 1;
 8005bda:	f04f 0901 	mov.w	r9, #1
 8005bde:	e7e9      	b.n	8005bb4 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x38>
        if (field_bit[1].get_value(&setting_) != 1) {
 8005be0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005be4:	4639      	mov	r1, r7
 8005be6:	4650      	mov	r0, sl
        param_ = param[i];
 8005be8:	7723      	strb	r3, [r4, #28]
        if (field_bit[1].get_value(&setting_) != 1) {
 8005bea:	f7fd fb2e 	bl	800324a <_ZNK13Address_field9get_valueEPKhi>
 8005bee:	2801      	cmp	r0, #1
 8005bf0:	d113      	bne.n	8005c1a <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x9e>
        if (field_bit[2].get_value(&setting_) != 0) {
 8005bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bf6:	4639      	mov	r1, r7
 8005bf8:	4658      	mov	r0, fp
 8005bfa:	f7fd fb26 	bl	800324a <_ZNK13Address_field9get_valueEPKhi>
 8005bfe:	b1c8      	cbz	r0, 8005c34 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xb8>
            error = field_byte.set_value(id[i], packet, last_filled_byte);
 8005c00:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c02:	7d23      	ldrb	r3, [r4, #20]
 8005c04:	4632      	mov	r2, r6
 8005c06:	4640      	mov	r0, r8
 8005c08:	5d49      	ldrb	r1, [r1, r5]
 8005c0a:	f7fd fbf9 	bl	8003400 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            ++last_filled_byte;
 8005c0e:	6963      	ldr	r3, [r4, #20]
 8005c10:	3301      	adds	r3, #1
 8005c12:	6163      	str	r3, [r4, #20]
        if (error)
 8005c14:	b170      	cbz	r0, 8005c34 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xb8>
            return 4;
 8005c16:	2004      	movs	r0, #4
 8005c18:	e7dc      	b.n	8005bd4 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x58>
            error = field_byte.set_value(param_, packet, last_filled_byte);
 8005c1a:	7d23      	ldrb	r3, [r4, #20]
 8005c1c:	4632      	mov	r2, r6
 8005c1e:	4640      	mov	r0, r8
 8005c20:	7f21      	ldrb	r1, [r4, #28]
 8005c22:	f7fd fbed 	bl	8003400 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            ++last_filled_byte;
 8005c26:	6963      	ldr	r3, [r4, #20]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	6163      	str	r3, [r4, #20]
        if (error)
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	d0e0      	beq.n	8005bf2 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x76>
            return 3;
 8005c30:	2003      	movs	r0, #3
 8005c32:	e7cf      	b.n	8005bd4 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x58>
        switch (sensor_param_data[param_]) {
 8005c34:	7f23      	ldrb	r3, [r4, #28]
 8005c36:	4a1b      	ldr	r2, [pc, #108]	; (8005ca4 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x128>)
 8005c38:	5cd3      	ldrb	r3, [r2, r3]
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d013      	beq.n	8005c66 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xea>
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d01c      	beq.n	8005c7c <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x100>
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d001      	beq.n	8005c4a <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xce>
 8005c46:	2005      	movs	r0, #5
 8005c48:	e7c4      	b.n	8005bd4 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x58>
            error = field_byte.set_value(*(data + i), packet, last_filled_byte);
 8005c4a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005c4c:	7d23      	ldrb	r3, [r4, #20]
 8005c4e:	4632      	mov	r2, r6
 8005c50:	4640      	mov	r0, r8
 8005c52:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8005c56:	f7fd fbd3 	bl	8003400 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            last_filled_byte += 1;
 8005c5a:	6963      	ldr	r3, [r4, #20]
 8005c5c:	3301      	adds	r3, #1
            last_filled_byte += 4;
 8005c5e:	6163      	str	r3, [r4, #20]
        if (error)
 8005c60:	b9c8      	cbnz	r0, 8005c96 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x11a>
    for (int i = 0; i < count; ++i) {
 8005c62:	3501      	adds	r5, #1
 8005c64:	e7ad      	b.n	8005bc2 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x46>
            error = field_PWM.set_value(*(data + i), packet, last_filled_byte);
 8005c66:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005c68:	7d23      	ldrb	r3, [r4, #20]
 8005c6a:	4632      	mov	r2, r6
 8005c6c:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8005c70:	480d      	ldr	r0, [pc, #52]	; (8005ca8 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x12c>)
 8005c72:	f7fd fbc5 	bl	8003400 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            last_filled_byte += 2;
 8005c76:	6963      	ldr	r3, [r4, #20]
 8005c78:	3302      	adds	r3, #2
 8005c7a:	e7f0      	b.n	8005c5e <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xe2>
            error = field_float.set_value(*(data + i), packet, last_filled_byte);
 8005c7c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005c7e:	7d23      	ldrb	r3, [r4, #20]
 8005c80:	4632      	mov	r2, r6
 8005c82:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8005c86:	4809      	ldr	r0, [pc, #36]	; (8005cac <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x130>)
 8005c88:	f7fd fbba 	bl	8003400 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            last_filled_byte += 4;
 8005c8c:	6963      	ldr	r3, [r4, #20]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	e7e5      	b.n	8005c5e <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0xe2>
    return 0;
 8005c92:	2000      	movs	r0, #0
 8005c94:	e79e      	b.n	8005bd4 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x58>
            return 6;
 8005c96:	2006      	movs	r0, #6
 8005c98:	e79c      	b.n	8005bd4 <_ZN13Packet_Sensor15set_packet_dataER11LoRa_packetPhS2_S2_Pm+0x58>
 8005c9a:	bf00      	nop
 8005c9c:	200022b8 	.word	0x200022b8
 8005ca0:	200020ec 	.word	0x200020ec
 8005ca4:	0800a6c9 	.word	0x0800a6c9
 8005ca8:	2000229c 	.word	0x2000229c
 8005cac:	20002124 	.word	0x20002124
 8005cb0:	200022d4 	.word	0x200022d4

08005cb4 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_>:



uint8_t Packet_System::set_packet_data(LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 8005cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb8:	461d      	mov	r5, r3
    bool error = false;
    last_filled_byte = PACKET_HEADER_SIZE;
 8005cba:	2309      	movs	r3, #9
 8005cbc:	6143      	str	r3, [r0, #20]
uint8_t Packet_System::set_packet_data(LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 8005cbe:	460f      	mov	r7, r1


    // комманда
    if (!(*com < SYSTEM_COMMAND_DATA)) {
 8005cc0:	7811      	ldrb	r1, [r2, #0]
uint8_t Packet_System::set_packet_data(LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 8005cc2:	4604      	mov	r4, r0
    if (!(*com < SYSTEM_COMMAND_DATA)) {
 8005cc4:	2907      	cmp	r1, #7
 8005cc6:	d904      	bls.n	8005cd2 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x1e>
        command_ = 0xFF;
 8005cc8:	23ff      	movs	r3, #255	; 0xff
 8005cca:	7703      	strb	r3, [r0, #28]
        return 2;
 8005ccc:	2002      	movs	r0, #2
        if (error)
            return 8;
    }

    return 0;
}
 8005cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    command_ = *com;
 8005cd2:	7701      	strb	r1, [r0, #28]
    error = field_byte.set_value(command_, packet, last_filled_byte);
 8005cd4:	463a      	mov	r2, r7
 8005cd6:	482a      	ldr	r0, [pc, #168]	; (8005d80 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xcc>)
 8005cd8:	f7fd fb92 	bl	8003400 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
    ++last_filled_byte;
 8005cdc:	6963      	ldr	r3, [r4, #20]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	6163      	str	r3, [r4, #20]
    if (error)
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	d140      	bne.n	8005d68 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xb4>
    if (system_com_data[command_] != 0xFF) {
 8005ce6:	7f23      	ldrb	r3, [r4, #28]
 8005ce8:	4a26      	ldr	r2, [pc, #152]	; (8005d84 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xd0>)
 8005cea:	5cd6      	ldrb	r6, [r2, r3]
 8005cec:	2eff      	cmp	r6, #255	; 0xff
 8005cee:	d128      	bne.n	8005d42 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x8e>
        switch (command_)
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d13b      	bne.n	8005d6c <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xb8>
 8005cf4:	1e6e      	subs	r6, r5, #1
 8005cf6:	f105 080b 	add.w	r8, r5, #11
                error = field_byte.set_value(data[i], packet, last_filled_byte);
 8005cfa:	7d23      	ldrb	r3, [r4, #20]
 8005cfc:	463a      	mov	r2, r7
 8005cfe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d02:	481f      	ldr	r0, [pc, #124]	; (8005d80 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xcc>)
 8005d04:	f7fd fb7c 	bl	8003400 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
                ++last_filled_byte;
 8005d08:	6963      	ldr	r3, [r4, #20]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	6163      	str	r3, [r4, #20]
                if (error)
 8005d0e:	bb78      	cbnz	r0, 8005d70 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xbc>
            for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i) {
 8005d10:	4546      	cmp	r6, r8
 8005d12:	d1f2      	bne.n	8005cfa <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x46>
            _len = *len;
 8005d14:	9a06      	ldr	r2, [sp, #24]
            error = field_byte.set_value(_len, packet, last_filled_byte);
 8005d16:	b2db      	uxtb	r3, r3
            _len = *len;
 8005d18:	7816      	ldrb	r6, [r2, #0]
            error = field_byte.set_value(_len, packet, last_filled_byte);
 8005d1a:	4819      	ldr	r0, [pc, #100]	; (8005d80 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xcc>)
 8005d1c:	463a      	mov	r2, r7
 8005d1e:	4631      	mov	r1, r6
 8005d20:	f7fd fb6e 	bl	8003400 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            ++last_filled_byte;
 8005d24:	6963      	ldr	r3, [r4, #20]
 8005d26:	3301      	adds	r3, #1
 8005d28:	6163      	str	r3, [r4, #20]
            if (error)
 8005d2a:	bb18      	cbnz	r0, 8005d74 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xc0>
            error = field_byte.set_value(data[0], packet, last_filled_byte);
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	463a      	mov	r2, r7
 8005d30:	7b69      	ldrb	r1, [r5, #13]
 8005d32:	4813      	ldr	r0, [pc, #76]	; (8005d80 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xcc>)
 8005d34:	f7fd fb64 	bl	8003400 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            ++last_filled_byte;
 8005d38:	6963      	ldr	r3, [r4, #20]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	6163      	str	r3, [r4, #20]
            if (error)
 8005d3e:	b9d8      	cbnz	r0, 8005d78 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xc4>
            data = data + 1;
 8005d40:	350e      	adds	r5, #14
        error = field_byte.set_value(data[i], packet, last_filled_byte);
 8005d42:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8005d80 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xcc>
 8005d46:	442e      	add	r6, r5
    for (int i = 0; i < _len; ++i) {
 8005d48:	42b5      	cmp	r5, r6
 8005d4a:	d017      	beq.n	8005d7c <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xc8>
        error = field_byte.set_value(data[i], packet, last_filled_byte);
 8005d4c:	7d23      	ldrb	r3, [r4, #20]
 8005d4e:	463a      	mov	r2, r7
 8005d50:	4640      	mov	r0, r8
 8005d52:	f815 1b01 	ldrb.w	r1, [r5], #1
 8005d56:	f7fd fb53 	bl	8003400 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
        ++last_filled_byte;
 8005d5a:	6963      	ldr	r3, [r4, #20]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	6163      	str	r3, [r4, #20]
        if (error)
 8005d60:	2800      	cmp	r0, #0
 8005d62:	d0f1      	beq.n	8005d48 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x94>
            return 8;
 8005d64:	2008      	movs	r0, #8
 8005d66:	e7b2      	b.n	8005cce <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x1a>
        return 3;
 8005d68:	2003      	movs	r0, #3
 8005d6a:	e7b0      	b.n	8005cce <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x1a>
            return 7;
 8005d6c:	2007      	movs	r0, #7
 8005d6e:	e7ae      	b.n	8005cce <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x1a>
                    return 4;
 8005d70:	2004      	movs	r0, #4
 8005d72:	e7ac      	b.n	8005cce <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x1a>
                return 5;
 8005d74:	2005      	movs	r0, #5
 8005d76:	e7aa      	b.n	8005cce <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x1a>
                return 6;
 8005d78:	2006      	movs	r0, #6
 8005d7a:	e7a8      	b.n	8005cce <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x1a>
    return 0;
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	e7a6      	b.n	8005cce <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x1a>
 8005d80:	200020ec 	.word	0x200020ec
 8005d84:	0800a6b4 	.word	0x0800a6b4

08005d88 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_>:

uint8_t Packet_System::get_packet_data(const LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 8005d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d8c:	4616      	mov	r6, r2
    last_read_byte = PACKET_HEADER_SIZE;
 8005d8e:	2209      	movs	r2, #9
uint8_t Packet_System::get_packet_data(const LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 8005d90:	4604      	mov	r4, r0
    last_read_byte = PACKET_HEADER_SIZE;
 8005d92:	6182      	str	r2, [r0, #24]

    // комманда
    command_ = field_byte.get_value(packet, last_read_byte);
 8005d94:	482b      	ldr	r0, [pc, #172]	; (8005e44 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xbc>)
uint8_t Packet_System::get_packet_data(const LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 8005d96:	461d      	mov	r5, r3
 8005d98:	460f      	mov	r7, r1
 8005d9a:	f8dd 8020 	ldr.w	r8, [sp, #32]
    command_ = field_byte.get_value(packet, last_read_byte);
 8005d9e:	f7fd fae3 	bl	8003368 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
    ++last_read_byte;
 8005da2:	69a3      	ldr	r3, [r4, #24]
    command_ = field_byte.get_value(packet, last_read_byte);
 8005da4:	b2c0      	uxtb	r0, r0
    ++last_read_byte;
 8005da6:	3301      	adds	r3, #1
    if (!(command_ < SYSTEM_COMMAND_DATA)) {
 8005da8:	2807      	cmp	r0, #7
    command_ = field_byte.get_value(packet, last_read_byte);
 8005daa:	7720      	strb	r0, [r4, #28]
    ++last_read_byte;
 8005dac:	61a3      	str	r3, [r4, #24]
    if (!(command_ < SYSTEM_COMMAND_DATA)) {
 8005dae:	d904      	bls.n	8005dba <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x32>
        command_ = 0xFF;
 8005db0:	23ff      	movs	r3, #255	; 0xff
        return 2;
 8005db2:	2002      	movs	r0, #2
        command_ = 0xFF;
 8005db4:	7723      	strb	r3, [r4, #28]
    for (int i = 0; i < _len; ++i) {
        data[i] = field_byte.get_value(packet, last_read_byte);
        ++last_read_byte;
    }
    return 0;
}
 8005db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    *com = command_;
 8005dba:	7030      	strb	r0, [r6, #0]
    if (system_com_data[command_] != 0xFF) {
 8005dbc:	7f23      	ldrb	r3, [r4, #28]
 8005dbe:	4a22      	ldr	r2, [pc, #136]	; (8005e48 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xc0>)
 8005dc0:	5cd6      	ldrb	r6, [r2, r3]
 8005dc2:	2eff      	cmp	r6, #255	; 0xff
 8005dc4:	d011      	beq.n	8005dea <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x62>
        *len = _len;
 8005dc6:	f888 6000 	strb.w	r6, [r8]
        data[i] = field_byte.get_value(packet, last_read_byte);
 8005dca:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8005e44 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xbc>
 8005dce:	442e      	add	r6, r5
    for (int i = 0; i < _len; ++i) {
 8005dd0:	42b5      	cmp	r5, r6
 8005dd2:	d034      	beq.n	8005e3e <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xb6>
        data[i] = field_byte.get_value(packet, last_read_byte);
 8005dd4:	4639      	mov	r1, r7
 8005dd6:	4640      	mov	r0, r8
 8005dd8:	7e22      	ldrb	r2, [r4, #24]
 8005dda:	f7fd fac5 	bl	8003368 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005dde:	f805 0b01 	strb.w	r0, [r5], #1
        ++last_read_byte;
 8005de2:	69a3      	ldr	r3, [r4, #24]
 8005de4:	3301      	adds	r3, #1
 8005de6:	61a3      	str	r3, [r4, #24]
    for (int i = 0; i < _len; ++i) {
 8005de8:	e7f2      	b.n	8005dd0 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x48>
        switch (command_)
 8005dea:	bb33      	cbnz	r3, 8005e3a <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xb2>
 8005dec:	1e6e      	subs	r6, r5, #1
 8005dee:	f105 090b 	add.w	r9, r5, #11
                data[i] = field_byte.get_value(packet, last_read_byte);
 8005df2:	7e22      	ldrb	r2, [r4, #24]
 8005df4:	4639      	mov	r1, r7
 8005df6:	4813      	ldr	r0, [pc, #76]	; (8005e44 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xbc>)
 8005df8:	f7fd fab6 	bl	8003368 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005dfc:	f806 0f01 	strb.w	r0, [r6, #1]!
                ++last_read_byte;
 8005e00:	69a2      	ldr	r2, [r4, #24]
            for (int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i) {
 8005e02:	454e      	cmp	r6, r9
                ++last_read_byte;
 8005e04:	f102 0201 	add.w	r2, r2, #1
 8005e08:	61a2      	str	r2, [r4, #24]
            for (int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i) {
 8005e0a:	d1f2      	bne.n	8005df2 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x6a>
            data[0] = field_byte.get_value(packet, last_read_byte);
 8005e0c:	4639      	mov	r1, r7
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	480c      	ldr	r0, [pc, #48]	; (8005e44 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xbc>)
 8005e12:	f7fd faa9 	bl	8003368 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005e16:	7328      	strb	r0, [r5, #12]
            ++last_read_byte;
 8005e18:	69a3      	ldr	r3, [r4, #24]
            data[0] = field_byte.get_value(packet, last_read_byte);
 8005e1a:	4639      	mov	r1, r7
            ++last_read_byte;
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	61a3      	str	r3, [r4, #24]
            *len = _len = data[0];
 8005e20:	7b2e      	ldrb	r6, [r5, #12]
            data[0] = field_byte.get_value(packet, last_read_byte);
 8005e22:	4808      	ldr	r0, [pc, #32]	; (8005e44 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xbc>)
            *len = _len = data[0];
 8005e24:	f888 6000 	strb.w	r6, [r8]
            data[0] = field_byte.get_value(packet, last_read_byte);
 8005e28:	7e22      	ldrb	r2, [r4, #24]
 8005e2a:	f7fd fa9d 	bl	8003368 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005e2e:	7368      	strb	r0, [r5, #13]
            ++last_read_byte;
 8005e30:	69a3      	ldr	r3, [r4, #24]
            data = data + 1;
 8005e32:	350e      	adds	r5, #14
            ++last_read_byte;
 8005e34:	3301      	adds	r3, #1
 8005e36:	61a3      	str	r3, [r4, #24]
            break;
 8005e38:	e7c7      	b.n	8005dca <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x42>
            return 4;
 8005e3a:	2004      	movs	r0, #4
 8005e3c:	e7bb      	b.n	8005db6 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x2e>
    return 0;
 8005e3e:	2000      	movs	r0, #0
 8005e40:	e7b9      	b.n	8005db6 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x2e>
 8005e42:	bf00      	nop
 8005e44:	200020ec 	.word	0x200020ec
 8005e48:	0800a6b4 	.word	0x0800a6b4

08005e4c <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh>:
    }
    size_data += _len;
    last_read_byte += _len;
    return 0;
}
uint8_t Packet_System::get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data) {
 8005e4c:	b570      	push	{r4, r5, r6, lr}
 8005e4e:	4615      	mov	r5, r2
    last_read_byte = PACKET_HEADER_SIZE;
 8005e50:	2209      	movs	r2, #9
uint8_t Packet_System::get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data) {
 8005e52:	4604      	mov	r4, r0
    last_read_byte = PACKET_HEADER_SIZE;
 8005e54:	6182      	str	r2, [r0, #24]
    // комманда
    command_ = field_byte.get_value(packet, last_read_byte);
 8005e56:	4819      	ldr	r0, [pc, #100]	; (8005ebc <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x70>)
uint8_t Packet_System::get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data) {
 8005e58:	460e      	mov	r6, r1
    command_ = field_byte.get_value(packet, last_read_byte);
 8005e5a:	f7fd fa85 	bl	8003368 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
    ++last_read_byte;
 8005e5e:	69a3      	ldr	r3, [r4, #24]
    command_ = field_byte.get_value(packet, last_read_byte);
 8005e60:	b2c0      	uxtb	r0, r0
    ++last_read_byte;
 8005e62:	1c5a      	adds	r2, r3, #1
    if (!(command_ < SYSTEM_COMMAND_DATA)) {
 8005e64:	2807      	cmp	r0, #7
    command_ = field_byte.get_value(packet, last_read_byte);
 8005e66:	7720      	strb	r0, [r4, #28]
    ++last_read_byte;
 8005e68:	61a2      	str	r2, [r4, #24]
    if (!(command_ < SYSTEM_COMMAND_DATA)) {
 8005e6a:	d903      	bls.n	8005e74 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x28>
        command_ = 0xFF;
 8005e6c:	23ff      	movs	r3, #255	; 0xff
        return 2;
 8005e6e:	2002      	movs	r0, #2
        command_ = 0xFF;
 8005e70:	7723      	strb	r3, [r4, #28]
            return 4;
        }
    }
    last_read_byte += size_data;
    return 0;
}
 8005e72:	bd70      	pop	{r4, r5, r6, pc}
    if (system_com_data[command_] != 0xFF) {
 8005e74:	4a12      	ldr	r2, [pc, #72]	; (8005ec0 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x74>)
 8005e76:	5c12      	ldrb	r2, [r2, r0]
 8005e78:	2aff      	cmp	r2, #255	; 0xff
 8005e7a:	d006      	beq.n	8005e8a <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x3e>
        size_data = system_com_data[command_];
 8005e7c:	702a      	strb	r2, [r5, #0]
    last_read_byte += size_data;
 8005e7e:	782a      	ldrb	r2, [r5, #0]
 8005e80:	69a3      	ldr	r3, [r4, #24]
    return 0;
 8005e82:	2000      	movs	r0, #0
    last_read_byte += size_data;
 8005e84:	4413      	add	r3, r2
 8005e86:	61a3      	str	r3, [r4, #24]
    return 0;
 8005e88:	e7f3      	b.n	8005e72 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x26>
        switch (command_)
 8005e8a:	b9a8      	cbnz	r0, 8005eb8 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x6c>
            last_read_byte += AMT_BYTES_SYSTEM_ID; // смещение на ID
 8005e8c:	330d      	adds	r3, #13
 8005e8e:	61a3      	str	r3, [r4, #24]
            size_data = AMT_BYTES_SYSTEM_ID; // смещение на ID
 8005e90:	230c      	movs	r3, #12
 8005e92:	702b      	strb	r3, [r5, #0]
            size_data += field_byte.get_value(packet, last_read_byte);
 8005e94:	4631      	mov	r1, r6
 8005e96:	7e22      	ldrb	r2, [r4, #24]
 8005e98:	4808      	ldr	r0, [pc, #32]	; (8005ebc <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x70>)
 8005e9a:	f7fd fa65 	bl	8003368 <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005e9e:	782b      	ldrb	r3, [r5, #0]
 8005ea0:	4403      	add	r3, r0
 8005ea2:	702b      	strb	r3, [r5, #0]
            last_read_byte += 2; // смещение на length и type
 8005ea4:	69a3      	ldr	r3, [r4, #24]
 8005ea6:	3302      	adds	r3, #2
 8005ea8:	61a3      	str	r3, [r4, #24]
            size_data += 2; // смещение на length и type
 8005eaa:	782b      	ldrb	r3, [r5, #0]
 8005eac:	3302      	adds	r3, #2
 8005eae:	702b      	strb	r3, [r5, #0]
            ++last_read_byte;
 8005eb0:	69a3      	ldr	r3, [r4, #24]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	61a3      	str	r3, [r4, #24]
            break;
 8005eb6:	e7e2      	b.n	8005e7e <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x32>
            return 4;
 8005eb8:	2004      	movs	r0, #4
 8005eba:	e7da      	b.n	8005e72 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x26>
 8005ebc:	200020ec 	.word	0x200020ec
 8005ec0:	0800a6b4 	.word	0x0800a6b4

08005ec4 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH>:
const uint16_t LORA_ADDRESS_BRANCH = 24 - LORA_ADDRESS_GROUP;

const Register Hendler[11] = {Register(0, 8, 0), Register(1, 1, 7), Register(1, 7, 0), Register(2, 8, 0),
                              Register(3, 8, 0), Register(4, 1, 7), Register(4, 7, 0), Register(5, 8, 0),
                              Register(6, 8, 0),
                              Register(7, 8, 0), Register(8, 8, 0)};
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eca:	4edc      	ldr	r6, [pc, #880]	; (800623c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x378>)
 8005ecc:	b087      	sub	sp, #28
 8005ece:	4619      	mov	r1, r3
 8005ed0:	2208      	movs	r2, #8
 8005ed2:	4630      	mov	r0, r6
 8005ed4:	f7fd f91c 	bl	8003110 <_ZN8RegisterC1Ethh>
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f106 0b10 	add.w	fp, r6, #16
 8005ede:	4611      	mov	r1, r2
 8005ee0:	2307      	movs	r3, #7
 8005ee2:	f106 0008 	add.w	r0, r6, #8
 8005ee6:	f7fd f913 	bl	8003110 <_ZN8RegisterC1Ethh>
 8005eea:	2300      	movs	r3, #0
 8005eec:	2207      	movs	r2, #7
 8005eee:	2101      	movs	r1, #1
 8005ef0:	4658      	mov	r0, fp
 8005ef2:	f7fd f90d 	bl	8003110 <_ZN8RegisterC1Ethh>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	2208      	movs	r2, #8
 8005efa:	2102      	movs	r1, #2
 8005efc:	f106 0018 	add.w	r0, r6, #24
 8005f00:	f7fd f906 	bl	8003110 <_ZN8RegisterC1Ethh>
 8005f04:	2300      	movs	r3, #0
 8005f06:	2208      	movs	r2, #8
 8005f08:	2103      	movs	r1, #3
 8005f0a:	f106 0020 	add.w	r0, r6, #32
 8005f0e:	f7fd f8ff 	bl	8003110 <_ZN8RegisterC1Ethh>
 8005f12:	f106 0930 	add.w	r9, r6, #48	; 0x30
 8005f16:	2307      	movs	r3, #7
 8005f18:	2201      	movs	r2, #1
 8005f1a:	2104      	movs	r1, #4
 8005f1c:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8005f20:	f7fd f8f6 	bl	8003110 <_ZN8RegisterC1Ethh>
 8005f24:	2300      	movs	r3, #0
 8005f26:	2207      	movs	r2, #7
 8005f28:	2104      	movs	r1, #4
 8005f2a:	4648      	mov	r0, r9
 8005f2c:	f7fd f8f0 	bl	8003110 <_ZN8RegisterC1Ethh>
 8005f30:	f106 0840 	add.w	r8, r6, #64	; 0x40
 8005f34:	2300      	movs	r3, #0
 8005f36:	2208      	movs	r2, #8
 8005f38:	2105      	movs	r1, #5
 8005f3a:	f106 0038 	add.w	r0, r6, #56	; 0x38
 8005f3e:	f7fd f8e7 	bl	8003110 <_ZN8RegisterC1Ethh>
 8005f42:	f106 0748 	add.w	r7, r6, #72	; 0x48
 8005f46:	2300      	movs	r3, #0
 8005f48:	2208      	movs	r2, #8
 8005f4a:	2106      	movs	r1, #6
 8005f4c:	4640      	mov	r0, r8
 8005f4e:	f7fd f8df 	bl	8003110 <_ZN8RegisterC1Ethh>
 8005f52:	2300      	movs	r3, #0
 8005f54:	2208      	movs	r2, #8
 8005f56:	2107      	movs	r1, #7
 8005f58:	4638      	mov	r0, r7
 8005f5a:	f7fd f8d9 	bl	8003110 <_ZN8RegisterC1Ethh>
 8005f5e:	2208      	movs	r2, #8

const Address_field field_dest_adr_group(&Hendler[0], 2, true),  // Destination Address group (адресс группы устройства назначения)
 8005f60:	2400      	movs	r4, #0
 8005f62:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005f66:	f04f 0a77 	mov.w	sl, #119	; 0x77
                              Register(7, 8, 0), Register(8, 8, 0)};
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f106 0050 	add.w	r0, r6, #80	; 0x50
 8005f72:	f7fd f8cd 	bl	8003110 <_ZN8RegisterC1Ethh>
const Address_field field_dest_adr_group(&Hendler[0], 2, true),  // Destination Address group (адресс группы устройства назначения)
 8005f76:	4631      	mov	r1, r6
 8005f78:	2301      	movs	r3, #1
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005f80:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005f84:	f8cd a000 	str.w	sl, [sp]
 8005f88:	48ad      	ldr	r0, [pc, #692]	; (8006240 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x37c>)
 8005f8a:	f7fd f94b 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_dest_adr_branch(&Hendler[2], 2, true), // Destination Address branch (адресс ветви устройства назначения)
 8005f8e:	4659      	mov	r1, fp
 8005f90:	2301      	movs	r3, #1
 8005f92:	2202      	movs	r2, #2
 8005f94:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005f98:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005f9c:	f8cd a000 	str.w	sl, [sp]
 8005fa0:	48a8      	ldr	r0, [pc, #672]	; (8006244 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x380>)
 8005fa2:	f7fd f93f 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_sour_adr_group(&Hendler[4], 2, true),  // Source Address group (адресс группы отправляющего устройства)
 8005fa6:	f106 0120 	add.w	r1, r6, #32
 8005faa:	2301      	movs	r3, #1
 8005fac:	2202      	movs	r2, #2
 8005fae:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005fb2:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005fb6:	f8cd a000 	str.w	sl, [sp]
 8005fba:	48a3      	ldr	r0, [pc, #652]	; (8006248 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x384>)
 8005fbc:	f7fd f932 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_sour_adr_branch(&Hendler[6], 2, true), // Source Address branch (адресс ветви отправляющего устройства)
 8005fc0:	4649      	mov	r1, r9
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005fca:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005fce:	f8cd a000 	str.w	sl, [sp]
 8005fd2:	489e      	ldr	r0, [pc, #632]	; (800624c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x388>)
 8005fd4:	f7fd f926 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_type(&Hendler[8], 1, true),   // Packet Type (тип пакетп)
 8005fd8:	2301      	movs	r3, #1
 8005fda:	4641      	mov	r1, r8
 8005fdc:	461a      	mov	r2, r3
                                               &field_sour_adr_group, &field_sour_adr_branch,
                                               &field_type, &field_number};


// Типы данных
const Register register_PWM[2]   = {Register(0, 4, 0), Register(1, 8, 0)},
 8005fde:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8006298 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3d4>
                    field_type(&Hendler[8], 1, true),   // Packet Type (тип пакетп)
 8005fe2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005fe6:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005fea:	f8cd a000 	str.w	sl, [sp]
 8005fee:	4898      	ldr	r0, [pc, #608]	; (8006250 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x38c>)
 8005ff0:	f7fd f918 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_number(&Hendler[9], 2, true); // Packet Number (номер пакета)
 8005ff4:	4639      	mov	r1, r7
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005ffe:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8006002:	f8cd a000 	str.w	sl, [sp]
 8006006:	4893      	ldr	r0, [pc, #588]	; (8006254 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x390>)
 8006008:	f7fd f90c 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
const Register register_PWM[2]   = {Register(0, 4, 0), Register(1, 8, 0)},
 800600c:	4623      	mov	r3, r4
 800600e:	4621      	mov	r1, r4
 8006010:	2204      	movs	r2, #4
 8006012:	4640      	mov	r0, r8
 8006014:	f7fd f87c 	bl	8003110 <_ZN8RegisterC1Ethh>
 8006018:	2208      	movs	r2, #8
               register_byte[1]  = {Register(0, 8, 0)},
               register_float[4] = {Register(0, 8, 0), Register(1, 8, 0), Register(2, 8, 0), Register(3, 8, 0)},
 800601a:	4f8f      	ldr	r7, [pc, #572]	; (8006258 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x394>)
const Register register_PWM[2]   = {Register(0, 4, 0), Register(1, 8, 0)},
 800601c:	4623      	mov	r3, r4
 800601e:	eb08 0002 	add.w	r0, r8, r2
 8006022:	2101      	movs	r1, #1
 8006024:	f7fd f874 	bl	8003110 <_ZN8RegisterC1Ethh>
               register_byte[1]  = {Register(0, 8, 0)},
 8006028:	4623      	mov	r3, r4
 800602a:	4621      	mov	r1, r4
 800602c:	2208      	movs	r2, #8
 800602e:	488b      	ldr	r0, [pc, #556]	; (800625c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x398>)
 8006030:	f7fd f86e 	bl	8003110 <_ZN8RegisterC1Ethh>
               register_float[4] = {Register(0, 8, 0), Register(1, 8, 0), Register(2, 8, 0), Register(3, 8, 0)},
 8006034:	4623      	mov	r3, r4
 8006036:	4621      	mov	r1, r4
 8006038:	2208      	movs	r2, #8
 800603a:	4638      	mov	r0, r7
 800603c:	f7fd f868 	bl	8003110 <_ZN8RegisterC1Ethh>
 8006040:	2208      	movs	r2, #8
 8006042:	4623      	mov	r3, r4
 8006044:	18b8      	adds	r0, r7, r2
 8006046:	2101      	movs	r1, #1
               register_bit[8]   = {Register(0, 1, 0), Register(0, 1, 1), Register(0, 1, 2), Register(0, 1, 3),
                                    Register(0, 1, 4), Register(0, 1, 5), Register(0, 1, 6), Register(0, 1, 7)};
 8006048:	4e85      	ldr	r6, [pc, #532]	; (8006260 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x39c>)
               register_float[4] = {Register(0, 8, 0), Register(1, 8, 0), Register(2, 8, 0), Register(3, 8, 0)},
 800604a:	f7fd f861 	bl	8003110 <_ZN8RegisterC1Ethh>
 800604e:	4623      	mov	r3, r4
 8006050:	2208      	movs	r2, #8
 8006052:	2102      	movs	r1, #2
 8006054:	f107 0010 	add.w	r0, r7, #16
 8006058:	f7fd f85a 	bl	8003110 <_ZN8RegisterC1Ethh>
 800605c:	4623      	mov	r3, r4
 800605e:	2208      	movs	r2, #8
 8006060:	2103      	movs	r1, #3
 8006062:	f107 0018 	add.w	r0, r7, #24
 8006066:	f7fd f853 	bl	8003110 <_ZN8RegisterC1Ethh>
                                    Register(0, 1, 4), Register(0, 1, 5), Register(0, 1, 6), Register(0, 1, 7)};
 800606a:	4623      	mov	r3, r4
 800606c:	4621      	mov	r1, r4
 800606e:	2201      	movs	r2, #1
 8006070:	4630      	mov	r0, r6
 8006072:	f7fd f84d 	bl	8003110 <_ZN8RegisterC1Ethh>
 8006076:	2301      	movs	r3, #1
 8006078:	4621      	mov	r1, r4
 800607a:	461a      	mov	r2, r3
 800607c:	f106 0008 	add.w	r0, r6, #8
 8006080:	f7fd f846 	bl	8003110 <_ZN8RegisterC1Ethh>
 8006084:	4621      	mov	r1, r4
 8006086:	2302      	movs	r3, #2
 8006088:	2201      	movs	r2, #1
 800608a:	f106 0010 	add.w	r0, r6, #16
 800608e:	f7fd f83f 	bl	8003110 <_ZN8RegisterC1Ethh>
 8006092:	4621      	mov	r1, r4
 8006094:	2303      	movs	r3, #3
 8006096:	2201      	movs	r2, #1
 8006098:	f106 0018 	add.w	r0, r6, #24
 800609c:	f7fd f838 	bl	8003110 <_ZN8RegisterC1Ethh>
 80060a0:	4621      	mov	r1, r4
 80060a2:	2304      	movs	r3, #4
 80060a4:	2201      	movs	r2, #1
 80060a6:	f106 0020 	add.w	r0, r6, #32
 80060aa:	f7fd f831 	bl	8003110 <_ZN8RegisterC1Ethh>
 80060ae:	f106 0b30 	add.w	fp, r6, #48	; 0x30
 80060b2:	4621      	mov	r1, r4
 80060b4:	2305      	movs	r3, #5
 80060b6:	2201      	movs	r2, #1
 80060b8:	f106 0028 	add.w	r0, r6, #40	; 0x28
 80060bc:	f7fd f828 	bl	8003110 <_ZN8RegisterC1Ethh>
 80060c0:	f106 0938 	add.w	r9, r6, #56	; 0x38
 80060c4:	4621      	mov	r1, r4
 80060c6:	2306      	movs	r3, #6
 80060c8:	2201      	movs	r2, #1
 80060ca:	4658      	mov	r0, fp
 80060cc:	f7fd f820 	bl	8003110 <_ZN8RegisterC1Ethh>
 80060d0:	4621      	mov	r1, r4
 80060d2:	2307      	movs	r3, #7
 80060d4:	2201      	movs	r2, #1
 80060d6:	4648      	mov	r0, r9
 80060d8:	f7fd f81a 	bl	8003110 <_ZN8RegisterC1Ethh>

const Address_field field_PWM(&register_PWM[0], 2, true),
 80060dc:	4641      	mov	r1, r8
 80060de:	2301      	movs	r3, #1
 80060e0:	2202      	movs	r2, #2
 80060e2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80060e6:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80060ea:	f8cd a000 	str.w	sl, [sp]
 80060ee:	485d      	ldr	r0, [pc, #372]	; (8006264 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3a0>)
 80060f0:	f7fd f898 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_byte(&register_byte[0]),
 80060f4:	4623      	mov	r3, r4
 80060f6:	2201      	movs	r2, #1
 80060f8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80060fc:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8006100:	4956      	ldr	r1, [pc, #344]	; (800625c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x398>)
 8006102:	f8cd a000 	str.w	sl, [sp]
 8006106:	4858      	ldr	r0, [pc, #352]	; (8006268 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3a4>)
 8006108:	f7fd f88c 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_float(&register_float[0], 4, false),
 800610c:	4639      	mov	r1, r7
                    field_bit[8] = {Address_field(&register_bit[0]), Address_field(&register_bit[1]),
                                    Address_field(&register_bit[2]), Address_field(&register_bit[3]),
                                    Address_field(&register_bit[4]), Address_field(&register_bit[5]),
                                    Address_field(&register_bit[6]), Address_field(&register_bit[7])};
 800610e:	4f57      	ldr	r7, [pc, #348]	; (800626c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3a8>)
                    field_float(&register_float[0], 4, false),
 8006110:	4623      	mov	r3, r4
 8006112:	2204      	movs	r2, #4
 8006114:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8006118:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800611c:	f8cd a000 	str.w	sl, [sp]
 8006120:	4853      	ldr	r0, [pc, #332]	; (8006270 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3ac>)
 8006122:	f7fd f87f 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                                    Address_field(&register_bit[6]), Address_field(&register_bit[7])};
 8006126:	4623      	mov	r3, r4
 8006128:	4631      	mov	r1, r6
 800612a:	2201      	movs	r2, #1
 800612c:	4638      	mov	r0, r7
 800612e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8006132:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8006136:	f8cd a000 	str.w	sl, [sp]
 800613a:	f7fd f873 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 800613e:	4623      	mov	r3, r4
 8006140:	f106 0108 	add.w	r1, r6, #8
 8006144:	2201      	movs	r2, #1
 8006146:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800614a:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800614e:	f8cd a000 	str.w	sl, [sp]
 8006152:	f107 001c 	add.w	r0, r7, #28
 8006156:	f7fd f865 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 800615a:	4623      	mov	r3, r4
 800615c:	f106 0110 	add.w	r1, r6, #16
 8006160:	2201      	movs	r2, #1
 8006162:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8006166:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800616a:	f8cd a000 	str.w	sl, [sp]
 800616e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8006172:	f7fd f857 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 8006176:	4623      	mov	r3, r4
 8006178:	f106 0118 	add.w	r1, r6, #24
 800617c:	2201      	movs	r2, #1
 800617e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8006182:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8006186:	f8cd a000 	str.w	sl, [sp]
 800618a:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800618e:	f7fd f849 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 8006192:	4623      	mov	r3, r4
 8006194:	f106 0120 	add.w	r1, r6, #32
 8006198:	2201      	movs	r2, #1
 800619a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800619e:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80061a2:	f8cd a000 	str.w	sl, [sp]
 80061a6:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80061aa:	f7fd f83b 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 80061ae:	4623      	mov	r3, r4
 80061b0:	f106 0128 	add.w	r1, r6, #40	; 0x28
 80061b4:	2201      	movs	r2, #1
 80061b6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80061ba:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80061be:	f8cd a000 	str.w	sl, [sp]
 80061c2:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 80061c6:	f7fd f82d 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 80061ca:	4623      	mov	r3, r4
 80061cc:	4659      	mov	r1, fp
 80061ce:	2201      	movs	r2, #1
 80061d0:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80061d4:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80061d8:	f8cd a000 	str.w	sl, [sp]
 80061dc:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 80061e0:	f7fd f820 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 80061e4:	4649      	mov	r1, r9
 80061e6:	4623      	mov	r3, r4
 80061e8:	2201      	movs	r2, #1
 80061ea:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80061ee:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80061f2:	f8cd a000 	str.w	sl, [sp]
 80061f6:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 80061fa:	f7fd f813 	bl	8003224 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Packet_analyzer packet_analyzer;
 80061fe:	481d      	ldr	r0, [pc, #116]	; (8006274 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3b0>)
 8006200:	f7ff fa3c 	bl	800567c <_ZN15Packet_analyzerC1Ev>
    virtual bool set_setting(uint8_t setting=0);
    uint8_t get_setting();
};


class Packet_Connection: public Packet_analyzer {
 8006204:	4b1c      	ldr	r3, [pc, #112]	; (8006278 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3b4>)
 8006206:	4618      	mov	r0, r3
 8006208:	f7ff fa38 	bl	800567c <_ZN15Packet_analyzerC1Ev>
 800620c:	4a1b      	ldr	r2, [pc, #108]	; (800627c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3b8>)
 800620e:	771c      	strb	r4, [r3, #28]
 8006210:	601a      	str	r2, [r3, #0]
    uint8_t get_size_by_data(const uint8_t *com, const uint8_t *len, uint8_t &size_data);
    // Узнать объём поля данных по содержимому пакета
    uint8_t get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data);
};

class Packet_Sensor: public Packet_analyzer {
 8006212:	4b1b      	ldr	r3, [pc, #108]	; (8006280 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3bc>)
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff fa31 	bl	800567c <_ZN15Packet_analyzerC1Ev>
 800621a:	4a1a      	ldr	r2, [pc, #104]	; (8006284 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3c0>)
 800621c:	601a      	str	r2, [r3, #0]
    uint8_t get_size_by_data(const uint8_t *amt, const uint8_t *param, uint8_t &size_data);
    // узнать объём поля данных по содержимому пакета
    uint8_t get_size_by_packet(const LoRa_packet& packet, uint8_t *amt, uint8_t *param, uint8_t &size_data);
};

class Packet_Device: public Packet_analyzer {
 800621e:	4b1a      	ldr	r3, [pc, #104]	; (8006288 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3c4>)
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff fa2b 	bl	800567c <_ZN15Packet_analyzerC1Ev>
 8006226:	4a19      	ldr	r2, [pc, #100]	; (800628c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3c8>)
 8006228:	601a      	str	r2, [r3, #0]
    uint8_t get_size_by_data(const uint8_t *obj, const uint8_t *com, uint8_t &size_data);
    // узнать объём поля данных по содержимому пакета
    uint8_t get_size_by_packet(const LoRa_packet& packet, uint8_t *obj, uint8_t &size_data);
};

class Packet_System: public Packet_analyzer {
 800622a:	4b19      	ldr	r3, [pc, #100]	; (8006290 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3cc>)
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff fa25 	bl	800567c <_ZN15Packet_analyzerC1Ev>
 8006232:	4a18      	ldr	r2, [pc, #96]	; (8006294 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3d0>)
 8006234:	601a      	str	r2, [r3, #0]
}
 8006236:	b007      	add	sp, #28
 8006238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800623c:	20002244 	.word	0x20002244
 8006240:	200021d4 	.word	0x200021d4
 8006244:	2000220c 	.word	0x2000220c
 8006248:	200021f0 	.word	0x200021f0
 800624c:	20002228 	.word	0x20002228
 8006250:	20002108 	.word	0x20002108
 8006254:	20002140 	.word	0x20002140
 8006258:	200021b4 	.word	0x200021b4
 800625c:	200021ac 	.word	0x200021ac
 8006260:	2000216c 	.word	0x2000216c
 8006264:	2000229c 	.word	0x2000229c
 8006268:	200020ec 	.word	0x200020ec
 800626c:	200022b8 	.word	0x200022b8
 8006270:	20002124 	.word	0x20002124
 8006274:	20002398 	.word	0x20002398
 8006278:	200023b4 	.word	0x200023b4
 800627c:	0800a704 	.word	0x0800a704
 8006280:	200023f4 	.word	0x200023f4
 8006284:	0800a6ec 	.word	0x0800a6ec
 8006288:	200023d4 	.word	0x200023d4
 800628c:	0800a6e0 	.word	0x0800a6e0
 8006290:	20002414 	.word	0x20002414
 8006294:	0800a6f8 	.word	0x0800a6f8
 8006298:	2000215c 	.word	0x2000215c

0800629c <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 800629c:	b148      	cbz	r0, 80062b2 <null_ptr_check+0x16>
 800629e:	6843      	ldr	r3, [r0, #4]
 80062a0:	b13b      	cbz	r3, 80062b2 <null_ptr_check+0x16>
 80062a2:	6883      	ldr	r3, [r0, #8]
 80062a4:	b12b      	cbz	r3, 80062b2 <null_ptr_check+0x16>
 80062a6:	68c0      	ldr	r0, [r0, #12]
 80062a8:	fab0 f080 	clz	r0, r0
 80062ac:	0940      	lsrs	r0, r0, #5
 80062ae:	4240      	negs	r0, r0
 80062b0:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 80062b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		/* Device structure is fine */
		rslt = BME280_OK;
	}

	return rslt;
}
 80062b6:	4770      	bx	lr

080062b8 <bme280_get_regs>:
{
 80062b8:	b570      	push	{r4, r5, r6, lr}
 80062ba:	4605      	mov	r5, r0
	rslt = null_ptr_check(dev);
 80062bc:	4618      	mov	r0, r3
{
 80062be:	461c      	mov	r4, r3
	rslt = null_ptr_check(dev);
 80062c0:	f7ff ffec 	bl	800629c <null_ptr_check>
	if (rslt == BME280_OK) {
 80062c4:	b970      	cbnz	r0, 80062e4 <bme280_get_regs+0x2c>
		if (dev->intf != BME280_I2C_INTF)
 80062c6:	78a3      	ldrb	r3, [r4, #2]
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80062c8:	6866      	ldr	r6, [r4, #4]
		if (dev->intf != BME280_I2C_INTF)
 80062ca:	2b01      	cmp	r3, #1
			reg_addr = reg_addr | 0x80;
 80062cc:	bf18      	it	ne
 80062ce:	f045 0580 	orrne.w	r5, r5, #128	; 0x80
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80062d2:	4613      	mov	r3, r2
 80062d4:	7860      	ldrb	r0, [r4, #1]
 80062d6:	460a      	mov	r2, r1
 80062d8:	4629      	mov	r1, r5
 80062da:	47b0      	blx	r6
			rslt = BME280_E_COMM_FAIL;
 80062dc:	2800      	cmp	r0, #0
 80062de:	bf18      	it	ne
 80062e0:	f06f 0003 	mvnne.w	r0, #3
}
 80062e4:	bd70      	pop	{r4, r5, r6, pc}

080062e6 <bme280_set_regs>:
{
 80062e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062e8:	2a0a      	cmp	r2, #10
 80062ea:	4605      	mov	r5, r0
 80062ec:	b087      	sub	sp, #28
	rslt = null_ptr_check(dev);
 80062ee:	4618      	mov	r0, r3
 80062f0:	4614      	mov	r4, r2
{
 80062f2:	461e      	mov	r6, r3
 80062f4:	bf28      	it	cs
 80062f6:	240a      	movcs	r4, #10
	rslt = null_ptr_check(dev);
 80062f8:	f7ff ffd0 	bl	800629c <null_ptr_check>
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 80062fc:	bb80      	cbnz	r0, 8006360 <bme280_set_regs+0x7a>
 80062fe:	b37d      	cbz	r5, 8006360 <bme280_set_regs+0x7a>
 8006300:	b371      	cbz	r1, 8006360 <bme280_set_regs+0x7a>
		if (len != 0) {
 8006302:	b382      	cbz	r2, 8006366 <bme280_set_regs+0x80>
			temp_buff[0] = reg_data[0];
 8006304:	780b      	ldrb	r3, [r1, #0]
 8006306:	f88d 3004 	strb.w	r3, [sp, #4]
			if (dev->intf != BME280_I2C_INTF) {
 800630a:	78b3      	ldrb	r3, [r6, #2]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d003      	beq.n	8006318 <bme280_set_regs+0x32>
 8006310:	462b      	mov	r3, r5
 8006312:	1967      	adds	r7, r4, r5
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8006314:	42bb      	cmp	r3, r7
 8006316:	d115      	bne.n	8006344 <bme280_set_regs+0x5e>
			if (len > 1) {
 8006318:	2a01      	cmp	r2, #1
 800631a:	d91f      	bls.n	800635c <bme280_set_regs+0x76>
 800631c:	2300      	movs	r3, #0
 800631e:	aa01      	add	r2, sp, #4
	for (index = 1; index < len; index++) {
 8006320:	3301      	adds	r3, #1
 8006322:	b2d8      	uxtb	r0, r3
 8006324:	4284      	cmp	r4, r0
 8006326:	d813      	bhi.n	8006350 <bme280_set_regs+0x6a>
				temp_len = ((len * 2) - 1);
 8006328:	0064      	lsls	r4, r4, #1
 800632a:	3c01      	subs	r4, #1
 800632c:	b2a3      	uxth	r3, r4
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 800632e:	68b4      	ldr	r4, [r6, #8]
 8006330:	7829      	ldrb	r1, [r5, #0]
 8006332:	7870      	ldrb	r0, [r6, #1]
 8006334:	aa01      	add	r2, sp, #4
 8006336:	47a0      	blx	r4
				rslt = BME280_E_COMM_FAIL;
 8006338:	2800      	cmp	r0, #0
 800633a:	bf18      	it	ne
 800633c:	f06f 0003 	mvnne.w	r0, #3
}
 8006340:	b007      	add	sp, #28
 8006342:	bdf0      	pop	{r4, r5, r6, r7, pc}
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8006344:	7818      	ldrb	r0, [r3, #0]
 8006346:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800634a:	f803 0b01 	strb.w	r0, [r3], #1
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800634e:	e7e1      	b.n	8006314 <bme280_set_regs+0x2e>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 8006350:	5ce8      	ldrb	r0, [r5, r3]
 8006352:	7050      	strb	r0, [r2, #1]
		temp_buff[index * 2] = reg_data[index];
 8006354:	5cc8      	ldrb	r0, [r1, r3]
 8006356:	f802 0f02 	strb.w	r0, [r2, #2]!
	for (index = 1; index < len; index++) {
 800635a:	e7e1      	b.n	8006320 <bme280_set_regs+0x3a>
				temp_len = len;
 800635c:	2301      	movs	r3, #1
 800635e:	e7e6      	b.n	800632e <bme280_set_regs+0x48>
		rslt = BME280_E_NULL_PTR;
 8006360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006364:	e7ec      	b.n	8006340 <bme280_set_regs+0x5a>
			rslt = BME280_E_INVALID_LEN;
 8006366:	f06f 0002 	mvn.w	r0, #2
 800636a:	e7e9      	b.n	8006340 <bme280_set_regs+0x5a>

0800636c <set_osr_humidity_settings.isra.0>:
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800636c:	23f2      	movs	r3, #242	; 0xf2
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
 800636e:	b513      	push	{r0, r1, r4, lr}
	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8006370:	f000 0007 	and.w	r0, r0, #7
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
 8006374:	460c      	mov	r4, r1
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8006376:	f88d 3007 	strb.w	r3, [sp, #7]
	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800637a:	f88d 0005 	strb.w	r0, [sp, #5]
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800637e:	460b      	mov	r3, r1
 8006380:	2201      	movs	r2, #1
 8006382:	f10d 0105 	add.w	r1, sp, #5
 8006386:	f10d 0007 	add.w	r0, sp, #7
 800638a:	f7ff ffac 	bl	80062e6 <bme280_set_regs>
	if (rslt == BME280_OK) {
 800638e:	b988      	cbnz	r0, 80063b4 <set_osr_humidity_settings.isra.0+0x48>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8006390:	20f4      	movs	r0, #244	; 0xf4
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8006392:	4623      	mov	r3, r4
 8006394:	2201      	movs	r2, #1
 8006396:	f10d 0106 	add.w	r1, sp, #6
		reg_addr = BME280_CTRL_MEAS_ADDR;
 800639a:	f88d 0007 	strb.w	r0, [sp, #7]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800639e:	f7ff ff8b 	bl	80062b8 <bme280_get_regs>
		if (rslt == BME280_OK)
 80063a2:	b938      	cbnz	r0, 80063b4 <set_osr_humidity_settings.isra.0+0x48>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80063a4:	4623      	mov	r3, r4
 80063a6:	2201      	movs	r2, #1
 80063a8:	f10d 0106 	add.w	r1, sp, #6
 80063ac:	f10d 0007 	add.w	r0, sp, #7
 80063b0:	f7ff ff99 	bl	80062e6 <bme280_set_regs>
}
 80063b4:	b002      	add	sp, #8
 80063b6:	bd10      	pop	{r4, pc}

080063b8 <set_osr_press_temp_settings>:
{
 80063b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063ba:	4606      	mov	r6, r0
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80063bc:	20f4      	movs	r0, #244	; 0xf4
{
 80063be:	460d      	mov	r5, r1
 80063c0:	4617      	mov	r7, r2
	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80063c2:	4613      	mov	r3, r2
 80063c4:	f10d 0107 	add.w	r1, sp, #7
 80063c8:	2201      	movs	r2, #1
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80063ca:	f88d 0006 	strb.w	r0, [sp, #6]
	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80063ce:	f7ff ff73 	bl	80062b8 <bme280_get_regs>
	if (rslt == BME280_OK) {
 80063d2:	b9f8      	cbnz	r0, 8006414 <set_osr_press_temp_settings+0x5c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 80063d4:	07f2      	lsls	r2, r6, #31
 80063d6:	d50a      	bpl.n	80063ee <set_osr_press_temp_settings+0x36>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80063d8:	782c      	ldrb	r4, [r5, #0]
 80063da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80063de:	00a4      	lsls	r4, r4, #2
 80063e0:	f004 041c 	and.w	r4, r4, #28
 80063e4:	f023 031c 	bic.w	r3, r3, #28
 80063e8:	431c      	orrs	r4, r3
 80063ea:	f88d 4007 	strb.w	r4, [sp, #7]
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80063ee:	07b3      	lsls	r3, r6, #30
 80063f0:	d508      	bpl.n	8006404 <set_osr_press_temp_settings+0x4c>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80063f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80063f6:	786a      	ldrb	r2, [r5, #1]
 80063f8:	f003 031f 	and.w	r3, r3, #31
 80063fc:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8006400:	f88d 3007 	strb.w	r3, [sp, #7]
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8006404:	463b      	mov	r3, r7
 8006406:	2201      	movs	r2, #1
 8006408:	f10d 0107 	add.w	r1, sp, #7
 800640c:	f10d 0006 	add.w	r0, sp, #6
 8006410:	f7ff ff69 	bl	80062e6 <bme280_set_regs>
}
 8006414:	b003      	add	sp, #12
 8006416:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006418 <set_filter_standby_settings>:
{
 8006418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800641a:	4606      	mov	r6, r0
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 800641c:	20f5      	movs	r0, #245	; 0xf5
{
 800641e:	460d      	mov	r5, r1
 8006420:	4617      	mov	r7, r2
	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8006422:	4613      	mov	r3, r2
 8006424:	f10d 0107 	add.w	r1, sp, #7
 8006428:	2201      	movs	r2, #1
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 800642a:	f88d 0006 	strb.w	r0, [sp, #6]
	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800642e:	f7ff ff43 	bl	80062b8 <bme280_get_regs>
	if (rslt == BME280_OK) {
 8006432:	b9f8      	cbnz	r0, 8006474 <set_filter_standby_settings+0x5c>
		if (desired_settings & BME280_FILTER_SEL)
 8006434:	0732      	lsls	r2, r6, #28
 8006436:	d50a      	bpl.n	800644e <set_filter_standby_settings+0x36>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8006438:	78ec      	ldrb	r4, [r5, #3]
 800643a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800643e:	00a4      	lsls	r4, r4, #2
 8006440:	f004 041c 	and.w	r4, r4, #28
 8006444:	f023 031c 	bic.w	r3, r3, #28
 8006448:	431c      	orrs	r4, r3
 800644a:	f88d 4007 	strb.w	r4, [sp, #7]
		if (desired_settings & BME280_STANDBY_SEL)
 800644e:	06f3      	lsls	r3, r6, #27
 8006450:	d508      	bpl.n	8006464 <set_filter_standby_settings+0x4c>
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8006452:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006456:	792a      	ldrb	r2, [r5, #4]
 8006458:	f003 031f 	and.w	r3, r3, #31
 800645c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8006460:	f88d 3007 	strb.w	r3, [sp, #7]
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8006464:	463b      	mov	r3, r7
 8006466:	2201      	movs	r2, #1
 8006468:	f10d 0107 	add.w	r1, sp, #7
 800646c:	f10d 0006 	add.w	r0, sp, #6
 8006470:	f7ff ff39 	bl	80062e6 <bme280_set_regs>
}
 8006474:	b003      	add	sp, #12
 8006476:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006478 <bme280_get_sensor_mode>:
{
 8006478:	b510      	push	{r4, lr}
 800647a:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
 800647c:	4608      	mov	r0, r1
 800647e:	f7ff ff0d 	bl	800629c <null_ptr_check>
	if (rslt == BME280_OK) {
 8006482:	b948      	cbnz	r0, 8006498 <bme280_get_sensor_mode+0x20>
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8006484:	460b      	mov	r3, r1
 8006486:	2201      	movs	r2, #1
 8006488:	4621      	mov	r1, r4
 800648a:	20f4      	movs	r0, #244	; 0xf4
 800648c:	f7ff ff14 	bl	80062b8 <bme280_get_regs>
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8006490:	7823      	ldrb	r3, [r4, #0]
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	7023      	strb	r3, [r4, #0]
}
 8006498:	bd10      	pop	{r4, pc}

0800649a <bme280_soft_reset>:
	uint8_t reg_addr = BME280_RESET_ADDR;
 800649a:	23e0      	movs	r3, #224	; 0xe0
{
 800649c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t reg_addr = BME280_RESET_ADDR;
 800649e:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t soft_rst_cmd = 0xB6;
 80064a2:	23b6      	movs	r3, #182	; 0xb6
{
 80064a4:	4605      	mov	r5, r0
	uint8_t soft_rst_cmd = 0xB6;
 80064a6:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
 80064aa:	f7ff fef7 	bl	800629c <null_ptr_check>
	if (rslt == BME280_OK) {
 80064ae:	4604      	mov	r4, r0
 80064b0:	b958      	cbnz	r0, 80064ca <bme280_soft_reset+0x30>
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80064b2:	462b      	mov	r3, r5
 80064b4:	2201      	movs	r2, #1
 80064b6:	f10d 0107 	add.w	r1, sp, #7
 80064ba:	f10d 0006 	add.w	r0, sp, #6
 80064be:	f7ff ff12 	bl	80062e6 <bme280_set_regs>
		dev->delay_ms(2);
 80064c2:	68eb      	ldr	r3, [r5, #12]
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80064c4:	4604      	mov	r4, r0
		dev->delay_ms(2);
 80064c6:	2002      	movs	r0, #2
 80064c8:	4798      	blx	r3
}
 80064ca:	4620      	mov	r0, r4
 80064cc:	b003      	add	sp, #12
 80064ce:	bd30      	pop	{r4, r5, pc}

080064d0 <bme280_init>:
	uint8_t chip_id = 0;
 80064d0:	2300      	movs	r3, #0
{
 80064d2:	b530      	push	{r4, r5, lr}
 80064d4:	b089      	sub	sp, #36	; 0x24
 80064d6:	4604      	mov	r4, r0
	uint8_t chip_id = 0;
 80064d8:	f88d 3003 	strb.w	r3, [sp, #3]
	rslt = null_ptr_check(dev);
 80064dc:	f7ff fede 	bl	800629c <null_ptr_check>
	if (rslt ==  BME280_OK) {
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d156      	bne.n	8006592 <bme280_init+0xc2>
 80064e4:	2505      	movs	r5, #5
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 80064e6:	4623      	mov	r3, r4
 80064e8:	2201      	movs	r2, #1
 80064ea:	20d0      	movs	r0, #208	; 0xd0
 80064ec:	f10d 0103 	add.w	r1, sp, #3
 80064f0:	f7ff fee2 	bl	80062b8 <bme280_get_regs>
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d14e      	bne.n	8006596 <bme280_init+0xc6>
 80064f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80064fc:	2b60      	cmp	r3, #96	; 0x60
 80064fe:	d14a      	bne.n	8006596 <bme280_init+0xc6>
				rslt = bme280_soft_reset(dev);
 8006500:	4620      	mov	r0, r4
				dev->chip_id = chip_id;
 8006502:	7023      	strb	r3, [r4, #0]
				rslt = bme280_soft_reset(dev);
 8006504:	f7ff ffc9 	bl	800649a <bme280_soft_reset>
				if (rslt == BME280_OK) {
 8006508:	2800      	cmp	r0, #0
 800650a:	d142      	bne.n	8006592 <bme280_init+0xc2>
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 800650c:	4601      	mov	r1, r0
 800650e:	2216      	movs	r2, #22
 8006510:	9001      	str	r0, [sp, #4]
 8006512:	a802      	add	r0, sp, #8
 8006514:	f003 ff8c 	bl	800a430 <memset>
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8006518:	4623      	mov	r3, r4
 800651a:	221a      	movs	r2, #26
 800651c:	2088      	movs	r0, #136	; 0x88
 800651e:	a901      	add	r1, sp, #4
 8006520:	f7ff feca 	bl	80062b8 <bme280_get_regs>
	if (rslt == BME280_OK) {
 8006524:	2800      	cmp	r0, #0
 8006526:	d134      	bne.n	8006592 <bme280_init+0xc2>
	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8006528:	9b01      	ldr	r3, [sp, #4]
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800652a:	2207      	movs	r2, #7
	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800652c:	6123      	str	r3, [r4, #16]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800652e:	9b02      	ldr	r3, [sp, #8]
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8006530:	20e1      	movs	r0, #225	; 0xe1
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8006532:	6163      	str	r3, [r4, #20]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8006534:	9b03      	ldr	r3, [sp, #12]
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8006536:	a901      	add	r1, sp, #4
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8006538:	61a3      	str	r3, [r4, #24]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 800653a:	9b04      	ldr	r3, [sp, #16]
 800653c:	61e3      	str	r3, [r4, #28]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800653e:	9b05      	ldr	r3, [sp, #20]
 8006540:	6223      	str	r3, [r4, #32]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8006542:	9b06      	ldr	r3, [sp, #24]
 8006544:	6263      	str	r3, [r4, #36]	; 0x24
	calib_data->dig_H1 = reg_data[25];
 8006546:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800654a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800654e:	4623      	mov	r3, r4
 8006550:	f7ff feb2 	bl	80062b8 <bme280_get_regs>
		if (rslt == BME280_OK) {
 8006554:	b9e8      	cbnz	r0, 8006592 <bme280_init+0xc2>
	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8006556:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800655a:	f89d 3004 	ldrb.w	r3, [sp, #4]
	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 800655e:	f99d 1007 	ldrsb.w	r1, [sp, #7]
	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8006562:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006566:	8563      	strh	r3, [r4, #42]	; 0x2a
	calib_data->dig_H3 = reg_data[2];
 8006568:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800656c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8006570:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8006574:	f003 020f 	and.w	r2, r3, #15
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8006578:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800657c:	85e2      	strh	r2, [r4, #46]	; 0x2e
	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 800657e:	f99d 2009 	ldrsb.w	r2, [sp, #9]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8006582:	091b      	lsrs	r3, r3, #4
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8006584:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8006588:	8623      	strh	r3, [r4, #48]	; 0x30
	calib_data->dig_H6 = (int8_t)reg_data[6];
 800658a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800658e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
 8006592:	b009      	add	sp, #36	; 0x24
 8006594:	bd30      	pop	{r4, r5, pc}
			dev->delay_ms(1);
 8006596:	2001      	movs	r0, #1
 8006598:	68e3      	ldr	r3, [r4, #12]
 800659a:	3d01      	subs	r5, #1
 800659c:	4798      	blx	r3
		while (try_count) {
 800659e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80065a2:	d1a0      	bne.n	80064e6 <bme280_init+0x16>
			rslt = BME280_E_DEV_NOT_FOUND;
 80065a4:	f06f 0001 	mvn.w	r0, #1
 80065a8:	e7f3      	b.n	8006592 <bme280_init+0xc2>

080065aa <put_device_to_sleep>:
{
 80065aa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80065ac:	2204      	movs	r2, #4
{
 80065ae:	4604      	mov	r4, r0
	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80065b0:	4603      	mov	r3, r0
 80065b2:	eb0d 0102 	add.w	r1, sp, r2
 80065b6:	20f2      	movs	r0, #242	; 0xf2
 80065b8:	f7ff fe7e 	bl	80062b8 <bme280_get_regs>
	if (rslt == BME280_OK) {
 80065bc:	bb58      	cbnz	r0, 8006616 <put_device_to_sleep+0x6c>
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80065be:	f89d 3004 	ldrb.w	r3, [sp, #4]
		rslt = bme280_soft_reset(dev);
 80065c2:	4620      	mov	r0, r4
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80065c4:	f003 0307 	and.w	r3, r3, #7
 80065c8:	f88d 300a 	strb.w	r3, [sp, #10]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80065cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80065d0:	f3c3 0282 	ubfx	r2, r3, #2, #3
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80065d4:	095b      	lsrs	r3, r3, #5
 80065d6:	f88d 3009 	strb.w	r3, [sp, #9]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80065da:	f89d 3007 	ldrb.w	r3, [sp, #7]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80065de:	f88d 2008 	strb.w	r2, [sp, #8]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80065e2:	f3c3 0282 	ubfx	r2, r3, #2, #3
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80065e6:	095b      	lsrs	r3, r3, #5
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80065e8:	f88d 200b 	strb.w	r2, [sp, #11]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80065ec:	f88d 300c 	strb.w	r3, [sp, #12]
		rslt = bme280_soft_reset(dev);
 80065f0:	f7ff ff53 	bl	800649a <bme280_soft_reset>
		if (rslt == BME280_OK)
 80065f4:	b978      	cbnz	r0, 8006616 <put_device_to_sleep+0x6c>
		rslt = set_osr_humidity_settings(settings, dev);
 80065f6:	4621      	mov	r1, r4
 80065f8:	f89d 000a 	ldrb.w	r0, [sp, #10]
 80065fc:	f7ff feb6 	bl	800636c <set_osr_humidity_settings.isra.0>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8006600:	4622      	mov	r2, r4
 8006602:	201f      	movs	r0, #31
 8006604:	a902      	add	r1, sp, #8
 8006606:	f7ff fed7 	bl	80063b8 <set_osr_press_temp_settings>
	if (rslt == BME280_OK)
 800660a:	b920      	cbnz	r0, 8006616 <put_device_to_sleep+0x6c>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800660c:	4622      	mov	r2, r4
 800660e:	201f      	movs	r0, #31
 8006610:	a902      	add	r1, sp, #8
 8006612:	f7ff ff01 	bl	8006418 <set_filter_standby_settings>
}
 8006616:	b004      	add	sp, #16
 8006618:	bd10      	pop	{r4, pc}

0800661a <bme280_set_sensor_settings>:
{
 800661a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800661c:	4606      	mov	r6, r0
	rslt = null_ptr_check(dev);
 800661e:	4608      	mov	r0, r1
{
 8006620:	460d      	mov	r5, r1
	rslt = null_ptr_check(dev);
 8006622:	f7ff fe3b 	bl	800629c <null_ptr_check>
	if (rslt == BME280_OK) {
 8006626:	4604      	mov	r4, r0
 8006628:	b968      	cbnz	r0, 8006646 <bme280_set_sensor_settings+0x2c>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 800662a:	f10d 0007 	add.w	r0, sp, #7
 800662e:	f7ff ff23 	bl	8006478 <bme280_get_sensor_mode>
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8006632:	4604      	mov	r4, r0
 8006634:	b938      	cbnz	r0, 8006646 <bme280_set_sensor_settings+0x2c>
 8006636:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800663a:	b93b      	cbnz	r3, 800664c <bme280_set_sensor_settings+0x32>
	if (sub_settings & desired_settings) {
 800663c:	0771      	lsls	r1, r6, #29
 800663e:	d10c      	bne.n	800665a <bme280_set_sensor_settings+0x40>
 8006640:	f016 0f18 	tst.w	r6, #24
 8006644:	d11d      	bne.n	8006682 <bme280_set_sensor_settings+0x68>
}
 8006646:	4620      	mov	r0, r4
 8006648:	b002      	add	sp, #8
 800664a:	bd70      	pop	{r4, r5, r6, pc}
			rslt = put_device_to_sleep(dev);
 800664c:	4628      	mov	r0, r5
 800664e:	f7ff ffac 	bl	80065aa <put_device_to_sleep>
		if (rslt == BME280_OK) {
 8006652:	2800      	cmp	r0, #0
 8006654:	d0f2      	beq.n	800663c <bme280_set_sensor_settings+0x22>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8006656:	4604      	mov	r4, r0
 8006658:	e7f5      	b.n	8006646 <bme280_set_sensor_settings+0x2c>
	if (desired_settings & BME280_OSR_HUM_SEL)
 800665a:	0772      	lsls	r2, r6, #29
 800665c:	d50f      	bpl.n	800667e <bme280_set_sensor_settings+0x64>
		rslt = set_osr_humidity_settings(settings, dev);
 800665e:	4629      	mov	r1, r5
 8006660:	f895 003a 	ldrb.w	r0, [r5, #58]	; 0x3a
 8006664:	f7ff fe82 	bl	800636c <set_osr_humidity_settings.isra.0>
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8006668:	07b3      	lsls	r3, r6, #30
 800666a:	d005      	beq.n	8006678 <bme280_set_sensor_settings+0x5e>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 800666c:	462a      	mov	r2, r5
 800666e:	4630      	mov	r0, r6
 8006670:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8006674:	f7ff fea0 	bl	80063b8 <set_osr_press_temp_settings>
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8006678:	2800      	cmp	r0, #0
 800667a:	d1ec      	bne.n	8006656 <bme280_set_sensor_settings+0x3c>
 800667c:	e7e0      	b.n	8006640 <bme280_set_sensor_settings+0x26>
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 800667e:	2001      	movs	r0, #1
 8006680:	e7f2      	b.n	8006668 <bme280_set_sensor_settings+0x4e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8006682:	462a      	mov	r2, r5
 8006684:	4630      	mov	r0, r6
 8006686:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800668a:	f7ff fec5 	bl	8006418 <set_filter_standby_settings>
 800668e:	e7e2      	b.n	8006656 <bme280_set_sensor_settings+0x3c>

08006690 <bme280_set_sensor_mode>:
{
 8006690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006692:	4605      	mov	r5, r0
	rslt = null_ptr_check(dev);
 8006694:	4608      	mov	r0, r1
{
 8006696:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 8006698:	f7ff fe00 	bl	800629c <null_ptr_check>
	if (rslt == BME280_OK) {
 800669c:	bb40      	cbnz	r0, 80066f0 <bme280_set_sensor_mode+0x60>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 800669e:	f10d 0005 	add.w	r0, sp, #5
 80066a2:	f7ff fee9 	bl	8006478 <bme280_get_sensor_mode>
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80066a6:	bb18      	cbnz	r0, 80066f0 <bme280_set_sensor_mode+0x60>
 80066a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80066ac:	b9db      	cbnz	r3, 80066e6 <bme280_set_sensor_mode+0x56>
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80066ae:	20f4      	movs	r0, #244	; 0xf4
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80066b0:	4623      	mov	r3, r4
 80066b2:	2201      	movs	r2, #1
 80066b4:	f10d 0107 	add.w	r1, sp, #7
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80066b8:	f88d 0006 	strb.w	r0, [sp, #6]
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80066bc:	f7ff fdfc 	bl	80062b8 <bme280_get_regs>
	if (rslt == BME280_OK) {
 80066c0:	b9b0      	cbnz	r0, 80066f0 <bme280_set_sensor_mode+0x60>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80066c2:	f89d 0007 	ldrb.w	r0, [sp, #7]
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80066c6:	2201      	movs	r2, #1
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80066c8:	f020 0303 	bic.w	r3, r0, #3
 80066cc:	f005 0003 	and.w	r0, r5, #3
 80066d0:	4318      	orrs	r0, r3
 80066d2:	f88d 0007 	strb.w	r0, [sp, #7]
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80066d6:	4623      	mov	r3, r4
 80066d8:	f10d 0107 	add.w	r1, sp, #7
 80066dc:	f10d 0006 	add.w	r0, sp, #6
 80066e0:	f7ff fe01 	bl	80062e6 <bme280_set_regs>
	return rslt;
 80066e4:	e004      	b.n	80066f0 <bme280_set_sensor_mode+0x60>
			rslt = put_device_to_sleep(dev);
 80066e6:	4620      	mov	r0, r4
 80066e8:	f7ff ff5f 	bl	80065aa <put_device_to_sleep>
		if (rslt == BME280_OK)
 80066ec:	2800      	cmp	r0, #0
 80066ee:	d0de      	beq.n	80066ae <bme280_set_sensor_mode+0x1e>
}
 80066f0:	b003      	add	sp, #12
 80066f2:	bd30      	pop	{r4, r5, pc}

080066f4 <bme280_parse_sensor_data>:
	data_lsb = (uint32_t)reg_data[1] << 4;
 80066f4:	7843      	ldrb	r3, [r0, #1]
	data_msb = (uint32_t)reg_data[0] << 12;
 80066f6:	7802      	ldrb	r2, [r0, #0]
	data_lsb = (uint32_t)reg_data[1] << 4;
 80066f8:	011b      	lsls	r3, r3, #4
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80066fa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 80066fe:	7882      	ldrb	r2, [r0, #2]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8006700:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8006704:	600b      	str	r3, [r1, #0]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8006706:	7903      	ldrb	r3, [r0, #4]
	data_msb = (uint32_t)reg_data[3] << 12;
 8006708:	78c2      	ldrb	r2, [r0, #3]
	data_lsb = (uint32_t)reg_data[4] << 4;
 800670a:	011b      	lsls	r3, r3, #4
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800670c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8006710:	7942      	ldrb	r2, [r0, #5]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8006712:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8006716:	604b      	str	r3, [r1, #4]
	uncomp_data->humidity = data_msb | data_lsb;
 8006718:	88c3      	ldrh	r3, [r0, #6]
 800671a:	ba5b      	rev16	r3, r3
 800671c:	b29b      	uxth	r3, r3
 800671e:	608b      	str	r3, [r1, #8]
}
 8006720:	4770      	bx	lr
	...

08006724 <bme280_compensate_data>:
{
 8006724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006728:	b085      	sub	sp, #20
 800672a:	4615      	mov	r5, r2
 800672c:	461c      	mov	r4, r3
	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 800672e:	460e      	mov	r6, r1
{
 8006730:	9003      	str	r0, [sp, #12]
	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8006732:	2900      	cmp	r1, #0
 8006734:	f000 81b7 	beq.w	8006aa6 <bme280_compensate_data+0x382>
 8006738:	2a00      	cmp	r2, #0
 800673a:	f000 81b4 	beq.w	8006aa6 <bme280_compensate_data+0x382>
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 81b1 	beq.w	8006aa6 <bme280_compensate_data+0x382>
		comp_data->temperature = 0;
 8006744:	2300      	movs	r3, #0
		comp_data->pressure = 0;
 8006746:	e9c2 3300 	strd	r3, r3, [r2]
		comp_data->humidity = 0;
 800674a:	6093      	str	r3, [r2, #8]
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 800674c:	0742      	lsls	r2, r0, #29
 800674e:	d02f      	beq.n	80067b0 <bme280_compensate_data+0x8c>
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8006750:	6848      	ldr	r0, [r1, #4]
	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 8006752:	8822      	ldrh	r2, [r4, #0]
 8006754:	0053      	lsls	r3, r2, #1
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8006756:	ebc2 1210 	rsb	r2, r2, r0, lsr #4
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 800675a:	4352      	muls	r2, r2
	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 800675c:	ebc3 01d0 	rsb	r1, r3, r0, lsr #3
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8006760:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8006764:	bf48      	it	mi
 8006766:	f602 72ff 	addwmi	r2, r2, #4095	; 0xfff
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 800676a:	434b      	muls	r3, r1
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 800676c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8006770:	1312      	asrs	r2, r2, #12
 8006772:	434a      	muls	r2, r1
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8006774:	2b00      	cmp	r3, #0
 8006776:	bfb8      	it	lt
 8006778:	f203 73ff 	addwlt	r3, r3, #2047	; 0x7ff
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 800677c:	2a00      	cmp	r2, #0
 800677e:	bfbc      	itt	lt
 8006780:	f502 527f 	addlt.w	r2, r2, #16320	; 0x3fc0
 8006784:	323f      	addlt	r2, #63	; 0x3f
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8006786:	12db      	asrs	r3, r3, #11
	calib_data->t_fine = var1 + var2;
 8006788:	eb03 33a2 	add.w	r3, r3, r2, asr #14
	if (temperature < temperature_min)
 800678c:	4ac7      	ldr	r2, [pc, #796]	; (8006aac <bme280_compensate_data+0x388>)
	calib_data->t_fine = var1 + var2;
 800678e:	6263      	str	r3, [r4, #36]	; 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8006790:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	if (temperature < temperature_min)
 8006794:	4293      	cmp	r3, r2
 8006796:	f2c0 817f 	blt.w	8006a98 <bme280_compensate_data+0x374>
	else if (temperature > temperature_max)
 800679a:	4ac5      	ldr	r2, [pc, #788]	; (8006ab0 <bme280_compensate_data+0x38c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	f280 817d 	bge.w	8006a9c <bme280_compensate_data+0x378>
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 80067a2:	f113 0280 	adds.w	r2, r3, #128	; 0x80
 80067a6:	bf48      	it	mi
 80067a8:	f203 127f 	addwmi	r2, r3, #383	; 0x17f
 80067ac:	1212      	asrs	r2, r2, #8
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80067ae:	606a      	str	r2, [r5, #4]
		if (sensor_comp & BME280_PRESS) {
 80067b0:	9b03      	ldr	r3, [sp, #12]
 80067b2:	07db      	lsls	r3, r3, #31
 80067b4:	f140 8118 	bpl.w	80069e8 <bme280_compensate_data+0x2c4>
	var1 = ((int64_t)calib_data->t_fine) - 128000;
 80067b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80067ba:	f5b2 3cfa 	subs.w	ip, r2, #128000	; 0x1f400
 80067be:	ea4f 73e2 	mov.w	r3, r2, asr #31
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 80067c2:	fbac 120c 	umull	r1, r2, ip, ip
	var1 = ((int64_t)calib_data->t_fine) - 128000;
 80067c6:	f143 37ff 	adc.w	r7, r3, #4294967295	; 0xffffffff
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 80067ca:	fb0c f307 	mul.w	r3, ip, r7
 80067ce:	e9cd 1200 	strd	r1, r2, [sp]
 80067d2:	9a01      	ldr	r2, [sp, #4]
 80067d4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 80067d8:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 80067dc:	9301      	str	r3, [sp, #4]
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 80067de:	fb02 f107 	mul.w	r1, r2, r7
 80067e2:	17d3      	asrs	r3, r2, #31
 80067e4:	fb0c 1103 	mla	r1, ip, r3, r1
 80067e8:	fba2 230c 	umull	r2, r3, r2, ip
 80067ec:	440b      	add	r3, r1
 80067ee:	0319      	lsls	r1, r3, #12
 80067f0:	9801      	ldr	r0, [sp, #4]
 80067f2:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 80067f6:	ea4f 3902 	mov.w	r9, r2, lsl #12
 80067fa:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80067fe:	fb02 fe00 	mul.w	lr, r2, r0
 8006802:	9800      	ldr	r0, [sp, #0]
 8006804:	17d3      	asrs	r3, r2, #31
 8006806:	fb00 ee03 	mla	lr, r0, r3, lr
 800680a:	fba2 2300 	umull	r2, r3, r2, r0
 800680e:	4473      	add	r3, lr
 8006810:	2a00      	cmp	r2, #0
 8006812:	f173 0000 	sbcs.w	r0, r3, #0
 8006816:	da02      	bge.n	800681e <bme280_compensate_data+0xfa>
 8006818:	32ff      	adds	r2, #255	; 0xff
 800681a:	f143 0300 	adc.w	r3, r3, #0
 800681e:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 8006822:	ea4e 6e03 	orr.w	lr, lr, r3, lsl #24
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8006826:	88e2      	ldrh	r2, [r4, #6]
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8006828:	ea4f 2823 	mov.w	r8, r3, asr #8
 800682c:	eb1e 0009 	adds.w	r0, lr, r9
 8006830:	eb48 0801 	adc.w	r8, r8, r1
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8006834:	3000      	adds	r0, #0
 8006836:	fba0 0102 	umull	r0, r1, r0, r2
 800683a:	f548 4800 	adc.w	r8, r8, #32768	; 0x8000
 800683e:	fb02 1108 	mla	r1, r2, r8, r1
 8006842:	2800      	cmp	r0, #0
 8006844:	f171 0300 	sbcs.w	r3, r1, #0
 8006848:	da03      	bge.n	8006852 <bme280_compensate_data+0x12e>
 800684a:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 800684e:	f141 0101 	adc.w	r1, r1, #1
 8006852:	ea4f 0861 	mov.w	r8, r1, asr #1
 8006856:	ea4f 79e1 	mov.w	r9, r1, asr #31
	if (var1 != 0) {
 800685a:	ea58 0309 	orrs.w	r3, r8, r9
 800685e:	f000 8120 	beq.w	8006aa2 <bme280_compensate_data+0x37e>
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8006862:	f04f 0e00 	mov.w	lr, #0
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8006866:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 800686a:	9901      	ldr	r1, [sp, #4]
 800686c:	9800      	ldr	r0, [sp, #0]
 800686e:	4351      	muls	r1, r2
 8006870:	17d3      	asrs	r3, r2, #31
 8006872:	fb00 1103 	mla	r1, r0, r3, r1
 8006876:	fba2 2300 	umull	r2, r3, r2, r0
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 800687a:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 800687e:	440b      	add	r3, r1
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8006880:	4347      	muls	r7, r0
 8006882:	17c1      	asrs	r1, r0, #31
 8006884:	fb0c 7701 	mla	r7, ip, r1, r7
 8006888:	fba0 010c 	umull	r0, r1, r0, ip
 800688c:	4439      	add	r1, r7
 800688e:	ea4f 4c40 	mov.w	ip, r0, lsl #17
 8006892:	044f      	lsls	r7, r1, #17
 8006894:	ea47 37d0 	orr.w	r7, r7, r0, lsr #15
 8006898:	eb1c 0102 	adds.w	r1, ip, r2
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 800689c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 80068a0:	9100      	str	r1, [sp, #0]
 80068a2:	eb47 0103 	adc.w	r1, r7, r3
		var4 = 1048576 - uncomp_data->pressure;
 80068a6:	6833      	ldr	r3, [r6, #0]
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 80068a8:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 80068ac:	9a00      	ldr	r2, [sp, #0]
		var4 = 1048576 - uncomp_data->pressure;
 80068ae:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 80068b2:	085f      	lsrs	r7, r3, #1
 80068b4:	07d8      	lsls	r0, r3, #31
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 80068b6:	eb1e 0302 	adds.w	r3, lr, r2
 80068ba:	eb4c 0101 	adc.w	r1, ip, r1
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 80068be:	1ac0      	subs	r0, r0, r3
 80068c0:	f640 4335 	movw	r3, #3125	; 0xc35
 80068c4:	eb67 0701 	sbc.w	r7, r7, r1
 80068c8:	fba0 0103 	umull	r0, r1, r0, r3
 80068cc:	4642      	mov	r2, r8
 80068ce:	fb03 1107 	mla	r1, r3, r7, r1
 80068d2:	464b      	mov	r3, r9
 80068d4:	f7fa f958 	bl	8000b88 <__aeabi_ldivmod>
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 80068d8:	2800      	cmp	r0, #0
 80068da:	f171 0300 	sbcs.w	r3, r1, #0
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 80068de:	4680      	mov	r8, r0
 80068e0:	4689      	mov	r9, r1
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 80068e2:	4602      	mov	r2, r0
 80068e4:	da05      	bge.n	80068f2 <bme280_compensate_data+0x1ce>
 80068e6:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80068ea:	2100      	movs	r1, #0
 80068ec:	1882      	adds	r2, r0, r2
 80068ee:	eb49 0101 	adc.w	r1, r9, r1
 80068f2:	0b50      	lsrs	r0, r2, #13
 80068f4:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 80068f8:	ea40 40c1 	orr.w	r0, r0, r1, lsl #19
 80068fc:	1349      	asrs	r1, r1, #13
 80068fe:	fb02 f701 	mul.w	r7, r2, r1
 8006902:	17d3      	asrs	r3, r2, #31
 8006904:	fb00 7703 	mla	r7, r0, r3, r7
 8006908:	fba2 2300 	umull	r2, r3, r2, r0
 800690c:	4351      	muls	r1, r2
 800690e:	443b      	add	r3, r7
 8006910:	fb00 1103 	mla	r1, r0, r3, r1
 8006914:	fba2 2300 	umull	r2, r3, r2, r0
 8006918:	440b      	add	r3, r1
 800691a:	2a00      	cmp	r2, #0
 800691c:	f173 0100 	sbcs.w	r1, r3, #0
 8006920:	da06      	bge.n	8006930 <bme280_compensate_data+0x20c>
 8006922:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8006926:	1852      	adds	r2, r2, r1
 8006928:	f04f 0100 	mov.w	r1, #0
 800692c:	eb41 0303 	adc.w	r3, r1, r3
 8006930:	0e51      	lsrs	r1, r2, #25
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8006932:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8006936:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 800693a:	fb02 f709 	mul.w	r7, r2, r9
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 800693e:	1658      	asrs	r0, r3, #25
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8006940:	17d3      	asrs	r3, r2, #31
 8006942:	fb08 7703 	mla	r7, r8, r3, r7
 8006946:	fba2 2308 	umull	r2, r3, r2, r8
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 800694a:	eb11 0108 	adds.w	r1, r1, r8
 800694e:	eb40 0009 	adc.w	r0, r0, r9
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8006952:	443b      	add	r3, r7
 8006954:	2a00      	cmp	r2, #0
 8006956:	f173 0700 	sbcs.w	r7, r3, #0
 800695a:	da05      	bge.n	8006968 <bme280_compensate_data+0x244>
 800695c:	4f55      	ldr	r7, [pc, #340]	; (8006ab4 <bme280_compensate_data+0x390>)
 800695e:	19d2      	adds	r2, r2, r7
 8006960:	f04f 0700 	mov.w	r7, #0
 8006964:	eb47 0303 	adc.w	r3, r7, r3
 8006968:	0cd7      	lsrs	r7, r2, #19
 800696a:	ea47 3743 	orr.w	r7, r7, r3, lsl #13
 800696e:	ea4f 4ce3 	mov.w	ip, r3, asr #19
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8006972:	eb11 0a07 	adds.w	sl, r1, r7
 8006976:	eb40 0b0c 	adc.w	fp, r0, ip
 800697a:	f1ba 0f00 	cmp.w	sl, #0
 800697e:	f17b 0300 	sbcs.w	r3, fp, #0
 8006982:	da03      	bge.n	800698c <bme280_compensate_data+0x268>
 8006984:	f11a 0aff 	adds.w	sl, sl, #255	; 0xff
 8006988:	f14b 0b00 	adc.w	fp, fp, #0
 800698c:	2210      	movs	r2, #16
 800698e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8006992:	ea43 600b 	orr.w	r0, r3, fp, lsl #24
 8006996:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 800699a:	ea4f 212b 	mov.w	r1, fp, asr #8
 800699e:	fbc3 0102 	smlal	r0, r1, r3, r2
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 80069a2:	0fcb      	lsrs	r3, r1, #31
 80069a4:	18c0      	adds	r0, r0, r3
 80069a6:	f141 0100 	adc.w	r1, r1, #0
 80069aa:	0842      	lsrs	r2, r0, #1
 80069ac:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80069b0:	1048      	asrs	r0, r1, #1
 80069b2:	2164      	movs	r1, #100	; 0x64
 80069b4:	fba2 2301 	umull	r2, r3, r2, r1
 80069b8:	fb01 3300 	mla	r3, r1, r0, r3
 80069bc:	4619      	mov	r1, r3
 80069be:	2a00      	cmp	r2, #0
 80069c0:	f171 0300 	sbcs.w	r3, r1, #0
 80069c4:	4610      	mov	r0, r2
 80069c6:	da03      	bge.n	80069d0 <bme280_compensate_data+0x2ac>
 80069c8:	f112 007f 	adds.w	r0, r2, #127	; 0x7f
 80069cc:	f141 0100 	adc.w	r1, r1, #0
 80069d0:	09c2      	lsrs	r2, r0, #7
 80069d2:	ea42 6341 	orr.w	r3, r2, r1, lsl #25
 80069d6:	4a38      	ldr	r2, [pc, #224]	; (8006ab8 <bme280_compensate_data+0x394>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	bf28      	it	cs
 80069dc:	4613      	movcs	r3, r2
 80069de:	4a37      	ldr	r2, [pc, #220]	; (8006abc <bme280_compensate_data+0x398>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	bf38      	it	cc
 80069e4:	4613      	movcc	r3, r2
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80069e6:	602b      	str	r3, [r5, #0]
		if (sensor_comp & BME280_HUM) {
 80069e8:	9b03      	ldr	r3, [sp, #12]
 80069ea:	f013 0004 	ands.w	r0, r3, #4
 80069ee:	d050      	beq.n	8006a92 <bme280_compensate_data+0x36e>
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 80069f0:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 80069f4:	68b1      	ldr	r1, [r6, #8]
	var1 = calib_data->t_fine - ((int32_t)76800);
 80069f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 80069f8:	0512      	lsls	r2, r2, #20
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 80069fa:	ebc2 3181 	rsb	r1, r2, r1, lsl #14
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 80069fe:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
	var1 = calib_data->t_fine - ((int32_t)76800);
 8006a02:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8006a06:	fb03 1212 	mls	r2, r3, r2, r1
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8006a0a:	7f21      	ldrb	r1, [r4, #28]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8006a0c:	f512 4280 	adds.w	r2, r2, #16384	; 0x4000
 8006a10:	bf44      	itt	mi
 8006a12:	f502 42ff 	addmi.w	r2, r2, #32640	; 0x7f80
 8006a16:	327f      	addmi	r2, #127	; 0x7f
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8006a18:	4359      	muls	r1, r3
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8006a1a:	f994 0022 	ldrsb.w	r0, [r4, #34]	; 0x22
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8006a1e:	bf48      	it	mi
 8006a20:	f201 71ff 	addwmi	r1, r1, #2047	; 0x7ff
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8006a24:	4343      	muls	r3, r0
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8006a26:	ea4f 21e1 	mov.w	r1, r1, asr #11
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8006a2a:	bf48      	it	mi
 8006a2c:	f203 33ff 	addwmi	r3, r3, #1023	; 0x3ff
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8006a30:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8006a34:	129b      	asrs	r3, r3, #10
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8006a36:	434b      	muls	r3, r1
 8006a38:	bf48      	it	mi
 8006a3a:	f203 33ff 	addwmi	r3, r3, #1023	; 0x3ff
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8006a3e:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8006a42:	129b      	asrs	r3, r3, #10
 8006a44:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8006a48:	434b      	muls	r3, r1
 8006a4a:	f513 5300 	adds.w	r3, r3, #8192	; 0x2000
 8006a4e:	bf44      	itt	mi
 8006a50:	f503 537f 	addmi.w	r3, r3, #16320	; 0x3fc0
 8006a54:	333f      	addmi	r3, #63	; 0x3f
 8006a56:	139b      	asrs	r3, r3, #14
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8006a58:	13d2      	asrs	r2, r2, #15
	var3 = var5 * var2;
 8006a5a:	435a      	muls	r2, r3
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	2a00      	cmp	r2, #0
 8006a60:	bfbc      	itt	lt
 8006a62:	f502 43ff 	addlt.w	r3, r2, #32640	; 0x7f80
 8006a66:	337f      	addlt	r3, #127	; 0x7f
 8006a68:	13db      	asrs	r3, r3, #15
 8006a6a:	435b      	muls	r3, r3
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8006a6c:	7e21      	ldrb	r1, [r4, #24]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8006a6e:	bf48      	it	mi
 8006a70:	337f      	addmi	r3, #127	; 0x7f
 8006a72:	11db      	asrs	r3, r3, #7
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8006a74:	434b      	muls	r3, r1
 8006a76:	bf48      	it	mi
 8006a78:	330f      	addmi	r3, #15
 8006a7a:	eba2 1223 	sub.w	r2, r2, r3, asr #4
	var5 = (var5 < 0 ? 0 : var5);
 8006a7e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8006a82:	f1b2 5fc8 	cmp.w	r2, #419430400	; 0x19000000
 8006a86:	bfa8      	it	ge
 8006a88:	f04f 52c8 	movge.w	r2, #419430400	; 0x19000000
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8006a8c:	2000      	movs	r0, #0
	humidity = (uint32_t)(var5 / 4096);
 8006a8e:	1312      	asrs	r2, r2, #12
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8006a90:	60aa      	str	r2, [r5, #8]
}
 8006a92:	b005      	add	sp, #20
 8006a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		temperature = temperature_min;
 8006a98:	4a09      	ldr	r2, [pc, #36]	; (8006ac0 <bme280_compensate_data+0x39c>)
 8006a9a:	e688      	b.n	80067ae <bme280_compensate_data+0x8a>
		temperature = temperature_max;
 8006a9c:	f242 1234 	movw	r2, #8500	; 0x2134
 8006aa0:	e685      	b.n	80067ae <bme280_compensate_data+0x8a>
		pressure = pressure_min;
 8006aa2:	4b06      	ldr	r3, [pc, #24]	; (8006abc <bme280_compensate_data+0x398>)
 8006aa4:	e79f      	b.n	80069e6 <bme280_compensate_data+0x2c2>
		rslt = BME280_E_NULL_PTR;
 8006aa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006aaa:	e7f2      	b.n	8006a92 <bme280_compensate_data+0x36e>
 8006aac:	fff05e81 	.word	0xfff05e81
 8006ab0:	00213480 	.word	0x00213480
 8006ab4:	0007ffff 	.word	0x0007ffff
 8006ab8:	00a7d8c0 	.word	0x00a7d8c0
 8006abc:	002dc6c0 	.word	0x002dc6c0
 8006ac0:	fffff060 	.word	0xfffff060

08006ac4 <bme280_get_sensor_data>:
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8006ac4:	2300      	movs	r3, #0
{
 8006ac6:	b570      	push	{r4, r5, r6, lr}
 8006ac8:	4606      	mov	r6, r0
 8006aca:	b086      	sub	sp, #24
	rslt = null_ptr_check(dev);
 8006acc:	4610      	mov	r0, r2
{
 8006ace:	460d      	mov	r5, r1
 8006ad0:	4614      	mov	r4, r2
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8006ad2:	e9cd 3301 	strd	r3, r3, [sp, #4]
	struct bme280_uncomp_data uncomp_data = {0};
 8006ad6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006ada:	9305      	str	r3, [sp, #20]
	rslt = null_ptr_check(dev);
 8006adc:	f7ff fbde 	bl	800629c <null_ptr_check>
	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8006ae0:	b9a0      	cbnz	r0, 8006b0c <bme280_get_sensor_data+0x48>
 8006ae2:	b199      	cbz	r1, 8006b0c <bme280_get_sensor_data+0x48>
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	20f7      	movs	r0, #247	; 0xf7
 8006ae8:	2208      	movs	r2, #8
 8006aea:	a901      	add	r1, sp, #4
 8006aec:	f7ff fbe4 	bl	80062b8 <bme280_get_regs>
		if (rslt == BME280_OK) {
 8006af0:	b950      	cbnz	r0, 8006b08 <bme280_get_sensor_data+0x44>
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8006af2:	a903      	add	r1, sp, #12
 8006af4:	a801      	add	r0, sp, #4
 8006af6:	f7ff fdfd 	bl	80066f4 <bme280_parse_sensor_data>
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8006afa:	462a      	mov	r2, r5
 8006afc:	4630      	mov	r0, r6
 8006afe:	f104 0310 	add.w	r3, r4, #16
 8006b02:	a903      	add	r1, sp, #12
 8006b04:	f7ff fe0e 	bl	8006724 <bme280_compensate_data>
}
 8006b08:	b006      	add	sp, #24
 8006b0a:	bd70      	pop	{r4, r5, r6, pc}
		rslt = BME280_E_NULL_PTR;
 8006b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b10:	e7fa      	b.n	8006b08 <bme280_get_sensor_data+0x44>
	...

08006b14 <user_i2c_read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8006b14:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8006b16:	260a      	movs	r6, #10
{
 8006b18:	b085      	sub	sp, #20
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8006b1a:	0047      	lsls	r7, r0, #1
{
 8006b1c:	4614      	mov	r4, r2
 8006b1e:	461d      	mov	r5, r3
 8006b20:	f88d 100f 	strb.w	r1, [sp, #15]
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8006b24:	2301      	movs	r3, #1
 8006b26:	4639      	mov	r1, r7
 8006b28:	480b      	ldr	r0, [pc, #44]	; (8006b58 <user_i2c_read+0x44>)
 8006b2a:	9600      	str	r6, [sp, #0]
 8006b2c:	f10d 020f 	add.w	r2, sp, #15
 8006b30:	f001 fb2c 	bl	800818c <HAL_I2C_Master_Transmit>
 8006b34:	b968      	cbnz	r0, 8006b52 <user_i2c_read+0x3e>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8006b36:	462b      	mov	r3, r5
 8006b38:	4622      	mov	r2, r4
 8006b3a:	4807      	ldr	r0, [pc, #28]	; (8006b58 <user_i2c_read+0x44>)
 8006b3c:	9600      	str	r6, [sp, #0]
 8006b3e:	f047 0101 	orr.w	r1, r7, #1
 8006b42:	f001 fbfb 	bl	800833c <HAL_I2C_Master_Receive>
 8006b46:	3800      	subs	r0, #0
 8006b48:	bf18      	it	ne
 8006b4a:	2001      	movne	r0, #1
 8006b4c:	4240      	negs	r0, r0
  return 0;
}
 8006b4e:	b005      	add	sp, #20
 8006b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8006b52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b56:	e7fa      	b.n	8006b4e <user_i2c_read+0x3a>
 8006b58:	200024a4 	.word	0x200024a4

08006b5c <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
  HAL_Delay(period);
 8006b5c:	f000 bcae 	b.w	80074bc <HAL_Delay>

08006b60 <user_i2c_write>:
}

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8006b60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  int8_t *buf;
  buf = malloc(len +1);
 8006b64:	f103 0901 	add.w	r9, r3, #1
{
 8006b68:	4606      	mov	r6, r0
  buf = malloc(len +1);
 8006b6a:	4648      	mov	r0, r9
{
 8006b6c:	461c      	mov	r4, r3
 8006b6e:	4688      	mov	r8, r1
 8006b70:	4617      	mov	r7, r2
  buf = malloc(len +1);
 8006b72:	f003 fc31 	bl	800a3d8 <malloc>
  buf[0] = reg_addr;
  memcpy(buf +1, data, len);
 8006b76:	4622      	mov	r2, r4
  buf = malloc(len +1);
 8006b78:	4605      	mov	r5, r0
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8006b7a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  memcpy(buf +1, data, len);
 8006b7e:	4639      	mov	r1, r7
  buf[0] = reg_addr;
 8006b80:	f800 8b01 	strb.w	r8, [r0], #1
  memcpy(buf +1, data, len);
 8006b84:	f003 fc46 	bl	800a414 <memcpy>
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8006b88:	0071      	lsls	r1, r6, #1
 8006b8a:	462a      	mov	r2, r5
 8006b8c:	4808      	ldr	r0, [pc, #32]	; (8006bb0 <user_i2c_write+0x50>)
 8006b8e:	9400      	str	r4, [sp, #0]
 8006b90:	fa1f f389 	uxth.w	r3, r9
 8006b94:	f001 fafa 	bl	800818c <HAL_I2C_Master_Transmit>
 8006b98:	4606      	mov	r6, r0
 8006b9a:	b930      	cbnz	r0, 8006baa <user_i2c_write+0x4a>
  free(buf);
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	f003 fc23 	bl	800a3e8 <free>
  return 0;
 8006ba2:	4630      	mov	r0, r6
}
 8006ba4:	b003      	add	sp, #12
 8006ba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8006baa:	4620      	mov	r0, r4
 8006bac:	e7fa      	b.n	8006ba4 <user_i2c_write+0x44>
 8006bae:	bf00      	nop
 8006bb0:	200024a4 	.word	0x200024a4

08006bb4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM4) //check if the interrupt comes from TIM1
 8006bb4:	6802      	ldr	r2, [r0, #0]
 8006bb6:	4b04      	ldr	r3, [pc, #16]	; (8006bc8 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8006bb8:	429a      	cmp	r2, r3
	{
		//HAL_ResumeTick();
		//HAL_GPIO_TogglePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin);
		tim4++;
 8006bba:	bf01      	itttt	eq
 8006bbc:	4a03      	ldreq	r2, [pc, #12]	; (8006bcc <HAL_TIM_PeriodElapsedCallback+0x18>)
 8006bbe:	7813      	ldrbeq	r3, [r2, #0]
 8006bc0:	3301      	addeq	r3, #1
 8006bc2:	7013      	strbeq	r3, [r2, #0]
//			Main_cpp(&sensors_data);
			// wake up
		//HAL_Delay(2000);

	}
}
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	40000800 	.word	0x40000800
 8006bcc:	2000243d 	.word	0x2000243d

08006bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006bd0:	b530      	push	{r4, r5, lr}
 8006bd2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006bd4:	2218      	movs	r2, #24
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	a80b      	add	r0, sp, #44	; 0x2c
 8006bda:	f003 fc29 	bl	800a430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006bde:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006be0:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006be2:	2100      	movs	r1, #0
 8006be4:	eb0d 0002 	add.w	r0, sp, r2
 8006be8:	f003 fc22 	bl	800a430 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006bec:	2100      	movs	r1, #0
 8006bee:	462a      	mov	r2, r5
 8006bf0:	a801      	add	r0, sp, #4
 8006bf2:	f003 fc1d 	bl	800a430 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006bf6:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006bf8:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006bfa:	e9cd 350e 	strd	r3, r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8006bfe:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006c00:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8006c02:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006c06:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006c08:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006c0a:	f002 fb9d 	bl	8009348 <HAL_RCC_OscConfig>
 8006c0e:	4601      	mov	r1, r0
 8006c10:	b108      	cbz	r0, 8006c16 <SystemClock_Config+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8006c12:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006c14:	e7fe      	b.n	8006c14 <SystemClock_Config+0x44>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006c16:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006c18:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006c20:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006c22:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006c26:	a805      	add	r0, sp, #20
 8006c28:	f002 fd64 	bl	80096f4 <HAL_RCC_ClockConfig>
 8006c2c:	b108      	cbz	r0, 8006c32 <SystemClock_Config+0x62>
 8006c2e:	b672      	cpsid	i
  while (1)
 8006c30:	e7fe      	b.n	8006c30 <SystemClock_Config+0x60>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8006c32:	9003      	str	r0, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006c34:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006c36:	9401      	str	r4, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006c38:	f002 fe18 	bl	800986c <HAL_RCCEx_PeriphCLKConfig>
 8006c3c:	b108      	cbz	r0, 8006c42 <SystemClock_Config+0x72>
 8006c3e:	b672      	cpsid	i
  while (1)
 8006c40:	e7fe      	b.n	8006c40 <SystemClock_Config+0x70>
}
 8006c42:	b015      	add	sp, #84	; 0x54
 8006c44:	bd30      	pop	{r4, r5, pc}
	...

08006c48 <HAL_GPIO_EXTI_Callback>:
  if(GPIO_Pin== GPIO_PIN_2) {
 8006c48:	2804      	cmp	r0, #4
 8006c4a:	d105      	bne.n	8006c58 <HAL_GPIO_EXTI_Callback+0x10>
    exti2++;
 8006c4c:	4a06      	ldr	r2, [pc, #24]	; (8006c68 <HAL_GPIO_EXTI_Callback+0x20>)
    exti5_10++;
 8006c4e:	8813      	ldrh	r3, [r2, #0]
 8006c50:	3301      	adds	r3, #1
 8006c52:	8013      	strh	r3, [r2, #0]
    Contact_group_control_module();
 8006c54:	f7fc b9d0 	b.w	8002ff8 <Contact_group_control_module>
  } else if(GPIO_Pin== GPIO_PIN_10){
 8006c58:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006c5c:	d101      	bne.n	8006c62 <HAL_GPIO_EXTI_Callback+0x1a>
    exti5_10++;
 8006c5e:	4a03      	ldr	r2, [pc, #12]	; (8006c6c <HAL_GPIO_EXTI_Callback+0x24>)
 8006c60:	e7f5      	b.n	8006c4e <HAL_GPIO_EXTI_Callback+0x6>
    __NOP();
 8006c62:	bf00      	nop
}
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	2000253a 	.word	0x2000253a
 8006c6c:	200025fc 	.word	0x200025fc

08006c70 <SensorsGetValues>:
void SensorsGetValues() {
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8006c72:	4c21      	ldr	r4, [pc, #132]	; (8006cf8 <SensorsGetValues+0x88>)
 8006c74:	2007      	movs	r0, #7
 8006c76:	4621      	mov	r1, r4
 8006c78:	4a20      	ldr	r2, [pc, #128]	; (8006cfc <SensorsGetValues+0x8c>)
 8006c7a:	f7ff ff23 	bl	8006ac4 <bme280_get_sensor_data>
 8006c7e:	4b20      	ldr	r3, [pc, #128]	; (8006d00 <SensorsGetValues+0x90>)
 8006c80:	7018      	strb	r0, [r3, #0]
	if(rslt == BME280_OK)
 8006c82:	bb80      	cbnz	r0, 8006ce6 <SensorsGetValues+0x76>
		sensors_data.temperature = comp_data.temperature / 100.0;      /* C  */
 8006c84:	6860      	ldr	r0, [r4, #4]
 8006c86:	f7f9 fbb5 	bl	80003f4 <__aeabi_i2d>
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	4b1d      	ldr	r3, [pc, #116]	; (8006d04 <SensorsGetValues+0x94>)
 8006c8e:	f7f9 fd45 	bl	800071c <__aeabi_ddiv>
 8006c92:	f7f9 feb3 	bl	80009fc <__aeabi_d2f>
 8006c96:	4d1c      	ldr	r5, [pc, #112]	; (8006d08 <SensorsGetValues+0x98>)
 8006c98:	6068      	str	r0, [r5, #4]
		sensors_data.humidity = (comp_data.humidity / 1024.0) + offset.humidity_offset;           /* %   */
 8006c9a:	68a0      	ldr	r0, [r4, #8]
 8006c9c:	f7f9 fb9a 	bl	80003d4 <__aeabi_ui2d>
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	4b1a      	ldr	r3, [pc, #104]	; (8006d0c <SensorsGetValues+0x9c>)
 8006ca4:	f7f9 fc10 	bl	80004c8 <__aeabi_dmul>
 8006ca8:	4b19      	ldr	r3, [pc, #100]	; (8006d10 <SensorsGetValues+0xa0>)
 8006caa:	4606      	mov	r6, r0
 8006cac:	6818      	ldr	r0, [r3, #0]
 8006cae:	460f      	mov	r7, r1
 8006cb0:	f7f9 fbb2 	bl	8000418 <__aeabi_f2d>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	4630      	mov	r0, r6
 8006cba:	4639      	mov	r1, r7
 8006cbc:	f7f9 fa4e 	bl	800015c <__adddf3>
 8006cc0:	f7f9 fe9c 	bl	80009fc <__aeabi_d2f>
 8006cc4:	60a8      	str	r0, [r5, #8]
		sensors_data.pressure = comp_data.pressure / 10000.0 / 1.333;  /* hPa or mmhg */
 8006cc6:	6820      	ldr	r0, [r4, #0]
 8006cc8:	f7f9 fb84 	bl	80003d4 <__aeabi_ui2d>
 8006ccc:	a306      	add	r3, pc, #24	; (adr r3, 8006ce8 <SensorsGetValues+0x78>)
 8006cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd2:	f7f9 fd23 	bl	800071c <__aeabi_ddiv>
 8006cd6:	a306      	add	r3, pc, #24	; (adr r3, 8006cf0 <SensorsGetValues+0x80>)
 8006cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cdc:	f7f9 fd1e 	bl	800071c <__aeabi_ddiv>
 8006ce0:	f7f9 fe8c 	bl	80009fc <__aeabi_d2f>
 8006ce4:	60e8      	str	r0, [r5, #12]
}
 8006ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ce8:	00000000 	.word	0x00000000
 8006cec:	40c38800 	.word	0x40c38800
 8006cf0:	ced91687 	.word	0xced91687
 8006cf4:	3ff553f7 	.word	0x3ff553f7
 8006cf8:	200024f8 	.word	0x200024f8
 8006cfc:	2000001c 	.word	0x2000001c
 8006d00:	200024a1 	.word	0x200024a1
 8006d04:	40590000 	.word	0x40590000
 8006d08:	200025e0 	.word	0x200025e0
 8006d0c:	3f500000 	.word	0x3f500000
 8006d10:	2000005c 	.word	0x2000005c
 8006d14:	00000000 	.word	0x00000000

08006d18 <main>:
{
 8006d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  Read_control_module_info_from_flash(control_module_id_and_channel);
 8006d1c:	4886      	ldr	r0, [pc, #536]	; (8006f38 <main+0x220>)
{
 8006d1e:	b08f      	sub	sp, #60	; 0x3c
  Read_control_module_info_from_flash(control_module_id_and_channel);
 8006d20:	f7fa f960 	bl	8000fe4 <Read_control_module_info_from_flash>
  Get_control_module_info_from_main(control_module_id_and_channel);
 8006d24:	4884      	ldr	r0, [pc, #528]	; (8006f38 <main+0x220>)
 8006d26:	f7fc f8cb 	bl	8002ec0 <Get_control_module_info_from_main>
  HAL_Init();
 8006d2a:	f000 fba3 	bl	8007474 <HAL_Init>
  SystemClock_Config();
 8006d2e:	f7ff ff4f 	bl	8006bd0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d32:	2210      	movs	r2, #16
 8006d34:	2100      	movs	r1, #0
 8006d36:	a80a      	add	r0, sp, #40	; 0x28
 8006d38:	f003 fb7a 	bl	800a430 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d3c:	4b7f      	ldr	r3, [pc, #508]	; (8006f3c <main+0x224>)
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin, GPIO_PIN_RESET);
 8006d3e:	f641 4110 	movw	r1, #7184	; 0x1c10
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d42:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin, GPIO_PIN_RESET);
 8006d44:	487e      	ldr	r0, [pc, #504]	; (8006f40 <main+0x228>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d46:	f042 0204 	orr.w	r2, r2, #4
 8006d4a:	619a      	str	r2, [r3, #24]
 8006d4c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d4e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d50:	f002 0204 	and.w	r2, r2, #4
 8006d54:	9206      	str	r2, [sp, #24]
 8006d56:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d58:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d5a:	2602      	movs	r6, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d5c:	f042 0208 	orr.w	r2, r2, #8
 8006d60:	619a      	str	r2, [r3, #24]
 8006d62:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin, GPIO_PIN_RESET);
 8006d64:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d66:	f003 0308 	and.w	r3, r3, #8
 8006d6a:	9307      	str	r3, [sp, #28]
 8006d6c:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED3_PIN_Pin|LED2_PIN_Pin, GPIO_PIN_RESET);
 8006d6e:	f001 f849 	bl	8007e04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LORA_RESET_Pin|CO2_WAKE_UP_Pin, GPIO_PIN_RESET);
 8006d72:	2200      	movs	r2, #0
 8006d74:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8006d78:	4872      	ldr	r0, [pc, #456]	; (8006f44 <main+0x22c>)
 8006d7a:	f001 f843 	bl	8007e04 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d7e:	2501      	movs	r5, #1
 8006d80:	f641 4310 	movw	r3, #7184	; 0x1c10
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006d84:	f240 4704 	movw	r7, #1028	; 0x404
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d88:	486d      	ldr	r0, [pc, #436]	; (8006f40 <main+0x228>)
 8006d8a:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d8c:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d90:	e9cd 460c 	strd	r4, r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d94:	f000 ff54 	bl	8007c40 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006d98:	4b6b      	ldr	r3, [pc, #428]	; (8006f48 <main+0x230>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d9a:	486a      	ldr	r0, [pc, #424]	; (8006f44 <main+0x22c>)
 8006d9c:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006d9e:	e9cd 730a 	strd	r7, r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006da2:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006da4:	f000 ff4c 	bl	8007c40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LORA_RESET_Pin|CO2_WAKE_UP_Pin;
 8006da8:	f44f 6301 	mov.w	r3, #2064	; 0x810
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dac:	4865      	ldr	r0, [pc, #404]	; (8006f44 <main+0x22c>)
 8006dae:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006db0:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006db4:	e9cd 460c 	strd	r4, r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006db8:	f000 ff42 	bl	8007c40 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8006dbc:	4622      	mov	r2, r4
 8006dbe:	4621      	mov	r1, r4
 8006dc0:	2008      	movs	r0, #8
 8006dc2:	f000 fd6d 	bl	80078a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8006dc6:	2008      	movs	r0, #8
 8006dc8:	f000 fd9c 	bl	8007904 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006dcc:	4622      	mov	r2, r4
 8006dce:	4621      	mov	r1, r4
 8006dd0:	2028      	movs	r0, #40	; 0x28
 8006dd2:	f000 fd65 	bl	80078a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006dd6:	2028      	movs	r0, #40	; 0x28
 8006dd8:	f000 fd94 	bl	8007904 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8006ddc:	485b      	ldr	r0, [pc, #364]	; (8006f4c <main+0x234>)
  hi2c1.Init.ClockSpeed = 100000;
 8006dde:	f8df c190 	ldr.w	ip, [pc, #400]	; 8006f70 <main+0x258>
 8006de2:	4b5b      	ldr	r3, [pc, #364]	; (8006f50 <main+0x238>)
  hi2c1.Init.OwnAddress1 = 0;
 8006de4:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8006de8:	e9c0 c300 	strd	ip, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006dec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006df0:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006df4:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006df8:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006dfa:	f001 f91f 	bl	800803c <HAL_I2C_Init>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	b108      	cbz	r0, 8006e06 <main+0xee>
 8006e02:	b672      	cpsid	i
  while (1)
 8006e04:	e7fe      	b.n	8006e04 <main+0xec>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006e06:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Instance = SPI1;
 8006e0a:	4852      	ldr	r0, [pc, #328]	; (8006f54 <main+0x23c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006e0c:	4c52      	ldr	r4, [pc, #328]	; (8006f58 <main+0x240>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006e0e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006e12:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006e16:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e1e:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006e22:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e26:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006e28:	230a      	movs	r3, #10
 8006e2a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006e2c:	f002 fe6e 	bl	8009b0c <HAL_SPI_Init>
 8006e30:	4606      	mov	r6, r0
 8006e32:	b108      	cbz	r0, 8006e38 <main+0x120>
 8006e34:	b672      	cpsid	i
  while (1)
 8006e36:	e7fe      	b.n	8006e36 <main+0x11e>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006e38:	4601      	mov	r1, r0
 8006e3a:	2210      	movs	r2, #16
 8006e3c:	a80a      	add	r0, sp, #40	; 0x28
 8006e3e:	f003 faf7 	bl	800a430 <memset>
  htim2.Init.Prescaler = 72;
 8006e42:	2348      	movs	r3, #72	; 0x48
 8006e44:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 8006e48:	4c44      	ldr	r4, [pc, #272]	; (8006f5c <main+0x244>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006e4a:	e9cd 6608 	strd	r6, r6, [sp, #32]
  htim2.Init.Prescaler = 72;
 8006e4e:	e9c4 1300 	strd	r1, r3, [r4]
  htim2.Init.Period = 65535;
 8006e52:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006e56:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006e58:	e9c4 3603 	strd	r3, r6, [r4, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006e5c:	60a6      	str	r6, [r4, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006e5e:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006e60:	f003 f93c 	bl	800a0dc <HAL_TIM_Base_Init>
 8006e64:	b108      	cbz	r0, 8006e6a <main+0x152>
 8006e66:	b672      	cpsid	i
  while (1)
 8006e68:	e7fe      	b.n	8006e68 <main+0x150>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006e6a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006e6e:	4620      	mov	r0, r4
 8006e70:	a90a      	add	r1, sp, #40	; 0x28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006e72:	960a      	str	r6, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006e74:	f003 f995 	bl	800a1a2 <HAL_TIM_ConfigClockSource>
 8006e78:	b108      	cbz	r0, 8006e7e <main+0x166>
 8006e7a:	b672      	cpsid	i
  while (1)
 8006e7c:	e7fe      	b.n	8006e7c <main+0x164>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006e7e:	e9cd 0008 	strd	r0, r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006e82:	a908      	add	r1, sp, #32
 8006e84:	4620      	mov	r0, r4
 8006e86:	f003 fa21 	bl	800a2cc <HAL_TIMEx_MasterConfigSynchronization>
 8006e8a:	b108      	cbz	r0, 8006e90 <main+0x178>
 8006e8c:	b672      	cpsid	i
  while (1)
 8006e8e:	e7fe      	b.n	8006e8e <main+0x176>
  hadc1.Instance = ADC1;
 8006e90:	4c33      	ldr	r4, [pc, #204]	; (8006f60 <main+0x248>)
 8006e92:	4b34      	ldr	r3, [pc, #208]	; (8006f64 <main+0x24c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8006e94:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  hadc1.Instance = ADC1;
 8006e98:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006e9a:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8006e9e:	900c      	str	r0, [sp, #48]	; 0x30
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006ea0:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006ea2:	7320      	strb	r0, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006ea4:	7520      	strb	r0, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006ea6:	6060      	str	r0, [r4, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006ea8:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006eaa:	61e3      	str	r3, [r4, #28]
  hadc1.Init.NbrOfConversion = 1;
 8006eac:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006eae:	f000 fbff 	bl	80076b0 <HAL_ADC_Init>
 8006eb2:	b108      	cbz	r0, 8006eb8 <main+0x1a0>
 8006eb4:	b672      	cpsid	i
  while (1)
 8006eb6:	e7fe      	b.n	8006eb6 <main+0x19e>
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8006eb8:	2305      	movs	r3, #5
  sConfig.Channel = ADC_CHANNEL_8;
 8006eba:	2708      	movs	r7, #8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	a90a      	add	r1, sp, #40	; 0x28
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006ec0:	e9cd 750a 	strd	r7, r5, [sp, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8006ec4:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006ec6:	f000 fb1b 	bl	8007500 <HAL_ADC_ConfigChannel>
 8006eca:	4605      	mov	r5, r0
 8006ecc:	b108      	cbz	r0, 8006ed2 <main+0x1ba>
 8006ece:	b672      	cpsid	i
  while (1)
 8006ed0:	e7fe      	b.n	8006ed0 <main+0x1b8>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006ed2:	2210      	movs	r2, #16
 8006ed4:	4601      	mov	r1, r0
 8006ed6:	a80a      	add	r0, sp, #40	; 0x28
 8006ed8:	f003 faaa 	bl	800a430 <memset>
  htim4.Init.Prescaler = 7999;
 8006edc:	f641 733f 	movw	r3, #7999	; 0x1f3f
  htim4.Instance = TIM4;
 8006ee0:	4c21      	ldr	r4, [pc, #132]	; (8006f68 <main+0x250>)
  htim4.Init.Prescaler = 7999;
 8006ee2:	4a22      	ldr	r2, [pc, #136]	; (8006f6c <main+0x254>)
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006ee4:	4620      	mov	r0, r4
  htim4.Init.Prescaler = 7999;
 8006ee6:	e9c4 2300 	strd	r2, r3, [r4]
  htim4.Init.Period = 55999;
 8006eea:	f64d 23bf 	movw	r3, #55999	; 0xdabf
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006eee:	e9cd 5508 	strd	r5, r5, [sp, #32]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ef2:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ef6:	60a5      	str	r5, [r4, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ef8:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006efa:	f003 f8ef 	bl	800a0dc <HAL_TIM_Base_Init>
 8006efe:	b108      	cbz	r0, 8006f04 <main+0x1ec>
 8006f00:	b672      	cpsid	i
  while (1)
 8006f02:	e7fe      	b.n	8006f02 <main+0x1ea>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8006f04:	4620      	mov	r0, r4
 8006f06:	a90a      	add	r1, sp, #40	; 0x28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006f08:	960a      	str	r6, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8006f0a:	f003 f94a 	bl	800a1a2 <HAL_TIM_ConfigClockSource>
 8006f0e:	b108      	cbz	r0, 8006f14 <main+0x1fc>
 8006f10:	b672      	cpsid	i
  while (1)
 8006f12:	e7fe      	b.n	8006f12 <main+0x1fa>
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8006f14:	4639      	mov	r1, r7
 8006f16:	4620      	mov	r0, r4
 8006f18:	f003 f90c 	bl	800a134 <HAL_TIM_OnePulse_Init>
 8006f1c:	b108      	cbz	r0, 8006f22 <main+0x20a>
 8006f1e:	b672      	cpsid	i
  while (1)
 8006f20:	e7fe      	b.n	8006f20 <main+0x208>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006f22:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006f24:	4810      	ldr	r0, [pc, #64]	; (8006f68 <main+0x250>)
 8006f26:	a908      	add	r1, sp, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006f28:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006f2c:	f003 f9ce 	bl	800a2cc <HAL_TIMEx_MasterConfigSynchronization>
 8006f30:	b300      	cbz	r0, 8006f74 <main+0x25c>
 8006f32:	b672      	cpsid	i
  while (1)
 8006f34:	e7fe      	b.n	8006f34 <main+0x21c>
 8006f36:	bf00      	nop
 8006f38:	20002434 	.word	0x20002434
 8006f3c:	40021000 	.word	0x40021000
 8006f40:	40010800 	.word	0x40010800
 8006f44:	40010c00 	.word	0x40010c00
 8006f48:	10110000 	.word	0x10110000
 8006f4c:	200024a4 	.word	0x200024a4
 8006f50:	000186a0 	.word	0x000186a0
 8006f54:	2000253c 	.word	0x2000253c
 8006f58:	40013000 	.word	0x40013000
 8006f5c:	20002594 	.word	0x20002594
 8006f60:	20002508 	.word	0x20002508
 8006f64:	40012400 	.word	0x40012400
 8006f68:	20002458 	.word	0x20002458
 8006f6c:	40000800 	.word	0x40000800
 8006f70:	40005400 	.word	0x40005400
  Init_lora_module(&hspi1);
 8006f74:	4856      	ldr	r0, [pc, #344]	; (80070d0 <main+0x3b8>)
 8006f76:	f7fb ffbb 	bl	8002ef0 <Init_lora_module>
  LoRa_begin_result = Begin_lora_module(BAND, true, 14, 8, 250E3, 0x4A);
 8006f7a:	a153      	add	r1, pc, #332	; (adr r1, 80070c8 <main+0x3b0>)
 8006f7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f80:	234a      	movs	r3, #74	; 0x4a
 8006f82:	9304      	str	r3, [sp, #16]
 8006f84:	2300      	movs	r3, #0
 8006f86:	4a53      	ldr	r2, [pc, #332]	; (80070d4 <main+0x3bc>)
 8006f88:	4c53      	ldr	r4, [pc, #332]	; (80070d8 <main+0x3c0>)
 8006f8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f8e:	2308      	movs	r3, #8
 8006f90:	2201      	movs	r2, #1
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	230e      	movs	r3, #14
 8006f96:	f7fb ffb1 	bl	8002efc <Begin_lora_module>
 8006f9a:	7020      	strb	r0, [r4, #0]
  if(LoRa_begin_result == 0) {
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	d052      	beq.n	8007046 <main+0x32e>
  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_RESET);
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006fa6:	484d      	ldr	r0, [pc, #308]	; (80070dc <main+0x3c4>)
 8006fa8:	f000 ff2c 	bl	8007e04 <HAL_GPIO_WritePin>
  rslt = bme280_init(&dev);
 8006fac:	4c4c      	ldr	r4, [pc, #304]	; (80070e0 <main+0x3c8>)
  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_RESET);
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006fb4:	4849      	ldr	r0, [pc, #292]	; (80070dc <main+0x3c4>)
 8006fb6:	f000 ff25 	bl	8007e04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_RESET);
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006fc0:	4846      	ldr	r0, [pc, #280]	; (80070dc <main+0x3c4>)
 8006fc2:	f000 ff1f 	bl	8007e04 <HAL_GPIO_WritePin>
  rslt = bme280_init(&dev);
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f7ff fa82 	bl	80064d0 <bme280_init>
 8006fcc:	4d45      	ldr	r5, [pc, #276]	; (80070e4 <main+0x3cc>)
  dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8006fce:	4b46      	ldr	r3, [pc, #280]	; (80070e8 <main+0x3d0>)
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8006fd0:	4621      	mov	r1, r4
  dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8006fd2:	63a3      	str	r3, [r4, #56]	; 0x38
  rslt = bme280_init(&dev);
 8006fd4:	7028      	strb	r0, [r5, #0]
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8006fd6:	200f      	movs	r0, #15
 8006fd8:	f7ff fb1f 	bl	800661a <bme280_set_sensor_settings>
  rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8006fdc:	4621      	mov	r1, r4
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8006fde:	7028      	strb	r0, [r5, #0]
  rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8006fe0:	2003      	movs	r0, #3
 8006fe2:	f7ff fb55 	bl	8006690 <bme280_set_sensor_mode>
 8006fe6:	7028      	strb	r0, [r5, #0]
  HAL_ADCEx_Calibration_Start(&hadc1);
 8006fe8:	4840      	ldr	r0, [pc, #256]	; (80070ec <main+0x3d4>)
 8006fea:	f000 fbdf 	bl	80077ac <HAL_ADCEx_Calibration_Start>
  HAL_Delay(1000);
 8006fee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ff2:	f000 fa63 	bl	80074bc <HAL_Delay>
  SensorsGetValues();
 8006ff6:	f7ff fe3b 	bl	8006c70 <SensorsGetValues>
  Main_cpp(&sensors_data);
 8006ffa:	483d      	ldr	r0, [pc, #244]	; (80070f0 <main+0x3d8>)
 8006ffc:	f7fb ffc2 	bl	8002f84 <Main_cpp>
	if (end_contact) {
 8007000:	4d3c      	ldr	r5, [pc, #240]	; (80070f4 <main+0x3dc>)
		HAL_TIM_Base_Start_IT(&htim4);
 8007002:	4c3d      	ldr	r4, [pc, #244]	; (80070f8 <main+0x3e0>)
	if (end_contact) {
 8007004:	782b      	ldrb	r3, [r5, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0fc      	beq.n	8007004 <main+0x2ec>
		end_contact = false;
 800700a:	2300      	movs	r3, #0
		HAL_Delay(100);
 800700c:	2064      	movs	r0, #100	; 0x64
		end_contact = false;
 800700e:	702b      	strb	r3, [r5, #0]
		HAL_Delay(100);
 8007010:	f000 fa54 	bl	80074bc <HAL_Delay>
		HAL_TIM_Base_Start_IT(&htim4);
 8007014:	4620      	mov	r0, r4
 8007016:	f002 ff3f 	bl	8009e98 <HAL_TIM_Base_Start_IT>
		HAL_Delay(100);
 800701a:	2064      	movs	r0, #100	; 0x64
 800701c:	f000 fa4e 	bl	80074bc <HAL_Delay>
		LoRa_sleep();
 8007020:	f7fb ffd0 	bl	8002fc4 <LoRa_sleep>
		HAL_SuspendTick();
 8007024:	f000 fa5c 	bl	80074e0 <HAL_SuspendTick>
		HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8007028:	2101      	movs	r1, #1
 800702a:	4608      	mov	r0, r1
 800702c:	f002 f97c 	bl	8009328 <HAL_PWR_EnterSLEEPMode>
		HAL_ResumeTick();
 8007030:	f000 fa5e 	bl	80074f0 <HAL_ResumeTick>
		HAL_TIM_Base_Stop_IT(&htim4);
 8007034:	4620      	mov	r0, r4
 8007036:	f002 ff59 	bl	8009eec <HAL_TIM_Base_Stop_IT>
		SensorsGetValues();
 800703a:	f7ff fe19 	bl	8006c70 <SensorsGetValues>
		Main_cpp(&sensors_data);
 800703e:	482c      	ldr	r0, [pc, #176]	; (80070f0 <main+0x3d8>)
 8007040:	f7fb ffa0 	bl	8002f84 <Main_cpp>
 8007044:	e7de      	b.n	8007004 <main+0x2ec>
 8007046:	2505      	movs	r5, #5
		  HAL_GPIO_TogglePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin);
 8007048:	4e24      	ldr	r6, [pc, #144]	; (80070dc <main+0x3c4>)
 800704a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800704e:	4630      	mov	r0, r6
 8007050:	f000 fedd 	bl	8007e0e <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin);
 8007054:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007058:	4630      	mov	r0, r6
 800705a:	f000 fed8 	bl	8007e0e <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin);
 800705e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007062:	4630      	mov	r0, r6
 8007064:	f000 fed3 	bl	8007e0e <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8007068:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800706c:	f000 fa26 	bl	80074bc <HAL_Delay>
	  for (int i = 0; i < 5; ++i) {
 8007070:	3d01      	subs	r5, #1
 8007072:	d1ea      	bne.n	800704a <main+0x332>
		  LoRa_begin_result = Begin_lora_module(BAND, true, 14, 8, 250E3, 0x4A);
 8007074:	f20f 0950 	addw	r9, pc, #80	; 0x50
 8007078:	e9d9 8900 	ldrd	r8, r9, [r9]
 800707c:	2700      	movs	r7, #0
 800707e:	4e15      	ldr	r6, [pc, #84]	; (80070d4 <main+0x3bc>)
			  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 8007080:	4d16      	ldr	r5, [pc, #88]	; (80070dc <main+0x3c4>)
	  while(LoRa_begin_result != 0) {
 8007082:	7823      	ldrb	r3, [r4, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d08b      	beq.n	8006fa0 <main+0x288>
		  LoRa_begin_result = Begin_lora_module(BAND, true, 14, 8, 250E3, 0x4A);
 8007088:	234a      	movs	r3, #74	; 0x4a
 800708a:	9304      	str	r3, [sp, #16]
 800708c:	2308      	movs	r3, #8
 800708e:	4649      	mov	r1, r9
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	2201      	movs	r2, #1
 8007094:	230e      	movs	r3, #14
 8007096:	4640      	mov	r0, r8
 8007098:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800709c:	f7fb ff2e 	bl	8002efc <Begin_lora_module>
			  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 80070a0:	2201      	movs	r2, #1
		  LoRa_begin_result = Begin_lora_module(BAND, true, 14, 8, 250E3, 0x4A);
 80070a2:	7020      	strb	r0, [r4, #0]
			  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 80070a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80070a8:	4628      	mov	r0, r5
 80070aa:	f000 feab 	bl	8007e04 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_RESET);
 80070ae:	4628      	mov	r0, r5
 80070b0:	2200      	movs	r2, #0
 80070b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80070b6:	f000 fea5 	bl	8007e04 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_RESET);
 80070ba:	2200      	movs	r2, #0
 80070bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80070c0:	4628      	mov	r0, r5
 80070c2:	f000 fe9f 	bl	8007e04 <HAL_GPIO_WritePin>
 80070c6:	e7dc      	b.n	8007082 <main+0x36a>
 80070c8:	19d2ded0 	.word	0x19d2ded0
 80070cc:	00000000 	.word	0x00000000
 80070d0:	2000253c 	.word	0x2000253c
 80070d4:	0003d090 	.word	0x0003d090
 80070d8:	200024a0 	.word	0x200024a0
 80070dc:	40010800 	.word	0x40010800
 80070e0:	2000001c 	.word	0x2000001c
 80070e4:	200024a1 	.word	0x200024a1
 80070e8:	04010205 	.word	0x04010205
 80070ec:	20002508 	.word	0x20002508
 80070f0:	200025e0 	.word	0x200025e0
 80070f4:	2000243c 	.word	0x2000243c
 80070f8:	20002458 	.word	0x20002458

080070fc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80070fc:	4b0e      	ldr	r3, [pc, #56]	; (8007138 <HAL_MspInit+0x3c>)
{
 80070fe:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8007100:	699a      	ldr	r2, [r3, #24]
 8007102:	f042 0201 	orr.w	r2, r2, #1
 8007106:	619a      	str	r2, [r3, #24]
 8007108:	699a      	ldr	r2, [r3, #24]
 800710a:	f002 0201 	and.w	r2, r2, #1
 800710e:	9200      	str	r2, [sp, #0]
 8007110:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007112:	69da      	ldr	r2, [r3, #28]
 8007114:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007118:	61da      	str	r2, [r3, #28]
 800711a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800711c:	4a07      	ldr	r2, [pc, #28]	; (800713c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800711e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007122:	9301      	str	r3, [sp, #4]
 8007124:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007126:	6853      	ldr	r3, [r2, #4]
 8007128:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800712c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007130:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007132:	b002      	add	sp, #8
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	40021000 	.word	0x40021000
 800713c:	40010000 	.word	0x40010000

08007140 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007140:	b510      	push	{r4, lr}
 8007142:	4604      	mov	r4, r0
 8007144:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007146:	2210      	movs	r2, #16
 8007148:	2100      	movs	r1, #0
 800714a:	a802      	add	r0, sp, #8
 800714c:	f003 f970 	bl	800a430 <memset>
  if(hadc->Instance==ADC1)
 8007150:	6822      	ldr	r2, [r4, #0]
 8007152:	4b10      	ldr	r3, [pc, #64]	; (8007194 <HAL_ADC_MspInit+0x54>)
 8007154:	429a      	cmp	r2, r3
 8007156:	d11b      	bne.n	8007190 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007158:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800715c:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800715e:	480e      	ldr	r0, [pc, #56]	; (8007198 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007164:	619a      	str	r2, [r3, #24]
 8007166:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007168:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 800716a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800716e:	9200      	str	r2, [sp, #0]
 8007170:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007172:	699a      	ldr	r2, [r3, #24]
 8007174:	f042 0208 	orr.w	r2, r2, #8
 8007178:	619a      	str	r2, [r3, #24]
 800717a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800717c:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800717e:	f003 0308 	and.w	r3, r3, #8
 8007182:	9301      	str	r3, [sp, #4]
 8007184:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007186:	2303      	movs	r3, #3
 8007188:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800718c:	f000 fd58 	bl	8007c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8007190:	b006      	add	sp, #24
 8007192:	bd10      	pop	{r4, pc}
 8007194:	40012400 	.word	0x40012400
 8007198:	40010c00 	.word	0x40010c00

0800719c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800719c:	b510      	push	{r4, lr}
 800719e:	4604      	mov	r4, r0
 80071a0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071a2:	2210      	movs	r2, #16
 80071a4:	2100      	movs	r1, #0
 80071a6:	a802      	add	r0, sp, #8
 80071a8:	f003 f942 	bl	800a430 <memset>
  if(hi2c->Instance==I2C1)
 80071ac:	6822      	ldr	r2, [r4, #0]
 80071ae:	4b1d      	ldr	r3, [pc, #116]	; (8007224 <HAL_I2C_MspInit+0x88>)
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d134      	bne.n	800721e <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071b4:	4c1c      	ldr	r4, [pc, #112]	; (8007228 <HAL_I2C_MspInit+0x8c>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80071b6:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071ba:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071bc:	481b      	ldr	r0, [pc, #108]	; (800722c <HAL_I2C_MspInit+0x90>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071be:	f043 0308 	orr.w	r3, r3, #8
 80071c2:	61a3      	str	r3, [r4, #24]
 80071c4:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071c6:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071c8:	f003 0308 	and.w	r3, r3, #8
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80071d0:	2312      	movs	r3, #18
 80071d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80071d6:	2303      	movs	r3, #3
 80071d8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071da:	f000 fd31 	bl	8007c40 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80071de:	4a14      	ldr	r2, [pc, #80]	; (8007230 <HAL_I2C_MspInit+0x94>)

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80071e0:	201f      	movs	r0, #31
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80071e2:	6853      	ldr	r3, [r2, #4]
 80071e4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80071e8:	f043 0302 	orr.w	r3, r3, #2
 80071ec:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80071ee:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 80071f0:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80071f2:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 80071f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80071f8:	61e3      	str	r3, [r4, #28]
 80071fa:	69e3      	ldr	r3, [r4, #28]
 80071fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007200:	9301      	str	r3, [sp, #4]
 8007202:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8007204:	f000 fb4c 	bl	80078a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8007208:	201f      	movs	r0, #31
 800720a:	f000 fb7b 	bl	8007904 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800720e:	2200      	movs	r2, #0
 8007210:	2020      	movs	r0, #32
 8007212:	4611      	mov	r1, r2
 8007214:	f000 fb44 	bl	80078a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8007218:	2020      	movs	r0, #32
 800721a:	f000 fb73 	bl	8007904 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800721e:	b006      	add	sp, #24
 8007220:	bd10      	pop	{r4, pc}
 8007222:	bf00      	nop
 8007224:	40005400 	.word	0x40005400
 8007228:	40021000 	.word	0x40021000
 800722c:	40010c00 	.word	0x40010c00
 8007230:	40010000 	.word	0x40010000

08007234 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007234:	b510      	push	{r4, lr}
 8007236:	4604      	mov	r4, r0
 8007238:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800723a:	2210      	movs	r2, #16
 800723c:	2100      	movs	r1, #0
 800723e:	a802      	add	r0, sp, #8
 8007240:	f003 f8f6 	bl	800a430 <memset>
  if(hspi->Instance==SPI1)
 8007244:	6822      	ldr	r2, [r4, #0]
 8007246:	4b1a      	ldr	r3, [pc, #104]	; (80072b0 <HAL_SPI_MspInit+0x7c>)
 8007248:	429a      	cmp	r2, r3
 800724a:	d12e      	bne.n	80072aa <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800724c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8007250:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007252:	4818      	ldr	r0, [pc, #96]	; (80072b4 <HAL_SPI_MspInit+0x80>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007254:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007258:	619a      	str	r2, [r3, #24]
 800725a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800725c:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 800725e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007262:	9200      	str	r2, [sp, #0]
 8007264:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007266:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007268:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800726a:	f042 0204 	orr.w	r2, r2, #4
 800726e:	619a      	str	r2, [r3, #24]
 8007270:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007272:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	9301      	str	r3, [sp, #4]
 800727a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800727c:	2302      	movs	r3, #2
 800727e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007282:	2303      	movs	r3, #3
 8007284:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007286:	f000 fcdb 	bl	8007c40 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800728a:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800728c:	4809      	ldr	r0, [pc, #36]	; (80072b4 <HAL_SPI_MspInit+0x80>)
 800728e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007290:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007294:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007296:	f000 fcd3 	bl	8007c40 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800729a:	2023      	movs	r0, #35	; 0x23
 800729c:	4622      	mov	r2, r4
 800729e:	4621      	mov	r1, r4
 80072a0:	f000 fafe 	bl	80078a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80072a4:	2023      	movs	r0, #35	; 0x23
 80072a6:	f000 fb2d 	bl	8007904 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80072aa:	b006      	add	sp, #24
 80072ac:	bd10      	pop	{r4, pc}
 80072ae:	bf00      	nop
 80072b0:	40013000 	.word	0x40013000
 80072b4:	40010800 	.word	0x40010800

080072b8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80072b8:	6803      	ldr	r3, [r0, #0]
{
 80072ba:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 80072bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072c0:	d10d      	bne.n	80072de <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80072c2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80072c6:	69da      	ldr	r2, [r3, #28]
 80072c8:	f042 0201 	orr.w	r2, r2, #1
 80072cc:	61da      	str	r2, [r3, #28]
 80072ce:	69db      	ldr	r3, [r3, #28]
 80072d0:	f003 0301 	and.w	r3, r3, #1
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80072d8:	b003      	add	sp, #12
 80072da:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM4)
 80072de:	4a0c      	ldr	r2, [pc, #48]	; (8007310 <HAL_TIM_Base_MspInit+0x58>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d1f9      	bne.n	80072d8 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80072e4:	4b0b      	ldr	r3, [pc, #44]	; (8007314 <HAL_TIM_Base_MspInit+0x5c>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80072e6:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 80072e8:	69da      	ldr	r2, [r3, #28]
 80072ea:	f042 0204 	orr.w	r2, r2, #4
 80072ee:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80072f0:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 80072f2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80072f4:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 80072f6:	f003 0304 	and.w	r3, r3, #4
 80072fa:	9301      	str	r3, [sp, #4]
 80072fc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80072fe:	f000 facf 	bl	80078a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007302:	201e      	movs	r0, #30
}
 8007304:	b003      	add	sp, #12
 8007306:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800730a:	f000 bafb 	b.w	8007904 <HAL_NVIC_EnableIRQ>
 800730e:	bf00      	nop
 8007310:	40000800 	.word	0x40000800
 8007314:	40021000 	.word	0x40021000

08007318 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007318:	e7fe      	b.n	8007318 <NMI_Handler>

0800731a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800731a:	e7fe      	b.n	800731a <HardFault_Handler>

0800731c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800731c:	e7fe      	b.n	800731c <MemManage_Handler>

0800731e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800731e:	e7fe      	b.n	800731e <BusFault_Handler>

08007320 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007320:	e7fe      	b.n	8007320 <UsageFault_Handler>

08007322 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007322:	4770      	bx	lr

08007324 <DebugMon_Handler>:
 8007324:	4770      	bx	lr

08007326 <PendSV_Handler>:
 8007326:	4770      	bx	lr

08007328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007328:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800732a:	f000 f8b5 	bl	8007498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  ++hal_tick;
 800732e:	4a02      	ldr	r2, [pc, #8]	; (8007338 <SysTick_Handler+0x10>)
 8007330:	6813      	ldr	r3, [r2, #0]
 8007332:	3301      	adds	r3, #1
 8007334:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8007336:	bd08      	pop	{r3, pc}
 8007338:	20002440 	.word	0x20002440

0800733c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800733c:	2004      	movs	r0, #4
 800733e:	f000 bd6f 	b.w	8007e20 <HAL_GPIO_EXTI_IRQHandler>
	...

08007344 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007344:	4801      	ldr	r0, [pc, #4]	; (800734c <TIM4_IRQHandler+0x8>)
 8007346:	f002 bdee 	b.w	8009f26 <HAL_TIM_IRQHandler>
 800734a:	bf00      	nop
 800734c:	20002458 	.word	0x20002458

08007350 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8007350:	4801      	ldr	r0, [pc, #4]	; (8007358 <I2C1_EV_IRQHandler+0x8>)
 8007352:	f001 bafb 	b.w	800894c <HAL_I2C_EV_IRQHandler>
 8007356:	bf00      	nop
 8007358:	200024a4 	.word	0x200024a4

0800735c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800735c:	4801      	ldr	r0, [pc, #4]	; (8007364 <I2C1_ER_IRQHandler+0x8>)
 800735e:	f001 bf45 	b.w	80091ec <HAL_I2C_ER_IRQHandler>
 8007362:	bf00      	nop
 8007364:	200024a4 	.word	0x200024a4

08007368 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8007368:	4801      	ldr	r0, [pc, #4]	; (8007370 <SPI1_IRQHandler+0x8>)
 800736a:	f002 bd17 	b.w	8009d9c <HAL_SPI_IRQHandler>
 800736e:	bf00      	nop
 8007370:	2000253c 	.word	0x2000253c

08007374 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8007374:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007378:	f000 bd52 	b.w	8007e20 <HAL_GPIO_EXTI_IRQHandler>

0800737c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800737c:	2001      	movs	r0, #1
 800737e:	4770      	bx	lr

08007380 <_kill>:

int _kill(int pid, int sig)
{
 8007380:	b508      	push	{r3, lr}
	errno = EINVAL;
 8007382:	f002 ffff 	bl	800a384 <__errno>
 8007386:	2316      	movs	r3, #22
 8007388:	6003      	str	r3, [r0, #0]
	return -1;
}
 800738a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800738e:	bd08      	pop	{r3, pc}

08007390 <_exit>:

void _exit (int status)
{
 8007390:	b508      	push	{r3, lr}
	errno = EINVAL;
 8007392:	f002 fff7 	bl	800a384 <__errno>
 8007396:	2316      	movs	r3, #22
 8007398:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800739a:	e7fe      	b.n	800739a <_exit+0xa>

0800739c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800739c:	4b0b      	ldr	r3, [pc, #44]	; (80073cc <_sbrk+0x30>)
{
 800739e:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 80073a0:	6819      	ldr	r1, [r3, #0]
{
 80073a2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80073a4:	b909      	cbnz	r1, 80073aa <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80073a6:	490a      	ldr	r1, [pc, #40]	; (80073d0 <_sbrk+0x34>)
 80073a8:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80073aa:	6818      	ldr	r0, [r3, #0]
 80073ac:	4909      	ldr	r1, [pc, #36]	; (80073d4 <_sbrk+0x38>)
 80073ae:	4c0a      	ldr	r4, [pc, #40]	; (80073d8 <_sbrk+0x3c>)
 80073b0:	4402      	add	r2, r0
 80073b2:	1b09      	subs	r1, r1, r4
 80073b4:	428a      	cmp	r2, r1
 80073b6:	d906      	bls.n	80073c6 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80073b8:	f002 ffe4 	bl	800a384 <__errno>
 80073bc:	230c      	movs	r3, #12
 80073be:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80073c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80073c4:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80073c6:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 80073c8:	e7fc      	b.n	80073c4 <_sbrk+0x28>
 80073ca:	bf00      	nop
 80073cc:	20002444 	.word	0x20002444
 80073d0:	20002638 	.word	0x20002638
 80073d4:	20005000 	.word	0x20005000
 80073d8:	00000400 	.word	0x00000400

080073dc <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80073dc:	4770      	bx	lr
	...

080073e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80073e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80073e2:	e003      	b.n	80073ec <LoopCopyDataInit>

080073e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80073e4:	4b0b      	ldr	r3, [pc, #44]	; (8007414 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80073e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80073e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80073ea:	3104      	adds	r1, #4

080073ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80073ec:	480a      	ldr	r0, [pc, #40]	; (8007418 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80073ee:	4b0b      	ldr	r3, [pc, #44]	; (800741c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80073f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80073f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80073f4:	d3f6      	bcc.n	80073e4 <CopyDataInit>
  ldr r2, =_sbss
 80073f6:	4a0a      	ldr	r2, [pc, #40]	; (8007420 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80073f8:	e002      	b.n	8007400 <LoopFillZerobss>

080073fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80073fa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80073fc:	f842 3b04 	str.w	r3, [r2], #4

08007400 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8007400:	4b08      	ldr	r3, [pc, #32]	; (8007424 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8007402:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007404:	d3f9      	bcc.n	80073fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007406:	f7ff ffe9 	bl	80073dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800740a:	f002 ffc1 	bl	800a390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800740e:	f7ff fc83 	bl	8006d18 <main>
  bx lr
 8007412:	4770      	bx	lr
  ldr r3, =_sidata
 8007414:	0800a768 	.word	0x0800a768
  ldr r0, =_sdata
 8007418:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800741c:	200000d8 	.word	0x200000d8
  ldr r2, =_sbss
 8007420:	200000d8 	.word	0x200000d8
  ldr r3, = _ebss
 8007424:	20002638 	.word	0x20002638

08007428 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007428:	e7fe      	b.n	8007428 <ADC1_2_IRQHandler>
	...

0800742c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800742c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800742e:	4b0e      	ldr	r3, [pc, #56]	; (8007468 <HAL_InitTick+0x3c>)
{
 8007430:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007432:	7818      	ldrb	r0, [r3, #0]
 8007434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007438:	fbb3 f3f0 	udiv	r3, r3, r0
 800743c:	4a0b      	ldr	r2, [pc, #44]	; (800746c <HAL_InitTick+0x40>)
 800743e:	6810      	ldr	r0, [r2, #0]
 8007440:	fbb0 f0f3 	udiv	r0, r0, r3
 8007444:	f000 fa6c 	bl	8007920 <HAL_SYSTICK_Config>
 8007448:	4604      	mov	r4, r0
 800744a:	b958      	cbnz	r0, 8007464 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800744c:	2d0f      	cmp	r5, #15
 800744e:	d809      	bhi.n	8007464 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007450:	4602      	mov	r2, r0
 8007452:	4629      	mov	r1, r5
 8007454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007458:	f000 fa22 	bl	80078a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800745c:	4620      	mov	r0, r4
 800745e:	4b04      	ldr	r3, [pc, #16]	; (8007470 <HAL_InitTick+0x44>)
 8007460:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8007462:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007464:	2001      	movs	r0, #1
 8007466:	e7fc      	b.n	8007462 <HAL_InitTick+0x36>
 8007468:	2000006c 	.word	0x2000006c
 800746c:	20000068 	.word	0x20000068
 8007470:	20000070 	.word	0x20000070

08007474 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007474:	4a07      	ldr	r2, [pc, #28]	; (8007494 <HAL_Init+0x20>)
{
 8007476:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007478:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800747a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800747c:	f043 0310 	orr.w	r3, r3, #16
 8007480:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007482:	f000 f9fb 	bl	800787c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8007486:	2000      	movs	r0, #0
 8007488:	f7ff ffd0 	bl	800742c <HAL_InitTick>
  HAL_MspInit();
 800748c:	f7ff fe36 	bl	80070fc <HAL_MspInit>
}
 8007490:	2000      	movs	r0, #0
 8007492:	bd08      	pop	{r3, pc}
 8007494:	40022000 	.word	0x40022000

08007498 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007498:	4a03      	ldr	r2, [pc, #12]	; (80074a8 <HAL_IncTick+0x10>)
 800749a:	4b04      	ldr	r3, [pc, #16]	; (80074ac <HAL_IncTick+0x14>)
 800749c:	6811      	ldr	r1, [r2, #0]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	440b      	add	r3, r1
 80074a2:	6013      	str	r3, [r2, #0]
}
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	20002600 	.word	0x20002600
 80074ac:	2000006c 	.word	0x2000006c

080074b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80074b0:	4b01      	ldr	r3, [pc, #4]	; (80074b8 <HAL_GetTick+0x8>)
 80074b2:	6818      	ldr	r0, [r3, #0]
}
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	20002600 	.word	0x20002600

080074bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80074bc:	b538      	push	{r3, r4, r5, lr}
 80074be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80074c0:	f7ff fff6 	bl	80074b0 <HAL_GetTick>
 80074c4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80074c6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80074c8:	bf1e      	ittt	ne
 80074ca:	4b04      	ldrne	r3, [pc, #16]	; (80074dc <HAL_Delay+0x20>)
 80074cc:	781b      	ldrbne	r3, [r3, #0]
 80074ce:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80074d0:	f7ff ffee 	bl	80074b0 <HAL_GetTick>
 80074d4:	1b43      	subs	r3, r0, r5
 80074d6:	42a3      	cmp	r3, r4
 80074d8:	d3fa      	bcc.n	80074d0 <HAL_Delay+0x14>
  {
  }
}
 80074da:	bd38      	pop	{r3, r4, r5, pc}
 80074dc:	2000006c 	.word	0x2000006c

080074e0 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80074e0:	4a02      	ldr	r2, [pc, #8]	; (80074ec <HAL_SuspendTick+0xc>)
 80074e2:	6813      	ldr	r3, [r2, #0]
 80074e4:	f023 0302 	bic.w	r3, r3, #2
 80074e8:	6013      	str	r3, [r2, #0]
}
 80074ea:	4770      	bx	lr
 80074ec:	e000e010 	.word	0xe000e010

080074f0 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80074f0:	4a02      	ldr	r2, [pc, #8]	; (80074fc <HAL_ResumeTick+0xc>)
 80074f2:	6813      	ldr	r3, [r2, #0]
 80074f4:	f043 0302 	orr.w	r3, r3, #2
 80074f8:	6013      	str	r3, [r2, #0]
}
 80074fa:	4770      	bx	lr
 80074fc:	e000e010 	.word	0xe000e010

08007500 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8007500:	2300      	movs	r3, #0
{ 
 8007502:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8007504:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007506:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 800750a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800750c:	2b01      	cmp	r3, #1
 800750e:	d06c      	beq.n	80075ea <HAL_ADC_ConfigChannel+0xea>
 8007510:	2301      	movs	r3, #1
 8007512:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007516:	684d      	ldr	r5, [r1, #4]
 8007518:	6802      	ldr	r2, [r0, #0]
 800751a:	2d06      	cmp	r5, #6
 800751c:	6808      	ldr	r0, [r1, #0]
 800751e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8007522:	d822      	bhi.n	800756a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8007524:	261f      	movs	r6, #31
 8007526:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8007528:	3b05      	subs	r3, #5
 800752a:	409e      	lsls	r6, r3
 800752c:	ea25 0506 	bic.w	r5, r5, r6
 8007530:	fa00 f303 	lsl.w	r3, r0, r3
 8007534:	432b      	orrs	r3, r5
 8007536:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007538:	2809      	cmp	r0, #9
 800753a:	688b      	ldr	r3, [r1, #8]
 800753c:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8007540:	f04f 0107 	mov.w	r1, #7
 8007544:	d929      	bls.n	800759a <HAL_ADC_ConfigChannel+0x9a>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007546:	68d6      	ldr	r6, [r2, #12]
 8007548:	3d1e      	subs	r5, #30
 800754a:	40a9      	lsls	r1, r5
 800754c:	ea26 0101 	bic.w	r1, r6, r1
 8007550:	40ab      	lsls	r3, r5
 8007552:	430b      	orrs	r3, r1
 8007554:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007556:	f1a0 0310 	sub.w	r3, r0, #16
 800755a:	2b01      	cmp	r3, #1
 800755c:	d925      	bls.n	80075aa <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800755e:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007560:	2300      	movs	r3, #0
 8007562:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8007566:	b002      	add	sp, #8
 8007568:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800756a:	2d0c      	cmp	r5, #12
 800756c:	f04f 051f 	mov.w	r5, #31
 8007570:	d809      	bhi.n	8007586 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8007572:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8007574:	3b23      	subs	r3, #35	; 0x23
 8007576:	409d      	lsls	r5, r3
 8007578:	ea26 0505 	bic.w	r5, r6, r5
 800757c:	fa00 f303 	lsl.w	r3, r0, r3
 8007580:	432b      	orrs	r3, r5
 8007582:	6313      	str	r3, [r2, #48]	; 0x30
 8007584:	e7d8      	b.n	8007538 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8007586:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8007588:	3b41      	subs	r3, #65	; 0x41
 800758a:	409d      	lsls	r5, r3
 800758c:	ea26 0505 	bic.w	r5, r6, r5
 8007590:	fa00 f303 	lsl.w	r3, r0, r3
 8007594:	432b      	orrs	r3, r5
 8007596:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007598:	e7ce      	b.n	8007538 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800759a:	6910      	ldr	r0, [r2, #16]
 800759c:	40a9      	lsls	r1, r5
 800759e:	ea20 0101 	bic.w	r1, r0, r1
 80075a2:	40ab      	lsls	r3, r5
 80075a4:	430b      	orrs	r3, r1
 80075a6:	6113      	str	r3, [r2, #16]
 80075a8:	e7d9      	b.n	800755e <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 80075aa:	4b11      	ldr	r3, [pc, #68]	; (80075f0 <HAL_ADC_ConfigChannel+0xf0>)
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d116      	bne.n	80075de <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80075b0:	6893      	ldr	r3, [r2, #8]
 80075b2:	021b      	lsls	r3, r3, #8
 80075b4:	d4d3      	bmi.n	800755e <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80075b6:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80075b8:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80075ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80075be:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80075c0:	d1cd      	bne.n	800755e <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80075c2:	4b0c      	ldr	r3, [pc, #48]	; (80075f4 <HAL_ADC_ConfigChannel+0xf4>)
 80075c4:	4a0c      	ldr	r2, [pc, #48]	; (80075f8 <HAL_ADC_ConfigChannel+0xf8>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80075cc:	230a      	movs	r3, #10
 80075ce:	4353      	muls	r3, r2
            wait_loop_index--;
 80075d0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80075d2:	9b01      	ldr	r3, [sp, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d0c2      	beq.n	800755e <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 80075d8:	9b01      	ldr	r3, [sp, #4]
 80075da:	3b01      	subs	r3, #1
 80075dc:	e7f8      	b.n	80075d0 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80075de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80075e0:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80075e2:	f043 0320 	orr.w	r3, r3, #32
 80075e6:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80075e8:	e7ba      	b.n	8007560 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 80075ea:	2002      	movs	r0, #2
 80075ec:	e7bb      	b.n	8007566 <HAL_ADC_ConfigChannel+0x66>
 80075ee:	bf00      	nop
 80075f0:	40012400 	.word	0x40012400
 80075f4:	20000068 	.word	0x20000068
 80075f8:	000f4240 	.word	0x000f4240

080075fc <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80075fc:	2300      	movs	r3, #0
{
 80075fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8007600:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007602:	6803      	ldr	r3, [r0, #0]
{
 8007604:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007606:	689a      	ldr	r2, [r3, #8]
 8007608:	07d2      	lsls	r2, r2, #31
 800760a:	d502      	bpl.n	8007612 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800760c:	2000      	movs	r0, #0
}
 800760e:	b002      	add	sp, #8
 8007610:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8007612:	689a      	ldr	r2, [r3, #8]
 8007614:	f042 0201 	orr.w	r2, r2, #1
 8007618:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800761a:	4b12      	ldr	r3, [pc, #72]	; (8007664 <ADC_Enable+0x68>)
 800761c:	4a12      	ldr	r2, [pc, #72]	; (8007668 <ADC_Enable+0x6c>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8007624:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8007626:	9b01      	ldr	r3, [sp, #4]
 8007628:	b9c3      	cbnz	r3, 800765c <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800762a:	f7ff ff41 	bl	80074b0 <HAL_GetTick>
 800762e:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	689d      	ldr	r5, [r3, #8]
 8007634:	f015 0501 	ands.w	r5, r5, #1
 8007638:	d1e8      	bne.n	800760c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800763a:	f7ff ff39 	bl	80074b0 <HAL_GetTick>
 800763e:	1b80      	subs	r0, r0, r6
 8007640:	2802      	cmp	r0, #2
 8007642:	d9f5      	bls.n	8007630 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007644:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8007646:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007648:	f043 0310 	orr.w	r3, r3, #16
 800764c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800764e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8007650:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007654:	f043 0301 	orr.w	r3, r3, #1
 8007658:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_ERROR;
 800765a:	e7d8      	b.n	800760e <ADC_Enable+0x12>
      wait_loop_index--;
 800765c:	9b01      	ldr	r3, [sp, #4]
 800765e:	3b01      	subs	r3, #1
 8007660:	e7e0      	b.n	8007624 <ADC_Enable+0x28>
 8007662:	bf00      	nop
 8007664:	20000068 	.word	0x20000068
 8007668:	000f4240 	.word	0x000f4240

0800766c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800766c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800766e:	6803      	ldr	r3, [r0, #0]
{
 8007670:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007672:	689a      	ldr	r2, [r3, #8]
 8007674:	07d2      	lsls	r2, r2, #31
 8007676:	d401      	bmi.n	800767c <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007678:	2000      	movs	r0, #0
}
 800767a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800767c:	689a      	ldr	r2, [r3, #8]
 800767e:	f022 0201 	bic.w	r2, r2, #1
 8007682:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8007684:	f7ff ff14 	bl	80074b0 <HAL_GetTick>
 8007688:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	07db      	lsls	r3, r3, #31
 8007690:	d5f2      	bpl.n	8007678 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007692:	f7ff ff0d 	bl	80074b0 <HAL_GetTick>
 8007696:	1b40      	subs	r0, r0, r5
 8007698:	2802      	cmp	r0, #2
 800769a:	d9f6      	bls.n	800768a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800769c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800769e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076a0:	f043 0310 	orr.w	r3, r3, #16
 80076a4:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80076a8:	f043 0301 	orr.w	r3, r3, #1
 80076ac:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_ERROR;
 80076ae:	e7e4      	b.n	800767a <ADC_ConversionStop_Disable+0xe>

080076b0 <HAL_ADC_Init>:
{
 80076b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 80076b2:	4604      	mov	r4, r0
 80076b4:	2800      	cmp	r0, #0
 80076b6:	d06e      	beq.n	8007796 <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80076b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80076ba:	b923      	cbnz	r3, 80076c6 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80076bc:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80076be:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80076c2:	f7ff fd3d 	bl	8007140 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80076c6:	4620      	mov	r0, r4
 80076c8:	f7ff ffd0 	bl	800766c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80076cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80076ce:	f013 0310 	ands.w	r3, r3, #16
 80076d2:	d162      	bne.n	800779a <HAL_ADC_Init+0xea>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d160      	bne.n	800779a <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 80076d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80076da:	69e5      	ldr	r5, [r4, #28]
 80076dc:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80076de:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80076e2:	f022 0202 	bic.w	r2, r2, #2
 80076e6:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80076ea:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80076ec:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80076ee:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80076f0:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80076f2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80076f6:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80076fa:	d037      	beq.n	800776c <HAL_ADC_Init+0xbc>
 80076fc:	2d01      	cmp	r5, #1
 80076fe:	bf14      	ite	ne
 8007700:	2700      	movne	r7, #0
 8007702:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007706:	7d26      	ldrb	r6, [r4, #20]
 8007708:	2e01      	cmp	r6, #1
 800770a:	d106      	bne.n	800771a <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800770c:	bb82      	cbnz	r2, 8007770 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800770e:	69a2      	ldr	r2, [r4, #24]
 8007710:	3a01      	subs	r2, #1
 8007712:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 8007716:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800771a:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800771c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8007720:	6856      	ldr	r6, [r2, #4]
 8007722:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8007726:	ea46 0607 	orr.w	r6, r6, r7
 800772a:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800772c:	6897      	ldr	r7, [r2, #8]
 800772e:	4e1d      	ldr	r6, [pc, #116]	; (80077a4 <HAL_ADC_Init+0xf4>)
 8007730:	ea06 0607 	and.w	r6, r6, r7
 8007734:	ea46 0601 	orr.w	r6, r6, r1
 8007738:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800773a:	d001      	beq.n	8007740 <HAL_ADC_Init+0x90>
 800773c:	2d01      	cmp	r5, #1
 800773e:	d102      	bne.n	8007746 <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8007740:	6923      	ldr	r3, [r4, #16]
 8007742:	3b01      	subs	r3, #1
 8007744:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8007746:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8007748:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800774c:	432b      	orrs	r3, r5
 800774e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007750:	6892      	ldr	r2, [r2, #8]
 8007752:	4b15      	ldr	r3, [pc, #84]	; (80077a8 <HAL_ADC_Init+0xf8>)
 8007754:	4013      	ands	r3, r2
 8007756:	4299      	cmp	r1, r3
 8007758:	d113      	bne.n	8007782 <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 800775a:	2300      	movs	r3, #0
 800775c:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800775e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007760:	f023 0303 	bic.w	r3, r3, #3
 8007764:	f043 0301 	orr.w	r3, r3, #1
 8007768:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800776a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800776c:	462f      	mov	r7, r5
 800776e:	e7ca      	b.n	8007706 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007770:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007772:	f042 0220 	orr.w	r2, r2, #32
 8007776:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007778:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800777a:	f042 0201 	orr.w	r2, r2, #1
 800777e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8007780:	e7cb      	b.n	800771a <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 8007782:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007784:	f023 0312 	bic.w	r3, r3, #18
 8007788:	f043 0310 	orr.w	r3, r3, #16
 800778c:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800778e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007790:	f043 0301 	orr.w	r3, r3, #1
 8007794:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8007796:	2001      	movs	r0, #1
 8007798:	e7e7      	b.n	800776a <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800779a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800779c:	f043 0310 	orr.w	r3, r3, #16
 80077a0:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80077a2:	e7f8      	b.n	8007796 <HAL_ADC_Init+0xe6>
 80077a4:	ffe1f7fd 	.word	0xffe1f7fd
 80077a8:	ff1f0efe 	.word	0xff1f0efe

080077ac <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80077ac:	2300      	movs	r3, #0
{
 80077ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80077b0:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80077b2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 80077b6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d05a      	beq.n	8007872 <HAL_ADCEx_Calibration_Start+0xc6>
 80077bc:	2301      	movs	r3, #1
 80077be:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80077c2:	f7ff ff53 	bl	800766c <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80077c6:	4605      	mov	r5, r0
 80077c8:	2800      	cmp	r0, #0
 80077ca:	d132      	bne.n	8007832 <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80077cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80077ce:	2002      	movs	r0, #2
    ADC_STATE_CLR_SET(hadc->State,
 80077d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80077d4:	f023 0302 	bic.w	r3, r3, #2
 80077d8:	f043 0302 	orr.w	r3, r3, #2
 80077dc:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80077de:	4b26      	ldr	r3, [pc, #152]	; (8007878 <HAL_ADCEx_Calibration_Start+0xcc>)
 80077e0:	681e      	ldr	r6, [r3, #0]
 80077e2:	f002 f8bb 	bl	800995c <HAL_RCCEx_GetPeriphCLKFreq>
 80077e6:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80077ea:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 80077ec:	9601      	str	r6, [sp, #4]

    while(wait_loop_index != 0U)
 80077ee:	9b01      	ldr	r3, [sp, #4]
 80077f0:	bb1b      	cbnz	r3, 800783a <HAL_ADCEx_Calibration_Start+0x8e>
    {
      wait_loop_index--;
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80077f2:	4620      	mov	r0, r4
 80077f4:	f7ff ff02 	bl	80075fc <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80077f8:	6822      	ldr	r2, [r4, #0]
 80077fa:	6893      	ldr	r3, [r2, #8]
 80077fc:	f043 0308 	orr.w	r3, r3, #8
 8007800:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 8007802:	f7ff fe55 	bl	80074b0 <HAL_GetTick>
 8007806:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	689a      	ldr	r2, [r3, #8]
 800780c:	0712      	lsls	r2, r2, #28
 800780e:	d418      	bmi.n	8007842 <HAL_ADCEx_Calibration_Start+0x96>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8007810:	689a      	ldr	r2, [r3, #8]
 8007812:	f042 0204 	orr.w	r2, r2, #4
 8007816:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8007818:	f7ff fe4a 	bl	80074b0 <HAL_GetTick>
 800781c:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	075b      	lsls	r3, r3, #29
 8007824:	d41f      	bmi.n	8007866 <HAL_ADCEx_Calibration_Start+0xba>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007826:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007828:	f023 0303 	bic.w	r3, r3, #3
 800782c:	f043 0301 	orr.w	r3, r3, #1
 8007830:	62a3      	str	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007832:	2300      	movs	r3, #0
 8007834:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007838:	e012      	b.n	8007860 <HAL_ADCEx_Calibration_Start+0xb4>
      wait_loop_index--;
 800783a:	9b01      	ldr	r3, [sp, #4]
 800783c:	3b01      	subs	r3, #1
 800783e:	9301      	str	r3, [sp, #4]
 8007840:	e7d5      	b.n	80077ee <HAL_ADCEx_Calibration_Start+0x42>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8007842:	f7ff fe35 	bl	80074b0 <HAL_GetTick>
 8007846:	1b80      	subs	r0, r0, r6
 8007848:	280a      	cmp	r0, #10
 800784a:	d9dd      	bls.n	8007808 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 800784c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        return HAL_ERROR;
 800784e:	2501      	movs	r5, #1
        ADC_STATE_CLR_SET(hadc->State,
 8007850:	f023 0312 	bic.w	r3, r3, #18
 8007854:	f043 0310 	orr.w	r3, r3, #16
 8007858:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800785a:	2300      	movs	r3, #0
 800785c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8007860:	4628      	mov	r0, r5
 8007862:	b002      	add	sp, #8
 8007864:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8007866:	f7ff fe23 	bl	80074b0 <HAL_GetTick>
 800786a:	1b80      	subs	r0, r0, r6
 800786c:	280a      	cmp	r0, #10
 800786e:	d9d6      	bls.n	800781e <HAL_ADCEx_Calibration_Start+0x72>
 8007870:	e7ec      	b.n	800784c <HAL_ADCEx_Calibration_Start+0xa0>
  __HAL_LOCK(hadc);
 8007872:	2502      	movs	r5, #2
 8007874:	e7f4      	b.n	8007860 <HAL_ADCEx_Calibration_Start+0xb4>
 8007876:	bf00      	nop
 8007878:	20000068 	.word	0x20000068

0800787c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800787c:	4907      	ldr	r1, [pc, #28]	; (800789c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800787e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007880:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007882:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007886:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800788a:	0412      	lsls	r2, r2, #16
 800788c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800788e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8007898:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800789a:	4770      	bx	lr
 800789c:	e000ed00 	.word	0xe000ed00

080078a0 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80078a0:	4b16      	ldr	r3, [pc, #88]	; (80078fc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80078a2:	b530      	push	{r4, r5, lr}
 80078a4:	68dc      	ldr	r4, [r3, #12]
 80078a6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078aa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078ae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078b0:	2b04      	cmp	r3, #4
 80078b2:	bf28      	it	cs
 80078b4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078b6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078bc:	bf98      	it	ls
 80078be:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078c0:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078c4:	bf88      	it	hi
 80078c6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078c8:	ea21 0303 	bic.w	r3, r1, r3
 80078cc:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80078ce:	fa05 f404 	lsl.w	r4, r5, r4
 80078d2:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80078d6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078d8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078dc:	bfac      	ite	ge
 80078de:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078e2:	4a07      	ldrlt	r2, [pc, #28]	; (8007900 <HAL_NVIC_SetPriority+0x60>)
 80078e4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80078e8:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078ea:	bfab      	itete	ge
 80078ec:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078f0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078f4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078f8:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80078fa:	bd30      	pop	{r4, r5, pc}
 80078fc:	e000ed00 	.word	0xe000ed00
 8007900:	e000ed14 	.word	0xe000ed14

08007904 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007904:	2800      	cmp	r0, #0
 8007906:	db08      	blt.n	800791a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007908:	2301      	movs	r3, #1
 800790a:	0942      	lsrs	r2, r0, #5
 800790c:	f000 001f 	and.w	r0, r0, #31
 8007910:	fa03 f000 	lsl.w	r0, r3, r0
 8007914:	4b01      	ldr	r3, [pc, #4]	; (800791c <HAL_NVIC_EnableIRQ+0x18>)
 8007916:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800791a:	4770      	bx	lr
 800791c:	e000e100 	.word	0xe000e100

08007920 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007920:	3801      	subs	r0, #1
 8007922:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007926:	d20a      	bcs.n	800793e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007928:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800792a:	4b06      	ldr	r3, [pc, #24]	; (8007944 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800792c:	4a06      	ldr	r2, [pc, #24]	; (8007948 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800792e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007930:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007934:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007936:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007938:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800793a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800793c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800793e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	e000e010 	.word	0xe000e010
 8007948:	e000ed00 	.word	0xe000ed00

0800794c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800794c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800794e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8007952:	2b02      	cmp	r3, #2
 8007954:	d003      	beq.n	800795e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007956:	2304      	movs	r3, #4
 8007958:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800795a:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 800795c:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800795e:	6803      	ldr	r3, [r0, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	f022 020e 	bic.w	r2, r2, #14
 8007966:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	f022 0201 	bic.w	r2, r2, #1
 800796e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007970:	4a17      	ldr	r2, [pc, #92]	; (80079d0 <HAL_DMA_Abort_IT+0x84>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d01c      	beq.n	80079b0 <HAL_DMA_Abort_IT+0x64>
 8007976:	3214      	adds	r2, #20
 8007978:	4293      	cmp	r3, r2
 800797a:	d01b      	beq.n	80079b4 <HAL_DMA_Abort_IT+0x68>
 800797c:	3214      	adds	r2, #20
 800797e:	4293      	cmp	r3, r2
 8007980:	d01a      	beq.n	80079b8 <HAL_DMA_Abort_IT+0x6c>
 8007982:	3214      	adds	r2, #20
 8007984:	4293      	cmp	r3, r2
 8007986:	d01a      	beq.n	80079be <HAL_DMA_Abort_IT+0x72>
 8007988:	3214      	adds	r2, #20
 800798a:	4293      	cmp	r3, r2
 800798c:	d01a      	beq.n	80079c4 <HAL_DMA_Abort_IT+0x78>
 800798e:	3214      	adds	r2, #20
 8007990:	4293      	cmp	r3, r2
 8007992:	bf0c      	ite	eq
 8007994:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8007998:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800799c:	4a0d      	ldr	r2, [pc, #52]	; (80079d4 <HAL_DMA_Abort_IT+0x88>)
 800799e:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80079a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079a4:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80079a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80079a8:	b17b      	cbz	r3, 80079ca <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 80079aa:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80079ac:	2000      	movs	r0, #0
 80079ae:	e7d5      	b.n	800795c <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80079b0:	2301      	movs	r3, #1
 80079b2:	e7f3      	b.n	800799c <HAL_DMA_Abort_IT+0x50>
 80079b4:	2310      	movs	r3, #16
 80079b6:	e7f1      	b.n	800799c <HAL_DMA_Abort_IT+0x50>
 80079b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079bc:	e7ee      	b.n	800799c <HAL_DMA_Abort_IT+0x50>
 80079be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079c2:	e7eb      	b.n	800799c <HAL_DMA_Abort_IT+0x50>
 80079c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80079c8:	e7e8      	b.n	800799c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80079ca:	4618      	mov	r0, r3
 80079cc:	e7c6      	b.n	800795c <HAL_DMA_Abort_IT+0x10>
 80079ce:	bf00      	nop
 80079d0:	40020008 	.word	0x40020008
 80079d4:	40020000 	.word	0x40020000

080079d8 <HAL_DMA_GetState>:
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
}
 80079d8:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 80079dc:	4770      	bx	lr
	...

080079e0 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80079e0:	4a11      	ldr	r2, [pc, #68]	; (8007a28 <FLASH_SetErrorCode+0x48>)
 80079e2:	68d3      	ldr	r3, [r2, #12]
 80079e4:	f013 0310 	ands.w	r3, r3, #16
 80079e8:	d005      	beq.n	80079f6 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80079ea:	4910      	ldr	r1, [pc, #64]	; (8007a2c <FLASH_SetErrorCode+0x4c>)
 80079ec:	69cb      	ldr	r3, [r1, #28]
 80079ee:	f043 0302 	orr.w	r3, r3, #2
 80079f2:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80079f4:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80079f6:	68d2      	ldr	r2, [r2, #12]
 80079f8:	0750      	lsls	r0, r2, #29
 80079fa:	d506      	bpl.n	8007a0a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80079fc:	490b      	ldr	r1, [pc, #44]	; (8007a2c <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80079fe:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8007a02:	69ca      	ldr	r2, [r1, #28]
 8007a04:	f042 0201 	orr.w	r2, r2, #1
 8007a08:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8007a0a:	4a07      	ldr	r2, [pc, #28]	; (8007a28 <FLASH_SetErrorCode+0x48>)
 8007a0c:	69d1      	ldr	r1, [r2, #28]
 8007a0e:	07c9      	lsls	r1, r1, #31
 8007a10:	d508      	bpl.n	8007a24 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8007a12:	4806      	ldr	r0, [pc, #24]	; (8007a2c <FLASH_SetErrorCode+0x4c>)
 8007a14:	69c1      	ldr	r1, [r0, #28]
 8007a16:	f041 0104 	orr.w	r1, r1, #4
 8007a1a:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8007a1c:	69d1      	ldr	r1, [r2, #28]
 8007a1e:	f021 0101 	bic.w	r1, r1, #1
 8007a22:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8007a24:	60d3      	str	r3, [r2, #12]
}  
 8007a26:	4770      	bx	lr
 8007a28:	40022000 	.word	0x40022000
 8007a2c:	20002608 	.word	0x20002608

08007a30 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007a30:	4b06      	ldr	r3, [pc, #24]	; (8007a4c <HAL_FLASH_Unlock+0x1c>)
 8007a32:	6918      	ldr	r0, [r3, #16]
 8007a34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a38:	d007      	beq.n	8007a4a <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007a3a:	4a05      	ldr	r2, [pc, #20]	; (8007a50 <HAL_FLASH_Unlock+0x20>)
 8007a3c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007a3e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8007a42:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007a44:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8007a46:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8007a4a:	4770      	bx	lr
 8007a4c:	40022000 	.word	0x40022000
 8007a50:	45670123 	.word	0x45670123

08007a54 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007a54:	4a03      	ldr	r2, [pc, #12]	; (8007a64 <HAL_FLASH_Lock+0x10>)
}
 8007a56:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007a58:	6913      	ldr	r3, [r2, #16]
 8007a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a5e:	6113      	str	r3, [r2, #16]
}
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	40022000 	.word	0x40022000

08007a68 <FLASH_WaitForLastOperation>:
{
 8007a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007a6c:	f7ff fd20 	bl	80074b0 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007a70:	4d11      	ldr	r5, [pc, #68]	; (8007ab8 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 8007a72:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007a74:	462e      	mov	r6, r5
 8007a76:	68eb      	ldr	r3, [r5, #12]
 8007a78:	07d8      	lsls	r0, r3, #31
 8007a7a:	d412      	bmi.n	8007aa2 <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007a7c:	68eb      	ldr	r3, [r5, #12]
 8007a7e:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007a80:	bf44      	itt	mi
 8007a82:	2320      	movmi	r3, #32
 8007a84:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007a86:	68f3      	ldr	r3, [r6, #12]
 8007a88:	06da      	lsls	r2, r3, #27
 8007a8a:	d406      	bmi.n	8007a9a <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007a8c:	69f3      	ldr	r3, [r6, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007a8e:	07db      	lsls	r3, r3, #31
 8007a90:	d403      	bmi.n	8007a9a <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007a92:	68f0      	ldr	r0, [r6, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007a94:	f010 0004 	ands.w	r0, r0, #4
 8007a98:	d007      	beq.n	8007aaa <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 8007a9a:	f7ff ffa1 	bl	80079e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007a9e:	2001      	movs	r0, #1
 8007aa0:	e003      	b.n	8007aaa <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8007aa2:	1c63      	adds	r3, r4, #1
 8007aa4:	d0e7      	beq.n	8007a76 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007aa6:	b90c      	cbnz	r4, 8007aac <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8007aa8:	2003      	movs	r0, #3
}
 8007aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007aac:	f7ff fd00 	bl	80074b0 <HAL_GetTick>
 8007ab0:	1bc0      	subs	r0, r0, r7
 8007ab2:	42a0      	cmp	r0, r4
 8007ab4:	d9df      	bls.n	8007a76 <FLASH_WaitForLastOperation+0xe>
 8007ab6:	e7f7      	b.n	8007aa8 <FLASH_WaitForLastOperation+0x40>
 8007ab8:	40022000 	.word	0x40022000

08007abc <HAL_FLASH_Program>:
{
 8007abc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8007ac0:	4e25      	ldr	r6, [pc, #148]	; (8007b58 <HAL_FLASH_Program+0x9c>)
{
 8007ac2:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8007ac4:	7e33      	ldrb	r3, [r6, #24]
{
 8007ac6:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8007ac8:	2b01      	cmp	r3, #1
{
 8007aca:	4688      	mov	r8, r1
 8007acc:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 8007ace:	d040      	beq.n	8007b52 <HAL_FLASH_Program+0x96>
 8007ad0:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007ad2:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8007ad6:	7633      	strb	r3, [r6, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007ad8:	f7ff ffc6 	bl	8007a68 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8007adc:	bba8      	cbnz	r0, 8007b4a <HAL_FLASH_Program+0x8e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007ade:	2d01      	cmp	r5, #1
 8007ae0:	d003      	beq.n	8007aea <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 8007ae2:	2d02      	cmp	r5, #2
 8007ae4:	bf0c      	ite	eq
 8007ae6:	2502      	moveq	r5, #2
 8007ae8:	2504      	movne	r5, #4
 8007aea:	f04f 0a00 	mov.w	sl, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007aee:	4653      	mov	r3, sl
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007af0:	f8df b068 	ldr.w	fp, [pc, #104]	; 8007b5c <HAL_FLASH_Program+0xa0>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8007af4:	ea4f 140a 	mov.w	r4, sl, lsl #4
 8007af8:	f1c4 0120 	rsb	r1, r4, #32
 8007afc:	f1a4 0220 	sub.w	r2, r4, #32
 8007b00:	fa07 f101 	lsl.w	r1, r7, r1
 8007b04:	fa29 f404 	lsr.w	r4, r9, r4
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007b08:	61f3      	str	r3, [r6, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8007b0a:	430c      	orrs	r4, r1
 8007b0c:	fa27 f202 	lsr.w	r2, r7, r2
 8007b10:	4314      	orrs	r4, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007b12:	f8db 2010 	ldr.w	r2, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8007b16:	b2a4      	uxth	r4, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007b18:	f042 0201 	orr.w	r2, r2, #1
 8007b1c:	f8cb 2010 	str.w	r2, [fp, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007b20:	f24c 3050 	movw	r0, #50000	; 0xc350
  *(__IO uint16_t*)Address = Data;
 8007b24:	f828 401a 	strh.w	r4, [r8, sl, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007b28:	f7ff ff9e 	bl	8007a68 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007b2c:	f8db 2010 	ldr.w	r2, [fp, #16]
 8007b30:	f022 0201 	bic.w	r2, r2, #1
 8007b34:	f8cb 2010 	str.w	r2, [fp, #16]
      if (status != HAL_OK)
 8007b38:	b938      	cbnz	r0, 8007b4a <HAL_FLASH_Program+0x8e>
    for (index = 0U; index < nbiterations; index++)
 8007b3a:	f10a 0a01 	add.w	sl, sl, #1
 8007b3e:	fa5f f28a 	uxtb.w	r2, sl
 8007b42:	4295      	cmp	r5, r2
 8007b44:	f04f 0300 	mov.w	r3, #0
 8007b48:	d8d4      	bhi.n	8007af4 <HAL_FLASH_Program+0x38>
  __HAL_UNLOCK(&pFlash);
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	7633      	strb	r3, [r6, #24]
}
 8007b4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8007b52:	2002      	movs	r0, #2
 8007b54:	e7fb      	b.n	8007b4e <HAL_FLASH_Program+0x92>
 8007b56:	bf00      	nop
 8007b58:	20002608 	.word	0x20002608
 8007b5c:	40022000 	.word	0x40022000

08007b60 <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007b60:	2200      	movs	r2, #0
 8007b62:	4b06      	ldr	r3, [pc, #24]	; (8007b7c <FLASH_MassErase.isra.0+0x1c>)
 8007b64:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8007b66:	4b06      	ldr	r3, [pc, #24]	; (8007b80 <FLASH_MassErase.isra.0+0x20>)
 8007b68:	691a      	ldr	r2, [r3, #16]
 8007b6a:	f042 0204 	orr.w	r2, r2, #4
 8007b6e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007b70:	691a      	ldr	r2, [r3, #16]
 8007b72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b76:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	20002608 	.word	0x20002608
 8007b80:	40022000 	.word	0x40022000

08007b84 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007b84:	2200      	movs	r2, #0
 8007b86:	4b06      	ldr	r3, [pc, #24]	; (8007ba0 <FLASH_PageErase+0x1c>)
 8007b88:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007b8a:	4b06      	ldr	r3, [pc, #24]	; (8007ba4 <FLASH_PageErase+0x20>)
 8007b8c:	691a      	ldr	r2, [r3, #16]
 8007b8e:	f042 0202 	orr.w	r2, r2, #2
 8007b92:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8007b94:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007b96:	691a      	ldr	r2, [r3, #16]
 8007b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b9c:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8007b9e:	4770      	bx	lr
 8007ba0:	20002608 	.word	0x20002608
 8007ba4:	40022000 	.word	0x40022000

08007ba8 <HAL_FLASHEx_Erase>:
{
 8007ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8007bac:	4e22      	ldr	r6, [pc, #136]	; (8007c38 <HAL_FLASHEx_Erase+0x90>)
{
 8007bae:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8007bb0:	7e33      	ldrb	r3, [r6, #24]
{
 8007bb2:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d03d      	beq.n	8007c34 <HAL_FLASHEx_Erase+0x8c>
 8007bb8:	2401      	movs	r4, #1
 8007bba:	7634      	strb	r4, [r6, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007bbc:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007bbe:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d113      	bne.n	8007bee <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007bc6:	f7ff ff4f 	bl	8007a68 <FLASH_WaitForLastOperation>
 8007bca:	b120      	cbz	r0, 8007bd6 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8007bcc:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8007bce:	2300      	movs	r3, #0
 8007bd0:	7633      	strb	r3, [r6, #24]
}
 8007bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 8007bd6:	f7ff ffc3 	bl	8007b60 <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007bda:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007bde:	f7ff ff43 	bl	8007a68 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8007be2:	4a16      	ldr	r2, [pc, #88]	; (8007c3c <HAL_FLASHEx_Erase+0x94>)
 8007be4:	6913      	ldr	r3, [r2, #16]
 8007be6:	f023 0304 	bic.w	r3, r3, #4
 8007bea:	6113      	str	r3, [r2, #16]
 8007bec:	e7ef      	b.n	8007bce <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007bee:	f7ff ff3b 	bl	8007a68 <FLASH_WaitForLastOperation>
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	d1ea      	bne.n	8007bcc <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8007bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bfa:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007bfe:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8007c00:	68af      	ldr	r7, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007c02:	4c0e      	ldr	r4, [pc, #56]	; (8007c3c <HAL_FLASHEx_Erase+0x94>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8007c04:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8007c08:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8007c0c:	42bb      	cmp	r3, r7
 8007c0e:	d9de      	bls.n	8007bce <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8007c10:	4638      	mov	r0, r7
 8007c12:	f7ff ffb7 	bl	8007b84 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007c16:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007c1a:	f7ff ff25 	bl	8007a68 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007c1e:	6923      	ldr	r3, [r4, #16]
 8007c20:	f023 0302 	bic.w	r3, r3, #2
 8007c24:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8007c26:	b110      	cbz	r0, 8007c2e <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 8007c28:	f8c8 7000 	str.w	r7, [r8]
            break;
 8007c2c:	e7cf      	b.n	8007bce <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8007c2e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8007c32:	e7e7      	b.n	8007c04 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8007c34:	2002      	movs	r0, #2
 8007c36:	e7cc      	b.n	8007bd2 <HAL_FLASHEx_Erase+0x2a>
 8007c38:	20002608 	.word	0x20002608
 8007c3c:	40022000 	.word	0x40022000

08007c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007c44:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8007c46:	4616      	mov	r6, r2
 8007c48:	4b64      	ldr	r3, [pc, #400]	; (8007ddc <HAL_GPIO_Init+0x19c>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007c4a:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8007dec <HAL_GPIO_Init+0x1ac>
 8007c4e:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8007df0 <HAL_GPIO_Init+0x1b0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007c52:	680d      	ldr	r5, [r1, #0]
 8007c54:	fa35 f406 	lsrs.w	r4, r5, r6
 8007c58:	d102      	bne.n	8007c60 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8007c5a:	b003      	add	sp, #12
 8007c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8007c60:	f04f 0801 	mov.w	r8, #1
 8007c64:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007c68:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8007c6c:	ea38 0505 	bics.w	r5, r8, r5
 8007c70:	d17c      	bne.n	8007d6c <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8007c72:	684d      	ldr	r5, [r1, #4]
 8007c74:	2d03      	cmp	r5, #3
 8007c76:	d807      	bhi.n	8007c88 <HAL_GPIO_Init+0x48>
 8007c78:	3d01      	subs	r5, #1
 8007c7a:	2d02      	cmp	r5, #2
 8007c7c:	f200 8088 	bhi.w	8007d90 <HAL_GPIO_Init+0x150>
 8007c80:	e8df f005 	tbb	[pc, r5]
 8007c84:	9b96      	.short	0x9b96
 8007c86:	a1          	.byte	0xa1
 8007c87:	00          	.byte	0x00
 8007c88:	2d12      	cmp	r5, #18
 8007c8a:	f000 8099 	beq.w	8007dc0 <HAL_GPIO_Init+0x180>
 8007c8e:	d86f      	bhi.n	8007d70 <HAL_GPIO_Init+0x130>
 8007c90:	2d11      	cmp	r5, #17
 8007c92:	f000 808f 	beq.w	8007db4 <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007c96:	2cff      	cmp	r4, #255	; 0xff
 8007c98:	bf98      	it	ls
 8007c9a:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007c9c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007ca0:	bf88      	it	hi
 8007ca2:	f100 0a04 	addhi.w	sl, r0, #4
 8007ca6:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007caa:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007cae:	bf88      	it	hi
 8007cb0:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007cb2:	fa09 fb05 	lsl.w	fp, r9, r5
 8007cb6:	ea28 080b 	bic.w	r8, r8, fp
 8007cba:	fa02 f505 	lsl.w	r5, r2, r5
 8007cbe:	ea48 0505 	orr.w	r5, r8, r5
 8007cc2:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007cc6:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8007cca:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8007cce:	d04d      	beq.n	8007d6c <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007cd0:	4f43      	ldr	r7, [pc, #268]	; (8007de0 <HAL_GPIO_Init+0x1a0>)
 8007cd2:	f026 0803 	bic.w	r8, r6, #3
 8007cd6:	69bd      	ldr	r5, [r7, #24]
 8007cd8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8007cdc:	f045 0501 	orr.w	r5, r5, #1
 8007ce0:	61bd      	str	r5, [r7, #24]
 8007ce2:	69bd      	ldr	r5, [r7, #24]
 8007ce4:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8007ce8:	f005 0501 	and.w	r5, r5, #1
 8007cec:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007cee:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007cf2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007cf4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8007cf8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007cfc:	fa09 f90b 	lsl.w	r9, r9, fp
 8007d00:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007d04:	4d37      	ldr	r5, [pc, #220]	; (8007de4 <HAL_GPIO_Init+0x1a4>)
 8007d06:	42a8      	cmp	r0, r5
 8007d08:	d061      	beq.n	8007dce <HAL_GPIO_Init+0x18e>
 8007d0a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007d0e:	42a8      	cmp	r0, r5
 8007d10:	d05f      	beq.n	8007dd2 <HAL_GPIO_Init+0x192>
 8007d12:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007d16:	42a8      	cmp	r0, r5
 8007d18:	d05d      	beq.n	8007dd6 <HAL_GPIO_Init+0x196>
 8007d1a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007d1e:	42a8      	cmp	r0, r5
 8007d20:	bf0c      	ite	eq
 8007d22:	2503      	moveq	r5, #3
 8007d24:	2504      	movne	r5, #4
 8007d26:	fa05 f50b 	lsl.w	r5, r5, fp
 8007d2a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8007d2e:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8007d32:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007d34:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8007d38:	bf14      	ite	ne
 8007d3a:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007d3c:	43a5      	biceq	r5, r4
 8007d3e:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8007d40:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007d42:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8007d46:	bf14      	ite	ne
 8007d48:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007d4a:	43a5      	biceq	r5, r4
 8007d4c:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8007d4e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007d50:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8007d54:	bf14      	ite	ne
 8007d56:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007d58:	43a5      	biceq	r5, r4
 8007d5a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8007d5c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007d5e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8007d62:	bf14      	ite	ne
 8007d64:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007d66:	ea25 0404 	biceq.w	r4, r5, r4
 8007d6a:	60dc      	str	r4, [r3, #12]
	position++;
 8007d6c:	3601      	adds	r6, #1
 8007d6e:	e770      	b.n	8007c52 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8007d70:	4f1d      	ldr	r7, [pc, #116]	; (8007de8 <HAL_GPIO_Init+0x1a8>)
 8007d72:	42bd      	cmp	r5, r7
 8007d74:	d00c      	beq.n	8007d90 <HAL_GPIO_Init+0x150>
 8007d76:	d817      	bhi.n	8007da8 <HAL_GPIO_Init+0x168>
 8007d78:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8007df4 <HAL_GPIO_Init+0x1b4>
 8007d7c:	454d      	cmp	r5, r9
 8007d7e:	d007      	beq.n	8007d90 <HAL_GPIO_Init+0x150>
 8007d80:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8007d84:	454d      	cmp	r5, r9
 8007d86:	d003      	beq.n	8007d90 <HAL_GPIO_Init+0x150>
 8007d88:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8007d8c:	454d      	cmp	r5, r9
 8007d8e:	d182      	bne.n	8007c96 <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007d90:	688a      	ldr	r2, [r1, #8]
 8007d92:	b1d2      	cbz	r2, 8007dca <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007d94:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8007d96:	bf08      	it	eq
 8007d98:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007d9c:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8007da0:	bf18      	it	ne
 8007da2:	f8c0 8014 	strne.w	r8, [r0, #20]
 8007da6:	e776      	b.n	8007c96 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8007da8:	4565      	cmp	r5, ip
 8007daa:	d0f1      	beq.n	8007d90 <HAL_GPIO_Init+0x150>
 8007dac:	4575      	cmp	r5, lr
 8007dae:	e7ee      	b.n	8007d8e <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007db0:	68ca      	ldr	r2, [r1, #12]
          break;
 8007db2:	e770      	b.n	8007c96 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007db4:	68ca      	ldr	r2, [r1, #12]
 8007db6:	3204      	adds	r2, #4
          break;
 8007db8:	e76d      	b.n	8007c96 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007dba:	68ca      	ldr	r2, [r1, #12]
 8007dbc:	3208      	adds	r2, #8
          break;
 8007dbe:	e76a      	b.n	8007c96 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007dc0:	68ca      	ldr	r2, [r1, #12]
 8007dc2:	320c      	adds	r2, #12
          break;
 8007dc4:	e767      	b.n	8007c96 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	e765      	b.n	8007c96 <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007dca:	2204      	movs	r2, #4
 8007dcc:	e763      	b.n	8007c96 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007dce:	2500      	movs	r5, #0
 8007dd0:	e7a9      	b.n	8007d26 <HAL_GPIO_Init+0xe6>
 8007dd2:	2501      	movs	r5, #1
 8007dd4:	e7a7      	b.n	8007d26 <HAL_GPIO_Init+0xe6>
 8007dd6:	2502      	movs	r5, #2
 8007dd8:	e7a5      	b.n	8007d26 <HAL_GPIO_Init+0xe6>
 8007dda:	bf00      	nop
 8007ddc:	40010400 	.word	0x40010400
 8007de0:	40021000 	.word	0x40021000
 8007de4:	40010800 	.word	0x40010800
 8007de8:	10220000 	.word	0x10220000
 8007dec:	10310000 	.word	0x10310000
 8007df0:	10320000 	.word	0x10320000
 8007df4:	10120000 	.word	0x10120000

08007df8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007df8:	6883      	ldr	r3, [r0, #8]
 8007dfa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007dfc:	bf14      	ite	ne
 8007dfe:	2001      	movne	r0, #1
 8007e00:	2000      	moveq	r0, #0
 8007e02:	4770      	bx	lr

08007e04 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e04:	b10a      	cbz	r2, 8007e0a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007e06:	6101      	str	r1, [r0, #16]
  }
}
 8007e08:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007e0a:	0409      	lsls	r1, r1, #16
 8007e0c:	e7fb      	b.n	8007e06 <HAL_GPIO_WritePin+0x2>

08007e0e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007e0e:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007e10:	ea01 0203 	and.w	r2, r1, r3
 8007e14:	ea21 0103 	bic.w	r1, r1, r3
 8007e18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e1c:	6101      	str	r1, [r0, #16]
}
 8007e1e:	4770      	bx	lr

08007e20 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007e20:	4a04      	ldr	r2, [pc, #16]	; (8007e34 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8007e22:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007e24:	6951      	ldr	r1, [r2, #20]
 8007e26:	4201      	tst	r1, r0
 8007e28:	d002      	beq.n	8007e30 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007e2a:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007e2c:	f7fe ff0c 	bl	8006c48 <HAL_GPIO_EXTI_Callback>
  }
}
 8007e30:	bd08      	pop	{r3, pc}
 8007e32:	bf00      	nop
 8007e34:	40010400 	.word	0x40010400

08007e38 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e38:	6801      	ldr	r1, [r0, #0]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	694b      	ldr	r3, [r1, #20]
 8007e3e:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8007e42:	d010      	beq.n	8007e66 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e44:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8007e48:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8007e4a:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8007e4c:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007e4e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e52:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e56:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e58:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e5c:	f043 0304 	orr.w	r3, r3, #4
 8007e60:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8007e62:	2001      	movs	r0, #1
 8007e64:	4770      	bx	lr
  }
  return HAL_OK;
 8007e66:	4618      	mov	r0, r3
}
 8007e68:	4770      	bx	lr

08007e6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8007e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e6e:	4604      	mov	r4, r0
 8007e70:	460f      	mov	r7, r1
 8007e72:	4616      	mov	r6, r2
 8007e74:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007e76:	6825      	ldr	r5, [r4, #0]
 8007e78:	6968      	ldr	r0, [r5, #20]
 8007e7a:	ea27 0000 	bic.w	r0, r7, r0
 8007e7e:	b280      	uxth	r0, r0
 8007e80:	b1b8      	cbz	r0, 8007eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e82:	696b      	ldr	r3, [r5, #20]
 8007e84:	055a      	lsls	r2, r3, #21
 8007e86:	d516      	bpl.n	8007eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e88:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e8a:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e90:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e92:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8007e96:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e9c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ea0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ea4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007ea6:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 8007eaa:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007eac:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007eae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8007eb6:	1c73      	adds	r3, r6, #1
 8007eb8:	d0de      	beq.n	8007e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eba:	f7ff faf9 	bl	80074b0 <HAL_GetTick>
 8007ebe:	eba0 0008 	sub.w	r0, r0, r8
 8007ec2:	42b0      	cmp	r0, r6
 8007ec4:	d801      	bhi.n	8007eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8007ec6:	2e00      	cmp	r6, #0
 8007ec8:	d1d5      	bne.n	8007e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007eca:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8007ecc:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ece:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007ed0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ed4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ed8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007eda:	f042 0220 	orr.w	r2, r2, #32
 8007ede:	e7e4      	b.n	8007eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08007ee0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8007ee0:	b570      	push	{r4, r5, r6, lr}
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	460d      	mov	r5, r1
 8007ee6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ee8:	6823      	ldr	r3, [r4, #0]
 8007eea:	695b      	ldr	r3, [r3, #20]
 8007eec:	075b      	lsls	r3, r3, #29
 8007eee:	d501      	bpl.n	8007ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8007ef0:	2000      	movs	r0, #0
}
 8007ef2:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	f7ff ff9f 	bl	8007e38 <I2C_IsAcknowledgeFailed>
 8007efa:	b9a8      	cbnz	r0, 8007f28 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8007efc:	1c6a      	adds	r2, r5, #1
 8007efe:	d0f3      	beq.n	8007ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f00:	f7ff fad6 	bl	80074b0 <HAL_GetTick>
 8007f04:	1b80      	subs	r0, r0, r6
 8007f06:	42a8      	cmp	r0, r5
 8007f08:	d801      	bhi.n	8007f0e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8007f0a:	2d00      	cmp	r5, #0
 8007f0c:	d1ec      	bne.n	8007ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007f0e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8007f10:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007f12:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007f14:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007f18:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007f1c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007f1e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007f22:	f042 0220 	orr.w	r2, r2, #32
 8007f26:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8007f28:	2001      	movs	r0, #1
 8007f2a:	e7e2      	b.n	8007ef2 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08007f2c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8007f2c:	b570      	push	{r4, r5, r6, lr}
 8007f2e:	4604      	mov	r4, r0
 8007f30:	460d      	mov	r5, r1
 8007f32:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f34:	6821      	ldr	r1, [r4, #0]
 8007f36:	694b      	ldr	r3, [r1, #20]
 8007f38:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8007f3c:	d001      	beq.n	8007f42 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8007f3e:	2000      	movs	r0, #0
 8007f40:	e010      	b.n	8007f64 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007f42:	694a      	ldr	r2, [r1, #20]
 8007f44:	06d2      	lsls	r2, r2, #27
 8007f46:	d50e      	bpl.n	8007f66 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f48:	f06f 0210 	mvn.w	r2, #16
 8007f4c:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f4e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f50:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f52:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f56:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007f5a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007f5c:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007f5e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007f60:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007f64:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f66:	f7ff faa3 	bl	80074b0 <HAL_GetTick>
 8007f6a:	1b80      	subs	r0, r0, r6
 8007f6c:	42a8      	cmp	r0, r5
 8007f6e:	d801      	bhi.n	8007f74 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8007f70:	2d00      	cmp	r5, #0
 8007f72:	d1df      	bne.n	8007f34 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007f74:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8007f76:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007f78:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007f7a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007f7e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007f82:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007f84:	f042 0220 	orr.w	r2, r2, #32
 8007f88:	e7e8      	b.n	8007f5c <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08007f8a <I2C_WaitOnFlagUntilTimeout>:
{
 8007f8a:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8007f8e:	4606      	mov	r6, r0
 8007f90:	460f      	mov	r7, r1
 8007f92:	4691      	mov	r9, r2
 8007f94:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f96:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007f9a:	6833      	ldr	r3, [r6, #0]
 8007f9c:	f1ba 0f01 	cmp.w	sl, #1
 8007fa0:	bf0c      	ite	eq
 8007fa2:	695c      	ldreq	r4, [r3, #20]
 8007fa4:	699c      	ldrne	r4, [r3, #24]
 8007fa6:	ea27 0404 	bic.w	r4, r7, r4
 8007faa:	b2a4      	uxth	r4, r4
 8007fac:	fab4 f484 	clz	r4, r4
 8007fb0:	0964      	lsrs	r4, r4, #5
 8007fb2:	45a1      	cmp	r9, r4
 8007fb4:	d001      	beq.n	8007fba <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	e017      	b.n	8007fea <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8007fba:	1c6a      	adds	r2, r5, #1
 8007fbc:	d0ee      	beq.n	8007f9c <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fbe:	f7ff fa77 	bl	80074b0 <HAL_GetTick>
 8007fc2:	9b08      	ldr	r3, [sp, #32]
 8007fc4:	1ac0      	subs	r0, r0, r3
 8007fc6:	42a8      	cmp	r0, r5
 8007fc8:	d801      	bhi.n	8007fce <I2C_WaitOnFlagUntilTimeout+0x44>
 8007fca:	2d00      	cmp	r5, #0
 8007fcc:	d1e5      	bne.n	8007f9a <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007fce:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8007fd0:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 8007fd2:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007fd4:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007fd6:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007fda:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007fde:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007fe0:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007fe4:	f042 0220 	orr.w	r2, r2, #32
 8007fe8:	6432      	str	r2, [r6, #64]	; 0x40
}
 8007fea:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08007fee <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8007fee:	b570      	push	{r4, r5, r6, lr}
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	460d      	mov	r5, r1
 8007ff4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	061b      	lsls	r3, r3, #24
 8007ffc:	d501      	bpl.n	8008002 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8007ffe:	2000      	movs	r0, #0
}
 8008000:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008002:	4620      	mov	r0, r4
 8008004:	f7ff ff18 	bl	8007e38 <I2C_IsAcknowledgeFailed>
 8008008:	b9a8      	cbnz	r0, 8008036 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800800a:	1c6a      	adds	r2, r5, #1
 800800c:	d0f3      	beq.n	8007ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800800e:	f7ff fa4f 	bl	80074b0 <HAL_GetTick>
 8008012:	1b80      	subs	r0, r0, r6
 8008014:	42a8      	cmp	r0, r5
 8008016:	d801      	bhi.n	800801c <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8008018:	2d00      	cmp	r5, #0
 800801a:	d1ec      	bne.n	8007ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800801c:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800801e:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008020:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008022:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008026:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800802a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800802c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008030:	f042 0220 	orr.w	r2, r2, #32
 8008034:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8008036:	2001      	movs	r0, #1
 8008038:	e7e2      	b.n	8008000 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

0800803c <HAL_I2C_Init>:
{
 800803c:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800803e:	4604      	mov	r4, r0
 8008040:	b908      	cbnz	r0, 8008046 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8008042:	2001      	movs	r0, #1
}
 8008044:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008046:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800804a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800804e:	b91b      	cbnz	r3, 8008058 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8008050:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8008054:	f7ff f8a2 	bl	800719c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008058:	2324      	movs	r3, #36	; 0x24
 800805a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	f022 0201 	bic.w	r2, r2, #1
 8008066:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800806e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008076:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008078:	f001 fbd8 	bl	800982c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800807c:	4a3f      	ldr	r2, [pc, #252]	; (800817c <HAL_I2C_Init+0x140>)
 800807e:	6863      	ldr	r3, [r4, #4]
 8008080:	4293      	cmp	r3, r2
 8008082:	bf94      	ite	ls
 8008084:	4a3e      	ldrls	r2, [pc, #248]	; (8008180 <HAL_I2C_Init+0x144>)
 8008086:	4a3f      	ldrhi	r2, [pc, #252]	; (8008184 <HAL_I2C_Init+0x148>)
 8008088:	4290      	cmp	r0, r2
 800808a:	bf8c      	ite	hi
 800808c:	2200      	movhi	r2, #0
 800808e:	2201      	movls	r2, #1
 8008090:	2a00      	cmp	r2, #0
 8008092:	d1d6      	bne.n	8008042 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8008094:	4e3c      	ldr	r6, [pc, #240]	; (8008188 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008096:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8008098:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800809c:	6851      	ldr	r1, [r2, #4]
 800809e:	3801      	subs	r0, #1
 80080a0:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80080a4:	4331      	orrs	r1, r6
 80080a6:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80080a8:	4934      	ldr	r1, [pc, #208]	; (800817c <HAL_I2C_Init+0x140>)
 80080aa:	6a15      	ldr	r5, [r2, #32]
 80080ac:	428b      	cmp	r3, r1
 80080ae:	bf81      	itttt	hi
 80080b0:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 80080b4:	4371      	mulhi	r1, r6
 80080b6:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 80080ba:	fbb1 f1f6 	udivhi	r1, r1, r6
 80080be:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80080c2:	bf94      	ite	ls
 80080c4:	1c71      	addls	r1, r6, #1
 80080c6:	3101      	addhi	r1, #1
 80080c8:	4329      	orrs	r1, r5
 80080ca:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80080cc:	69d1      	ldr	r1, [r2, #28]
 80080ce:	4d2b      	ldr	r5, [pc, #172]	; (800817c <HAL_I2C_Init+0x140>)
 80080d0:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80080d4:	42ab      	cmp	r3, r5
 80080d6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80080da:	d832      	bhi.n	8008142 <HAL_I2C_Init+0x106>
 80080dc:	005b      	lsls	r3, r3, #1
 80080de:	fbb0 f0f3 	udiv	r0, r0, r3
 80080e2:	1c43      	adds	r3, r0, #1
 80080e4:	f640 70fc 	movw	r0, #4092	; 0xffc
 80080e8:	4203      	tst	r3, r0
 80080ea:	d042      	beq.n	8008172 <HAL_I2C_Init+0x136>
 80080ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080f0:	430b      	orrs	r3, r1
 80080f2:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80080f4:	6811      	ldr	r1, [r2, #0]
 80080f6:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80080fa:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80080fe:	4303      	orrs	r3, r0
 8008100:	430b      	orrs	r3, r1
 8008102:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008104:	6891      	ldr	r1, [r2, #8]
 8008106:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800810a:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800810e:	4303      	orrs	r3, r0
 8008110:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8008114:	430b      	orrs	r3, r1
 8008116:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008118:	68d1      	ldr	r1, [r2, #12]
 800811a:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800811e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8008122:	4303      	orrs	r3, r0
 8008124:	430b      	orrs	r3, r1
 8008126:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8008128:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800812a:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 800812c:	f043 0301 	orr.w	r3, r3, #1
 8008130:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8008132:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008134:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008136:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800813a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800813c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8008140:	e780      	b.n	8008044 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008142:	68a5      	ldr	r5, [r4, #8]
 8008144:	b955      	cbnz	r5, 800815c <HAL_I2C_Init+0x120>
 8008146:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800814a:	fbb0 f3f3 	udiv	r3, r0, r3
 800814e:	3301      	adds	r3, #1
 8008150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008154:	b17b      	cbz	r3, 8008176 <HAL_I2C_Init+0x13a>
 8008156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800815a:	e7c9      	b.n	80080f0 <HAL_I2C_Init+0xb4>
 800815c:	2519      	movs	r5, #25
 800815e:	436b      	muls	r3, r5
 8008160:	fbb0 f3f3 	udiv	r3, r0, r3
 8008164:	3301      	adds	r3, #1
 8008166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800816a:	b123      	cbz	r3, 8008176 <HAL_I2C_Init+0x13a>
 800816c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008170:	e7be      	b.n	80080f0 <HAL_I2C_Init+0xb4>
 8008172:	2304      	movs	r3, #4
 8008174:	e7bc      	b.n	80080f0 <HAL_I2C_Init+0xb4>
 8008176:	2301      	movs	r3, #1
 8008178:	e7ba      	b.n	80080f0 <HAL_I2C_Init+0xb4>
 800817a:	bf00      	nop
 800817c:	000186a0 	.word	0x000186a0
 8008180:	001e847f 	.word	0x001e847f
 8008184:	003d08ff 	.word	0x003d08ff
 8008188:	000f4240 	.word	0x000f4240

0800818c <HAL_I2C_Master_Transmit>:
{
 800818c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008190:	4604      	mov	r4, r0
 8008192:	b085      	sub	sp, #20
 8008194:	4698      	mov	r8, r3
 8008196:	460d      	mov	r5, r1
 8008198:	4691      	mov	r9, r2
 800819a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800819c:	f7ff f988 	bl	80074b0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80081a0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80081a4:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80081a6:	2b20      	cmp	r3, #32
 80081a8:	d004      	beq.n	80081b4 <HAL_I2C_Master_Transmit+0x28>
    return HAL_BUSY;
 80081aa:	2502      	movs	r5, #2
}
 80081ac:	4628      	mov	r0, r5
 80081ae:	b005      	add	sp, #20
 80081b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80081b4:	9000      	str	r0, [sp, #0]
 80081b6:	2319      	movs	r3, #25
 80081b8:	2201      	movs	r2, #1
 80081ba:	4620      	mov	r0, r4
 80081bc:	495b      	ldr	r1, [pc, #364]	; (800832c <HAL_I2C_Master_Transmit+0x1a0>)
 80081be:	f7ff fee4 	bl	8007f8a <I2C_WaitOnFlagUntilTimeout>
 80081c2:	2800      	cmp	r0, #0
 80081c4:	d1f1      	bne.n	80081aa <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 80081c6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d0ed      	beq.n	80081aa <HAL_I2C_Master_Transmit+0x1e>
 80081ce:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80081d0:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 80081d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80081d6:	680b      	ldr	r3, [r1, #0]
 80081d8:	07da      	lsls	r2, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80081da:	bf5e      	ittt	pl
 80081dc:	680b      	ldrpl	r3, [r1, #0]
 80081de:	f043 0301 	orrpl.w	r3, r3, #1
 80081e2:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80081e4:	680b      	ldr	r3, [r1, #0]
 80081e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081ea:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80081ec:	2321      	movs	r3, #33	; 0x21
 80081ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80081f2:	2310      	movs	r3, #16
 80081f4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80081f8:	2300      	movs	r3, #0
 80081fa:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80081fc:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008200:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8008202:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8008206:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008208:	4b49      	ldr	r3, [pc, #292]	; (8008330 <HAL_I2C_Master_Transmit+0x1a4>)
 800820a:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800820c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800820e:	2b08      	cmp	r3, #8
 8008210:	d004      	beq.n	800821c <HAL_I2C_Master_Transmit+0x90>
 8008212:	2b01      	cmp	r3, #1
 8008214:	d002      	beq.n	800821c <HAL_I2C_Master_Transmit+0x90>
 8008216:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800821a:	d104      	bne.n	8008226 <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800821c:	680b      	ldr	r3, [r1, #0]
 800821e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008222:	600b      	str	r3, [r1, #0]
 8008224:	e002      	b.n	800822c <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008226:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008228:	2b12      	cmp	r3, #18
 800822a:	d0f7      	beq.n	800821c <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800822c:	2200      	movs	r2, #0
 800822e:	463b      	mov	r3, r7
 8008230:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008234:	4620      	mov	r0, r4
 8008236:	9600      	str	r6, [sp, #0]
 8008238:	f7ff fea7 	bl	8007f8a <I2C_WaitOnFlagUntilTimeout>
 800823c:	6822      	ldr	r2, [r4, #0]
 800823e:	b138      	cbz	r0, 8008250 <HAL_I2C_Master_Transmit+0xc4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008240:	6813      	ldr	r3, [r2, #0]
 8008242:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008244:	bf44      	itt	mi
 8008246:	f44f 7300 	movmi.w	r3, #512	; 0x200
 800824a:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800824c:	2501      	movs	r5, #1
 800824e:	e7ad      	b.n	80081ac <HAL_I2C_Master_Transmit+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008250:	6923      	ldr	r3, [r4, #16]
 8008252:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008256:	d121      	bne.n	800829c <HAL_I2C_Master_Transmit+0x110>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008258:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800825c:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800825e:	4633      	mov	r3, r6
 8008260:	463a      	mov	r2, r7
 8008262:	4620      	mov	r0, r4
 8008264:	4933      	ldr	r1, [pc, #204]	; (8008334 <HAL_I2C_Master_Transmit+0x1a8>)
 8008266:	f7ff fe00 	bl	8007e6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800826a:	4605      	mov	r5, r0
 800826c:	2800      	cmp	r0, #0
 800826e:	d1ed      	bne.n	800824c <HAL_I2C_Master_Transmit+0xc0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	9003      	str	r0, [sp, #12]
 8008274:	695a      	ldr	r2, [r3, #20]
 8008276:	9203      	str	r2, [sp, #12]
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	9303      	str	r3, [sp, #12]
 800827c:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 800827e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008280:	b9f3      	cbnz	r3, 80082c0 <HAL_I2C_Master_Transmit+0x134>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008282:	6821      	ldr	r1, [r4, #0]
 8008284:	680a      	ldr	r2, [r1, #0]
 8008286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800828a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800828c:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800828e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8008292:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008296:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800829a:	e787      	b.n	80081ac <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800829c:	11eb      	asrs	r3, r5, #7
 800829e:	f003 0306 	and.w	r3, r3, #6
 80082a2:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80082a6:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80082a8:	4620      	mov	r0, r4
 80082aa:	4633      	mov	r3, r6
 80082ac:	463a      	mov	r2, r7
 80082ae:	4922      	ldr	r1, [pc, #136]	; (8008338 <HAL_I2C_Master_Transmit+0x1ac>)
 80082b0:	f7ff fddb 	bl	8007e6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082b4:	2800      	cmp	r0, #0
 80082b6:	d1c9      	bne.n	800824c <HAL_I2C_Master_Transmit+0xc0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80082b8:	6823      	ldr	r3, [r4, #0]
 80082ba:	b2ed      	uxtb	r5, r5
 80082bc:	611d      	str	r5, [r3, #16]
 80082be:	e7ce      	b.n	800825e <HAL_I2C_Master_Transmit+0xd2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082c0:	4632      	mov	r2, r6
 80082c2:	4639      	mov	r1, r7
 80082c4:	4620      	mov	r0, r4
 80082c6:	f7ff fe92 	bl	8007fee <I2C_WaitOnTXEFlagUntilTimeout>
 80082ca:	b140      	cbz	r0, 80082de <HAL_I2C_Master_Transmit+0x152>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082ce:	2b04      	cmp	r3, #4
 80082d0:	d1bc      	bne.n	800824c <HAL_I2C_Master_Transmit+0xc0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082d2:	6822      	ldr	r2, [r4, #0]
 80082d4:	6813      	ldr	r3, [r2, #0]
 80082d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082da:	6013      	str	r3, [r2, #0]
 80082dc:	e7b6      	b.n	800824c <HAL_I2C_Master_Transmit+0xc0>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80082de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082e0:	6820      	ldr	r0, [r4, #0]
 80082e2:	461a      	mov	r2, r3
 80082e4:	f812 1b01 	ldrb.w	r1, [r2], #1
 80082e8:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 80082ea:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80082ec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80082ee:	3a01      	subs	r2, #1
 80082f0:	b292      	uxth	r2, r2
 80082f2:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80082f4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80082f6:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 80082fa:	1e51      	subs	r1, r2, #1
 80082fc:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80082fe:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 8008302:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008304:	d00a      	beq.n	800831c <HAL_I2C_Master_Transmit+0x190>
 8008306:	b149      	cbz	r1, 800831c <HAL_I2C_Master_Transmit+0x190>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008308:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 800830a:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800830c:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 800830e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8008310:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8008312:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8008314:	3b01      	subs	r3, #1
 8008316:	b29b      	uxth	r3, r3
 8008318:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800831a:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800831c:	4632      	mov	r2, r6
 800831e:	4639      	mov	r1, r7
 8008320:	4620      	mov	r0, r4
 8008322:	f7ff fddd 	bl	8007ee0 <I2C_WaitOnBTFFlagUntilTimeout>
 8008326:	2800      	cmp	r0, #0
 8008328:	d0a9      	beq.n	800827e <HAL_I2C_Master_Transmit+0xf2>
 800832a:	e7cf      	b.n	80082cc <HAL_I2C_Master_Transmit+0x140>
 800832c:	00100002 	.word	0x00100002
 8008330:	ffff0000 	.word	0xffff0000
 8008334:	00010002 	.word	0x00010002
 8008338:	00010008 	.word	0x00010008

0800833c <HAL_I2C_Master_Receive>:
{
 800833c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008340:	4698      	mov	r8, r3
  __IO uint32_t count = 0U;
 8008342:	2300      	movs	r3, #0
{
 8008344:	4604      	mov	r4, r0
 8008346:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8008348:	9302      	str	r3, [sp, #8]
{
 800834a:	460d      	mov	r5, r1
 800834c:	4691      	mov	r9, r2
 800834e:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8008350:	f7ff f8ae 	bl	80074b0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008354:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8008358:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800835a:	2b20      	cmp	r3, #32
 800835c:	d004      	beq.n	8008368 <HAL_I2C_Master_Receive+0x2c>
    return HAL_BUSY;
 800835e:	2502      	movs	r5, #2
}
 8008360:	4628      	mov	r0, r5
 8008362:	b009      	add	sp, #36	; 0x24
 8008364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008368:	9000      	str	r0, [sp, #0]
 800836a:	2319      	movs	r3, #25
 800836c:	2201      	movs	r2, #1
 800836e:	4620      	mov	r0, r4
 8008370:	498f      	ldr	r1, [pc, #572]	; (80085b0 <HAL_I2C_Master_Receive+0x274>)
 8008372:	f7ff fe0a 	bl	8007f8a <I2C_WaitOnFlagUntilTimeout>
 8008376:	2800      	cmp	r0, #0
 8008378:	d1f1      	bne.n	800835e <HAL_I2C_Master_Receive+0x22>
    __HAL_LOCK(hi2c);
 800837a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800837e:	2b01      	cmp	r3, #1
 8008380:	d0ed      	beq.n	800835e <HAL_I2C_Master_Receive+0x22>
 8008382:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008384:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8008386:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800838a:	680b      	ldr	r3, [r1, #0]
 800838c:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800838e:	bf5e      	ittt	pl
 8008390:	680b      	ldrpl	r3, [r1, #0]
 8008392:	f043 0301 	orrpl.w	r3, r3, #1
 8008396:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008398:	680b      	ldr	r3, [r1, #0]
 800839a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800839e:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80083a0:	2322      	movs	r3, #34	; 0x22
 80083a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80083a6:	2310      	movs	r3, #16
 80083a8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80083ac:	2300      	movs	r3, #0
 80083ae:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80083b0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80083b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80083b6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80083ba:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80083bc:	4b7d      	ldr	r3, [pc, #500]	; (80085b4 <HAL_I2C_Master_Receive+0x278>)
 80083be:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80083c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083c2:	680a      	ldr	r2, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80083c4:	2b08      	cmp	r3, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083ca:	600a      	str	r2, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80083cc:	d004      	beq.n	80083d8 <HAL_I2C_Master_Receive+0x9c>
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d002      	beq.n	80083d8 <HAL_I2C_Master_Receive+0x9c>
 80083d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80083d6:	d104      	bne.n	80083e2 <HAL_I2C_Master_Receive+0xa6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083d8:	680b      	ldr	r3, [r1, #0]
 80083da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083de:	600b      	str	r3, [r1, #0]
 80083e0:	e002      	b.n	80083e8 <HAL_I2C_Master_Receive+0xac>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80083e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80083e4:	2b11      	cmp	r3, #17
 80083e6:	d0f7      	beq.n	80083d8 <HAL_I2C_Master_Receive+0x9c>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80083e8:	463b      	mov	r3, r7
 80083ea:	2200      	movs	r2, #0
 80083ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80083f0:	4620      	mov	r0, r4
 80083f2:	9600      	str	r6, [sp, #0]
 80083f4:	f7ff fdc9 	bl	8007f8a <I2C_WaitOnFlagUntilTimeout>
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	b138      	cbz	r0, 800840c <HAL_I2C_Master_Receive+0xd0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083fc:	681b      	ldr	r3, [r3, #0]
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083fe:	05dd      	lsls	r5, r3, #23
 8008400:	d502      	bpl.n	8008408 <HAL_I2C_Master_Receive+0xcc>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008402:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008406:	6423      	str	r3, [r4, #64]	; 0x40
              return HAL_ERROR;
 8008408:	2501      	movs	r5, #1
 800840a:	e7a9      	b.n	8008360 <HAL_I2C_Master_Receive+0x24>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800840c:	6922      	ldr	r2, [r4, #16]
 800840e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8008412:	d129      	bne.n	8008468 <HAL_I2C_Master_Receive+0x12c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008414:	f045 0501 	orr.w	r5, r5, #1
 8008418:	b2ed      	uxtb	r5, r5
 800841a:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800841c:	4633      	mov	r3, r6
 800841e:	463a      	mov	r2, r7
 8008420:	4620      	mov	r0, r4
 8008422:	4965      	ldr	r1, [pc, #404]	; (80085b8 <HAL_I2C_Master_Receive+0x27c>)
 8008424:	f7ff fd21 	bl	8007e6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008428:	4605      	mov	r5, r0
 800842a:	2800      	cmp	r0, #0
 800842c:	d1ec      	bne.n	8008408 <HAL_I2C_Master_Receive+0xcc>
    if (hi2c->XferSize == 0U)
 800842e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	2a00      	cmp	r2, #0
 8008434:	d14d      	bne.n	80084d2 <HAL_I2C_Master_Receive+0x196>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008436:	9003      	str	r0, [sp, #12]
 8008438:	695a      	ldr	r2, [r3, #20]
 800843a:	9203      	str	r2, [sp, #12]
 800843c:	699a      	ldr	r2, [r3, #24]
 800843e:	9203      	str	r2, [sp, #12]
 8008440:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008448:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800844a:	f8df 8174 	ldr.w	r8, [pc, #372]	; 80085c0 <HAL_I2C_Master_Receive+0x284>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800844e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80085c4 <HAL_I2C_Master_Receive+0x288>
    while (hi2c->XferSize > 0U)
 8008452:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008454:	2b00      	cmp	r3, #0
 8008456:	d16c      	bne.n	8008532 <HAL_I2C_Master_Receive+0x1f6>
    hi2c->State = HAL_I2C_STATE_READY;
 8008458:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800845a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800845e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008462:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8008466:	e77b      	b.n	8008360 <HAL_I2C_Master_Receive+0x24>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008468:	ea4f 18e5 	mov.w	r8, r5, asr #7
 800846c:	f008 0806 	and.w	r8, r8, #6
 8008470:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8008474:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008476:	4620      	mov	r0, r4
 8008478:	4633      	mov	r3, r6
 800847a:	463a      	mov	r2, r7
 800847c:	494f      	ldr	r1, [pc, #316]	; (80085bc <HAL_I2C_Master_Receive+0x280>)
 800847e:	f7ff fcf4 	bl	8007e6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008482:	2800      	cmp	r0, #0
 8008484:	d1c0      	bne.n	8008408 <HAL_I2C_Master_Receive+0xcc>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008486:	6823      	ldr	r3, [r4, #0]
 8008488:	b2ed      	uxtb	r5, r5
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800848a:	463a      	mov	r2, r7
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800848c:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800848e:	4620      	mov	r0, r4
 8008490:	4633      	mov	r3, r6
 8008492:	4949      	ldr	r1, [pc, #292]	; (80085b8 <HAL_I2C_Master_Receive+0x27c>)
 8008494:	f7ff fce9 	bl	8007e6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008498:	4602      	mov	r2, r0
 800849a:	2800      	cmp	r0, #0
 800849c:	d1b4      	bne.n	8008408 <HAL_I2C_Master_Receive+0xcc>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	9007      	str	r0, [sp, #28]
 80084a2:	6959      	ldr	r1, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80084a4:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084a6:	9107      	str	r1, [sp, #28]
 80084a8:	6999      	ldr	r1, [r3, #24]
 80084aa:	9107      	str	r1, [sp, #28]
 80084ac:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084ae:	6819      	ldr	r1, [r3, #0]
 80084b0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80084b4:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80084b6:	463b      	mov	r3, r7
 80084b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80084bc:	9600      	str	r6, [sp, #0]
 80084be:	f7ff fd64 	bl	8007f8a <I2C_WaitOnFlagUntilTimeout>
 80084c2:	6822      	ldr	r2, [r4, #0]
 80084c4:	b108      	cbz	r0, 80084ca <HAL_I2C_Master_Receive+0x18e>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80084c6:	6813      	ldr	r3, [r2, #0]
 80084c8:	e799      	b.n	80083fe <HAL_I2C_Master_Receive+0xc2>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80084ca:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80084ce:	6113      	str	r3, [r2, #16]
 80084d0:	e7a4      	b.n	800841c <HAL_I2C_Master_Receive+0xe0>
    else if (hi2c->XferSize == 1U)
 80084d2:	2a01      	cmp	r2, #1
 80084d4:	d111      	bne.n	80084fa <HAL_I2C_Master_Receive+0x1be>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084dc:	601a      	str	r2, [r3, #0]
 80084de:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	9004      	str	r0, [sp, #16]
 80084e4:	695a      	ldr	r2, [r3, #20]
 80084e6:	9204      	str	r2, [sp, #16]
 80084e8:	699a      	ldr	r2, [r3, #24]
 80084ea:	9204      	str	r2, [sp, #16]
 80084ec:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80084f6:	b662      	cpsie	i
}
 80084f8:	e7a7      	b.n	800844a <HAL_I2C_Master_Receive+0x10e>
    else if (hi2c->XferSize == 2U)
 80084fa:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80084fc:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 80084fe:	d10e      	bne.n	800851e <HAL_I2C_Master_Receive+0x1e2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008500:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008504:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008506:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008508:	6823      	ldr	r3, [r4, #0]
 800850a:	9005      	str	r0, [sp, #20]
 800850c:	695a      	ldr	r2, [r3, #20]
 800850e:	9205      	str	r2, [sp, #20]
 8008510:	699a      	ldr	r2, [r3, #24]
 8008512:	9205      	str	r2, [sp, #20]
 8008514:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800851c:	e7ea      	b.n	80084f4 <HAL_I2C_Master_Receive+0x1b8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800851e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008522:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008524:	9006      	str	r0, [sp, #24]
 8008526:	695a      	ldr	r2, [r3, #20]
 8008528:	9206      	str	r2, [sp, #24]
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	9306      	str	r3, [sp, #24]
 800852e:	9b06      	ldr	r3, [sp, #24]
 8008530:	e78b      	b.n	800844a <HAL_I2C_Master_Receive+0x10e>
      if (hi2c->XferSize <= 3U)
 8008532:	2b03      	cmp	r3, #3
 8008534:	f200 8088 	bhi.w	8008648 <HAL_I2C_Master_Receive+0x30c>
        if (hi2c->XferSize == 1U)
 8008538:	2b01      	cmp	r3, #1
 800853a:	d116      	bne.n	800856a <HAL_I2C_Master_Receive+0x22e>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800853c:	4632      	mov	r2, r6
 800853e:	4639      	mov	r1, r7
 8008540:	4620      	mov	r0, r4
 8008542:	f7ff fcf3 	bl	8007f2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008546:	2800      	cmp	r0, #0
 8008548:	f47f af5e 	bne.w	8008408 <HAL_I2C_Master_Receive+0xcc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800854c:	6823      	ldr	r3, [r4, #0]
 800854e:	691a      	ldr	r2, [r3, #16]
 8008550:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008552:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008554:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008556:	3301      	adds	r3, #1
 8008558:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800855a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800855c:	3b01      	subs	r3, #1
 800855e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008560:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008562:	3b01      	subs	r3, #1
 8008564:	b29b      	uxth	r3, r3
 8008566:	8563      	strh	r3, [r4, #42]	; 0x2a
 8008568:	e773      	b.n	8008452 <HAL_I2C_Master_Receive+0x116>
        else if (hi2c->XferSize == 2U)
 800856a:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800856c:	f04f 0200 	mov.w	r2, #0
 8008570:	463b      	mov	r3, r7
 8008572:	4641      	mov	r1, r8
 8008574:	4620      	mov	r0, r4
 8008576:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8008578:	d126      	bne.n	80085c8 <HAL_I2C_Master_Receive+0x28c>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800857a:	f7ff fd06 	bl	8007f8a <I2C_WaitOnFlagUntilTimeout>
 800857e:	2800      	cmp	r0, #0
 8008580:	f47f af42 	bne.w	8008408 <HAL_I2C_Master_Receive+0xcc>
 8008584:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800858e:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008590:	691a      	ldr	r2, [r3, #16]
 8008592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008594:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008598:	3301      	adds	r3, #1
 800859a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800859c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800859e:	3b01      	subs	r3, #1
 80085a0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80085a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80085a4:	3b01      	subs	r3, #1
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80085aa:	b662      	cpsie	i
 80085ac:	e7ce      	b.n	800854c <HAL_I2C_Master_Receive+0x210>
 80085ae:	bf00      	nop
 80085b0:	00100002 	.word	0x00100002
 80085b4:	ffff0000 	.word	0xffff0000
 80085b8:	00010002 	.word	0x00010002
 80085bc:	00010008 	.word	0x00010008
 80085c0:	00010004 	.word	0x00010004
 80085c4:	20000068 	.word	0x20000068
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80085c8:	f7ff fcdf 	bl	8007f8a <I2C_WaitOnFlagUntilTimeout>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	f47f af1b 	bne.w	8008408 <HAL_I2C_Master_Receive+0xcc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085d2:	6822      	ldr	r2, [r4, #0]
 80085d4:	6813      	ldr	r3, [r2, #0]
 80085d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085da:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80085dc:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	691a      	ldr	r2, [r3, #16]
 80085e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085e4:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80085e6:	f246 12a8 	movw	r2, #25000	; 0x61a8
          hi2c->pBuffPtr++;
 80085ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80085ec:	1c4b      	adds	r3, r1, #1
 80085ee:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80085f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80085f2:	3b01      	subs	r3, #1
 80085f4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80085f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80085f8:	3b01      	subs	r3, #1
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80085fe:	f8d9 3000 	ldr.w	r3, [r9]
 8008602:	fbb3 f2f2 	udiv	r2, r3, r2
 8008606:	2323      	movs	r3, #35	; 0x23
 8008608:	4353      	muls	r3, r2
 800860a:	9302      	str	r3, [sp, #8]
            count--;
 800860c:	9b02      	ldr	r3, [sp, #8]
 800860e:	3b01      	subs	r3, #1
 8008610:	9302      	str	r3, [sp, #8]
            if (count == 0U)
 8008612:	9b02      	ldr	r3, [sp, #8]
 8008614:	b96b      	cbnz	r3, 8008632 <HAL_I2C_Master_Receive+0x2f6>
              hi2c->State               = HAL_I2C_STATE_READY;
 8008616:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008618:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800861a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800861e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008622:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008624:	f042 0220 	orr.w	r2, r2, #32
 8008628:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800862a:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 800862c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8008630:	e6ea      	b.n	8008408 <HAL_I2C_Master_Receive+0xcc>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	695a      	ldr	r2, [r3, #20]
 8008636:	0750      	lsls	r0, r2, #29
 8008638:	d5e8      	bpl.n	800860c <HAL_I2C_Master_Receive+0x2d0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008640:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	704b      	strb	r3, [r1, #1]
 8008646:	e7a6      	b.n	8008596 <HAL_I2C_Master_Receive+0x25a>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008648:	4632      	mov	r2, r6
 800864a:	4639      	mov	r1, r7
 800864c:	4620      	mov	r0, r4
 800864e:	f7ff fc6d 	bl	8007f2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008652:	2800      	cmp	r0, #0
 8008654:	f47f aed8 	bne.w	8008408 <HAL_I2C_Master_Receive+0xcc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008658:	6823      	ldr	r3, [r4, #0]
 800865a:	691a      	ldr	r2, [r3, #16]
 800865c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800865e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008660:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008662:	1c53      	adds	r3, r2, #1
 8008664:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8008666:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008668:	3b01      	subs	r3, #1
 800866a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800866c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800866e:	3b01      	subs	r3, #1
 8008670:	b29b      	uxth	r3, r3
 8008672:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008674:	6823      	ldr	r3, [r4, #0]
 8008676:	6959      	ldr	r1, [r3, #20]
 8008678:	0749      	lsls	r1, r1, #29
 800867a:	f57f aeea 	bpl.w	8008452 <HAL_I2C_Master_Receive+0x116>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	7053      	strb	r3, [r2, #1]
 8008682:	e767      	b.n	8008554 <HAL_I2C_Master_Receive+0x218>

08008684 <HAL_I2C_MasterTxCpltCallback>:
 8008684:	4770      	bx	lr

08008686 <HAL_I2C_MasterRxCpltCallback>:
 8008686:	4770      	bx	lr

08008688 <HAL_I2C_SlaveTxCpltCallback>:
 8008688:	4770      	bx	lr

0800868a <HAL_I2C_SlaveRxCpltCallback>:
 800868a:	4770      	bx	lr

0800868c <HAL_I2C_AddrCallback>:
}
 800868c:	4770      	bx	lr

0800868e <HAL_I2C_ListenCpltCallback>:
 800868e:	4770      	bx	lr

08008690 <HAL_I2C_MemTxCpltCallback>:
 8008690:	4770      	bx	lr

08008692 <I2C_MemoryTransmit_TXE_BTF>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008692:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8008696:	b508      	push	{r3, lr}
  if (hi2c->EventCount == 0U)
 8008698:	6d03      	ldr	r3, [r0, #80]	; 0x50
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800869a:	b2d2      	uxtb	r2, r2
  if (hi2c->EventCount == 0U)
 800869c:	b983      	cbnz	r3, 80086c0 <I2C_MemoryTransmit_TXE_BTF+0x2e>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800869e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80086a0:	6802      	ldr	r2, [r0, #0]
 80086a2:	2b01      	cmp	r3, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80086a4:	6c83      	ldr	r3, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80086a6:	d105      	bne.n	80086b4 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 80086ac:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80086ae:	3302      	adds	r3, #2
      hi2c->EventCount++;
 80086b0:	6503      	str	r3, [r0, #80]	; 0x50
}
 80086b2:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80086b4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80086b8:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 80086ba:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80086bc:	3301      	adds	r3, #1
 80086be:	e7f7      	b.n	80086b0 <I2C_MemoryTransmit_TXE_BTF+0x1e>
  else if (hi2c->EventCount == 1U)
 80086c0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d103      	bne.n	80086ce <I2C_MemoryTransmit_TXE_BTF+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80086c6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80086c8:	6802      	ldr	r2, [r0, #0]
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	e7f4      	b.n	80086b8 <I2C_MemoryTransmit_TXE_BTF+0x26>
  else if (hi2c->EventCount == 2U)
 80086ce:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d1ee      	bne.n	80086b2 <I2C_MemoryTransmit_TXE_BTF+0x20>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80086d4:	2a22      	cmp	r2, #34	; 0x22
 80086d6:	d105      	bne.n	80086e4 <I2C_MemoryTransmit_TXE_BTF+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80086d8:	6802      	ldr	r2, [r0, #0]
 80086da:	6813      	ldr	r3, [r2, #0]
 80086dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086e0:	6013      	str	r3, [r2, #0]
 80086e2:	e7e6      	b.n	80086b2 <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80086e4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	b163      	cbz	r3, 8008704 <I2C_MemoryTransmit_TXE_BTF+0x72>
 80086ea:	2a21      	cmp	r2, #33	; 0x21
 80086ec:	d10a      	bne.n	8008704 <I2C_MemoryTransmit_TXE_BTF+0x72>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80086ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80086f0:	6802      	ldr	r2, [r0, #0]
 80086f2:	f813 1b01 	ldrb.w	r1, [r3], #1
 80086f6:	6111      	str	r1, [r2, #16]
      hi2c->pBuffPtr++;
 80086f8:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 80086fa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80086fc:	3b01      	subs	r3, #1
 80086fe:	b29b      	uxth	r3, r3
 8008700:	8543      	strh	r3, [r0, #42]	; 0x2a
 8008702:	e7d6      	b.n	80086b2 <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008704:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8008706:	b29b      	uxth	r3, r3
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1d2      	bne.n	80086b2 <I2C_MemoryTransmit_TXE_BTF+0x20>
 800870c:	2a21      	cmp	r2, #33	; 0x21
 800870e:	d1d0      	bne.n	80086b2 <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008710:	6802      	ldr	r2, [r0, #0]
 8008712:	6851      	ldr	r1, [r2, #4]
 8008714:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8008718:	6051      	str	r1, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800871a:	6811      	ldr	r1, [r2, #0]
 800871c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8008720:	6011      	str	r1, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8008722:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8008724:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008726:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800872a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800872e:	f7ff ffaf 	bl	8008690 <HAL_I2C_MemTxCpltCallback>
}
 8008732:	e7be      	b.n	80086b2 <I2C_MemoryTransmit_TXE_BTF+0x20>

08008734 <HAL_I2C_MemRxCpltCallback>:
 8008734:	4770      	bx	lr

08008736 <HAL_I2C_ErrorCallback>:
 8008736:	4770      	bx	lr

08008738 <HAL_I2C_AbortCpltCallback>:
 8008738:	4770      	bx	lr
	...

0800873c <I2C_DMAAbort>:
  __IO uint32_t count = 0U;
 800873c:	2300      	movs	r3, #0
{
 800873e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008740:	6a40      	ldr	r0, [r0, #36]	; 0x24
  __IO uint32_t count = 0U;
 8008742:	9301      	str	r3, [sp, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008744:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008748:	4b2b      	ldr	r3, [pc, #172]	; (80087f8 <I2C_DMAAbort+0xbc>)
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800874a:	b2d1      	uxtb	r1, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800874c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	fbb3 f2f2 	udiv	r2, r3, r2
 8008756:	2323      	movs	r3, #35	; 0x23
 8008758:	4353      	muls	r3, r2
 800875a:	9301      	str	r3, [sp, #4]
 800875c:	6803      	ldr	r3, [r0, #0]
    if (count == 0U)
 800875e:	9a01      	ldr	r2, [sp, #4]
 8008760:	bb42      	cbnz	r2, 80087b4 <I2C_DMAAbort+0x78>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008762:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008764:	f042 0220 	orr.w	r2, r2, #32
 8008768:	6402      	str	r2, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 800876a:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800876c:	b10d      	cbz	r5, 8008772 <I2C_DMAAbort+0x36>
    hi2c->hdmatx->XferCpltCallback = NULL;
 800876e:	2200      	movs	r2, #0
 8008770:	62aa      	str	r2, [r5, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8008772:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8008774:	b10c      	cbz	r4, 800877a <I2C_DMAAbort+0x3e>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008776:	2200      	movs	r2, #0
 8008778:	62a2      	str	r2, [r4, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008780:	601a      	str	r2, [r3, #0]
  hi2c->XferCount = 0U;
 8008782:	2200      	movs	r2, #0
 8008784:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8008786:	b105      	cbz	r5, 800878a <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008788:	636a      	str	r2, [r5, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 800878a:	b104      	cbz	r4, 800878e <I2C_DMAAbort+0x52>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800878c:	6362      	str	r2, [r4, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	f022 0201 	bic.w	r2, r2, #1
 8008794:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008796:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800879a:	2a60      	cmp	r2, #96	; 0x60
 800879c:	d111      	bne.n	80087c2 <I2C_DMAAbort+0x86>
    hi2c->State         = HAL_I2C_STATE_READY;
 800879e:	2320      	movs	r3, #32
 80087a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80087a4:	2300      	movs	r3, #0
 80087a6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80087aa:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80087ac:	f7ff ffc4 	bl	8008738 <HAL_I2C_AbortCpltCallback>
}
 80087b0:	b003      	add	sp, #12
 80087b2:	bd30      	pop	{r4, r5, pc}
    count--;
 80087b4:	9a01      	ldr	r2, [sp, #4]
 80087b6:	3a01      	subs	r2, #1
 80087b8:	9201      	str	r2, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	0592      	lsls	r2, r2, #22
 80087be:	d4ce      	bmi.n	800875e <I2C_DMAAbort+0x22>
 80087c0:	e7d3      	b.n	800876a <I2C_DMAAbort+0x2e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80087c2:	f001 0228 	and.w	r2, r1, #40	; 0x28
 80087c6:	2a28      	cmp	r2, #40	; 0x28
 80087c8:	d10e      	bne.n	80087e8 <I2C_DMAAbort+0xac>
      __HAL_I2C_ENABLE(hi2c);
 80087ca:	6819      	ldr	r1, [r3, #0]
 80087cc:	f041 0101 	orr.w	r1, r1, #1
 80087d0:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087d2:	6819      	ldr	r1, [r3, #0]
 80087d4:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80087d8:	6019      	str	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80087da:	2300      	movs	r3, #0
 80087dc:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80087de:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 80087e2:	f7ff ffa8 	bl	8008736 <HAL_I2C_ErrorCallback>
}
 80087e6:	e7e3      	b.n	80087b0 <I2C_DMAAbort+0x74>
      hi2c->State = HAL_I2C_STATE_READY;
 80087e8:	2320      	movs	r3, #32
 80087ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087ee:	2300      	movs	r3, #0
 80087f0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80087f4:	e7f5      	b.n	80087e2 <I2C_DMAAbort+0xa6>
 80087f6:	bf00      	nop
 80087f8:	20000068 	.word	0x20000068

080087fc <I2C_ITError>:
{
 80087fc:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80087fe:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008802:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
{
 8008806:	4604      	mov	r4, r0
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008808:	2b10      	cmp	r3, #16
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800880a:	b2d9      	uxtb	r1, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800880c:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800880e:	6803      	ldr	r3, [r0, #0]
 8008810:	d001      	beq.n	8008816 <I2C_ITError+0x1a>
 8008812:	2940      	cmp	r1, #64	; 0x40
 8008814:	d113      	bne.n	800883e <I2C_ITError+0x42>
 8008816:	2a22      	cmp	r2, #34	; 0x22
 8008818:	d111      	bne.n	800883e <I2C_ITError+0x42>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800881a:	6819      	ldr	r1, [r3, #0]
 800881c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8008820:	6019      	str	r1, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008822:	6859      	ldr	r1, [r3, #4]
 8008824:	f411 6100 	ands.w	r1, r1, #2048	; 0x800
 8008828:	d106      	bne.n	8008838 <I2C_ITError+0x3c>
 800882a:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 800882c:	bf1e      	ittt	ne
 800882e:	2220      	movne	r2, #32
 8008830:	f884 203d 	strbne.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008834:	f884 103e 	strbne.w	r1, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8008838:	2200      	movs	r2, #0
 800883a:	6322      	str	r2, [r4, #48]	; 0x30
 800883c:	e007      	b.n	800884e <I2C_ITError+0x52>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800883e:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8008842:	2928      	cmp	r1, #40	; 0x28
 8008844:	d1ed      	bne.n	8008822 <I2C_ITError+0x26>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008846:	2200      	movs	r2, #0
 8008848:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800884a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8008854:	d04f      	beq.n	80088f6 <I2C_ITError+0xfa>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008856:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008858:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800885a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800885e:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008860:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8008864:	2b01      	cmp	r3, #1
 8008866:	4b37      	ldr	r3, [pc, #220]	; (8008944 <I2C_ITError+0x148>)
 8008868:	d02b      	beq.n	80088c2 <I2C_ITError+0xc6>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800886a:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800886c:	f7ff f86e 	bl	800794c <HAL_DMA_Abort_IT>
 8008870:	b150      	cbz	r0, 8008888 <I2C_ITError+0x8c>
        __HAL_I2C_DISABLE(hi2c);
 8008872:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008874:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8008876:	6813      	ldr	r3, [r2, #0]
 8008878:	f023 0301 	bic.w	r3, r3, #1
 800887c:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800887e:	2320      	movs	r3, #32
 8008880:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008884:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008886:	4798      	blx	r3
  CurrentError = hi2c->ErrorCode;
 8008888:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800888a:	0719      	lsls	r1, r3, #28
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800888c:	bf1f      	itttt	ne
 800888e:	6822      	ldrne	r2, [r4, #0]
 8008890:	6853      	ldrne	r3, [r2, #4]
 8008892:	f423 63e0 	bicne.w	r3, r3, #1792	; 0x700
 8008896:	6053      	strne	r3, [r2, #4]
  CurrentState = hi2c->State;
 8008898:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800889c:	6c22      	ldr	r2, [r4, #64]	; 0x40
  CurrentState = hi2c->State;
 800889e:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80088a0:	0752      	lsls	r2, r2, #29
 80088a2:	d50d      	bpl.n	80088c0 <I2C_ITError+0xc4>
 80088a4:	2b28      	cmp	r3, #40	; 0x28
 80088a6:	d10b      	bne.n	80088c0 <I2C_ITError+0xc4>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80088a8:	4b27      	ldr	r3, [pc, #156]	; (8008948 <I2C_ITError+0x14c>)
    hi2c->State         = HAL_I2C_STATE_READY;
 80088aa:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80088ac:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80088ae:	2300      	movs	r3, #0
    HAL_I2C_ListenCpltCallback(hi2c);
 80088b0:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 80088b2:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80088b4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80088b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80088bc:	f7ff fee7 	bl	800868e <HAL_I2C_ListenCpltCallback>
}
 80088c0:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80088c2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80088c4:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80088c6:	f7ff f841 	bl	800794c <HAL_DMA_Abort_IT>
 80088ca:	2800      	cmp	r0, #0
 80088cc:	d0dc      	beq.n	8008888 <I2C_ITError+0x8c>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80088ce:	6823      	ldr	r3, [r4, #0]
 80088d0:	695a      	ldr	r2, [r3, #20]
 80088d2:	0651      	lsls	r1, r2, #25
 80088d4:	d505      	bpl.n	80088e2 <I2C_ITError+0xe6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088d6:	691a      	ldr	r2, [r3, #16]
 80088d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088da:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80088dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088de:	3301      	adds	r3, #1
 80088e0:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 80088e2:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80088e4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 80088e6:	6813      	ldr	r3, [r2, #0]
 80088e8:	f023 0301 	bic.w	r3, r3, #1
 80088ec:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80088ee:	2320      	movs	r3, #32
 80088f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80088f4:	e7c6      	b.n	8008884 <I2C_ITError+0x88>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80088f6:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80088fa:	2960      	cmp	r1, #96	; 0x60
 80088fc:	d115      	bne.n	800892a <I2C_ITError+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80088fe:	2120      	movs	r1, #32
 8008900:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008904:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008906:	695a      	ldr	r2, [r3, #20]
 8008908:	0652      	lsls	r2, r2, #25
 800890a:	d505      	bpl.n	8008918 <I2C_ITError+0x11c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800890c:	691a      	ldr	r2, [r3, #16]
 800890e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008910:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8008912:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008914:	3301      	adds	r3, #1
 8008916:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8008918:	6822      	ldr	r2, [r4, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800891a:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 800891c:	6813      	ldr	r3, [r2, #0]
 800891e:	f023 0301 	bic.w	r3, r3, #1
 8008922:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8008924:	f7ff ff08 	bl	8008738 <HAL_I2C_AbortCpltCallback>
 8008928:	e7ae      	b.n	8008888 <I2C_ITError+0x8c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800892a:	695a      	ldr	r2, [r3, #20]
 800892c:	0650      	lsls	r0, r2, #25
 800892e:	d505      	bpl.n	800893c <I2C_ITError+0x140>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008930:	691a      	ldr	r2, [r3, #16]
 8008932:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008934:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8008936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008938:	3301      	adds	r3, #1
 800893a:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 800893c:	4620      	mov	r0, r4
 800893e:	f7ff fefa 	bl	8008736 <HAL_I2C_ErrorCallback>
 8008942:	e7a1      	b.n	8008888 <I2C_ITError+0x8c>
 8008944:	0800873d 	.word	0x0800873d
 8008948:	ffff0000 	.word	0xffff0000

0800894c <HAL_I2C_EV_IRQHandler>:
{
 800894c:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800894e:	6803      	ldr	r3, [r0, #0]
{
 8008950:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008952:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008954:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008956:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800895a:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800895e:	2910      	cmp	r1, #16
{
 8008960:	b08e      	sub	sp, #56	; 0x38
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008962:	b2cd      	uxtb	r5, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008964:	b2c0      	uxtb	r0, r0
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008966:	d002      	beq.n	800896e <HAL_I2C_EV_IRQHandler+0x22>
 8008968:	2d40      	cmp	r5, #64	; 0x40
 800896a:	f040 82e0 	bne.w	8008f2e <HAL_I2C_EV_IRQHandler+0x5e2>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800896e:	6998      	ldr	r0, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008970:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008972:	f011 0f01 	tst.w	r1, #1
 8008976:	d107      	bne.n	8008988 <HAL_I2C_EV_IRQHandler+0x3c>
 8008978:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 800897c:	d002      	beq.n	8008984 <HAL_I2C_EV_IRQHandler+0x38>
 800897e:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8008982:	d150      	bne.n	8008a26 <HAL_I2C_EV_IRQHandler+0xda>
}
 8008984:	b00e      	add	sp, #56	; 0x38
 8008986:	bd70      	pop	{r4, r5, r6, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008988:	0596      	lsls	r6, r2, #22
 800898a:	d54c      	bpl.n	8008a26 <HAL_I2C_EV_IRQHandler+0xda>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800898c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800898e:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8008992:	d10c      	bne.n	80089ae <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008994:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008996:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008998:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800899c:	2a40      	cmp	r2, #64	; 0x40
 800899e:	d111      	bne.n	80089c4 <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 80089a0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80089a2:	b952      	cbnz	r2, 80089ba <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80089a4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80089a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80089aa:	611a      	str	r2, [r3, #16]
 80089ac:	e7ea      	b.n	8008984 <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80089ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80089b0:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 80089b4:	d1f0      	bne.n	8008998 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80089b6:	2208      	movs	r2, #8
 80089b8:	e7ed      	b.n	8008996 <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80089ba:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80089bc:	f042 0201 	orr.w	r2, r2, #1
 80089c0:	b2d2      	uxtb	r2, r2
 80089c2:	e7f2      	b.n	80089aa <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80089c4:	6922      	ldr	r2, [r4, #16]
 80089c6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80089ca:	d119      	bne.n	8008a00 <HAL_I2C_EV_IRQHandler+0xb4>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80089cc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80089d0:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80089d2:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80089d4:	bf16      	itet	ne
 80089d6:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80089da:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80089de:	b2d2      	uxtbne	r2, r2
 80089e0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80089e2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80089e4:	b10a      	cbz	r2, 80089ea <HAL_I2C_EV_IRQHandler+0x9e>
 80089e6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80089e8:	b92a      	cbnz	r2, 80089f6 <HAL_I2C_EV_IRQHandler+0xaa>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80089ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80089ec:	2a00      	cmp	r2, #0
 80089ee:	d0c9      	beq.n	8008984 <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80089f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80089f2:	2a00      	cmp	r2, #0
 80089f4:	d0c6      	beq.n	8008984 <HAL_I2C_EV_IRQHandler+0x38>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80089f6:	685a      	ldr	r2, [r3, #4]
 80089f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80089fc:	605a      	str	r2, [r3, #4]
 80089fe:	e7c1      	b.n	8008984 <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->EventCount == 0U)
 8008a00:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008a02:	b932      	cbnz	r2, 8008a12 <HAL_I2C_EV_IRQHandler+0xc6>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008a04:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008a06:	11d2      	asrs	r2, r2, #7
 8008a08:	f002 0206 	and.w	r2, r2, #6
 8008a0c:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8008a10:	e7cb      	b.n	80089aa <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 8008a12:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008a14:	2a01      	cmp	r2, #1
 8008a16:	d1b5      	bne.n	8008984 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008a18:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008a1a:	11d2      	asrs	r2, r2, #7
 8008a1c:	f002 0206 	and.w	r2, r2, #6
 8008a20:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8008a24:	e7c1      	b.n	80089aa <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a26:	070e      	lsls	r6, r1, #28
 8008a28:	d50e      	bpl.n	8008a48 <HAL_I2C_EV_IRQHandler+0xfc>
 8008a2a:	0596      	lsls	r6, r2, #22
 8008a2c:	d50c      	bpl.n	8008a48 <HAL_I2C_EV_IRQHandler+0xfc>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008a2e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008a30:	b2d2      	uxtb	r2, r2
 8008a32:	611a      	str	r2, [r3, #16]
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8008a34:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008a36:	b912      	cbnz	r2, 8008a3e <HAL_I2C_EV_IRQHandler+0xf2>
 8008a38:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008a3a:	2900      	cmp	r1, #0
 8008a3c:	d0a2      	beq.n	8008984 <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8008a3e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008a40:	2a00      	cmp	r2, #0
 8008a42:	d1d8      	bne.n	80089f6 <HAL_I2C_EV_IRQHandler+0xaa>
 8008a44:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008a46:	e7d3      	b.n	80089f0 <HAL_I2C_EV_IRQHandler+0xa4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a48:	078e      	lsls	r6, r1, #30
 8008a4a:	f140 80e6 	bpl.w	8008c1a <HAL_I2C_EV_IRQHandler+0x2ce>
 8008a4e:	0596      	lsls	r6, r2, #22
 8008a50:	f140 80e3 	bpl.w	8008c1a <HAL_I2C_EV_IRQHandler+0x2ce>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008a54:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008a58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008a5a:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008a5c:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008a60:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008a62:	2822      	cmp	r0, #34	; 0x22
 8008a64:	f040 80d1 	bne.w	8008c0a <HAL_I2C_EV_IRQHandler+0x2be>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008a68:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8008a6a:	b940      	cbnz	r0, 8008a7e <HAL_I2C_EV_IRQHandler+0x132>
 8008a6c:	2940      	cmp	r1, #64	; 0x40
 8008a6e:	d106      	bne.n	8008a7e <HAL_I2C_EV_IRQHandler+0x132>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a70:	9001      	str	r0, [sp, #4]
 8008a72:	695a      	ldr	r2, [r3, #20]
 8008a74:	9201      	str	r2, [sp, #4]
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	9301      	str	r3, [sp, #4]
 8008a7a:	9b01      	ldr	r3, [sp, #4]
 8008a7c:	e782      	b.n	8008984 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008a7e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008a80:	b989      	cbnz	r1, 8008aa6 <HAL_I2C_EV_IRQHandler+0x15a>
 8008a82:	6920      	ldr	r0, [r4, #16]
 8008a84:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8008a88:	d10d      	bne.n	8008aa6 <HAL_I2C_EV_IRQHandler+0x15a>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a8a:	9102      	str	r1, [sp, #8]
 8008a8c:	695a      	ldr	r2, [r3, #20]
 8008a8e:	9202      	str	r2, [sp, #8]
 8008a90:	699a      	ldr	r2, [r3, #24]
 8008a92:	9202      	str	r2, [sp, #8]
 8008a94:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a9c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008a9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008aa0:	3301      	adds	r3, #1
      hi2c->EventCount = 0U;
 8008aa2:	6523      	str	r3, [r4, #80]	; 0x50
 8008aa4:	e76e      	b.n	8008984 <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->XferCount == 0U)
 8008aa6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8008aa8:	b289      	uxth	r1, r1
 8008aaa:	b951      	cbnz	r1, 8008ac2 <HAL_I2C_EV_IRQHandler+0x176>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008aac:	9103      	str	r1, [sp, #12]
 8008aae:	695a      	ldr	r2, [r3, #20]
 8008ab0:	9203      	str	r2, [sp, #12]
 8008ab2:	699a      	ldr	r2, [r3, #24]
 8008ab4:	9203      	str	r2, [sp, #12]
 8008ab6:	9a03      	ldr	r2, [sp, #12]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008abe:	601a      	str	r2, [r3, #0]
 8008ac0:	e019      	b.n	8008af6 <HAL_I2C_EV_IRQHandler+0x1aa>
      else if (hi2c->XferCount == 1U)
 8008ac2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8008ac4:	b289      	uxth	r1, r1
 8008ac6:	2901      	cmp	r1, #1
 8008ac8:	d149      	bne.n	8008b5e <HAL_I2C_EV_IRQHandler+0x212>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008aca:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8008ace:	d11b      	bne.n	8008b08 <HAL_I2C_EV_IRQHandler+0x1bc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ad6:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8008ade:	d00c      	beq.n	8008afa <HAL_I2C_EV_IRQHandler+0x1ae>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ae6:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ae8:	2200      	movs	r2, #0
 8008aea:	9204      	str	r2, [sp, #16]
 8008aec:	695a      	ldr	r2, [r3, #20]
 8008aee:	9204      	str	r2, [sp, #16]
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	9304      	str	r3, [sp, #16]
 8008af4:	9b04      	ldr	r3, [sp, #16]
      hi2c->EventCount = 0U;
 8008af6:	2300      	movs	r3, #0
 8008af8:	e7d3      	b.n	8008aa2 <HAL_I2C_EV_IRQHandler+0x156>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008afa:	9205      	str	r2, [sp, #20]
 8008afc:	695a      	ldr	r2, [r3, #20]
 8008afe:	9205      	str	r2, [sp, #20]
 8008b00:	699a      	ldr	r2, [r3, #24]
 8008b02:	9205      	str	r2, [sp, #20]
 8008b04:	9a05      	ldr	r2, [sp, #20]
 8008b06:	e7d7      	b.n	8008ab8 <HAL_I2C_EV_IRQHandler+0x16c>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008b08:	2a08      	cmp	r2, #8
 8008b0a:	d01c      	beq.n	8008b46 <HAL_I2C_EV_IRQHandler+0x1fa>
 8008b0c:	2a20      	cmp	r2, #32
 8008b0e:	d01a      	beq.n	8008b46 <HAL_I2C_EV_IRQHandler+0x1fa>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008b10:	2d12      	cmp	r5, #18
 8008b12:	d10d      	bne.n	8008b30 <HAL_I2C_EV_IRQHandler+0x1e4>
 8008b14:	2a01      	cmp	r2, #1
 8008b16:	d116      	bne.n	8008b46 <HAL_I2C_EV_IRQHandler+0x1fa>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b1e:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b20:	2200      	movs	r2, #0
 8008b22:	9206      	str	r2, [sp, #24]
 8008b24:	695a      	ldr	r2, [r3, #20]
 8008b26:	9206      	str	r2, [sp, #24]
 8008b28:	699b      	ldr	r3, [r3, #24]
 8008b2a:	9306      	str	r3, [sp, #24]
 8008b2c:	9b06      	ldr	r3, [sp, #24]
 8008b2e:	e7e2      	b.n	8008af6 <HAL_I2C_EV_IRQHandler+0x1aa>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008b30:	2a10      	cmp	r2, #16
 8008b32:	d8f1      	bhi.n	8008b18 <HAL_I2C_EV_IRQHandler+0x1cc>
 8008b34:	499c      	ldr	r1, [pc, #624]	; (8008da8 <HAL_I2C_EV_IRQHandler+0x45c>)
 8008b36:	fa21 f202 	lsr.w	r2, r1, r2
 8008b3a:	07d0      	lsls	r0, r2, #31
 8008b3c:	d5ec      	bpl.n	8008b18 <HAL_I2C_EV_IRQHandler+0x1cc>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b44:	e7eb      	b.n	8008b1e <HAL_I2C_EV_IRQHandler+0x1d2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b4c:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b4e:	2200      	movs	r2, #0
 8008b50:	9207      	str	r2, [sp, #28]
 8008b52:	695a      	ldr	r2, [r3, #20]
 8008b54:	9207      	str	r2, [sp, #28]
 8008b56:	699a      	ldr	r2, [r3, #24]
 8008b58:	9207      	str	r2, [sp, #28]
 8008b5a:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b5c:	e7ac      	b.n	8008ab8 <HAL_I2C_EV_IRQHandler+0x16c>
      else if (hi2c->XferCount == 2U)
 8008b5e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8008b60:	b289      	uxth	r1, r1
 8008b62:	2902      	cmp	r1, #2
 8008b64:	d133      	bne.n	8008bce <HAL_I2C_EV_IRQHandler+0x282>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008b66:	2a10      	cmp	r2, #16
 8008b68:	d805      	bhi.n	8008b76 <HAL_I2C_EV_IRQHandler+0x22a>
 8008b6a:	498f      	ldr	r1, [pc, #572]	; (8008da8 <HAL_I2C_EV_IRQHandler+0x45c>)
 8008b6c:	40d1      	lsrs	r1, r2
 8008b6e:	43c9      	mvns	r1, r1
 8008b70:	f011 0101 	ands.w	r1, r1, #1
 8008b74:	d020      	beq.n	8008bb8 <HAL_I2C_EV_IRQHandler+0x26c>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b76:	6819      	ldr	r1, [r3, #0]
 8008b78:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008b7c:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b7e:	2100      	movs	r1, #0
 8008b80:	9108      	str	r1, [sp, #32]
 8008b82:	6959      	ldr	r1, [r3, #20]
 8008b84:	9108      	str	r1, [sp, #32]
 8008b86:	6999      	ldr	r1, [r3, #24]
 8008b88:	9108      	str	r1, [sp, #32]
 8008b8a:	9908      	ldr	r1, [sp, #32]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b8c:	6819      	ldr	r1, [r3, #0]
 8008b8e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008b92:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008b94:	6859      	ldr	r1, [r3, #4]
 8008b96:	0509      	lsls	r1, r1, #20
 8008b98:	d5ad      	bpl.n	8008af6 <HAL_I2C_EV_IRQHandler+0x1aa>
 8008b9a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8008b9e:	d006      	beq.n	8008bae <HAL_I2C_EV_IRQHandler+0x262>
 8008ba0:	1e51      	subs	r1, r2, #1
 8008ba2:	291f      	cmp	r1, #31
 8008ba4:	d8a7      	bhi.n	8008af6 <HAL_I2C_EV_IRQHandler+0x1aa>
 8008ba6:	4a81      	ldr	r2, [pc, #516]	; (8008dac <HAL_I2C_EV_IRQHandler+0x460>)
 8008ba8:	40ca      	lsrs	r2, r1
 8008baa:	07d2      	lsls	r2, r2, #31
 8008bac:	d5a3      	bpl.n	8008af6 <HAL_I2C_EV_IRQHandler+0x1aa>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008bae:	685a      	ldr	r2, [r3, #4]
 8008bb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008bb4:	605a      	str	r2, [r3, #4]
 8008bb6:	e79e      	b.n	8008af6 <HAL_I2C_EV_IRQHandler+0x1aa>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bb8:	6818      	ldr	r0, [r3, #0]
 8008bba:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 8008bbe:	6018      	str	r0, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bc0:	9109      	str	r1, [sp, #36]	; 0x24
 8008bc2:	6959      	ldr	r1, [r3, #20]
 8008bc4:	9109      	str	r1, [sp, #36]	; 0x24
 8008bc6:	6999      	ldr	r1, [r3, #24]
 8008bc8:	9109      	str	r1, [sp, #36]	; 0x24
 8008bca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bcc:	e7e2      	b.n	8008b94 <HAL_I2C_EV_IRQHandler+0x248>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bce:	6819      	ldr	r1, [r3, #0]
 8008bd0:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8008bd4:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008bd6:	6859      	ldr	r1, [r3, #4]
 8008bd8:	050e      	lsls	r6, r1, #20
 8008bda:	d50e      	bpl.n	8008bfa <HAL_I2C_EV_IRQHandler+0x2ae>
 8008bdc:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8008be0:	d007      	beq.n	8008bf2 <HAL_I2C_EV_IRQHandler+0x2a6>
 8008be2:	3a01      	subs	r2, #1
 8008be4:	2a1f      	cmp	r2, #31
 8008be6:	d808      	bhi.n	8008bfa <HAL_I2C_EV_IRQHandler+0x2ae>
 8008be8:	4970      	ldr	r1, [pc, #448]	; (8008dac <HAL_I2C_EV_IRQHandler+0x460>)
 8008bea:	fa21 f202 	lsr.w	r2, r1, r2
 8008bee:	07d5      	lsls	r5, r2, #31
 8008bf0:	d503      	bpl.n	8008bfa <HAL_I2C_EV_IRQHandler+0x2ae>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008bf2:	685a      	ldr	r2, [r3, #4]
 8008bf4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008bf8:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	920a      	str	r2, [sp, #40]	; 0x28
 8008bfe:	695a      	ldr	r2, [r3, #20]
 8008c00:	920a      	str	r2, [sp, #40]	; 0x28
 8008c02:	699b      	ldr	r3, [r3, #24]
 8008c04:	930a      	str	r3, [sp, #40]	; 0x28
 8008c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c08:	e775      	b.n	8008af6 <HAL_I2C_EV_IRQHandler+0x1aa>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c0e:	695a      	ldr	r2, [r3, #20]
 8008c10:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c18:	e6b4      	b.n	8008984 <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008c1a:	f010 0f04 	tst.w	r0, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008c1e:	6858      	ldr	r0, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008c20:	f000 8098 	beq.w	8008d54 <HAL_I2C_EV_IRQHandler+0x408>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008c24:	0500      	lsls	r0, r0, #20
 8008c26:	f53f aead 	bmi.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008c2a:	060e      	lsls	r6, r1, #24
 8008c2c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8008c30:	d555      	bpl.n	8008cde <HAL_I2C_EV_IRQHandler+0x392>
 8008c32:	0551      	lsls	r1, r2, #21
 8008c34:	d553      	bpl.n	8008cde <HAL_I2C_EV_IRQHandler+0x392>
 8008c36:	2800      	cmp	r0, #0
 8008c38:	d154      	bne.n	8008ce4 <HAL_I2C_EV_IRQHandler+0x398>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008c3a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008c3e:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008c40:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008c44:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008c46:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008c48:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008c4a:	bb7d      	cbnz	r5, 8008cac <HAL_I2C_EV_IRQHandler+0x360>
 8008c4c:	2a21      	cmp	r2, #33	; 0x21
 8008c4e:	d12f      	bne.n	8008cb0 <HAL_I2C_EV_IRQHandler+0x364>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008c50:	2808      	cmp	r0, #8
 8008c52:	d014      	beq.n	8008c7e <HAL_I2C_EV_IRQHandler+0x332>
 8008c54:	2820      	cmp	r0, #32
 8008c56:	d012      	beq.n	8008c7e <HAL_I2C_EV_IRQHandler+0x332>
 8008c58:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8008c5c:	d00f      	beq.n	8008c7e <HAL_I2C_EV_IRQHandler+0x332>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008c64:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008c66:	2311      	movs	r3, #17
 8008c68:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008c70:	2320      	movs	r3, #32
 8008c72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008c76:	4620      	mov	r0, r4
 8008c78:	f7ff fd04 	bl	8008684 <HAL_I2C_MasterTxCpltCallback>
 8008c7c:	e682      	b.n	8008984 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008c7e:	685a      	ldr	r2, [r3, #4]
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008c80:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008c82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008c86:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c8e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008c90:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8008c92:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8008c94:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008c96:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008c9a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c9e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008ca2:	2a40      	cmp	r2, #64	; 0x40
 8008ca4:	d1e8      	bne.n	8008c78 <HAL_I2C_EV_IRQHandler+0x32c>
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008ca6:	f7ff fcf3 	bl	8008690 <HAL_I2C_MemTxCpltCallback>
 8008caa:	e66b      	b.n	8008984 <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008cac:	2a21      	cmp	r2, #33	; 0x21
 8008cae:	d005      	beq.n	8008cbc <HAL_I2C_EV_IRQHandler+0x370>
 8008cb0:	2940      	cmp	r1, #64	; 0x40
 8008cb2:	f47f ae67 	bne.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008cb6:	2a22      	cmp	r2, #34	; 0x22
 8008cb8:	f47f ae64 	bne.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 8008cbc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008cbe:	b292      	uxth	r2, r2
 8008cc0:	b91a      	cbnz	r2, 8008cca <HAL_I2C_EV_IRQHandler+0x37e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008cc2:	685a      	ldr	r2, [r3, #4]
 8008cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cc8:	e698      	b.n	80089fc <HAL_I2C_EV_IRQHandler+0xb0>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008cca:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8008cce:	2a40      	cmp	r2, #64	; 0x40
 8008cd0:	d116      	bne.n	8008d00 <HAL_I2C_EV_IRQHandler+0x3b4>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008cd2:	4620      	mov	r0, r4
}
 8008cd4:	b00e      	add	sp, #56	; 0x38
 8008cd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008cda:	f7ff bcda 	b.w	8008692 <I2C_MemoryTransmit_TXE_BTF>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	f43f ae50 	beq.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
 8008ce4:	0592      	lsls	r2, r2, #22
 8008ce6:	f57f ae4d 	bpl.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8008cea:	2d10      	cmp	r5, #16
 8008cec:	d1f1      	bne.n	8008cd2 <HAL_I2C_EV_IRQHandler+0x386>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008cee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008cf0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8008cf4:	2a21      	cmp	r2, #33	; 0x21
 8008cf6:	f47f ae45 	bne.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 8008cfa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008cfc:	b292      	uxth	r2, r2
 8008cfe:	b14a      	cbz	r2, 8008d14 <HAL_I2C_EV_IRQHandler+0x3c8>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d00:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008d02:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008d06:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8008d08:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8008d0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	8563      	strh	r3, [r4, #42]	; 0x2a
      }
 8008d12:	e637      	b.n	8008984 <HAL_I2C_EV_IRQHandler+0x38>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008d14:	2908      	cmp	r1, #8
 8008d16:	d00d      	beq.n	8008d34 <HAL_I2C_EV_IRQHandler+0x3e8>
 8008d18:	2920      	cmp	r1, #32
 8008d1a:	d00b      	beq.n	8008d34 <HAL_I2C_EV_IRQHandler+0x3e8>
 8008d1c:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8008d20:	d008      	beq.n	8008d34 <HAL_I2C_EV_IRQHandler+0x3e8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008d22:	6859      	ldr	r1, [r3, #4]
 8008d24:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8008d28:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008d2a:	2311      	movs	r3, #17
 8008d2c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d2e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8008d32:	e79d      	b.n	8008c70 <HAL_I2C_EV_IRQHandler+0x324>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008d3a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d42:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008d44:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8008d46:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8008d48:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008d4a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d4e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008d52:	e790      	b.n	8008c76 <HAL_I2C_EV_IRQHandler+0x32a>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008d54:	0506      	lsls	r6, r0, #20
 8008d56:	f53f ae15 	bmi.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008d5a:	064d      	lsls	r5, r1, #25
 8008d5c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8008d60:	d57b      	bpl.n	8008e5a <HAL_I2C_EV_IRQHandler+0x50e>
 8008d62:	0551      	lsls	r1, r2, #21
 8008d64:	d579      	bpl.n	8008e5a <HAL_I2C_EV_IRQHandler+0x50e>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	d17a      	bne.n	8008e60 <HAL_I2C_EV_IRQHandler+0x514>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008d6a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8008d6e:	2a22      	cmp	r2, #34	; 0x22
 8008d70:	f47f ae08 	bne.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
    tmp = hi2c->XferCount;
 8008d74:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008d76:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8008d78:	2a03      	cmp	r2, #3
 8008d7a:	d919      	bls.n	8008db0 <HAL_I2C_EV_IRQHandler+0x464>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d7c:	691a      	ldr	r2, [r3, #16]
 8008d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d80:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8008d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d84:	3301      	adds	r3, #1
 8008d86:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8008d88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8008d90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	2b03      	cmp	r3, #3
 8008d96:	f47f adf5 	bne.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008d9a:	6822      	ldr	r2, [r4, #0]
 8008d9c:	6853      	ldr	r3, [r2, #4]
 8008d9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008da2:	6053      	str	r3, [r2, #4]
 8008da4:	e5ee      	b.n	8008984 <HAL_I2C_EV_IRQHandler+0x38>
 8008da6:	bf00      	nop
 8008da8:	00010014 	.word	0x00010014
 8008dac:	80008081 	.word	0x80008081
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008db0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008db2:	2902      	cmp	r1, #2
 8008db4:	f43f ade6 	beq.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
 8008db8:	2a01      	cmp	r2, #1
 8008dba:	f63f ade3 	bhi.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008dbe:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8008dc2:	4a72      	ldr	r2, [pc, #456]	; (8008f8c <HAL_I2C_EV_IRQHandler+0x640>)
  __IO uint32_t count = 0U;
 8008dc4:	900c      	str	r0, [sp, #48]	; 0x30
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008dc6:	6812      	ldr	r2, [r2, #0]
 8008dc8:	fbb2 f2f1 	udiv	r2, r2, r1
 8008dcc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008dd0:	920c      	str	r2, [sp, #48]	; 0x30
    count--;
 8008dd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dd4:	3a01      	subs	r2, #1
 8008dd6:	920c      	str	r2, [sp, #48]	; 0x30
    if (count == 0U)
 8008dd8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008dda:	b9d1      	cbnz	r1, 8008e12 <HAL_I2C_EV_IRQHandler+0x4c6>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ddc:	6c22      	ldr	r2, [r4, #64]	; 0x40
        HAL_I2C_ErrorCallback(hi2c);
 8008dde:	4620      	mov	r0, r4
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008de0:	f042 0220 	orr.w	r2, r2, #32
 8008de4:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008de6:	685a      	ldr	r2, [r3, #4]
 8008de8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008dec:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dee:	691a      	ldr	r2, [r3, #16]
 8008df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008df2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008df4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008df6:	3301      	adds	r3, #1
 8008df8:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8008dfa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008e02:	2320      	movs	r3, #32
 8008e04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e08:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008e0c:	f7ff fc93 	bl	8008736 <HAL_I2C_ErrorCallback>
 8008e10:	e5b8      	b.n	8008984 <HAL_I2C_EV_IRQHandler+0x38>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8008e18:	d1db      	bne.n	8008dd2 <HAL_I2C_EV_IRQHandler+0x486>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e1a:	6819      	ldr	r1, [r3, #0]
 8008e1c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008e20:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008e22:	6859      	ldr	r1, [r3, #4]
 8008e24:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8008e28:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e2a:	6919      	ldr	r1, [r3, #16]
 8008e2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e2e:	7019      	strb	r1, [r3, #0]
        hi2c->pBuffPtr++;
 8008e30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e32:	3301      	adds	r3, #1
 8008e34:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8008e36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008e3e:	2320      	movs	r3, #32
 8008e40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008e44:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e48:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008e4c:	2b40      	cmp	r3, #64	; 0x40
 8008e4e:	d168      	bne.n	8008f22 <HAL_I2C_EV_IRQHandler+0x5d6>
          hi2c->PreviousState = I2C_STATE_NONE;
 8008e50:	6322      	str	r2, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008e52:	4620      	mov	r0, r4
 8008e54:	f7ff fc6e 	bl	8008734 <HAL_I2C_MemRxCpltCallback>
 8008e58:	e594      	b.n	8008984 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	f43f ad92 	beq.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
 8008e60:	0592      	lsls	r2, r2, #22
 8008e62:	f57f ad8f 	bpl.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008e66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8008e68:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8008e6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008e6c:	b280      	uxth	r0, r0
 8008e6e:	2804      	cmp	r0, #4
 8008e70:	d109      	bne.n	8008e86 <HAL_I2C_EV_IRQHandler+0x53a>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008e72:	685a      	ldr	r2, [r3, #4]
 8008e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e78:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8008e7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e80:	3301      	adds	r3, #1
 8008e82:	6263      	str	r3, [r4, #36]	; 0x24
 8008e84:	e741      	b.n	8008d0a <HAL_I2C_EV_IRQHandler+0x3be>
  else if (hi2c->XferCount == 3U)
 8008e86:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8008e88:	b280      	uxth	r0, r0
 8008e8a:	2803      	cmp	r0, #3
 8008e8c:	d10c      	bne.n	8008ea8 <HAL_I2C_EV_IRQHandler+0x55c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008e8e:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008e90:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008e92:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8008e96:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008e98:	d0ef      	beq.n	8008e7a <HAL_I2C_EV_IRQHandler+0x52e>
 8008e9a:	2a02      	cmp	r2, #2
 8008e9c:	d0ed      	beq.n	8008e7a <HAL_I2C_EV_IRQHandler+0x52e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ea4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ea6:	e7e8      	b.n	8008e7a <HAL_I2C_EV_IRQHandler+0x52e>
  else if (hi2c->XferCount == 2U)
 8008ea8:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8008eaa:	b280      	uxth	r0, r0
 8008eac:	2802      	cmp	r0, #2
 8008eae:	d1e4      	bne.n	8008e7a <HAL_I2C_EV_IRQHandler+0x52e>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008eb0:	2a01      	cmp	r2, #1
 8008eb2:	d001      	beq.n	8008eb8 <HAL_I2C_EV_IRQHandler+0x56c>
 8008eb4:	2a10      	cmp	r2, #16
 8008eb6:	d128      	bne.n	8008f0a <HAL_I2C_EV_IRQHandler+0x5be>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ebe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8008ec4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008ec6:	1c53      	adds	r3, r2, #1
 8008ec8:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8008eca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ed2:	6823      	ldr	r3, [r4, #0]
 8008ed4:	691b      	ldr	r3, [r3, #16]
 8008ed6:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 8008ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008eda:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr++;
 8008edc:	3301      	adds	r3, #1
 8008ede:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8008ee0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008ee8:	6853      	ldr	r3, [r2, #4]
 8008eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eee:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008ef0:	2320      	movs	r3, #32
 8008ef2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008ef6:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8008efa:	2b40      	cmp	r3, #64	; 0x40
 8008efc:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f00:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008f04:	d10d      	bne.n	8008f22 <HAL_I2C_EV_IRQHandler+0x5d6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008f06:	6323      	str	r3, [r4, #48]	; 0x30
 8008f08:	e7a3      	b.n	8008e52 <HAL_I2C_EV_IRQHandler+0x506>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008f0a:	2a04      	cmp	r2, #4
 8008f0c:	d001      	beq.n	8008f12 <HAL_I2C_EV_IRQHandler+0x5c6>
 8008f0e:	2a02      	cmp	r2, #2
 8008f10:	d103      	bne.n	8008f1a <HAL_I2C_EV_IRQHandler+0x5ce>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f18:	e7d1      	b.n	8008ebe <HAL_I2C_EV_IRQHandler+0x572>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f20:	e7cd      	b.n	8008ebe <HAL_I2C_EV_IRQHandler+0x572>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008f22:	2312      	movs	r3, #18
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008f24:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008f26:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008f28:	f7ff fbad 	bl	8008686 <HAL_I2C_MasterRxCpltCallback>
 8008f2c:	e52a      	b.n	8008984 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008f2e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008f30:	b311      	cbz	r1, 8008f78 <HAL_I2C_EV_IRQHandler+0x62c>
  uint32_t sr2itflags               = 0U;
 8008f32:	2500      	movs	r5, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008f34:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008f36:	078e      	lsls	r6, r1, #30
 8008f38:	d52a      	bpl.n	8008f90 <HAL_I2C_EV_IRQHandler+0x644>
 8008f3a:	0596      	lsls	r6, r2, #22
 8008f3c:	d528      	bpl.n	8008f90 <HAL_I2C_EV_IRQHandler+0x644>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008f3e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008f40:	b102      	cbz	r2, 8008f44 <HAL_I2C_EV_IRQHandler+0x5f8>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008f42:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f44:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8008f48:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8008f4c:	2a28      	cmp	r2, #40	; 0x28
 8008f4e:	d116      	bne.n	8008f7e <HAL_I2C_EV_IRQHandler+0x632>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008f50:	685a      	ldr	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008f52:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f5a:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008f5c:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 8008f5e:	f04f 0300 	mov.w	r3, #0
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008f62:	4620      	mov	r0, r4
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008f64:	bf54      	ite	pl
 8008f66:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008f68:	8b22      	ldrhmi	r2, [r4, #24]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008f6a:	f001 0101 	and.w	r1, r1, #1
    __HAL_UNLOCK(hi2c);
 8008f6e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008f72:	f7ff fb8b 	bl	800868c <HAL_I2C_AddrCallback>
 8008f76:	e505      	b.n	8008984 <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008f78:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008f7a:	6959      	ldr	r1, [r3, #20]
 8008f7c:	e7db      	b.n	8008f36 <HAL_I2C_EV_IRQHandler+0x5ea>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008f7e:	f06f 0202 	mvn.w	r2, #2
 8008f82:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8008f84:	2300      	movs	r3, #0
 8008f86:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8008f8a:	e4fb      	b.n	8008984 <HAL_I2C_EV_IRQHandler+0x38>
 8008f8c:	20000068 	.word	0x20000068
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008f90:	06ce      	lsls	r6, r1, #27
 8008f92:	f140 80b1 	bpl.w	80090f8 <HAL_I2C_EV_IRQHandler+0x7ac>
 8008f96:	0595      	lsls	r5, r2, #22
 8008f98:	f140 80ae 	bpl.w	80090f8 <HAL_I2C_EV_IRQHandler+0x7ac>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008f9c:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008fa0:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008fa2:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008fa4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008fa8:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008faa:	2200      	movs	r2, #0
 8008fac:	920d      	str	r2, [sp, #52]	; 0x34
 8008fae:	695a      	ldr	r2, [r3, #20]
 8008fb0:	920d      	str	r2, [sp, #52]	; 0x34
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	f042 0201 	orr.w	r2, r2, #1
 8008fb8:	601a      	str	r2, [r3, #0]
 8008fba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fc2:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008fc4:	685a      	ldr	r2, [r3, #4]
 8008fc6:	0512      	lsls	r2, r2, #20
 8008fc8:	d520      	bpl.n	800900c <HAL_I2C_EV_IRQHandler+0x6c0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008fca:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8008fce:	2a22      	cmp	r2, #34	; 0x22
 8008fd0:	d14a      	bne.n	8009068 <HAL_I2C_EV_IRQHandler+0x71c>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008fd2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008fd4:	6802      	ldr	r2, [r0, #0]
 8008fd6:	6852      	ldr	r2, [r2, #4]
 8008fd8:	b292      	uxth	r2, r2
 8008fda:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8008fdc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008fde:	b292      	uxth	r2, r2
 8008fe0:	b11a      	cbz	r2, 8008fea <HAL_I2C_EV_IRQHandler+0x69e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008fe2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008fe4:	f042 0204 	orr.w	r2, r2, #4
 8008fe8:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ff0:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008ff2:	f7fe fcf1 	bl	80079d8 <HAL_DMA_GetState>
 8008ff6:	2801      	cmp	r0, #1
 8008ff8:	d008      	beq.n	800900c <HAL_I2C_EV_IRQHandler+0x6c0>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008ffa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008ffc:	4b79      	ldr	r3, [pc, #484]	; (80091e4 <HAL_I2C_EV_IRQHandler+0x898>)
 8008ffe:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009000:	f7fe fca4 	bl	800794c <HAL_DMA_Abort_IT>
 8009004:	b110      	cbz	r0, 800900c <HAL_I2C_EV_IRQHandler+0x6c0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009006:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009008:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800900a:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 800900c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800900e:	b29b      	uxth	r3, r3
 8009010:	b313      	cbz	r3, 8009058 <HAL_I2C_EV_IRQHandler+0x70c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009012:	6823      	ldr	r3, [r4, #0]
 8009014:	695a      	ldr	r2, [r3, #20]
 8009016:	0756      	lsls	r6, r2, #29
 8009018:	d509      	bpl.n	800902e <HAL_I2C_EV_IRQHandler+0x6e2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800901a:	691a      	ldr	r2, [r3, #16]
 800901c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800901e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009022:	3301      	adds	r3, #1
 8009024:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8009026:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009028:	3b01      	subs	r3, #1
 800902a:	b29b      	uxth	r3, r3
 800902c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	695a      	ldr	r2, [r3, #20]
 8009032:	0650      	lsls	r0, r2, #25
 8009034:	d509      	bpl.n	800904a <HAL_I2C_EV_IRQHandler+0x6fe>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009036:	691a      	ldr	r2, [r3, #16]
 8009038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800903a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800903c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800903e:	3301      	adds	r3, #1
 8009040:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8009042:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009044:	3b01      	subs	r3, #1
 8009046:	b29b      	uxth	r3, r3
 8009048:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800904a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800904c:	b29b      	uxth	r3, r3
 800904e:	b11b      	cbz	r3, 8009058 <HAL_I2C_EV_IRQHandler+0x70c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009050:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009052:	f043 0304 	orr.w	r3, r3, #4
 8009056:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009058:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800905a:	b313      	cbz	r3, 80090a2 <HAL_I2C_EV_IRQHandler+0x756>
    I2C_ITError(hi2c);
 800905c:	4620      	mov	r0, r4
}
 800905e:	b00e      	add	sp, #56	; 0x38
 8009060:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    I2C_ITError(hi2c);
 8009064:	f7ff bbca 	b.w	80087fc <I2C_ITError>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009068:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800906a:	6802      	ldr	r2, [r0, #0]
 800906c:	6852      	ldr	r2, [r2, #4]
 800906e:	b292      	uxth	r2, r2
 8009070:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8009072:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009074:	b292      	uxth	r2, r2
 8009076:	b11a      	cbz	r2, 8009080 <HAL_I2C_EV_IRQHandler+0x734>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009078:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800907a:	f042 0204 	orr.w	r2, r2, #4
 800907e:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009080:	685a      	ldr	r2, [r3, #4]
 8009082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009086:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009088:	f7fe fca6 	bl	80079d8 <HAL_DMA_GetState>
 800908c:	2801      	cmp	r0, #1
 800908e:	d0bd      	beq.n	800900c <HAL_I2C_EV_IRQHandler+0x6c0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009090:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009092:	4b54      	ldr	r3, [pc, #336]	; (80091e4 <HAL_I2C_EV_IRQHandler+0x898>)
 8009094:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009096:	f7fe fc59 	bl	800794c <HAL_DMA_Abort_IT>
 800909a:	2800      	cmp	r0, #0
 800909c:	d0b6      	beq.n	800900c <HAL_I2C_EV_IRQHandler+0x6c0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800909e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80090a0:	e7b2      	b.n	8009008 <HAL_I2C_EV_IRQHandler+0x6bc>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80090a2:	2d2a      	cmp	r5, #42	; 0x2a
 80090a4:	d106      	bne.n	80090b4 <HAL_I2C_EV_IRQHandler+0x768>
      hi2c->PreviousState = I2C_STATE_NONE;
 80090a6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80090a8:	2328      	movs	r3, #40	; 0x28
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80090aa:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80090ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80090b0:	f7ff faeb 	bl	800868a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80090b4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80090b8:	2b28      	cmp	r3, #40	; 0x28
 80090ba:	d10c      	bne.n	80090d6 <HAL_I2C_EV_IRQHandler+0x78a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80090bc:	4b4a      	ldr	r3, [pc, #296]	; (80091e8 <HAL_I2C_EV_IRQHandler+0x89c>)
      hi2c->State = HAL_I2C_STATE_READY;
 80090be:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80090c0:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80090c2:	2300      	movs	r3, #0
      HAL_I2C_ListenCpltCallback(hi2c);
 80090c4:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 80090c6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80090c8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090cc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80090d0:	f7ff fadd 	bl	800868e <HAL_I2C_ListenCpltCallback>
 80090d4:	e456      	b.n	8008984 <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80090d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80090d8:	2b22      	cmp	r3, #34	; 0x22
 80090da:	d002      	beq.n	80090e2 <HAL_I2C_EV_IRQHandler+0x796>
 80090dc:	2d22      	cmp	r5, #34	; 0x22
 80090de:	f47f ac51 	bne.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 80090e2:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80090e4:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80090e6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80090e8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80090ec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80090f0:	4620      	mov	r0, r4
 80090f2:	f7ff faca 	bl	800868a <HAL_I2C_SlaveRxCpltCallback>
 80090f6:	e445      	b.n	8008984 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80090f8:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 80090fc:	2821      	cmp	r0, #33	; 0x21
 80090fe:	f3c1 0580 	ubfx	r5, r1, #2, #1
 8009102:	d135      	bne.n	8009170 <HAL_I2C_EV_IRQHandler+0x824>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009104:	0609      	lsls	r1, r1, #24
 8009106:	d527      	bpl.n	8009158 <HAL_I2C_EV_IRQHandler+0x80c>
 8009108:	0556      	lsls	r6, r2, #21
 800910a:	d525      	bpl.n	8009158 <HAL_I2C_EV_IRQHandler+0x80c>
 800910c:	bb3d      	cbnz	r5, 800915e <HAL_I2C_EV_IRQHandler+0x812>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800910e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8009112:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009114:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8009116:	b292      	uxth	r2, r2
 8009118:	2a00      	cmp	r2, #0
 800911a:	f43f ac33 	beq.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800911e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009120:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009124:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 8009126:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8009128:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800912a:	3a01      	subs	r2, #1
 800912c:	b292      	uxth	r2, r2
 800912e:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009130:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009132:	b292      	uxth	r2, r2
 8009134:	2a00      	cmp	r2, #0
 8009136:	f47f ac25 	bne.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
 800913a:	2929      	cmp	r1, #41	; 0x29
 800913c:	f47f ac22 	bne.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009140:	685a      	ldr	r2, [r3, #4]
 8009142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009146:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009148:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800914a:	6320      	str	r0, [r4, #48]	; 0x30
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800914c:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800914e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009152:	f7ff fa99 	bl	8008688 <HAL_I2C_SlaveTxCpltCallback>
 8009156:	e415      	b.n	8008984 <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009158:	2d00      	cmp	r5, #0
 800915a:	f43f ac13 	beq.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
 800915e:	0595      	lsls	r5, r2, #22
 8009160:	f57f ac10 	bpl.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8009164:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009166:	b292      	uxth	r2, r2
 8009168:	2a00      	cmp	r2, #0
 800916a:	f43f ac0b 	beq.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
 800916e:	e5c7      	b.n	8008d00 <HAL_I2C_EV_IRQHandler+0x3b4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009170:	0648      	lsls	r0, r1, #25
 8009172:	d527      	bpl.n	80091c4 <HAL_I2C_EV_IRQHandler+0x878>
 8009174:	0551      	lsls	r1, r2, #21
 8009176:	d525      	bpl.n	80091c4 <HAL_I2C_EV_IRQHandler+0x878>
 8009178:	bb3d      	cbnz	r5, 80091ca <HAL_I2C_EV_IRQHandler+0x87e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800917a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 800917e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009180:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 8009182:	b289      	uxth	r1, r1
 8009184:	2900      	cmp	r1, #0
 8009186:	f43f abfd 	beq.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800918a:	6919      	ldr	r1, [r3, #16]
 800918c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800918e:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 8009190:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009192:	3301      	adds	r3, #1
 8009194:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8009196:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009198:	3b01      	subs	r3, #1
 800919a:	b29b      	uxth	r3, r3
 800919c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800919e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f47f abee 	bne.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
 80091a8:	2a2a      	cmp	r2, #42	; 0x2a
 80091aa:	f47f abeb 	bne.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80091ae:	6822      	ldr	r2, [r4, #0]
 80091b0:	6853      	ldr	r3, [r2, #4]
 80091b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091b6:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80091b8:	2322      	movs	r3, #34	; 0x22
 80091ba:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80091bc:	2328      	movs	r3, #40	; 0x28
 80091be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80091c2:	e795      	b.n	80090f0 <HAL_I2C_EV_IRQHandler+0x7a4>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80091c4:	2d00      	cmp	r5, #0
 80091c6:	f43f abdd 	beq.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
 80091ca:	0592      	lsls	r2, r2, #22
 80091cc:	f57f abda 	bpl.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 80091d0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80091d2:	b292      	uxth	r2, r2
 80091d4:	2a00      	cmp	r2, #0
 80091d6:	f43f abd5 	beq.w	8008984 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091da:	691a      	ldr	r2, [r3, #16]
 80091dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091de:	701a      	strb	r2, [r3, #0]
 80091e0:	e64d      	b.n	8008e7e <HAL_I2C_EV_IRQHandler+0x532>
 80091e2:	bf00      	nop
 80091e4:	0800873d 	.word	0x0800873d
 80091e8:	ffff0000 	.word	0xffff0000

080091ec <HAL_I2C_ER_IRQHandler>:
{
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80091ee:	6803      	ldr	r3, [r0, #0]
{
 80091f0:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80091f2:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80091f4:	685e      	ldr	r6, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80091f6:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80091fa:	05f8      	lsls	r0, r7, #23
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80091fc:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80091fe:	f3c7 2500 	ubfx	r5, r7, #8, #1
 8009202:	d50b      	bpl.n	800921c <HAL_I2C_ER_IRQHandler+0x30>
 8009204:	05f1      	lsls	r1, r6, #23
 8009206:	f3c6 2500 	ubfx	r5, r6, #8, #1
 800920a:	d507      	bpl.n	800921c <HAL_I2C_ER_IRQHandler+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800920c:	f46f 7180 	mvn.w	r1, #256	; 0x100
    error |= HAL_I2C_ERROR_BERR;
 8009210:	2501      	movs	r5, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009212:	6159      	str	r1, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8009214:	6819      	ldr	r1, [r3, #0]
 8009216:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800921a:	6019      	str	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800921c:	05b8      	lsls	r0, r7, #22
 800921e:	d506      	bpl.n	800922e <HAL_I2C_ER_IRQHandler+0x42>
 8009220:	05f1      	lsls	r1, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009222:	bf42      	ittt	mi
 8009224:	f46f 7100 	mvnmi.w	r1, #512	; 0x200
    error |= HAL_I2C_ERROR_ARLO;
 8009228:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800922c:	6159      	strmi	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800922e:	0578      	lsls	r0, r7, #21
 8009230:	d536      	bpl.n	80092a0 <HAL_I2C_ER_IRQHandler+0xb4>
 8009232:	05f1      	lsls	r1, r6, #23
 8009234:	d534      	bpl.n	80092a0 <HAL_I2C_ER_IRQHandler+0xb4>
    tmp2 = hi2c->XferCount;
 8009236:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8009238:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800923c:	2a20      	cmp	r2, #32
    tmp4 = hi2c->PreviousState;
 800923e:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
    tmp2 = hi2c->XferCount;
 8009242:	b280      	uxth	r0, r0
    tmp3 = hi2c->State;
 8009244:	b2c9      	uxtb	r1, r1
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8009246:	d15b      	bne.n	8009300 <HAL_I2C_ER_IRQHandler+0x114>
 8009248:	2800      	cmp	r0, #0
 800924a:	d159      	bne.n	8009300 <HAL_I2C_ER_IRQHandler+0x114>
 800924c:	f001 00f7 	and.w	r0, r1, #247	; 0xf7
 8009250:	2821      	cmp	r0, #33	; 0x21
 8009252:	d004      	beq.n	800925e <HAL_I2C_ER_IRQHandler+0x72>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8009254:	2928      	cmp	r1, #40	; 0x28
 8009256:	d153      	bne.n	8009300 <HAL_I2C_ER_IRQHandler+0x114>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8009258:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
 800925c:	d150      	bne.n	8009300 <HAL_I2C_ER_IRQHandler+0x114>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800925e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009262:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009264:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009266:	2908      	cmp	r1, #8
 8009268:	d001      	beq.n	800926e <HAL_I2C_ER_IRQHandler+0x82>
 800926a:	2920      	cmp	r1, #32
 800926c:	d12a      	bne.n	80092c4 <HAL_I2C_ER_IRQHandler+0xd8>
 800926e:	2a28      	cmp	r2, #40	; 0x28
 8009270:	d128      	bne.n	80092c4 <HAL_I2C_ER_IRQHandler+0xd8>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009272:	4a2c      	ldr	r2, [pc, #176]	; (8009324 <HAL_I2C_ER_IRQHandler+0x138>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8009274:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009276:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009278:	685a      	ldr	r2, [r3, #4]
 800927a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800927e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009280:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009284:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800928c:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800928e:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8009290:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8009292:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009294:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009298:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 800929c:	f7ff f9f7 	bl	800868e <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80092a0:	053a      	lsls	r2, r7, #20
 80092a2:	d53b      	bpl.n	800931c <HAL_I2C_ER_IRQHandler+0x130>
 80092a4:	05f3      	lsls	r3, r6, #23
 80092a6:	d539      	bpl.n	800931c <HAL_I2C_ER_IRQHandler+0x130>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80092a8:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80092ac:	6823      	ldr	r3, [r4, #0]
    error |= HAL_I2C_ERROR_OVR;
 80092ae:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80092b2:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 80092b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 80092b6:	4620      	mov	r0, r4
    hi2c->ErrorCode |= error;
 80092b8:	431d      	orrs	r5, r3
 80092ba:	6425      	str	r5, [r4, #64]	; 0x40
}
 80092bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 80092c0:	f7ff ba9c 	b.w	80087fc <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80092c4:	2a21      	cmp	r2, #33	; 0x21
 80092c6:	d117      	bne.n	80092f8 <HAL_I2C_ER_IRQHandler+0x10c>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80092c8:	4916      	ldr	r1, [pc, #88]	; (8009324 <HAL_I2C_ER_IRQHandler+0x138>)
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80092ca:	4620      	mov	r0, r4
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80092cc:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80092ce:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80092d0:	2220      	movs	r2, #32
 80092d2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80092d6:	2200      	movs	r2, #0
 80092d8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80092dc:	685a      	ldr	r2, [r3, #4]
 80092de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80092e2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80092e8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092f0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80092f2:	f7ff f9c9 	bl	8008688 <HAL_I2C_SlaveTxCpltCallback>
 80092f6:	e7d3      	b.n	80092a0 <HAL_I2C_ER_IRQHandler+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80092fc:	615a      	str	r2, [r3, #20]
 80092fe:	e7cf      	b.n	80092a0 <HAL_I2C_ER_IRQHandler+0xb4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009300:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8009304:	2a10      	cmp	r2, #16
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009306:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8009308:	f045 0504 	orr.w	r5, r5, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800930c:	d001      	beq.n	8009312 <HAL_I2C_ER_IRQHandler+0x126>
 800930e:	2a40      	cmp	r2, #64	; 0x40
 8009310:	d1c6      	bne.n	80092a0 <HAL_I2C_ER_IRQHandler+0xb4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009318:	601a      	str	r2, [r3, #0]
 800931a:	e7c1      	b.n	80092a0 <HAL_I2C_ER_IRQHandler+0xb4>
  if (error != HAL_I2C_ERROR_NONE)
 800931c:	2d00      	cmp	r5, #0
 800931e:	d1c9      	bne.n	80092b4 <HAL_I2C_ER_IRQHandler+0xc8>
}
 8009320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009322:	bf00      	nop
 8009324:	ffff0000 	.word	0xffff0000

08009328 <HAL_PWR_EnterSLEEPMode>:
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009328:	4a06      	ldr	r2, [pc, #24]	; (8009344 <HAL_PWR_EnterSLEEPMode+0x1c>)

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800932a:	2901      	cmp	r1, #1
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800932c:	6913      	ldr	r3, [r2, #16]
 800932e:	f023 0304 	bic.w	r3, r3, #4
 8009332:	6113      	str	r3, [r2, #16]
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8009334:	d101      	bne.n	800933a <HAL_PWR_EnterSLEEPMode+0x12>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8009336:	bf30      	wfi
 8009338:	4770      	bx	lr
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800933a:	bf40      	sev
    __WFE();
 800933c:	bf20      	wfe
    __WFE();
 800933e:	bf20      	wfe
  }
}
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	e000ed00 	.word	0xe000ed00

08009348 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009348:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800934c:	4605      	mov	r5, r0
 800934e:	b338      	cbz	r0, 80093a0 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009350:	6803      	ldr	r3, [r0, #0]
 8009352:	07db      	lsls	r3, r3, #31
 8009354:	d410      	bmi.n	8009378 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009356:	682b      	ldr	r3, [r5, #0]
 8009358:	079f      	lsls	r7, r3, #30
 800935a:	d45e      	bmi.n	800941a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800935c:	682b      	ldr	r3, [r5, #0]
 800935e:	0719      	lsls	r1, r3, #28
 8009360:	f100 8095 	bmi.w	800948e <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009364:	682b      	ldr	r3, [r5, #0]
 8009366:	075a      	lsls	r2, r3, #29
 8009368:	f100 80bf 	bmi.w	80094ea <HAL_RCC_OscConfig+0x1a2>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800936c:	69e8      	ldr	r0, [r5, #28]
 800936e:	2800      	cmp	r0, #0
 8009370:	f040 812c 	bne.w	80095cc <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8009374:	2000      	movs	r0, #0
 8009376:	e029      	b.n	80093cc <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009378:	4c8f      	ldr	r4, [pc, #572]	; (80095b8 <HAL_RCC_OscConfig+0x270>)
 800937a:	6863      	ldr	r3, [r4, #4]
 800937c:	f003 030c 	and.w	r3, r3, #12
 8009380:	2b04      	cmp	r3, #4
 8009382:	d007      	beq.n	8009394 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009384:	6863      	ldr	r3, [r4, #4]
 8009386:	f003 030c 	and.w	r3, r3, #12
 800938a:	2b08      	cmp	r3, #8
 800938c:	d10a      	bne.n	80093a4 <HAL_RCC_OscConfig+0x5c>
 800938e:	6863      	ldr	r3, [r4, #4]
 8009390:	03de      	lsls	r6, r3, #15
 8009392:	d507      	bpl.n	80093a4 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	039c      	lsls	r4, r3, #14
 8009398:	d5dd      	bpl.n	8009356 <HAL_RCC_OscConfig+0xe>
 800939a:	686b      	ldr	r3, [r5, #4]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1da      	bne.n	8009356 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80093a0:	2001      	movs	r0, #1
 80093a2:	e013      	b.n	80093cc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093a4:	686b      	ldr	r3, [r5, #4]
 80093a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093aa:	d112      	bne.n	80093d2 <HAL_RCC_OscConfig+0x8a>
 80093ac:	6823      	ldr	r3, [r4, #0]
 80093ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093b2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80093b4:	f7fe f87c 	bl	80074b0 <HAL_GetTick>
 80093b8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093ba:	6823      	ldr	r3, [r4, #0]
 80093bc:	0398      	lsls	r0, r3, #14
 80093be:	d4ca      	bmi.n	8009356 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80093c0:	f7fe f876 	bl	80074b0 <HAL_GetTick>
 80093c4:	1b80      	subs	r0, r0, r6
 80093c6:	2864      	cmp	r0, #100	; 0x64
 80093c8:	d9f7      	bls.n	80093ba <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80093ca:	2003      	movs	r0, #3
}
 80093cc:	b002      	add	sp, #8
 80093ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093d2:	b99b      	cbnz	r3, 80093fc <HAL_RCC_OscConfig+0xb4>
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093da:	6023      	str	r3, [r4, #0]
 80093dc:	6823      	ldr	r3, [r4, #0]
 80093de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093e2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80093e4:	f7fe f864 	bl	80074b0 <HAL_GetTick>
 80093e8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80093ea:	6823      	ldr	r3, [r4, #0]
 80093ec:	0399      	lsls	r1, r3, #14
 80093ee:	d5b2      	bpl.n	8009356 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80093f0:	f7fe f85e 	bl	80074b0 <HAL_GetTick>
 80093f4:	1b80      	subs	r0, r0, r6
 80093f6:	2864      	cmp	r0, #100	; 0x64
 80093f8:	d9f7      	bls.n	80093ea <HAL_RCC_OscConfig+0xa2>
 80093fa:	e7e6      	b.n	80093ca <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009400:	6823      	ldr	r3, [r4, #0]
 8009402:	d103      	bne.n	800940c <HAL_RCC_OscConfig+0xc4>
 8009404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009408:	6023      	str	r3, [r4, #0]
 800940a:	e7cf      	b.n	80093ac <HAL_RCC_OscConfig+0x64>
 800940c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009410:	6023      	str	r3, [r4, #0]
 8009412:	6823      	ldr	r3, [r4, #0]
 8009414:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009418:	e7cb      	b.n	80093b2 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800941a:	4c67      	ldr	r4, [pc, #412]	; (80095b8 <HAL_RCC_OscConfig+0x270>)
 800941c:	6863      	ldr	r3, [r4, #4]
 800941e:	f013 0f0c 	tst.w	r3, #12
 8009422:	d007      	beq.n	8009434 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009424:	6863      	ldr	r3, [r4, #4]
 8009426:	f003 030c 	and.w	r3, r3, #12
 800942a:	2b08      	cmp	r3, #8
 800942c:	d110      	bne.n	8009450 <HAL_RCC_OscConfig+0x108>
 800942e:	6863      	ldr	r3, [r4, #4]
 8009430:	03da      	lsls	r2, r3, #15
 8009432:	d40d      	bmi.n	8009450 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009434:	6823      	ldr	r3, [r4, #0]
 8009436:	079b      	lsls	r3, r3, #30
 8009438:	d502      	bpl.n	8009440 <HAL_RCC_OscConfig+0xf8>
 800943a:	692b      	ldr	r3, [r5, #16]
 800943c:	2b01      	cmp	r3, #1
 800943e:	d1af      	bne.n	80093a0 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009440:	6823      	ldr	r3, [r4, #0]
 8009442:	696a      	ldr	r2, [r5, #20]
 8009444:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009448:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800944c:	6023      	str	r3, [r4, #0]
 800944e:	e785      	b.n	800935c <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009450:	692a      	ldr	r2, [r5, #16]
 8009452:	4b5a      	ldr	r3, [pc, #360]	; (80095bc <HAL_RCC_OscConfig+0x274>)
 8009454:	b16a      	cbz	r2, 8009472 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8009456:	2201      	movs	r2, #1
 8009458:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800945a:	f7fe f829 	bl	80074b0 <HAL_GetTick>
 800945e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009460:	6823      	ldr	r3, [r4, #0]
 8009462:	079f      	lsls	r7, r3, #30
 8009464:	d4ec      	bmi.n	8009440 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009466:	f7fe f823 	bl	80074b0 <HAL_GetTick>
 800946a:	1b80      	subs	r0, r0, r6
 800946c:	2802      	cmp	r0, #2
 800946e:	d9f7      	bls.n	8009460 <HAL_RCC_OscConfig+0x118>
 8009470:	e7ab      	b.n	80093ca <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8009472:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009474:	f7fe f81c 	bl	80074b0 <HAL_GetTick>
 8009478:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800947a:	6823      	ldr	r3, [r4, #0]
 800947c:	0798      	lsls	r0, r3, #30
 800947e:	f57f af6d 	bpl.w	800935c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009482:	f7fe f815 	bl	80074b0 <HAL_GetTick>
 8009486:	1b80      	subs	r0, r0, r6
 8009488:	2802      	cmp	r0, #2
 800948a:	d9f6      	bls.n	800947a <HAL_RCC_OscConfig+0x132>
 800948c:	e79d      	b.n	80093ca <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800948e:	69aa      	ldr	r2, [r5, #24]
 8009490:	4e49      	ldr	r6, [pc, #292]	; (80095b8 <HAL_RCC_OscConfig+0x270>)
 8009492:	4b4b      	ldr	r3, [pc, #300]	; (80095c0 <HAL_RCC_OscConfig+0x278>)
 8009494:	b1da      	cbz	r2, 80094ce <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_LSI_ENABLE();
 8009496:	2201      	movs	r2, #1
 8009498:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800949a:	f7fe f809 	bl	80074b0 <HAL_GetTick>
 800949e:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80094a0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80094a2:	079b      	lsls	r3, r3, #30
 80094a4:	d50d      	bpl.n	80094c2 <HAL_RCC_OscConfig+0x17a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80094a6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80094aa:	4b46      	ldr	r3, [pc, #280]	; (80095c4 <HAL_RCC_OscConfig+0x27c>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80094b2:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80094b4:	bf00      	nop
  }
  while (Delay --);
 80094b6:	9b01      	ldr	r3, [sp, #4]
 80094b8:	1e5a      	subs	r2, r3, #1
 80094ba:	9201      	str	r2, [sp, #4]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1f9      	bne.n	80094b4 <HAL_RCC_OscConfig+0x16c>
 80094c0:	e750      	b.n	8009364 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80094c2:	f7fd fff5 	bl	80074b0 <HAL_GetTick>
 80094c6:	1b00      	subs	r0, r0, r4
 80094c8:	2802      	cmp	r0, #2
 80094ca:	d9e9      	bls.n	80094a0 <HAL_RCC_OscConfig+0x158>
 80094cc:	e77d      	b.n	80093ca <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80094ce:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80094d0:	f7fd ffee 	bl	80074b0 <HAL_GetTick>
 80094d4:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80094d6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80094d8:	079f      	lsls	r7, r3, #30
 80094da:	f57f af43 	bpl.w	8009364 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80094de:	f7fd ffe7 	bl	80074b0 <HAL_GetTick>
 80094e2:	1b00      	subs	r0, r0, r4
 80094e4:	2802      	cmp	r0, #2
 80094e6:	d9f6      	bls.n	80094d6 <HAL_RCC_OscConfig+0x18e>
 80094e8:	e76f      	b.n	80093ca <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80094ea:	4c33      	ldr	r4, [pc, #204]	; (80095b8 <HAL_RCC_OscConfig+0x270>)
 80094ec:	69e3      	ldr	r3, [r4, #28]
 80094ee:	00d8      	lsls	r0, r3, #3
 80094f0:	d424      	bmi.n	800953c <HAL_RCC_OscConfig+0x1f4>
      pwrclkchanged = SET;
 80094f2:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80094f4:	69e3      	ldr	r3, [r4, #28]
 80094f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094fa:	61e3      	str	r3, [r4, #28]
 80094fc:	69e3      	ldr	r3, [r4, #28]
 80094fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009506:	4e30      	ldr	r6, [pc, #192]	; (80095c8 <HAL_RCC_OscConfig+0x280>)
 8009508:	6833      	ldr	r3, [r6, #0]
 800950a:	05d9      	lsls	r1, r3, #23
 800950c:	d518      	bpl.n	8009540 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800950e:	68eb      	ldr	r3, [r5, #12]
 8009510:	2b01      	cmp	r3, #1
 8009512:	d126      	bne.n	8009562 <HAL_RCC_OscConfig+0x21a>
 8009514:	6a23      	ldr	r3, [r4, #32]
 8009516:	f043 0301 	orr.w	r3, r3, #1
 800951a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800951c:	f7fd ffc8 	bl	80074b0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009520:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8009524:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009526:	6a23      	ldr	r3, [r4, #32]
 8009528:	079b      	lsls	r3, r3, #30
 800952a:	d53f      	bpl.n	80095ac <HAL_RCC_OscConfig+0x264>
    if (pwrclkchanged == SET)
 800952c:	2f00      	cmp	r7, #0
 800952e:	f43f af1d 	beq.w	800936c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009532:	69e3      	ldr	r3, [r4, #28]
 8009534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009538:	61e3      	str	r3, [r4, #28]
 800953a:	e717      	b.n	800936c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800953c:	2700      	movs	r7, #0
 800953e:	e7e2      	b.n	8009506 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009540:	6833      	ldr	r3, [r6, #0]
 8009542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009546:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8009548:	f7fd ffb2 	bl	80074b0 <HAL_GetTick>
 800954c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800954e:	6833      	ldr	r3, [r6, #0]
 8009550:	05da      	lsls	r2, r3, #23
 8009552:	d4dc      	bmi.n	800950e <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009554:	f7fd ffac 	bl	80074b0 <HAL_GetTick>
 8009558:	eba0 0008 	sub.w	r0, r0, r8
 800955c:	2864      	cmp	r0, #100	; 0x64
 800955e:	d9f6      	bls.n	800954e <HAL_RCC_OscConfig+0x206>
 8009560:	e733      	b.n	80093ca <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009562:	b9ab      	cbnz	r3, 8009590 <HAL_RCC_OscConfig+0x248>
 8009564:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009566:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800956a:	f023 0301 	bic.w	r3, r3, #1
 800956e:	6223      	str	r3, [r4, #32]
 8009570:	6a23      	ldr	r3, [r4, #32]
 8009572:	f023 0304 	bic.w	r3, r3, #4
 8009576:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8009578:	f7fd ff9a 	bl	80074b0 <HAL_GetTick>
 800957c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800957e:	6a23      	ldr	r3, [r4, #32]
 8009580:	0798      	lsls	r0, r3, #30
 8009582:	d5d3      	bpl.n	800952c <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009584:	f7fd ff94 	bl	80074b0 <HAL_GetTick>
 8009588:	1b80      	subs	r0, r0, r6
 800958a:	4540      	cmp	r0, r8
 800958c:	d9f7      	bls.n	800957e <HAL_RCC_OscConfig+0x236>
 800958e:	e71c      	b.n	80093ca <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009590:	2b05      	cmp	r3, #5
 8009592:	6a23      	ldr	r3, [r4, #32]
 8009594:	d103      	bne.n	800959e <HAL_RCC_OscConfig+0x256>
 8009596:	f043 0304 	orr.w	r3, r3, #4
 800959a:	6223      	str	r3, [r4, #32]
 800959c:	e7ba      	b.n	8009514 <HAL_RCC_OscConfig+0x1cc>
 800959e:	f023 0301 	bic.w	r3, r3, #1
 80095a2:	6223      	str	r3, [r4, #32]
 80095a4:	6a23      	ldr	r3, [r4, #32]
 80095a6:	f023 0304 	bic.w	r3, r3, #4
 80095aa:	e7b6      	b.n	800951a <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095ac:	f7fd ff80 	bl	80074b0 <HAL_GetTick>
 80095b0:	1b80      	subs	r0, r0, r6
 80095b2:	4540      	cmp	r0, r8
 80095b4:	d9b7      	bls.n	8009526 <HAL_RCC_OscConfig+0x1de>
 80095b6:	e708      	b.n	80093ca <HAL_RCC_OscConfig+0x82>
 80095b8:	40021000 	.word	0x40021000
 80095bc:	42420000 	.word	0x42420000
 80095c0:	42420480 	.word	0x42420480
 80095c4:	20000068 	.word	0x20000068
 80095c8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80095cc:	4b2a      	ldr	r3, [pc, #168]	; (8009678 <HAL_RCC_OscConfig+0x330>)
 80095ce:	685a      	ldr	r2, [r3, #4]
 80095d0:	461c      	mov	r4, r3
 80095d2:	f002 020c 	and.w	r2, r2, #12
 80095d6:	2a08      	cmp	r2, #8
 80095d8:	d03d      	beq.n	8009656 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80095da:	2300      	movs	r3, #0
 80095dc:	4e27      	ldr	r6, [pc, #156]	; (800967c <HAL_RCC_OscConfig+0x334>)
 80095de:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80095e0:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80095e2:	d12b      	bne.n	800963c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80095e4:	f7fd ff64 	bl	80074b0 <HAL_GetTick>
 80095e8:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	0199      	lsls	r1, r3, #6
 80095ee:	d41f      	bmi.n	8009630 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80095f0:	6a2b      	ldr	r3, [r5, #32]
 80095f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095f6:	d105      	bne.n	8009604 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80095f8:	6862      	ldr	r2, [r4, #4]
 80095fa:	68a9      	ldr	r1, [r5, #8]
 80095fc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009600:	430a      	orrs	r2, r1
 8009602:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009604:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8009606:	6862      	ldr	r2, [r4, #4]
 8009608:	430b      	orrs	r3, r1
 800960a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800960e:	4313      	orrs	r3, r2
 8009610:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8009612:	2301      	movs	r3, #1
 8009614:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8009616:	f7fd ff4b 	bl	80074b0 <HAL_GetTick>
 800961a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800961c:	6823      	ldr	r3, [r4, #0]
 800961e:	019a      	lsls	r2, r3, #6
 8009620:	f53f aea8 	bmi.w	8009374 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009624:	f7fd ff44 	bl	80074b0 <HAL_GetTick>
 8009628:	1b40      	subs	r0, r0, r5
 800962a:	2802      	cmp	r0, #2
 800962c:	d9f6      	bls.n	800961c <HAL_RCC_OscConfig+0x2d4>
 800962e:	e6cc      	b.n	80093ca <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009630:	f7fd ff3e 	bl	80074b0 <HAL_GetTick>
 8009634:	1bc0      	subs	r0, r0, r7
 8009636:	2802      	cmp	r0, #2
 8009638:	d9d7      	bls.n	80095ea <HAL_RCC_OscConfig+0x2a2>
 800963a:	e6c6      	b.n	80093ca <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800963c:	f7fd ff38 	bl	80074b0 <HAL_GetTick>
 8009640:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009642:	6823      	ldr	r3, [r4, #0]
 8009644:	019b      	lsls	r3, r3, #6
 8009646:	f57f ae95 	bpl.w	8009374 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800964a:	f7fd ff31 	bl	80074b0 <HAL_GetTick>
 800964e:	1b40      	subs	r0, r0, r5
 8009650:	2802      	cmp	r0, #2
 8009652:	d9f6      	bls.n	8009642 <HAL_RCC_OscConfig+0x2fa>
 8009654:	e6b9      	b.n	80093ca <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009656:	2801      	cmp	r0, #1
 8009658:	f43f aeb8 	beq.w	80093cc <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 800965c:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800965e:	6a2a      	ldr	r2, [r5, #32]
 8009660:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8009664:	4291      	cmp	r1, r2
 8009666:	f47f ae9b 	bne.w	80093a0 <HAL_RCC_OscConfig+0x58>
 800966a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800966c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009670:	4293      	cmp	r3, r2
 8009672:	f43f ae7f 	beq.w	8009374 <HAL_RCC_OscConfig+0x2c>
 8009676:	e693      	b.n	80093a0 <HAL_RCC_OscConfig+0x58>
 8009678:	40021000 	.word	0x40021000
 800967c:	42420060 	.word	0x42420060

08009680 <HAL_RCC_GetSysClockFreq>:
{
 8009680:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8009682:	4b18      	ldr	r3, [pc, #96]	; (80096e4 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8009684:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8009686:	ac02      	add	r4, sp, #8
 8009688:	f103 0510 	add.w	r5, r3, #16
 800968c:	4622      	mov	r2, r4
 800968e:	6818      	ldr	r0, [r3, #0]
 8009690:	6859      	ldr	r1, [r3, #4]
 8009692:	3308      	adds	r3, #8
 8009694:	c203      	stmia	r2!, {r0, r1}
 8009696:	42ab      	cmp	r3, r5
 8009698:	4614      	mov	r4, r2
 800969a:	d1f7      	bne.n	800968c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800969c:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80096a0:	4911      	ldr	r1, [pc, #68]	; (80096e8 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80096a2:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80096a6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80096a8:	f003 020c 	and.w	r2, r3, #12
 80096ac:	2a08      	cmp	r2, #8
 80096ae:	d117      	bne.n	80096e0 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80096b0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80096b4:	a806      	add	r0, sp, #24
 80096b6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80096b8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80096ba:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80096be:	d50c      	bpl.n	80096da <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80096c0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80096c2:	480a      	ldr	r0, [pc, #40]	; (80096ec <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80096c4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80096c8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80096ca:	aa06      	add	r2, sp, #24
 80096cc:	4413      	add	r3, r2
 80096ce:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80096d2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80096d6:	b007      	add	sp, #28
 80096d8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80096da:	4805      	ldr	r0, [pc, #20]	; (80096f0 <HAL_RCC_GetSysClockFreq+0x70>)
 80096dc:	4350      	muls	r0, r2
 80096de:	e7fa      	b.n	80096d6 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 80096e0:	4802      	ldr	r0, [pc, #8]	; (80096ec <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80096e2:	e7f8      	b.n	80096d6 <HAL_RCC_GetSysClockFreq+0x56>
 80096e4:	0800a720 	.word	0x0800a720
 80096e8:	40021000 	.word	0x40021000
 80096ec:	007a1200 	.word	0x007a1200
 80096f0:	003d0900 	.word	0x003d0900

080096f4 <HAL_RCC_ClockConfig>:
{
 80096f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80096fa:	4604      	mov	r4, r0
 80096fc:	b910      	cbnz	r0, 8009704 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80096fe:	2001      	movs	r0, #1
}
 8009700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009704:	4a44      	ldr	r2, [pc, #272]	; (8009818 <HAL_RCC_ClockConfig+0x124>)
 8009706:	6813      	ldr	r3, [r2, #0]
 8009708:	f003 0307 	and.w	r3, r3, #7
 800970c:	428b      	cmp	r3, r1
 800970e:	d328      	bcc.n	8009762 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009710:	6821      	ldr	r1, [r4, #0]
 8009712:	078e      	lsls	r6, r1, #30
 8009714:	d430      	bmi.n	8009778 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009716:	07ca      	lsls	r2, r1, #31
 8009718:	d443      	bmi.n	80097a2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800971a:	4a3f      	ldr	r2, [pc, #252]	; (8009818 <HAL_RCC_ClockConfig+0x124>)
 800971c:	6813      	ldr	r3, [r2, #0]
 800971e:	f003 0307 	and.w	r3, r3, #7
 8009722:	42ab      	cmp	r3, r5
 8009724:	d865      	bhi.n	80097f2 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009726:	6822      	ldr	r2, [r4, #0]
 8009728:	4d3c      	ldr	r5, [pc, #240]	; (800981c <HAL_RCC_ClockConfig+0x128>)
 800972a:	f012 0f04 	tst.w	r2, #4
 800972e:	d16c      	bne.n	800980a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009730:	0713      	lsls	r3, r2, #28
 8009732:	d506      	bpl.n	8009742 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009734:	686b      	ldr	r3, [r5, #4]
 8009736:	6922      	ldr	r2, [r4, #16]
 8009738:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800973c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009740:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009742:	f7ff ff9d 	bl	8009680 <HAL_RCC_GetSysClockFreq>
 8009746:	686b      	ldr	r3, [r5, #4]
 8009748:	4a35      	ldr	r2, [pc, #212]	; (8009820 <HAL_RCC_ClockConfig+0x12c>)
 800974a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800974e:	5cd3      	ldrb	r3, [r2, r3]
 8009750:	40d8      	lsrs	r0, r3
 8009752:	4b34      	ldr	r3, [pc, #208]	; (8009824 <HAL_RCC_ClockConfig+0x130>)
 8009754:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8009756:	4b34      	ldr	r3, [pc, #208]	; (8009828 <HAL_RCC_ClockConfig+0x134>)
 8009758:	6818      	ldr	r0, [r3, #0]
 800975a:	f7fd fe67 	bl	800742c <HAL_InitTick>
  return HAL_OK;
 800975e:	2000      	movs	r0, #0
 8009760:	e7ce      	b.n	8009700 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009762:	6813      	ldr	r3, [r2, #0]
 8009764:	f023 0307 	bic.w	r3, r3, #7
 8009768:	430b      	orrs	r3, r1
 800976a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800976c:	6813      	ldr	r3, [r2, #0]
 800976e:	f003 0307 	and.w	r3, r3, #7
 8009772:	428b      	cmp	r3, r1
 8009774:	d1c3      	bne.n	80096fe <HAL_RCC_ClockConfig+0xa>
 8009776:	e7cb      	b.n	8009710 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009778:	4b28      	ldr	r3, [pc, #160]	; (800981c <HAL_RCC_ClockConfig+0x128>)
 800977a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800977e:	bf1e      	ittt	ne
 8009780:	685a      	ldrne	r2, [r3, #4]
 8009782:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8009786:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009788:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800978a:	bf42      	ittt	mi
 800978c:	685a      	ldrmi	r2, [r3, #4]
 800978e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8009792:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009794:	685a      	ldr	r2, [r3, #4]
 8009796:	68a0      	ldr	r0, [r4, #8]
 8009798:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800979c:	4302      	orrs	r2, r0
 800979e:	605a      	str	r2, [r3, #4]
 80097a0:	e7b9      	b.n	8009716 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097a2:	6862      	ldr	r2, [r4, #4]
 80097a4:	4e1d      	ldr	r6, [pc, #116]	; (800981c <HAL_RCC_ClockConfig+0x128>)
 80097a6:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097a8:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097aa:	d11a      	bne.n	80097e2 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097ac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097b0:	d0a5      	beq.n	80096fe <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80097b2:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097b4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80097b8:	f023 0303 	bic.w	r3, r3, #3
 80097bc:	4313      	orrs	r3, r2
 80097be:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80097c0:	f7fd fe76 	bl	80074b0 <HAL_GetTick>
 80097c4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097c6:	6873      	ldr	r3, [r6, #4]
 80097c8:	6862      	ldr	r2, [r4, #4]
 80097ca:	f003 030c 	and.w	r3, r3, #12
 80097ce:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80097d2:	d0a2      	beq.n	800971a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097d4:	f7fd fe6c 	bl	80074b0 <HAL_GetTick>
 80097d8:	1bc0      	subs	r0, r0, r7
 80097da:	4540      	cmp	r0, r8
 80097dc:	d9f3      	bls.n	80097c6 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80097de:	2003      	movs	r0, #3
 80097e0:	e78e      	b.n	8009700 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097e2:	2a02      	cmp	r2, #2
 80097e4:	d102      	bne.n	80097ec <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80097e6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80097ea:	e7e1      	b.n	80097b0 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097ec:	f013 0f02 	tst.w	r3, #2
 80097f0:	e7de      	b.n	80097b0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097f2:	6813      	ldr	r3, [r2, #0]
 80097f4:	f023 0307 	bic.w	r3, r3, #7
 80097f8:	432b      	orrs	r3, r5
 80097fa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80097fc:	6813      	ldr	r3, [r2, #0]
 80097fe:	f003 0307 	and.w	r3, r3, #7
 8009802:	42ab      	cmp	r3, r5
 8009804:	f47f af7b 	bne.w	80096fe <HAL_RCC_ClockConfig+0xa>
 8009808:	e78d      	b.n	8009726 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800980a:	686b      	ldr	r3, [r5, #4]
 800980c:	68e1      	ldr	r1, [r4, #12]
 800980e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009812:	430b      	orrs	r3, r1
 8009814:	606b      	str	r3, [r5, #4]
 8009816:	e78b      	b.n	8009730 <HAL_RCC_ClockConfig+0x3c>
 8009818:	40022000 	.word	0x40022000
 800981c:	40021000 	.word	0x40021000
 8009820:	0800a708 	.word	0x0800a708
 8009824:	20000068 	.word	0x20000068
 8009828:	20000070 	.word	0x20000070

0800982c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800982c:	4b04      	ldr	r3, [pc, #16]	; (8009840 <HAL_RCC_GetPCLK1Freq+0x14>)
 800982e:	4a05      	ldr	r2, [pc, #20]	; (8009844 <HAL_RCC_GetPCLK1Freq+0x18>)
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009836:	5cd3      	ldrb	r3, [r2, r3]
 8009838:	4a03      	ldr	r2, [pc, #12]	; (8009848 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800983a:	6810      	ldr	r0, [r2, #0]
}
 800983c:	40d8      	lsrs	r0, r3
 800983e:	4770      	bx	lr
 8009840:	40021000 	.word	0x40021000
 8009844:	0800a718 	.word	0x0800a718
 8009848:	20000068 	.word	0x20000068

0800984c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800984c:	4b04      	ldr	r3, [pc, #16]	; (8009860 <HAL_RCC_GetPCLK2Freq+0x14>)
 800984e:	4a05      	ldr	r2, [pc, #20]	; (8009864 <HAL_RCC_GetPCLK2Freq+0x18>)
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8009856:	5cd3      	ldrb	r3, [r2, r3]
 8009858:	4a03      	ldr	r2, [pc, #12]	; (8009868 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800985a:	6810      	ldr	r0, [r2, #0]
}
 800985c:	40d8      	lsrs	r0, r3
 800985e:	4770      	bx	lr
 8009860:	40021000 	.word	0x40021000
 8009864:	0800a718 	.word	0x0800a718
 8009868:	20000068 	.word	0x20000068

0800986c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800986c:	6803      	ldr	r3, [r0, #0]
{
 800986e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009872:	07d9      	lsls	r1, r3, #31
{
 8009874:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009876:	d520      	bpl.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009878:	4c35      	ldr	r4, [pc, #212]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800987a:	69e3      	ldr	r3, [r4, #28]
 800987c:	00da      	lsls	r2, r3, #3
 800987e:	d432      	bmi.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8009880:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8009882:	69e3      	ldr	r3, [r4, #28]
 8009884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009888:	61e3      	str	r3, [r4, #28]
 800988a:	69e3      	ldr	r3, [r4, #28]
 800988c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009890:	9301      	str	r3, [sp, #4]
 8009892:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009894:	4e2f      	ldr	r6, [pc, #188]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009896:	6833      	ldr	r3, [r6, #0]
 8009898:	05db      	lsls	r3, r3, #23
 800989a:	d526      	bpl.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800989c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800989e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80098a2:	d136      	bne.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80098a4:	6a23      	ldr	r3, [r4, #32]
 80098a6:	686a      	ldr	r2, [r5, #4]
 80098a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098ac:	4313      	orrs	r3, r2
 80098ae:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80098b0:	b11f      	cbz	r7, 80098ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80098b2:	69e3      	ldr	r3, [r4, #28]
 80098b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098b8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80098ba:	6828      	ldr	r0, [r5, #0]
 80098bc:	0783      	lsls	r3, r0, #30
 80098be:	d506      	bpl.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80098c0:	4923      	ldr	r1, [pc, #140]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80098c2:	68ab      	ldr	r3, [r5, #8]
 80098c4:	684a      	ldr	r2, [r1, #4]
 80098c6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80098ca:	431a      	orrs	r2, r3
 80098cc:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80098ce:	f010 0010 	ands.w	r0, r0, #16
 80098d2:	d01b      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80098d4:	4a1e      	ldr	r2, [pc, #120]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80098d6:	68e9      	ldr	r1, [r5, #12]
 80098d8:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80098da:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80098dc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80098e0:	430b      	orrs	r3, r1
 80098e2:	6053      	str	r3, [r2, #4]
 80098e4:	e012      	b.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80098e6:	2700      	movs	r7, #0
 80098e8:	e7d4      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80098ea:	6833      	ldr	r3, [r6, #0]
 80098ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098f0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80098f2:	f7fd fddd 	bl	80074b0 <HAL_GetTick>
 80098f6:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098f8:	6833      	ldr	r3, [r6, #0]
 80098fa:	05d8      	lsls	r0, r3, #23
 80098fc:	d4ce      	bmi.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098fe:	f7fd fdd7 	bl	80074b0 <HAL_GetTick>
 8009902:	eba0 0008 	sub.w	r0, r0, r8
 8009906:	2864      	cmp	r0, #100	; 0x64
 8009908:	d9f6      	bls.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800990a:	2003      	movs	r0, #3
}
 800990c:	b002      	add	sp, #8
 800990e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009912:	686a      	ldr	r2, [r5, #4]
 8009914:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8009918:	429a      	cmp	r2, r3
 800991a:	d0c3      	beq.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800991c:	2001      	movs	r0, #1
 800991e:	4a0e      	ldr	r2, [pc, #56]	; (8009958 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009920:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8009922:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009924:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009926:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800992a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800992c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800992e:	07d9      	lsls	r1, r3, #31
 8009930:	d5b8      	bpl.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8009932:	f7fd fdbd 	bl	80074b0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009936:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800993a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800993c:	6a23      	ldr	r3, [r4, #32]
 800993e:	079a      	lsls	r2, r3, #30
 8009940:	d4b0      	bmi.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009942:	f7fd fdb5 	bl	80074b0 <HAL_GetTick>
 8009946:	1b80      	subs	r0, r0, r6
 8009948:	4540      	cmp	r0, r8
 800994a:	d9f7      	bls.n	800993c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800994c:	e7dd      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800994e:	bf00      	nop
 8009950:	40021000 	.word	0x40021000
 8009954:	40007000 	.word	0x40007000
 8009958:	42420440 	.word	0x42420440

0800995c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800995c:	4602      	mov	r2, r0
 800995e:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8009960:	4b34      	ldr	r3, [pc, #208]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
{
 8009962:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8009964:	ad02      	add	r5, sp, #8
 8009966:	f103 0610 	add.w	r6, r3, #16
 800996a:	462c      	mov	r4, r5
 800996c:	6818      	ldr	r0, [r3, #0]
 800996e:	6859      	ldr	r1, [r3, #4]
 8009970:	3308      	adds	r3, #8
 8009972:	c403      	stmia	r4!, {r0, r1}
 8009974:	42b3      	cmp	r3, r6
 8009976:	4625      	mov	r5, r4
 8009978:	d1f7      	bne.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800997a:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800997e:	2a02      	cmp	r2, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8009980:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8009984:	d049      	beq.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8009986:	2a10      	cmp	r2, #16
 8009988:	d003      	beq.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 800998a:	2a01      	cmp	r2, #1
 800998c:	d026      	beq.n	80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x80>
  uint32_t temp_reg = 0U, frequency = 0U;
 800998e:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8009990:	e038      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
      temp_reg = RCC->CFGR;
 8009992:	4b29      	ldr	r3, [pc, #164]	; (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8009994:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8009996:	6818      	ldr	r0, [r3, #0]
 8009998:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800999c:	d032      	beq.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800999e:	f3c1 4283 	ubfx	r2, r1, #18, #4
 80099a2:	a806      	add	r0, sp, #24
 80099a4:	4402      	add	r2, r0
 80099a6:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80099aa:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80099ac:	bf41      	itttt	mi
 80099ae:	685a      	ldrmi	r2, [r3, #4]
 80099b0:	a906      	addmi	r1, sp, #24
 80099b2:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 80099b6:	1852      	addmi	r2, r2, r1
 80099b8:	bf44      	itt	mi
 80099ba:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80099be:	4a1f      	ldrmi	r2, [pc, #124]	; (8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80099c0:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80099c2:	bf4c      	ite	mi
 80099c4:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80099c8:	4a1d      	ldrpl	r2, [pc, #116]	; (8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80099ca:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80099cc:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80099d0:	d418      	bmi.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          frequency = (pllclk * 2) / 3;
 80099d2:	2303      	movs	r3, #3
 80099d4:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80099d6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80099da:	e013      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80099dc:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 80099e0:	4a15      	ldr	r2, [pc, #84]	; (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 80099e2:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80099e4:	4019      	ands	r1, r3
 80099e6:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 80099ea:	d01f      	beq.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80099ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099f4:	d108      	bne.n	8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
        frequency = LSI_VALUE;
 80099f6:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80099fa:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 80099fc:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8009a00:	bf18      	it	ne
 8009a02:	4618      	movne	r0, r3
}
 8009a04:	b006      	add	sp, #24
 8009a06:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8009a08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a0c:	d1bf      	bne.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 8009a0e:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8009a10:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009a14:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009a18:	e7f2      	b.n	8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8009a1a:	f7ff ff17 	bl	800984c <HAL_RCC_GetPCLK2Freq>
 8009a1e:	4b06      	ldr	r3, [pc, #24]	; (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8009a26:	3301      	adds	r3, #1
 8009a28:	005b      	lsls	r3, r3, #1
 8009a2a:	e7d4      	b.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        frequency = LSE_VALUE;
 8009a2c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009a30:	e7e8      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 8009a32:	bf00      	nop
 8009a34:	0800a720 	.word	0x0800a720
 8009a38:	40021000 	.word	0x40021000
 8009a3c:	007a1200 	.word	0x007a1200
 8009a40:	003d0900 	.word	0x003d0900

08009a44 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8009a44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009a48:	461c      	mov	r4, r3
 8009a4a:	4616      	mov	r6, r2
 8009a4c:	460f      	mov	r7, r1
 8009a4e:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009a50:	f7fd fd2e 	bl	80074b0 <HAL_GetTick>
 8009a54:	4434      	add	r4, r6
 8009a56:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8009a58:	f7fd fd2a 	bl	80074b0 <HAL_GetTick>
 8009a5c:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009a5e:	4b23      	ldr	r3, [pc, #140]	; (8009aec <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8009a66:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a68:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8009a6a:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a6c:	6893      	ldr	r3, [r2, #8]
 8009a6e:	ea37 0303 	bics.w	r3, r7, r3
 8009a72:	d001      	beq.n	8009a78 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8009a74:	2000      	movs	r0, #0
 8009a76:	e02e      	b.n	8009ad6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8009a78:	1c73      	adds	r3, r6, #1
 8009a7a:	d0f7      	beq.n	8009a6c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a7c:	f7fd fd18 	bl	80074b0 <HAL_GetTick>
 8009a80:	eba0 0008 	sub.w	r0, r0, r8
 8009a84:	42a0      	cmp	r0, r4
 8009a86:	d329      	bcc.n	8009adc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a88:	682b      	ldr	r3, [r5, #0]
 8009a8a:	685a      	ldr	r2, [r3, #4]
 8009a8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009a90:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a92:	686a      	ldr	r2, [r5, #4]
 8009a94:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8009a98:	d10a      	bne.n	8009ab0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 8009a9a:	68aa      	ldr	r2, [r5, #8]
 8009a9c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009aa0:	d002      	beq.n	8009aa8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009aa2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009aa6:	d103      	bne.n	8009ab0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009aae:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ab0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009ab2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009ab6:	d107      	bne.n	8009ac8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009abe:	601a      	str	r2, [r3, #0]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ac6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8009ace:	2300      	movs	r3, #0
 8009ad0:	2003      	movs	r0, #3
 8009ad2:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8009ad6:	b002      	add	sp, #8
 8009ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 8009adc:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8009ade:	2b00      	cmp	r3, #0
      count--;
 8009ae0:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8009ae2:	bf08      	it	eq
 8009ae4:	2400      	moveq	r4, #0
      count--;
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	e7be      	b.n	8009a68 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8009aea:	bf00      	nop
 8009aec:	20000068 	.word	0x20000068

08009af0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009af0:	b510      	push	{r4, lr}
 8009af2:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009af4:	460a      	mov	r2, r1
 8009af6:	2180      	movs	r1, #128	; 0x80
{
 8009af8:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009afa:	f7ff ffa3 	bl	8009a44 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8009afe:	b120      	cbz	r0, 8009b0a <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8009b00:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b02:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009b04:	f043 0320 	orr.w	r3, r3, #32
 8009b08:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8009b0a:	bd10      	pop	{r4, pc}

08009b0c <HAL_SPI_Init>:
{
 8009b0c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8009b0e:	4604      	mov	r4, r0
 8009b10:	2800      	cmp	r0, #0
 8009b12:	d051      	beq.n	8009bb8 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009b14:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d14a      	bne.n	8009bb0 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b1a:	6842      	ldr	r2, [r0, #4]
 8009b1c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8009b20:	d000      	beq.n	8009b24 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009b22:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b24:	2300      	movs	r3, #0
 8009b26:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b28:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8009b2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009b30:	b923      	cbnz	r3, 8009b3c <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 8009b32:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8009b34:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8009b38:	f7fd fb7c 	bl	8007234 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8009b3c:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8009b3e:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8009b40:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8009b44:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b46:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8009b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b4c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b4e:	6863      	ldr	r3, [r4, #4]
 8009b50:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8009b54:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8009b58:	4303      	orrs	r3, r0
 8009b5a:	68e0      	ldr	r0, [r4, #12]
 8009b5c:	69a1      	ldr	r1, [r4, #24]
 8009b5e:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8009b62:	4303      	orrs	r3, r0
 8009b64:	6920      	ldr	r0, [r4, #16]
 8009b66:	f000 0002 	and.w	r0, r0, #2
 8009b6a:	4303      	orrs	r3, r0
 8009b6c:	6960      	ldr	r0, [r4, #20]
 8009b6e:	f000 0001 	and.w	r0, r0, #1
 8009b72:	4303      	orrs	r3, r0
 8009b74:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8009b78:	4303      	orrs	r3, r0
 8009b7a:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009b7c:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b7e:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8009b82:	4303      	orrs	r3, r0
 8009b84:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009b86:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b8a:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8009b8e:	4303      	orrs	r3, r0
 8009b90:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009b92:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8009b96:	4303      	orrs	r3, r0
 8009b98:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009b9a:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009b9c:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b9e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009ba0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ba4:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8009ba6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ba8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009baa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8009bae:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009bb0:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009bb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bb6:	e7b5      	b.n	8009b24 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8009bb8:	2001      	movs	r0, #1
 8009bba:	e7f8      	b.n	8009bae <HAL_SPI_Init+0xa2>

08009bbc <HAL_SPI_TransmitReceive>:
{
 8009bbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009bc0:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8009bc2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8009bc6:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8009bc8:	2b01      	cmp	r3, #1
{
 8009bca:	460d      	mov	r5, r1
 8009bcc:	4691      	mov	r9, r2
 8009bce:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8009bd2:	f000 80e0 	beq.w	8009d96 <HAL_SPI_TransmitReceive+0x1da>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8009bdc:	f7fd fc68 	bl	80074b0 <HAL_GetTick>
  tmp_state           = hspi->State;
 8009be0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8009be4:	4607      	mov	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009be6:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8009be8:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8009bea:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009bec:	d00a      	beq.n	8009c04 <HAL_SPI_TransmitReceive+0x48>
 8009bee:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8009bf2:	f040 80ce 	bne.w	8009d92 <HAL_SPI_TransmitReceive+0x1d6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009bf6:	68a3      	ldr	r3, [r4, #8]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f040 80ca 	bne.w	8009d92 <HAL_SPI_TransmitReceive+0x1d6>
 8009bfe:	2904      	cmp	r1, #4
 8009c00:	f040 80c7 	bne.w	8009d92 <HAL_SPI_TransmitReceive+0x1d6>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009c04:	2d00      	cmp	r5, #0
 8009c06:	d03f      	beq.n	8009c88 <HAL_SPI_TransmitReceive+0xcc>
 8009c08:	f1b9 0f00 	cmp.w	r9, #0
 8009c0c:	d03c      	beq.n	8009c88 <HAL_SPI_TransmitReceive+0xcc>
 8009c0e:	2e00      	cmp	r6, #0
 8009c10:	d03a      	beq.n	8009c88 <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009c12:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009c16:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009c1a:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009c1c:	bf1c      	itt	ne
 8009c1e:	2305      	movne	r3, #5
 8009c20:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c24:	2300      	movs	r3, #0
 8009c26:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8009c28:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c2c:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8009c2e:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8009c30:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c32:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8009c34:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c36:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8009c38:	bf58      	it	pl
 8009c3a:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009c3c:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8009c3e:	bf58      	it	pl
 8009c40:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
  hspi->TxXferSize  = Size;
 8009c44:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8009c46:	bf58      	it	pl
 8009c48:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009c4a:	68e1      	ldr	r1, [r4, #12]
 8009c4c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8009c50:	d151      	bne.n	8009cf6 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c52:	b10a      	cbz	r2, 8009c58 <HAL_SPI_TransmitReceive+0x9c>
 8009c54:	2e01      	cmp	r6, #1
 8009c56:	d107      	bne.n	8009c68 <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c58:	f835 2b02 	ldrh.w	r2, [r5], #2
 8009c5c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8009c5e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c60:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8009c62:	3b01      	subs	r3, #1
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8009c68:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c6a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	b96b      	cbnz	r3, 8009c8c <HAL_SPI_TransmitReceive+0xd0>
 8009c70:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	b953      	cbnz	r3, 8009c8c <HAL_SPI_TransmitReceive+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c76:	463a      	mov	r2, r7
 8009c78:	4641      	mov	r1, r8
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	f7ff ff38 	bl	8009af0 <SPI_EndRxTxTransaction>
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d07b      	beq.n	8009d7c <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c84:	2320      	movs	r3, #32
 8009c86:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8009c88:	2001      	movs	r0, #1
 8009c8a:	e02b      	b.n	8009ce4 <HAL_SPI_TransmitReceive+0x128>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009c8c:	6821      	ldr	r1, [r4, #0]
 8009c8e:	688b      	ldr	r3, [r1, #8]
 8009c90:	079a      	lsls	r2, r3, #30
 8009c92:	d50d      	bpl.n	8009cb0 <HAL_SPI_TransmitReceive+0xf4>
 8009c94:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	b153      	cbz	r3, 8009cb0 <HAL_SPI_TransmitReceive+0xf4>
 8009c9a:	b14d      	cbz	r5, 8009cb0 <HAL_SPI_TransmitReceive+0xf4>
        txallowed = 0U;
 8009c9c:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009ca0:	f833 2b02 	ldrh.w	r2, [r3], #2
 8009ca4:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ca6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8009ca8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009caa:	3b01      	subs	r3, #1
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009cb0:	688a      	ldr	r2, [r1, #8]
 8009cb2:	f012 0201 	ands.w	r2, r2, #1
 8009cb6:	d00c      	beq.n	8009cd2 <HAL_SPI_TransmitReceive+0x116>
 8009cb8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	b14b      	cbz	r3, 8009cd2 <HAL_SPI_TransmitReceive+0x116>
        txallowed = 1U;
 8009cbe:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009cc0:	68c9      	ldr	r1, [r1, #12]
 8009cc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009cc4:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009cc8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8009cca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009cd2:	f7fd fbed 	bl	80074b0 <HAL_GetTick>
 8009cd6:	1bc0      	subs	r0, r0, r7
 8009cd8:	4540      	cmp	r0, r8
 8009cda:	d3c6      	bcc.n	8009c6a <HAL_SPI_TransmitReceive+0xae>
 8009cdc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8009ce0:	d0c3      	beq.n	8009c6a <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 8009ce2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009cea:	2300      	movs	r3, #0
 8009cec:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8009cf0:	b003      	add	sp, #12
 8009cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009cf6:	b10a      	cbz	r2, 8009cfc <HAL_SPI_TransmitReceive+0x140>
 8009cf8:	2e01      	cmp	r6, #1
 8009cfa:	d108      	bne.n	8009d0e <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009cfc:	782a      	ldrb	r2, [r5, #0]
 8009cfe:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009d02:	3301      	adds	r3, #1
 8009d04:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8009d06:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8009d0e:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d10:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	b91b      	cbnz	r3, 8009d1e <HAL_SPI_TransmitReceive+0x162>
 8009d16:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d0ab      	beq.n	8009c76 <HAL_SPI_TransmitReceive+0xba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009d1e:	6822      	ldr	r2, [r4, #0]
 8009d20:	6893      	ldr	r3, [r2, #8]
 8009d22:	079b      	lsls	r3, r3, #30
 8009d24:	d50e      	bpl.n	8009d44 <HAL_SPI_TransmitReceive+0x188>
 8009d26:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	b15b      	cbz	r3, 8009d44 <HAL_SPI_TransmitReceive+0x188>
 8009d2c:	b155      	cbz	r5, 8009d44 <HAL_SPI_TransmitReceive+0x188>
        txallowed = 0U;
 8009d2e:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009d30:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8009d36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009d38:	3301      	adds	r3, #1
 8009d3a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8009d3c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009d44:	6822      	ldr	r2, [r4, #0]
 8009d46:	6891      	ldr	r1, [r2, #8]
 8009d48:	f011 0101 	ands.w	r1, r1, #1
 8009d4c:	d00d      	beq.n	8009d6a <HAL_SPI_TransmitReceive+0x1ae>
 8009d4e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	b153      	cbz	r3, 8009d6a <HAL_SPI_TransmitReceive+0x1ae>
        txallowed = 1U;
 8009d54:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009d56:	68d2      	ldr	r2, [r2, #12]
 8009d58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009d5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009d5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009d5e:	3301      	adds	r3, #1
 8009d60:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8009d62:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009d64:	3b01      	subs	r3, #1
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009d6a:	f7fd fba1 	bl	80074b0 <HAL_GetTick>
 8009d6e:	1bc0      	subs	r0, r0, r7
 8009d70:	4540      	cmp	r0, r8
 8009d72:	d3cd      	bcc.n	8009d10 <HAL_SPI_TransmitReceive+0x154>
 8009d74:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8009d78:	d0ca      	beq.n	8009d10 <HAL_SPI_TransmitReceive+0x154>
 8009d7a:	e7b2      	b.n	8009ce2 <HAL_SPI_TransmitReceive+0x126>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009d7c:	68a3      	ldr	r3, [r4, #8]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d1b0      	bne.n	8009ce4 <HAL_SPI_TransmitReceive+0x128>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d82:	6823      	ldr	r3, [r4, #0]
 8009d84:	9001      	str	r0, [sp, #4]
 8009d86:	68da      	ldr	r2, [r3, #12]
 8009d88:	9201      	str	r2, [sp, #4]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	9301      	str	r3, [sp, #4]
 8009d8e:	9b01      	ldr	r3, [sp, #4]
 8009d90:	e7a8      	b.n	8009ce4 <HAL_SPI_TransmitReceive+0x128>
    errorcode = HAL_BUSY;
 8009d92:	2002      	movs	r0, #2
 8009d94:	e7a6      	b.n	8009ce4 <HAL_SPI_TransmitReceive+0x128>
  __HAL_LOCK(hspi);
 8009d96:	2002      	movs	r0, #2
 8009d98:	e7aa      	b.n	8009cf0 <HAL_SPI_TransmitReceive+0x134>

08009d9a <HAL_SPI_ErrorCallback>:
 8009d9a:	4770      	bx	lr

08009d9c <HAL_SPI_IRQHandler>:
{
 8009d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8009d9e:	6803      	ldr	r3, [r0, #0]
{
 8009da0:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8009da2:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8009da4:	689a      	ldr	r2, [r3, #8]
{
 8009da6:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009da8:	0656      	lsls	r6, r2, #25
 8009daa:	ea4f 1592 	mov.w	r5, r2, lsr #6
 8009dae:	f3c2 1780 	ubfx	r7, r2, #6, #1
 8009db2:	d408      	bmi.n	8009dc6 <HAL_SPI_IRQHandler+0x2a>
 8009db4:	07d6      	lsls	r6, r2, #31
 8009db6:	d506      	bpl.n	8009dc6 <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009db8:	064e      	lsls	r6, r1, #25
 8009dba:	d504      	bpl.n	8009dc6 <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 8009dbc:	6c03      	ldr	r3, [r0, #64]	; 0x40
}
 8009dbe:	b005      	add	sp, #20
 8009dc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 8009dc4:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009dc6:	0796      	lsls	r6, r2, #30
 8009dc8:	d504      	bpl.n	8009dd4 <HAL_SPI_IRQHandler+0x38>
 8009dca:	0608      	lsls	r0, r1, #24
 8009dcc:	d502      	bpl.n	8009dd4 <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 8009dce:	4620      	mov	r0, r4
 8009dd0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009dd2:	e7f4      	b.n	8009dbe <HAL_SPI_IRQHandler+0x22>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8009dd4:	0956      	lsrs	r6, r2, #5
 8009dd6:	ea45 1252 	orr.w	r2, r5, r2, lsr #5
 8009dda:	07d2      	lsls	r2, r2, #31
 8009ddc:	d54c      	bpl.n	8009e78 <HAL_SPI_IRQHandler+0xdc>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009dde:	068d      	lsls	r5, r1, #26
 8009de0:	d54a      	bpl.n	8009e78 <HAL_SPI_IRQHandler+0xdc>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009de2:	b177      	cbz	r7, 8009e02 <HAL_SPI_IRQHandler+0x66>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009de4:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 8009de8:	2000      	movs	r0, #0
 8009dea:	2a03      	cmp	r2, #3
 8009dec:	d03e      	beq.n	8009e6c <HAL_SPI_IRQHandler+0xd0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009dee:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009df0:	f042 0204 	orr.w	r2, r2, #4
 8009df4:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009df6:	9001      	str	r0, [sp, #4]
 8009df8:	68da      	ldr	r2, [r3, #12]
 8009dfa:	9201      	str	r2, [sp, #4]
 8009dfc:	689a      	ldr	r2, [r3, #8]
 8009dfe:	9201      	str	r2, [sp, #4]
 8009e00:	9a01      	ldr	r2, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009e02:	07f0      	lsls	r0, r6, #31
 8009e04:	d50c      	bpl.n	8009e20 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009e06:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009e08:	f042 0201 	orr.w	r2, r2, #1
 8009e0c:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009e0e:	2200      	movs	r2, #0
 8009e10:	9203      	str	r2, [sp, #12]
 8009e12:	689a      	ldr	r2, [r3, #8]
 8009e14:	9203      	str	r2, [sp, #12]
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e1c:	601a      	str	r2, [r3, #0]
 8009e1e:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e20:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009e22:	b34a      	cbz	r2, 8009e78 <HAL_SPI_IRQHandler+0xdc>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009e24:	685a      	ldr	r2, [r3, #4]
 8009e26:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009e2a:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009e32:	078a      	lsls	r2, r1, #30
 8009e34:	d022      	beq.n	8009e7c <HAL_SPI_IRQHandler+0xe0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009e36:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8009e38:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009e3a:	f022 0203 	bic.w	r2, r2, #3
 8009e3e:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8009e40:	b140      	cbz	r0, 8009e54 <HAL_SPI_IRQHandler+0xb8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009e42:	4b10      	ldr	r3, [pc, #64]	; (8009e84 <HAL_SPI_IRQHandler+0xe8>)
 8009e44:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009e46:	f7fd fd81 	bl	800794c <HAL_DMA_Abort_IT>
 8009e4a:	b118      	cbz	r0, 8009e54 <HAL_SPI_IRQHandler+0xb8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009e4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e52:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009e54:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009e56:	b178      	cbz	r0, 8009e78 <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009e58:	4b0a      	ldr	r3, [pc, #40]	; (8009e84 <HAL_SPI_IRQHandler+0xe8>)
 8009e5a:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009e5c:	f7fd fd76 	bl	800794c <HAL_DMA_Abort_IT>
 8009e60:	b150      	cbz	r0, 8009e78 <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009e62:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e68:	6563      	str	r3, [r4, #84]	; 0x54
 8009e6a:	e005      	b.n	8009e78 <HAL_SPI_IRQHandler+0xdc>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009e6c:	9002      	str	r0, [sp, #8]
 8009e6e:	68da      	ldr	r2, [r3, #12]
 8009e70:	9202      	str	r2, [sp, #8]
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	9302      	str	r3, [sp, #8]
 8009e76:	9b02      	ldr	r3, [sp, #8]
}
 8009e78:	b005      	add	sp, #20
 8009e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	f7ff ff8c 	bl	8009d9a <HAL_SPI_ErrorCallback>
 8009e82:	e7f9      	b.n	8009e78 <HAL_SPI_IRQHandler+0xdc>
 8009e84:	08009e89 	.word	0x08009e89

08009e88 <SPI_DMAAbortOnError>:
{
 8009e88:	b508      	push	{r3, lr}
  hspi->RxXferCount = 0U;
 8009e8a:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009e8c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8009e8e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009e90:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8009e92:	f7ff ff82 	bl	8009d9a <HAL_SPI_ErrorCallback>
}
 8009e96:	bd08      	pop	{r3, pc}

08009e98 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e98:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d120      	bne.n	8009ee2 <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ea6:	6803      	ldr	r3, [r0, #0]
 8009ea8:	68da      	ldr	r2, [r3, #12]
 8009eaa:	f042 0201 	orr.w	r2, r2, #1
 8009eae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009eb0:	4a0d      	ldr	r2, [pc, #52]	; (8009ee8 <HAL_TIM_Base_Start_IT+0x50>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d00a      	beq.n	8009ecc <HAL_TIM_Base_Start_IT+0x34>
 8009eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eba:	d007      	beq.n	8009ecc <HAL_TIM_Base_Start_IT+0x34>
 8009ebc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d003      	beq.n	8009ecc <HAL_TIM_Base_Start_IT+0x34>
 8009ec4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d104      	bne.n	8009ed6 <HAL_TIM_Base_Start_IT+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ecc:	689a      	ldr	r2, [r3, #8]
 8009ece:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ed2:	2a06      	cmp	r2, #6
 8009ed4:	d003      	beq.n	8009ede <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	f042 0201 	orr.w	r2, r2, #1
 8009edc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ede:	2000      	movs	r0, #0
}
 8009ee0:	4770      	bx	lr
    return HAL_ERROR;
 8009ee2:	2001      	movs	r0, #1
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	40012c00 	.word	0x40012c00

08009eec <HAL_TIM_Base_Stop_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009eec:	6803      	ldr	r3, [r0, #0]
 8009eee:	68da      	ldr	r2, [r3, #12]
 8009ef0:	f022 0201 	bic.w	r2, r2, #1
 8009ef4:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009ef6:	f241 1211 	movw	r2, #4369	; 0x1111
 8009efa:	6a19      	ldr	r1, [r3, #32]
 8009efc:	4211      	tst	r1, r2
 8009efe:	d108      	bne.n	8009f12 <HAL_TIM_Base_Stop_IT+0x26>
 8009f00:	f240 4244 	movw	r2, #1092	; 0x444
 8009f04:	6a19      	ldr	r1, [r3, #32]
 8009f06:	4211      	tst	r1, r2
 8009f08:	bf02      	ittt	eq
 8009f0a:	681a      	ldreq	r2, [r3, #0]
 8009f0c:	f022 0201 	biceq.w	r2, r2, #1
 8009f10:	601a      	streq	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009f12:	2301      	movs	r3, #1
 8009f14:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8009f18:	2000      	movs	r0, #0
 8009f1a:	4770      	bx	lr

08009f1c <HAL_TIM_OnePulse_MspInit>:
 8009f1c:	4770      	bx	lr

08009f1e <HAL_TIM_OC_DelayElapsedCallback>:
 8009f1e:	4770      	bx	lr

08009f20 <HAL_TIM_IC_CaptureCallback>:
 8009f20:	4770      	bx	lr

08009f22 <HAL_TIM_PWM_PulseFinishedCallback>:
 8009f22:	4770      	bx	lr

08009f24 <HAL_TIM_TriggerCallback>:
 8009f24:	4770      	bx	lr

08009f26 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009f26:	6803      	ldr	r3, [r0, #0]
{
 8009f28:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009f2a:	691a      	ldr	r2, [r3, #16]
{
 8009f2c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009f2e:	0791      	lsls	r1, r2, #30
 8009f30:	d50e      	bpl.n	8009f50 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009f32:	68da      	ldr	r2, [r3, #12]
 8009f34:	0792      	lsls	r2, r2, #30
 8009f36:	d50b      	bpl.n	8009f50 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009f38:	f06f 0202 	mvn.w	r2, #2
 8009f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f3e:	2201      	movs	r2, #1
 8009f40:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f42:	699b      	ldr	r3, [r3, #24]
 8009f44:	079b      	lsls	r3, r3, #30
 8009f46:	d077      	beq.n	800a038 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009f48:	f7ff ffea 	bl	8009f20 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009f50:	6823      	ldr	r3, [r4, #0]
 8009f52:	691a      	ldr	r2, [r3, #16]
 8009f54:	0750      	lsls	r0, r2, #29
 8009f56:	d510      	bpl.n	8009f7a <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009f58:	68da      	ldr	r2, [r3, #12]
 8009f5a:	0751      	lsls	r1, r2, #29
 8009f5c:	d50d      	bpl.n	8009f7a <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f5e:	f06f 0204 	mvn.w	r2, #4
 8009f62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f64:	2202      	movs	r2, #2
 8009f66:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f68:	699b      	ldr	r3, [r3, #24]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f6a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f6c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009f70:	d068      	beq.n	800a044 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8009f72:	f7ff ffd5 	bl	8009f20 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f76:	2300      	movs	r3, #0
 8009f78:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f7a:	6823      	ldr	r3, [r4, #0]
 8009f7c:	691a      	ldr	r2, [r3, #16]
 8009f7e:	0712      	lsls	r2, r2, #28
 8009f80:	d50f      	bpl.n	8009fa2 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f82:	68da      	ldr	r2, [r3, #12]
 8009f84:	0710      	lsls	r0, r2, #28
 8009f86:	d50c      	bpl.n	8009fa2 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f88:	f06f 0208 	mvn.w	r2, #8
 8009f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f8e:	2204      	movs	r2, #4
 8009f90:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f92:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f94:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f96:	0799      	lsls	r1, r3, #30
 8009f98:	d05a      	beq.n	800a050 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8009f9a:	f7ff ffc1 	bl	8009f20 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	691a      	ldr	r2, [r3, #16]
 8009fa6:	06d2      	lsls	r2, r2, #27
 8009fa8:	d510      	bpl.n	8009fcc <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009faa:	68da      	ldr	r2, [r3, #12]
 8009fac:	06d0      	lsls	r0, r2, #27
 8009fae:	d50d      	bpl.n	8009fcc <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009fb0:	f06f 0210 	mvn.w	r2, #16
 8009fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009fb6:	2208      	movs	r2, #8
 8009fb8:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009fba:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fbc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009fbe:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009fc2:	d04b      	beq.n	800a05c <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8009fc4:	f7ff ffac 	bl	8009f20 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009fcc:	6823      	ldr	r3, [r4, #0]
 8009fce:	691a      	ldr	r2, [r3, #16]
 8009fd0:	07d1      	lsls	r1, r2, #31
 8009fd2:	d508      	bpl.n	8009fe6 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009fd4:	68da      	ldr	r2, [r3, #12]
 8009fd6:	07d2      	lsls	r2, r2, #31
 8009fd8:	d505      	bpl.n	8009fe6 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009fda:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009fde:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009fe0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009fe2:	f7fc fde7 	bl	8006bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009fe6:	6823      	ldr	r3, [r4, #0]
 8009fe8:	691a      	ldr	r2, [r3, #16]
 8009fea:	0610      	lsls	r0, r2, #24
 8009fec:	d508      	bpl.n	800a000 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009fee:	68da      	ldr	r2, [r3, #12]
 8009ff0:	0611      	lsls	r1, r2, #24
 8009ff2:	d505      	bpl.n	800a000 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ff4:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ff8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ffa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009ffc:	f000 f995 	bl	800a32a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a000:	6823      	ldr	r3, [r4, #0]
 800a002:	691a      	ldr	r2, [r3, #16]
 800a004:	0652      	lsls	r2, r2, #25
 800a006:	d508      	bpl.n	800a01a <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a008:	68da      	ldr	r2, [r3, #12]
 800a00a:	0650      	lsls	r0, r2, #25
 800a00c:	d505      	bpl.n	800a01a <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a00e:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a012:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a014:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a016:	f7ff ff85 	bl	8009f24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a01a:	6823      	ldr	r3, [r4, #0]
 800a01c:	691a      	ldr	r2, [r3, #16]
 800a01e:	0691      	lsls	r1, r2, #26
 800a020:	d522      	bpl.n	800a068 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a022:	68da      	ldr	r2, [r3, #12]
 800a024:	0692      	lsls	r2, r2, #26
 800a026:	d51f      	bpl.n	800a068 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a028:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a02c:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a02e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a032:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800a034:	f000 b978 	b.w	800a328 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a038:	f7ff ff71 	bl	8009f1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a03c:	4620      	mov	r0, r4
 800a03e:	f7ff ff70 	bl	8009f22 <HAL_TIM_PWM_PulseFinishedCallback>
 800a042:	e783      	b.n	8009f4c <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a044:	f7ff ff6b 	bl	8009f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a048:	4620      	mov	r0, r4
 800a04a:	f7ff ff6a 	bl	8009f22 <HAL_TIM_PWM_PulseFinishedCallback>
 800a04e:	e792      	b.n	8009f76 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a050:	f7ff ff65 	bl	8009f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a054:	4620      	mov	r0, r4
 800a056:	f7ff ff64 	bl	8009f22 <HAL_TIM_PWM_PulseFinishedCallback>
 800a05a:	e7a0      	b.n	8009f9e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a05c:	f7ff ff5f 	bl	8009f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a060:	4620      	mov	r0, r4
 800a062:	f7ff ff5e 	bl	8009f22 <HAL_TIM_PWM_PulseFinishedCallback>
 800a066:	e7af      	b.n	8009fc8 <HAL_TIM_IRQHandler+0xa2>
}
 800a068:	bd10      	pop	{r4, pc}
	...

0800a06c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a06c:	4a1a      	ldr	r2, [pc, #104]	; (800a0d8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800a06e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a070:	4290      	cmp	r0, r2
 800a072:	d00a      	beq.n	800a08a <TIM_Base_SetConfig+0x1e>
 800a074:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a078:	d007      	beq.n	800a08a <TIM_Base_SetConfig+0x1e>
 800a07a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a07e:	4290      	cmp	r0, r2
 800a080:	d003      	beq.n	800a08a <TIM_Base_SetConfig+0x1e>
 800a082:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a086:	4290      	cmp	r0, r2
 800a088:	d115      	bne.n	800a0b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800a08a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a08c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a090:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a092:	4a11      	ldr	r2, [pc, #68]	; (800a0d8 <TIM_Base_SetConfig+0x6c>)
 800a094:	4290      	cmp	r0, r2
 800a096:	d00a      	beq.n	800a0ae <TIM_Base_SetConfig+0x42>
 800a098:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a09c:	d007      	beq.n	800a0ae <TIM_Base_SetConfig+0x42>
 800a09e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a0a2:	4290      	cmp	r0, r2
 800a0a4:	d003      	beq.n	800a0ae <TIM_Base_SetConfig+0x42>
 800a0a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a0aa:	4290      	cmp	r0, r2
 800a0ac:	d103      	bne.n	800a0b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0ae:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0b4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0b6:	694a      	ldr	r2, [r1, #20]
 800a0b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0bc:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800a0be:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0c0:	688b      	ldr	r3, [r1, #8]
 800a0c2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0c4:	680b      	ldr	r3, [r1, #0]
 800a0c6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0c8:	4b03      	ldr	r3, [pc, #12]	; (800a0d8 <TIM_Base_SetConfig+0x6c>)
 800a0ca:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0cc:	bf04      	itt	eq
 800a0ce:	690b      	ldreq	r3, [r1, #16]
 800a0d0:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	6143      	str	r3, [r0, #20]
}
 800a0d6:	4770      	bx	lr
 800a0d8:	40012c00 	.word	0x40012c00

0800a0dc <HAL_TIM_Base_Init>:
{
 800a0dc:	b510      	push	{r4, lr}
  if (htim == NULL)
 800a0de:	4604      	mov	r4, r0
 800a0e0:	b330      	cbz	r0, 800a130 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800a0e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a0e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a0ea:	b91b      	cbnz	r3, 800a0f4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800a0ec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800a0f0:	f7fd f8e2 	bl	80072b8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800a0f4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0f6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800a0f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0fc:	1d21      	adds	r1, r4, #4
 800a0fe:	f7ff ffb5 	bl	800a06c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a102:	2301      	movs	r3, #1
  return HAL_OK;
 800a104:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a106:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a10a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800a10e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800a112:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800a116:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a11a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a11e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a122:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a126:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800a12a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800a12e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a130:	2001      	movs	r0, #1
 800a132:	e7fc      	b.n	800a12e <HAL_TIM_Base_Init+0x52>

0800a134 <HAL_TIM_OnePulse_Init>:
{
 800a134:	b538      	push	{r3, r4, r5, lr}
 800a136:	460d      	mov	r5, r1
  if (htim == NULL)
 800a138:	4604      	mov	r4, r0
 800a13a:	b330      	cbz	r0, 800a18a <HAL_TIM_OnePulse_Init+0x56>
  if (htim->State == HAL_TIM_STATE_RESET)
 800a13c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a140:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a144:	b91b      	cbnz	r3, 800a14e <HAL_TIM_OnePulse_Init+0x1a>
    htim->Lock = HAL_UNLOCKED;
 800a146:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 800a14a:	f7ff fee7 	bl	8009f1c <HAL_TIM_OnePulse_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800a14e:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a150:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800a152:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a156:	1d21      	adds	r1, r4, #4
 800a158:	f7ff ff88 	bl	800a06c <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800a15c:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800a15e:	2000      	movs	r0, #0
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	f022 0208 	bic.w	r2, r2, #8
 800a166:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	432a      	orrs	r2, r5
 800a16c:	601a      	str	r2, [r3, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a16e:	2301      	movs	r3, #1
 800a170:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a174:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a178:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a17c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 800a184:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800a188:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a18a:	2001      	movs	r0, #1
 800a18c:	e7fc      	b.n	800a188 <HAL_TIM_OnePulse_Init+0x54>

0800a18e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a18e:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a190:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a192:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a194:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a198:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800a19c:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a19e:	6082      	str	r2, [r0, #8]
}
 800a1a0:	bd10      	pop	{r4, pc}

0800a1a2 <HAL_TIM_ConfigClockSource>:
{
 800a1a2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800a1a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800a1a8:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	f04f 0002 	mov.w	r0, #2
 800a1b0:	d027      	beq.n	800a202 <HAL_TIM_ConfigClockSource+0x60>
 800a1b2:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800a1b4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800a1b8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800a1ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800a1be:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800a1c8:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800a1ca:	680b      	ldr	r3, [r1, #0]
 800a1cc:	2b60      	cmp	r3, #96	; 0x60
 800a1ce:	d04d      	beq.n	800a26c <HAL_TIM_ConfigClockSource+0xca>
 800a1d0:	d832      	bhi.n	800a238 <HAL_TIM_ConfigClockSource+0x96>
 800a1d2:	2b40      	cmp	r3, #64	; 0x40
 800a1d4:	d062      	beq.n	800a29c <HAL_TIM_ConfigClockSource+0xfa>
 800a1d6:	d815      	bhi.n	800a204 <HAL_TIM_ConfigClockSource+0x62>
 800a1d8:	2b20      	cmp	r3, #32
 800a1da:	d003      	beq.n	800a1e4 <HAL_TIM_ConfigClockSource+0x42>
 800a1dc:	d809      	bhi.n	800a1f2 <HAL_TIM_ConfigClockSource+0x50>
 800a1de:	f033 0210 	bics.w	r2, r3, #16
 800a1e2:	d108      	bne.n	800a1f6 <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 800a1e4:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	f043 0307 	orr.w	r3, r3, #7
 800a1f0:	e020      	b.n	800a234 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 800a1f2:	2b30      	cmp	r3, #48	; 0x30
 800a1f4:	d0f6      	beq.n	800a1e4 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 800a1f6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800a1f8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800a1fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a1fe:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800a202:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800a204:	2b50      	cmp	r3, #80	; 0x50
 800a206:	d1f6      	bne.n	800a1f6 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a208:	684a      	ldr	r2, [r1, #4]
 800a20a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800a20c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a20e:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a210:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a214:	f025 0501 	bic.w	r5, r5, #1
 800a218:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a21a:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800a21c:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a21e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a222:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800a226:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800a228:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800a22a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a22c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a230:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800a234:	6083      	str	r3, [r0, #8]
}
 800a236:	e7de      	b.n	800a1f6 <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 800a238:	2b70      	cmp	r3, #112	; 0x70
 800a23a:	d00c      	beq.n	800a256 <HAL_TIM_ConfigClockSource+0xb4>
 800a23c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a240:	d1d9      	bne.n	800a1f6 <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 800a242:	68cb      	ldr	r3, [r1, #12]
 800a244:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800a248:	f7ff ffa1 	bl	800a18e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a24c:	6822      	ldr	r2, [r4, #0]
 800a24e:	6893      	ldr	r3, [r2, #8]
 800a250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a254:	e008      	b.n	800a268 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 800a256:	68cb      	ldr	r3, [r1, #12]
 800a258:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800a25c:	f7ff ff97 	bl	800a18e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a260:	6822      	ldr	r2, [r4, #0]
 800a262:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a264:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a268:	6093      	str	r3, [r2, #8]
      break;
 800a26a:	e7c4      	b.n	800a1f6 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a26c:	684d      	ldr	r5, [r1, #4]
 800a26e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a270:	6a01      	ldr	r1, [r0, #32]
 800a272:	f021 0110 	bic.w	r1, r1, #16
 800a276:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a278:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800a27a:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a27c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a280:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800a284:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a288:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800a28c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800a28e:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800a290:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a296:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800a29a:	e7cb      	b.n	800a234 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a29c:	684a      	ldr	r2, [r1, #4]
 800a29e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800a2a0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2a2:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2a4:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2a8:	f025 0501 	bic.w	r5, r5, #1
 800a2ac:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2ae:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800a2b0:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a2b6:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800a2ba:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800a2bc:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800a2be:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2c4:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800a2c8:	e7b4      	b.n	800a234 <HAL_TIM_ConfigClockSource+0x92>
	...

0800a2cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2cc:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2ce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800a2d2:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	f04f 0002 	mov.w	r0, #2
 800a2da:	d022      	beq.n	800a322 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2dc:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800a2de:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800a2e2:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2e4:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800a2e6:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2ea:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 800a2ec:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a2ee:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2f0:	4c0c      	ldr	r4, [pc, #48]	; (800a324 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800a2f2:	42a3      	cmp	r3, r4
 800a2f4:	d00a      	beq.n	800a30c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800a2f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2fa:	d007      	beq.n	800a30c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800a2fc:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 800a300:	42a3      	cmp	r3, r4
 800a302:	d003      	beq.n	800a30c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800a304:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a308:	42a3      	cmp	r3, r4
 800a30a:	d104      	bne.n	800a316 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a30c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a30e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a312:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a314:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a316:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800a318:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800a31a:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a31e:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 800a322:	bd30      	pop	{r4, r5, pc}
 800a324:	40012c00 	.word	0x40012c00

0800a328 <HAL_TIMEx_CommutCallback>:
 800a328:	4770      	bx	lr

0800a32a <HAL_TIMEx_BreakCallback>:
 800a32a:	4770      	bx	lr

0800a32c <_ZdlPv>:
 800a32c:	f000 b85c 	b.w	800a3e8 <free>

0800a330 <_ZdlPvj>:
 800a330:	f7ff bffc 	b.w	800a32c <_ZdlPv>

0800a334 <_ZdaPv>:
 800a334:	f7ff bffa 	b.w	800a32c <_ZdlPv>

0800a338 <_Znwj>:
 800a338:	2801      	cmp	r0, #1
 800a33a:	bf38      	it	cc
 800a33c:	2001      	movcc	r0, #1
 800a33e:	b510      	push	{r4, lr}
 800a340:	4604      	mov	r4, r0
 800a342:	4620      	mov	r0, r4
 800a344:	f000 f848 	bl	800a3d8 <malloc>
 800a348:	b930      	cbnz	r0, 800a358 <_Znwj+0x20>
 800a34a:	f000 f80b 	bl	800a364 <_ZSt15get_new_handlerv>
 800a34e:	b908      	cbnz	r0, 800a354 <_Znwj+0x1c>
 800a350:	f000 f810 	bl	800a374 <abort>
 800a354:	4780      	blx	r0
 800a356:	e7f4      	b.n	800a342 <_Znwj+0xa>
 800a358:	bd10      	pop	{r4, pc}

0800a35a <_Znaj>:
 800a35a:	f7ff bfed 	b.w	800a338 <_Znwj>

0800a35e <_ZSt20__throw_length_errorPKc>:
 800a35e:	b508      	push	{r3, lr}
 800a360:	f000 f808 	bl	800a374 <abort>

0800a364 <_ZSt15get_new_handlerv>:
 800a364:	4b02      	ldr	r3, [pc, #8]	; (800a370 <_ZSt15get_new_handlerv+0xc>)
 800a366:	6818      	ldr	r0, [r3, #0]
 800a368:	f3bf 8f5b 	dmb	ish
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	20002448 	.word	0x20002448

0800a374 <abort>:
 800a374:	2006      	movs	r0, #6
 800a376:	b508      	push	{r3, lr}
 800a378:	f000 f940 	bl	800a5fc <raise>
 800a37c:	2001      	movs	r0, #1
 800a37e:	f7fd f807 	bl	8007390 <_exit>
	...

0800a384 <__errno>:
 800a384:	4b01      	ldr	r3, [pc, #4]	; (800a38c <__errno+0x8>)
 800a386:	6818      	ldr	r0, [r3, #0]
 800a388:	4770      	bx	lr
 800a38a:	bf00      	nop
 800a38c:	20000074 	.word	0x20000074

0800a390 <__libc_init_array>:
 800a390:	b570      	push	{r4, r5, r6, lr}
 800a392:	2600      	movs	r6, #0
 800a394:	4d0c      	ldr	r5, [pc, #48]	; (800a3c8 <__libc_init_array+0x38>)
 800a396:	4c0d      	ldr	r4, [pc, #52]	; (800a3cc <__libc_init_array+0x3c>)
 800a398:	1b64      	subs	r4, r4, r5
 800a39a:	10a4      	asrs	r4, r4, #2
 800a39c:	42a6      	cmp	r6, r4
 800a39e:	d109      	bne.n	800a3b4 <__libc_init_array+0x24>
 800a3a0:	f000 f956 	bl	800a650 <_init>
 800a3a4:	2600      	movs	r6, #0
 800a3a6:	4d0a      	ldr	r5, [pc, #40]	; (800a3d0 <__libc_init_array+0x40>)
 800a3a8:	4c0a      	ldr	r4, [pc, #40]	; (800a3d4 <__libc_init_array+0x44>)
 800a3aa:	1b64      	subs	r4, r4, r5
 800a3ac:	10a4      	asrs	r4, r4, #2
 800a3ae:	42a6      	cmp	r6, r4
 800a3b0:	d105      	bne.n	800a3be <__libc_init_array+0x2e>
 800a3b2:	bd70      	pop	{r4, r5, r6, pc}
 800a3b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3b8:	4798      	blx	r3
 800a3ba:	3601      	adds	r6, #1
 800a3bc:	e7ee      	b.n	800a39c <__libc_init_array+0xc>
 800a3be:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3c2:	4798      	blx	r3
 800a3c4:	3601      	adds	r6, #1
 800a3c6:	e7f2      	b.n	800a3ae <__libc_init_array+0x1e>
 800a3c8:	0800a73c 	.word	0x0800a73c
 800a3cc:	0800a73c 	.word	0x0800a73c
 800a3d0:	0800a73c 	.word	0x0800a73c
 800a3d4:	0800a758 	.word	0x0800a758

0800a3d8 <malloc>:
 800a3d8:	4b02      	ldr	r3, [pc, #8]	; (800a3e4 <malloc+0xc>)
 800a3da:	4601      	mov	r1, r0
 800a3dc:	6818      	ldr	r0, [r3, #0]
 800a3de:	f000 b87b 	b.w	800a4d8 <_malloc_r>
 800a3e2:	bf00      	nop
 800a3e4:	20000074 	.word	0x20000074

0800a3e8 <free>:
 800a3e8:	4b02      	ldr	r3, [pc, #8]	; (800a3f4 <free+0xc>)
 800a3ea:	4601      	mov	r1, r0
 800a3ec:	6818      	ldr	r0, [r3, #0]
 800a3ee:	f000 b827 	b.w	800a440 <_free_r>
 800a3f2:	bf00      	nop
 800a3f4:	20000074 	.word	0x20000074

0800a3f8 <memcmp>:
 800a3f8:	b530      	push	{r4, r5, lr}
 800a3fa:	2400      	movs	r4, #0
 800a3fc:	3901      	subs	r1, #1
 800a3fe:	42a2      	cmp	r2, r4
 800a400:	d101      	bne.n	800a406 <memcmp+0xe>
 800a402:	2000      	movs	r0, #0
 800a404:	e005      	b.n	800a412 <memcmp+0x1a>
 800a406:	5d03      	ldrb	r3, [r0, r4]
 800a408:	3401      	adds	r4, #1
 800a40a:	5d0d      	ldrb	r5, [r1, r4]
 800a40c:	42ab      	cmp	r3, r5
 800a40e:	d0f6      	beq.n	800a3fe <memcmp+0x6>
 800a410:	1b58      	subs	r0, r3, r5
 800a412:	bd30      	pop	{r4, r5, pc}

0800a414 <memcpy>:
 800a414:	440a      	add	r2, r1
 800a416:	4291      	cmp	r1, r2
 800a418:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a41c:	d100      	bne.n	800a420 <memcpy+0xc>
 800a41e:	4770      	bx	lr
 800a420:	b510      	push	{r4, lr}
 800a422:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a426:	4291      	cmp	r1, r2
 800a428:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a42c:	d1f9      	bne.n	800a422 <memcpy+0xe>
 800a42e:	bd10      	pop	{r4, pc}

0800a430 <memset>:
 800a430:	4603      	mov	r3, r0
 800a432:	4402      	add	r2, r0
 800a434:	4293      	cmp	r3, r2
 800a436:	d100      	bne.n	800a43a <memset+0xa>
 800a438:	4770      	bx	lr
 800a43a:	f803 1b01 	strb.w	r1, [r3], #1
 800a43e:	e7f9      	b.n	800a434 <memset+0x4>

0800a440 <_free_r>:
 800a440:	b538      	push	{r3, r4, r5, lr}
 800a442:	4605      	mov	r5, r0
 800a444:	2900      	cmp	r1, #0
 800a446:	d043      	beq.n	800a4d0 <_free_r+0x90>
 800a448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a44c:	1f0c      	subs	r4, r1, #4
 800a44e:	2b00      	cmp	r3, #0
 800a450:	bfb8      	it	lt
 800a452:	18e4      	addlt	r4, r4, r3
 800a454:	f000 f8ee 	bl	800a634 <__malloc_lock>
 800a458:	4a1e      	ldr	r2, [pc, #120]	; (800a4d4 <_free_r+0x94>)
 800a45a:	6813      	ldr	r3, [r2, #0]
 800a45c:	4610      	mov	r0, r2
 800a45e:	b933      	cbnz	r3, 800a46e <_free_r+0x2e>
 800a460:	6063      	str	r3, [r4, #4]
 800a462:	6014      	str	r4, [r2, #0]
 800a464:	4628      	mov	r0, r5
 800a466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a46a:	f000 b8e9 	b.w	800a640 <__malloc_unlock>
 800a46e:	42a3      	cmp	r3, r4
 800a470:	d90a      	bls.n	800a488 <_free_r+0x48>
 800a472:	6821      	ldr	r1, [r4, #0]
 800a474:	1862      	adds	r2, r4, r1
 800a476:	4293      	cmp	r3, r2
 800a478:	bf01      	itttt	eq
 800a47a:	681a      	ldreq	r2, [r3, #0]
 800a47c:	685b      	ldreq	r3, [r3, #4]
 800a47e:	1852      	addeq	r2, r2, r1
 800a480:	6022      	streq	r2, [r4, #0]
 800a482:	6063      	str	r3, [r4, #4]
 800a484:	6004      	str	r4, [r0, #0]
 800a486:	e7ed      	b.n	800a464 <_free_r+0x24>
 800a488:	461a      	mov	r2, r3
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	b10b      	cbz	r3, 800a492 <_free_r+0x52>
 800a48e:	42a3      	cmp	r3, r4
 800a490:	d9fa      	bls.n	800a488 <_free_r+0x48>
 800a492:	6811      	ldr	r1, [r2, #0]
 800a494:	1850      	adds	r0, r2, r1
 800a496:	42a0      	cmp	r0, r4
 800a498:	d10b      	bne.n	800a4b2 <_free_r+0x72>
 800a49a:	6820      	ldr	r0, [r4, #0]
 800a49c:	4401      	add	r1, r0
 800a49e:	1850      	adds	r0, r2, r1
 800a4a0:	4283      	cmp	r3, r0
 800a4a2:	6011      	str	r1, [r2, #0]
 800a4a4:	d1de      	bne.n	800a464 <_free_r+0x24>
 800a4a6:	6818      	ldr	r0, [r3, #0]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	4401      	add	r1, r0
 800a4ac:	6011      	str	r1, [r2, #0]
 800a4ae:	6053      	str	r3, [r2, #4]
 800a4b0:	e7d8      	b.n	800a464 <_free_r+0x24>
 800a4b2:	d902      	bls.n	800a4ba <_free_r+0x7a>
 800a4b4:	230c      	movs	r3, #12
 800a4b6:	602b      	str	r3, [r5, #0]
 800a4b8:	e7d4      	b.n	800a464 <_free_r+0x24>
 800a4ba:	6820      	ldr	r0, [r4, #0]
 800a4bc:	1821      	adds	r1, r4, r0
 800a4be:	428b      	cmp	r3, r1
 800a4c0:	bf01      	itttt	eq
 800a4c2:	6819      	ldreq	r1, [r3, #0]
 800a4c4:	685b      	ldreq	r3, [r3, #4]
 800a4c6:	1809      	addeq	r1, r1, r0
 800a4c8:	6021      	streq	r1, [r4, #0]
 800a4ca:	6063      	str	r3, [r4, #4]
 800a4cc:	6054      	str	r4, [r2, #4]
 800a4ce:	e7c9      	b.n	800a464 <_free_r+0x24>
 800a4d0:	bd38      	pop	{r3, r4, r5, pc}
 800a4d2:	bf00      	nop
 800a4d4:	2000244c 	.word	0x2000244c

0800a4d8 <_malloc_r>:
 800a4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4da:	1ccd      	adds	r5, r1, #3
 800a4dc:	f025 0503 	bic.w	r5, r5, #3
 800a4e0:	3508      	adds	r5, #8
 800a4e2:	2d0c      	cmp	r5, #12
 800a4e4:	bf38      	it	cc
 800a4e6:	250c      	movcc	r5, #12
 800a4e8:	2d00      	cmp	r5, #0
 800a4ea:	4606      	mov	r6, r0
 800a4ec:	db01      	blt.n	800a4f2 <_malloc_r+0x1a>
 800a4ee:	42a9      	cmp	r1, r5
 800a4f0:	d903      	bls.n	800a4fa <_malloc_r+0x22>
 800a4f2:	230c      	movs	r3, #12
 800a4f4:	6033      	str	r3, [r6, #0]
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4fa:	f000 f89b 	bl	800a634 <__malloc_lock>
 800a4fe:	4921      	ldr	r1, [pc, #132]	; (800a584 <_malloc_r+0xac>)
 800a500:	680a      	ldr	r2, [r1, #0]
 800a502:	4614      	mov	r4, r2
 800a504:	b99c      	cbnz	r4, 800a52e <_malloc_r+0x56>
 800a506:	4f20      	ldr	r7, [pc, #128]	; (800a588 <_malloc_r+0xb0>)
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	b923      	cbnz	r3, 800a516 <_malloc_r+0x3e>
 800a50c:	4621      	mov	r1, r4
 800a50e:	4630      	mov	r0, r6
 800a510:	f000 f83c 	bl	800a58c <_sbrk_r>
 800a514:	6038      	str	r0, [r7, #0]
 800a516:	4629      	mov	r1, r5
 800a518:	4630      	mov	r0, r6
 800a51a:	f000 f837 	bl	800a58c <_sbrk_r>
 800a51e:	1c43      	adds	r3, r0, #1
 800a520:	d123      	bne.n	800a56a <_malloc_r+0x92>
 800a522:	230c      	movs	r3, #12
 800a524:	4630      	mov	r0, r6
 800a526:	6033      	str	r3, [r6, #0]
 800a528:	f000 f88a 	bl	800a640 <__malloc_unlock>
 800a52c:	e7e3      	b.n	800a4f6 <_malloc_r+0x1e>
 800a52e:	6823      	ldr	r3, [r4, #0]
 800a530:	1b5b      	subs	r3, r3, r5
 800a532:	d417      	bmi.n	800a564 <_malloc_r+0x8c>
 800a534:	2b0b      	cmp	r3, #11
 800a536:	d903      	bls.n	800a540 <_malloc_r+0x68>
 800a538:	6023      	str	r3, [r4, #0]
 800a53a:	441c      	add	r4, r3
 800a53c:	6025      	str	r5, [r4, #0]
 800a53e:	e004      	b.n	800a54a <_malloc_r+0x72>
 800a540:	6863      	ldr	r3, [r4, #4]
 800a542:	42a2      	cmp	r2, r4
 800a544:	bf0c      	ite	eq
 800a546:	600b      	streq	r3, [r1, #0]
 800a548:	6053      	strne	r3, [r2, #4]
 800a54a:	4630      	mov	r0, r6
 800a54c:	f000 f878 	bl	800a640 <__malloc_unlock>
 800a550:	f104 000b 	add.w	r0, r4, #11
 800a554:	1d23      	adds	r3, r4, #4
 800a556:	f020 0007 	bic.w	r0, r0, #7
 800a55a:	1ac2      	subs	r2, r0, r3
 800a55c:	d0cc      	beq.n	800a4f8 <_malloc_r+0x20>
 800a55e:	1a1b      	subs	r3, r3, r0
 800a560:	50a3      	str	r3, [r4, r2]
 800a562:	e7c9      	b.n	800a4f8 <_malloc_r+0x20>
 800a564:	4622      	mov	r2, r4
 800a566:	6864      	ldr	r4, [r4, #4]
 800a568:	e7cc      	b.n	800a504 <_malloc_r+0x2c>
 800a56a:	1cc4      	adds	r4, r0, #3
 800a56c:	f024 0403 	bic.w	r4, r4, #3
 800a570:	42a0      	cmp	r0, r4
 800a572:	d0e3      	beq.n	800a53c <_malloc_r+0x64>
 800a574:	1a21      	subs	r1, r4, r0
 800a576:	4630      	mov	r0, r6
 800a578:	f000 f808 	bl	800a58c <_sbrk_r>
 800a57c:	3001      	adds	r0, #1
 800a57e:	d1dd      	bne.n	800a53c <_malloc_r+0x64>
 800a580:	e7cf      	b.n	800a522 <_malloc_r+0x4a>
 800a582:	bf00      	nop
 800a584:	2000244c 	.word	0x2000244c
 800a588:	20002450 	.word	0x20002450

0800a58c <_sbrk_r>:
 800a58c:	b538      	push	{r3, r4, r5, lr}
 800a58e:	2300      	movs	r3, #0
 800a590:	4d05      	ldr	r5, [pc, #20]	; (800a5a8 <_sbrk_r+0x1c>)
 800a592:	4604      	mov	r4, r0
 800a594:	4608      	mov	r0, r1
 800a596:	602b      	str	r3, [r5, #0]
 800a598:	f7fc ff00 	bl	800739c <_sbrk>
 800a59c:	1c43      	adds	r3, r0, #1
 800a59e:	d102      	bne.n	800a5a6 <_sbrk_r+0x1a>
 800a5a0:	682b      	ldr	r3, [r5, #0]
 800a5a2:	b103      	cbz	r3, 800a5a6 <_sbrk_r+0x1a>
 800a5a4:	6023      	str	r3, [r4, #0]
 800a5a6:	bd38      	pop	{r3, r4, r5, pc}
 800a5a8:	20002628 	.word	0x20002628

0800a5ac <_raise_r>:
 800a5ac:	291f      	cmp	r1, #31
 800a5ae:	b538      	push	{r3, r4, r5, lr}
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	460d      	mov	r5, r1
 800a5b4:	d904      	bls.n	800a5c0 <_raise_r+0x14>
 800a5b6:	2316      	movs	r3, #22
 800a5b8:	6003      	str	r3, [r0, #0]
 800a5ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5be:	bd38      	pop	{r3, r4, r5, pc}
 800a5c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a5c2:	b112      	cbz	r2, 800a5ca <_raise_r+0x1e>
 800a5c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5c8:	b94b      	cbnz	r3, 800a5de <_raise_r+0x32>
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	f000 f830 	bl	800a630 <_getpid_r>
 800a5d0:	462a      	mov	r2, r5
 800a5d2:	4601      	mov	r1, r0
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5da:	f000 b817 	b.w	800a60c <_kill_r>
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d00a      	beq.n	800a5f8 <_raise_r+0x4c>
 800a5e2:	1c59      	adds	r1, r3, #1
 800a5e4:	d103      	bne.n	800a5ee <_raise_r+0x42>
 800a5e6:	2316      	movs	r3, #22
 800a5e8:	6003      	str	r3, [r0, #0]
 800a5ea:	2001      	movs	r0, #1
 800a5ec:	e7e7      	b.n	800a5be <_raise_r+0x12>
 800a5ee:	2400      	movs	r4, #0
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a5f6:	4798      	blx	r3
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	e7e0      	b.n	800a5be <_raise_r+0x12>

0800a5fc <raise>:
 800a5fc:	4b02      	ldr	r3, [pc, #8]	; (800a608 <raise+0xc>)
 800a5fe:	4601      	mov	r1, r0
 800a600:	6818      	ldr	r0, [r3, #0]
 800a602:	f7ff bfd3 	b.w	800a5ac <_raise_r>
 800a606:	bf00      	nop
 800a608:	20000074 	.word	0x20000074

0800a60c <_kill_r>:
 800a60c:	b538      	push	{r3, r4, r5, lr}
 800a60e:	2300      	movs	r3, #0
 800a610:	4d06      	ldr	r5, [pc, #24]	; (800a62c <_kill_r+0x20>)
 800a612:	4604      	mov	r4, r0
 800a614:	4608      	mov	r0, r1
 800a616:	4611      	mov	r1, r2
 800a618:	602b      	str	r3, [r5, #0]
 800a61a:	f7fc feb1 	bl	8007380 <_kill>
 800a61e:	1c43      	adds	r3, r0, #1
 800a620:	d102      	bne.n	800a628 <_kill_r+0x1c>
 800a622:	682b      	ldr	r3, [r5, #0]
 800a624:	b103      	cbz	r3, 800a628 <_kill_r+0x1c>
 800a626:	6023      	str	r3, [r4, #0]
 800a628:	bd38      	pop	{r3, r4, r5, pc}
 800a62a:	bf00      	nop
 800a62c:	20002628 	.word	0x20002628

0800a630 <_getpid_r>:
 800a630:	f7fc bea4 	b.w	800737c <_getpid>

0800a634 <__malloc_lock>:
 800a634:	4801      	ldr	r0, [pc, #4]	; (800a63c <__malloc_lock+0x8>)
 800a636:	f000 b809 	b.w	800a64c <__retarget_lock_acquire_recursive>
 800a63a:	bf00      	nop
 800a63c:	20002630 	.word	0x20002630

0800a640 <__malloc_unlock>:
 800a640:	4801      	ldr	r0, [pc, #4]	; (800a648 <__malloc_unlock+0x8>)
 800a642:	f000 b804 	b.w	800a64e <__retarget_lock_release_recursive>
 800a646:	bf00      	nop
 800a648:	20002630 	.word	0x20002630

0800a64c <__retarget_lock_acquire_recursive>:
 800a64c:	4770      	bx	lr

0800a64e <__retarget_lock_release_recursive>:
 800a64e:	4770      	bx	lr

0800a650 <_init>:
 800a650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a652:	bf00      	nop
 800a654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a656:	bc08      	pop	{r3}
 800a658:	469e      	mov	lr, r3
 800a65a:	4770      	bx	lr

0800a65c <_fini>:
 800a65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a65e:	bf00      	nop
 800a660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a662:	bc08      	pop	{r3}
 800a664:	469e      	mov	lr, r3
 800a666:	4770      	bx	lr
